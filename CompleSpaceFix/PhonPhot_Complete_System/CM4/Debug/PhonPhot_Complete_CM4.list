
PhonPhot_Complete_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010320  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000dc508  081105c0  081105c0  000205c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081ecac8  081ecac8  000fcac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081ecad0  081ecad0  000fcad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081ecad4  081ecad4  000fcad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b10  1000004c  081ecad8  0010004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001a11c  10000b60  081ed5e8  00100b60  2**5
                  ALLOC
  8 ._user_heap_stack 00002004  1001ac7c  081ed5e8  0010ac7c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0011004c  2**0
                  CONTENTS, READONLY
 10 .comment      000000e6  00000000  00000000  0011007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028c08  00000000  00000000  00110162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000509f  00000000  00000000  00138d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000d76b  00000000  00000000  0013de09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0014b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cc  00000000  00000000  0014c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000407b6  00000000  00000000  0014ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b280  00000000  00000000  0018e58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a6baa  00000000  00000000  001b980a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005360  00000000  00000000  003603b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .ipc_data     0000004c  10000000  10000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .debug_line_str 00000081  00000000  00000000  00365714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000b60 	.word	0x10000b60
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081105a8 	.word	0x081105a8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000b64 	.word	0x10000b64
 81002dc:	081105a8 	.word	0x081105a8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b07      	ldr	r3, [pc, #28]	; (8101120 <SystemInit+0x20>)
 8101102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8101106:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 810110a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810110e:	691a      	ldr	r2, [r3, #16]
 8101110:	f042 0210 	orr.w	r2, r2, #16
 8101114:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101116:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810111a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101124:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101126:	2400      	movs	r4, #0
{
 8101128:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 810112a:	221c      	movs	r2, #28
 810112c:	4621      	mov	r1, r4
 810112e:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8101130:	e9cd 4400 	strd	r4, r4, [sp]
 8101134:	9402      	str	r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101136:	f00a fc0b 	bl	810b950 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810113a:	482b      	ldr	r0, [pc, #172]	; (81011e8 <MX_ADC1_Init+0xc4>)
 810113c:	4b2b      	ldr	r3, [pc, #172]	; (81011ec <MX_ADC1_Init+0xc8>)
 810113e:	6003      	str	r3, [r0, #0]
  //hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101140:	f04f 0e01 	mov.w	lr, #1
 8101144:	2304      	movs	r3, #4
 8101146:	e9c0 e303 	strd	lr, r3, [r0, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 3;
 810114a:	2303      	movs	r3, #3
 810114c:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 810114e:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8101152:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8101156:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101158:	8284      	strh	r4, [r0, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 810115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 810115e:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101162:	e9c0 340c 	strd	r3, r4, [r0, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8101166:	6084      	str	r4, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101168:	7704      	strb	r4, [r0, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 810116a:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810116e:	f002 f86f 	bl	8103250 <HAL_ADC_Init>
 8101172:	b108      	cbz	r0, 8101178 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8101174:	f001 f8ea 	bl	810234c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101178:	481b      	ldr	r0, [pc, #108]	; (81011e8 <MX_ADC1_Init+0xc4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810117a:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810117c:	4669      	mov	r1, sp
 810117e:	f002 f97b 	bl	8103478 <HAL_ADCEx_MultiModeConfigChannel>
 8101182:	b108      	cbz	r0, 8101188 <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 8101184:	f001 f8e2 	bl	810234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101188:	4819      	ldr	r0, [pc, #100]	; (81011f0 <MX_ADC1_Init+0xcc>)
 810118a:	2306      	movs	r3, #6
 810118c:	e9cd 0303 	strd	r0, r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101190:	2403      	movs	r4, #3
 8101192:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8101196:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 810119a:	f04f 0c04 	mov.w	ip, #4
 810119e:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011a0:	4811      	ldr	r0, [pc, #68]	; (81011e8 <MX_ADC1_Init+0xc4>)
  sConfig.OffsetSignedSaturation = DISABLE;
 81011a2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011a6:	a903      	add	r1, sp, #12
  sConfig.Offset = 0;
 81011a8:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011ac:	f001 fd8e 	bl	8102ccc <HAL_ADC_ConfigChannel>
 81011b0:	b108      	cbz	r0, 81011b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 81011b2:	f001 f8cb 	bl	810234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81011b6:	2101      	movs	r1, #1
 81011b8:	230c      	movs	r3, #12
 81011ba:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011be:	480a      	ldr	r0, [pc, #40]	; (81011e8 <MX_ADC1_Init+0xc4>)
 81011c0:	eb0d 0103 	add.w	r1, sp, r3
 81011c4:	f001 fd82 	bl	8102ccc <HAL_ADC_ConfigChannel>
 81011c8:	b108      	cbz	r0, 81011ce <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81011ca:	f001 f8bf 	bl	810234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011ce:	4a09      	ldr	r2, [pc, #36]	; (81011f4 <MX_ADC1_Init+0xd0>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011d0:	4805      	ldr	r0, [pc, #20]	; (81011e8 <MX_ADC1_Init+0xc4>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011d2:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011d4:	a903      	add	r1, sp, #12
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011da:	f001 fd77 	bl	8102ccc <HAL_ADC_ConfigChannel>
 81011de:	b108      	cbz	r0, 81011e4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 81011e0:	f001 f8b4 	bl	810234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81011e4:	b00a      	add	sp, #40	; 0x28
 81011e6:	bd10      	pop	{r4, pc}
 81011e8:	10000b7c 	.word	0x10000b7c
 81011ec:	40022000 	.word	0x40022000
 81011f0:	2a000400 	.word	0x2a000400
 81011f4:	04300002 	.word	0x04300002

081011f8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 81011f8:	b500      	push	{lr}
 81011fa:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81011fc:	221c      	movs	r2, #28
 81011fe:	2100      	movs	r1, #0
 8101200:	a801      	add	r0, sp, #4
 8101202:	f00a fba5 	bl	810b950 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8101206:	4828      	ldr	r0, [pc, #160]	; (81012a8 <MX_ADC3_Init+0xb0>)
 8101208:	4b28      	ldr	r3, [pc, #160]	; (81012ac <MX_ADC3_Init+0xb4>)
 810120a:	6003      	str	r3, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 810120c:	2201      	movs	r2, #1
 810120e:	2300      	movs	r3, #0
 8101210:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101214:	2204      	movs	r2, #4
 8101216:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 3;
 8101218:	2203      	movs	r2, #3
 810121a:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 810121c:	f44f 6c90 	mov.w	ip, #1152	; 0x480
 8101220:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8101224:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8101226:	8283      	strh	r3, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8101228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 810122c:	e9c0 c109 	strd	ip, r1, [r0, #36]	; 0x24
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101230:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8101234:	7703      	strb	r3, [r0, #28]
  hadc3.Init.OversamplingMode = DISABLE;
 8101236:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 810123a:	f002 f809 	bl	8103250 <HAL_ADC_Init>
 810123e:	b108      	cbz	r0, 8101244 <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8101240:	f001 f884 	bl	810234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101244:	481a      	ldr	r0, [pc, #104]	; (81012b0 <MX_ADC3_Init+0xb8>)
 8101246:	2306      	movs	r3, #6
 8101248:	e9cd 0301 	strd	r0, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810124c:	f04f 0c03 	mov.w	ip, #3
 8101250:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8101254:	e9cd c303 	strd	ip, r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 8101258:	f04f 0e04 	mov.w	lr, #4
 810125c:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810125e:	4812      	ldr	r0, [pc, #72]	; (81012a8 <MX_ADC3_Init+0xb0>)
  sConfig.OffsetSignedSaturation = DISABLE;
 8101260:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101264:	a901      	add	r1, sp, #4
  sConfig.Offset = 0;
 8101266:	e9cd e305 	strd	lr, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810126a:	f001 fd2f 	bl	8102ccc <HAL_ADC_ConfigChannel>
 810126e:	b108      	cbz	r0, 8101274 <MX_ADC3_Init+0x7c>
  {
    Error_Handler();
 8101270:	f001 f86c 	bl	810234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8101274:	2101      	movs	r1, #1
 8101276:	230c      	movs	r3, #12
 8101278:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810127c:	480a      	ldr	r0, [pc, #40]	; (81012a8 <MX_ADC3_Init+0xb0>)
 810127e:	a901      	add	r1, sp, #4
 8101280:	f001 fd24 	bl	8102ccc <HAL_ADC_ConfigChannel>
 8101284:	b108      	cbz	r0, 810128a <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8101286:	f001 f861 	bl	810234c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 810128a:	4a0a      	ldr	r2, [pc, #40]	; (81012b4 <MX_ADC3_Init+0xbc>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810128c:	4806      	ldr	r0, [pc, #24]	; (81012a8 <MX_ADC3_Init+0xb0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 810128e:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101290:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8101292:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101296:	f001 fd19 	bl	8102ccc <HAL_ADC_ConfigChannel>
 810129a:	b108      	cbz	r0, 81012a0 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 810129c:	f001 f856 	bl	810234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81012a0:	b009      	add	sp, #36	; 0x24
 81012a2:	f85d fb04 	ldr.w	pc, [sp], #4
 81012a6:	bf00      	nop
 81012a8:	10000be0 	.word	0x10000be0
 81012ac:	58026000 	.word	0x58026000
 81012b0:	1d500080 	.word	0x1d500080
 81012b4:	04300002 	.word	0x04300002

081012b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81012b8:	b570      	push	{r4, r5, r6, lr}
 81012ba:	4605      	mov	r5, r0
 81012bc:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012be:	2214      	movs	r2, #20
 81012c0:	2100      	movs	r1, #0
 81012c2:	a807      	add	r0, sp, #28
 81012c4:	f00a fb44 	bl	810b950 <memset>
  if(adcHandle->Instance==ADC1)
 81012c8:	682b      	ldr	r3, [r5, #0]
 81012ca:	4a55      	ldr	r2, [pc, #340]	; (8101420 <HAL_ADC_MspInit+0x168>)
 81012cc:	4293      	cmp	r3, r2
 81012ce:	d158      	bne.n	8101382 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012d0:	4b54      	ldr	r3, [pc, #336]	; (8101424 <HAL_ADC_MspInit+0x16c>)

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 81012d2:	4c55      	ldr	r4, [pc, #340]	; (8101428 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012d4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 81012d8:	4e54      	ldr	r6, [pc, #336]	; (810142c <HAL_ADC_MspInit+0x174>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012da:	f042 0220 	orr.w	r2, r2, #32
 81012de:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 81012e2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 81012e6:	f002 0220 	and.w	r2, r2, #32
 81012ea:	9201      	str	r2, [sp, #4]
 81012ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81012ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81012f2:	f042 0204 	orr.w	r2, r2, #4
 81012f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81012fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81012fe:	f002 0204 	and.w	r2, r2, #4
 8101302:	9202      	str	r2, [sp, #8]
 8101304:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101306:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810130a:	f042 0201 	orr.w	r2, r2, #1
 810130e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101316:	f003 0301 	and.w	r3, r3, #1
 810131a:	9303      	str	r3, [sp, #12]
 810131c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810131e:	2001      	movs	r0, #1
 8101320:	2303      	movs	r3, #3
 8101322:	e9cd 0307 	strd	r0, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 8101326:	a907      	add	r1, sp, #28
 8101328:	4841      	ldr	r0, [pc, #260]	; (8101430 <HAL_ADC_MspInit+0x178>)
 810132a:	f003 f9f3 	bl	8104714 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 810132e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8101332:	4608      	mov	r0, r1
 8101334:	f001 fca8 	bl	8102c88 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8101338:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 810133c:	4608      	mov	r0, r1
 810133e:	f001 fca3 	bl	8102c88 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8101342:	2309      	movs	r3, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101348:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810134c:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101350:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101354:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8101356:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
 810135a:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 810135e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8101362:	e9c4 e206 	strd	lr, r2, [r4, #24]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8101366:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810136a:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 810136e:	4620      	mov	r0, r4
 8101370:	f002 fae8 	bl	8103944 <HAL_DMA_Init>
 8101374:	b108      	cbz	r0, 810137a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8101376:	f000 ffe9 	bl	810234c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 810137a:	64ec      	str	r4, [r5, #76]	; 0x4c
 810137c:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 810137e:	b00c      	add	sp, #48	; 0x30
 8101380:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC3)
 8101382:	4a2c      	ldr	r2, [pc, #176]	; (8101434 <HAL_ADC_MspInit+0x17c>)
 8101384:	4293      	cmp	r3, r2
 8101386:	d1fa      	bne.n	810137e <HAL_ADC_MspInit+0xc6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101388:	4b26      	ldr	r3, [pc, #152]	; (8101424 <HAL_ADC_MspInit+0x16c>)
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 810138a:	482b      	ldr	r0, [pc, #172]	; (8101438 <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 810138c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc3.Instance = DMA1_Stream1;
 8101390:	4c2a      	ldr	r4, [pc, #168]	; (810143c <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101392:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8101396:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810139a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810139e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 81013a2:	9204      	str	r2, [sp, #16]
 81013a4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81013a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013aa:	f042 0220 	orr.w	r2, r2, #32
 81013ae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013b6:	f002 0220 	and.w	r2, r2, #32
 81013ba:	9205      	str	r2, [sp, #20]
 81013bc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81013be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013c2:	f042 0204 	orr.w	r2, r2, #4
 81013c6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013ce:	f003 0304 	and.w	r3, r3, #4
 81013d2:	9306      	str	r3, [sp, #24]
 81013d4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013d6:	f44f 7680 	mov.w	r6, #256	; 0x100
 81013da:	2303      	movs	r3, #3
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013dc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013de:	e9cd 6307 	strd	r6, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013e2:	f003 f997 	bl	8104714 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81013e6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 81013ea:	4608      	mov	r0, r1
 81013ec:	f001 fc4c 	bl	8102c88 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 81013f4:	4608      	mov	r0, r1
 81013f6:	f001 fc47 	bl	8102c88 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 81013fa:	4a11      	ldr	r2, [pc, #68]	; (8101440 <HAL_ADC_MspInit+0x188>)
 81013fc:	2373      	movs	r3, #115	; 0x73
 81013fe:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8101406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810140a:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810140e:	2300      	movs	r3, #0
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8101410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8101414:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8101418:	e9c4 2606 	strd	r2, r6, [r4, #24]
 810141c:	e7a3      	b.n	8101366 <HAL_ADC_MspInit+0xae>
 810141e:	bf00      	nop
 8101420:	40022000 	.word	0x40022000
 8101424:	58024400 	.word	0x58024400
 8101428:	10000c44 	.word	0x10000c44
 810142c:	40020010 	.word	0x40020010
 8101430:	58020800 	.word	0x58020800
 8101434:	58026000 	.word	0x58026000
 8101438:	58021400 	.word	0x58021400
 810143c:	10000cbc 	.word	0x10000cbc
 8101440:	40020028 	.word	0x40020028

08101444 <limitFloat>:
	}
}

float limitFloat ( float _tested_value, float _min_bound, float _max_bound )
{
  if(_tested_value < _min_bound)
 8101444:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8101448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810144c:	d408      	bmi.n	8101460 <limitFloat+0x1c>
  if(_tested_value > _max_bound)
  {
    return _max_bound;
  }

  return _tested_value;
 810144e:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8101452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101456:	bfd4      	ite	le
 8101458:	eef0 0a40 	vmovle.f32	s1, s0
 810145c:	eef0 0a41 	vmovgt.f32	s1, s2
}
 8101460:	eeb0 0a60 	vmov.f32	s0, s1
 8101464:	4770      	bx	lr
	...

08101468 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101468:	4b14      	ldr	r3, [pc, #80]	; (81014bc <MX_DMA_Init+0x54>)
{
 810146a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 810146c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8101470:	f042 0201 	orr.w	r2, r2, #1
 8101474:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8101478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810147c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 810147e:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101482:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101484:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101486:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101488:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810148a:	f002 f86b 	bl	8103564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810148e:	200b      	movs	r0, #11
 8101490:	f002 f89a 	bl	81035c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101494:	2200      	movs	r2, #0
 8101496:	4611      	mov	r1, r2
 8101498:	200c      	movs	r0, #12
 810149a:	f002 f863 	bl	8103564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 810149e:	200c      	movs	r0, #12
 81014a0:	f002 f892 	bl	81035c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 81014a4:	2200      	movs	r2, #0
 81014a6:	4611      	mov	r1, r2
 81014a8:	202f      	movs	r0, #47	; 0x2f
 81014aa:	f002 f85b 	bl	8103564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014ae:	202f      	movs	r0, #47	; 0x2f

}
 81014b0:	b003      	add	sp, #12
 81014b2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014b6:	f002 b887 	b.w	81035c8 <HAL_NVIC_EnableIRQ>
 81014ba:	bf00      	nop
 81014bc:	58024400 	.word	0x58024400

081014c0 <copySamplesForFFT>:

  //setUserLED1State( FALSE );
}

static void copySamplesForFFT( volatile uint16_t *_source1, volatile uint16_t *_source2 )
{
 81014c0:	b530      	push	{r4, r5, lr}
    // ADC3 packed microphone 1,4,5

    // convert to voltage
    // apply HANN_WINDOW_COEFF
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014c2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 81015ac <copySamplesForFFT+0xec>
 81014c6:	4d3a      	ldr	r5, [pc, #232]	; (81015b0 <copySamplesForFFT+0xf0>)
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014c8:	4c3a      	ldr	r4, [pc, #232]	; (81015b4 <copySamplesForFFT+0xf4>)
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014ca:	2300      	movs	r3, #0
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014cc:	8802      	ldrh	r2, [r0, #0]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014ce:	ecb5 7a01 	vldmia	r5!, {s14}
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014d2:	b292      	uxth	r2, r2
 81014d4:	ee07 2a90 	vmov	s15, r2
 81014d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014dc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014e4:	3006      	adds	r0, #6
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014e6:	ee67 7a87 	vmul.f32	s15, s15, s14
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014ea:	3106      	adds	r1, #6
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014ec:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 81014f0:	f831 2c06 	ldrh.w	r2, [r1, #-6]
 81014f4:	b292      	uxth	r2, r2
 81014f6:	ee07 2a90 	vmov	s15, r2
 81014fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014fe:	f503 7200 	add.w	r2, r3, #512	; 0x200
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101502:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 8101506:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810150a:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 810150e:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101512:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 8101516:	b292      	uxth	r2, r2
 8101518:	ee07 2a90 	vmov	s15, r2
 810151c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101520:	f503 6280 	add.w	r2, r3, #1024	; 0x400
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101524:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101528:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810152c:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101530:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101534:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 8101538:	b292      	uxth	r2, r2
 810153a:	ee07 2a90 	vmov	s15, r2
 810153e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101542:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101546:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 810154a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810154e:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101552:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101556:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 810155a:	b292      	uxth	r2, r2
 810155c:	ee07 2a90 	vmov	s15, r2
 8101560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101564:	f503 6200 	add.w	r2, r3, #2048	; 0x800
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101568:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 810156c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101570:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101574:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101578:	f831 2c02 	ldrh.w	r2, [r1, #-2]
 810157c:	b292      	uxth	r2, r2
 810157e:	ee07 2a90 	vmov	s15, r2
 8101582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101586:	f503 6220 	add.w	r2, r3, #2560	; 0xa00
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810158a:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 810158e:	3301      	adds	r3, #1
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101590:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101594:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 8101598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 810159c:	edc2 7a00 	vstr	s15, [r2]
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81015a0:	d194      	bne.n	81014cc <copySamplesForFFT+0xc>
  }

  // set ready for FFT flag so base loop or an RTOS task can perform the op without blocking interrupts
  fft_samples_ready = TRUE;
 81015a2:	4b05      	ldr	r3, [pc, #20]	; (81015b8 <copySamplesForFFT+0xf8>)
 81015a4:	2201      	movs	r2, #1
 81015a6:	701a      	strb	r2, [r3, #0]
}
 81015a8:	bd30      	pop	{r4, r5, pc}
 81015aa:	bf00      	nop
 81015ac:	38533406 	.word	0x38533406
 81015b0:	081105e0 	.word	0x081105e0
 81015b4:	100156ec 	.word	0x100156ec
 81015b8:	100186ec 	.word	0x100186ec

081015bc <performOutputAudioFIR>:
{
 81015bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81015c0:	4d4d      	ldr	r5, [pc, #308]	; (81016f8 <performOutputAudioFIR+0x13c>)
 81015c2:	f201 4256 	addw	r2, r1, #1110	; 0x456
 81015c6:	f501 6796 	add.w	r7, r1, #1200	; 0x4b0
 81015ca:	46ac      	mov	ip, r5
  int32_t _temp = 0;
 81015cc:	2300      	movs	r3, #0
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 81015ce:	f832 6b02 	ldrh.w	r6, [r2], #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015d2:	f93c 4b02 	ldrsh.w	r4, [ip], #2
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 81015d6:	b236      	sxth	r6, r6
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015d8:	4374      	muls	r4, r6
  for ( _index = 0; _index < 45; _index++ )
 81015da:	42ba      	cmp	r2, r7
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 81015dc:	eb03 4324 	add.w	r3, r3, r4, asr #16
  for ( _index = 0; _index < 45; _index++ )
 81015e0:	d1f5      	bne.n	81015ce <performOutputAudioFIR+0x12>
 81015e2:	f8df c124 	ldr.w	ip, [pc, #292]	; 8101708 <performOutputAudioFIR+0x14c>
 81015e6:	2400      	movs	r4, #0
    _temp += ((int32_t)_current_data_buffer[_index - 45]
 81015e8:	f830 e004 	ldrh.w	lr, [r0, r4]
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015ec:	f83c 6f02 	ldrh.w	r6, [ip, #2]!
  for ( ; _index < 60; _index++ )
 81015f0:	3402      	adds	r4, #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015f2:	fb16 f60e 	smulbb	r6, r6, lr
  for ( ; _index < 60; _index++ )
 81015f6:	2c1e      	cmp	r4, #30
 81015f8:	4602      	mov	r2, r0
    _temp += ((int32_t)_current_data_buffer[_index - 45]
 81015fa:	eb03 4326 	add.w	r3, r3, r6, asr #16
  for ( ; _index < 60; _index++ )
 81015fe:	d1f3      	bne.n	81015e8 <performOutputAudioFIR+0x2c>
  output_audio_filtered_buffer[0] = _temp * output_audio_base_gain;
 8101600:	4c3e      	ldr	r4, [pc, #248]	; (81016fc <performOutputAudioFIR+0x140>)
 8101602:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 81016f8 <performOutputAudioFIR+0x13c>
 8101606:	8826      	ldrh	r6, [r4, #0]
 8101608:	fb13 f306 	smulbb	r3, r3, r6
 810160c:	4e3c      	ldr	r6, [pc, #240]	; (8101700 <performOutputAudioFIR+0x144>)
 810160e:	b21b      	sxth	r3, r3
 8101610:	8033      	strh	r3, [r6, #0]
  for ( _index = 0; _index < 30; _index++ )
 8101612:	f201 4c74 	addw	ip, r1, #1140	; 0x474
  _temp = 0;
 8101616:	2300      	movs	r3, #0
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 8101618:	f83c 8b02 	ldrh.w	r8, [ip], #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810161c:	f939 eb02 	ldrsh.w	lr, [r9], #2
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 8101620:	fa0f f888 	sxth.w	r8, r8
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101624:	fb08 fe0e 	mul.w	lr, r8, lr
  for ( _index = 0; _index < 30; _index++ )
 8101628:	45bc      	cmp	ip, r7
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 810162a:	eb03 432e 	add.w	r3, r3, lr, asr #16
  for ( _index = 0; _index < 30; _index++ )
 810162e:	d1f3      	bne.n	8101618 <performOutputAudioFIR+0x5c>
 8101630:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 810170c <performOutputAudioFIR+0x150>
 8101634:	f04f 0c00 	mov.w	ip, #0
    _temp += ((int32_t)_current_data_buffer[_index - 30]
 8101638:	f830 900c 	ldrh.w	r9, [r0, ip]
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810163c:	f838 ef02 	ldrh.w	lr, [r8, #2]!
  for ( ; _index < 60; _index++ )
 8101640:	f10c 0c02 	add.w	ip, ip, #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101644:	fb1e fe09 	smulbb	lr, lr, r9
  for ( ; _index < 60; _index++ )
 8101648:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    _temp += ((int32_t)_current_data_buffer[_index - 30]
 810164c:	eb03 432e 	add.w	r3, r3, lr, asr #16
  for ( ; _index < 60; _index++ )
 8101650:	d1f2      	bne.n	8101638 <performOutputAudioFIR+0x7c>
  output_audio_filtered_buffer[1] = _temp * output_audio_base_gain;
 8101652:	f8b4 c000 	ldrh.w	ip, [r4]
 8101656:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 81016f8 <performOutputAudioFIR+0x13c>
 810165a:	fb13 f30c 	smulbb	r3, r3, ip
 810165e:	b21b      	sxth	r3, r3
 8101660:	8073      	strh	r3, [r6, #2]
  for ( _index = 0; _index < 15; _index++ )
 8101662:	f201 4192 	addw	r1, r1, #1170	; 0x492
  _temp = 0;
 8101666:	2300      	movs	r3, #0
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 8101668:	f831 eb02 	ldrh.w	lr, [r1], #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810166c:	f938 cb02 	ldrsh.w	ip, [r8], #2
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 8101670:	fa0f fe8e 	sxth.w	lr, lr
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101674:	fb0e fc0c 	mul.w	ip, lr, ip
  for ( _index = 0; _index < 15; _index++ )
 8101678:	42b9      	cmp	r1, r7
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 810167a:	eb03 432c 	add.w	r3, r3, ip, asr #16
  for ( _index = 0; _index < 15; _index++ )
 810167e:	d1f3      	bne.n	8101668 <performOutputAudioFIR+0xac>
 8101680:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8101710 <performOutputAudioFIR+0x154>
 8101684:	2100      	movs	r1, #0
    _temp += ((int32_t)_current_data_buffer[_index - 15]
 8101686:	f830 e001 	ldrh.w	lr, [r0, r1]
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810168a:	f83c 7f02 	ldrh.w	r7, [ip, #2]!
  for ( ; _index < 60; _index++ )
 810168e:	3102      	adds	r1, #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101690:	fb17 f70e 	smulbb	r7, r7, lr
  for ( ; _index < 60; _index++ )
 8101694:	295a      	cmp	r1, #90	; 0x5a
    _temp += ((int32_t)_current_data_buffer[_index - 15]
 8101696:	eb03 4327 	add.w	r3, r3, r7, asr #16
  for ( ; _index < 60; _index++ )
 810169a:	d1f4      	bne.n	8101686 <performOutputAudioFIR+0xca>
  output_audio_filtered_buffer[2] = _temp * output_audio_base_gain;
 810169c:	8821      	ldrh	r1, [r4, #0]
 810169e:	fb13 f301 	smulbb	r3, r3, r1
 81016a2:	b21b      	sxth	r3, r3
 81016a4:	80b3      	strh	r3, [r6, #4]
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 81016a6:	2103      	movs	r1, #3
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016a8:	468e      	mov	lr, r1
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016aa:	46a8      	mov	r8, r5
 81016ac:	3101      	adds	r1, #1
 81016ae:	4613      	mov	r3, r2
    _temp = 0;
 81016b0:	2000      	movs	r0, #0
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016b2:	f102 0978 	add.w	r9, r2, #120	; 0x78
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016b6:	f833 cb02 	ldrh.w	ip, [r3], #2
             * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_tap_index])
 81016ba:	f938 7b02 	ldrsh.w	r7, [r8], #2
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016be:	fa0f fc8c 	sxth.w	ip, ip
             * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_tap_index])
 81016c2:	fb0c f707 	mul.w	r7, ip, r7
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016c6:	454b      	cmp	r3, r9
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016c8:	eb00 4027 	add.w	r0, r0, r7, asr #16
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016cc:	d1f3      	bne.n	81016b6 <performOutputAudioFIR+0xfa>
    output_audio_filtered_buffer[_fir_output_buffer_index] = _temp * output_audio_base_gain;
 81016ce:	8823      	ldrh	r3, [r4, #0]
 81016d0:	fb10 f303 	smulbb	r3, r0, r3
 81016d4:	b21b      	sxth	r3, r3
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 81016d6:	2928      	cmp	r1, #40	; 0x28
    output_audio_filtered_buffer[_fir_output_buffer_index] = _temp * output_audio_base_gain;
 81016d8:	f826 301e 	strh.w	r3, [r6, lr, lsl #1]
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 81016dc:	f102 021e 	add.w	r2, r2, #30
 81016e0:	d1e2      	bne.n	81016a8 <performOutputAudioFIR+0xec>
  if ( !uart_data_flag )
 81016e2:	4b08      	ldr	r3, [pc, #32]	; (8101704 <performOutputAudioFIR+0x148>)
 81016e4:	781b      	ldrb	r3, [r3, #0]
 81016e6:	b923      	cbnz	r3, 81016f2 <performOutputAudioFIR+0x136>
}
 81016e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    playAudio( output_audio_filtered_buffer, OUTPUT_AUDIO_BUFFER_SIZE );
 81016ec:	4804      	ldr	r0, [pc, #16]	; (8101700 <performOutputAudioFIR+0x144>)
 81016ee:	f000 be5f 	b.w	81023b0 <playAudio>
}
 81016f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81016f6:	bf00      	nop
 81016f8:	08110de0 	.word	0x08110de0
 81016fc:	10000064 	.word	0x10000064
 8101700:	10019058 	.word	0x10019058
 8101704:	100190a8 	.word	0x100190a8
 8101708:	08110e38 	.word	0x08110e38
 810170c:	08110e1a 	.word	0x08110e1a
 8101710:	08110dfc 	.word	0x08110dfc

08101714 <ADC3DMATransferCompleteIRQCallback>:
{
 8101714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( debug_output_enable )
 8101718:	4b78      	ldr	r3, [pc, #480]	; (81018fc <ADC3DMATransferCompleteIRQCallback+0x1e8>)
 810171a:	781b      	ldrb	r3, [r3, #0]
{
 810171c:	b093      	sub	sp, #76	; 0x4c
  if ( debug_output_enable )
 810171e:	b123      	cbz	r3, 810172a <ADC3DMATransferCompleteIRQCallback+0x16>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 8101720:	4877      	ldr	r0, [pc, #476]	; (8101900 <ADC3DMATransferCompleteIRQCallback+0x1ec>)
 8101722:	2201      	movs	r2, #1
 8101724:	2104      	movs	r1, #4
 8101726:	f003 f8e3 	bl	81048f0 <HAL_GPIO_WritePin>
  setUserLED1State(TRUE);
 810172a:	2001      	movs	r0, #1
 810172c:	f000 fdfa 	bl	8102324 <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 8101730:	4a74      	ldr	r2, [pc, #464]	; (8101904 <ADC3DMATransferCompleteIRQCallback+0x1f0>)
 8101732:	8813      	ldrh	r3, [r2, #0]
 8101734:	3301      	adds	r3, #1
 8101736:	b29b      	uxth	r3, r3
 8101738:	2b14      	cmp	r3, #20
 810173a:	8013      	strh	r3, [r2, #0]
 810173c:	d105      	bne.n	810174a <ADC3DMATransferCompleteIRQCallback+0x36>
    fft_op_skip_counter = 0;
 810173e:	2300      	movs	r3, #0
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 8101740:	4971      	ldr	r1, [pc, #452]	; (8101908 <ADC3DMATransferCompleteIRQCallback+0x1f4>)
 8101742:	4872      	ldr	r0, [pc, #456]	; (810190c <ADC3DMATransferCompleteIRQCallback+0x1f8>)
    fft_op_skip_counter = 0;
 8101744:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 8101746:	f7ff febb 	bl	81014c0 <copySamplesForFFT>
{
 810174a:	2100      	movs	r1, #0
 810174c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8101750:	e9cd 1102 	strd	r1, r1, [sp, #8]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101754:	4e6e      	ldr	r6, [pc, #440]	; (8101910 <ADC3DMATransferCompleteIRQCallback+0x1fc>)
 8101756:	4b6f      	ldr	r3, [pc, #444]	; (8101914 <ADC3DMATransferCompleteIRQCallback+0x200>)
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 8101758:	4d6f      	ldr	r5, [pc, #444]	; (8101918 <ADC3DMATransferCompleteIRQCallback+0x204>)
{
 810175a:	9101      	str	r1, [sp, #4]
 810175c:	f44f 64e1 	mov.w	r4, #1800	; 0x708
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 8101760:	f44f 7916 	mov.w	r9, #600	; 0x258
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101764:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 8101768:	b292      	uxth	r2, r2
 810176a:	9206      	str	r2, [sp, #24]
 810176c:	881a      	ldrh	r2, [r3, #0]
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 810176e:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 8101772:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8101776:	8858      	ldrh	r0, [r3, #2]
 8101778:	f104 0801 	add.w	r8, r4, #1
 810177c:	b280      	uxth	r0, r0
 810177e:	9007      	str	r0, [sp, #28]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 8101780:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
 8101784:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8101788:	8898      	ldrh	r0, [r3, #4]
 810178a:	f104 0e02 	add.w	lr, r4, #2
 810178e:	b280      	uxth	r0, r0
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 8101790:	f836 c01e 	ldrh.w	ip, [r6, lr, lsl #1]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 8101794:	9008      	str	r0, [sp, #32]
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 8101796:	f8b3 b006 	ldrh.w	fp, [r3, #6]
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 810179a:	f835 7018 	ldrh.w	r7, [r5, r8, lsl #1]
 810179e:	f8b3 a008 	ldrh.w	sl, [r3, #8]
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81017a2:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
 81017a6:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 81017aa:	8958      	ldrh	r0, [r3, #10]
 81017ac:	b280      	uxth	r0, r0
 81017ae:	9009      	str	r0, [sp, #36]	; 0x24
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81017b0:	9806      	ldr	r0, [sp, #24]
 81017b2:	b292      	uxth	r2, r2
 81017b4:	1a82      	subs	r2, r0, r2
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 81017b6:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 81017ba:	fa12 f280 	uxtah	r2, r2, r0
 81017be:	9807      	ldr	r0, [sp, #28]
 81017c0:	1a12      	subs	r2, r2, r0
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81017c2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 81017c6:	fa12 f280 	uxtah	r2, r2, r0
 81017ca:	9808      	ldr	r0, [sp, #32]
 81017cc:	1a12      	subs	r2, r2, r0
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 81017ce:	fa12 fc8c 	uxtah	ip, r2, ip
 81017d2:	fa1f fb8b 	uxth.w	fp, fp
 81017d6:	ebac 0c0b 	sub.w	ip, ip, fp
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81017da:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 81017de:	fa1f fa8a 	uxth.w	sl, sl
 81017e2:	fa1c f787 	uxtah	r7, ip, r7
 81017e6:	eba7 070a 	sub.w	r7, r7, sl
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81017ea:	fa17 f082 	uxtah	r0, r7, r2
 81017ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81017f0:	1a80      	subs	r0, r0, r2
                                                          / 6);
 81017f2:	2206      	movs	r2, #6
 81017f4:	fb90 f0f2 	sdiv	r0, r0, r2
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81017f8:	4a48      	ldr	r2, [pc, #288]	; (810191c <ADC3DMATransferCompleteIRQCallback+0x208>)
 81017fa:	b200      	sxth	r0, r0
 81017fc:	f822 0019 	strh.w	r0, [r2, r9, lsl #1]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101800:	9801      	ldr	r0, [sp, #4]
 8101802:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 8101806:	fa10 f282 	uxtah	r2, r0, r2
 810180a:	9201      	str	r2, [sp, #4]
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 810180c:	9802      	ldr	r0, [sp, #8]
 810180e:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 8101812:	fa10 f282 	uxtah	r2, r0, r2
 8101816:	9202      	str	r2, [sp, #8]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101818:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
 810181c:	9803      	ldr	r0, [sp, #12]
 810181e:	fa10 f282 	uxtah	r2, r0, r2
 8101822:	9203      	str	r2, [sp, #12]
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101824:	9804      	ldr	r0, [sp, #16]
 8101826:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 810182a:	fa10 f282 	uxtah	r2, r0, r2
 810182e:	9204      	str	r2, [sp, #16]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101830:	9805      	ldr	r0, [sp, #20]
 8101832:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 8101836:	fa10 f282 	uxtah	r2, r0, r2
 810183a:	9205      	str	r2, [sp, #20]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810183c:	f109 0901 	add.w	r9, r9, #1
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101840:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 8101844:	f5b9 6f96 	cmp.w	r9, #1200	; 0x4b0
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101848:	fa11 f182 	uxtah	r1, r1, r2
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810184c:	f104 0403 	add.w	r4, r4, #3
 8101850:	d188      	bne.n	8101764 <ADC3DMATransferCompleteIRQCallback+0x50>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101852:	f44f 7216 	mov.w	r2, #600	; 0x258
 8101856:	9801      	ldr	r0, [sp, #4]
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101858:	fbb1 f1f2 	udiv	r1, r1, r2
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810185c:	fbb0 f0f2 	udiv	r0, r0, r2
 8101860:	4c2f      	ldr	r4, [pc, #188]	; (8101920 <ADC3DMATransferCompleteIRQCallback+0x20c>)
 8101862:	900c      	str	r0, [sp, #48]	; 0x30
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101864:	9802      	ldr	r0, [sp, #8]
 8101866:	fbb0 f0f2 	udiv	r0, r0, r2
 810186a:	900d      	str	r0, [sp, #52]	; 0x34
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810186c:	9803      	ldr	r0, [sp, #12]
 810186e:	fbb0 f0f2 	udiv	r0, r0, r2
 8101872:	900e      	str	r0, [sp, #56]	; 0x38
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101874:	9804      	ldr	r0, [sp, #16]
 8101876:	fbb0 f0f2 	udiv	r0, r0, r2
 810187a:	900f      	str	r0, [sp, #60]	; 0x3c
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810187c:	9805      	ldr	r0, [sp, #20]
 810187e:	fbb0 f0f2 	udiv	r0, r0, r2
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101882:	2200      	movs	r2, #0
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101884:	9010      	str	r0, [sp, #64]	; 0x40
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101886:	9111      	str	r1, [sp, #68]	; 0x44
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101888:	a80c      	add	r0, sp, #48	; 0x30
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 810188a:	f644 651e 	movw	r5, #19998	; 0x4e1e
      channel_is_valid[_channel] = FALSE;
 810188e:	4616      	mov	r6, r2
      channel_is_valid[_channel] = TRUE;
 8101890:	2701      	movs	r7, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101892:	f850 cb04 	ldr.w	ip, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 8101896:	f5ac 41b1 	sub.w	r1, ip, #22656	; 0x5880
 810189a:	3970      	subs	r1, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 810189c:	42a9      	cmp	r1, r5
 810189e:	d828      	bhi.n	81018f2 <ADC3DMATransferCompleteIRQCallback+0x1de>
      channel_is_valid[_channel] = TRUE;
 81018a0:	54a7      	strb	r7, [r4, r2]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81018a2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 81018a6:	b289      	uxth	r1, r1
 81018a8:	458c      	cmp	ip, r1
        adc_channel_dynamic_offsets[_channel]++;
 81018aa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81018ae:	d919      	bls.n	81018e4 <ADC3DMATransferCompleteIRQCallback+0x1d0>
        adc_channel_dynamic_offsets[_channel]++;
 81018b0:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 81018b2:	b289      	uxth	r1, r1
 81018b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81018b8:	3201      	adds	r2, #1
 81018ba:	2a06      	cmp	r2, #6
 81018bc:	d1e9      	bne.n	8101892 <ADC3DMATransferCompleteIRQCallback+0x17e>
  performOutputAudioFIR( &output_audio_filter_input_buffer[ADC_BUFFER_SAMPLES_PER_CHANNEL / 2], &output_audio_filter_input_buffer[0] );
 81018be:	4917      	ldr	r1, [pc, #92]	; (810191c <ADC3DMATransferCompleteIRQCallback+0x208>)
 81018c0:	f501 6096 	add.w	r0, r1, #1200	; 0x4b0
 81018c4:	f7ff fe7a 	bl	81015bc <performOutputAudioFIR>
  setUserLED1State(FALSE);
 81018c8:	2000      	movs	r0, #0
 81018ca:	f000 fd2b 	bl	8102324 <setUserLED1State>
  if ( debug_output_enable )
 81018ce:	4b0b      	ldr	r3, [pc, #44]	; (81018fc <ADC3DMATransferCompleteIRQCallback+0x1e8>)
 81018d0:	781b      	ldrb	r3, [r3, #0]
 81018d2:	b183      	cbz	r3, 81018f6 <ADC3DMATransferCompleteIRQCallback+0x1e2>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81018d4:	480a      	ldr	r0, [pc, #40]	; (8101900 <ADC3DMATransferCompleteIRQCallback+0x1ec>)
 81018d6:	2200      	movs	r2, #0
 81018d8:	2104      	movs	r1, #4
}
 81018da:	b013      	add	sp, #76	; 0x4c
 81018dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81018e0:	f003 b806 	b.w	81048f0 <HAL_GPIO_WritePin>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 81018e4:	b289      	uxth	r1, r1
 81018e6:	458c      	cmp	ip, r1
 81018e8:	d2e6      	bcs.n	81018b8 <ADC3DMATransferCompleteIRQCallback+0x1a4>
        adc_channel_dynamic_offsets[_channel]--;
 81018ea:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 81018ee:	3901      	subs	r1, #1
 81018f0:	e7df      	b.n	81018b2 <ADC3DMATransferCompleteIRQCallback+0x19e>
      channel_is_valid[_channel] = FALSE;
 81018f2:	54a6      	strb	r6, [r4, r2]
 81018f4:	e7e0      	b.n	81018b8 <ADC3DMATransferCompleteIRQCallback+0x1a4>
}
 81018f6:	b013      	add	sp, #76	; 0x4c
 81018f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81018fc:	10004590 	.word	0x10004590
 8101900:	58022000 	.word	0x58022000
 8101904:	100126e4 	.word	0x100126e4
 8101908:	10003764 	.word	0x10003764
 810190c:	10001b44 	.word	0x10001b44
 8101910:	10000d34 	.word	0x10000d34
 8101914:	10000054 	.word	0x10000054
 8101918:	10002954 	.word	0x10002954
 810191c:	100186f8 	.word	0x100186f8
 8101920:	1000458a 	.word	0x1000458a

08101924 <ADC3DMAHalfTransferIRQCallback>:
{
 8101924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( debug_output_enable )
 8101928:	4b77      	ldr	r3, [pc, #476]	; (8101b08 <ADC3DMAHalfTransferIRQCallback+0x1e4>)
 810192a:	781b      	ldrb	r3, [r3, #0]
{
 810192c:	b093      	sub	sp, #76	; 0x4c
  if ( debug_output_enable )
 810192e:	b123      	cbz	r3, 810193a <ADC3DMAHalfTransferIRQCallback+0x16>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 8101930:	4876      	ldr	r0, [pc, #472]	; (8101b0c <ADC3DMAHalfTransferIRQCallback+0x1e8>)
 8101932:	2201      	movs	r2, #1
 8101934:	2104      	movs	r1, #4
 8101936:	f002 ffdb 	bl	81048f0 <HAL_GPIO_WritePin>
  setUserLED1State(TRUE);
 810193a:	2001      	movs	r0, #1
 810193c:	f000 fcf2 	bl	8102324 <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 8101940:	4a73      	ldr	r2, [pc, #460]	; (8101b10 <ADC3DMAHalfTransferIRQCallback+0x1ec>)
 8101942:	8813      	ldrh	r3, [r2, #0]
 8101944:	3301      	adds	r3, #1
 8101946:	b29b      	uxth	r3, r3
 8101948:	2b14      	cmp	r3, #20
 810194a:	8013      	strh	r3, [r2, #0]
 810194c:	d105      	bne.n	810195a <ADC3DMAHalfTransferIRQCallback+0x36>
    fft_op_skip_counter = 0;
 810194e:	2300      	movs	r3, #0
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 8101950:	4970      	ldr	r1, [pc, #448]	; (8101b14 <ADC3DMAHalfTransferIRQCallback+0x1f0>)
 8101952:	4871      	ldr	r0, [pc, #452]	; (8101b18 <ADC3DMAHalfTransferIRQCallback+0x1f4>)
    fft_op_skip_counter = 0;
 8101954:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 8101956:	f7ff fdb3 	bl	81014c0 <copySamplesForFFT>
{
 810195a:	2300      	movs	r3, #0
 810195c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8101960:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8101964:	e9cd 3301 	strd	r3, r3, [sp, #4]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101968:	4e6b      	ldr	r6, [pc, #428]	; (8101b18 <ADC3DMAHalfTransferIRQCallback+0x1f4>)
 810196a:	4a6c      	ldr	r2, [pc, #432]	; (8101b1c <ADC3DMAHalfTransferIRQCallback+0x1f8>)
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 810196c:	4d69      	ldr	r5, [pc, #420]	; (8101b14 <ADC3DMAHalfTransferIRQCallback+0x1f0>)
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 810196e:	4618      	mov	r0, r3
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101970:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8101974:	b289      	uxth	r1, r1
 8101976:	9107      	str	r1, [sp, #28]
 8101978:	8811      	ldrh	r1, [r2, #0]
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 810197a:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 810197e:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 8101982:	8854      	ldrh	r4, [r2, #2]
 8101984:	f103 0801 	add.w	r8, r3, #1
 8101988:	b2a4      	uxth	r4, r4
 810198a:	9408      	str	r4, [sp, #32]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 810198c:	f836 4018 	ldrh.w	r4, [r6, r8, lsl #1]
 8101990:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 8101994:	8894      	ldrh	r4, [r2, #4]
 8101996:	f103 0e02 	add.w	lr, r3, #2
 810199a:	b2a4      	uxth	r4, r4
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 810199c:	f836 c01e 	ldrh.w	ip, [r6, lr, lsl #1]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81019a0:	9409      	str	r4, [sp, #36]	; 0x24
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 81019a2:	f8b2 b006 	ldrh.w	fp, [r2, #6]
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 81019a6:	f835 7018 	ldrh.w	r7, [r5, r8, lsl #1]
 81019aa:	f8b2 a008 	ldrh.w	sl, [r2, #8]
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019ae:	f835 401e 	ldrh.w	r4, [r5, lr, lsl #1]
 81019b2:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81019b6:	9c07      	ldr	r4, [sp, #28]
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019b8:	f8b2 900a 	ldrh.w	r9, [r2, #10]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81019bc:	b289      	uxth	r1, r1
 81019be:	1a61      	subs	r1, r4, r1
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 81019c0:	f8bd 402a 	ldrh.w	r4, [sp, #42]	; 0x2a
 81019c4:	fa11 f184 	uxtah	r1, r1, r4
 81019c8:	9c08      	ldr	r4, [sp, #32]
 81019ca:	1b09      	subs	r1, r1, r4
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81019cc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 81019d0:	fa11 f184 	uxtah	r1, r1, r4
 81019d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 81019d6:	1b09      	subs	r1, r1, r4
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 81019d8:	fa11 fc8c 	uxtah	ip, r1, ip
 81019dc:	fa1f fb8b 	uxth.w	fp, fp
 81019e0:	ebac 0c0b 	sub.w	ip, ip, fp
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019e4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 81019e8:	fa1f fa8a 	uxth.w	sl, sl
 81019ec:	fa1c f787 	uxtah	r7, ip, r7
 81019f0:	eba7 070a 	sub.w	r7, r7, sl
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019f4:	fa17 f481 	uxtah	r4, r7, r1
 81019f8:	fa1f f989 	uxth.w	r9, r9
                                                          / 6);
 81019fc:	2106      	movs	r1, #6
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019fe:	eba4 0409 	sub.w	r4, r4, r9
                                                          / 6);
 8101a02:	fb94 f4f1 	sdiv	r4, r4, r1
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101a06:	4946      	ldr	r1, [pc, #280]	; (8101b20 <ADC3DMAHalfTransferIRQCallback+0x1fc>)
 8101a08:	b224      	sxth	r4, r4
 8101a0a:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101a0e:	9c01      	ldr	r4, [sp, #4]
 8101a10:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8101a14:	fa14 f181 	uxtah	r1, r4, r1
 8101a18:	9101      	str	r1, [sp, #4]
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101a1a:	9c02      	ldr	r4, [sp, #8]
 8101a1c:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8101a20:	fa14 f181 	uxtah	r1, r4, r1
 8101a24:	9102      	str	r1, [sp, #8]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101a26:	f836 1018 	ldrh.w	r1, [r6, r8, lsl #1]
 8101a2a:	9c03      	ldr	r4, [sp, #12]
 8101a2c:	fa14 f181 	uxtah	r1, r4, r1
 8101a30:	9103      	str	r1, [sp, #12]
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101a32:	9c04      	ldr	r4, [sp, #16]
 8101a34:	f836 101e 	ldrh.w	r1, [r6, lr, lsl #1]
 8101a38:	fa14 f181 	uxtah	r1, r4, r1
 8101a3c:	9104      	str	r1, [sp, #16]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101a3e:	9c05      	ldr	r4, [sp, #20]
 8101a40:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 8101a44:	fa14 f181 	uxtah	r1, r4, r1
 8101a48:	9105      	str	r1, [sp, #20]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a4a:	9c06      	ldr	r4, [sp, #24]
 8101a4c:	f835 101e 	ldrh.w	r1, [r5, lr, lsl #1]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a50:	3001      	adds	r0, #1
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a52:	fa14 f181 	uxtah	r1, r4, r1
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a56:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a5a:	9106      	str	r1, [sp, #24]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a5c:	f103 0303 	add.w	r3, r3, #3
 8101a60:	d186      	bne.n	8101970 <ADC3DMAHalfTransferIRQCallback+0x4c>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a62:	9b01      	ldr	r3, [sp, #4]
 8101a64:	4c2f      	ldr	r4, [pc, #188]	; (8101b24 <ADC3DMAHalfTransferIRQCallback+0x200>)
 8101a66:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a6a:	930c      	str	r3, [sp, #48]	; 0x30
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a6c:	9b02      	ldr	r3, [sp, #8]
 8101a6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a72:	930d      	str	r3, [sp, #52]	; 0x34
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a74:	9b03      	ldr	r3, [sp, #12]
 8101a76:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a7a:	930e      	str	r3, [sp, #56]	; 0x38
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a7c:	9b04      	ldr	r3, [sp, #16]
 8101a7e:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a82:	930f      	str	r3, [sp, #60]	; 0x3c
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a84:	9b05      	ldr	r3, [sp, #20]
 8101a86:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a8a:	9310      	str	r3, [sp, #64]	; 0x40
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101a8c:	2300      	movs	r3, #0
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a8e:	fbb1 f0f0 	udiv	r0, r1, r0
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101a92:	f644 651e 	movw	r5, #19998	; 0x4e1e
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a96:	9011      	str	r0, [sp, #68]	; 0x44
      channel_is_valid[_channel] = FALSE;
 8101a98:	461e      	mov	r6, r3
 8101a9a:	a80c      	add	r0, sp, #48	; 0x30
      channel_is_valid[_channel] = TRUE;
 8101a9c:	2701      	movs	r7, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101a9e:	f850 cb04 	ldr.w	ip, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 8101aa2:	f5ac 41b1 	sub.w	r1, ip, #22656	; 0x5880
 8101aa6:	3970      	subs	r1, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101aa8:	42a9      	cmp	r1, r5
 8101aaa:	d828      	bhi.n	8101afe <ADC3DMAHalfTransferIRQCallback+0x1da>
      channel_is_valid[_channel] = TRUE;
 8101aac:	54e7      	strb	r7, [r4, r3]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101aae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8101ab2:	b289      	uxth	r1, r1
 8101ab4:	458c      	cmp	ip, r1
        adc_channel_dynamic_offsets[_channel]++;
 8101ab6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101aba:	d919      	bls.n	8101af0 <ADC3DMAHalfTransferIRQCallback+0x1cc>
        adc_channel_dynamic_offsets[_channel]++;
 8101abc:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 8101abe:	b289      	uxth	r1, r1
 8101ac0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101ac4:	3301      	adds	r3, #1
 8101ac6:	2b06      	cmp	r3, #6
 8101ac8:	d1e9      	bne.n	8101a9e <ADC3DMAHalfTransferIRQCallback+0x17a>
  performOutputAudioFIR( &output_audio_filter_input_buffer[0], &output_audio_filter_input_buffer[ADC_BUFFER_SAMPLES_PER_CHANNEL / 2] );
 8101aca:	4917      	ldr	r1, [pc, #92]	; (8101b28 <ADC3DMAHalfTransferIRQCallback+0x204>)
 8101acc:	f5a1 6096 	sub.w	r0, r1, #1200	; 0x4b0
 8101ad0:	f7ff fd74 	bl	81015bc <performOutputAudioFIR>
  setUserLED1State(FALSE);
 8101ad4:	2000      	movs	r0, #0
 8101ad6:	f000 fc25 	bl	8102324 <setUserLED1State>
  if ( debug_output_enable )
 8101ada:	4b0b      	ldr	r3, [pc, #44]	; (8101b08 <ADC3DMAHalfTransferIRQCallback+0x1e4>)
 8101adc:	781b      	ldrb	r3, [r3, #0]
 8101ade:	b183      	cbz	r3, 8101b02 <ADC3DMAHalfTransferIRQCallback+0x1de>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 8101ae0:	480a      	ldr	r0, [pc, #40]	; (8101b0c <ADC3DMAHalfTransferIRQCallback+0x1e8>)
 8101ae2:	2200      	movs	r2, #0
 8101ae4:	2104      	movs	r1, #4
}
 8101ae6:	b013      	add	sp, #76	; 0x4c
 8101ae8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 8101aec:	f002 bf00 	b.w	81048f0 <HAL_GPIO_WritePin>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 8101af0:	b289      	uxth	r1, r1
 8101af2:	458c      	cmp	ip, r1
 8101af4:	d2e6      	bcs.n	8101ac4 <ADC3DMAHalfTransferIRQCallback+0x1a0>
        adc_channel_dynamic_offsets[_channel]--;
 8101af6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8101afa:	3901      	subs	r1, #1
 8101afc:	e7df      	b.n	8101abe <ADC3DMAHalfTransferIRQCallback+0x19a>
      channel_is_valid[_channel] = FALSE;
 8101afe:	54e6      	strb	r6, [r4, r3]
 8101b00:	e7e0      	b.n	8101ac4 <ADC3DMAHalfTransferIRQCallback+0x1a0>
}
 8101b02:	b013      	add	sp, #76	; 0x4c
 8101b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8101b08:	10004590 	.word	0x10004590
 8101b0c:	58022000 	.word	0x58022000
 8101b10:	100126e4 	.word	0x100126e4
 8101b14:	10002954 	.word	0x10002954
 8101b18:	10000d34 	.word	0x10000d34
 8101b1c:	10000054 	.word	0x10000054
 8101b20:	100186f8 	.word	0x100186f8
 8101b24:	1000458a 	.word	0x1000458a
 8101b28:	10018ba8 	.word	0x10018ba8

08101b2c <dspGetIsAnomalyDetected>:
}
 8101b2c:	4b01      	ldr	r3, [pc, #4]	; (8101b34 <dspGetIsAnomalyDetected+0x8>)
 8101b2e:	7818      	ldrb	r0, [r3, #0]
 8101b30:	4770      	bx	lr
 8101b32:	bf00      	nop
 8101b34:	10004574 	.word	0x10004574

08101b38 <dspGetAnomalyFrequencyNormalized>:
}
 8101b38:	4b01      	ldr	r3, [pc, #4]	; (8101b40 <dspGetAnomalyFrequencyNormalized+0x8>)
 8101b3a:	ed93 0a00 	vldr	s0, [r3]
 8101b3e:	4770      	bx	lr
 8101b40:	1000457c 	.word	0x1000457c

08101b44 <dspGetAnomalyMagnitude>:
}
 8101b44:	4b01      	ldr	r3, [pc, #4]	; (8101b4c <dspGetAnomalyMagnitude+0x8>)
 8101b46:	ed93 0a00 	vldr	s0, [r3]
 8101b4a:	4770      	bx	lr
 8101b4c:	10004580 	.word	0x10004580

08101b50 <dspEntry>:
{
 8101b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101b54:	ed2d 8b02 	vpush	{d8}
 8101b58:	b083      	sub	sp, #12
  alarminit( );
 8101b5a:	f000 fbf9 	bl	8102350 <alarminit>
  IPCInitialize( );
 8101b5e:	f000 fb51 	bl	8102204 <IPCInitialize>
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101b62:	2108      	movs	r1, #8
 8101b64:	48cc      	ldr	r0, [pc, #816]	; (8101e98 <dspEntry+0x348>)
  ADC1->CR |= ADC_CR_BOOST;
 8101b66:	4dcd      	ldr	r5, [pc, #820]	; (8101e9c <dspEntry+0x34c>)
  ADC3->CR |= ADC_CR_BOOST;
 8101b68:	4ccd      	ldr	r4, [pc, #820]	; (8101ea0 <dspEntry+0x350>)
    if ( fft_samples_ready )
 8101b6a:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 8101f10 <dspEntry+0x3c0>

static void performFFT( void )
{
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
  {
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101b6e:	4ecd      	ldr	r6, [pc, #820]	; (8101ea4 <dspEntry+0x354>)
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101b70:	f002 feb8 	bl	81048e4 <HAL_GPIO_ReadPin>
 8101b74:	4bcc      	ldr	r3, [pc, #816]	; (8101ea8 <dspEntry+0x358>)
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101b76:	4acd      	ldr	r2, [pc, #820]	; (8101eac <dspEntry+0x35c>)
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101b78:	fab0 f080 	clz	r0, r0
 8101b7c:	0940      	lsrs	r0, r0, #5
 8101b7e:	7018      	strb	r0, [r3, #0]
  ADC1->CR |= ADC_CR_BOOST;
 8101b80:	68ab      	ldr	r3, [r5, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101b82:	48cb      	ldr	r0, [pc, #812]	; (8101eb0 <dspEntry+0x360>)
  ADC1->CR |= ADC_CR_BOOST;
 8101b84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101b88:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_BOOST;
 8101b8a:	68a3      	ldr	r3, [r4, #8]
 8101b8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101b90:	60a3      	str	r3, [r4, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101b92:	2101      	movs	r1, #1
 8101b94:	f002 fd94 	bl	81046c0 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_CPLT_CB_ID, ADC3DMATransferCompleteIRQCallback);
 8101b98:	4ac6      	ldr	r2, [pc, #792]	; (8101eb4 <dspEntry+0x364>)
 8101b9a:	48c5      	ldr	r0, [pc, #788]	; (8101eb0 <dspEntry+0x360>)
 8101b9c:	2100      	movs	r1, #0
 8101b9e:	f002 fd8f 	bl	81046c0 <HAL_DMA_RegisterCallback>
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101ba2:	4bc5      	ldr	r3, [pc, #788]	; (8101eb8 <dspEntry+0x368>)
  ADC_Enable( &hadc1 );
 8101ba4:	48c5      	ldr	r0, [pc, #788]	; (8101ebc <dspEntry+0x36c>)
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101ba6:	691a      	ldr	r2, [r3, #16]
 8101ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101bac:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101bae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101bb2:	4ac3      	ldr	r2, [pc, #780]	; (8101ec0 <dspEntry+0x370>)
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101bb4:	6159      	str	r1, [r3, #20]
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101bb6:	619a      	str	r2, [r3, #24]
  DMA1_Stream0->M0AR = (uint32_t)adc1_read_buffer;
 8101bb8:	4ac2      	ldr	r2, [pc, #776]	; (8101ec4 <dspEntry+0x374>)
 8101bba:	61da      	str	r2, [r3, #28]
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 8101bbc:	691a      	ldr	r2, [r3, #16]
 8101bbe:	f042 0201 	orr.w	r2, r2, #1
 8101bc2:	611a      	str	r2, [r3, #16]
  DMA1->LIFCR = DMA_LIFCR_CTCIF1;
 8101bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101bc8:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE | DMA_SxCR_CIRC;
 8101bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101bcc:	f442 728c 	orr.w	r2, r2, #280	; 0x118
 8101bd0:	629a      	str	r2, [r3, #40]	; 0x28
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101bd2:	4abd      	ldr	r2, [pc, #756]	; (8101ec8 <dspEntry+0x378>)
  DMA1_Stream1->NDTR = ADC3_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101bd4:	62d9      	str	r1, [r3, #44]	; 0x2c
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101bd6:	631a      	str	r2, [r3, #48]	; 0x30
  DMA1_Stream1->M0AR = (uint32_t)adc3_read_buffer;
 8101bd8:	4abc      	ldr	r2, [pc, #752]	; (8101ecc <dspEntry+0x37c>)
 8101bda:	635a      	str	r2, [r3, #52]	; 0x34
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 8101bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101bde:	f042 0201 	orr.w	r2, r2, #1
 8101be2:	629a      	str	r2, [r3, #40]	; 0x28
  ADC_Enable( &hadc1 );
 8101be4:	f001 fa44 	bl	8103070 <ADC_Enable>
  ADC_Enable( &hadc3 );
 8101be8:	48b9      	ldr	r0, [pc, #740]	; (8101ed0 <dspEntry+0x380>)
 8101bea:	f001 fa41 	bl	8103070 <ADC_Enable>
  while(!(ADC1->ISR | ADC_ISR_ADRDY) || !(ADC3->ISR | ADC_ISR_ADRDY));
 8101bee:	682b      	ldr	r3, [r5, #0]
 8101bf0:	6823      	ldr	r3, [r4, #0]
  ADC1->CR |= ADC_CR_ADSTART;
 8101bf2:	68ab      	ldr	r3, [r5, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101bf4:	4ab7      	ldr	r2, [pc, #732]	; (8101ed4 <dspEntry+0x384>)
  HAL_TIM_Base_Start( &htim3 );
 8101bf6:	48b8      	ldr	r0, [pc, #736]	; (8101ed8 <dspEntry+0x388>)
  ADC1->CR |= ADC_CR_ADSTART;
 8101bf8:	f043 0304 	orr.w	r3, r3, #4
 8101bfc:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_ADSTART;
 8101bfe:	68a3      	ldr	r3, [r4, #8]
 8101c00:	f043 0304 	orr.w	r3, r3, #4
 8101c04:	60a3      	str	r3, [r4, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101c06:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8101c08:	f043 0302 	orr.w	r3, r3, #2
 8101c0c:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM3->ARR = 750;
 8101c0e:	4bb3      	ldr	r3, [pc, #716]	; (8101edc <dspEntry+0x38c>)
 8101c10:	f240 22ee 	movw	r2, #750	; 0x2ee
 8101c14:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = 375;
 8101c16:	f240 1277 	movw	r2, #375	; 0x177
 8101c1a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCER |= TIM_CCER_CC1E;
 8101c1c:	6a1a      	ldr	r2, [r3, #32]
 8101c1e:	f042 0201 	orr.w	r2, r2, #1
 8101c22:	621a      	str	r2, [r3, #32]
  HAL_TIM_Base_Start( &htim3 );
 8101c24:	f004 fa60 	bl	81060e8 <HAL_TIM_Base_Start>
  arm_rfft_fast_init_f32( &fft_handler, FFT_BATCH_SIZE );
 8101c28:	48ad      	ldr	r0, [pc, #692]	; (8101ee0 <dspEntry+0x390>)
 8101c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101c2e:	f006 fd4d 	bl	81086cc <arm_rfft_fast_init_f32>
  float_union.valueu8[0] = 0x55;
 8101c32:	4bac      	ldr	r3, [pc, #688]	; (8101ee4 <dspEntry+0x394>)
 8101c34:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8101c38:	601a      	str	r2, [r3, #0]
    if ( fft_samples_ready )
 8101c3a:	f89b 3000 	ldrb.w	r3, [fp]
 8101c3e:	2b00      	cmp	r3, #0
 8101c40:	f000 81e3 	beq.w	810200a <dspEntry+0x4ba>
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101c44:	4da8      	ldr	r5, [pc, #672]	; (8101ee8 <dspEntry+0x398>)
 8101c46:	2400      	movs	r4, #0
 8101c48:	1932      	adds	r2, r6, r4
 8101c4a:	1929      	adds	r1, r5, r4
 8101c4c:	48a4      	ldr	r0, [pc, #656]	; (8101ee0 <dspEntry+0x390>)
 8101c4e:	2300      	movs	r3, #0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101c50:	f504 6400 	add.w	r4, r4, #2048	; 0x800
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101c54:	f006 fcd0 	bl	81085f8 <arm_rfft_fast_f32>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101c58:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
 8101c5c:	d1f4      	bne.n	8101c48 <dspEntry+0xf8>
    {
#ifdef FFT_AVERAGING
      // compute magnitude, correct for dc offset, save value to current magnitude buffer

      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c5e:	ed9f 8aa3 	vldr	s16, [pc, #652]	; 8101eec <dspEntry+0x39c>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101c62:	4fa3      	ldr	r7, [pc, #652]	; (8101ef0 <dspEntry+0x3a0>)
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101c64:	2500      	movs	r5, #0
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101c66:	2400      	movs	r4, #0
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c68:	026b      	lsls	r3, r5, #9
 8101c6a:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8101c6e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101c72:	3301      	adds	r3, #1
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c74:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101c78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c7c:	edd2 7a00 	vldr	s15, [r2]
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101c80:	ed93 0a00 	vldr	s0, [r3]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c84:	ee20 0a08 	vmul.f32	s0, s0, s16
 8101c88:	ee67 7a88 	vmul.f32	s15, s15, s16
  return sqrtf(_real * _real + _compl * _compl);
 8101c8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8101c90:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8101c94:	f00d f9d8 	bl	810f048 <sqrtf>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c98:	f00d f950 	bl	810ef3c <log10f>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101c9c:	883b      	ldrh	r3, [r7, #0]

      // sampling for noise floor at startup
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101c9e:	f8df c274 	ldr.w	ip, [pc, #628]	; 8101f14 <dspEntry+0x3c4>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101ca2:	4994      	ldr	r1, [pc, #592]	; (8101ef4 <dspEntry+0x3a4>)
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101ca4:	f8bc 2000 	ldrh.w	r2, [ip]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101ca8:	00e8      	lsls	r0, r5, #3
 8101caa:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8101cae:	fa10 f383 	uxtah	r3, r0, r3
 8101cb2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8101cb6:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101cba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101cbe:	2a27      	cmp	r2, #39	; 0x27
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101cc0:	ed83 0a00 	vstr	s0, [r3]
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101cc4:	d821      	bhi.n	8101d0a <dspEntry+0x1ba>
      {
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101cc6:	883b      	ldrh	r3, [r7, #0]
              > fft_noise_floor[_i] )
 8101cc8:	f8df e234 	ldr.w	lr, [pc, #564]	; 8101f00 <dspEntry+0x3b0>
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101ccc:	fa10 f383 	uxtah	r3, r0, r3
 8101cd0:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101cd4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8101cd8:	ed93 7a00 	vldr	s14, [r3]
              > fft_noise_floor[_i] )
 8101cdc:	eb0e 0384 	add.w	r3, lr, r4, lsl #2
 8101ce0:	edd3 7a00 	vldr	s15, [r3]
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              > fft_noise_floor[_i] )
 8101cec:	ea4f 0884 	mov.w	r8, r4, lsl #2
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101cf0:	dc00      	bgt.n	8101cf4 <dspEntry+0x1a4>
            || ( noise_floor_samples == 0 ))
 8101cf2:	b952      	cbnz	r2, 8101d0a <dspEntry+0x1ba>
        {
          fft_noise_floor[_i] = fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i];
 8101cf4:	883b      	ldrh	r3, [r7, #0]
 8101cf6:	fa10 f383 	uxtah	r3, r0, r3
 8101cfa:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101cfe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8101d02:	44c6      	add	lr, r8
 8101d04:	681b      	ldr	r3, [r3, #0]
 8101d06:	f8ce 3000 	str.w	r3, [lr]
        }
      }

      // perform average calculation for this channel and magnitude index
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 8101d0a:	eb04 23c5 	add.w	r3, r4, r5, lsl #11
 8101d0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8101d12:	f8df e204 	ldr.w	lr, [pc, #516]	; 8101f18 <dspEntry+0x3c8>
 8101d16:	f8d3 8000 	ldr.w	r8, [r3]
 8101d1a:	eb04 2305 	add.w	r3, r4, r5, lsl #8
 8101d1e:	eb0e 0383 	add.w	r3, lr, r3, lsl #2

      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d22:	f04f 0901 	mov.w	r9, #1
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 8101d26:	f8c3 8000 	str.w	r8, [r3]
      {
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101d2a:	eb00 0809 	add.w	r8, r0, r9
 8101d2e:	eb04 2808 	add.w	r8, r4, r8, lsl #8
 8101d32:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8101d36:	edd8 7a00 	vldr	s15, [r8]
 8101d3a:	ed93 7a00 	vldr	s14, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d3e:	f109 0901 	add.w	r9, r9, #1
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101d42:	ee77 7a87 	vadd.f32	s15, s15, s14
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d46:	f1b9 0f08 	cmp.w	r9, #8
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101d4a:	edc3 7a00 	vstr	s15, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d4e:	d1ec      	bne.n	8101d2a <dspEntry+0x1da>
      }

      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101d50:	edd3 7a00 	vldr	s15, [r3]
 8101d54:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8101d58:	ee67 7a87 	vmul.f32	s15, s15, s14
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101d5c:	3401      	adds	r4, #1
 8101d5e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101d62:	edc3 7a00 	vstr	s15, [r3]
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101d66:	f47f af7f 	bne.w	8101c68 <dspEntry+0x118>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101d6a:	3501      	adds	r5, #1
 8101d6c:	2d06      	cmp	r5, #6
 8101d6e:	f47f af7a 	bne.w	8101c66 <dspEntry+0x116>
  {
    noise_floor_samples++;
  }

  // increment fft buffer index for next iteration
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d72:	883b      	ldrh	r3, [r7, #0]
  boolean_t _anomaly_detected = FALSE;

  // for each channel
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
  {
    _largest_magnitude_db = -200.0f;
 8101d74:	eddf 5a60 	vldr	s11, [pc, #384]	; 8101ef8 <dspEntry+0x3a8>
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
    {
      // save bin and magnitude of bin with largest magnitude relative to the
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
                  + fft_trigger_threshold_offset_db))
 8101d78:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8101f1c <dspEntry+0x3cc>
  if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101d7c:	2a27      	cmp	r2, #39	; 0x27
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d7e:	f103 0301 	add.w	r3, r3, #1
  boolean_t _anomaly_detected = FALSE;
 8101d82:	f04f 0000 	mov.w	r0, #0
    noise_floor_samples++;
 8101d86:	bf98      	it	ls
 8101d88:	3201      	addls	r2, #1
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d8a:	f003 0307 	and.w	r3, r3, #7
    noise_floor_samples++;
 8101d8e:	bf98      	it	ls
 8101d90:	f8ac 2000 	strhls.w	r2, [ip]
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d94:	803b      	strh	r3, [r7, #0]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101d96:	f8df c188 	ldr.w	ip, [pc, #392]	; 8101f20 <dspEntry+0x3d0>
        _anomaly_detected = TRUE;
      }
    }

    // update ultrasonic POIs for this channel
    channel_is_active_anomaly[channel] = _channel_active;
 8101d9a:	4f58      	ldr	r7, [pc, #352]	; (8101efc <dspEntry+0x3ac>)
  uint16_t _largest_magnitude_bin = 0;
 8101d9c:	ee06 0a10 	vmov	s12, r0
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101da0:	4601      	mov	r1, r0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101da2:	4664      	mov	r4, ip
 8101da4:	222a      	movs	r2, #42	; 0x2a
    _channel_active = FALSE;
 8101da6:	f04f 0900 	mov.w	r9, #0
    _largest_magnitude_db = -200.0f;
 8101daa:	eef0 7a65 	vmov.f32	s15, s11
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dae:	ea4f 2a01 	mov.w	sl, r1, lsl #8
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101db2:	4d53      	ldr	r5, [pc, #332]	; (8101f00 <dspEntry+0x3b0>)
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101db4:	eb0a 0302 	add.w	r3, sl, r2
 8101db8:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dbc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dc0:	ed93 7a00 	vldr	s14, [r3]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dc4:	edd5 6a00 	vldr	s13, [r5]
                  + fft_trigger_threshold_offset_db))
 8101dc8:	ed98 5a00 	vldr	s10, [r8]
 8101dcc:	ee76 6a85 	vadd.f32	s13, s13, s10
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dd0:	ee37 7a66 	vsub.f32	s14, s14, s13
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101ddc:	dd0c      	ble.n	8101df8 <dspEntry+0x2a8>
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dde:	edd3 7a00 	vldr	s15, [r3]
                             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101de2:	ed95 7a00 	vldr	s14, [r5]
                                    + fft_trigger_threshold_offset_db);
 8101de6:	edd8 6a00 	vldr	s13, [r8]
 8101dea:	ee37 7a26 	vadd.f32	s14, s14, s13
 8101dee:	b293      	uxth	r3, r2
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        _largest_magnitude_bin = bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW;
 8101df4:	ee06 3a10 	vmov	s12, r3
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101df8:	eb0a 0302 	add.w	r3, sl, r2
 8101dfc:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8101e00:	edd3 6a00 	vldr	s13, [r3]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101e04:	4b3e      	ldr	r3, [pc, #248]	; (8101f00 <dspEntry+0x3b0>)
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101e06:	7825      	ldrb	r5, [r4, #0]
 8101e08:	9401      	str	r4, [sp, #4]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101e0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8101e0e:	ed93 7a00 	vldr	s14, [r3]
                         + fft_trigger_threshold_offset_db ))
 8101e12:	ed98 5a00 	vldr	s10, [r8]
 8101e16:	ee37 7a05 	vadd.f32	s14, s14, s10
 8101e1a:	f005 037f 	and.w	r3, r5, #127	; 0x7f
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101e1e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8101e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101e26:	f2c0 8114 	blt.w	8102052 <dspEntry+0x502>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101e2a:	2b18      	cmp	r3, #24
 8101e2c:	d001      	beq.n	8101e32 <dspEntry+0x2e2>
 8101e2e:	1c6b      	adds	r3, r5, #1
 8101e30:	b2db      	uxtb	r3, r3
      if ( fft_magnitude_trigger_counter[channel][bin_index] >= FFT_DETECT_THRESHOLD_RISING_COUNT )
 8101e32:	2b0d      	cmp	r3, #13
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101e34:	7023      	strb	r3, [r4, #0]
        fft_magnitude_trigger_counter[channel][bin_index] |= FFT_DETECT_BIN_ACTIVE_FLAG;
 8101e36:	bf84      	itt	hi
 8101e38:	f063 037f 	ornhi	r3, r3, #127	; 0x7f
 8101e3c:	7023      	strbhi	r3, [r4, #0]
      if ( fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_BIN_ACTIVE_FLAG )
 8101e3e:	9b01      	ldr	r3, [sp, #4]
 8101e40:	f993 3000 	ldrsb.w	r3, [r3]
 8101e44:	2b00      	cmp	r3, #0
        _anomaly_detected = TRUE;
 8101e46:	bfb8      	it	lt
 8101e48:	2001      	movlt	r0, #1
 8101e4a:	f102 0201 	add.w	r2, r2, #1
        _channel_active = TRUE;
 8101e4e:	bfb8      	it	lt
 8101e50:	4681      	movlt	r9, r0
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101e52:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8101e56:	f104 0401 	add.w	r4, r4, #1
 8101e5a:	d1aa      	bne.n	8101db2 <dspEntry+0x262>
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101e5c:	4c29      	ldr	r4, [pc, #164]	; (8101f04 <dspEntry+0x3b4>)
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101e5e:	4d2a      	ldr	r5, [pc, #168]	; (8101f08 <dspEntry+0x3b8>)
    channel_is_active_anomaly[channel] = _channel_active;
 8101e60:	f807 9001 	strb.w	r9, [r7, r1]
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101e64:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8101e68:	edc3 7a00 	vstr	s15, [r3]
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101e6c:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8101e70:	eef8 7a46 	vcvt.f32.u32	s15, s12
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101e74:	3101      	adds	r1, #1
 8101e76:	2906      	cmp	r1, #6
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101e78:	edc3 7a00 	vstr	s15, [r3]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101e7c:	f10c 0cd6 	add.w	ip, ip, #214	; 0xd6
 8101e80:	d18f      	bne.n	8101da2 <dspEntry+0x252>
  }

  // increment previous/current detect state
  anomaly_detect_state_previous = anomaly_detect_state_current;
  anomaly_detect_state_current = _anomaly_detected;
 8101e82:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8101f24 <dspEntry+0x3d4>
 8101e86:	f888 0000 	strb.w	r0, [r8]

  setUserLED2State( anomaly_detect_state_current );
 8101e8a:	f000 fa55 	bl	8102338 <setUserLED2State>
      fft_results_ready = TRUE;
 8101e8e:	4a1f      	ldr	r2, [pc, #124]	; (8101f0c <dspEntry+0x3bc>)
 8101e90:	2301      	movs	r3, #1
 8101e92:	7013      	strb	r3, [r2, #0]
 8101e94:	e048      	b.n	8101f28 <dspEntry+0x3d8>
 8101e96:	bf00      	nop
 8101e98:	58020c00 	.word	0x58020c00
 8101e9c:	40022000 	.word	0x40022000
 8101ea0:	58026000 	.word	0x58026000
 8101ea4:	100126e8 	.word	0x100126e8
 8101ea8:	10004590 	.word	0x10004590
 8101eac:	08101925 	.word	0x08101925
 8101eb0:	10000cbc 	.word	0x10000cbc
 8101eb4:	08101715 	.word	0x08101715
 8101eb8:	40020000 	.word	0x40020000
 8101ebc:	10000b7c 	.word	0x10000b7c
 8101ec0:	40022040 	.word	0x40022040
 8101ec4:	10000d34 	.word	0x10000d34
 8101ec8:	58026040 	.word	0x58026040
 8101ecc:	10002954 	.word	0x10002954
 8101ed0:	10000be0 	.word	0x10000be0
 8101ed4:	5c001000 	.word	0x5c001000
 8101ed8:	1001914c 	.word	0x1001914c
 8101edc:	40000400 	.word	0x40000400
 8101ee0:	10011dc8 	.word	0x10011dc8
 8101ee4:	100186f0 	.word	0x100186f0
 8101ee8:	100156ec 	.word	0x100156ec
 8101eec:	3c800000 	.word	0x3c800000
 8101ef0:	10011dc4 	.word	0x10011dc4
 8101ef4:	100045c4 	.word	0x100045c4
 8101ef8:	c3480000 	.word	0xc3480000
 8101efc:	10004584 	.word	0x10004584
 8101f00:	100122e4 	.word	0x100122e4
 8101f04:	100045ac 	.word	0x100045ac
 8101f08:	10004594 	.word	0x10004594
 8101f0c:	100156e8 	.word	0x100156e8
 8101f10:	100186ec 	.word	0x100186ec
 8101f14:	100186f6 	.word	0x100186f6
 8101f18:	100105c4 	.word	0x100105c4
 8101f1c:	10000060 	.word	0x10000060
 8101f20:	10011de0 	.word	0x10011de0
 8101f24:	10004574 	.word	0x10004574
      fft_samples_ready = FALSE;
 8101f28:	2200      	movs	r2, #0
 8101f2a:	f88b 2000 	strb.w	r2, [fp]
  int8_t _x_axis_vector,
         _y_axis_vector,
         _z_axis_vector;

  // Get range of magnitude and use as basis for determining direction
  _magnitude_max = fft_channel_magnitude_db[0];
 8101f2e:	edd4 7a00 	vldr	s15, [r4]
  _magnitude_min = _magnitude_max;
 8101f32:	eeb0 7a67 	vmov.f32	s14, s15

  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
  {
    if ( fft_channel_magnitude_db[_channel] > _magnitude_max )
 8101f36:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8101f3a:	edd1 6a00 	vldr	s13, [r1]
 8101f3e:	009a      	lsls	r2, r3, #2
 8101f40:	eef4 6ae7 	vcmpe.f32	s13, s15
 8101f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      _magnitude_max = fft_channel_magnitude_db[_channel];
    }
    if ( fft_channel_magnitude_db[_channel] < _magnitude_min )
 8101f48:	4422      	add	r2, r4
      _magnitude_max = fft_channel_magnitude_db[_channel];
 8101f4a:	bfc8      	it	gt
 8101f4c:	edd1 7a00 	vldrgt	s15, [r1]
    if ( fft_channel_magnitude_db[_channel] < _magnitude_min )
 8101f50:	edd2 6a00 	vldr	s13, [r2]
 8101f54:	eef4 6ac7 	vcmpe.f32	s13, s14
 8101f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
 8101f5c:	f103 0301 	add.w	r3, r3, #1
    {
      _magnitude_min = fft_channel_magnitude_db[_channel];
 8101f60:	bf48      	it	mi
 8101f62:	ed92 7a00 	vldrmi	s14, [r2]
  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
 8101f66:	2b06      	cmp	r3, #6
 8101f68:	d1e5      	bne.n	8101f36 <dspEntry+0x3e6>
      localization_data_ready = TRUE;
 8101f6a:	4b46      	ldr	r3, [pc, #280]	; (8102084 <dspEntry+0x534>)
// Determines characteristics of an active anomaly, default values if none
// Only capable of generating one set of values, does not handle multiple anomalies
static void anomalyUpdateCharacteristics( void )
{
  // Anomaly frequency, ** just potato averaging of active microphone frequencies **
  float _sum = 0.0f;
 8101f6c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8102088 <dspEntry+0x538>
  // sum of frequencies of active channels
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
  {
    if ( channel_is_active_anomaly[_channel] )
    {
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101f70:	ed9f 7a46 	vldr	s14, [pc, #280]	; 810208c <dspEntry+0x53c>
 8101f74:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8102090 <dspEntry+0x540>
      localization_data_ready = TRUE;
 8101f78:	2201      	movs	r2, #1
 8101f7a:	701a      	strb	r2, [r3, #0]
  uint8_t _active_channels = 0;
 8101f7c:	2300      	movs	r3, #0
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101f7e:	461a      	mov	r2, r3
    if ( channel_is_active_anomaly[_channel] )
 8101f80:	5cb9      	ldrb	r1, [r7, r2]
 8101f82:	b149      	cbz	r1, 8101f98 <dspEntry+0x448>
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101f84:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8101f88:	edd1 7a00 	vldr	s15, [r1]
 8101f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
      _active_channels++;
 8101f90:	3301      	adds	r3, #1
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101f92:	eee7 6a86 	vfma.f32	s13, s15, s12
      _active_channels++;
 8101f96:	b2db      	uxtb	r3, r3
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101f98:	3201      	adds	r2, #1
 8101f9a:	2a06      	cmp	r2, #6
 8101f9c:	d1f0      	bne.n	8101f80 <dspEntry+0x430>
  if ( _active_channels == 0 )
  {
    anomaly_frequency = 20000.0f;
  }

  anomaly_frequency = _sum / _active_channels;
 8101f9e:	ee07 3a90 	vmov	s15, r3
 8101fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101fa6:	4d3b      	ldr	r5, [pc, #236]	; (8102094 <dspEntry+0x544>)

  // normalized frequency
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101fa8:	4b3b      	ldr	r3, [pc, #236]	; (8102098 <dspEntry+0x548>)
  anomaly_frequency = _sum / _active_channels;
 8101faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101fae:	eddf 7a3b 	vldr	s15, [pc, #236]	; 810209c <dspEntry+0x54c>
 8101fb2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81020a0 <dspEntry+0x550>
  anomaly_frequency = _sum / _active_channels;
 8101fb6:	ed85 7a00 	vstr	s14, [r5]
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101fc2:	edc3 7a00 	vstr	s15, [r3]

  // magnitude, ** also potato but functional **
  float _largest = -200.0f;
 8101fc6:	eddf 7a37 	vldr	s15, [pc, #220]	; 81020a4 <dspEntry+0x554>

  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101fca:	2300      	movs	r3, #0
  {
    if (( fft_channel_magnitude_db[_channel] > _largest )
 8101fcc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8101fd0:	ed92 7a00 	vldr	s14, [r2]
 8101fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101fdc:	dd03      	ble.n	8101fe6 <dspEntry+0x496>
        && ( channel_is_active_anomaly[_channel] ))
 8101fde:	5cf9      	ldrb	r1, [r7, r3]
 8101fe0:	b109      	cbz	r1, 8101fe6 <dspEntry+0x496>
    {
      _largest = fft_channel_magnitude_db[_channel];
 8101fe2:	edd2 7a00 	vldr	s15, [r2]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101fe6:	3301      	adds	r3, #1
 8101fe8:	2b06      	cmp	r3, #6
 8101fea:	d1ef      	bne.n	8101fcc <dspEntry+0x47c>
    }
  }

  anomaly_magnitude = _largest;
 8101fec:	4c2e      	ldr	r4, [pc, #184]	; (81020a8 <dspEntry+0x558>)

  // update inter-processor communication (shared RAM region)
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101fee:	f898 0000 	ldrb.w	r0, [r8]
  anomaly_magnitude = _largest;
 8101ff2:	edc4 7a00 	vstr	s15, [r4]
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101ff6:	f000 f923 	bl	8102240 <IPCSetAnomalyDetectState>
  IPCSetAnomalyFrequency( anomaly_frequency );
 8101ffa:	ed95 0a00 	vldr	s0, [r5]
 8101ffe:	f000 f925 	bl	810224c <IPCSetAnomalyFrequency>
  IPCSetAnomalyMagnitudedB( anomaly_magnitude );
 8102002:	ed94 0a00 	vldr	s0, [r4]
 8102006:	f000 f927 	bl	8102258 <IPCSetAnomalyMagnitudedB>
    user_button_state_previous = user_button_state_current;
 810200a:	4d28      	ldr	r5, [pc, #160]	; (81020ac <dspEntry+0x55c>)
 810200c:	4c28      	ldr	r4, [pc, #160]	; (81020b0 <dspEntry+0x560>)
 810200e:	782b      	ldrb	r3, [r5, #0]
 8102010:	7023      	strb	r3, [r4, #0]
    user_button_state_current = getUserButtonState( );
 8102012:	f000 f97b 	bl	810230c <getUserButtonState>
 8102016:	7028      	strb	r0, [r5, #0]
    if ( user_button_state_current && !user_button_state_previous )
 8102018:	b138      	cbz	r0, 810202a <dspEntry+0x4da>
 810201a:	7823      	ldrb	r3, [r4, #0]
 810201c:	b92b      	cbnz	r3, 810202a <dspEntry+0x4da>
      uart_data_flag = (uart_data_flag ? FALSE : TRUE);
 810201e:	4a25      	ldr	r2, [pc, #148]	; (81020b4 <dspEntry+0x564>)
 8102020:	7813      	ldrb	r3, [r2, #0]
 8102022:	fab3 f383 	clz	r3, r3
 8102026:	095b      	lsrs	r3, r3, #5
 8102028:	7013      	strb	r3, [r2, #0]
    if ( fft_results_ready && uart_data_flag )
 810202a:	4c23      	ldr	r4, [pc, #140]	; (81020b8 <dspEntry+0x568>)
 810202c:	7823      	ldrb	r3, [r4, #0]
 810202e:	2b00      	cmp	r3, #0
 8102030:	f43f ae03 	beq.w	8101c3a <dspEntry+0xea>
 8102034:	4b1f      	ldr	r3, [pc, #124]	; (81020b4 <dspEntry+0x564>)
 8102036:	781b      	ldrb	r3, [r3, #0]
 8102038:	2b00      	cmp	r3, #0
 810203a:	f43f adfe 	beq.w	8101c3a <dspEntry+0xea>
      usart_data_skip_counter++;
 810203e:	4a1f      	ldr	r2, [pc, #124]	; (81020bc <dspEntry+0x56c>)
 8102040:	8813      	ldrh	r3, [r2, #0]
 8102042:	3301      	adds	r3, #1
 8102044:	b29b      	uxth	r3, r3
      if ( usart_data_skip_counter >= USART_SKIP_N_DATA_SETS )
 8102046:	2b04      	cmp	r3, #4
 8102048:	d809      	bhi.n	810205e <dspEntry+0x50e>
      usart_data_skip_counter++;
 810204a:	8013      	strh	r3, [r2, #0]
      fft_results_ready = FALSE;
 810204c:	2300      	movs	r3, #0
 810204e:	7023      	strb	r3, [r4, #0]
 8102050:	e5f3      	b.n	8101c3a <dspEntry+0xea>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8102052:	2b00      	cmp	r3, #0
 8102054:	f43f aeed 	beq.w	8101e32 <dspEntry+0x2e2>
 8102058:	3d01      	subs	r5, #1
 810205a:	b2eb      	uxtb	r3, r5
 810205c:	e6e9      	b.n	8101e32 <dspEntry+0x2e2>
        usart_data_skip_counter = 0;
 810205e:	2300      	movs	r3, #0
 8102060:	8013      	strh	r3, [r2, #0]
        status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 8102062:	4917      	ldr	r1, [pc, #92]	; (81020c0 <dspEntry+0x570>)
 8102064:	4817      	ldr	r0, [pc, #92]	; (81020c4 <dspEntry+0x574>)
        while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8102066:	4d18      	ldr	r5, [pc, #96]	; (81020c8 <dspEntry+0x578>)
 8102068:	4f16      	ldr	r7, [pc, #88]	; (81020c4 <dspEntry+0x574>)
        status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 810206a:	2204      	movs	r2, #4
 810206c:	f004 fb58 	bl	8106720 <HAL_UART_Transmit_DMA>
        while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8102070:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8102074:	4629      	mov	r1, r5
 8102076:	4638      	mov	r0, r7
 8102078:	f004 fb52 	bl	8106720 <HAL_UART_Transmit_DMA>
              == HAL_BUSY );
 810207c:	2802      	cmp	r0, #2
 810207e:	d1e5      	bne.n	810204c <dspEntry+0x4fc>
 8102080:	e7f6      	b.n	8102070 <dspEntry+0x520>
 8102082:	bf00      	nop
 8102084:	100186f4 	.word	0x100186f4
 8102088:	00000000 	.word	0x00000000
 810208c:	486a6000 	.word	0x486a6000
 8102090:	3b000000 	.word	0x3b000000
 8102094:	10004578 	.word	0x10004578
 8102098:	1000457c 	.word	0x1000457c
 810209c:	469c4000 	.word	0x469c4000
 81020a0:	47c35000 	.word	0x47c35000
 81020a4:	c3480000 	.word	0xc3480000
 81020a8:	10004580 	.word	0x10004580
 81020ac:	100190ac 	.word	0x100190ac
 81020b0:	100190ad 	.word	0x100190ad
 81020b4:	100190a8 	.word	0x100190a8
 81020b8:	100156e8 	.word	0x100156e8
 81020bc:	100190aa 	.word	0x100190aa
 81020c0:	100186f0 	.word	0x100186f0
 81020c4:	10019210 	.word	0x10019210
 81020c8:	100105c4 	.word	0x100105c4

081020cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 81020ce:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020d0:	2214      	movs	r2, #20
 81020d2:	2100      	movs	r1, #0
 81020d4:	a807      	add	r0, sp, #28
 81020d6:	f009 fc3b 	bl	810b950 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020da:	4b45      	ldr	r3, [pc, #276]	; (81021f0 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 81020dc:	4f45      	ldr	r7, [pc, #276]	; (81021f4 <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81020e2:	4e45      	ldr	r6, [pc, #276]	; (81021f8 <MX_GPIO_Init+0x12c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020e4:	f042 0202 	orr.w	r2, r2, #2
 81020e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81020ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81020f0:	f002 0202 	and.w	r2, r2, #2
 81020f4:	9200      	str	r2, [sp, #0]
 81020f6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81020f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81020fc:	f042 0208 	orr.w	r2, r2, #8
 8102100:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102104:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102108:	f002 0208 	and.w	r2, r2, #8
 810210c:	9201      	str	r2, [sp, #4]
 810210e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8102110:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102118:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810211c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102120:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8102124:	9202      	str	r2, [sp, #8]
 8102126:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102128:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810212c:	f042 0204 	orr.w	r2, r2, #4
 8102130:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102134:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102138:	f002 0204 	and.w	r2, r2, #4
 810213c:	9203      	str	r2, [sp, #12]
 810213e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8102140:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102144:	f042 0220 	orr.w	r2, r2, #32
 8102148:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810214c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102150:	f002 0220 	and.w	r2, r2, #32
 8102154:	9204      	str	r2, [sp, #16]
 8102156:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102158:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810215c:	f042 0201 	orr.w	r2, r2, #1
 8102160:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102164:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102168:	f002 0201 	and.w	r2, r2, #1
 810216c:	9205      	str	r2, [sp, #20]
 810216e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102170:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102178:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102184:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102186:	4638      	mov	r0, r7
 8102188:	2200      	movs	r2, #0
 810218a:	f242 0104 	movw	r1, #8196	; 0x2004
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 810218e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102190:	f002 fbae 	bl	81048f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102194:	2200      	movs	r2, #0
 8102196:	4630      	mov	r0, r6
 8102198:	2104      	movs	r1, #4
 810219a:	f002 fba9 	bl	81048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810219e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81021a0:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021a2:	2308      	movs	r3, #8
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 81021a4:	a907      	add	r1, sp, #28
 81021a6:	4815      	ldr	r0, [pc, #84]	; (81021fc <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81021a8:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021aa:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 81021ae:	f002 fab1 	bl	8104714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = DEBUG_GPIO_0_Pin|LD2_Pin;
 81021b2:	f242 0304 	movw	r3, #8196	; 0x2004
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81021b6:	a907      	add	r1, sp, #28
 81021b8:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021ba:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021be:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81021c2:	f002 faa7 	bl	8104714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 81021c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81021ca:	a907      	add	r1, sp, #28
 81021cc:	480c      	ldr	r0, [pc, #48]	; (8102200 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021d0:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81021d4:	f002 fa9e 	bl	8104714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 81021d8:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81021da:	a907      	add	r1, sp, #28
 81021dc:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021de:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021e2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81021e6:	f002 fa95 	bl	8104714 <HAL_GPIO_Init>

}
 81021ea:	b00d      	add	sp, #52	; 0x34
 81021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81021ee:	bf00      	nop
 81021f0:	58024400 	.word	0x58024400
 81021f4:	58022000 	.word	0x58022000
 81021f8:	58022400 	.word	0x58022400
 81021fc:	58020c00 	.word	0x58020c00
 8102200:	58020800 	.word	0x58020800

08102204 <IPCInitialize>:
} shared_memory __attribute__((section(".ipc_data")));

void IPCInitialize( void )
{
  // only initialize a few, the others are constantly updated by DSP or others
  shared_memory.voice_volume_normalized = 0.5f;
 8102204:	4b07      	ldr	r3, [pc, #28]	; (8102224 <IPCInitialize+0x20>)
 8102206:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 810220a:	601a      	str	r2, [r3, #0]
  shared_memory.voice_mute_active = FALSE;
 810220c:	2200      	movs	r2, #0
 810220e:	711a      	strb	r2, [r3, #4]
  shared_memory.anomaly_detection_active = FALSE;
 8102210:	715a      	strb	r2, [r3, #5]
  shared_memory.alarm_mute = FALSE;
 8102212:	719a      	strb	r2, [r3, #6]
  shared_memory.anomaly_vector[0] = 0;
 8102214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  shared_memory.anomaly_vector[1] = 0;
 8102218:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  shared_memory.anomaly_vector[2] = 0;
 810221c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8102220:	4770      	bx	lr
 8102222:	bf00      	nop
 8102224:	10000000 	.word	0x10000000

08102228 <IPCGetVoiceVolumeNormalized>:

float IPCGetVoiceVolumeNormalized( void )
{
  return shared_memory.voice_volume_normalized;
 8102228:	4b01      	ldr	r3, [pc, #4]	; (8102230 <IPCGetVoiceVolumeNormalized+0x8>)
 810222a:	ed93 0a00 	vldr	s0, [r3]
}
 810222e:	4770      	bx	lr
 8102230:	10000000 	.word	0x10000000

08102234 <IPCGetVoiceMuteState>:
  shared_memory.voice_volume_normalized = new_vol;
}

boolean_t IPCGetVoiceMuteState( void )
{
  return shared_memory.voice_mute_active;
 8102234:	4b01      	ldr	r3, [pc, #4]	; (810223c <IPCGetVoiceMuteState+0x8>)
 8102236:	7918      	ldrb	r0, [r3, #4]
}
 8102238:	4770      	bx	lr
 810223a:	bf00      	nop
 810223c:	10000000 	.word	0x10000000

08102240 <IPCSetAnomalyDetectState>:
  return shared_memory.anomaly_detection_active;
}

void IPCSetAnomalyDetectState( boolean_t new_state )
{
  shared_memory.anomaly_detection_active = new_state;
 8102240:	4b01      	ldr	r3, [pc, #4]	; (8102248 <IPCSetAnomalyDetectState+0x8>)
 8102242:	7158      	strb	r0, [r3, #5]
}
 8102244:	4770      	bx	lr
 8102246:	bf00      	nop
 8102248:	10000000 	.word	0x10000000

0810224c <IPCSetAnomalyFrequency>:
  return shared_memory.anomaly_frequency;
}

void IPCSetAnomalyFrequency( float new_freq )
{
  shared_memory.anomaly_frequency = new_freq;
 810224c:	4b01      	ldr	r3, [pc, #4]	; (8102254 <IPCSetAnomalyFrequency+0x8>)
 810224e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8102252:	4770      	bx	lr
 8102254:	10000000 	.word	0x10000000

08102258 <IPCSetAnomalyMagnitudedB>:
  return shared_memory.anomaly_magnitude_db;
}

void IPCSetAnomalyMagnitudedB( float new_mag )
{
  shared_memory.anomaly_magnitude_db = new_mag;
 8102258:	4b01      	ldr	r3, [pc, #4]	; (8102260 <IPCSetAnomalyMagnitudedB+0x8>)
 810225a:	ed83 0a03 	vstr	s0, [r3, #12]
}
 810225e:	4770      	bx	lr
 8102260:	10000000 	.word	0x10000000

08102264 <IPCGetAlarmMuteState>:

boolean_t IPCGetAlarmMuteState( void )
{
  return shared_memory.alarm_mute;
 8102264:	4b01      	ldr	r3, [pc, #4]	; (810226c <IPCGetAlarmMuteState+0x8>)
 8102266:	7998      	ldrb	r0, [r3, #6]
}
 8102268:	4770      	bx	lr
 810226a:	bf00      	nop
 810226c:	10000000 	.word	0x10000000

08102270 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
  shared_memory.alarm_mute = new_state;
 8102270:	4b01      	ldr	r3, [pc, #4]	; (8102278 <IPCSetAlarmMuteState+0x8>)
 8102272:	7198      	strb	r0, [r3, #6]
}
 8102274:	4770      	bx	lr
 8102276:	bf00      	nop
 8102278:	10000000 	.word	0x10000000

0810227c <main>:

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810227c:	4b20      	ldr	r3, [pc, #128]	; (8102300 <main+0x84>)
{
 810227e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102280:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102284:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8102288:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102294:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102296:	9301      	str	r3, [sp, #4]
 8102298:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810229a:	f002 fb2f 	bl	81048fc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */

  HAL_PWREx_ClearPendingEvent();
 810229e:	f002 fb77 	bl	8104990 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81022a2:	2201      	movs	r2, #1
 81022a4:	2102      	movs	r1, #2
 81022a6:	2000      	movs	r0, #0
 81022a8:	f002 fb30 	bl	810490c <HAL_PWREx_EnterSTOPMode>

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81022ac:	4b15      	ldr	r3, [pc, #84]	; (8102304 <main+0x88>)
 81022ae:	681b      	ldr	r3, [r3, #0]
 81022b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 81022b4:	2b07      	cmp	r3, #7
 81022b6:	4b14      	ldr	r3, [pc, #80]	; (8102308 <main+0x8c>)
 81022b8:	bf0b      	itete	eq
 81022ba:	f8d3 2104 	ldreq.w	r2, [r3, #260]	; 0x104
 81022be:	f8d3 2114 	ldrne.w	r2, [r3, #276]	; 0x114
 81022c2:	f042 0201 	orreq.w	r2, r2, #1
 81022c6:	f042 0201 	orrne.w	r2, r2, #1
 81022ca:	bf0c      	ite	eq
 81022cc:	f8c3 2104 	streq.w	r2, [r3, #260]	; 0x104
 81022d0:	f8c3 2114 	strne.w	r2, [r3, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81022d4:	f000 fc72 	bl	8102bbc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81022d8:	f7ff fef8 	bl	81020cc <MX_GPIO_Init>
  MX_DMA_Init();
 81022dc:	f7ff f8c4 	bl	8101468 <MX_DMA_Init>
  MX_TIM3_Init();
 81022e0:	f000 fb1e 	bl	8102920 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 81022e4:	f000 fb78 	bl	81029d8 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 81022e8:	f7fe ff86 	bl	81011f8 <MX_ADC3_Init>
  MX_ADC1_Init();
 81022ec:	f7fe ff1a 	bl	8101124 <MX_ADC1_Init>
  MX_X_CUBE_AI_Init();
 81022f0:	f005 f916 	bl	8107520 <MX_X_CUBE_AI_Init>

  /* USER CODE BEGIN 2 */

  dspEntry( );
 81022f4:	f7ff fc2c 	bl	8101b50 <dspEntry>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	MX_X_CUBE_AI_Process();
 81022f8:	f005 f950 	bl	810759c <MX_X_CUBE_AI_Process>
  while (1)
 81022fc:	e7fc      	b.n	81022f8 <main+0x7c>
 81022fe:	bf00      	nop
 8102300:	58024400 	.word	0x58024400
 8102304:	e000ed00 	.word	0xe000ed00
 8102308:	58026400 	.word	0x58026400

0810230c <getUserButtonState>:
}

/* USER CODE BEGIN 4 */

boolean_t getUserButtonState ( void )
{
 810230c:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin) ? TRUE : FALSE);
 810230e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8102312:	4803      	ldr	r0, [pc, #12]	; (8102320 <getUserButtonState+0x14>)
 8102314:	f002 fae6 	bl	81048e4 <HAL_GPIO_ReadPin>
}
 8102318:	3800      	subs	r0, #0
 810231a:	bf18      	it	ne
 810231c:	2001      	movne	r0, #1
 810231e:	bd08      	pop	{r3, pc}
 8102320:	58020800 	.word	0x58020800

08102324 <setUserLED1State>:

void setUserLED1State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 8102324:	fab0 f280 	clz	r2, r0
 8102328:	0952      	lsrs	r2, r2, #5
 810232a:	4802      	ldr	r0, [pc, #8]	; (8102334 <setUserLED1State+0x10>)
 810232c:	2104      	movs	r1, #4
 810232e:	f002 badf 	b.w	81048f0 <HAL_GPIO_WritePin>
 8102332:	bf00      	nop
 8102334:	58022400 	.word	0x58022400

08102338 <setUserLED2State>:
}

void setUserLED2State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 8102338:	fab0 f280 	clz	r2, r0
 810233c:	0952      	lsrs	r2, r2, #5
 810233e:	4802      	ldr	r0, [pc, #8]	; (8102348 <setUserLED2State+0x10>)
 8102340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8102344:	f002 bad4 	b.w	81048f0 <HAL_GPIO_WritePin>
 8102348:	58022000 	.word	0x58022000

0810234c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810234c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810234e:	e7fe      	b.n	810234e <Error_Handler+0x2>

08102350 <alarminit>:
extern UART_HandleTypeDef huart3;

// one-time generation of alarm tone,
//   contains integer number of cycles of alarm frequency to avoid discontinuities
void alarminit( )
{
 8102350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int n;

  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
	{
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102352:	a715      	add	r7, pc, #84	; (adr r7, 81023a8 <alarminit+0x58>)
 8102354:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8102358:	ed2d 8b02 	vpush	{d8}
 810235c:	4d10      	ldr	r5, [pc, #64]	; (81023a0 <alarminit+0x50>)
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 810235e:	ed9f 8a11 	vldr	s16, [pc, #68]	; 81023a4 <alarminit+0x54>
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102362:	2400      	movs	r4, #0
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102364:	4620      	mov	r0, r4
 8102366:	f7fe f965 	bl	8100634 <__aeabi_i2d>
 810236a:	463b      	mov	r3, r7
 810236c:	4632      	mov	r2, r6
 810236e:	f7fe f9cb 	bl	8100708 <__aeabi_dmul>
 8102372:	f7fe fcc1 	bl	8100cf8 <__aeabi_d2f>
 8102376:	ee00 0a10 	vmov	s0, r0
 810237a:	f00c fe8b 	bl	810f094 <sinf>
 810237e:	ee20 0a08 	vmul.f32	s0, s0, s16
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102382:	3401      	adds	r4, #1
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102384:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102388:	2c40      	cmp	r4, #64	; 0x40
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 810238a:	ee10 3a10 	vmov	r3, s0
 810238e:	f825 3b02 	strh.w	r3, [r5], #2
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102392:	d1e7      	bne.n	8102364 <alarminit+0x14>
	}
}
 8102394:	ecbd 8b02 	vpop	{d8}
 8102398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810239a:	bf00      	nop
 810239c:	f3af 8000 	nop.w
 81023a0:	100190ba 	.word	0x100190ba
 81023a4:	447fc000 	.word	0x447fc000
 81023a8:	7f3321d2 	.word	0x7f3321d2
 81023ac:	3fd2d97c 	.word	0x3fd2d97c

081023b0 <playAudio>:

// passed array is voice audio from DSP
void playAudio( int16_t *audio_samples, uint16_t audio_sample_length )
{
 81023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81023b4:	ed2d 8b02 	vpush	{d8}
	alarm_state_previous = alarm_state_current;
 81023b8:	f8df 8314 	ldr.w	r8, [pc, #788]	; 81026d0 <playAudio+0x320>
 81023bc:	4eb0      	ldr	r6, [pc, #704]	; (8102680 <playAudio+0x2d0>)
 81023be:	f898 3000 	ldrb.w	r3, [r8]
 81023c2:	7033      	strb	r3, [r6, #0]
{
 81023c4:	b083      	sub	sp, #12
 81023c6:	4604      	mov	r4, r0
 81023c8:	9100      	str	r1, [sp, #0]
	alarm_state_current = dspGetIsAnomalyDetected( );
 81023ca:	f7ff fbaf 	bl	8101b2c <dspGetIsAnomalyDetected>
 81023ce:	4fad      	ldr	r7, [pc, #692]	; (8102684 <playAudio+0x2d4>)
 81023d0:	f888 0000 	strb.w	r0, [r8]

	if ( alarm_state_current && !alarm_state_previous )
 81023d4:	2800      	cmp	r0, #0
 81023d6:	f000 80a3 	beq.w	8102520 <playAudio+0x170>
 81023da:	7830      	ldrb	r0, [r6, #0]
 81023dc:	2800      	cmp	r0, #0
 81023de:	f040 809f 	bne.w	8102520 <playAudio+0x170>
	{
	  // alarm just went active, set mute false and set counter used for on/off cycle to zero
    alarm_mute = FALSE;
    alarm_counter = 0;
 81023e2:	4ba9      	ldr	r3, [pc, #676]	; (8102688 <playAudio+0x2d8>)
    alarm_mute = FALSE;
 81023e4:	7038      	strb	r0, [r7, #0]
    alarm_counter = 0;
 81023e6:	6018      	str	r0, [r3, #0]

    // set global mute state in IPC
    IPCSetAlarmMuteState( FALSE );
 81023e8:	f7ff ff42 	bl	8102270 <IPCSetAlarmMuteState>
	  // update mute state from IPC
	  alarm_mute = IPCGetAlarmMuteState( );
	}

	// update voice volume from IPC
	voice_volume_normalized = IPCGetVoiceVolumeNormalized( );
 81023ec:	f7ff ff1c 	bl	8102228 <IPCGetVoiceVolumeNormalized>
	voice_volume_log_approx = powf(voice_volume_normalized, 4.0f) * VOICE_VOLUME_MAX;
 81023f0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 81023f4:	f00c fdd0 	bl	810ef98 <powf>
 81023f8:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 81023fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8102400:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 81026d4 <playAudio+0x324>
 8102404:	ed89 0a00 	vstr	s0, [r9]
	// scale raw voice audio data depending on volume variable, the other sources have their own volume standards
	// TODO - adjust this scaling so the bounds are reasonable
	if ( IPCGetVoiceMuteState( ) )
 8102408:	f7ff ff14 	bl	8102234 <IPCGetVoiceMuteState>
 810240c:	9b00      	ldr	r3, [sp, #0]
 810240e:	005d      	lsls	r5, r3, #1
 8102410:	2800      	cmp	r0, #0
 8102412:	f000 8089 	beq.w	8102528 <playAudio+0x178>
	{
	  // voice is muted, zero each sample
    for ( int index = 0; index < audio_sample_length; index++ )
    {
      audio_samples[index] = 0;
 8102416:	462a      	mov	r2, r5
 8102418:	2100      	movs	r1, #0
 810241a:	4620      	mov	r0, r4
 810241c:	f009 fa98 	bl	810b950 <memset>
      audio_samples[index] = (int16_t)((float)audio_samples[index] * voice_volume_log_approx);
    }
	}

	// Mix in alarm audio, if alarm active or needs to end
  if ( alarm_state_current && !alarm_mute )
 8102420:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 81026d8 <playAudio+0x328>
 8102424:	f898 0000 	ldrb.w	r0, [r8]
 8102428:	f8bc 3000 	ldrh.w	r3, [ip]
 810242c:	2800      	cmp	r0, #0
 810242e:	f040 8091 	bne.w	8102554 <playAudio+0x1a4>
                                      ? 0 : alarm_tone_buffer_index + 1);
	    }
	    alarm_counter++;
	  }
	}
  else if ( alarm_tone_buffer_index != 0 )
 8102432:	b153      	cbz	r3, 810244a <playAudio+0x9a>
    // TODO - same end condition as sonification? sample size 0?
    for ( int index = 0; index < audio_sample_length; index++ )
    {
      // alarm is not active but index is not zero, keep adding alarm samples until zero to avoid pop

      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102434:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 81026dc <playAudio+0x32c>
 8102438:	4622      	mov	r2, r4
 810243a:	1967      	adds	r7, r4, r5
  else if ( alarm_tone_buffer_index != 0 )
 810243c:	2100      	movs	r1, #0
    for ( int index = 0; index < audio_sample_length; index++ )
 810243e:	42ba      	cmp	r2, r7
 8102440:	f040 80ee 	bne.w	8102620 <playAudio+0x270>
 8102444:	b109      	cbz	r1, 810244a <playAudio+0x9a>
 8102446:	f8ac 3000 	strh.w	r3, [ip]
    }
  }

  // TODO - scale depending on magnitude from DSP *** test this
	// if alarm active
  if ( alarm_state_current )
 810244a:	2800      	cmp	r0, #0
 810244c:	f040 809e 	bne.w	810258c <playAudio+0x1dc>
          sonification_index_n = 1;
        }
      }
    }
  }
  else if ( sonification_active )
 8102450:	f8df a258 	ldr.w	sl, [pc, #600]	; 81026ac <playAudio+0x2fc>
 8102454:	f89a 3000 	ldrb.w	r3, [sl]
 8102458:	2b00      	cmp	r3, #0
 810245a:	f000 80bb 	beq.w	81025d4 <playAudio+0x224>
    {
      // calculate sample, volume dependent on standard maximum and linear with dsp reported magnitude
      // sample magnitude has bounds from max of standard magnitude (65535/64) to min of (65535/184)
      // TODO - test this volume setup to see if it and the bounds work well
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810245e:	f8df b26c 	ldr.w	fp, [pc, #620]	; 81026cc <playAudio+0x31c>
 8102462:	4626      	mov	r6, r4
 8102464:	4425      	add	r5, r4
    for ( int index = 0; (index < audio_sample_length) && sonification_active; index++ )
 8102466:	42ae      	cmp	r6, r5
 8102468:	f000 80b4 	beq.w	81025d4 <playAudio+0x224>
 810246c:	f89a 3000 	ldrb.w	r3, [sl]
 8102470:	2b00      	cmp	r3, #0
 8102472:	f000 80af 	beq.w	81025d4 <playAudio+0x224>
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102476:	4b85      	ldr	r3, [pc, #532]	; (810268c <playAudio+0x2dc>)
 8102478:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8102690 <playAudio+0x2e0>
 810247c:	edd3 7a00 	vldr	s15, [r3]
 8102480:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8102694 <playAudio+0x2e4>
 8102484:	eddf 0a84 	vldr	s1, [pc, #528]	; 8102698 <playAudio+0x2e8>
 8102488:	ee30 0a67 	vsub.f32	s0, s0, s15
 810248c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8102490:	ee30 0a00 	vadd.f32	s0, s0, s0
 8102494:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8102498:	f7fe ffd4 	bl	8101444 <limitFloat>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810249c:	4b7f      	ldr	r3, [pc, #508]	; (810269c <playAudio+0x2ec>)
 810249e:	f8db 7000 	ldr.w	r7, [fp]
 81024a2:	edd3 6a00 	vldr	s13, [r3]
 81024a6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 81026a0 <playAudio+0x2f0>
 81024aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81024ae:	eeb0 8a40 	vmov.f32	s16, s0
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81024b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81024b6:	ee17 0a90 	vmov	r0, s15
 81024ba:	f7fe f8cd 	bl	8100658 <__aeabi_f2d>
 81024be:	a36e      	add	r3, pc, #440	; (adr r3, 8102678 <playAudio+0x2c8>)
 81024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024c4:	f7fe f920 	bl	8100708 <__aeabi_dmul>
 81024c8:	4680      	mov	r8, r0
 81024ca:	4638      	mov	r0, r7
 81024cc:	4689      	mov	r9, r1
 81024ce:	f7fe f8a1 	bl	8100614 <__aeabi_ui2d>
 81024d2:	460b      	mov	r3, r1
 81024d4:	4602      	mov	r2, r0
 81024d6:	4649      	mov	r1, r9
 81024d8:	4640      	mov	r0, r8
 81024da:	f7fe f915 	bl	8100708 <__aeabi_dmul>
 81024de:	f7fe fc0b 	bl	8100cf8 <__aeabi_d2f>
 81024e2:	ee00 0a10 	vmov	s0, r0
 81024e6:	f00c fdd5 	bl	810f094 <sinf>
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81024ea:	eddf 7a6e 	vldr	s15, [pc, #440]	; 81026a4 <playAudio+0x2f4>
 81024ee:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 81026a8 <playAudio+0x2f8>
 81024f2:	ee38 8a27 	vadd.f32	s16, s16, s15
 81024f6:	eec7 7a08 	vdiv.f32	s15, s14, s16
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81024fa:	ee27 0a80 	vmul.f32	s0, s15, s0
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81024fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8102502:	ee10 3a10 	vmov	r3, s0
 8102506:	b21b      	sxth	r3, r3

      // end condition for sonification, no active anomaly and current sample small enough in amplitude to avoid output pop
      // *** zero because this works well, no noticable delay, and even 1 seems to be audible
      if ( sonification_sample == 0 )
 8102508:	b90b      	cbnz	r3, 810250e <playAudio+0x15e>
      {
        sonification_active = FALSE;
 810250a:	f88a 3000 	strb.w	r3, [sl]
      }
      audio_samples[index] += sonification_sample;
 810250e:	f9b6 2000 	ldrsh.w	r2, [r6]
      sonification_index_n++;
 8102512:	3701      	adds	r7, #1
      audio_samples[index] += sonification_sample;
 8102514:	4413      	add	r3, r2
 8102516:	f826 3b02 	strh.w	r3, [r6], #2
      sonification_index_n++;
 810251a:	f8cb 7000 	str.w	r7, [fp]
    for ( int index = 0; (index < audio_sample_length) && sonification_active; index++ )
 810251e:	e7a2      	b.n	8102466 <playAudio+0xb6>
	  alarm_mute = IPCGetAlarmMuteState( );
 8102520:	f7ff fea0 	bl	8102264 <IPCGetAlarmMuteState>
 8102524:	7038      	strb	r0, [r7, #0]
 8102526:	e761      	b.n	81023ec <playAudio+0x3c>
      audio_samples[index] = (int16_t)((float)audio_samples[index] * voice_volume_log_approx);
 8102528:	ed99 7a00 	vldr	s14, [r9]
 810252c:	4623      	mov	r3, r4
 810252e:	1962      	adds	r2, r4, r5
    for ( int index = 0; index < audio_sample_length; index++ )
 8102530:	4293      	cmp	r3, r2
 8102532:	f43f af75 	beq.w	8102420 <playAudio+0x70>
      audio_samples[index] = (int16_t)((float)audio_samples[index] * voice_volume_log_approx);
 8102536:	f9b3 1000 	ldrsh.w	r1, [r3]
 810253a:	ee07 1a90 	vmov	s15, r1
 810253e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8102546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810254a:	ee17 1a90 	vmov	r1, s15
 810254e:	f823 1b02 	strh.w	r1, [r3], #2
    for ( int index = 0; index < audio_sample_length; index++ )
 8102552:	e7ed      	b.n	8102530 <playAudio+0x180>
  if ( alarm_state_current && !alarm_mute )
 8102554:	783a      	ldrb	r2, [r7, #0]
 8102556:	2a00      	cmp	r2, #0
 8102558:	f47f af6b 	bne.w	8102432 <playAudio+0x82>
 810255c:	f8df b128 	ldr.w	fp, [pc, #296]	; 8102688 <playAudio+0x2d8>
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102560:	f8df 8178 	ldr.w	r8, [pc, #376]	; 81026dc <playAudio+0x32c>
 8102564:	f8db 0000 	ldr.w	r0, [fp]
  if ( alarm_state_current && !alarm_mute )
 8102568:	4691      	mov	r9, r2
    for ( int index = 0; index < audio_sample_length; index++ )
 810256a:	4611      	mov	r1, r2
	    if (( alarm_counter % 16000 < 4000 ) || ( alarm_tone_buffer_index != 0))
 810256c:	f44f 5e7a 	mov.w	lr, #16000	; 0x3e80
    for ( int index = 0; index < audio_sample_length; index++ )
 8102570:	9f00      	ldr	r7, [sp, #0]
 8102572:	428f      	cmp	r7, r1
 8102574:	eb01 0a00 	add.w	sl, r1, r0
 8102578:	dc38      	bgt.n	81025ec <playAudio+0x23c>
 810257a:	4438      	add	r0, r7
 810257c:	b10a      	cbz	r2, 8102582 <playAudio+0x1d2>
 810257e:	f8ac 3000 	strh.w	r3, [ip]
 8102582:	f1b9 0f00 	cmp.w	r9, #0
 8102586:	d001      	beq.n	810258c <playAudio+0x1dc>
 8102588:	f8cb 0000 	str.w	r0, [fp]
    sonification_active = TRUE;
 810258c:	4b47      	ldr	r3, [pc, #284]	; (81026ac <playAudio+0x2fc>)
 810258e:	2201      	movs	r2, #1
 8102590:	701a      	strb	r2, [r3, #0]
    sonification_frequency_normalized = dspGetAnomalyFrequencyNormalized( );
 8102592:	f7ff fad1 	bl	8101b38 <dspGetAnomalyFrequencyNormalized>
 8102596:	4a46      	ldr	r2, [pc, #280]	; (81026b0 <playAudio+0x300>)
    if ( alarm_state_previous == FALSE )
 8102598:	7831      	ldrb	r1, [r6, #0]
    sonification_frequency_normalized = dspGetAnomalyFrequencyNormalized( );
 810259a:	ed82 0a00 	vstr	s0, [r2]
    if ( alarm_state_previous == FALSE )
 810259e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 81026b4 <playAudio+0x304>
 81025a2:	eddf 7a45 	vldr	s15, [pc, #276]	; 81026b8 <playAudio+0x308>
      sonification_frequency_new = FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized;
 81025a6:	edd2 6a00 	vldr	s13, [r2]
 81025aa:	4b44      	ldr	r3, [pc, #272]	; (81026bc <playAudio+0x30c>)
 81025ac:	4e37      	ldr	r6, [pc, #220]	; (810268c <playAudio+0x2dc>)
 81025ae:	eee6 7a87 	vfma.f32	s15, s13, s14
    if ( alarm_state_previous == FALSE )
 81025b2:	2900      	cmp	r1, #0
 81025b4:	d143      	bne.n	810263e <playAudio+0x28e>
      sonification_frequency_new = FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized;
 81025b6:	edc3 7a00 	vstr	s15, [r3]
      sonification_magnitude = dspGetAnomalyMagnitude( );
 81025ba:	f7ff fac3 	bl	8101b44 <dspGetAnomalyMagnitude>
 81025be:	1963      	adds	r3, r4, r5
      sonification_sample_previous = sonification_sample_current;
 81025c0:	f8df a11c 	ldr.w	sl, [pc, #284]	; 81026e0 <playAudio+0x330>
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 81025c4:	ed86 0a00 	vstr	s0, [r6]
 81025c8:	9301      	str	r3, [sp, #4]
 81025ca:	4626      	mov	r6, r4
    for ( int index = 0; index < audio_sample_length; index++ )
 81025cc:	9b01      	ldr	r3, [sp, #4]
 81025ce:	429e      	cmp	r6, r3
 81025d0:	f040 8088 	bne.w	81026e4 <playAudio+0x334>
    }
  }

	// write mixed output audio to output -> stlink uart -> usb com port
  HAL_UART_Transmit_DMA( &huart3, (uint8_t*)audio_samples, audio_sample_length*2 );
 81025d4:	9b00      	ldr	r3, [sp, #0]
 81025d6:	483a      	ldr	r0, [pc, #232]	; (81026c0 <playAudio+0x310>)
 81025d8:	005a      	lsls	r2, r3, #1
 81025da:	b292      	uxth	r2, r2
 81025dc:	4621      	mov	r1, r4
}
 81025de:	b003      	add	sp, #12
 81025e0:	ecbd 8b02 	vpop	{d8}
 81025e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_UART_Transmit_DMA( &huart3, (uint8_t*)audio_samples, audio_sample_length*2 );
 81025e8:	f004 b89a 	b.w	8106720 <HAL_UART_Transmit_DMA>
	    if (( alarm_counter % 16000 < 4000 ) || ( alarm_tone_buffer_index != 0))
 81025ec:	fbba f9fe 	udiv	r9, sl, lr
 81025f0:	fb0e a919 	mls	r9, lr, r9, sl
 81025f4:	f5b9 6f7a 	cmp.w	r9, #4000	; 0xfa0
 81025f8:	d300      	bcc.n	81025fc <playAudio+0x24c>
 81025fa:	b16b      	cbz	r3, 8102618 <playAudio+0x268>
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 81025fc:	f838 9013 	ldrh.w	r9, [r8, r3, lsl #1]
 8102600:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102604:	2b3f      	cmp	r3, #63	; 0x3f
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102606:	444a      	add	r2, r9
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102608:	bf18      	it	ne
 810260a:	3301      	addne	r3, #1
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 810260c:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102610:	bf14      	ite	ne
 8102612:	b29b      	uxthne	r3, r3
 8102614:	2300      	moveq	r3, #0
 8102616:	2201      	movs	r2, #1
    for ( int index = 0; index < audio_sample_length; index++ )
 8102618:	3101      	adds	r1, #1
 810261a:	f04f 0901 	mov.w	r9, #1
 810261e:	e7a7      	b.n	8102570 <playAudio+0x1c0>
      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102620:	f83e 8013 	ldrh.w	r8, [lr, r3, lsl #1]
 8102624:	f9b2 1000 	ldrsh.w	r1, [r2]
      alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102628:	2b3f      	cmp	r3, #63	; 0x3f
      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 810262a:	4441      	add	r1, r8
      alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 810262c:	bf18      	it	ne
 810262e:	3301      	addne	r3, #1
      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102630:	f822 1b02 	strh.w	r1, [r2], #2
      alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102634:	bf14      	ite	ne
 8102636:	b29b      	uxthne	r3, r3
 8102638:	2300      	moveq	r3, #0
  else if ( alarm_tone_buffer_index != 0 )
 810263a:	2101      	movs	r1, #1
 810263c:	e6ff      	b.n	810243e <playAudio+0x8e>
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 810263e:	edd3 6a00 	vldr	s13, [r3]
 8102642:	ed9f 6a20 	vldr	s12, [pc, #128]	; 81026c4 <playAudio+0x314>
 8102646:	ed9f 8a20 	vldr	s16, [pc, #128]	; 81026c8 <playAudio+0x318>
 810264a:	ee66 6a86 	vmul.f32	s13, s13, s12
 810264e:	ee86 7a88 	vdiv.f32	s14, s13, s16
                                       / 400.0f;
 8102652:	eec7 6a88 	vdiv.f32	s13, s15, s16
                                     + (FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized)
 8102656:	ee77 7a26 	vadd.f32	s15, s14, s13
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 810265a:	edc3 7a00 	vstr	s15, [r3]
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 810265e:	edd6 7a00 	vldr	s15, [r6]
 8102662:	ee67 7a86 	vmul.f32	s15, s15, s12
 8102666:	eec7 8a88 	vdiv.f32	s17, s15, s16
 810266a:	f7ff fa6b 	bl	8101b44 <dspGetAnomalyMagnitude>
 810266e:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8102672:	ee37 0aa8 	vadd.f32	s0, s15, s17
 8102676:	e7a2      	b.n	81025be <playAudio+0x20e>
 8102678:	54442d18 	.word	0x54442d18
 810267c:	400921fb 	.word	0x400921fb
 8102680:	100190b6 	.word	0x100190b6
 8102684:	100190b4 	.word	0x100190b4
 8102688:	100190b0 	.word	0x100190b0
 810268c:	10000074 	.word	0x10000074
 8102690:	42700000 	.word	0x42700000
 8102694:	42f00000 	.word	0x42f00000
 8102698:	00000000 	.word	0x00000000
 810269c:	10000068 	.word	0x10000068
 81026a0:	467a0000 	.word	0x467a0000
 81026a4:	42800000 	.word	0x42800000
 81026a8:	477fff00 	.word	0x477fff00
 81026ac:	1001913a 	.word	0x1001913a
 81026b0:	10000070 	.word	0x10000070
 81026b4:	45f3c000 	.word	0x45f3c000
 81026b8:	43480000 	.word	0x43480000
 81026bc:	1000006c 	.word	0x1000006c
 81026c0:	10019210 	.word	0x10019210
 81026c4:	43c78000 	.word	0x43c78000
 81026c8:	43c80000 	.word	0x43c80000
 81026cc:	1001913c 	.word	0x1001913c
 81026d0:	100190b5 	.word	0x100190b5
 81026d4:	10019144 	.word	0x10019144
 81026d8:	100190b8 	.word	0x100190b8
 81026dc:	100190ba 	.word	0x100190ba
 81026e0:	10019140 	.word	0x10019140
      sonification_sample_previous = sonification_sample_current;
 81026e4:	4a38      	ldr	r2, [pc, #224]	; (81027c8 <playAudio+0x418>)
 81026e6:	f8ba 3000 	ldrh.w	r3, [sl]
 81026ea:	8013      	strh	r3, [r2, #0]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81026ec:	4b37      	ldr	r3, [pc, #220]	; (81027cc <playAudio+0x41c>)
 81026ee:	ed9f 0a38 	vldr	s0, [pc, #224]	; 81027d0 <playAudio+0x420>
 81026f2:	edd3 7a00 	vldr	s15, [r3]
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81026f6:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 81027f0 <playAudio+0x440>
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81026fa:	ed9f 1a36 	vldr	s2, [pc, #216]	; 81027d4 <playAudio+0x424>
 81026fe:	eddf 0a36 	vldr	s1, [pc, #216]	; 81027d8 <playAudio+0x428>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102702:	4f36      	ldr	r7, [pc, #216]	; (81027dc <playAudio+0x42c>)
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102704:	ee30 0a67 	vsub.f32	s0, s0, s15
 8102708:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 810270c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8102710:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8102714:	f7fe fe96 	bl	8101444 <limitFloat>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102718:	683d      	ldr	r5, [r7, #0]
 810271a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 81027e0 <playAudio+0x430>
 810271e:	eddb 8a00 	vldr	s17, [fp]
 8102722:	eec8 7a87 	vdiv.f32	s15, s17, s14
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102726:	eeb0 8a40 	vmov.f32	s16, s0
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810272a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810272e:	ee17 0a90 	vmov	r0, s15
 8102732:	f7fd ff91 	bl	8100658 <__aeabi_f2d>
 8102736:	a322      	add	r3, pc, #136	; (adr r3, 81027c0 <playAudio+0x410>)
 8102738:	e9d3 2300 	ldrd	r2, r3, [r3]
 810273c:	f7fd ffe4 	bl	8100708 <__aeabi_dmul>
 8102740:	4680      	mov	r8, r0
 8102742:	4628      	mov	r0, r5
 8102744:	4689      	mov	r9, r1
 8102746:	f7fd ff65 	bl	8100614 <__aeabi_ui2d>
 810274a:	4602      	mov	r2, r0
 810274c:	460b      	mov	r3, r1
 810274e:	4640      	mov	r0, r8
 8102750:	4649      	mov	r1, r9
 8102752:	f7fd ffd9 	bl	8100708 <__aeabi_dmul>
 8102756:	f7fe facf 	bl	8100cf8 <__aeabi_d2f>
 810275a:	ee00 0a10 	vmov	s0, r0
 810275e:	f00c fc99 	bl	810f094 <sinf>
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102762:	eddf 7a20 	vldr	s15, [pc, #128]	; 81027e4 <playAudio+0x434>
 8102766:	ed9f 7a20 	vldr	s14, [pc, #128]	; 81027e8 <playAudio+0x438>
      audio_samples[index] += sonification_sample_current;
 810276a:	f9b6 2000 	ldrsh.w	r2, [r6]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810276e:	ee38 8a27 	vadd.f32	s16, s16, s15
      sonification_index_n++;
 8102772:	3501      	adds	r5, #1
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102774:	eec7 7a08 	vdiv.f32	s15, s14, s16
      sonification_index_n++;
 8102778:	603d      	str	r5, [r7, #0]
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810277a:	ee27 0a80 	vmul.f32	s0, s15, s0
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810277e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8102782:	ee10 3a10 	vmov	r3, s0
 8102786:	b21b      	sxth	r3, r3
      audio_samples[index] += sonification_sample_current;
 8102788:	441a      	add	r2, r3
 810278a:	f826 2b02 	strh.w	r2, [r6], #2
      if ( sonification_frequency_new != sonification_frequency_current )
 810278e:	4a17      	ldr	r2, [pc, #92]	; (81027ec <playAudio+0x43c>)
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102790:	f8aa 3000 	strh.w	r3, [sl]
      if ( sonification_frequency_new != sonification_frequency_current )
 8102794:	edd2 7a00 	vldr	s15, [r2]
 8102798:	eef4 8a67 	vcmp.f32	s17, s15
 810279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81027a0:	f43f af14 	beq.w	81025cc <playAudio+0x21c>
        if ((( sonification_sample_current == 0))
 81027a4:	2b00      	cmp	r3, #0
 81027a6:	f47f af11 	bne.w	81025cc <playAudio+0x21c>
            && (sonification_sample_previous < sonification_sample_current))
 81027aa:	4a07      	ldr	r2, [pc, #28]	; (81027c8 <playAudio+0x418>)
 81027ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 81027b0:	2b00      	cmp	r3, #0
          sonification_index_n = 1;
 81027b2:	bfbe      	ittt	lt
 81027b4:	2301      	movlt	r3, #1
          sonification_frequency_current = sonification_frequency_new;
 81027b6:	edcb 7a00 	vstrlt	s15, [fp]
          sonification_index_n = 1;
 81027ba:	603b      	strlt	r3, [r7, #0]
    for ( int index = 0; index < audio_sample_length; index++ )
 81027bc:	e706      	b.n	81025cc <playAudio+0x21c>
 81027be:	bf00      	nop
 81027c0:	54442d18 	.word	0x54442d18
 81027c4:	400921fb 	.word	0x400921fb
 81027c8:	10019142 	.word	0x10019142
 81027cc:	10000074 	.word	0x10000074
 81027d0:	42700000 	.word	0x42700000
 81027d4:	42f00000 	.word	0x42f00000
 81027d8:	00000000 	.word	0x00000000
 81027dc:	1001913c 	.word	0x1001913c
 81027e0:	467a0000 	.word	0x467a0000
 81027e4:	42800000 	.word	0x42800000
 81027e8:	477fff00 	.word	0x477fff00
 81027ec:	1000006c 	.word	0x1000006c
 81027f0:	10000068 	.word	0x10000068

081027f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81027f4:	4b07      	ldr	r3, [pc, #28]	; (8102814 <HAL_MspInit+0x20>)
 81027f6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 81027fa:	f042 0202 	orr.w	r2, r2, #2
 81027fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8102802:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
{
 8102806:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102808:	f003 0302 	and.w	r3, r3, #2
 810280c:	9301      	str	r3, [sp, #4]
 810280e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102810:	b002      	add	sp, #8
 8102812:	4770      	bx	lr
 8102814:	58024400 	.word	0x58024400

08102818 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102818:	e7fe      	b.n	8102818 <NMI_Handler>

0810281a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810281a:	e7fe      	b.n	810281a <HardFault_Handler>

0810281c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810281c:	e7fe      	b.n	810281c <MemManage_Handler>

0810281e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810281e:	e7fe      	b.n	810281e <BusFault_Handler>

08102820 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102820:	e7fe      	b.n	8102820 <UsageFault_Handler>

08102822 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102822:	4770      	bx	lr

08102824 <DebugMon_Handler>:
 8102824:	4770      	bx	lr

08102826 <PendSV_Handler>:
 8102826:	4770      	bx	lr

08102828 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102828:	f000 ba16 	b.w	8102c58 <HAL_IncTick>

0810282c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 810282c:	4801      	ldr	r0, [pc, #4]	; (8102834 <DMA1_Stream0_IRQHandler+0x8>)
 810282e:	f001 bd79 	b.w	8104324 <HAL_DMA_IRQHandler>
 8102832:	bf00      	nop
 8102834:	10000c44 	.word	0x10000c44

08102838 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8102838:	4801      	ldr	r0, [pc, #4]	; (8102840 <DMA1_Stream1_IRQHandler+0x8>)
 810283a:	f001 bd73 	b.w	8104324 <HAL_DMA_IRQHandler>
 810283e:	bf00      	nop
 8102840:	10000cbc 	.word	0x10000cbc

08102844 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102844:	4801      	ldr	r0, [pc, #4]	; (810284c <USART3_IRQHandler+0x8>)
 8102846:	f004 b807 	b.w	8106858 <HAL_UART_IRQHandler>
 810284a:	bf00      	nop
 810284c:	10019210 	.word	0x10019210

08102850 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102850:	4801      	ldr	r0, [pc, #4]	; (8102858 <DMA1_Stream7_IRQHandler+0x8>)
 8102852:	f001 bd67 	b.w	8104324 <HAL_DMA_IRQHandler>
 8102856:	bf00      	nop
 8102858:	10019198 	.word	0x10019198

0810285c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810285c:	4a0b      	ldr	r2, [pc, #44]	; (810288c <_sbrk+0x30>)
 810285e:	6811      	ldr	r1, [r2, #0]
{
 8102860:	b510      	push	{r4, lr}
 8102862:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8102864:	b909      	cbnz	r1, 810286a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8102866:	490a      	ldr	r1, [pc, #40]	; (8102890 <_sbrk+0x34>)
 8102868:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810286a:	6810      	ldr	r0, [r2, #0]
 810286c:	4909      	ldr	r1, [pc, #36]	; (8102894 <_sbrk+0x38>)
 810286e:	4c0a      	ldr	r4, [pc, #40]	; (8102898 <_sbrk+0x3c>)
 8102870:	4403      	add	r3, r0
 8102872:	1b09      	subs	r1, r1, r4
 8102874:	428b      	cmp	r3, r1
 8102876:	d906      	bls.n	8102886 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8102878:	f009 f8cc 	bl	810ba14 <__errno>
 810287c:	230c      	movs	r3, #12
 810287e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8102880:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8102884:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8102886:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8102888:	e7fc      	b.n	8102884 <_sbrk+0x28>
 810288a:	bf00      	nop
 810288c:	10019148 	.word	0x10019148
 8102890:	1001ac80 	.word	0x1001ac80
 8102894:	10048000 	.word	0x10048000
 8102898:	00001000 	.word	0x00001000

0810289c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 810289c:	6802      	ldr	r2, [r0, #0]
 810289e:	4b09      	ldr	r3, [pc, #36]	; (81028c4 <HAL_TIM_Base_MspInit+0x28>)
 81028a0:	429a      	cmp	r2, r3
{
 81028a2:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 81028a4:	d10c      	bne.n	81028c0 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 81028a6:	4b08      	ldr	r3, [pc, #32]	; (81028c8 <HAL_TIM_Base_MspInit+0x2c>)
 81028a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 81028ac:	f042 0202 	orr.w	r2, r2, #2
 81028b0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 81028b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81028b8:	f003 0302 	and.w	r3, r3, #2
 81028bc:	9301      	str	r3, [sp, #4]
 81028be:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 81028c0:	b002      	add	sp, #8
 81028c2:	4770      	bx	lr
 81028c4:	40000400 	.word	0x40000400
 81028c8:	58024400 	.word	0x58024400

081028cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 81028cc:	b510      	push	{r4, lr}
 81028ce:	4604      	mov	r4, r0
 81028d0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81028d2:	2214      	movs	r2, #20
 81028d4:	2100      	movs	r1, #0
 81028d6:	a801      	add	r0, sp, #4
 81028d8:	f009 f83a 	bl	810b950 <memset>
  if(timHandle->Instance==TIM3)
 81028dc:	6822      	ldr	r2, [r4, #0]
 81028de:	4b0d      	ldr	r3, [pc, #52]	; (8102914 <HAL_TIM_MspPostInit+0x48>)
 81028e0:	429a      	cmp	r2, r3
 81028e2:	d115      	bne.n	8102910 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81028e4:	4b0c      	ldr	r3, [pc, #48]	; (8102918 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81028e6:	480d      	ldr	r0, [pc, #52]	; (810291c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81028e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81028ec:	f042 0202 	orr.w	r2, r2, #2
 81028f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028f8:	f003 0302 	and.w	r3, r3, #2
 81028fc:	9300      	str	r3, [sp, #0]
 81028fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102900:	2210      	movs	r2, #16
 8102902:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102904:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102906:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 810290a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810290c:	f001 ff02 	bl	8104714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102910:	b006      	add	sp, #24
 8102912:	bd10      	pop	{r4, pc}
 8102914:	40000400 	.word	0x40000400
 8102918:	58024400 	.word	0x58024400
 810291c:	58020400 	.word	0x58020400

08102920 <MX_TIM3_Init>:
{
 8102920:	b510      	push	{r4, lr}
 8102922:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102924:	2210      	movs	r2, #16
 8102926:	2100      	movs	r1, #0
 8102928:	a803      	add	r0, sp, #12
 810292a:	f009 f811 	bl	810b950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810292e:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102930:	221c      	movs	r2, #28
 8102932:	4621      	mov	r1, r4
 8102934:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102938:	e9cd 4400 	strd	r4, r4, [sp]
 810293c:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810293e:	f009 f807 	bl	810b950 <memset>
  htim3.Instance = TIM3;
 8102942:	4823      	ldr	r0, [pc, #140]	; (81029d0 <MX_TIM3_Init+0xb0>)
 8102944:	4b23      	ldr	r3, [pc, #140]	; (81029d4 <MX_TIM3_Init+0xb4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102946:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8102948:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 750;
 810294c:	f240 23ee 	movw	r3, #750	; 0x2ee
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102950:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102954:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102956:	f003 fc69 	bl	810622c <HAL_TIM_Base_Init>
 810295a:	b108      	cbz	r0, 8102960 <MX_TIM3_Init+0x40>
    Error_Handler();
 810295c:	f7ff fcf6 	bl	810234c <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102964:	481a      	ldr	r0, [pc, #104]	; (81029d0 <MX_TIM3_Init+0xb0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102966:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102968:	a903      	add	r1, sp, #12
 810296a:	f003 fd8d 	bl	8106488 <HAL_TIM_ConfigClockSource>
 810296e:	b108      	cbz	r0, 8102974 <MX_TIM3_Init+0x54>
    Error_Handler();
 8102970:	f7ff fcec 	bl	810234c <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102974:	4816      	ldr	r0, [pc, #88]	; (81029d0 <MX_TIM3_Init+0xb0>)
 8102976:	f003 fc89 	bl	810628c <HAL_TIM_PWM_Init>
 810297a:	b108      	cbz	r0, 8102980 <MX_TIM3_Init+0x60>
    Error_Handler();
 810297c:	f7ff fce6 	bl	810234c <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8102980:	2320      	movs	r3, #32
 8102982:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102984:	4812      	ldr	r0, [pc, #72]	; (81029d0 <MX_TIM3_Init+0xb0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102986:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102988:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810298a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810298c:	f003 fe38 	bl	8106600 <HAL_TIMEx_MasterConfigSynchronization>
 8102990:	b108      	cbz	r0, 8102996 <MX_TIM3_Init+0x76>
    Error_Handler();
 8102992:	f7ff fcdb 	bl	810234c <Error_Handler>
  sConfigOC.Pulse = 400;
 8102996:	2270      	movs	r2, #112	; 0x70
 8102998:	f44f 73c8 	mov.w	r3, #400	; 0x190
 810299c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81029a0:	480b      	ldr	r0, [pc, #44]	; (81029d0 <MX_TIM3_Init+0xb0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81029a2:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81029a4:	a907      	add	r1, sp, #28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81029a6:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81029a8:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81029aa:	f003 fce5 	bl	8106378 <HAL_TIM_PWM_ConfigChannel>
 81029ae:	b108      	cbz	r0, 81029b4 <MX_TIM3_Init+0x94>
    Error_Handler();
 81029b0:	f7ff fccc 	bl	810234c <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81029b4:	4806      	ldr	r0, [pc, #24]	; (81029d0 <MX_TIM3_Init+0xb0>)
 81029b6:	220c      	movs	r2, #12
 81029b8:	a907      	add	r1, sp, #28
 81029ba:	f003 fcdd 	bl	8106378 <HAL_TIM_PWM_ConfigChannel>
 81029be:	b108      	cbz	r0, 81029c4 <MX_TIM3_Init+0xa4>
    Error_Handler();
 81029c0:	f7ff fcc4 	bl	810234c <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 81029c4:	4802      	ldr	r0, [pc, #8]	; (81029d0 <MX_TIM3_Init+0xb0>)
 81029c6:	f7ff ff81 	bl	81028cc <HAL_TIM_MspPostInit>
}
 81029ca:	b00e      	add	sp, #56	; 0x38
 81029cc:	bd10      	pop	{r4, pc}
 81029ce:	bf00      	nop
 81029d0:	1001914c 	.word	0x1001914c
 81029d4:	40000400 	.word	0x40000400

081029d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 81029d8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81029da:	4816      	ldr	r0, [pc, #88]	; (8102a34 <MX_USART3_UART_Init+0x5c>)
  huart3.Init.BaudRate = 4000000;
 81029dc:	4a16      	ldr	r2, [pc, #88]	; (8102a38 <MX_USART3_UART_Init+0x60>)
 81029de:	4b17      	ldr	r3, [pc, #92]	; (8102a3c <MX_USART3_UART_Init+0x64>)
 81029e0:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81029e4:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 81029e6:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 81029e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81029ec:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81029f0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81029f4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart3.Init.Parity = UART_PARITY_NONE;
 81029f8:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81029fa:	f004 fb8b 	bl	8107114 <HAL_UART_Init>
 81029fe:	b108      	cbz	r0, 8102a04 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
 8102a00:	f7ff fca4 	bl	810234c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102a04:	480b      	ldr	r0, [pc, #44]	; (8102a34 <MX_USART3_UART_Init+0x5c>)
 8102a06:	2100      	movs	r1, #0
 8102a08:	f004 fbf4 	bl	81071f4 <HAL_UARTEx_SetTxFifoThreshold>
 8102a0c:	b108      	cbz	r0, 8102a12 <MX_USART3_UART_Init+0x3a>
  {
    Error_Handler();
 8102a0e:	f7ff fc9d 	bl	810234c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102a12:	4808      	ldr	r0, [pc, #32]	; (8102a34 <MX_USART3_UART_Init+0x5c>)
 8102a14:	2100      	movs	r1, #0
 8102a16:	f004 fc0d 	bl	8107234 <HAL_UARTEx_SetRxFifoThreshold>
 8102a1a:	b108      	cbz	r0, 8102a20 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8102a1c:	f7ff fc96 	bl	810234c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102a20:	4804      	ldr	r0, [pc, #16]	; (8102a34 <MX_USART3_UART_Init+0x5c>)
 8102a22:	f004 fbcc 	bl	81071be <HAL_UARTEx_DisableFifoMode>
 8102a26:	b118      	cbz	r0, 8102a30 <MX_USART3_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8102a2c:	f7ff bc8e 	b.w	810234c <Error_Handler>
}
 8102a30:	bd08      	pop	{r3, pc}
 8102a32:	bf00      	nop
 8102a34:	10019210 	.word	0x10019210
 8102a38:	40004800 	.word	0x40004800
 8102a3c:	003d0900 	.word	0x003d0900

08102a40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102a40:	b570      	push	{r4, r5, r6, lr}
 8102a42:	b0b8      	sub	sp, #224	; 0xe0
 8102a44:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a46:	2214      	movs	r2, #20
 8102a48:	2100      	movs	r1, #0
 8102a4a:	a803      	add	r0, sp, #12
 8102a4c:	f008 ff80 	bl	810b950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102a50:	22c0      	movs	r2, #192	; 0xc0
 8102a52:	2100      	movs	r1, #0
 8102a54:	a808      	add	r0, sp, #32
 8102a56:	f008 ff7b 	bl	810b950 <memset>
  if(uartHandle->Instance==USART3)
 8102a5a:	6832      	ldr	r2, [r6, #0]
 8102a5c:	4b2a      	ldr	r3, [pc, #168]	; (8102b08 <HAL_UART_MspInit+0xc8>)
 8102a5e:	429a      	cmp	r2, r3
 8102a60:	d150      	bne.n	8102b04 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102a62:	2202      	movs	r2, #2
 8102a64:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a66:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a6c:	f002 f970 	bl	8104d50 <HAL_RCCEx_PeriphCLKConfig>
 8102a70:	b108      	cbz	r0, 8102a76 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8102a72:	f7ff fc6b 	bl	810234c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102a76:	4b25      	ldr	r3, [pc, #148]	; (8102b0c <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102a78:	4825      	ldr	r0, [pc, #148]	; (8102b10 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8102a7a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream7;
 8102a7e:	4c25      	ldr	r4, [pc, #148]	; (8102b14 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8102a80:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8102a84:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8102a88:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8102a8c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8102a90:	9201      	str	r2, [sp, #4]
 8102a92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102a98:	f042 0202 	orr.w	r2, r2, #2
 8102a9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102aa4:	f003 0302 	and.w	r3, r3, #2
 8102aa8:	9302      	str	r3, [sp, #8]
 8102aaa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102aac:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8102ab0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ab2:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ab4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ab8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102aba:	2307      	movs	r3, #7
 8102abc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102abe:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ac2:	f001 fe27 	bl	8104714 <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102ac6:	4914      	ldr	r1, [pc, #80]	; (8102b18 <HAL_UART_MspInit+0xd8>)
 8102ac8:	232e      	movs	r3, #46	; 0x2e
 8102aca:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102ace:	2340      	movs	r3, #64	; 0x40
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102ad0:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102ad4:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102ada:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8102ade:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102ae2:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102ae6:	f000 ff2d 	bl	8103944 <HAL_DMA_Init>
 8102aea:	b108      	cbz	r0, 8102af0 <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 8102aec:	f7ff fc2e 	bl	810234c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102af0:	2200      	movs	r2, #0
 8102af2:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102af4:	67f4      	str	r4, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102af6:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102af8:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102afa:	f000 fd33 	bl	8103564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102afe:	2027      	movs	r0, #39	; 0x27
 8102b00:	f000 fd62 	bl	81035c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102b04:	b038      	add	sp, #224	; 0xe0
 8102b06:	bd70      	pop	{r4, r5, r6, pc}
 8102b08:	40004800 	.word	0x40004800
 8102b0c:	58024400 	.word	0x58024400
 8102b10:	58020400 	.word	0x58020400
 8102b14:	10019198 	.word	0x10019198
 8102b18:	400200b8 	.word	0x400200b8

08102b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102b54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102b20:	f7fe faee 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102b24:	480c      	ldr	r0, [pc, #48]	; (8102b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102b26:	490d      	ldr	r1, [pc, #52]	; (8102b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102b28:	4a0d      	ldr	r2, [pc, #52]	; (8102b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102b2c:	e002      	b.n	8102b34 <LoopCopyDataInit>

08102b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102b32:	3304      	adds	r3, #4

08102b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102b38:	d3f9      	bcc.n	8102b2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102b3a:	4a0a      	ldr	r2, [pc, #40]	; (8102b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102b3c:	4c0a      	ldr	r4, [pc, #40]	; (8102b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102b40:	e001      	b.n	8102b46 <LoopFillZerobss>

08102b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102b44:	3204      	adds	r2, #4

08102b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102b48:	d3fb      	bcc.n	8102b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102b4a:	f008 ff69 	bl	810ba20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102b4e:	f7ff fb95 	bl	810227c <main>
  bx  lr
 8102b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102b54:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102b58:	1000004c 	.word	0x1000004c
  ldr r1, =_edata
 8102b5c:	10000b5c 	.word	0x10000b5c
  ldr r2, =_sidata
 8102b60:	081ecad8 	.word	0x081ecad8
  ldr r2, =_sbss
 8102b64:	10000b60 	.word	0x10000b60
  ldr r4, =_ebss
 8102b68:	1001ac7c 	.word	0x1001ac7c

08102b6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102b6c:	e7fe      	b.n	8102b6c <ADC3_IRQHandler>
	...

08102b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102b70:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102b72:	4b0f      	ldr	r3, [pc, #60]	; (8102bb0 <HAL_InitTick+0x40>)
 8102b74:	781a      	ldrb	r2, [r3, #0]
{
 8102b76:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8102b78:	b90a      	cbnz	r2, 8102b7e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8102b7a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8102b7c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8102b86:	4a0b      	ldr	r2, [pc, #44]	; (8102bb4 <HAL_InitTick+0x44>)
 8102b88:	6810      	ldr	r0, [r2, #0]
 8102b8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8102b8e:	f000 fd29 	bl	81035e4 <HAL_SYSTICK_Config>
 8102b92:	4604      	mov	r4, r0
 8102b94:	2800      	cmp	r0, #0
 8102b96:	d1f0      	bne.n	8102b7a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102b98:	2d0f      	cmp	r5, #15
 8102b9a:	d8ee      	bhi.n	8102b7a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102b9c:	4602      	mov	r2, r0
 8102b9e:	4629      	mov	r1, r5
 8102ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8102ba4:	f000 fcde 	bl	8103564 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102ba8:	4b03      	ldr	r3, [pc, #12]	; (8102bb8 <HAL_InitTick+0x48>)
 8102baa:	4620      	mov	r0, r4
 8102bac:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8102bae:	e7e5      	b.n	8102b7c <HAL_InitTick+0xc>
 8102bb0:	10000078 	.word	0x10000078
 8102bb4:	1000004c 	.word	0x1000004c
 8102bb8:	1000007c 	.word	0x1000007c

08102bbc <HAL_Init>:
{
 8102bbc:	b513      	push	{r0, r1, r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102bbe:	4c21      	ldr	r4, [pc, #132]	; (8102c44 <HAL_Init+0x88>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102bc0:	4a21      	ldr	r2, [pc, #132]	; (8102c48 <HAL_Init+0x8c>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102bc2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8102bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102bca:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8102bce:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8102bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102bd6:	9301      	str	r3, [sp, #4]
 8102bd8:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102bda:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102bde:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102be2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102be6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102bea:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102bee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102bf2:	f043 0301 	orr.w	r3, r3, #1
 8102bf6:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102bfa:	2003      	movs	r0, #3
 8102bfc:	f000 fca0 	bl	8103540 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c00:	f001 fed0 	bl	81049a4 <HAL_RCC_GetSysClockFreq>
 8102c04:	69a2      	ldr	r2, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c06:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c08:	4910      	ldr	r1, [pc, #64]	; (8102c4c <HAL_Init+0x90>)
 8102c0a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c0e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c12:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c14:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c16:	f002 021f 	and.w	r2, r2, #31
 8102c1a:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c1c:	f003 031f 	and.w	r3, r3, #31
 8102c20:	40d8      	lsrs	r0, r3
 8102c22:	4b0b      	ldr	r3, [pc, #44]	; (8102c50 <HAL_Init+0x94>)
 8102c24:	6018      	str	r0, [r3, #0]
  SystemCoreClock = SystemD2Clock;
 8102c26:	4b0b      	ldr	r3, [pc, #44]	; (8102c54 <HAL_Init+0x98>)
 8102c28:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102c2a:	200f      	movs	r0, #15
 8102c2c:	f7ff ffa0 	bl	8102b70 <HAL_InitTick>
 8102c30:	4604      	mov	r4, r0
 8102c32:	b920      	cbnz	r0, 8102c3e <HAL_Init+0x82>
  HAL_MspInit();
 8102c34:	f7ff fdde 	bl	81027f4 <HAL_MspInit>
}
 8102c38:	4620      	mov	r0, r4
 8102c3a:	b002      	add	sp, #8
 8102c3c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8102c3e:	2401      	movs	r4, #1
 8102c40:	e7fa      	b.n	8102c38 <HAL_Init+0x7c>
 8102c42:	bf00      	nop
 8102c44:	58024400 	.word	0x58024400
 8102c48:	40024000 	.word	0x40024000
 8102c4c:	081105d0 	.word	0x081105d0
 8102c50:	10000050 	.word	0x10000050
 8102c54:	1000004c 	.word	0x1000004c

08102c58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8102c58:	4a03      	ldr	r2, [pc, #12]	; (8102c68 <HAL_IncTick+0x10>)
 8102c5a:	4b04      	ldr	r3, [pc, #16]	; (8102c6c <HAL_IncTick+0x14>)
 8102c5c:	6811      	ldr	r1, [r2, #0]
 8102c5e:	781b      	ldrb	r3, [r3, #0]
 8102c60:	440b      	add	r3, r1
 8102c62:	6013      	str	r3, [r2, #0]
}
 8102c64:	4770      	bx	lr
 8102c66:	bf00      	nop
 8102c68:	100192a4 	.word	0x100192a4
 8102c6c:	10000078 	.word	0x10000078

08102c70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8102c70:	4b01      	ldr	r3, [pc, #4]	; (8102c78 <HAL_GetTick+0x8>)
 8102c72:	6818      	ldr	r0, [r3, #0]
}
 8102c74:	4770      	bx	lr
 8102c76:	bf00      	nop
 8102c78:	100192a4 	.word	0x100192a4

08102c7c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8102c7c:	4b01      	ldr	r3, [pc, #4]	; (8102c84 <HAL_GetREVID+0x8>)
 8102c7e:	6818      	ldr	r0, [r3, #0]
}
 8102c80:	0c00      	lsrs	r0, r0, #16
 8102c82:	4770      	bx	lr
 8102c84:	5c001000 	.word	0x5c001000

08102c88 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102c88:	4a03      	ldr	r2, [pc, #12]	; (8102c98 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8102c8a:	6853      	ldr	r3, [r2, #4]
 8102c8c:	ea23 0000 	bic.w	r0, r3, r0
 8102c90:	4301      	orrs	r1, r0
 8102c92:	6051      	str	r1, [r2, #4]
}
 8102c94:	4770      	bx	lr
 8102c96:	bf00      	nop
 8102c98:	58000400 	.word	0x58000400

08102c9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102c9c:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102c9e:	0dcc      	lsrs	r4, r1, #23
 8102ca0:	f004 0404 	and.w	r4, r4, #4
 8102ca4:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8102ca6:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8102caa:	5903      	ldr	r3, [r0, r4]
 8102cac:	2507      	movs	r5, #7
 8102cae:	408d      	lsls	r5, r1
 8102cb0:	ea23 0305 	bic.w	r3, r3, r5
 8102cb4:	408a      	lsls	r2, r1
 8102cb6:	4313      	orrs	r3, r2
 8102cb8:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102cba:	bd30      	pop	{r4, r5, pc}

08102cbc <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102cbc:	6880      	ldr	r0, [r0, #8]
}
 8102cbe:	f000 0001 	and.w	r0, r0, #1
 8102cc2:	4770      	bx	lr

08102cc4 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102cc4:	6880      	ldr	r0, [r0, #8]
}
 8102cc6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8102cca:	4770      	bx	lr

08102ccc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102cce:	2300      	movs	r3, #0
 8102cd0:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102cd2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8102cd6:	2b01      	cmp	r3, #1
{
 8102cd8:	4605      	mov	r5, r0
 8102cda:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8102cdc:	f000 81c5 	beq.w	810306a <HAL_ADC_ConfigChannel+0x39e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102ce0:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8102ce2:	2301      	movs	r3, #1
 8102ce4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102ce8:	4620      	mov	r0, r4
 8102cea:	f7ff ffeb 	bl	8102cc4 <LL_ADC_REG_IsConversionOngoing>
 8102cee:	2800      	cmp	r0, #0
 8102cf0:	f040 81b6 	bne.w	8103060 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102cf4:	680a      	ldr	r2, [r1, #0]
 8102cf6:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8102cfa:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8102cfe:	2800      	cmp	r0, #0
 8102d00:	d16a      	bne.n	8102dd8 <HAL_ADC_ConfigChannel+0x10c>
 8102d02:	408b      	lsls	r3, r1
 8102d04:	69e2      	ldr	r2, [r4, #28]
 8102d06:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102d08:	6872      	ldr	r2, [r6, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102d0a:	61e3      	str	r3, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102d0c:	0990      	lsrs	r0, r2, #6
 8102d0e:	f000 000c 	and.w	r0, r0, #12
 8102d12:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8102d16:	f002 021f 	and.w	r2, r2, #31
 8102d1a:	f85c 3000 	ldr.w	r3, [ip, r0]
 8102d1e:	271f      	movs	r7, #31
 8102d20:	4097      	lsls	r7, r2
 8102d22:	ea23 0307 	bic.w	r3, r3, r7
 8102d26:	4091      	lsls	r1, r2
 8102d28:	430b      	orrs	r3, r1
 8102d2a:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102d2e:	4620      	mov	r0, r4
 8102d30:	f7ff ffc8 	bl	8102cc4 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102d34:	68a3      	ldr	r3, [r4, #8]
 8102d36:	f003 0308 	and.w	r3, r3, #8
 8102d3a:	4318      	orrs	r0, r3
 8102d3c:	d140      	bne.n	8102dc0 <HAL_ADC_ConfigChannel+0xf4>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102d3e:	68b2      	ldr	r2, [r6, #8]
 8102d40:	6831      	ldr	r1, [r6, #0]
 8102d42:	4620      	mov	r0, r4
 8102d44:	f7ff ffaa 	bl	8102c9c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102d48:	4bb8      	ldr	r3, [pc, #736]	; (810302c <HAL_ADC_ConfigChannel+0x360>)
 8102d4a:	6972      	ldr	r2, [r6, #20]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102d56:	68e3      	ldr	r3, [r4, #12]
 8102d58:	d147      	bne.n	8102dea <HAL_ADC_ConfigChannel+0x11e>
 8102d5a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8102d5e:	005b      	lsls	r3, r3, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d60:	6937      	ldr	r7, [r6, #16]
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102d62:	6831      	ldr	r1, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d64:	2f04      	cmp	r7, #4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102d66:	fa02 f203 	lsl.w	r2, r2, r3
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d6a:	d046      	beq.n	8102dfa <HAL_ADC_ConfigChannel+0x12e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d6c:	f104 0060 	add.w	r0, r4, #96	; 0x60
    MODIFY_REG(*preg,
 8102d70:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8102d74:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 8102d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8102d7c:	430b      	orrs	r3, r1
 8102d7e:	4313      	orrs	r3, r2
 8102d80:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d84:	6931      	ldr	r1, [r6, #16]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102d86:	7e72      	ldrb	r2, [r6, #25]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102d88:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8102d8c:	1e57      	subs	r7, r2, #1
 8102d8e:	427a      	negs	r2, r7
 8102d90:	417a      	adcs	r2, r7
 8102d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102d96:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8102d9a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102d9e:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102da0:	6931      	ldr	r1, [r6, #16]
 8102da2:	6922      	ldr	r2, [r4, #16]
 8102da4:	f103 3cff 	add.w	ip, r3, #4294967295
 8102da8:	f1dc 0300 	rsbs	r3, ip, #0
 8102dac:	eb43 030c 	adc.w	r3, r3, ip
 8102db0:	02db      	lsls	r3, r3, #11
 8102db2:	f001 011f 	and.w	r1, r1, #31
 8102db6:	408b      	lsls	r3, r1
 8102db8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8102dbc:	4313      	orrs	r3, r2
 8102dbe:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102dc0:	4620      	mov	r0, r4
 8102dc2:	f7ff ff7b 	bl	8102cbc <LL_ADC_IsEnabled>
 8102dc6:	2800      	cmp	r0, #0
 8102dc8:	d03e      	beq.n	8102e48 <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102dca:	2300      	movs	r3, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102dcc:	2200      	movs	r2, #0
 8102dce:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8102dd2:	4618      	mov	r0, r3
 8102dd4:	b003      	add	sp, #12
 8102dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102dd8:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8102ddc:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102de0:	f002 021f 	and.w	r2, r2, #31
 8102de4:	2301      	movs	r3, #1
 8102de6:	4093      	lsls	r3, r2
 8102de8:	e78c      	b.n	8102d04 <HAL_ADC_ConfigChannel+0x38>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102dea:	f013 0f10 	tst.w	r3, #16
 8102dee:	68e3      	ldr	r3, [r4, #12]
 8102df0:	d0b3      	beq.n	8102d5a <HAL_ADC_ConfigChannel+0x8e>
 8102df2:	085b      	lsrs	r3, r3, #1
 8102df4:	f003 0308 	and.w	r3, r3, #8
 8102df8:	e7b2      	b.n	8102d60 <HAL_ADC_ConfigChannel+0x94>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102dfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8102dfc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e00:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102e04:	bf02      	ittt	eq
 8102e06:	6e23      	ldreq	r3, [r4, #96]	; 0x60
 8102e08:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e0c:	6623      	streq	r3, [r4, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e10:	068a      	lsls	r2, r1, #26
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e12:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e16:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102e18:	bf02      	ittt	eq
 8102e1a:	6e63      	ldreq	r3, [r4, #100]	; 0x64
 8102e1c:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e20:	6663      	streq	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e22:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8102e24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e28:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102e2a:	bf02      	ittt	eq
 8102e2c:	6ea3      	ldreq	r3, [r4, #104]	; 0x68
 8102e2e:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e32:	66a3      	streq	r3, [r4, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e34:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8102e36:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e3a:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102e3c:	bf02      	ittt	eq
 8102e3e:	6ee3      	ldreq	r3, [r4, #108]	; 0x6c
 8102e40:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e44:	66e3      	streq	r3, [r4, #108]	; 0x6c
 8102e46:	e7bb      	b.n	8102dc0 <HAL_ADC_ConfigChannel+0xf4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102e48:	68f7      	ldr	r7, [r6, #12]
 8102e4a:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8102e4c:	4a78      	ldr	r2, [pc, #480]	; (8103030 <HAL_ADC_ConfigChannel+0x364>)
 8102e4e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8102e52:	f007 0c18 	and.w	ip, r7, #24
 8102e56:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8102e5a:	fa22 f20c 	lsr.w	r2, r2, ip
 8102e5e:	401a      	ands	r2, r3
 8102e60:	ea21 0100 	bic.w	r1, r1, r0
 8102e64:	430a      	orrs	r2, r1
 8102e66:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102e6a:	4a72      	ldr	r2, [pc, #456]	; (8103034 <HAL_ADC_ConfigChannel+0x368>)
 8102e6c:	4297      	cmp	r7, r2
 8102e6e:	d145      	bne.n	8102efc <HAL_ADC_ConfigChannel+0x230>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102e70:	b9d0      	cbnz	r0, 8102ea8 <HAL_ADC_ConfigChannel+0x1dc>
 8102e72:	0e9a      	lsrs	r2, r3, #26
 8102e74:	3201      	adds	r2, #1
 8102e76:	f002 071f 	and.w	r7, r2, #31
 8102e7a:	2101      	movs	r1, #1
 8102e7c:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e7e:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102e80:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8102e84:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e88:	d929      	bls.n	8102ede <HAL_ADC_ConfigChannel+0x212>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102e8a:	4311      	orrs	r1, r2
 8102e8c:	2800      	cmp	r0, #0
 8102e8e:	f040 808b 	bne.w	8102fa8 <HAL_ADC_ConfigChannel+0x2dc>
 8102e92:	0e9b      	lsrs	r3, r3, #26
 8102e94:	3301      	adds	r3, #1
 8102e96:	f003 031f 	and.w	r3, r3, #31
 8102e9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102e9e:	3b1e      	subs	r3, #30
 8102ea0:	051b      	lsls	r3, r3, #20
 8102ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102ea6:	e024      	b.n	8102ef2 <HAL_ADC_ConfigChannel+0x226>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ea8:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8102eac:	b132      	cbz	r2, 8102ebc <HAL_ADC_ConfigChannel+0x1f0>
  return __builtin_clz(value);
 8102eae:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102eb2:	3201      	adds	r2, #1
 8102eb4:	f002 021f 	and.w	r2, r2, #31
 8102eb8:	2a09      	cmp	r2, #9
 8102eba:	d863      	bhi.n	8102f84 <HAL_ADC_ConfigChannel+0x2b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ebc:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102ec0:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102ec4:	3201      	adds	r2, #1
 8102ec6:	0692      	lsls	r2, r2, #26
 8102ec8:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ecc:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8102ed0:	fab7 f787 	clz	r7, r7
 8102ed4:	3701      	adds	r7, #1
 8102ed6:	f007 071f 	and.w	r7, r7, #31
 8102eda:	2101      	movs	r1, #1
 8102edc:	40b9      	lsls	r1, r7
 8102ede:	4311      	orrs	r1, r2
 8102ee0:	2800      	cmp	r0, #0
 8102ee2:	d14a      	bne.n	8102f7a <HAL_ADC_ConfigChannel+0x2ae>
 8102ee4:	0e9b      	lsrs	r3, r3, #26
 8102ee6:	3301      	adds	r3, #1
 8102ee8:	f003 031f 	and.w	r3, r3, #31
 8102eec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102ef0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102ef2:	68b2      	ldr	r2, [r6, #8]
 8102ef4:	4319      	orrs	r1, r3
 8102ef6:	4620      	mov	r0, r4
 8102ef8:	f7ff fed0 	bl	8102c9c <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102efc:	6832      	ldr	r2, [r6, #0]
 8102efe:	2a00      	cmp	r2, #0
 8102f00:	f6bf af63 	bge.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102f04:	494c      	ldr	r1, [pc, #304]	; (8103038 <HAL_ADC_ConfigChannel+0x36c>)
 8102f06:	428c      	cmp	r4, r1
 8102f08:	d05b      	beq.n	8102fc2 <HAL_ADC_ConfigChannel+0x2f6>
 8102f0a:	4e4c      	ldr	r6, [pc, #304]	; (810303c <HAL_ADC_ConfigChannel+0x370>)
 8102f0c:	4b4c      	ldr	r3, [pc, #304]	; (8103040 <HAL_ADC_ConfigChannel+0x374>)
 8102f0e:	484d      	ldr	r0, [pc, #308]	; (8103044 <HAL_ADC_ConfigChannel+0x378>)
 8102f10:	42b4      	cmp	r4, r6
 8102f12:	bf18      	it	ne
 8102f14:	4603      	movne	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102f16:	428c      	cmp	r4, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102f18:	689b      	ldr	r3, [r3, #8]
 8102f1a:	d002      	beq.n	8102f22 <HAL_ADC_ConfigChannel+0x256>
 8102f1c:	4947      	ldr	r1, [pc, #284]	; (810303c <HAL_ADC_ConfigChannel+0x370>)
 8102f1e:	428c      	cmp	r4, r1
 8102f20:	d151      	bne.n	8102fc6 <HAL_ADC_ConfigChannel+0x2fa>
 8102f22:	4845      	ldr	r0, [pc, #276]	; (8103038 <HAL_ADC_ConfigChannel+0x36c>)
 8102f24:	f7ff feca 	bl	8102cbc <LL_ADC_IsEnabled>
 8102f28:	4601      	mov	r1, r0
 8102f2a:	4844      	ldr	r0, [pc, #272]	; (810303c <HAL_ADC_ConfigChannel+0x370>)
 8102f2c:	f7ff fec6 	bl	8102cbc <LL_ADC_IsEnabled>
 8102f30:	4308      	orrs	r0, r1
 8102f32:	d14d      	bne.n	8102fd0 <HAL_ADC_ConfigChannel+0x304>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102f34:	4844      	ldr	r0, [pc, #272]	; (8103048 <HAL_ADC_ConfigChannel+0x37c>)
 8102f36:	4282      	cmp	r2, r0
 8102f38:	f003 71e0 	and.w	r1, r3, #29360128	; 0x1c00000
 8102f3c:	d14e      	bne.n	8102fdc <HAL_ADC_ConfigChannel+0x310>
 8102f3e:	021b      	lsls	r3, r3, #8
 8102f40:	f53f af43 	bmi.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102f44:	4b41      	ldr	r3, [pc, #260]	; (810304c <HAL_ADC_ConfigChannel+0x380>)
 8102f46:	429c      	cmp	r4, r3
 8102f48:	f47f af3f 	bne.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102f4c:	4a3d      	ldr	r2, [pc, #244]	; (8103044 <HAL_ADC_ConfigChannel+0x378>)
 8102f4e:	6893      	ldr	r3, [r2, #8]
 8102f50:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8102f54:	430b      	orrs	r3, r1
 8102f56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102f5a:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102f5c:	4b3c      	ldr	r3, [pc, #240]	; (8103050 <HAL_ADC_ConfigChannel+0x384>)
 8102f5e:	4a3d      	ldr	r2, [pc, #244]	; (8103054 <HAL_ADC_ConfigChannel+0x388>)
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8102f66:	3301      	adds	r3, #1
 8102f68:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8102f6a:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8102f6c:	9b01      	ldr	r3, [sp, #4]
 8102f6e:	2b00      	cmp	r3, #0
 8102f70:	f43f af2b 	beq.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
                wait_loop_index--;
 8102f74:	9b01      	ldr	r3, [sp, #4]
 8102f76:	3b01      	subs	r3, #1
 8102f78:	e7f7      	b.n	8102f6a <HAL_ADC_ConfigChannel+0x29e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f7a:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8102f7e:	fab3 f383 	clz	r3, r3
 8102f82:	e7b0      	b.n	8102ee6 <HAL_ADC_ConfigChannel+0x21a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f84:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102f88:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102f8c:	3201      	adds	r2, #1
 8102f8e:	0692      	lsls	r2, r2, #26
 8102f90:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f94:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8102f98:	fab7 f787 	clz	r7, r7
 8102f9c:	3701      	adds	r7, #1
 8102f9e:	f007 071f 	and.w	r7, r7, #31
 8102fa2:	2101      	movs	r1, #1
 8102fa4:	40b9      	lsls	r1, r7
 8102fa6:	e770      	b.n	8102e8a <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102fa8:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102fac:	fab2 f282 	clz	r2, r2
 8102fb0:	3201      	adds	r2, #1
 8102fb2:	f002 021f 	and.w	r2, r2, #31
 8102fb6:	2303      	movs	r3, #3
 8102fb8:	f06f 001d 	mvn.w	r0, #29
 8102fbc:	fb13 0302 	smlabb	r3, r3, r2, r0
 8102fc0:	e76e      	b.n	8102ea0 <HAL_ADC_ConfigChannel+0x1d4>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102fc2:	4b1f      	ldr	r3, [pc, #124]	; (8103040 <HAL_ADC_ConfigChannel+0x374>)
 8102fc4:	e7a7      	b.n	8102f16 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102fc6:	4821      	ldr	r0, [pc, #132]	; (810304c <HAL_ADC_ConfigChannel+0x380>)
 8102fc8:	f7ff fe78 	bl	8102cbc <LL_ADC_IsEnabled>
 8102fcc:	2800      	cmp	r0, #0
 8102fce:	d0b1      	beq.n	8102f34 <HAL_ADC_ConfigChannel+0x268>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102fd0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8102fd2:	f043 0320 	orr.w	r3, r3, #32
 8102fd6:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8102fd8:	2301      	movs	r3, #1
 8102fda:	e6f7      	b.n	8102dcc <HAL_ADC_ConfigChannel+0x100>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102fdc:	481e      	ldr	r0, [pc, #120]	; (8103058 <HAL_ADC_ConfigChannel+0x38c>)
 8102fde:	4282      	cmp	r2, r0
 8102fe0:	d110      	bne.n	8103004 <HAL_ADC_ConfigChannel+0x338>
 8102fe2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8102fe6:	f47f aef0 	bne.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102fea:	4a18      	ldr	r2, [pc, #96]	; (810304c <HAL_ADC_ConfigChannel+0x380>)
 8102fec:	4294      	cmp	r4, r2
 8102fee:	f47f aeec 	bne.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
 8102ff2:	4814      	ldr	r0, [pc, #80]	; (8103044 <HAL_ADC_ConfigChannel+0x378>)
 8102ff4:	6882      	ldr	r2, [r0, #8]
 8102ff6:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8102ffa:	430a      	orrs	r2, r1
 8102ffc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8103000:	6082      	str	r2, [r0, #8]
}
 8103002:	e6e3      	b.n	8102dcc <HAL_ADC_ConfigChannel+0x100>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103004:	4815      	ldr	r0, [pc, #84]	; (810305c <HAL_ADC_ConfigChannel+0x390>)
 8103006:	4282      	cmp	r2, r0
 8103008:	f47f aedf 	bne.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
 810300c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8103010:	f47f aedb 	bne.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_VREFINT_INSTANCE(hadc))
 8103014:	4a0d      	ldr	r2, [pc, #52]	; (810304c <HAL_ADC_ConfigChannel+0x380>)
 8103016:	4294      	cmp	r4, r2
 8103018:	f47f aed7 	bne.w	8102dca <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 810301c:	4809      	ldr	r0, [pc, #36]	; (8103044 <HAL_ADC_ConfigChannel+0x378>)
 810301e:	6882      	ldr	r2, [r0, #8]
 8103020:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8103024:	430a      	orrs	r2, r1
 8103026:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 810302a:	e7e9      	b.n	8103000 <HAL_ADC_ConfigChannel+0x334>
 810302c:	5c001000 	.word	0x5c001000
 8103030:	000fffff 	.word	0x000fffff
 8103034:	47ff0000 	.word	0x47ff0000
 8103038:	40022000 	.word	0x40022000
 810303c:	40022100 	.word	0x40022100
 8103040:	40022300 	.word	0x40022300
 8103044:	58026300 	.word	0x58026300
 8103048:	cb840000 	.word	0xcb840000
 810304c:	58026000 	.word	0x58026000
 8103050:	1000004c 	.word	0x1000004c
 8103054:	00030d40 	.word	0x00030d40
 8103058:	c7520000 	.word	0xc7520000
 810305c:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103060:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8103062:	f042 0220 	orr.w	r2, r2, #32
 8103066:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8103068:	e6b0      	b.n	8102dcc <HAL_ADC_ConfigChannel+0x100>
  __HAL_LOCK(hadc);
 810306a:	2302      	movs	r3, #2
 810306c:	e6b1      	b.n	8102dd2 <HAL_ADC_ConfigChannel+0x106>
 810306e:	bf00      	nop

08103070 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103070:	6802      	ldr	r2, [r0, #0]
{
 8103072:	b570      	push	{r4, r5, r6, lr}
 8103074:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103076:	4610      	mov	r0, r2
 8103078:	f7ff fe20 	bl	8102cbc <LL_ADC_IsEnabled>
 810307c:	b108      	cbz	r0, 8103082 <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 810307e:	2000      	movs	r0, #0
}
 8103080:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8103082:	6891      	ldr	r1, [r2, #8]
 8103084:	4b22      	ldr	r3, [pc, #136]	; (8103110 <ADC_Enable+0xa0>)
 8103086:	4219      	tst	r1, r3
 8103088:	d009      	beq.n	810309e <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810308a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 810308c:	f043 0310 	orr.w	r3, r3, #16
 8103090:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8103094:	f043 0301 	orr.w	r3, r3, #1
 8103098:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 810309a:	2001      	movs	r0, #1
 810309c:	e7f0      	b.n	8103080 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 810309e:	6893      	ldr	r3, [r2, #8]
 81030a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81030a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81030a8:	f043 0301 	orr.w	r3, r3, #1
 81030ac:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 81030ae:	f7ff fddf 	bl	8102c70 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030b2:	6822      	ldr	r2, [r4, #0]
 81030b4:	4b17      	ldr	r3, [pc, #92]	; (8103114 <ADC_Enable+0xa4>)
 81030b6:	4918      	ldr	r1, [pc, #96]	; (8103118 <ADC_Enable+0xa8>)
 81030b8:	429a      	cmp	r2, r3
    tickstart = HAL_GetTick();
 81030ba:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030bc:	d00e      	beq.n	81030dc <ADC_Enable+0x6c>
 81030be:	4817      	ldr	r0, [pc, #92]	; (810311c <ADC_Enable+0xac>)
 81030c0:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 81030c4:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 81030c8:	428a      	cmp	r2, r1
 81030ca:	bf08      	it	eq
 81030cc:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81030ce:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81030d0:	689b      	ldr	r3, [r3, #8]
 81030d2:	d101      	bne.n	81030d8 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81030d4:	06db      	lsls	r3, r3, #27
 81030d6:	d1d2      	bne.n	810307e <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 81030d8:	4e11      	ldr	r6, [pc, #68]	; (8103120 <ADC_Enable+0xb0>)
 81030da:	e013      	b.n	8103104 <ADC_Enable+0x94>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030dc:	4b0f      	ldr	r3, [pc, #60]	; (810311c <ADC_Enable+0xac>)
 81030de:	e7f6      	b.n	81030ce <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81030e0:	4610      	mov	r0, r2
 81030e2:	f7ff fdeb 	bl	8102cbc <LL_ADC_IsEnabled>
 81030e6:	b920      	cbnz	r0, 81030f2 <ADC_Enable+0x82>
 81030e8:	6893      	ldr	r3, [r2, #8]
 81030ea:	4033      	ands	r3, r6
 81030ec:	f043 0301 	orr.w	r3, r3, #1
 81030f0:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81030f2:	f7ff fdbd 	bl	8102c70 <HAL_GetTick>
 81030f6:	1b40      	subs	r0, r0, r5
 81030f8:	2802      	cmp	r0, #2
 81030fa:	d903      	bls.n	8103104 <ADC_Enable+0x94>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 81030fc:	6823      	ldr	r3, [r4, #0]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	07d8      	lsls	r0, r3, #31
 8103102:	d5c2      	bpl.n	810308a <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103104:	6822      	ldr	r2, [r4, #0]
 8103106:	6813      	ldr	r3, [r2, #0]
 8103108:	07d9      	lsls	r1, r3, #31
 810310a:	d5e9      	bpl.n	81030e0 <ADC_Enable+0x70>
 810310c:	e7b7      	b.n	810307e <ADC_Enable+0xe>
 810310e:	bf00      	nop
 8103110:	8000003f 	.word	0x8000003f
 8103114:	40022000 	.word	0x40022000
 8103118:	40022100 	.word	0x40022100
 810311c:	40022300 	.word	0x40022300
 8103120:	7fffffc0 	.word	0x7fffffc0

08103124 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103124:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103126:	4a43      	ldr	r2, [pc, #268]	; (8103234 <ADC_ConfigureBoostMode+0x110>)
 8103128:	6803      	ldr	r3, [r0, #0]
 810312a:	4293      	cmp	r3, r2
{
 810312c:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 810312e:	d003      	beq.n	8103138 <ADC_ConfigureBoostMode+0x14>
 8103130:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8103134:	4293      	cmp	r3, r2
 8103136:	d125      	bne.n	8103184 <ADC_ConfigureBoostMode+0x60>
 8103138:	4b3f      	ldr	r3, [pc, #252]	; (8103238 <ADC_ConfigureBoostMode+0x114>)
 810313a:	689b      	ldr	r3, [r3, #8]
 810313c:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8103140:	bf14      	ite	ne
 8103142:	2301      	movne	r3, #1
 8103144:	2300      	moveq	r3, #0
 8103146:	b9fb      	cbnz	r3, 8103188 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103148:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 810314c:	2100      	movs	r1, #0
 810314e:	f002 fd23 	bl	8105b98 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8103152:	686b      	ldr	r3, [r5, #4]
 8103154:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103158:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 810315a:	d04a      	beq.n	81031f2 <ADC_ConfigureBoostMode+0xce>
 810315c:	d83f      	bhi.n	81031de <ADC_ConfigureBoostMode+0xba>
 810315e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103162:	d044      	beq.n	81031ee <ADC_ConfigureBoostMode+0xca>
 8103164:	d836      	bhi.n	81031d4 <ADC_ConfigureBoostMode+0xb0>
 8103166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810316a:	d008      	beq.n	810317e <ADC_ConfigureBoostMode+0x5a>
 810316c:	d82c      	bhi.n	81031c8 <ADC_ConfigureBoostMode+0xa4>
 810316e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103172:	d004      	beq.n	810317e <ADC_ConfigureBoostMode+0x5a>
 8103174:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8103178:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 810317c:	d116      	bne.n	81031ac <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810317e:	0c9b      	lsrs	r3, r3, #18
 8103180:	005b      	lsls	r3, r3, #1
 8103182:	e00f      	b.n	81031a4 <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103184:	4b2d      	ldr	r3, [pc, #180]	; (810323c <ADC_ConfigureBoostMode+0x118>)
 8103186:	e7d8      	b.n	810313a <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8103188:	f001 fcae 	bl	8104ae8 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 810318c:	686b      	ldr	r3, [r5, #4]
 810318e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    freq = HAL_RCC_GetHCLKFreq();
 8103192:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8103194:	d005      	beq.n	81031a2 <ADC_ConfigureBoostMode+0x7e>
 8103196:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810319a:	d006      	beq.n	81031aa <ADC_ConfigureBoostMode+0x86>
 810319c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81031a0:	d104      	bne.n	81031ac <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81031a2:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81031a4:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 81031a8:	e000      	b.n	81031ac <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 81031aa:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81031ac:	f7ff fd66 	bl	8102c7c <HAL_GetREVID>
 81031b0:	f241 0303 	movw	r3, #4099	; 0x1003
 81031b4:	4298      	cmp	r0, r3
 81031b6:	682b      	ldr	r3, [r5, #0]
 81031b8:	d823      	bhi.n	8103202 <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 81031ba:	4a21      	ldr	r2, [pc, #132]	; (8103240 <ADC_ConfigureBoostMode+0x11c>)
 81031bc:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81031be:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 81031c0:	d91b      	bls.n	81031fa <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81031c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81031c6:	e01a      	b.n	81031fe <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 81031c8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81031cc:	d0d7      	beq.n	810317e <ADC_ConfigureBoostMode+0x5a>
 81031ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81031d2:	e7d3      	b.n	810317c <ADC_ConfigureBoostMode+0x58>
 81031d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031d8:	d1e8      	bne.n	81031ac <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 81031da:	0944      	lsrs	r4, r0, #5
        break;
 81031dc:	e7e6      	b.n	81031ac <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 81031de:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81031e2:	d008      	beq.n	81031f6 <ADC_ConfigureBoostMode+0xd2>
 81031e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81031e8:	d1e0      	bne.n	81031ac <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 81031ea:	0a04      	lsrs	r4, r0, #8
        break;
 81031ec:	e7de      	b.n	81031ac <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 81031ee:	0904      	lsrs	r4, r0, #4
        break;
 81031f0:	e7dc      	b.n	81031ac <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 81031f2:	0984      	lsrs	r4, r0, #6
        break;
 81031f4:	e7da      	b.n	81031ac <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 81031f6:	09c4      	lsrs	r4, r0, #7
        break;
 81031f8:	e7d8      	b.n	81031ac <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81031fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81031fe:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103200:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8103202:	4a10      	ldr	r2, [pc, #64]	; (8103244 <ADC_ConfigureBoostMode+0x120>)
 8103204:	4294      	cmp	r4, r2
 8103206:	d803      	bhi.n	8103210 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103208:	689a      	ldr	r2, [r3, #8]
 810320a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 810320e:	e7f6      	b.n	81031fe <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8103210:	4a0d      	ldr	r2, [pc, #52]	; (8103248 <ADC_ConfigureBoostMode+0x124>)
 8103212:	4294      	cmp	r4, r2
 8103214:	d803      	bhi.n	810321e <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103216:	689a      	ldr	r2, [r3, #8]
 8103218:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 810321c:	e7d1      	b.n	81031c2 <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 810321e:	4a0b      	ldr	r2, [pc, #44]	; (810324c <ADC_ConfigureBoostMode+0x128>)
 8103220:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103222:	689a      	ldr	r2, [r3, #8]
 8103224:	bf9a      	itte	ls
 8103226:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
 810322a:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 810322e:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
 8103232:	e7e4      	b.n	81031fe <ADC_ConfigureBoostMode+0xda>
 8103234:	40022000 	.word	0x40022000
 8103238:	40022300 	.word	0x40022300
 810323c:	58026300 	.word	0x58026300
 8103240:	01312d00 	.word	0x01312d00
 8103244:	00bebc21 	.word	0x00bebc21
 8103248:	017d7841 	.word	0x017d7841
 810324c:	02faf081 	.word	0x02faf081

08103250 <HAL_ADC_Init>:
{
 8103250:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8103252:	2300      	movs	r3, #0
 8103254:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8103256:	4604      	mov	r4, r0
 8103258:	2800      	cmp	r0, #0
 810325a:	f000 80f1 	beq.w	8103440 <HAL_ADC_Init+0x1f0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 810325e:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8103260:	b925      	cbnz	r5, 810326c <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8103262:	f7fe f829 	bl	81012b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8103266:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8103268:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 810326c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 810326e:	689a      	ldr	r2, [r3, #8]
 8103270:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103272:	bf41      	itttt	mi
 8103274:	689a      	ldrmi	r2, [r3, #8]
 8103276:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 810327a:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 810327e:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103280:	689a      	ldr	r2, [r3, #8]
 8103282:	00d1      	lsls	r1, r2, #3
 8103284:	f140 80a2 	bpl.w	81033cc <HAL_ADC_Init+0x17c>
 8103288:	689a      	ldr	r2, [r3, #8]
 810328a:	00d2      	lsls	r2, r2, #3
 810328c:	f100 80b4 	bmi.w	81033f8 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103290:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8103292:	f042 0210 	orr.w	r2, r2, #16
 8103296:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103298:	6da2      	ldr	r2, [r4, #88]	; 0x58
 810329a:	f042 0201 	orr.w	r2, r2, #1
 810329e:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 81032a0:	2501      	movs	r5, #1
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81032a2:	4618      	mov	r0, r3
 81032a4:	f7ff fd0e 	bl	8102cc4 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81032a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 81032aa:	f002 0210 	and.w	r2, r2, #16
 81032ae:	4310      	orrs	r0, r2
 81032b0:	f040 80c2 	bne.w	8103438 <HAL_ADC_Init+0x1e8>
    ADC_STATE_CLR_SET(hadc->State,
 81032b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 81032b6:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 81032ba:	f042 0202 	orr.w	r2, r2, #2
 81032be:	6562      	str	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81032c0:	4618      	mov	r0, r3
 81032c2:	f7ff fcfb 	bl	8102cbc <LL_ADC_IsEnabled>
 81032c6:	b980      	cbnz	r0, 81032ea <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81032c8:	4e5e      	ldr	r6, [pc, #376]	; (8103444 <HAL_ADC_Init+0x1f4>)
 81032ca:	495f      	ldr	r1, [pc, #380]	; (8103448 <HAL_ADC_Init+0x1f8>)
 81032cc:	42b3      	cmp	r3, r6
 81032ce:	d002      	beq.n	81032d6 <HAL_ADC_Init+0x86>
 81032d0:	428b      	cmp	r3, r1
 81032d2:	f040 8093 	bne.w	81033fc <HAL_ADC_Init+0x1ac>
 81032d6:	485b      	ldr	r0, [pc, #364]	; (8103444 <HAL_ADC_Init+0x1f4>)
 81032d8:	f7ff fcf0 	bl	8102cbc <LL_ADC_IsEnabled>
 81032dc:	4602      	mov	r2, r0
 81032de:	485a      	ldr	r0, [pc, #360]	; (8103448 <HAL_ADC_Init+0x1f8>)
 81032e0:	f7ff fcec 	bl	8102cbc <LL_ADC_IsEnabled>
 81032e4:	4310      	orrs	r0, r2
 81032e6:	f000 8097 	beq.w	8103418 <HAL_ADC_Init+0x1c8>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81032ea:	f7ff fcc7 	bl	8102c7c <HAL_GetREVID>
 81032ee:	f241 0303 	movw	r3, #4099	; 0x1003
 81032f2:	4298      	cmp	r0, r3
 81032f4:	7f21      	ldrb	r1, [r4, #28]
 81032f6:	68a0      	ldr	r0, [r4, #8]
 81032f8:	7d62      	ldrb	r2, [r4, #21]
 81032fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 81032fc:	f240 8092 	bls.w	8103424 <HAL_ADC_Init+0x1d4>
 8103300:	2810      	cmp	r0, #16
 8103302:	f040 808f 	bne.w	8103424 <HAL_ADC_Init+0x1d4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103306:	0352      	lsls	r2, r2, #13
 8103308:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810330c:	431a      	orrs	r2, r3
 810330e:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8103312:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103314:	bf02      	ittt	eq
 8103316:	6a22      	ldreq	r2, [r4, #32]
 8103318:	f102 32ff 	addeq.w	r2, r2, #4294967295
 810331c:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103320:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8103322:	b122      	cbz	r2, 810332e <HAL_ADC_Init+0xde>
                  | hadc->Init.ExternalTrigConvEdge
 8103324:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103326:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810332a:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810332c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810332e:	6822      	ldr	r2, [r4, #0]
 8103330:	4946      	ldr	r1, [pc, #280]	; (810344c <HAL_ADC_Init+0x1fc>)
 8103332:	68d0      	ldr	r0, [r2, #12]
 8103334:	4001      	ands	r1, r0
 8103336:	4319      	orrs	r1, r3
 8103338:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810333a:	4610      	mov	r0, r2
 810333c:	f7ff fcc2 	bl	8102cc4 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103340:	6893      	ldr	r3, [r2, #8]
 8103342:	f003 0308 	and.w	r3, r3, #8
 8103346:	4318      	orrs	r0, r3
 8103348:	d127      	bne.n	810339a <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 810334a:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810334c:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 810334e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103352:	f023 0303 	bic.w	r3, r3, #3
 8103356:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 810335a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 810335c:	430b      	orrs	r3, r1
 810335e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8103360:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8103364:	2b01      	cmp	r3, #1
 8103366:	d163      	bne.n	8103430 <HAL_ADC_Init+0x1e0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103368:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810336a:	6910      	ldr	r0, [r2, #16]
 810336c:	1e59      	subs	r1, r3, #1
 810336e:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 8103372:	4333      	orrs	r3, r6
 8103374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8103378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 810337a:	430b      	orrs	r3, r1
 810337c:	4934      	ldr	r1, [pc, #208]	; (8103450 <HAL_ADC_Init+0x200>)
 810337e:	4001      	ands	r1, r0
 8103380:	430b      	orrs	r3, r1
 8103382:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103386:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103388:	6913      	ldr	r3, [r2, #16]
 810338a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810338c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8103390:	430b      	orrs	r3, r1
 8103392:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8103394:	4620      	mov	r0, r4
 8103396:	f7ff fec5 	bl	8103124 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810339a:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 810339c:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810339e:	2b01      	cmp	r3, #1
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81033a0:	bf05      	ittet	eq
 81033a2:	6b11      	ldreq	r1, [r2, #48]	; 0x30
 81033a4:	69a3      	ldreq	r3, [r4, #24]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81033a6:	6b13      	ldrne	r3, [r2, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81033a8:	f103 33ff 	addeq.w	r3, r3, #4294967295
 81033ac:	bf06      	itte	eq
 81033ae:	f021 010f 	biceq.w	r1, r1, #15
 81033b2:	430b      	orreq	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81033b4:	f023 030f 	bicne.w	r3, r3, #15
 81033b8:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81033ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 81033bc:	f023 0303 	bic.w	r3, r3, #3
 81033c0:	f043 0301 	orr.w	r3, r3, #1
 81033c4:	6563      	str	r3, [r4, #84]	; 0x54
}
 81033c6:	4628      	mov	r0, r5
 81033c8:	b002      	add	sp, #8
 81033ca:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 81033cc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81033ce:	4921      	ldr	r1, [pc, #132]	; (8103454 <HAL_ADC_Init+0x204>)
 81033d0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 81033d4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 81033d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 81033dc:	609a      	str	r2, [r3, #8]
 81033de:	4a1e      	ldr	r2, [pc, #120]	; (8103458 <HAL_ADC_Init+0x208>)
 81033e0:	6812      	ldr	r2, [r2, #0]
 81033e2:	fbb2 f2f1 	udiv	r2, r2, r1
 81033e6:	3201      	adds	r2, #1
      wait_loop_index--;
 81033e8:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 81033ea:	9a01      	ldr	r2, [sp, #4]
 81033ec:	2a00      	cmp	r2, #0
 81033ee:	f43f af4b 	beq.w	8103288 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 81033f2:	9a01      	ldr	r2, [sp, #4]
 81033f4:	3a01      	subs	r2, #1
 81033f6:	e7f7      	b.n	81033e8 <HAL_ADC_Init+0x198>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81033f8:	2500      	movs	r5, #0
 81033fa:	e752      	b.n	81032a2 <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81033fc:	4817      	ldr	r0, [pc, #92]	; (810345c <HAL_ADC_Init+0x20c>)
 81033fe:	f7ff fc5d 	bl	8102cbc <LL_ADC_IsEnabled>
 8103402:	2800      	cmp	r0, #0
 8103404:	f47f af71 	bne.w	81032ea <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103408:	4a15      	ldr	r2, [pc, #84]	; (8103460 <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 810340a:	6893      	ldr	r3, [r2, #8]
 810340c:	6861      	ldr	r1, [r4, #4]
 810340e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8103412:	430b      	orrs	r3, r1
 8103414:	6093      	str	r3, [r2, #8]
}
 8103416:	e768      	b.n	81032ea <HAL_ADC_Init+0x9a>
 8103418:	42b3      	cmp	r3, r6
 810341a:	d001      	beq.n	8103420 <HAL_ADC_Init+0x1d0>
 810341c:	428b      	cmp	r3, r1
 810341e:	d1f3      	bne.n	8103408 <HAL_ADC_Init+0x1b8>
 8103420:	4a10      	ldr	r2, [pc, #64]	; (8103464 <HAL_ADC_Init+0x214>)
 8103422:	e7f2      	b.n	810340a <HAL_ADC_Init+0x1ba>
                  hadc->Init.Overrun                                                    |
 8103424:	4303      	orrs	r3, r0
 8103426:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810342a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810342e:	e770      	b.n	8103312 <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103430:	6913      	ldr	r3, [r2, #16]
 8103432:	f023 0301 	bic.w	r3, r3, #1
 8103436:	e7a6      	b.n	8103386 <HAL_ADC_Init+0x136>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103438:	6d63      	ldr	r3, [r4, #84]	; 0x54
 810343a:	f043 0310 	orr.w	r3, r3, #16
 810343e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8103440:	2501      	movs	r5, #1
 8103442:	e7c0      	b.n	81033c6 <HAL_ADC_Init+0x176>
 8103444:	40022000 	.word	0x40022000
 8103448:	40022100 	.word	0x40022100
 810344c:	fff0c003 	.word	0xfff0c003
 8103450:	fc00f81e 	.word	0xfc00f81e
 8103454:	00030d40 	.word	0x00030d40
 8103458:	1000004c 	.word	0x1000004c
 810345c:	58026000 	.word	0x58026000
 8103460:	58026300 	.word	0x58026300
 8103464:	40022300 	.word	0x40022300

08103468 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103468:	6880      	ldr	r0, [r0, #8]
}
 810346a:	f000 0001 	and.w	r0, r0, #1
 810346e:	4770      	bx	lr

08103470 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103470:	6880      	ldr	r0, [r0, #8]
}
 8103472:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8103476:	4770      	bx	lr

08103478 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103478:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810347a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810347e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8103480:	2b01      	cmp	r3, #1
{
 8103482:	b09a      	sub	sp, #104	; 0x68
 8103484:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8103486:	d052      	beq.n	810352e <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 8103488:	2301      	movs	r3, #1
 810348a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810348e:	6816      	ldr	r6, [r2, #0]
 8103490:	4c28      	ldr	r4, [pc, #160]	; (8103534 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103492:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103494:	42a6      	cmp	r6, r4
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103496:	9016      	str	r0, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103498:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810349a:	d10d      	bne.n	81034b8 <HAL_ADCEx_MultiModeConfigChannel+0x40>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 810349c:	4826      	ldr	r0, [pc, #152]	; (8103538 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 810349e:	f7ff ffe7 	bl	8103470 <LL_ADC_REG_IsConversionOngoing>
 81034a2:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81034a4:	4630      	mov	r0, r6
 81034a6:	f7ff ffe3 	bl	8103470 <LL_ADC_REG_IsConversionOngoing>
 81034aa:	4320      	orrs	r0, r4
 81034ac:	d00d      	beq.n	81034ca <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034ae:	6d51      	ldr	r1, [r2, #84]	; 0x54
 81034b0:	f041 0120 	orr.w	r1, r1, #32
 81034b4:	6551      	str	r1, [r2, #84]	; 0x54
 81034b6:	e027      	b.n	8103508 <HAL_ADCEx_MultiModeConfigChannel+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034b8:	6d51      	ldr	r1, [r2, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 81034ba:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034be:	f041 0120 	orr.w	r1, r1, #32
 81034c2:	6551      	str	r1, [r2, #84]	; 0x54
    return HAL_ERROR;
 81034c4:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 81034c6:	b01a      	add	sp, #104	; 0x68
 81034c8:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034ca:	4c1c      	ldr	r4, [pc, #112]	; (810353c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81034cc:	68a3      	ldr	r3, [r4, #8]
 81034ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034d2:	b1dd      	cbz	r5, 810350c <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81034d4:	6848      	ldr	r0, [r1, #4]
 81034d6:	4303      	orrs	r3, r0
 81034d8:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81034da:	4630      	mov	r0, r6
 81034dc:	f7ff ffc4 	bl	8103468 <LL_ADC_IsEnabled>
 81034e0:	4603      	mov	r3, r0
 81034e2:	4815      	ldr	r0, [pc, #84]	; (8103538 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 81034e4:	f7ff ffc0 	bl	8103468 <LL_ADC_IsEnabled>
 81034e8:	4303      	orrs	r3, r0
 81034ea:	d004      	beq.n	81034f6 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81034ec:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 81034ee:	2300      	movs	r3, #0
 81034f0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 81034f4:	e7e7      	b.n	81034c6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 81034f6:	6889      	ldr	r1, [r1, #8]
 81034f8:	68a0      	ldr	r0, [r4, #8]
 81034fa:	430d      	orrs	r5, r1
 81034fc:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8103500:	f021 010f 	bic.w	r1, r1, #15
 8103504:	430d      	orrs	r5, r1
 8103506:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 8103508:	4618      	mov	r0, r3
 810350a:	e7f0      	b.n	81034ee <HAL_ADCEx_MultiModeConfigChannel+0x76>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 810350c:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810350e:	4630      	mov	r0, r6
 8103510:	f7ff ffaa 	bl	8103468 <LL_ADC_IsEnabled>
 8103514:	4603      	mov	r3, r0
 8103516:	4808      	ldr	r0, [pc, #32]	; (8103538 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8103518:	f7ff ffa6 	bl	8103468 <LL_ADC_IsEnabled>
 810351c:	4303      	orrs	r3, r0
 810351e:	d1e5      	bne.n	81034ec <HAL_ADCEx_MultiModeConfigChannel+0x74>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103520:	68a1      	ldr	r1, [r4, #8]
 8103522:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8103526:	f021 010f 	bic.w	r1, r1, #15
 810352a:	60a1      	str	r1, [r4, #8]
 810352c:	e7ec      	b.n	8103508 <HAL_ADCEx_MultiModeConfigChannel+0x90>
  __HAL_LOCK(hadc);
 810352e:	2002      	movs	r0, #2
 8103530:	e7c9      	b.n	81034c6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8103532:	bf00      	nop
 8103534:	40022000 	.word	0x40022000
 8103538:	40022100 	.word	0x40022100
 810353c:	40022300 	.word	0x40022300

08103540 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103540:	4907      	ldr	r1, [pc, #28]	; (8103560 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8103542:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103544:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103548:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810354a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810354c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103550:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 810355c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 810355e:	4770      	bx	lr
 8103560:	e000ed00 	.word	0xe000ed00

08103564 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103564:	4b16      	ldr	r3, [pc, #88]	; (81035c0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103566:	b530      	push	{r4, r5, lr}
 8103568:	68dc      	ldr	r4, [r3, #12]
 810356a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810356e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103572:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103574:	2b04      	cmp	r3, #4
 8103576:	bf28      	it	cs
 8103578:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810357a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810357c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103580:	bf8c      	ite	hi
 8103582:	3c03      	subhi	r4, #3
 8103584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103586:	fa05 f303 	lsl.w	r3, r5, r3
 810358a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810358e:	40a5      	lsls	r5, r4
 8103590:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103594:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8103596:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103598:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810359c:	bfac      	ite	ge
 810359e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035a2:	4a08      	ldrlt	r2, [pc, #32]	; (81035c4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035a8:	bfb8      	it	lt
 81035aa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035ae:	b2db      	uxtb	r3, r3
 81035b0:	bfaa      	itet	ge
 81035b2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035b6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035b8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 81035bc:	bd30      	pop	{r4, r5, pc}
 81035be:	bf00      	nop
 81035c0:	e000ed00 	.word	0xe000ed00
 81035c4:	e000ed14 	.word	0xe000ed14

081035c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 81035c8:	2800      	cmp	r0, #0
 81035ca:	db07      	blt.n	81035dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81035cc:	4a04      	ldr	r2, [pc, #16]	; (81035e0 <HAL_NVIC_EnableIRQ+0x18>)
 81035ce:	0941      	lsrs	r1, r0, #5
 81035d0:	2301      	movs	r3, #1
 81035d2:	f000 001f 	and.w	r0, r0, #31
 81035d6:	4083      	lsls	r3, r0
 81035d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 81035dc:	4770      	bx	lr
 81035de:	bf00      	nop
 81035e0:	e000e100 	.word	0xe000e100

081035e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81035e4:	3801      	subs	r0, #1
 81035e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 81035ea:	d20b      	bcs.n	8103604 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81035ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035f0:	4a05      	ldr	r2, [pc, #20]	; (8103608 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81035f2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035f4:	21f0      	movs	r1, #240	; 0xf0
 81035f6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81035fa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81035fc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81035fe:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103600:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103602:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8103604:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8103606:	4770      	bx	lr
 8103608:	e000ed00 	.word	0xe000ed00

0810360c <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810360c:	4b04      	ldr	r3, [pc, #16]	; (8103620 <HAL_GetCurrentCPUID+0x14>)
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 8103614:	2b07      	cmp	r3, #7
  }
}
 8103616:	bf0c      	ite	eq
 8103618:	2003      	moveq	r0, #3
 810361a:	2001      	movne	r0, #1
 810361c:	4770      	bx	lr
 810361e:	bf00      	nop
 8103620:	e000ed00 	.word	0xe000ed00

08103624 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103624:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103626:	f8df c178 	ldr.w	ip, [pc, #376]	; 81037a0 <DMA_SetConfig+0x17c>
 810362a:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810362c:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810362e:	4564      	cmp	r4, ip
 8103630:	d045      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103632:	4d58      	ldr	r5, [pc, #352]	; (8103794 <DMA_SetConfig+0x170>)
 8103634:	42ac      	cmp	r4, r5
 8103636:	d042      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103638:	3518      	adds	r5, #24
 810363a:	42ac      	cmp	r4, r5
 810363c:	d03f      	beq.n	81036be <DMA_SetConfig+0x9a>
 810363e:	3518      	adds	r5, #24
 8103640:	42ac      	cmp	r4, r5
 8103642:	d03c      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103644:	3518      	adds	r5, #24
 8103646:	42ac      	cmp	r4, r5
 8103648:	d039      	beq.n	81036be <DMA_SetConfig+0x9a>
 810364a:	3518      	adds	r5, #24
 810364c:	42ac      	cmp	r4, r5
 810364e:	d036      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103650:	3518      	adds	r5, #24
 8103652:	42ac      	cmp	r4, r5
 8103654:	d033      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103656:	3518      	adds	r5, #24
 8103658:	42ac      	cmp	r4, r5
 810365a:	d030      	beq.n	81036be <DMA_SetConfig+0x9a>
 810365c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8103660:	42ac      	cmp	r4, r5
 8103662:	d02c      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103664:	3518      	adds	r5, #24
 8103666:	42ac      	cmp	r4, r5
 8103668:	d029      	beq.n	81036be <DMA_SetConfig+0x9a>
 810366a:	3518      	adds	r5, #24
 810366c:	42ac      	cmp	r4, r5
 810366e:	d026      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103670:	3518      	adds	r5, #24
 8103672:	42ac      	cmp	r4, r5
 8103674:	d023      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103676:	3518      	adds	r5, #24
 8103678:	42ac      	cmp	r4, r5
 810367a:	d020      	beq.n	81036be <DMA_SetConfig+0x9a>
 810367c:	3518      	adds	r5, #24
 810367e:	42ac      	cmp	r4, r5
 8103680:	d01d      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103682:	3518      	adds	r5, #24
 8103684:	42ac      	cmp	r4, r5
 8103686:	d01a      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103688:	3518      	adds	r5, #24
 810368a:	42ac      	cmp	r4, r5
 810368c:	d017      	beq.n	81036be <DMA_SetConfig+0x9a>
 810368e:	4d42      	ldr	r5, [pc, #264]	; (8103798 <DMA_SetConfig+0x174>)
 8103690:	42ac      	cmp	r4, r5
 8103692:	d014      	beq.n	81036be <DMA_SetConfig+0x9a>
 8103694:	3514      	adds	r5, #20
 8103696:	42ac      	cmp	r4, r5
 8103698:	d011      	beq.n	81036be <DMA_SetConfig+0x9a>
 810369a:	3514      	adds	r5, #20
 810369c:	42ac      	cmp	r4, r5
 810369e:	d00e      	beq.n	81036be <DMA_SetConfig+0x9a>
 81036a0:	3514      	adds	r5, #20
 81036a2:	42ac      	cmp	r4, r5
 81036a4:	d00b      	beq.n	81036be <DMA_SetConfig+0x9a>
 81036a6:	3514      	adds	r5, #20
 81036a8:	42ac      	cmp	r4, r5
 81036aa:	d008      	beq.n	81036be <DMA_SetConfig+0x9a>
 81036ac:	3514      	adds	r5, #20
 81036ae:	42ac      	cmp	r4, r5
 81036b0:	d005      	beq.n	81036be <DMA_SetConfig+0x9a>
 81036b2:	3514      	adds	r5, #20
 81036b4:	42ac      	cmp	r4, r5
 81036b6:	d002      	beq.n	81036be <DMA_SetConfig+0x9a>
 81036b8:	3514      	adds	r5, #20
 81036ba:	42ac      	cmp	r4, r5
 81036bc:	d169      	bne.n	8103792 <DMA_SetConfig+0x16e>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81036be:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 81036c2:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81036c4:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 81036c6:	b115      	cbz	r5, 81036ce <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81036c8:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 81036cc:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81036ce:	4564      	cmp	r4, ip
 81036d0:	d037      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036d2:	4d30      	ldr	r5, [pc, #192]	; (8103794 <DMA_SetConfig+0x170>)
 81036d4:	42ac      	cmp	r4, r5
 81036d6:	d034      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036d8:	3518      	adds	r5, #24
 81036da:	42ac      	cmp	r4, r5
 81036dc:	d031      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036de:	3518      	adds	r5, #24
 81036e0:	42ac      	cmp	r4, r5
 81036e2:	d02e      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036e4:	3518      	adds	r5, #24
 81036e6:	42ac      	cmp	r4, r5
 81036e8:	d02b      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036ea:	3518      	adds	r5, #24
 81036ec:	42ac      	cmp	r4, r5
 81036ee:	d028      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036f0:	3518      	adds	r5, #24
 81036f2:	42ac      	cmp	r4, r5
 81036f4:	d025      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036f6:	3518      	adds	r5, #24
 81036f8:	42ac      	cmp	r4, r5
 81036fa:	d022      	beq.n	8103742 <DMA_SetConfig+0x11e>
 81036fc:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8103700:	42ac      	cmp	r4, r5
 8103702:	d01e      	beq.n	8103742 <DMA_SetConfig+0x11e>
 8103704:	3518      	adds	r5, #24
 8103706:	42ac      	cmp	r4, r5
 8103708:	d01b      	beq.n	8103742 <DMA_SetConfig+0x11e>
 810370a:	3518      	adds	r5, #24
 810370c:	42ac      	cmp	r4, r5
 810370e:	d018      	beq.n	8103742 <DMA_SetConfig+0x11e>
 8103710:	3518      	adds	r5, #24
 8103712:	42ac      	cmp	r4, r5
 8103714:	d015      	beq.n	8103742 <DMA_SetConfig+0x11e>
 8103716:	3518      	adds	r5, #24
 8103718:	42ac      	cmp	r4, r5
 810371a:	d012      	beq.n	8103742 <DMA_SetConfig+0x11e>
 810371c:	3518      	adds	r5, #24
 810371e:	42ac      	cmp	r4, r5
 8103720:	d00f      	beq.n	8103742 <DMA_SetConfig+0x11e>
 8103722:	3518      	adds	r5, #24
 8103724:	42ac      	cmp	r4, r5
 8103726:	d00c      	beq.n	8103742 <DMA_SetConfig+0x11e>
 8103728:	3518      	adds	r5, #24
 810372a:	42ac      	cmp	r4, r5
 810372c:	d009      	beq.n	8103742 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810372e:	4d1a      	ldr	r5, [pc, #104]	; (8103798 <DMA_SetConfig+0x174>)
 8103730:	42ac      	cmp	r4, r5
 8103732:	d119      	bne.n	8103768 <DMA_SetConfig+0x144>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103734:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8103736:	f005 061f 	and.w	r6, r5, #31
 810373a:	2501      	movs	r5, #1
 810373c:	40b5      	lsls	r5, r6
 810373e:	607d      	str	r5, [r7, #4]
 8103740:	e009      	b.n	8103756 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103742:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8103744:	f005 061f 	and.w	r6, r5, #31
 8103748:	253f      	movs	r5, #63	; 0x3f
 810374a:	40b5      	lsls	r5, r6
 810374c:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810374e:	6825      	ldr	r5, [r4, #0]
 8103750:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8103754:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8103756:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103758:	6883      	ldr	r3, [r0, #8]
 810375a:	2b40      	cmp	r3, #64	; 0x40
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810375c:	bf0b      	itete	eq
 810375e:	60a2      	streq	r2, [r4, #8]
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8103760:	60a1      	strne	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8103762:	60e1      	streq	r1, [r4, #12]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8103764:	60e2      	strne	r2, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103766:	e014      	b.n	8103792 <DMA_SetConfig+0x16e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103768:	4d0c      	ldr	r5, [pc, #48]	; (810379c <DMA_SetConfig+0x178>)
 810376a:	42ac      	cmp	r4, r5
 810376c:	d0e2      	beq.n	8103734 <DMA_SetConfig+0x110>
 810376e:	3514      	adds	r5, #20
 8103770:	42ac      	cmp	r4, r5
 8103772:	d0df      	beq.n	8103734 <DMA_SetConfig+0x110>
 8103774:	3514      	adds	r5, #20
 8103776:	42ac      	cmp	r4, r5
 8103778:	d0dc      	beq.n	8103734 <DMA_SetConfig+0x110>
 810377a:	3514      	adds	r5, #20
 810377c:	42ac      	cmp	r4, r5
 810377e:	d0d9      	beq.n	8103734 <DMA_SetConfig+0x110>
 8103780:	3514      	adds	r5, #20
 8103782:	42ac      	cmp	r4, r5
 8103784:	d0d6      	beq.n	8103734 <DMA_SetConfig+0x110>
 8103786:	3514      	adds	r5, #20
 8103788:	42ac      	cmp	r4, r5
 810378a:	d0d3      	beq.n	8103734 <DMA_SetConfig+0x110>
 810378c:	3514      	adds	r5, #20
 810378e:	42ac      	cmp	r4, r5
 8103790:	d0d0      	beq.n	8103734 <DMA_SetConfig+0x110>
}
 8103792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103794:	40020028 	.word	0x40020028
 8103798:	58025408 	.word	0x58025408
 810379c:	5802541c 	.word	0x5802541c
 81037a0:	40020010 	.word	0x40020010

081037a4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81037a4:	6803      	ldr	r3, [r0, #0]
 81037a6:	4a23      	ldr	r2, [pc, #140]	; (8103834 <DMA_CalcBaseAndBitshift+0x90>)
 81037a8:	4293      	cmp	r3, r2
{
 81037aa:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81037ac:	d032      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037ae:	3218      	adds	r2, #24
 81037b0:	4293      	cmp	r3, r2
 81037b2:	d02f      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037b4:	3218      	adds	r2, #24
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d02c      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037ba:	3218      	adds	r2, #24
 81037bc:	4293      	cmp	r3, r2
 81037be:	d029      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037c0:	3218      	adds	r2, #24
 81037c2:	4293      	cmp	r3, r2
 81037c4:	d026      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037c6:	3218      	adds	r2, #24
 81037c8:	4293      	cmp	r3, r2
 81037ca:	d023      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037cc:	3218      	adds	r2, #24
 81037ce:	4293      	cmp	r3, r2
 81037d0:	d020      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037d2:	3218      	adds	r2, #24
 81037d4:	4293      	cmp	r3, r2
 81037d6:	d01d      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037d8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81037dc:	4293      	cmp	r3, r2
 81037de:	d019      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037e0:	3218      	adds	r2, #24
 81037e2:	4293      	cmp	r3, r2
 81037e4:	d016      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037e6:	3218      	adds	r2, #24
 81037e8:	4293      	cmp	r3, r2
 81037ea:	d013      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037ec:	3218      	adds	r2, #24
 81037ee:	4293      	cmp	r3, r2
 81037f0:	d010      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037f2:	3218      	adds	r2, #24
 81037f4:	4293      	cmp	r3, r2
 81037f6:	d00d      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037f8:	3218      	adds	r2, #24
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d00a      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 81037fe:	3218      	adds	r2, #24
 8103800:	4293      	cmp	r3, r2
 8103802:	d007      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
 8103804:	3218      	adds	r2, #24
 8103806:	4293      	cmp	r3, r2
 8103808:	d004      	beq.n	8103814 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 810380a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810380e:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8103810:	4618      	mov	r0, r3
 8103812:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103814:	b2da      	uxtb	r2, r3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103816:	4c08      	ldr	r4, [pc, #32]	; (8103838 <DMA_CalcBaseAndBitshift+0x94>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103818:	3a10      	subs	r2, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810381a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810381e:	2118      	movs	r1, #24
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103820:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 8103824:	2a5f      	cmp	r2, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103826:	fbb2 f1f1 	udiv	r1, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810382a:	5c61      	ldrb	r1, [r4, r1]
 810382c:	65c1      	str	r1, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810382e:	bf88      	it	hi
 8103830:	3304      	addhi	r3, #4
 8103832:	e7ec      	b.n	810380e <DMA_CalcBaseAndBitshift+0x6a>
 8103834:	40020010 	.word	0x40020010
 8103838:	08110e58 	.word	0x08110e58

0810383c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810383c:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810383e:	4921      	ldr	r1, [pc, #132]	; (81038c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8103840:	428a      	cmp	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103842:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103844:	d028      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103846:	3114      	adds	r1, #20
 8103848:	428a      	cmp	r2, r1
 810384a:	d025      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810384c:	3114      	adds	r1, #20
 810384e:	428a      	cmp	r2, r1
 8103850:	d022      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103852:	3114      	adds	r1, #20
 8103854:	428a      	cmp	r2, r1
 8103856:	d01f      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103858:	3114      	adds	r1, #20
 810385a:	428a      	cmp	r2, r1
 810385c:	d01c      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810385e:	3114      	adds	r1, #20
 8103860:	428a      	cmp	r2, r1
 8103862:	d019      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103864:	3114      	adds	r1, #20
 8103866:	428a      	cmp	r2, r1
 8103868:	d016      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810386a:	3114      	adds	r1, #20
 810386c:	428a      	cmp	r2, r1
 810386e:	d013      	beq.n	8103898 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103870:	2118      	movs	r1, #24
 8103872:	3b10      	subs	r3, #16
 8103874:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103878:	4913      	ldr	r1, [pc, #76]	; (81038c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 810387a:	4411      	add	r1, r2
 810387c:	29a8      	cmp	r1, #168	; 0xa8
 810387e:	d91e      	bls.n	81038be <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103880:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103884:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103886:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810388a:	f003 031f 	and.w	r3, r3, #31
 810388e:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103892:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103894:	490d      	ldr	r1, [pc, #52]	; (81038cc <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8103896:	e00e      	b.n	81038b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103898:	2214      	movs	r2, #20
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810389a:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810389c:	3b08      	subs	r3, #8
 810389e:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81038a2:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038a6:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81038aa:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038ae:	fa01 f303 	lsl.w	r3, r1, r3
 81038b2:	4907      	ldr	r1, [pc, #28]	; (81038d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81038b4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81038b6:	e9c0 2118 	strd	r2, r1, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038ba:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 81038bc:	4770      	bx	lr
      stream_number += 8U;
 81038be:	3308      	adds	r3, #8
 81038c0:	e7de      	b.n	8103880 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 81038c2:	bf00      	nop
 81038c4:	58025408 	.word	0x58025408
 81038c8:	bffdfbf0 	.word	0xbffdfbf0
 81038cc:	40020880 	.word	0x40020880
 81038d0:	58025880 	.word	0x58025880

081038d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81038d4:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81038d6:	1e51      	subs	r1, r2, #1
 81038d8:	2907      	cmp	r1, #7
{
 81038da:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81038dc:	d821      	bhi.n	8103922 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81038de:	6803      	ldr	r3, [r0, #0]
 81038e0:	4c13      	ldr	r4, [pc, #76]	; (8103930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 81038e2:	42a3      	cmp	r3, r4
 81038e4:	d01e      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038e6:	3414      	adds	r4, #20
 81038e8:	42a3      	cmp	r3, r4
 81038ea:	d01b      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038ec:	3414      	adds	r4, #20
 81038ee:	42a3      	cmp	r3, r4
 81038f0:	d018      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038f2:	3414      	adds	r4, #20
 81038f4:	42a3      	cmp	r3, r4
 81038f6:	d015      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038f8:	3414      	adds	r4, #20
 81038fa:	42a3      	cmp	r3, r4
 81038fc:	d012      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038fe:	3414      	adds	r4, #20
 8103900:	42a3      	cmp	r3, r4
 8103902:	d00f      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103904:	3414      	adds	r4, #20
 8103906:	42a3      	cmp	r3, r4
 8103908:	d00c      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 810390a:	3414      	adds	r4, #20
 810390c:	42a3      	cmp	r3, r4
 810390e:	d009      	beq.n	8103924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103910:	4b08      	ldr	r3, [pc, #32]	; (8103934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 8103912:	4413      	add	r3, r2
 8103914:	4a08      	ldr	r2, [pc, #32]	; (8103938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8103916:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103918:	e9c0 321b 	strd	r3, r2, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 810391c:	2301      	movs	r3, #1
 810391e:	408b      	lsls	r3, r1
 8103920:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8103922:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103924:	4b05      	ldr	r3, [pc, #20]	; (810393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8103926:	4413      	add	r3, r2
 8103928:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810392a:	4a05      	ldr	r2, [pc, #20]	; (8103940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 810392c:	e7f4      	b.n	8103918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 810392e:	bf00      	nop
 8103930:	58025408 	.word	0x58025408
 8103934:	1000823f 	.word	0x1000823f
 8103938:	40020940 	.word	0x40020940
 810393c:	1600963f 	.word	0x1600963f
 8103940:	58025940 	.word	0x58025940

08103944 <HAL_DMA_Init>:
{
 8103944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103946:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8103948:	f7ff f992 	bl	8102c70 <HAL_GetTick>
 810394c:	4606      	mov	r6, r0
  if(hdma == NULL)
 810394e:	2c00      	cmp	r4, #0
 8103950:	f000 80cc 	beq.w	8103aec <HAL_DMA_Init+0x1a8>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103954:	6823      	ldr	r3, [r4, #0]
 8103956:	4d73      	ldr	r5, [pc, #460]	; (8103b24 <HAL_DMA_Init+0x1e0>)
 8103958:	42ab      	cmp	r3, r5
 810395a:	d06a      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 810395c:	4a72      	ldr	r2, [pc, #456]	; (8103b28 <HAL_DMA_Init+0x1e4>)
 810395e:	4293      	cmp	r3, r2
 8103960:	d067      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 8103962:	3218      	adds	r2, #24
 8103964:	4293      	cmp	r3, r2
 8103966:	d064      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 8103968:	3218      	adds	r2, #24
 810396a:	4293      	cmp	r3, r2
 810396c:	d061      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 810396e:	3218      	adds	r2, #24
 8103970:	4293      	cmp	r3, r2
 8103972:	d05e      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 8103974:	3218      	adds	r2, #24
 8103976:	4293      	cmp	r3, r2
 8103978:	d05b      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 810397a:	3218      	adds	r2, #24
 810397c:	4293      	cmp	r3, r2
 810397e:	d058      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 8103980:	3218      	adds	r2, #24
 8103982:	4293      	cmp	r3, r2
 8103984:	d055      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 8103986:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810398a:	4293      	cmp	r3, r2
 810398c:	d051      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 810398e:	3218      	adds	r2, #24
 8103990:	4293      	cmp	r3, r2
 8103992:	d04e      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 8103994:	3218      	adds	r2, #24
 8103996:	4293      	cmp	r3, r2
 8103998:	d04b      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 810399a:	3218      	adds	r2, #24
 810399c:	4293      	cmp	r3, r2
 810399e:	d048      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 81039a0:	3218      	adds	r2, #24
 81039a2:	4293      	cmp	r3, r2
 81039a4:	d045      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 81039a6:	3218      	adds	r2, #24
 81039a8:	4293      	cmp	r3, r2
 81039aa:	d042      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 81039ac:	3218      	adds	r2, #24
 81039ae:	4293      	cmp	r3, r2
 81039b0:	d03f      	beq.n	8103a32 <HAL_DMA_Init+0xee>
 81039b2:	3218      	adds	r2, #24
 81039b4:	4293      	cmp	r3, r2
 81039b6:	d03c      	beq.n	8103a32 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81039b8:	4a5c      	ldr	r2, [pc, #368]	; (8103b2c <HAL_DMA_Init+0x1e8>)
 81039ba:	4293      	cmp	r3, r2
 81039bc:	f040 8138 	bne.w	8103c30 <HAL_DMA_Init+0x2ec>
    hdma->State = HAL_DMA_STATE_BUSY;
 81039c0:	2202      	movs	r2, #2
 81039c2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 81039c6:	2200      	movs	r2, #0
 81039c8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81039cc:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81039ce:	68a1      	ldr	r1, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81039d0:	f420 30ff 	bic.w	r0, r0, #130560	; 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81039d4:	2940      	cmp	r1, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81039d6:	f420 70f8 	bic.w	r0, r0, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81039da:	f000 8147 	beq.w	8103c6c <HAL_DMA_Init+0x328>
 81039de:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
 81039e2:	4251      	negs	r1, r2
 81039e4:	4151      	adcs	r1, r2
 81039e6:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81039e8:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 81039ec:	08d2      	lsrs	r2, r2, #3
 81039ee:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81039f2:	6966      	ldr	r6, [r4, #20]
 81039f4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81039f8:	69a6      	ldr	r6, [r4, #24]
 81039fa:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81039fe:	69e6      	ldr	r6, [r4, #28]
 8103a00:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103a04:	6a26      	ldr	r6, [r4, #32]
 8103a06:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8103a0a:	4302      	orrs	r2, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103a0c:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103a0e:	4a48      	ldr	r2, [pc, #288]	; (8103b30 <HAL_DMA_Init+0x1ec>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103a10:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103a12:	441a      	add	r2, r3
 8103a14:	2314      	movs	r3, #20
 8103a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8103a1a:	0092      	lsls	r2, r2, #2
 8103a1c:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103a1e:	4620      	mov	r0, r4
 8103a20:	f7ff fec0 	bl	81037a4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103a24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8103a26:	f003 021f 	and.w	r2, r3, #31
 8103a2a:	2301      	movs	r3, #1
 8103a2c:	4093      	lsls	r3, r2
 8103a2e:	6043      	str	r3, [r0, #4]
 8103a30:	e094      	b.n	8103b5c <HAL_DMA_Init+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 8103a32:	2202      	movs	r2, #2
 8103a34:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8103a38:	2200      	movs	r2, #0
 8103a3a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8103a3e:	681a      	ldr	r2, [r3, #0]
 8103a40:	f022 0201 	bic.w	r2, r2, #1
 8103a44:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103a46:	6822      	ldr	r2, [r4, #0]
 8103a48:	6813      	ldr	r3, [r2, #0]
 8103a4a:	07df      	lsls	r7, r3, #31
 8103a4c:	d444      	bmi.n	8103ad8 <HAL_DMA_Init+0x194>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103a4e:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103a50:	4838      	ldr	r0, [pc, #224]	; (8103b34 <HAL_DMA_Init+0x1f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103a52:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103a54:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8103a56:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8103a5a:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103a5c:	6926      	ldr	r6, [r4, #16]
 8103a5e:	4333      	orrs	r3, r6
 8103a60:	6966      	ldr	r6, [r4, #20]
 8103a62:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103a64:	69e6      	ldr	r6, [r4, #28]
 8103a66:	430b      	orrs	r3, r1
 8103a68:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8103a6a:	6a26      	ldr	r6, [r4, #32]
 8103a6c:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103a6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8103a70:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8103a72:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103a76:	bf02      	ittt	eq
 8103a78:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	; 0x2c
 8103a7c:	4338      	orreq	r0, r7
 8103a7e:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103a80:	482d      	ldr	r0, [pc, #180]	; (8103b38 <HAL_DMA_Init+0x1f4>)
 8103a82:	6800      	ldr	r0, [r0, #0]
 8103a84:	0c00      	lsrs	r0, r0, #16
 8103a86:	0400      	lsls	r0, r0, #16
 8103a88:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8103a8c:	d30e      	bcc.n	8103aac <HAL_DMA_Init+0x168>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103a8e:	6860      	ldr	r0, [r4, #4]
 8103a90:	f1a0 0729 	sub.w	r7, r0, #41	; 0x29
 8103a94:	2f05      	cmp	r7, #5
 8103a96:	d907      	bls.n	8103aa8 <HAL_DMA_Init+0x164>
 8103a98:	383f      	subs	r0, #63	; 0x3f
 8103a9a:	2813      	cmp	r0, #19
 8103a9c:	d806      	bhi.n	8103aac <HAL_DMA_Init+0x168>
 8103a9e:	4f27      	ldr	r7, [pc, #156]	; (8103b3c <HAL_DMA_Init+0x1f8>)
 8103aa0:	fa27 f000 	lsr.w	r0, r7, r0
 8103aa4:	07c0      	lsls	r0, r0, #31
 8103aa6:	d501      	bpl.n	8103aac <HAL_DMA_Init+0x168>
        registerValue |= DMA_SxCR_TRBUFF;
 8103aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103aac:	6013      	str	r3, [r2, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103aae:	6953      	ldr	r3, [r2, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103ab0:	2e04      	cmp	r6, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103ab2:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8103ab6:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103aba:	d145      	bne.n	8103b48 <HAL_DMA_Init+0x204>
      registerValue |= hdma->Init.FIFOThreshold;
 8103abc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103abe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8103ac0:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103ac2:	2e00      	cmp	r6, #0
 8103ac4:	d040      	beq.n	8103b48 <HAL_DMA_Init+0x204>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103ac6:	b999      	cbnz	r1, 8103af0 <HAL_DMA_Init+0x1ac>
    switch (hdma->Init.FIFOThreshold)
 8103ac8:	2801      	cmp	r0, #1
 8103aca:	d021      	beq.n	8103b10 <HAL_DMA_Init+0x1cc>
 8103acc:	f030 0102 	bics.w	r1, r0, #2
 8103ad0:	d13a      	bne.n	8103b48 <HAL_DMA_Init+0x204>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103ad2:	01f1      	lsls	r1, r6, #7
 8103ad4:	d538      	bpl.n	8103b48 <HAL_DMA_Init+0x204>
 8103ad6:	e01e      	b.n	8103b16 <HAL_DMA_Init+0x1d2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103ad8:	f7ff f8ca 	bl	8102c70 <HAL_GetTick>
 8103adc:	1b80      	subs	r0, r0, r6
 8103ade:	2805      	cmp	r0, #5
 8103ae0:	d9b1      	bls.n	8103a46 <HAL_DMA_Init+0x102>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103ae2:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103ae4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103ae6:	2303      	movs	r3, #3
 8103ae8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8103aec:	2001      	movs	r0, #1
 8103aee:	e017      	b.n	8103b20 <HAL_DMA_Init+0x1dc>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103af0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8103af4:	d124      	bne.n	8103b40 <HAL_DMA_Init+0x1fc>
    switch (hdma->Init.FIFOThreshold)
 8103af6:	2803      	cmp	r0, #3
 8103af8:	d826      	bhi.n	8103b48 <HAL_DMA_Init+0x204>
 8103afa:	a101      	add	r1, pc, #4	; (adr r1, 8103b00 <HAL_DMA_Init+0x1bc>)
 8103afc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8103b00:	08103b17 	.word	0x08103b17
 8103b04:	08103ad3 	.word	0x08103ad3
 8103b08:	08103b17 	.word	0x08103b17
 8103b0c:	08103b11 	.word	0x08103b11
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103b10:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8103b14:	d118      	bne.n	8103b48 <HAL_DMA_Init+0x204>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103b16:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8103b18:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103b1a:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8103b1c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8103b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8103b22:	bf00      	nop
 8103b24:	40020010 	.word	0x40020010
 8103b28:	40020028 	.word	0x40020028
 8103b2c:	58025408 	.word	0x58025408
 8103b30:	a7fdabf8 	.word	0xa7fdabf8
 8103b34:	fe10803f 	.word	0xfe10803f
 8103b38:	5c001000 	.word	0x5c001000
 8103b3c:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8103b40:	2802      	cmp	r0, #2
 8103b42:	d9e8      	bls.n	8103b16 <HAL_DMA_Init+0x1d2>
 8103b44:	2803      	cmp	r0, #3
 8103b46:	d0c4      	beq.n	8103ad2 <HAL_DMA_Init+0x18e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103b48:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103b4a:	4620      	mov	r0, r4
 8103b4c:	f7ff fe2a 	bl	81037a4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103b50:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8103b52:	f003 021f 	and.w	r2, r3, #31
 8103b56:	233f      	movs	r3, #63	; 0x3f
 8103b58:	4093      	lsls	r3, r2
 8103b5a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103b5c:	6823      	ldr	r3, [r4, #0]
 8103b5e:	42ab      	cmp	r3, r5
 8103b60:	d045      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b62:	4a45      	ldr	r2, [pc, #276]	; (8103c78 <HAL_DMA_Init+0x334>)
 8103b64:	4293      	cmp	r3, r2
 8103b66:	d042      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b68:	3218      	adds	r2, #24
 8103b6a:	4293      	cmp	r3, r2
 8103b6c:	d03f      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b6e:	3218      	adds	r2, #24
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d03c      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b74:	3218      	adds	r2, #24
 8103b76:	4293      	cmp	r3, r2
 8103b78:	d039      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b7a:	3218      	adds	r2, #24
 8103b7c:	4293      	cmp	r3, r2
 8103b7e:	d036      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b80:	3218      	adds	r2, #24
 8103b82:	4293      	cmp	r3, r2
 8103b84:	d033      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b86:	3218      	adds	r2, #24
 8103b88:	4293      	cmp	r3, r2
 8103b8a:	d030      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b8c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103b90:	4293      	cmp	r3, r2
 8103b92:	d02c      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b94:	3218      	adds	r2, #24
 8103b96:	4293      	cmp	r3, r2
 8103b98:	d029      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103b9a:	3218      	adds	r2, #24
 8103b9c:	4293      	cmp	r3, r2
 8103b9e:	d026      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103ba0:	3218      	adds	r2, #24
 8103ba2:	4293      	cmp	r3, r2
 8103ba4:	d023      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103ba6:	3218      	adds	r2, #24
 8103ba8:	4293      	cmp	r3, r2
 8103baa:	d020      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bac:	3218      	adds	r2, #24
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d01d      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bb2:	3218      	adds	r2, #24
 8103bb4:	4293      	cmp	r3, r2
 8103bb6:	d01a      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bb8:	3218      	adds	r2, #24
 8103bba:	4293      	cmp	r3, r2
 8103bbc:	d017      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bbe:	4a2f      	ldr	r2, [pc, #188]	; (8103c7c <HAL_DMA_Init+0x338>)
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d014      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bc4:	3214      	adds	r2, #20
 8103bc6:	4293      	cmp	r3, r2
 8103bc8:	d011      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bca:	3214      	adds	r2, #20
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d00e      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bd0:	3214      	adds	r2, #20
 8103bd2:	4293      	cmp	r3, r2
 8103bd4:	d00b      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bd6:	3214      	adds	r2, #20
 8103bd8:	4293      	cmp	r3, r2
 8103bda:	d008      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103bdc:	3214      	adds	r2, #20
 8103bde:	4293      	cmp	r3, r2
 8103be0:	d005      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103be2:	3214      	adds	r2, #20
 8103be4:	4293      	cmp	r3, r2
 8103be6:	d002      	beq.n	8103bee <HAL_DMA_Init+0x2aa>
 8103be8:	3214      	adds	r2, #20
 8103bea:	4293      	cmp	r3, r2
 8103bec:	d11a      	bne.n	8103c24 <HAL_DMA_Init+0x2e0>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103bee:	4620      	mov	r0, r4
 8103bf0:	f7ff fe24 	bl	810383c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103bf4:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103bf6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103bf8:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103bfa:	bf04      	itt	eq
 8103bfc:	2300      	moveq	r3, #0
 8103bfe:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103c00:	6863      	ldr	r3, [r4, #4]
 8103c02:	b2d9      	uxtb	r1, r3
 8103c04:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103c06:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103c0a:	3b01      	subs	r3, #1
 8103c0c:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103c0e:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103c10:	f04f 0500 	mov.w	r5, #0
 8103c14:	d82c      	bhi.n	8103c70 <HAL_DMA_Init+0x32c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103c16:	f7ff fe5d 	bl	81038d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103c1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8103c1c:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103c1e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8103c22:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103c24:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8103c26:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103c28:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8103c2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8103c2e:	e777      	b.n	8103b20 <HAL_DMA_Init+0x1dc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103c30:	4a13      	ldr	r2, [pc, #76]	; (8103c80 <HAL_DMA_Init+0x33c>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	f43f aec4 	beq.w	81039c0 <HAL_DMA_Init+0x7c>
 8103c38:	3214      	adds	r2, #20
 8103c3a:	4293      	cmp	r3, r2
 8103c3c:	f43f aec0 	beq.w	81039c0 <HAL_DMA_Init+0x7c>
 8103c40:	3214      	adds	r2, #20
 8103c42:	4293      	cmp	r3, r2
 8103c44:	f43f aebc 	beq.w	81039c0 <HAL_DMA_Init+0x7c>
 8103c48:	3214      	adds	r2, #20
 8103c4a:	4293      	cmp	r3, r2
 8103c4c:	f43f aeb8 	beq.w	81039c0 <HAL_DMA_Init+0x7c>
 8103c50:	3214      	adds	r2, #20
 8103c52:	4293      	cmp	r3, r2
 8103c54:	f43f aeb4 	beq.w	81039c0 <HAL_DMA_Init+0x7c>
 8103c58:	3214      	adds	r2, #20
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	f43f aeb0 	beq.w	81039c0 <HAL_DMA_Init+0x7c>
 8103c60:	3214      	adds	r2, #20
 8103c62:	4293      	cmp	r3, r2
 8103c64:	f43f aeac 	beq.w	81039c0 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103c68:	2340      	movs	r3, #64	; 0x40
 8103c6a:	e73b      	b.n	8103ae4 <HAL_DMA_Init+0x1a0>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103c6c:	2110      	movs	r1, #16
 8103c6e:	e6bb      	b.n	81039e8 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8103c70:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103c74:	6765      	str	r5, [r4, #116]	; 0x74
 8103c76:	e7d5      	b.n	8103c24 <HAL_DMA_Init+0x2e0>
 8103c78:	40020028 	.word	0x40020028
 8103c7c:	58025408 	.word	0x58025408
 8103c80:	5802541c 	.word	0x5802541c

08103c84 <HAL_DMA_Start_IT>:
{
 8103c84:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8103c86:	2800      	cmp	r0, #0
 8103c88:	f000 810a 	beq.w	8103ea0 <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 8103c8c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8103c90:	2c01      	cmp	r4, #1
 8103c92:	f000 8107 	beq.w	8103ea4 <HAL_DMA_Start_IT+0x220>
  if(HAL_DMA_STATE_READY == hdma->State)
 8103c96:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8103c9a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8103c9c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8103c9e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8103ca2:	f04f 0500 	mov.w	r5, #0
 8103ca6:	f040 80f6 	bne.w	8103e96 <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 8103caa:	2402      	movs	r4, #2
 8103cac:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8103cb0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103cb2:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8103cb4:	4d7c      	ldr	r5, [pc, #496]	; (8103ea8 <HAL_DMA_Start_IT+0x224>)
 8103cb6:	42ac      	cmp	r4, r5
 8103cb8:	d01e      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cba:	4e7c      	ldr	r6, [pc, #496]	; (8103eac <HAL_DMA_Start_IT+0x228>)
 8103cbc:	42b4      	cmp	r4, r6
 8103cbe:	d01b      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cc0:	3618      	adds	r6, #24
 8103cc2:	42b4      	cmp	r4, r6
 8103cc4:	d018      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cc6:	3618      	adds	r6, #24
 8103cc8:	42b4      	cmp	r4, r6
 8103cca:	d015      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103ccc:	3618      	adds	r6, #24
 8103cce:	42b4      	cmp	r4, r6
 8103cd0:	d012      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cd2:	3618      	adds	r6, #24
 8103cd4:	42b4      	cmp	r4, r6
 8103cd6:	d00f      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cd8:	3618      	adds	r6, #24
 8103cda:	42b4      	cmp	r4, r6
 8103cdc:	d00c      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cde:	3618      	adds	r6, #24
 8103ce0:	42b4      	cmp	r4, r6
 8103ce2:	d009      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103ce4:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8103ce8:	42b4      	cmp	r4, r6
 8103cea:	d005      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cec:	3618      	adds	r6, #24
 8103cee:	42b4      	cmp	r4, r6
 8103cf0:	d002      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cf2:	3618      	adds	r6, #24
 8103cf4:	42b4      	cmp	r4, r6
 8103cf6:	d0ff      	beq.n	8103cf8 <HAL_DMA_Start_IT+0x74>
 8103cf8:	6826      	ldr	r6, [r4, #0]
 8103cfa:	f026 0601 	bic.w	r6, r6, #1
 8103cfe:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8103d00:	f7ff fc90 	bl	8103624 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103d04:	42ac      	cmp	r4, r5
 8103d06:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8103d08:	d053      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d0a:	4b68      	ldr	r3, [pc, #416]	; (8103eac <HAL_DMA_Start_IT+0x228>)
 8103d0c:	429c      	cmp	r4, r3
 8103d0e:	d050      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d10:	3318      	adds	r3, #24
 8103d12:	429c      	cmp	r4, r3
 8103d14:	d04d      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d16:	3318      	adds	r3, #24
 8103d18:	429c      	cmp	r4, r3
 8103d1a:	d04a      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d1c:	3318      	adds	r3, #24
 8103d1e:	429c      	cmp	r4, r3
 8103d20:	d047      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d22:	3318      	adds	r3, #24
 8103d24:	429c      	cmp	r4, r3
 8103d26:	d044      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d28:	3318      	adds	r3, #24
 8103d2a:	429c      	cmp	r4, r3
 8103d2c:	d041      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d2e:	3318      	adds	r3, #24
 8103d30:	429c      	cmp	r4, r3
 8103d32:	d03e      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d34:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103d38:	429c      	cmp	r4, r3
 8103d3a:	d03a      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d3c:	3318      	adds	r3, #24
 8103d3e:	429c      	cmp	r4, r3
 8103d40:	d037      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d42:	3318      	adds	r3, #24
 8103d44:	429c      	cmp	r4, r3
 8103d46:	d034      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d48:	3318      	adds	r3, #24
 8103d4a:	429c      	cmp	r4, r3
 8103d4c:	d031      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d4e:	3318      	adds	r3, #24
 8103d50:	429c      	cmp	r4, r3
 8103d52:	d02e      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d54:	3318      	adds	r3, #24
 8103d56:	429c      	cmp	r4, r3
 8103d58:	d02b      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d5a:	3318      	adds	r3, #24
 8103d5c:	429c      	cmp	r4, r3
 8103d5e:	d028      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
 8103d60:	3318      	adds	r3, #24
 8103d62:	429c      	cmp	r4, r3
 8103d64:	d025      	beq.n	8103db2 <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8103d66:	6823      	ldr	r3, [r4, #0]
 8103d68:	f023 030e 	bic.w	r3, r3, #14
 8103d6c:	f043 030a 	orr.w	r3, r3, #10
 8103d70:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103d72:	2a00      	cmp	r2, #0
 8103d74:	d156      	bne.n	8103e24 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103d76:	4b4e      	ldr	r3, [pc, #312]	; (8103eb0 <HAL_DMA_Start_IT+0x22c>)
 8103d78:	429c      	cmp	r4, r3
 8103d7a:	d027      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103d7c:	4b4d      	ldr	r3, [pc, #308]	; (8103eb4 <HAL_DMA_Start_IT+0x230>)
 8103d7e:	429c      	cmp	r4, r3
 8103d80:	d024      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103d82:	3314      	adds	r3, #20
 8103d84:	429c      	cmp	r4, r3
 8103d86:	d021      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103d88:	3314      	adds	r3, #20
 8103d8a:	429c      	cmp	r4, r3
 8103d8c:	d01e      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103d8e:	3314      	adds	r3, #20
 8103d90:	429c      	cmp	r4, r3
 8103d92:	d01b      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103d94:	3314      	adds	r3, #20
 8103d96:	429c      	cmp	r4, r3
 8103d98:	d018      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103d9a:	3314      	adds	r3, #20
 8103d9c:	429c      	cmp	r4, r3
 8103d9e:	d015      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103da0:	3314      	adds	r3, #20
 8103da2:	429c      	cmp	r4, r3
 8103da4:	d012      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 8103da6:	6823      	ldr	r3, [r4, #0]
 8103da8:	f043 0301 	orr.w	r3, r3, #1
 8103dac:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103dae:	2000      	movs	r0, #0
}
 8103db0:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103db2:	6823      	ldr	r3, [r4, #0]
 8103db4:	f023 031e 	bic.w	r3, r3, #30
 8103db8:	f043 0316 	orr.w	r3, r3, #22
 8103dbc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103dbe:	b11a      	cbz	r2, 8103dc8 <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103dc0:	6823      	ldr	r3, [r4, #0]
 8103dc2:	f043 0308 	orr.w	r3, r3, #8
 8103dc6:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103dc8:	42ac      	cmp	r4, r5
 8103dca:	d130      	bne.n	8103e2e <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8103dcc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8103dce:	681a      	ldr	r2, [r3, #0]
 8103dd0:	03d2      	lsls	r2, r2, #15
 8103dd2:	d45b      	bmi.n	8103e8c <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 8103dd4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8103dd6:	b11b      	cbz	r3, 8103de0 <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8103dd8:	681a      	ldr	r2, [r3, #0]
 8103dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103dde:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8103de0:	42ac      	cmp	r4, r5
 8103de2:	d0e0      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103de4:	4b31      	ldr	r3, [pc, #196]	; (8103eac <HAL_DMA_Start_IT+0x228>)
 8103de6:	429c      	cmp	r4, r3
 8103de8:	d0dd      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103dea:	3318      	adds	r3, #24
 8103dec:	429c      	cmp	r4, r3
 8103dee:	d0da      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103df0:	3318      	adds	r3, #24
 8103df2:	429c      	cmp	r4, r3
 8103df4:	d0d7      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103df6:	3318      	adds	r3, #24
 8103df8:	429c      	cmp	r4, r3
 8103dfa:	d0d4      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103dfc:	3318      	adds	r3, #24
 8103dfe:	429c      	cmp	r4, r3
 8103e00:	d0d1      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103e02:	3318      	adds	r3, #24
 8103e04:	429c      	cmp	r4, r3
 8103e06:	d0ce      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103e08:	3318      	adds	r3, #24
 8103e0a:	429c      	cmp	r4, r3
 8103e0c:	d0cb      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103e0e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103e12:	429c      	cmp	r4, r3
 8103e14:	d0c7      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103e16:	3318      	adds	r3, #24
 8103e18:	429c      	cmp	r4, r3
 8103e1a:	d0c4      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103e1c:	3318      	adds	r3, #24
 8103e1e:	429c      	cmp	r4, r3
 8103e20:	d0c1      	beq.n	8103da6 <HAL_DMA_Start_IT+0x122>
 8103e22:	e7c0      	b.n	8103da6 <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8103e24:	6823      	ldr	r3, [r4, #0]
 8103e26:	f043 0304 	orr.w	r3, r3, #4
 8103e2a:	6023      	str	r3, [r4, #0]
 8103e2c:	e7a3      	b.n	8103d76 <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103e2e:	4b1f      	ldr	r3, [pc, #124]	; (8103eac <HAL_DMA_Start_IT+0x228>)
 8103e30:	429c      	cmp	r4, r3
 8103e32:	d0cb      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e34:	3318      	adds	r3, #24
 8103e36:	429c      	cmp	r4, r3
 8103e38:	d0c8      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e3a:	3318      	adds	r3, #24
 8103e3c:	429c      	cmp	r4, r3
 8103e3e:	d0c5      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e40:	3318      	adds	r3, #24
 8103e42:	429c      	cmp	r4, r3
 8103e44:	d0c2      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e46:	3318      	adds	r3, #24
 8103e48:	429c      	cmp	r4, r3
 8103e4a:	d0bf      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e4c:	3318      	adds	r3, #24
 8103e4e:	429c      	cmp	r4, r3
 8103e50:	d0bc      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e52:	3318      	adds	r3, #24
 8103e54:	429c      	cmp	r4, r3
 8103e56:	d0b9      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e58:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103e5c:	429c      	cmp	r4, r3
 8103e5e:	d0b5      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e60:	3318      	adds	r3, #24
 8103e62:	429c      	cmp	r4, r3
 8103e64:	d0b2      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e66:	3318      	adds	r3, #24
 8103e68:	429c      	cmp	r4, r3
 8103e6a:	d0af      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e6c:	3318      	adds	r3, #24
 8103e6e:	429c      	cmp	r4, r3
 8103e70:	d0ac      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e72:	3318      	adds	r3, #24
 8103e74:	429c      	cmp	r4, r3
 8103e76:	d0a9      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e78:	3318      	adds	r3, #24
 8103e7a:	429c      	cmp	r4, r3
 8103e7c:	d0a6      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e7e:	3318      	adds	r3, #24
 8103e80:	429c      	cmp	r4, r3
 8103e82:	d0a3      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e84:	3318      	adds	r3, #24
 8103e86:	429c      	cmp	r4, r3
 8103e88:	d0a0      	beq.n	8103dcc <HAL_DMA_Start_IT+0x148>
 8103e8a:	e774      	b.n	8103d76 <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8103e8c:	681a      	ldr	r2, [r3, #0]
 8103e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103e92:	601a      	str	r2, [r3, #0]
 8103e94:	e79e      	b.n	8103dd4 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8103e96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103e9a:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8103e9c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    return HAL_ERROR;
 8103ea0:	2001      	movs	r0, #1
 8103ea2:	e785      	b.n	8103db0 <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 8103ea4:	2002      	movs	r0, #2
 8103ea6:	e783      	b.n	8103db0 <HAL_DMA_Start_IT+0x12c>
 8103ea8:	40020010 	.word	0x40020010
 8103eac:	40020028 	.word	0x40020028
 8103eb0:	58025408 	.word	0x58025408
 8103eb4:	5802541c 	.word	0x5802541c

08103eb8 <HAL_DMA_Abort>:
{
 8103eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103eba:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8103ebc:	f7fe fed8 	bl	8102c70 <HAL_GetTick>
 8103ec0:	4607      	mov	r7, r0
  if(hdma == NULL)
 8103ec2:	b145      	cbz	r5, 8103ed6 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103ec4:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8103ec8:	2b02      	cmp	r3, #2
 8103eca:	d006      	beq.n	8103eda <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103ecc:	2380      	movs	r3, #128	; 0x80
 8103ece:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8103ed0:	2300      	movs	r3, #0
 8103ed2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8103ed6:	2001      	movs	r0, #1
 8103ed8:	e153      	b.n	8104182 <HAL_DMA_Abort+0x2ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103eda:	682c      	ldr	r4, [r5, #0]
 8103edc:	4ea9      	ldr	r6, [pc, #676]	; (8104184 <HAL_DMA_Abort+0x2cc>)
 8103ede:	42b4      	cmp	r4, r6
 8103ee0:	d04a      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103ee2:	4ba9      	ldr	r3, [pc, #676]	; (8104188 <HAL_DMA_Abort+0x2d0>)
 8103ee4:	429c      	cmp	r4, r3
 8103ee6:	d047      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103ee8:	3318      	adds	r3, #24
 8103eea:	429c      	cmp	r4, r3
 8103eec:	d044      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103eee:	3318      	adds	r3, #24
 8103ef0:	429c      	cmp	r4, r3
 8103ef2:	d041      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103ef4:	3318      	adds	r3, #24
 8103ef6:	429c      	cmp	r4, r3
 8103ef8:	d03e      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103efa:	3318      	adds	r3, #24
 8103efc:	429c      	cmp	r4, r3
 8103efe:	d03b      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f00:	3318      	adds	r3, #24
 8103f02:	429c      	cmp	r4, r3
 8103f04:	d038      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f06:	3318      	adds	r3, #24
 8103f08:	429c      	cmp	r4, r3
 8103f0a:	d035      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f0c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103f10:	429c      	cmp	r4, r3
 8103f12:	d031      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f14:	3318      	adds	r3, #24
 8103f16:	429c      	cmp	r4, r3
 8103f18:	d02e      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f1a:	3318      	adds	r3, #24
 8103f1c:	429c      	cmp	r4, r3
 8103f1e:	d02b      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f20:	3318      	adds	r3, #24
 8103f22:	429c      	cmp	r4, r3
 8103f24:	d028      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f26:	3318      	adds	r3, #24
 8103f28:	429c      	cmp	r4, r3
 8103f2a:	d025      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f2c:	3318      	adds	r3, #24
 8103f2e:	429c      	cmp	r4, r3
 8103f30:	d022      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f32:	3318      	adds	r3, #24
 8103f34:	429c      	cmp	r4, r3
 8103f36:	d01f      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
 8103f38:	3318      	adds	r3, #24
 8103f3a:	429c      	cmp	r4, r3
 8103f3c:	d01c      	beq.n	8103f78 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103f3e:	6823      	ldr	r3, [r4, #0]
 8103f40:	f023 030e 	bic.w	r3, r3, #14
 8103f44:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f46:	4b91      	ldr	r3, [pc, #580]	; (810418c <HAL_DMA_Abort+0x2d4>)
 8103f48:	429c      	cmp	r4, r3
 8103f4a:	d01f      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8103f4c:	3314      	adds	r3, #20
 8103f4e:	429c      	cmp	r4, r3
 8103f50:	d01c      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8103f52:	3314      	adds	r3, #20
 8103f54:	429c      	cmp	r4, r3
 8103f56:	d019      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8103f58:	3314      	adds	r3, #20
 8103f5a:	429c      	cmp	r4, r3
 8103f5c:	d016      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8103f5e:	3314      	adds	r3, #20
 8103f60:	429c      	cmp	r4, r3
 8103f62:	d013      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8103f64:	3314      	adds	r3, #20
 8103f66:	429c      	cmp	r4, r3
 8103f68:	d010      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8103f6a:	3314      	adds	r3, #20
 8103f6c:	429c      	cmp	r4, r3
 8103f6e:	d00d      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8103f70:	3314      	adds	r3, #20
 8103f72:	429c      	cmp	r4, r3
 8103f74:	d112      	bne.n	8103f9c <HAL_DMA_Abort+0xe4>
 8103f76:	e009      	b.n	8103f8c <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103f78:	6823      	ldr	r3, [r4, #0]
 8103f7a:	f023 031e 	bic.w	r3, r3, #30
 8103f7e:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103f80:	6963      	ldr	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f82:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8103f88:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f8a:	d176      	bne.n	810407a <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103f8c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8103f8e:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8103f90:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103f96:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8103f98:	f040 80ab 	bne.w	81040f2 <HAL_DMA_Abort+0x23a>
 8103f9c:	6823      	ldr	r3, [r4, #0]
 8103f9e:	f023 0301 	bic.w	r3, r3, #1
 8103fa2:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103fa4:	6823      	ldr	r3, [r4, #0]
 8103fa6:	07db      	lsls	r3, r3, #31
 8103fa8:	f100 80cd 	bmi.w	8104146 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103fac:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103fae:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103fb2:	42b3      	cmp	r3, r6
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103fb4:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103fb8:	f000 80d1 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103fbc:	4972      	ldr	r1, [pc, #456]	; (8104188 <HAL_DMA_Abort+0x2d0>)
 8103fbe:	428b      	cmp	r3, r1
 8103fc0:	f000 80cd 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103fc4:	3118      	adds	r1, #24
 8103fc6:	428b      	cmp	r3, r1
 8103fc8:	f000 80c9 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103fcc:	3118      	adds	r1, #24
 8103fce:	428b      	cmp	r3, r1
 8103fd0:	f000 80c5 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103fd4:	3118      	adds	r1, #24
 8103fd6:	428b      	cmp	r3, r1
 8103fd8:	f000 80c1 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103fdc:	3118      	adds	r1, #24
 8103fde:	428b      	cmp	r3, r1
 8103fe0:	f000 80bd 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103fe4:	3118      	adds	r1, #24
 8103fe6:	428b      	cmp	r3, r1
 8103fe8:	f000 80b9 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103fec:	3118      	adds	r1, #24
 8103fee:	428b      	cmp	r3, r1
 8103ff0:	f000 80b5 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103ff4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8103ff8:	428b      	cmp	r3, r1
 8103ffa:	f000 80b0 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8103ffe:	3118      	adds	r1, #24
 8104000:	428b      	cmp	r3, r1
 8104002:	f000 80ac 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8104006:	3118      	adds	r1, #24
 8104008:	428b      	cmp	r3, r1
 810400a:	f000 80a8 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 810400e:	3118      	adds	r1, #24
 8104010:	428b      	cmp	r3, r1
 8104012:	f000 80a4 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8104016:	3118      	adds	r1, #24
 8104018:	428b      	cmp	r3, r1
 810401a:	f000 80a0 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 810401e:	3118      	adds	r1, #24
 8104020:	428b      	cmp	r3, r1
 8104022:	f000 809c 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 8104026:	3118      	adds	r1, #24
 8104028:	428b      	cmp	r3, r1
 810402a:	f000 8098 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
 810402e:	3118      	adds	r1, #24
 8104030:	428b      	cmp	r3, r1
 8104032:	f000 8094 	beq.w	810415e <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104036:	2101      	movs	r1, #1
 8104038:	fa01 f202 	lsl.w	r2, r1, r2
 810403c:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810403e:	4a53      	ldr	r2, [pc, #332]	; (810418c <HAL_DMA_Abort+0x2d4>)
 8104040:	4293      	cmp	r3, r2
 8104042:	f000 8092 	beq.w	810416a <HAL_DMA_Abort+0x2b2>
 8104046:	3214      	adds	r2, #20
 8104048:	4293      	cmp	r3, r2
 810404a:	f000 808e 	beq.w	810416a <HAL_DMA_Abort+0x2b2>
 810404e:	3214      	adds	r2, #20
 8104050:	4293      	cmp	r3, r2
 8104052:	f000 808a 	beq.w	810416a <HAL_DMA_Abort+0x2b2>
 8104056:	3214      	adds	r2, #20
 8104058:	4293      	cmp	r3, r2
 810405a:	f000 8086 	beq.w	810416a <HAL_DMA_Abort+0x2b2>
 810405e:	3214      	adds	r2, #20
 8104060:	4293      	cmp	r3, r2
 8104062:	f000 8082 	beq.w	810416a <HAL_DMA_Abort+0x2b2>
 8104066:	3214      	adds	r2, #20
 8104068:	4293      	cmp	r3, r2
 810406a:	d07e      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 810406c:	3214      	adds	r2, #20
 810406e:	4293      	cmp	r3, r2
 8104070:	d07b      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 8104072:	3214      	adds	r2, #20
 8104074:	4293      	cmp	r3, r2
 8104076:	d17e      	bne.n	8104176 <HAL_DMA_Abort+0x2be>
 8104078:	e077      	b.n	810416a <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810407a:	4b43      	ldr	r3, [pc, #268]	; (8104188 <HAL_DMA_Abort+0x2d0>)
 810407c:	429c      	cmp	r4, r3
 810407e:	d085      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8104080:	3318      	adds	r3, #24
 8104082:	429c      	cmp	r4, r3
 8104084:	d082      	beq.n	8103f8c <HAL_DMA_Abort+0xd4>
 8104086:	3318      	adds	r3, #24
 8104088:	429c      	cmp	r4, r3
 810408a:	f43f af7f 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 810408e:	3318      	adds	r3, #24
 8104090:	429c      	cmp	r4, r3
 8104092:	f43f af7b 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 8104096:	3318      	adds	r3, #24
 8104098:	429c      	cmp	r4, r3
 810409a:	f43f af77 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 810409e:	3318      	adds	r3, #24
 81040a0:	429c      	cmp	r4, r3
 81040a2:	f43f af73 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040a6:	3318      	adds	r3, #24
 81040a8:	429c      	cmp	r4, r3
 81040aa:	f43f af6f 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81040b2:	429c      	cmp	r4, r3
 81040b4:	f43f af6a 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040b8:	3318      	adds	r3, #24
 81040ba:	429c      	cmp	r4, r3
 81040bc:	f43f af66 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040c0:	3318      	adds	r3, #24
 81040c2:	429c      	cmp	r4, r3
 81040c4:	f43f af62 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040c8:	3318      	adds	r3, #24
 81040ca:	429c      	cmp	r4, r3
 81040cc:	f43f af5e 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040d0:	3318      	adds	r3, #24
 81040d2:	429c      	cmp	r4, r3
 81040d4:	f43f af5a 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040d8:	3318      	adds	r3, #24
 81040da:	429c      	cmp	r4, r3
 81040dc:	f43f af56 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040e0:	3318      	adds	r3, #24
 81040e2:	429c      	cmp	r4, r3
 81040e4:	f43f af52 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040e8:	3318      	adds	r3, #24
 81040ea:	429c      	cmp	r4, r3
 81040ec:	f43f af4e 	beq.w	8103f8c <HAL_DMA_Abort+0xd4>
 81040f0:	e729      	b.n	8103f46 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 81040f2:	4b25      	ldr	r3, [pc, #148]	; (8104188 <HAL_DMA_Abort+0x2d0>)
 81040f4:	429c      	cmp	r4, r3
 81040f6:	f43f af51 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 81040fa:	3318      	adds	r3, #24
 81040fc:	429c      	cmp	r4, r3
 81040fe:	f43f af4d 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 8104102:	3318      	adds	r3, #24
 8104104:	429c      	cmp	r4, r3
 8104106:	f43f af49 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 810410a:	3318      	adds	r3, #24
 810410c:	429c      	cmp	r4, r3
 810410e:	f43f af45 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 8104112:	3318      	adds	r3, #24
 8104114:	429c      	cmp	r4, r3
 8104116:	f43f af41 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 810411a:	3318      	adds	r3, #24
 810411c:	429c      	cmp	r4, r3
 810411e:	f43f af3d 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 8104122:	3318      	adds	r3, #24
 8104124:	429c      	cmp	r4, r3
 8104126:	f43f af39 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 810412a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 810412e:	429c      	cmp	r4, r3
 8104130:	f43f af34 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 8104134:	3318      	adds	r3, #24
 8104136:	429c      	cmp	r4, r3
 8104138:	f43f af30 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 810413c:	3318      	adds	r3, #24
 810413e:	429c      	cmp	r4, r3
 8104140:	f43f af2c 	beq.w	8103f9c <HAL_DMA_Abort+0xe4>
 8104144:	e72a      	b.n	8103f9c <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104146:	f7fe fd93 	bl	8102c70 <HAL_GetTick>
 810414a:	1bc0      	subs	r0, r0, r7
 810414c:	2805      	cmp	r0, #5
 810414e:	f67f af29 	bls.w	8103fa4 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104152:	2320      	movs	r3, #32
 8104154:	656b      	str	r3, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8104156:	2303      	movs	r3, #3
 8104158:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 810415c:	e6b8      	b.n	8103ed0 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810415e:	213f      	movs	r1, #63	; 0x3f
 8104160:	fa01 f202 	lsl.w	r2, r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104164:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104166:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104168:	d112      	bne.n	8104190 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810416a:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 810416e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8104170:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8104172:	2b00      	cmp	r3, #0
 8104174:	d13b      	bne.n	81041ee <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8104176:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8104178:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 810417a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 810417e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 8104182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8104184:	40020010 	.word	0x40020010
 8104188:	40020028 	.word	0x40020028
 810418c:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104190:	4a1b      	ldr	r2, [pc, #108]	; (8104200 <HAL_DMA_Abort+0x348>)
 8104192:	4293      	cmp	r3, r2
 8104194:	d0e9      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 8104196:	3218      	adds	r2, #24
 8104198:	4293      	cmp	r3, r2
 810419a:	d0e6      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 810419c:	3218      	adds	r2, #24
 810419e:	4293      	cmp	r3, r2
 81041a0:	d0e3      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041a2:	3218      	adds	r2, #24
 81041a4:	4293      	cmp	r3, r2
 81041a6:	d0e0      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041a8:	3218      	adds	r2, #24
 81041aa:	4293      	cmp	r3, r2
 81041ac:	d0dd      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041ae:	3218      	adds	r2, #24
 81041b0:	4293      	cmp	r3, r2
 81041b2:	d0da      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041b4:	3218      	adds	r2, #24
 81041b6:	4293      	cmp	r3, r2
 81041b8:	d0d7      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041ba:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81041be:	4293      	cmp	r3, r2
 81041c0:	d0d3      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041c2:	3218      	adds	r2, #24
 81041c4:	4293      	cmp	r3, r2
 81041c6:	d0d0      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041c8:	3218      	adds	r2, #24
 81041ca:	4293      	cmp	r3, r2
 81041cc:	d0cd      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041ce:	3218      	adds	r2, #24
 81041d0:	4293      	cmp	r3, r2
 81041d2:	d0ca      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041d4:	3218      	adds	r2, #24
 81041d6:	4293      	cmp	r3, r2
 81041d8:	d0c7      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041da:	3218      	adds	r2, #24
 81041dc:	4293      	cmp	r3, r2
 81041de:	d0c4      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041e0:	3218      	adds	r2, #24
 81041e2:	4293      	cmp	r3, r2
 81041e4:	d0c1      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041e6:	3218      	adds	r2, #24
 81041e8:	4293      	cmp	r3, r2
 81041ea:	d0be      	beq.n	810416a <HAL_DMA_Abort+0x2b2>
 81041ec:	e727      	b.n	810403e <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81041ee:	681a      	ldr	r2, [r3, #0]
 81041f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81041f4:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81041f6:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 81041fa:	605a      	str	r2, [r3, #4]
 81041fc:	e7bb      	b.n	8104176 <HAL_DMA_Abort+0x2be>
 81041fe:	bf00      	nop
 8104200:	40020028 	.word	0x40020028

08104204 <HAL_DMA_Abort_IT>:
{
 8104204:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8104206:	b128      	cbz	r0, 8104214 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104208:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 810420c:	2b02      	cmp	r3, #2
 810420e:	d003      	beq.n	8104218 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104210:	2380      	movs	r3, #128	; 0x80
 8104212:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8104214:	2001      	movs	r0, #1
 8104216:	e05d      	b.n	81042d4 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104218:	6803      	ldr	r3, [r0, #0]
 810421a:	4a3f      	ldr	r2, [pc, #252]	; (8104318 <HAL_DMA_Abort_IT+0x114>)
 810421c:	4293      	cmp	r3, r2
 810421e:	d051      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104220:	3218      	adds	r2, #24
 8104222:	4293      	cmp	r3, r2
 8104224:	d04e      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104226:	3218      	adds	r2, #24
 8104228:	4293      	cmp	r3, r2
 810422a:	d04b      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 810422c:	3218      	adds	r2, #24
 810422e:	4293      	cmp	r3, r2
 8104230:	d048      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104232:	3218      	adds	r2, #24
 8104234:	4293      	cmp	r3, r2
 8104236:	d045      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104238:	3218      	adds	r2, #24
 810423a:	4293      	cmp	r3, r2
 810423c:	d042      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 810423e:	3218      	adds	r2, #24
 8104240:	4293      	cmp	r3, r2
 8104242:	d03f      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104244:	3218      	adds	r2, #24
 8104246:	4293      	cmp	r3, r2
 8104248:	d03c      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 810424a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810424e:	4293      	cmp	r3, r2
 8104250:	d038      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104252:	3218      	adds	r2, #24
 8104254:	4293      	cmp	r3, r2
 8104256:	d035      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104258:	3218      	adds	r2, #24
 810425a:	4293      	cmp	r3, r2
 810425c:	d032      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 810425e:	3218      	adds	r2, #24
 8104260:	4293      	cmp	r3, r2
 8104262:	d02f      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104264:	3218      	adds	r2, #24
 8104266:	4293      	cmp	r3, r2
 8104268:	d02c      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 810426a:	3218      	adds	r2, #24
 810426c:	4293      	cmp	r3, r2
 810426e:	d029      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104270:	3218      	adds	r2, #24
 8104272:	4293      	cmp	r3, r2
 8104274:	d026      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
 8104276:	3218      	adds	r2, #24
 8104278:	4293      	cmp	r3, r2
 810427a:	d023      	beq.n	81042c4 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810427c:	681a      	ldr	r2, [r3, #0]
 810427e:	f022 020e 	bic.w	r2, r2, #14
 8104282:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8104284:	681a      	ldr	r2, [r3, #0]
 8104286:	f022 0201 	bic.w	r2, r2, #1
 810428a:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810428c:	4a23      	ldr	r2, [pc, #140]	; (810431c <HAL_DMA_Abort_IT+0x118>)
 810428e:	4293      	cmp	r3, r2
 8104290:	d121      	bne.n	81042d6 <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104292:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8104294:	6813      	ldr	r3, [r2, #0]
 8104296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810429a:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810429c:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 81042a0:	f003 021f 	and.w	r2, r3, #31
 81042a4:	2301      	movs	r3, #1
 81042a6:	4093      	lsls	r3, r2
 81042a8:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81042aa:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 81042ae:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 81042b0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 81042b2:	b32b      	cbz	r3, 8104300 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81042b4:	681a      	ldr	r2, [r3, #0]
 81042b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81042ba:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81042bc:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 81042c0:	605a      	str	r2, [r3, #4]
 81042c2:	e01d      	b.n	8104300 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 81042c4:	2204      	movs	r2, #4
 81042c6:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 81042ca:	681a      	ldr	r2, [r3, #0]
 81042cc:	f022 0201 	bic.w	r2, r2, #1
 81042d0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 81042d2:	2000      	movs	r0, #0
}
 81042d4:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81042d6:	4a12      	ldr	r2, [pc, #72]	; (8104320 <HAL_DMA_Abort_IT+0x11c>)
 81042d8:	4293      	cmp	r3, r2
 81042da:	d0da      	beq.n	8104292 <HAL_DMA_Abort_IT+0x8e>
 81042dc:	3214      	adds	r2, #20
 81042de:	4293      	cmp	r3, r2
 81042e0:	d0d7      	beq.n	8104292 <HAL_DMA_Abort_IT+0x8e>
 81042e2:	3214      	adds	r2, #20
 81042e4:	4293      	cmp	r3, r2
 81042e6:	d0d4      	beq.n	8104292 <HAL_DMA_Abort_IT+0x8e>
 81042e8:	3214      	adds	r2, #20
 81042ea:	4293      	cmp	r3, r2
 81042ec:	d0d1      	beq.n	8104292 <HAL_DMA_Abort_IT+0x8e>
 81042ee:	3214      	adds	r2, #20
 81042f0:	4293      	cmp	r3, r2
 81042f2:	d0ce      	beq.n	8104292 <HAL_DMA_Abort_IT+0x8e>
 81042f4:	3214      	adds	r2, #20
 81042f6:	4293      	cmp	r3, r2
 81042f8:	d0cb      	beq.n	8104292 <HAL_DMA_Abort_IT+0x8e>
 81042fa:	3214      	adds	r2, #20
 81042fc:	4293      	cmp	r3, r2
 81042fe:	d0c8      	beq.n	8104292 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8104300:	2301      	movs	r3, #1
 8104302:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8104306:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8104308:	2400      	movs	r4, #0
 810430a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 810430e:	b10b      	cbz	r3, 8104314 <HAL_DMA_Abort_IT+0x110>
        hdma->XferAbortCallback(hdma);
 8104310:	4798      	blx	r3
 8104312:	e7de      	b.n	81042d2 <HAL_DMA_Abort_IT+0xce>
  return HAL_OK;
 8104314:	4618      	mov	r0, r3
 8104316:	e7dd      	b.n	81042d4 <HAL_DMA_Abort_IT+0xd0>
 8104318:	40020010 	.word	0x40020010
 810431c:	58025408 	.word	0x58025408
 8104320:	5802541c 	.word	0x5802541c

08104324 <HAL_DMA_IRQHandler>:
{
 8104324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8104328:	2300      	movs	r3, #0
 810432a:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 810432c:	4b84      	ldr	r3, [pc, #528]	; (8104540 <HAL_DMA_IRQHandler+0x21c>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810432e:	4f85      	ldr	r7, [pc, #532]	; (8104544 <HAL_DMA_IRQHandler+0x220>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8104330:	681e      	ldr	r6, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104332:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104334:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104336:	42bb      	cmp	r3, r7
  tmpisr_dma  = regs_dma->ISR;
 8104338:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 810433c:	f8d5 c000 	ldr.w	ip, [r5]
{
 8104340:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104342:	d047      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104344:	4a80      	ldr	r2, [pc, #512]	; (8104548 <HAL_DMA_IRQHandler+0x224>)
 8104346:	4293      	cmp	r3, r2
 8104348:	d044      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 810434a:	3218      	adds	r2, #24
 810434c:	4293      	cmp	r3, r2
 810434e:	d041      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104350:	3218      	adds	r2, #24
 8104352:	4293      	cmp	r3, r2
 8104354:	d03e      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104356:	3218      	adds	r2, #24
 8104358:	4293      	cmp	r3, r2
 810435a:	d03b      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 810435c:	3218      	adds	r2, #24
 810435e:	4293      	cmp	r3, r2
 8104360:	d038      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104362:	3218      	adds	r2, #24
 8104364:	4293      	cmp	r3, r2
 8104366:	d035      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104368:	3218      	adds	r2, #24
 810436a:	4293      	cmp	r3, r2
 810436c:	d032      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 810436e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8104372:	4293      	cmp	r3, r2
 8104374:	d02e      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104376:	3218      	adds	r2, #24
 8104378:	4293      	cmp	r3, r2
 810437a:	d02b      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 810437c:	3218      	adds	r2, #24
 810437e:	4293      	cmp	r3, r2
 8104380:	d028      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104382:	3218      	adds	r2, #24
 8104384:	4293      	cmp	r3, r2
 8104386:	d025      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104388:	3218      	adds	r2, #24
 810438a:	4293      	cmp	r3, r2
 810438c:	d022      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 810438e:	3218      	adds	r2, #24
 8104390:	4293      	cmp	r3, r2
 8104392:	d01f      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 8104394:	3218      	adds	r2, #24
 8104396:	4293      	cmp	r3, r2
 8104398:	d01c      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
 810439a:	3218      	adds	r2, #24
 810439c:	4293      	cmp	r3, r2
 810439e:	d019      	beq.n	81043d4 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81043a0:	4a6a      	ldr	r2, [pc, #424]	; (810454c <HAL_DMA_IRQHandler+0x228>)
 81043a2:	4293      	cmp	r3, r2
 81043a4:	f040 8134 	bne.w	8104610 <HAL_DMA_IRQHandler+0x2ec>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81043a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81043aa:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81043ac:	f001 011f 	and.w	r1, r1, #31
 81043b0:	2004      	movs	r0, #4
 81043b2:	4088      	lsls	r0, r1
 81043b4:	ea10 0f0c 	tst.w	r0, ip
 81043b8:	f000 8151 	beq.w	810465e <HAL_DMA_IRQHandler+0x33a>
 81043bc:	0756      	lsls	r6, r2, #29
 81043be:	f140 814e 	bpl.w	810465e <HAL_DMA_IRQHandler+0x33a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043c2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81043c4:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043c6:	f140 8142 	bpl.w	810464e <HAL_DMA_IRQHandler+0x32a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81043ca:	03d3      	lsls	r3, r2, #15
 81043cc:	f100 8145 	bmi.w	810465a <HAL_DMA_IRQHandler+0x336>
          if(hdma->XferM1HalfCpltCallback != NULL)
 81043d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 81043d2:	e0a0      	b.n	8104516 <HAL_DMA_IRQHandler+0x1f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81043d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81043d6:	2108      	movs	r1, #8
 81043d8:	f002 021f 	and.w	r2, r2, #31
 81043dc:	4091      	lsls	r1, r2
 81043de:	ea11 0f08 	tst.w	r1, r8
 81043e2:	d00b      	beq.n	81043fc <HAL_DMA_IRQHandler+0xd8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81043e4:	6818      	ldr	r0, [r3, #0]
 81043e6:	0740      	lsls	r0, r0, #29
 81043e8:	d508      	bpl.n	81043fc <HAL_DMA_IRQHandler+0xd8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81043ea:	6818      	ldr	r0, [r3, #0]
 81043ec:	f020 0004 	bic.w	r0, r0, #4
 81043f0:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81043f2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81043f4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 81043f6:	f041 0101 	orr.w	r1, r1, #1
 81043fa:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81043fc:	fa28 f102 	lsr.w	r1, r8, r2
 8104400:	07c8      	lsls	r0, r1, #31
 8104402:	d509      	bpl.n	8104418 <HAL_DMA_IRQHandler+0xf4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8104404:	6959      	ldr	r1, [r3, #20]
 8104406:	0609      	lsls	r1, r1, #24
 8104408:	d506      	bpl.n	8104418 <HAL_DMA_IRQHandler+0xf4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810440a:	2101      	movs	r1, #1
 810440c:	4091      	lsls	r1, r2
 810440e:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8104410:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8104412:	f041 0102 	orr.w	r1, r1, #2
 8104416:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104418:	2104      	movs	r1, #4
 810441a:	4091      	lsls	r1, r2
 810441c:	ea11 0f08 	tst.w	r1, r8
 8104420:	d007      	beq.n	8104432 <HAL_DMA_IRQHandler+0x10e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8104422:	6818      	ldr	r0, [r3, #0]
 8104424:	0780      	lsls	r0, r0, #30
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104426:	bf41      	itttt	mi
 8104428:	60a9      	strmi	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 810442a:	6d61      	ldrmi	r1, [r4, #84]	; 0x54
 810442c:	f041 0104 	orrmi.w	r1, r1, #4
 8104430:	6561      	strmi	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104432:	2110      	movs	r1, #16
 8104434:	fa01 f202 	lsl.w	r2, r1, r2
 8104438:	ea12 0f08 	tst.w	r2, r8
 810443c:	d00f      	beq.n	810445e <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810443e:	6819      	ldr	r1, [r3, #0]
 8104440:	0709      	lsls	r1, r1, #28
 8104442:	d50c      	bpl.n	810445e <HAL_DMA_IRQHandler+0x13a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104444:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104446:	681a      	ldr	r2, [r3, #0]
 8104448:	0350      	lsls	r0, r2, #13
 810444a:	d56c      	bpl.n	8104526 <HAL_DMA_IRQHandler+0x202>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	0319      	lsls	r1, r3, #12
 8104450:	d401      	bmi.n	8104456 <HAL_DMA_IRQHandler+0x132>
          if(hdma->XferHalfCpltCallback != NULL)
 8104452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8104454:	e000      	b.n	8104458 <HAL_DMA_IRQHandler+0x134>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8104456:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8104458:	b10b      	cbz	r3, 810445e <HAL_DMA_IRQHandler+0x13a>
            hdma->XferHalfCpltCallback(hdma);
 810445a:	4620      	mov	r0, r4
 810445c:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810445e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8104460:	2120      	movs	r1, #32
 8104462:	f002 021f 	and.w	r2, r2, #31
 8104466:	4091      	lsls	r1, r2
 8104468:	ea11 0f08 	tst.w	r1, r8
 810446c:	d07a      	beq.n	8104564 <HAL_DMA_IRQHandler+0x240>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810446e:	6823      	ldr	r3, [r4, #0]
 8104470:	42bb      	cmp	r3, r7
 8104472:	d02d      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 8104474:	4834      	ldr	r0, [pc, #208]	; (8104548 <HAL_DMA_IRQHandler+0x224>)
 8104476:	4283      	cmp	r3, r0
 8104478:	d02a      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 810447a:	3018      	adds	r0, #24
 810447c:	4283      	cmp	r3, r0
 810447e:	d027      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 8104480:	3018      	adds	r0, #24
 8104482:	4283      	cmp	r3, r0
 8104484:	d024      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 8104486:	3018      	adds	r0, #24
 8104488:	4283      	cmp	r3, r0
 810448a:	d021      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 810448c:	3018      	adds	r0, #24
 810448e:	4283      	cmp	r3, r0
 8104490:	d01e      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 8104492:	3018      	adds	r0, #24
 8104494:	4283      	cmp	r3, r0
 8104496:	d01b      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 8104498:	3018      	adds	r0, #24
 810449a:	4283      	cmp	r3, r0
 810449c:	d018      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 810449e:	f500 7056 	add.w	r0, r0, #856	; 0x358
 81044a2:	4283      	cmp	r3, r0
 81044a4:	d014      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 81044a6:	3018      	adds	r0, #24
 81044a8:	4283      	cmp	r3, r0
 81044aa:	d011      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 81044ac:	3018      	adds	r0, #24
 81044ae:	4283      	cmp	r3, r0
 81044b0:	d00e      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 81044b2:	3018      	adds	r0, #24
 81044b4:	4283      	cmp	r3, r0
 81044b6:	d00b      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 81044b8:	3018      	adds	r0, #24
 81044ba:	4283      	cmp	r3, r0
 81044bc:	d008      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 81044be:	3018      	adds	r0, #24
 81044c0:	4283      	cmp	r3, r0
 81044c2:	d005      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 81044c4:	3018      	adds	r0, #24
 81044c6:	4283      	cmp	r3, r0
 81044c8:	d002      	beq.n	81044d0 <HAL_DMA_IRQHandler+0x1ac>
 81044ca:	3018      	adds	r0, #24
 81044cc:	4283      	cmp	r3, r0
 81044ce:	d132      	bne.n	8104536 <HAL_DMA_IRQHandler+0x212>
 81044d0:	6818      	ldr	r0, [r3, #0]
 81044d2:	f010 0f10 	tst.w	r0, #16
 81044d6:	d045      	beq.n	8104564 <HAL_DMA_IRQHandler+0x240>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81044d8:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 81044da:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 81044de:	2904      	cmp	r1, #4
 81044e0:	d136      	bne.n	8104550 <HAL_DMA_IRQHandler+0x22c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81044e2:	6819      	ldr	r1, [r3, #0]
 81044e4:	f021 0116 	bic.w	r1, r1, #22
 81044e8:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81044ea:	6959      	ldr	r1, [r3, #20]
 81044ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81044f0:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81044f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 81044f4:	b909      	cbnz	r1, 81044fa <HAL_DMA_IRQHandler+0x1d6>
 81044f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 81044f8:	b119      	cbz	r1, 8104502 <HAL_DMA_IRQHandler+0x1de>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81044fa:	6819      	ldr	r1, [r3, #0]
 81044fc:	f021 0108 	bic.w	r1, r1, #8
 8104500:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104502:	233f      	movs	r3, #63	; 0x3f
 8104504:	4093      	lsls	r3, r2
 8104506:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8104508:	2301      	movs	r3, #1
 810450a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 810450e:	2300      	movs	r3, #0
 8104510:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8104514:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8104516:	2b00      	cmp	r3, #0
 8104518:	f000 8096 	beq.w	8104648 <HAL_DMA_IRQHandler+0x324>
        hdma->XferErrorCallback(hdma);
 810451c:	4620      	mov	r0, r4
}
 810451e:	b002      	add	sp, #8
 8104520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8104524:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104526:	681a      	ldr	r2, [r3, #0]
 8104528:	05d2      	lsls	r2, r2, #23
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810452a:	bf5e      	ittt	pl
 810452c:	681a      	ldrpl	r2, [r3, #0]
 810452e:	f022 0208 	bicpl.w	r2, r2, #8
 8104532:	601a      	strpl	r2, [r3, #0]
 8104534:	e78d      	b.n	8104452 <HAL_DMA_IRQHandler+0x12e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104536:	6818      	ldr	r0, [r3, #0]
 8104538:	f010 0f02 	tst.w	r0, #2
 810453c:	e7cb      	b.n	81044d6 <HAL_DMA_IRQHandler+0x1b2>
 810453e:	bf00      	nop
 8104540:	1000004c 	.word	0x1000004c
 8104544:	40020010 	.word	0x40020010
 8104548:	40020028 	.word	0x40020028
 810454c:	58025408 	.word	0x58025408
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104550:	681a      	ldr	r2, [r3, #0]
 8104552:	0355      	lsls	r5, r2, #13
 8104554:	d54d      	bpl.n	81045f2 <HAL_DMA_IRQHandler+0x2ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	0318      	lsls	r0, r3, #12
 810455a:	d457      	bmi.n	810460c <HAL_DMA_IRQHandler+0x2e8>
            if(hdma->XferM1CpltCallback != NULL)
 810455c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 810455e:	b10b      	cbz	r3, 8104564 <HAL_DMA_IRQHandler+0x240>
            hdma->XferCpltCallback(hdma);
 8104560:	4620      	mov	r0, r4
 8104562:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104564:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8104566:	2b00      	cmp	r3, #0
 8104568:	d06e      	beq.n	8104648 <HAL_DMA_IRQHandler+0x324>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810456a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 810456c:	07d9      	lsls	r1, r3, #31
 810456e:	d53e      	bpl.n	81045ee <HAL_DMA_IRQHandler+0x2ca>
        hdma->State = HAL_DMA_STATE_ABORT;
 8104570:	2304      	movs	r3, #4
 8104572:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8104576:	6823      	ldr	r3, [r4, #0]
 8104578:	42bb      	cmp	r3, r7
 810457a:	d01e      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 810457c:	4a4e      	ldr	r2, [pc, #312]	; (81046b8 <HAL_DMA_IRQHandler+0x394>)
 810457e:	4293      	cmp	r3, r2
 8104580:	d01b      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 8104582:	3218      	adds	r2, #24
 8104584:	4293      	cmp	r3, r2
 8104586:	d018      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 8104588:	3218      	adds	r2, #24
 810458a:	4293      	cmp	r3, r2
 810458c:	d015      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 810458e:	3218      	adds	r2, #24
 8104590:	4293      	cmp	r3, r2
 8104592:	d012      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 8104594:	3218      	adds	r2, #24
 8104596:	4293      	cmp	r3, r2
 8104598:	d00f      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 810459a:	3218      	adds	r2, #24
 810459c:	4293      	cmp	r3, r2
 810459e:	d00c      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 81045a0:	3218      	adds	r2, #24
 81045a2:	4293      	cmp	r3, r2
 81045a4:	d009      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 81045a6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81045aa:	4293      	cmp	r3, r2
 81045ac:	d005      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 81045ae:	3218      	adds	r2, #24
 81045b0:	4293      	cmp	r3, r2
 81045b2:	d002      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 81045b4:	3218      	adds	r2, #24
 81045b6:	4293      	cmp	r3, r2
 81045b8:	d0ff      	beq.n	81045ba <HAL_DMA_IRQHandler+0x296>
 81045ba:	681a      	ldr	r2, [r3, #0]
 81045bc:	f022 0201 	bic.w	r2, r2, #1
 81045c0:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 81045c2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 81045c6:	fbb6 f6f2 	udiv	r6, r6, r2
          if (++count > timeout)
 81045ca:	9a01      	ldr	r2, [sp, #4]
 81045cc:	3201      	adds	r2, #1
 81045ce:	42b2      	cmp	r2, r6
 81045d0:	9201      	str	r2, [sp, #4]
 81045d2:	d802      	bhi.n	81045da <HAL_DMA_IRQHandler+0x2b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81045d4:	681a      	ldr	r2, [r3, #0]
 81045d6:	07d2      	lsls	r2, r2, #31
 81045d8:	d4f7      	bmi.n	81045ca <HAL_DMA_IRQHandler+0x2a6>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 81045de:	bf4c      	ite	mi
 81045e0:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 81045e2:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 81045e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 81045e8:	2300      	movs	r3, #0
 81045ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 81045ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 81045f0:	e791      	b.n	8104516 <HAL_DMA_IRQHandler+0x1f2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81045f2:	681a      	ldr	r2, [r3, #0]
 81045f4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 81045f8:	d108      	bne.n	810460c <HAL_DMA_IRQHandler+0x2e8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81045fa:	6819      	ldr	r1, [r3, #0]
 81045fc:	f021 0110 	bic.w	r1, r1, #16
 8104600:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8104602:	2301      	movs	r3, #1
 8104604:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8104608:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 810460c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810460e:	e7a6      	b.n	810455e <HAL_DMA_IRQHandler+0x23a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8104610:	4a2a      	ldr	r2, [pc, #168]	; (81046bc <HAL_DMA_IRQHandler+0x398>)
 8104612:	4293      	cmp	r3, r2
 8104614:	f43f aec8 	beq.w	81043a8 <HAL_DMA_IRQHandler+0x84>
 8104618:	3214      	adds	r2, #20
 810461a:	4293      	cmp	r3, r2
 810461c:	f43f aec4 	beq.w	81043a8 <HAL_DMA_IRQHandler+0x84>
 8104620:	3214      	adds	r2, #20
 8104622:	4293      	cmp	r3, r2
 8104624:	f43f aec0 	beq.w	81043a8 <HAL_DMA_IRQHandler+0x84>
 8104628:	3214      	adds	r2, #20
 810462a:	4293      	cmp	r3, r2
 810462c:	f43f aebc 	beq.w	81043a8 <HAL_DMA_IRQHandler+0x84>
 8104630:	3214      	adds	r2, #20
 8104632:	4293      	cmp	r3, r2
 8104634:	f43f aeb8 	beq.w	81043a8 <HAL_DMA_IRQHandler+0x84>
 8104638:	3214      	adds	r2, #20
 810463a:	4293      	cmp	r3, r2
 810463c:	f43f aeb4 	beq.w	81043a8 <HAL_DMA_IRQHandler+0x84>
 8104640:	3214      	adds	r2, #20
 8104642:	4293      	cmp	r3, r2
 8104644:	f43f aeb0 	beq.w	81043a8 <HAL_DMA_IRQHandler+0x84>
}
 8104648:	b002      	add	sp, #8
 810464a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810464e:	0697      	lsls	r7, r2, #26
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8104650:	bf5e      	ittt	pl
 8104652:	681a      	ldrpl	r2, [r3, #0]
 8104654:	f022 0204 	bicpl.w	r2, r2, #4
 8104658:	601a      	strpl	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 810465a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810465c:	e75b      	b.n	8104516 <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 810465e:	2002      	movs	r0, #2
 8104660:	4088      	lsls	r0, r1
 8104662:	ea10 0f0c 	tst.w	r0, ip
 8104666:	d016      	beq.n	8104696 <HAL_DMA_IRQHandler+0x372>
 8104668:	0796      	lsls	r6, r2, #30
 810466a:	d514      	bpl.n	8104696 <HAL_DMA_IRQHandler+0x372>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810466c:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810466e:	0410      	lsls	r0, r2, #16
 8104670:	d503      	bpl.n	810467a <HAL_DMA_IRQHandler+0x356>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104672:	03d1      	lsls	r1, r2, #15
 8104674:	d40d      	bmi.n	8104692 <HAL_DMA_IRQHandler+0x36e>
          if(hdma->XferM1CpltCallback != NULL)
 8104676:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8104678:	e74d      	b.n	8104516 <HAL_DMA_IRQHandler+0x1f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810467a:	f012 0220 	ands.w	r2, r2, #32
 810467e:	d108      	bne.n	8104692 <HAL_DMA_IRQHandler+0x36e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104680:	6819      	ldr	r1, [r3, #0]
 8104682:	f021 010a 	bic.w	r1, r1, #10
 8104686:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8104688:	2301      	movs	r3, #1
 810468a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 810468e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8104692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8104694:	e73f      	b.n	8104516 <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8104696:	2008      	movs	r0, #8
 8104698:	4088      	lsls	r0, r1
 810469a:	ea10 0f0c 	tst.w	r0, ip
 810469e:	d0d3      	beq.n	8104648 <HAL_DMA_IRQHandler+0x324>
 81046a0:	0712      	lsls	r2, r2, #28
 81046a2:	d5d1      	bpl.n	8104648 <HAL_DMA_IRQHandler+0x324>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81046a4:	681a      	ldr	r2, [r3, #0]
 81046a6:	f022 020e 	bic.w	r2, r2, #14
 81046aa:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81046ac:	2301      	movs	r3, #1
 81046ae:	fa03 f101 	lsl.w	r1, r3, r1
 81046b2:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81046b4:	6563      	str	r3, [r4, #84]	; 0x54
 81046b6:	e795      	b.n	81045e4 <HAL_DMA_IRQHandler+0x2c0>
 81046b8:	40020028 	.word	0x40020028
 81046bc:	5802541c 	.word	0x5802541c

081046c0 <HAL_DMA_RegisterCallback>:
{
 81046c0:	b510      	push	{r4, lr}
  if(hdma == NULL)
 81046c2:	b318      	cbz	r0, 810470c <HAL_DMA_RegisterCallback+0x4c>
  __HAL_LOCK(hdma);
 81046c4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 81046c8:	2b01      	cmp	r3, #1
 81046ca:	d021      	beq.n	8104710 <HAL_DMA_RegisterCallback+0x50>
  if(HAL_DMA_STATE_READY == hdma->State)
 81046cc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 81046d0:	2c01      	cmp	r4, #1
 81046d2:	b2e3      	uxtb	r3, r4
 81046d4:	d118      	bne.n	8104708 <HAL_DMA_RegisterCallback+0x48>
    switch (CallbackID)
 81046d6:	2905      	cmp	r1, #5
 81046d8:	d806      	bhi.n	81046e8 <HAL_DMA_RegisterCallback+0x28>
 81046da:	e8df f001 	tbb	[pc, r1]
 81046de:	0a03      	.short	0x0a03
 81046e0:	13110f0d 	.word	0x13110f0d
      hdma->XferCpltCallback = pCallback;
 81046e4:	63c2      	str	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 81046e6:	460b      	mov	r3, r1
  __HAL_UNLOCK(hdma);
 81046e8:	2200      	movs	r2, #0
 81046ea:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 81046ee:	4618      	mov	r0, r3
 81046f0:	bd10      	pop	{r4, pc}
      hdma->XferHalfCpltCallback = pCallback;
 81046f2:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 81046f4:	2300      	movs	r3, #0
      break;
 81046f6:	e7f7      	b.n	81046e8 <HAL_DMA_RegisterCallback+0x28>
      hdma->XferM1CpltCallback = pCallback;
 81046f8:	6442      	str	r2, [r0, #68]	; 0x44
      break;
 81046fa:	e7fb      	b.n	81046f4 <HAL_DMA_RegisterCallback+0x34>
      hdma->XferM1HalfCpltCallback = pCallback;
 81046fc:	6482      	str	r2, [r0, #72]	; 0x48
      break;
 81046fe:	e7f9      	b.n	81046f4 <HAL_DMA_RegisterCallback+0x34>
      hdma->XferErrorCallback = pCallback;
 8104700:	64c2      	str	r2, [r0, #76]	; 0x4c
      break;
 8104702:	e7f7      	b.n	81046f4 <HAL_DMA_RegisterCallback+0x34>
      hdma->XferAbortCallback = pCallback;
 8104704:	6502      	str	r2, [r0, #80]	; 0x50
 8104706:	e7f5      	b.n	81046f4 <HAL_DMA_RegisterCallback+0x34>
    status =  HAL_ERROR;
 8104708:	2301      	movs	r3, #1
 810470a:	e7ed      	b.n	81046e8 <HAL_DMA_RegisterCallback+0x28>
    return HAL_ERROR;
 810470c:	2301      	movs	r3, #1
 810470e:	e7ee      	b.n	81046ee <HAL_DMA_RegisterCallback+0x2e>
  __HAL_LOCK(hdma);
 8104710:	2302      	movs	r3, #2
 8104712:	e7ec      	b.n	81046ee <HAL_DMA_RegisterCallback+0x2e>

08104714 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104718:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 81048e0 <HAL_GPIO_Init+0x1cc>
  uint32_t position = 0x00U;
 810471c:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810471e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104722:	680a      	ldr	r2, [r1, #0]
 8104724:	fa32 f503 	lsrs.w	r5, r2, r3
 8104728:	d102      	bne.n	8104730 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 810472a:	b003      	add	sp, #12
 810472c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104730:	f04f 0e01 	mov.w	lr, #1
 8104734:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8104738:	ea1e 0202 	ands.w	r2, lr, r2
 810473c:	f000 80ba 	beq.w	81048b4 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104740:	684e      	ldr	r6, [r1, #4]
 8104742:	f006 0503 	and.w	r5, r6, #3
 8104746:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810474a:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810474e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104750:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104754:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104756:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810475a:	d834      	bhi.n	81047c6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 810475c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810475e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104762:	68cf      	ldr	r7, [r1, #12]
 8104764:	fa07 f708 	lsl.w	r7, r7, r8
 8104768:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 810476c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 810476e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104770:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104774:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8104778:	409f      	lsls	r7, r3
 810477a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 810477e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8104780:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104782:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104786:	688f      	ldr	r7, [r1, #8]
 8104788:	fa07 f708 	lsl.w	r7, r7, r8
 810478c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104790:	2d02      	cmp	r5, #2
      GPIOx->PUPDR = temp;
 8104792:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104794:	d119      	bne.n	81047ca <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8104796:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 810479a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810479e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 81047a2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81047a6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 81047aa:	f04f 0e0f 	mov.w	lr, #15
 81047ae:	fa0e fe0b 	lsl.w	lr, lr, fp
 81047b2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81047b6:	690f      	ldr	r7, [r1, #16]
 81047b8:	fa07 f70b 	lsl.w	r7, r7, fp
 81047bc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 81047c0:	f8ca 7020 	str.w	r7, [sl, #32]
 81047c4:	e001      	b.n	81047ca <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81047c6:	2d03      	cmp	r5, #3
 81047c8:	d1da      	bne.n	8104780 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 81047ca:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81047cc:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81047d0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81047d4:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81047d6:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 81047da:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81047dc:	d06a      	beq.n	81048b4 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81047de:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 81047e2:	f045 0502 	orr.w	r5, r5, #2
 81047e6:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 81047ea:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 81047ee:	f023 0703 	bic.w	r7, r3, #3
 81047f2:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
 81047f6:	f005 0502 	and.w	r5, r5, #2
 81047fa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 81047fe:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104800:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104804:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8104806:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810480a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 810480e:	250f      	movs	r5, #15
 8104810:	fa05 f50c 	lsl.w	r5, r5, ip
 8104814:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104818:	4d30      	ldr	r5, [pc, #192]	; (81048dc <HAL_GPIO_Init+0x1c8>)
 810481a:	42a8      	cmp	r0, r5
 810481c:	d04c      	beq.n	81048b8 <HAL_GPIO_Init+0x1a4>
 810481e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104822:	42a8      	cmp	r0, r5
 8104824:	d04a      	beq.n	81048bc <HAL_GPIO_Init+0x1a8>
 8104826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810482a:	42a8      	cmp	r0, r5
 810482c:	d048      	beq.n	81048c0 <HAL_GPIO_Init+0x1ac>
 810482e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104832:	42a8      	cmp	r0, r5
 8104834:	d046      	beq.n	81048c4 <HAL_GPIO_Init+0x1b0>
 8104836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810483a:	42a8      	cmp	r0, r5
 810483c:	d044      	beq.n	81048c8 <HAL_GPIO_Init+0x1b4>
 810483e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104842:	42a8      	cmp	r0, r5
 8104844:	d042      	beq.n	81048cc <HAL_GPIO_Init+0x1b8>
 8104846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810484a:	42a8      	cmp	r0, r5
 810484c:	d040      	beq.n	81048d0 <HAL_GPIO_Init+0x1bc>
 810484e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104852:	42a8      	cmp	r0, r5
 8104854:	d03e      	beq.n	81048d4 <HAL_GPIO_Init+0x1c0>
 8104856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810485a:	42a8      	cmp	r0, r5
 810485c:	d03c      	beq.n	81048d8 <HAL_GPIO_Init+0x1c4>
 810485e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104862:	42a8      	cmp	r0, r5
 8104864:	bf0c      	ite	eq
 8104866:	2509      	moveq	r5, #9
 8104868:	250a      	movne	r5, #10
 810486a:	fa05 f50c 	lsl.w	r5, r5, ip
 810486e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104872:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8104874:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8104876:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104878:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 810487c:	bf0c      	ite	eq
 810487e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104880:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8104882:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8104884:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104886:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 810488a:	bf0c      	ite	eq
 810488c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 810488e:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8104890:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8104892:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104896:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 810489a:	bf0c      	ite	eq
 810489c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 810489e:	4315      	orrne	r5, r2
        EXTI_CurrentCPU->EMR1 = temp;
 81048a0:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
        temp = EXTI_CurrentCPU->IMR1;
 81048a4:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81048a8:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 81048aa:	bf54      	ite	pl
 81048ac:	403d      	andpl	r5, r7
          temp |= iocurrent;
 81048ae:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 81048b0:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    position++;
 81048b4:	3301      	adds	r3, #1
 81048b6:	e734      	b.n	8104722 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81048b8:	2500      	movs	r5, #0
 81048ba:	e7d6      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048bc:	2501      	movs	r5, #1
 81048be:	e7d4      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048c0:	2502      	movs	r5, #2
 81048c2:	e7d2      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048c4:	2503      	movs	r5, #3
 81048c6:	e7d0      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048c8:	2504      	movs	r5, #4
 81048ca:	e7ce      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048cc:	2505      	movs	r5, #5
 81048ce:	e7cc      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048d0:	2506      	movs	r5, #6
 81048d2:	e7ca      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048d4:	2507      	movs	r5, #7
 81048d6:	e7c8      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048d8:	2508      	movs	r5, #8
 81048da:	e7c6      	b.n	810486a <HAL_GPIO_Init+0x156>
 81048dc:	58020000 	.word	0x58020000
 81048e0:	58024400 	.word	0x58024400

081048e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 81048e4:	6903      	ldr	r3, [r0, #16]
 81048e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 81048e8:	bf14      	ite	ne
 81048ea:	2001      	movne	r0, #1
 81048ec:	2000      	moveq	r0, #0
 81048ee:	4770      	bx	lr

081048f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81048f0:	b10a      	cbz	r2, 81048f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81048f2:	6181      	str	r1, [r0, #24]
  }
}
 81048f4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81048f6:	0409      	lsls	r1, r1, #16
 81048f8:	e7fb      	b.n	81048f2 <HAL_GPIO_WritePin+0x2>
	...

081048fc <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81048fc:	4a02      	ldr	r2, [pc, #8]	; (8104908 <HAL_HSEM_ActivateNotification+0xc>)
 81048fe:	6913      	ldr	r3, [r2, #16]
 8104900:	4318      	orrs	r0, r3
 8104902:	6110      	str	r0, [r2, #16]
#endif
}
 8104904:	4770      	bx	lr
 8104906:	bf00      	nop
 8104908:	58026500 	.word	0x58026500

0810490c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810490c:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810490e:	4c1e      	ldr	r4, [pc, #120]	; (8104988 <HAL_PWREx_EnterSTOPMode+0x7c>)
 8104910:	6823      	ldr	r3, [r4, #0]
 8104912:	f023 0301 	bic.w	r3, r3, #1
 8104916:	4318      	orrs	r0, r3
{
 8104918:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810491a:	6020      	str	r0, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810491c:	b9c2      	cbnz	r2, 8104950 <HAL_PWREx_EnterSTOPMode+0x44>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810491e:	f7fe fe75 	bl	810360c <HAL_GetCurrentCPUID>
 8104922:	2803      	cmp	r0, #3
 8104924:	d113      	bne.n	810494e <HAL_PWREx_EnterSTOPMode+0x42>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104926:	6923      	ldr	r3, [r4, #16]
 8104928:	f023 0301 	bic.w	r3, r3, #1
 810492c:	6123      	str	r3, [r4, #16]

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810492e:	4b17      	ldr	r3, [pc, #92]	; (810498c <HAL_PWREx_EnterSTOPMode+0x80>)
 8104930:	691a      	ldr	r2, [r3, #16]
 8104932:	f042 0204 	orr.w	r2, r2, #4
 8104936:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104938:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 810493c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104940:	2d01      	cmp	r5, #1
 8104942:	d110      	bne.n	8104966 <HAL_PWREx_EnterSTOPMode+0x5a>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104944:	bf30      	wfi
      /* Request Wait For Event */
      __WFE ();
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104946:	691a      	ldr	r2, [r3, #16]
 8104948:	f022 0204 	bic.w	r2, r2, #4
 810494c:	611a      	str	r2, [r3, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810494e:	bd38      	pop	{r3, r4, r5, pc}
  else if (Domain == PWR_D2_DOMAIN)
 8104950:	2a01      	cmp	r2, #1
 8104952:	d10a      	bne.n	810496a <HAL_PWREx_EnterSTOPMode+0x5e>
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104954:	f7fe fe5a 	bl	810360c <HAL_GetCurrentCPUID>
 8104958:	2801      	cmp	r0, #1
 810495a:	d1f8      	bne.n	810494e <HAL_PWREx_EnterSTOPMode+0x42>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810495c:	6963      	ldr	r3, [r4, #20]
 810495e:	f023 0302 	bic.w	r3, r3, #2
 8104962:	6163      	str	r3, [r4, #20]
 8104964:	e7e3      	b.n	810492e <HAL_PWREx_EnterSTOPMode+0x22>
      __WFE ();
 8104966:	bf20      	wfe
 8104968:	e7ed      	b.n	8104946 <HAL_PWREx_EnterSTOPMode+0x3a>
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810496a:	f7fe fe4f 	bl	810360c <HAL_GetCurrentCPUID>
 810496e:	2803      	cmp	r0, #3
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104970:	bf0b      	itete	eq
 8104972:	6923      	ldreq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104974:	6963      	ldrne	r3, [r4, #20]
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104976:	f023 0304 	biceq.w	r3, r3, #4
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810497a:	f023 0304 	bicne.w	r3, r3, #4
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810497e:	bf0c      	ite	eq
 8104980:	6123      	streq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104982:	6163      	strne	r3, [r4, #20]
 8104984:	e7e3      	b.n	810494e <HAL_PWREx_EnterSTOPMode+0x42>
 8104986:	bf00      	nop
 8104988:	58024800 	.word	0x58024800
 810498c:	e000ed00 	.word	0xe000ed00

08104990 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104990:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104992:	f7fe fe3b 	bl	810360c <HAL_GetCurrentCPUID>
 8104996:	2803      	cmp	r0, #3
 8104998:	d101      	bne.n	810499e <HAL_PWREx_ClearPendingEvent+0xe>
    __WFE ();
  }
  else
  {
    __SEV ();
    __WFE ();
 810499a:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810499c:	bd08      	pop	{r3, pc}
    __SEV ();
 810499e:	bf40      	sev
 81049a0:	e7fb      	b.n	810499a <HAL_PWREx_ClearPendingEvent+0xa>
	...

081049a4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81049a4:	4b49      	ldr	r3, [pc, #292]	; (8104acc <HAL_RCC_GetSysClockFreq+0x128>)
 81049a6:	691a      	ldr	r2, [r3, #16]
 81049a8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 81049ac:	2a10      	cmp	r2, #16
{
 81049ae:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 81049b0:	f000 8088 	beq.w	8104ac4 <HAL_RCC_GetSysClockFreq+0x120>
 81049b4:	2a18      	cmp	r2, #24
 81049b6:	d00c      	beq.n	81049d2 <HAL_RCC_GetSysClockFreq+0x2e>
 81049b8:	2a00      	cmp	r2, #0
 81049ba:	f040 8085 	bne.w	8104ac8 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81049be:	681a      	ldr	r2, [r3, #0]
 81049c0:	4843      	ldr	r0, [pc, #268]	; (8104ad0 <HAL_RCC_GetSysClockFreq+0x12c>)
 81049c2:	f012 0f20 	tst.w	r2, #32
 81049c6:	d003      	beq.n	81049d0 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81049ce:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 81049d0:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81049d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81049d4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81049d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 81049da:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81049de:	f3c5 1005 	ubfx	r0, r5, #4, #6
      if (pllm != 0U)
 81049e2:	d0f5      	beq.n	81049d0 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049e4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81049e8:	f004 0401 	and.w	r4, r4, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049ec:	4362      	muls	r2, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81049ee:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049f2:	ee06 2a90 	vmov	s13, r2
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81049f6:	f001 0103 	and.w	r1, r1, #3
 81049fa:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81049fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104a00:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8104a04:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8104a08:	d04e      	beq.n	8104aa8 <HAL_RCC_GetSysClockFreq+0x104>
 8104a0a:	2902      	cmp	r1, #2
 8104a0c:	d03e      	beq.n	8104a8c <HAL_RCC_GetSysClockFreq+0xe8>
 8104a0e:	2900      	cmp	r1, #0
 8104a10:	d14a      	bne.n	8104aa8 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a12:	681a      	ldr	r2, [r3, #0]
 8104a14:	0692      	lsls	r2, r2, #26
 8104a16:	d527      	bpl.n	8104a68 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a18:	6819      	ldr	r1, [r3, #0]
 8104a1a:	4a2d      	ldr	r2, [pc, #180]	; (8104ad0 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a1e:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8104a22:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a24:	ee07 2a90 	vmov	s15, r2
 8104a28:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8104a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a30:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8104a34:	ee07 3a10 	vmov	s14, r3
 8104a38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8104a3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8104a40:	ee37 7a06 	vadd.f32	s14, s14, s12
 8104a44:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104a48:	4b20      	ldr	r3, [pc, #128]	; (8104acc <HAL_RCC_GetSysClockFreq+0x128>)
 8104a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a4c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8104a50:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104a52:	ee07 3a10 	vmov	s14, r3
 8104a56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8104a5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8104a5e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8104a62:	ee17 0a90 	vmov	r0, s15
 8104a66:	e7b3      	b.n	81049d0 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a6e:	ee07 3a90 	vmov	s15, r3
 8104a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a7a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104a7e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8104ad4 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a82:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8104a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8104a8a:	e7dd      	b.n	8104a48 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a92:	ee07 3a90 	vmov	s15, r3
 8104a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a9e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104aa2:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8104ad8 <HAL_RCC_GetSysClockFreq+0x134>
 8104aa6:	e7ec      	b.n	8104a82 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104aae:	ee07 3a90 	vmov	s15, r3
 8104ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aba:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104abe:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8104adc <HAL_RCC_GetSysClockFreq+0x138>
 8104ac2:	e7de      	b.n	8104a82 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104ac4:	4806      	ldr	r0, [pc, #24]	; (8104ae0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8104ac6:	e783      	b.n	81049d0 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8104ac8:	4806      	ldr	r0, [pc, #24]	; (8104ae4 <HAL_RCC_GetSysClockFreq+0x140>)
 8104aca:	e781      	b.n	81049d0 <HAL_RCC_GetSysClockFreq+0x2c>
 8104acc:	58024400 	.word	0x58024400
 8104ad0:	03d09000 	.word	0x03d09000
 8104ad4:	4c742400 	.word	0x4c742400
 8104ad8:	4bbebc20 	.word	0x4bbebc20
 8104adc:	4a742400 	.word	0x4a742400
 8104ae0:	017d7840 	.word	0x017d7840
 8104ae4:	003d0900 	.word	0x003d0900

08104ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104ae8:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104aea:	f7ff ff5b 	bl	81049a4 <HAL_RCC_GetSysClockFreq>
 8104aee:	4b0a      	ldr	r3, [pc, #40]	; (8104b18 <HAL_RCC_GetHCLKFreq+0x30>)
 8104af0:	490a      	ldr	r1, [pc, #40]	; (8104b1c <HAL_RCC_GetHCLKFreq+0x34>)
 8104af2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104af4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104af6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104afa:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104afe:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104b00:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104b02:	f002 021f 	and.w	r2, r2, #31
 8104b06:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104b08:	f003 031f 	and.w	r3, r3, #31
 8104b0c:	40d8      	lsrs	r0, r3
 8104b0e:	4b04      	ldr	r3, [pc, #16]	; (8104b20 <HAL_RCC_GetHCLKFreq+0x38>)
 8104b10:	6018      	str	r0, [r3, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104b12:	4b04      	ldr	r3, [pc, #16]	; (8104b24 <HAL_RCC_GetHCLKFreq+0x3c>)
 8104b14:	6018      	str	r0, [r3, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8104b16:	bd08      	pop	{r3, pc}
 8104b18:	58024400 	.word	0x58024400
 8104b1c:	081105d0 	.word	0x081105d0
 8104b20:	10000050 	.word	0x10000050
 8104b24:	1000004c 	.word	0x1000004c

08104b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104b28:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104b2a:	f7ff ffdd 	bl	8104ae8 <HAL_RCC_GetHCLKFreq>
 8104b2e:	4b05      	ldr	r3, [pc, #20]	; (8104b44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8104b30:	4a05      	ldr	r2, [pc, #20]	; (8104b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8104b32:	69db      	ldr	r3, [r3, #28]
 8104b34:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8104b38:	5cd3      	ldrb	r3, [r2, r3]
 8104b3a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104b3e:	40d8      	lsrs	r0, r3
 8104b40:	bd08      	pop	{r3, pc}
 8104b42:	bf00      	nop
 8104b44:	58024400 	.word	0x58024400
 8104b48:	081105d0 	.word	0x081105d0

08104b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104b4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104b4e:	f7ff ffcb 	bl	8104ae8 <HAL_RCC_GetHCLKFreq>
 8104b52:	4b05      	ldr	r3, [pc, #20]	; (8104b68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8104b54:	4a05      	ldr	r2, [pc, #20]	; (8104b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8104b56:	69db      	ldr	r3, [r3, #28]
 8104b58:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8104b5c:	5cd3      	ldrb	r3, [r2, r3]
 8104b5e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104b62:	40d8      	lsrs	r0, r3
 8104b64:	bd08      	pop	{r3, pc}
 8104b66:	bf00      	nop
 8104b68:	58024400 	.word	0x58024400
 8104b6c:	081105d0 	.word	0x081105d0

08104b70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104b72:	4c3a      	ldr	r4, [pc, #232]	; (8104c5c <RCCEx_PLL2_Config+0xec>)
 8104b74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104b76:	f003 0303 	and.w	r3, r3, #3
 8104b7a:	2b03      	cmp	r3, #3
{
 8104b7c:	4606      	mov	r6, r0
 8104b7e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104b80:	d069      	beq.n	8104c56 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104b82:	6823      	ldr	r3, [r4, #0]
 8104b84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104b88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104b8a:	f7fe f871 	bl	8102c70 <HAL_GetTick>
 8104b8e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104b90:	6823      	ldr	r3, [r4, #0]
 8104b92:	011a      	lsls	r2, r3, #4
 8104b94:	d44b      	bmi.n	8104c2e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104b98:	6832      	ldr	r2, [r6, #0]
 8104b9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8104b9e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8104ba2:	62a3      	str	r3, [r4, #40]	; 0x28
 8104ba4:	68b3      	ldr	r3, [r6, #8]
 8104ba6:	68f2      	ldr	r2, [r6, #12]
 8104ba8:	3b01      	subs	r3, #1
 8104baa:	3a01      	subs	r2, #1
 8104bac:	025b      	lsls	r3, r3, #9
 8104bae:	0412      	lsls	r2, r2, #16
 8104bb0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8104bb4:	b29b      	uxth	r3, r3
 8104bb6:	4313      	orrs	r3, r2
 8104bb8:	6872      	ldr	r2, [r6, #4]
 8104bba:	3a01      	subs	r2, #1
 8104bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104bc0:	4313      	orrs	r3, r2
 8104bc2:	6932      	ldr	r2, [r6, #16]
 8104bc4:	3a01      	subs	r2, #1
 8104bc6:	0612      	lsls	r2, r2, #24
 8104bc8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8104bcc:	4313      	orrs	r3, r2
 8104bce:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104bd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104bd2:	6972      	ldr	r2, [r6, #20]
 8104bd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8104bd8:	4313      	orrs	r3, r2
 8104bda:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104bdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104bde:	69b2      	ldr	r2, [r6, #24]
 8104be0:	f023 0320 	bic.w	r3, r3, #32
 8104be4:	4313      	orrs	r3, r2
 8104be6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104bea:	f023 0310 	bic.w	r3, r3, #16
 8104bee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104bf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8104bf2:	69f2      	ldr	r2, [r6, #28]
 8104bf4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104bf8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104bfc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8104c00:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104c02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104c04:	f043 0310 	orr.w	r3, r3, #16
 8104c08:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8104c0c:	b9b5      	cbnz	r5, 8104c3c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104c12:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104c14:	4c11      	ldr	r4, [pc, #68]	; (8104c5c <RCCEx_PLL2_Config+0xec>)
 8104c16:	6823      	ldr	r3, [r4, #0]
 8104c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104c1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c1e:	f7fe f827 	bl	8102c70 <HAL_GetTick>
 8104c22:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104c24:	6823      	ldr	r3, [r4, #0]
 8104c26:	011b      	lsls	r3, r3, #4
 8104c28:	d50f      	bpl.n	8104c4a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8104c2a:	2000      	movs	r0, #0
 8104c2c:	e005      	b.n	8104c3a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104c2e:	f7fe f81f 	bl	8102c70 <HAL_GetTick>
 8104c32:	1bc0      	subs	r0, r0, r7
 8104c34:	2802      	cmp	r0, #2
 8104c36:	d9ab      	bls.n	8104b90 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8104c38:	2003      	movs	r0, #3
}
 8104c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8104c3c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104c3e:	bf0c      	ite	eq
 8104c40:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104c44:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8104c48:	e7e3      	b.n	8104c12 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104c4a:	f7fe f811 	bl	8102c70 <HAL_GetTick>
 8104c4e:	1b40      	subs	r0, r0, r5
 8104c50:	2802      	cmp	r0, #2
 8104c52:	d9e7      	bls.n	8104c24 <RCCEx_PLL2_Config+0xb4>
 8104c54:	e7f0      	b.n	8104c38 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8104c56:	2001      	movs	r0, #1
 8104c58:	e7ef      	b.n	8104c3a <RCCEx_PLL2_Config+0xca>
 8104c5a:	bf00      	nop
 8104c5c:	58024400 	.word	0x58024400

08104c60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104c62:	4c3a      	ldr	r4, [pc, #232]	; (8104d4c <RCCEx_PLL3_Config+0xec>)
 8104c64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104c66:	f003 0303 	and.w	r3, r3, #3
 8104c6a:	2b03      	cmp	r3, #3
{
 8104c6c:	4606      	mov	r6, r0
 8104c6e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104c70:	d069      	beq.n	8104d46 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104c72:	6823      	ldr	r3, [r4, #0]
 8104c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104c78:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c7a:	f7fd fff9 	bl	8102c70 <HAL_GetTick>
 8104c7e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104c80:	6823      	ldr	r3, [r4, #0]
 8104c82:	009a      	lsls	r2, r3, #2
 8104c84:	d44b      	bmi.n	8104d1e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104c86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104c88:	6832      	ldr	r2, [r6, #0]
 8104c8a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8104c8e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8104c92:	62a3      	str	r3, [r4, #40]	; 0x28
 8104c94:	68b3      	ldr	r3, [r6, #8]
 8104c96:	68f2      	ldr	r2, [r6, #12]
 8104c98:	3b01      	subs	r3, #1
 8104c9a:	3a01      	subs	r2, #1
 8104c9c:	025b      	lsls	r3, r3, #9
 8104c9e:	0412      	lsls	r2, r2, #16
 8104ca0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8104ca4:	b29b      	uxth	r3, r3
 8104ca6:	4313      	orrs	r3, r2
 8104ca8:	6872      	ldr	r2, [r6, #4]
 8104caa:	3a01      	subs	r2, #1
 8104cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104cb0:	4313      	orrs	r3, r2
 8104cb2:	6932      	ldr	r2, [r6, #16]
 8104cb4:	3a01      	subs	r2, #1
 8104cb6:	0612      	lsls	r2, r2, #24
 8104cb8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8104cbc:	4313      	orrs	r3, r2
 8104cbe:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104cc2:	6972      	ldr	r2, [r6, #20]
 8104cc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8104cc8:	4313      	orrs	r3, r2
 8104cca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104cce:	69b2      	ldr	r2, [r6, #24]
 8104cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104cd4:	4313      	orrs	r3, r2
 8104cd6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104cd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104cde:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104ce0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8104ce2:	69f2      	ldr	r2, [r6, #28]
 8104ce4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104ce8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104cec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8104cf0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104cf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104cf8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104cfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8104cfc:	b9b5      	cbnz	r5, 8104d2c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104d02:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104d04:	4c11      	ldr	r4, [pc, #68]	; (8104d4c <RCCEx_PLL3_Config+0xec>)
 8104d06:	6823      	ldr	r3, [r4, #0]
 8104d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104d0c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104d0e:	f7fd ffaf 	bl	8102c70 <HAL_GetTick>
 8104d12:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104d14:	6823      	ldr	r3, [r4, #0]
 8104d16:	009b      	lsls	r3, r3, #2
 8104d18:	d50f      	bpl.n	8104d3a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8104d1a:	2000      	movs	r0, #0
 8104d1c:	e005      	b.n	8104d2a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104d1e:	f7fd ffa7 	bl	8102c70 <HAL_GetTick>
 8104d22:	1bc0      	subs	r0, r0, r7
 8104d24:	2802      	cmp	r0, #2
 8104d26:	d9ab      	bls.n	8104c80 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8104d28:	2003      	movs	r0, #3
}
 8104d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8104d2c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104d2e:	bf0c      	ite	eq
 8104d30:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104d34:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8104d38:	e7e3      	b.n	8104d02 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104d3a:	f7fd ff99 	bl	8102c70 <HAL_GetTick>
 8104d3e:	1b40      	subs	r0, r0, r5
 8104d40:	2802      	cmp	r0, #2
 8104d42:	d9e7      	bls.n	8104d14 <RCCEx_PLL3_Config+0xb4>
 8104d44:	e7f0      	b.n	8104d28 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8104d46:	2001      	movs	r0, #1
 8104d48:	e7ef      	b.n	8104d2a <RCCEx_PLL3_Config+0xca>
 8104d4a:	bf00      	nop
 8104d4c:	58024400 	.word	0x58024400

08104d50 <HAL_RCCEx_PeriphCLKConfig>:
{
 8104d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104d54:	6803      	ldr	r3, [r0, #0]
{
 8104d56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104d58:	0118      	lsls	r0, r3, #4
 8104d5a:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8104d5e:	d509      	bpl.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8104d60:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8104d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d66:	d02f      	beq.n	8104dc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8104d68:	d813      	bhi.n	8104d92 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8104d6a:	b1f3      	cbz	r3, 8104daa <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8104d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104d70:	d021      	beq.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8104d72:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104d74:	682b      	ldr	r3, [r5, #0]
 8104d76:	05d9      	lsls	r1, r3, #23
 8104d78:	f140 80ed 	bpl.w	8104f56 <HAL_RCCEx_PeriphCLKConfig+0x206>
    switch (PeriphClkInit->Sai1ClockSelection)
 8104d7c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8104d7e:	2b04      	cmp	r3, #4
 8104d80:	f200 80e8 	bhi.w	8104f54 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8104d84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8104d88:	002d0026 	.word	0x002d0026
 8104d8c:	002b00e0 	.word	0x002b00e0
 8104d90:	002b      	.short	0x002b
    switch (PeriphClkInit->SpdifrxClockSelection)
 8104d92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d96:	d1ec      	bne.n	8104d72 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104d98:	4aa9      	ldr	r2, [pc, #676]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104d9a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8104d9c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104d9e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8104da2:	430b      	orrs	r3, r1
 8104da4:	6513      	str	r3, [r2, #80]	; 0x50
 8104da6:	2600      	movs	r6, #0
 8104da8:	e7e4      	b.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104daa:	4aa5      	ldr	r2, [pc, #660]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104dac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104db2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8104db4:	e7f0      	b.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104db6:	2102      	movs	r1, #2
 8104db8:	f105 0008 	add.w	r0, r5, #8
 8104dbc:	f7ff fed8 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104dc0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8104dc2:	2800      	cmp	r0, #0
 8104dc4:	d1d6      	bne.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8104dc6:	e7e7      	b.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104dc8:	2102      	movs	r1, #2
 8104dca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104dce:	f7ff ff47 	bl	8104c60 <RCCEx_PLL3_Config>
 8104dd2:	e7f5      	b.n	8104dc0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104dd4:	4a9a      	ldr	r2, [pc, #616]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104dd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 8104dde:	4634      	mov	r4, r6
 8104de0:	e005      	b.n	8104dee <HAL_RCCEx_PeriphCLKConfig+0x9e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104de2:	2100      	movs	r1, #0
 8104de4:	f105 0008 	add.w	r0, r5, #8
 8104de8:	f7ff fec2 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104dec:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104dee:	2c00      	cmp	r4, #0
 8104df0:	f040 80b3 	bne.w	8104f5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104df4:	4a92      	ldr	r2, [pc, #584]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104df6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8104df8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104dfa:	f023 0307 	bic.w	r3, r3, #7
 8104dfe:	430b      	orrs	r3, r1
 8104e00:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104e02:	682b      	ldr	r3, [r5, #0]
 8104e04:	059a      	lsls	r2, r3, #22
 8104e06:	d50d      	bpl.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8104e08:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8104e0a:	2b80      	cmp	r3, #128	; 0x80
 8104e0c:	f000 80c3 	beq.w	8104f96 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8104e10:	f200 80a5 	bhi.w	8104f5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8104e14:	2b00      	cmp	r3, #0
 8104e16:	f000 80b1 	beq.w	8104f7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8104e1a:	2b40      	cmp	r3, #64	; 0x40
 8104e1c:	f000 80b4 	beq.w	8104f88 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8104e20:	2601      	movs	r6, #1
 8104e22:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104e24:	682b      	ldr	r3, [r5, #0]
 8104e26:	055b      	lsls	r3, r3, #21
 8104e28:	d510      	bpl.n	8104e4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4AClockSelection)
 8104e2a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8104e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104e32:	f000 80d6 	beq.w	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104e36:	f200 80b6 	bhi.w	8104fa6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8104e3a:	2b00      	cmp	r3, #0
 8104e3c:	f000 80c4 	beq.w	8104fc8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8104e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104e44:	f000 80c6 	beq.w	8104fd4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8104e48:	2601      	movs	r6, #1
 8104e4a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104e4c:	682b      	ldr	r3, [r5, #0]
 8104e4e:	051f      	lsls	r7, r3, #20
 8104e50:	d510      	bpl.n	8104e74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 8104e52:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8104e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104e5a:	f000 80e8 	beq.w	810502e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8104e5e:	f200 80c8 	bhi.w	8104ff2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8104e62:	2b00      	cmp	r3, #0
 8104e64:	f000 80d6 	beq.w	8105014 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8104e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104e6c:	f000 80d8 	beq.w	8105020 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104e70:	2601      	movs	r6, #1
 8104e72:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104e74:	682b      	ldr	r3, [r5, #0]
 8104e76:	0198      	lsls	r0, r3, #6
 8104e78:	d50d      	bpl.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8104e7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8104e7c:	2b20      	cmp	r3, #32
 8104e7e:	f000 80f3 	beq.w	8105068 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8104e82:	f200 80df 	bhi.w	8105044 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8104e86:	2b00      	cmp	r3, #0
 8104e88:	f000 80df 	beq.w	810504a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8104e8c:	2b10      	cmp	r3, #16
 8104e8e:	f000 80e5 	beq.w	810505c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8104e92:	2601      	movs	r6, #1
 8104e94:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104e96:	682b      	ldr	r3, [r5, #0]
 8104e98:	04d9      	lsls	r1, r3, #19
 8104e9a:	d50f      	bpl.n	8104ebc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8104e9c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8104e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104ea2:	f000 8107 	beq.w	81050b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8104ea6:	f200 80e8 	bhi.w	810507a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8104eaa:	2b00      	cmp	r3, #0
 8104eac:	f000 80f5 	beq.w	810509a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104eb4:	f000 80f7 	beq.w	81050a6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8104eb8:	2601      	movs	r6, #1
 8104eba:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104ebc:	682b      	ldr	r3, [r5, #0]
 8104ebe:	049a      	lsls	r2, r3, #18
 8104ec0:	d50f      	bpl.n	8104ee2 <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi45ClockSelection)
 8104ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8104ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104ec8:	f000 8115 	beq.w	81050f6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8104ecc:	f200 80fa 	bhi.w	81050c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8104ed0:	2b00      	cmp	r3, #0
 8104ed2:	f000 8100 	beq.w	81050d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8104ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104eda:	f000 8105 	beq.w	81050e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8104ede:	2601      	movs	r6, #1
 8104ee0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104ee2:	682b      	ldr	r3, [r5, #0]
 8104ee4:	045b      	lsls	r3, r3, #17
 8104ee6:	d510      	bpl.n	8104f0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Spi6ClockSelection)
 8104ee8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8104eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ef0:	f000 8123 	beq.w	810513a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8104ef4:	f200 8107 	bhi.w	8105106 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8104ef8:	2b00      	cmp	r3, #0
 8104efa:	f000 810d 	beq.w	8105118 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8104efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f02:	f000 8113 	beq.w	810512c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8104f06:	2601      	movs	r6, #1
 8104f08:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104f0a:	682b      	ldr	r3, [r5, #0]
 8104f0c:	041f      	lsls	r7, r3, #16
 8104f0e:	d50d      	bpl.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->FdcanClockSelection)
 8104f10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8104f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f16:	f000 8118 	beq.w	810514a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8104f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f1e:	f000 8122 	beq.w	8105166 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104f22:	2b00      	cmp	r3, #0
 8104f24:	f000 8116 	beq.w	8105154 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8104f28:	2601      	movs	r6, #1
 8104f2a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104f2c:	682b      	ldr	r3, [r5, #0]
 8104f2e:	01d8      	lsls	r0, r3, #7
 8104f30:	f140 8130 	bpl.w	8105194 <HAL_RCCEx_PeriphCLKConfig+0x444>
    switch (PeriphClkInit->FmcClockSelection)
 8104f34:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8104f36:	2b03      	cmp	r3, #3
 8104f38:	f200 8171 	bhi.w	810521e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8104f3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8104f40:	011c0121 	.word	0x011c0121
 8104f44:	01210168 	.word	0x01210168
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f48:	2100      	movs	r1, #0
 8104f4a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104f4e:	f7ff fe87 	bl	8104c60 <RCCEx_PLL3_Config>
 8104f52:	e74b      	b.n	8104dec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch (PeriphClkInit->Sai1ClockSelection)
 8104f54:	2601      	movs	r6, #1
 8104f56:	4634      	mov	r4, r6
 8104f58:	e753      	b.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8104f5a:	4626      	mov	r6, r4
 8104f5c:	e751      	b.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch (PeriphClkInit->Sai23ClockSelection)
 8104f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8104f60:	d003      	beq.n	8104f6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8104f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f66:	f47f af5b 	bne.w	8104e20 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if (ret == HAL_OK)
 8104f6a:	b9d4      	cbnz	r4, 8104fa2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104f6c:	4a34      	ldr	r2, [pc, #208]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104f6e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8104f70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104f72:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8104f76:	430b      	orrs	r3, r1
 8104f78:	6513      	str	r3, [r2, #80]	; 0x50
 8104f7a:	e753      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f7c:	4a30      	ldr	r2, [pc, #192]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104f7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f84:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8104f86:	e7f0      	b.n	8104f6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f88:	2100      	movs	r1, #0
 8104f8a:	f105 0008 	add.w	r0, r5, #8
 8104f8e:	f7ff fdef 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f92:	4604      	mov	r4, r0
        break;
 8104f94:	e7e9      	b.n	8104f6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f96:	2100      	movs	r1, #0
 8104f98:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104f9c:	f7ff fe60 	bl	8104c60 <RCCEx_PLL3_Config>
 8104fa0:	e7f7      	b.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8104fa2:	4626      	mov	r6, r4
 8104fa4:	e73e      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai4AClockSelection)
 8104fa6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104faa:	d003      	beq.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8104fac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104fb0:	f47f af4a 	bne.w	8104e48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if (ret == HAL_OK)
 8104fb4:	b9dc      	cbnz	r4, 8104fee <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104fb6:	4a22      	ldr	r2, [pc, #136]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104fb8:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8104fbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104fbe:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8104fc2:	430b      	orrs	r3, r1
 8104fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8104fc6:	e741      	b.n	8104e4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fc8:	4a1d      	ldr	r2, [pc, #116]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104fca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104fd0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8104fd2:	e7ef      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104fd4:	2100      	movs	r1, #0
 8104fd6:	f105 0008 	add.w	r0, r5, #8
 8104fda:	f7ff fdc9 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104fde:	4604      	mov	r4, r0
        break;
 8104fe0:	e7e8      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104fe2:	2100      	movs	r1, #0
 8104fe4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104fe8:	f7ff fe3a 	bl	8104c60 <RCCEx_PLL3_Config>
 8104fec:	e7f7      	b.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8104fee:	4626      	mov	r6, r4
 8104ff0:	e72c      	b.n	8104e4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4BClockSelection)
 8104ff2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ff6:	d003      	beq.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104ffc:	f47f af38 	bne.w	8104e70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    if (ret == HAL_OK)
 8105000:	b9dc      	cbnz	r4, 810503a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105002:	4a0f      	ldr	r2, [pc, #60]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8105004:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8105008:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810500a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 810500e:	430b      	orrs	r3, r1
 8105010:	6593      	str	r3, [r2, #88]	; 0x58
 8105012:	e72f      	b.n	8104e74 <HAL_RCCEx_PeriphCLKConfig+0x124>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105014:	4a0a      	ldr	r2, [pc, #40]	; (8105040 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8105016:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810501c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 810501e:	e7ef      	b.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105020:	2100      	movs	r1, #0
 8105022:	f105 0008 	add.w	r0, r5, #8
 8105026:	f7ff fda3 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810502a:	4604      	mov	r4, r0
        break;
 810502c:	e7e8      	b.n	8105000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810502e:	2100      	movs	r1, #0
 8105030:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105034:	f7ff fe14 	bl	8104c60 <RCCEx_PLL3_Config>
 8105038:	e7f7      	b.n	810502a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 810503a:	4626      	mov	r6, r4
 810503c:	e71a      	b.n	8104e74 <HAL_RCCEx_PeriphCLKConfig+0x124>
 810503e:	bf00      	nop
 8105040:	58024400 	.word	0x58024400
    switch (PeriphClkInit->QspiClockSelection)
 8105044:	2b30      	cmp	r3, #48	; 0x30
 8105046:	f47f af24 	bne.w	8104e92 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if (ret == HAL_OK)
 810504a:	b9a4      	cbnz	r4, 8105076 <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810504c:	4aa0      	ldr	r2, [pc, #640]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810504e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8105050:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8105052:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105056:	430b      	orrs	r3, r1
 8105058:	64d3      	str	r3, [r2, #76]	; 0x4c
 810505a:	e71c      	b.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810505c:	4a9c      	ldr	r2, [pc, #624]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810505e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105064:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8105066:	e7f0      	b.n	810504a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105068:	2102      	movs	r1, #2
 810506a:	f105 0008 	add.w	r0, r5, #8
 810506e:	f7ff fd7f 	bl	8104b70 <RCCEx_PLL2_Config>
 8105072:	4604      	mov	r4, r0
        break;
 8105074:	e7e9      	b.n	810504a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8105076:	4626      	mov	r6, r4
 8105078:	e70d      	b.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Spi123ClockSelection)
 810507a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810507e:	d003      	beq.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8105080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105084:	f47f af18 	bne.w	8104eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if (ret == HAL_OK)
 8105088:	b9d4      	cbnz	r4, 81050c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810508a:	4a91      	ldr	r2, [pc, #580]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810508c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 810508e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8105090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8105094:	430b      	orrs	r3, r1
 8105096:	6513      	str	r3, [r2, #80]	; 0x50
 8105098:	e710      	b.n	8104ebc <HAL_RCCEx_PeriphCLKConfig+0x16c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810509a:	4a8d      	ldr	r2, [pc, #564]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810509c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 810509e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81050a2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 81050a4:	e7f0      	b.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81050a6:	2100      	movs	r1, #0
 81050a8:	f105 0008 	add.w	r0, r5, #8
 81050ac:	f7ff fd60 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81050b0:	4604      	mov	r4, r0
        break;
 81050b2:	e7e9      	b.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81050b4:	2100      	movs	r1, #0
 81050b6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81050ba:	f7ff fdd1 	bl	8104c60 <RCCEx_PLL3_Config>
 81050be:	e7f7      	b.n	81050b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81050c0:	4626      	mov	r6, r4
 81050c2:	e6fb      	b.n	8104ebc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi45ClockSelection)
 81050c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81050c8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 81050cc:	d003      	beq.n	81050d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 81050ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81050d2:	f47f af04 	bne.w	8104ede <HAL_RCCEx_PeriphCLKConfig+0x18e>
    if (ret == HAL_OK)
 81050d6:	b9a4      	cbnz	r4, 8105102 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81050d8:	4a7d      	ldr	r2, [pc, #500]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81050da:	6e69      	ldr	r1, [r5, #100]	; 0x64
 81050dc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 81050de:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 81050e2:	430b      	orrs	r3, r1
 81050e4:	6513      	str	r3, [r2, #80]	; 0x50
 81050e6:	e6fc      	b.n	8104ee2 <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81050e8:	2101      	movs	r1, #1
 81050ea:	f105 0008 	add.w	r0, r5, #8
 81050ee:	f7ff fd3f 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81050f2:	4604      	mov	r4, r0
        break;
 81050f4:	e7ef      	b.n	81050d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81050f6:	2101      	movs	r1, #1
 81050f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81050fc:	f7ff fdb0 	bl	8104c60 <RCCEx_PLL3_Config>
 8105100:	e7f7      	b.n	81050f2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8105102:	4626      	mov	r6, r4
 8105104:	e6ed      	b.n	8104ee2 <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi6ClockSelection)
 8105106:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 810510a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 810510e:	d003      	beq.n	8105118 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8105110:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105114:	f47f aef7 	bne.w	8104f06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    if (ret == HAL_OK)
 8105118:	b9ac      	cbnz	r4, 8105146 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810511a:	4a6d      	ldr	r2, [pc, #436]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810511c:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8105120:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105122:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8105126:	430b      	orrs	r3, r1
 8105128:	6593      	str	r3, [r2, #88]	; 0x58
 810512a:	e6ee      	b.n	8104f0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810512c:	2101      	movs	r1, #1
 810512e:	f105 0008 	add.w	r0, r5, #8
 8105132:	f7ff fd1d 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105136:	4604      	mov	r4, r0
        break;
 8105138:	e7ee      	b.n	8105118 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810513a:	2101      	movs	r1, #1
 810513c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105140:	f7ff fd8e 	bl	8104c60 <RCCEx_PLL3_Config>
 8105144:	e7f7      	b.n	8105136 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8105146:	4626      	mov	r6, r4
 8105148:	e6df      	b.n	8104f0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810514a:	4a61      	ldr	r2, [pc, #388]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810514c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 810514e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105152:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8105154:	b974      	cbnz	r4, 8105174 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105156:	4a5e      	ldr	r2, [pc, #376]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105158:	6f29      	ldr	r1, [r5, #112]	; 0x70
 810515a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 810515c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8105160:	430b      	orrs	r3, r1
 8105162:	6513      	str	r3, [r2, #80]	; 0x50
 8105164:	e6e2      	b.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105166:	2101      	movs	r1, #1
 8105168:	f105 0008 	add.w	r0, r5, #8
 810516c:	f7ff fd00 	bl	8104b70 <RCCEx_PLL2_Config>
 8105170:	4604      	mov	r4, r0
        break;
 8105172:	e7ef      	b.n	8105154 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8105174:	4626      	mov	r6, r4
 8105176:	e6d9      	b.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105178:	4a55      	ldr	r2, [pc, #340]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810517a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 810517c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105180:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8105182:	2c00      	cmp	r4, #0
 8105184:	d14e      	bne.n	8105224 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105186:	4a52      	ldr	r2, [pc, #328]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105188:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 810518a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 810518c:	f023 0303 	bic.w	r3, r3, #3
 8105190:	430b      	orrs	r3, r1
 8105192:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105194:	682b      	ldr	r3, [r5, #0]
 8105196:	0259      	lsls	r1, r3, #9
 8105198:	d54e      	bpl.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810519a:	4f4e      	ldr	r7, [pc, #312]	; (81052d4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 810519c:	683b      	ldr	r3, [r7, #0]
 810519e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81051a2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 81051a4:	f7fd fd64 	bl	8102c70 <HAL_GetTick>
 81051a8:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81051aa:	683b      	ldr	r3, [r7, #0]
 81051ac:	05da      	lsls	r2, r3, #23
 81051ae:	d53b      	bpl.n	8105228 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if (ret == HAL_OK)
 81051b0:	2c00      	cmp	r4, #0
 81051b2:	d16d      	bne.n	8105290 <HAL_RCCEx_PeriphCLKConfig+0x540>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81051b4:	4b46      	ldr	r3, [pc, #280]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81051b6:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 81051ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81051bc:	4042      	eors	r2, r0
 81051be:	f412 7f40 	tst.w	r2, #768	; 0x300
 81051c2:	d00b      	beq.n	81051dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81051c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 81051c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81051c8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 81051cc:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81051ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81051d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 81051d4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 81051d8:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 81051da:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81051dc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 81051e0:	d041      	beq.n	8105266 <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81051e2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 81051e6:	493a      	ldr	r1, [pc, #232]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81051e8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 81051ec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 81051f0:	d14a      	bne.n	8105288 <HAL_RCCEx_PeriphCLKConfig+0x538>
 81051f2:	6908      	ldr	r0, [r1, #16]
 81051f4:	4a38      	ldr	r2, [pc, #224]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 81051f6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 81051fa:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 81051fe:	4302      	orrs	r2, r0
 8105200:	610a      	str	r2, [r1, #16]
 8105202:	4a33      	ldr	r2, [pc, #204]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105204:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8105206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810520a:	430b      	orrs	r3, r1
 810520c:	6713      	str	r3, [r2, #112]	; 0x70
 810520e:	e013      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105210:	2102      	movs	r1, #2
 8105212:	f105 0008 	add.w	r0, r5, #8
 8105216:	f7ff fcab 	bl	8104b70 <RCCEx_PLL2_Config>
 810521a:	4604      	mov	r4, r0
        break;
 810521c:	e7b1      	b.n	8105182 <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch (PeriphClkInit->FmcClockSelection)
 810521e:	2601      	movs	r6, #1
 8105220:	4634      	mov	r4, r6
 8105222:	e7b7      	b.n	8105194 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8105224:	4626      	mov	r6, r4
 8105226:	e7b5      	b.n	8105194 <HAL_RCCEx_PeriphCLKConfig+0x444>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105228:	f7fd fd22 	bl	8102c70 <HAL_GetTick>
 810522c:	eba0 0008 	sub.w	r0, r0, r8
 8105230:	2864      	cmp	r0, #100	; 0x64
 8105232:	d9ba      	bls.n	81051aa <HAL_RCCEx_PeriphCLKConfig+0x45a>
        ret = HAL_TIMEOUT;
 8105234:	2603      	movs	r6, #3
 8105236:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105238:	682b      	ldr	r3, [r5, #0]
 810523a:	07d8      	lsls	r0, r3, #31
 810523c:	d508      	bpl.n	8105250 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Usart16ClockSelection)
 810523e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8105240:	2b10      	cmp	r3, #16
 8105242:	d03d      	beq.n	81052c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8105244:	d826      	bhi.n	8105294 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8105246:	b35b      	cbz	r3, 81052a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105248:	2b08      	cmp	r3, #8
 810524a:	d032      	beq.n	81052b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
 810524c:	2601      	movs	r6, #1
 810524e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105250:	682b      	ldr	r3, [r5, #0]
 8105252:	0799      	lsls	r1, r3, #30
 8105254:	d550      	bpl.n	81052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105256:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8105258:	2b05      	cmp	r3, #5
 810525a:	d863      	bhi.n	8105324 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810525c:	e8df f003 	tbb	[pc, r3]
 8105260:	445c3e44 	.word	0x445c3e44
 8105264:	4444      	.short	0x4444
        tickstart = HAL_GetTick();
 8105266:	f7fd fd03 	bl	8102c70 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810526a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 810526e:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105270:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105274:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8105278:	079b      	lsls	r3, r3, #30
 810527a:	d4b2      	bmi.n	81051e2 <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810527c:	f7fd fcf8 	bl	8102c70 <HAL_GetTick>
 8105280:	1bc0      	subs	r0, r0, r7
 8105282:	4548      	cmp	r0, r9
 8105284:	d9f6      	bls.n	8105274 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8105286:	e7d5      	b.n	8105234 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105288:	690a      	ldr	r2, [r1, #16]
 810528a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 810528e:	e7b7      	b.n	8105200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8105290:	4626      	mov	r6, r4
 8105292:	e7d1      	b.n	8105238 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    switch (PeriphClkInit->Usart16ClockSelection)
 8105294:	f023 0208 	bic.w	r2, r3, #8
 8105298:	2a20      	cmp	r2, #32
 810529a:	d001      	beq.n	81052a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 810529c:	2b18      	cmp	r3, #24
 810529e:	d1d5      	bne.n	810524c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if (ret == HAL_OK)
 81052a0:	b9a4      	cbnz	r4, 81052cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81052a2:	4a0b      	ldr	r2, [pc, #44]	; (81052d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81052a4:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 81052a6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81052a8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 81052ac:	430b      	orrs	r3, r1
 81052ae:	6553      	str	r3, [r2, #84]	; 0x54
 81052b0:	e7ce      	b.n	8105250 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81052b2:	2101      	movs	r1, #1
 81052b4:	f105 0008 	add.w	r0, r5, #8
 81052b8:	f7ff fc5a 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052bc:	4604      	mov	r4, r0
        break;
 81052be:	e7ef      	b.n	81052a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052c0:	2101      	movs	r1, #1
 81052c2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81052c6:	f7ff fccb 	bl	8104c60 <RCCEx_PLL3_Config>
 81052ca:	e7f7      	b.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0x56c>
 81052cc:	4626      	mov	r6, r4
 81052ce:	e7bf      	b.n	8105250 <HAL_RCCEx_PeriphCLKConfig+0x500>
 81052d0:	58024400 	.word	0x58024400
 81052d4:	58024800 	.word	0x58024800
 81052d8:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81052dc:	2101      	movs	r1, #1
 81052de:	f105 0008 	add.w	r0, r5, #8
 81052e2:	f7ff fc45 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052e6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 81052e8:	b9fc      	cbnz	r4, 810532a <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81052ea:	4a11      	ldr	r2, [pc, #68]	; (8105330 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 81052ec:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 81052ee:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81052f0:	f023 0307 	bic.w	r3, r3, #7
 81052f4:	430b      	orrs	r3, r1
 81052f6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81052f8:	682b      	ldr	r3, [r5, #0]
 81052fa:	075a      	lsls	r2, r3, #29
 81052fc:	d52b      	bpl.n	8105356 <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81052fe:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8105302:	2b05      	cmp	r3, #5
 8105304:	f200 817c 	bhi.w	8105600 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8105308:	e8df f013 	tbh	[pc, r3, lsl #1]
 810530c:	0014001a 	.word	0x0014001a
 8105310:	001a0174 	.word	0x001a0174
 8105314:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105318:	2101      	movs	r1, #1
 810531a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 810531e:	f7ff fc9f 	bl	8104c60 <RCCEx_PLL3_Config>
 8105322:	e7e0      	b.n	81052e6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105324:	2601      	movs	r6, #1
 8105326:	4634      	mov	r4, r6
 8105328:	e7e6      	b.n	81052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 810532a:	4626      	mov	r6, r4
 810532c:	e7e4      	b.n	81052f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 810532e:	bf00      	nop
 8105330:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105334:	2101      	movs	r1, #1
 8105336:	f105 0008 	add.w	r0, r5, #8
 810533a:	f7ff fc19 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810533e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8105340:	2c00      	cmp	r4, #0
 8105342:	f040 8160 	bne.w	8105606 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105346:	4aaa      	ldr	r2, [pc, #680]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105348:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 810534c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810534e:	f023 0307 	bic.w	r3, r3, #7
 8105352:	430b      	orrs	r3, r1
 8105354:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105356:	682b      	ldr	r3, [r5, #0]
 8105358:	069b      	lsls	r3, r3, #26
 810535a:	d510      	bpl.n	810537e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 810535c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8105360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105364:	f000 816b 	beq.w	810563e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8105368:	f200 814f 	bhi.w	810560a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 810536c:	2b00      	cmp	r3, #0
 810536e:	f000 8155 	beq.w	810561c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8105372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105376:	f000 815b 	beq.w	8105630 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 810537a:	2601      	movs	r6, #1
 810537c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810537e:	682b      	ldr	r3, [r5, #0]
 8105380:	065f      	lsls	r7, r3, #25
 8105382:	d510      	bpl.n	81053a6 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105384:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8105388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810538c:	f000 8179 	beq.w	8105682 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8105390:	f200 815d 	bhi.w	810564e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8105394:	2b00      	cmp	r3, #0
 8105396:	f000 8163 	beq.w	8105660 <HAL_RCCEx_PeriphCLKConfig+0x910>
 810539a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810539e:	f000 8169 	beq.w	8105674 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81053a2:	2601      	movs	r6, #1
 81053a4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81053a6:	682b      	ldr	r3, [r5, #0]
 81053a8:	0618      	lsls	r0, r3, #24
 81053aa:	d510      	bpl.n	81053ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 81053ac:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 81053b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053b4:	f000 8187 	beq.w	81056c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 81053b8:	f200 816b 	bhi.w	8105692 <HAL_RCCEx_PeriphCLKConfig+0x942>
 81053bc:	2b00      	cmp	r3, #0
 81053be:	f000 8171 	beq.w	81056a4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 81053c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81053c6:	f000 8177 	beq.w	81056b8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81053ca:	2601      	movs	r6, #1
 81053cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81053ce:	682b      	ldr	r3, [r5, #0]
 81053d0:	0719      	lsls	r1, r3, #28
 81053d2:	d514      	bpl.n	81053fe <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81053d4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 81053d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81053dc:	d107      	bne.n	81053ee <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81053de:	2102      	movs	r1, #2
 81053e0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81053e4:	f7ff fc3c 	bl	8104c60 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 81053e8:	2800      	cmp	r0, #0
 81053ea:	bf18      	it	ne
 81053ec:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81053ee:	4a80      	ldr	r2, [pc, #512]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 81053f0:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 81053f4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81053f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 81053fa:	430b      	orrs	r3, r1
 81053fc:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81053fe:	682b      	ldr	r3, [r5, #0]
 8105400:	06da      	lsls	r2, r3, #27
 8105402:	d514      	bpl.n	810542e <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105404:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8105408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810540c:	d107      	bne.n	810541e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810540e:	2102      	movs	r1, #2
 8105410:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105414:	f7ff fc24 	bl	8104c60 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8105418:	2800      	cmp	r0, #0
 810541a:	bf18      	it	ne
 810541c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810541e:	4a74      	ldr	r2, [pc, #464]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105420:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8105424:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810542a:	430b      	orrs	r3, r1
 810542c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810542e:	682b      	ldr	r3, [r5, #0]
 8105430:	031b      	lsls	r3, r3, #12
 8105432:	d51b      	bpl.n	810546c <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch (PeriphClkInit->AdcClockSelection)
 8105434:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8105438:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 810543c:	f000 814b 	beq.w	81056d6 <HAL_RCCEx_PeriphCLKConfig+0x986>
 8105440:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8105444:	d007      	beq.n	8105456 <HAL_RCCEx_PeriphCLKConfig+0x706>
 8105446:	2900      	cmp	r1, #0
 8105448:	f040 814b 	bne.w	81056e2 <HAL_RCCEx_PeriphCLKConfig+0x992>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810544c:	f105 0008 	add.w	r0, r5, #8
 8105450:	f7ff fb8e 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105454:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8105456:	2c00      	cmp	r4, #0
 8105458:	f040 8146 	bne.w	81056e8 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810545c:	4a64      	ldr	r2, [pc, #400]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810545e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8105462:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105464:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8105468:	430b      	orrs	r3, r1
 810546a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810546c:	682b      	ldr	r3, [r5, #0]
 810546e:	035f      	lsls	r7, r3, #13
 8105470:	d51c      	bpl.n	81054ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch (PeriphClkInit->UsbClockSelection)
 8105472:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8105476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810547a:	f000 8137 	beq.w	81056ec <HAL_RCCEx_PeriphCLKConfig+0x99c>
 810547e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105482:	d008      	beq.n	8105496 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8105484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105488:	f040 8137 	bne.w	81056fa <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810548c:	4a58      	ldr	r2, [pc, #352]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810548e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105494:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8105496:	2c00      	cmp	r4, #0
 8105498:	f040 8132 	bne.w	8105700 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810549c:	4a54      	ldr	r2, [pc, #336]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810549e:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 81054a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81054a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81054a8:	430b      	orrs	r3, r1
 81054aa:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81054ac:	682b      	ldr	r3, [r5, #0]
 81054ae:	03d8      	lsls	r0, r3, #15
 81054b0:	d509      	bpl.n	81054c6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SdmmcClockSelection)
 81054b2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 81054b4:	2b00      	cmp	r3, #0
 81054b6:	f000 8125 	beq.w	8105704 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 81054ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054be:	f000 812f 	beq.w	8105720 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81054c2:	2601      	movs	r6, #1
 81054c4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81054c6:	682b      	ldr	r3, [r5, #0]
 81054c8:	0099      	lsls	r1, r3, #2
 81054ca:	d507      	bpl.n	81054dc <HAL_RCCEx_PeriphCLKConfig+0x78c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81054cc:	2102      	movs	r1, #2
 81054ce:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81054d2:	f7ff fbc5 	bl	8104c60 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 81054d6:	2800      	cmp	r0, #0
 81054d8:	bf18      	it	ne
 81054da:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81054dc:	e9d5 3100 	ldrd	r3, r1, [r5]
 81054e0:	039a      	lsls	r2, r3, #14
 81054e2:	d50b      	bpl.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->RngClockSelection)
 81054e4:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 81054e8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 81054ec:	f000 812f 	beq.w	810574e <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 81054f0:	f200 811f 	bhi.w	8105732 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81054f4:	2800      	cmp	r0, #0
 81054f6:	f000 8122 	beq.w	810573e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 81054fa:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81054fc:	02df      	lsls	r7, r3, #11
 81054fe:	d506      	bpl.n	810550e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105500:	483b      	ldr	r0, [pc, #236]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105502:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8105504:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8105506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810550a:	4322      	orrs	r2, r4
 810550c:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810550e:	00dc      	lsls	r4, r3, #3
 8105510:	d507      	bpl.n	8105522 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105512:	4837      	ldr	r0, [pc, #220]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105514:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 8105518:	6902      	ldr	r2, [r0, #16]
 810551a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 810551e:	4322      	orrs	r2, r4
 8105520:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105522:	0298      	lsls	r0, r3, #10
 8105524:	d506      	bpl.n	8105534 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105526:	4832      	ldr	r0, [pc, #200]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105528:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 810552a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 810552c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8105530:	4322      	orrs	r2, r4
 8105532:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105534:	005a      	lsls	r2, r3, #1
 8105536:	d509      	bpl.n	810554c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105538:	4a2d      	ldr	r2, [pc, #180]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810553a:	6910      	ldr	r0, [r2, #16]
 810553c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8105540:	6110      	str	r0, [r2, #16]
 8105542:	6910      	ldr	r0, [r2, #16]
 8105544:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8105548:	4320      	orrs	r0, r4
 810554a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810554c:	2b00      	cmp	r3, #0
 810554e:	da06      	bge.n	810555e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105550:	4827      	ldr	r0, [pc, #156]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105552:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8105554:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8105556:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 810555a:	4322      	orrs	r2, r4
 810555c:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810555e:	021b      	lsls	r3, r3, #8
 8105560:	d507      	bpl.n	8105572 <HAL_RCCEx_PeriphCLKConfig+0x822>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105562:	4a23      	ldr	r2, [pc, #140]	; (81055f0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105564:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8105568:	6d53      	ldr	r3, [r2, #84]	; 0x54
 810556a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 810556e:	4303      	orrs	r3, r0
 8105570:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105572:	07cf      	lsls	r7, r1, #31
 8105574:	d507      	bpl.n	8105586 <HAL_RCCEx_PeriphCLKConfig+0x836>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105576:	2100      	movs	r1, #0
 8105578:	f105 0008 	add.w	r0, r5, #8
 810557c:	f7ff faf8 	bl	8104b70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8105580:	2800      	cmp	r0, #0
 8105582:	bf18      	it	ne
 8105584:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105586:	686b      	ldr	r3, [r5, #4]
 8105588:	079c      	lsls	r4, r3, #30
 810558a:	d507      	bpl.n	810559c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810558c:	2101      	movs	r1, #1
 810558e:	f105 0008 	add.w	r0, r5, #8
 8105592:	f7ff faed 	bl	8104b70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8105596:	2800      	cmp	r0, #0
 8105598:	bf18      	it	ne
 810559a:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810559c:	686b      	ldr	r3, [r5, #4]
 810559e:	0758      	lsls	r0, r3, #29
 81055a0:	d507      	bpl.n	81055b2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81055a2:	2102      	movs	r1, #2
 81055a4:	f105 0008 	add.w	r0, r5, #8
 81055a8:	f7ff fae2 	bl	8104b70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 81055ac:	2800      	cmp	r0, #0
 81055ae:	bf18      	it	ne
 81055b0:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81055b2:	686b      	ldr	r3, [r5, #4]
 81055b4:	0719      	lsls	r1, r3, #28
 81055b6:	d507      	bpl.n	81055c8 <HAL_RCCEx_PeriphCLKConfig+0x878>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81055b8:	2100      	movs	r1, #0
 81055ba:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81055be:	f7ff fb4f 	bl	8104c60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 81055c2:	2800      	cmp	r0, #0
 81055c4:	bf18      	it	ne
 81055c6:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81055c8:	686b      	ldr	r3, [r5, #4]
 81055ca:	06da      	lsls	r2, r3, #27
 81055cc:	d507      	bpl.n	81055de <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81055ce:	2101      	movs	r1, #1
 81055d0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81055d4:	f7ff fb44 	bl	8104c60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 81055d8:	2800      	cmp	r0, #0
 81055da:	bf18      	it	ne
 81055dc:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81055de:	686b      	ldr	r3, [r5, #4]
 81055e0:	069b      	lsls	r3, r3, #26
 81055e2:	f100 80bc 	bmi.w	810575e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    return HAL_OK;
 81055e6:	1e30      	subs	r0, r6, #0
 81055e8:	bf18      	it	ne
 81055ea:	2001      	movne	r0, #1
}
 81055ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81055f0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81055f4:	2101      	movs	r1, #1
 81055f6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81055fa:	f7ff fb31 	bl	8104c60 <RCCEx_PLL3_Config>
 81055fe:	e69e      	b.n	810533e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105600:	2601      	movs	r6, #1
 8105602:	4634      	mov	r4, r6
 8105604:	e6a7      	b.n	8105356 <HAL_RCCEx_PeriphCLKConfig+0x606>
 8105606:	4626      	mov	r6, r4
 8105608:	e6a5      	b.n	8105356 <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lptim1ClockSelection)
 810560a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 810560e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8105612:	d003      	beq.n	810561c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8105614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105618:	f47f aeaf 	bne.w	810537a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    if (ret == HAL_OK)
 810561c:	b9ac      	cbnz	r4, 810564a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810561e:	4a55      	ldr	r2, [pc, #340]	; (8105774 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105620:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8105624:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8105626:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 810562a:	430b      	orrs	r3, r1
 810562c:	6553      	str	r3, [r2, #84]	; 0x54
 810562e:	e6a6      	b.n	810537e <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105630:	2100      	movs	r1, #0
 8105632:	f105 0008 	add.w	r0, r5, #8
 8105636:	f7ff fa9b 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810563a:	4604      	mov	r4, r0
        break;
 810563c:	e7ee      	b.n	810561c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810563e:	2102      	movs	r1, #2
 8105640:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105644:	f7ff fb0c 	bl	8104c60 <RCCEx_PLL3_Config>
 8105648:	e7f7      	b.n	810563a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 810564a:	4626      	mov	r6, r4
 810564c:	e697      	b.n	810537e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 810564e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8105652:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8105656:	d003      	beq.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8105658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810565c:	f47f aea1 	bne.w	81053a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    if (ret == HAL_OK)
 8105660:	b9ac      	cbnz	r4, 810568e <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105662:	4a44      	ldr	r2, [pc, #272]	; (8105774 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105664:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8105668:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810566a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 810566e:	430b      	orrs	r3, r1
 8105670:	6593      	str	r3, [r2, #88]	; 0x58
 8105672:	e698      	b.n	81053a6 <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105674:	2100      	movs	r1, #0
 8105676:	f105 0008 	add.w	r0, r5, #8
 810567a:	f7ff fa79 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810567e:	4604      	mov	r4, r0
        break;
 8105680:	e7ee      	b.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105682:	2102      	movs	r1, #2
 8105684:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105688:	f7ff faea 	bl	8104c60 <RCCEx_PLL3_Config>
 810568c:	e7f7      	b.n	810567e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 810568e:	4626      	mov	r6, r4
 8105690:	e689      	b.n	81053a6 <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105692:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8105696:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 810569a:	d003      	beq.n	81056a4 <HAL_RCCEx_PeriphCLKConfig+0x954>
 810569c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81056a0:	f47f ae93 	bne.w	81053ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
    if (ret == HAL_OK)
 81056a4:	b9ac      	cbnz	r4, 81056d2 <HAL_RCCEx_PeriphCLKConfig+0x982>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81056a6:	4a33      	ldr	r2, [pc, #204]	; (8105774 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 81056a8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 81056ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81056ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81056b2:	430b      	orrs	r3, r1
 81056b4:	6593      	str	r3, [r2, #88]	; 0x58
 81056b6:	e68a      	b.n	81053ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81056b8:	2100      	movs	r1, #0
 81056ba:	f105 0008 	add.w	r0, r5, #8
 81056be:	f7ff fa57 	bl	8104b70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81056c2:	4604      	mov	r4, r0
        break;
 81056c4:	e7ee      	b.n	81056a4 <HAL_RCCEx_PeriphCLKConfig+0x954>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81056c6:	2102      	movs	r1, #2
 81056c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81056cc:	f7ff fac8 	bl	8104c60 <RCCEx_PLL3_Config>
 81056d0:	e7f7      	b.n	81056c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 81056d2:	4626      	mov	r6, r4
 81056d4:	e67b      	b.n	81053ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81056d6:	2102      	movs	r1, #2
 81056d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81056dc:	f7ff fac0 	bl	8104c60 <RCCEx_PLL3_Config>
 81056e0:	e6b8      	b.n	8105454 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 81056e2:	2601      	movs	r6, #1
 81056e4:	4634      	mov	r4, r6
 81056e6:	e6c1      	b.n	810546c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 81056e8:	4626      	mov	r6, r4
 81056ea:	e6bf      	b.n	810546c <HAL_RCCEx_PeriphCLKConfig+0x71c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81056ec:	2101      	movs	r1, #1
 81056ee:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81056f2:	f7ff fab5 	bl	8104c60 <RCCEx_PLL3_Config>
 81056f6:	4604      	mov	r4, r0
        break;
 81056f8:	e6cd      	b.n	8105496 <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (PeriphClkInit->UsbClockSelection)
 81056fa:	2601      	movs	r6, #1
 81056fc:	4634      	mov	r4, r6
 81056fe:	e6d5      	b.n	81054ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8105700:	4626      	mov	r6, r4
 8105702:	e6d3      	b.n	81054ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105704:	4a1b      	ldr	r2, [pc, #108]	; (8105774 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105706:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810570c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 810570e:	b974      	cbnz	r4, 810572e <HAL_RCCEx_PeriphCLKConfig+0x9de>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105710:	4a18      	ldr	r2, [pc, #96]	; (8105774 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105712:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8105714:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8105716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810571a:	430b      	orrs	r3, r1
 810571c:	64d3      	str	r3, [r2, #76]	; 0x4c
 810571e:	e6d2      	b.n	81054c6 <HAL_RCCEx_PeriphCLKConfig+0x776>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105720:	2102      	movs	r1, #2
 8105722:	f105 0008 	add.w	r0, r5, #8
 8105726:	f7ff fa23 	bl	8104b70 <RCCEx_PLL2_Config>
 810572a:	4604      	mov	r4, r0
        break;
 810572c:	e7ef      	b.n	810570e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 810572e:	4626      	mov	r6, r4
 8105730:	e6c9      	b.n	81054c6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->RngClockSelection)
 8105732:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 8105736:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 810573a:	f47f aede 	bne.w	81054fa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    if (ret == HAL_OK)
 810573e:	b964      	cbnz	r4, 810575a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105740:	4c0c      	ldr	r4, [pc, #48]	; (8105774 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105742:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8105744:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8105748:	4302      	orrs	r2, r0
 810574a:	6562      	str	r2, [r4, #84]	; 0x54
 810574c:	e6d6      	b.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810574e:	4f09      	ldr	r7, [pc, #36]	; (8105774 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105752:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105756:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 8105758:	e7f1      	b.n	810573e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 810575a:	4626      	mov	r6, r4
 810575c:	e6ce      	b.n	81054fc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810575e:	2102      	movs	r1, #2
 8105760:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105764:	f7ff fa7c 	bl	8104c60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8105768:	2800      	cmp	r0, #0
 810576a:	f43f af3c 	beq.w	81055e6 <HAL_RCCEx_PeriphCLKConfig+0x896>
  return HAL_ERROR;
 810576e:	2001      	movs	r0, #1
 8105770:	e73c      	b.n	81055ec <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8105772:	bf00      	nop
 8105774:	58024400 	.word	0x58024400

08105778 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8105778:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810577a:	f7ff f9b5 	bl	8104ae8 <HAL_RCC_GetHCLKFreq>
 810577e:	4b05      	ldr	r3, [pc, #20]	; (8105794 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8105780:	4a05      	ldr	r2, [pc, #20]	; (8105798 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8105782:	6a1b      	ldr	r3, [r3, #32]
 8105784:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8105788:	5cd3      	ldrb	r3, [r2, r3]
 810578a:	f003 031f 	and.w	r3, r3, #31
}
 810578e:	40d8      	lsrs	r0, r3
 8105790:	bd08      	pop	{r3, pc}
 8105792:	bf00      	nop
 8105794:	58024400 	.word	0x58024400
 8105798:	081105d0 	.word	0x081105d0

0810579c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810579c:	494f      	ldr	r1, [pc, #316]	; (81058dc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 810579e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057a0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81057a2:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81057a4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81057a6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 81057a8:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81057ac:	f3c6 3305 	ubfx	r3, r6, #12, #6
  if (pll2m != 0U)
 81057b0:	f000 8090 	beq.w	81058d4 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057b4:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81057b8:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81057bc:	f3c5 1200 	ubfx	r2, r5, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81057c0:	4353      	muls	r3, r2
 81057c2:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057c6:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 81057ca:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81057d0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 81057d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 81057d8:	d06e      	beq.n	81058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 81057da:	2c02      	cmp	r4, #2
 81057dc:	d05e      	beq.n	810589c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 81057de:	2c00      	cmp	r4, #0
 81057e0:	d16a      	bne.n	81058b8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81057e2:	680b      	ldr	r3, [r1, #0]
 81057e4:	069b      	lsls	r3, r3, #26
 81057e6:	d547      	bpl.n	8105878 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057e8:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057ea:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057ec:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 81057f0:	4a3b      	ldr	r2, [pc, #236]	; (81058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 81057f2:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057f4:	ee07 2a90 	vmov	s15, r2
 81057f8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 81057fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105800:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105804:	ee07 3a10 	vmov	s14, r3
 8105808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810580c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8105810:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105814:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105818:	4a30      	ldr	r2, [pc, #192]	; (81058dc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 810581a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 810581c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105820:	ee07 3a10 	vmov	s14, r3
 8105824:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105828:	ee37 7a06 	vadd.f32	s14, s14, s12
 810582c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105830:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105834:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105838:	6b93      	ldr	r3, [r2, #56]	; 0x38
 810583a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 810583e:	ee07 3a10 	vmov	s14, r3
 8105842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105846:	ee37 7a06 	vadd.f32	s14, s14, s12
 810584a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810584e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105852:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105856:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8105858:	f3c3 6306 	ubfx	r3, r3, #24, #7
 810585c:	ee06 3a90 	vmov	s13, r3
 8105860:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105864:	ee76 6a86 	vadd.f32	s13, s13, s12
 8105868:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 810586c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105870:	ee17 3a90 	vmov	r3, s15
 8105874:	6083      	str	r3, [r0, #8]
}
 8105876:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105878:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 810587a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 81058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 810587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105882:	ee07 3a90 	vmov	s15, r3
 8105886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810588a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810588e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105892:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8105896:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 810589a:	e7bd      	b.n	8105818 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810589c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 810589e:	eddf 5a12 	vldr	s11, [pc, #72]	; 81058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 81058a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058a6:	ee07 3a90 	vmov	s15, r3
 81058aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058b2:	ee77 7a86 	vadd.f32	s15, s15, s12
 81058b6:	e7ec      	b.n	8105892 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81058b8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 81058ba:	eddf 5a0c 	vldr	s11, [pc, #48]	; 81058ec <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 81058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058c2:	ee07 3a90 	vmov	s15, r3
 81058c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 81058d2:	e7de      	b.n	8105892 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81058d4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81058d8:	e7cc      	b.n	8105874 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 81058da:	bf00      	nop
 81058dc:	58024400 	.word	0x58024400
 81058e0:	03d09000 	.word	0x03d09000
 81058e4:	4c742400 	.word	0x4c742400
 81058e8:	4bbebc20 	.word	0x4bbebc20
 81058ec:	4a742400 	.word	0x4a742400

081058f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81058f0:	494f      	ldr	r1, [pc, #316]	; (8105a30 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 81058f2:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81058f4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81058f6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81058f8:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81058fa:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 81058fc:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105900:	f3c6 5305 	ubfx	r3, r6, #20, #6
  if (pll3m != 0U)
 8105904:	f000 8090 	beq.w	8105a28 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105908:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810590c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105910:	f3c5 2200 	ubfx	r2, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105914:	4353      	muls	r3, r2
 8105916:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810591a:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 810591e:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105924:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105928:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 810592c:	d06e      	beq.n	8105a0c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 810592e:	2c02      	cmp	r4, #2
 8105930:	d05e      	beq.n	81059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8105932:	2c00      	cmp	r4, #0
 8105934:	d16a      	bne.n	8105a0c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105936:	680b      	ldr	r3, [r1, #0]
 8105938:	069b      	lsls	r3, r3, #26
 810593a:	d547      	bpl.n	81059cc <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810593c:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810593e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105940:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8105944:	4a3b      	ldr	r2, [pc, #236]	; (8105a34 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8105946:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105948:	ee07 2a90 	vmov	s15, r2
 810594c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105954:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105958:	ee07 3a10 	vmov	s14, r3
 810595c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105960:	ee37 7a26 	vadd.f32	s14, s14, s13
 8105964:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105968:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810596c:	4a30      	ldr	r2, [pc, #192]	; (8105a30 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 810596e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8105970:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105974:	ee07 3a10 	vmov	s14, r3
 8105978:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810597c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105980:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105984:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105988:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810598c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 810598e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8105992:	ee07 3a10 	vmov	s14, r3
 8105996:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810599a:	ee37 7a06 	vadd.f32	s14, s14, s12
 810599e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81059a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 81059a6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81059aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 81059ac:	f3c3 6306 	ubfx	r3, r3, #24, #7
 81059b0:	ee06 3a90 	vmov	s13, r3
 81059b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81059b8:	ee76 6a86 	vadd.f32	s13, s13, s12
 81059bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81059c0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 81059c4:	ee17 3a90 	vmov	r3, s15
 81059c8:	6083      	str	r3, [r0, #8]
}
 81059ca:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81059ce:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8105a38 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 81059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059d6:	ee07 3a90 	vmov	s15, r3
 81059da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059e2:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059e6:	eec5 6a87 	vdiv.f32	s13, s11, s14
 81059ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 81059ee:	e7bd      	b.n	810596c <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81059f2:	eddf 5a12 	vldr	s11, [pc, #72]	; 8105a3c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 81059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059fa:	ee07 3a90 	vmov	s15, r3
 81059fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a06:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105a0a:	e7ec      	b.n	81059e6 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105a0e:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8105a40 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8105a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a16:	ee07 3a90 	vmov	s15, r3
 8105a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a22:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105a26:	e7de      	b.n	81059e6 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105a28:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105a2c:	e7cc      	b.n	81059c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8105a2e:	bf00      	nop
 8105a30:	58024400 	.word	0x58024400
 8105a34:	03d09000 	.word	0x03d09000
 8105a38:	4c742400 	.word	0x4c742400
 8105a3c:	4bbebc20 	.word	0x4bbebc20
 8105a40:	4a742400 	.word	0x4a742400

08105a44 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a44:	494f      	ldr	r1, [pc, #316]	; (8105b84 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8105a46:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a48:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105a4a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105a4c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a4e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  if (pll1m != 0U)
 8105a50:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105a54:	f3c6 1305 	ubfx	r3, r6, #4, #6
  if (pll1m != 0U)
 8105a58:	f000 8090 	beq.w	8105b7c <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a5c:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a60:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105a64:	f005 0201 	and.w	r2, r5, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a68:	4353      	muls	r3, r2
 8105a6a:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a6e:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8105a72:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105a78:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105a7c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 8105a80:	d04e      	beq.n	8105b20 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8105a82:	2c02      	cmp	r4, #2
 8105a84:	d05e      	beq.n	8105b44 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8105a86:	2c00      	cmp	r4, #0
 8105a88:	d16a      	bne.n	8105b60 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a8a:	680b      	ldr	r3, [r1, #0]
 8105a8c:	069b      	lsls	r3, r3, #26
 8105a8e:	d567      	bpl.n	8105b60 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a90:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a92:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a94:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8105a98:	4a3b      	ldr	r2, [pc, #236]	; (8105b88 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 8105a9a:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a9c:	ee07 2a90 	vmov	s15, r2
 8105aa0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105aa8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105aac:	ee07 3a10 	vmov	s14, r3
 8105ab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105ab4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8105ab8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105abc:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105ac0:	4a30      	ldr	r2, [pc, #192]	; (8105b84 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8105ac2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105ac4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105ac8:	ee07 3a10 	vmov	s14, r3
 8105acc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105ad0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105ad4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105ad8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105adc:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105ae0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105ae2:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8105ae6:	ee07 3a10 	vmov	s14, r3
 8105aea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105aee:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105af2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105af6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105afa:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105afe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105b00:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8105b04:	ee06 3a90 	vmov	s13, r3
 8105b08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105b0c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8105b10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8105b14:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105b18:	ee17 3a90 	vmov	r3, s15
 8105b1c:	6083      	str	r3, [r0, #8]
}
 8105b1e:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8105b22:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8105b8c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8105b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b2a:	ee07 3a90 	vmov	s15, r3
 8105b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b36:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b3a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8105b3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8105b42:	e7bd      	b.n	8105ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b44:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8105b46:	eddf 5a12 	vldr	s11, [pc, #72]	; 8105b90 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8105b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b4e:	ee07 3a90 	vmov	s15, r3
 8105b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b5a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105b5e:	e7ec      	b.n	8105b3a <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b60:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8105b62:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8105b94 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8105b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b6a:	ee07 3a90 	vmov	s15, r3
 8105b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b76:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105b7a:	e7de      	b.n	8105b3a <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105b7c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105b80:	e7cc      	b.n	8105b1c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8105b82:	bf00      	nop
 8105b84:	58024400 	.word	0x58024400
 8105b88:	03d09000 	.word	0x03d09000
 8105b8c:	4a742400 	.word	0x4a742400
 8105b90:	4bbebc20 	.word	0x4bbebc20
 8105b94:	4c742400 	.word	0x4c742400

08105b98 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8105b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105b9a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8105b9e:	430b      	orrs	r3, r1
 8105ba0:	d114      	bne.n	8105bcc <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8105ba2:	4b9e      	ldr	r3, [pc, #632]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105ba6:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 8105baa:	2a04      	cmp	r2, #4
 8105bac:	d82f      	bhi.n	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105bae:	e8df f012 	tbh	[pc, r2, lsl #1]
 8105bb2:	0108      	.short	0x0108
 8105bb4:	0005001d 	.word	0x0005001d
 8105bb8:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105bbc:	6818      	ldr	r0, [r3, #0]
 8105bbe:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105bc2:	d01b      	beq.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105bc4:	a801      	add	r0, sp, #4
 8105bc6:	f7ff fe93 	bl	81058f0 <HAL_RCCEx_GetPLL3ClockFreq>
 8105bca:	e016      	b.n	8105bfa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105bcc:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8105bd0:	430b      	orrs	r3, r1
 8105bd2:	d11e      	bne.n	8105c12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105bd4:	4b91      	ldr	r3, [pc, #580]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105bd8:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
 8105bdc:	2a80      	cmp	r2, #128	; 0x80
 8105bde:	d0ed      	beq.n	8105bbc <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105be0:	d80f      	bhi.n	8105c02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8105be2:	2a00      	cmp	r2, #0
 8105be4:	f000 80ed 	beq.w	8105dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105be8:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
 8105bea:	d110      	bne.n	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105bec:	6818      	ldr	r0, [r3, #0]
 8105bee:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105bf2:	d003      	beq.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105bf4:	a801      	add	r0, sp, #4
 8105bf6:	f7ff fdd1 	bl	810579c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105bfa:	9801      	ldr	r0, [sp, #4]
}
 8105bfc:	b005      	add	sp, #20
 8105bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8105c02:	2ac0      	cmp	r2, #192	; 0xc0
 8105c04:	f000 813a 	beq.w	8105e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105c08:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
 8105c0c:	d01a      	beq.n	8105c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    switch (srcclk)
 8105c0e:	2000      	movs	r0, #0
  return frequency;
 8105c10:	e7f4      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105c12:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8105c16:	430b      	orrs	r3, r1
 8105c18:	d133      	bne.n	8105c82 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105c1a:	4b80      	ldr	r3, [pc, #512]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105c1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105c1e:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
    switch (saiclocksource)
 8105c22:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8105c26:	d0c9      	beq.n	8105bbc <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105c28:	d805      	bhi.n	8105c36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8105c2a:	2a00      	cmp	r2, #0
 8105c2c:	f000 80c9 	beq.w	8105dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105c30:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8105c34:	e7d9      	b.n	8105bea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105c36:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8105c3a:	f000 811f 	beq.w	8105e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105c3e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8105c42:	e7e3      	b.n	8105c0c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105c46:	6819      	ldr	r1, [r3, #0]
 8105c48:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105c4a:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105c4e:	d506      	bpl.n	8105c5e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8105c50:	b92a      	cbnz	r2, 8105c5e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105c52:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105c54:	4872      	ldr	r0, [pc, #456]	; (8105e20 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8105c56:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8105c5a:	40d8      	lsrs	r0, r3
 8105c5c:	e7ce      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105c5e:	4b6f      	ldr	r3, [pc, #444]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105c60:	6819      	ldr	r1, [r3, #0]
 8105c62:	05c9      	lsls	r1, r1, #23
 8105c64:	d503      	bpl.n	8105c6e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8105c66:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8105c6a:	f000 8109 	beq.w	8105e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105c6e:	6818      	ldr	r0, [r3, #0]
 8105c70:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8105c74:	d0c2      	beq.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 8105c76:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8105c7a:	486a      	ldr	r0, [pc, #424]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8105c7c:	bf18      	it	ne
 8105c7e:	2000      	movne	r0, #0
 8105c80:	e7bc      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105c82:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8105c86:	430b      	orrs	r3, r1
 8105c88:	d125      	bne.n	8105cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8105c8a:	4b64      	ldr	r3, [pc, #400]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105c8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105c8e:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
    switch (saiclocksource)
 8105c92:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8105c96:	d091      	beq.n	8105bbc <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105c98:	d805      	bhi.n	8105ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8105c9a:	2a00      	cmp	r2, #0
 8105c9c:	f000 8091 	beq.w	8105dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105ca0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8105ca4:	e7a1      	b.n	8105bea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105ca6:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8105caa:	f000 80e7 	beq.w	8105e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105cae:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
    switch (srcclk)
 8105cb2:	d1ac      	bne.n	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105cb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105cb6:	6819      	ldr	r1, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105cb8:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105cba:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105cbc:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105cc0:	d501      	bpl.n	8105cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8105cc2:	2a00      	cmp	r2, #0
 8105cc4:	d0c6      	beq.n	8105c54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105cc6:	05d9      	lsls	r1, r3, #23
 8105cc8:	d503      	bpl.n	8105cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8105cca:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8105cce:	f000 80d7 	beq.w	8105e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105cd2:	4b52      	ldr	r3, [pc, #328]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105cd4:	e7cb      	b.n	8105c6e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105cd6:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8105cda:	430b      	orrs	r3, r1
 8105cdc:	d114      	bne.n	8105d08 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105cde:	4b4f      	ldr	r3, [pc, #316]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105ce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105ce2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
 8105ce6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8105cea:	f43f af67 	beq.w	8105bbc <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105cee:	d804      	bhi.n	8105cfa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8105cf0:	2a00      	cmp	r2, #0
 8105cf2:	d066      	beq.n	8105dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105cf4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8105cf8:	e777      	b.n	8105bea <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105cfa:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8105cfe:	f000 80bd 	beq.w	8105e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105d02:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8105d06:	e7d4      	b.n	8105cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8105d08:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8105d0c:	430b      	orrs	r3, r1
 8105d0e:	d134      	bne.n	8105d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8105d10:	4a42      	ldr	r2, [pc, #264]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105d12:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8105d14:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8105d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105d1c:	f000 808a 	beq.w	8105e34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8105d20:	d80d      	bhi.n	8105d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8105d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105d26:	d016      	beq.n	8105d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d2c:	d01c      	beq.n	8105d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105d2e:	2b00      	cmp	r3, #0
 8105d30:	f47f af6d 	bne.w	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 8105d34:	b005      	add	sp, #20
 8105d36:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8105d3a:	f7fe bef5 	b.w	8104b28 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 8105d3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105d42:	d07e      	beq.n	8105e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8105d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    switch (srcclk)
 8105d48:	f47f af61 	bne.w	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105d4c:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 8105d4e:	4b35      	ldr	r3, [pc, #212]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8105d50:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8105d54:	e079      	b.n	8105e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105d56:	6810      	ldr	r0, [r2, #0]
 8105d58:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105d5c:	f43f af4e 	beq.w	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105d60:	a801      	add	r0, sp, #4
 8105d62:	f7ff fd1b 	bl	810579c <HAL_RCCEx_GetPLL2ClockFreq>
 8105d66:	e034      	b.n	8105dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105d68:	6810      	ldr	r0, [r2, #0]
 8105d6a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105d6e:	f43f af45 	beq.w	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d72:	a801      	add	r0, sp, #4
 8105d74:	f7ff fdbc 	bl	81058f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105d78:	e02b      	b.n	8105dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8105d7a:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8105d7e:	430b      	orrs	r3, r1
 8105d80:	d117      	bne.n	8105db2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105d82:	4b26      	ldr	r3, [pc, #152]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105d84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105d86:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
 8105d8a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8105d8e:	d006      	beq.n	8105d9e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8105d90:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8105d94:	d08e      	beq.n	8105cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8105d96:	2a00      	cmp	r2, #0
 8105d98:	f47f af39 	bne.w	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105d9c:	e726      	b.n	8105bec <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105d9e:	6818      	ldr	r0, [r3, #0]
 8105da0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105da4:	f43f af2a 	beq.w	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105da8:	a801      	add	r0, sp, #4
 8105daa:	f7ff fda1 	bl	81058f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105dae:	9803      	ldr	r0, [sp, #12]
 8105db0:	e724      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105db2:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8105db6:	430b      	orrs	r3, r1
 8105db8:	d116      	bne.n	8105de8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8105dba:	4b18      	ldr	r3, [pc, #96]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105dbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8105dbe:	03d2      	lsls	r2, r2, #15
 8105dc0:	d409      	bmi.n	8105dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105dc2:	6818      	ldr	r0, [r3, #0]
 8105dc4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8105dc8:	f43f af18 	beq.w	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105dcc:	a801      	add	r0, sp, #4
 8105dce:	f7ff fe39 	bl	8105a44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105dd2:	9802      	ldr	r0, [sp, #8]
 8105dd4:	e712      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105dd6:	6818      	ldr	r0, [r3, #0]
 8105dd8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105ddc:	f43f af0e 	beq.w	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105de0:	a801      	add	r0, sp, #4
 8105de2:	f7ff fcdb 	bl	810579c <HAL_RCCEx_GetPLL2ClockFreq>
 8105de6:	e7e2      	b.n	8105dae <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105de8:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8105dec:	430b      	orrs	r3, r1
 8105dee:	d12f      	bne.n	8105e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8105df0:	4a0a      	ldr	r2, [pc, #40]	; (8105e1c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105df2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105df4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8105df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105dfc:	d01a      	beq.n	8105e34 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8105dfe:	d813      	bhi.n	8105e28 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 8105e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105e04:	d0a7      	beq.n	8105d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e0a:	d0ad      	beq.n	8105d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105e0c:	2b00      	cmp	r3, #0
 8105e0e:	f47f aefe 	bne.w	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 8105e12:	b005      	add	sp, #20
 8105e14:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105e18:	f7ff bcae 	b.w	8105778 <HAL_RCCEx_GetD3PCLK1Freq>
 8105e1c:	58024400 	.word	0x58024400
 8105e20:	03d09000 	.word	0x03d09000
 8105e24:	017d7840 	.word	0x017d7840
    switch (srcclk)
 8105e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105e2c:	d009      	beq.n	8105e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8105e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105e32:	e789      	b.n	8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105e34:	6810      	ldr	r0, [r2, #0]
 8105e36:	f010 0004 	ands.w	r0, r0, #4
 8105e3a:	f43f aedf 	beq.w	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105e3e:	6813      	ldr	r3, [r2, #0]
 8105e40:	e708      	b.n	8105c54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105e42:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 8105e44:	4b0f      	ldr	r3, [pc, #60]	; (8105e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8105e46:	f410 7080 	ands.w	r0, r0, #256	; 0x100
          frequency = HSE_VALUE;
 8105e4a:	bf18      	it	ne
 8105e4c:	4618      	movne	r0, r3
 8105e4e:	e6d5      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105e50:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8105e54:	4301      	orrs	r1, r0
 8105e56:	f47f aeda 	bne.w	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8105e5a:	4a0b      	ldr	r2, [pc, #44]	; (8105e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8105e5c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8105e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8105e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105e66:	d007      	beq.n	8105e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8105e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e6c:	f43f af73 	beq.w	8105d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105e70:	2b00      	cmp	r3, #0
 8105e72:	f47f aecc 	bne.w	8105c0e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105e76:	e769      	b.n	8105d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105e78:	6810      	ldr	r0, [r2, #0]
 8105e7a:	e7a3      	b.n	8105dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8105e7c:	4803      	ldr	r0, [pc, #12]	; (8105e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8105e7e:	e6bd      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 8105e80:	4800      	ldr	r0, [pc, #0]	; (8105e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8105e82:	e6bb      	b.n	8105bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8105e84:	003d0900 	.word	0x003d0900
 8105e88:	58024400 	.word	0x58024400
 8105e8c:	00bb8000 	.word	0x00bb8000

08105e90 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105e90:	6a03      	ldr	r3, [r0, #32]
 8105e92:	f023 0301 	bic.w	r3, r3, #1
 8105e96:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105e98:	6a03      	ldr	r3, [r0, #32]
{
 8105e9a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105e9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105e9e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105ea0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105ea2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8105ea6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8105eaa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105eac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8105eae:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8105eb2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105eb4:	4d1b      	ldr	r5, [pc, #108]	; (8105f24 <TIM_OC1_SetConfig+0x94>)
 8105eb6:	42a8      	cmp	r0, r5
 8105eb8:	d00f      	beq.n	8105eda <TIM_OC1_SetConfig+0x4a>
 8105eba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ebe:	42a8      	cmp	r0, r5
 8105ec0:	d00b      	beq.n	8105eda <TIM_OC1_SetConfig+0x4a>
 8105ec2:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8105ec6:	42a8      	cmp	r0, r5
 8105ec8:	d007      	beq.n	8105eda <TIM_OC1_SetConfig+0x4a>
 8105eca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ece:	42a8      	cmp	r0, r5
 8105ed0:	d003      	beq.n	8105eda <TIM_OC1_SetConfig+0x4a>
 8105ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ed6:	42a8      	cmp	r0, r5
 8105ed8:	d11e      	bne.n	8105f18 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105eda:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8105edc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8105ee0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105ee2:	4d10      	ldr	r5, [pc, #64]	; (8105f24 <TIM_OC1_SetConfig+0x94>)
 8105ee4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8105ee6:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105eea:	d00f      	beq.n	8105f0c <TIM_OC1_SetConfig+0x7c>
 8105eec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ef0:	42a8      	cmp	r0, r5
 8105ef2:	d00b      	beq.n	8105f0c <TIM_OC1_SetConfig+0x7c>
 8105ef4:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8105ef8:	42a8      	cmp	r0, r5
 8105efa:	d007      	beq.n	8105f0c <TIM_OC1_SetConfig+0x7c>
 8105efc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f00:	42a8      	cmp	r0, r5
 8105f02:	d003      	beq.n	8105f0c <TIM_OC1_SetConfig+0x7c>
 8105f04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f08:	42a8      	cmp	r0, r5
 8105f0a:	d105      	bne.n	8105f18 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105f0c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105f10:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105f14:	4334      	orrs	r4, r6
 8105f16:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105f18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105f1a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105f1c:	684a      	ldr	r2, [r1, #4]
 8105f1e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105f20:	6203      	str	r3, [r0, #32]
}
 8105f22:	bd70      	pop	{r4, r5, r6, pc}
 8105f24:	40010000 	.word	0x40010000

08105f28 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105f28:	6a03      	ldr	r3, [r0, #32]
 8105f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105f2e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105f30:	6a03      	ldr	r3, [r0, #32]
{
 8105f32:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105f34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105f36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105f38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105f3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8105f3e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8105f42:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105f44:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8105f46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105f4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105f4e:	4d16      	ldr	r5, [pc, #88]	; (8105fa8 <TIM_OC3_SetConfig+0x80>)
 8105f50:	42a8      	cmp	r0, r5
 8105f52:	d003      	beq.n	8105f5c <TIM_OC3_SetConfig+0x34>
 8105f54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f58:	42a8      	cmp	r0, r5
 8105f5a:	d10d      	bne.n	8105f78 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105f5c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8105f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105f62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105f66:	4d10      	ldr	r5, [pc, #64]	; (8105fa8 <TIM_OC3_SetConfig+0x80>)
 8105f68:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8105f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105f6e:	d00e      	beq.n	8105f8e <TIM_OC3_SetConfig+0x66>
 8105f70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f74:	42a8      	cmp	r0, r5
 8105f76:	d00a      	beq.n	8105f8e <TIM_OC3_SetConfig+0x66>
 8105f78:	4d0c      	ldr	r5, [pc, #48]	; (8105fac <TIM_OC3_SetConfig+0x84>)
 8105f7a:	42a8      	cmp	r0, r5
 8105f7c:	d007      	beq.n	8105f8e <TIM_OC3_SetConfig+0x66>
 8105f7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f82:	42a8      	cmp	r0, r5
 8105f84:	d003      	beq.n	8105f8e <TIM_OC3_SetConfig+0x66>
 8105f86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f8a:	42a8      	cmp	r0, r5
 8105f8c:	d106      	bne.n	8105f9c <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105f8e:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8105f92:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105f96:	4334      	orrs	r4, r6
 8105f98:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105f9c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105f9e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8105fa0:	684a      	ldr	r2, [r1, #4]
 8105fa2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105fa4:	6203      	str	r3, [r0, #32]
}
 8105fa6:	bd70      	pop	{r4, r5, r6, pc}
 8105fa8:	40010000 	.word	0x40010000
 8105fac:	40014000 	.word	0x40014000

08105fb0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8105fb0:	6a03      	ldr	r3, [r0, #32]
 8105fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105fb6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105fb8:	6a03      	ldr	r3, [r0, #32]
{
 8105fba:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105fbc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105fbe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105fc0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105fc2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8105fc6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105fca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105fce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8105fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105fd4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105fd8:	4d0e      	ldr	r5, [pc, #56]	; (8106014 <TIM_OC4_SetConfig+0x64>)
 8105fda:	42a8      	cmp	r0, r5
 8105fdc:	d00f      	beq.n	8105ffe <TIM_OC4_SetConfig+0x4e>
 8105fde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105fe2:	42a8      	cmp	r0, r5
 8105fe4:	d00b      	beq.n	8105ffe <TIM_OC4_SetConfig+0x4e>
 8105fe6:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8105fea:	42a8      	cmp	r0, r5
 8105fec:	d007      	beq.n	8105ffe <TIM_OC4_SetConfig+0x4e>
 8105fee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ff2:	42a8      	cmp	r0, r5
 8105ff4:	d003      	beq.n	8105ffe <TIM_OC4_SetConfig+0x4e>
 8105ff6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ffa:	42a8      	cmp	r0, r5
 8105ffc:	d104      	bne.n	8106008 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105ffe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106000:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106004:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106008:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810600a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810600c:	684a      	ldr	r2, [r1, #4]
 810600e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106010:	6203      	str	r3, [r0, #32]
}
 8106012:	bd30      	pop	{r4, r5, pc}
 8106014:	40010000 	.word	0x40010000

08106018 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106018:	6a03      	ldr	r3, [r0, #32]
 810601a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810601e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106020:	6a03      	ldr	r3, [r0, #32]
{
 8106022:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106024:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106026:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106028:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810602a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 810602e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8106032:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106034:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8106036:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810603a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810603e:	4d0f      	ldr	r5, [pc, #60]	; (810607c <TIM_OC5_SetConfig+0x64>)
 8106040:	42a8      	cmp	r0, r5
 8106042:	d00f      	beq.n	8106064 <TIM_OC5_SetConfig+0x4c>
 8106044:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106048:	42a8      	cmp	r0, r5
 810604a:	d00b      	beq.n	8106064 <TIM_OC5_SetConfig+0x4c>
 810604c:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8106050:	42a8      	cmp	r0, r5
 8106052:	d007      	beq.n	8106064 <TIM_OC5_SetConfig+0x4c>
 8106054:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106058:	42a8      	cmp	r0, r5
 810605a:	d003      	beq.n	8106064 <TIM_OC5_SetConfig+0x4c>
 810605c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106060:	42a8      	cmp	r0, r5
 8106062:	d104      	bne.n	810606e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106064:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106066:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810606a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810606e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106070:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8106072:	684a      	ldr	r2, [r1, #4]
 8106074:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106076:	6203      	str	r3, [r0, #32]
}
 8106078:	bd30      	pop	{r4, r5, pc}
 810607a:	bf00      	nop
 810607c:	40010000 	.word	0x40010000

08106080 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106080:	6a03      	ldr	r3, [r0, #32]
 8106082:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8106086:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106088:	6a03      	ldr	r3, [r0, #32]
{
 810608a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810608c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810608e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106090:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106092:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8106096:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810609a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810609e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81060a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81060a4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81060a8:	4d0e      	ldr	r5, [pc, #56]	; (81060e4 <TIM_OC6_SetConfig+0x64>)
 81060aa:	42a8      	cmp	r0, r5
 81060ac:	d00f      	beq.n	81060ce <TIM_OC6_SetConfig+0x4e>
 81060ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81060b2:	42a8      	cmp	r0, r5
 81060b4:	d00b      	beq.n	81060ce <TIM_OC6_SetConfig+0x4e>
 81060b6:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 81060ba:	42a8      	cmp	r0, r5
 81060bc:	d007      	beq.n	81060ce <TIM_OC6_SetConfig+0x4e>
 81060be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81060c2:	42a8      	cmp	r0, r5
 81060c4:	d003      	beq.n	81060ce <TIM_OC6_SetConfig+0x4e>
 81060c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81060ca:	42a8      	cmp	r0, r5
 81060cc:	d104      	bne.n	81060d8 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81060ce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 81060d0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81060d4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81060d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81060da:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81060dc:	684a      	ldr	r2, [r1, #4]
 81060de:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81060e0:	6203      	str	r3, [r0, #32]
}
 81060e2:	bd30      	pop	{r4, r5, pc}
 81060e4:	40010000 	.word	0x40010000

081060e8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 81060e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 81060ec:	2b01      	cmp	r3, #1
 81060ee:	d12f      	bne.n	8106150 <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 81060f0:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81060f2:	4a18      	ldr	r2, [pc, #96]	; (8106154 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 81060f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81060f8:	6803      	ldr	r3, [r0, #0]
 81060fa:	4293      	cmp	r3, r2
 81060fc:	d01a      	beq.n	8106134 <HAL_TIM_Base_Start+0x4c>
 81060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106102:	d017      	beq.n	8106134 <HAL_TIM_Base_Start+0x4c>
 8106104:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8106108:	4293      	cmp	r3, r2
 810610a:	d013      	beq.n	8106134 <HAL_TIM_Base_Start+0x4c>
 810610c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106110:	4293      	cmp	r3, r2
 8106112:	d00f      	beq.n	8106134 <HAL_TIM_Base_Start+0x4c>
 8106114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106118:	4293      	cmp	r3, r2
 810611a:	d00b      	beq.n	8106134 <HAL_TIM_Base_Start+0x4c>
 810611c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8106120:	4293      	cmp	r3, r2
 8106122:	d007      	beq.n	8106134 <HAL_TIM_Base_Start+0x4c>
 8106124:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8106128:	4293      	cmp	r3, r2
 810612a:	d003      	beq.n	8106134 <HAL_TIM_Base_Start+0x4c>
 810612c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8106130:	4293      	cmp	r3, r2
 8106132:	d107      	bne.n	8106144 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106134:	6899      	ldr	r1, [r3, #8]
 8106136:	4a08      	ldr	r2, [pc, #32]	; (8106158 <HAL_TIM_Base_Start+0x70>)
 8106138:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810613a:	2a06      	cmp	r2, #6
 810613c:	d006      	beq.n	810614c <HAL_TIM_Base_Start+0x64>
 810613e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8106142:	d003      	beq.n	810614c <HAL_TIM_Base_Start+0x64>
    __HAL_TIM_ENABLE(htim);
 8106144:	681a      	ldr	r2, [r3, #0]
 8106146:	f042 0201 	orr.w	r2, r2, #1
 810614a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 810614c:	2000      	movs	r0, #0
}
 810614e:	4770      	bx	lr
    return HAL_ERROR;
 8106150:	2001      	movs	r0, #1
 8106152:	4770      	bx	lr
 8106154:	40010000 	.word	0x40010000
 8106158:	00010007 	.word	0x00010007

0810615c <HAL_TIM_PWM_MspInit>:
 810615c:	4770      	bx	lr
	...

08106160 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106160:	4a30      	ldr	r2, [pc, #192]	; (8106224 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8106162:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106164:	4290      	cmp	r0, r2
 8106166:	d012      	beq.n	810618e <TIM_Base_SetConfig+0x2e>
 8106168:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 810616c:	d00f      	beq.n	810618e <TIM_Base_SetConfig+0x2e>
 810616e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8106172:	4290      	cmp	r0, r2
 8106174:	d00b      	beq.n	810618e <TIM_Base_SetConfig+0x2e>
 8106176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810617a:	4290      	cmp	r0, r2
 810617c:	d007      	beq.n	810618e <TIM_Base_SetConfig+0x2e>
 810617e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106182:	4290      	cmp	r0, r2
 8106184:	d003      	beq.n	810618e <TIM_Base_SetConfig+0x2e>
 8106186:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 810618a:	4290      	cmp	r0, r2
 810618c:	d119      	bne.n	81061c2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 810618e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8106194:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106196:	4a23      	ldr	r2, [pc, #140]	; (8106224 <TIM_Base_SetConfig+0xc4>)
 8106198:	4290      	cmp	r0, r2
 810619a:	d01d      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 810619c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 81061a0:	d01a      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 81061a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 81061a6:	4290      	cmp	r0, r2
 81061a8:	d016      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 81061aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061ae:	4290      	cmp	r0, r2
 81061b0:	d012      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 81061b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061b6:	4290      	cmp	r0, r2
 81061b8:	d00e      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 81061ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 81061be:	4290      	cmp	r0, r2
 81061c0:	d00a      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 81061c2:	4a19      	ldr	r2, [pc, #100]	; (8106228 <TIM_Base_SetConfig+0xc8>)
 81061c4:	4290      	cmp	r0, r2
 81061c6:	d007      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 81061c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061cc:	4290      	cmp	r0, r2
 81061ce:	d003      	beq.n	81061d8 <TIM_Base_SetConfig+0x78>
 81061d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061d4:	4290      	cmp	r0, r2
 81061d6:	d103      	bne.n	81061e0 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81061d8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 81061da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81061de:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81061e0:	694a      	ldr	r2, [r1, #20]
 81061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81061e6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 81061e8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 81061ea:	688b      	ldr	r3, [r1, #8]
 81061ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 81061ee:	680b      	ldr	r3, [r1, #0]
 81061f0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81061f2:	4b0c      	ldr	r3, [pc, #48]	; (8106224 <TIM_Base_SetConfig+0xc4>)
 81061f4:	4298      	cmp	r0, r3
 81061f6:	d00f      	beq.n	8106218 <TIM_Base_SetConfig+0xb8>
 81061f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 81061fc:	4298      	cmp	r0, r3
 81061fe:	d00b      	beq.n	8106218 <TIM_Base_SetConfig+0xb8>
 8106200:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8106204:	4298      	cmp	r0, r3
 8106206:	d007      	beq.n	8106218 <TIM_Base_SetConfig+0xb8>
 8106208:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810620c:	4298      	cmp	r0, r3
 810620e:	d003      	beq.n	8106218 <TIM_Base_SetConfig+0xb8>
 8106210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8106214:	4298      	cmp	r0, r3
 8106216:	d101      	bne.n	810621c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8106218:	690b      	ldr	r3, [r1, #16]
 810621a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 810621c:	2301      	movs	r3, #1
 810621e:	6143      	str	r3, [r0, #20]
}
 8106220:	4770      	bx	lr
 8106222:	bf00      	nop
 8106224:	40010000 	.word	0x40010000
 8106228:	40014000 	.word	0x40014000

0810622c <HAL_TIM_Base_Init>:
{
 810622c:	b510      	push	{r4, lr}
  if (htim == NULL)
 810622e:	4604      	mov	r4, r0
 8106230:	b350      	cbz	r0, 8106288 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8106232:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8106236:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 810623a:	b91b      	cbnz	r3, 8106244 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 810623c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8106240:	f7fc fb2c 	bl	810289c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8106244:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106246:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8106248:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810624c:	1d21      	adds	r1, r4, #4
 810624e:	f7ff ff87 	bl	8106160 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106252:	2301      	movs	r3, #1
 8106254:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8106258:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810625a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 810625e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8106262:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8106266:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 810626a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810626e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106272:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8106276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810627a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 810627e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8106282:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8106286:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8106288:	2001      	movs	r0, #1
 810628a:	e7fc      	b.n	8106286 <HAL_TIM_Base_Init+0x5a>

0810628c <HAL_TIM_PWM_Init>:
{
 810628c:	b510      	push	{r4, lr}
  if (htim == NULL)
 810628e:	4604      	mov	r4, r0
 8106290:	b350      	cbz	r0, 81062e8 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8106292:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8106296:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 810629a:	b91b      	cbnz	r3, 81062a4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 810629c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 81062a0:	f7ff ff5c 	bl	810615c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 81062a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81062a6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 81062a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81062ac:	1d21      	adds	r1, r4, #4
 81062ae:	f7ff ff57 	bl	8106160 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81062b2:	2301      	movs	r3, #1
 81062b4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 81062b8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81062ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 81062be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 81062c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 81062c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 81062ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81062ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81062d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 81062d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81062da:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 81062de:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 81062e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 81062e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 81062e8:	2001      	movs	r0, #1
 81062ea:	e7fc      	b.n	81062e6 <HAL_TIM_PWM_Init+0x5a>

081062ec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81062ec:	6a03      	ldr	r3, [r0, #32]
 81062ee:	f023 0310 	bic.w	r3, r3, #16
 81062f2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 81062f4:	6a03      	ldr	r3, [r0, #32]
{
 81062f6:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 81062f8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 81062fa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81062fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81062fe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8106302:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106306:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810630a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 810630c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106310:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106314:	4d16      	ldr	r5, [pc, #88]	; (8106370 <TIM_OC2_SetConfig+0x84>)
 8106316:	42a8      	cmp	r0, r5
 8106318:	d003      	beq.n	8106322 <TIM_OC2_SetConfig+0x36>
 810631a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810631e:	42a8      	cmp	r0, r5
 8106320:	d10d      	bne.n	810633e <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106322:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8106324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106328:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810632c:	4d10      	ldr	r5, [pc, #64]	; (8106370 <TIM_OC2_SetConfig+0x84>)
 810632e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8106330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106334:	d00e      	beq.n	8106354 <TIM_OC2_SetConfig+0x68>
 8106336:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810633a:	42a8      	cmp	r0, r5
 810633c:	d00a      	beq.n	8106354 <TIM_OC2_SetConfig+0x68>
 810633e:	4d0d      	ldr	r5, [pc, #52]	; (8106374 <TIM_OC2_SetConfig+0x88>)
 8106340:	42a8      	cmp	r0, r5
 8106342:	d007      	beq.n	8106354 <TIM_OC2_SetConfig+0x68>
 8106344:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106348:	42a8      	cmp	r0, r5
 810634a:	d003      	beq.n	8106354 <TIM_OC2_SetConfig+0x68>
 810634c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106350:	42a8      	cmp	r0, r5
 8106352:	d106      	bne.n	8106362 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106354:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106358:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 810635c:	4334      	orrs	r4, r6
 810635e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8106362:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8106364:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8106366:	684a      	ldr	r2, [r1, #4]
 8106368:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 810636a:	6203      	str	r3, [r0, #32]
}
 810636c:	bd70      	pop	{r4, r5, r6, pc}
 810636e:	bf00      	nop
 8106370:	40010000 	.word	0x40010000
 8106374:	40014000 	.word	0x40014000

08106378 <HAL_TIM_PWM_ConfigChannel>:
{
 8106378:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 810637a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 810637e:	2b01      	cmp	r3, #1
{
 8106380:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8106382:	d074      	beq.n	810646e <HAL_TIM_PWM_ConfigChannel+0xf6>
 8106384:	2301      	movs	r3, #1
  switch (Channel)
 8106386:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8106388:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 810638c:	d04f      	beq.n	810642e <HAL_TIM_PWM_ConfigChannel+0xb6>
 810638e:	d809      	bhi.n	81063a4 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8106390:	2a04      	cmp	r2, #4
 8106392:	d02c      	beq.n	81063ee <HAL_TIM_PWM_ConfigChannel+0x76>
 8106394:	2a08      	cmp	r2, #8
 8106396:	d03a      	beq.n	810640e <HAL_TIM_PWM_ConfigChannel+0x96>
 8106398:	b1c2      	cbz	r2, 81063cc <HAL_TIM_PWM_ConfigChannel+0x54>
 810639a:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 810639c:	2300      	movs	r3, #0
 810639e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 81063a2:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 81063a4:	2a10      	cmp	r2, #16
 81063a6:	d052      	beq.n	810644e <HAL_TIM_PWM_ConfigChannel+0xd6>
 81063a8:	2a14      	cmp	r2, #20
 81063aa:	d1f6      	bne.n	810639a <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81063ac:	6800      	ldr	r0, [r0, #0]
 81063ae:	f7ff fe67 	bl	8106080 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81063b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81063b4:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81063b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 81063ba:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81063bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 81063be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81063c2:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81063c4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 81063c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 81063ca:	e04e      	b.n	810646a <HAL_TIM_PWM_ConfigChannel+0xf2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81063cc:	6800      	ldr	r0, [r0, #0]
 81063ce:	f7ff fd5f 	bl	8105e90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81063d2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81063d4:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81063d6:	f043 0308 	orr.w	r3, r3, #8
 81063da:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81063dc:	6983      	ldr	r3, [r0, #24]
 81063de:	f023 0304 	bic.w	r3, r3, #4
 81063e2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81063e4:	6983      	ldr	r3, [r0, #24]
 81063e6:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81063e8:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 81063ea:	2000      	movs	r0, #0
      break;
 81063ec:	e7d6      	b.n	810639c <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81063ee:	6800      	ldr	r0, [r0, #0]
 81063f0:	f7ff ff7c 	bl	81062ec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81063f4:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81063f6:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81063f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 81063fc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81063fe:	6983      	ldr	r3, [r0, #24]
 8106400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106404:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106406:	6983      	ldr	r3, [r0, #24]
 8106408:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 810640c:	e7ec      	b.n	81063e8 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810640e:	6800      	ldr	r0, [r0, #0]
 8106410:	f7ff fd8a 	bl	8105f28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106414:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106416:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106418:	f043 0308 	orr.w	r3, r3, #8
 810641c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810641e:	69c3      	ldr	r3, [r0, #28]
 8106420:	f023 0304 	bic.w	r3, r3, #4
 8106424:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106426:	69c3      	ldr	r3, [r0, #28]
 8106428:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810642a:	61c3      	str	r3, [r0, #28]
      break;
 810642c:	e7dd      	b.n	81063ea <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810642e:	6800      	ldr	r0, [r0, #0]
 8106430:	f7ff fdbe 	bl	8105fb0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106434:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106436:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 810643c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810643e:	69c3      	ldr	r3, [r0, #28]
 8106440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106444:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106446:	69c3      	ldr	r3, [r0, #28]
 8106448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 810644c:	e7ed      	b.n	810642a <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810644e:	6800      	ldr	r0, [r0, #0]
 8106450:	f7ff fde2 	bl	8106018 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106454:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106456:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106458:	f043 0308 	orr.w	r3, r3, #8
 810645c:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810645e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8106460:	f023 0304 	bic.w	r3, r3, #4
 8106464:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106466:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8106468:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810646a:	6543      	str	r3, [r0, #84]	; 0x54
 810646c:	e7bd      	b.n	81063ea <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 810646e:	2002      	movs	r0, #2
 8106470:	e797      	b.n	81063a2 <HAL_TIM_PWM_ConfigChannel+0x2a>

08106472 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8106472:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8106474:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106476:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106478:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810647c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8106480:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106482:	6083      	str	r3, [r0, #8]
}
 8106484:	bd10      	pop	{r4, pc}
	...

08106488 <HAL_TIM_ConfigClockSource>:
{
 8106488:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 810648a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 810648e:	2b01      	cmp	r3, #1
{
 8106490:	4604      	mov	r4, r0
 8106492:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8106496:	f000 80aa 	beq.w	81065ee <HAL_TIM_ConfigClockSource+0x166>
 810649a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 810649c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 81064a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 81064a4:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81064a6:	4b53      	ldr	r3, [pc, #332]	; (81065f4 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 81064a8:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81064aa:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 81064ac:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 81064ae:	680b      	ldr	r3, [r1, #0]
 81064b0:	2b70      	cmp	r3, #112	; 0x70
 81064b2:	d056      	beq.n	8106562 <HAL_TIM_ConfigClockSource+0xda>
 81064b4:	d83c      	bhi.n	8106530 <HAL_TIM_ConfigClockSource+0xa8>
 81064b6:	2b50      	cmp	r3, #80	; 0x50
 81064b8:	d067      	beq.n	810658a <HAL_TIM_ConfigClockSource+0x102>
 81064ba:	d81d      	bhi.n	81064f8 <HAL_TIM_ConfigClockSource+0x70>
 81064bc:	2b40      	cmp	r3, #64	; 0x40
 81064be:	d07d      	beq.n	81065bc <HAL_TIM_ConfigClockSource+0x134>
 81064c0:	d806      	bhi.n	81064d0 <HAL_TIM_ConfigClockSource+0x48>
 81064c2:	2b20      	cmp	r3, #32
 81064c4:	d00e      	beq.n	81064e4 <HAL_TIM_ConfigClockSource+0x5c>
 81064c6:	d80b      	bhi.n	81064e0 <HAL_TIM_ConfigClockSource+0x58>
 81064c8:	f033 0210 	bics.w	r2, r3, #16
 81064cc:	d00a      	beq.n	81064e4 <HAL_TIM_ConfigClockSource+0x5c>
 81064ce:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 81064d0:	2301      	movs	r3, #1
 81064d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 81064d6:	2300      	movs	r3, #0
 81064d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 81064dc:	4610      	mov	r0, r2
 81064de:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 81064e0:	2b30      	cmp	r3, #48	; 0x30
 81064e2:	d1f4      	bne.n	81064ce <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 81064e4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 81064e6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 81064ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81064ee:	431a      	orrs	r2, r3
 81064f0:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 81064f4:	6082      	str	r2, [r0, #8]
 81064f6:	e03d      	b.n	8106574 <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
 81064f8:	2b60      	cmp	r3, #96	; 0x60
 81064fa:	d1e9      	bne.n	81064d0 <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81064fc:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 81064fe:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106500:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106502:	f023 0310 	bic.w	r3, r3, #16
 8106506:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106508:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 810650a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810650c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8106514:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106518:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 810651c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 810651e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8106520:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8106522:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810652a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 810652e:	e020      	b.n	8106572 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8106530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106534:	d020      	beq.n	8106578 <HAL_TIM_ConfigClockSource+0xf0>
 8106536:	d804      	bhi.n	8106542 <HAL_TIM_ConfigClockSource+0xba>
  HAL_StatusTypeDef status = HAL_OK;
 8106538:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 810653c:	bf18      	it	ne
 810653e:	2201      	movne	r2, #1
 8106540:	e7c6      	b.n	81064d0 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8106542:	492d      	ldr	r1, [pc, #180]	; (81065f8 <HAL_TIM_ConfigClockSource+0x170>)
 8106544:	428b      	cmp	r3, r1
 8106546:	d0cd      	beq.n	81064e4 <HAL_TIM_ConfigClockSource+0x5c>
 8106548:	d805      	bhi.n	8106556 <HAL_TIM_ConfigClockSource+0xce>
 810654a:	f023 0110 	bic.w	r1, r3, #16
 810654e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8106552:	d0c7      	beq.n	81064e4 <HAL_TIM_ConfigClockSource+0x5c>
 8106554:	e7bc      	b.n	81064d0 <HAL_TIM_ConfigClockSource+0x48>
 8106556:	4929      	ldr	r1, [pc, #164]	; (81065fc <HAL_TIM_ConfigClockSource+0x174>)
 8106558:	428b      	cmp	r3, r1
 810655a:	d0c3      	beq.n	81064e4 <HAL_TIM_ConfigClockSource+0x5c>
 810655c:	3110      	adds	r1, #16
 810655e:	428b      	cmp	r3, r1
 8106560:	e7f7      	b.n	8106552 <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 8106562:	68cb      	ldr	r3, [r1, #12]
 8106564:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8106568:	f7ff ff83 	bl	8106472 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810656c:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810656e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8106572:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8106574:	2200      	movs	r2, #0
}
 8106576:	e7ab      	b.n	81064d0 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
 8106578:	68cb      	ldr	r3, [r1, #12]
 810657a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 810657e:	f7ff ff78 	bl	8106472 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8106582:	6883      	ldr	r3, [r0, #8]
 8106584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8106588:	e7f3      	b.n	8106572 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 810658a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 810658c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 810658e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106590:	6a03      	ldr	r3, [r0, #32]
 8106592:	f023 0301 	bic.w	r3, r3, #1
 8106596:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106598:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810659a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810659e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81065a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 81065a6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 81065a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 81065aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 81065ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 81065ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81065b6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 81065ba:	e7da      	b.n	8106572 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 81065bc:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 81065be:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 81065c0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81065c2:	6a03      	ldr	r3, [r0, #32]
 81065c4:	f023 0301 	bic.w	r3, r3, #1
 81065c8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 81065ca:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81065cc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81065d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81065d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 81065d8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 81065da:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 81065dc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 81065de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 81065e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81065e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81065e8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 81065ec:	e7c1      	b.n	8106572 <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 81065ee:	461a      	mov	r2, r3
 81065f0:	e774      	b.n	81064dc <HAL_TIM_ConfigClockSource+0x54>
 81065f2:	bf00      	nop
 81065f4:	ffce0088 	.word	0xffce0088
 81065f8:	00100020 	.word	0x00100020
 81065fc:	00100030 	.word	0x00100030

08106600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106600:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106602:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8106606:	2b01      	cmp	r3, #1
 8106608:	f04f 0302 	mov.w	r3, #2
 810660c:	d03a      	beq.n	8106684 <HAL_TIMEx_MasterConfigSynchronization+0x84>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810660e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106612:	4d1d      	ldr	r5, [pc, #116]	; (8106688 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 8106614:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106616:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8106618:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 810661a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810661c:	d002      	beq.n	8106624 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 810661e:	4e1b      	ldr	r6, [pc, #108]	; (810668c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8106620:	42b3      	cmp	r3, r6
 8106622:	d103      	bne.n	810662c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106624:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810662a:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810662c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 810662e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106632:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106634:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8106636:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106638:	d019      	beq.n	810666e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 810663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810663e:	d016      	beq.n	810666e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106640:	4a13      	ldr	r2, [pc, #76]	; (8106690 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8106642:	4293      	cmp	r3, r2
 8106644:	d013      	beq.n	810666e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810664a:	4293      	cmp	r3, r2
 810664c:	d00f      	beq.n	810666e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 810664e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106652:	4293      	cmp	r3, r2
 8106654:	d00b      	beq.n	810666e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106656:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 810665a:	4293      	cmp	r3, r2
 810665c:	d007      	beq.n	810666e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 810665e:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8106662:	4293      	cmp	r3, r2
 8106664:	d003      	beq.n	810666e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106666:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 810666a:	4293      	cmp	r3, r2
 810666c:	d104      	bne.n	8106678 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810666e:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106670:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106674:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106678:	2301      	movs	r3, #1
 810667a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810667e:	2300      	movs	r3, #0
 8106680:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8106684:	4618      	mov	r0, r3

  return HAL_OK;
}
 8106686:	bd70      	pop	{r4, r5, r6, pc}
 8106688:	40010000 	.word	0x40010000
 810668c:	40010400 	.word	0x40010400
 8106690:	40000400 	.word	0x40000400

08106694 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8106694:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106696:	e852 3f00 	ldrex	r3, [r2]
 810669a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810669e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 81066a2:	6802      	ldr	r2, [r0, #0]
 81066a4:	2900      	cmp	r1, #0
 81066a6:	d1f5      	bne.n	8106694 <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066a8:	f102 0308 	add.w	r3, r2, #8
 81066ac:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 81066b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066b4:	f102 0c08 	add.w	ip, r2, #8
 81066b8:	e84c 3100 	strex	r1, r3, [ip]
 81066bc:	2900      	cmp	r1, #0
 81066be:	d1f3      	bne.n	81066a8 <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81066c0:	2320      	movs	r3, #32
 81066c2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 81066c6:	4770      	bx	lr

081066c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81066c8:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81066ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066cc:	e852 3f00 	ldrex	r3, [r2]
 81066d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066d4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 81066d8:	6802      	ldr	r2, [r0, #0]
 81066da:	2900      	cmp	r1, #0
 81066dc:	d1f5      	bne.n	81066ca <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81066de:	4c0f      	ldr	r4, [pc, #60]	; (810671c <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066e0:	f102 0308 	add.w	r3, r2, #8
 81066e4:	e853 3f00 	ldrex	r3, [r3]
 81066e8:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066ea:	f102 0c08 	add.w	ip, r2, #8
 81066ee:	e84c 3100 	strex	r1, r3, [ip]
 81066f2:	2900      	cmp	r1, #0
 81066f4:	d1f4      	bne.n	81066e0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81066f6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 81066f8:	2b01      	cmp	r3, #1
 81066fa:	d107      	bne.n	810670c <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066fc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106700:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106704:	e842 3100 	strex	r1, r3, [r2]
 8106708:	2900      	cmp	r1, #0
 810670a:	d1f7      	bne.n	81066fc <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810670c:	2320      	movs	r3, #32
 810670e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106712:	2300      	movs	r3, #0
 8106714:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8106716:	6743      	str	r3, [r0, #116]	; 0x74
}
 8106718:	bd10      	pop	{r4, pc}
 810671a:	bf00      	nop
 810671c:	effffffe 	.word	0xeffffffe

08106720 <HAL_UART_Transmit_DMA>:
{
 8106720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106722:	4604      	mov	r4, r0
 8106724:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8106726:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 810672a:	2d20      	cmp	r5, #32
 810672c:	d132      	bne.n	8106794 <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 810672e:	b1f1      	cbz	r1, 810676e <HAL_UART_Transmit_DMA+0x4e>
 8106730:	b1ea      	cbz	r2, 810676e <HAL_UART_Transmit_DMA+0x4e>
    if (huart->hdmatx != NULL)
 8106732:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    huart->TxXferCount = Size;
 8106734:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->TxXferSize  = Size;
 8106738:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810673c:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810673e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106740:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    huart->pTxBuffPtr  = pData;
 8106744:	6521      	str	r1, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106746:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810674a:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 810674c:	b188      	cbz	r0, 8106772 <HAL_UART_Transmit_DMA+0x52>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810674e:	4f12      	ldr	r7, [pc, #72]	; (8106798 <HAL_UART_Transmit_DMA+0x78>)
 8106750:	63c7      	str	r7, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8106752:	4f12      	ldr	r7, [pc, #72]	; (810679c <HAL_UART_Transmit_DMA+0x7c>)
 8106754:	6407      	str	r7, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8106756:	4f12      	ldr	r7, [pc, #72]	; (81067a0 <HAL_UART_Transmit_DMA+0x80>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8106758:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 810675a:	e9c0 7613 	strd	r7, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810675e:	f7fd fa91 	bl	8103c84 <HAL_DMA_Start_IT>
 8106762:	b130      	cbz	r0, 8106772 <HAL_UART_Transmit_DMA+0x52>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8106764:	2310      	movs	r3, #16
 8106766:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 810676a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
      return HAL_ERROR;
 810676e:	2001      	movs	r0, #1
 8106770:	e00f      	b.n	8106792 <HAL_UART_Transmit_DMA+0x72>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8106772:	6823      	ldr	r3, [r4, #0]
 8106774:	2240      	movs	r2, #64	; 0x40
 8106776:	621a      	str	r2, [r3, #32]
 8106778:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810677a:	f102 0308 	add.w	r3, r2, #8
 810677e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8106782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106786:	f102 0108 	add.w	r1, r2, #8
 810678a:	e841 3000 	strex	r0, r3, [r1]
 810678e:	2800      	cmp	r0, #0
 8106790:	d1f3      	bne.n	810677a <HAL_UART_Transmit_DMA+0x5a>
}
 8106792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8106794:	2002      	movs	r0, #2
 8106796:	e7fc      	b.n	8106792 <HAL_UART_Transmit_DMA+0x72>
 8106798:	081067a7 	.word	0x081067a7
 810679c:	081067ef 	.word	0x081067ef
 81067a0:	081067fb 	.word	0x081067fb

081067a4 <HAL_UART_TxCpltCallback>:
 81067a4:	4770      	bx	lr

081067a6 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81067a6:	69c2      	ldr	r2, [r0, #28]
 81067a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 81067ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81067ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81067b0:	d018      	beq.n	81067e4 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 81067b2:	2200      	movs	r2, #0
 81067b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81067b8:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81067ba:	f101 0208 	add.w	r2, r1, #8
 81067be:	e852 2f00 	ldrex	r2, [r2]
 81067c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81067c6:	3108      	adds	r1, #8
 81067c8:	e841 2000 	strex	r0, r2, [r1]
   return(result);
 81067cc:	681a      	ldr	r2, [r3, #0]
 81067ce:	2800      	cmp	r0, #0
 81067d0:	d1f2      	bne.n	81067b8 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81067d2:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81067d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81067da:	e842 3100 	strex	r1, r3, [r2]
 81067de:	2900      	cmp	r1, #0
 81067e0:	d1f7      	bne.n	81067d2 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 81067e2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 81067e4:	4618      	mov	r0, r3
 81067e6:	f7ff ffdd 	bl	81067a4 <HAL_UART_TxCpltCallback>
}
 81067ea:	e7fa      	b.n	81067e2 <UART_DMATransmitCplt+0x3c>

081067ec <HAL_UART_TxHalfCpltCallback>:
 81067ec:	4770      	bx	lr

081067ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81067ee:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 81067f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 81067f2:	f7ff fffb 	bl	81067ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81067f6:	bd08      	pop	{r3, pc}

081067f8 <HAL_UART_ErrorCallback>:
 81067f8:	4770      	bx	lr

081067fa <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81067fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 81067fc:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 81067fe:	6804      	ldr	r4, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8106800:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8106804:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8106808:	68a2      	ldr	r2, [r4, #8]
 810680a:	0612      	lsls	r2, r2, #24
 810680c:	d506      	bpl.n	810681c <UART_DMAError+0x22>
 810680e:	2b21      	cmp	r3, #33	; 0x21
 8106810:	d104      	bne.n	810681c <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8106812:	2300      	movs	r3, #0
 8106814:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8106818:	f7ff ff3c 	bl	8106694 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810681c:	68a3      	ldr	r3, [r4, #8]
 810681e:	065b      	lsls	r3, r3, #25
 8106820:	d506      	bpl.n	8106830 <UART_DMAError+0x36>
 8106822:	2d22      	cmp	r5, #34	; 0x22
 8106824:	d104      	bne.n	8106830 <UART_DMAError+0x36>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8106826:	2300      	movs	r3, #0
 8106828:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810682c:	f7ff ff4c 	bl	81066c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8106830:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8106834:	f043 0310 	orr.w	r3, r3, #16
 8106838:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810683c:	f7ff ffdc 	bl	81067f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106840:	bd38      	pop	{r3, r4, r5, pc}

08106842 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8106842:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8106844:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8106846:	2300      	movs	r3, #0
 8106848:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810684c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8106850:	f7ff ffd2 	bl	81067f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106854:	bd08      	pop	{r3, pc}

08106856 <HAL_UARTEx_RxEventCallback>:
}
 8106856:	4770      	bx	lr

08106858 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8106858:	6803      	ldr	r3, [r0, #0]
 810685a:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810685c:	681a      	ldr	r2, [r3, #0]
{
 810685e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 8106862:	f640 060f 	movw	r6, #2063	; 0x80f
 8106866:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8106868:	689d      	ldr	r5, [r3, #8]
{
 810686a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 810686c:	d110      	bne.n	8106890 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810686e:	068e      	lsls	r6, r1, #26
 8106870:	f140 8097 	bpl.w	81069a2 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106874:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8106878:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 810687c:	433e      	orrs	r6, r7
 810687e:	f000 8090 	beq.w	81069a2 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 8106882:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8106884:	2b00      	cmp	r3, #0
 8106886:	f000 8085 	beq.w	8106994 <HAL_UART_IRQHandler+0x13c>
}
 810688a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810688e:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8106890:	4eaa      	ldr	r6, [pc, #680]	; (8106b3c <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8106892:	48ab      	ldr	r0, [pc, #684]	; (8106b40 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8106894:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8106896:	4010      	ands	r0, r2
 8106898:	4330      	orrs	r0, r6
 810689a:	f000 8082 	beq.w	81069a2 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810689e:	07cf      	lsls	r7, r1, #31
 81068a0:	d509      	bpl.n	81068b6 <HAL_UART_IRQHandler+0x5e>
 81068a2:	05d0      	lsls	r0, r2, #23
 81068a4:	d507      	bpl.n	81068b6 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81068a6:	2001      	movs	r0, #1
 81068a8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81068aa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 81068ae:	f040 0001 	orr.w	r0, r0, #1
 81068b2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81068b6:	078f      	lsls	r7, r1, #30
 81068b8:	d509      	bpl.n	81068ce <HAL_UART_IRQHandler+0x76>
 81068ba:	07e8      	lsls	r0, r5, #31
 81068bc:	d507      	bpl.n	81068ce <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81068be:	2002      	movs	r0, #2
 81068c0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 81068c2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 81068c6:	f040 0004 	orr.w	r0, r0, #4
 81068ca:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81068ce:	074f      	lsls	r7, r1, #29
 81068d0:	d509      	bpl.n	81068e6 <HAL_UART_IRQHandler+0x8e>
 81068d2:	07e8      	lsls	r0, r5, #31
 81068d4:	d507      	bpl.n	81068e6 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81068d6:	2004      	movs	r0, #4
 81068d8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81068da:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 81068de:	f040 0002 	orr.w	r0, r0, #2
 81068e2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 81068e6:	070f      	lsls	r7, r1, #28
 81068e8:	d50b      	bpl.n	8106902 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81068ea:	f002 0020 	and.w	r0, r2, #32
 81068ee:	4330      	orrs	r0, r6
 81068f0:	d007      	beq.n	8106902 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81068f2:	2008      	movs	r0, #8
 81068f4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81068f6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 81068fa:	f040 0008 	orr.w	r0, r0, #8
 81068fe:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8106902:	050e      	lsls	r6, r1, #20
 8106904:	d50a      	bpl.n	810691c <HAL_UART_IRQHandler+0xc4>
 8106906:	0150      	lsls	r0, r2, #5
 8106908:	d508      	bpl.n	810691c <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810690a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 810690e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8106910:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8106914:	f043 0320 	orr.w	r3, r3, #32
 8106918:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810691c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8106920:	2b00      	cmp	r3, #0
 8106922:	d037      	beq.n	8106994 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8106924:	068b      	lsls	r3, r1, #26
 8106926:	d509      	bpl.n	810693c <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106928:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810692c:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8106930:	432a      	orrs	r2, r5
 8106932:	d003      	beq.n	810693c <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8106934:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8106936:	b10b      	cbz	r3, 810693c <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 8106938:	4620      	mov	r0, r4
 810693a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810693c:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 810693e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106942:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8106944:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810694c:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8106950:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106952:	d021      	beq.n	8106998 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8106954:	f7ff feb8 	bl	81066c8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106958:	68b3      	ldr	r3, [r6, #8]
 810695a:	065f      	lsls	r7, r3, #25
 810695c:	d517      	bpl.n	810698e <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810695e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106960:	f102 0308 	add.w	r3, r2, #8
 8106964:	e853 3f00 	ldrex	r3, [r3]
 8106968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810696c:	3208      	adds	r2, #8
 810696e:	e842 3100 	strex	r1, r3, [r2]
 8106972:	2900      	cmp	r1, #0
 8106974:	d1f3      	bne.n	810695e <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 8106976:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 810697a:	b140      	cbz	r0, 810698e <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810697c:	4b71      	ldr	r3, [pc, #452]	; (8106b44 <HAL_UART_IRQHandler+0x2ec>)
 810697e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8106980:	f7fd fc40 	bl	8104204 <HAL_DMA_Abort_IT>
 8106984:	b130      	cbz	r0, 8106994 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8106986:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 810698a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 810698c:	e77d      	b.n	810688a <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 810698e:	4620      	mov	r0, r4
 8106990:	f7ff ff32 	bl	81067f8 <HAL_UART_ErrorCallback>
}
 8106994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 8106998:	f7ff ff2e 	bl	81067f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810699c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 81069a0:	e7f8      	b.n	8106994 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81069a2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 81069a4:	2801      	cmp	r0, #1
 81069a6:	f040 80ae 	bne.w	8106b06 <HAL_UART_IRQHandler+0x2ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 81069aa:	06ce      	lsls	r6, r1, #27
 81069ac:	f140 80ab 	bpl.w	8106b06 <HAL_UART_IRQHandler+0x2ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 81069b0:	06d0      	lsls	r0, r2, #27
 81069b2:	f140 80a8 	bpl.w	8106b06 <HAL_UART_IRQHandler+0x2ae>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81069b6:	2210      	movs	r2, #16
 81069b8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81069ba:	689a      	ldr	r2, [r3, #8]
 81069bc:	0652      	lsls	r2, r2, #25
 81069be:	d56e      	bpl.n	8106a9e <HAL_UART_IRQHandler+0x246>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 81069c0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 81069c4:	4860      	ldr	r0, [pc, #384]	; (8106b48 <HAL_UART_IRQHandler+0x2f0>)
 81069c6:	680a      	ldr	r2, [r1, #0]
 81069c8:	4282      	cmp	r2, r0
 81069ca:	d01e      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069cc:	3018      	adds	r0, #24
 81069ce:	4282      	cmp	r2, r0
 81069d0:	d01b      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069d2:	3018      	adds	r0, #24
 81069d4:	4282      	cmp	r2, r0
 81069d6:	d018      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069d8:	3018      	adds	r0, #24
 81069da:	4282      	cmp	r2, r0
 81069dc:	d015      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069de:	3018      	adds	r0, #24
 81069e0:	4282      	cmp	r2, r0
 81069e2:	d012      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069e4:	3018      	adds	r0, #24
 81069e6:	4282      	cmp	r2, r0
 81069e8:	d00f      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069ea:	3018      	adds	r0, #24
 81069ec:	4282      	cmp	r2, r0
 81069ee:	d00c      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069f0:	3018      	adds	r0, #24
 81069f2:	4282      	cmp	r2, r0
 81069f4:	d009      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069f6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 81069fa:	4282      	cmp	r2, r0
 81069fc:	d005      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 81069fe:	3018      	adds	r0, #24
 8106a00:	4282      	cmp	r2, r0
 8106a02:	d002      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 8106a04:	3018      	adds	r0, #24
 8106a06:	4282      	cmp	r2, r0
 8106a08:	d0ff      	beq.n	8106a0a <HAL_UART_IRQHandler+0x1b2>
 8106a0a:	6852      	ldr	r2, [r2, #4]
 8106a0c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8106a0e:	2a00      	cmp	r2, #0
 8106a10:	d0c0      	beq.n	8106994 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8106a12:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8106a16:	4290      	cmp	r0, r2
 8106a18:	d9bc      	bls.n	8106994 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 8106a1a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8106a1e:	69ca      	ldr	r2, [r1, #28]
 8106a20:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8106a24:	d02f      	beq.n	8106a86 <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a26:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8106a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a2e:	e843 2100 	strex	r1, r2, [r3]
 8106a32:	2900      	cmp	r1, #0
 8106a34:	d1f7      	bne.n	8106a26 <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a36:	f103 0208 	add.w	r2, r3, #8
 8106a3a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106a3e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a42:	f103 0008 	add.w	r0, r3, #8
 8106a46:	e840 2100 	strex	r1, r2, [r0]
 8106a4a:	2900      	cmp	r1, #0
 8106a4c:	d1f3      	bne.n	8106a36 <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a4e:	f103 0208 	add.w	r2, r3, #8
 8106a52:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a5a:	f103 0008 	add.w	r0, r3, #8
 8106a5e:	e840 2100 	strex	r1, r2, [r0]
 8106a62:	2900      	cmp	r1, #0
 8106a64:	d1f3      	bne.n	8106a4e <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 8106a66:	2220      	movs	r2, #32
 8106a68:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106a6c:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a6e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106a72:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a76:	e843 2100 	strex	r1, r2, [r3]
 8106a7a:	2900      	cmp	r1, #0
 8106a7c:	d1f7      	bne.n	8106a6e <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8106a7e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8106a82:	f7fd fa19 	bl	8103eb8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8106a86:	2302      	movs	r3, #2
 8106a88:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8106a8a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8106a8e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8106a92:	1ac9      	subs	r1, r1, r3
 8106a94:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8106a96:	4620      	mov	r0, r4
 8106a98:	f7ff fedd 	bl	8106856 <HAL_UARTEx_RxEventCallback>
 8106a9c:	e77a      	b.n	8106994 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106a9e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8106aa2:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106aa6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8106aaa:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106aac:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8106aae:	2800      	cmp	r0, #0
 8106ab0:	f43f af70 	beq.w	8106994 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106ab4:	1a89      	subs	r1, r1, r2
 8106ab6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8106ab8:	2900      	cmp	r1, #0
 8106aba:	f43f af6b 	beq.w	8106994 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106abe:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106ac2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ac6:	e843 2000 	strex	r0, r2, [r3]
 8106aca:	2800      	cmp	r0, #0
 8106acc:	d1f7      	bne.n	8106abe <HAL_UART_IRQHandler+0x266>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106ace:	4d1f      	ldr	r5, [pc, #124]	; (8106b4c <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ad0:	f103 0208 	add.w	r2, r3, #8
 8106ad4:	e852 2f00 	ldrex	r2, [r2]
 8106ad8:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ada:	f103 0608 	add.w	r6, r3, #8
 8106ade:	e846 2000 	strex	r0, r2, [r6]
 8106ae2:	2800      	cmp	r0, #0
 8106ae4:	d1f4      	bne.n	8106ad0 <HAL_UART_IRQHandler+0x278>
        huart->RxState = HAL_UART_STATE_READY;
 8106ae6:	2220      	movs	r2, #32
 8106ae8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8106aec:	6760      	str	r0, [r4, #116]	; 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106aee:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106af0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106af4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106af8:	e843 2000 	strex	r0, r2, [r3]
 8106afc:	2800      	cmp	r0, #0
 8106afe:	d1f7      	bne.n	8106af0 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8106b00:	2302      	movs	r3, #2
 8106b02:	6723      	str	r3, [r4, #112]	; 0x70
 8106b04:	e7c7      	b.n	8106a96 <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8106b06:	02cf      	lsls	r7, r1, #11
 8106b08:	d509      	bpl.n	8106b1e <HAL_UART_IRQHandler+0x2c6>
 8106b0a:	026e      	lsls	r6, r5, #9
 8106b0c:	d507      	bpl.n	8106b1e <HAL_UART_IRQHandler+0x2c6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106b0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8106b12:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106b14:	621a      	str	r2, [r3, #32]
}
 8106b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8106b1a:	f000 bb4d 	b.w	81071b8 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8106b1e:	0608      	lsls	r0, r1, #24
 8106b20:	d516      	bpl.n	8106b50 <HAL_UART_IRQHandler+0x2f8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8106b22:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8106b26:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8106b2a:	4328      	orrs	r0, r5
 8106b2c:	d010      	beq.n	8106b50 <HAL_UART_IRQHandler+0x2f8>
    if (huart->TxISR != NULL)
 8106b2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8106b30:	2b00      	cmp	r3, #0
 8106b32:	f43f af2f 	beq.w	8106994 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 8106b36:	4620      	mov	r0, r4
 8106b38:	e6a7      	b.n	810688a <HAL_UART_IRQHandler+0x32>
 8106b3a:	bf00      	nop
 8106b3c:	10000001 	.word	0x10000001
 8106b40:	04000120 	.word	0x04000120
 8106b44:	08106843 	.word	0x08106843
 8106b48:	40020010 	.word	0x40020010
 8106b4c:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8106b50:	064f      	lsls	r7, r1, #25
 8106b52:	d511      	bpl.n	8106b78 <HAL_UART_IRQHandler+0x320>
 8106b54:	0656      	lsls	r6, r2, #25
 8106b56:	d50f      	bpl.n	8106b78 <HAL_UART_IRQHandler+0x320>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106b58:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8106b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106b60:	e843 2100 	strex	r1, r2, [r3]
 8106b64:	2900      	cmp	r1, #0
 8106b66:	d1f7      	bne.n	8106b58 <HAL_UART_IRQHandler+0x300>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8106b68:	2320      	movs	r3, #32
 8106b6a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8106b6e:	67a1      	str	r1, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8106b70:	4620      	mov	r0, r4
 8106b72:	f7ff fe17 	bl	81067a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106b76:	e70d      	b.n	8106994 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8106b78:	020d      	lsls	r5, r1, #8
 8106b7a:	d506      	bpl.n	8106b8a <HAL_UART_IRQHandler+0x332>
 8106b7c:	0050      	lsls	r0, r2, #1
 8106b7e:	d504      	bpl.n	8106b8a <HAL_UART_IRQHandler+0x332>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106b80:	4620      	mov	r0, r4
}
 8106b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106b86:	f000 bb19 	b.w	81071bc <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8106b8a:	01cb      	lsls	r3, r1, #7
 8106b8c:	f57f af02 	bpl.w	8106994 <HAL_UART_IRQHandler+0x13c>
 8106b90:	2a00      	cmp	r2, #0
 8106b92:	f6bf aeff 	bge.w	8106994 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106b96:	4620      	mov	r0, r4
}
 8106b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106b9c:	f000 bb0d 	b.w	81071ba <HAL_UARTEx_RxFifoFullCallback>

08106ba0 <UART_SetConfig>:
{
 8106ba0:	b530      	push	{r4, r5, lr}
 8106ba2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8106ba4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106ba6:	6921      	ldr	r1, [r4, #16]
 8106ba8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106baa:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106bac:	69c0      	ldr	r0, [r0, #28]
 8106bae:	430a      	orrs	r2, r1
 8106bb0:	6961      	ldr	r1, [r4, #20]
 8106bb2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106bb4:	4997      	ldr	r1, [pc, #604]	; (8106e14 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106bb6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106bb8:	4029      	ands	r1, r5
 8106bba:	430a      	orrs	r2, r1
 8106bbc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106bbe:	685a      	ldr	r2, [r3, #4]
 8106bc0:	68e1      	ldr	r1, [r4, #12]
 8106bc2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8106bc6:	430a      	orrs	r2, r1
 8106bc8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106bca:	4a93      	ldr	r2, [pc, #588]	; (8106e18 <UART_SetConfig+0x278>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106bcc:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106bce:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8106bd0:	bf1c      	itt	ne
 8106bd2:	6a22      	ldrne	r2, [r4, #32]
 8106bd4:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106bd6:	689a      	ldr	r2, [r3, #8]
 8106bd8:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8106bdc:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8106be0:	430a      	orrs	r2, r1
 8106be2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106be6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8106be8:	f022 020f 	bic.w	r2, r2, #15
 8106bec:	430a      	orrs	r2, r1
 8106bee:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106bf0:	4a8a      	ldr	r2, [pc, #552]	; (8106e1c <UART_SetConfig+0x27c>)
 8106bf2:	4293      	cmp	r3, r2
{
 8106bf4:	b087      	sub	sp, #28
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106bf6:	d11b      	bne.n	8106c30 <UART_SetConfig+0x90>
 8106bf8:	4b89      	ldr	r3, [pc, #548]	; (8106e20 <UART_SetConfig+0x280>)
 8106bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106c00:	2b28      	cmp	r3, #40	; 0x28
 8106c02:	d86c      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106c04:	4a87      	ldr	r2, [pc, #540]	; (8106e24 <UART_SetConfig+0x284>)
 8106c06:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106c08:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8106c0c:	f040 8132 	bne.w	8106e74 <UART_SetConfig+0x2d4>
    switch (clocksource)
 8106c10:	2b08      	cmp	r3, #8
 8106c12:	f200 80c0 	bhi.w	8106d96 <UART_SetConfig+0x1f6>
 8106c16:	2b08      	cmp	r3, #8
 8106c18:	d861      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106c1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8106c1e:	00e7      	.short	0x00e7
 8106c20:	006000ec 	.word	0x006000ec
 8106c24:	00ef0060 	.word	0x00ef0060
 8106c28:	00600060 	.word	0x00600060
 8106c2c:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106c30:	4a7d      	ldr	r2, [pc, #500]	; (8106e28 <UART_SetConfig+0x288>)
 8106c32:	4293      	cmp	r3, r2
 8106c34:	d107      	bne.n	8106c46 <UART_SetConfig+0xa6>
 8106c36:	4b7a      	ldr	r3, [pc, #488]	; (8106e20 <UART_SetConfig+0x280>)
 8106c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c3a:	f003 0307 	and.w	r3, r3, #7
 8106c3e:	2b05      	cmp	r3, #5
 8106c40:	d84d      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106c42:	4a7a      	ldr	r2, [pc, #488]	; (8106e2c <UART_SetConfig+0x28c>)
 8106c44:	e7df      	b.n	8106c06 <UART_SetConfig+0x66>
 8106c46:	4a7a      	ldr	r2, [pc, #488]	; (8106e30 <UART_SetConfig+0x290>)
 8106c48:	4293      	cmp	r3, r2
 8106c4a:	d107      	bne.n	8106c5c <UART_SetConfig+0xbc>
 8106c4c:	4b74      	ldr	r3, [pc, #464]	; (8106e20 <UART_SetConfig+0x280>)
 8106c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c50:	f003 0307 	and.w	r3, r3, #7
 8106c54:	2b05      	cmp	r3, #5
 8106c56:	d842      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106c58:	4a76      	ldr	r2, [pc, #472]	; (8106e34 <UART_SetConfig+0x294>)
 8106c5a:	e7d4      	b.n	8106c06 <UART_SetConfig+0x66>
 8106c5c:	4a76      	ldr	r2, [pc, #472]	; (8106e38 <UART_SetConfig+0x298>)
 8106c5e:	4293      	cmp	r3, r2
 8106c60:	d107      	bne.n	8106c72 <UART_SetConfig+0xd2>
 8106c62:	4b6f      	ldr	r3, [pc, #444]	; (8106e20 <UART_SetConfig+0x280>)
 8106c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c66:	f003 0307 	and.w	r3, r3, #7
 8106c6a:	2b05      	cmp	r3, #5
 8106c6c:	d837      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106c6e:	4a73      	ldr	r2, [pc, #460]	; (8106e3c <UART_SetConfig+0x29c>)
 8106c70:	e7c9      	b.n	8106c06 <UART_SetConfig+0x66>
 8106c72:	4a73      	ldr	r2, [pc, #460]	; (8106e40 <UART_SetConfig+0x2a0>)
 8106c74:	4293      	cmp	r3, r2
 8106c76:	d107      	bne.n	8106c88 <UART_SetConfig+0xe8>
 8106c78:	4b69      	ldr	r3, [pc, #420]	; (8106e20 <UART_SetConfig+0x280>)
 8106c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c7c:	f003 0307 	and.w	r3, r3, #7
 8106c80:	2b05      	cmp	r3, #5
 8106c82:	d82c      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106c84:	4a6f      	ldr	r2, [pc, #444]	; (8106e44 <UART_SetConfig+0x2a4>)
 8106c86:	e7be      	b.n	8106c06 <UART_SetConfig+0x66>
 8106c88:	4a6f      	ldr	r2, [pc, #444]	; (8106e48 <UART_SetConfig+0x2a8>)
 8106c8a:	4293      	cmp	r3, r2
 8106c8c:	d107      	bne.n	8106c9e <UART_SetConfig+0xfe>
 8106c8e:	4b64      	ldr	r3, [pc, #400]	; (8106e20 <UART_SetConfig+0x280>)
 8106c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106c96:	2b28      	cmp	r3, #40	; 0x28
 8106c98:	d821      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106c9a:	4a6c      	ldr	r2, [pc, #432]	; (8106e4c <UART_SetConfig+0x2ac>)
 8106c9c:	e7b3      	b.n	8106c06 <UART_SetConfig+0x66>
 8106c9e:	4a6c      	ldr	r2, [pc, #432]	; (8106e50 <UART_SetConfig+0x2b0>)
 8106ca0:	4293      	cmp	r3, r2
 8106ca2:	d107      	bne.n	8106cb4 <UART_SetConfig+0x114>
 8106ca4:	4b5e      	ldr	r3, [pc, #376]	; (8106e20 <UART_SetConfig+0x280>)
 8106ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106ca8:	f003 0307 	and.w	r3, r3, #7
 8106cac:	2b05      	cmp	r3, #5
 8106cae:	d816      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106cb0:	4a68      	ldr	r2, [pc, #416]	; (8106e54 <UART_SetConfig+0x2b4>)
 8106cb2:	e7a8      	b.n	8106c06 <UART_SetConfig+0x66>
 8106cb4:	4a68      	ldr	r2, [pc, #416]	; (8106e58 <UART_SetConfig+0x2b8>)
 8106cb6:	4293      	cmp	r3, r2
 8106cb8:	d107      	bne.n	8106cca <UART_SetConfig+0x12a>
 8106cba:	4b59      	ldr	r3, [pc, #356]	; (8106e20 <UART_SetConfig+0x280>)
 8106cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cbe:	f003 0307 	and.w	r3, r3, #7
 8106cc2:	2b05      	cmp	r3, #5
 8106cc4:	d80b      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106cc6:	4a65      	ldr	r2, [pc, #404]	; (8106e5c <UART_SetConfig+0x2bc>)
 8106cc8:	e79d      	b.n	8106c06 <UART_SetConfig+0x66>
 8106cca:	4a53      	ldr	r2, [pc, #332]	; (8106e18 <UART_SetConfig+0x278>)
 8106ccc:	4293      	cmp	r3, r2
 8106cce:	d106      	bne.n	8106cde <UART_SetConfig+0x13e>
 8106cd0:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8106cd4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8106cd6:	f003 0307 	and.w	r3, r3, #7
 8106cda:	2b05      	cmp	r3, #5
 8106cdc:	d901      	bls.n	8106ce2 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106cde:	2001      	movs	r0, #1
 8106ce0:	e00e      	b.n	8106d00 <UART_SetConfig+0x160>
 8106ce2:	495f      	ldr	r1, [pc, #380]	; (8106e60 <UART_SetConfig+0x2c0>)
 8106ce4:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8106ce6:	2b10      	cmp	r3, #16
 8106ce8:	d023      	beq.n	8106d32 <UART_SetConfig+0x192>
 8106cea:	d811      	bhi.n	8106d10 <UART_SetConfig+0x170>
 8106cec:	2b04      	cmp	r3, #4
 8106cee:	d016      	beq.n	8106d1e <UART_SetConfig+0x17e>
 8106cf0:	2b08      	cmp	r3, #8
 8106cf2:	d019      	beq.n	8106d28 <UART_SetConfig+0x188>
 8106cf4:	2b02      	cmp	r3, #2
 8106cf6:	d1f2      	bne.n	8106cde <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106cf8:	f7fe fd3e 	bl	8105778 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8106cfc:	bb10      	cbnz	r0, 8106d44 <UART_SetConfig+0x1a4>
 8106cfe:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8106d00:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8106d04:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8106d06:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8106d08:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 8106d0c:	b007      	add	sp, #28
 8106d0e:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8106d10:	2b20      	cmp	r3, #32
 8106d12:	d03e      	beq.n	8106d92 <UART_SetConfig+0x1f2>
 8106d14:	2b40      	cmp	r3, #64	; 0x40
 8106d16:	d1e2      	bne.n	8106cde <UART_SetConfig+0x13e>
 8106d18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8106d1c:	e012      	b.n	8106d44 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d1e:	4668      	mov	r0, sp
 8106d20:	f7fe fd3c 	bl	810579c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106d24:	9801      	ldr	r0, [sp, #4]
        break;
 8106d26:	e7e9      	b.n	8106cfc <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106d28:	a803      	add	r0, sp, #12
 8106d2a:	f7fe fde1 	bl	81058f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106d2e:	9804      	ldr	r0, [sp, #16]
        break;
 8106d30:	e7e4      	b.n	8106cfc <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d32:	6813      	ldr	r3, [r2, #0]
 8106d34:	484b      	ldr	r0, [pc, #300]	; (8106e64 <UART_SetConfig+0x2c4>)
 8106d36:	f013 0f20 	tst.w	r3, #32
 8106d3a:	d003      	beq.n	8106d44 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106d3c:	6813      	ldr	r3, [r2, #0]
 8106d3e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106d42:	40d8      	lsrs	r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106d44:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106d46:	4b48      	ldr	r3, [pc, #288]	; (8106e68 <UART_SetConfig+0x2c8>)
 8106d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106d4a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106d4e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8106d52:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106d56:	4299      	cmp	r1, r3
 8106d58:	d8c1      	bhi.n	8106cde <UART_SetConfig+0x13e>
 8106d5a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8106d5e:	d8be      	bhi.n	8106cde <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106d60:	2300      	movs	r3, #0
 8106d62:	4619      	mov	r1, r3
 8106d64:	f7fa f818 	bl	8100d98 <__aeabi_uldivmod>
 8106d68:	0209      	lsls	r1, r1, #8
 8106d6a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8106d6e:	086b      	lsrs	r3, r5, #1
 8106d70:	0200      	lsls	r0, r0, #8
 8106d72:	18c0      	adds	r0, r0, r3
 8106d74:	462a      	mov	r2, r5
 8106d76:	f04f 0300 	mov.w	r3, #0
 8106d7a:	f141 0100 	adc.w	r1, r1, #0
 8106d7e:	f7fa f80b 	bl	8100d98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106d82:	4b3a      	ldr	r3, [pc, #232]	; (8106e6c <UART_SetConfig+0x2cc>)
 8106d84:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106d88:	429a      	cmp	r2, r3
 8106d8a:	d8a8      	bhi.n	8106cde <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106d8c:	6823      	ldr	r3, [r4, #0]
 8106d8e:	60d8      	str	r0, [r3, #12]
 8106d90:	e7b5      	b.n	8106cfe <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8106d92:	4837      	ldr	r0, [pc, #220]	; (8106e70 <UART_SetConfig+0x2d0>)
 8106d94:	e7d6      	b.n	8106d44 <UART_SetConfig+0x1a4>
    switch (clocksource)
 8106d96:	2b20      	cmp	r3, #32
 8106d98:	d03a      	beq.n	8106e10 <UART_SetConfig+0x270>
 8106d9a:	2b40      	cmp	r3, #64	; 0x40
 8106d9c:	d00b      	beq.n	8106db6 <UART_SetConfig+0x216>
 8106d9e:	2b10      	cmp	r3, #16
 8106da0:	d19d      	bne.n	8106cde <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106da2:	4b1f      	ldr	r3, [pc, #124]	; (8106e20 <UART_SetConfig+0x280>)
 8106da4:	482f      	ldr	r0, [pc, #188]	; (8106e64 <UART_SetConfig+0x2c4>)
 8106da6:	681a      	ldr	r2, [r3, #0]
 8106da8:	f012 0f20 	tst.w	r2, #32
 8106dac:	d003      	beq.n	8106db6 <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106dae:	681b      	ldr	r3, [r3, #0]
 8106db0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106db4:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106db6:	6861      	ldr	r1, [r4, #4]
 8106db8:	4b2b      	ldr	r3, [pc, #172]	; (8106e68 <UART_SetConfig+0x2c8>)
 8106dba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8106dbc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8106dc0:	fbb0 f2f2 	udiv	r2, r0, r2
 8106dc4:	084b      	lsrs	r3, r1, #1
 8106dc6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106dca:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106dce:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106dd2:	f1a3 0110 	sub.w	r1, r3, #16
 8106dd6:	4291      	cmp	r1, r2
 8106dd8:	d881      	bhi.n	8106cde <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106dda:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8106dde:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106de0:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106de2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8106de6:	4313      	orrs	r3, r2
 8106de8:	60cb      	str	r3, [r1, #12]
 8106dea:	e788      	b.n	8106cfe <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8106dec:	f7fd fe9c 	bl	8104b28 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8106df0:	2800      	cmp	r0, #0
 8106df2:	d084      	beq.n	8106cfe <UART_SetConfig+0x15e>
 8106df4:	e7df      	b.n	8106db6 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8106df6:	f7fd fea9 	bl	8104b4c <HAL_RCC_GetPCLK2Freq>
        break;
 8106dfa:	e7f9      	b.n	8106df0 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106dfc:	4668      	mov	r0, sp
 8106dfe:	f7fe fccd 	bl	810579c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106e02:	9801      	ldr	r0, [sp, #4]
        break;
 8106e04:	e7f4      	b.n	8106df0 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e06:	a803      	add	r0, sp, #12
 8106e08:	f7fe fd72 	bl	81058f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106e0c:	9804      	ldr	r0, [sp, #16]
        break;
 8106e0e:	e7ef      	b.n	8106df0 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8106e10:	4817      	ldr	r0, [pc, #92]	; (8106e70 <UART_SetConfig+0x2d0>)
 8106e12:	e7d0      	b.n	8106db6 <UART_SetConfig+0x216>
 8106e14:	cfff69f3 	.word	0xcfff69f3
 8106e18:	58000c00 	.word	0x58000c00
 8106e1c:	40011000 	.word	0x40011000
 8106e20:	58024400 	.word	0x58024400
 8106e24:	08110e60 	.word	0x08110e60
 8106e28:	40004400 	.word	0x40004400
 8106e2c:	08110e89 	.word	0x08110e89
 8106e30:	40004800 	.word	0x40004800
 8106e34:	08110e89 	.word	0x08110e89
 8106e38:	40004c00 	.word	0x40004c00
 8106e3c:	08110e89 	.word	0x08110e89
 8106e40:	40005000 	.word	0x40005000
 8106e44:	08110e89 	.word	0x08110e89
 8106e48:	40011400 	.word	0x40011400
 8106e4c:	08110e60 	.word	0x08110e60
 8106e50:	40007800 	.word	0x40007800
 8106e54:	08110e89 	.word	0x08110e89
 8106e58:	40007c00 	.word	0x40007c00
 8106e5c:	08110e89 	.word	0x08110e89
 8106e60:	08110e8f 	.word	0x08110e8f
 8106e64:	03d09000 	.word	0x03d09000
 8106e68:	08110e96 	.word	0x08110e96
 8106e6c:	000ffcff 	.word	0x000ffcff
 8106e70:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8106e74:	2b08      	cmp	r3, #8
 8106e76:	d817      	bhi.n	8106ea8 <UART_SetConfig+0x308>
 8106e78:	2b08      	cmp	r3, #8
 8106e7a:	f63f af30 	bhi.w	8106cde <UART_SetConfig+0x13e>
 8106e7e:	a201      	add	r2, pc, #4	; (adr r2, 8106e84 <UART_SetConfig+0x2e4>)
 8106e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e84:	08106eeb 	.word	0x08106eeb
 8106e88:	08106ef7 	.word	0x08106ef7
 8106e8c:	08106cdf 	.word	0x08106cdf
 8106e90:	08106cdf 	.word	0x08106cdf
 8106e94:	08106efd 	.word	0x08106efd
 8106e98:	08106cdf 	.word	0x08106cdf
 8106e9c:	08106cdf 	.word	0x08106cdf
 8106ea0:	08106cdf 	.word	0x08106cdf
 8106ea4:	08106f07 	.word	0x08106f07
 8106ea8:	2b20      	cmp	r3, #32
 8106eaa:	d031      	beq.n	8106f10 <UART_SetConfig+0x370>
 8106eac:	2b40      	cmp	r3, #64	; 0x40
 8106eae:	d031      	beq.n	8106f14 <UART_SetConfig+0x374>
 8106eb0:	2b10      	cmp	r3, #16
 8106eb2:	f47f af14 	bne.w	8106cde <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106eb6:	4b19      	ldr	r3, [pc, #100]	; (8106f1c <UART_SetConfig+0x37c>)
 8106eb8:	4819      	ldr	r0, [pc, #100]	; (8106f20 <UART_SetConfig+0x380>)
 8106eba:	681a      	ldr	r2, [r3, #0]
 8106ebc:	f012 0f20 	tst.w	r2, #32
 8106ec0:	d003      	beq.n	8106eca <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106ec2:	681b      	ldr	r3, [r3, #0]
 8106ec4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106ec8:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106eca:	6863      	ldr	r3, [r4, #4]
 8106ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8106ece:	4a15      	ldr	r2, [pc, #84]	; (8106f24 <UART_SetConfig+0x384>)
 8106ed0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8106ed4:	fbb0 f0f2 	udiv	r0, r0, r2
 8106ed8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8106edc:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106ee0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8106ee4:	f1a0 0210 	sub.w	r2, r0, #16
 8106ee8:	e74e      	b.n	8106d88 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8106eea:	f7fd fe1d 	bl	8104b28 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8106eee:	2800      	cmp	r0, #0
 8106ef0:	f43f af05 	beq.w	8106cfe <UART_SetConfig+0x15e>
 8106ef4:	e7e9      	b.n	8106eca <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8106ef6:	f7fd fe29 	bl	8104b4c <HAL_RCC_GetPCLK2Freq>
        break;
 8106efa:	e7f8      	b.n	8106eee <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106efc:	4668      	mov	r0, sp
 8106efe:	f7fe fc4d 	bl	810579c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106f02:	9801      	ldr	r0, [sp, #4]
        break;
 8106f04:	e7f3      	b.n	8106eee <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f06:	a803      	add	r0, sp, #12
 8106f08:	f7fe fcf2 	bl	81058f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106f0c:	9804      	ldr	r0, [sp, #16]
        break;
 8106f0e:	e7ee      	b.n	8106eee <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 8106f10:	4805      	ldr	r0, [pc, #20]	; (8106f28 <UART_SetConfig+0x388>)
 8106f12:	e7da      	b.n	8106eca <UART_SetConfig+0x32a>
    switch (clocksource)
 8106f14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8106f18:	e7d7      	b.n	8106eca <UART_SetConfig+0x32a>
 8106f1a:	bf00      	nop
 8106f1c:	58024400 	.word	0x58024400
 8106f20:	03d09000 	.word	0x03d09000
 8106f24:	08110e96 	.word	0x08110e96
 8106f28:	003d0900 	.word	0x003d0900

08106f2c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106f2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8106f2e:	07da      	lsls	r2, r3, #31
{
 8106f30:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106f32:	d506      	bpl.n	8106f42 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106f34:	6801      	ldr	r1, [r0, #0]
 8106f36:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8106f38:	684a      	ldr	r2, [r1, #4]
 8106f3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8106f3e:	4322      	orrs	r2, r4
 8106f40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106f42:	079c      	lsls	r4, r3, #30
 8106f44:	d506      	bpl.n	8106f54 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106f46:	6801      	ldr	r1, [r0, #0]
 8106f48:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8106f4a:	684a      	ldr	r2, [r1, #4]
 8106f4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106f50:	4322      	orrs	r2, r4
 8106f52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106f54:	0759      	lsls	r1, r3, #29
 8106f56:	d506      	bpl.n	8106f66 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106f58:	6801      	ldr	r1, [r0, #0]
 8106f5a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8106f5c:	684a      	ldr	r2, [r1, #4]
 8106f5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8106f62:	4322      	orrs	r2, r4
 8106f64:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106f66:	071a      	lsls	r2, r3, #28
 8106f68:	d506      	bpl.n	8106f78 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106f6a:	6801      	ldr	r1, [r0, #0]
 8106f6c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8106f6e:	684a      	ldr	r2, [r1, #4]
 8106f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106f74:	4322      	orrs	r2, r4
 8106f76:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106f78:	06dc      	lsls	r4, r3, #27
 8106f7a:	d506      	bpl.n	8106f8a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106f7c:	6801      	ldr	r1, [r0, #0]
 8106f7e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8106f80:	688a      	ldr	r2, [r1, #8]
 8106f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8106f86:	4322      	orrs	r2, r4
 8106f88:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106f8a:	0699      	lsls	r1, r3, #26
 8106f8c:	d506      	bpl.n	8106f9c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106f8e:	6801      	ldr	r1, [r0, #0]
 8106f90:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8106f92:	688a      	ldr	r2, [r1, #8]
 8106f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8106f98:	4322      	orrs	r2, r4
 8106f9a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106f9c:	065a      	lsls	r2, r3, #25
 8106f9e:	d50f      	bpl.n	8106fc0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106fa0:	6801      	ldr	r1, [r0, #0]
 8106fa2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8106fa4:	684a      	ldr	r2, [r1, #4]
 8106fa6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8106faa:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106fac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106fb0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106fb2:	d105      	bne.n	8106fc0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106fb4:	684a      	ldr	r2, [r1, #4]
 8106fb6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8106fb8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8106fbc:	4322      	orrs	r2, r4
 8106fbe:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106fc0:	061b      	lsls	r3, r3, #24
 8106fc2:	d506      	bpl.n	8106fd2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106fc4:	6802      	ldr	r2, [r0, #0]
 8106fc6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8106fc8:	6853      	ldr	r3, [r2, #4]
 8106fca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8106fce:	430b      	orrs	r3, r1
 8106fd0:	6053      	str	r3, [r2, #4]
}
 8106fd2:	bd10      	pop	{r4, pc}

08106fd4 <UART_WaitOnFlagUntilTimeout>:
{
 8106fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8106fdc:	4604      	mov	r4, r0
 8106fde:	460f      	mov	r7, r1
 8106fe0:	4616      	mov	r6, r2
 8106fe2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106fe4:	6822      	ldr	r2, [r4, #0]
 8106fe6:	69d3      	ldr	r3, [r2, #28]
 8106fe8:	ea37 0303 	bics.w	r3, r7, r3
 8106fec:	bf0c      	ite	eq
 8106fee:	2301      	moveq	r3, #1
 8106ff0:	2300      	movne	r3, #0
 8106ff2:	42b3      	cmp	r3, r6
 8106ff4:	d001      	beq.n	8106ffa <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8106ff6:	2000      	movs	r0, #0
 8106ff8:	e01e      	b.n	8107038 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8106ffa:	f1b9 3fff 	cmp.w	r9, #4294967295
 8106ffe:	d0f2      	beq.n	8106fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107000:	f7fb fe36 	bl	8102c70 <HAL_GetTick>
 8107004:	eba0 0008 	sub.w	r0, r0, r8
 8107008:	4548      	cmp	r0, r9
 810700a:	d825      	bhi.n	8107058 <UART_WaitOnFlagUntilTimeout+0x84>
 810700c:	f1b9 0f00 	cmp.w	r9, #0
 8107010:	d022      	beq.n	8107058 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107012:	6820      	ldr	r0, [r4, #0]
 8107014:	6803      	ldr	r3, [r0, #0]
 8107016:	075a      	lsls	r2, r3, #29
 8107018:	d5e4      	bpl.n	8106fe4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810701a:	69c5      	ldr	r5, [r0, #28]
 810701c:	f015 0508 	ands.w	r5, r5, #8
 8107020:	d00c      	beq.n	810703c <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107022:	2508      	movs	r5, #8
 8107024:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 8107026:	4620      	mov	r0, r4
 8107028:	f7ff fb4e 	bl	81066c8 <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 810702c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810702e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 8107032:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
           return HAL_ERROR;
 8107036:	2001      	movs	r0, #1
}
 8107038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810703c:	69c3      	ldr	r3, [r0, #28]
 810703e:	051b      	lsls	r3, r3, #20
 8107040:	d5d0      	bpl.n	8106fe4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107046:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8107048:	4620      	mov	r0, r4
 810704a:	f7ff fb3d 	bl	81066c8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810704e:	2320      	movs	r3, #32
 8107050:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8107054:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 8107058:	2003      	movs	r0, #3
 810705a:	e7ed      	b.n	8107038 <UART_WaitOnFlagUntilTimeout+0x64>

0810705c <UART_CheckIdleState>:
{
 810705c:	b530      	push	{r4, r5, lr}
 810705e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107060:	2500      	movs	r5, #0
{
 8107062:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107064:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8107068:	f7fb fe02 	bl	8102c70 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810706c:	6822      	ldr	r2, [r4, #0]
 810706e:	6812      	ldr	r2, [r2, #0]
 8107070:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8107072:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107074:	d51d      	bpl.n	81070b2 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107076:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 810707a:	9200      	str	r2, [sp, #0]
 810707c:	9003      	str	r0, [sp, #12]
 810707e:	462a      	mov	r2, r5
 8107080:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107084:	4620      	mov	r0, r4
 8107086:	f7ff ffa5 	bl	8106fd4 <UART_WaitOnFlagUntilTimeout>
 810708a:	9b03      	ldr	r3, [sp, #12]
 810708c:	b188      	cbz	r0, 81070b2 <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810708e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107090:	e852 3f00 	ldrex	r3, [r2]
 8107094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107098:	e842 3100 	strex	r1, r3, [r2]
 810709c:	2900      	cmp	r1, #0
 810709e:	d1f6      	bne.n	810708e <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 81070a0:	2320      	movs	r3, #32
 81070a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 81070a6:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 81070a8:	2300      	movs	r3, #0
 81070aa:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 81070ae:	b005      	add	sp, #20
 81070b0:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81070b2:	6822      	ldr	r2, [r4, #0]
 81070b4:	6812      	ldr	r2, [r2, #0]
 81070b6:	0752      	lsls	r2, r2, #29
 81070b8:	d523      	bpl.n	8107102 <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81070ba:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 81070be:	9200      	str	r2, [sp, #0]
 81070c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81070c4:	2200      	movs	r2, #0
 81070c6:	4620      	mov	r0, r4
 81070c8:	f7ff ff84 	bl	8106fd4 <UART_WaitOnFlagUntilTimeout>
 81070cc:	b1c8      	cbz	r0, 8107102 <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81070ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81070d0:	e852 3f00 	ldrex	r3, [r2]
 81070d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81070d8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 81070dc:	6822      	ldr	r2, [r4, #0]
 81070de:	2900      	cmp	r1, #0
 81070e0:	d1f5      	bne.n	81070ce <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81070e2:	f102 0308 	add.w	r3, r2, #8
 81070e6:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81070ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81070ee:	f102 0008 	add.w	r0, r2, #8
 81070f2:	e840 3100 	strex	r1, r3, [r0]
 81070f6:	2900      	cmp	r1, #0
 81070f8:	d1f3      	bne.n	81070e2 <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 81070fa:	2320      	movs	r3, #32
 81070fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8107100:	e7d1      	b.n	81070a6 <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8107102:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107104:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8107106:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810710a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810710e:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8107110:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 8107112:	e7c9      	b.n	81070a8 <UART_CheckIdleState+0x4c>

08107114 <HAL_UART_Init>:
{
 8107114:	b510      	push	{r4, lr}
  if (huart == NULL)
 8107116:	4604      	mov	r4, r0
 8107118:	b350      	cbz	r0, 8107170 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 810711a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 810711e:	b91b      	cbnz	r3, 8107128 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8107120:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8107124:	f7fb fc8c 	bl	8102a40 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8107128:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 810712a:	2324      	movs	r3, #36	; 0x24
 810712c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8107130:	6813      	ldr	r3, [r2, #0]
 8107132:	f023 0301 	bic.w	r3, r3, #1
 8107136:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107138:	4620      	mov	r0, r4
 810713a:	f7ff fd31 	bl	8106ba0 <UART_SetConfig>
 810713e:	2801      	cmp	r0, #1
 8107140:	d016      	beq.n	8107170 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8107144:	b113      	cbz	r3, 810714c <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8107146:	4620      	mov	r0, r4
 8107148:	f7ff fef0 	bl	8106f2c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810714c:	6823      	ldr	r3, [r4, #0]
 810714e:	685a      	ldr	r2, [r3, #4]
 8107150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107156:	689a      	ldr	r2, [r3, #8]
 8107158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810715c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 810715e:	681a      	ldr	r2, [r3, #0]
 8107160:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8107164:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8107166:	601a      	str	r2, [r3, #0]
}
 8107168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 810716c:	f7ff bf76 	b.w	810705c <UART_CheckIdleState>
}
 8107170:	2001      	movs	r0, #1
 8107172:	bd10      	pop	{r4, pc}

08107174 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107174:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8107176:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107178:	b92b      	cbnz	r3, 8107186 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 810717a:	2301      	movs	r3, #1
 810717c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107180:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8107184:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107186:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107188:	4d09      	ldr	r5, [pc, #36]	; (81071b0 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810718a:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810718c:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 810718e:	4c09      	ldr	r4, [pc, #36]	; (81071b4 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107190:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107192:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107196:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8107198:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810719a:	011b      	lsls	r3, r3, #4
 810719c:	fbb3 f3f1 	udiv	r3, r3, r1
 81071a0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81071a4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 81071a6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81071a8:	011b      	lsls	r3, r3, #4
 81071aa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 81071ae:	e7e7      	b.n	8107180 <UARTEx_SetNbDataToProcess+0xc>
 81071b0:	08110eb6 	.word	0x08110eb6
 81071b4:	08110eae 	.word	0x08110eae

081071b8 <HAL_UARTEx_WakeupCallback>:
}
 81071b8:	4770      	bx	lr

081071ba <HAL_UARTEx_RxFifoFullCallback>:
 81071ba:	4770      	bx	lr

081071bc <HAL_UARTEx_TxFifoEmptyCallback>:
 81071bc:	4770      	bx	lr

081071be <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 81071be:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 81071c2:	2b01      	cmp	r3, #1
 81071c4:	d014      	beq.n	81071f0 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81071c6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 81071c8:	2324      	movs	r3, #36	; 0x24
 81071ca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81071ce:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 81071d0:	6813      	ldr	r3, [r2, #0]
 81071d2:	f023 0301 	bic.w	r3, r3, #1
 81071d6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81071d8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81071dc:	2300      	movs	r3, #0
 81071de:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81071e0:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 81071e2:	2220      	movs	r2, #32
 81071e4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 81071e8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 81071ec:	4618      	mov	r0, r3
 81071ee:	4770      	bx	lr
  __HAL_LOCK(huart);
 81071f0:	2002      	movs	r0, #2
}
 81071f2:	4770      	bx	lr

081071f4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 81071f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 81071f6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 81071fa:	2b01      	cmp	r3, #1
{
 81071fc:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 81071fe:	d017      	beq.n	8107230 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107200:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107202:	2324      	movs	r3, #36	; 0x24
 8107204:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107208:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 810720a:	682b      	ldr	r3, [r5, #0]
 810720c:	f023 0301 	bic.w	r3, r3, #1
 8107210:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107212:	68ab      	ldr	r3, [r5, #8]
 8107214:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8107218:	4319      	orrs	r1, r3
 810721a:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 810721c:	f7ff ffaa 	bl	8107174 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8107220:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107222:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8107224:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8107228:	2000      	movs	r0, #0
 810722a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 810722e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8107230:	2002      	movs	r0, #2
 8107232:	e7fc      	b.n	810722e <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08107234 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8107234:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8107236:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 810723a:	2b01      	cmp	r3, #1
{
 810723c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 810723e:	d017      	beq.n	8107270 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107240:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107242:	2324      	movs	r3, #36	; 0x24
 8107244:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107248:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 810724a:	682b      	ldr	r3, [r5, #0]
 810724c:	f023 0301 	bic.w	r3, r3, #1
 8107250:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107252:	68ab      	ldr	r3, [r5, #8]
 8107254:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8107258:	4319      	orrs	r1, r3
 810725a:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 810725c:	f7ff ff8a 	bl	8107174 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8107260:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107262:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8107264:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8107268:	2000      	movs	r0, #0
 810726a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 810726e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8107270:	2002      	movs	r0, #2
 8107272:	e7fc      	b.n	810726e <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08107274 <ai_ann_762_get_error>:
}

AI_API_ENTRY
ai_error ai_ann_762_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8107274:	f001 bb80 	b.w	8108978 <ai_platform_network_get_error>

08107278 <ai_ann_762_create>:
}

AI_API_ENTRY
ai_error ai_ann_762_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8107278:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 810727a:	2305      	movs	r3, #5
 810727c:	2200      	movs	r2, #0
 810727e:	e9cd 3200 	strd	r3, r2, [sp]
 8107282:	4a03      	ldr	r2, [pc, #12]	; (8107290 <ai_ann_762_create+0x18>)
 8107284:	2301      	movs	r3, #1
 8107286:	f001 fd91 	bl	8108dac <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 810728a:	b003      	add	sp, #12
 810728c:	f85d fb04 	ldr.w	pc, [sp], #4
 8107290:	10000510 	.word	0x10000510

08107294 <ai_ann_762_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_762_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8107294:	b910      	cbnz	r0, 810729c <ai_ann_762_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8107296:	4802      	ldr	r0, [pc, #8]	; (81072a0 <ai_ann_762_inputs_get+0xc>)
 8107298:	4b02      	ldr	r3, [pc, #8]	; (81072a4 <ai_ann_762_inputs_get+0x10>)
 810729a:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 810729c:	f001 bbe0 	b.w	8108a60 <ai_platform_inputs_get>
 81072a0:	10000510 	.word	0x10000510
 81072a4:	a1c00100 	.word	0xa1c00100

081072a8 <ai_ann_762_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_762_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 81072a8:	b910      	cbnz	r0, 81072b0 <ai_ann_762_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 81072aa:	4802      	ldr	r0, [pc, #8]	; (81072b4 <ai_ann_762_outputs_get+0xc>)
 81072ac:	4b02      	ldr	r3, [pc, #8]	; (81072b8 <ai_ann_762_outputs_get+0x10>)
 81072ae:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 81072b0:	f001 bcac 	b.w	8108c0c <ai_platform_outputs_get>
 81072b4:	10000510 	.word	0x10000510
 81072b8:	a1c00100 	.word	0xa1c00100

081072bc <ai_ann_762_init>:
}

AI_API_ENTRY
ai_bool ai_ann_762_init(
  ai_handle network, const ai_network_params* params)
{
 81072bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81072c0:	4607      	mov	r7, r0
 81072c2:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 81072c4:	f001 fe48 	bl	8108f58 <ai_platform_network_init>
  if (!net_ctx) return false;
 81072c8:	4604      	mov	r4, r0
 81072ca:	2800      	cmp	r0, #0
 81072cc:	f000 8092 	beq.w	81073f4 <ai_ann_762_init+0x138>
  if (ai_platform_get_weights_map(g_ann_762_weights_map, 1, params)) {
 81072d0:	4e4f      	ldr	r6, [pc, #316]	; (8107410 <ai_ann_762_init+0x154>)
 81072d2:	4642      	mov	r2, r8
 81072d4:	2101      	movs	r1, #1
 81072d6:	4630      	mov	r0, r6
 81072d8:	f001 fa84 	bl	81087e4 <ai_platform_get_weights_map>
 81072dc:	4605      	mov	r5, r0
 81072de:	2800      	cmp	r0, #0
 81072e0:	f000 808a 	beq.w	81073f8 <ai_ann_762_init+0x13c>
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 81072e4:	4a4b      	ldr	r2, [pc, #300]	; (8107414 <ai_ann_762_init+0x158>)
 81072e6:	6813      	ldr	r3, [r2, #0]
 81072e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81072ec:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 0);
 81072ee:	6833      	ldr	r3, [r6, #0]
    gemm_3_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 0);
 81072f0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 81072f4:	4a48      	ldr	r2, [pc, #288]	; (8107418 <ai_ann_762_init+0x15c>)
 81072f6:	6811      	ldr	r1, [r2, #0]
 81072f8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 81072fc:	6011      	str	r1, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 1044);
 81072fe:	f203 4114 	addw	r1, r3, #1044	; 0x414
 8107302:	6091      	str	r1, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 20);
 8107304:	f103 0114 	add.w	r1, r3, #20
 8107308:	60d1      	str	r1, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 810730a:	4a44      	ldr	r2, [pc, #272]	; (810741c <ai_ann_762_init+0x160>)
 810730c:	6811      	ldr	r1, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 581688);
 810730e:	f503 260e 	add.w	r6, r3, #581632	; 0x8e000
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8107312:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8107316:	6011      	str	r1, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 581688);
 8107318:	f106 0138 	add.w	r1, r6, #56	; 0x38
    gemm_0_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 581688);
 810731c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8107320:	4a3f      	ldr	r2, [pc, #252]	; (8107420 <ai_ann_762_init+0x164>)
 8107322:	6811      	ldr	r1, [r2, #0]
 8107324:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8107328:	6011      	str	r1, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 584736);
 810732a:	f506 6142 	add.w	r1, r6, #3104	; 0xc20
    gemm_2_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 584736);
 810732e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8107332:	4a3c      	ldr	r2, [pc, #240]	; (8107424 <ai_ann_762_init+0x168>)
 8107334:	6811      	ldr	r1, [r2, #0]
 8107336:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 810733a:	6011      	str	r1, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 586272);
 810733c:	f503 210f 	add.w	r1, r3, #585728	; 0x8f000
 8107340:	f501 7108 	add.w	r1, r1, #544	; 0x220
    gemm_1_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 585248);
 8107344:	f506 6662 	add.w	r6, r6, #3616	; 0xe20
    gemm_1_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 586272);
 8107348:	6091      	str	r1, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 585248);
 810734a:	60d6      	str	r6, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 810734c:	4a36      	ldr	r2, [pc, #216]	; (8107428 <ai_ann_762_init+0x16c>)
 810734e:	6811      	ldr	r1, [r2, #0]
 8107350:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8107354:	6011      	str	r1, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 781344);
 8107356:	f503 213e 	add.w	r1, r3, #778240	; 0xbe000
 810735a:	f501 6142 	add.w	r1, r1, #3104	; 0xc20
    gemm_1_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 781344);
 810735e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8107362:	4a32      	ldr	r2, [pc, #200]	; (810742c <ai_ann_762_init+0x170>)
 8107364:	6811      	ldr	r1, [r2, #0]
 8107366:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 810736a:	6011      	str	r1, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 783392);
 810736c:	f503 213f 	add.w	r1, r3, #782336	; 0xbf000
 8107370:	f501 6084 	add.w	r0, r1, #1056	; 0x420
    gemm_2_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 782368);
 8107374:	3120      	adds	r1, #32
 8107376:	60d1      	str	r1, [r2, #12]
    gemm_2_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 783392);
 8107378:	6090      	str	r0, [r2, #8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 810737a:	4a2d      	ldr	r2, [pc, #180]	; (8107430 <ai_ann_762_init+0x174>)
 810737c:	6811      	ldr	r1, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 816160);
 810737e:	f503 2347 	add.w	r3, r3, #815104	; 0xc7000
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8107382:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_3_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 816160);
 8107386:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 810738a:	6011      	str	r1, [r2, #0]
    gemm_3_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 816160);
 810738c:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_ann_762_activations_map, 1, params)) {
 8107390:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8107458 <ai_ann_762_init+0x19c>
 8107394:	4642      	mov	r2, r8
 8107396:	2101      	movs	r1, #1
 8107398:	4648      	mov	r0, r9
 810739a:	f001 fa77 	bl	810888c <ai_platform_get_activations_map>
 810739e:	4606      	mov	r6, r0
 81073a0:	b380      	cbz	r0, 8107404 <ai_ann_762_init+0x148>
    serving_default_dense_input0_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073a2:	f8d9 3000 	ldr.w	r3, [r9]
 81073a6:	4a23      	ldr	r2, [pc, #140]	; (8107434 <ai_ann_762_init+0x178>)
    gemm_0_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073a8:	4923      	ldr	r1, [pc, #140]	; (8107438 <ai_ann_762_init+0x17c>)
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073aa:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073ae:	f603 32e8 	addw	r2, r3, #3048	; 0xbe8
    gemm_0_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073b2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073b6:	4921      	ldr	r1, [pc, #132]	; (810743c <ai_ann_762_init+0x180>)
    nl_0_nl_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073b8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    gemm_1_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073bc:	4920      	ldr	r1, [pc, #128]	; (8107440 <ai_ann_762_init+0x184>)
    gemm_1_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073be:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073c2:	4a20      	ldr	r2, [pc, #128]	; (8107444 <ai_ann_762_init+0x188>)
    nl_1_nl_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073c4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_2_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 1024);
 81073c8:	4a1f      	ldr	r2, [pc, #124]	; (8107448 <ai_ann_762_init+0x18c>)
 81073ca:	f503 6180 	add.w	r1, r3, #1024	; 0x400
    gemm_2_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 1024);
 81073ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_2_nl_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073d2:	4a1e      	ldr	r2, [pc, #120]	; (810744c <ai_ann_762_init+0x190>)
    nl_2_nl_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073d4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_3_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 512);
 81073d8:	4a1d      	ldr	r2, [pc, #116]	; (8107450 <ai_ann_762_init+0x194>)
 81073da:	f503 7100 	add.w	r1, r3, #512	; 0x200
    gemm_3_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 512);
 81073de:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_4_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073e2:	4a1c      	ldr	r2, [pc, #112]	; (8107454 <ai_ann_762_init+0x198>)
    nl_4_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073e4:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= ann_762_configure_weights(net_ctx, params);
  ok &= ann_762_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 81073e8:	4638      	mov	r0, r7
 81073ea:	f001 fea3 	bl	8109134 <ai_platform_network_post_init>
 81073ee:	4030      	ands	r0, r6
 81073f0:	4005      	ands	r5, r0
 81073f2:	b2e8      	uxtb	r0, r5

  return ok;
}
 81073f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 81073f8:	2212      	movs	r2, #18
 81073fa:	2130      	movs	r1, #48	; 0x30
 81073fc:	4620      	mov	r0, r4
 81073fe:	f001 fb29 	bl	8108a54 <ai_platform_network_set_error>
  return false;
 8107402:	e7c5      	b.n	8107390 <ai_ann_762_init+0xd4>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8107404:	2213      	movs	r2, #19
 8107406:	2130      	movs	r1, #48	; 0x30
 8107408:	4620      	mov	r0, r4
 810740a:	f001 fb23 	bl	8108a54 <ai_platform_network_set_error>
  return false;
 810740e:	e7eb      	b.n	81073e8 <ai_ann_762_init+0x12c>
 8107410:	10019344 	.word	0x10019344
 8107414:	10000758 	.word	0x10000758
 8107418:	100005ec 	.word	0x100005ec
 810741c:	10000578 	.word	0x10000578
 8107420:	100006b8 	.word	0x100006b8
 8107424:	1000068c 	.word	0x1000068c
 8107428:	10000618 	.word	0x10000618
 810742c:	1000072c 	.word	0x1000072c
 8107430:	100007cc 	.word	0x100007cc
 8107434:	10000928 	.word	0x10000928
 8107438:	100005c0 	.word	0x100005c0
 810743c:	10000818 	.word	0x10000818
 8107440:	10000660 	.word	0x10000660
 8107444:	10000864 	.word	0x10000864
 8107448:	10000700 	.word	0x10000700
 810744c:	100008b0 	.word	0x100008b0
 8107450:	100007a0 	.word	0x100007a0
 8107454:	100008fc 	.word	0x100008fc
 8107458:	10019340 	.word	0x10019340

0810745c <ai_ann_762_create_and_init>:
{
 810745c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8107460:	4688      	mov	r8, r1
 8107462:	b08f      	sub	sp, #60	; 0x3c
    err = ai_ann_762_create(network, AI_ANN_762_DATA_CONFIG);
 8107464:	2100      	movs	r1, #0
{
 8107466:	4606      	mov	r6, r0
 8107468:	4617      	mov	r7, r2
    err = ai_ann_762_create(network, AI_ANN_762_DATA_CONFIG);
 810746a:	f7ff ff05 	bl	8107278 <ai_ann_762_create>
    if (err.type != AI_ERROR_NONE)
 810746e:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_ann_762_create(network, AI_ANN_762_DATA_CONFIG);
 8107472:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8107474:	d107      	bne.n	8107486 <ai_ann_762_create_and_init+0x2a>
    if (ai_ann_762_data_params_get(&params) != true) {
 8107476:	4668      	mov	r0, sp
 8107478:	f000 f83a 	bl	81074f0 <ai_ann_762_data_params_get>
 810747c:	b938      	cbnz	r0, 810748e <ai_ann_762_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 810747e:	6830      	ldr	r0, [r6, #0]
 8107480:	f001 fa7a 	bl	8108978 <ai_platform_network_get_error>
 8107484:	4604      	mov	r4, r0
}
 8107486:	4620      	mov	r0, r4
 8107488:	b00f      	add	sp, #60	; 0x3c
 810748a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 810748e:	f1b8 0f00 	cmp.w	r8, #0
 8107492:	d11a      	bne.n	81074ca <ai_ann_762_create_and_init+0x6e>
    if (weights) {
 8107494:	bb3f      	cbnz	r7, 81074e6 <ai_ann_762_create_and_init+0x8a>
    if (ai_ann_762_init(*network, &params) != true) {
 8107496:	6830      	ldr	r0, [r6, #0]
 8107498:	4669      	mov	r1, sp
 810749a:	f7ff ff0f 	bl	81072bc <ai_ann_762_init>
 810749e:	b928      	cbnz	r0, 81074ac <ai_ann_762_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 81074a0:	6830      	ldr	r0, [r6, #0]
 81074a2:	f001 fa69 	bl	8108978 <ai_platform_network_get_error>
 81074a6:	fa5f f980 	uxtb.w	r9, r0
 81074aa:	4604      	mov	r4, r0
    return err;
 81074ac:	f369 0407 	bfi	r4, r9, #0, #8
 81074b0:	e7e9      	b.n	8107486 <ai_ann_762_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 81074b2:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 81074b6:	4629      	mov	r1, r5
 81074b8:	a803      	add	r0, sp, #12
 81074ba:	f001 f97f 	bl	81087bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 81074be:	3501      	adds	r5, #1
 81074c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 81074c4:	42ab      	cmp	r3, r5
 81074c6:	dcf4      	bgt.n	81074b2 <ai_ann_762_create_and_init+0x56>
 81074c8:	e7e4      	b.n	8107494 <ai_ann_762_create_and_init+0x38>
 81074ca:	464d      	mov	r5, r9
 81074cc:	e7f8      	b.n	81074c0 <ai_ann_762_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 81074ce:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 81074d2:	4629      	mov	r1, r5
 81074d4:	a801      	add	r0, sp, #4
 81074d6:	f001 f971 	bl	81087bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 81074da:	3501      	adds	r5, #1
 81074dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 81074e0:	42ab      	cmp	r3, r5
 81074e2:	dcf4      	bgt.n	81074ce <ai_ann_762_create_and_init+0x72>
 81074e4:	e7d7      	b.n	8107496 <ai_ann_762_create_and_init+0x3a>
 81074e6:	2500      	movs	r5, #0
 81074e8:	e7f8      	b.n	81074dc <ai_ann_762_create_and_init+0x80>

081074ea <ai_ann_762_run>:

AI_API_ENTRY
ai_i32 ai_ann_762_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 81074ea:	f001 beab 	b.w	8109244 <ai_platform_network_process>
	...

081074f0 <ai_ann_762_data_params_get>:
 * @ingroup ann_762_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_ann_762_data_params_get(ai_network_params* params)
{
 81074f0:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 81074f2:	4603      	mov	r3, r0
{
 81074f4:	b085      	sub	sp, #20
  if (!params) return false;
 81074f6:	b170      	cbz	r0, 8107516 <ai_ann_762_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 81074f8:	4c08      	ldr	r4, [pc, #32]	; (810751c <ai_ann_762_data_params_get+0x2c>)
 81074fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 81074fe:	466a      	mov	r2, sp
 8107500:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_762_DATA_ACTIVATIONS_COUNT, g_ann_762_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8107504:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8107508:	ad02      	add	r5, sp, #8
 810750a:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_762_DATA_WEIGHTS_COUNT, g_ann_762_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 810750e:	4629      	mov	r1, r5
 8107510:	4618      	mov	r0, r3
 8107512:	f001 fa0f 	bl	8108934 <ai_platform_bind_network_params>
}
 8107516:	b005      	add	sp, #20
 8107518:	bd30      	pop	{r4, r5, pc}
 810751a:	bf00      	nop
 810751c:	081105c0 	.word	0x081105c0

08107520 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8107520:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_ann_762_create_and_init(&ann_762, act_addr, NULL);
 8107522:	4c15      	ldr	r4, [pc, #84]	; (8107578 <MX_X_CUBE_AI_Init+0x58>)
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8107524:	4815      	ldr	r0, [pc, #84]	; (810757c <MX_X_CUBE_AI_Init+0x5c>)
 8107526:	f004 f913 	bl	810b750 <puts>
  err = ai_ann_762_create_and_init(&ann_762, act_addr, NULL);
 810752a:	4915      	ldr	r1, [pc, #84]	; (8107580 <MX_X_CUBE_AI_Init+0x60>)
 810752c:	2200      	movs	r2, #0
 810752e:	4620      	mov	r0, r4
 8107530:	f7ff ff94 	bl	810745c <ai_ann_762_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8107534:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8107538:	d008      	beq.n	810754c <MX_X_CUBE_AI_Init+0x2c>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 810753a:	0a03      	lsrs	r3, r0, #8
 810753c:	460a      	mov	r2, r1
 810753e:	4811      	ldr	r0, [pc, #68]	; (8107584 <MX_X_CUBE_AI_Init+0x64>)
 8107540:	4911      	ldr	r1, [pc, #68]	; (8107588 <MX_X_CUBE_AI_Init+0x68>)

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 8107542:	b003      	add	sp, #12
 8107544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8107548:	f004 b89c 	b.w	810b684 <iprintf>
  ai_input = ai_ann_762_inputs_get(ann_762, NULL);
 810754c:	6820      	ldr	r0, [r4, #0]
 810754e:	9101      	str	r1, [sp, #4]
 8107550:	f7ff fea0 	bl	8107294 <ai_ann_762_inputs_get>
 8107554:	4d0d      	ldr	r5, [pc, #52]	; (810758c <MX_X_CUBE_AI_Init+0x6c>)
  ai_output = ai_ann_762_outputs_get(ann_762, NULL);
 8107556:	9901      	ldr	r1, [sp, #4]
  ai_input = ai_ann_762_inputs_get(ann_762, NULL);
 8107558:	6028      	str	r0, [r5, #0]
  ai_output = ai_ann_762_outputs_get(ann_762, NULL);
 810755a:	6820      	ldr	r0, [r4, #0]
 810755c:	f7ff fea4 	bl	81072a8 <ai_ann_762_outputs_get>
 8107560:	4b0b      	ldr	r3, [pc, #44]	; (8107590 <MX_X_CUBE_AI_Init+0x70>)
 8107562:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 8107564:	682b      	ldr	r3, [r5, #0]
 8107566:	685a      	ldr	r2, [r3, #4]
 8107568:	4b0a      	ldr	r3, [pc, #40]	; (8107594 <MX_X_CUBE_AI_Init+0x74>)
 810756a:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 810756c:	6842      	ldr	r2, [r0, #4]
 810756e:	4b0a      	ldr	r3, [pc, #40]	; (8107598 <MX_X_CUBE_AI_Init+0x78>)
 8107570:	601a      	str	r2, [r3, #0]
}
 8107572:	b003      	add	sp, #12
 8107574:	bd30      	pop	{r4, r5, pc}
 8107576:	bf00      	nop
 8107578:	10019350 	.word	0x10019350
 810757c:	081d8d20 	.word	0x081d8d20
 8107580:	10000990 	.word	0x10000990
 8107584:	081d8d58 	.word	0x081d8d58
 8107588:	081d8d3d 	.word	0x081d8d3d
 810758c:	10019348 	.word	0x10019348
 8107590:	1001934c 	.word	0x1001934c
 8107594:	10019354 	.word	0x10019354
 8107598:	10019358 	.word	0x10019358

0810759c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 810759c:	b570      	push	{r4, r5, r6, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;

  printf("TEMPLATE - run - main loop\r\n");

  if (ann_762) {
 810759e:	4c10      	ldr	r4, [pc, #64]	; (81075e0 <MX_X_CUBE_AI_Process+0x44>)
  printf("TEMPLATE - run - main loop\r\n");
 81075a0:	4810      	ldr	r0, [pc, #64]	; (81075e4 <MX_X_CUBE_AI_Process+0x48>)
 81075a2:	f004 f8d5 	bl	810b750 <puts>
  if (ann_762) {
 81075a6:	6823      	ldr	r3, [r4, #0]
 81075a8:	b18b      	cbz	r3, 81075ce <MX_X_CUBE_AI_Process+0x32>
  batch = ai_ann_762_run(ann_762, ai_input, ai_output);
 81075aa:	4e0f      	ldr	r6, [pc, #60]	; (81075e8 <MX_X_CUBE_AI_Process+0x4c>)
 81075ac:	4d0f      	ldr	r5, [pc, #60]	; (81075ec <MX_X_CUBE_AI_Process+0x50>)
 81075ae:	6832      	ldr	r2, [r6, #0]
 81075b0:	6829      	ldr	r1, [r5, #0]
 81075b2:	6820      	ldr	r0, [r4, #0]
 81075b4:	f7ff ff99 	bl	81074ea <ai_ann_762_run>
  if (batch != 1) {
 81075b8:	2801      	cmp	r0, #1
 81075ba:	d0f8      	beq.n	81075ae <MX_X_CUBE_AI_Process+0x12>
    ai_log_err(ai_ann_762_get_error(ann_762),
 81075bc:	6820      	ldr	r0, [r4, #0]
 81075be:	f7ff fe59 	bl	8107274 <ai_ann_762_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 81075c2:	490b      	ldr	r1, [pc, #44]	; (81075f0 <MX_X_CUBE_AI_Process+0x54>)
 81075c4:	0a03      	lsrs	r3, r0, #8
 81075c6:	b2c2      	uxtb	r2, r0
 81075c8:	480a      	ldr	r0, [pc, #40]	; (81075f4 <MX_X_CUBE_AI_Process+0x58>)
 81075ca:	f004 f85b 	bl	810b684 <iprintf>
  if (res) {
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
    ai_log_err(err, "Process has FAILED");
  }
    /* USER CODE END 6 */
}
 81075ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 81075d2:	4909      	ldr	r1, [pc, #36]	; (81075f8 <MX_X_CUBE_AI_Process+0x5c>)
 81075d4:	4807      	ldr	r0, [pc, #28]	; (81075f4 <MX_X_CUBE_AI_Process+0x58>)
 81075d6:	2310      	movs	r3, #16
 81075d8:	2211      	movs	r2, #17
 81075da:	f004 b853 	b.w	810b684 <iprintf>
 81075de:	bf00      	nop
 81075e0:	10019350 	.word	0x10019350
 81075e4:	081d8d8a 	.word	0x081d8d8a
 81075e8:	1001934c 	.word	0x1001934c
 81075ec:	10019348 	.word	0x10019348
 81075f0:	081d8da6 	.word	0x081d8da6
 81075f4:	081d8d58 	.word	0x081d8d58
 81075f8:	081d8db5 	.word	0x081d8db5

081075fc <arm_rfft_32_fast_init_f32>:
 81075fc:	b180      	cbz	r0, 8107620 <arm_rfft_32_fast_init_f32+0x24>
 81075fe:	4b0a      	ldr	r3, [pc, #40]	; (8107628 <arm_rfft_32_fast_init_f32+0x2c>)
 8107600:	4a0a      	ldr	r2, [pc, #40]	; (810762c <arm_rfft_32_fast_init_f32+0x30>)
 8107602:	8999      	ldrh	r1, [r3, #12]
 8107604:	b430      	push	{r4, r5}
 8107606:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810760a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810760e:	8181      	strh	r1, [r0, #12]
 8107610:	2320      	movs	r3, #32
 8107612:	2110      	movs	r1, #16
 8107614:	8001      	strh	r1, [r0, #0]
 8107616:	8203      	strh	r3, [r0, #16]
 8107618:	6142      	str	r2, [r0, #20]
 810761a:	bc30      	pop	{r4, r5}
 810761c:	2000      	movs	r0, #0
 810761e:	4770      	bx	lr
 8107620:	f04f 30ff 	mov.w	r0, #4294967295
 8107624:	4770      	bx	lr
 8107626:	bf00      	nop
 8107628:	081dc340 	.word	0x081dc340
 810762c:	081e7920 	.word	0x081e7920

08107630 <arm_rfft_64_fast_init_f32>:
 8107630:	b180      	cbz	r0, 8107654 <arm_rfft_64_fast_init_f32+0x24>
 8107632:	4b0a      	ldr	r3, [pc, #40]	; (810765c <arm_rfft_64_fast_init_f32+0x2c>)
 8107634:	4a0a      	ldr	r2, [pc, #40]	; (8107660 <arm_rfft_64_fast_init_f32+0x30>)
 8107636:	8999      	ldrh	r1, [r3, #12]
 8107638:	b430      	push	{r4, r5}
 810763a:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810763e:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107642:	8181      	strh	r1, [r0, #12]
 8107644:	2340      	movs	r3, #64	; 0x40
 8107646:	2120      	movs	r1, #32
 8107648:	8001      	strh	r1, [r0, #0]
 810764a:	8203      	strh	r3, [r0, #16]
 810764c:	6142      	str	r2, [r0, #20]
 810764e:	bc30      	pop	{r4, r5}
 8107650:	2000      	movs	r0, #0
 8107652:	4770      	bx	lr
 8107654:	f04f 30ff 	mov.w	r0, #4294967295
 8107658:	4770      	bx	lr
 810765a:	bf00      	nop
 810765c:	081dc370 	.word	0x081dc370
 8107660:	081ec1a0 	.word	0x081ec1a0

08107664 <arm_rfft_128_fast_init_f32>:
 8107664:	b180      	cbz	r0, 8107688 <arm_rfft_128_fast_init_f32+0x24>
 8107666:	4b0a      	ldr	r3, [pc, #40]	; (8107690 <arm_rfft_128_fast_init_f32+0x2c>)
 8107668:	4a0a      	ldr	r2, [pc, #40]	; (8107694 <arm_rfft_128_fast_init_f32+0x30>)
 810766a:	8999      	ldrh	r1, [r3, #12]
 810766c:	b430      	push	{r4, r5}
 810766e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107672:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107676:	8181      	strh	r1, [r0, #12]
 8107678:	2380      	movs	r3, #128	; 0x80
 810767a:	2140      	movs	r1, #64	; 0x40
 810767c:	8001      	strh	r1, [r0, #0]
 810767e:	8203      	strh	r3, [r0, #16]
 8107680:	6142      	str	r2, [r0, #20]
 8107682:	bc30      	pop	{r4, r5}
 8107684:	2000      	movs	r0, #0
 8107686:	4770      	bx	lr
 8107688:	f04f 30ff 	mov.w	r0, #4294967295
 810768c:	4770      	bx	lr
 810768e:	bf00      	nop
 8107690:	081dc390 	.word	0x081dc390
 8107694:	081e5320 	.word	0x081e5320

08107698 <arm_rfft_256_fast_init_f32>:
 8107698:	b188      	cbz	r0, 81076be <arm_rfft_256_fast_init_f32+0x26>
 810769a:	4b0a      	ldr	r3, [pc, #40]	; (81076c4 <arm_rfft_256_fast_init_f32+0x2c>)
 810769c:	4a0a      	ldr	r2, [pc, #40]	; (81076c8 <arm_rfft_256_fast_init_f32+0x30>)
 810769e:	8999      	ldrh	r1, [r3, #12]
 81076a0:	b430      	push	{r4, r5}
 81076a2:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81076a6:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81076aa:	8181      	strh	r1, [r0, #12]
 81076ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 81076b0:	2180      	movs	r1, #128	; 0x80
 81076b2:	8001      	strh	r1, [r0, #0]
 81076b4:	8203      	strh	r3, [r0, #16]
 81076b6:	6142      	str	r2, [r0, #20]
 81076b8:	bc30      	pop	{r4, r5}
 81076ba:	2000      	movs	r0, #0
 81076bc:	4770      	bx	lr
 81076be:	f04f 30ff 	mov.w	r0, #4294967295
 81076c2:	4770      	bx	lr
 81076c4:	081dc330 	.word	0x081dc330
 81076c8:	081e7520 	.word	0x081e7520

081076cc <arm_rfft_512_fast_init_f32>:
 81076cc:	b190      	cbz	r0, 81076f4 <arm_rfft_512_fast_init_f32+0x28>
 81076ce:	4b0b      	ldr	r3, [pc, #44]	; (81076fc <arm_rfft_512_fast_init_f32+0x30>)
 81076d0:	4a0b      	ldr	r2, [pc, #44]	; (8107700 <arm_rfft_512_fast_init_f32+0x34>)
 81076d2:	8999      	ldrh	r1, [r3, #12]
 81076d4:	b430      	push	{r4, r5}
 81076d6:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81076da:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81076de:	8181      	strh	r1, [r0, #12]
 81076e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81076e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 81076e8:	8001      	strh	r1, [r0, #0]
 81076ea:	8203      	strh	r3, [r0, #16]
 81076ec:	6142      	str	r2, [r0, #20]
 81076ee:	bc30      	pop	{r4, r5}
 81076f0:	2000      	movs	r0, #0
 81076f2:	4770      	bx	lr
 81076f4:	f04f 30ff 	mov.w	r0, #4294967295
 81076f8:	4770      	bx	lr
 81076fa:	bf00      	nop
 81076fc:	081dc360 	.word	0x081dc360
 8107700:	081eb9a0 	.word	0x081eb9a0

08107704 <arm_rfft_1024_fast_init_f32>:
 8107704:	b190      	cbz	r0, 810772c <arm_rfft_1024_fast_init_f32+0x28>
 8107706:	4b0b      	ldr	r3, [pc, #44]	; (8107734 <arm_rfft_1024_fast_init_f32+0x30>)
 8107708:	4a0b      	ldr	r2, [pc, #44]	; (8107738 <arm_rfft_1024_fast_init_f32+0x34>)
 810770a:	8999      	ldrh	r1, [r3, #12]
 810770c:	b430      	push	{r4, r5}
 810770e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107712:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107716:	8181      	strh	r1, [r0, #12]
 8107718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810771c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8107720:	8001      	strh	r1, [r0, #0]
 8107722:	8203      	strh	r3, [r0, #16]
 8107724:	6142      	str	r2, [r0, #20]
 8107726:	bc30      	pop	{r4, r5}
 8107728:	2000      	movs	r0, #0
 810772a:	4770      	bx	lr
 810772c:	f04f 30ff 	mov.w	r0, #4294967295
 8107730:	4770      	bx	lr
 8107732:	bf00      	nop
 8107734:	081dc380 	.word	0x081dc380
 8107738:	081e4320 	.word	0x081e4320

0810773c <arm_rfft_2048_fast_init_f32>:
 810773c:	b190      	cbz	r0, 8107764 <arm_rfft_2048_fast_init_f32+0x28>
 810773e:	4b0b      	ldr	r3, [pc, #44]	; (810776c <arm_rfft_2048_fast_init_f32+0x30>)
 8107740:	4a0b      	ldr	r2, [pc, #44]	; (8107770 <arm_rfft_2048_fast_init_f32+0x34>)
 8107742:	8999      	ldrh	r1, [r3, #12]
 8107744:	b430      	push	{r4, r5}
 8107746:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810774a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810774e:	8181      	strh	r1, [r0, #12]
 8107750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8107758:	8001      	strh	r1, [r0, #0]
 810775a:	8203      	strh	r3, [r0, #16]
 810775c:	6142      	str	r2, [r0, #20]
 810775e:	bc30      	pop	{r4, r5}
 8107760:	2000      	movs	r0, #0
 8107762:	4770      	bx	lr
 8107764:	f04f 30ff 	mov.w	r0, #4294967295
 8107768:	4770      	bx	lr
 810776a:	bf00      	nop
 810776c:	081dc320 	.word	0x081dc320
 8107770:	081e5520 	.word	0x081e5520

08107774 <arm_rfft_4096_fast_init_f32>:
 8107774:	b190      	cbz	r0, 810779c <arm_rfft_4096_fast_init_f32+0x28>
 8107776:	4b0b      	ldr	r3, [pc, #44]	; (81077a4 <arm_rfft_4096_fast_init_f32+0x30>)
 8107778:	4a0b      	ldr	r2, [pc, #44]	; (81077a8 <arm_rfft_4096_fast_init_f32+0x34>)
 810777a:	8999      	ldrh	r1, [r3, #12]
 810777c:	b430      	push	{r4, r5}
 810777e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107782:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107786:	8181      	strh	r1, [r0, #12]
 8107788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810778c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8107790:	8001      	strh	r1, [r0, #0]
 8107792:	8203      	strh	r3, [r0, #16]
 8107794:	6142      	str	r2, [r0, #20]
 8107796:	bc30      	pop	{r4, r5}
 8107798:	2000      	movs	r0, #0
 810779a:	4770      	bx	lr
 810779c:	f04f 30ff 	mov.w	r0, #4294967295
 81077a0:	4770      	bx	lr
 81077a2:	bf00      	nop
 81077a4:	081dc350 	.word	0x081dc350
 81077a8:	081e79a0 	.word	0x081e79a0

081077ac <arm_radix8_butterfly_f32>:
 81077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81077b0:	ed2d 8b10 	vpush	{d8-d15}
 81077b4:	b097      	sub	sp, #92	; 0x5c
 81077b6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 81077ba:	4603      	mov	r3, r0
 81077bc:	3304      	adds	r3, #4
 81077be:	eddf cacb 	vldr	s25, [pc, #812]	; 8107aec <arm_radix8_butterfly_f32+0x340>
 81077c2:	9014      	str	r0, [sp, #80]	; 0x50
 81077c4:	468a      	mov	sl, r1
 81077c6:	468b      	mov	fp, r1
 81077c8:	9315      	str	r3, [sp, #84]	; 0x54
 81077ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 81077cc:	ea4f 06db 	mov.w	r6, fp, lsr #3
 81077d0:	eb04 1246 	add.w	r2, r4, r6, lsl #5
 81077d4:	eb02 1006 	add.w	r0, r2, r6, lsl #4
 81077d8:	0131      	lsls	r1, r6, #4
 81077da:	eba6 0386 	sub.w	r3, r6, r6, lsl #2
 81077de:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 81077e2:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 81077e6:	e9cd 0100 	strd	r0, r1, [sp]
 81077ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 81077ee:	3104      	adds	r1, #4
 81077f0:	f108 0004 	add.w	r0, r8, #4
 81077f4:	9611      	str	r6, [sp, #68]	; 0x44
 81077f6:	4420      	add	r0, r4
 81077f8:	4421      	add	r1, r4
 81077fa:	012c      	lsls	r4, r5, #4
 81077fc:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8107800:	9403      	str	r4, [sp, #12]
 8107802:	00ec      	lsls	r4, r5, #3
 8107804:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8107806:	9404      	str	r4, [sp, #16]
 8107808:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 810780c:	9405      	str	r4, [sp, #20]
 810780e:	016c      	lsls	r4, r5, #5
 8107810:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
 8107814:	9402      	str	r4, [sp, #8]
 8107816:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8107818:	9c00      	ldr	r4, [sp, #0]
 810781a:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 810781e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8107822:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8107826:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 810782a:	f04f 0c00 	mov.w	ip, #0
 810782e:	ed51 aa01 	vldr	s21, [r1, #-4]
 8107832:	edd3 1a00 	vldr	s3, [r3]
 8107836:	ed92 7a00 	vldr	s14, [r2]
 810783a:	ed94 5a00 	vldr	s10, [r4]
 810783e:	ed96 4a00 	vldr	s8, [r6]
 8107842:	edd7 7a00 	vldr	s15, [r7]
 8107846:	ed15 2a01 	vldr	s4, [r5, #-4]
 810784a:	ed50 6a01 	vldr	s13, [r0, #-4]
 810784e:	ee32 ba07 	vadd.f32	s22, s4, s14
 8107852:	ee76 0a84 	vadd.f32	s1, s13, s8
 8107856:	ee7a 5a85 	vadd.f32	s11, s21, s10
 810785a:	ee31 0aa7 	vadd.f32	s0, s3, s15
 810785e:	ee3b 6a25 	vadd.f32	s12, s22, s11
 8107862:	ee70 4a80 	vadd.f32	s9, s1, s0
 8107866:	ee76 6ac4 	vsub.f32	s13, s13, s8
 810786a:	ee36 4a24 	vadd.f32	s8, s12, s9
 810786e:	ee36 6a64 	vsub.f32	s12, s12, s9
 8107872:	ed05 4a01 	vstr	s8, [r5, #-4]
 8107876:	ed82 6a00 	vstr	s12, [r2]
 810787a:	edd0 ba00 	vldr	s23, [r0]
 810787e:	edd6 2a01 	vldr	s5, [r6, #4]
 8107882:	edd3 9a01 	vldr	s19, [r3, #4]
 8107886:	ed95 aa00 	vldr	s20, [r5]
 810788a:	ed92 6a01 	vldr	s12, [r2, #4]
 810788e:	ed97 3a01 	vldr	s6, [r7, #4]
 8107892:	ed91 ca00 	vldr	s24, [r1]
 8107896:	edd4 4a01 	vldr	s9, [r4, #4]
 810789a:	ee7b 3ae2 	vsub.f32	s7, s23, s5
 810789e:	ee36 9ae1 	vsub.f32	s18, s13, s3
 81078a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 81078a6:	ee73 8ae9 	vsub.f32	s17, s7, s19
 81078aa:	ee3a 4a46 	vsub.f32	s8, s20, s12
 81078ae:	ee39 9a27 	vadd.f32	s18, s18, s15
 81078b2:	ee78 8a83 	vadd.f32	s17, s17, s6
 81078b6:	eeb0 8a42 	vmov.f32	s16, s4
 81078ba:	eea9 8a6c 	vfms.f32	s16, s18, s25
 81078be:	44dc      	add	ip, fp
 81078c0:	45e2      	cmp	sl, ip
 81078c2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 81078c6:	eeb0 1a44 	vmov.f32	s2, s8
 81078ca:	eea8 1aec 	vfms.f32	s2, s17, s25
 81078ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81078d2:	ee33 7aa9 	vadd.f32	s14, s7, s19
 81078d6:	ee7c 3a64 	vsub.f32	s7, s24, s9
 81078da:	ee77 7aa1 	vadd.f32	s15, s15, s3
 81078de:	ee3a 6a06 	vadd.f32	s12, s20, s12
 81078e2:	ee7a 1ac5 	vsub.f32	s3, s21, s10
 81078e6:	ee3c aa24 	vadd.f32	s20, s24, s9
 81078ea:	ee74 4acc 	vsub.f32	s9, s9, s24
 81078ee:	ee39 3a83 	vadd.f32	s6, s19, s6
 81078f2:	ee35 5a6a 	vsub.f32	s10, s10, s21
 81078f6:	eef0 9a63 	vmov.f32	s19, s7
 81078fa:	eef0 aa48 	vmov.f32	s21, s16
 81078fe:	eee7 9a2c 	vfma.f32	s19, s14, s25
 8107902:	eea8 4aac 	vfma.f32	s8, s17, s25
 8107906:	eee7 4a2c 	vfma.f32	s9, s14, s25
 810790a:	eee7 aa6c 	vfms.f32	s21, s14, s25
 810790e:	eef0 8a41 	vmov.f32	s17, s2
 8107912:	eeb0 7a42 	vmov.f32	s14, s4
 8107916:	eeb0 2a61 	vmov.f32	s4, s3
 810791a:	ee7b 6a65 	vsub.f32	s13, s22, s11
 810791e:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 8107922:	ee76 5a4a 	vsub.f32	s11, s12, s20
 8107926:	eea9 7a2c 	vfma.f32	s14, s18, s25
 810792a:	eea7 2aac 	vfma.f32	s4, s15, s25
 810792e:	eea7 5aac 	vfma.f32	s10, s15, s25
 8107932:	eee7 8aec 	vfms.f32	s17, s15, s25
 8107936:	ee32 ba83 	vadd.f32	s22, s5, s6
 810793a:	ee76 bac3 	vsub.f32	s23, s13, s6
 810793e:	ee35 9ae0 	vsub.f32	s18, s11, s1
 8107942:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8107946:	ee36 6a0a 	vadd.f32	s12, s12, s20
 810794a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 810794e:	ee36 aa0b 	vadd.f32	s20, s12, s22
 8107952:	ee76 6a83 	vadd.f32	s13, s13, s6
 8107956:	ee77 7aa0 	vadd.f32	s15, s15, s1
 810795a:	ee34 3a42 	vsub.f32	s6, s8, s4
 810795e:	ee77 0a29 	vadd.f32	s1, s14, s19
 8107962:	ee36 6a4b 	vsub.f32	s12, s12, s22
 8107966:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 810796a:	ee39 0a00 	vadd.f32	s0, s18, s0
 810796e:	ee73 3aaa 	vadd.f32	s7, s7, s21
 8107972:	ee78 4a24 	vadd.f32	s9, s16, s9
 8107976:	ee37 7a69 	vsub.f32	s14, s14, s19
 810797a:	ee31 5a05 	vadd.f32	s10, s2, s10
 810797e:	ee71 5aa8 	vadd.f32	s11, s3, s17
 8107982:	ee32 4a04 	vadd.f32	s8, s4, s8
 8107986:	ed85 aa00 	vstr	s20, [r5]
 810798a:	ed82 6a01 	vstr	s12, [r2, #4]
 810798e:	444d      	add	r5, r9
 8107990:	ed41 2a01 	vstr	s5, [r1, #-4]
 8107994:	444a      	add	r2, r9
 8107996:	edc4 6a00 	vstr	s13, [r4]
 810799a:	ed81 0a00 	vstr	s0, [r1]
 810799e:	edc4 7a01 	vstr	s15, [r4, #4]
 81079a2:	4449      	add	r1, r9
 81079a4:	ed40 0a01 	vstr	s1, [r0, #-4]
 81079a8:	444c      	add	r4, r9
 81079aa:	ed87 7a00 	vstr	s14, [r7]
 81079ae:	edc6 3a00 	vstr	s7, [r6]
 81079b2:	edc3 4a00 	vstr	s9, [r3]
 81079b6:	ed80 3a00 	vstr	s6, [r0]
 81079ba:	ed87 4a01 	vstr	s8, [r7, #4]
 81079be:	4448      	add	r0, r9
 81079c0:	ed86 5a01 	vstr	s10, [r6, #4]
 81079c4:	444f      	add	r7, r9
 81079c6:	edc3 5a01 	vstr	s11, [r3, #4]
 81079ca:	444e      	add	r6, r9
 81079cc:	444b      	add	r3, r9
 81079ce:	f63f af2e 	bhi.w	810782e <arm_radix8_butterfly_f32+0x82>
 81079d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81079d4:	2b07      	cmp	r3, #7
 81079d6:	f240 81c9 	bls.w	8107d6c <arm_radix8_butterfly_f32+0x5c0>
 81079da:	9d02      	ldr	r5, [sp, #8]
 81079dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 81079de:	9b01      	ldr	r3, [sp, #4]
 81079e0:	9803      	ldr	r0, [sp, #12]
 81079e2:	9904      	ldr	r1, [sp, #16]
 81079e4:	9a05      	ldr	r2, [sp, #20]
 81079e6:	3508      	adds	r5, #8
 81079e8:	1975      	adds	r5, r6, r5
 81079ea:	330c      	adds	r3, #12
 81079ec:	950e      	str	r5, [sp, #56]	; 0x38
 81079ee:	4635      	mov	r5, r6
 81079f0:	18eb      	adds	r3, r5, r3
 81079f2:	f108 0808 	add.w	r8, r8, #8
 81079f6:	f10e 0408 	add.w	r4, lr, #8
 81079fa:	3008      	adds	r0, #8
 81079fc:	3108      	adds	r1, #8
 81079fe:	3208      	adds	r2, #8
 8107a00:	9307      	str	r3, [sp, #28]
 8107a02:	f105 030c 	add.w	r3, r5, #12
 8107a06:	4446      	add	r6, r8
 8107a08:	f04f 0e00 	mov.w	lr, #0
 8107a0c:	192c      	adds	r4, r5, r4
 8107a0e:	1828      	adds	r0, r5, r0
 8107a10:	1869      	adds	r1, r5, r1
 8107a12:	18aa      	adds	r2, r5, r2
 8107a14:	9308      	str	r3, [sp, #32]
 8107a16:	465b      	mov	r3, fp
 8107a18:	960d      	str	r6, [sp, #52]	; 0x34
 8107a1a:	46f3      	mov	fp, lr
 8107a1c:	940c      	str	r4, [sp, #48]	; 0x30
 8107a1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8107a20:	910a      	str	r1, [sp, #40]	; 0x28
 8107a22:	9209      	str	r2, [sp, #36]	; 0x24
 8107a24:	f04f 0801 	mov.w	r8, #1
 8107a28:	469e      	mov	lr, r3
 8107a2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8107a2c:	449b      	add	fp, r3
 8107a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8107a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8107a34:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8107a38:	9310      	str	r3, [sp, #64]	; 0x40
 8107a3a:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 8107a3e:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8107a42:	9102      	str	r1, [sp, #8]
 8107a44:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8107a48:	eb01 05cb 	add.w	r5, r1, fp, lsl #3
 8107a4c:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8107a50:	edd6 7a00 	vldr	s15, [r6]
 8107a54:	930f      	str	r3, [sp, #60]	; 0x3c
 8107a56:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8107a5a:	9101      	str	r1, [sp, #4]
 8107a5c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8107a60:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
 8107a64:	edd3 aa01 	vldr	s21, [r3, #4]
 8107a68:	edcd 7a06 	vstr	s15, [sp, #24]
 8107a6c:	9b01      	ldr	r3, [sp, #4]
 8107a6e:	edd5 7a00 	vldr	s15, [r5]
 8107a72:	ed97 ba01 	vldr	s22, [r7, #4]
 8107a76:	edcd 7a05 	vstr	s15, [sp, #20]
 8107a7a:	edd3 7a00 	vldr	s15, [r3]
 8107a7e:	9b02      	ldr	r3, [sp, #8]
 8107a80:	edcd 7a04 	vstr	s15, [sp, #16]
 8107a84:	edd3 7a00 	vldr	s15, [r3]
 8107a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8107a8a:	edcd 7a03 	vstr	s15, [sp, #12]
 8107a8e:	eb07 0ccb 	add.w	ip, r7, fp, lsl #3
 8107a92:	edd3 7a00 	vldr	s15, [r3]
 8107a96:	eddc ba01 	vldr	s23, [ip, #4]
 8107a9a:	edcd 7a02 	vstr	s15, [sp, #8]
 8107a9e:	eb0c 01cb 	add.w	r1, ip, fp, lsl #3
 8107aa2:	edd2 7a00 	vldr	s15, [r2]
 8107aa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8107aa8:	9100      	str	r1, [sp, #0]
 8107aaa:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
 8107aae:	4601      	mov	r1, r0
 8107ab0:	ed91 da01 	vldr	s26, [r1, #4]
 8107ab4:	edcd 7a01 	vstr	s15, [sp, #4]
 8107ab8:	9900      	ldr	r1, [sp, #0]
 8107aba:	edd2 7a00 	vldr	s15, [r2]
 8107abe:	ed91 ca01 	vldr	s24, [r1, #4]
 8107ac2:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8107ac6:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8107aca:	ed94 ea01 	vldr	s28, [r4, #4]
 8107ace:	edd0 da01 	vldr	s27, [r0, #4]
 8107ad2:	edcd 7a00 	vstr	s15, [sp]
 8107ad6:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 8107ada:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
 8107ade:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 8107ae2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8107ae6:	46c4      	mov	ip, r8
 8107ae8:	e002      	b.n	8107af0 <arm_radix8_butterfly_f32+0x344>
 8107aea:	bf00      	nop
 8107aec:	3f3504f3 	.word	0x3f3504f3
 8107af0:	ed94 9a00 	vldr	s18, [r4]
 8107af4:	ed90 fa00 	vldr	s30, [r0]
 8107af8:	ed91 6a00 	vldr	s12, [r1]
 8107afc:	edd5 7a00 	vldr	s15, [r5]
 8107b00:	edd3 6a00 	vldr	s13, [r3]
 8107b04:	ed57 4a01 	vldr	s9, [r7, #-4]
 8107b08:	ed92 5a00 	vldr	s10, [r2]
 8107b0c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8107b10:	ed96 aa00 	vldr	s20, [r6]
 8107b14:	ee35 0a06 	vadd.f32	s0, s10, s12
 8107b18:	ee73 5aa6 	vadd.f32	s11, s7, s13
 8107b1c:	ee39 8a27 	vadd.f32	s16, s18, s15
 8107b20:	ee34 7a8f 	vadd.f32	s14, s9, s30
 8107b24:	ee70 2a08 	vadd.f32	s5, s0, s16
 8107b28:	ee75 ea87 	vadd.f32	s29, s11, s14
 8107b2c:	ee35 5a46 	vsub.f32	s10, s10, s12
 8107b30:	ee3e 6aa2 	vadd.f32	s12, s29, s5
 8107b34:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8107b38:	ed06 6a01 	vstr	s12, [r6, #-4]
 8107b3c:	edd1 9a01 	vldr	s19, [r1, #4]
 8107b40:	edd2 fa01 	vldr	s31, [r2, #4]
 8107b44:	edd4 6a01 	vldr	s13, [r4, #4]
 8107b48:	edd3 1a01 	vldr	s3, [r3, #4]
 8107b4c:	ed95 3a01 	vldr	s6, [r5, #4]
 8107b50:	edd0 8a01 	vldr	s17, [r0, #4]
 8107b54:	ed97 4a00 	vldr	s8, [r7]
 8107b58:	ee3f 6ae9 	vsub.f32	s12, s31, s19
 8107b5c:	ee35 1a49 	vsub.f32	s2, s10, s18
 8107b60:	ee76 0a66 	vsub.f32	s1, s12, s13
 8107b64:	ee31 1a27 	vadd.f32	s2, s2, s15
 8107b68:	ee3a 2a61 	vsub.f32	s4, s20, s3
 8107b6c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8107b70:	ee70 0a83 	vadd.f32	s1, s1, s6
 8107b74:	ee3f 5aa9 	vadd.f32	s10, s31, s19
 8107b78:	ee74 9acf 	vsub.f32	s19, s9, s30
 8107b7c:	ee77 7a89 	vadd.f32	s15, s15, s18
 8107b80:	ee7a 1a21 	vadd.f32	s3, s20, s3
 8107b84:	eeb0 aa42 	vmov.f32	s20, s4
 8107b88:	ee74 fa68 	vsub.f32	s31, s8, s17
 8107b8c:	eea0 aaec 	vfms.f32	s20, s1, s25
 8107b90:	44f4      	add	ip, lr
 8107b92:	45e2      	cmp	sl, ip
 8107b94:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8107b98:	eeb0 9a63 	vmov.f32	s18, s7
 8107b9c:	ee74 5a28 	vadd.f32	s11, s8, s17
 8107ba0:	ee38 4ac4 	vsub.f32	s8, s17, s8
 8107ba4:	eef0 8a69 	vmov.f32	s17, s19
 8107ba8:	eea1 9a6c 	vfms.f32	s18, s2, s25
 8107bac:	eee7 8aac 	vfma.f32	s17, s15, s25
 8107bb0:	ee36 6a43 	vsub.f32	s12, s12, s6
 8107bb4:	ee7f 4a64 	vsub.f32	s9, s30, s9
 8107bb8:	ee36 6a26 	vadd.f32	s12, s12, s13
 8107bbc:	eea0 2aac 	vfma.f32	s4, s1, s25
 8107bc0:	eef0 0a4a 	vmov.f32	s1, s20
 8107bc4:	eee7 0aec 	vfms.f32	s1, s15, s25
 8107bc8:	eee7 4aac 	vfma.f32	s9, s15, s25
 8107bcc:	eef0 7a68 	vmov.f32	s15, s17
 8107bd0:	eef0 8a49 	vmov.f32	s17, s18
 8107bd4:	ee36 3a83 	vadd.f32	s6, s13, s6
 8107bd8:	eee6 8a6c 	vfms.f32	s17, s12, s25
 8107bdc:	eee1 3a2c 	vfma.f32	s7, s2, s25
 8107be0:	eeb0 1a6f 	vmov.f32	s2, s31
 8107be4:	eea6 1a2c 	vfma.f32	s2, s12, s25
 8107be8:	ee71 6ae5 	vsub.f32	s13, s3, s11
 8107bec:	eea6 4a2c 	vfma.f32	s8, s12, s25
 8107bf0:	ee71 5aa5 	vadd.f32	s11, s3, s11
 8107bf4:	ee75 1a03 	vadd.f32	s3, s10, s6
 8107bf8:	ee7e 2ae2 	vsub.f32	s5, s29, s5
 8107bfc:	ee37 fa43 	vsub.f32	s30, s14, s6
 8107c00:	ee75 eae1 	vsub.f32	s29, s11, s3
 8107c04:	eeb0 6a68 	vmov.f32	s12, s17
 8107c08:	ee76 8ac0 	vsub.f32	s17, s13, s0
 8107c0c:	ee34 4a09 	vadd.f32	s8, s8, s18
 8107c10:	ee76 fa2f 	vadd.f32	s31, s12, s31
 8107c14:	ee76 6ac8 	vsub.f32	s13, s13, s16
 8107c18:	ee33 6a81 	vadd.f32	s12, s7, s2
 8107c1c:	ee38 8a88 	vadd.f32	s16, s17, s16
 8107c20:	ee73 3ac1 	vsub.f32	s7, s7, s2
 8107c24:	ee37 7a45 	vsub.f32	s14, s14, s10
 8107c28:	ee2c 1a2e 	vmul.f32	s2, s24, s29
 8107c2c:	ee3f 5a05 	vadd.f32	s10, s30, s10
 8107c30:	ee22 9acc 	vnmul.f32	s18, s5, s24
 8107c34:	ed9d fa03 	vldr	s30, [sp, #12]
 8107c38:	ee70 6a26 	vadd.f32	s13, s0, s13
 8107c3c:	ee33 7a07 	vadd.f32	s14, s6, s14
 8107c40:	eeaf 1a22 	vfma.f32	s2, s30, s5
 8107c44:	eeaf 9a2e 	vfma.f32	s18, s30, s29
 8107c48:	ee7a 4a24 	vadd.f32	s9, s20, s9
 8107c4c:	ed9d fa01 	vldr	s30, [sp, #4]
 8107c50:	ee79 9aa0 	vadd.f32	s19, s19, s1
 8107c54:	ee25 aa4b 	vnmul.f32	s20, s10, s22
 8107c58:	ee72 0a67 	vsub.f32	s1, s4, s15
 8107c5c:	ee37 2a82 	vadd.f32	s4, s15, s4
 8107c60:	ee6b 7a08 	vmul.f32	s15, s22, s16
 8107c64:	eeaf aa08 	vfma.f32	s20, s30, s16
 8107c68:	eeef 7a05 	vfma.f32	s15, s30, s10
 8107c6c:	ee2d 3aa6 	vmul.f32	s6, s27, s13
 8107c70:	ed9d fa05 	vldr	s30, [sp, #20]
 8107c74:	ee67 8a6d 	vnmul.f32	s17, s14, s27
 8107c78:	eeaf 3a07 	vfma.f32	s6, s30, s14
 8107c7c:	eeef 8a26 	vfma.f32	s17, s30, s13
 8107c80:	ee66 2a6a 	vnmul.f32	s5, s12, s21
 8107c84:	ed9d fa00 	vldr	s30, [sp]
 8107c88:	ee2a 0aa0 	vmul.f32	s0, s21, s1
 8107c8c:	eeef 2a20 	vfma.f32	s5, s30, s1
 8107c90:	ee6e ea02 	vmul.f32	s29, s28, s4
 8107c94:	eddd 0a06 	vldr	s1, [sp, #24]
 8107c98:	ee23 5ace 	vnmul.f32	s10, s7, s28
 8107c9c:	eee0 eaa3 	vfma.f32	s29, s1, s7
 8107ca0:	ee2b 8aa9 	vmul.f32	s16, s23, s19
 8107ca4:	eddd 3a02 	vldr	s7, [sp, #8]
 8107ca8:	eeaf 0a06 	vfma.f32	s0, s30, s12
 8107cac:	eea3 8a84 	vfma.f32	s16, s7, s8
 8107cb0:	ee24 7a6b 	vnmul.f32	s14, s8, s23
 8107cb4:	ee6d 6a24 	vmul.f32	s13, s26, s9
 8107cb8:	ed9d 4a04 	vldr	s8, [sp, #16]
 8107cbc:	ee2f 6acd 	vnmul.f32	s12, s31, s26
 8107cc0:	eea0 5a82 	vfma.f32	s10, s1, s4
 8107cc4:	eea3 7aa9 	vfma.f32	s14, s7, s19
 8107cc8:	eee4 6a2f 	vfma.f32	s13, s8, s31
 8107ccc:	eea4 6a24 	vfma.f32	s12, s8, s9
 8107cd0:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8107cd4:	edc6 5a00 	vstr	s11, [r6]
 8107cd8:	ed83 1a00 	vstr	s2, [r3]
 8107cdc:	ed83 9a01 	vstr	s18, [r3, #4]
 8107ce0:	444e      	add	r6, r9
 8107ce2:	ed47 7a01 	vstr	s15, [r7, #-4]
 8107ce6:	ed87 aa00 	vstr	s20, [r7]
 8107cea:	444b      	add	r3, r9
 8107cec:	ed80 3a00 	vstr	s6, [r0]
 8107cf0:	edc0 8a01 	vstr	s17, [r0, #4]
 8107cf4:	444f      	add	r7, r9
 8107cf6:	ed82 0a00 	vstr	s0, [r2]
 8107cfa:	4448      	add	r0, r9
 8107cfc:	edc2 2a01 	vstr	s5, [r2, #4]
 8107d00:	edc5 ea00 	vstr	s29, [r5]
 8107d04:	ed85 5a01 	vstr	s10, [r5, #4]
 8107d08:	444a      	add	r2, r9
 8107d0a:	edc1 6a00 	vstr	s13, [r1]
 8107d0e:	ed81 6a01 	vstr	s12, [r1, #4]
 8107d12:	444d      	add	r5, r9
 8107d14:	ed84 8a00 	vstr	s16, [r4]
 8107d18:	ed84 7a01 	vstr	s14, [r4, #4]
 8107d1c:	4449      	add	r1, r9
 8107d1e:	444c      	add	r4, r9
 8107d20:	f63f aee6 	bhi.w	8107af0 <arm_radix8_butterfly_f32+0x344>
 8107d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8107d26:	3308      	adds	r3, #8
 8107d28:	930e      	str	r3, [sp, #56]	; 0x38
 8107d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107d2c:	3308      	adds	r3, #8
 8107d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8107d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8107d32:	3308      	adds	r3, #8
 8107d34:	930c      	str	r3, [sp, #48]	; 0x30
 8107d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107d38:	3308      	adds	r3, #8
 8107d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8107d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107d3e:	3308      	adds	r3, #8
 8107d40:	930a      	str	r3, [sp, #40]	; 0x28
 8107d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107d44:	3308      	adds	r3, #8
 8107d46:	9309      	str	r3, [sp, #36]	; 0x24
 8107d48:	9b08      	ldr	r3, [sp, #32]
 8107d4a:	3308      	adds	r3, #8
 8107d4c:	9308      	str	r3, [sp, #32]
 8107d4e:	9b07      	ldr	r3, [sp, #28]
 8107d50:	3308      	adds	r3, #8
 8107d52:	9307      	str	r3, [sp, #28]
 8107d54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8107d56:	f108 0801 	add.w	r8, r8, #1
 8107d5a:	4543      	cmp	r3, r8
 8107d5c:	f47f ae65 	bne.w	8107a2a <arm_radix8_butterfly_f32+0x27e>
 8107d60:	469b      	mov	fp, r3
 8107d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8107d64:	00db      	lsls	r3, r3, #3
 8107d66:	b29b      	uxth	r3, r3
 8107d68:	9312      	str	r3, [sp, #72]	; 0x48
 8107d6a:	e52e      	b.n	81077ca <arm_radix8_butterfly_f32+0x1e>
 8107d6c:	b017      	add	sp, #92	; 0x5c
 8107d6e:	ecbd 8b10 	vpop	{d8-d15}
 8107d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107d76:	bf00      	nop

08107d78 <arm_cfft_radix8by2_f32>:
 8107d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107d7c:	f8b0 e000 	ldrh.w	lr, [r0]
 8107d80:	6842      	ldr	r2, [r0, #4]
 8107d82:	ed2d 8b08 	vpush	{d8-d11}
 8107d86:	4607      	mov	r7, r0
 8107d88:	4608      	mov	r0, r1
 8107d8a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8107d8e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8107d92:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8107d96:	b082      	sub	sp, #8
 8107d98:	f000 80a0 	beq.w	8107edc <arm_cfft_radix8by2_f32+0x164>
 8107d9c:	008c      	lsls	r4, r1, #2
 8107d9e:	3410      	adds	r4, #16
 8107da0:	f100 0310 	add.w	r3, r0, #16
 8107da4:	1906      	adds	r6, r0, r4
 8107da6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8107daa:	4444      	add	r4, r8
 8107dac:	f102 0c10 	add.w	ip, r2, #16
 8107db0:	f108 0510 	add.w	r5, r8, #16
 8107db4:	ed15 2a04 	vldr	s4, [r5, #-16]
 8107db8:	ed55 2a03 	vldr	s5, [r5, #-12]
 8107dbc:	ed14 5a04 	vldr	s10, [r4, #-16]
 8107dc0:	ed54 5a03 	vldr	s11, [r4, #-12]
 8107dc4:	ed53 4a04 	vldr	s9, [r3, #-16]
 8107dc8:	ed55 8a02 	vldr	s17, [r5, #-8]
 8107dcc:	ed15 8a01 	vldr	s16, [r5, #-4]
 8107dd0:	ed16 3a04 	vldr	s6, [r6, #-16]
 8107dd4:	ed56 3a03 	vldr	s7, [r6, #-12]
 8107dd8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8107ddc:	ed14 7a01 	vldr	s14, [r4, #-4]
 8107de0:	ed13 4a03 	vldr	s8, [r3, #-12]
 8107de4:	ed53 6a02 	vldr	s13, [r3, #-8]
 8107de8:	ed13 6a01 	vldr	s12, [r3, #-4]
 8107dec:	ed16 0a02 	vldr	s0, [r6, #-8]
 8107df0:	ed56 0a01 	vldr	s1, [r6, #-4]
 8107df4:	ee74 ba82 	vadd.f32	s23, s9, s4
 8107df8:	ee34 ba22 	vadd.f32	s22, s8, s5
 8107dfc:	ee73 9a05 	vadd.f32	s19, s6, s10
 8107e00:	ee33 9aa5 	vadd.f32	s18, s7, s11
 8107e04:	ee30 1a27 	vadd.f32	s2, s0, s15
 8107e08:	ee70 1a87 	vadd.f32	s3, s1, s14
 8107e0c:	ee76 aaa8 	vadd.f32	s21, s13, s17
 8107e10:	ee36 aa08 	vadd.f32	s20, s12, s16
 8107e14:	ed43 ba04 	vstr	s23, [r3, #-16]
 8107e18:	ed03 ba03 	vstr	s22, [r3, #-12]
 8107e1c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8107e20:	ed03 aa01 	vstr	s20, [r3, #-4]
 8107e24:	ed06 1a02 	vstr	s2, [r6, #-8]
 8107e28:	ed46 1a01 	vstr	s3, [r6, #-4]
 8107e2c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8107e30:	ed06 9a03 	vstr	s18, [r6, #-12]
 8107e34:	ee74 4ac2 	vsub.f32	s9, s9, s4
 8107e38:	ee34 4a62 	vsub.f32	s8, s8, s5
 8107e3c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8107e40:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8107e44:	ed1c 3a04 	vldr	s6, [ip, #-16]
 8107e48:	ed5c 3a03 	vldr	s7, [ip, #-12]
 8107e4c:	ee23 2a65 	vnmul.f32	s4, s6, s11
 8107e50:	ee64 1a23 	vmul.f32	s3, s8, s7
 8107e54:	ee23 1ae4 	vnmul.f32	s2, s7, s9
 8107e58:	ee65 2a03 	vmul.f32	s5, s10, s6
 8107e5c:	eea4 1a03 	vfma.f32	s2, s8, s6
 8107e60:	3310      	adds	r3, #16
 8107e62:	4573      	cmp	r3, lr
 8107e64:	eee4 1a83 	vfma.f32	s3, s9, s6
 8107e68:	f106 0610 	add.w	r6, r6, #16
 8107e6c:	f10c 0c10 	add.w	ip, ip, #16
 8107e70:	eea5 2a23 	vfma.f32	s4, s10, s7
 8107e74:	f105 0510 	add.w	r5, r5, #16
 8107e78:	f104 0410 	add.w	r4, r4, #16
 8107e7c:	eee5 2aa3 	vfma.f32	s5, s11, s7
 8107e80:	ed05 1a07 	vstr	s2, [r5, #-28]	; 0xffffffe4
 8107e84:	ed45 1a08 	vstr	s3, [r5, #-32]	; 0xffffffe0
 8107e88:	ed04 2a08 	vstr	s4, [r4, #-32]	; 0xffffffe0
 8107e8c:	ed44 2a07 	vstr	s5, [r4, #-28]	; 0xffffffe4
 8107e90:	ed5c 5a05 	vldr	s11, [ip, #-20]	; 0xffffffec
 8107e94:	ed1c 5a06 	vldr	s10, [ip, #-24]	; 0xffffffe8
 8107e98:	ee76 6ae8 	vsub.f32	s13, s13, s17
 8107e9c:	ee36 6a48 	vsub.f32	s12, s12, s16
 8107ea0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8107ea4:	ee37 7a60 	vsub.f32	s14, s14, s1
 8107ea8:	ee26 3a25 	vmul.f32	s6, s12, s11
 8107eac:	ee65 3ae6 	vnmul.f32	s7, s11, s13
 8107eb0:	ee27 4a85 	vmul.f32	s8, s15, s10
 8107eb4:	ee65 4a47 	vnmul.f32	s9, s10, s14
 8107eb8:	eee6 3a05 	vfma.f32	s7, s12, s10
 8107ebc:	eea6 3a85 	vfma.f32	s6, s13, s10
 8107ec0:	eea7 4a25 	vfma.f32	s8, s14, s11
 8107ec4:	eee7 4aa5 	vfma.f32	s9, s15, s11
 8107ec8:	ed05 3a06 	vstr	s6, [r5, #-24]	; 0xffffffe8
 8107ecc:	ed45 3a05 	vstr	s7, [r5, #-20]	; 0xffffffec
 8107ed0:	ed04 4a05 	vstr	s8, [r4, #-20]	; 0xffffffec
 8107ed4:	ed44 4a06 	vstr	s9, [r4, #-24]	; 0xffffffe8
 8107ed8:	f47f af6c 	bne.w	8107db4 <arm_cfft_radix8by2_f32+0x3c>
 8107edc:	b289      	uxth	r1, r1
 8107ede:	2302      	movs	r3, #2
 8107ee0:	9101      	str	r1, [sp, #4]
 8107ee2:	f7ff fc63 	bl	81077ac <arm_radix8_butterfly_f32>
 8107ee6:	9901      	ldr	r1, [sp, #4]
 8107ee8:	687a      	ldr	r2, [r7, #4]
 8107eea:	4640      	mov	r0, r8
 8107eec:	2302      	movs	r3, #2
 8107eee:	b002      	add	sp, #8
 8107ef0:	ecbd 8b08 	vpop	{d8-d11}
 8107ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107ef8:	f7ff bc58 	b.w	81077ac <arm_radix8_butterfly_f32>

08107efc <arm_cfft_radix8by4_f32>:
 8107efc:	8803      	ldrh	r3, [r0, #0]
 8107efe:	ed91 7a00 	vldr	s14, [r1]
 8107f02:	edd1 7a01 	vldr	s15, [r1, #4]
 8107f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107f0a:	085b      	lsrs	r3, r3, #1
 8107f0c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8107f10:	edd2 5a00 	vldr	s11, [r2]
 8107f14:	6847      	ldr	r7, [r0, #4]
 8107f16:	ed92 4a01 	vldr	s8, [r2, #4]
 8107f1a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8107f1e:	ed2d 8b0e 	vpush	{d8-d14}
 8107f22:	ed98 5a00 	vldr	s10, [r8]
 8107f26:	edd8 2a01 	vldr	s5, [r8, #4]
 8107f2a:	ee37 6a25 	vadd.f32	s12, s14, s11
 8107f2e:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 8107f32:	edd5 4a00 	vldr	s9, [r5]
 8107f36:	ed95 3a01 	vldr	s6, [r5, #4]
 8107f3a:	ee75 6a06 	vadd.f32	s13, s10, s12
 8107f3e:	b08f      	sub	sp, #60	; 0x3c
 8107f40:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8107f44:	900d      	str	r0, [sp, #52]	; 0x34
 8107f46:	4608      	mov	r0, r1
 8107f48:	edc0 6a00 	vstr	s13, [r0]
 8107f4c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8107f50:	ee77 6a84 	vadd.f32	s13, s15, s8
 8107f54:	edd8 5a01 	vldr	s11, [r8, #4]
 8107f58:	ed95 2a01 	vldr	s4, [r5, #4]
 8107f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8107f5e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8107f62:	ee36 6a64 	vsub.f32	s12, s12, s9
 8107f66:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8107f6a:	ee73 3a07 	vadd.f32	s7, s6, s14
 8107f6e:	ee35 4a27 	vadd.f32	s8, s10, s15
 8107f72:	4614      	mov	r4, r2
 8107f74:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8107f78:	3408      	adds	r4, #8
 8107f7a:	462e      	mov	r6, r5
 8107f7c:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8107f80:	3108      	adds	r1, #8
 8107f82:	3608      	adds	r6, #8
 8107f84:	9406      	str	r4, [sp, #24]
 8107f86:	ee32 7a87 	vadd.f32	s14, s5, s14
 8107f8a:	ee36 6a45 	vsub.f32	s12, s12, s10
 8107f8e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8107f92:	ee75 5a82 	vadd.f32	s11, s11, s4
 8107f96:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8107f9a:	ee74 4a64 	vsub.f32	s9, s8, s9
 8107f9e:	463c      	mov	r4, r7
 8107fa0:	9103      	str	r1, [sp, #12]
 8107fa2:	9607      	str	r6, [sp, #28]
 8107fa4:	4611      	mov	r1, r2
 8107fa6:	f107 0608 	add.w	r6, r7, #8
 8107faa:	085a      	lsrs	r2, r3, #1
 8107fac:	3418      	adds	r4, #24
 8107fae:	edc0 5a01 	vstr	s11, [r0, #4]
 8107fb2:	920c      	str	r2, [sp, #48]	; 0x30
 8107fb4:	edc5 3a00 	vstr	s7, [r5]
 8107fb8:	edc5 4a01 	vstr	s9, [r5, #4]
 8107fbc:	9602      	str	r6, [sp, #8]
 8107fbe:	ed81 6a00 	vstr	s12, [r1]
 8107fc2:	edc1 6a01 	vstr	s13, [r1, #4]
 8107fc6:	9401      	str	r4, [sp, #4]
 8107fc8:	ee37 7a43 	vsub.f32	s14, s14, s6
 8107fcc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8107fd0:	3a02      	subs	r2, #2
 8107fd2:	463e      	mov	r6, r7
 8107fd4:	460c      	mov	r4, r1
 8107fd6:	4641      	mov	r1, r8
 8107fd8:	3610      	adds	r6, #16
 8107fda:	3108      	adds	r1, #8
 8107fdc:	0852      	lsrs	r2, r2, #1
 8107fde:	970b      	str	r7, [sp, #44]	; 0x2c
 8107fe0:	9509      	str	r5, [sp, #36]	; 0x24
 8107fe2:	9604      	str	r6, [sp, #16]
 8107fe4:	ed88 7a00 	vstr	s14, [r8]
 8107fe8:	9105      	str	r1, [sp, #20]
 8107fea:	edc8 7a01 	vstr	s15, [r8, #4]
 8107fee:	9208      	str	r2, [sp, #32]
 8107ff0:	f000 812f 	beq.w	8108252 <arm_cfft_radix8by4_f32+0x356>
 8107ff4:	4639      	mov	r1, r7
 8107ff6:	009b      	lsls	r3, r3, #2
 8107ff8:	4622      	mov	r2, r4
 8107ffa:	3b0c      	subs	r3, #12
 8107ffc:	f101 0930 	add.w	r9, r1, #48	; 0x30
 8108000:	9908      	ldr	r1, [sp, #32]
 8108002:	f1a5 0c0c 	sub.w	ip, r5, #12
 8108006:	46b3      	mov	fp, r6
 8108008:	f107 0a20 	add.w	sl, r7, #32
 810800c:	4443      	add	r3, r8
 810800e:	f102 0710 	add.w	r7, r2, #16
 8108012:	f100 0e10 	add.w	lr, r0, #16
 8108016:	3510      	adds	r5, #16
 8108018:	3c0c      	subs	r4, #12
 810801a:	f1a8 060c 	sub.w	r6, r8, #12
 810801e:	f108 0210 	add.w	r2, r8, #16
 8108022:	ed12 5a02 	vldr	s10, [r2, #-8]
 8108026:	ed57 6a02 	vldr	s13, [r7, #-8]
 810802a:	ed15 0a02 	vldr	s0, [r5, #-8]
 810802e:	ed5e 5a02 	vldr	s11, [lr, #-8]
 8108032:	ed17 7a01 	vldr	s14, [r7, #-4]
 8108036:	ed52 0a01 	vldr	s1, [r2, #-4]
 810803a:	ed15 9a01 	vldr	s18, [r5, #-4]
 810803e:	ed5e 4a01 	vldr	s9, [lr, #-4]
 8108042:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8108046:	ee70 7a05 	vadd.f32	s15, s0, s10
 810804a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 810804e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8108052:	ee34 4a87 	vadd.f32	s8, s9, s14
 8108056:	ed4e 7a02 	vstr	s15, [lr, #-8]
 810805a:	ed52 6a01 	vldr	s13, [r2, #-4]
 810805e:	ed55 7a01 	vldr	s15, [r5, #-4]
 8108062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108066:	ee74 4ac7 	vsub.f32	s9, s9, s14
 810806a:	ee77 7a84 	vadd.f32	s15, s15, s8
 810806e:	ee75 dae0 	vsub.f32	s27, s11, s1
 8108072:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8108076:	ed96 7a02 	vldr	s14, [r6, #8]
 810807a:	ed93 ba02 	vldr	s22, [r3, #8]
 810807e:	ed9c 1a02 	vldr	s2, [ip, #8]
 8108082:	edd4 7a02 	vldr	s15, [r4, #8]
 8108086:	edd6 1a01 	vldr	s3, [r6, #4]
 810808a:	edd3 9a01 	vldr	s19, [r3, #4]
 810808e:	edd4 8a01 	vldr	s17, [r4, #4]
 8108092:	ed9c 8a01 	vldr	s16, [ip, #4]
 8108096:	ee71 aa07 	vadd.f32	s21, s2, s14
 810809a:	ee37 aa8b 	vadd.f32	s20, s15, s22
 810809e:	ee38 3a21 	vadd.f32	s6, s16, s3
 81080a2:	ee7a 2a8a 	vadd.f32	s5, s21, s20
 81080a6:	ee37 6acb 	vsub.f32	s12, s15, s22
 81080aa:	edcc 2a02 	vstr	s5, [ip, #8]
 81080ae:	edd3 2a01 	vldr	s5, [r3, #4]
 81080b2:	ed94 2a01 	vldr	s4, [r4, #4]
 81080b6:	ee32 2a22 	vadd.f32	s4, s4, s5
 81080ba:	ee71 2a29 	vadd.f32	s5, s2, s19
 81080be:	ee32 2a03 	vadd.f32	s4, s4, s6
 81080c2:	ee72 2ac7 	vsub.f32	s5, s5, s14
 81080c6:	ed8c 2a01 	vstr	s4, [ip, #4]
 81080ca:	ee74 6ac0 	vsub.f32	s13, s9, s0
 81080ce:	ee36 ca61 	vsub.f32	s24, s12, s3
 81080d2:	ed5b ba01 	vldr	s23, [fp, #-4]
 81080d6:	ed5b ca02 	vldr	s25, [fp, #-8]
 81080da:	ee72 2ae8 	vsub.f32	s5, s5, s17
 81080de:	ee7d da89 	vadd.f32	s27, s27, s18
 81080e2:	ee76 6a85 	vadd.f32	s13, s13, s10
 81080e6:	ee3c ca08 	vadd.f32	s24, s24, s16
 81080ea:	ee22 eaac 	vmul.f32	s28, s5, s25
 81080ee:	ee2b daed 	vnmul.f32	s26, s23, s27
 81080f2:	ee66 eaab 	vmul.f32	s29, s13, s23
 81080f6:	ee2c 2acc 	vnmul.f32	s4, s25, s24
 81080fa:	eea6 daac 	vfma.f32	s26, s13, s25
 81080fe:	3901      	subs	r1, #1
 8108100:	f10e 0e08 	add.w	lr, lr, #8
 8108104:	eef0 6a4e 	vmov.f32	s13, s28
 8108108:	eea2 2aab 	vfma.f32	s4, s5, s23
 810810c:	f1ac 0c08 	sub.w	ip, ip, #8
 8108110:	f10b 0b08 	add.w	fp, fp, #8
 8108114:	eeec 6a2b 	vfma.f32	s13, s24, s23
 8108118:	f105 0508 	add.w	r5, r5, #8
 810811c:	f1a4 0408 	sub.w	r4, r4, #8
 8108120:	eeed eaac 	vfma.f32	s29, s27, s25
 8108124:	f10a 0a10 	add.w	sl, sl, #16
 8108128:	f107 0708 	add.w	r7, r7, #8
 810812c:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8108130:	ee33 3a68 	vsub.f32	s6, s6, s17
 8108134:	ed05 da03 	vstr	s26, [r5, #-12]
 8108138:	ed45 ea04 	vstr	s29, [r5, #-16]
 810813c:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8108140:	ed84 2a04 	vstr	s4, [r4, #16]
 8108144:	edc4 6a03 	vstr	s13, [r4, #12]
 8108148:	ee34 4a49 	vsub.f32	s8, s8, s18
 810814c:	ed5a 6a07 	vldr	s13, [sl, #-28]	; 0xffffffe4
 8108150:	ed5a 2a08 	vldr	s5, [sl, #-32]	; 0xffffffe0
 8108154:	ee33 3a69 	vsub.f32	s6, s6, s19
 8108158:	ee77 7acb 	vsub.f32	s15, s15, s22
 810815c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8108160:	ee34 4a60 	vsub.f32	s8, s8, s1
 8108164:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8108168:	ee26 2ac3 	vnmul.f32	s4, s13, s6
 810816c:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8108170:	ee64 aa26 	vmul.f32	s21, s8, s13
 8108174:	ee66 6ae3 	vnmul.f32	s13, s13, s7
 8108178:	eee3 7a62 	vfms.f32	s15, s6, s5
 810817c:	f1a6 0608 	sub.w	r6, r6, #8
 8108180:	f109 0918 	add.w	r9, r9, #24
 8108184:	eeb0 3a42 	vmov.f32	s6, s4
 8108188:	eee4 6a22 	vfma.f32	s13, s8, s5
 810818c:	f102 0208 	add.w	r2, r2, #8
 8108190:	f1a3 0308 	sub.w	r3, r3, #8
 8108194:	eeaa 3a22 	vfma.f32	s6, s20, s5
 8108198:	eee3 aaa2 	vfma.f32	s21, s7, s5
 810819c:	ee37 7a29 	vadd.f32	s14, s14, s19
 81081a0:	ee34 5ac5 	vsub.f32	s10, s9, s10
 81081a4:	ee75 5ac9 	vsub.f32	s11, s11, s18
 81081a8:	ee36 6a48 	vsub.f32	s12, s12, s16
 81081ac:	ee37 7a68 	vsub.f32	s14, s14, s17
 81081b0:	ed47 aa04 	vstr	s21, [r7, #-16]
 81081b4:	ed47 6a03 	vstr	s13, [r7, #-12]
 81081b8:	ed86 3a04 	vstr	s6, [r6, #16]
 81081bc:	edc6 7a03 	vstr	s15, [r6, #12]
 81081c0:	ee75 6aa0 	vadd.f32	s13, s11, s1
 81081c4:	ee76 7a21 	vadd.f32	s15, s12, s3
 81081c8:	ed59 5a0c 	vldr	s11, [r9, #-48]	; 0xffffffd0
 81081cc:	ed19 6a0b 	vldr	s12, [r9, #-44]	; 0xffffffd4
 81081d0:	ee35 5a00 	vadd.f32	s10, s10, s0
 81081d4:	ee37 7a41 	vsub.f32	s14, s14, s2
 81081d8:	ee65 3a06 	vmul.f32	s7, s10, s12
 81081dc:	ee27 4a25 	vmul.f32	s8, s14, s11
 81081e0:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 81081e4:	eee6 3aa5 	vfma.f32	s7, s13, s11
 81081e8:	ee26 3a66 	vnmul.f32	s6, s12, s13
 81081ec:	eef0 6a44 	vmov.f32	s13, s8
 81081f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 81081f4:	eef0 7a64 	vmov.f32	s15, s9
 81081f8:	eea5 3a25 	vfma.f32	s6, s10, s11
 81081fc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8108200:	ed02 3a03 	vstr	s6, [r2, #-12]
 8108204:	ed42 3a04 	vstr	s7, [r2, #-16]
 8108208:	edc3 6a03 	vstr	s13, [r3, #12]
 810820c:	edc3 7a04 	vstr	s15, [r3, #16]
 8108210:	f47f af07 	bne.w	8108022 <arm_cfft_radix8by4_f32+0x126>
 8108214:	9a08      	ldr	r2, [sp, #32]
 8108216:	9903      	ldr	r1, [sp, #12]
 8108218:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 810821c:	9103      	str	r1, [sp, #12]
 810821e:	9902      	ldr	r1, [sp, #8]
 8108220:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108224:	9102      	str	r1, [sp, #8]
 8108226:	9907      	ldr	r1, [sp, #28]
 8108228:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 810822c:	9107      	str	r1, [sp, #28]
 810822e:	9904      	ldr	r1, [sp, #16]
 8108230:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8108234:	9104      	str	r1, [sp, #16]
 8108236:	9906      	ldr	r1, [sp, #24]
 8108238:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 810823c:	9106      	str	r1, [sp, #24]
 810823e:	9905      	ldr	r1, [sp, #20]
 8108240:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8108244:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8108248:	9205      	str	r2, [sp, #20]
 810824a:	9a01      	ldr	r2, [sp, #4]
 810824c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8108250:	9301      	str	r3, [sp, #4]
 8108252:	9b07      	ldr	r3, [sp, #28]
 8108254:	9903      	ldr	r1, [sp, #12]
 8108256:	9e06      	ldr	r6, [sp, #24]
 8108258:	9d05      	ldr	r5, [sp, #20]
 810825a:	edd3 4a00 	vldr	s9, [r3]
 810825e:	edd5 7a00 	vldr	s15, [r5]
 8108262:	edd1 3a00 	vldr	s7, [r1]
 8108266:	edd6 6a00 	vldr	s13, [r6]
 810826a:	edd3 2a01 	vldr	s5, [r3, #4]
 810826e:	ed95 3a01 	vldr	s6, [r5, #4]
 8108272:	ed96 4a01 	vldr	s8, [r6, #4]
 8108276:	ed91 7a01 	vldr	s14, [r1, #4]
 810827a:	9a02      	ldr	r2, [sp, #8]
 810827c:	9c01      	ldr	r4, [sp, #4]
 810827e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8108282:	ee73 5aa6 	vadd.f32	s11, s7, s13
 8108286:	ee73 6ae6 	vsub.f32	s13, s7, s13
 810828a:	ee35 5a25 	vadd.f32	s10, s10, s11
 810828e:	ee37 6a04 	vadd.f32	s12, s14, s8
 8108292:	ed81 5a00 	vstr	s10, [r1]
 8108296:	edd5 3a01 	vldr	s7, [r5, #4]
 810829a:	ed93 5a01 	vldr	s10, [r3, #4]
 810829e:	ee35 5a23 	vadd.f32	s10, s10, s7
 81082a2:	ee37 7a44 	vsub.f32	s14, s14, s8
 81082a6:	ee35 5a06 	vadd.f32	s10, s10, s12
 81082aa:	ee37 4a64 	vsub.f32	s8, s14, s9
 81082ae:	ee76 3ac3 	vsub.f32	s7, s13, s6
 81082b2:	ed81 5a01 	vstr	s10, [r1, #4]
 81082b6:	ed92 5a01 	vldr	s10, [r2, #4]
 81082ba:	edd2 1a00 	vldr	s3, [r2]
 81082be:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 81082c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81082c4:	9102      	str	r1, [sp, #8]
 81082c6:	ee73 3aa2 	vadd.f32	s7, s7, s5
 81082ca:	ee34 4a27 	vadd.f32	s8, s8, s15
 81082ce:	ee75 5ae4 	vsub.f32	s11, s11, s9
 81082d2:	ee24 2a05 	vmul.f32	s4, s8, s10
 81082d6:	ee25 5a63 	vnmul.f32	s10, s10, s7
 81082da:	eea3 2aa1 	vfma.f32	s4, s7, s3
 81082de:	eea4 5a21 	vfma.f32	s10, s8, s3
 81082e2:	ed83 2a00 	vstr	s4, [r3]
 81082e6:	ed83 5a01 	vstr	s10, [r3, #4]
 81082ea:	ee36 6a62 	vsub.f32	s12, s12, s5
 81082ee:	9b04      	ldr	r3, [sp, #16]
 81082f0:	ee36 6a43 	vsub.f32	s12, s12, s6
 81082f4:	ed93 5a01 	vldr	s10, [r3, #4]
 81082f8:	edd3 3a00 	vldr	s7, [r3]
 81082fc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108300:	ee26 4a05 	vmul.f32	s8, s12, s10
 8108304:	ee25 5a65 	vnmul.f32	s10, s10, s11
 8108308:	eea5 4aa3 	vfma.f32	s8, s11, s7
 810830c:	2304      	movs	r3, #4
 810830e:	eea6 5a23 	vfma.f32	s10, s12, s7
 8108312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108316:	ee36 7ae2 	vsub.f32	s14, s13, s5
 810831a:	ed86 4a00 	vstr	s8, [r6]
 810831e:	ed86 5a01 	vstr	s10, [r6, #4]
 8108322:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8108326:	ee37 7a03 	vadd.f32	s14, s14, s6
 810832a:	edd4 6a01 	vldr	s13, [r4, #4]
 810832e:	edd4 5a00 	vldr	s11, [r4]
 8108332:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8108336:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 810833a:	eea7 6a25 	vfma.f32	s12, s14, s11
 810833e:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8108342:	ed85 6a00 	vstr	s12, [r5]
 8108346:	edc5 6a01 	vstr	s13, [r5, #4]
 810834a:	f7ff fa2f 	bl	81077ac <arm_radix8_butterfly_f32>
 810834e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8108350:	9902      	ldr	r1, [sp, #8]
 8108352:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108354:	6862      	ldr	r2, [r4, #4]
 8108356:	9101      	str	r1, [sp, #4]
 8108358:	2304      	movs	r3, #4
 810835a:	f7ff fa27 	bl	81077ac <arm_radix8_butterfly_f32>
 810835e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8108360:	9901      	ldr	r1, [sp, #4]
 8108362:	6862      	ldr	r2, [r4, #4]
 8108364:	2304      	movs	r3, #4
 8108366:	f7ff fa21 	bl	81077ac <arm_radix8_butterfly_f32>
 810836a:	9901      	ldr	r1, [sp, #4]
 810836c:	6862      	ldr	r2, [r4, #4]
 810836e:	4640      	mov	r0, r8
 8108370:	2304      	movs	r3, #4
 8108372:	b00f      	add	sp, #60	; 0x3c
 8108374:	ecbd 8b0e 	vpop	{d8-d14}
 8108378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810837c:	f7ff ba16 	b.w	81077ac <arm_radix8_butterfly_f32>

08108380 <arm_cfft_f32>:
 8108380:	2a01      	cmp	r2, #1
 8108382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108386:	8805      	ldrh	r5, [r0, #0]
 8108388:	4680      	mov	r8, r0
 810838a:	4691      	mov	r9, r2
 810838c:	460c      	mov	r4, r1
 810838e:	461f      	mov	r7, r3
 8108390:	d076      	beq.n	8108480 <arm_cfft_f32+0x100>
 8108392:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8108396:	d06e      	beq.n	8108476 <arm_cfft_f32+0xf6>
 8108398:	d80e      	bhi.n	81083b8 <arm_cfft_f32+0x38>
 810839a:	2d40      	cmp	r5, #64	; 0x40
 810839c:	d013      	beq.n	81083c6 <arm_cfft_f32+0x46>
 810839e:	d966      	bls.n	810846e <arm_cfft_f32+0xee>
 81083a0:	2d80      	cmp	r5, #128	; 0x80
 81083a2:	d103      	bne.n	81083ac <arm_cfft_f32+0x2c>
 81083a4:	4621      	mov	r1, r4
 81083a6:	4640      	mov	r0, r8
 81083a8:	f7ff fce6 	bl	8107d78 <arm_cfft_radix8by2_f32>
 81083ac:	b9a7      	cbnz	r7, 81083d8 <arm_cfft_f32+0x58>
 81083ae:	f1b9 0f01 	cmp.w	r9, #1
 81083b2:	d036      	beq.n	8108422 <arm_cfft_f32+0xa2>
 81083b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81083b8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 81083bc:	d05b      	beq.n	8108476 <arm_cfft_f32+0xf6>
 81083be:	d94f      	bls.n	8108460 <arm_cfft_f32+0xe0>
 81083c0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 81083c4:	d1f2      	bne.n	81083ac <arm_cfft_f32+0x2c>
 81083c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 81083ca:	2301      	movs	r3, #1
 81083cc:	4629      	mov	r1, r5
 81083ce:	4620      	mov	r0, r4
 81083d0:	f7ff f9ec 	bl	81077ac <arm_radix8_butterfly_f32>
 81083d4:	2f00      	cmp	r7, #0
 81083d6:	d0ea      	beq.n	81083ae <arm_cfft_f32+0x2e>
 81083d8:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 81083dc:	f8d8 c008 	ldr.w	ip, [r8, #8]
 81083e0:	2f00      	cmp	r7, #0
 81083e2:	d0e4      	beq.n	81083ae <arm_cfft_f32+0x2e>
 81083e4:	2200      	movs	r2, #0
 81083e6:	f10c 0e02 	add.w	lr, ip, #2
 81083ea:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 81083ee:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 81083f2:	0889      	lsrs	r1, r1, #2
 81083f4:	089b      	lsrs	r3, r3, #2
 81083f6:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 81083fa:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 81083fe:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8108402:	0088      	lsls	r0, r1, #2
 8108404:	009b      	lsls	r3, r3, #2
 8108406:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 810840a:	3304      	adds	r3, #4
 810840c:	3004      	adds	r0, #4
 810840e:	3202      	adds	r2, #2
 8108410:	58e1      	ldr	r1, [r4, r3]
 8108412:	5826      	ldr	r6, [r4, r0]
 8108414:	50e6      	str	r6, [r4, r3]
 8108416:	42ba      	cmp	r2, r7
 8108418:	5021      	str	r1, [r4, r0]
 810841a:	d3e6      	bcc.n	81083ea <arm_cfft_f32+0x6a>
 810841c:	f1b9 0f01 	cmp.w	r9, #1
 8108420:	d1c8      	bne.n	81083b4 <arm_cfft_f32+0x34>
 8108422:	ee07 5a90 	vmov	s15, r5
 8108426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810842a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810842e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8108432:	2d00      	cmp	r5, #0
 8108434:	d0be      	beq.n	81083b4 <arm_cfft_f32+0x34>
 8108436:	3408      	adds	r4, #8
 8108438:	2300      	movs	r3, #0
 810843a:	3301      	adds	r3, #1
 810843c:	429d      	cmp	r5, r3
 810843e:	f104 0408 	add.w	r4, r4, #8
 8108442:	ed14 7a04 	vldr	s14, [r4, #-16]
 8108446:	ed54 7a03 	vldr	s15, [r4, #-12]
 810844a:	ee27 7a26 	vmul.f32	s14, s14, s13
 810844e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8108452:	ed04 7a04 	vstr	s14, [r4, #-16]
 8108456:	ed44 7a03 	vstr	s15, [r4, #-12]
 810845a:	d1ee      	bne.n	810843a <arm_cfft_f32+0xba>
 810845c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108460:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8108464:	d0af      	beq.n	81083c6 <arm_cfft_f32+0x46>
 8108466:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 810846a:	d09b      	beq.n	81083a4 <arm_cfft_f32+0x24>
 810846c:	e79e      	b.n	81083ac <arm_cfft_f32+0x2c>
 810846e:	2d10      	cmp	r5, #16
 8108470:	d098      	beq.n	81083a4 <arm_cfft_f32+0x24>
 8108472:	2d20      	cmp	r5, #32
 8108474:	d19a      	bne.n	81083ac <arm_cfft_f32+0x2c>
 8108476:	4621      	mov	r1, r4
 8108478:	4640      	mov	r0, r8
 810847a:	f7ff fd3f 	bl	8107efc <arm_cfft_radix8by4_f32>
 810847e:	e795      	b.n	81083ac <arm_cfft_f32+0x2c>
 8108480:	b175      	cbz	r5, 81084a0 <arm_cfft_f32+0x120>
 8108482:	f101 020c 	add.w	r2, r1, #12
 8108486:	2100      	movs	r1, #0
 8108488:	ed52 7a02 	vldr	s15, [r2, #-8]
 810848c:	3101      	adds	r1, #1
 810848e:	eef1 7a67 	vneg.f32	s15, s15
 8108492:	428d      	cmp	r5, r1
 8108494:	ed42 7a02 	vstr	s15, [r2, #-8]
 8108498:	f102 0208 	add.w	r2, r2, #8
 810849c:	d1f4      	bne.n	8108488 <arm_cfft_f32+0x108>
 810849e:	e778      	b.n	8108392 <arm_cfft_f32+0x12>
 81084a0:	2b00      	cmp	r3, #0
 81084a2:	d087      	beq.n	81083b4 <arm_cfft_f32+0x34>
 81084a4:	8987      	ldrh	r7, [r0, #12]
 81084a6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 81084aa:	2f00      	cmp	r7, #0
 81084ac:	d19a      	bne.n	81083e4 <arm_cfft_f32+0x64>
 81084ae:	e7b8      	b.n	8108422 <arm_cfft_f32+0xa2>

081084b0 <stage_rfft_f32>:
 81084b0:	edd1 7a01 	vldr	s15, [r1, #4]
 81084b4:	ed91 6a00 	vldr	s12, [r1]
 81084b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81084bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 81084c0:	eeb0 7a67 	vmov.f32	s14, s15
 81084c4:	eea6 7a26 	vfma.f32	s14, s12, s13
 81084c8:	b410      	push	{r4}
 81084ca:	eed6 7a26 	vfnms.f32	s15, s12, s13
 81084ce:	8804      	ldrh	r4, [r0, #0]
 81084d0:	6940      	ldr	r0, [r0, #20]
 81084d2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 81084d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 81084da:	ee67 7aa3 	vmul.f32	s15, s15, s7
 81084de:	3c01      	subs	r4, #1
 81084e0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 81084e4:	ed82 7a00 	vstr	s14, [r2]
 81084e8:	edc2 7a01 	vstr	s15, [r2, #4]
 81084ec:	3010      	adds	r0, #16
 81084ee:	3210      	adds	r2, #16
 81084f0:	3b08      	subs	r3, #8
 81084f2:	3110      	adds	r1, #16
 81084f4:	edd3 6a03 	vldr	s13, [r3, #12]
 81084f8:	ed11 5a01 	vldr	s10, [r1, #-4]
 81084fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8108500:	ed11 4a02 	vldr	s8, [r1, #-8]
 8108504:	ed50 5a01 	vldr	s11, [r0, #-4]
 8108508:	ed10 6a02 	vldr	s12, [r0, #-8]
 810850c:	ee77 4ac4 	vsub.f32	s9, s15, s8
 8108510:	ee35 7a66 	vsub.f32	s14, s10, s13
 8108514:	ee77 7a84 	vadd.f32	s15, s15, s8
 8108518:	eea5 7aa4 	vfma.f32	s14, s11, s9
 810851c:	3c01      	subs	r4, #1
 810851e:	2c00      	cmp	r4, #0
 8108520:	eee6 7a24 	vfma.f32	s15, s12, s9
 8108524:	f1a3 0308 	sub.w	r3, r3, #8
 8108528:	f101 0108 	add.w	r1, r1, #8
 810852c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8108530:	f100 0008 	add.w	r0, r0, #8
 8108534:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8108538:	f102 0208 	add.w	r2, r2, #8
 810853c:	eea6 7a66 	vfms.f32	s14, s12, s13
 8108540:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108544:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108548:	ed42 7a04 	vstr	s15, [r2, #-16]
 810854c:	ed02 7a03 	vstr	s14, [r2, #-12]
 8108550:	dcd0      	bgt.n	81084f4 <stage_rfft_f32+0x44>
 8108552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108556:	4770      	bx	lr

08108558 <merge_rfft_f32>:
 8108558:	edd1 7a00 	vldr	s15, [r1]
 810855c:	edd1 6a01 	vldr	s13, [r1, #4]
 8108560:	b430      	push	{r4, r5}
 8108562:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8108566:	8804      	ldrh	r4, [r0, #0]
 8108568:	6940      	ldr	r0, [r0, #20]
 810856a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810856e:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8108572:	1e65      	subs	r5, r4, #1
 8108574:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108578:	ee67 7aa3 	vmul.f32	s15, s15, s7
 810857c:	2d00      	cmp	r5, #0
 810857e:	ed82 7a00 	vstr	s14, [r2]
 8108582:	edc2 7a01 	vstr	s15, [r2, #4]
 8108586:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 810858a:	dd32      	ble.n	81085f2 <merge_rfft_f32+0x9a>
 810858c:	eba3 04c4 	sub.w	r4, r3, r4, lsl #3
 8108590:	3010      	adds	r0, #16
 8108592:	3210      	adds	r2, #16
 8108594:	3110      	adds	r1, #16
 8108596:	3b08      	subs	r3, #8
 8108598:	edd3 6a03 	vldr	s13, [r3, #12]
 810859c:	edd3 7a02 	vldr	s15, [r3, #8]
 81085a0:	ed11 5a01 	vldr	s10, [r1, #-4]
 81085a4:	ed11 4a02 	vldr	s8, [r1, #-8]
 81085a8:	ed50 5a01 	vldr	s11, [r0, #-4]
 81085ac:	ed10 6a02 	vldr	s12, [r0, #-8]
 81085b0:	ee74 4a67 	vsub.f32	s9, s8, s15
 81085b4:	ee35 7a66 	vsub.f32	s14, s10, s13
 81085b8:	ee77 7a84 	vadd.f32	s15, s15, s8
 81085bc:	eea5 7aa4 	vfma.f32	s14, s11, s9
 81085c0:	3b08      	subs	r3, #8
 81085c2:	429c      	cmp	r4, r3
 81085c4:	eee6 7a64 	vfms.f32	s15, s12, s9
 81085c8:	f101 0108 	add.w	r1, r1, #8
 81085cc:	f100 0008 	add.w	r0, r0, #8
 81085d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 81085d4:	f102 0208 	add.w	r2, r2, #8
 81085d8:	eee5 7ae6 	vfms.f32	s15, s11, s13
 81085dc:	eea6 7a66 	vfms.f32	s14, s12, s13
 81085e0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 81085e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 81085e8:	ed42 7a04 	vstr	s15, [r2, #-16]
 81085ec:	ed02 7a03 	vstr	s14, [r2, #-12]
 81085f0:	d1d2      	bne.n	8108598 <merge_rfft_f32+0x40>
 81085f2:	bc30      	pop	{r4, r5}
 81085f4:	4770      	bx	lr
 81085f6:	bf00      	nop

081085f8 <arm_rfft_fast_f32>:
 81085f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81085fc:	4605      	mov	r5, r0
 81085fe:	4616      	mov	r6, r2
 8108600:	b153      	cbz	r3, 8108618 <arm_rfft_fast_f32+0x20>
 8108602:	461f      	mov	r7, r3
 8108604:	f7ff ffa8 	bl	8108558 <merge_rfft_f32>
 8108608:	463a      	mov	r2, r7
 810860a:	4631      	mov	r1, r6
 810860c:	4628      	mov	r0, r5
 810860e:	2301      	movs	r3, #1
 8108610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108614:	f7ff beb4 	b.w	8108380 <arm_cfft_f32>
 8108618:	460c      	mov	r4, r1
 810861a:	8801      	ldrh	r1, [r0, #0]
 810861c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8108620:	d03f      	beq.n	81086a2 <arm_rfft_fast_f32+0xaa>
 8108622:	d82d      	bhi.n	8108680 <arm_rfft_fast_f32+0x88>
 8108624:	2940      	cmp	r1, #64	; 0x40
 8108626:	d032      	beq.n	810868e <arm_rfft_fast_f32+0x96>
 8108628:	d937      	bls.n	810869a <arm_rfft_fast_f32+0xa2>
 810862a:	2980      	cmp	r1, #128	; 0x80
 810862c:	d049      	beq.n	81086c2 <arm_rfft_fast_f32+0xca>
 810862e:	89a8      	ldrh	r0, [r5, #12]
 8108630:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8108634:	b1e8      	cbz	r0, 8108672 <arm_rfft_fast_f32+0x7a>
 8108636:	2200      	movs	r2, #0
 8108638:	f10c 0e02 	add.w	lr, ip, #2
 810863c:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 8108640:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 8108644:	0889      	lsrs	r1, r1, #2
 8108646:	089b      	lsrs	r3, r3, #2
 8108648:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
 810864c:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8108650:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8108654:	008f      	lsls	r7, r1, #2
 8108656:	009b      	lsls	r3, r3, #2
 8108658:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 810865c:	3304      	adds	r3, #4
 810865e:	3704      	adds	r7, #4
 8108660:	3202      	adds	r2, #2
 8108662:	f854 8003 	ldr.w	r8, [r4, r3]
 8108666:	59e1      	ldr	r1, [r4, r7]
 8108668:	50e1      	str	r1, [r4, r3]
 810866a:	4290      	cmp	r0, r2
 810866c:	f844 8007 	str.w	r8, [r4, r7]
 8108670:	d8e4      	bhi.n	810863c <arm_rfft_fast_f32+0x44>
 8108672:	4632      	mov	r2, r6
 8108674:	4621      	mov	r1, r4
 8108676:	4628      	mov	r0, r5
 8108678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810867c:	f7ff bf18 	b.w	81084b0 <stage_rfft_f32>
 8108680:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8108684:	d00d      	beq.n	81086a2 <arm_rfft_fast_f32+0xaa>
 8108686:	d916      	bls.n	81086b6 <arm_rfft_fast_f32+0xbe>
 8108688:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 810868c:	d10d      	bne.n	81086aa <arm_rfft_fast_f32+0xb2>
 810868e:	686a      	ldr	r2, [r5, #4]
 8108690:	2301      	movs	r3, #1
 8108692:	4620      	mov	r0, r4
 8108694:	f7ff f88a 	bl	81077ac <arm_radix8_butterfly_f32>
 8108698:	e007      	b.n	81086aa <arm_rfft_fast_f32+0xb2>
 810869a:	2910      	cmp	r1, #16
 810869c:	d011      	beq.n	81086c2 <arm_rfft_fast_f32+0xca>
 810869e:	2920      	cmp	r1, #32
 81086a0:	d103      	bne.n	81086aa <arm_rfft_fast_f32+0xb2>
 81086a2:	4621      	mov	r1, r4
 81086a4:	4628      	mov	r0, r5
 81086a6:	f7ff fc29 	bl	8107efc <arm_cfft_radix8by4_f32>
 81086aa:	89a8      	ldrh	r0, [r5, #12]
 81086ac:	f8d5 c008 	ldr.w	ip, [r5, #8]
 81086b0:	2800      	cmp	r0, #0
 81086b2:	d1c0      	bne.n	8108636 <arm_rfft_fast_f32+0x3e>
 81086b4:	e7dd      	b.n	8108672 <arm_rfft_fast_f32+0x7a>
 81086b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 81086ba:	d0e8      	beq.n	810868e <arm_rfft_fast_f32+0x96>
 81086bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81086c0:	d1f3      	bne.n	81086aa <arm_rfft_fast_f32+0xb2>
 81086c2:	4621      	mov	r1, r4
 81086c4:	4628      	mov	r0, r5
 81086c6:	f7ff fb57 	bl	8107d78 <arm_cfft_radix8by2_f32>
 81086ca:	e7ee      	b.n	81086aa <arm_rfft_fast_f32+0xb2>

081086cc <arm_rfft_fast_init_f32>:
 81086cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 81086d0:	d024      	beq.n	810871c <arm_rfft_fast_init_f32+0x50>
 81086d2:	d807      	bhi.n	81086e4 <arm_rfft_fast_init_f32+0x18>
 81086d4:	2980      	cmp	r1, #128	; 0x80
 81086d6:	d01c      	beq.n	8108712 <arm_rfft_fast_init_f32+0x46>
 81086d8:	d90c      	bls.n	81086f4 <arm_rfft_fast_init_f32+0x28>
 81086da:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 81086de:	d11a      	bne.n	8108716 <arm_rfft_fast_init_f32+0x4a>
 81086e0:	4b0f      	ldr	r3, [pc, #60]	; (8108720 <arm_rfft_fast_init_f32+0x54>)
 81086e2:	4718      	bx	r3
 81086e4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 81086e8:	d011      	beq.n	810870e <arm_rfft_fast_init_f32+0x42>
 81086ea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 81086ee:	d107      	bne.n	8108700 <arm_rfft_fast_init_f32+0x34>
 81086f0:	4b0c      	ldr	r3, [pc, #48]	; (8108724 <arm_rfft_fast_init_f32+0x58>)
 81086f2:	4718      	bx	r3
 81086f4:	2920      	cmp	r1, #32
 81086f6:	d008      	beq.n	810870a <arm_rfft_fast_init_f32+0x3e>
 81086f8:	2940      	cmp	r1, #64	; 0x40
 81086fa:	d10c      	bne.n	8108716 <arm_rfft_fast_init_f32+0x4a>
 81086fc:	4b0a      	ldr	r3, [pc, #40]	; (8108728 <arm_rfft_fast_init_f32+0x5c>)
 81086fe:	e7f0      	b.n	81086e2 <arm_rfft_fast_init_f32+0x16>
 8108700:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108704:	d107      	bne.n	8108716 <arm_rfft_fast_init_f32+0x4a>
 8108706:	4b09      	ldr	r3, [pc, #36]	; (810872c <arm_rfft_fast_init_f32+0x60>)
 8108708:	e7eb      	b.n	81086e2 <arm_rfft_fast_init_f32+0x16>
 810870a:	4b09      	ldr	r3, [pc, #36]	; (8108730 <arm_rfft_fast_init_f32+0x64>)
 810870c:	e7e9      	b.n	81086e2 <arm_rfft_fast_init_f32+0x16>
 810870e:	4b09      	ldr	r3, [pc, #36]	; (8108734 <arm_rfft_fast_init_f32+0x68>)
 8108710:	e7e7      	b.n	81086e2 <arm_rfft_fast_init_f32+0x16>
 8108712:	4b09      	ldr	r3, [pc, #36]	; (8108738 <arm_rfft_fast_init_f32+0x6c>)
 8108714:	e7e5      	b.n	81086e2 <arm_rfft_fast_init_f32+0x16>
 8108716:	f04f 30ff 	mov.w	r0, #4294967295
 810871a:	4770      	bx	lr
 810871c:	4b07      	ldr	r3, [pc, #28]	; (810873c <arm_rfft_fast_init_f32+0x70>)
 810871e:	e7e0      	b.n	81086e2 <arm_rfft_fast_init_f32+0x16>
 8108720:	08107699 	.word	0x08107699
 8108724:	08107775 	.word	0x08107775
 8108728:	08107631 	.word	0x08107631
 810872c:	08107705 	.word	0x08107705
 8108730:	081075fd 	.word	0x081075fd
 8108734:	0810773d 	.word	0x0810773d
 8108738:	08107665 	.word	0x08107665
 810873c:	081076cd 	.word	0x081076cd

08108740 <ai_buffer_get_size>:
 8108740:	b378      	cbz	r0, 81087a2 <ai_buffer_get_size+0x62>
 8108742:	b410      	push	{r4}
 8108744:	6803      	ldr	r3, [r0, #0]
 8108746:	4a17      	ldr	r2, [pc, #92]	; (81087a4 <ai_buffer_get_size+0x64>)
 8108748:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 810874c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8108750:	4293      	cmp	r3, r2
 8108752:	d01e      	beq.n	8108792 <ai_buffer_get_size+0x52>
 8108754:	6984      	ldr	r4, [r0, #24]
 8108756:	6862      	ldr	r2, [r4, #4]
 8108758:	7d03      	ldrb	r3, [r0, #20]
 810875a:	6941      	ldr	r1, [r0, #20]
 810875c:	f1a3 0301 	sub.w	r3, r3, #1
 8108760:	fab3 f383 	clz	r3, r3
 8108764:	095b      	lsrs	r3, r3, #5
 8108766:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 810876a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 810876e:	da0b      	bge.n	8108788 <ai_buffer_get_size+0x48>
 8108770:	2b01      	cmp	r3, #1
 8108772:	d102      	bne.n	810877a <ai_buffer_get_size+0x3a>
 8108774:	2802      	cmp	r0, #2
 8108776:	d007      	beq.n	8108788 <ai_buffer_get_size+0x48>
 8108778:	2302      	movs	r3, #2
 810877a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 810877e:	3301      	adds	r3, #1
 8108780:	4298      	cmp	r0, r3
 8108782:	fb01 f202 	mul.w	r2, r1, r2
 8108786:	d1f3      	bne.n	8108770 <ai_buffer_get_size+0x30>
 8108788:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 810878c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108790:	4770      	bx	lr
 8108792:	2900      	cmp	r1, #0
 8108794:	d0de      	beq.n	8108754 <ai_buffer_get_size+0x14>
 8108796:	6984      	ldr	r4, [r0, #24]
 8108798:	6863      	ldr	r3, [r4, #4]
 810879a:	331f      	adds	r3, #31
 810879c:	f023 021f 	bic.w	r2, r3, #31
 81087a0:	e7da      	b.n	8108758 <ai_buffer_get_size+0x18>
 81087a2:	4770      	bx	lr
 81087a4:	000400c0 	.word	0x000400c0

081087a8 <ai_buffer_array_sane>:
 81087a8:	b138      	cbz	r0, 81087ba <ai_buffer_array_sane+0x12>
 81087aa:	6843      	ldr	r3, [r0, #4]
 81087ac:	b123      	cbz	r3, 81087b8 <ai_buffer_array_sane+0x10>
 81087ae:	8840      	ldrh	r0, [r0, #2]
 81087b0:	3800      	subs	r0, #0
 81087b2:	bf18      	it	ne
 81087b4:	2001      	movne	r0, #1
 81087b6:	4770      	bx	lr
 81087b8:	4618      	mov	r0, r3
 81087ba:	4770      	bx	lr

081087bc <ai_buffer_array_item_set_address>:
 81087bc:	b150      	cbz	r0, 81087d4 <ai_buffer_array_item_set_address+0x18>
 81087be:	6843      	ldr	r3, [r0, #4]
 81087c0:	b14b      	cbz	r3, 81087d6 <ai_buffer_array_item_set_address+0x1a>
 81087c2:	8840      	ldrh	r0, [r0, #2]
 81087c4:	b900      	cbnz	r0, 81087c8 <ai_buffer_array_item_set_address+0xc>
 81087c6:	4770      	bx	lr
 81087c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 81087cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 81087d0:	2001      	movs	r0, #1
 81087d2:	604a      	str	r2, [r1, #4]
 81087d4:	4770      	bx	lr
 81087d6:	4618      	mov	r0, r3
 81087d8:	4770      	bx	lr
 81087da:	bf00      	nop

081087dc <_ai_platform_acquire_crc>:
 81087dc:	2001      	movs	r0, #1
 81087de:	4770      	bx	lr

081087e0 <_ai_platform_release_crc>:
 81087e0:	4770      	bx	lr
 81087e2:	bf00      	nop

081087e4 <ai_platform_get_weights_map>:
 81087e4:	2a00      	cmp	r2, #0
 81087e6:	d037      	beq.n	8108858 <ai_platform_get_weights_map+0x74>
 81087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81087ea:	4604      	mov	r4, r0
 81087ec:	b1a0      	cbz	r0, 8108818 <ai_platform_get_weights_map+0x34>
 81087ee:	460f      	mov	r7, r1
 81087f0:	b191      	cbz	r1, 8108818 <ai_platform_get_weights_map+0x34>
 81087f2:	4b25      	ldr	r3, [pc, #148]	; (8108888 <ai_platform_get_weights_map+0xa4>)
 81087f4:	6810      	ldr	r0, [r2, #0]
 81087f6:	4298      	cmp	r0, r3
 81087f8:	4615      	mov	r5, r2
 81087fa:	d00f      	beq.n	810881c <ai_platform_get_weights_map+0x38>
 81087fc:	6855      	ldr	r5, [r2, #4]
 81087fe:	b15d      	cbz	r5, 8108818 <ai_platform_get_weights_map+0x34>
 8108800:	682e      	ldr	r6, [r5, #0]
 8108802:	429e      	cmp	r6, r3
 8108804:	d02a      	beq.n	810885c <ai_platform_get_weights_map+0x78>
 8108806:	f1a1 0001 	sub.w	r0, r1, #1
 810880a:	6025      	str	r5, [r4, #0]
 810880c:	fab0 f080 	clz	r0, r0
 8108810:	0940      	lsrs	r0, r0, #5
 8108812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108814:	42a7      	cmp	r7, r4
 8108816:	d034      	beq.n	8108882 <ai_platform_get_weights_map+0x9e>
 8108818:	2000      	movs	r0, #0
 810881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810881c:	1d10      	adds	r0, r2, #4
 810881e:	f7ff ffc3 	bl	81087a8 <ai_buffer_array_sane>
 8108822:	2800      	cmp	r0, #0
 8108824:	d0f8      	beq.n	8108818 <ai_platform_get_weights_map+0x34>
 8108826:	88eb      	ldrh	r3, [r5, #6]
 8108828:	429f      	cmp	r7, r3
 810882a:	d1f5      	bne.n	8108818 <ai_platform_get_weights_map+0x34>
 810882c:	f04f 0e00 	mov.w	lr, #0
 8108830:	1f23      	subs	r3, r4, #4
 8108832:	4670      	mov	r0, lr
 8108834:	68aa      	ldr	r2, [r5, #8]
 8108836:	eb02 0c0e 	add.w	ip, r2, lr
 810883a:	f10e 0e1c 	add.w	lr, lr, #28
 810883e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8108842:	b124      	cbz	r4, 810884e <ai_platform_get_weights_map+0x6a>
 8108844:	3001      	adds	r0, #1
 8108846:	4287      	cmp	r7, r0
 8108848:	f843 4f04 	str.w	r4, [r3, #4]!
 810884c:	d1f2      	bne.n	8108834 <ai_platform_get_weights_map+0x50>
 810884e:	1a38      	subs	r0, r7, r0
 8108850:	fab0 f080 	clz	r0, r0
 8108854:	0940      	lsrs	r0, r0, #5
 8108856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108858:	2000      	movs	r0, #0
 810885a:	4770      	bx	lr
 810885c:	1f23      	subs	r3, r4, #4
 810885e:	4628      	mov	r0, r5
 8108860:	2400      	movs	r4, #0
 8108862:	e000      	b.n	8108866 <ai_platform_get_weights_map+0x82>
 8108864:	4614      	mov	r4, r2
 8108866:	f850 2f04 	ldr.w	r2, [r0, #4]!
 810886a:	42b2      	cmp	r2, r6
 810886c:	d0d2      	beq.n	8108814 <ai_platform_get_weights_map+0x30>
 810886e:	f843 2f04 	str.w	r2, [r3, #4]!
 8108872:	1c62      	adds	r2, r4, #1
 8108874:	4297      	cmp	r7, r2
 8108876:	d1f5      	bne.n	8108864 <ai_platform_get_weights_map+0x80>
 8108878:	3402      	adds	r4, #2
 810887a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 810887e:	42b3      	cmp	r3, r6
 8108880:	d1ca      	bne.n	8108818 <ai_platform_get_weights_map+0x34>
 8108882:	2001      	movs	r0, #1
 8108884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108886:	bf00      	nop
 8108888:	a1facade 	.word	0xa1facade

0810888c <ai_platform_get_activations_map>:
 810888c:	2a00      	cmp	r2, #0
 810888e:	d038      	beq.n	8108902 <ai_platform_get_activations_map+0x76>
 8108890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108892:	4604      	mov	r4, r0
 8108894:	b1a0      	cbz	r0, 81088c0 <ai_platform_get_activations_map+0x34>
 8108896:	460f      	mov	r7, r1
 8108898:	b191      	cbz	r1, 81088c0 <ai_platform_get_activations_map+0x34>
 810889a:	4b25      	ldr	r3, [pc, #148]	; (8108930 <ai_platform_get_activations_map+0xa4>)
 810889c:	6810      	ldr	r0, [r2, #0]
 810889e:	4298      	cmp	r0, r3
 81088a0:	4615      	mov	r5, r2
 81088a2:	d00f      	beq.n	81088c4 <ai_platform_get_activations_map+0x38>
 81088a4:	6a15      	ldr	r5, [r2, #32]
 81088a6:	b15d      	cbz	r5, 81088c0 <ai_platform_get_activations_map+0x34>
 81088a8:	682e      	ldr	r6, [r5, #0]
 81088aa:	429e      	cmp	r6, r3
 81088ac:	d02b      	beq.n	8108906 <ai_platform_get_activations_map+0x7a>
 81088ae:	f1a1 0001 	sub.w	r0, r1, #1
 81088b2:	6025      	str	r5, [r4, #0]
 81088b4:	fab0 f080 	clz	r0, r0
 81088b8:	0940      	lsrs	r0, r0, #5
 81088ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81088bc:	42a7      	cmp	r7, r4
 81088be:	d035      	beq.n	810892c <ai_platform_get_activations_map+0xa0>
 81088c0:	2000      	movs	r0, #0
 81088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81088c4:	f102 000c 	add.w	r0, r2, #12
 81088c8:	f7ff ff6e 	bl	81087a8 <ai_buffer_array_sane>
 81088cc:	2800      	cmp	r0, #0
 81088ce:	d0f7      	beq.n	81088c0 <ai_platform_get_activations_map+0x34>
 81088d0:	89eb      	ldrh	r3, [r5, #14]
 81088d2:	429f      	cmp	r7, r3
 81088d4:	d1f4      	bne.n	81088c0 <ai_platform_get_activations_map+0x34>
 81088d6:	f04f 0e00 	mov.w	lr, #0
 81088da:	1f23      	subs	r3, r4, #4
 81088dc:	4670      	mov	r0, lr
 81088de:	692a      	ldr	r2, [r5, #16]
 81088e0:	eb02 0c0e 	add.w	ip, r2, lr
 81088e4:	f10e 0e1c 	add.w	lr, lr, #28
 81088e8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 81088ec:	b124      	cbz	r4, 81088f8 <ai_platform_get_activations_map+0x6c>
 81088ee:	3001      	adds	r0, #1
 81088f0:	4287      	cmp	r7, r0
 81088f2:	f843 4f04 	str.w	r4, [r3, #4]!
 81088f6:	d1f2      	bne.n	81088de <ai_platform_get_activations_map+0x52>
 81088f8:	1a38      	subs	r0, r7, r0
 81088fa:	fab0 f080 	clz	r0, r0
 81088fe:	0940      	lsrs	r0, r0, #5
 8108900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108902:	2000      	movs	r0, #0
 8108904:	4770      	bx	lr
 8108906:	1f23      	subs	r3, r4, #4
 8108908:	4628      	mov	r0, r5
 810890a:	2400      	movs	r4, #0
 810890c:	e000      	b.n	8108910 <ai_platform_get_activations_map+0x84>
 810890e:	4614      	mov	r4, r2
 8108910:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8108914:	42b2      	cmp	r2, r6
 8108916:	d0d1      	beq.n	81088bc <ai_platform_get_activations_map+0x30>
 8108918:	f843 2f04 	str.w	r2, [r3, #4]!
 810891c:	1c62      	adds	r2, r4, #1
 810891e:	4297      	cmp	r7, r2
 8108920:	d1f5      	bne.n	810890e <ai_platform_get_activations_map+0x82>
 8108922:	3402      	adds	r4, #2
 8108924:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8108928:	42b3      	cmp	r3, r6
 810892a:	d1c9      	bne.n	81088c0 <ai_platform_get_activations_map+0x34>
 810892c:	2001      	movs	r0, #1
 810892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108930:	a1facade 	.word	0xa1facade

08108934 <ai_platform_bind_network_params>:
 8108934:	b1a0      	cbz	r0, 8108960 <ai_platform_bind_network_params+0x2c>
 8108936:	b1b1      	cbz	r1, 8108966 <ai_platform_bind_network_params+0x32>
 8108938:	b1c2      	cbz	r2, 810896c <ai_platform_bind_network_params+0x38>
 810893a:	b410      	push	{r4}
 810893c:	4603      	mov	r3, r0
 810893e:	4c0d      	ldr	r4, [pc, #52]	; (8108974 <ai_platform_bind_network_params+0x40>)
 8108940:	f843 4b04 	str.w	r4, [r3], #4
 8108944:	f100 0c0c 	add.w	ip, r0, #12
 8108948:	c903      	ldmia	r1, {r0, r1}
 810894a:	e883 0003 	stmia.w	r3, {r0, r1}
 810894e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108952:	e88c 0003 	stmia.w	ip, {r0, r1}
 8108956:	2301      	movs	r3, #1
 8108958:	4618      	mov	r0, r3
 810895a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810895e:	4770      	bx	lr
 8108960:	4603      	mov	r3, r0
 8108962:	4618      	mov	r0, r3
 8108964:	4770      	bx	lr
 8108966:	460b      	mov	r3, r1
 8108968:	4618      	mov	r0, r3
 810896a:	4770      	bx	lr
 810896c:	4613      	mov	r3, r2
 810896e:	4618      	mov	r0, r3
 8108970:	4770      	bx	lr
 8108972:	bf00      	nop
 8108974:	a1facade 	.word	0xa1facade

08108978 <ai_platform_network_get_error>:
 8108978:	b510      	push	{r4, lr}
 810897a:	b1f0      	cbz	r0, 81089ba <ai_platform_network_get_error+0x42>
 810897c:	4b2f      	ldr	r3, [pc, #188]	; (8108a3c <ai_platform_network_get_error+0xc4>)
 810897e:	6802      	ldr	r2, [r0, #0]
 8108980:	429a      	cmp	r2, r3
 8108982:	4604      	mov	r4, r0
 8108984:	d119      	bne.n	81089ba <ai_platform_network_get_error+0x42>
 8108986:	f7ff ff29 	bl	81087dc <_ai_platform_acquire_crc>
 810898a:	4b2d      	ldr	r3, [pc, #180]	; (8108a40 <ai_platform_network_get_error+0xc8>)
 810898c:	681b      	ldr	r3, [r3, #0]
 810898e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108996:	d03c      	beq.n	8108a12 <ai_platform_network_get_error+0x9a>
 8108998:	4a2a      	ldr	r2, [pc, #168]	; (8108a44 <ai_platform_network_get_error+0xcc>)
 810899a:	2301      	movs	r3, #1
 810899c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81089a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81089a4:	2b00      	cmp	r3, #0
 81089a6:	d1fb      	bne.n	81089a0 <ai_platform_network_get_error+0x28>
 81089a8:	4b27      	ldr	r3, [pc, #156]	; (8108a48 <ai_platform_network_get_error+0xd0>)
 81089aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81089ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81089b2:	4b26      	ldr	r3, [pc, #152]	; (8108a4c <ai_platform_network_get_error+0xd4>)
 81089b4:	429a      	cmp	r2, r3
 81089b6:	d038      	beq.n	8108a2a <ai_platform_network_get_error+0xb2>
 81089b8:	e7fe      	b.n	81089b8 <ai_platform_network_get_error+0x40>
 81089ba:	f7ff ff0f 	bl	81087dc <_ai_platform_acquire_crc>
 81089be:	4b20      	ldr	r3, [pc, #128]	; (8108a40 <ai_platform_network_get_error+0xc8>)
 81089c0:	681b      	ldr	r3, [r3, #0]
 81089c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81089c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81089ca:	d010      	beq.n	81089ee <ai_platform_network_get_error+0x76>
 81089cc:	4a1d      	ldr	r2, [pc, #116]	; (8108a44 <ai_platform_network_get_error+0xcc>)
 81089ce:	2301      	movs	r3, #1
 81089d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81089d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81089d8:	2b00      	cmp	r3, #0
 81089da:	d1fb      	bne.n	81089d4 <ai_platform_network_get_error+0x5c>
 81089dc:	4b1a      	ldr	r3, [pc, #104]	; (8108a48 <ai_platform_network_get_error+0xd0>)
 81089de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81089e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81089e6:	4b19      	ldr	r3, [pc, #100]	; (8108a4c <ai_platform_network_get_error+0xd4>)
 81089e8:	429a      	cmp	r2, r3
 81089ea:	d00d      	beq.n	8108a08 <ai_platform_network_get_error+0x90>
 81089ec:	e7fe      	b.n	81089ec <ai_platform_network_get_error+0x74>
 81089ee:	4a18      	ldr	r2, [pc, #96]	; (8108a50 <ai_platform_network_get_error+0xd8>)
 81089f0:	2301      	movs	r3, #1
 81089f2:	6093      	str	r3, [r2, #8]
 81089f4:	6893      	ldr	r3, [r2, #8]
 81089f6:	2b00      	cmp	r3, #0
 81089f8:	d1fc      	bne.n	81089f4 <ai_platform_network_get_error+0x7c>
 81089fa:	4b13      	ldr	r3, [pc, #76]	; (8108a48 <ai_platform_network_get_error+0xd0>)
 81089fc:	6013      	str	r3, [r2, #0]
 81089fe:	6812      	ldr	r2, [r2, #0]
 8108a00:	4b12      	ldr	r3, [pc, #72]	; (8108a4c <ai_platform_network_get_error+0xd4>)
 8108a02:	429a      	cmp	r2, r3
 8108a04:	d000      	beq.n	8108a08 <ai_platform_network_get_error+0x90>
 8108a06:	e7fe      	b.n	8108a06 <ai_platform_network_get_error+0x8e>
 8108a08:	f7ff feea 	bl	81087e0 <_ai_platform_release_crc>
 8108a0c:	f241 0010 	movw	r0, #4112	; 0x1010
 8108a10:	bd10      	pop	{r4, pc}
 8108a12:	4a0f      	ldr	r2, [pc, #60]	; (8108a50 <ai_platform_network_get_error+0xd8>)
 8108a14:	2301      	movs	r3, #1
 8108a16:	6093      	str	r3, [r2, #8]
 8108a18:	6893      	ldr	r3, [r2, #8]
 8108a1a:	2b00      	cmp	r3, #0
 8108a1c:	d1fc      	bne.n	8108a18 <ai_platform_network_get_error+0xa0>
 8108a1e:	4b0a      	ldr	r3, [pc, #40]	; (8108a48 <ai_platform_network_get_error+0xd0>)
 8108a20:	6013      	str	r3, [r2, #0]
 8108a22:	6812      	ldr	r2, [r2, #0]
 8108a24:	4b09      	ldr	r3, [pc, #36]	; (8108a4c <ai_platform_network_get_error+0xd4>)
 8108a26:	429a      	cmp	r2, r3
 8108a28:	d107      	bne.n	8108a3a <ai_platform_network_get_error+0xc2>
 8108a2a:	f7ff fed9 	bl	81087e0 <_ai_platform_release_crc>
 8108a2e:	f104 0010 	add.w	r0, r4, #16
 8108a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108a36:	f000 be8b 	b.w	8109750 <core_get_error>
 8108a3a:	e7fe      	b.n	8108a3a <ai_platform_network_get_error+0xc2>
 8108a3c:	a1c00100 	.word	0xa1c00100
 8108a40:	e0042000 	.word	0xe0042000
 8108a44:	58024000 	.word	0x58024000
 8108a48:	f407a5c2 	.word	0xf407a5c2
 8108a4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8108a50:	40023000 	.word	0x40023000

08108a54 <ai_platform_network_set_error>:
 8108a54:	b110      	cbz	r0, 8108a5c <ai_platform_network_set_error+0x8>
 8108a56:	3010      	adds	r0, #16
 8108a58:	f000 be80 	b.w	810975c <core_set_error>
 8108a5c:	4770      	bx	lr
 8108a5e:	bf00      	nop

08108a60 <ai_platform_inputs_get>:
 8108a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108a64:	b085      	sub	sp, #20
 8108a66:	9102      	str	r1, [sp, #8]
 8108a68:	b1f0      	cbz	r0, 8108aa8 <ai_platform_inputs_get+0x48>
 8108a6a:	4b62      	ldr	r3, [pc, #392]	; (8108bf4 <ai_platform_inputs_get+0x194>)
 8108a6c:	6802      	ldr	r2, [r0, #0]
 8108a6e:	429a      	cmp	r2, r3
 8108a70:	4607      	mov	r7, r0
 8108a72:	d119      	bne.n	8108aa8 <ai_platform_inputs_get+0x48>
 8108a74:	f7ff feb2 	bl	81087dc <_ai_platform_acquire_crc>
 8108a78:	4b5f      	ldr	r3, [pc, #380]	; (8108bf8 <ai_platform_inputs_get+0x198>)
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108a84:	d03d      	beq.n	8108b02 <ai_platform_inputs_get+0xa2>
 8108a86:	4a5d      	ldr	r2, [pc, #372]	; (8108bfc <ai_platform_inputs_get+0x19c>)
 8108a88:	2301      	movs	r3, #1
 8108a8a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108a8e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108a92:	2b00      	cmp	r3, #0
 8108a94:	d1fb      	bne.n	8108a8e <ai_platform_inputs_get+0x2e>
 8108a96:	4b5a      	ldr	r3, [pc, #360]	; (8108c00 <ai_platform_inputs_get+0x1a0>)
 8108a98:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108a9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108aa0:	4b58      	ldr	r3, [pc, #352]	; (8108c04 <ai_platform_inputs_get+0x1a4>)
 8108aa2:	429a      	cmp	r2, r3
 8108aa4:	d039      	beq.n	8108b1a <ai_platform_inputs_get+0xba>
 8108aa6:	e7fe      	b.n	8108aa6 <ai_platform_inputs_get+0x46>
 8108aa8:	f7ff fe98 	bl	81087dc <_ai_platform_acquire_crc>
 8108aac:	4b52      	ldr	r3, [pc, #328]	; (8108bf8 <ai_platform_inputs_get+0x198>)
 8108aae:	681b      	ldr	r3, [r3, #0]
 8108ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108ab8:	d010      	beq.n	8108adc <ai_platform_inputs_get+0x7c>
 8108aba:	4a50      	ldr	r2, [pc, #320]	; (8108bfc <ai_platform_inputs_get+0x19c>)
 8108abc:	2301      	movs	r3, #1
 8108abe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108ac2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108ac6:	2b00      	cmp	r3, #0
 8108ac8:	d1fb      	bne.n	8108ac2 <ai_platform_inputs_get+0x62>
 8108aca:	4b4d      	ldr	r3, [pc, #308]	; (8108c00 <ai_platform_inputs_get+0x1a0>)
 8108acc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108ad0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108ad4:	4b4b      	ldr	r3, [pc, #300]	; (8108c04 <ai_platform_inputs_get+0x1a4>)
 8108ad6:	429a      	cmp	r2, r3
 8108ad8:	d00d      	beq.n	8108af6 <ai_platform_inputs_get+0x96>
 8108ada:	e7fe      	b.n	8108ada <ai_platform_inputs_get+0x7a>
 8108adc:	4a4a      	ldr	r2, [pc, #296]	; (8108c08 <ai_platform_inputs_get+0x1a8>)
 8108ade:	2301      	movs	r3, #1
 8108ae0:	6093      	str	r3, [r2, #8]
 8108ae2:	6893      	ldr	r3, [r2, #8]
 8108ae4:	2b00      	cmp	r3, #0
 8108ae6:	d1fc      	bne.n	8108ae2 <ai_platform_inputs_get+0x82>
 8108ae8:	4b45      	ldr	r3, [pc, #276]	; (8108c00 <ai_platform_inputs_get+0x1a0>)
 8108aea:	6013      	str	r3, [r2, #0]
 8108aec:	6812      	ldr	r2, [r2, #0]
 8108aee:	4b45      	ldr	r3, [pc, #276]	; (8108c04 <ai_platform_inputs_get+0x1a4>)
 8108af0:	429a      	cmp	r2, r3
 8108af2:	d000      	beq.n	8108af6 <ai_platform_inputs_get+0x96>
 8108af4:	e7fe      	b.n	8108af4 <ai_platform_inputs_get+0x94>
 8108af6:	f7ff fe73 	bl	81087e0 <_ai_platform_release_crc>
 8108afa:	2000      	movs	r0, #0
 8108afc:	b005      	add	sp, #20
 8108afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108b02:	4a41      	ldr	r2, [pc, #260]	; (8108c08 <ai_platform_inputs_get+0x1a8>)
 8108b04:	2301      	movs	r3, #1
 8108b06:	6093      	str	r3, [r2, #8]
 8108b08:	6893      	ldr	r3, [r2, #8]
 8108b0a:	2b00      	cmp	r3, #0
 8108b0c:	d1fc      	bne.n	8108b08 <ai_platform_inputs_get+0xa8>
 8108b0e:	4b3c      	ldr	r3, [pc, #240]	; (8108c00 <ai_platform_inputs_get+0x1a0>)
 8108b10:	6013      	str	r3, [r2, #0]
 8108b12:	6812      	ldr	r2, [r2, #0]
 8108b14:	4b3b      	ldr	r3, [pc, #236]	; (8108c04 <ai_platform_inputs_get+0x1a4>)
 8108b16:	429a      	cmp	r2, r3
 8108b18:	d155      	bne.n	8108bc6 <ai_platform_inputs_get+0x166>
 8108b1a:	f7ff fe61 	bl	81087e0 <_ai_platform_release_crc>
 8108b1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8108b20:	2b00      	cmp	r3, #0
 8108b22:	d051      	beq.n	8108bc8 <ai_platform_inputs_get+0x168>
 8108b24:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8108b28:	f1ba 0f00 	cmp.w	sl, #0
 8108b2c:	d04c      	beq.n	8108bc8 <ai_platform_inputs_get+0x168>
 8108b2e:	f04f 0b00 	mov.w	fp, #0
 8108b32:	465d      	mov	r5, fp
 8108b34:	9703      	str	r7, [sp, #12]
 8108b36:	e016      	b.n	8108b66 <ai_platform_inputs_get+0x106>
 8108b38:	9901      	ldr	r1, [sp, #4]
 8108b3a:	2301      	movs	r3, #1
 8108b3c:	507b      	str	r3, [r7, r1]
 8108b3e:	69b1      	ldr	r1, [r6, #24]
 8108b40:	6849      	ldr	r1, [r1, #4]
 8108b42:	6121      	str	r1, [r4, #16]
 8108b44:	f04f 0301 	mov.w	r3, #1
 8108b48:	7523      	strb	r3, [r4, #20]
 8108b4a:	e9c4 c200 	strd	ip, r2, [r4]
 8108b4e:	6962      	ldr	r2, [r4, #20]
 8108b50:	60a0      	str	r0, [r4, #8]
 8108b52:	2300      	movs	r3, #0
 8108b54:	f369 221f 	bfi	r2, r9, #8, #24
 8108b58:	f8c4 8018 	str.w	r8, [r4, #24]
 8108b5c:	60e3      	str	r3, [r4, #12]
 8108b5e:	3501      	adds	r5, #1
 8108b60:	f10b 0b1c 	add.w	fp, fp, #28
 8108b64:	6162      	str	r2, [r4, #20]
 8108b66:	f8ba 3000 	ldrh.w	r3, [sl]
 8108b6a:	42ab      	cmp	r3, r5
 8108b6c:	b2aa      	uxth	r2, r5
 8108b6e:	d93a      	bls.n	8108be6 <ai_platform_inputs_get+0x186>
 8108b70:	f8da 3004 	ldr.w	r3, [sl, #4]
 8108b74:	00e9      	lsls	r1, r5, #3
 8108b76:	9101      	str	r1, [sp, #4]
 8108b78:	2b00      	cmp	r3, #0
 8108b7a:	d034      	beq.n	8108be6 <ai_platform_inputs_get+0x186>
 8108b7c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8108b80:	2e00      	cmp	r6, #0
 8108b82:	d030      	beq.n	8108be6 <ai_platform_inputs_get+0x186>
 8108b84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108b88:	69b2      	ldr	r2, [r6, #24]
 8108b8a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8108b8e:	6810      	ldr	r0, [r2, #0]
 8108b90:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8108b94:	68b3      	ldr	r3, [r6, #8]
 8108b96:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8108b9a:	f001 fc93 	bl	810a4c4 <ai_array_to_buffer_fmt>
 8108b9e:	69b1      	ldr	r1, [r6, #24]
 8108ba0:	4684      	mov	ip, r0
 8108ba2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8108ba6:	688a      	ldr	r2, [r1, #8]
 8108ba8:	445c      	add	r4, fp
 8108baa:	2800      	cmp	r0, #0
 8108bac:	d0c8      	beq.n	8108b40 <ai_platform_inputs_get+0xe0>
 8108bae:	2100      	movs	r1, #0
 8108bb0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8108bb4:	6831      	ldr	r1, [r6, #0]
 8108bb6:	6041      	str	r1, [r0, #4]
 8108bb8:	b111      	cbz	r1, 8108bc0 <ai_platform_inputs_get+0x160>
 8108bba:	8849      	ldrh	r1, [r1, #2]
 8108bbc:	2900      	cmp	r1, #0
 8108bbe:	d1bb      	bne.n	8108b38 <ai_platform_inputs_get+0xd8>
 8108bc0:	69b1      	ldr	r1, [r6, #24]
 8108bc2:	2000      	movs	r0, #0
 8108bc4:	e7bc      	b.n	8108b40 <ai_platform_inputs_get+0xe0>
 8108bc6:	e7fe      	b.n	8108bc6 <ai_platform_inputs_get+0x166>
 8108bc8:	2218      	movs	r2, #24
 8108bca:	2111      	movs	r1, #17
 8108bcc:	f107 0010 	add.w	r0, r7, #16
 8108bd0:	f000 fdc4 	bl	810975c <core_set_error>
 8108bd4:	2200      	movs	r2, #0
 8108bd6:	4610      	mov	r0, r2
 8108bd8:	9b02      	ldr	r3, [sp, #8]
 8108bda:	2b00      	cmp	r3, #0
 8108bdc:	d08e      	beq.n	8108afc <ai_platform_inputs_get+0x9c>
 8108bde:	801a      	strh	r2, [r3, #0]
 8108be0:	b005      	add	sp, #20
 8108be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108be6:	9f03      	ldr	r7, [sp, #12]
 8108be8:	2a00      	cmp	r2, #0
 8108bea:	d0ed      	beq.n	8108bc8 <ai_platform_inputs_get+0x168>
 8108bec:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108bf0:	6858      	ldr	r0, [r3, #4]
 8108bf2:	e7f1      	b.n	8108bd8 <ai_platform_inputs_get+0x178>
 8108bf4:	a1c00100 	.word	0xa1c00100
 8108bf8:	e0042000 	.word	0xe0042000
 8108bfc:	58024000 	.word	0x58024000
 8108c00:	f407a5c2 	.word	0xf407a5c2
 8108c04:	b5e8b5cd 	.word	0xb5e8b5cd
 8108c08:	40023000 	.word	0x40023000

08108c0c <ai_platform_outputs_get>:
 8108c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108c10:	b085      	sub	sp, #20
 8108c12:	9102      	str	r1, [sp, #8]
 8108c14:	b1f0      	cbz	r0, 8108c54 <ai_platform_outputs_get+0x48>
 8108c16:	4b5f      	ldr	r3, [pc, #380]	; (8108d94 <ai_platform_outputs_get+0x188>)
 8108c18:	6802      	ldr	r2, [r0, #0]
 8108c1a:	429a      	cmp	r2, r3
 8108c1c:	4607      	mov	r7, r0
 8108c1e:	d119      	bne.n	8108c54 <ai_platform_outputs_get+0x48>
 8108c20:	f7ff fddc 	bl	81087dc <_ai_platform_acquire_crc>
 8108c24:	4b5c      	ldr	r3, [pc, #368]	; (8108d98 <ai_platform_outputs_get+0x18c>)
 8108c26:	681b      	ldr	r3, [r3, #0]
 8108c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108c30:	d03d      	beq.n	8108cae <ai_platform_outputs_get+0xa2>
 8108c32:	4a5a      	ldr	r2, [pc, #360]	; (8108d9c <ai_platform_outputs_get+0x190>)
 8108c34:	2301      	movs	r3, #1
 8108c36:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108c3a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108c3e:	2b00      	cmp	r3, #0
 8108c40:	d1fb      	bne.n	8108c3a <ai_platform_outputs_get+0x2e>
 8108c42:	4b57      	ldr	r3, [pc, #348]	; (8108da0 <ai_platform_outputs_get+0x194>)
 8108c44:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108c48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108c4c:	4b55      	ldr	r3, [pc, #340]	; (8108da4 <ai_platform_outputs_get+0x198>)
 8108c4e:	429a      	cmp	r2, r3
 8108c50:	d039      	beq.n	8108cc6 <ai_platform_outputs_get+0xba>
 8108c52:	e7fe      	b.n	8108c52 <ai_platform_outputs_get+0x46>
 8108c54:	f7ff fdc2 	bl	81087dc <_ai_platform_acquire_crc>
 8108c58:	4b4f      	ldr	r3, [pc, #316]	; (8108d98 <ai_platform_outputs_get+0x18c>)
 8108c5a:	681b      	ldr	r3, [r3, #0]
 8108c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108c64:	d010      	beq.n	8108c88 <ai_platform_outputs_get+0x7c>
 8108c66:	4a4d      	ldr	r2, [pc, #308]	; (8108d9c <ai_platform_outputs_get+0x190>)
 8108c68:	2301      	movs	r3, #1
 8108c6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108c6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108c72:	2b00      	cmp	r3, #0
 8108c74:	d1fb      	bne.n	8108c6e <ai_platform_outputs_get+0x62>
 8108c76:	4b4a      	ldr	r3, [pc, #296]	; (8108da0 <ai_platform_outputs_get+0x194>)
 8108c78:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108c7c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108c80:	4b48      	ldr	r3, [pc, #288]	; (8108da4 <ai_platform_outputs_get+0x198>)
 8108c82:	429a      	cmp	r2, r3
 8108c84:	d00d      	beq.n	8108ca2 <ai_platform_outputs_get+0x96>
 8108c86:	e7fe      	b.n	8108c86 <ai_platform_outputs_get+0x7a>
 8108c88:	4a47      	ldr	r2, [pc, #284]	; (8108da8 <ai_platform_outputs_get+0x19c>)
 8108c8a:	2301      	movs	r3, #1
 8108c8c:	6093      	str	r3, [r2, #8]
 8108c8e:	6893      	ldr	r3, [r2, #8]
 8108c90:	2b00      	cmp	r3, #0
 8108c92:	d1fc      	bne.n	8108c8e <ai_platform_outputs_get+0x82>
 8108c94:	4b42      	ldr	r3, [pc, #264]	; (8108da0 <ai_platform_outputs_get+0x194>)
 8108c96:	6013      	str	r3, [r2, #0]
 8108c98:	6812      	ldr	r2, [r2, #0]
 8108c9a:	4b42      	ldr	r3, [pc, #264]	; (8108da4 <ai_platform_outputs_get+0x198>)
 8108c9c:	429a      	cmp	r2, r3
 8108c9e:	d000      	beq.n	8108ca2 <ai_platform_outputs_get+0x96>
 8108ca0:	e7fe      	b.n	8108ca0 <ai_platform_outputs_get+0x94>
 8108ca2:	f7ff fd9d 	bl	81087e0 <_ai_platform_release_crc>
 8108ca6:	2000      	movs	r0, #0
 8108ca8:	b005      	add	sp, #20
 8108caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108cae:	4a3e      	ldr	r2, [pc, #248]	; (8108da8 <ai_platform_outputs_get+0x19c>)
 8108cb0:	2301      	movs	r3, #1
 8108cb2:	6093      	str	r3, [r2, #8]
 8108cb4:	6893      	ldr	r3, [r2, #8]
 8108cb6:	2b00      	cmp	r3, #0
 8108cb8:	d1fc      	bne.n	8108cb4 <ai_platform_outputs_get+0xa8>
 8108cba:	4b39      	ldr	r3, [pc, #228]	; (8108da0 <ai_platform_outputs_get+0x194>)
 8108cbc:	6013      	str	r3, [r2, #0]
 8108cbe:	6812      	ldr	r2, [r2, #0]
 8108cc0:	4b38      	ldr	r3, [pc, #224]	; (8108da4 <ai_platform_outputs_get+0x198>)
 8108cc2:	429a      	cmp	r2, r3
 8108cc4:	d150      	bne.n	8108d68 <ai_platform_outputs_get+0x15c>
 8108cc6:	f7ff fd8b 	bl	81087e0 <_ai_platform_release_crc>
 8108cca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8108ccc:	2b01      	cmp	r3, #1
 8108cce:	d958      	bls.n	8108d82 <ai_platform_outputs_get+0x176>
 8108cd0:	f04f 0b00 	mov.w	fp, #0
 8108cd4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8108cd8:	9703      	str	r7, [sp, #12]
 8108cda:	465d      	mov	r5, fp
 8108cdc:	e016      	b.n	8108d0c <ai_platform_outputs_get+0x100>
 8108cde:	9901      	ldr	r1, [sp, #4]
 8108ce0:	2301      	movs	r3, #1
 8108ce2:	507b      	str	r3, [r7, r1]
 8108ce4:	69b1      	ldr	r1, [r6, #24]
 8108ce6:	6849      	ldr	r1, [r1, #4]
 8108ce8:	6121      	str	r1, [r4, #16]
 8108cea:	f04f 0301 	mov.w	r3, #1
 8108cee:	7523      	strb	r3, [r4, #20]
 8108cf0:	e9c4 c200 	strd	ip, r2, [r4]
 8108cf4:	6962      	ldr	r2, [r4, #20]
 8108cf6:	60a0      	str	r0, [r4, #8]
 8108cf8:	2300      	movs	r3, #0
 8108cfa:	f369 221f 	bfi	r2, r9, #8, #24
 8108cfe:	f8c4 8018 	str.w	r8, [r4, #24]
 8108d02:	60e3      	str	r3, [r4, #12]
 8108d04:	3501      	adds	r5, #1
 8108d06:	f10b 0b1c 	add.w	fp, fp, #28
 8108d0a:	6162      	str	r2, [r4, #20]
 8108d0c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8108d10:	42ab      	cmp	r3, r5
 8108d12:	b2aa      	uxth	r2, r5
 8108d14:	d929      	bls.n	8108d6a <ai_platform_outputs_get+0x15e>
 8108d16:	f8da 3010 	ldr.w	r3, [sl, #16]
 8108d1a:	00e9      	lsls	r1, r5, #3
 8108d1c:	9101      	str	r1, [sp, #4]
 8108d1e:	b323      	cbz	r3, 8108d6a <ai_platform_outputs_get+0x15e>
 8108d20:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8108d24:	b30e      	cbz	r6, 8108d6a <ai_platform_outputs_get+0x15e>
 8108d26:	f8da 3014 	ldr.w	r3, [sl, #20]
 8108d2a:	69b2      	ldr	r2, [r6, #24]
 8108d2c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8108d30:	6810      	ldr	r0, [r2, #0]
 8108d32:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8108d36:	68b3      	ldr	r3, [r6, #8]
 8108d38:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8108d3c:	f001 fbc2 	bl	810a4c4 <ai_array_to_buffer_fmt>
 8108d40:	69b1      	ldr	r1, [r6, #24]
 8108d42:	4684      	mov	ip, r0
 8108d44:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8108d48:	688a      	ldr	r2, [r1, #8]
 8108d4a:	445c      	add	r4, fp
 8108d4c:	2800      	cmp	r0, #0
 8108d4e:	d0ca      	beq.n	8108ce6 <ai_platform_outputs_get+0xda>
 8108d50:	2100      	movs	r1, #0
 8108d52:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8108d56:	6831      	ldr	r1, [r6, #0]
 8108d58:	6041      	str	r1, [r0, #4]
 8108d5a:	b111      	cbz	r1, 8108d62 <ai_platform_outputs_get+0x156>
 8108d5c:	8849      	ldrh	r1, [r1, #2]
 8108d5e:	2900      	cmp	r1, #0
 8108d60:	d1bd      	bne.n	8108cde <ai_platform_outputs_get+0xd2>
 8108d62:	69b1      	ldr	r1, [r6, #24]
 8108d64:	2000      	movs	r0, #0
 8108d66:	e7be      	b.n	8108ce6 <ai_platform_outputs_get+0xda>
 8108d68:	e7fe      	b.n	8108d68 <ai_platform_outputs_get+0x15c>
 8108d6a:	9f03      	ldr	r7, [sp, #12]
 8108d6c:	b14a      	cbz	r2, 8108d82 <ai_platform_outputs_get+0x176>
 8108d6e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8108d72:	6858      	ldr	r0, [r3, #4]
 8108d74:	9b02      	ldr	r3, [sp, #8]
 8108d76:	2b00      	cmp	r3, #0
 8108d78:	d096      	beq.n	8108ca8 <ai_platform_outputs_get+0x9c>
 8108d7a:	801a      	strh	r2, [r3, #0]
 8108d7c:	b005      	add	sp, #20
 8108d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108d82:	2218      	movs	r2, #24
 8108d84:	2111      	movs	r1, #17
 8108d86:	f107 0010 	add.w	r0, r7, #16
 8108d8a:	f000 fce7 	bl	810975c <core_set_error>
 8108d8e:	2200      	movs	r2, #0
 8108d90:	4610      	mov	r0, r2
 8108d92:	e7ef      	b.n	8108d74 <ai_platform_outputs_get+0x168>
 8108d94:	a1c00100 	.word	0xa1c00100
 8108d98:	e0042000 	.word	0xe0042000
 8108d9c:	58024000 	.word	0x58024000
 8108da0:	f407a5c2 	.word	0xf407a5c2
 8108da4:	b5e8b5cd 	.word	0xb5e8b5cd
 8108da8:	40023000 	.word	0x40023000

08108dac <ai_platform_network_create>:
 8108dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108db0:	b083      	sub	sp, #12
 8108db2:	4606      	mov	r6, r0
 8108db4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8108db8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8108dbc:	4615      	mov	r5, r2
 8108dbe:	461f      	mov	r7, r3
 8108dc0:	f7ff fd0c 	bl	81087dc <_ai_platform_acquire_crc>
 8108dc4:	b188      	cbz	r0, 8108dea <ai_platform_network_create+0x3e>
 8108dc6:	4a5d      	ldr	r2, [pc, #372]	; (8108f3c <ai_platform_network_create+0x190>)
 8108dc8:	6812      	ldr	r2, [r2, #0]
 8108dca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8108dce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8108dd2:	4603      	mov	r3, r0
 8108dd4:	d00e      	beq.n	8108df4 <ai_platform_network_create+0x48>
 8108dd6:	4a5a      	ldr	r2, [pc, #360]	; (8108f40 <ai_platform_network_create+0x194>)
 8108dd8:	2118      	movs	r1, #24
 8108dda:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8108dde:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8108de2:	2918      	cmp	r1, #24
 8108de4:	d018      	beq.n	8108e18 <ai_platform_network_create+0x6c>
 8108de6:	f7ff fcfb 	bl	81087e0 <_ai_platform_release_crc>
 8108dea:	f244 1033 	movw	r0, #16691	; 0x4133
 8108dee:	b003      	add	sp, #12
 8108df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108df4:	4a53      	ldr	r2, [pc, #332]	; (8108f44 <ai_platform_network_create+0x198>)
 8108df6:	2101      	movs	r1, #1
 8108df8:	6091      	str	r1, [r2, #8]
 8108dfa:	2114      	movs	r1, #20
 8108dfc:	e001      	b.n	8108e02 <ai_platform_network_create+0x56>
 8108dfe:	3901      	subs	r1, #1
 8108e00:	d002      	beq.n	8108e08 <ai_platform_network_create+0x5c>
 8108e02:	6894      	ldr	r4, [r2, #8]
 8108e04:	2c00      	cmp	r4, #0
 8108e06:	d1fa      	bne.n	8108dfe <ai_platform_network_create+0x52>
 8108e08:	4a4e      	ldr	r2, [pc, #312]	; (8108f44 <ai_platform_network_create+0x198>)
 8108e0a:	6891      	ldr	r1, [r2, #8]
 8108e0c:	b911      	cbnz	r1, 8108e14 <ai_platform_network_create+0x68>
 8108e0e:	6812      	ldr	r2, [r2, #0]
 8108e10:	3201      	adds	r2, #1
 8108e12:	d008      	beq.n	8108e26 <ai_platform_network_create+0x7a>
 8108e14:	4618      	mov	r0, r3
 8108e16:	e7e6      	b.n	8108de6 <ai_platform_network_create+0x3a>
 8108e18:	2101      	movs	r1, #1
 8108e1a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8108e1e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8108e22:	2900      	cmp	r1, #0
 8108e24:	d1fb      	bne.n	8108e1e <ai_platform_network_create+0x72>
 8108e26:	4618      	mov	r0, r3
 8108e28:	f7ff fcda 	bl	81087e0 <_ai_platform_release_crc>
 8108e2c:	f7ff fcd6 	bl	81087dc <_ai_platform_acquire_crc>
 8108e30:	4b42      	ldr	r3, [pc, #264]	; (8108f3c <ai_platform_network_create+0x190>)
 8108e32:	681b      	ldr	r3, [r3, #0]
 8108e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108e3c:	d010      	beq.n	8108e60 <ai_platform_network_create+0xb4>
 8108e3e:	4b40      	ldr	r3, [pc, #256]	; (8108f40 <ai_platform_network_create+0x194>)
 8108e40:	2201      	movs	r2, #1
 8108e42:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8108e46:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8108e4a:	2900      	cmp	r1, #0
 8108e4c:	d1fb      	bne.n	8108e46 <ai_platform_network_create+0x9a>
 8108e4e:	4a3e      	ldr	r2, [pc, #248]	; (8108f48 <ai_platform_network_create+0x19c>)
 8108e50:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8108e54:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8108e58:	4b3c      	ldr	r3, [pc, #240]	; (8108f4c <ai_platform_network_create+0x1a0>)
 8108e5a:	429a      	cmp	r2, r3
 8108e5c:	d00c      	beq.n	8108e78 <ai_platform_network_create+0xcc>
 8108e5e:	e7fe      	b.n	8108e5e <ai_platform_network_create+0xb2>
 8108e60:	4a38      	ldr	r2, [pc, #224]	; (8108f44 <ai_platform_network_create+0x198>)
 8108e62:	2301      	movs	r3, #1
 8108e64:	6093      	str	r3, [r2, #8]
 8108e66:	6893      	ldr	r3, [r2, #8]
 8108e68:	2b00      	cmp	r3, #0
 8108e6a:	d1fc      	bne.n	8108e66 <ai_platform_network_create+0xba>
 8108e6c:	4b36      	ldr	r3, [pc, #216]	; (8108f48 <ai_platform_network_create+0x19c>)
 8108e6e:	6013      	str	r3, [r2, #0]
 8108e70:	6812      	ldr	r2, [r2, #0]
 8108e72:	4b36      	ldr	r3, [pc, #216]	; (8108f4c <ai_platform_network_create+0x1a0>)
 8108e74:	429a      	cmp	r2, r3
 8108e76:	d122      	bne.n	8108ebe <ai_platform_network_create+0x112>
 8108e78:	f7ff fcb2 	bl	81087e0 <_ai_platform_release_crc>
 8108e7c:	b38e      	cbz	r6, 8108ee2 <ai_platform_network_create+0x136>
 8108e7e:	4b34      	ldr	r3, [pc, #208]	; (8108f50 <ai_platform_network_create+0x1a4>)
 8108e80:	602b      	str	r3, [r5, #0]
 8108e82:	6035      	str	r5, [r6, #0]
 8108e84:	f000 fc62 	bl	810974c <core_init>
 8108e88:	b1d0      	cbz	r0, 8108ec0 <ai_platform_network_create+0x114>
 8108e8a:	f7ff fca7 	bl	81087dc <_ai_platform_acquire_crc>
 8108e8e:	4b2b      	ldr	r3, [pc, #172]	; (8108f3c <ai_platform_network_create+0x190>)
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108e9a:	d025      	beq.n	8108ee8 <ai_platform_network_create+0x13c>
 8108e9c:	4a28      	ldr	r2, [pc, #160]	; (8108f40 <ai_platform_network_create+0x194>)
 8108e9e:	2301      	movs	r3, #1
 8108ea0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108ea4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108ea8:	2b00      	cmp	r3, #0
 8108eaa:	d1fb      	bne.n	8108ea4 <ai_platform_network_create+0xf8>
 8108eac:	4b26      	ldr	r3, [pc, #152]	; (8108f48 <ai_platform_network_create+0x19c>)
 8108eae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108eb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108eb6:	4b25      	ldr	r3, [pc, #148]	; (8108f4c <ai_platform_network_create+0x1a0>)
 8108eb8:	429a      	cmp	r2, r3
 8108eba:	d022      	beq.n	8108f02 <ai_platform_network_create+0x156>
 8108ebc:	e7fe      	b.n	8108ebc <ai_platform_network_create+0x110>
 8108ebe:	e7fe      	b.n	8108ebe <ai_platform_network_create+0x112>
 8108ec0:	2430      	movs	r4, #48	; 0x30
 8108ec2:	2300      	movs	r3, #0
 8108ec4:	6033      	str	r3, [r6, #0]
 8108ec6:	2610      	movs	r6, #16
 8108ec8:	464a      	mov	r2, r9
 8108eca:	4641      	mov	r1, r8
 8108ecc:	4638      	mov	r0, r7
 8108ece:	f001 fb9f 	bl	810a610 <ai_version_get>
 8108ed2:	4603      	mov	r3, r0
 8108ed4:	2000      	movs	r0, #0
 8108ed6:	f364 0007 	bfi	r0, r4, #0, #8
 8108eda:	64ab      	str	r3, [r5, #72]	; 0x48
 8108edc:	f366 201f 	bfi	r0, r6, #8, #24
 8108ee0:	e785      	b.n	8108dee <ai_platform_network_create+0x42>
 8108ee2:	f241 0010 	movw	r0, #4112	; 0x1010
 8108ee6:	e782      	b.n	8108dee <ai_platform_network_create+0x42>
 8108ee8:	4a16      	ldr	r2, [pc, #88]	; (8108f44 <ai_platform_network_create+0x198>)
 8108eea:	2301      	movs	r3, #1
 8108eec:	6093      	str	r3, [r2, #8]
 8108eee:	6893      	ldr	r3, [r2, #8]
 8108ef0:	2b00      	cmp	r3, #0
 8108ef2:	d1fc      	bne.n	8108eee <ai_platform_network_create+0x142>
 8108ef4:	4b14      	ldr	r3, [pc, #80]	; (8108f48 <ai_platform_network_create+0x19c>)
 8108ef6:	6013      	str	r3, [r2, #0]
 8108ef8:	6812      	ldr	r2, [r2, #0]
 8108efa:	4b14      	ldr	r3, [pc, #80]	; (8108f4c <ai_platform_network_create+0x1a0>)
 8108efc:	429a      	cmp	r2, r3
 8108efe:	d000      	beq.n	8108f02 <ai_platform_network_create+0x156>
 8108f00:	e7fe      	b.n	8108f00 <ai_platform_network_create+0x154>
 8108f02:	f7ff fc6d 	bl	81087e0 <_ai_platform_release_crc>
 8108f06:	2200      	movs	r2, #0
 8108f08:	4641      	mov	r1, r8
 8108f0a:	4638      	mov	r0, r7
 8108f0c:	f001 fb80 	bl	810a610 <ai_version_get>
 8108f10:	2200      	movs	r2, #0
 8108f12:	4604      	mov	r4, r0
 8108f14:	2105      	movs	r1, #5
 8108f16:	2001      	movs	r0, #1
 8108f18:	f001 fb7a 	bl	810a610 <ai_version_get>
 8108f1c:	4284      	cmp	r4, r0
 8108f1e:	d001      	beq.n	8108f24 <ai_platform_network_create+0x178>
 8108f20:	2401      	movs	r4, #1
 8108f22:	e7ce      	b.n	8108ec2 <ai_platform_network_create+0x116>
 8108f24:	4b0b      	ldr	r3, [pc, #44]	; (8108f54 <ai_platform_network_create+0x1a8>)
 8108f26:	9301      	str	r3, [sp, #4]
 8108f28:	a801      	add	r0, sp, #4
 8108f2a:	f000 fc23 	bl	8109774 <ai_check_custom_types>
 8108f2e:	b110      	cbz	r0, 8108f36 <ai_platform_network_create+0x18a>
 8108f30:	2600      	movs	r6, #0
 8108f32:	4634      	mov	r4, r6
 8108f34:	e7c8      	b.n	8108ec8 <ai_platform_network_create+0x11c>
 8108f36:	2402      	movs	r4, #2
 8108f38:	e7c3      	b.n	8108ec2 <ai_platform_network_create+0x116>
 8108f3a:	bf00      	nop
 8108f3c:	e0042000 	.word	0xe0042000
 8108f40:	58024000 	.word	0x58024000
 8108f44:	40023000 	.word	0x40023000
 8108f48:	f407a5c2 	.word	0xf407a5c2
 8108f4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8108f50:	a1c00100 	.word	0xa1c00100
 8108f54:	84048403 	.word	0x84048403

08108f58 <ai_platform_network_init>:
 8108f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108f5c:	b1f8      	cbz	r0, 8108f9e <ai_platform_network_init+0x46>
 8108f5e:	4b6e      	ldr	r3, [pc, #440]	; (8109118 <ai_platform_network_init+0x1c0>)
 8108f60:	6802      	ldr	r2, [r0, #0]
 8108f62:	429a      	cmp	r2, r3
 8108f64:	4604      	mov	r4, r0
 8108f66:	d11a      	bne.n	8108f9e <ai_platform_network_init+0x46>
 8108f68:	460e      	mov	r6, r1
 8108f6a:	f7ff fc37 	bl	81087dc <_ai_platform_acquire_crc>
 8108f6e:	4b6b      	ldr	r3, [pc, #428]	; (810911c <ai_platform_network_init+0x1c4>)
 8108f70:	681b      	ldr	r3, [r3, #0]
 8108f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108f7a:	d03d      	beq.n	8108ff8 <ai_platform_network_init+0xa0>
 8108f7c:	4a68      	ldr	r2, [pc, #416]	; (8109120 <ai_platform_network_init+0x1c8>)
 8108f7e:	2301      	movs	r3, #1
 8108f80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108f84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d1fb      	bne.n	8108f84 <ai_platform_network_init+0x2c>
 8108f8c:	4b65      	ldr	r3, [pc, #404]	; (8109124 <ai_platform_network_init+0x1cc>)
 8108f8e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108f92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108f96:	4b64      	ldr	r3, [pc, #400]	; (8109128 <ai_platform_network_init+0x1d0>)
 8108f98:	429a      	cmp	r2, r3
 8108f9a:	d039      	beq.n	8109010 <ai_platform_network_init+0xb8>
 8108f9c:	e7fe      	b.n	8108f9c <ai_platform_network_init+0x44>
 8108f9e:	f7ff fc1d 	bl	81087dc <_ai_platform_acquire_crc>
 8108fa2:	4b5e      	ldr	r3, [pc, #376]	; (810911c <ai_platform_network_init+0x1c4>)
 8108fa4:	681b      	ldr	r3, [r3, #0]
 8108fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108fae:	d010      	beq.n	8108fd2 <ai_platform_network_init+0x7a>
 8108fb0:	4a5b      	ldr	r2, [pc, #364]	; (8109120 <ai_platform_network_init+0x1c8>)
 8108fb2:	2301      	movs	r3, #1
 8108fb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108fb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108fbc:	2b00      	cmp	r3, #0
 8108fbe:	d1fb      	bne.n	8108fb8 <ai_platform_network_init+0x60>
 8108fc0:	4b58      	ldr	r3, [pc, #352]	; (8109124 <ai_platform_network_init+0x1cc>)
 8108fc2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108fc6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108fca:	4b57      	ldr	r3, [pc, #348]	; (8109128 <ai_platform_network_init+0x1d0>)
 8108fcc:	429a      	cmp	r2, r3
 8108fce:	d00d      	beq.n	8108fec <ai_platform_network_init+0x94>
 8108fd0:	e7fe      	b.n	8108fd0 <ai_platform_network_init+0x78>
 8108fd2:	4a56      	ldr	r2, [pc, #344]	; (810912c <ai_platform_network_init+0x1d4>)
 8108fd4:	2301      	movs	r3, #1
 8108fd6:	6093      	str	r3, [r2, #8]
 8108fd8:	6893      	ldr	r3, [r2, #8]
 8108fda:	2b00      	cmp	r3, #0
 8108fdc:	d1fc      	bne.n	8108fd8 <ai_platform_network_init+0x80>
 8108fde:	4b51      	ldr	r3, [pc, #324]	; (8109124 <ai_platform_network_init+0x1cc>)
 8108fe0:	6013      	str	r3, [r2, #0]
 8108fe2:	6812      	ldr	r2, [r2, #0]
 8108fe4:	4b50      	ldr	r3, [pc, #320]	; (8109128 <ai_platform_network_init+0x1d0>)
 8108fe6:	429a      	cmp	r2, r3
 8108fe8:	d000      	beq.n	8108fec <ai_platform_network_init+0x94>
 8108fea:	e7fe      	b.n	8108fea <ai_platform_network_init+0x92>
 8108fec:	f7ff fbf8 	bl	81087e0 <_ai_platform_release_crc>
 8108ff0:	2600      	movs	r6, #0
 8108ff2:	4630      	mov	r0, r6
 8108ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108ff8:	4a4c      	ldr	r2, [pc, #304]	; (810912c <ai_platform_network_init+0x1d4>)
 8108ffa:	2301      	movs	r3, #1
 8108ffc:	6093      	str	r3, [r2, #8]
 8108ffe:	6893      	ldr	r3, [r2, #8]
 8109000:	2b00      	cmp	r3, #0
 8109002:	d1fc      	bne.n	8108ffe <ai_platform_network_init+0xa6>
 8109004:	4b47      	ldr	r3, [pc, #284]	; (8109124 <ai_platform_network_init+0x1cc>)
 8109006:	6013      	str	r3, [r2, #0]
 8109008:	6812      	ldr	r2, [r2, #0]
 810900a:	4b47      	ldr	r3, [pc, #284]	; (8109128 <ai_platform_network_init+0x1d0>)
 810900c:	429a      	cmp	r2, r3
 810900e:	d11c      	bne.n	810904a <ai_platform_network_init+0xf2>
 8109010:	f7ff fbe6 	bl	81087e0 <_ai_platform_release_crc>
 8109014:	2e00      	cmp	r6, #0
 8109016:	d06f      	beq.n	81090f8 <ai_platform_network_init+0x1a0>
 8109018:	4b45      	ldr	r3, [pc, #276]	; (8109130 <ai_platform_network_init+0x1d8>)
 810901a:	6832      	ldr	r2, [r6, #0]
 810901c:	429a      	cmp	r2, r3
 810901e:	d115      	bne.n	810904c <ai_platform_network_init+0xf4>
 8109020:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8109024:	6933      	ldr	r3, [r6, #16]
 8109026:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 810902a:	89f7      	ldrh	r7, [r6, #14]
 810902c:	62a3      	str	r3, [r4, #40]	; 0x28
 810902e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8109032:	2303      	movs	r3, #3
 8109034:	84e7      	strh	r7, [r4, #38]	; 0x26
 8109036:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 810903a:	60e3      	str	r3, [r4, #12]
 810903c:	4620      	mov	r0, r4
 810903e:	4626      	mov	r6, r4
 8109040:	f000 fbc2 	bl	81097c8 <ai_layers_init_all>
 8109044:	4630      	mov	r0, r6
 8109046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810904a:	e7fe      	b.n	810904a <ai_platform_network_init+0xf2>
 810904c:	2101      	movs	r1, #1
 810904e:	4630      	mov	r0, r6
 8109050:	4635      	mov	r5, r6
 8109052:	6876      	ldr	r6, [r6, #4]
 8109054:	f7ff fb74 	bl	8108740 <ai_buffer_get_size>
 8109058:	f105 081c 	add.w	r8, r5, #28
 810905c:	4681      	mov	r9, r0
 810905e:	2101      	movs	r1, #1
 8109060:	4640      	mov	r0, r8
 8109062:	6a2f      	ldr	r7, [r5, #32]
 8109064:	f7ff fb6c 	bl	8108740 <ai_buffer_get_size>
 8109068:	f1b9 0f00 	cmp.w	r9, #0
 810906c:	d025      	beq.n	81090ba <ai_platform_network_init+0x162>
 810906e:	2201      	movs	r2, #1
 8109070:	4696      	mov	lr, r2
 8109072:	bb30      	cbnz	r0, 81090c2 <ai_platform_network_init+0x16a>
 8109074:	4680      	mov	r8, r0
 8109076:	4607      	mov	r7, r0
 8109078:	b376      	cbz	r6, 81090d8 <ai_platform_network_init+0x180>
 810907a:	8be3      	ldrh	r3, [r4, #30]
 810907c:	4573      	cmp	r3, lr
 810907e:	d323      	bcc.n	81090c8 <ai_platform_network_init+0x170>
 8109080:	b142      	cbz	r2, 8109094 <ai_platform_network_init+0x13c>
 8109082:	46ac      	mov	ip, r5
 8109084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8109088:	6a25      	ldr	r5, [r4, #32]
 810908a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810908c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8109090:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8109094:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8109096:	f8a4 e01e 	strh.w	lr, [r4, #30]
 810909a:	2600      	movs	r6, #0
 810909c:	42bb      	cmp	r3, r7
 810909e:	83a6      	strh	r6, [r4, #28]
 81090a0:	d323      	bcc.n	81090ea <ai_platform_network_init+0x192>
 81090a2:	b37f      	cbz	r7, 8109104 <ai_platform_network_init+0x1ac>
 81090a4:	46c4      	mov	ip, r8
 81090a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 81090aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 81090ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81090ae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 81090b2:	46b6      	mov	lr, r6
 81090b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 81090b8:	e7bb      	b.n	8109032 <ai_platform_network_init+0xda>
 81090ba:	464a      	mov	r2, r9
 81090bc:	46ce      	mov	lr, r9
 81090be:	464d      	mov	r5, r9
 81090c0:	e7d7      	b.n	8109072 <ai_platform_network_init+0x11a>
 81090c2:	b30f      	cbz	r7, 8109108 <ai_platform_network_init+0x1b0>
 81090c4:	2701      	movs	r7, #1
 81090c6:	e7d7      	b.n	8109078 <ai_platform_network_init+0x120>
 81090c8:	2212      	movs	r2, #18
 81090ca:	2116      	movs	r1, #22
 81090cc:	f104 0010 	add.w	r0, r4, #16
 81090d0:	f000 fb44 	bl	810975c <core_set_error>
 81090d4:	2600      	movs	r6, #0
 81090d6:	e78c      	b.n	8108ff2 <ai_platform_network_init+0x9a>
 81090d8:	f1b9 0f00 	cmp.w	r9, #0
 81090dc:	d0cd      	beq.n	810907a <ai_platform_network_init+0x122>
 81090de:	2110      	movs	r1, #16
 81090e0:	2212      	movs	r2, #18
 81090e2:	1860      	adds	r0, r4, r1
 81090e4:	f000 fb3a 	bl	810975c <core_set_error>
 81090e8:	e783      	b.n	8108ff2 <ai_platform_network_init+0x9a>
 81090ea:	2213      	movs	r2, #19
 81090ec:	2116      	movs	r1, #22
 81090ee:	f104 0010 	add.w	r0, r4, #16
 81090f2:	f000 fb33 	bl	810975c <core_set_error>
 81090f6:	e77c      	b.n	8108ff2 <ai_platform_network_init+0x9a>
 81090f8:	2110      	movs	r1, #16
 81090fa:	2211      	movs	r2, #17
 81090fc:	1860      	adds	r0, r4, r1
 81090fe:	f000 fb2d 	bl	810975c <core_set_error>
 8109102:	e776      	b.n	8108ff2 <ai_platform_network_init+0x9a>
 8109104:	46be      	mov	lr, r7
 8109106:	e794      	b.n	8109032 <ai_platform_network_init+0xda>
 8109108:	2110      	movs	r1, #16
 810910a:	2213      	movs	r2, #19
 810910c:	1860      	adds	r0, r4, r1
 810910e:	f000 fb25 	bl	810975c <core_set_error>
 8109112:	463e      	mov	r6, r7
 8109114:	e76d      	b.n	8108ff2 <ai_platform_network_init+0x9a>
 8109116:	bf00      	nop
 8109118:	a1c00100 	.word	0xa1c00100
 810911c:	e0042000 	.word	0xe0042000
 8109120:	58024000 	.word	0x58024000
 8109124:	f407a5c2 	.word	0xf407a5c2
 8109128:	b5e8b5cd 	.word	0xb5e8b5cd
 810912c:	40023000 	.word	0x40023000
 8109130:	a1facade 	.word	0xa1facade

08109134 <ai_platform_network_post_init>:
 8109134:	b538      	push	{r3, r4, r5, lr}
 8109136:	b1f0      	cbz	r0, 8109176 <ai_platform_network_post_init+0x42>
 8109138:	4b3c      	ldr	r3, [pc, #240]	; (810922c <ai_platform_network_post_init+0xf8>)
 810913a:	6802      	ldr	r2, [r0, #0]
 810913c:	429a      	cmp	r2, r3
 810913e:	4604      	mov	r4, r0
 8109140:	d119      	bne.n	8109176 <ai_platform_network_post_init+0x42>
 8109142:	f7ff fb4b 	bl	81087dc <_ai_platform_acquire_crc>
 8109146:	4b3a      	ldr	r3, [pc, #232]	; (8109230 <ai_platform_network_post_init+0xfc>)
 8109148:	681b      	ldr	r3, [r3, #0]
 810914a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810914e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109152:	d03b      	beq.n	81091cc <ai_platform_network_post_init+0x98>
 8109154:	4a37      	ldr	r2, [pc, #220]	; (8109234 <ai_platform_network_post_init+0x100>)
 8109156:	2301      	movs	r3, #1
 8109158:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 810915c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8109160:	2b00      	cmp	r3, #0
 8109162:	d1fb      	bne.n	810915c <ai_platform_network_post_init+0x28>
 8109164:	4b34      	ldr	r3, [pc, #208]	; (8109238 <ai_platform_network_post_init+0x104>)
 8109166:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 810916a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 810916e:	4b33      	ldr	r3, [pc, #204]	; (810923c <ai_platform_network_post_init+0x108>)
 8109170:	429a      	cmp	r2, r3
 8109172:	d037      	beq.n	81091e4 <ai_platform_network_post_init+0xb0>
 8109174:	e7fe      	b.n	8109174 <ai_platform_network_post_init+0x40>
 8109176:	f7ff fb31 	bl	81087dc <_ai_platform_acquire_crc>
 810917a:	4b2d      	ldr	r3, [pc, #180]	; (8109230 <ai_platform_network_post_init+0xfc>)
 810917c:	681b      	ldr	r3, [r3, #0]
 810917e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109186:	d010      	beq.n	81091aa <ai_platform_network_post_init+0x76>
 8109188:	4a2a      	ldr	r2, [pc, #168]	; (8109234 <ai_platform_network_post_init+0x100>)
 810918a:	2301      	movs	r3, #1
 810918c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8109190:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8109194:	2b00      	cmp	r3, #0
 8109196:	d1fb      	bne.n	8109190 <ai_platform_network_post_init+0x5c>
 8109198:	4b27      	ldr	r3, [pc, #156]	; (8109238 <ai_platform_network_post_init+0x104>)
 810919a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 810919e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81091a2:	4b26      	ldr	r3, [pc, #152]	; (810923c <ai_platform_network_post_init+0x108>)
 81091a4:	429a      	cmp	r2, r3
 81091a6:	d00d      	beq.n	81091c4 <ai_platform_network_post_init+0x90>
 81091a8:	e7fe      	b.n	81091a8 <ai_platform_network_post_init+0x74>
 81091aa:	4a25      	ldr	r2, [pc, #148]	; (8109240 <ai_platform_network_post_init+0x10c>)
 81091ac:	2301      	movs	r3, #1
 81091ae:	6093      	str	r3, [r2, #8]
 81091b0:	6893      	ldr	r3, [r2, #8]
 81091b2:	2b00      	cmp	r3, #0
 81091b4:	d1fc      	bne.n	81091b0 <ai_platform_network_post_init+0x7c>
 81091b6:	4b20      	ldr	r3, [pc, #128]	; (8109238 <ai_platform_network_post_init+0x104>)
 81091b8:	6013      	str	r3, [r2, #0]
 81091ba:	6812      	ldr	r2, [r2, #0]
 81091bc:	4b1f      	ldr	r3, [pc, #124]	; (810923c <ai_platform_network_post_init+0x108>)
 81091be:	429a      	cmp	r2, r3
 81091c0:	d000      	beq.n	81091c4 <ai_platform_network_post_init+0x90>
 81091c2:	e7fe      	b.n	81091c2 <ai_platform_network_post_init+0x8e>
 81091c4:	f7ff fb0c 	bl	81087e0 <_ai_platform_release_crc>
 81091c8:	2000      	movs	r0, #0
 81091ca:	bd38      	pop	{r3, r4, r5, pc}
 81091cc:	4a1c      	ldr	r2, [pc, #112]	; (8109240 <ai_platform_network_post_init+0x10c>)
 81091ce:	2301      	movs	r3, #1
 81091d0:	6093      	str	r3, [r2, #8]
 81091d2:	6893      	ldr	r3, [r2, #8]
 81091d4:	2b00      	cmp	r3, #0
 81091d6:	d1fc      	bne.n	81091d2 <ai_platform_network_post_init+0x9e>
 81091d8:	4b17      	ldr	r3, [pc, #92]	; (8109238 <ai_platform_network_post_init+0x104>)
 81091da:	6013      	str	r3, [r2, #0]
 81091dc:	6812      	ldr	r2, [r2, #0]
 81091de:	4b17      	ldr	r3, [pc, #92]	; (810923c <ai_platform_network_post_init+0x108>)
 81091e0:	429a      	cmp	r2, r3
 81091e2:	d11a      	bne.n	810921a <ai_platform_network_post_init+0xe6>
 81091e4:	f7ff fafc 	bl	81087e0 <_ai_platform_release_crc>
 81091e8:	68e3      	ldr	r3, [r4, #12]
 81091ea:	f013 0502 	ands.w	r5, r3, #2
 81091ee:	d015      	beq.n	810921c <ai_platform_network_post_init+0xe8>
 81091f0:	4620      	mov	r0, r4
 81091f2:	f000 faf7 	bl	81097e4 <ai_layers_post_init_all>
 81091f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 81091f8:	b16b      	cbz	r3, 8109216 <ai_platform_network_post_init+0xe2>
 81091fa:	6b65      	ldr	r5, [r4, #52]	; 0x34
 81091fc:	e007      	b.n	810920e <ai_platform_network_post_init+0xda>
 81091fe:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8109202:	4798      	blx	r3
 8109204:	692b      	ldr	r3, [r5, #16]
 8109206:	42ab      	cmp	r3, r5
 8109208:	d005      	beq.n	8109216 <ai_platform_network_post_init+0xe2>
 810920a:	b123      	cbz	r3, 8109216 <ai_platform_network_post_init+0xe2>
 810920c:	461d      	mov	r5, r3
 810920e:	4629      	mov	r1, r5
 8109210:	2000      	movs	r0, #0
 8109212:	2d00      	cmp	r5, #0
 8109214:	d1f3      	bne.n	81091fe <ai_platform_network_post_init+0xca>
 8109216:	2001      	movs	r0, #1
 8109218:	bd38      	pop	{r3, r4, r5, pc}
 810921a:	e7fe      	b.n	810921a <ai_platform_network_post_init+0xe6>
 810921c:	2210      	movs	r2, #16
 810921e:	2111      	movs	r1, #17
 8109220:	18a0      	adds	r0, r4, r2
 8109222:	f000 fa9b 	bl	810975c <core_set_error>
 8109226:	4628      	mov	r0, r5
 8109228:	bd38      	pop	{r3, r4, r5, pc}
 810922a:	bf00      	nop
 810922c:	a1c00100 	.word	0xa1c00100
 8109230:	e0042000 	.word	0xe0042000
 8109234:	58024000 	.word	0x58024000
 8109238:	f407a5c2 	.word	0xf407a5c2
 810923c:	b5e8b5cd 	.word	0xb5e8b5cd
 8109240:	40023000 	.word	0x40023000

08109244 <ai_platform_network_process>:
 8109244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109248:	460e      	mov	r6, r1
 810924a:	b085      	sub	sp, #20
 810924c:	4693      	mov	fp, r2
 810924e:	4605      	mov	r5, r0
 8109250:	b120      	cbz	r0, 810925c <ai_platform_network_process+0x18>
 8109252:	4bb8      	ldr	r3, [pc, #736]	; (8109534 <ai_platform_network_process+0x2f0>)
 8109254:	6802      	ldr	r2, [r0, #0]
 8109256:	429a      	cmp	r2, r3
 8109258:	bf18      	it	ne
 810925a:	2500      	movne	r5, #0
 810925c:	f7ff fabe 	bl	81087dc <_ai_platform_acquire_crc>
 8109260:	4bb5      	ldr	r3, [pc, #724]	; (8109538 <ai_platform_network_process+0x2f4>)
 8109262:	681b      	ldr	r3, [r3, #0]
 8109264:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810926c:	d010      	beq.n	8109290 <ai_platform_network_process+0x4c>
 810926e:	4ab3      	ldr	r2, [pc, #716]	; (810953c <ai_platform_network_process+0x2f8>)
 8109270:	2301      	movs	r3, #1
 8109272:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8109276:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 810927a:	2b00      	cmp	r3, #0
 810927c:	d1fb      	bne.n	8109276 <ai_platform_network_process+0x32>
 810927e:	4bb0      	ldr	r3, [pc, #704]	; (8109540 <ai_platform_network_process+0x2fc>)
 8109280:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8109284:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8109288:	4bae      	ldr	r3, [pc, #696]	; (8109544 <ai_platform_network_process+0x300>)
 810928a:	429a      	cmp	r2, r3
 810928c:	d00d      	beq.n	81092aa <ai_platform_network_process+0x66>
 810928e:	e7fe      	b.n	810928e <ai_platform_network_process+0x4a>
 8109290:	4aad      	ldr	r2, [pc, #692]	; (8109548 <ai_platform_network_process+0x304>)
 8109292:	2301      	movs	r3, #1
 8109294:	6093      	str	r3, [r2, #8]
 8109296:	6893      	ldr	r3, [r2, #8]
 8109298:	2b00      	cmp	r3, #0
 810929a:	d1fc      	bne.n	8109296 <ai_platform_network_process+0x52>
 810929c:	4ba8      	ldr	r3, [pc, #672]	; (8109540 <ai_platform_network_process+0x2fc>)
 810929e:	6013      	str	r3, [r2, #0]
 81092a0:	6812      	ldr	r2, [r2, #0]
 81092a2:	4ba8      	ldr	r3, [pc, #672]	; (8109544 <ai_platform_network_process+0x300>)
 81092a4:	429a      	cmp	r2, r3
 81092a6:	f040 812c 	bne.w	8109502 <ai_platform_network_process+0x2be>
 81092aa:	f7ff fa99 	bl	81087e0 <_ai_platform_release_crc>
 81092ae:	2d00      	cmp	r5, #0
 81092b0:	f000 8154 	beq.w	810955c <ai_platform_network_process+0x318>
 81092b4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 81092b6:	2b00      	cmp	r3, #0
 81092b8:	f000 8124 	beq.w	8109504 <ai_platform_network_process+0x2c0>
 81092bc:	68eb      	ldr	r3, [r5, #12]
 81092be:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 81092c2:	f003 0303 	and.w	r3, r3, #3
 81092c6:	2700      	movs	r7, #0
 81092c8:	2b03      	cmp	r3, #3
 81092ca:	616f      	str	r7, [r5, #20]
 81092cc:	f040 813e 	bne.w	810954c <ai_platform_network_process+0x308>
 81092d0:	2e00      	cmp	r6, #0
 81092d2:	f000 811d 	beq.w	8109510 <ai_platform_network_process+0x2cc>
 81092d6:	f1ba 0f00 	cmp.w	sl, #0
 81092da:	f000 8119 	beq.w	8109510 <ai_platform_network_process+0x2cc>
 81092de:	f8ba 3000 	ldrh.w	r3, [sl]
 81092e2:	2b00      	cmp	r3, #0
 81092e4:	f000 8114 	beq.w	8109510 <ai_platform_network_process+0x2cc>
 81092e8:	69b3      	ldr	r3, [r6, #24]
 81092ea:	f8cd b00c 	str.w	fp, [sp, #12]
 81092ee:	681b      	ldr	r3, [r3, #0]
 81092f0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 81092f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	d072      	beq.n	81093e2 <ai_platform_network_process+0x19e>
 81092fc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8109300:	2c00      	cmp	r4, #0
 8109302:	d06e      	beq.n	81093e2 <ai_platform_network_process+0x19e>
 8109304:	f8da 3008 	ldr.w	r3, [sl, #8]
 8109308:	f8d3 9000 	ldr.w	r9, [r3]
 810930c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8109310:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8109314:	f000 81de 	beq.w	81096d4 <ai_platform_network_process+0x490>
 8109318:	69a3      	ldr	r3, [r4, #24]
 810931a:	2101      	movs	r1, #1
 810931c:	4630      	mov	r0, r6
 810931e:	685d      	ldr	r5, [r3, #4]
 8109320:	f7ff fa0e 	bl	8108740 <ai_buffer_get_size>
 8109324:	4285      	cmp	r5, r0
 8109326:	f0c0 811b 	bcc.w	8109560 <ai_platform_network_process+0x31c>
 810932a:	68e0      	ldr	r0, [r4, #12]
 810932c:	69b1      	ldr	r1, [r6, #24]
 810932e:	68c2      	ldr	r2, [r0, #12]
 8109330:	68cb      	ldr	r3, [r1, #12]
 8109332:	429a      	cmp	r2, r3
 8109334:	f040 8114 	bne.w	8109560 <ai_platform_network_process+0x31c>
 8109338:	6882      	ldr	r2, [r0, #8]
 810933a:	688b      	ldr	r3, [r1, #8]
 810933c:	429a      	cmp	r2, r3
 810933e:	f040 810f 	bne.w	8109560 <ai_platform_network_process+0x31c>
 8109342:	6842      	ldr	r2, [r0, #4]
 8109344:	684b      	ldr	r3, [r1, #4]
 8109346:	429a      	cmp	r2, r3
 8109348:	f040 810a 	bne.w	8109560 <ai_platform_network_process+0x31c>
 810934c:	69a3      	ldr	r3, [r4, #24]
 810934e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8109352:	f001 f94b 	bl	810a5ec <ai_array_get_data_byte_size>
 8109356:	4605      	mov	r5, r0
 8109358:	4620      	mov	r0, r4
 810935a:	f001 f95f 	bl	810a61c <get_tensor_byte_size>
 810935e:	4285      	cmp	r5, r0
 8109360:	f0c0 80fe 	bcc.w	8109560 <ai_platform_network_process+0x31c>
 8109364:	69a3      	ldr	r3, [r4, #24]
 8109366:	6818      	ldr	r0, [r3, #0]
 8109368:	f001 f8ac 	bl	810a4c4 <ai_array_to_buffer_fmt>
 810936c:	6833      	ldr	r3, [r6, #0]
 810936e:	4058      	eors	r0, r3
 8109370:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8109374:	f040 81b9 	bne.w	81096ea <ai_platform_network_process+0x4a6>
 8109378:	6873      	ldr	r3, [r6, #4]
 810937a:	2b00      	cmp	r3, #0
 810937c:	f000 81ac 	beq.w	81096d8 <ai_platform_network_process+0x494>
 8109380:	69b3      	ldr	r3, [r6, #24]
 8109382:	681b      	ldr	r3, [r3, #0]
 8109384:	2b00      	cmp	r3, #0
 8109386:	f000 819c 	beq.w	81096c2 <ai_platform_network_process+0x47e>
 810938a:	9a01      	ldr	r2, [sp, #4]
 810938c:	429a      	cmp	r2, r3
 810938e:	bf38      	it	cc
 8109390:	461a      	movcc	r2, r3
 8109392:	4620      	mov	r0, r4
 8109394:	9201      	str	r2, [sp, #4]
 8109396:	f001 f941 	bl	810a61c <get_tensor_byte_size>
 810939a:	f8c8 0008 	str.w	r0, [r8, #8]
 810939e:	69b3      	ldr	r3, [r6, #24]
 81093a0:	681b      	ldr	r3, [r3, #0]
 81093a2:	fb00 f303 	mul.w	r3, r0, r3
 81093a6:	f8c8 300c 	str.w	r3, [r8, #12]
 81093aa:	6871      	ldr	r1, [r6, #4]
 81093ac:	f8c8 1004 	str.w	r1, [r8, #4]
 81093b0:	440b      	add	r3, r1
 81093b2:	f849 300b 	str.w	r3, [r9, fp]
 81093b6:	69a0      	ldr	r0, [r4, #24]
 81093b8:	6803      	ldr	r3, [r0, #0]
 81093ba:	009a      	lsls	r2, r3, #2
 81093bc:	f107 0701 	add.w	r7, r7, #1
 81093c0:	f106 061c 	add.w	r6, r6, #28
 81093c4:	f100 80af 	bmi.w	8109526 <ai_platform_network_process+0x2e2>
 81093c8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 81093cc:	1a9b      	subs	r3, r3, r2
 81093ce:	4419      	add	r1, r3
 81093d0:	6081      	str	r1, [r0, #8]
 81093d2:	69a3      	ldr	r3, [r4, #24]
 81093d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 81093d8:	60da      	str	r2, [r3, #12]
 81093da:	f8ba 3000 	ldrh.w	r3, [sl]
 81093de:	42bb      	cmp	r3, r7
 81093e0:	d888      	bhi.n	81092f4 <ai_platform_network_process+0xb0>
 81093e2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 81093e6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 81093e8:	f1bb 0f00 	cmp.w	fp, #0
 81093ec:	f000 8186 	beq.w	81096fc <ai_platform_network_process+0x4b8>
 81093f0:	2a01      	cmp	r2, #1
 81093f2:	f240 815e 	bls.w	81096b2 <ai_platform_network_process+0x46e>
 81093f6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 81093fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 81093fe:	2b00      	cmp	r3, #0
 8109400:	f000 8157 	beq.w	81096b2 <ai_platform_network_process+0x46e>
 8109404:	465e      	mov	r6, fp
 8109406:	2700      	movs	r7, #0
 8109408:	462c      	mov	r4, r5
 810940a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810940e:	2b00      	cmp	r3, #0
 8109410:	f000 80b4 	beq.w	810957c <ai_platform_network_process+0x338>
 8109414:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8109418:	2d00      	cmp	r5, #0
 810941a:	f000 80af 	beq.w	810957c <ai_platform_network_process+0x338>
 810941e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8109422:	f8d3 8000 	ldr.w	r8, [r3]
 8109426:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 810942a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 810942e:	f000 8171 	beq.w	8109714 <ai_platform_network_process+0x4d0>
 8109432:	69ab      	ldr	r3, [r5, #24]
 8109434:	2101      	movs	r1, #1
 8109436:	685b      	ldr	r3, [r3, #4]
 8109438:	9302      	str	r3, [sp, #8]
 810943a:	4630      	mov	r0, r6
 810943c:	f7ff f980 	bl	8108740 <ai_buffer_get_size>
 8109440:	9b02      	ldr	r3, [sp, #8]
 8109442:	4283      	cmp	r3, r0
 8109444:	f0c0 8134 	bcc.w	81096b0 <ai_platform_network_process+0x46c>
 8109448:	68e8      	ldr	r0, [r5, #12]
 810944a:	69b1      	ldr	r1, [r6, #24]
 810944c:	68c2      	ldr	r2, [r0, #12]
 810944e:	68cb      	ldr	r3, [r1, #12]
 8109450:	429a      	cmp	r2, r3
 8109452:	f040 812d 	bne.w	81096b0 <ai_platform_network_process+0x46c>
 8109456:	6882      	ldr	r2, [r0, #8]
 8109458:	688b      	ldr	r3, [r1, #8]
 810945a:	429a      	cmp	r2, r3
 810945c:	f040 8128 	bne.w	81096b0 <ai_platform_network_process+0x46c>
 8109460:	6842      	ldr	r2, [r0, #4]
 8109462:	684b      	ldr	r3, [r1, #4]
 8109464:	429a      	cmp	r2, r3
 8109466:	f040 8123 	bne.w	81096b0 <ai_platform_network_process+0x46c>
 810946a:	69ab      	ldr	r3, [r5, #24]
 810946c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8109470:	f001 f8bc 	bl	810a5ec <ai_array_get_data_byte_size>
 8109474:	9002      	str	r0, [sp, #8]
 8109476:	4628      	mov	r0, r5
 8109478:	f001 f8d0 	bl	810a61c <get_tensor_byte_size>
 810947c:	9b02      	ldr	r3, [sp, #8]
 810947e:	4283      	cmp	r3, r0
 8109480:	f0c0 8116 	bcc.w	81096b0 <ai_platform_network_process+0x46c>
 8109484:	69ab      	ldr	r3, [r5, #24]
 8109486:	6818      	ldr	r0, [r3, #0]
 8109488:	f001 f81c 	bl	810a4c4 <ai_array_to_buffer_fmt>
 810948c:	6833      	ldr	r3, [r6, #0]
 810948e:	4058      	eors	r0, r3
 8109490:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8109494:	f040 8136 	bne.w	8109704 <ai_platform_network_process+0x4c0>
 8109498:	6873      	ldr	r3, [r6, #4]
 810949a:	2b00      	cmp	r3, #0
 810949c:	f000 814d 	beq.w	810973a <ai_platform_network_process+0x4f6>
 81094a0:	69b3      	ldr	r3, [r6, #24]
 81094a2:	681b      	ldr	r3, [r3, #0]
 81094a4:	2b00      	cmp	r3, #0
 81094a6:	f000 813f 	beq.w	8109728 <ai_platform_network_process+0x4e4>
 81094aa:	9a01      	ldr	r2, [sp, #4]
 81094ac:	429a      	cmp	r2, r3
 81094ae:	bf38      	it	cc
 81094b0:	461a      	movcc	r2, r3
 81094b2:	4628      	mov	r0, r5
 81094b4:	9201      	str	r2, [sp, #4]
 81094b6:	f001 f8b1 	bl	810a61c <get_tensor_byte_size>
 81094ba:	f8ca 0008 	str.w	r0, [sl, #8]
 81094be:	69b3      	ldr	r3, [r6, #24]
 81094c0:	681b      	ldr	r3, [r3, #0]
 81094c2:	fb00 f303 	mul.w	r3, r0, r3
 81094c6:	f8ca 300c 	str.w	r3, [sl, #12]
 81094ca:	6871      	ldr	r1, [r6, #4]
 81094cc:	f8ca 1004 	str.w	r1, [sl, #4]
 81094d0:	440b      	add	r3, r1
 81094d2:	f848 300b 	str.w	r3, [r8, fp]
 81094d6:	69a8      	ldr	r0, [r5, #24]
 81094d8:	6803      	ldr	r3, [r0, #0]
 81094da:	009b      	lsls	r3, r3, #2
 81094dc:	f107 0701 	add.w	r7, r7, #1
 81094e0:	f106 061c 	add.w	r6, r6, #28
 81094e4:	d445      	bmi.n	8109572 <ai_platform_network_process+0x32e>
 81094e6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 81094ea:	1a9b      	subs	r3, r3, r2
 81094ec:	4419      	add	r1, r3
 81094ee:	6081      	str	r1, [r0, #8]
 81094f0:	69ab      	ldr	r3, [r5, #24]
 81094f2:	f8da 2004 	ldr.w	r2, [sl, #4]
 81094f6:	60da      	str	r2, [r3, #12]
 81094f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 81094fc:	429f      	cmp	r7, r3
 81094fe:	d384      	bcc.n	810940a <ai_platform_network_process+0x1c6>
 8109500:	e03c      	b.n	810957c <ai_platform_network_process+0x338>
 8109502:	e7fe      	b.n	8109502 <ai_platform_network_process+0x2be>
 8109504:	68ea      	ldr	r2, [r5, #12]
 8109506:	616b      	str	r3, [r5, #20]
 8109508:	f002 0203 	and.w	r2, r2, #3
 810950c:	2a03      	cmp	r2, #3
 810950e:	d11d      	bne.n	810954c <ai_platform_network_process+0x308>
 8109510:	2217      	movs	r2, #23
 8109512:	2112      	movs	r1, #18
 8109514:	f105 0010 	add.w	r0, r5, #16
 8109518:	f000 f920 	bl	810975c <core_set_error>
 810951c:	2400      	movs	r4, #0
 810951e:	4620      	mov	r0, r4
 8109520:	b005      	add	sp, #20
 8109522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109526:	f8ba 3000 	ldrh.w	r3, [sl]
 810952a:	429f      	cmp	r7, r3
 810952c:	f4ff aee2 	bcc.w	81092f4 <ai_platform_network_process+0xb0>
 8109530:	e757      	b.n	81093e2 <ai_platform_network_process+0x19e>
 8109532:	bf00      	nop
 8109534:	a1c00100 	.word	0xa1c00100
 8109538:	e0042000 	.word	0xe0042000
 810953c:	58024000 	.word	0x58024000
 8109540:	f407a5c2 	.word	0xf407a5c2
 8109544:	b5e8b5cd 	.word	0xb5e8b5cd
 8109548:	40023000 	.word	0x40023000
 810954c:	2230      	movs	r2, #48	; 0x30
 810954e:	2111      	movs	r1, #17
 8109550:	f105 0010 	add.w	r0, r5, #16
 8109554:	f000 f902 	bl	810975c <core_set_error>
 8109558:	2400      	movs	r4, #0
 810955a:	e7e0      	b.n	810951e <ai_platform_network_process+0x2da>
 810955c:	462c      	mov	r4, r5
 810955e:	e7de      	b.n	810951e <ai_platform_network_process+0x2da>
 8109560:	9d02      	ldr	r5, [sp, #8]
 8109562:	2218      	movs	r2, #24
 8109564:	2112      	movs	r1, #18
 8109566:	f105 0010 	add.w	r0, r5, #16
 810956a:	f000 f8f7 	bl	810975c <core_set_error>
 810956e:	2400      	movs	r4, #0
 8109570:	e7d5      	b.n	810951e <ai_platform_network_process+0x2da>
 8109572:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8109576:	429f      	cmp	r7, r3
 8109578:	f4ff af47 	bcc.w	810940a <ai_platform_network_process+0x1c6>
 810957c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8109580:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8109582:	82a3      	strh	r3, [r4, #20]
 8109584:	4625      	mov	r5, r4
 8109586:	2a00      	cmp	r2, #0
 8109588:	f040 808c 	bne.w	81096a4 <ai_platform_network_process+0x460>
 810958c:	4616      	mov	r6, r2
 810958e:	4617      	mov	r7, r2
 8109590:	8aec      	ldrh	r4, [r5, #22]
 8109592:	429c      	cmp	r4, r3
 8109594:	bf38      	it	cc
 8109596:	46ab      	movcc	fp, r5
 8109598:	d2c1      	bcs.n	810951e <ai_platform_network_process+0x2da>
 810959a:	2e00      	cmp	r6, #0
 810959c:	d030      	beq.n	8109600 <ai_platform_network_process+0x3bc>
 810959e:	f04f 0800 	mov.w	r8, #0
 81095a2:	e014      	b.n	81095ce <ai_platform_network_process+0x38a>
 81095a4:	6882      	ldr	r2, [r0, #8]
 81095a6:	68c5      	ldr	r5, [r0, #12]
 81095a8:	6863      	ldr	r3, [r4, #4]
 81095aa:	1b52      	subs	r2, r2, r5
 81095ac:	4413      	add	r3, r2
 81095ae:	6083      	str	r3, [r0, #8]
 81095b0:	698b      	ldr	r3, [r1, #24]
 81095b2:	6862      	ldr	r2, [r4, #4]
 81095b4:	60da      	str	r2, [r3, #12]
 81095b6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 81095ba:	f859 200a 	ldr.w	r2, [r9, sl]
 81095be:	440b      	add	r3, r1
 81095c0:	4293      	cmp	r3, r2
 81095c2:	bf24      	itt	cs
 81095c4:	68e3      	ldrcs	r3, [r4, #12]
 81095c6:	1ad3      	subcs	r3, r2, r3
 81095c8:	6063      	str	r3, [r4, #4]
 81095ca:	f108 0801 	add.w	r8, r8, #1
 81095ce:	8833      	ldrh	r3, [r6, #0]
 81095d0:	4543      	cmp	r3, r8
 81095d2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 81095d6:	d913      	bls.n	8109600 <ai_platform_network_process+0x3bc>
 81095d8:	6873      	ldr	r3, [r6, #4]
 81095da:	b18b      	cbz	r3, 8109600 <ai_platform_network_process+0x3bc>
 81095dc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 81095e0:	b171      	cbz	r1, 8109600 <ai_platform_network_process+0x3bc>
 81095e2:	6988      	ldr	r0, [r1, #24]
 81095e4:	68b2      	ldr	r2, [r6, #8]
 81095e6:	6803      	ldr	r3, [r0, #0]
 81095e8:	f8d2 9000 	ldr.w	r9, [r2]
 81095ec:	009d      	lsls	r5, r3, #2
 81095ee:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 81095f2:	d5d7      	bpl.n	81095a4 <ai_platform_network_process+0x360>
 81095f4:	6881      	ldr	r1, [r0, #8]
 81095f6:	68a2      	ldr	r2, [r4, #8]
 81095f8:	6860      	ldr	r0, [r4, #4]
 81095fa:	f000 fedd 	bl	810a3b8 <st_int8_copy>
 81095fe:	e7da      	b.n	81095b6 <ai_platform_network_process+0x372>
 8109600:	4658      	mov	r0, fp
 8109602:	f000 f903 	bl	810980c <ai_layers_forward_all>
 8109606:	2f00      	cmp	r7, #0
 8109608:	d03d      	beq.n	8109686 <ai_platform_network_process+0x442>
 810960a:	2400      	movs	r4, #0
 810960c:	e016      	b.n	810963c <ai_platform_network_process+0x3f8>
 810960e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8109612:	f859 100a 	ldr.w	r1, [r9, sl]
 8109616:	4413      	add	r3, r2
 8109618:	428b      	cmp	r3, r1
 810961a:	bf24      	itt	cs
 810961c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8109620:	1acb      	subcs	r3, r1, r3
 8109622:	f8c8 3004 	str.w	r3, [r8, #4]
 8109626:	6981      	ldr	r1, [r0, #24]
 8109628:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 810962c:	1b52      	subs	r2, r2, r5
 810962e:	4413      	add	r3, r2
 8109630:	608b      	str	r3, [r1, #8]
 8109632:	6983      	ldr	r3, [r0, #24]
 8109634:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8109638:	60da      	str	r2, [r3, #12]
 810963a:	3401      	adds	r4, #1
 810963c:	883b      	ldrh	r3, [r7, #0]
 810963e:	42a3      	cmp	r3, r4
 8109640:	d921      	bls.n	8109686 <ai_platform_network_process+0x442>
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	b1fb      	cbz	r3, 8109686 <ai_platform_network_process+0x442>
 8109646:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 810964a:	b1e0      	cbz	r0, 8109686 <ai_platform_network_process+0x442>
 810964c:	68ba      	ldr	r2, [r7, #8]
 810964e:	6983      	ldr	r3, [r0, #24]
 8109650:	f8d2 9000 	ldr.w	r9, [r2]
 8109654:	681a      	ldr	r2, [r3, #0]
 8109656:	0092      	lsls	r2, r2, #2
 8109658:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 810965c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8109660:	d5d5      	bpl.n	810960e <ai_platform_network_process+0x3ca>
 8109662:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8109666:	6898      	ldr	r0, [r3, #8]
 8109668:	f000 fea6 	bl	810a3b8 <st_int8_copy>
 810966c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8109670:	f859 200a 	ldr.w	r2, [r9, sl]
 8109674:	440b      	add	r3, r1
 8109676:	4293      	cmp	r3, r2
 8109678:	bf24      	itt	cs
 810967a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 810967e:	1ad3      	subcs	r3, r2, r3
 8109680:	f8c8 3004 	str.w	r3, [r8, #4]
 8109684:	e7d9      	b.n	810963a <ai_platform_network_process+0x3f6>
 8109686:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 810968a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 810968e:	3401      	adds	r4, #1
 8109690:	b2a4      	uxth	r4, r4
 8109692:	42a3      	cmp	r3, r4
 8109694:	f8ab 4016 	strh.w	r4, [fp, #22]
 8109698:	f63f af7f 	bhi.w	810959a <ai_platform_network_process+0x356>
 810969c:	4620      	mov	r0, r4
 810969e:	b005      	add	sp, #20
 81096a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81096a4:	2a01      	cmp	r2, #1
 81096a6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 81096a8:	d03c      	beq.n	8109724 <ai_platform_network_process+0x4e0>
 81096aa:	f106 070c 	add.w	r7, r6, #12
 81096ae:	e76f      	b.n	8109590 <ai_platform_network_process+0x34c>
 81096b0:	4625      	mov	r5, r4
 81096b2:	2218      	movs	r2, #24
 81096b4:	2113      	movs	r1, #19
 81096b6:	f105 0010 	add.w	r0, r5, #16
 81096ba:	f000 f84f 	bl	810975c <core_set_error>
 81096be:	2400      	movs	r4, #0
 81096c0:	e72d      	b.n	810951e <ai_platform_network_process+0x2da>
 81096c2:	9d02      	ldr	r5, [sp, #8]
 81096c4:	4604      	mov	r4, r0
 81096c6:	2221      	movs	r2, #33	; 0x21
 81096c8:	2112      	movs	r1, #18
 81096ca:	f105 0010 	add.w	r0, r5, #16
 81096ce:	f000 f845 	bl	810975c <core_set_error>
 81096d2:	e724      	b.n	810951e <ai_platform_network_process+0x2da>
 81096d4:	9d02      	ldr	r5, [sp, #8]
 81096d6:	e71b      	b.n	8109510 <ai_platform_network_process+0x2cc>
 81096d8:	9d02      	ldr	r5, [sp, #8]
 81096da:	4604      	mov	r4, r0
 81096dc:	2217      	movs	r2, #23
 81096de:	2112      	movs	r1, #18
 81096e0:	f105 0010 	add.w	r0, r5, #16
 81096e4:	f000 f83a 	bl	810975c <core_set_error>
 81096e8:	e719      	b.n	810951e <ai_platform_network_process+0x2da>
 81096ea:	9d02      	ldr	r5, [sp, #8]
 81096ec:	2219      	movs	r2, #25
 81096ee:	2112      	movs	r1, #18
 81096f0:	f105 0010 	add.w	r0, r5, #16
 81096f4:	f000 f832 	bl	810975c <core_set_error>
 81096f8:	2400      	movs	r4, #0
 81096fa:	e710      	b.n	810951e <ai_platform_network_process+0x2da>
 81096fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8109700:	82ab      	strh	r3, [r5, #20]
 8109702:	e740      	b.n	8109586 <ai_platform_network_process+0x342>
 8109704:	f104 0010 	add.w	r0, r4, #16
 8109708:	2219      	movs	r2, #25
 810970a:	2113      	movs	r1, #19
 810970c:	f000 f826 	bl	810975c <core_set_error>
 8109710:	2400      	movs	r4, #0
 8109712:	e704      	b.n	810951e <ai_platform_network_process+0x2da>
 8109714:	f104 0010 	add.w	r0, r4, #16
 8109718:	2217      	movs	r2, #23
 810971a:	2113      	movs	r1, #19
 810971c:	f000 f81e 	bl	810975c <core_set_error>
 8109720:	4654      	mov	r4, sl
 8109722:	e6fc      	b.n	810951e <ai_platform_network_process+0x2da>
 8109724:	2700      	movs	r7, #0
 8109726:	e733      	b.n	8109590 <ai_platform_network_process+0x34c>
 8109728:	4625      	mov	r5, r4
 810972a:	2221      	movs	r2, #33	; 0x21
 810972c:	4604      	mov	r4, r0
 810972e:	2113      	movs	r1, #19
 8109730:	f105 0010 	add.w	r0, r5, #16
 8109734:	f000 f812 	bl	810975c <core_set_error>
 8109738:	e6f1      	b.n	810951e <ai_platform_network_process+0x2da>
 810973a:	4625      	mov	r5, r4
 810973c:	2217      	movs	r2, #23
 810973e:	4604      	mov	r4, r0
 8109740:	2113      	movs	r1, #19
 8109742:	f105 0010 	add.w	r0, r5, #16
 8109746:	f000 f809 	bl	810975c <core_set_error>
 810974a:	e6e8      	b.n	810951e <ai_platform_network_process+0x2da>

0810974c <core_init>:
 810974c:	2001      	movs	r0, #1
 810974e:	4770      	bx	lr

08109750 <core_get_error>:
 8109750:	4603      	mov	r3, r0
 8109752:	2200      	movs	r2, #0
 8109754:	6800      	ldr	r0, [r0, #0]
 8109756:	601a      	str	r2, [r3, #0]
 8109758:	4770      	bx	lr
 810975a:	bf00      	nop

0810975c <core_set_error>:
 810975c:	4603      	mov	r3, r0
 810975e:	7800      	ldrb	r0, [r0, #0]
 8109760:	b108      	cbz	r0, 8109766 <core_set_error+0xa>
 8109762:	2000      	movs	r0, #0
 8109764:	4770      	bx	lr
 8109766:	7019      	strb	r1, [r3, #0]
 8109768:	6819      	ldr	r1, [r3, #0]
 810976a:	f362 211f 	bfi	r1, r2, #8, #24
 810976e:	2001      	movs	r0, #1
 8109770:	6019      	str	r1, [r3, #0]
 8109772:	4770      	bx	lr

08109774 <ai_check_custom_types>:
 8109774:	b082      	sub	sp, #8
 8109776:	4b13      	ldr	r3, [pc, #76]	; (81097c4 <ai_check_custom_types+0x50>)
 8109778:	9301      	str	r3, [sp, #4]
 810977a:	b118      	cbz	r0, 8109784 <ai_check_custom_types+0x10>
 810977c:	7803      	ldrb	r3, [r0, #0]
 810977e:	2b03      	cmp	r3, #3
 8109780:	d002      	beq.n	8109788 <ai_check_custom_types+0x14>
 8109782:	2000      	movs	r0, #0
 8109784:	b002      	add	sp, #8
 8109786:	4770      	bx	lr
 8109788:	f89d 2004 	ldrb.w	r2, [sp, #4]
 810978c:	4293      	cmp	r3, r2
 810978e:	d004      	beq.n	810979a <ai_check_custom_types+0x26>
 8109790:	2001      	movs	r0, #1
 8109792:	f080 0001 	eor.w	r0, r0, #1
 8109796:	b002      	add	sp, #8
 8109798:	4770      	bx	lr
 810979a:	7842      	ldrb	r2, [r0, #1]
 810979c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 81097a0:	429a      	cmp	r2, r3
 81097a2:	f100 0001 	add.w	r0, r0, #1
 81097a6:	d1f3      	bne.n	8109790 <ai_check_custom_types+0x1c>
 81097a8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 81097ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 81097b0:	429a      	cmp	r2, r3
 81097b2:	d1ed      	bne.n	8109790 <ai_check_custom_types+0x1c>
 81097b4:	7842      	ldrb	r2, [r0, #1]
 81097b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 81097ba:	429a      	cmp	r2, r3
 81097bc:	d1e8      	bne.n	8109790 <ai_check_custom_types+0x1c>
 81097be:	2000      	movs	r0, #0
 81097c0:	e7e7      	b.n	8109792 <ai_check_custom_types+0x1e>
 81097c2:	bf00      	nop
 81097c4:	84048403 	.word	0x84048403

081097c8 <ai_layers_init_all>:
 81097c8:	4601      	mov	r1, r0
 81097ca:	2000      	movs	r0, #0
 81097cc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 81097ce:	b143      	cbz	r3, 81097e2 <ai_layers_init_all+0x1a>
 81097d0:	691a      	ldr	r2, [r3, #16]
 81097d2:	60d9      	str	r1, [r3, #12]
 81097d4:	429a      	cmp	r2, r3
 81097d6:	f100 0001 	add.w	r0, r0, #1
 81097da:	d002      	beq.n	81097e2 <ai_layers_init_all+0x1a>
 81097dc:	b10a      	cbz	r2, 81097e2 <ai_layers_init_all+0x1a>
 81097de:	4613      	mov	r3, r2
 81097e0:	e7f5      	b.n	81097ce <ai_layers_init_all+0x6>
 81097e2:	4770      	bx	lr

081097e4 <ai_layers_post_init_all>:
 81097e4:	b538      	push	{r3, r4, r5, lr}
 81097e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 81097e8:	2500      	movs	r5, #0
 81097ea:	b16c      	cbz	r4, 8109808 <ai_layers_post_init_all+0x24>
 81097ec:	6863      	ldr	r3, [r4, #4]
 81097ee:	07db      	lsls	r3, r3, #31
 81097f0:	d504      	bpl.n	81097fc <ai_layers_post_init_all+0x18>
 81097f2:	6a23      	ldr	r3, [r4, #32]
 81097f4:	4620      	mov	r0, r4
 81097f6:	b10b      	cbz	r3, 81097fc <ai_layers_post_init_all+0x18>
 81097f8:	4798      	blx	r3
 81097fa:	3501      	adds	r5, #1
 81097fc:	6923      	ldr	r3, [r4, #16]
 81097fe:	42a3      	cmp	r3, r4
 8109800:	d002      	beq.n	8109808 <ai_layers_post_init_all+0x24>
 8109802:	b10b      	cbz	r3, 8109808 <ai_layers_post_init_all+0x24>
 8109804:	461c      	mov	r4, r3
 8109806:	e7f0      	b.n	81097ea <ai_layers_post_init_all+0x6>
 8109808:	4628      	mov	r0, r5
 810980a:	bd38      	pop	{r3, r4, r5, pc}

0810980c <ai_layers_forward_all>:
 810980c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109810:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8109814:	4604      	mov	r4, r0
 8109816:	f1b8 0f00 	cmp.w	r8, #0
 810981a:	d02b      	beq.n	8109874 <ai_layers_forward_all+0x68>
 810981c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 810981e:	6381      	str	r1, [r0, #56]	; 0x38
 8109820:	b321      	cbz	r1, 810986c <ai_layers_forward_all+0x60>
 8109822:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8109824:	2001      	movs	r0, #1
 8109826:	47c0      	blx	r8
 8109828:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 810982a:	b1fe      	cbz	r6, 810986c <ai_layers_forward_all+0x60>
 810982c:	2700      	movs	r7, #0
 810982e:	4631      	mov	r1, r6
 8109830:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8109832:	2002      	movs	r0, #2
 8109834:	47c0      	blx	r8
 8109836:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8109838:	4628      	mov	r0, r5
 810983a:	696b      	ldr	r3, [r5, #20]
 810983c:	4798      	blx	r3
 810983e:	692e      	ldr	r6, [r5, #16]
 8109840:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8109842:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8109844:	42b5      	cmp	r5, r6
 8109846:	f04f 0003 	mov.w	r0, #3
 810984a:	d007      	beq.n	810985c <ai_layers_forward_all+0x50>
 810984c:	47c0      	blx	r8
 810984e:	3701      	adds	r7, #1
 8109850:	63a6      	str	r6, [r4, #56]	; 0x38
 8109852:	2e00      	cmp	r6, #0
 8109854:	d1eb      	bne.n	810982e <ai_layers_forward_all+0x22>
 8109856:	4638      	mov	r0, r7
 8109858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810985c:	2003      	movs	r0, #3
 810985e:	47c0      	blx	r8
 8109860:	2300      	movs	r3, #0
 8109862:	3701      	adds	r7, #1
 8109864:	63a3      	str	r3, [r4, #56]	; 0x38
 8109866:	4638      	mov	r0, r7
 8109868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810986c:	2700      	movs	r7, #0
 810986e:	4638      	mov	r0, r7
 8109870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109874:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8109876:	6385      	str	r5, [r0, #56]	; 0x38
 8109878:	2d00      	cmp	r5, #0
 810987a:	d0f7      	beq.n	810986c <ai_layers_forward_all+0x60>
 810987c:	4647      	mov	r7, r8
 810987e:	696b      	ldr	r3, [r5, #20]
 8109880:	4628      	mov	r0, r5
 8109882:	4798      	blx	r3
 8109884:	462b      	mov	r3, r5
 8109886:	692d      	ldr	r5, [r5, #16]
 8109888:	429d      	cmp	r5, r3
 810988a:	d004      	beq.n	8109896 <ai_layers_forward_all+0x8a>
 810988c:	63a5      	str	r5, [r4, #56]	; 0x38
 810988e:	3701      	adds	r7, #1
 8109890:	2d00      	cmp	r5, #0
 8109892:	d1f4      	bne.n	810987e <ai_layers_forward_all+0x72>
 8109894:	e7df      	b.n	8109856 <ai_layers_forward_all+0x4a>
 8109896:	2300      	movs	r3, #0
 8109898:	63a3      	str	r3, [r4, #56]	; 0x38
 810989a:	3701      	adds	r7, #1
 810989c:	e7db      	b.n	8109856 <ai_layers_forward_all+0x4a>
 810989e:	bf00      	nop

081098a0 <forward_dense>:
 81098a0:	6983      	ldr	r3, [r0, #24]
 81098a2:	881a      	ldrh	r2, [r3, #0]
 81098a4:	2a00      	cmp	r2, #0
 81098a6:	f000 8181 	beq.w	8109bac <forward_dense+0x30c>
 81098aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81098ae:	ed2d 8b02 	vpush	{d8}
 81098b2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 81098b6:	f8dc 5004 	ldr.w	r5, [ip, #4]
 81098ba:	b095      	sub	sp, #84	; 0x54
 81098bc:	b105      	cbz	r5, 81098c0 <forward_dense+0x20>
 81098be:	682d      	ldr	r5, [r5, #0]
 81098c0:	2a01      	cmp	r2, #1
 81098c2:	f000 828f 	beq.w	8109de4 <forward_dense+0x544>
 81098c6:	f8dc 6010 	ldr.w	r6, [ip, #16]
 81098ca:	b106      	cbz	r6, 81098ce <forward_dense+0x2e>
 81098cc:	6836      	ldr	r6, [r6, #0]
 81098ce:	2a02      	cmp	r2, #2
 81098d0:	f000 816e 	beq.w	8109bb0 <forward_dense+0x310>
 81098d4:	f8dc 301c 	ldr.w	r3, [ip, #28]
 81098d8:	930b      	str	r3, [sp, #44]	; 0x2c
 81098da:	2b00      	cmp	r3, #0
 81098dc:	f000 8274 	beq.w	8109dc8 <forward_dense+0x528>
 81098e0:	4619      	mov	r1, r3
 81098e2:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 81098e6:	6809      	ldr	r1, [r1, #0]
 81098e8:	910d      	str	r1, [sp, #52]	; 0x34
 81098ea:	2b01      	cmp	r3, #1
 81098ec:	f240 826e 	bls.w	8109dcc <forward_dense+0x52c>
 81098f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81098f2:	685b      	ldr	r3, [r3, #4]
 81098f4:	930b      	str	r3, [sp, #44]	; 0x2c
 81098f6:	460b      	mov	r3, r1
 81098f8:	68e8      	ldr	r0, [r5, #12]
 81098fa:	68f7      	ldr	r7, [r6, #12]
 81098fc:	6840      	ldr	r0, [r0, #4]
 81098fe:	6999      	ldr	r1, [r3, #24]
 8109900:	9013      	str	r0, [sp, #76]	; 0x4c
 8109902:	6878      	ldr	r0, [r7, #4]
 8109904:	680b      	ldr	r3, [r1, #0]
 8109906:	9012      	str	r0, [sp, #72]	; 0x48
 8109908:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 810990c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8109910:	fb00 f404 	mul.w	r4, r0, r4
 8109914:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8109918:	fa4e f000 	asr.w	r0, lr, r0
 810991c:	2a03      	cmp	r2, #3
 810991e:	9010      	str	r0, [sp, #64]	; 0x40
 8109920:	f000 825d 	beq.w	8109dde <forward_dense+0x53e>
 8109924:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8109928:	f3c3 4343 	ubfx	r3, r3, #17, #4
 810992c:	2a00      	cmp	r2, #0
 810992e:	f000 8246 	beq.w	8109dbe <forward_dense+0x51e>
 8109932:	6812      	ldr	r2, [r2, #0]
 8109934:	2a00      	cmp	r2, #0
 8109936:	f000 8242 	beq.w	8109dbe <forward_dense+0x51e>
 810993a:	2b04      	cmp	r3, #4
 810993c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8109940:	f000 822c 	beq.w	8109d9c <forward_dense+0x4fc>
 8109944:	2b08      	cmp	r3, #8
 8109946:	f000 8229 	beq.w	8109d9c <forward_dense+0x4fc>
 810994a:	f04f 0b00 	mov.w	fp, #0
 810994e:	69b2      	ldr	r2, [r6, #24]
 8109950:	69ab      	ldr	r3, [r5, #24]
 8109952:	6891      	ldr	r1, [r2, #8]
 8109954:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109956:	689b      	ldr	r3, [r3, #8]
 8109958:	6952      	ldr	r2, [r2, #20]
 810995a:	9106      	str	r1, [sp, #24]
 810995c:	fb07 f404 	mul.w	r4, r7, r4
 8109960:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8109964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8109966:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 810996a:	4281      	cmp	r1, r0
 810996c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8109970:	900e      	str	r0, [sp, #56]	; 0x38
 8109972:	940c      	str	r4, [sp, #48]	; 0x30
 8109974:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8109978:	f080 8113 	bcs.w	8109ba2 <forward_dense+0x302>
 810997c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 810997e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8109bcc <forward_dense+0x32c>
 8109982:	f021 0201 	bic.w	r2, r1, #1
 8109986:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 810998a:	9204      	str	r2, [sp, #16]
 810998c:	f001 0201 	and.w	r2, r1, #1
 8109990:	08c8      	lsrs	r0, r1, #3
 8109992:	9208      	str	r2, [sp, #32]
 8109994:	008a      	lsls	r2, r1, #2
 8109996:	f001 0a07 	and.w	sl, r1, #7
 810999a:	920f      	str	r2, [sp, #60]	; 0x3c
 810999c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 81099a0:	3320      	adds	r3, #32
 81099a2:	465c      	mov	r4, fp
 81099a4:	9007      	str	r0, [sp, #28]
 81099a6:	46cb      	mov	fp, r9
 81099a8:	9205      	str	r2, [sp, #20]
 81099aa:	9302      	str	r3, [sp, #8]
 81099ac:	46c1      	mov	r9, r8
 81099ae:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 81099b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81099b4:	699b      	ldr	r3, [r3, #24]
 81099b6:	689a      	ldr	r2, [r3, #8]
 81099b8:	9b02      	ldr	r3, [sp, #8]
 81099ba:	3b20      	subs	r3, #32
 81099bc:	930a      	str	r3, [sp, #40]	; 0x28
 81099be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81099c0:	b10b      	cbz	r3, 81099c6 <forward_dense+0x126>
 81099c2:	699b      	ldr	r3, [r3, #24]
 81099c4:	689b      	ldr	r3, [r3, #8]
 81099c6:	2c00      	cmp	r4, #0
 81099c8:	f000 81da 	beq.w	8109d80 <forward_dense+0x4e0>
 81099cc:	9910      	ldr	r1, [sp, #64]	; 0x40
 81099ce:	2904      	cmp	r1, #4
 81099d0:	9906      	ldr	r1, [sp, #24]
 81099d2:	f000 80fd 	beq.w	8109bd0 <forward_dense+0x330>
 81099d6:	4549      	cmp	r1, r9
 81099d8:	f080 80d2 	bcs.w	8109b80 <forward_dense+0x2e0>
 81099dc:	460f      	mov	r7, r1
 81099de:	9907      	ldr	r1, [sp, #28]
 81099e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 81099e4:	f8dd a014 	ldr.w	sl, [sp, #20]
 81099e8:	1c4e      	adds	r6, r1, #1
 81099ea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 81099ee:	4694      	mov	ip, r2
 81099f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81099f2:	468e      	mov	lr, r1
 81099f4:	2b00      	cmp	r3, #0
 81099f6:	f000 80de 	beq.w	8109bb6 <forward_dense+0x316>
 81099fa:	ecf3 2a01 	vldmia	r3!, {s5}
 81099fe:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8109bcc <forward_dense+0x32c>
 8109a02:	f1be 0f00 	cmp.w	lr, #0
 8109a06:	f000 80de 	beq.w	8109bc6 <forward_dense+0x326>
 8109a0a:	f10c 0108 	add.w	r1, ip, #8
 8109a0e:	4640      	mov	r0, r8
 8109a10:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8109a14:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8109a18:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8109a1c:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8109a20:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8109a24:	ed10 5a04 	vldr	s10, [r0, #-16]
 8109a28:	ed50 5a03 	vldr	s11, [r0, #-12]
 8109a2c:	ed10 6a02 	vldr	s12, [r0, #-8]
 8109a30:	ed50 6a01 	vldr	s13, [r0, #-4]
 8109a34:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a38:	edd5 7a00 	vldr	s15, [r5]
 8109a3c:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8109a40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a44:	ee67 7a83 	vmul.f32	s15, s15, s6
 8109a48:	ed95 3a00 	vldr	s6, [r5]
 8109a4c:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8109a50:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109a54:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a58:	3108      	adds	r1, #8
 8109a5a:	edd5 3a00 	vldr	s7, [r5]
 8109a5e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8109a62:	eee3 7a84 	vfma.f32	s15, s7, s8
 8109a66:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a6a:	3020      	adds	r0, #32
 8109a6c:	ed95 4a00 	vldr	s8, [r5]
 8109a70:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8109a74:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109a78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a7c:	edd5 4a00 	vldr	s9, [r5]
 8109a80:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8109a84:	eee4 7a85 	vfma.f32	s15, s9, s10
 8109a88:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a8c:	ed95 5a00 	vldr	s10, [r5]
 8109a90:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8109a94:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109a98:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a9c:	edd5 5a00 	vldr	s11, [r5]
 8109aa0:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8109aa4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109aa8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109aac:	428e      	cmp	r6, r1
 8109aae:	ed95 6a00 	vldr	s12, [r5]
 8109ab2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109aba:	d1a9      	bne.n	8109a10 <forward_dense+0x170>
 8109abc:	f1a6 0108 	sub.w	r1, r6, #8
 8109ac0:	4650      	mov	r0, sl
 8109ac2:	2a00      	cmp	r2, #0
 8109ac4:	d04a      	beq.n	8109b5c <forward_dense+0x2bc>
 8109ac6:	780d      	ldrb	r5, [r1, #0]
 8109ac8:	edd0 6a00 	vldr	s13, [r0]
 8109acc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109ad0:	edd5 7a00 	vldr	s15, [r5]
 8109ad4:	2a01      	cmp	r2, #1
 8109ad6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109ada:	d03f      	beq.n	8109b5c <forward_dense+0x2bc>
 8109adc:	784d      	ldrb	r5, [r1, #1]
 8109ade:	edd0 6a01 	vldr	s13, [r0, #4]
 8109ae2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109ae6:	edd5 7a00 	vldr	s15, [r5]
 8109aea:	2a02      	cmp	r2, #2
 8109aec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109af0:	d034      	beq.n	8109b5c <forward_dense+0x2bc>
 8109af2:	788d      	ldrb	r5, [r1, #2]
 8109af4:	edd0 6a02 	vldr	s13, [r0, #8]
 8109af8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109afc:	edd5 7a00 	vldr	s15, [r5]
 8109b00:	2a03      	cmp	r2, #3
 8109b02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b06:	d029      	beq.n	8109b5c <forward_dense+0x2bc>
 8109b08:	78cd      	ldrb	r5, [r1, #3]
 8109b0a:	edd0 6a03 	vldr	s13, [r0, #12]
 8109b0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109b12:	edd5 7a00 	vldr	s15, [r5]
 8109b16:	2a04      	cmp	r2, #4
 8109b18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b1c:	d01e      	beq.n	8109b5c <forward_dense+0x2bc>
 8109b1e:	790d      	ldrb	r5, [r1, #4]
 8109b20:	edd0 6a04 	vldr	s13, [r0, #16]
 8109b24:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109b28:	edd5 7a00 	vldr	s15, [r5]
 8109b2c:	2a05      	cmp	r2, #5
 8109b2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b32:	d013      	beq.n	8109b5c <forward_dense+0x2bc>
 8109b34:	794d      	ldrb	r5, [r1, #5]
 8109b36:	edd0 6a05 	vldr	s13, [r0, #20]
 8109b3a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109b3e:	edd5 7a00 	vldr	s15, [r5]
 8109b42:	2a06      	cmp	r2, #6
 8109b44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b48:	d008      	beq.n	8109b5c <forward_dense+0x2bc>
 8109b4a:	7989      	ldrb	r1, [r1, #6]
 8109b4c:	edd0 7a06 	vldr	s15, [r0, #24]
 8109b50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109b54:	edd1 6a00 	vldr	s13, [r1]
 8109b58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b5c:	44dc      	add	ip, fp
 8109b5e:	445e      	add	r6, fp
 8109b60:	ee32 7a87 	vadd.f32	s14, s5, s14
 8109b64:	eca7 7a01 	vstmia	r7!, {s14}
 8109b68:	454f      	cmp	r7, r9
 8109b6a:	f4ff af43 	bcc.w	81099f4 <forward_dense+0x154>
 8109b6e:	9a06      	ldr	r2, [sp, #24]
 8109b70:	eba9 0302 	sub.w	r3, r9, r2
 8109b74:	3b01      	subs	r3, #1
 8109b76:	f023 0303 	bic.w	r3, r3, #3
 8109b7a:	3304      	adds	r3, #4
 8109b7c:	18d3      	adds	r3, r2, r3
 8109b7e:	9306      	str	r3, [sp, #24]
 8109b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109b82:	9a05      	ldr	r2, [sp, #20]
 8109b84:	4499      	add	r9, r3
 8109b86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109b88:	441a      	add	r2, r3
 8109b8a:	9205      	str	r2, [sp, #20]
 8109b8c:	9a02      	ldr	r2, [sp, #8]
 8109b8e:	441a      	add	r2, r3
 8109b90:	9202      	str	r2, [sp, #8]
 8109b92:	9a04      	ldr	r2, [sp, #16]
 8109b94:	441a      	add	r2, r3
 8109b96:	9204      	str	r2, [sp, #16]
 8109b98:	9b06      	ldr	r3, [sp, #24]
 8109b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109b9c:	4293      	cmp	r3, r2
 8109b9e:	f4ff af08 	bcc.w	81099b2 <forward_dense+0x112>
 8109ba2:	b015      	add	sp, #84	; 0x54
 8109ba4:	ecbd 8b02 	vpop	{d8}
 8109ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109bac:	6853      	ldr	r3, [r2, #4]
 8109bae:	deff      	udf	#255	; 0xff
 8109bb0:	2300      	movs	r3, #0
 8109bb2:	685b      	ldr	r3, [r3, #4]
 8109bb4:	deff      	udf	#255	; 0xff
 8109bb6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8109bcc <forward_dense+0x32c>
 8109bba:	eef0 2a48 	vmov.f32	s5, s16
 8109bbe:	f1be 0f00 	cmp.w	lr, #0
 8109bc2:	f47f af22 	bne.w	8109a0a <forward_dense+0x16a>
 8109bc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8109bc8:	4661      	mov	r1, ip
 8109bca:	e77a      	b.n	8109ac2 <forward_dense+0x222>
 8109bcc:	00000000 	.word	0x00000000
 8109bd0:	4549      	cmp	r1, r9
 8109bd2:	d2d5      	bcs.n	8109b80 <forward_dense+0x2e0>
 8109bd4:	9807      	ldr	r0, [sp, #28]
 8109bd6:	9103      	str	r1, [sp, #12]
 8109bd8:	9904      	ldr	r1, [sp, #16]
 8109bda:	f100 0c01 	add.w	ip, r0, #1
 8109bde:	3901      	subs	r1, #1
 8109be0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8109be4:	9109      	str	r1, [sp, #36]	; 0x24
 8109be6:	2b00      	cmp	r3, #0
 8109be8:	f000 80b2 	beq.w	8109d50 <forward_dense+0x4b0>
 8109bec:	9907      	ldr	r1, [sp, #28]
 8109bee:	ecf3 2a01 	vldmia	r3!, {s5}
 8109bf2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8109bcc <forward_dense+0x32c>
 8109bf6:	2900      	cmp	r1, #0
 8109bf8:	f000 80b2 	beq.w	8109d60 <forward_dense+0x4c0>
 8109bfc:	9902      	ldr	r1, [sp, #8]
 8109bfe:	1d10      	adds	r0, r2, #4
 8109c00:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8109c04:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8109c08:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8109c0c:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8109c10:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8109c14:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8109c18:	ed11 5a04 	vldr	s10, [r1, #-16]
 8109c1c:	ed51 5a03 	vldr	s11, [r1, #-12]
 8109c20:	ed11 6a02 	vldr	s12, [r1, #-8]
 8109c24:	ed51 6a01 	vldr	s13, [r1, #-4]
 8109c28:	f006 070f 	and.w	r7, r6, #15
 8109c2c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8109c30:	edd7 7a00 	vldr	s15, [r7]
 8109c34:	0936      	lsrs	r6, r6, #4
 8109c36:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c3a:	ed96 3a00 	vldr	s6, [r6]
 8109c3e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8109c42:	092e      	lsrs	r6, r5, #4
 8109c44:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109c48:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c4c:	f005 050f 	and.w	r5, r5, #15
 8109c50:	edd6 3a00 	vldr	s7, [r6]
 8109c54:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8109c58:	eee3 7a84 	vfma.f32	s15, s7, s8
 8109c5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109c60:	0937      	lsrs	r7, r6, #4
 8109c62:	ed95 4a00 	vldr	s8, [r5]
 8109c66:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8109c6a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109c6e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8109c72:	f006 060f 	and.w	r6, r6, #15
 8109c76:	edd7 4a00 	vldr	s9, [r7]
 8109c7a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8109c7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c82:	3004      	adds	r0, #4
 8109c84:	ed96 5a00 	vldr	s10, [r6]
 8109c88:	092e      	lsrs	r6, r5, #4
 8109c8a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109c8e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c92:	f005 050f 	and.w	r5, r5, #15
 8109c96:	edd6 5a00 	vldr	s11, [r6]
 8109c9a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109c9e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109ca2:	4584      	cmp	ip, r0
 8109ca4:	ed95 6a00 	vldr	s12, [r5]
 8109ca8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109cac:	f101 0120 	add.w	r1, r1, #32
 8109cb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109cb4:	d1a4      	bne.n	8109c00 <forward_dense+0x360>
 8109cb6:	f8dd e014 	ldr.w	lr, [sp, #20]
 8109cba:	f1ac 0804 	sub.w	r8, ip, #4
 8109cbe:	9904      	ldr	r1, [sp, #16]
 8109cc0:	458e      	cmp	lr, r1
 8109cc2:	d22a      	bcs.n	8109d1a <forward_dense+0x47a>
 8109cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109cc6:	eba1 070e 	sub.w	r7, r1, lr
 8109cca:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8109cce:	f10e 0008 	add.w	r0, lr, #8
 8109cd2:	f108 36ff 	add.w	r6, r8, #4294967295
 8109cd6:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8109cda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109cde:	ed50 5a01 	vldr	s11, [r0, #-4]
 8109ce2:	ed50 6a02 	vldr	s13, [r0, #-8]
 8109ce6:	f001 050f 	and.w	r5, r1, #15
 8109cea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109cee:	edd5 7a00 	vldr	s15, [r5]
 8109cf2:	0909      	lsrs	r1, r1, #4
 8109cf4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109cf8:	ed91 6a00 	vldr	s12, [r1]
 8109cfc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8109d00:	42b7      	cmp	r7, r6
 8109d02:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109d06:	f100 0008 	add.w	r0, r0, #8
 8109d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109d0e:	d1e4      	bne.n	8109cda <forward_dense+0x43a>
 8109d10:	f10a 0a01 	add.w	sl, sl, #1
 8109d14:	44d0      	add	r8, sl
 8109d16:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8109d1a:	9908      	ldr	r1, [sp, #32]
 8109d1c:	b321      	cbz	r1, 8109d68 <forward_dense+0x4c8>
 8109d1e:	f898 1000 	ldrb.w	r1, [r8]
 8109d22:	edde 7a00 	vldr	s15, [lr]
 8109d26:	0909      	lsrs	r1, r1, #4
 8109d28:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109d2c:	edd1 6a00 	vldr	s13, [r1]
 8109d30:	9903      	ldr	r1, [sp, #12]
 8109d32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109d36:	445a      	add	r2, fp
 8109d38:	44dc      	add	ip, fp
 8109d3a:	ee72 2a87 	vadd.f32	s5, s5, s14
 8109d3e:	ece1 2a01 	vstmia	r1!, {s5}
 8109d42:	4589      	cmp	r9, r1
 8109d44:	9103      	str	r1, [sp, #12]
 8109d46:	f67f af12 	bls.w	8109b6e <forward_dense+0x2ce>
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	f47f af4e 	bne.w	8109bec <forward_dense+0x34c>
 8109d50:	9907      	ldr	r1, [sp, #28]
 8109d52:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8109bcc <forward_dense+0x32c>
 8109d56:	eef0 2a48 	vmov.f32	s5, s16
 8109d5a:	2900      	cmp	r1, #0
 8109d5c:	f47f af4e 	bne.w	8109bfc <forward_dense+0x35c>
 8109d60:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8109d64:	4690      	mov	r8, r2
 8109d66:	e7aa      	b.n	8109cbe <forward_dense+0x41e>
 8109d68:	9903      	ldr	r1, [sp, #12]
 8109d6a:	ee32 7a87 	vadd.f32	s14, s5, s14
 8109d6e:	445a      	add	r2, fp
 8109d70:	eca1 7a01 	vstmia	r1!, {s14}
 8109d74:	4549      	cmp	r1, r9
 8109d76:	9103      	str	r1, [sp, #12]
 8109d78:	44dc      	add	ip, fp
 8109d7a:	f4ff af34 	bcc.w	8109be6 <forward_dense+0x346>
 8109d7e:	e6f6      	b.n	8109b6e <forward_dense+0x2ce>
 8109d80:	9912      	ldr	r1, [sp, #72]	; 0x48
 8109d82:	9d06      	ldr	r5, [sp, #24]
 8109d84:	9101      	str	r1, [sp, #4]
 8109d86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8109d88:	9100      	str	r1, [sp, #0]
 8109d8a:	4628      	mov	r0, r5
 8109d8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8109d8e:	f000 f9ef 	bl	810a170 <forward_lite_dense_if32of32wf32>
 8109d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109d94:	462b      	mov	r3, r5
 8109d96:	4413      	add	r3, r2
 8109d98:	9306      	str	r3, [sp, #24]
 8109d9a:	e6f1      	b.n	8109b80 <forward_dense+0x2e0>
 8109d9c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8109da0:	f1b9 0f00 	cmp.w	r9, #0
 8109da4:	d016      	beq.n	8109dd4 <forward_dense+0x534>
 8109da6:	e9d9 0100 	ldrd	r0, r1, [r9]
 8109daa:	f000 fbf7 	bl	810a59c <ai_array_get_byte_size>
 8109dae:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8109db2:	4602      	mov	r2, r0
 8109db4:	4659      	mov	r1, fp
 8109db6:	4640      	mov	r0, r8
 8109db8:	f000 fafe 	bl	810a3b8 <st_int8_copy>
 8109dbc:	e5c7      	b.n	810994e <forward_dense+0xae>
 8109dbe:	2b04      	cmp	r3, #4
 8109dc0:	d00a      	beq.n	8109dd8 <forward_dense+0x538>
 8109dc2:	f04f 0900 	mov.w	r9, #0
 8109dc6:	e5bd      	b.n	8109944 <forward_dense+0xa4>
 8109dc8:	930d      	str	r3, [sp, #52]	; 0x34
 8109dca:	e595      	b.n	81098f8 <forward_dense+0x58>
 8109dcc:	2300      	movs	r3, #0
 8109dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8109dd0:	460b      	mov	r3, r1
 8109dd2:	e591      	b.n	81098f8 <forward_dense+0x58>
 8109dd4:	46c3      	mov	fp, r8
 8109dd6:	e5ba      	b.n	810994e <forward_dense+0xae>
 8109dd8:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8109ddc:	e5b7      	b.n	810994e <forward_dense+0xae>
 8109dde:	2300      	movs	r3, #0
 8109de0:	685b      	ldr	r3, [r3, #4]
 8109de2:	deff      	udf	#255	; 0xff
 8109de4:	2300      	movs	r3, #0
 8109de6:	685b      	ldr	r3, [r3, #4]
 8109de8:	deff      	udf	#255	; 0xff
 8109dea:	bf00      	nop

08109dec <forward_relu>:
 8109dec:	6982      	ldr	r2, [r0, #24]
 8109dee:	8813      	ldrh	r3, [r2, #0]
 8109df0:	2b00      	cmp	r3, #0
 8109df2:	d05b      	beq.n	8109eac <forward_relu+0xc0>
 8109df4:	6851      	ldr	r1, [r2, #4]
 8109df6:	684a      	ldr	r2, [r1, #4]
 8109df8:	b102      	cbz	r2, 8109dfc <forward_relu+0x10>
 8109dfa:	6812      	ldr	r2, [r2, #0]
 8109dfc:	2b01      	cmp	r3, #1
 8109dfe:	f000 8123 	beq.w	810a048 <forward_relu+0x25c>
 8109e02:	b470      	push	{r4, r5, r6}
 8109e04:	6909      	ldr	r1, [r1, #16]
 8109e06:	b101      	cbz	r1, 8109e0a <forward_relu+0x1e>
 8109e08:	6809      	ldr	r1, [r1, #0]
 8109e0a:	69c6      	ldr	r6, [r0, #28]
 8109e0c:	2e00      	cmp	r6, #0
 8109e0e:	f000 8097 	beq.w	8109f40 <forward_relu+0x154>
 8109e12:	6873      	ldr	r3, [r6, #4]
 8109e14:	6988      	ldr	r0, [r1, #24]
 8109e16:	6991      	ldr	r1, [r2, #24]
 8109e18:	2b01      	cmp	r3, #1
 8109e1a:	f000 80c1 	beq.w	8109fa0 <forward_relu+0x1b4>
 8109e1e:	6893      	ldr	r3, [r2, #8]
 8109e20:	6880      	ldr	r0, [r0, #8]
 8109e22:	688c      	ldr	r4, [r1, #8]
 8109e24:	0a1b      	lsrs	r3, r3, #8
 8109e26:	f000 80f2 	beq.w	810a00e <forward_relu+0x222>
 8109e2a:	68d5      	ldr	r5, [r2, #12]
 8109e2c:	2201      	movs	r2, #1
 8109e2e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8109e32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109e36:	42ab      	cmp	r3, r5
 8109e38:	fb01 f202 	mul.w	r2, r1, r2
 8109e3c:	d1f9      	bne.n	8109e32 <forward_relu+0x46>
 8109e3e:	68b3      	ldr	r3, [r6, #8]
 8109e40:	ed93 7a02 	vldr	s14, [r3, #8]
 8109e44:	edd3 6a00 	vldr	s13, [r3]
 8109e48:	ed93 6a01 	vldr	s12, [r3, #4]
 8109e4c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8109e50:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8109e54:	3a01      	subs	r2, #1
 8109e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109e5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109e5e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109e62:	d425      	bmi.n	8109eb0 <forward_relu+0xc4>
 8109e64:	429c      	cmp	r4, r3
 8109e66:	d81f      	bhi.n	8109ea8 <forward_relu+0xbc>
 8109e68:	1d1a      	adds	r2, r3, #4
 8109e6a:	1d01      	adds	r1, r0, #4
 8109e6c:	e00d      	b.n	8109e8a <forward_relu+0x9e>
 8109e6e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109e76:	db03      	blt.n	8109e80 <forward_relu+0x94>
 8109e78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8109e7c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8109e80:	3b08      	subs	r3, #8
 8109e82:	429c      	cmp	r4, r3
 8109e84:	ed61 7a01 	vstmdb	r1!, {s15}
 8109e88:	d80e      	bhi.n	8109ea8 <forward_relu+0xbc>
 8109e8a:	4613      	mov	r3, r2
 8109e8c:	ed72 7a01 	vldmdb	r2!, {s15}
 8109e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8109e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109e98:	d9e9      	bls.n	8109e6e <forward_relu+0x82>
 8109e9a:	3b08      	subs	r3, #8
 8109e9c:	eef0 7a47 	vmov.f32	s15, s14
 8109ea0:	429c      	cmp	r4, r3
 8109ea2:	ed61 7a01 	vstmdb	r1!, {s15}
 8109ea6:	d9f0      	bls.n	8109e8a <forward_relu+0x9e>
 8109ea8:	bc70      	pop	{r4, r5, r6}
 8109eaa:	4770      	bx	lr
 8109eac:	685b      	ldr	r3, [r3, #4]
 8109eae:	deff      	udf	#255	; 0xff
 8109eb0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8109eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109eb8:	d11f      	bne.n	8109efa <forward_relu+0x10e>
 8109eba:	429c      	cmp	r4, r3
 8109ebc:	d8f4      	bhi.n	8109ea8 <forward_relu+0xbc>
 8109ebe:	1b1c      	subs	r4, r3, r4
 8109ec0:	f024 0403 	bic.w	r4, r4, #3
 8109ec4:	1d1a      	adds	r2, r3, #4
 8109ec6:	2500      	movs	r5, #0
 8109ec8:	1b1b      	subs	r3, r3, r4
 8109eca:	1d01      	adds	r1, r0, #4
 8109ecc:	ed72 7a01 	vldmdb	r2!, {s15}
 8109ed0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8109ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109ed8:	dc0a      	bgt.n	8109ef0 <forward_relu+0x104>
 8109eda:	429a      	cmp	r2, r3
 8109edc:	f841 5d04 	str.w	r5, [r1, #-4]!
 8109ee0:	d0e2      	beq.n	8109ea8 <forward_relu+0xbc>
 8109ee2:	ed72 7a01 	vldmdb	r2!, {s15}
 8109ee6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8109eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109eee:	ddf4      	ble.n	8109eda <forward_relu+0xee>
 8109ef0:	429a      	cmp	r2, r3
 8109ef2:	ed61 7a01 	vstmdb	r1!, {s15}
 8109ef6:	d1e9      	bne.n	8109ecc <forward_relu+0xe0>
 8109ef8:	e7d6      	b.n	8109ea8 <forward_relu+0xbc>
 8109efa:	429c      	cmp	r4, r3
 8109efc:	d8d4      	bhi.n	8109ea8 <forward_relu+0xbc>
 8109efe:	1b1c      	subs	r4, r3, r4
 8109f00:	f024 0403 	bic.w	r4, r4, #3
 8109f04:	1d1a      	adds	r2, r3, #4
 8109f06:	1d01      	adds	r1, r0, #4
 8109f08:	1b1b      	subs	r3, r3, r4
 8109f0a:	ed72 7a01 	vldmdb	r2!, {s15}
 8109f0e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109f16:	db0e      	blt.n	8109f36 <forward_relu+0x14a>
 8109f18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8109f1c:	4293      	cmp	r3, r2
 8109f1e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8109f22:	ed61 7a01 	vstmdb	r1!, {s15}
 8109f26:	d0bf      	beq.n	8109ea8 <forward_relu+0xbc>
 8109f28:	ed72 7a01 	vldmdb	r2!, {s15}
 8109f2c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109f34:	daf0      	bge.n	8109f18 <forward_relu+0x12c>
 8109f36:	4293      	cmp	r3, r2
 8109f38:	ed61 7a01 	vstmdb	r1!, {s15}
 8109f3c:	d1e5      	bne.n	8109f0a <forward_relu+0x11e>
 8109f3e:	e7b3      	b.n	8109ea8 <forward_relu+0xbc>
 8109f40:	6893      	ldr	r3, [r2, #8]
 8109f42:	6989      	ldr	r1, [r1, #24]
 8109f44:	6990      	ldr	r0, [r2, #24]
 8109f46:	6889      	ldr	r1, [r1, #8]
 8109f48:	6884      	ldr	r4, [r0, #8]
 8109f4a:	0a1b      	lsrs	r3, r3, #8
 8109f4c:	d075      	beq.n	810a03a <forward_relu+0x24e>
 8109f4e:	68d5      	ldr	r5, [r2, #12]
 8109f50:	2201      	movs	r2, #1
 8109f52:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8109f56:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8109f5a:	429d      	cmp	r5, r3
 8109f5c:	fb00 f202 	mul.w	r2, r0, r2
 8109f60:	d1f9      	bne.n	8109f56 <forward_relu+0x16a>
 8109f62:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8109f66:	3b01      	subs	r3, #1
 8109f68:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8109f6c:	4294      	cmp	r4, r2
 8109f6e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8109f72:	d899      	bhi.n	8109ea8 <forward_relu+0xbc>
 8109f74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 810a050 <forward_relu+0x264>
 8109f78:	3204      	adds	r2, #4
 8109f7a:	3104      	adds	r1, #4
 8109f7c:	4613      	mov	r3, r2
 8109f7e:	ed72 7a01 	vldmdb	r2!, {s15}
 8109f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8109f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109f8a:	f1a3 0308 	sub.w	r3, r3, #8
 8109f8e:	bfb8      	it	lt
 8109f90:	eef0 7a47 	vmovlt.f32	s15, s14
 8109f94:	429c      	cmp	r4, r3
 8109f96:	ed61 7a01 	vstmdb	r1!, {s15}
 8109f9a:	d9ef      	bls.n	8109f7c <forward_relu+0x190>
 8109f9c:	bc70      	pop	{r4, r5, r6}
 8109f9e:	4770      	bx	lr
 8109fa0:	688c      	ldr	r4, [r1, #8]
 8109fa2:	6891      	ldr	r1, [r2, #8]
 8109fa4:	6880      	ldr	r0, [r0, #8]
 8109fa6:	0a09      	lsrs	r1, r1, #8
 8109fa8:	d049      	beq.n	810a03e <forward_relu+0x252>
 8109faa:	68d5      	ldr	r5, [r2, #12]
 8109fac:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8109fb0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8109fb4:	42aa      	cmp	r2, r5
 8109fb6:	fb01 f303 	mul.w	r3, r1, r3
 8109fba:	d1f9      	bne.n	8109fb0 <forward_relu+0x1c4>
 8109fbc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8109fc0:	3a01      	subs	r2, #1
 8109fc2:	68b1      	ldr	r1, [r6, #8]
 8109fc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109fc8:	429c      	cmp	r4, r3
 8109fca:	ed91 7a00 	vldr	s14, [r1]
 8109fce:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109fd2:	f63f af69 	bhi.w	8109ea8 <forward_relu+0xbc>
 8109fd6:	2500      	movs	r5, #0
 8109fd8:	3304      	adds	r3, #4
 8109fda:	1d02      	adds	r2, r0, #4
 8109fdc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8109fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8109fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109fe8:	f1a3 0104 	sub.w	r1, r3, #4
 8109fec:	f1a3 0308 	sub.w	r3, r3, #8
 8109ff0:	d406      	bmi.n	810a000 <forward_relu+0x214>
 8109ff2:	429c      	cmp	r4, r3
 8109ff4:	f842 5d04 	str.w	r5, [r2, #-4]!
 8109ff8:	f63f af56 	bhi.w	8109ea8 <forward_relu+0xbc>
 8109ffc:	460b      	mov	r3, r1
 8109ffe:	e7ed      	b.n	8109fdc <forward_relu+0x1f0>
 810a000:	429c      	cmp	r4, r3
 810a002:	ed62 7a01 	vstmdb	r2!, {s15}
 810a006:	f63f af4f 	bhi.w	8109ea8 <forward_relu+0xbc>
 810a00a:	460b      	mov	r3, r1
 810a00c:	e7e6      	b.n	8109fdc <forward_relu+0x1f0>
 810a00e:	68b3      	ldr	r3, [r6, #8]
 810a010:	ed93 7a02 	vldr	s14, [r3, #8]
 810a014:	edd3 6a00 	vldr	s13, [r3]
 810a018:	ed93 6a01 	vldr	s12, [r3, #4]
 810a01c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 810a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a024:	d401      	bmi.n	810a02a <forward_relu+0x23e>
 810a026:	4623      	mov	r3, r4
 810a028:	e71e      	b.n	8109e68 <forward_relu+0x7c>
 810a02a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 810a02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a032:	4623      	mov	r3, r4
 810a034:	f47f af63 	bne.w	8109efe <forward_relu+0x112>
 810a038:	e741      	b.n	8109ebe <forward_relu+0xd2>
 810a03a:	4622      	mov	r2, r4
 810a03c:	e79a      	b.n	8109f74 <forward_relu+0x188>
 810a03e:	68b2      	ldr	r2, [r6, #8]
 810a040:	4623      	mov	r3, r4
 810a042:	ed92 7a00 	vldr	s14, [r2]
 810a046:	e7c6      	b.n	8109fd6 <forward_relu+0x1ea>
 810a048:	2300      	movs	r3, #0
 810a04a:	685b      	ldr	r3, [r3, #4]
 810a04c:	deff      	udf	#255	; 0xff
 810a04e:	bf00      	nop
 810a050:	00000000 	.word	0x00000000

0810a054 <forward_sm>:
 810a054:	6982      	ldr	r2, [r0, #24]
 810a056:	8813      	ldrh	r3, [r2, #0]
 810a058:	2b00      	cmp	r3, #0
 810a05a:	d07c      	beq.n	810a156 <forward_sm+0x102>
 810a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a060:	ed2d 8b04 	vpush	{d8-d9}
 810a064:	6852      	ldr	r2, [r2, #4]
 810a066:	6854      	ldr	r4, [r2, #4]
 810a068:	b085      	sub	sp, #20
 810a06a:	b104      	cbz	r4, 810a06e <forward_sm+0x1a>
 810a06c:	6824      	ldr	r4, [r4, #0]
 810a06e:	2b01      	cmp	r3, #1
 810a070:	d076      	beq.n	810a160 <forward_sm+0x10c>
 810a072:	6913      	ldr	r3, [r2, #16]
 810a074:	2b00      	cmp	r3, #0
 810a076:	d076      	beq.n	810a166 <forward_sm+0x112>
 810a078:	681e      	ldr	r6, [r3, #0]
 810a07a:	68a3      	ldr	r3, [r4, #8]
 810a07c:	68e0      	ldr	r0, [r4, #12]
 810a07e:	68f2      	ldr	r2, [r6, #12]
 810a080:	6845      	ldr	r5, [r0, #4]
 810a082:	6857      	ldr	r7, [r2, #4]
 810a084:	0a1b      	lsrs	r3, r3, #8
 810a086:	d068      	beq.n	810a15a <forward_sm+0x106>
 810a088:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 810a08c:	2201      	movs	r2, #1
 810a08e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810a092:	4298      	cmp	r0, r3
 810a094:	fb01 f202 	mul.w	r2, r1, r2
 810a098:	d1f9      	bne.n	810a08e <forward_sm+0x3a>
 810a09a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 810a09e:	69a2      	ldr	r2, [r4, #24]
 810a0a0:	69b3      	ldr	r3, [r6, #24]
 810a0a2:	6892      	ldr	r2, [r2, #8]
 810a0a4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 810a0a8:	eb02 0309 	add.w	r3, r2, r9
 810a0ac:	429a      	cmp	r2, r3
 810a0ae:	9301      	str	r3, [sp, #4]
 810a0b0:	d24c      	bcs.n	810a14c <forward_sm+0xf8>
 810a0b2:	00bb      	lsls	r3, r7, #2
 810a0b4:	9303      	str	r3, [sp, #12]
 810a0b6:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 810a0ba:	00ab      	lsls	r3, r5, #2
 810a0bc:	2d01      	cmp	r5, #1
 810a0be:	ed92 8a00 	vldr	s16, [r2]
 810a0c2:	9302      	str	r3, [sp, #8]
 810a0c4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 810a0c8:	463e      	mov	r6, r7
 810a0ca:	d93c      	bls.n	810a146 <forward_sm+0xf2>
 810a0cc:	1d13      	adds	r3, r2, #4
 810a0ce:	ecf3 7a01 	vldmia	r3!, {s15}
 810a0d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810a0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a0da:	bfb8      	it	lt
 810a0dc:	eeb0 8a67 	vmovlt.f32	s16, s15
 810a0e0:	429e      	cmp	r6, r3
 810a0e2:	d1f4      	bne.n	810a0ce <forward_sm+0x7a>
 810a0e4:	eddf 8a21 	vldr	s17, [pc, #132]	; 810a16c <forward_sm+0x118>
 810a0e8:	4692      	mov	sl, r2
 810a0ea:	46c3      	mov	fp, r8
 810a0ec:	46c1      	mov	r9, r8
 810a0ee:	2400      	movs	r4, #0
 810a0f0:	ecba 0a01 	vldmia	sl!, {s0}
 810a0f4:	ee30 0a48 	vsub.f32	s0, s0, s16
 810a0f8:	f004 feea 	bl	810eed0 <expf>
 810a0fc:	3401      	adds	r4, #1
 810a0fe:	42a5      	cmp	r5, r4
 810a100:	ee78 8a80 	vadd.f32	s17, s17, s0
 810a104:	eca9 0a01 	vstmia	r9!, {s0}
 810a108:	d8f2      	bhi.n	810a0f0 <forward_sm+0x9c>
 810a10a:	eef5 8a40 	vcmp.f32	s17, #0.0
 810a10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a112:	d00b      	beq.n	810a12c <forward_sm+0xd8>
 810a114:	ee89 7a28 	vdiv.f32	s14, s18, s17
 810a118:	2300      	movs	r3, #0
 810a11a:	3301      	adds	r3, #1
 810a11c:	429d      	cmp	r5, r3
 810a11e:	eddb 7a00 	vldr	s15, [fp]
 810a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a126:	eceb 7a01 	vstmia	fp!, {s15}
 810a12a:	d8f6      	bhi.n	810a11a <forward_sm+0xc6>
 810a12c:	9b03      	ldr	r3, [sp, #12]
 810a12e:	9901      	ldr	r1, [sp, #4]
 810a130:	4498      	add	r8, r3
 810a132:	9b02      	ldr	r3, [sp, #8]
 810a134:	42b9      	cmp	r1, r7
 810a136:	463a      	mov	r2, r7
 810a138:	441e      	add	r6, r3
 810a13a:	d907      	bls.n	810a14c <forward_sm+0xf8>
 810a13c:	2d01      	cmp	r5, #1
 810a13e:	ed92 8a00 	vldr	s16, [r2]
 810a142:	441f      	add	r7, r3
 810a144:	d8c2      	bhi.n	810a0cc <forward_sm+0x78>
 810a146:	2d00      	cmp	r5, #0
 810a148:	d0f0      	beq.n	810a12c <forward_sm+0xd8>
 810a14a:	e7cb      	b.n	810a0e4 <forward_sm+0x90>
 810a14c:	b005      	add	sp, #20
 810a14e:	ecbd 8b04 	vpop	{d8-d9}
 810a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a156:	685b      	ldr	r3, [r3, #4]
 810a158:	deff      	udf	#255	; 0xff
 810a15a:	f04f 0904 	mov.w	r9, #4
 810a15e:	e79e      	b.n	810a09e <forward_sm+0x4a>
 810a160:	2300      	movs	r3, #0
 810a162:	685b      	ldr	r3, [r3, #4]
 810a164:	deff      	udf	#255	; 0xff
 810a166:	68db      	ldr	r3, [r3, #12]
 810a168:	deff      	udf	#255	; 0xff
 810a16a:	bf00      	nop
 810a16c:	00000000 	.word	0x00000000

0810a170 <forward_lite_dense_if32of32wf32>:
 810a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a174:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 810a178:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 810a17c:	4287      	cmp	r7, r0
 810a17e:	f240 8106 	bls.w	810a38e <forward_lite_dense_if32of32wf32+0x21e>
 810a182:	f1a6 0810 	sub.w	r8, r6, #16
 810a186:	ea4f 1818 	mov.w	r8, r8, lsr #4
 810a18a:	f108 0801 	add.w	r8, r8, #1
 810a18e:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 810a192:	ea4f 0986 	mov.w	r9, r6, lsl #2
 810a196:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 810a19a:	4605      	mov	r5, r0
 810a19c:	f006 0a0f 	and.w	sl, r6, #15
 810a1a0:	2e0f      	cmp	r6, #15
 810a1a2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 810a3b4 <forward_lite_dense_if32of32wf32+0x244>
 810a1a6:	f240 8101 	bls.w	810a3ac <forward_lite_dense_if32of32wf32+0x23c>
 810a1aa:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 810a1ae:	f102 0440 	add.w	r4, r2, #64	; 0x40
 810a1b2:	46b6      	mov	lr, r6
 810a1b4:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 810a1b8:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 810a1bc:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 810a1c0:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 810a1c4:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 810a1c8:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 810a1cc:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 810a1d0:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 810a1d4:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 810a1d8:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 810a1dc:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 810a1e0:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 810a1e4:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 810a1e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810a1ec:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 810a1f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a1f4:	f1ae 0e10 	sub.w	lr, lr, #16
 810a1f8:	f1be 0f0f 	cmp.w	lr, #15
 810a1fc:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 810a200:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 810a204:	eee5 7a86 	vfma.f32	s15, s11, s12
 810a208:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 810a20c:	f104 0440 	add.w	r4, r4, #64	; 0x40
 810a210:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 810a214:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 810a218:	eee4 7aa6 	vfma.f32	s15, s9, s13
 810a21c:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 810a220:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 810a224:	eee5 7a25 	vfma.f32	s15, s10, s11
 810a228:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 810a22c:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 810a230:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a234:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 810a238:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 810a23c:	eee3 7a23 	vfma.f32	s15, s6, s7
 810a240:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 810a244:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 810a248:	eee4 7a24 	vfma.f32	s15, s8, s9
 810a24c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 810a250:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 810a254:	eee5 7a25 	vfma.f32	s15, s10, s11
 810a258:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 810a25c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 810a260:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a264:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 810a268:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 810a26c:	eee1 7a21 	vfma.f32	s15, s2, s3
 810a270:	eee2 7a22 	vfma.f32	s15, s4, s5
 810a274:	eee3 7a23 	vfma.f32	s15, s6, s7
 810a278:	eee4 7a24 	vfma.f32	s15, s8, s9
 810a27c:	eee5 7a25 	vfma.f32	s15, s10, s11
 810a280:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a284:	ee37 7a27 	vadd.f32	s14, s14, s15
 810a288:	d894      	bhi.n	810a1b4 <forward_lite_dense_if32of32wf32+0x44>
 810a28a:	eb02 0e0b 	add.w	lr, r2, fp
 810a28e:	4654      	mov	r4, sl
 810a290:	46c4      	mov	ip, r8
 810a292:	2c00      	cmp	r4, #0
 810a294:	d075      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a296:	eddc 6a00 	vldr	s13, [ip]
 810a29a:	edde 7a00 	vldr	s15, [lr]
 810a29e:	2c01      	cmp	r4, #1
 810a2a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2a4:	d06d      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a2a6:	eddc 6a01 	vldr	s13, [ip, #4]
 810a2aa:	edde 7a01 	vldr	s15, [lr, #4]
 810a2ae:	2c02      	cmp	r4, #2
 810a2b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2b4:	d065      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a2b6:	eddc 6a02 	vldr	s13, [ip, #8]
 810a2ba:	edde 7a02 	vldr	s15, [lr, #8]
 810a2be:	2c03      	cmp	r4, #3
 810a2c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2c4:	d05d      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a2c6:	eddc 6a03 	vldr	s13, [ip, #12]
 810a2ca:	edde 7a03 	vldr	s15, [lr, #12]
 810a2ce:	2c04      	cmp	r4, #4
 810a2d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2d4:	d055      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a2d6:	eddc 6a04 	vldr	s13, [ip, #16]
 810a2da:	edde 7a04 	vldr	s15, [lr, #16]
 810a2de:	2c05      	cmp	r4, #5
 810a2e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2e4:	d04d      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a2e6:	eddc 6a05 	vldr	s13, [ip, #20]
 810a2ea:	edde 7a05 	vldr	s15, [lr, #20]
 810a2ee:	2c06      	cmp	r4, #6
 810a2f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2f4:	d045      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a2f6:	eddc 6a06 	vldr	s13, [ip, #24]
 810a2fa:	edde 7a06 	vldr	s15, [lr, #24]
 810a2fe:	2c07      	cmp	r4, #7
 810a300:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a304:	d03d      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a306:	eddc 6a07 	vldr	s13, [ip, #28]
 810a30a:	edde 7a07 	vldr	s15, [lr, #28]
 810a30e:	2c08      	cmp	r4, #8
 810a310:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a314:	d035      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a316:	eddc 6a08 	vldr	s13, [ip, #32]
 810a31a:	edde 7a08 	vldr	s15, [lr, #32]
 810a31e:	2c09      	cmp	r4, #9
 810a320:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a324:	d02d      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a326:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 810a32a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 810a32e:	2c0a      	cmp	r4, #10
 810a330:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a334:	d025      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a336:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 810a33a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 810a33e:	2c0b      	cmp	r4, #11
 810a340:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a344:	d01d      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a346:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 810a34a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 810a34e:	2c0c      	cmp	r4, #12
 810a350:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a354:	d015      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a356:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 810a35a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 810a35e:	3c0d      	subs	r4, #13
 810a360:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a364:	d00d      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a366:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 810a36a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 810a36e:	2c01      	cmp	r4, #1
 810a370:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a374:	d005      	beq.n	810a382 <forward_lite_dense_if32of32wf32+0x212>
 810a376:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 810a37a:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 810a37e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a382:	444a      	add	r2, r9
 810a384:	eca5 7a01 	vstmia	r5!, {s14}
 810a388:	42af      	cmp	r7, r5
 810a38a:	f63f af09 	bhi.w	810a1a0 <forward_lite_dense_if32of32wf32+0x30>
 810a38e:	b15b      	cbz	r3, 810a3a8 <forward_lite_dense_if32of32wf32+0x238>
 810a390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a392:	b14a      	cbz	r2, 810a3a8 <forward_lite_dense_if32of32wf32+0x238>
 810a394:	edd0 7a00 	vldr	s15, [r0]
 810a398:	ecb3 7a01 	vldmia	r3!, {s14}
 810a39c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810a3a0:	ece0 7a01 	vstmia	r0!, {s15}
 810a3a4:	4287      	cmp	r7, r0
 810a3a6:	d1f5      	bne.n	810a394 <forward_lite_dense_if32of32wf32+0x224>
 810a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a3ac:	4634      	mov	r4, r6
 810a3ae:	4696      	mov	lr, r2
 810a3b0:	468c      	mov	ip, r1
 810a3b2:	e76e      	b.n	810a292 <forward_lite_dense_if32of32wf32+0x122>
 810a3b4:	00000000 	.word	0x00000000

0810a3b8 <st_int8_copy>:
 810a3b8:	4288      	cmp	r0, r1
 810a3ba:	d057      	beq.n	810a46c <st_int8_copy+0xb4>
 810a3bc:	2a00      	cmp	r2, #0
 810a3be:	d055      	beq.n	810a46c <st_int8_copy+0xb4>
 810a3c0:	4288      	cmp	r0, r1
 810a3c2:	d354      	bcc.n	810a46e <st_int8_copy+0xb6>
 810a3c4:	078b      	lsls	r3, r1, #30
 810a3c6:	d102      	bne.n	810a3ce <st_int8_copy+0x16>
 810a3c8:	e009      	b.n	810a3de <st_int8_copy+0x26>
 810a3ca:	2a00      	cmp	r2, #0
 810a3cc:	d05c      	beq.n	810a488 <st_int8_copy+0xd0>
 810a3ce:	f910 3b01 	ldrsb.w	r3, [r0], #1
 810a3d2:	f801 3b01 	strb.w	r3, [r1], #1
 810a3d6:	078b      	lsls	r3, r1, #30
 810a3d8:	f102 32ff 	add.w	r2, r2, #4294967295
 810a3dc:	d1f5      	bne.n	810a3ca <st_int8_copy+0x12>
 810a3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a3e2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 810a3e6:	d069      	beq.n	810a4bc <st_int8_copy+0x104>
 810a3e8:	ea41 0300 	orr.w	r3, r1, r0
 810a3ec:	075b      	lsls	r3, r3, #29
 810a3ee:	d14c      	bne.n	810a48a <st_int8_copy+0xd2>
 810a3f0:	f10e 33ff 	add.w	r3, lr, #4294967295
 810a3f4:	2b01      	cmp	r3, #1
 810a3f6:	d948      	bls.n	810a48a <st_int8_copy+0xd2>
 810a3f8:	f100 0310 	add.w	r3, r0, #16
 810a3fc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 810a400:	f101 0c10 	add.w	ip, r1, #16
 810a404:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 810a408:	ed13 6b04 	vldr	d6, [r3, #-16]
 810a40c:	ed13 7b02 	vldr	d7, [r3, #-8]
 810a410:	3310      	adds	r3, #16
 810a412:	4573      	cmp	r3, lr
 810a414:	ed0c 6b04 	vstr	d6, [ip, #-16]
 810a418:	ed0c 7b02 	vstr	d7, [ip, #-8]
 810a41c:	f10c 0c10 	add.w	ip, ip, #16
 810a420:	d1f2      	bne.n	810a408 <st_int8_copy+0x50>
 810a422:	f3c2 0381 	ubfx	r3, r2, #2, #2
 810a426:	4421      	add	r1, r4
 810a428:	4420      	add	r0, r4
 810a42a:	f002 0203 	and.w	r2, r2, #3
 810a42e:	b16b      	cbz	r3, 810a44c <st_int8_copy+0x94>
 810a430:	6804      	ldr	r4, [r0, #0]
 810a432:	600c      	str	r4, [r1, #0]
 810a434:	1e5c      	subs	r4, r3, #1
 810a436:	d005      	beq.n	810a444 <st_int8_copy+0x8c>
 810a438:	6845      	ldr	r5, [r0, #4]
 810a43a:	604d      	str	r5, [r1, #4]
 810a43c:	2c01      	cmp	r4, #1
 810a43e:	bf1c      	itt	ne
 810a440:	6884      	ldrne	r4, [r0, #8]
 810a442:	608c      	strne	r4, [r1, #8]
 810a444:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 810a448:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 810a44c:	b162      	cbz	r2, 810a468 <st_int8_copy+0xb0>
 810a44e:	f990 3000 	ldrsb.w	r3, [r0]
 810a452:	700b      	strb	r3, [r1, #0]
 810a454:	3a01      	subs	r2, #1
 810a456:	d007      	beq.n	810a468 <st_int8_copy+0xb0>
 810a458:	f990 3001 	ldrsb.w	r3, [r0, #1]
 810a45c:	704b      	strb	r3, [r1, #1]
 810a45e:	2a01      	cmp	r2, #1
 810a460:	bf1c      	itt	ne
 810a462:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 810a466:	708b      	strbne	r3, [r1, #2]
 810a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a46c:	4770      	bx	lr
 810a46e:	1883      	adds	r3, r0, r2
 810a470:	428b      	cmp	r3, r1
 810a472:	d9a7      	bls.n	810a3c4 <st_int8_copy+0xc>
 810a474:	4283      	cmp	r3, r0
 810a476:	440a      	add	r2, r1
 810a478:	d9f8      	bls.n	810a46c <st_int8_copy+0xb4>
 810a47a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 810a47e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 810a482:	4283      	cmp	r3, r0
 810a484:	d1f9      	bne.n	810a47a <st_int8_copy+0xc2>
 810a486:	4770      	bx	lr
 810a488:	4770      	bx	lr
 810a48a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 810a48e:	460b      	mov	r3, r1
 810a490:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 810a494:	4684      	mov	ip, r0
 810a496:	f8dc 7000 	ldr.w	r7, [ip]
 810a49a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 810a49e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 810a4a2:	f8dc 800c 	ldr.w	r8, [ip, #12]
 810a4a6:	f8c3 800c 	str.w	r8, [r3, #12]
 810a4aa:	601f      	str	r7, [r3, #0]
 810a4ac:	605e      	str	r6, [r3, #4]
 810a4ae:	609d      	str	r5, [r3, #8]
 810a4b0:	3310      	adds	r3, #16
 810a4b2:	459e      	cmp	lr, r3
 810a4b4:	f10c 0c10 	add.w	ip, ip, #16
 810a4b8:	d1ed      	bne.n	810a496 <st_int8_copy+0xde>
 810a4ba:	e7b2      	b.n	810a422 <st_int8_copy+0x6a>
 810a4bc:	0893      	lsrs	r3, r2, #2
 810a4be:	f002 0203 	and.w	r2, r2, #3
 810a4c2:	e7b4      	b.n	810a42e <st_int8_copy+0x76>

0810a4c4 <ai_array_to_buffer_fmt>:
 810a4c4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 810a4c8:	2b02      	cmp	r3, #2
 810a4ca:	d050      	beq.n	810a56e <ai_array_to_buffer_fmt+0xaa>
 810a4cc:	4b2a      	ldr	r3, [pc, #168]	; (810a578 <ai_array_to_buffer_fmt+0xb4>)
 810a4ce:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 810a4d2:	429a      	cmp	r2, r3
 810a4d4:	d00b      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a4d6:	dc1c      	bgt.n	810a512 <ai_array_to_buffer_fmt+0x4e>
 810a4d8:	4b28      	ldr	r3, [pc, #160]	; (810a57c <ai_array_to_buffer_fmt+0xb8>)
 810a4da:	429a      	cmp	r2, r3
 810a4dc:	d007      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a4de:	dd0b      	ble.n	810a4f8 <ai_array_to_buffer_fmt+0x34>
 810a4e0:	4b27      	ldr	r3, [pc, #156]	; (810a580 <ai_array_to_buffer_fmt+0xbc>)
 810a4e2:	429a      	cmp	r2, r3
 810a4e4:	d003      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a4e6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 810a4ea:	429a      	cmp	r2, r3
 810a4ec:	d131      	bne.n	810a552 <ai_array_to_buffer_fmt+0x8e>
 810a4ee:	4613      	mov	r3, r2
 810a4f0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 810a4f4:	4318      	orrs	r0, r3
 810a4f6:	4770      	bx	lr
 810a4f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 810a4fc:	429a      	cmp	r2, r3
 810a4fe:	d0f6      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a500:	dd2c      	ble.n	810a55c <ai_array_to_buffer_fmt+0x98>
 810a502:	4b20      	ldr	r3, [pc, #128]	; (810a584 <ai_array_to_buffer_fmt+0xc0>)
 810a504:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 810a508:	429a      	cmp	r2, r3
 810a50a:	bf18      	it	ne
 810a50c:	2340      	movne	r3, #64	; 0x40
 810a50e:	4318      	orrs	r0, r3
 810a510:	4770      	bx	lr
 810a512:	4b1d      	ldr	r3, [pc, #116]	; (810a588 <ai_array_to_buffer_fmt+0xc4>)
 810a514:	429a      	cmp	r2, r3
 810a516:	d0ea      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a518:	dd0e      	ble.n	810a538 <ai_array_to_buffer_fmt+0x74>
 810a51a:	4b1c      	ldr	r3, [pc, #112]	; (810a58c <ai_array_to_buffer_fmt+0xc8>)
 810a51c:	429a      	cmp	r2, r3
 810a51e:	d0e6      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a520:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 810a524:	429a      	cmp	r2, r3
 810a526:	d0e2      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a528:	4b19      	ldr	r3, [pc, #100]	; (810a590 <ai_array_to_buffer_fmt+0xcc>)
 810a52a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 810a52e:	429a      	cmp	r2, r3
 810a530:	bf18      	it	ne
 810a532:	2340      	movne	r3, #64	; 0x40
 810a534:	4318      	orrs	r0, r3
 810a536:	4770      	bx	lr
 810a538:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 810a53c:	429a      	cmp	r2, r3
 810a53e:	d0d6      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a540:	3307      	adds	r3, #7
 810a542:	429a      	cmp	r2, r3
 810a544:	d0d3      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a546:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 810a54a:	429a      	cmp	r2, r3
 810a54c:	bf18      	it	ne
 810a54e:	2340      	movne	r3, #64	; 0x40
 810a550:	e7ce      	b.n	810a4f0 <ai_array_to_buffer_fmt+0x2c>
 810a552:	4b10      	ldr	r3, [pc, #64]	; (810a594 <ai_array_to_buffer_fmt+0xd0>)
 810a554:	429a      	cmp	r2, r3
 810a556:	bf18      	it	ne
 810a558:	2340      	movne	r3, #64	; 0x40
 810a55a:	e7c9      	b.n	810a4f0 <ai_array_to_buffer_fmt+0x2c>
 810a55c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 810a560:	429a      	cmp	r2, r3
 810a562:	d0c4      	beq.n	810a4ee <ai_array_to_buffer_fmt+0x2a>
 810a564:	3380      	adds	r3, #128	; 0x80
 810a566:	429a      	cmp	r2, r3
 810a568:	bf18      	it	ne
 810a56a:	2340      	movne	r3, #64	; 0x40
 810a56c:	e7c0      	b.n	810a4f0 <ai_array_to_buffer_fmt+0x2c>
 810a56e:	4b0a      	ldr	r3, [pc, #40]	; (810a598 <ai_array_to_buffer_fmt+0xd4>)
 810a570:	4003      	ands	r3, r0
 810a572:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810a576:	e7bb      	b.n	810a4f0 <ai_array_to_buffer_fmt+0x2c>
 810a578:	00840040 	.word	0x00840040
 810a57c:	00040840 	.word	0x00040840
 810a580:	00041040 	.word	0x00041040
 810a584:	00040447 	.word	0x00040447
 810a588:	00840840 	.word	0x00840840
 810a58c:	00841040 	.word	0x00841040
 810a590:	0084084f 	.word	0x0084084f
 810a594:	0004084f 	.word	0x0004084f
 810a598:	00803fff 	.word	0x00803fff

0810a59c <ai_array_get_byte_size>:
 810a59c:	b319      	cbz	r1, 810a5e6 <ai_array_get_byte_size+0x4a>
 810a59e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 810a5a2:	fb03 f101 	mul.w	r1, r3, r1
 810a5a6:	3107      	adds	r1, #7
 810a5a8:	f3c0 4243 	ubfx	r2, r0, #17, #4
 810a5ac:	f021 0307 	bic.w	r3, r1, #7
 810a5b0:	2a04      	cmp	r2, #4
 810a5b2:	f3c0 5141 	ubfx	r1, r0, #21, #2
 810a5b6:	fa23 f101 	lsr.w	r1, r3, r1
 810a5ba:	ea4f 10e0 	mov.w	r0, r0, asr #7
 810a5be:	d00b      	beq.n	810a5d8 <ai_array_get_byte_size+0x3c>
 810a5c0:	2a08      	cmp	r2, #8
 810a5c2:	d002      	beq.n	810a5ca <ai_array_get_byte_size+0x2e>
 810a5c4:	3107      	adds	r1, #7
 810a5c6:	08c8      	lsrs	r0, r1, #3
 810a5c8:	4770      	bx	lr
 810a5ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 810a5ce:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 810a5d2:	3107      	adds	r1, #7
 810a5d4:	08c8      	lsrs	r0, r1, #3
 810a5d6:	4770      	bx	lr
 810a5d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 810a5dc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 810a5e0:	3107      	adds	r1, #7
 810a5e2:	08c8      	lsrs	r0, r1, #3
 810a5e4:	4770      	bx	lr
 810a5e6:	4608      	mov	r0, r1
 810a5e8:	4770      	bx	lr
 810a5ea:	bf00      	nop

0810a5ec <ai_array_get_data_byte_size>:
 810a5ec:	b169      	cbz	r1, 810a60a <ai_array_get_data_byte_size+0x1e>
 810a5ee:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 810a5f2:	fb02 f101 	mul.w	r1, r2, r1
 810a5f6:	1dcb      	adds	r3, r1, #7
 810a5f8:	f023 0307 	bic.w	r3, r3, #7
 810a5fc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 810a600:	fa23 f000 	lsr.w	r0, r3, r0
 810a604:	3007      	adds	r0, #7
 810a606:	08c0      	lsrs	r0, r0, #3
 810a608:	4770      	bx	lr
 810a60a:	4608      	mov	r0, r1
 810a60c:	4770      	bx	lr
 810a60e:	bf00      	nop

0810a610 <ai_version_get>:
 810a610:	0212      	lsls	r2, r2, #8
 810a612:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810a616:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 810a61a:	4770      	bx	lr

0810a61c <get_tensor_byte_size>:
 810a61c:	b410      	push	{r4}
 810a61e:	6983      	ldr	r3, [r0, #24]
 810a620:	68c4      	ldr	r4, [r0, #12]
 810a622:	6941      	ldr	r1, [r0, #20]
 810a624:	681b      	ldr	r3, [r3, #0]
 810a626:	68e0      	ldr	r0, [r4, #12]
 810a628:	4a07      	ldr	r2, [pc, #28]	; (810a648 <get_tensor_byte_size+0x2c>)
 810a62a:	68c9      	ldr	r1, [r1, #12]
 810a62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a630:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 810a634:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 810a638:	fb01 f000 	mul.w	r0, r1, r0
 810a63c:	4293      	cmp	r3, r2
 810a63e:	bf04      	itt	eq
 810a640:	3007      	addeq	r0, #7
 810a642:	08c0      	lsreq	r0, r0, #3
 810a644:	4770      	bx	lr
 810a646:	bf00      	nop
 810a648:	000400c0 	.word	0x000400c0

0810a64c <malloc>:
 810a64c:	4b02      	ldr	r3, [pc, #8]	; (810a658 <malloc+0xc>)
 810a64e:	4601      	mov	r1, r0
 810a650:	6818      	ldr	r0, [r3, #0]
 810a652:	f000 b823 	b.w	810a69c <_malloc_r>
 810a656:	bf00      	nop
 810a658:	100009ec 	.word	0x100009ec

0810a65c <sbrk_aligned>:
 810a65c:	b570      	push	{r4, r5, r6, lr}
 810a65e:	4e0e      	ldr	r6, [pc, #56]	; (810a698 <sbrk_aligned+0x3c>)
 810a660:	460c      	mov	r4, r1
 810a662:	6831      	ldr	r1, [r6, #0]
 810a664:	4605      	mov	r5, r0
 810a666:	b911      	cbnz	r1, 810a66e <sbrk_aligned+0x12>
 810a668:	f001 f9b2 	bl	810b9d0 <_sbrk_r>
 810a66c:	6030      	str	r0, [r6, #0]
 810a66e:	4621      	mov	r1, r4
 810a670:	4628      	mov	r0, r5
 810a672:	f001 f9ad 	bl	810b9d0 <_sbrk_r>
 810a676:	1c43      	adds	r3, r0, #1
 810a678:	d00a      	beq.n	810a690 <sbrk_aligned+0x34>
 810a67a:	1cc4      	adds	r4, r0, #3
 810a67c:	f024 0403 	bic.w	r4, r4, #3
 810a680:	42a0      	cmp	r0, r4
 810a682:	d007      	beq.n	810a694 <sbrk_aligned+0x38>
 810a684:	1a21      	subs	r1, r4, r0
 810a686:	4628      	mov	r0, r5
 810a688:	f001 f9a2 	bl	810b9d0 <_sbrk_r>
 810a68c:	3001      	adds	r0, #1
 810a68e:	d101      	bne.n	810a694 <sbrk_aligned+0x38>
 810a690:	f04f 34ff 	mov.w	r4, #4294967295
 810a694:	4620      	mov	r0, r4
 810a696:	bd70      	pop	{r4, r5, r6, pc}
 810a698:	1001ab34 	.word	0x1001ab34

0810a69c <_malloc_r>:
 810a69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a6a0:	1ccd      	adds	r5, r1, #3
 810a6a2:	f025 0503 	bic.w	r5, r5, #3
 810a6a6:	3508      	adds	r5, #8
 810a6a8:	2d0c      	cmp	r5, #12
 810a6aa:	bf38      	it	cc
 810a6ac:	250c      	movcc	r5, #12
 810a6ae:	2d00      	cmp	r5, #0
 810a6b0:	4607      	mov	r7, r0
 810a6b2:	db01      	blt.n	810a6b8 <_malloc_r+0x1c>
 810a6b4:	42a9      	cmp	r1, r5
 810a6b6:	d905      	bls.n	810a6c4 <_malloc_r+0x28>
 810a6b8:	230c      	movs	r3, #12
 810a6ba:	603b      	str	r3, [r7, #0]
 810a6bc:	2600      	movs	r6, #0
 810a6be:	4630      	mov	r0, r6
 810a6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a6c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810a798 <_malloc_r+0xfc>
 810a6c8:	f000 f868 	bl	810a79c <__malloc_lock>
 810a6cc:	f8d8 3000 	ldr.w	r3, [r8]
 810a6d0:	461c      	mov	r4, r3
 810a6d2:	bb5c      	cbnz	r4, 810a72c <_malloc_r+0x90>
 810a6d4:	4629      	mov	r1, r5
 810a6d6:	4638      	mov	r0, r7
 810a6d8:	f7ff ffc0 	bl	810a65c <sbrk_aligned>
 810a6dc:	1c43      	adds	r3, r0, #1
 810a6de:	4604      	mov	r4, r0
 810a6e0:	d155      	bne.n	810a78e <_malloc_r+0xf2>
 810a6e2:	f8d8 4000 	ldr.w	r4, [r8]
 810a6e6:	4626      	mov	r6, r4
 810a6e8:	2e00      	cmp	r6, #0
 810a6ea:	d145      	bne.n	810a778 <_malloc_r+0xdc>
 810a6ec:	2c00      	cmp	r4, #0
 810a6ee:	d048      	beq.n	810a782 <_malloc_r+0xe6>
 810a6f0:	6823      	ldr	r3, [r4, #0]
 810a6f2:	4631      	mov	r1, r6
 810a6f4:	4638      	mov	r0, r7
 810a6f6:	eb04 0903 	add.w	r9, r4, r3
 810a6fa:	f001 f969 	bl	810b9d0 <_sbrk_r>
 810a6fe:	4581      	cmp	r9, r0
 810a700:	d13f      	bne.n	810a782 <_malloc_r+0xe6>
 810a702:	6821      	ldr	r1, [r4, #0]
 810a704:	1a6d      	subs	r5, r5, r1
 810a706:	4629      	mov	r1, r5
 810a708:	4638      	mov	r0, r7
 810a70a:	f7ff ffa7 	bl	810a65c <sbrk_aligned>
 810a70e:	3001      	adds	r0, #1
 810a710:	d037      	beq.n	810a782 <_malloc_r+0xe6>
 810a712:	6823      	ldr	r3, [r4, #0]
 810a714:	442b      	add	r3, r5
 810a716:	6023      	str	r3, [r4, #0]
 810a718:	f8d8 3000 	ldr.w	r3, [r8]
 810a71c:	2b00      	cmp	r3, #0
 810a71e:	d038      	beq.n	810a792 <_malloc_r+0xf6>
 810a720:	685a      	ldr	r2, [r3, #4]
 810a722:	42a2      	cmp	r2, r4
 810a724:	d12b      	bne.n	810a77e <_malloc_r+0xe2>
 810a726:	2200      	movs	r2, #0
 810a728:	605a      	str	r2, [r3, #4]
 810a72a:	e00f      	b.n	810a74c <_malloc_r+0xb0>
 810a72c:	6822      	ldr	r2, [r4, #0]
 810a72e:	1b52      	subs	r2, r2, r5
 810a730:	d41f      	bmi.n	810a772 <_malloc_r+0xd6>
 810a732:	2a0b      	cmp	r2, #11
 810a734:	d917      	bls.n	810a766 <_malloc_r+0xca>
 810a736:	1961      	adds	r1, r4, r5
 810a738:	42a3      	cmp	r3, r4
 810a73a:	6025      	str	r5, [r4, #0]
 810a73c:	bf18      	it	ne
 810a73e:	6059      	strne	r1, [r3, #4]
 810a740:	6863      	ldr	r3, [r4, #4]
 810a742:	bf08      	it	eq
 810a744:	f8c8 1000 	streq.w	r1, [r8]
 810a748:	5162      	str	r2, [r4, r5]
 810a74a:	604b      	str	r3, [r1, #4]
 810a74c:	4638      	mov	r0, r7
 810a74e:	f104 060b 	add.w	r6, r4, #11
 810a752:	f000 f829 	bl	810a7a8 <__malloc_unlock>
 810a756:	f026 0607 	bic.w	r6, r6, #7
 810a75a:	1d23      	adds	r3, r4, #4
 810a75c:	1af2      	subs	r2, r6, r3
 810a75e:	d0ae      	beq.n	810a6be <_malloc_r+0x22>
 810a760:	1b9b      	subs	r3, r3, r6
 810a762:	50a3      	str	r3, [r4, r2]
 810a764:	e7ab      	b.n	810a6be <_malloc_r+0x22>
 810a766:	42a3      	cmp	r3, r4
 810a768:	6862      	ldr	r2, [r4, #4]
 810a76a:	d1dd      	bne.n	810a728 <_malloc_r+0x8c>
 810a76c:	f8c8 2000 	str.w	r2, [r8]
 810a770:	e7ec      	b.n	810a74c <_malloc_r+0xb0>
 810a772:	4623      	mov	r3, r4
 810a774:	6864      	ldr	r4, [r4, #4]
 810a776:	e7ac      	b.n	810a6d2 <_malloc_r+0x36>
 810a778:	4634      	mov	r4, r6
 810a77a:	6876      	ldr	r6, [r6, #4]
 810a77c:	e7b4      	b.n	810a6e8 <_malloc_r+0x4c>
 810a77e:	4613      	mov	r3, r2
 810a780:	e7cc      	b.n	810a71c <_malloc_r+0x80>
 810a782:	230c      	movs	r3, #12
 810a784:	603b      	str	r3, [r7, #0]
 810a786:	4638      	mov	r0, r7
 810a788:	f000 f80e 	bl	810a7a8 <__malloc_unlock>
 810a78c:	e797      	b.n	810a6be <_malloc_r+0x22>
 810a78e:	6025      	str	r5, [r4, #0]
 810a790:	e7dc      	b.n	810a74c <_malloc_r+0xb0>
 810a792:	605b      	str	r3, [r3, #4]
 810a794:	deff      	udf	#255	; 0xff
 810a796:	bf00      	nop
 810a798:	1001ab30 	.word	0x1001ab30

0810a79c <__malloc_lock>:
 810a79c:	4801      	ldr	r0, [pc, #4]	; (810a7a4 <__malloc_lock+0x8>)
 810a79e:	f001 b964 	b.w	810ba6a <__retarget_lock_acquire_recursive>
 810a7a2:	bf00      	nop
 810a7a4:	1001ac78 	.word	0x1001ac78

0810a7a8 <__malloc_unlock>:
 810a7a8:	4801      	ldr	r0, [pc, #4]	; (810a7b0 <__malloc_unlock+0x8>)
 810a7aa:	f001 b95f 	b.w	810ba6c <__retarget_lock_release_recursive>
 810a7ae:	bf00      	nop
 810a7b0:	1001ac78 	.word	0x1001ac78

0810a7b4 <_realloc_r>:
 810a7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a7b8:	4680      	mov	r8, r0
 810a7ba:	4614      	mov	r4, r2
 810a7bc:	460e      	mov	r6, r1
 810a7be:	b921      	cbnz	r1, 810a7ca <_realloc_r+0x16>
 810a7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a7c4:	4611      	mov	r1, r2
 810a7c6:	f7ff bf69 	b.w	810a69c <_malloc_r>
 810a7ca:	b92a      	cbnz	r2, 810a7d8 <_realloc_r+0x24>
 810a7cc:	f001 ffde 	bl	810c78c <_free_r>
 810a7d0:	4625      	mov	r5, r4
 810a7d2:	4628      	mov	r0, r5
 810a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a7d8:	f002 fcd1 	bl	810d17e <_malloc_usable_size_r>
 810a7dc:	4284      	cmp	r4, r0
 810a7de:	4607      	mov	r7, r0
 810a7e0:	d802      	bhi.n	810a7e8 <_realloc_r+0x34>
 810a7e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810a7e6:	d812      	bhi.n	810a80e <_realloc_r+0x5a>
 810a7e8:	4621      	mov	r1, r4
 810a7ea:	4640      	mov	r0, r8
 810a7ec:	f7ff ff56 	bl	810a69c <_malloc_r>
 810a7f0:	4605      	mov	r5, r0
 810a7f2:	2800      	cmp	r0, #0
 810a7f4:	d0ed      	beq.n	810a7d2 <_realloc_r+0x1e>
 810a7f6:	42bc      	cmp	r4, r7
 810a7f8:	4622      	mov	r2, r4
 810a7fa:	4631      	mov	r1, r6
 810a7fc:	bf28      	it	cs
 810a7fe:	463a      	movcs	r2, r7
 810a800:	f001 f935 	bl	810ba6e <memcpy>
 810a804:	4631      	mov	r1, r6
 810a806:	4640      	mov	r0, r8
 810a808:	f001 ffc0 	bl	810c78c <_free_r>
 810a80c:	e7e1      	b.n	810a7d2 <_realloc_r+0x1e>
 810a80e:	4635      	mov	r5, r6
 810a810:	e7df      	b.n	810a7d2 <_realloc_r+0x1e>

0810a812 <__cvt>:
 810a812:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a816:	ec55 4b10 	vmov	r4, r5, d0
 810a81a:	2d00      	cmp	r5, #0
 810a81c:	460e      	mov	r6, r1
 810a81e:	4619      	mov	r1, r3
 810a820:	462b      	mov	r3, r5
 810a822:	bfbb      	ittet	lt
 810a824:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810a828:	461d      	movlt	r5, r3
 810a82a:	2300      	movge	r3, #0
 810a82c:	232d      	movlt	r3, #45	; 0x2d
 810a82e:	700b      	strb	r3, [r1, #0]
 810a830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a832:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810a836:	4691      	mov	r9, r2
 810a838:	f023 0820 	bic.w	r8, r3, #32
 810a83c:	bfbc      	itt	lt
 810a83e:	4622      	movlt	r2, r4
 810a840:	4614      	movlt	r4, r2
 810a842:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a846:	d005      	beq.n	810a854 <__cvt+0x42>
 810a848:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810a84c:	d100      	bne.n	810a850 <__cvt+0x3e>
 810a84e:	3601      	adds	r6, #1
 810a850:	2102      	movs	r1, #2
 810a852:	e000      	b.n	810a856 <__cvt+0x44>
 810a854:	2103      	movs	r1, #3
 810a856:	ab03      	add	r3, sp, #12
 810a858:	9301      	str	r3, [sp, #4]
 810a85a:	ab02      	add	r3, sp, #8
 810a85c:	9300      	str	r3, [sp, #0]
 810a85e:	ec45 4b10 	vmov	d0, r4, r5
 810a862:	4653      	mov	r3, sl
 810a864:	4632      	mov	r2, r6
 810a866:	f001 f99f 	bl	810bba8 <_dtoa_r>
 810a86a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810a86e:	4607      	mov	r7, r0
 810a870:	d102      	bne.n	810a878 <__cvt+0x66>
 810a872:	f019 0f01 	tst.w	r9, #1
 810a876:	d022      	beq.n	810a8be <__cvt+0xac>
 810a878:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a87c:	eb07 0906 	add.w	r9, r7, r6
 810a880:	d110      	bne.n	810a8a4 <__cvt+0x92>
 810a882:	783b      	ldrb	r3, [r7, #0]
 810a884:	2b30      	cmp	r3, #48	; 0x30
 810a886:	d10a      	bne.n	810a89e <__cvt+0x8c>
 810a888:	2200      	movs	r2, #0
 810a88a:	2300      	movs	r3, #0
 810a88c:	4620      	mov	r0, r4
 810a88e:	4629      	mov	r1, r5
 810a890:	f7f6 f9a2 	bl	8100bd8 <__aeabi_dcmpeq>
 810a894:	b918      	cbnz	r0, 810a89e <__cvt+0x8c>
 810a896:	f1c6 0601 	rsb	r6, r6, #1
 810a89a:	f8ca 6000 	str.w	r6, [sl]
 810a89e:	f8da 3000 	ldr.w	r3, [sl]
 810a8a2:	4499      	add	r9, r3
 810a8a4:	2200      	movs	r2, #0
 810a8a6:	2300      	movs	r3, #0
 810a8a8:	4620      	mov	r0, r4
 810a8aa:	4629      	mov	r1, r5
 810a8ac:	f7f6 f994 	bl	8100bd8 <__aeabi_dcmpeq>
 810a8b0:	b108      	cbz	r0, 810a8b6 <__cvt+0xa4>
 810a8b2:	f8cd 900c 	str.w	r9, [sp, #12]
 810a8b6:	2230      	movs	r2, #48	; 0x30
 810a8b8:	9b03      	ldr	r3, [sp, #12]
 810a8ba:	454b      	cmp	r3, r9
 810a8bc:	d307      	bcc.n	810a8ce <__cvt+0xbc>
 810a8be:	9b03      	ldr	r3, [sp, #12]
 810a8c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a8c2:	1bdb      	subs	r3, r3, r7
 810a8c4:	4638      	mov	r0, r7
 810a8c6:	6013      	str	r3, [r2, #0]
 810a8c8:	b004      	add	sp, #16
 810a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a8ce:	1c59      	adds	r1, r3, #1
 810a8d0:	9103      	str	r1, [sp, #12]
 810a8d2:	701a      	strb	r2, [r3, #0]
 810a8d4:	e7f0      	b.n	810a8b8 <__cvt+0xa6>

0810a8d6 <__exponent>:
 810a8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810a8d8:	4603      	mov	r3, r0
 810a8da:	2900      	cmp	r1, #0
 810a8dc:	bfb8      	it	lt
 810a8de:	4249      	neglt	r1, r1
 810a8e0:	f803 2b02 	strb.w	r2, [r3], #2
 810a8e4:	bfb4      	ite	lt
 810a8e6:	222d      	movlt	r2, #45	; 0x2d
 810a8e8:	222b      	movge	r2, #43	; 0x2b
 810a8ea:	2909      	cmp	r1, #9
 810a8ec:	7042      	strb	r2, [r0, #1]
 810a8ee:	dd2a      	ble.n	810a946 <__exponent+0x70>
 810a8f0:	f10d 0207 	add.w	r2, sp, #7
 810a8f4:	4617      	mov	r7, r2
 810a8f6:	260a      	movs	r6, #10
 810a8f8:	4694      	mov	ip, r2
 810a8fa:	fb91 f5f6 	sdiv	r5, r1, r6
 810a8fe:	fb06 1415 	mls	r4, r6, r5, r1
 810a902:	3430      	adds	r4, #48	; 0x30
 810a904:	f80c 4c01 	strb.w	r4, [ip, #-1]
 810a908:	460c      	mov	r4, r1
 810a90a:	2c63      	cmp	r4, #99	; 0x63
 810a90c:	f102 32ff 	add.w	r2, r2, #4294967295
 810a910:	4629      	mov	r1, r5
 810a912:	dcf1      	bgt.n	810a8f8 <__exponent+0x22>
 810a914:	3130      	adds	r1, #48	; 0x30
 810a916:	f1ac 0402 	sub.w	r4, ip, #2
 810a91a:	f802 1c01 	strb.w	r1, [r2, #-1]
 810a91e:	1c41      	adds	r1, r0, #1
 810a920:	4622      	mov	r2, r4
 810a922:	42ba      	cmp	r2, r7
 810a924:	d30a      	bcc.n	810a93c <__exponent+0x66>
 810a926:	f10d 0209 	add.w	r2, sp, #9
 810a92a:	eba2 020c 	sub.w	r2, r2, ip
 810a92e:	42bc      	cmp	r4, r7
 810a930:	bf88      	it	hi
 810a932:	2200      	movhi	r2, #0
 810a934:	4413      	add	r3, r2
 810a936:	1a18      	subs	r0, r3, r0
 810a938:	b003      	add	sp, #12
 810a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a93c:	f812 5b01 	ldrb.w	r5, [r2], #1
 810a940:	f801 5f01 	strb.w	r5, [r1, #1]!
 810a944:	e7ed      	b.n	810a922 <__exponent+0x4c>
 810a946:	2330      	movs	r3, #48	; 0x30
 810a948:	3130      	adds	r1, #48	; 0x30
 810a94a:	7083      	strb	r3, [r0, #2]
 810a94c:	70c1      	strb	r1, [r0, #3]
 810a94e:	1d03      	adds	r3, r0, #4
 810a950:	e7f1      	b.n	810a936 <__exponent+0x60>
	...

0810a954 <_printf_float>:
 810a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a958:	ed2d 8b02 	vpush	{d8}
 810a95c:	b08d      	sub	sp, #52	; 0x34
 810a95e:	460c      	mov	r4, r1
 810a960:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810a964:	4616      	mov	r6, r2
 810a966:	461f      	mov	r7, r3
 810a968:	4605      	mov	r5, r0
 810a96a:	f000 fff9 	bl	810b960 <_localeconv_r>
 810a96e:	f8d0 a000 	ldr.w	sl, [r0]
 810a972:	4650      	mov	r0, sl
 810a974:	f7f5 fd04 	bl	8100380 <strlen>
 810a978:	2300      	movs	r3, #0
 810a97a:	930a      	str	r3, [sp, #40]	; 0x28
 810a97c:	6823      	ldr	r3, [r4, #0]
 810a97e:	9305      	str	r3, [sp, #20]
 810a980:	f8d8 3000 	ldr.w	r3, [r8]
 810a984:	f894 b018 	ldrb.w	fp, [r4, #24]
 810a988:	3307      	adds	r3, #7
 810a98a:	f023 0307 	bic.w	r3, r3, #7
 810a98e:	f103 0208 	add.w	r2, r3, #8
 810a992:	f8c8 2000 	str.w	r2, [r8]
 810a996:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a99a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a99e:	9307      	str	r3, [sp, #28]
 810a9a0:	f8cd 8018 	str.w	r8, [sp, #24]
 810a9a4:	ee08 0a10 	vmov	s16, r0
 810a9a8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 810a9ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a9b0:	4b9e      	ldr	r3, [pc, #632]	; (810ac2c <_printf_float+0x2d8>)
 810a9b2:	f04f 32ff 	mov.w	r2, #4294967295
 810a9b6:	f7f6 f941 	bl	8100c3c <__aeabi_dcmpun>
 810a9ba:	bb88      	cbnz	r0, 810aa20 <_printf_float+0xcc>
 810a9bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a9c0:	4b9a      	ldr	r3, [pc, #616]	; (810ac2c <_printf_float+0x2d8>)
 810a9c2:	f04f 32ff 	mov.w	r2, #4294967295
 810a9c6:	f7f6 f91b 	bl	8100c00 <__aeabi_dcmple>
 810a9ca:	bb48      	cbnz	r0, 810aa20 <_printf_float+0xcc>
 810a9cc:	2200      	movs	r2, #0
 810a9ce:	2300      	movs	r3, #0
 810a9d0:	4640      	mov	r0, r8
 810a9d2:	4649      	mov	r1, r9
 810a9d4:	f7f6 f90a 	bl	8100bec <__aeabi_dcmplt>
 810a9d8:	b110      	cbz	r0, 810a9e0 <_printf_float+0x8c>
 810a9da:	232d      	movs	r3, #45	; 0x2d
 810a9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a9e0:	4a93      	ldr	r2, [pc, #588]	; (810ac30 <_printf_float+0x2dc>)
 810a9e2:	4b94      	ldr	r3, [pc, #592]	; (810ac34 <_printf_float+0x2e0>)
 810a9e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810a9e8:	bf94      	ite	ls
 810a9ea:	4690      	movls	r8, r2
 810a9ec:	4698      	movhi	r8, r3
 810a9ee:	2303      	movs	r3, #3
 810a9f0:	6123      	str	r3, [r4, #16]
 810a9f2:	9b05      	ldr	r3, [sp, #20]
 810a9f4:	f023 0304 	bic.w	r3, r3, #4
 810a9f8:	6023      	str	r3, [r4, #0]
 810a9fa:	f04f 0900 	mov.w	r9, #0
 810a9fe:	9700      	str	r7, [sp, #0]
 810aa00:	4633      	mov	r3, r6
 810aa02:	aa0b      	add	r2, sp, #44	; 0x2c
 810aa04:	4621      	mov	r1, r4
 810aa06:	4628      	mov	r0, r5
 810aa08:	f000 f9da 	bl	810adc0 <_printf_common>
 810aa0c:	3001      	adds	r0, #1
 810aa0e:	f040 8090 	bne.w	810ab32 <_printf_float+0x1de>
 810aa12:	f04f 30ff 	mov.w	r0, #4294967295
 810aa16:	b00d      	add	sp, #52	; 0x34
 810aa18:	ecbd 8b02 	vpop	{d8}
 810aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aa20:	4642      	mov	r2, r8
 810aa22:	464b      	mov	r3, r9
 810aa24:	4640      	mov	r0, r8
 810aa26:	4649      	mov	r1, r9
 810aa28:	f7f6 f908 	bl	8100c3c <__aeabi_dcmpun>
 810aa2c:	b140      	cbz	r0, 810aa40 <_printf_float+0xec>
 810aa2e:	464b      	mov	r3, r9
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	bfbc      	itt	lt
 810aa34:	232d      	movlt	r3, #45	; 0x2d
 810aa36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810aa3a:	4a7f      	ldr	r2, [pc, #508]	; (810ac38 <_printf_float+0x2e4>)
 810aa3c:	4b7f      	ldr	r3, [pc, #508]	; (810ac3c <_printf_float+0x2e8>)
 810aa3e:	e7d1      	b.n	810a9e4 <_printf_float+0x90>
 810aa40:	6863      	ldr	r3, [r4, #4]
 810aa42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810aa46:	9206      	str	r2, [sp, #24]
 810aa48:	1c5a      	adds	r2, r3, #1
 810aa4a:	d13f      	bne.n	810aacc <_printf_float+0x178>
 810aa4c:	2306      	movs	r3, #6
 810aa4e:	6063      	str	r3, [r4, #4]
 810aa50:	9b05      	ldr	r3, [sp, #20]
 810aa52:	6861      	ldr	r1, [r4, #4]
 810aa54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810aa58:	2300      	movs	r3, #0
 810aa5a:	9303      	str	r3, [sp, #12]
 810aa5c:	ab0a      	add	r3, sp, #40	; 0x28
 810aa5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 810aa62:	ab09      	add	r3, sp, #36	; 0x24
 810aa64:	ec49 8b10 	vmov	d0, r8, r9
 810aa68:	9300      	str	r3, [sp, #0]
 810aa6a:	6022      	str	r2, [r4, #0]
 810aa6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810aa70:	4628      	mov	r0, r5
 810aa72:	f7ff fece 	bl	810a812 <__cvt>
 810aa76:	9b06      	ldr	r3, [sp, #24]
 810aa78:	9909      	ldr	r1, [sp, #36]	; 0x24
 810aa7a:	2b47      	cmp	r3, #71	; 0x47
 810aa7c:	4680      	mov	r8, r0
 810aa7e:	d108      	bne.n	810aa92 <_printf_float+0x13e>
 810aa80:	1cc8      	adds	r0, r1, #3
 810aa82:	db02      	blt.n	810aa8a <_printf_float+0x136>
 810aa84:	6863      	ldr	r3, [r4, #4]
 810aa86:	4299      	cmp	r1, r3
 810aa88:	dd41      	ble.n	810ab0e <_printf_float+0x1ba>
 810aa8a:	f1ab 0302 	sub.w	r3, fp, #2
 810aa8e:	fa5f fb83 	uxtb.w	fp, r3
 810aa92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810aa96:	d820      	bhi.n	810aada <_printf_float+0x186>
 810aa98:	3901      	subs	r1, #1
 810aa9a:	465a      	mov	r2, fp
 810aa9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810aaa0:	9109      	str	r1, [sp, #36]	; 0x24
 810aaa2:	f7ff ff18 	bl	810a8d6 <__exponent>
 810aaa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810aaa8:	1813      	adds	r3, r2, r0
 810aaaa:	2a01      	cmp	r2, #1
 810aaac:	4681      	mov	r9, r0
 810aaae:	6123      	str	r3, [r4, #16]
 810aab0:	dc02      	bgt.n	810aab8 <_printf_float+0x164>
 810aab2:	6822      	ldr	r2, [r4, #0]
 810aab4:	07d2      	lsls	r2, r2, #31
 810aab6:	d501      	bpl.n	810aabc <_printf_float+0x168>
 810aab8:	3301      	adds	r3, #1
 810aaba:	6123      	str	r3, [r4, #16]
 810aabc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810aac0:	2b00      	cmp	r3, #0
 810aac2:	d09c      	beq.n	810a9fe <_printf_float+0xaa>
 810aac4:	232d      	movs	r3, #45	; 0x2d
 810aac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810aaca:	e798      	b.n	810a9fe <_printf_float+0xaa>
 810aacc:	9a06      	ldr	r2, [sp, #24]
 810aace:	2a47      	cmp	r2, #71	; 0x47
 810aad0:	d1be      	bne.n	810aa50 <_printf_float+0xfc>
 810aad2:	2b00      	cmp	r3, #0
 810aad4:	d1bc      	bne.n	810aa50 <_printf_float+0xfc>
 810aad6:	2301      	movs	r3, #1
 810aad8:	e7b9      	b.n	810aa4e <_printf_float+0xfa>
 810aada:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810aade:	d118      	bne.n	810ab12 <_printf_float+0x1be>
 810aae0:	2900      	cmp	r1, #0
 810aae2:	6863      	ldr	r3, [r4, #4]
 810aae4:	dd0b      	ble.n	810aafe <_printf_float+0x1aa>
 810aae6:	6121      	str	r1, [r4, #16]
 810aae8:	b913      	cbnz	r3, 810aaf0 <_printf_float+0x19c>
 810aaea:	6822      	ldr	r2, [r4, #0]
 810aaec:	07d0      	lsls	r0, r2, #31
 810aaee:	d502      	bpl.n	810aaf6 <_printf_float+0x1a2>
 810aaf0:	3301      	adds	r3, #1
 810aaf2:	440b      	add	r3, r1
 810aaf4:	6123      	str	r3, [r4, #16]
 810aaf6:	65a1      	str	r1, [r4, #88]	; 0x58
 810aaf8:	f04f 0900 	mov.w	r9, #0
 810aafc:	e7de      	b.n	810aabc <_printf_float+0x168>
 810aafe:	b913      	cbnz	r3, 810ab06 <_printf_float+0x1b2>
 810ab00:	6822      	ldr	r2, [r4, #0]
 810ab02:	07d2      	lsls	r2, r2, #31
 810ab04:	d501      	bpl.n	810ab0a <_printf_float+0x1b6>
 810ab06:	3302      	adds	r3, #2
 810ab08:	e7f4      	b.n	810aaf4 <_printf_float+0x1a0>
 810ab0a:	2301      	movs	r3, #1
 810ab0c:	e7f2      	b.n	810aaf4 <_printf_float+0x1a0>
 810ab0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810ab12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ab14:	4299      	cmp	r1, r3
 810ab16:	db05      	blt.n	810ab24 <_printf_float+0x1d0>
 810ab18:	6823      	ldr	r3, [r4, #0]
 810ab1a:	6121      	str	r1, [r4, #16]
 810ab1c:	07d8      	lsls	r0, r3, #31
 810ab1e:	d5ea      	bpl.n	810aaf6 <_printf_float+0x1a2>
 810ab20:	1c4b      	adds	r3, r1, #1
 810ab22:	e7e7      	b.n	810aaf4 <_printf_float+0x1a0>
 810ab24:	2900      	cmp	r1, #0
 810ab26:	bfd4      	ite	le
 810ab28:	f1c1 0202 	rsble	r2, r1, #2
 810ab2c:	2201      	movgt	r2, #1
 810ab2e:	4413      	add	r3, r2
 810ab30:	e7e0      	b.n	810aaf4 <_printf_float+0x1a0>
 810ab32:	6823      	ldr	r3, [r4, #0]
 810ab34:	055a      	lsls	r2, r3, #21
 810ab36:	d407      	bmi.n	810ab48 <_printf_float+0x1f4>
 810ab38:	6923      	ldr	r3, [r4, #16]
 810ab3a:	4642      	mov	r2, r8
 810ab3c:	4631      	mov	r1, r6
 810ab3e:	4628      	mov	r0, r5
 810ab40:	47b8      	blx	r7
 810ab42:	3001      	adds	r0, #1
 810ab44:	d12c      	bne.n	810aba0 <_printf_float+0x24c>
 810ab46:	e764      	b.n	810aa12 <_printf_float+0xbe>
 810ab48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810ab4c:	f240 80e0 	bls.w	810ad10 <_printf_float+0x3bc>
 810ab50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ab54:	2200      	movs	r2, #0
 810ab56:	2300      	movs	r3, #0
 810ab58:	f7f6 f83e 	bl	8100bd8 <__aeabi_dcmpeq>
 810ab5c:	2800      	cmp	r0, #0
 810ab5e:	d034      	beq.n	810abca <_printf_float+0x276>
 810ab60:	4a37      	ldr	r2, [pc, #220]	; (810ac40 <_printf_float+0x2ec>)
 810ab62:	2301      	movs	r3, #1
 810ab64:	4631      	mov	r1, r6
 810ab66:	4628      	mov	r0, r5
 810ab68:	47b8      	blx	r7
 810ab6a:	3001      	adds	r0, #1
 810ab6c:	f43f af51 	beq.w	810aa12 <_printf_float+0xbe>
 810ab70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ab74:	429a      	cmp	r2, r3
 810ab76:	db02      	blt.n	810ab7e <_printf_float+0x22a>
 810ab78:	6823      	ldr	r3, [r4, #0]
 810ab7a:	07d8      	lsls	r0, r3, #31
 810ab7c:	d510      	bpl.n	810aba0 <_printf_float+0x24c>
 810ab7e:	ee18 3a10 	vmov	r3, s16
 810ab82:	4652      	mov	r2, sl
 810ab84:	4631      	mov	r1, r6
 810ab86:	4628      	mov	r0, r5
 810ab88:	47b8      	blx	r7
 810ab8a:	3001      	adds	r0, #1
 810ab8c:	f43f af41 	beq.w	810aa12 <_printf_float+0xbe>
 810ab90:	f04f 0800 	mov.w	r8, #0
 810ab94:	f104 091a 	add.w	r9, r4, #26
 810ab98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ab9a:	3b01      	subs	r3, #1
 810ab9c:	4543      	cmp	r3, r8
 810ab9e:	dc09      	bgt.n	810abb4 <_printf_float+0x260>
 810aba0:	6823      	ldr	r3, [r4, #0]
 810aba2:	079b      	lsls	r3, r3, #30
 810aba4:	f100 8107 	bmi.w	810adb6 <_printf_float+0x462>
 810aba8:	68e0      	ldr	r0, [r4, #12]
 810abaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810abac:	4298      	cmp	r0, r3
 810abae:	bfb8      	it	lt
 810abb0:	4618      	movlt	r0, r3
 810abb2:	e730      	b.n	810aa16 <_printf_float+0xc2>
 810abb4:	2301      	movs	r3, #1
 810abb6:	464a      	mov	r2, r9
 810abb8:	4631      	mov	r1, r6
 810abba:	4628      	mov	r0, r5
 810abbc:	47b8      	blx	r7
 810abbe:	3001      	adds	r0, #1
 810abc0:	f43f af27 	beq.w	810aa12 <_printf_float+0xbe>
 810abc4:	f108 0801 	add.w	r8, r8, #1
 810abc8:	e7e6      	b.n	810ab98 <_printf_float+0x244>
 810abca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810abcc:	2b00      	cmp	r3, #0
 810abce:	dc39      	bgt.n	810ac44 <_printf_float+0x2f0>
 810abd0:	4a1b      	ldr	r2, [pc, #108]	; (810ac40 <_printf_float+0x2ec>)
 810abd2:	2301      	movs	r3, #1
 810abd4:	4631      	mov	r1, r6
 810abd6:	4628      	mov	r0, r5
 810abd8:	47b8      	blx	r7
 810abda:	3001      	adds	r0, #1
 810abdc:	f43f af19 	beq.w	810aa12 <_printf_float+0xbe>
 810abe0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810abe4:	4313      	orrs	r3, r2
 810abe6:	d102      	bne.n	810abee <_printf_float+0x29a>
 810abe8:	6823      	ldr	r3, [r4, #0]
 810abea:	07d9      	lsls	r1, r3, #31
 810abec:	d5d8      	bpl.n	810aba0 <_printf_float+0x24c>
 810abee:	ee18 3a10 	vmov	r3, s16
 810abf2:	4652      	mov	r2, sl
 810abf4:	4631      	mov	r1, r6
 810abf6:	4628      	mov	r0, r5
 810abf8:	47b8      	blx	r7
 810abfa:	3001      	adds	r0, #1
 810abfc:	f43f af09 	beq.w	810aa12 <_printf_float+0xbe>
 810ac00:	f04f 0900 	mov.w	r9, #0
 810ac04:	f104 0a1a 	add.w	sl, r4, #26
 810ac08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ac0a:	425b      	negs	r3, r3
 810ac0c:	454b      	cmp	r3, r9
 810ac0e:	dc01      	bgt.n	810ac14 <_printf_float+0x2c0>
 810ac10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ac12:	e792      	b.n	810ab3a <_printf_float+0x1e6>
 810ac14:	2301      	movs	r3, #1
 810ac16:	4652      	mov	r2, sl
 810ac18:	4631      	mov	r1, r6
 810ac1a:	4628      	mov	r0, r5
 810ac1c:	47b8      	blx	r7
 810ac1e:	3001      	adds	r0, #1
 810ac20:	f43f aef7 	beq.w	810aa12 <_printf_float+0xbe>
 810ac24:	f109 0901 	add.w	r9, r9, #1
 810ac28:	e7ee      	b.n	810ac08 <_printf_float+0x2b4>
 810ac2a:	bf00      	nop
 810ac2c:	7fefffff 	.word	0x7fefffff
 810ac30:	081ec2a0 	.word	0x081ec2a0
 810ac34:	081ec2a4 	.word	0x081ec2a4
 810ac38:	081ec2a8 	.word	0x081ec2a8
 810ac3c:	081ec2ac 	.word	0x081ec2ac
 810ac40:	081ec2b0 	.word	0x081ec2b0
 810ac44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ac46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810ac48:	429a      	cmp	r2, r3
 810ac4a:	bfa8      	it	ge
 810ac4c:	461a      	movge	r2, r3
 810ac4e:	2a00      	cmp	r2, #0
 810ac50:	4691      	mov	r9, r2
 810ac52:	dc37      	bgt.n	810acc4 <_printf_float+0x370>
 810ac54:	f04f 0b00 	mov.w	fp, #0
 810ac58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810ac5c:	f104 021a 	add.w	r2, r4, #26
 810ac60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810ac62:	9305      	str	r3, [sp, #20]
 810ac64:	eba3 0309 	sub.w	r3, r3, r9
 810ac68:	455b      	cmp	r3, fp
 810ac6a:	dc33      	bgt.n	810acd4 <_printf_float+0x380>
 810ac6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ac70:	429a      	cmp	r2, r3
 810ac72:	db3b      	blt.n	810acec <_printf_float+0x398>
 810ac74:	6823      	ldr	r3, [r4, #0]
 810ac76:	07da      	lsls	r2, r3, #31
 810ac78:	d438      	bmi.n	810acec <_printf_float+0x398>
 810ac7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810ac7e:	eba2 0903 	sub.w	r9, r2, r3
 810ac82:	9b05      	ldr	r3, [sp, #20]
 810ac84:	1ad2      	subs	r2, r2, r3
 810ac86:	4591      	cmp	r9, r2
 810ac88:	bfa8      	it	ge
 810ac8a:	4691      	movge	r9, r2
 810ac8c:	f1b9 0f00 	cmp.w	r9, #0
 810ac90:	dc35      	bgt.n	810acfe <_printf_float+0x3aa>
 810ac92:	f04f 0800 	mov.w	r8, #0
 810ac96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810ac9a:	f104 0a1a 	add.w	sl, r4, #26
 810ac9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810aca2:	1a9b      	subs	r3, r3, r2
 810aca4:	eba3 0309 	sub.w	r3, r3, r9
 810aca8:	4543      	cmp	r3, r8
 810acaa:	f77f af79 	ble.w	810aba0 <_printf_float+0x24c>
 810acae:	2301      	movs	r3, #1
 810acb0:	4652      	mov	r2, sl
 810acb2:	4631      	mov	r1, r6
 810acb4:	4628      	mov	r0, r5
 810acb6:	47b8      	blx	r7
 810acb8:	3001      	adds	r0, #1
 810acba:	f43f aeaa 	beq.w	810aa12 <_printf_float+0xbe>
 810acbe:	f108 0801 	add.w	r8, r8, #1
 810acc2:	e7ec      	b.n	810ac9e <_printf_float+0x34a>
 810acc4:	4613      	mov	r3, r2
 810acc6:	4631      	mov	r1, r6
 810acc8:	4642      	mov	r2, r8
 810acca:	4628      	mov	r0, r5
 810accc:	47b8      	blx	r7
 810acce:	3001      	adds	r0, #1
 810acd0:	d1c0      	bne.n	810ac54 <_printf_float+0x300>
 810acd2:	e69e      	b.n	810aa12 <_printf_float+0xbe>
 810acd4:	2301      	movs	r3, #1
 810acd6:	4631      	mov	r1, r6
 810acd8:	4628      	mov	r0, r5
 810acda:	9205      	str	r2, [sp, #20]
 810acdc:	47b8      	blx	r7
 810acde:	3001      	adds	r0, #1
 810ace0:	f43f ae97 	beq.w	810aa12 <_printf_float+0xbe>
 810ace4:	9a05      	ldr	r2, [sp, #20]
 810ace6:	f10b 0b01 	add.w	fp, fp, #1
 810acea:	e7b9      	b.n	810ac60 <_printf_float+0x30c>
 810acec:	ee18 3a10 	vmov	r3, s16
 810acf0:	4652      	mov	r2, sl
 810acf2:	4631      	mov	r1, r6
 810acf4:	4628      	mov	r0, r5
 810acf6:	47b8      	blx	r7
 810acf8:	3001      	adds	r0, #1
 810acfa:	d1be      	bne.n	810ac7a <_printf_float+0x326>
 810acfc:	e689      	b.n	810aa12 <_printf_float+0xbe>
 810acfe:	9a05      	ldr	r2, [sp, #20]
 810ad00:	464b      	mov	r3, r9
 810ad02:	4442      	add	r2, r8
 810ad04:	4631      	mov	r1, r6
 810ad06:	4628      	mov	r0, r5
 810ad08:	47b8      	blx	r7
 810ad0a:	3001      	adds	r0, #1
 810ad0c:	d1c1      	bne.n	810ac92 <_printf_float+0x33e>
 810ad0e:	e680      	b.n	810aa12 <_printf_float+0xbe>
 810ad10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ad12:	2a01      	cmp	r2, #1
 810ad14:	dc01      	bgt.n	810ad1a <_printf_float+0x3c6>
 810ad16:	07db      	lsls	r3, r3, #31
 810ad18:	d53a      	bpl.n	810ad90 <_printf_float+0x43c>
 810ad1a:	2301      	movs	r3, #1
 810ad1c:	4642      	mov	r2, r8
 810ad1e:	4631      	mov	r1, r6
 810ad20:	4628      	mov	r0, r5
 810ad22:	47b8      	blx	r7
 810ad24:	3001      	adds	r0, #1
 810ad26:	f43f ae74 	beq.w	810aa12 <_printf_float+0xbe>
 810ad2a:	ee18 3a10 	vmov	r3, s16
 810ad2e:	4652      	mov	r2, sl
 810ad30:	4631      	mov	r1, r6
 810ad32:	4628      	mov	r0, r5
 810ad34:	47b8      	blx	r7
 810ad36:	3001      	adds	r0, #1
 810ad38:	f43f ae6b 	beq.w	810aa12 <_printf_float+0xbe>
 810ad3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ad40:	2200      	movs	r2, #0
 810ad42:	2300      	movs	r3, #0
 810ad44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 810ad48:	f7f5 ff46 	bl	8100bd8 <__aeabi_dcmpeq>
 810ad4c:	b9d8      	cbnz	r0, 810ad86 <_printf_float+0x432>
 810ad4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 810ad52:	f108 0201 	add.w	r2, r8, #1
 810ad56:	4631      	mov	r1, r6
 810ad58:	4628      	mov	r0, r5
 810ad5a:	47b8      	blx	r7
 810ad5c:	3001      	adds	r0, #1
 810ad5e:	d10e      	bne.n	810ad7e <_printf_float+0x42a>
 810ad60:	e657      	b.n	810aa12 <_printf_float+0xbe>
 810ad62:	2301      	movs	r3, #1
 810ad64:	4652      	mov	r2, sl
 810ad66:	4631      	mov	r1, r6
 810ad68:	4628      	mov	r0, r5
 810ad6a:	47b8      	blx	r7
 810ad6c:	3001      	adds	r0, #1
 810ad6e:	f43f ae50 	beq.w	810aa12 <_printf_float+0xbe>
 810ad72:	f108 0801 	add.w	r8, r8, #1
 810ad76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ad78:	3b01      	subs	r3, #1
 810ad7a:	4543      	cmp	r3, r8
 810ad7c:	dcf1      	bgt.n	810ad62 <_printf_float+0x40e>
 810ad7e:	464b      	mov	r3, r9
 810ad80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810ad84:	e6da      	b.n	810ab3c <_printf_float+0x1e8>
 810ad86:	f04f 0800 	mov.w	r8, #0
 810ad8a:	f104 0a1a 	add.w	sl, r4, #26
 810ad8e:	e7f2      	b.n	810ad76 <_printf_float+0x422>
 810ad90:	2301      	movs	r3, #1
 810ad92:	4642      	mov	r2, r8
 810ad94:	e7df      	b.n	810ad56 <_printf_float+0x402>
 810ad96:	2301      	movs	r3, #1
 810ad98:	464a      	mov	r2, r9
 810ad9a:	4631      	mov	r1, r6
 810ad9c:	4628      	mov	r0, r5
 810ad9e:	47b8      	blx	r7
 810ada0:	3001      	adds	r0, #1
 810ada2:	f43f ae36 	beq.w	810aa12 <_printf_float+0xbe>
 810ada6:	f108 0801 	add.w	r8, r8, #1
 810adaa:	68e3      	ldr	r3, [r4, #12]
 810adac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810adae:	1a5b      	subs	r3, r3, r1
 810adb0:	4543      	cmp	r3, r8
 810adb2:	dcf0      	bgt.n	810ad96 <_printf_float+0x442>
 810adb4:	e6f8      	b.n	810aba8 <_printf_float+0x254>
 810adb6:	f04f 0800 	mov.w	r8, #0
 810adba:	f104 0919 	add.w	r9, r4, #25
 810adbe:	e7f4      	b.n	810adaa <_printf_float+0x456>

0810adc0 <_printf_common>:
 810adc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810adc4:	4616      	mov	r6, r2
 810adc6:	4699      	mov	r9, r3
 810adc8:	688a      	ldr	r2, [r1, #8]
 810adca:	690b      	ldr	r3, [r1, #16]
 810adcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810add0:	4293      	cmp	r3, r2
 810add2:	bfb8      	it	lt
 810add4:	4613      	movlt	r3, r2
 810add6:	6033      	str	r3, [r6, #0]
 810add8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810addc:	4607      	mov	r7, r0
 810adde:	460c      	mov	r4, r1
 810ade0:	b10a      	cbz	r2, 810ade6 <_printf_common+0x26>
 810ade2:	3301      	adds	r3, #1
 810ade4:	6033      	str	r3, [r6, #0]
 810ade6:	6823      	ldr	r3, [r4, #0]
 810ade8:	0699      	lsls	r1, r3, #26
 810adea:	bf42      	ittt	mi
 810adec:	6833      	ldrmi	r3, [r6, #0]
 810adee:	3302      	addmi	r3, #2
 810adf0:	6033      	strmi	r3, [r6, #0]
 810adf2:	6825      	ldr	r5, [r4, #0]
 810adf4:	f015 0506 	ands.w	r5, r5, #6
 810adf8:	d106      	bne.n	810ae08 <_printf_common+0x48>
 810adfa:	f104 0a19 	add.w	sl, r4, #25
 810adfe:	68e3      	ldr	r3, [r4, #12]
 810ae00:	6832      	ldr	r2, [r6, #0]
 810ae02:	1a9b      	subs	r3, r3, r2
 810ae04:	42ab      	cmp	r3, r5
 810ae06:	dc26      	bgt.n	810ae56 <_printf_common+0x96>
 810ae08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810ae0c:	1e13      	subs	r3, r2, #0
 810ae0e:	6822      	ldr	r2, [r4, #0]
 810ae10:	bf18      	it	ne
 810ae12:	2301      	movne	r3, #1
 810ae14:	0692      	lsls	r2, r2, #26
 810ae16:	d42b      	bmi.n	810ae70 <_printf_common+0xb0>
 810ae18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810ae1c:	4649      	mov	r1, r9
 810ae1e:	4638      	mov	r0, r7
 810ae20:	47c0      	blx	r8
 810ae22:	3001      	adds	r0, #1
 810ae24:	d01e      	beq.n	810ae64 <_printf_common+0xa4>
 810ae26:	6823      	ldr	r3, [r4, #0]
 810ae28:	6922      	ldr	r2, [r4, #16]
 810ae2a:	f003 0306 	and.w	r3, r3, #6
 810ae2e:	2b04      	cmp	r3, #4
 810ae30:	bf02      	ittt	eq
 810ae32:	68e5      	ldreq	r5, [r4, #12]
 810ae34:	6833      	ldreq	r3, [r6, #0]
 810ae36:	1aed      	subeq	r5, r5, r3
 810ae38:	68a3      	ldr	r3, [r4, #8]
 810ae3a:	bf0c      	ite	eq
 810ae3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810ae40:	2500      	movne	r5, #0
 810ae42:	4293      	cmp	r3, r2
 810ae44:	bfc4      	itt	gt
 810ae46:	1a9b      	subgt	r3, r3, r2
 810ae48:	18ed      	addgt	r5, r5, r3
 810ae4a:	2600      	movs	r6, #0
 810ae4c:	341a      	adds	r4, #26
 810ae4e:	42b5      	cmp	r5, r6
 810ae50:	d11a      	bne.n	810ae88 <_printf_common+0xc8>
 810ae52:	2000      	movs	r0, #0
 810ae54:	e008      	b.n	810ae68 <_printf_common+0xa8>
 810ae56:	2301      	movs	r3, #1
 810ae58:	4652      	mov	r2, sl
 810ae5a:	4649      	mov	r1, r9
 810ae5c:	4638      	mov	r0, r7
 810ae5e:	47c0      	blx	r8
 810ae60:	3001      	adds	r0, #1
 810ae62:	d103      	bne.n	810ae6c <_printf_common+0xac>
 810ae64:	f04f 30ff 	mov.w	r0, #4294967295
 810ae68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ae6c:	3501      	adds	r5, #1
 810ae6e:	e7c6      	b.n	810adfe <_printf_common+0x3e>
 810ae70:	18e1      	adds	r1, r4, r3
 810ae72:	1c5a      	adds	r2, r3, #1
 810ae74:	2030      	movs	r0, #48	; 0x30
 810ae76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810ae7a:	4422      	add	r2, r4
 810ae7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810ae80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810ae84:	3302      	adds	r3, #2
 810ae86:	e7c7      	b.n	810ae18 <_printf_common+0x58>
 810ae88:	2301      	movs	r3, #1
 810ae8a:	4622      	mov	r2, r4
 810ae8c:	4649      	mov	r1, r9
 810ae8e:	4638      	mov	r0, r7
 810ae90:	47c0      	blx	r8
 810ae92:	3001      	adds	r0, #1
 810ae94:	d0e6      	beq.n	810ae64 <_printf_common+0xa4>
 810ae96:	3601      	adds	r6, #1
 810ae98:	e7d9      	b.n	810ae4e <_printf_common+0x8e>
	...

0810ae9c <_printf_i>:
 810ae9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810aea0:	7e0f      	ldrb	r7, [r1, #24]
 810aea2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810aea4:	2f78      	cmp	r7, #120	; 0x78
 810aea6:	4691      	mov	r9, r2
 810aea8:	4680      	mov	r8, r0
 810aeaa:	460c      	mov	r4, r1
 810aeac:	469a      	mov	sl, r3
 810aeae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810aeb2:	d807      	bhi.n	810aec4 <_printf_i+0x28>
 810aeb4:	2f62      	cmp	r7, #98	; 0x62
 810aeb6:	d80a      	bhi.n	810aece <_printf_i+0x32>
 810aeb8:	2f00      	cmp	r7, #0
 810aeba:	f000 80d4 	beq.w	810b066 <_printf_i+0x1ca>
 810aebe:	2f58      	cmp	r7, #88	; 0x58
 810aec0:	f000 80c0 	beq.w	810b044 <_printf_i+0x1a8>
 810aec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810aec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810aecc:	e03a      	b.n	810af44 <_printf_i+0xa8>
 810aece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810aed2:	2b15      	cmp	r3, #21
 810aed4:	d8f6      	bhi.n	810aec4 <_printf_i+0x28>
 810aed6:	a101      	add	r1, pc, #4	; (adr r1, 810aedc <_printf_i+0x40>)
 810aed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810aedc:	0810af35 	.word	0x0810af35
 810aee0:	0810af49 	.word	0x0810af49
 810aee4:	0810aec5 	.word	0x0810aec5
 810aee8:	0810aec5 	.word	0x0810aec5
 810aeec:	0810aec5 	.word	0x0810aec5
 810aef0:	0810aec5 	.word	0x0810aec5
 810aef4:	0810af49 	.word	0x0810af49
 810aef8:	0810aec5 	.word	0x0810aec5
 810aefc:	0810aec5 	.word	0x0810aec5
 810af00:	0810aec5 	.word	0x0810aec5
 810af04:	0810aec5 	.word	0x0810aec5
 810af08:	0810b04d 	.word	0x0810b04d
 810af0c:	0810af75 	.word	0x0810af75
 810af10:	0810b007 	.word	0x0810b007
 810af14:	0810aec5 	.word	0x0810aec5
 810af18:	0810aec5 	.word	0x0810aec5
 810af1c:	0810b06f 	.word	0x0810b06f
 810af20:	0810aec5 	.word	0x0810aec5
 810af24:	0810af75 	.word	0x0810af75
 810af28:	0810aec5 	.word	0x0810aec5
 810af2c:	0810aec5 	.word	0x0810aec5
 810af30:	0810b00f 	.word	0x0810b00f
 810af34:	682b      	ldr	r3, [r5, #0]
 810af36:	1d1a      	adds	r2, r3, #4
 810af38:	681b      	ldr	r3, [r3, #0]
 810af3a:	602a      	str	r2, [r5, #0]
 810af3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810af40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810af44:	2301      	movs	r3, #1
 810af46:	e09f      	b.n	810b088 <_printf_i+0x1ec>
 810af48:	6820      	ldr	r0, [r4, #0]
 810af4a:	682b      	ldr	r3, [r5, #0]
 810af4c:	0607      	lsls	r7, r0, #24
 810af4e:	f103 0104 	add.w	r1, r3, #4
 810af52:	6029      	str	r1, [r5, #0]
 810af54:	d501      	bpl.n	810af5a <_printf_i+0xbe>
 810af56:	681e      	ldr	r6, [r3, #0]
 810af58:	e003      	b.n	810af62 <_printf_i+0xc6>
 810af5a:	0646      	lsls	r6, r0, #25
 810af5c:	d5fb      	bpl.n	810af56 <_printf_i+0xba>
 810af5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 810af62:	2e00      	cmp	r6, #0
 810af64:	da03      	bge.n	810af6e <_printf_i+0xd2>
 810af66:	232d      	movs	r3, #45	; 0x2d
 810af68:	4276      	negs	r6, r6
 810af6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810af6e:	485a      	ldr	r0, [pc, #360]	; (810b0d8 <_printf_i+0x23c>)
 810af70:	230a      	movs	r3, #10
 810af72:	e012      	b.n	810af9a <_printf_i+0xfe>
 810af74:	682b      	ldr	r3, [r5, #0]
 810af76:	6820      	ldr	r0, [r4, #0]
 810af78:	1d19      	adds	r1, r3, #4
 810af7a:	6029      	str	r1, [r5, #0]
 810af7c:	0605      	lsls	r5, r0, #24
 810af7e:	d501      	bpl.n	810af84 <_printf_i+0xe8>
 810af80:	681e      	ldr	r6, [r3, #0]
 810af82:	e002      	b.n	810af8a <_printf_i+0xee>
 810af84:	0641      	lsls	r1, r0, #25
 810af86:	d5fb      	bpl.n	810af80 <_printf_i+0xe4>
 810af88:	881e      	ldrh	r6, [r3, #0]
 810af8a:	4853      	ldr	r0, [pc, #332]	; (810b0d8 <_printf_i+0x23c>)
 810af8c:	2f6f      	cmp	r7, #111	; 0x6f
 810af8e:	bf0c      	ite	eq
 810af90:	2308      	moveq	r3, #8
 810af92:	230a      	movne	r3, #10
 810af94:	2100      	movs	r1, #0
 810af96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810af9a:	6865      	ldr	r5, [r4, #4]
 810af9c:	60a5      	str	r5, [r4, #8]
 810af9e:	2d00      	cmp	r5, #0
 810afa0:	bfa2      	ittt	ge
 810afa2:	6821      	ldrge	r1, [r4, #0]
 810afa4:	f021 0104 	bicge.w	r1, r1, #4
 810afa8:	6021      	strge	r1, [r4, #0]
 810afaa:	b90e      	cbnz	r6, 810afb0 <_printf_i+0x114>
 810afac:	2d00      	cmp	r5, #0
 810afae:	d04b      	beq.n	810b048 <_printf_i+0x1ac>
 810afb0:	4615      	mov	r5, r2
 810afb2:	fbb6 f1f3 	udiv	r1, r6, r3
 810afb6:	fb03 6711 	mls	r7, r3, r1, r6
 810afba:	5dc7      	ldrb	r7, [r0, r7]
 810afbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810afc0:	4637      	mov	r7, r6
 810afc2:	42bb      	cmp	r3, r7
 810afc4:	460e      	mov	r6, r1
 810afc6:	d9f4      	bls.n	810afb2 <_printf_i+0x116>
 810afc8:	2b08      	cmp	r3, #8
 810afca:	d10b      	bne.n	810afe4 <_printf_i+0x148>
 810afcc:	6823      	ldr	r3, [r4, #0]
 810afce:	07de      	lsls	r6, r3, #31
 810afd0:	d508      	bpl.n	810afe4 <_printf_i+0x148>
 810afd2:	6923      	ldr	r3, [r4, #16]
 810afd4:	6861      	ldr	r1, [r4, #4]
 810afd6:	4299      	cmp	r1, r3
 810afd8:	bfde      	ittt	le
 810afda:	2330      	movle	r3, #48	; 0x30
 810afdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 810afe0:	f105 35ff 	addle.w	r5, r5, #4294967295
 810afe4:	1b52      	subs	r2, r2, r5
 810afe6:	6122      	str	r2, [r4, #16]
 810afe8:	f8cd a000 	str.w	sl, [sp]
 810afec:	464b      	mov	r3, r9
 810afee:	aa03      	add	r2, sp, #12
 810aff0:	4621      	mov	r1, r4
 810aff2:	4640      	mov	r0, r8
 810aff4:	f7ff fee4 	bl	810adc0 <_printf_common>
 810aff8:	3001      	adds	r0, #1
 810affa:	d14a      	bne.n	810b092 <_printf_i+0x1f6>
 810affc:	f04f 30ff 	mov.w	r0, #4294967295
 810b000:	b004      	add	sp, #16
 810b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b006:	6823      	ldr	r3, [r4, #0]
 810b008:	f043 0320 	orr.w	r3, r3, #32
 810b00c:	6023      	str	r3, [r4, #0]
 810b00e:	4833      	ldr	r0, [pc, #204]	; (810b0dc <_printf_i+0x240>)
 810b010:	2778      	movs	r7, #120	; 0x78
 810b012:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810b016:	6823      	ldr	r3, [r4, #0]
 810b018:	6829      	ldr	r1, [r5, #0]
 810b01a:	061f      	lsls	r7, r3, #24
 810b01c:	f851 6b04 	ldr.w	r6, [r1], #4
 810b020:	d402      	bmi.n	810b028 <_printf_i+0x18c>
 810b022:	065f      	lsls	r7, r3, #25
 810b024:	bf48      	it	mi
 810b026:	b2b6      	uxthmi	r6, r6
 810b028:	07df      	lsls	r7, r3, #31
 810b02a:	bf48      	it	mi
 810b02c:	f043 0320 	orrmi.w	r3, r3, #32
 810b030:	6029      	str	r1, [r5, #0]
 810b032:	bf48      	it	mi
 810b034:	6023      	strmi	r3, [r4, #0]
 810b036:	b91e      	cbnz	r6, 810b040 <_printf_i+0x1a4>
 810b038:	6823      	ldr	r3, [r4, #0]
 810b03a:	f023 0320 	bic.w	r3, r3, #32
 810b03e:	6023      	str	r3, [r4, #0]
 810b040:	2310      	movs	r3, #16
 810b042:	e7a7      	b.n	810af94 <_printf_i+0xf8>
 810b044:	4824      	ldr	r0, [pc, #144]	; (810b0d8 <_printf_i+0x23c>)
 810b046:	e7e4      	b.n	810b012 <_printf_i+0x176>
 810b048:	4615      	mov	r5, r2
 810b04a:	e7bd      	b.n	810afc8 <_printf_i+0x12c>
 810b04c:	682b      	ldr	r3, [r5, #0]
 810b04e:	6826      	ldr	r6, [r4, #0]
 810b050:	6961      	ldr	r1, [r4, #20]
 810b052:	1d18      	adds	r0, r3, #4
 810b054:	6028      	str	r0, [r5, #0]
 810b056:	0635      	lsls	r5, r6, #24
 810b058:	681b      	ldr	r3, [r3, #0]
 810b05a:	d501      	bpl.n	810b060 <_printf_i+0x1c4>
 810b05c:	6019      	str	r1, [r3, #0]
 810b05e:	e002      	b.n	810b066 <_printf_i+0x1ca>
 810b060:	0670      	lsls	r0, r6, #25
 810b062:	d5fb      	bpl.n	810b05c <_printf_i+0x1c0>
 810b064:	8019      	strh	r1, [r3, #0]
 810b066:	2300      	movs	r3, #0
 810b068:	6123      	str	r3, [r4, #16]
 810b06a:	4615      	mov	r5, r2
 810b06c:	e7bc      	b.n	810afe8 <_printf_i+0x14c>
 810b06e:	682b      	ldr	r3, [r5, #0]
 810b070:	1d1a      	adds	r2, r3, #4
 810b072:	602a      	str	r2, [r5, #0]
 810b074:	681d      	ldr	r5, [r3, #0]
 810b076:	6862      	ldr	r2, [r4, #4]
 810b078:	2100      	movs	r1, #0
 810b07a:	4628      	mov	r0, r5
 810b07c:	f7f5 f930 	bl	81002e0 <memchr>
 810b080:	b108      	cbz	r0, 810b086 <_printf_i+0x1ea>
 810b082:	1b40      	subs	r0, r0, r5
 810b084:	6060      	str	r0, [r4, #4]
 810b086:	6863      	ldr	r3, [r4, #4]
 810b088:	6123      	str	r3, [r4, #16]
 810b08a:	2300      	movs	r3, #0
 810b08c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b090:	e7aa      	b.n	810afe8 <_printf_i+0x14c>
 810b092:	6923      	ldr	r3, [r4, #16]
 810b094:	462a      	mov	r2, r5
 810b096:	4649      	mov	r1, r9
 810b098:	4640      	mov	r0, r8
 810b09a:	47d0      	blx	sl
 810b09c:	3001      	adds	r0, #1
 810b09e:	d0ad      	beq.n	810affc <_printf_i+0x160>
 810b0a0:	6823      	ldr	r3, [r4, #0]
 810b0a2:	079b      	lsls	r3, r3, #30
 810b0a4:	d413      	bmi.n	810b0ce <_printf_i+0x232>
 810b0a6:	68e0      	ldr	r0, [r4, #12]
 810b0a8:	9b03      	ldr	r3, [sp, #12]
 810b0aa:	4298      	cmp	r0, r3
 810b0ac:	bfb8      	it	lt
 810b0ae:	4618      	movlt	r0, r3
 810b0b0:	e7a6      	b.n	810b000 <_printf_i+0x164>
 810b0b2:	2301      	movs	r3, #1
 810b0b4:	4632      	mov	r2, r6
 810b0b6:	4649      	mov	r1, r9
 810b0b8:	4640      	mov	r0, r8
 810b0ba:	47d0      	blx	sl
 810b0bc:	3001      	adds	r0, #1
 810b0be:	d09d      	beq.n	810affc <_printf_i+0x160>
 810b0c0:	3501      	adds	r5, #1
 810b0c2:	68e3      	ldr	r3, [r4, #12]
 810b0c4:	9903      	ldr	r1, [sp, #12]
 810b0c6:	1a5b      	subs	r3, r3, r1
 810b0c8:	42ab      	cmp	r3, r5
 810b0ca:	dcf2      	bgt.n	810b0b2 <_printf_i+0x216>
 810b0cc:	e7eb      	b.n	810b0a6 <_printf_i+0x20a>
 810b0ce:	2500      	movs	r5, #0
 810b0d0:	f104 0619 	add.w	r6, r4, #25
 810b0d4:	e7f5      	b.n	810b0c2 <_printf_i+0x226>
 810b0d6:	bf00      	nop
 810b0d8:	081ec2b2 	.word	0x081ec2b2
 810b0dc:	081ec2c3 	.word	0x081ec2c3

0810b0e0 <_scanf_float>:
 810b0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b0e4:	b087      	sub	sp, #28
 810b0e6:	4617      	mov	r7, r2
 810b0e8:	9303      	str	r3, [sp, #12]
 810b0ea:	688b      	ldr	r3, [r1, #8]
 810b0ec:	1e5a      	subs	r2, r3, #1
 810b0ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810b0f2:	bf83      	ittte	hi
 810b0f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810b0f8:	195b      	addhi	r3, r3, r5
 810b0fa:	9302      	strhi	r3, [sp, #8]
 810b0fc:	2300      	movls	r3, #0
 810b0fe:	bf86      	itte	hi
 810b100:	f240 135d 	movwhi	r3, #349	; 0x15d
 810b104:	608b      	strhi	r3, [r1, #8]
 810b106:	9302      	strls	r3, [sp, #8]
 810b108:	680b      	ldr	r3, [r1, #0]
 810b10a:	468b      	mov	fp, r1
 810b10c:	2500      	movs	r5, #0
 810b10e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810b112:	f84b 3b1c 	str.w	r3, [fp], #28
 810b116:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810b11a:	4680      	mov	r8, r0
 810b11c:	460c      	mov	r4, r1
 810b11e:	465e      	mov	r6, fp
 810b120:	46aa      	mov	sl, r5
 810b122:	46a9      	mov	r9, r5
 810b124:	9501      	str	r5, [sp, #4]
 810b126:	68a2      	ldr	r2, [r4, #8]
 810b128:	b152      	cbz	r2, 810b140 <_scanf_float+0x60>
 810b12a:	683b      	ldr	r3, [r7, #0]
 810b12c:	781b      	ldrb	r3, [r3, #0]
 810b12e:	2b4e      	cmp	r3, #78	; 0x4e
 810b130:	d864      	bhi.n	810b1fc <_scanf_float+0x11c>
 810b132:	2b40      	cmp	r3, #64	; 0x40
 810b134:	d83c      	bhi.n	810b1b0 <_scanf_float+0xd0>
 810b136:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810b13a:	b2c8      	uxtb	r0, r1
 810b13c:	280e      	cmp	r0, #14
 810b13e:	d93a      	bls.n	810b1b6 <_scanf_float+0xd6>
 810b140:	f1b9 0f00 	cmp.w	r9, #0
 810b144:	d003      	beq.n	810b14e <_scanf_float+0x6e>
 810b146:	6823      	ldr	r3, [r4, #0]
 810b148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b14c:	6023      	str	r3, [r4, #0]
 810b14e:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b152:	f1ba 0f01 	cmp.w	sl, #1
 810b156:	f200 8113 	bhi.w	810b380 <_scanf_float+0x2a0>
 810b15a:	455e      	cmp	r6, fp
 810b15c:	f200 8105 	bhi.w	810b36a <_scanf_float+0x28a>
 810b160:	2501      	movs	r5, #1
 810b162:	4628      	mov	r0, r5
 810b164:	b007      	add	sp, #28
 810b166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b16a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810b16e:	2a0d      	cmp	r2, #13
 810b170:	d8e6      	bhi.n	810b140 <_scanf_float+0x60>
 810b172:	a101      	add	r1, pc, #4	; (adr r1, 810b178 <_scanf_float+0x98>)
 810b174:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810b178:	0810b2b7 	.word	0x0810b2b7
 810b17c:	0810b141 	.word	0x0810b141
 810b180:	0810b141 	.word	0x0810b141
 810b184:	0810b141 	.word	0x0810b141
 810b188:	0810b317 	.word	0x0810b317
 810b18c:	0810b2ef 	.word	0x0810b2ef
 810b190:	0810b141 	.word	0x0810b141
 810b194:	0810b141 	.word	0x0810b141
 810b198:	0810b2c5 	.word	0x0810b2c5
 810b19c:	0810b141 	.word	0x0810b141
 810b1a0:	0810b141 	.word	0x0810b141
 810b1a4:	0810b141 	.word	0x0810b141
 810b1a8:	0810b141 	.word	0x0810b141
 810b1ac:	0810b27d 	.word	0x0810b27d
 810b1b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810b1b4:	e7db      	b.n	810b16e <_scanf_float+0x8e>
 810b1b6:	290e      	cmp	r1, #14
 810b1b8:	d8c2      	bhi.n	810b140 <_scanf_float+0x60>
 810b1ba:	a001      	add	r0, pc, #4	; (adr r0, 810b1c0 <_scanf_float+0xe0>)
 810b1bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810b1c0:	0810b26f 	.word	0x0810b26f
 810b1c4:	0810b141 	.word	0x0810b141
 810b1c8:	0810b26f 	.word	0x0810b26f
 810b1cc:	0810b303 	.word	0x0810b303
 810b1d0:	0810b141 	.word	0x0810b141
 810b1d4:	0810b21d 	.word	0x0810b21d
 810b1d8:	0810b259 	.word	0x0810b259
 810b1dc:	0810b259 	.word	0x0810b259
 810b1e0:	0810b259 	.word	0x0810b259
 810b1e4:	0810b259 	.word	0x0810b259
 810b1e8:	0810b259 	.word	0x0810b259
 810b1ec:	0810b259 	.word	0x0810b259
 810b1f0:	0810b259 	.word	0x0810b259
 810b1f4:	0810b259 	.word	0x0810b259
 810b1f8:	0810b259 	.word	0x0810b259
 810b1fc:	2b6e      	cmp	r3, #110	; 0x6e
 810b1fe:	d809      	bhi.n	810b214 <_scanf_float+0x134>
 810b200:	2b60      	cmp	r3, #96	; 0x60
 810b202:	d8b2      	bhi.n	810b16a <_scanf_float+0x8a>
 810b204:	2b54      	cmp	r3, #84	; 0x54
 810b206:	d077      	beq.n	810b2f8 <_scanf_float+0x218>
 810b208:	2b59      	cmp	r3, #89	; 0x59
 810b20a:	d199      	bne.n	810b140 <_scanf_float+0x60>
 810b20c:	2d07      	cmp	r5, #7
 810b20e:	d197      	bne.n	810b140 <_scanf_float+0x60>
 810b210:	2508      	movs	r5, #8
 810b212:	e029      	b.n	810b268 <_scanf_float+0x188>
 810b214:	2b74      	cmp	r3, #116	; 0x74
 810b216:	d06f      	beq.n	810b2f8 <_scanf_float+0x218>
 810b218:	2b79      	cmp	r3, #121	; 0x79
 810b21a:	e7f6      	b.n	810b20a <_scanf_float+0x12a>
 810b21c:	6821      	ldr	r1, [r4, #0]
 810b21e:	05c8      	lsls	r0, r1, #23
 810b220:	d51a      	bpl.n	810b258 <_scanf_float+0x178>
 810b222:	9b02      	ldr	r3, [sp, #8]
 810b224:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810b228:	6021      	str	r1, [r4, #0]
 810b22a:	f109 0901 	add.w	r9, r9, #1
 810b22e:	b11b      	cbz	r3, 810b238 <_scanf_float+0x158>
 810b230:	3b01      	subs	r3, #1
 810b232:	3201      	adds	r2, #1
 810b234:	9302      	str	r3, [sp, #8]
 810b236:	60a2      	str	r2, [r4, #8]
 810b238:	68a3      	ldr	r3, [r4, #8]
 810b23a:	3b01      	subs	r3, #1
 810b23c:	60a3      	str	r3, [r4, #8]
 810b23e:	6923      	ldr	r3, [r4, #16]
 810b240:	3301      	adds	r3, #1
 810b242:	6123      	str	r3, [r4, #16]
 810b244:	687b      	ldr	r3, [r7, #4]
 810b246:	3b01      	subs	r3, #1
 810b248:	2b00      	cmp	r3, #0
 810b24a:	607b      	str	r3, [r7, #4]
 810b24c:	f340 8084 	ble.w	810b358 <_scanf_float+0x278>
 810b250:	683b      	ldr	r3, [r7, #0]
 810b252:	3301      	adds	r3, #1
 810b254:	603b      	str	r3, [r7, #0]
 810b256:	e766      	b.n	810b126 <_scanf_float+0x46>
 810b258:	eb1a 0f05 	cmn.w	sl, r5
 810b25c:	f47f af70 	bne.w	810b140 <_scanf_float+0x60>
 810b260:	6822      	ldr	r2, [r4, #0]
 810b262:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810b266:	6022      	str	r2, [r4, #0]
 810b268:	f806 3b01 	strb.w	r3, [r6], #1
 810b26c:	e7e4      	b.n	810b238 <_scanf_float+0x158>
 810b26e:	6822      	ldr	r2, [r4, #0]
 810b270:	0610      	lsls	r0, r2, #24
 810b272:	f57f af65 	bpl.w	810b140 <_scanf_float+0x60>
 810b276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810b27a:	e7f4      	b.n	810b266 <_scanf_float+0x186>
 810b27c:	f1ba 0f00 	cmp.w	sl, #0
 810b280:	d10e      	bne.n	810b2a0 <_scanf_float+0x1c0>
 810b282:	f1b9 0f00 	cmp.w	r9, #0
 810b286:	d10e      	bne.n	810b2a6 <_scanf_float+0x1c6>
 810b288:	6822      	ldr	r2, [r4, #0]
 810b28a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b28e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b292:	d108      	bne.n	810b2a6 <_scanf_float+0x1c6>
 810b294:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b298:	6022      	str	r2, [r4, #0]
 810b29a:	f04f 0a01 	mov.w	sl, #1
 810b29e:	e7e3      	b.n	810b268 <_scanf_float+0x188>
 810b2a0:	f1ba 0f02 	cmp.w	sl, #2
 810b2a4:	d055      	beq.n	810b352 <_scanf_float+0x272>
 810b2a6:	2d01      	cmp	r5, #1
 810b2a8:	d002      	beq.n	810b2b0 <_scanf_float+0x1d0>
 810b2aa:	2d04      	cmp	r5, #4
 810b2ac:	f47f af48 	bne.w	810b140 <_scanf_float+0x60>
 810b2b0:	3501      	adds	r5, #1
 810b2b2:	b2ed      	uxtb	r5, r5
 810b2b4:	e7d8      	b.n	810b268 <_scanf_float+0x188>
 810b2b6:	f1ba 0f01 	cmp.w	sl, #1
 810b2ba:	f47f af41 	bne.w	810b140 <_scanf_float+0x60>
 810b2be:	f04f 0a02 	mov.w	sl, #2
 810b2c2:	e7d1      	b.n	810b268 <_scanf_float+0x188>
 810b2c4:	b97d      	cbnz	r5, 810b2e6 <_scanf_float+0x206>
 810b2c6:	f1b9 0f00 	cmp.w	r9, #0
 810b2ca:	f47f af3c 	bne.w	810b146 <_scanf_float+0x66>
 810b2ce:	6822      	ldr	r2, [r4, #0]
 810b2d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b2d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b2d8:	f47f af39 	bne.w	810b14e <_scanf_float+0x6e>
 810b2dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b2e0:	6022      	str	r2, [r4, #0]
 810b2e2:	2501      	movs	r5, #1
 810b2e4:	e7c0      	b.n	810b268 <_scanf_float+0x188>
 810b2e6:	2d03      	cmp	r5, #3
 810b2e8:	d0e2      	beq.n	810b2b0 <_scanf_float+0x1d0>
 810b2ea:	2d05      	cmp	r5, #5
 810b2ec:	e7de      	b.n	810b2ac <_scanf_float+0x1cc>
 810b2ee:	2d02      	cmp	r5, #2
 810b2f0:	f47f af26 	bne.w	810b140 <_scanf_float+0x60>
 810b2f4:	2503      	movs	r5, #3
 810b2f6:	e7b7      	b.n	810b268 <_scanf_float+0x188>
 810b2f8:	2d06      	cmp	r5, #6
 810b2fa:	f47f af21 	bne.w	810b140 <_scanf_float+0x60>
 810b2fe:	2507      	movs	r5, #7
 810b300:	e7b2      	b.n	810b268 <_scanf_float+0x188>
 810b302:	6822      	ldr	r2, [r4, #0]
 810b304:	0591      	lsls	r1, r2, #22
 810b306:	f57f af1b 	bpl.w	810b140 <_scanf_float+0x60>
 810b30a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810b30e:	6022      	str	r2, [r4, #0]
 810b310:	f8cd 9004 	str.w	r9, [sp, #4]
 810b314:	e7a8      	b.n	810b268 <_scanf_float+0x188>
 810b316:	6822      	ldr	r2, [r4, #0]
 810b318:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810b31c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810b320:	d006      	beq.n	810b330 <_scanf_float+0x250>
 810b322:	0550      	lsls	r0, r2, #21
 810b324:	f57f af0c 	bpl.w	810b140 <_scanf_float+0x60>
 810b328:	f1b9 0f00 	cmp.w	r9, #0
 810b32c:	f43f af0f 	beq.w	810b14e <_scanf_float+0x6e>
 810b330:	0591      	lsls	r1, r2, #22
 810b332:	bf58      	it	pl
 810b334:	9901      	ldrpl	r1, [sp, #4]
 810b336:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b33a:	bf58      	it	pl
 810b33c:	eba9 0101 	subpl.w	r1, r9, r1
 810b340:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810b344:	bf58      	it	pl
 810b346:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810b34a:	6022      	str	r2, [r4, #0]
 810b34c:	f04f 0900 	mov.w	r9, #0
 810b350:	e78a      	b.n	810b268 <_scanf_float+0x188>
 810b352:	f04f 0a03 	mov.w	sl, #3
 810b356:	e787      	b.n	810b268 <_scanf_float+0x188>
 810b358:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810b35c:	4639      	mov	r1, r7
 810b35e:	4640      	mov	r0, r8
 810b360:	4798      	blx	r3
 810b362:	2800      	cmp	r0, #0
 810b364:	f43f aedf 	beq.w	810b126 <_scanf_float+0x46>
 810b368:	e6ea      	b.n	810b140 <_scanf_float+0x60>
 810b36a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b36e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b372:	463a      	mov	r2, r7
 810b374:	4640      	mov	r0, r8
 810b376:	4798      	blx	r3
 810b378:	6923      	ldr	r3, [r4, #16]
 810b37a:	3b01      	subs	r3, #1
 810b37c:	6123      	str	r3, [r4, #16]
 810b37e:	e6ec      	b.n	810b15a <_scanf_float+0x7a>
 810b380:	1e6b      	subs	r3, r5, #1
 810b382:	2b06      	cmp	r3, #6
 810b384:	d825      	bhi.n	810b3d2 <_scanf_float+0x2f2>
 810b386:	2d02      	cmp	r5, #2
 810b388:	d836      	bhi.n	810b3f8 <_scanf_float+0x318>
 810b38a:	455e      	cmp	r6, fp
 810b38c:	f67f aee8 	bls.w	810b160 <_scanf_float+0x80>
 810b390:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b394:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b398:	463a      	mov	r2, r7
 810b39a:	4640      	mov	r0, r8
 810b39c:	4798      	blx	r3
 810b39e:	6923      	ldr	r3, [r4, #16]
 810b3a0:	3b01      	subs	r3, #1
 810b3a2:	6123      	str	r3, [r4, #16]
 810b3a4:	e7f1      	b.n	810b38a <_scanf_float+0x2aa>
 810b3a6:	9802      	ldr	r0, [sp, #8]
 810b3a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b3ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810b3b0:	9002      	str	r0, [sp, #8]
 810b3b2:	463a      	mov	r2, r7
 810b3b4:	4640      	mov	r0, r8
 810b3b6:	4798      	blx	r3
 810b3b8:	6923      	ldr	r3, [r4, #16]
 810b3ba:	3b01      	subs	r3, #1
 810b3bc:	6123      	str	r3, [r4, #16]
 810b3be:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b3c2:	fa5f fa8a 	uxtb.w	sl, sl
 810b3c6:	f1ba 0f02 	cmp.w	sl, #2
 810b3ca:	d1ec      	bne.n	810b3a6 <_scanf_float+0x2c6>
 810b3cc:	3d03      	subs	r5, #3
 810b3ce:	b2ed      	uxtb	r5, r5
 810b3d0:	1b76      	subs	r6, r6, r5
 810b3d2:	6823      	ldr	r3, [r4, #0]
 810b3d4:	05da      	lsls	r2, r3, #23
 810b3d6:	d52f      	bpl.n	810b438 <_scanf_float+0x358>
 810b3d8:	055b      	lsls	r3, r3, #21
 810b3da:	d510      	bpl.n	810b3fe <_scanf_float+0x31e>
 810b3dc:	455e      	cmp	r6, fp
 810b3de:	f67f aebf 	bls.w	810b160 <_scanf_float+0x80>
 810b3e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b3e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b3ea:	463a      	mov	r2, r7
 810b3ec:	4640      	mov	r0, r8
 810b3ee:	4798      	blx	r3
 810b3f0:	6923      	ldr	r3, [r4, #16]
 810b3f2:	3b01      	subs	r3, #1
 810b3f4:	6123      	str	r3, [r4, #16]
 810b3f6:	e7f1      	b.n	810b3dc <_scanf_float+0x2fc>
 810b3f8:	46aa      	mov	sl, r5
 810b3fa:	9602      	str	r6, [sp, #8]
 810b3fc:	e7df      	b.n	810b3be <_scanf_float+0x2de>
 810b3fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810b402:	6923      	ldr	r3, [r4, #16]
 810b404:	2965      	cmp	r1, #101	; 0x65
 810b406:	f103 33ff 	add.w	r3, r3, #4294967295
 810b40a:	f106 35ff 	add.w	r5, r6, #4294967295
 810b40e:	6123      	str	r3, [r4, #16]
 810b410:	d00c      	beq.n	810b42c <_scanf_float+0x34c>
 810b412:	2945      	cmp	r1, #69	; 0x45
 810b414:	d00a      	beq.n	810b42c <_scanf_float+0x34c>
 810b416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b41a:	463a      	mov	r2, r7
 810b41c:	4640      	mov	r0, r8
 810b41e:	4798      	blx	r3
 810b420:	6923      	ldr	r3, [r4, #16]
 810b422:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810b426:	3b01      	subs	r3, #1
 810b428:	1eb5      	subs	r5, r6, #2
 810b42a:	6123      	str	r3, [r4, #16]
 810b42c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b430:	463a      	mov	r2, r7
 810b432:	4640      	mov	r0, r8
 810b434:	4798      	blx	r3
 810b436:	462e      	mov	r6, r5
 810b438:	6825      	ldr	r5, [r4, #0]
 810b43a:	f015 0510 	ands.w	r5, r5, #16
 810b43e:	d158      	bne.n	810b4f2 <_scanf_float+0x412>
 810b440:	7035      	strb	r5, [r6, #0]
 810b442:	6823      	ldr	r3, [r4, #0]
 810b444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810b448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810b44c:	d11c      	bne.n	810b488 <_scanf_float+0x3a8>
 810b44e:	9b01      	ldr	r3, [sp, #4]
 810b450:	454b      	cmp	r3, r9
 810b452:	eba3 0209 	sub.w	r2, r3, r9
 810b456:	d124      	bne.n	810b4a2 <_scanf_float+0x3c2>
 810b458:	2200      	movs	r2, #0
 810b45a:	4659      	mov	r1, fp
 810b45c:	4640      	mov	r0, r8
 810b45e:	f002 fca3 	bl	810dda8 <_strtod_r>
 810b462:	9b03      	ldr	r3, [sp, #12]
 810b464:	6821      	ldr	r1, [r4, #0]
 810b466:	681b      	ldr	r3, [r3, #0]
 810b468:	f011 0f02 	tst.w	r1, #2
 810b46c:	ec57 6b10 	vmov	r6, r7, d0
 810b470:	f103 0204 	add.w	r2, r3, #4
 810b474:	d020      	beq.n	810b4b8 <_scanf_float+0x3d8>
 810b476:	9903      	ldr	r1, [sp, #12]
 810b478:	600a      	str	r2, [r1, #0]
 810b47a:	681b      	ldr	r3, [r3, #0]
 810b47c:	e9c3 6700 	strd	r6, r7, [r3]
 810b480:	68e3      	ldr	r3, [r4, #12]
 810b482:	3301      	adds	r3, #1
 810b484:	60e3      	str	r3, [r4, #12]
 810b486:	e66c      	b.n	810b162 <_scanf_float+0x82>
 810b488:	9b04      	ldr	r3, [sp, #16]
 810b48a:	2b00      	cmp	r3, #0
 810b48c:	d0e4      	beq.n	810b458 <_scanf_float+0x378>
 810b48e:	9905      	ldr	r1, [sp, #20]
 810b490:	230a      	movs	r3, #10
 810b492:	462a      	mov	r2, r5
 810b494:	3101      	adds	r1, #1
 810b496:	4640      	mov	r0, r8
 810b498:	f002 fd0e 	bl	810deb8 <_strtol_r>
 810b49c:	9b04      	ldr	r3, [sp, #16]
 810b49e:	9e05      	ldr	r6, [sp, #20]
 810b4a0:	1ac2      	subs	r2, r0, r3
 810b4a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810b4a6:	429e      	cmp	r6, r3
 810b4a8:	bf28      	it	cs
 810b4aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810b4ae:	4912      	ldr	r1, [pc, #72]	; (810b4f8 <_scanf_float+0x418>)
 810b4b0:	4630      	mov	r0, r6
 810b4b2:	f000 f955 	bl	810b760 <siprintf>
 810b4b6:	e7cf      	b.n	810b458 <_scanf_float+0x378>
 810b4b8:	f011 0f04 	tst.w	r1, #4
 810b4bc:	9903      	ldr	r1, [sp, #12]
 810b4be:	600a      	str	r2, [r1, #0]
 810b4c0:	d1db      	bne.n	810b47a <_scanf_float+0x39a>
 810b4c2:	f8d3 8000 	ldr.w	r8, [r3]
 810b4c6:	ee10 2a10 	vmov	r2, s0
 810b4ca:	ee10 0a10 	vmov	r0, s0
 810b4ce:	463b      	mov	r3, r7
 810b4d0:	4639      	mov	r1, r7
 810b4d2:	f7f5 fbb3 	bl	8100c3c <__aeabi_dcmpun>
 810b4d6:	b128      	cbz	r0, 810b4e4 <_scanf_float+0x404>
 810b4d8:	4808      	ldr	r0, [pc, #32]	; (810b4fc <_scanf_float+0x41c>)
 810b4da:	f000 fad7 	bl	810ba8c <nanf>
 810b4de:	ed88 0a00 	vstr	s0, [r8]
 810b4e2:	e7cd      	b.n	810b480 <_scanf_float+0x3a0>
 810b4e4:	4630      	mov	r0, r6
 810b4e6:	4639      	mov	r1, r7
 810b4e8:	f7f5 fc06 	bl	8100cf8 <__aeabi_d2f>
 810b4ec:	f8c8 0000 	str.w	r0, [r8]
 810b4f0:	e7c6      	b.n	810b480 <_scanf_float+0x3a0>
 810b4f2:	2500      	movs	r5, #0
 810b4f4:	e635      	b.n	810b162 <_scanf_float+0x82>
 810b4f6:	bf00      	nop
 810b4f8:	081ec2d4 	.word	0x081ec2d4
 810b4fc:	081d8d89 	.word	0x081d8d89

0810b500 <std>:
 810b500:	2300      	movs	r3, #0
 810b502:	b510      	push	{r4, lr}
 810b504:	4604      	mov	r4, r0
 810b506:	e9c0 3300 	strd	r3, r3, [r0]
 810b50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b50e:	6083      	str	r3, [r0, #8]
 810b510:	8181      	strh	r1, [r0, #12]
 810b512:	6643      	str	r3, [r0, #100]	; 0x64
 810b514:	81c2      	strh	r2, [r0, #14]
 810b516:	6183      	str	r3, [r0, #24]
 810b518:	4619      	mov	r1, r3
 810b51a:	2208      	movs	r2, #8
 810b51c:	305c      	adds	r0, #92	; 0x5c
 810b51e:	f000 fa17 	bl	810b950 <memset>
 810b522:	4b0d      	ldr	r3, [pc, #52]	; (810b558 <std+0x58>)
 810b524:	6263      	str	r3, [r4, #36]	; 0x24
 810b526:	4b0d      	ldr	r3, [pc, #52]	; (810b55c <std+0x5c>)
 810b528:	62a3      	str	r3, [r4, #40]	; 0x28
 810b52a:	4b0d      	ldr	r3, [pc, #52]	; (810b560 <std+0x60>)
 810b52c:	62e3      	str	r3, [r4, #44]	; 0x2c
 810b52e:	4b0d      	ldr	r3, [pc, #52]	; (810b564 <std+0x64>)
 810b530:	6323      	str	r3, [r4, #48]	; 0x30
 810b532:	4b0d      	ldr	r3, [pc, #52]	; (810b568 <std+0x68>)
 810b534:	6224      	str	r4, [r4, #32]
 810b536:	429c      	cmp	r4, r3
 810b538:	d006      	beq.n	810b548 <std+0x48>
 810b53a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 810b53e:	4294      	cmp	r4, r2
 810b540:	d002      	beq.n	810b548 <std+0x48>
 810b542:	33d0      	adds	r3, #208	; 0xd0
 810b544:	429c      	cmp	r4, r3
 810b546:	d105      	bne.n	810b554 <std+0x54>
 810b548:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810b54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b550:	f000 ba8a 	b.w	810ba68 <__retarget_lock_init_recursive>
 810b554:	bd10      	pop	{r4, pc}
 810b556:	bf00      	nop
 810b558:	0810b7a1 	.word	0x0810b7a1
 810b55c:	0810b7c3 	.word	0x0810b7c3
 810b560:	0810b7fb 	.word	0x0810b7fb
 810b564:	0810b81f 	.word	0x0810b81f
 810b568:	1001ab38 	.word	0x1001ab38

0810b56c <stdio_exit_handler>:
 810b56c:	4a02      	ldr	r2, [pc, #8]	; (810b578 <stdio_exit_handler+0xc>)
 810b56e:	4903      	ldr	r1, [pc, #12]	; (810b57c <stdio_exit_handler+0x10>)
 810b570:	4803      	ldr	r0, [pc, #12]	; (810b580 <stdio_exit_handler+0x14>)
 810b572:	f000 b869 	b.w	810b648 <_fwalk_sglue>
 810b576:	bf00      	nop
 810b578:	10000994 	.word	0x10000994
 810b57c:	0810e501 	.word	0x0810e501
 810b580:	100009a0 	.word	0x100009a0

0810b584 <cleanup_stdio>:
 810b584:	6841      	ldr	r1, [r0, #4]
 810b586:	4b0c      	ldr	r3, [pc, #48]	; (810b5b8 <cleanup_stdio+0x34>)
 810b588:	4299      	cmp	r1, r3
 810b58a:	b510      	push	{r4, lr}
 810b58c:	4604      	mov	r4, r0
 810b58e:	d001      	beq.n	810b594 <cleanup_stdio+0x10>
 810b590:	f002 ffb6 	bl	810e500 <_fflush_r>
 810b594:	68a1      	ldr	r1, [r4, #8]
 810b596:	4b09      	ldr	r3, [pc, #36]	; (810b5bc <cleanup_stdio+0x38>)
 810b598:	4299      	cmp	r1, r3
 810b59a:	d002      	beq.n	810b5a2 <cleanup_stdio+0x1e>
 810b59c:	4620      	mov	r0, r4
 810b59e:	f002 ffaf 	bl	810e500 <_fflush_r>
 810b5a2:	68e1      	ldr	r1, [r4, #12]
 810b5a4:	4b06      	ldr	r3, [pc, #24]	; (810b5c0 <cleanup_stdio+0x3c>)
 810b5a6:	4299      	cmp	r1, r3
 810b5a8:	d004      	beq.n	810b5b4 <cleanup_stdio+0x30>
 810b5aa:	4620      	mov	r0, r4
 810b5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b5b0:	f002 bfa6 	b.w	810e500 <_fflush_r>
 810b5b4:	bd10      	pop	{r4, pc}
 810b5b6:	bf00      	nop
 810b5b8:	1001ab38 	.word	0x1001ab38
 810b5bc:	1001aba0 	.word	0x1001aba0
 810b5c0:	1001ac08 	.word	0x1001ac08

0810b5c4 <global_stdio_init.part.0>:
 810b5c4:	b510      	push	{r4, lr}
 810b5c6:	4b0b      	ldr	r3, [pc, #44]	; (810b5f4 <global_stdio_init.part.0+0x30>)
 810b5c8:	4c0b      	ldr	r4, [pc, #44]	; (810b5f8 <global_stdio_init.part.0+0x34>)
 810b5ca:	4a0c      	ldr	r2, [pc, #48]	; (810b5fc <global_stdio_init.part.0+0x38>)
 810b5cc:	601a      	str	r2, [r3, #0]
 810b5ce:	4620      	mov	r0, r4
 810b5d0:	2200      	movs	r2, #0
 810b5d2:	2104      	movs	r1, #4
 810b5d4:	f7ff ff94 	bl	810b500 <std>
 810b5d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810b5dc:	2201      	movs	r2, #1
 810b5de:	2109      	movs	r1, #9
 810b5e0:	f7ff ff8e 	bl	810b500 <std>
 810b5e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 810b5e8:	2202      	movs	r2, #2
 810b5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b5ee:	2112      	movs	r1, #18
 810b5f0:	f7ff bf86 	b.w	810b500 <std>
 810b5f4:	1001ac70 	.word	0x1001ac70
 810b5f8:	1001ab38 	.word	0x1001ab38
 810b5fc:	0810b56d 	.word	0x0810b56d

0810b600 <__sfp_lock_acquire>:
 810b600:	4801      	ldr	r0, [pc, #4]	; (810b608 <__sfp_lock_acquire+0x8>)
 810b602:	f000 ba32 	b.w	810ba6a <__retarget_lock_acquire_recursive>
 810b606:	bf00      	nop
 810b608:	1001ac79 	.word	0x1001ac79

0810b60c <__sfp_lock_release>:
 810b60c:	4801      	ldr	r0, [pc, #4]	; (810b614 <__sfp_lock_release+0x8>)
 810b60e:	f000 ba2d 	b.w	810ba6c <__retarget_lock_release_recursive>
 810b612:	bf00      	nop
 810b614:	1001ac79 	.word	0x1001ac79

0810b618 <__sinit>:
 810b618:	b510      	push	{r4, lr}
 810b61a:	4604      	mov	r4, r0
 810b61c:	f7ff fff0 	bl	810b600 <__sfp_lock_acquire>
 810b620:	6a23      	ldr	r3, [r4, #32]
 810b622:	b11b      	cbz	r3, 810b62c <__sinit+0x14>
 810b624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b628:	f7ff bff0 	b.w	810b60c <__sfp_lock_release>
 810b62c:	4b04      	ldr	r3, [pc, #16]	; (810b640 <__sinit+0x28>)
 810b62e:	6223      	str	r3, [r4, #32]
 810b630:	4b04      	ldr	r3, [pc, #16]	; (810b644 <__sinit+0x2c>)
 810b632:	681b      	ldr	r3, [r3, #0]
 810b634:	2b00      	cmp	r3, #0
 810b636:	d1f5      	bne.n	810b624 <__sinit+0xc>
 810b638:	f7ff ffc4 	bl	810b5c4 <global_stdio_init.part.0>
 810b63c:	e7f2      	b.n	810b624 <__sinit+0xc>
 810b63e:	bf00      	nop
 810b640:	0810b585 	.word	0x0810b585
 810b644:	1001ac70 	.word	0x1001ac70

0810b648 <_fwalk_sglue>:
 810b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b64c:	4607      	mov	r7, r0
 810b64e:	4688      	mov	r8, r1
 810b650:	4614      	mov	r4, r2
 810b652:	2600      	movs	r6, #0
 810b654:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b658:	f1b9 0901 	subs.w	r9, r9, #1
 810b65c:	d505      	bpl.n	810b66a <_fwalk_sglue+0x22>
 810b65e:	6824      	ldr	r4, [r4, #0]
 810b660:	2c00      	cmp	r4, #0
 810b662:	d1f7      	bne.n	810b654 <_fwalk_sglue+0xc>
 810b664:	4630      	mov	r0, r6
 810b666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b66a:	89ab      	ldrh	r3, [r5, #12]
 810b66c:	2b01      	cmp	r3, #1
 810b66e:	d907      	bls.n	810b680 <_fwalk_sglue+0x38>
 810b670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b674:	3301      	adds	r3, #1
 810b676:	d003      	beq.n	810b680 <_fwalk_sglue+0x38>
 810b678:	4629      	mov	r1, r5
 810b67a:	4638      	mov	r0, r7
 810b67c:	47c0      	blx	r8
 810b67e:	4306      	orrs	r6, r0
 810b680:	3568      	adds	r5, #104	; 0x68
 810b682:	e7e9      	b.n	810b658 <_fwalk_sglue+0x10>

0810b684 <iprintf>:
 810b684:	b40f      	push	{r0, r1, r2, r3}
 810b686:	b507      	push	{r0, r1, r2, lr}
 810b688:	4906      	ldr	r1, [pc, #24]	; (810b6a4 <iprintf+0x20>)
 810b68a:	ab04      	add	r3, sp, #16
 810b68c:	6808      	ldr	r0, [r1, #0]
 810b68e:	f853 2b04 	ldr.w	r2, [r3], #4
 810b692:	6881      	ldr	r1, [r0, #8]
 810b694:	9301      	str	r3, [sp, #4]
 810b696:	f002 fd93 	bl	810e1c0 <_vfiprintf_r>
 810b69a:	b003      	add	sp, #12
 810b69c:	f85d eb04 	ldr.w	lr, [sp], #4
 810b6a0:	b004      	add	sp, #16
 810b6a2:	4770      	bx	lr
 810b6a4:	100009ec 	.word	0x100009ec

0810b6a8 <_puts_r>:
 810b6a8:	6a03      	ldr	r3, [r0, #32]
 810b6aa:	b570      	push	{r4, r5, r6, lr}
 810b6ac:	6884      	ldr	r4, [r0, #8]
 810b6ae:	4605      	mov	r5, r0
 810b6b0:	460e      	mov	r6, r1
 810b6b2:	b90b      	cbnz	r3, 810b6b8 <_puts_r+0x10>
 810b6b4:	f7ff ffb0 	bl	810b618 <__sinit>
 810b6b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b6ba:	07db      	lsls	r3, r3, #31
 810b6bc:	d405      	bmi.n	810b6ca <_puts_r+0x22>
 810b6be:	89a3      	ldrh	r3, [r4, #12]
 810b6c0:	0598      	lsls	r0, r3, #22
 810b6c2:	d402      	bmi.n	810b6ca <_puts_r+0x22>
 810b6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b6c6:	f000 f9d0 	bl	810ba6a <__retarget_lock_acquire_recursive>
 810b6ca:	89a3      	ldrh	r3, [r4, #12]
 810b6cc:	0719      	lsls	r1, r3, #28
 810b6ce:	d513      	bpl.n	810b6f8 <_puts_r+0x50>
 810b6d0:	6923      	ldr	r3, [r4, #16]
 810b6d2:	b18b      	cbz	r3, 810b6f8 <_puts_r+0x50>
 810b6d4:	3e01      	subs	r6, #1
 810b6d6:	68a3      	ldr	r3, [r4, #8]
 810b6d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810b6dc:	3b01      	subs	r3, #1
 810b6de:	60a3      	str	r3, [r4, #8]
 810b6e0:	b9e9      	cbnz	r1, 810b71e <_puts_r+0x76>
 810b6e2:	2b00      	cmp	r3, #0
 810b6e4:	da2e      	bge.n	810b744 <_puts_r+0x9c>
 810b6e6:	4622      	mov	r2, r4
 810b6e8:	210a      	movs	r1, #10
 810b6ea:	4628      	mov	r0, r5
 810b6ec:	f000 f89b 	bl	810b826 <__swbuf_r>
 810b6f0:	3001      	adds	r0, #1
 810b6f2:	d007      	beq.n	810b704 <_puts_r+0x5c>
 810b6f4:	250a      	movs	r5, #10
 810b6f6:	e007      	b.n	810b708 <_puts_r+0x60>
 810b6f8:	4621      	mov	r1, r4
 810b6fa:	4628      	mov	r0, r5
 810b6fc:	f000 f8d0 	bl	810b8a0 <__swsetup_r>
 810b700:	2800      	cmp	r0, #0
 810b702:	d0e7      	beq.n	810b6d4 <_puts_r+0x2c>
 810b704:	f04f 35ff 	mov.w	r5, #4294967295
 810b708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b70a:	07da      	lsls	r2, r3, #31
 810b70c:	d405      	bmi.n	810b71a <_puts_r+0x72>
 810b70e:	89a3      	ldrh	r3, [r4, #12]
 810b710:	059b      	lsls	r3, r3, #22
 810b712:	d402      	bmi.n	810b71a <_puts_r+0x72>
 810b714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b716:	f000 f9a9 	bl	810ba6c <__retarget_lock_release_recursive>
 810b71a:	4628      	mov	r0, r5
 810b71c:	bd70      	pop	{r4, r5, r6, pc}
 810b71e:	2b00      	cmp	r3, #0
 810b720:	da04      	bge.n	810b72c <_puts_r+0x84>
 810b722:	69a2      	ldr	r2, [r4, #24]
 810b724:	429a      	cmp	r2, r3
 810b726:	dc06      	bgt.n	810b736 <_puts_r+0x8e>
 810b728:	290a      	cmp	r1, #10
 810b72a:	d004      	beq.n	810b736 <_puts_r+0x8e>
 810b72c:	6823      	ldr	r3, [r4, #0]
 810b72e:	1c5a      	adds	r2, r3, #1
 810b730:	6022      	str	r2, [r4, #0]
 810b732:	7019      	strb	r1, [r3, #0]
 810b734:	e7cf      	b.n	810b6d6 <_puts_r+0x2e>
 810b736:	4622      	mov	r2, r4
 810b738:	4628      	mov	r0, r5
 810b73a:	f000 f874 	bl	810b826 <__swbuf_r>
 810b73e:	3001      	adds	r0, #1
 810b740:	d1c9      	bne.n	810b6d6 <_puts_r+0x2e>
 810b742:	e7df      	b.n	810b704 <_puts_r+0x5c>
 810b744:	6823      	ldr	r3, [r4, #0]
 810b746:	250a      	movs	r5, #10
 810b748:	1c5a      	adds	r2, r3, #1
 810b74a:	6022      	str	r2, [r4, #0]
 810b74c:	701d      	strb	r5, [r3, #0]
 810b74e:	e7db      	b.n	810b708 <_puts_r+0x60>

0810b750 <puts>:
 810b750:	4b02      	ldr	r3, [pc, #8]	; (810b75c <puts+0xc>)
 810b752:	4601      	mov	r1, r0
 810b754:	6818      	ldr	r0, [r3, #0]
 810b756:	f7ff bfa7 	b.w	810b6a8 <_puts_r>
 810b75a:	bf00      	nop
 810b75c:	100009ec 	.word	0x100009ec

0810b760 <siprintf>:
 810b760:	b40e      	push	{r1, r2, r3}
 810b762:	b500      	push	{lr}
 810b764:	b09c      	sub	sp, #112	; 0x70
 810b766:	ab1d      	add	r3, sp, #116	; 0x74
 810b768:	9002      	str	r0, [sp, #8]
 810b76a:	9006      	str	r0, [sp, #24]
 810b76c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810b770:	4809      	ldr	r0, [pc, #36]	; (810b798 <siprintf+0x38>)
 810b772:	9107      	str	r1, [sp, #28]
 810b774:	9104      	str	r1, [sp, #16]
 810b776:	4909      	ldr	r1, [pc, #36]	; (810b79c <siprintf+0x3c>)
 810b778:	f853 2b04 	ldr.w	r2, [r3], #4
 810b77c:	9105      	str	r1, [sp, #20]
 810b77e:	6800      	ldr	r0, [r0, #0]
 810b780:	9301      	str	r3, [sp, #4]
 810b782:	a902      	add	r1, sp, #8
 810b784:	f002 fbf4 	bl	810df70 <_svfiprintf_r>
 810b788:	9b02      	ldr	r3, [sp, #8]
 810b78a:	2200      	movs	r2, #0
 810b78c:	701a      	strb	r2, [r3, #0]
 810b78e:	b01c      	add	sp, #112	; 0x70
 810b790:	f85d eb04 	ldr.w	lr, [sp], #4
 810b794:	b003      	add	sp, #12
 810b796:	4770      	bx	lr
 810b798:	100009ec 	.word	0x100009ec
 810b79c:	ffff0208 	.word	0xffff0208

0810b7a0 <__sread>:
 810b7a0:	b510      	push	{r4, lr}
 810b7a2:	460c      	mov	r4, r1
 810b7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b7a8:	f000 f900 	bl	810b9ac <_read_r>
 810b7ac:	2800      	cmp	r0, #0
 810b7ae:	bfab      	itete	ge
 810b7b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b7b2:	89a3      	ldrhlt	r3, [r4, #12]
 810b7b4:	181b      	addge	r3, r3, r0
 810b7b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b7ba:	bfac      	ite	ge
 810b7bc:	6563      	strge	r3, [r4, #84]	; 0x54
 810b7be:	81a3      	strhlt	r3, [r4, #12]
 810b7c0:	bd10      	pop	{r4, pc}

0810b7c2 <__swrite>:
 810b7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b7c6:	461f      	mov	r7, r3
 810b7c8:	898b      	ldrh	r3, [r1, #12]
 810b7ca:	05db      	lsls	r3, r3, #23
 810b7cc:	4605      	mov	r5, r0
 810b7ce:	460c      	mov	r4, r1
 810b7d0:	4616      	mov	r6, r2
 810b7d2:	d505      	bpl.n	810b7e0 <__swrite+0x1e>
 810b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b7d8:	2302      	movs	r3, #2
 810b7da:	2200      	movs	r2, #0
 810b7dc:	f000 f8d4 	bl	810b988 <_lseek_r>
 810b7e0:	89a3      	ldrh	r3, [r4, #12]
 810b7e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b7e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b7ea:	81a3      	strh	r3, [r4, #12]
 810b7ec:	4632      	mov	r2, r6
 810b7ee:	463b      	mov	r3, r7
 810b7f0:	4628      	mov	r0, r5
 810b7f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b7f6:	f000 b8fb 	b.w	810b9f0 <_write_r>

0810b7fa <__sseek>:
 810b7fa:	b510      	push	{r4, lr}
 810b7fc:	460c      	mov	r4, r1
 810b7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b802:	f000 f8c1 	bl	810b988 <_lseek_r>
 810b806:	1c43      	adds	r3, r0, #1
 810b808:	89a3      	ldrh	r3, [r4, #12]
 810b80a:	bf15      	itete	ne
 810b80c:	6560      	strne	r0, [r4, #84]	; 0x54
 810b80e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810b812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810b816:	81a3      	strheq	r3, [r4, #12]
 810b818:	bf18      	it	ne
 810b81a:	81a3      	strhne	r3, [r4, #12]
 810b81c:	bd10      	pop	{r4, pc}

0810b81e <__sclose>:
 810b81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b822:	f000 b8a1 	b.w	810b968 <_close_r>

0810b826 <__swbuf_r>:
 810b826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b828:	460e      	mov	r6, r1
 810b82a:	4614      	mov	r4, r2
 810b82c:	4605      	mov	r5, r0
 810b82e:	b118      	cbz	r0, 810b838 <__swbuf_r+0x12>
 810b830:	6a03      	ldr	r3, [r0, #32]
 810b832:	b90b      	cbnz	r3, 810b838 <__swbuf_r+0x12>
 810b834:	f7ff fef0 	bl	810b618 <__sinit>
 810b838:	69a3      	ldr	r3, [r4, #24]
 810b83a:	60a3      	str	r3, [r4, #8]
 810b83c:	89a3      	ldrh	r3, [r4, #12]
 810b83e:	071a      	lsls	r2, r3, #28
 810b840:	d525      	bpl.n	810b88e <__swbuf_r+0x68>
 810b842:	6923      	ldr	r3, [r4, #16]
 810b844:	b31b      	cbz	r3, 810b88e <__swbuf_r+0x68>
 810b846:	6823      	ldr	r3, [r4, #0]
 810b848:	6922      	ldr	r2, [r4, #16]
 810b84a:	1a98      	subs	r0, r3, r2
 810b84c:	6963      	ldr	r3, [r4, #20]
 810b84e:	b2f6      	uxtb	r6, r6
 810b850:	4283      	cmp	r3, r0
 810b852:	4637      	mov	r7, r6
 810b854:	dc04      	bgt.n	810b860 <__swbuf_r+0x3a>
 810b856:	4621      	mov	r1, r4
 810b858:	4628      	mov	r0, r5
 810b85a:	f002 fe51 	bl	810e500 <_fflush_r>
 810b85e:	b9e0      	cbnz	r0, 810b89a <__swbuf_r+0x74>
 810b860:	68a3      	ldr	r3, [r4, #8]
 810b862:	3b01      	subs	r3, #1
 810b864:	60a3      	str	r3, [r4, #8]
 810b866:	6823      	ldr	r3, [r4, #0]
 810b868:	1c5a      	adds	r2, r3, #1
 810b86a:	6022      	str	r2, [r4, #0]
 810b86c:	701e      	strb	r6, [r3, #0]
 810b86e:	6962      	ldr	r2, [r4, #20]
 810b870:	1c43      	adds	r3, r0, #1
 810b872:	429a      	cmp	r2, r3
 810b874:	d004      	beq.n	810b880 <__swbuf_r+0x5a>
 810b876:	89a3      	ldrh	r3, [r4, #12]
 810b878:	07db      	lsls	r3, r3, #31
 810b87a:	d506      	bpl.n	810b88a <__swbuf_r+0x64>
 810b87c:	2e0a      	cmp	r6, #10
 810b87e:	d104      	bne.n	810b88a <__swbuf_r+0x64>
 810b880:	4621      	mov	r1, r4
 810b882:	4628      	mov	r0, r5
 810b884:	f002 fe3c 	bl	810e500 <_fflush_r>
 810b888:	b938      	cbnz	r0, 810b89a <__swbuf_r+0x74>
 810b88a:	4638      	mov	r0, r7
 810b88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b88e:	4621      	mov	r1, r4
 810b890:	4628      	mov	r0, r5
 810b892:	f000 f805 	bl	810b8a0 <__swsetup_r>
 810b896:	2800      	cmp	r0, #0
 810b898:	d0d5      	beq.n	810b846 <__swbuf_r+0x20>
 810b89a:	f04f 37ff 	mov.w	r7, #4294967295
 810b89e:	e7f4      	b.n	810b88a <__swbuf_r+0x64>

0810b8a0 <__swsetup_r>:
 810b8a0:	b538      	push	{r3, r4, r5, lr}
 810b8a2:	4b2a      	ldr	r3, [pc, #168]	; (810b94c <__swsetup_r+0xac>)
 810b8a4:	4605      	mov	r5, r0
 810b8a6:	6818      	ldr	r0, [r3, #0]
 810b8a8:	460c      	mov	r4, r1
 810b8aa:	b118      	cbz	r0, 810b8b4 <__swsetup_r+0x14>
 810b8ac:	6a03      	ldr	r3, [r0, #32]
 810b8ae:	b90b      	cbnz	r3, 810b8b4 <__swsetup_r+0x14>
 810b8b0:	f7ff feb2 	bl	810b618 <__sinit>
 810b8b4:	89a3      	ldrh	r3, [r4, #12]
 810b8b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b8ba:	0718      	lsls	r0, r3, #28
 810b8bc:	d422      	bmi.n	810b904 <__swsetup_r+0x64>
 810b8be:	06d9      	lsls	r1, r3, #27
 810b8c0:	d407      	bmi.n	810b8d2 <__swsetup_r+0x32>
 810b8c2:	2309      	movs	r3, #9
 810b8c4:	602b      	str	r3, [r5, #0]
 810b8c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b8ca:	81a3      	strh	r3, [r4, #12]
 810b8cc:	f04f 30ff 	mov.w	r0, #4294967295
 810b8d0:	e034      	b.n	810b93c <__swsetup_r+0x9c>
 810b8d2:	0758      	lsls	r0, r3, #29
 810b8d4:	d512      	bpl.n	810b8fc <__swsetup_r+0x5c>
 810b8d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b8d8:	b141      	cbz	r1, 810b8ec <__swsetup_r+0x4c>
 810b8da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b8de:	4299      	cmp	r1, r3
 810b8e0:	d002      	beq.n	810b8e8 <__swsetup_r+0x48>
 810b8e2:	4628      	mov	r0, r5
 810b8e4:	f000 ff52 	bl	810c78c <_free_r>
 810b8e8:	2300      	movs	r3, #0
 810b8ea:	6363      	str	r3, [r4, #52]	; 0x34
 810b8ec:	89a3      	ldrh	r3, [r4, #12]
 810b8ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b8f2:	81a3      	strh	r3, [r4, #12]
 810b8f4:	2300      	movs	r3, #0
 810b8f6:	6063      	str	r3, [r4, #4]
 810b8f8:	6923      	ldr	r3, [r4, #16]
 810b8fa:	6023      	str	r3, [r4, #0]
 810b8fc:	89a3      	ldrh	r3, [r4, #12]
 810b8fe:	f043 0308 	orr.w	r3, r3, #8
 810b902:	81a3      	strh	r3, [r4, #12]
 810b904:	6923      	ldr	r3, [r4, #16]
 810b906:	b94b      	cbnz	r3, 810b91c <__swsetup_r+0x7c>
 810b908:	89a3      	ldrh	r3, [r4, #12]
 810b90a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b90e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b912:	d003      	beq.n	810b91c <__swsetup_r+0x7c>
 810b914:	4621      	mov	r1, r4
 810b916:	4628      	mov	r0, r5
 810b918:	f002 fe40 	bl	810e59c <__smakebuf_r>
 810b91c:	89a0      	ldrh	r0, [r4, #12]
 810b91e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b922:	f010 0301 	ands.w	r3, r0, #1
 810b926:	d00a      	beq.n	810b93e <__swsetup_r+0x9e>
 810b928:	2300      	movs	r3, #0
 810b92a:	60a3      	str	r3, [r4, #8]
 810b92c:	6963      	ldr	r3, [r4, #20]
 810b92e:	425b      	negs	r3, r3
 810b930:	61a3      	str	r3, [r4, #24]
 810b932:	6923      	ldr	r3, [r4, #16]
 810b934:	b943      	cbnz	r3, 810b948 <__swsetup_r+0xa8>
 810b936:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b93a:	d1c4      	bne.n	810b8c6 <__swsetup_r+0x26>
 810b93c:	bd38      	pop	{r3, r4, r5, pc}
 810b93e:	0781      	lsls	r1, r0, #30
 810b940:	bf58      	it	pl
 810b942:	6963      	ldrpl	r3, [r4, #20]
 810b944:	60a3      	str	r3, [r4, #8]
 810b946:	e7f4      	b.n	810b932 <__swsetup_r+0x92>
 810b948:	2000      	movs	r0, #0
 810b94a:	e7f7      	b.n	810b93c <__swsetup_r+0x9c>
 810b94c:	100009ec 	.word	0x100009ec

0810b950 <memset>:
 810b950:	4402      	add	r2, r0
 810b952:	4603      	mov	r3, r0
 810b954:	4293      	cmp	r3, r2
 810b956:	d100      	bne.n	810b95a <memset+0xa>
 810b958:	4770      	bx	lr
 810b95a:	f803 1b01 	strb.w	r1, [r3], #1
 810b95e:	e7f9      	b.n	810b954 <memset+0x4>

0810b960 <_localeconv_r>:
 810b960:	4800      	ldr	r0, [pc, #0]	; (810b964 <_localeconv_r+0x4>)
 810b962:	4770      	bx	lr
 810b964:	10000ae0 	.word	0x10000ae0

0810b968 <_close_r>:
 810b968:	b538      	push	{r3, r4, r5, lr}
 810b96a:	4d06      	ldr	r5, [pc, #24]	; (810b984 <_close_r+0x1c>)
 810b96c:	2300      	movs	r3, #0
 810b96e:	4604      	mov	r4, r0
 810b970:	4608      	mov	r0, r1
 810b972:	602b      	str	r3, [r5, #0]
 810b974:	f004 fdd6 	bl	8110524 <_close>
 810b978:	1c43      	adds	r3, r0, #1
 810b97a:	d102      	bne.n	810b982 <_close_r+0x1a>
 810b97c:	682b      	ldr	r3, [r5, #0]
 810b97e:	b103      	cbz	r3, 810b982 <_close_r+0x1a>
 810b980:	6023      	str	r3, [r4, #0]
 810b982:	bd38      	pop	{r3, r4, r5, pc}
 810b984:	1001ac74 	.word	0x1001ac74

0810b988 <_lseek_r>:
 810b988:	b538      	push	{r3, r4, r5, lr}
 810b98a:	4d07      	ldr	r5, [pc, #28]	; (810b9a8 <_lseek_r+0x20>)
 810b98c:	4604      	mov	r4, r0
 810b98e:	4608      	mov	r0, r1
 810b990:	4611      	mov	r1, r2
 810b992:	2200      	movs	r2, #0
 810b994:	602a      	str	r2, [r5, #0]
 810b996:	461a      	mov	r2, r3
 810b998:	f004 fdec 	bl	8110574 <_lseek>
 810b99c:	1c43      	adds	r3, r0, #1
 810b99e:	d102      	bne.n	810b9a6 <_lseek_r+0x1e>
 810b9a0:	682b      	ldr	r3, [r5, #0]
 810b9a2:	b103      	cbz	r3, 810b9a6 <_lseek_r+0x1e>
 810b9a4:	6023      	str	r3, [r4, #0]
 810b9a6:	bd38      	pop	{r3, r4, r5, pc}
 810b9a8:	1001ac74 	.word	0x1001ac74

0810b9ac <_read_r>:
 810b9ac:	b538      	push	{r3, r4, r5, lr}
 810b9ae:	4d07      	ldr	r5, [pc, #28]	; (810b9cc <_read_r+0x20>)
 810b9b0:	4604      	mov	r4, r0
 810b9b2:	4608      	mov	r0, r1
 810b9b4:	4611      	mov	r1, r2
 810b9b6:	2200      	movs	r2, #0
 810b9b8:	602a      	str	r2, [r5, #0]
 810b9ba:	461a      	mov	r2, r3
 810b9bc:	f004 fde2 	bl	8110584 <_read>
 810b9c0:	1c43      	adds	r3, r0, #1
 810b9c2:	d102      	bne.n	810b9ca <_read_r+0x1e>
 810b9c4:	682b      	ldr	r3, [r5, #0]
 810b9c6:	b103      	cbz	r3, 810b9ca <_read_r+0x1e>
 810b9c8:	6023      	str	r3, [r4, #0]
 810b9ca:	bd38      	pop	{r3, r4, r5, pc}
 810b9cc:	1001ac74 	.word	0x1001ac74

0810b9d0 <_sbrk_r>:
 810b9d0:	b538      	push	{r3, r4, r5, lr}
 810b9d2:	4d06      	ldr	r5, [pc, #24]	; (810b9ec <_sbrk_r+0x1c>)
 810b9d4:	2300      	movs	r3, #0
 810b9d6:	4604      	mov	r4, r0
 810b9d8:	4608      	mov	r0, r1
 810b9da:	602b      	str	r3, [r5, #0]
 810b9dc:	f7f6 ff3e 	bl	810285c <_sbrk>
 810b9e0:	1c43      	adds	r3, r0, #1
 810b9e2:	d102      	bne.n	810b9ea <_sbrk_r+0x1a>
 810b9e4:	682b      	ldr	r3, [r5, #0]
 810b9e6:	b103      	cbz	r3, 810b9ea <_sbrk_r+0x1a>
 810b9e8:	6023      	str	r3, [r4, #0]
 810b9ea:	bd38      	pop	{r3, r4, r5, pc}
 810b9ec:	1001ac74 	.word	0x1001ac74

0810b9f0 <_write_r>:
 810b9f0:	b538      	push	{r3, r4, r5, lr}
 810b9f2:	4d07      	ldr	r5, [pc, #28]	; (810ba10 <_write_r+0x20>)
 810b9f4:	4604      	mov	r4, r0
 810b9f6:	4608      	mov	r0, r1
 810b9f8:	4611      	mov	r1, r2
 810b9fa:	2200      	movs	r2, #0
 810b9fc:	602a      	str	r2, [r5, #0]
 810b9fe:	461a      	mov	r2, r3
 810ba00:	f004 fdc8 	bl	8110594 <_write>
 810ba04:	1c43      	adds	r3, r0, #1
 810ba06:	d102      	bne.n	810ba0e <_write_r+0x1e>
 810ba08:	682b      	ldr	r3, [r5, #0]
 810ba0a:	b103      	cbz	r3, 810ba0e <_write_r+0x1e>
 810ba0c:	6023      	str	r3, [r4, #0]
 810ba0e:	bd38      	pop	{r3, r4, r5, pc}
 810ba10:	1001ac74 	.word	0x1001ac74

0810ba14 <__errno>:
 810ba14:	4b01      	ldr	r3, [pc, #4]	; (810ba1c <__errno+0x8>)
 810ba16:	6818      	ldr	r0, [r3, #0]
 810ba18:	4770      	bx	lr
 810ba1a:	bf00      	nop
 810ba1c:	100009ec 	.word	0x100009ec

0810ba20 <__libc_init_array>:
 810ba20:	b570      	push	{r4, r5, r6, lr}
 810ba22:	4d0d      	ldr	r5, [pc, #52]	; (810ba58 <__libc_init_array+0x38>)
 810ba24:	4c0d      	ldr	r4, [pc, #52]	; (810ba5c <__libc_init_array+0x3c>)
 810ba26:	1b64      	subs	r4, r4, r5
 810ba28:	10a4      	asrs	r4, r4, #2
 810ba2a:	2600      	movs	r6, #0
 810ba2c:	42a6      	cmp	r6, r4
 810ba2e:	d109      	bne.n	810ba44 <__libc_init_array+0x24>
 810ba30:	4d0b      	ldr	r5, [pc, #44]	; (810ba60 <__libc_init_array+0x40>)
 810ba32:	4c0c      	ldr	r4, [pc, #48]	; (810ba64 <__libc_init_array+0x44>)
 810ba34:	f004 fdb8 	bl	81105a8 <_init>
 810ba38:	1b64      	subs	r4, r4, r5
 810ba3a:	10a4      	asrs	r4, r4, #2
 810ba3c:	2600      	movs	r6, #0
 810ba3e:	42a6      	cmp	r6, r4
 810ba40:	d105      	bne.n	810ba4e <__libc_init_array+0x2e>
 810ba42:	bd70      	pop	{r4, r5, r6, pc}
 810ba44:	f855 3b04 	ldr.w	r3, [r5], #4
 810ba48:	4798      	blx	r3
 810ba4a:	3601      	adds	r6, #1
 810ba4c:	e7ee      	b.n	810ba2c <__libc_init_array+0xc>
 810ba4e:	f855 3b04 	ldr.w	r3, [r5], #4
 810ba52:	4798      	blx	r3
 810ba54:	3601      	adds	r6, #1
 810ba56:	e7f2      	b.n	810ba3e <__libc_init_array+0x1e>
 810ba58:	081ecad0 	.word	0x081ecad0
 810ba5c:	081ecad0 	.word	0x081ecad0
 810ba60:	081ecad0 	.word	0x081ecad0
 810ba64:	081ecad4 	.word	0x081ecad4

0810ba68 <__retarget_lock_init_recursive>:
 810ba68:	4770      	bx	lr

0810ba6a <__retarget_lock_acquire_recursive>:
 810ba6a:	4770      	bx	lr

0810ba6c <__retarget_lock_release_recursive>:
 810ba6c:	4770      	bx	lr

0810ba6e <memcpy>:
 810ba6e:	440a      	add	r2, r1
 810ba70:	4291      	cmp	r1, r2
 810ba72:	f100 33ff 	add.w	r3, r0, #4294967295
 810ba76:	d100      	bne.n	810ba7a <memcpy+0xc>
 810ba78:	4770      	bx	lr
 810ba7a:	b510      	push	{r4, lr}
 810ba7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ba80:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ba84:	4291      	cmp	r1, r2
 810ba86:	d1f9      	bne.n	810ba7c <memcpy+0xe>
 810ba88:	bd10      	pop	{r4, pc}
	...

0810ba8c <nanf>:
 810ba8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810ba94 <nanf+0x8>
 810ba90:	4770      	bx	lr
 810ba92:	bf00      	nop
 810ba94:	7fc00000 	.word	0x7fc00000

0810ba98 <quorem>:
 810ba98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ba9c:	6903      	ldr	r3, [r0, #16]
 810ba9e:	690c      	ldr	r4, [r1, #16]
 810baa0:	42a3      	cmp	r3, r4
 810baa2:	4607      	mov	r7, r0
 810baa4:	db7e      	blt.n	810bba4 <quorem+0x10c>
 810baa6:	3c01      	subs	r4, #1
 810baa8:	f101 0814 	add.w	r8, r1, #20
 810baac:	f100 0514 	add.w	r5, r0, #20
 810bab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810bab4:	9301      	str	r3, [sp, #4]
 810bab6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810baba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810babe:	3301      	adds	r3, #1
 810bac0:	429a      	cmp	r2, r3
 810bac2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810bac6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810baca:	fbb2 f6f3 	udiv	r6, r2, r3
 810bace:	d331      	bcc.n	810bb34 <quorem+0x9c>
 810bad0:	f04f 0e00 	mov.w	lr, #0
 810bad4:	4640      	mov	r0, r8
 810bad6:	46ac      	mov	ip, r5
 810bad8:	46f2      	mov	sl, lr
 810bada:	f850 2b04 	ldr.w	r2, [r0], #4
 810bade:	b293      	uxth	r3, r2
 810bae0:	fb06 e303 	mla	r3, r6, r3, lr
 810bae4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810bae8:	0c1a      	lsrs	r2, r3, #16
 810baea:	b29b      	uxth	r3, r3
 810baec:	ebaa 0303 	sub.w	r3, sl, r3
 810baf0:	f8dc a000 	ldr.w	sl, [ip]
 810baf4:	fa13 f38a 	uxtah	r3, r3, sl
 810baf8:	fb06 220e 	mla	r2, r6, lr, r2
 810bafc:	9300      	str	r3, [sp, #0]
 810bafe:	9b00      	ldr	r3, [sp, #0]
 810bb00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810bb04:	b292      	uxth	r2, r2
 810bb06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810bb0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810bb0e:	f8bd 3000 	ldrh.w	r3, [sp]
 810bb12:	4581      	cmp	r9, r0
 810bb14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810bb18:	f84c 3b04 	str.w	r3, [ip], #4
 810bb1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810bb20:	d2db      	bcs.n	810bada <quorem+0x42>
 810bb22:	f855 300b 	ldr.w	r3, [r5, fp]
 810bb26:	b92b      	cbnz	r3, 810bb34 <quorem+0x9c>
 810bb28:	9b01      	ldr	r3, [sp, #4]
 810bb2a:	3b04      	subs	r3, #4
 810bb2c:	429d      	cmp	r5, r3
 810bb2e:	461a      	mov	r2, r3
 810bb30:	d32c      	bcc.n	810bb8c <quorem+0xf4>
 810bb32:	613c      	str	r4, [r7, #16]
 810bb34:	4638      	mov	r0, r7
 810bb36:	f001 f93b 	bl	810cdb0 <__mcmp>
 810bb3a:	2800      	cmp	r0, #0
 810bb3c:	db22      	blt.n	810bb84 <quorem+0xec>
 810bb3e:	3601      	adds	r6, #1
 810bb40:	4629      	mov	r1, r5
 810bb42:	2000      	movs	r0, #0
 810bb44:	f858 2b04 	ldr.w	r2, [r8], #4
 810bb48:	f8d1 c000 	ldr.w	ip, [r1]
 810bb4c:	b293      	uxth	r3, r2
 810bb4e:	1ac3      	subs	r3, r0, r3
 810bb50:	0c12      	lsrs	r2, r2, #16
 810bb52:	fa13 f38c 	uxtah	r3, r3, ip
 810bb56:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810bb5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810bb5e:	b29b      	uxth	r3, r3
 810bb60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810bb64:	45c1      	cmp	r9, r8
 810bb66:	f841 3b04 	str.w	r3, [r1], #4
 810bb6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 810bb6e:	d2e9      	bcs.n	810bb44 <quorem+0xac>
 810bb70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810bb74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810bb78:	b922      	cbnz	r2, 810bb84 <quorem+0xec>
 810bb7a:	3b04      	subs	r3, #4
 810bb7c:	429d      	cmp	r5, r3
 810bb7e:	461a      	mov	r2, r3
 810bb80:	d30a      	bcc.n	810bb98 <quorem+0x100>
 810bb82:	613c      	str	r4, [r7, #16]
 810bb84:	4630      	mov	r0, r6
 810bb86:	b003      	add	sp, #12
 810bb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bb8c:	6812      	ldr	r2, [r2, #0]
 810bb8e:	3b04      	subs	r3, #4
 810bb90:	2a00      	cmp	r2, #0
 810bb92:	d1ce      	bne.n	810bb32 <quorem+0x9a>
 810bb94:	3c01      	subs	r4, #1
 810bb96:	e7c9      	b.n	810bb2c <quorem+0x94>
 810bb98:	6812      	ldr	r2, [r2, #0]
 810bb9a:	3b04      	subs	r3, #4
 810bb9c:	2a00      	cmp	r2, #0
 810bb9e:	d1f0      	bne.n	810bb82 <quorem+0xea>
 810bba0:	3c01      	subs	r4, #1
 810bba2:	e7eb      	b.n	810bb7c <quorem+0xe4>
 810bba4:	2000      	movs	r0, #0
 810bba6:	e7ee      	b.n	810bb86 <quorem+0xee>

0810bba8 <_dtoa_r>:
 810bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bbac:	ed2d 8b04 	vpush	{d8-d9}
 810bbb0:	69c5      	ldr	r5, [r0, #28]
 810bbb2:	b093      	sub	sp, #76	; 0x4c
 810bbb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 810bbb8:	ec57 6b10 	vmov	r6, r7, d0
 810bbbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810bbc0:	9107      	str	r1, [sp, #28]
 810bbc2:	4604      	mov	r4, r0
 810bbc4:	920a      	str	r2, [sp, #40]	; 0x28
 810bbc6:	930d      	str	r3, [sp, #52]	; 0x34
 810bbc8:	b975      	cbnz	r5, 810bbe8 <_dtoa_r+0x40>
 810bbca:	2010      	movs	r0, #16
 810bbcc:	f7fe fd3e 	bl	810a64c <malloc>
 810bbd0:	4602      	mov	r2, r0
 810bbd2:	61e0      	str	r0, [r4, #28]
 810bbd4:	b920      	cbnz	r0, 810bbe0 <_dtoa_r+0x38>
 810bbd6:	4bae      	ldr	r3, [pc, #696]	; (810be90 <_dtoa_r+0x2e8>)
 810bbd8:	21ef      	movs	r1, #239	; 0xef
 810bbda:	48ae      	ldr	r0, [pc, #696]	; (810be94 <_dtoa_r+0x2ec>)
 810bbdc:	f002 fd70 	bl	810e6c0 <__assert_func>
 810bbe0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810bbe4:	6005      	str	r5, [r0, #0]
 810bbe6:	60c5      	str	r5, [r0, #12]
 810bbe8:	69e3      	ldr	r3, [r4, #28]
 810bbea:	6819      	ldr	r1, [r3, #0]
 810bbec:	b151      	cbz	r1, 810bc04 <_dtoa_r+0x5c>
 810bbee:	685a      	ldr	r2, [r3, #4]
 810bbf0:	604a      	str	r2, [r1, #4]
 810bbf2:	2301      	movs	r3, #1
 810bbf4:	4093      	lsls	r3, r2
 810bbf6:	608b      	str	r3, [r1, #8]
 810bbf8:	4620      	mov	r0, r4
 810bbfa:	f000 fe53 	bl	810c8a4 <_Bfree>
 810bbfe:	69e3      	ldr	r3, [r4, #28]
 810bc00:	2200      	movs	r2, #0
 810bc02:	601a      	str	r2, [r3, #0]
 810bc04:	1e3b      	subs	r3, r7, #0
 810bc06:	bfbb      	ittet	lt
 810bc08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810bc0c:	9303      	strlt	r3, [sp, #12]
 810bc0e:	2300      	movge	r3, #0
 810bc10:	2201      	movlt	r2, #1
 810bc12:	bfac      	ite	ge
 810bc14:	f8c8 3000 	strge.w	r3, [r8]
 810bc18:	f8c8 2000 	strlt.w	r2, [r8]
 810bc1c:	4b9e      	ldr	r3, [pc, #632]	; (810be98 <_dtoa_r+0x2f0>)
 810bc1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810bc22:	ea33 0308 	bics.w	r3, r3, r8
 810bc26:	d11b      	bne.n	810bc60 <_dtoa_r+0xb8>
 810bc28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810bc2a:	f242 730f 	movw	r3, #9999	; 0x270f
 810bc2e:	6013      	str	r3, [r2, #0]
 810bc30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810bc34:	4333      	orrs	r3, r6
 810bc36:	f000 8593 	beq.w	810c760 <_dtoa_r+0xbb8>
 810bc3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bc3c:	b963      	cbnz	r3, 810bc58 <_dtoa_r+0xb0>
 810bc3e:	4b97      	ldr	r3, [pc, #604]	; (810be9c <_dtoa_r+0x2f4>)
 810bc40:	e027      	b.n	810bc92 <_dtoa_r+0xea>
 810bc42:	4b97      	ldr	r3, [pc, #604]	; (810bea0 <_dtoa_r+0x2f8>)
 810bc44:	9300      	str	r3, [sp, #0]
 810bc46:	3308      	adds	r3, #8
 810bc48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810bc4a:	6013      	str	r3, [r2, #0]
 810bc4c:	9800      	ldr	r0, [sp, #0]
 810bc4e:	b013      	add	sp, #76	; 0x4c
 810bc50:	ecbd 8b04 	vpop	{d8-d9}
 810bc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bc58:	4b90      	ldr	r3, [pc, #576]	; (810be9c <_dtoa_r+0x2f4>)
 810bc5a:	9300      	str	r3, [sp, #0]
 810bc5c:	3303      	adds	r3, #3
 810bc5e:	e7f3      	b.n	810bc48 <_dtoa_r+0xa0>
 810bc60:	ed9d 7b02 	vldr	d7, [sp, #8]
 810bc64:	2200      	movs	r2, #0
 810bc66:	ec51 0b17 	vmov	r0, r1, d7
 810bc6a:	eeb0 8a47 	vmov.f32	s16, s14
 810bc6e:	eef0 8a67 	vmov.f32	s17, s15
 810bc72:	2300      	movs	r3, #0
 810bc74:	f7f4 ffb0 	bl	8100bd8 <__aeabi_dcmpeq>
 810bc78:	4681      	mov	r9, r0
 810bc7a:	b160      	cbz	r0, 810bc96 <_dtoa_r+0xee>
 810bc7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810bc7e:	2301      	movs	r3, #1
 810bc80:	6013      	str	r3, [r2, #0]
 810bc82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bc84:	2b00      	cmp	r3, #0
 810bc86:	f000 8568 	beq.w	810c75a <_dtoa_r+0xbb2>
 810bc8a:	4b86      	ldr	r3, [pc, #536]	; (810bea4 <_dtoa_r+0x2fc>)
 810bc8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810bc8e:	6013      	str	r3, [r2, #0]
 810bc90:	3b01      	subs	r3, #1
 810bc92:	9300      	str	r3, [sp, #0]
 810bc94:	e7da      	b.n	810bc4c <_dtoa_r+0xa4>
 810bc96:	aa10      	add	r2, sp, #64	; 0x40
 810bc98:	a911      	add	r1, sp, #68	; 0x44
 810bc9a:	4620      	mov	r0, r4
 810bc9c:	eeb0 0a48 	vmov.f32	s0, s16
 810bca0:	eef0 0a68 	vmov.f32	s1, s17
 810bca4:	f001 f99a 	bl	810cfdc <__d2b>
 810bca8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810bcac:	4682      	mov	sl, r0
 810bcae:	2d00      	cmp	r5, #0
 810bcb0:	d07f      	beq.n	810bdb2 <_dtoa_r+0x20a>
 810bcb2:	ee18 3a90 	vmov	r3, s17
 810bcb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810bcba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810bcbe:	ec51 0b18 	vmov	r0, r1, d8
 810bcc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810bcc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810bcca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810bcce:	4619      	mov	r1, r3
 810bcd0:	2200      	movs	r2, #0
 810bcd2:	4b75      	ldr	r3, [pc, #468]	; (810bea8 <_dtoa_r+0x300>)
 810bcd4:	f7f4 fb60 	bl	8100398 <__aeabi_dsub>
 810bcd8:	a367      	add	r3, pc, #412	; (adr r3, 810be78 <_dtoa_r+0x2d0>)
 810bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bcde:	f7f4 fd13 	bl	8100708 <__aeabi_dmul>
 810bce2:	a367      	add	r3, pc, #412	; (adr r3, 810be80 <_dtoa_r+0x2d8>)
 810bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bce8:	f7f4 fb58 	bl	810039c <__adddf3>
 810bcec:	4606      	mov	r6, r0
 810bcee:	4628      	mov	r0, r5
 810bcf0:	460f      	mov	r7, r1
 810bcf2:	f7f4 fc9f 	bl	8100634 <__aeabi_i2d>
 810bcf6:	a364      	add	r3, pc, #400	; (adr r3, 810be88 <_dtoa_r+0x2e0>)
 810bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bcfc:	f7f4 fd04 	bl	8100708 <__aeabi_dmul>
 810bd00:	4602      	mov	r2, r0
 810bd02:	460b      	mov	r3, r1
 810bd04:	4630      	mov	r0, r6
 810bd06:	4639      	mov	r1, r7
 810bd08:	f7f4 fb48 	bl	810039c <__adddf3>
 810bd0c:	4606      	mov	r6, r0
 810bd0e:	460f      	mov	r7, r1
 810bd10:	f7f4 ffaa 	bl	8100c68 <__aeabi_d2iz>
 810bd14:	2200      	movs	r2, #0
 810bd16:	4683      	mov	fp, r0
 810bd18:	2300      	movs	r3, #0
 810bd1a:	4630      	mov	r0, r6
 810bd1c:	4639      	mov	r1, r7
 810bd1e:	f7f4 ff65 	bl	8100bec <__aeabi_dcmplt>
 810bd22:	b148      	cbz	r0, 810bd38 <_dtoa_r+0x190>
 810bd24:	4658      	mov	r0, fp
 810bd26:	f7f4 fc85 	bl	8100634 <__aeabi_i2d>
 810bd2a:	4632      	mov	r2, r6
 810bd2c:	463b      	mov	r3, r7
 810bd2e:	f7f4 ff53 	bl	8100bd8 <__aeabi_dcmpeq>
 810bd32:	b908      	cbnz	r0, 810bd38 <_dtoa_r+0x190>
 810bd34:	f10b 3bff 	add.w	fp, fp, #4294967295
 810bd38:	f1bb 0f16 	cmp.w	fp, #22
 810bd3c:	d857      	bhi.n	810bdee <_dtoa_r+0x246>
 810bd3e:	4b5b      	ldr	r3, [pc, #364]	; (810beac <_dtoa_r+0x304>)
 810bd40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bd48:	ec51 0b18 	vmov	r0, r1, d8
 810bd4c:	f7f4 ff4e 	bl	8100bec <__aeabi_dcmplt>
 810bd50:	2800      	cmp	r0, #0
 810bd52:	d04e      	beq.n	810bdf2 <_dtoa_r+0x24a>
 810bd54:	f10b 3bff 	add.w	fp, fp, #4294967295
 810bd58:	2300      	movs	r3, #0
 810bd5a:	930c      	str	r3, [sp, #48]	; 0x30
 810bd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810bd5e:	1b5b      	subs	r3, r3, r5
 810bd60:	1e5a      	subs	r2, r3, #1
 810bd62:	bf45      	ittet	mi
 810bd64:	f1c3 0301 	rsbmi	r3, r3, #1
 810bd68:	9305      	strmi	r3, [sp, #20]
 810bd6a:	2300      	movpl	r3, #0
 810bd6c:	2300      	movmi	r3, #0
 810bd6e:	9206      	str	r2, [sp, #24]
 810bd70:	bf54      	ite	pl
 810bd72:	9305      	strpl	r3, [sp, #20]
 810bd74:	9306      	strmi	r3, [sp, #24]
 810bd76:	f1bb 0f00 	cmp.w	fp, #0
 810bd7a:	db3c      	blt.n	810bdf6 <_dtoa_r+0x24e>
 810bd7c:	9b06      	ldr	r3, [sp, #24]
 810bd7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810bd82:	445b      	add	r3, fp
 810bd84:	9306      	str	r3, [sp, #24]
 810bd86:	2300      	movs	r3, #0
 810bd88:	9308      	str	r3, [sp, #32]
 810bd8a:	9b07      	ldr	r3, [sp, #28]
 810bd8c:	2b09      	cmp	r3, #9
 810bd8e:	d868      	bhi.n	810be62 <_dtoa_r+0x2ba>
 810bd90:	2b05      	cmp	r3, #5
 810bd92:	bfc4      	itt	gt
 810bd94:	3b04      	subgt	r3, #4
 810bd96:	9307      	strgt	r3, [sp, #28]
 810bd98:	9b07      	ldr	r3, [sp, #28]
 810bd9a:	f1a3 0302 	sub.w	r3, r3, #2
 810bd9e:	bfcc      	ite	gt
 810bda0:	2500      	movgt	r5, #0
 810bda2:	2501      	movle	r5, #1
 810bda4:	2b03      	cmp	r3, #3
 810bda6:	f200 8085 	bhi.w	810beb4 <_dtoa_r+0x30c>
 810bdaa:	e8df f003 	tbb	[pc, r3]
 810bdae:	3b2e      	.short	0x3b2e
 810bdb0:	5839      	.short	0x5839
 810bdb2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810bdb6:	441d      	add	r5, r3
 810bdb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810bdbc:	2b20      	cmp	r3, #32
 810bdbe:	bfc1      	itttt	gt
 810bdc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810bdc4:	fa08 f803 	lslgt.w	r8, r8, r3
 810bdc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810bdcc:	fa26 f303 	lsrgt.w	r3, r6, r3
 810bdd0:	bfd6      	itet	le
 810bdd2:	f1c3 0320 	rsble	r3, r3, #32
 810bdd6:	ea48 0003 	orrgt.w	r0, r8, r3
 810bdda:	fa06 f003 	lslle.w	r0, r6, r3
 810bdde:	f7f4 fc19 	bl	8100614 <__aeabi_ui2d>
 810bde2:	2201      	movs	r2, #1
 810bde4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810bde8:	3d01      	subs	r5, #1
 810bdea:	920e      	str	r2, [sp, #56]	; 0x38
 810bdec:	e76f      	b.n	810bcce <_dtoa_r+0x126>
 810bdee:	2301      	movs	r3, #1
 810bdf0:	e7b3      	b.n	810bd5a <_dtoa_r+0x1b2>
 810bdf2:	900c      	str	r0, [sp, #48]	; 0x30
 810bdf4:	e7b2      	b.n	810bd5c <_dtoa_r+0x1b4>
 810bdf6:	9b05      	ldr	r3, [sp, #20]
 810bdf8:	eba3 030b 	sub.w	r3, r3, fp
 810bdfc:	9305      	str	r3, [sp, #20]
 810bdfe:	f1cb 0300 	rsb	r3, fp, #0
 810be02:	9308      	str	r3, [sp, #32]
 810be04:	2300      	movs	r3, #0
 810be06:	930b      	str	r3, [sp, #44]	; 0x2c
 810be08:	e7bf      	b.n	810bd8a <_dtoa_r+0x1e2>
 810be0a:	2300      	movs	r3, #0
 810be0c:	9309      	str	r3, [sp, #36]	; 0x24
 810be0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810be10:	2b00      	cmp	r3, #0
 810be12:	dc52      	bgt.n	810beba <_dtoa_r+0x312>
 810be14:	2301      	movs	r3, #1
 810be16:	9301      	str	r3, [sp, #4]
 810be18:	9304      	str	r3, [sp, #16]
 810be1a:	461a      	mov	r2, r3
 810be1c:	920a      	str	r2, [sp, #40]	; 0x28
 810be1e:	e00b      	b.n	810be38 <_dtoa_r+0x290>
 810be20:	2301      	movs	r3, #1
 810be22:	e7f3      	b.n	810be0c <_dtoa_r+0x264>
 810be24:	2300      	movs	r3, #0
 810be26:	9309      	str	r3, [sp, #36]	; 0x24
 810be28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810be2a:	445b      	add	r3, fp
 810be2c:	9301      	str	r3, [sp, #4]
 810be2e:	3301      	adds	r3, #1
 810be30:	2b01      	cmp	r3, #1
 810be32:	9304      	str	r3, [sp, #16]
 810be34:	bfb8      	it	lt
 810be36:	2301      	movlt	r3, #1
 810be38:	69e0      	ldr	r0, [r4, #28]
 810be3a:	2100      	movs	r1, #0
 810be3c:	2204      	movs	r2, #4
 810be3e:	f102 0614 	add.w	r6, r2, #20
 810be42:	429e      	cmp	r6, r3
 810be44:	d93d      	bls.n	810bec2 <_dtoa_r+0x31a>
 810be46:	6041      	str	r1, [r0, #4]
 810be48:	4620      	mov	r0, r4
 810be4a:	f000 fceb 	bl	810c824 <_Balloc>
 810be4e:	9000      	str	r0, [sp, #0]
 810be50:	2800      	cmp	r0, #0
 810be52:	d139      	bne.n	810bec8 <_dtoa_r+0x320>
 810be54:	4b16      	ldr	r3, [pc, #88]	; (810beb0 <_dtoa_r+0x308>)
 810be56:	4602      	mov	r2, r0
 810be58:	f240 11af 	movw	r1, #431	; 0x1af
 810be5c:	e6bd      	b.n	810bbda <_dtoa_r+0x32>
 810be5e:	2301      	movs	r3, #1
 810be60:	e7e1      	b.n	810be26 <_dtoa_r+0x27e>
 810be62:	2501      	movs	r5, #1
 810be64:	2300      	movs	r3, #0
 810be66:	9307      	str	r3, [sp, #28]
 810be68:	9509      	str	r5, [sp, #36]	; 0x24
 810be6a:	f04f 33ff 	mov.w	r3, #4294967295
 810be6e:	9301      	str	r3, [sp, #4]
 810be70:	9304      	str	r3, [sp, #16]
 810be72:	2200      	movs	r2, #0
 810be74:	2312      	movs	r3, #18
 810be76:	e7d1      	b.n	810be1c <_dtoa_r+0x274>
 810be78:	636f4361 	.word	0x636f4361
 810be7c:	3fd287a7 	.word	0x3fd287a7
 810be80:	8b60c8b3 	.word	0x8b60c8b3
 810be84:	3fc68a28 	.word	0x3fc68a28
 810be88:	509f79fb 	.word	0x509f79fb
 810be8c:	3fd34413 	.word	0x3fd34413
 810be90:	081ec2e6 	.word	0x081ec2e6
 810be94:	081ec2fd 	.word	0x081ec2fd
 810be98:	7ff00000 	.word	0x7ff00000
 810be9c:	081ec2e2 	.word	0x081ec2e2
 810bea0:	081ec2d9 	.word	0x081ec2d9
 810bea4:	081ec2b1 	.word	0x081ec2b1
 810bea8:	3ff80000 	.word	0x3ff80000
 810beac:	081ec3e8 	.word	0x081ec3e8
 810beb0:	081ec355 	.word	0x081ec355
 810beb4:	2301      	movs	r3, #1
 810beb6:	9309      	str	r3, [sp, #36]	; 0x24
 810beb8:	e7d7      	b.n	810be6a <_dtoa_r+0x2c2>
 810beba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bebc:	9301      	str	r3, [sp, #4]
 810bebe:	9304      	str	r3, [sp, #16]
 810bec0:	e7ba      	b.n	810be38 <_dtoa_r+0x290>
 810bec2:	3101      	adds	r1, #1
 810bec4:	0052      	lsls	r2, r2, #1
 810bec6:	e7ba      	b.n	810be3e <_dtoa_r+0x296>
 810bec8:	69e3      	ldr	r3, [r4, #28]
 810beca:	9a00      	ldr	r2, [sp, #0]
 810becc:	601a      	str	r2, [r3, #0]
 810bece:	9b04      	ldr	r3, [sp, #16]
 810bed0:	2b0e      	cmp	r3, #14
 810bed2:	f200 80a8 	bhi.w	810c026 <_dtoa_r+0x47e>
 810bed6:	2d00      	cmp	r5, #0
 810bed8:	f000 80a5 	beq.w	810c026 <_dtoa_r+0x47e>
 810bedc:	f1bb 0f00 	cmp.w	fp, #0
 810bee0:	dd38      	ble.n	810bf54 <_dtoa_r+0x3ac>
 810bee2:	4bc0      	ldr	r3, [pc, #768]	; (810c1e4 <_dtoa_r+0x63c>)
 810bee4:	f00b 020f 	and.w	r2, fp, #15
 810bee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810beec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810bef0:	e9d3 6700 	ldrd	r6, r7, [r3]
 810bef4:	ea4f 182b 	mov.w	r8, fp, asr #4
 810bef8:	d019      	beq.n	810bf2e <_dtoa_r+0x386>
 810befa:	4bbb      	ldr	r3, [pc, #748]	; (810c1e8 <_dtoa_r+0x640>)
 810befc:	ec51 0b18 	vmov	r0, r1, d8
 810bf00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810bf04:	f7f4 fd2a 	bl	810095c <__aeabi_ddiv>
 810bf08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bf0c:	f008 080f 	and.w	r8, r8, #15
 810bf10:	2503      	movs	r5, #3
 810bf12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810c1e8 <_dtoa_r+0x640>
 810bf16:	f1b8 0f00 	cmp.w	r8, #0
 810bf1a:	d10a      	bne.n	810bf32 <_dtoa_r+0x38a>
 810bf1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bf20:	4632      	mov	r2, r6
 810bf22:	463b      	mov	r3, r7
 810bf24:	f7f4 fd1a 	bl	810095c <__aeabi_ddiv>
 810bf28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bf2c:	e02b      	b.n	810bf86 <_dtoa_r+0x3de>
 810bf2e:	2502      	movs	r5, #2
 810bf30:	e7ef      	b.n	810bf12 <_dtoa_r+0x36a>
 810bf32:	f018 0f01 	tst.w	r8, #1
 810bf36:	d008      	beq.n	810bf4a <_dtoa_r+0x3a2>
 810bf38:	4630      	mov	r0, r6
 810bf3a:	4639      	mov	r1, r7
 810bf3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 810bf40:	f7f4 fbe2 	bl	8100708 <__aeabi_dmul>
 810bf44:	3501      	adds	r5, #1
 810bf46:	4606      	mov	r6, r0
 810bf48:	460f      	mov	r7, r1
 810bf4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810bf4e:	f109 0908 	add.w	r9, r9, #8
 810bf52:	e7e0      	b.n	810bf16 <_dtoa_r+0x36e>
 810bf54:	f000 809f 	beq.w	810c096 <_dtoa_r+0x4ee>
 810bf58:	f1cb 0600 	rsb	r6, fp, #0
 810bf5c:	4ba1      	ldr	r3, [pc, #644]	; (810c1e4 <_dtoa_r+0x63c>)
 810bf5e:	4fa2      	ldr	r7, [pc, #648]	; (810c1e8 <_dtoa_r+0x640>)
 810bf60:	f006 020f 	and.w	r2, r6, #15
 810bf64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bf6c:	ec51 0b18 	vmov	r0, r1, d8
 810bf70:	f7f4 fbca 	bl	8100708 <__aeabi_dmul>
 810bf74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bf78:	1136      	asrs	r6, r6, #4
 810bf7a:	2300      	movs	r3, #0
 810bf7c:	2502      	movs	r5, #2
 810bf7e:	2e00      	cmp	r6, #0
 810bf80:	d17e      	bne.n	810c080 <_dtoa_r+0x4d8>
 810bf82:	2b00      	cmp	r3, #0
 810bf84:	d1d0      	bne.n	810bf28 <_dtoa_r+0x380>
 810bf86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bf88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810bf8c:	2b00      	cmp	r3, #0
 810bf8e:	f000 8084 	beq.w	810c09a <_dtoa_r+0x4f2>
 810bf92:	4b96      	ldr	r3, [pc, #600]	; (810c1ec <_dtoa_r+0x644>)
 810bf94:	2200      	movs	r2, #0
 810bf96:	4640      	mov	r0, r8
 810bf98:	4649      	mov	r1, r9
 810bf9a:	f7f4 fe27 	bl	8100bec <__aeabi_dcmplt>
 810bf9e:	2800      	cmp	r0, #0
 810bfa0:	d07b      	beq.n	810c09a <_dtoa_r+0x4f2>
 810bfa2:	9b04      	ldr	r3, [sp, #16]
 810bfa4:	2b00      	cmp	r3, #0
 810bfa6:	d078      	beq.n	810c09a <_dtoa_r+0x4f2>
 810bfa8:	9b01      	ldr	r3, [sp, #4]
 810bfaa:	2b00      	cmp	r3, #0
 810bfac:	dd39      	ble.n	810c022 <_dtoa_r+0x47a>
 810bfae:	4b90      	ldr	r3, [pc, #576]	; (810c1f0 <_dtoa_r+0x648>)
 810bfb0:	2200      	movs	r2, #0
 810bfb2:	4640      	mov	r0, r8
 810bfb4:	4649      	mov	r1, r9
 810bfb6:	f7f4 fba7 	bl	8100708 <__aeabi_dmul>
 810bfba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bfbe:	9e01      	ldr	r6, [sp, #4]
 810bfc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 810bfc4:	3501      	adds	r5, #1
 810bfc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810bfca:	4628      	mov	r0, r5
 810bfcc:	f7f4 fb32 	bl	8100634 <__aeabi_i2d>
 810bfd0:	4642      	mov	r2, r8
 810bfd2:	464b      	mov	r3, r9
 810bfd4:	f7f4 fb98 	bl	8100708 <__aeabi_dmul>
 810bfd8:	4b86      	ldr	r3, [pc, #536]	; (810c1f4 <_dtoa_r+0x64c>)
 810bfda:	2200      	movs	r2, #0
 810bfdc:	f7f4 f9de 	bl	810039c <__adddf3>
 810bfe0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810bfe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bfe8:	9303      	str	r3, [sp, #12]
 810bfea:	2e00      	cmp	r6, #0
 810bfec:	d158      	bne.n	810c0a0 <_dtoa_r+0x4f8>
 810bfee:	4b82      	ldr	r3, [pc, #520]	; (810c1f8 <_dtoa_r+0x650>)
 810bff0:	2200      	movs	r2, #0
 810bff2:	4640      	mov	r0, r8
 810bff4:	4649      	mov	r1, r9
 810bff6:	f7f4 f9cf 	bl	8100398 <__aeabi_dsub>
 810bffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810bffe:	4680      	mov	r8, r0
 810c000:	4689      	mov	r9, r1
 810c002:	f7f4 fe11 	bl	8100c28 <__aeabi_dcmpgt>
 810c006:	2800      	cmp	r0, #0
 810c008:	f040 8296 	bne.w	810c538 <_dtoa_r+0x990>
 810c00c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810c010:	4640      	mov	r0, r8
 810c012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c016:	4649      	mov	r1, r9
 810c018:	f7f4 fde8 	bl	8100bec <__aeabi_dcmplt>
 810c01c:	2800      	cmp	r0, #0
 810c01e:	f040 8289 	bne.w	810c534 <_dtoa_r+0x98c>
 810c022:	ed8d 8b02 	vstr	d8, [sp, #8]
 810c026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810c028:	2b00      	cmp	r3, #0
 810c02a:	f2c0 814e 	blt.w	810c2ca <_dtoa_r+0x722>
 810c02e:	f1bb 0f0e 	cmp.w	fp, #14
 810c032:	f300 814a 	bgt.w	810c2ca <_dtoa_r+0x722>
 810c036:	4b6b      	ldr	r3, [pc, #428]	; (810c1e4 <_dtoa_r+0x63c>)
 810c038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810c03c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810c040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c042:	2b00      	cmp	r3, #0
 810c044:	f280 80dc 	bge.w	810c200 <_dtoa_r+0x658>
 810c048:	9b04      	ldr	r3, [sp, #16]
 810c04a:	2b00      	cmp	r3, #0
 810c04c:	f300 80d8 	bgt.w	810c200 <_dtoa_r+0x658>
 810c050:	f040 826f 	bne.w	810c532 <_dtoa_r+0x98a>
 810c054:	4b68      	ldr	r3, [pc, #416]	; (810c1f8 <_dtoa_r+0x650>)
 810c056:	2200      	movs	r2, #0
 810c058:	4640      	mov	r0, r8
 810c05a:	4649      	mov	r1, r9
 810c05c:	f7f4 fb54 	bl	8100708 <__aeabi_dmul>
 810c060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810c064:	f7f4 fdd6 	bl	8100c14 <__aeabi_dcmpge>
 810c068:	9e04      	ldr	r6, [sp, #16]
 810c06a:	4637      	mov	r7, r6
 810c06c:	2800      	cmp	r0, #0
 810c06e:	f040 8245 	bne.w	810c4fc <_dtoa_r+0x954>
 810c072:	9d00      	ldr	r5, [sp, #0]
 810c074:	2331      	movs	r3, #49	; 0x31
 810c076:	f805 3b01 	strb.w	r3, [r5], #1
 810c07a:	f10b 0b01 	add.w	fp, fp, #1
 810c07e:	e241      	b.n	810c504 <_dtoa_r+0x95c>
 810c080:	07f2      	lsls	r2, r6, #31
 810c082:	d505      	bpl.n	810c090 <_dtoa_r+0x4e8>
 810c084:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c088:	f7f4 fb3e 	bl	8100708 <__aeabi_dmul>
 810c08c:	3501      	adds	r5, #1
 810c08e:	2301      	movs	r3, #1
 810c090:	1076      	asrs	r6, r6, #1
 810c092:	3708      	adds	r7, #8
 810c094:	e773      	b.n	810bf7e <_dtoa_r+0x3d6>
 810c096:	2502      	movs	r5, #2
 810c098:	e775      	b.n	810bf86 <_dtoa_r+0x3de>
 810c09a:	9e04      	ldr	r6, [sp, #16]
 810c09c:	465f      	mov	r7, fp
 810c09e:	e792      	b.n	810bfc6 <_dtoa_r+0x41e>
 810c0a0:	9900      	ldr	r1, [sp, #0]
 810c0a2:	4b50      	ldr	r3, [pc, #320]	; (810c1e4 <_dtoa_r+0x63c>)
 810c0a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 810c0a8:	4431      	add	r1, r6
 810c0aa:	9102      	str	r1, [sp, #8]
 810c0ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c0ae:	eeb0 9a47 	vmov.f32	s18, s14
 810c0b2:	eef0 9a67 	vmov.f32	s19, s15
 810c0b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810c0ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810c0be:	2900      	cmp	r1, #0
 810c0c0:	d044      	beq.n	810c14c <_dtoa_r+0x5a4>
 810c0c2:	494e      	ldr	r1, [pc, #312]	; (810c1fc <_dtoa_r+0x654>)
 810c0c4:	2000      	movs	r0, #0
 810c0c6:	f7f4 fc49 	bl	810095c <__aeabi_ddiv>
 810c0ca:	ec53 2b19 	vmov	r2, r3, d9
 810c0ce:	f7f4 f963 	bl	8100398 <__aeabi_dsub>
 810c0d2:	9d00      	ldr	r5, [sp, #0]
 810c0d4:	ec41 0b19 	vmov	d9, r0, r1
 810c0d8:	4649      	mov	r1, r9
 810c0da:	4640      	mov	r0, r8
 810c0dc:	f7f4 fdc4 	bl	8100c68 <__aeabi_d2iz>
 810c0e0:	4606      	mov	r6, r0
 810c0e2:	f7f4 faa7 	bl	8100634 <__aeabi_i2d>
 810c0e6:	4602      	mov	r2, r0
 810c0e8:	460b      	mov	r3, r1
 810c0ea:	4640      	mov	r0, r8
 810c0ec:	4649      	mov	r1, r9
 810c0ee:	f7f4 f953 	bl	8100398 <__aeabi_dsub>
 810c0f2:	3630      	adds	r6, #48	; 0x30
 810c0f4:	f805 6b01 	strb.w	r6, [r5], #1
 810c0f8:	ec53 2b19 	vmov	r2, r3, d9
 810c0fc:	4680      	mov	r8, r0
 810c0fe:	4689      	mov	r9, r1
 810c100:	f7f4 fd74 	bl	8100bec <__aeabi_dcmplt>
 810c104:	2800      	cmp	r0, #0
 810c106:	d164      	bne.n	810c1d2 <_dtoa_r+0x62a>
 810c108:	4642      	mov	r2, r8
 810c10a:	464b      	mov	r3, r9
 810c10c:	4937      	ldr	r1, [pc, #220]	; (810c1ec <_dtoa_r+0x644>)
 810c10e:	2000      	movs	r0, #0
 810c110:	f7f4 f942 	bl	8100398 <__aeabi_dsub>
 810c114:	ec53 2b19 	vmov	r2, r3, d9
 810c118:	f7f4 fd68 	bl	8100bec <__aeabi_dcmplt>
 810c11c:	2800      	cmp	r0, #0
 810c11e:	f040 80b6 	bne.w	810c28e <_dtoa_r+0x6e6>
 810c122:	9b02      	ldr	r3, [sp, #8]
 810c124:	429d      	cmp	r5, r3
 810c126:	f43f af7c 	beq.w	810c022 <_dtoa_r+0x47a>
 810c12a:	4b31      	ldr	r3, [pc, #196]	; (810c1f0 <_dtoa_r+0x648>)
 810c12c:	ec51 0b19 	vmov	r0, r1, d9
 810c130:	2200      	movs	r2, #0
 810c132:	f7f4 fae9 	bl	8100708 <__aeabi_dmul>
 810c136:	4b2e      	ldr	r3, [pc, #184]	; (810c1f0 <_dtoa_r+0x648>)
 810c138:	ec41 0b19 	vmov	d9, r0, r1
 810c13c:	2200      	movs	r2, #0
 810c13e:	4640      	mov	r0, r8
 810c140:	4649      	mov	r1, r9
 810c142:	f7f4 fae1 	bl	8100708 <__aeabi_dmul>
 810c146:	4680      	mov	r8, r0
 810c148:	4689      	mov	r9, r1
 810c14a:	e7c5      	b.n	810c0d8 <_dtoa_r+0x530>
 810c14c:	ec51 0b17 	vmov	r0, r1, d7
 810c150:	f7f4 fada 	bl	8100708 <__aeabi_dmul>
 810c154:	9b02      	ldr	r3, [sp, #8]
 810c156:	9d00      	ldr	r5, [sp, #0]
 810c158:	930f      	str	r3, [sp, #60]	; 0x3c
 810c15a:	ec41 0b19 	vmov	d9, r0, r1
 810c15e:	4649      	mov	r1, r9
 810c160:	4640      	mov	r0, r8
 810c162:	f7f4 fd81 	bl	8100c68 <__aeabi_d2iz>
 810c166:	4606      	mov	r6, r0
 810c168:	f7f4 fa64 	bl	8100634 <__aeabi_i2d>
 810c16c:	3630      	adds	r6, #48	; 0x30
 810c16e:	4602      	mov	r2, r0
 810c170:	460b      	mov	r3, r1
 810c172:	4640      	mov	r0, r8
 810c174:	4649      	mov	r1, r9
 810c176:	f7f4 f90f 	bl	8100398 <__aeabi_dsub>
 810c17a:	f805 6b01 	strb.w	r6, [r5], #1
 810c17e:	9b02      	ldr	r3, [sp, #8]
 810c180:	429d      	cmp	r5, r3
 810c182:	4680      	mov	r8, r0
 810c184:	4689      	mov	r9, r1
 810c186:	f04f 0200 	mov.w	r2, #0
 810c18a:	d124      	bne.n	810c1d6 <_dtoa_r+0x62e>
 810c18c:	4b1b      	ldr	r3, [pc, #108]	; (810c1fc <_dtoa_r+0x654>)
 810c18e:	ec51 0b19 	vmov	r0, r1, d9
 810c192:	f7f4 f903 	bl	810039c <__adddf3>
 810c196:	4602      	mov	r2, r0
 810c198:	460b      	mov	r3, r1
 810c19a:	4640      	mov	r0, r8
 810c19c:	4649      	mov	r1, r9
 810c19e:	f7f4 fd43 	bl	8100c28 <__aeabi_dcmpgt>
 810c1a2:	2800      	cmp	r0, #0
 810c1a4:	d173      	bne.n	810c28e <_dtoa_r+0x6e6>
 810c1a6:	ec53 2b19 	vmov	r2, r3, d9
 810c1aa:	4914      	ldr	r1, [pc, #80]	; (810c1fc <_dtoa_r+0x654>)
 810c1ac:	2000      	movs	r0, #0
 810c1ae:	f7f4 f8f3 	bl	8100398 <__aeabi_dsub>
 810c1b2:	4602      	mov	r2, r0
 810c1b4:	460b      	mov	r3, r1
 810c1b6:	4640      	mov	r0, r8
 810c1b8:	4649      	mov	r1, r9
 810c1ba:	f7f4 fd17 	bl	8100bec <__aeabi_dcmplt>
 810c1be:	2800      	cmp	r0, #0
 810c1c0:	f43f af2f 	beq.w	810c022 <_dtoa_r+0x47a>
 810c1c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810c1c6:	1e6b      	subs	r3, r5, #1
 810c1c8:	930f      	str	r3, [sp, #60]	; 0x3c
 810c1ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810c1ce:	2b30      	cmp	r3, #48	; 0x30
 810c1d0:	d0f8      	beq.n	810c1c4 <_dtoa_r+0x61c>
 810c1d2:	46bb      	mov	fp, r7
 810c1d4:	e04a      	b.n	810c26c <_dtoa_r+0x6c4>
 810c1d6:	4b06      	ldr	r3, [pc, #24]	; (810c1f0 <_dtoa_r+0x648>)
 810c1d8:	f7f4 fa96 	bl	8100708 <__aeabi_dmul>
 810c1dc:	4680      	mov	r8, r0
 810c1de:	4689      	mov	r9, r1
 810c1e0:	e7bd      	b.n	810c15e <_dtoa_r+0x5b6>
 810c1e2:	bf00      	nop
 810c1e4:	081ec3e8 	.word	0x081ec3e8
 810c1e8:	081ec3c0 	.word	0x081ec3c0
 810c1ec:	3ff00000 	.word	0x3ff00000
 810c1f0:	40240000 	.word	0x40240000
 810c1f4:	401c0000 	.word	0x401c0000
 810c1f8:	40140000 	.word	0x40140000
 810c1fc:	3fe00000 	.word	0x3fe00000
 810c200:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c204:	9d00      	ldr	r5, [sp, #0]
 810c206:	4642      	mov	r2, r8
 810c208:	464b      	mov	r3, r9
 810c20a:	4630      	mov	r0, r6
 810c20c:	4639      	mov	r1, r7
 810c20e:	f7f4 fba5 	bl	810095c <__aeabi_ddiv>
 810c212:	f7f4 fd29 	bl	8100c68 <__aeabi_d2iz>
 810c216:	9001      	str	r0, [sp, #4]
 810c218:	f7f4 fa0c 	bl	8100634 <__aeabi_i2d>
 810c21c:	4642      	mov	r2, r8
 810c21e:	464b      	mov	r3, r9
 810c220:	f7f4 fa72 	bl	8100708 <__aeabi_dmul>
 810c224:	4602      	mov	r2, r0
 810c226:	460b      	mov	r3, r1
 810c228:	4630      	mov	r0, r6
 810c22a:	4639      	mov	r1, r7
 810c22c:	f7f4 f8b4 	bl	8100398 <__aeabi_dsub>
 810c230:	9e01      	ldr	r6, [sp, #4]
 810c232:	9f04      	ldr	r7, [sp, #16]
 810c234:	3630      	adds	r6, #48	; 0x30
 810c236:	f805 6b01 	strb.w	r6, [r5], #1
 810c23a:	9e00      	ldr	r6, [sp, #0]
 810c23c:	1bae      	subs	r6, r5, r6
 810c23e:	42b7      	cmp	r7, r6
 810c240:	4602      	mov	r2, r0
 810c242:	460b      	mov	r3, r1
 810c244:	d134      	bne.n	810c2b0 <_dtoa_r+0x708>
 810c246:	f7f4 f8a9 	bl	810039c <__adddf3>
 810c24a:	4642      	mov	r2, r8
 810c24c:	464b      	mov	r3, r9
 810c24e:	4606      	mov	r6, r0
 810c250:	460f      	mov	r7, r1
 810c252:	f7f4 fce9 	bl	8100c28 <__aeabi_dcmpgt>
 810c256:	b9c8      	cbnz	r0, 810c28c <_dtoa_r+0x6e4>
 810c258:	4642      	mov	r2, r8
 810c25a:	464b      	mov	r3, r9
 810c25c:	4630      	mov	r0, r6
 810c25e:	4639      	mov	r1, r7
 810c260:	f7f4 fcba 	bl	8100bd8 <__aeabi_dcmpeq>
 810c264:	b110      	cbz	r0, 810c26c <_dtoa_r+0x6c4>
 810c266:	9b01      	ldr	r3, [sp, #4]
 810c268:	07db      	lsls	r3, r3, #31
 810c26a:	d40f      	bmi.n	810c28c <_dtoa_r+0x6e4>
 810c26c:	4651      	mov	r1, sl
 810c26e:	4620      	mov	r0, r4
 810c270:	f000 fb18 	bl	810c8a4 <_Bfree>
 810c274:	2300      	movs	r3, #0
 810c276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c278:	702b      	strb	r3, [r5, #0]
 810c27a:	f10b 0301 	add.w	r3, fp, #1
 810c27e:	6013      	str	r3, [r2, #0]
 810c280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c282:	2b00      	cmp	r3, #0
 810c284:	f43f ace2 	beq.w	810bc4c <_dtoa_r+0xa4>
 810c288:	601d      	str	r5, [r3, #0]
 810c28a:	e4df      	b.n	810bc4c <_dtoa_r+0xa4>
 810c28c:	465f      	mov	r7, fp
 810c28e:	462b      	mov	r3, r5
 810c290:	461d      	mov	r5, r3
 810c292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c296:	2a39      	cmp	r2, #57	; 0x39
 810c298:	d106      	bne.n	810c2a8 <_dtoa_r+0x700>
 810c29a:	9a00      	ldr	r2, [sp, #0]
 810c29c:	429a      	cmp	r2, r3
 810c29e:	d1f7      	bne.n	810c290 <_dtoa_r+0x6e8>
 810c2a0:	9900      	ldr	r1, [sp, #0]
 810c2a2:	2230      	movs	r2, #48	; 0x30
 810c2a4:	3701      	adds	r7, #1
 810c2a6:	700a      	strb	r2, [r1, #0]
 810c2a8:	781a      	ldrb	r2, [r3, #0]
 810c2aa:	3201      	adds	r2, #1
 810c2ac:	701a      	strb	r2, [r3, #0]
 810c2ae:	e790      	b.n	810c1d2 <_dtoa_r+0x62a>
 810c2b0:	4ba3      	ldr	r3, [pc, #652]	; (810c540 <_dtoa_r+0x998>)
 810c2b2:	2200      	movs	r2, #0
 810c2b4:	f7f4 fa28 	bl	8100708 <__aeabi_dmul>
 810c2b8:	2200      	movs	r2, #0
 810c2ba:	2300      	movs	r3, #0
 810c2bc:	4606      	mov	r6, r0
 810c2be:	460f      	mov	r7, r1
 810c2c0:	f7f4 fc8a 	bl	8100bd8 <__aeabi_dcmpeq>
 810c2c4:	2800      	cmp	r0, #0
 810c2c6:	d09e      	beq.n	810c206 <_dtoa_r+0x65e>
 810c2c8:	e7d0      	b.n	810c26c <_dtoa_r+0x6c4>
 810c2ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c2cc:	2a00      	cmp	r2, #0
 810c2ce:	f000 80ca 	beq.w	810c466 <_dtoa_r+0x8be>
 810c2d2:	9a07      	ldr	r2, [sp, #28]
 810c2d4:	2a01      	cmp	r2, #1
 810c2d6:	f300 80ad 	bgt.w	810c434 <_dtoa_r+0x88c>
 810c2da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810c2dc:	2a00      	cmp	r2, #0
 810c2de:	f000 80a5 	beq.w	810c42c <_dtoa_r+0x884>
 810c2e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810c2e6:	9e08      	ldr	r6, [sp, #32]
 810c2e8:	9d05      	ldr	r5, [sp, #20]
 810c2ea:	9a05      	ldr	r2, [sp, #20]
 810c2ec:	441a      	add	r2, r3
 810c2ee:	9205      	str	r2, [sp, #20]
 810c2f0:	9a06      	ldr	r2, [sp, #24]
 810c2f2:	2101      	movs	r1, #1
 810c2f4:	441a      	add	r2, r3
 810c2f6:	4620      	mov	r0, r4
 810c2f8:	9206      	str	r2, [sp, #24]
 810c2fa:	f000 fbd3 	bl	810caa4 <__i2b>
 810c2fe:	4607      	mov	r7, r0
 810c300:	b165      	cbz	r5, 810c31c <_dtoa_r+0x774>
 810c302:	9b06      	ldr	r3, [sp, #24]
 810c304:	2b00      	cmp	r3, #0
 810c306:	dd09      	ble.n	810c31c <_dtoa_r+0x774>
 810c308:	42ab      	cmp	r3, r5
 810c30a:	9a05      	ldr	r2, [sp, #20]
 810c30c:	bfa8      	it	ge
 810c30e:	462b      	movge	r3, r5
 810c310:	1ad2      	subs	r2, r2, r3
 810c312:	9205      	str	r2, [sp, #20]
 810c314:	9a06      	ldr	r2, [sp, #24]
 810c316:	1aed      	subs	r5, r5, r3
 810c318:	1ad3      	subs	r3, r2, r3
 810c31a:	9306      	str	r3, [sp, #24]
 810c31c:	9b08      	ldr	r3, [sp, #32]
 810c31e:	b1f3      	cbz	r3, 810c35e <_dtoa_r+0x7b6>
 810c320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c322:	2b00      	cmp	r3, #0
 810c324:	f000 80a3 	beq.w	810c46e <_dtoa_r+0x8c6>
 810c328:	2e00      	cmp	r6, #0
 810c32a:	dd10      	ble.n	810c34e <_dtoa_r+0x7a6>
 810c32c:	4639      	mov	r1, r7
 810c32e:	4632      	mov	r2, r6
 810c330:	4620      	mov	r0, r4
 810c332:	f000 fc77 	bl	810cc24 <__pow5mult>
 810c336:	4652      	mov	r2, sl
 810c338:	4601      	mov	r1, r0
 810c33a:	4607      	mov	r7, r0
 810c33c:	4620      	mov	r0, r4
 810c33e:	f000 fbc7 	bl	810cad0 <__multiply>
 810c342:	4651      	mov	r1, sl
 810c344:	4680      	mov	r8, r0
 810c346:	4620      	mov	r0, r4
 810c348:	f000 faac 	bl	810c8a4 <_Bfree>
 810c34c:	46c2      	mov	sl, r8
 810c34e:	9b08      	ldr	r3, [sp, #32]
 810c350:	1b9a      	subs	r2, r3, r6
 810c352:	d004      	beq.n	810c35e <_dtoa_r+0x7b6>
 810c354:	4651      	mov	r1, sl
 810c356:	4620      	mov	r0, r4
 810c358:	f000 fc64 	bl	810cc24 <__pow5mult>
 810c35c:	4682      	mov	sl, r0
 810c35e:	2101      	movs	r1, #1
 810c360:	4620      	mov	r0, r4
 810c362:	f000 fb9f 	bl	810caa4 <__i2b>
 810c366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c368:	2b00      	cmp	r3, #0
 810c36a:	4606      	mov	r6, r0
 810c36c:	f340 8081 	ble.w	810c472 <_dtoa_r+0x8ca>
 810c370:	461a      	mov	r2, r3
 810c372:	4601      	mov	r1, r0
 810c374:	4620      	mov	r0, r4
 810c376:	f000 fc55 	bl	810cc24 <__pow5mult>
 810c37a:	9b07      	ldr	r3, [sp, #28]
 810c37c:	2b01      	cmp	r3, #1
 810c37e:	4606      	mov	r6, r0
 810c380:	dd7a      	ble.n	810c478 <_dtoa_r+0x8d0>
 810c382:	f04f 0800 	mov.w	r8, #0
 810c386:	6933      	ldr	r3, [r6, #16]
 810c388:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810c38c:	6918      	ldr	r0, [r3, #16]
 810c38e:	f000 fb3b 	bl	810ca08 <__hi0bits>
 810c392:	f1c0 0020 	rsb	r0, r0, #32
 810c396:	9b06      	ldr	r3, [sp, #24]
 810c398:	4418      	add	r0, r3
 810c39a:	f010 001f 	ands.w	r0, r0, #31
 810c39e:	f000 8094 	beq.w	810c4ca <_dtoa_r+0x922>
 810c3a2:	f1c0 0320 	rsb	r3, r0, #32
 810c3a6:	2b04      	cmp	r3, #4
 810c3a8:	f340 8085 	ble.w	810c4b6 <_dtoa_r+0x90e>
 810c3ac:	9b05      	ldr	r3, [sp, #20]
 810c3ae:	f1c0 001c 	rsb	r0, r0, #28
 810c3b2:	4403      	add	r3, r0
 810c3b4:	9305      	str	r3, [sp, #20]
 810c3b6:	9b06      	ldr	r3, [sp, #24]
 810c3b8:	4403      	add	r3, r0
 810c3ba:	4405      	add	r5, r0
 810c3bc:	9306      	str	r3, [sp, #24]
 810c3be:	9b05      	ldr	r3, [sp, #20]
 810c3c0:	2b00      	cmp	r3, #0
 810c3c2:	dd05      	ble.n	810c3d0 <_dtoa_r+0x828>
 810c3c4:	4651      	mov	r1, sl
 810c3c6:	461a      	mov	r2, r3
 810c3c8:	4620      	mov	r0, r4
 810c3ca:	f000 fc85 	bl	810ccd8 <__lshift>
 810c3ce:	4682      	mov	sl, r0
 810c3d0:	9b06      	ldr	r3, [sp, #24]
 810c3d2:	2b00      	cmp	r3, #0
 810c3d4:	dd05      	ble.n	810c3e2 <_dtoa_r+0x83a>
 810c3d6:	4631      	mov	r1, r6
 810c3d8:	461a      	mov	r2, r3
 810c3da:	4620      	mov	r0, r4
 810c3dc:	f000 fc7c 	bl	810ccd8 <__lshift>
 810c3e0:	4606      	mov	r6, r0
 810c3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810c3e4:	2b00      	cmp	r3, #0
 810c3e6:	d072      	beq.n	810c4ce <_dtoa_r+0x926>
 810c3e8:	4631      	mov	r1, r6
 810c3ea:	4650      	mov	r0, sl
 810c3ec:	f000 fce0 	bl	810cdb0 <__mcmp>
 810c3f0:	2800      	cmp	r0, #0
 810c3f2:	da6c      	bge.n	810c4ce <_dtoa_r+0x926>
 810c3f4:	2300      	movs	r3, #0
 810c3f6:	4651      	mov	r1, sl
 810c3f8:	220a      	movs	r2, #10
 810c3fa:	4620      	mov	r0, r4
 810c3fc:	f000 fa74 	bl	810c8e8 <__multadd>
 810c400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c402:	f10b 3bff 	add.w	fp, fp, #4294967295
 810c406:	4682      	mov	sl, r0
 810c408:	2b00      	cmp	r3, #0
 810c40a:	f000 81b0 	beq.w	810c76e <_dtoa_r+0xbc6>
 810c40e:	2300      	movs	r3, #0
 810c410:	4639      	mov	r1, r7
 810c412:	220a      	movs	r2, #10
 810c414:	4620      	mov	r0, r4
 810c416:	f000 fa67 	bl	810c8e8 <__multadd>
 810c41a:	9b01      	ldr	r3, [sp, #4]
 810c41c:	2b00      	cmp	r3, #0
 810c41e:	4607      	mov	r7, r0
 810c420:	f300 8096 	bgt.w	810c550 <_dtoa_r+0x9a8>
 810c424:	9b07      	ldr	r3, [sp, #28]
 810c426:	2b02      	cmp	r3, #2
 810c428:	dc59      	bgt.n	810c4de <_dtoa_r+0x936>
 810c42a:	e091      	b.n	810c550 <_dtoa_r+0x9a8>
 810c42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810c42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810c432:	e758      	b.n	810c2e6 <_dtoa_r+0x73e>
 810c434:	9b04      	ldr	r3, [sp, #16]
 810c436:	1e5e      	subs	r6, r3, #1
 810c438:	9b08      	ldr	r3, [sp, #32]
 810c43a:	42b3      	cmp	r3, r6
 810c43c:	bfbf      	itttt	lt
 810c43e:	9b08      	ldrlt	r3, [sp, #32]
 810c440:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810c442:	9608      	strlt	r6, [sp, #32]
 810c444:	1af3      	sublt	r3, r6, r3
 810c446:	bfb4      	ite	lt
 810c448:	18d2      	addlt	r2, r2, r3
 810c44a:	1b9e      	subge	r6, r3, r6
 810c44c:	9b04      	ldr	r3, [sp, #16]
 810c44e:	bfbc      	itt	lt
 810c450:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810c452:	2600      	movlt	r6, #0
 810c454:	2b00      	cmp	r3, #0
 810c456:	bfb7      	itett	lt
 810c458:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810c45c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810c460:	1a9d      	sublt	r5, r3, r2
 810c462:	2300      	movlt	r3, #0
 810c464:	e741      	b.n	810c2ea <_dtoa_r+0x742>
 810c466:	9e08      	ldr	r6, [sp, #32]
 810c468:	9d05      	ldr	r5, [sp, #20]
 810c46a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810c46c:	e748      	b.n	810c300 <_dtoa_r+0x758>
 810c46e:	9a08      	ldr	r2, [sp, #32]
 810c470:	e770      	b.n	810c354 <_dtoa_r+0x7ac>
 810c472:	9b07      	ldr	r3, [sp, #28]
 810c474:	2b01      	cmp	r3, #1
 810c476:	dc19      	bgt.n	810c4ac <_dtoa_r+0x904>
 810c478:	9b02      	ldr	r3, [sp, #8]
 810c47a:	b9bb      	cbnz	r3, 810c4ac <_dtoa_r+0x904>
 810c47c:	9b03      	ldr	r3, [sp, #12]
 810c47e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810c482:	b99b      	cbnz	r3, 810c4ac <_dtoa_r+0x904>
 810c484:	9b03      	ldr	r3, [sp, #12]
 810c486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810c48a:	0d1b      	lsrs	r3, r3, #20
 810c48c:	051b      	lsls	r3, r3, #20
 810c48e:	b183      	cbz	r3, 810c4b2 <_dtoa_r+0x90a>
 810c490:	9b05      	ldr	r3, [sp, #20]
 810c492:	3301      	adds	r3, #1
 810c494:	9305      	str	r3, [sp, #20]
 810c496:	9b06      	ldr	r3, [sp, #24]
 810c498:	3301      	adds	r3, #1
 810c49a:	9306      	str	r3, [sp, #24]
 810c49c:	f04f 0801 	mov.w	r8, #1
 810c4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c4a2:	2b00      	cmp	r3, #0
 810c4a4:	f47f af6f 	bne.w	810c386 <_dtoa_r+0x7de>
 810c4a8:	2001      	movs	r0, #1
 810c4aa:	e774      	b.n	810c396 <_dtoa_r+0x7ee>
 810c4ac:	f04f 0800 	mov.w	r8, #0
 810c4b0:	e7f6      	b.n	810c4a0 <_dtoa_r+0x8f8>
 810c4b2:	4698      	mov	r8, r3
 810c4b4:	e7f4      	b.n	810c4a0 <_dtoa_r+0x8f8>
 810c4b6:	d082      	beq.n	810c3be <_dtoa_r+0x816>
 810c4b8:	9a05      	ldr	r2, [sp, #20]
 810c4ba:	331c      	adds	r3, #28
 810c4bc:	441a      	add	r2, r3
 810c4be:	9205      	str	r2, [sp, #20]
 810c4c0:	9a06      	ldr	r2, [sp, #24]
 810c4c2:	441a      	add	r2, r3
 810c4c4:	441d      	add	r5, r3
 810c4c6:	9206      	str	r2, [sp, #24]
 810c4c8:	e779      	b.n	810c3be <_dtoa_r+0x816>
 810c4ca:	4603      	mov	r3, r0
 810c4cc:	e7f4      	b.n	810c4b8 <_dtoa_r+0x910>
 810c4ce:	9b04      	ldr	r3, [sp, #16]
 810c4d0:	2b00      	cmp	r3, #0
 810c4d2:	dc37      	bgt.n	810c544 <_dtoa_r+0x99c>
 810c4d4:	9b07      	ldr	r3, [sp, #28]
 810c4d6:	2b02      	cmp	r3, #2
 810c4d8:	dd34      	ble.n	810c544 <_dtoa_r+0x99c>
 810c4da:	9b04      	ldr	r3, [sp, #16]
 810c4dc:	9301      	str	r3, [sp, #4]
 810c4de:	9b01      	ldr	r3, [sp, #4]
 810c4e0:	b963      	cbnz	r3, 810c4fc <_dtoa_r+0x954>
 810c4e2:	4631      	mov	r1, r6
 810c4e4:	2205      	movs	r2, #5
 810c4e6:	4620      	mov	r0, r4
 810c4e8:	f000 f9fe 	bl	810c8e8 <__multadd>
 810c4ec:	4601      	mov	r1, r0
 810c4ee:	4606      	mov	r6, r0
 810c4f0:	4650      	mov	r0, sl
 810c4f2:	f000 fc5d 	bl	810cdb0 <__mcmp>
 810c4f6:	2800      	cmp	r0, #0
 810c4f8:	f73f adbb 	bgt.w	810c072 <_dtoa_r+0x4ca>
 810c4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c4fe:	9d00      	ldr	r5, [sp, #0]
 810c500:	ea6f 0b03 	mvn.w	fp, r3
 810c504:	f04f 0800 	mov.w	r8, #0
 810c508:	4631      	mov	r1, r6
 810c50a:	4620      	mov	r0, r4
 810c50c:	f000 f9ca 	bl	810c8a4 <_Bfree>
 810c510:	2f00      	cmp	r7, #0
 810c512:	f43f aeab 	beq.w	810c26c <_dtoa_r+0x6c4>
 810c516:	f1b8 0f00 	cmp.w	r8, #0
 810c51a:	d005      	beq.n	810c528 <_dtoa_r+0x980>
 810c51c:	45b8      	cmp	r8, r7
 810c51e:	d003      	beq.n	810c528 <_dtoa_r+0x980>
 810c520:	4641      	mov	r1, r8
 810c522:	4620      	mov	r0, r4
 810c524:	f000 f9be 	bl	810c8a4 <_Bfree>
 810c528:	4639      	mov	r1, r7
 810c52a:	4620      	mov	r0, r4
 810c52c:	f000 f9ba 	bl	810c8a4 <_Bfree>
 810c530:	e69c      	b.n	810c26c <_dtoa_r+0x6c4>
 810c532:	2600      	movs	r6, #0
 810c534:	4637      	mov	r7, r6
 810c536:	e7e1      	b.n	810c4fc <_dtoa_r+0x954>
 810c538:	46bb      	mov	fp, r7
 810c53a:	4637      	mov	r7, r6
 810c53c:	e599      	b.n	810c072 <_dtoa_r+0x4ca>
 810c53e:	bf00      	nop
 810c540:	40240000 	.word	0x40240000
 810c544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c546:	2b00      	cmp	r3, #0
 810c548:	f000 80c8 	beq.w	810c6dc <_dtoa_r+0xb34>
 810c54c:	9b04      	ldr	r3, [sp, #16]
 810c54e:	9301      	str	r3, [sp, #4]
 810c550:	2d00      	cmp	r5, #0
 810c552:	dd05      	ble.n	810c560 <_dtoa_r+0x9b8>
 810c554:	4639      	mov	r1, r7
 810c556:	462a      	mov	r2, r5
 810c558:	4620      	mov	r0, r4
 810c55a:	f000 fbbd 	bl	810ccd8 <__lshift>
 810c55e:	4607      	mov	r7, r0
 810c560:	f1b8 0f00 	cmp.w	r8, #0
 810c564:	d05b      	beq.n	810c61e <_dtoa_r+0xa76>
 810c566:	6879      	ldr	r1, [r7, #4]
 810c568:	4620      	mov	r0, r4
 810c56a:	f000 f95b 	bl	810c824 <_Balloc>
 810c56e:	4605      	mov	r5, r0
 810c570:	b928      	cbnz	r0, 810c57e <_dtoa_r+0x9d6>
 810c572:	4b83      	ldr	r3, [pc, #524]	; (810c780 <_dtoa_r+0xbd8>)
 810c574:	4602      	mov	r2, r0
 810c576:	f240 21ef 	movw	r1, #751	; 0x2ef
 810c57a:	f7ff bb2e 	b.w	810bbda <_dtoa_r+0x32>
 810c57e:	693a      	ldr	r2, [r7, #16]
 810c580:	3202      	adds	r2, #2
 810c582:	0092      	lsls	r2, r2, #2
 810c584:	f107 010c 	add.w	r1, r7, #12
 810c588:	300c      	adds	r0, #12
 810c58a:	f7ff fa70 	bl	810ba6e <memcpy>
 810c58e:	2201      	movs	r2, #1
 810c590:	4629      	mov	r1, r5
 810c592:	4620      	mov	r0, r4
 810c594:	f000 fba0 	bl	810ccd8 <__lshift>
 810c598:	9b00      	ldr	r3, [sp, #0]
 810c59a:	3301      	adds	r3, #1
 810c59c:	9304      	str	r3, [sp, #16]
 810c59e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810c5a2:	4413      	add	r3, r2
 810c5a4:	9308      	str	r3, [sp, #32]
 810c5a6:	9b02      	ldr	r3, [sp, #8]
 810c5a8:	f003 0301 	and.w	r3, r3, #1
 810c5ac:	46b8      	mov	r8, r7
 810c5ae:	9306      	str	r3, [sp, #24]
 810c5b0:	4607      	mov	r7, r0
 810c5b2:	9b04      	ldr	r3, [sp, #16]
 810c5b4:	4631      	mov	r1, r6
 810c5b6:	3b01      	subs	r3, #1
 810c5b8:	4650      	mov	r0, sl
 810c5ba:	9301      	str	r3, [sp, #4]
 810c5bc:	f7ff fa6c 	bl	810ba98 <quorem>
 810c5c0:	4641      	mov	r1, r8
 810c5c2:	9002      	str	r0, [sp, #8]
 810c5c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810c5c8:	4650      	mov	r0, sl
 810c5ca:	f000 fbf1 	bl	810cdb0 <__mcmp>
 810c5ce:	463a      	mov	r2, r7
 810c5d0:	9005      	str	r0, [sp, #20]
 810c5d2:	4631      	mov	r1, r6
 810c5d4:	4620      	mov	r0, r4
 810c5d6:	f000 fc07 	bl	810cde8 <__mdiff>
 810c5da:	68c2      	ldr	r2, [r0, #12]
 810c5dc:	4605      	mov	r5, r0
 810c5de:	bb02      	cbnz	r2, 810c622 <_dtoa_r+0xa7a>
 810c5e0:	4601      	mov	r1, r0
 810c5e2:	4650      	mov	r0, sl
 810c5e4:	f000 fbe4 	bl	810cdb0 <__mcmp>
 810c5e8:	4602      	mov	r2, r0
 810c5ea:	4629      	mov	r1, r5
 810c5ec:	4620      	mov	r0, r4
 810c5ee:	9209      	str	r2, [sp, #36]	; 0x24
 810c5f0:	f000 f958 	bl	810c8a4 <_Bfree>
 810c5f4:	9b07      	ldr	r3, [sp, #28]
 810c5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c5f8:	9d04      	ldr	r5, [sp, #16]
 810c5fa:	ea43 0102 	orr.w	r1, r3, r2
 810c5fe:	9b06      	ldr	r3, [sp, #24]
 810c600:	4319      	orrs	r1, r3
 810c602:	d110      	bne.n	810c626 <_dtoa_r+0xa7e>
 810c604:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810c608:	d029      	beq.n	810c65e <_dtoa_r+0xab6>
 810c60a:	9b05      	ldr	r3, [sp, #20]
 810c60c:	2b00      	cmp	r3, #0
 810c60e:	dd02      	ble.n	810c616 <_dtoa_r+0xa6e>
 810c610:	9b02      	ldr	r3, [sp, #8]
 810c612:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810c616:	9b01      	ldr	r3, [sp, #4]
 810c618:	f883 9000 	strb.w	r9, [r3]
 810c61c:	e774      	b.n	810c508 <_dtoa_r+0x960>
 810c61e:	4638      	mov	r0, r7
 810c620:	e7ba      	b.n	810c598 <_dtoa_r+0x9f0>
 810c622:	2201      	movs	r2, #1
 810c624:	e7e1      	b.n	810c5ea <_dtoa_r+0xa42>
 810c626:	9b05      	ldr	r3, [sp, #20]
 810c628:	2b00      	cmp	r3, #0
 810c62a:	db04      	blt.n	810c636 <_dtoa_r+0xa8e>
 810c62c:	9907      	ldr	r1, [sp, #28]
 810c62e:	430b      	orrs	r3, r1
 810c630:	9906      	ldr	r1, [sp, #24]
 810c632:	430b      	orrs	r3, r1
 810c634:	d120      	bne.n	810c678 <_dtoa_r+0xad0>
 810c636:	2a00      	cmp	r2, #0
 810c638:	dded      	ble.n	810c616 <_dtoa_r+0xa6e>
 810c63a:	4651      	mov	r1, sl
 810c63c:	2201      	movs	r2, #1
 810c63e:	4620      	mov	r0, r4
 810c640:	f000 fb4a 	bl	810ccd8 <__lshift>
 810c644:	4631      	mov	r1, r6
 810c646:	4682      	mov	sl, r0
 810c648:	f000 fbb2 	bl	810cdb0 <__mcmp>
 810c64c:	2800      	cmp	r0, #0
 810c64e:	dc03      	bgt.n	810c658 <_dtoa_r+0xab0>
 810c650:	d1e1      	bne.n	810c616 <_dtoa_r+0xa6e>
 810c652:	f019 0f01 	tst.w	r9, #1
 810c656:	d0de      	beq.n	810c616 <_dtoa_r+0xa6e>
 810c658:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810c65c:	d1d8      	bne.n	810c610 <_dtoa_r+0xa68>
 810c65e:	9a01      	ldr	r2, [sp, #4]
 810c660:	2339      	movs	r3, #57	; 0x39
 810c662:	7013      	strb	r3, [r2, #0]
 810c664:	462b      	mov	r3, r5
 810c666:	461d      	mov	r5, r3
 810c668:	3b01      	subs	r3, #1
 810c66a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810c66e:	2a39      	cmp	r2, #57	; 0x39
 810c670:	d06c      	beq.n	810c74c <_dtoa_r+0xba4>
 810c672:	3201      	adds	r2, #1
 810c674:	701a      	strb	r2, [r3, #0]
 810c676:	e747      	b.n	810c508 <_dtoa_r+0x960>
 810c678:	2a00      	cmp	r2, #0
 810c67a:	dd07      	ble.n	810c68c <_dtoa_r+0xae4>
 810c67c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810c680:	d0ed      	beq.n	810c65e <_dtoa_r+0xab6>
 810c682:	9a01      	ldr	r2, [sp, #4]
 810c684:	f109 0301 	add.w	r3, r9, #1
 810c688:	7013      	strb	r3, [r2, #0]
 810c68a:	e73d      	b.n	810c508 <_dtoa_r+0x960>
 810c68c:	9b04      	ldr	r3, [sp, #16]
 810c68e:	9a08      	ldr	r2, [sp, #32]
 810c690:	f803 9c01 	strb.w	r9, [r3, #-1]
 810c694:	4293      	cmp	r3, r2
 810c696:	d043      	beq.n	810c720 <_dtoa_r+0xb78>
 810c698:	4651      	mov	r1, sl
 810c69a:	2300      	movs	r3, #0
 810c69c:	220a      	movs	r2, #10
 810c69e:	4620      	mov	r0, r4
 810c6a0:	f000 f922 	bl	810c8e8 <__multadd>
 810c6a4:	45b8      	cmp	r8, r7
 810c6a6:	4682      	mov	sl, r0
 810c6a8:	f04f 0300 	mov.w	r3, #0
 810c6ac:	f04f 020a 	mov.w	r2, #10
 810c6b0:	4641      	mov	r1, r8
 810c6b2:	4620      	mov	r0, r4
 810c6b4:	d107      	bne.n	810c6c6 <_dtoa_r+0xb1e>
 810c6b6:	f000 f917 	bl	810c8e8 <__multadd>
 810c6ba:	4680      	mov	r8, r0
 810c6bc:	4607      	mov	r7, r0
 810c6be:	9b04      	ldr	r3, [sp, #16]
 810c6c0:	3301      	adds	r3, #1
 810c6c2:	9304      	str	r3, [sp, #16]
 810c6c4:	e775      	b.n	810c5b2 <_dtoa_r+0xa0a>
 810c6c6:	f000 f90f 	bl	810c8e8 <__multadd>
 810c6ca:	4639      	mov	r1, r7
 810c6cc:	4680      	mov	r8, r0
 810c6ce:	2300      	movs	r3, #0
 810c6d0:	220a      	movs	r2, #10
 810c6d2:	4620      	mov	r0, r4
 810c6d4:	f000 f908 	bl	810c8e8 <__multadd>
 810c6d8:	4607      	mov	r7, r0
 810c6da:	e7f0      	b.n	810c6be <_dtoa_r+0xb16>
 810c6dc:	9b04      	ldr	r3, [sp, #16]
 810c6de:	9301      	str	r3, [sp, #4]
 810c6e0:	9d00      	ldr	r5, [sp, #0]
 810c6e2:	4631      	mov	r1, r6
 810c6e4:	4650      	mov	r0, sl
 810c6e6:	f7ff f9d7 	bl	810ba98 <quorem>
 810c6ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810c6ee:	9b00      	ldr	r3, [sp, #0]
 810c6f0:	f805 9b01 	strb.w	r9, [r5], #1
 810c6f4:	1aea      	subs	r2, r5, r3
 810c6f6:	9b01      	ldr	r3, [sp, #4]
 810c6f8:	4293      	cmp	r3, r2
 810c6fa:	dd07      	ble.n	810c70c <_dtoa_r+0xb64>
 810c6fc:	4651      	mov	r1, sl
 810c6fe:	2300      	movs	r3, #0
 810c700:	220a      	movs	r2, #10
 810c702:	4620      	mov	r0, r4
 810c704:	f000 f8f0 	bl	810c8e8 <__multadd>
 810c708:	4682      	mov	sl, r0
 810c70a:	e7ea      	b.n	810c6e2 <_dtoa_r+0xb3a>
 810c70c:	9b01      	ldr	r3, [sp, #4]
 810c70e:	2b00      	cmp	r3, #0
 810c710:	bfc8      	it	gt
 810c712:	461d      	movgt	r5, r3
 810c714:	9b00      	ldr	r3, [sp, #0]
 810c716:	bfd8      	it	le
 810c718:	2501      	movle	r5, #1
 810c71a:	441d      	add	r5, r3
 810c71c:	f04f 0800 	mov.w	r8, #0
 810c720:	4651      	mov	r1, sl
 810c722:	2201      	movs	r2, #1
 810c724:	4620      	mov	r0, r4
 810c726:	f000 fad7 	bl	810ccd8 <__lshift>
 810c72a:	4631      	mov	r1, r6
 810c72c:	4682      	mov	sl, r0
 810c72e:	f000 fb3f 	bl	810cdb0 <__mcmp>
 810c732:	2800      	cmp	r0, #0
 810c734:	dc96      	bgt.n	810c664 <_dtoa_r+0xabc>
 810c736:	d102      	bne.n	810c73e <_dtoa_r+0xb96>
 810c738:	f019 0f01 	tst.w	r9, #1
 810c73c:	d192      	bne.n	810c664 <_dtoa_r+0xabc>
 810c73e:	462b      	mov	r3, r5
 810c740:	461d      	mov	r5, r3
 810c742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c746:	2a30      	cmp	r2, #48	; 0x30
 810c748:	d0fa      	beq.n	810c740 <_dtoa_r+0xb98>
 810c74a:	e6dd      	b.n	810c508 <_dtoa_r+0x960>
 810c74c:	9a00      	ldr	r2, [sp, #0]
 810c74e:	429a      	cmp	r2, r3
 810c750:	d189      	bne.n	810c666 <_dtoa_r+0xabe>
 810c752:	f10b 0b01 	add.w	fp, fp, #1
 810c756:	2331      	movs	r3, #49	; 0x31
 810c758:	e796      	b.n	810c688 <_dtoa_r+0xae0>
 810c75a:	4b0a      	ldr	r3, [pc, #40]	; (810c784 <_dtoa_r+0xbdc>)
 810c75c:	f7ff ba99 	b.w	810bc92 <_dtoa_r+0xea>
 810c760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c762:	2b00      	cmp	r3, #0
 810c764:	f47f aa6d 	bne.w	810bc42 <_dtoa_r+0x9a>
 810c768:	4b07      	ldr	r3, [pc, #28]	; (810c788 <_dtoa_r+0xbe0>)
 810c76a:	f7ff ba92 	b.w	810bc92 <_dtoa_r+0xea>
 810c76e:	9b01      	ldr	r3, [sp, #4]
 810c770:	2b00      	cmp	r3, #0
 810c772:	dcb5      	bgt.n	810c6e0 <_dtoa_r+0xb38>
 810c774:	9b07      	ldr	r3, [sp, #28]
 810c776:	2b02      	cmp	r3, #2
 810c778:	f73f aeb1 	bgt.w	810c4de <_dtoa_r+0x936>
 810c77c:	e7b0      	b.n	810c6e0 <_dtoa_r+0xb38>
 810c77e:	bf00      	nop
 810c780:	081ec355 	.word	0x081ec355
 810c784:	081ec2b0 	.word	0x081ec2b0
 810c788:	081ec2d9 	.word	0x081ec2d9

0810c78c <_free_r>:
 810c78c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c78e:	2900      	cmp	r1, #0
 810c790:	d044      	beq.n	810c81c <_free_r+0x90>
 810c792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c796:	9001      	str	r0, [sp, #4]
 810c798:	2b00      	cmp	r3, #0
 810c79a:	f1a1 0404 	sub.w	r4, r1, #4
 810c79e:	bfb8      	it	lt
 810c7a0:	18e4      	addlt	r4, r4, r3
 810c7a2:	f7fd fffb 	bl	810a79c <__malloc_lock>
 810c7a6:	4a1e      	ldr	r2, [pc, #120]	; (810c820 <_free_r+0x94>)
 810c7a8:	9801      	ldr	r0, [sp, #4]
 810c7aa:	6813      	ldr	r3, [r2, #0]
 810c7ac:	b933      	cbnz	r3, 810c7bc <_free_r+0x30>
 810c7ae:	6063      	str	r3, [r4, #4]
 810c7b0:	6014      	str	r4, [r2, #0]
 810c7b2:	b003      	add	sp, #12
 810c7b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810c7b8:	f7fd bff6 	b.w	810a7a8 <__malloc_unlock>
 810c7bc:	42a3      	cmp	r3, r4
 810c7be:	d908      	bls.n	810c7d2 <_free_r+0x46>
 810c7c0:	6825      	ldr	r5, [r4, #0]
 810c7c2:	1961      	adds	r1, r4, r5
 810c7c4:	428b      	cmp	r3, r1
 810c7c6:	bf01      	itttt	eq
 810c7c8:	6819      	ldreq	r1, [r3, #0]
 810c7ca:	685b      	ldreq	r3, [r3, #4]
 810c7cc:	1949      	addeq	r1, r1, r5
 810c7ce:	6021      	streq	r1, [r4, #0]
 810c7d0:	e7ed      	b.n	810c7ae <_free_r+0x22>
 810c7d2:	461a      	mov	r2, r3
 810c7d4:	685b      	ldr	r3, [r3, #4]
 810c7d6:	b10b      	cbz	r3, 810c7dc <_free_r+0x50>
 810c7d8:	42a3      	cmp	r3, r4
 810c7da:	d9fa      	bls.n	810c7d2 <_free_r+0x46>
 810c7dc:	6811      	ldr	r1, [r2, #0]
 810c7de:	1855      	adds	r5, r2, r1
 810c7e0:	42a5      	cmp	r5, r4
 810c7e2:	d10b      	bne.n	810c7fc <_free_r+0x70>
 810c7e4:	6824      	ldr	r4, [r4, #0]
 810c7e6:	4421      	add	r1, r4
 810c7e8:	1854      	adds	r4, r2, r1
 810c7ea:	42a3      	cmp	r3, r4
 810c7ec:	6011      	str	r1, [r2, #0]
 810c7ee:	d1e0      	bne.n	810c7b2 <_free_r+0x26>
 810c7f0:	681c      	ldr	r4, [r3, #0]
 810c7f2:	685b      	ldr	r3, [r3, #4]
 810c7f4:	6053      	str	r3, [r2, #4]
 810c7f6:	440c      	add	r4, r1
 810c7f8:	6014      	str	r4, [r2, #0]
 810c7fa:	e7da      	b.n	810c7b2 <_free_r+0x26>
 810c7fc:	d902      	bls.n	810c804 <_free_r+0x78>
 810c7fe:	230c      	movs	r3, #12
 810c800:	6003      	str	r3, [r0, #0]
 810c802:	e7d6      	b.n	810c7b2 <_free_r+0x26>
 810c804:	6825      	ldr	r5, [r4, #0]
 810c806:	1961      	adds	r1, r4, r5
 810c808:	428b      	cmp	r3, r1
 810c80a:	bf04      	itt	eq
 810c80c:	6819      	ldreq	r1, [r3, #0]
 810c80e:	685b      	ldreq	r3, [r3, #4]
 810c810:	6063      	str	r3, [r4, #4]
 810c812:	bf04      	itt	eq
 810c814:	1949      	addeq	r1, r1, r5
 810c816:	6021      	streq	r1, [r4, #0]
 810c818:	6054      	str	r4, [r2, #4]
 810c81a:	e7ca      	b.n	810c7b2 <_free_r+0x26>
 810c81c:	b003      	add	sp, #12
 810c81e:	bd30      	pop	{r4, r5, pc}
 810c820:	1001ab30 	.word	0x1001ab30

0810c824 <_Balloc>:
 810c824:	b570      	push	{r4, r5, r6, lr}
 810c826:	69c6      	ldr	r6, [r0, #28]
 810c828:	4604      	mov	r4, r0
 810c82a:	460d      	mov	r5, r1
 810c82c:	b976      	cbnz	r6, 810c84c <_Balloc+0x28>
 810c82e:	2010      	movs	r0, #16
 810c830:	f7fd ff0c 	bl	810a64c <malloc>
 810c834:	4602      	mov	r2, r0
 810c836:	61e0      	str	r0, [r4, #28]
 810c838:	b920      	cbnz	r0, 810c844 <_Balloc+0x20>
 810c83a:	4b18      	ldr	r3, [pc, #96]	; (810c89c <_Balloc+0x78>)
 810c83c:	4818      	ldr	r0, [pc, #96]	; (810c8a0 <_Balloc+0x7c>)
 810c83e:	216b      	movs	r1, #107	; 0x6b
 810c840:	f001 ff3e 	bl	810e6c0 <__assert_func>
 810c844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c848:	6006      	str	r6, [r0, #0]
 810c84a:	60c6      	str	r6, [r0, #12]
 810c84c:	69e6      	ldr	r6, [r4, #28]
 810c84e:	68f3      	ldr	r3, [r6, #12]
 810c850:	b183      	cbz	r3, 810c874 <_Balloc+0x50>
 810c852:	69e3      	ldr	r3, [r4, #28]
 810c854:	68db      	ldr	r3, [r3, #12]
 810c856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c85a:	b9b8      	cbnz	r0, 810c88c <_Balloc+0x68>
 810c85c:	2101      	movs	r1, #1
 810c85e:	fa01 f605 	lsl.w	r6, r1, r5
 810c862:	1d72      	adds	r2, r6, #5
 810c864:	0092      	lsls	r2, r2, #2
 810c866:	4620      	mov	r0, r4
 810c868:	f001 ff48 	bl	810e6fc <_calloc_r>
 810c86c:	b160      	cbz	r0, 810c888 <_Balloc+0x64>
 810c86e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c872:	e00e      	b.n	810c892 <_Balloc+0x6e>
 810c874:	2221      	movs	r2, #33	; 0x21
 810c876:	2104      	movs	r1, #4
 810c878:	4620      	mov	r0, r4
 810c87a:	f001 ff3f 	bl	810e6fc <_calloc_r>
 810c87e:	69e3      	ldr	r3, [r4, #28]
 810c880:	60f0      	str	r0, [r6, #12]
 810c882:	68db      	ldr	r3, [r3, #12]
 810c884:	2b00      	cmp	r3, #0
 810c886:	d1e4      	bne.n	810c852 <_Balloc+0x2e>
 810c888:	2000      	movs	r0, #0
 810c88a:	bd70      	pop	{r4, r5, r6, pc}
 810c88c:	6802      	ldr	r2, [r0, #0]
 810c88e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c892:	2300      	movs	r3, #0
 810c894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c898:	e7f7      	b.n	810c88a <_Balloc+0x66>
 810c89a:	bf00      	nop
 810c89c:	081ec2e6 	.word	0x081ec2e6
 810c8a0:	081ec366 	.word	0x081ec366

0810c8a4 <_Bfree>:
 810c8a4:	b570      	push	{r4, r5, r6, lr}
 810c8a6:	69c6      	ldr	r6, [r0, #28]
 810c8a8:	4605      	mov	r5, r0
 810c8aa:	460c      	mov	r4, r1
 810c8ac:	b976      	cbnz	r6, 810c8cc <_Bfree+0x28>
 810c8ae:	2010      	movs	r0, #16
 810c8b0:	f7fd fecc 	bl	810a64c <malloc>
 810c8b4:	4602      	mov	r2, r0
 810c8b6:	61e8      	str	r0, [r5, #28]
 810c8b8:	b920      	cbnz	r0, 810c8c4 <_Bfree+0x20>
 810c8ba:	4b09      	ldr	r3, [pc, #36]	; (810c8e0 <_Bfree+0x3c>)
 810c8bc:	4809      	ldr	r0, [pc, #36]	; (810c8e4 <_Bfree+0x40>)
 810c8be:	218f      	movs	r1, #143	; 0x8f
 810c8c0:	f001 fefe 	bl	810e6c0 <__assert_func>
 810c8c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c8c8:	6006      	str	r6, [r0, #0]
 810c8ca:	60c6      	str	r6, [r0, #12]
 810c8cc:	b13c      	cbz	r4, 810c8de <_Bfree+0x3a>
 810c8ce:	69eb      	ldr	r3, [r5, #28]
 810c8d0:	6862      	ldr	r2, [r4, #4]
 810c8d2:	68db      	ldr	r3, [r3, #12]
 810c8d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c8d8:	6021      	str	r1, [r4, #0]
 810c8da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c8de:	bd70      	pop	{r4, r5, r6, pc}
 810c8e0:	081ec2e6 	.word	0x081ec2e6
 810c8e4:	081ec366 	.word	0x081ec366

0810c8e8 <__multadd>:
 810c8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c8ec:	690d      	ldr	r5, [r1, #16]
 810c8ee:	4607      	mov	r7, r0
 810c8f0:	460c      	mov	r4, r1
 810c8f2:	461e      	mov	r6, r3
 810c8f4:	f101 0c14 	add.w	ip, r1, #20
 810c8f8:	2000      	movs	r0, #0
 810c8fa:	f8dc 3000 	ldr.w	r3, [ip]
 810c8fe:	b299      	uxth	r1, r3
 810c900:	fb02 6101 	mla	r1, r2, r1, r6
 810c904:	0c1e      	lsrs	r6, r3, #16
 810c906:	0c0b      	lsrs	r3, r1, #16
 810c908:	fb02 3306 	mla	r3, r2, r6, r3
 810c90c:	b289      	uxth	r1, r1
 810c90e:	3001      	adds	r0, #1
 810c910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c914:	4285      	cmp	r5, r0
 810c916:	f84c 1b04 	str.w	r1, [ip], #4
 810c91a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c91e:	dcec      	bgt.n	810c8fa <__multadd+0x12>
 810c920:	b30e      	cbz	r6, 810c966 <__multadd+0x7e>
 810c922:	68a3      	ldr	r3, [r4, #8]
 810c924:	42ab      	cmp	r3, r5
 810c926:	dc19      	bgt.n	810c95c <__multadd+0x74>
 810c928:	6861      	ldr	r1, [r4, #4]
 810c92a:	4638      	mov	r0, r7
 810c92c:	3101      	adds	r1, #1
 810c92e:	f7ff ff79 	bl	810c824 <_Balloc>
 810c932:	4680      	mov	r8, r0
 810c934:	b928      	cbnz	r0, 810c942 <__multadd+0x5a>
 810c936:	4602      	mov	r2, r0
 810c938:	4b0c      	ldr	r3, [pc, #48]	; (810c96c <__multadd+0x84>)
 810c93a:	480d      	ldr	r0, [pc, #52]	; (810c970 <__multadd+0x88>)
 810c93c:	21ba      	movs	r1, #186	; 0xba
 810c93e:	f001 febf 	bl	810e6c0 <__assert_func>
 810c942:	6922      	ldr	r2, [r4, #16]
 810c944:	3202      	adds	r2, #2
 810c946:	f104 010c 	add.w	r1, r4, #12
 810c94a:	0092      	lsls	r2, r2, #2
 810c94c:	300c      	adds	r0, #12
 810c94e:	f7ff f88e 	bl	810ba6e <memcpy>
 810c952:	4621      	mov	r1, r4
 810c954:	4638      	mov	r0, r7
 810c956:	f7ff ffa5 	bl	810c8a4 <_Bfree>
 810c95a:	4644      	mov	r4, r8
 810c95c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c960:	3501      	adds	r5, #1
 810c962:	615e      	str	r6, [r3, #20]
 810c964:	6125      	str	r5, [r4, #16]
 810c966:	4620      	mov	r0, r4
 810c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c96c:	081ec355 	.word	0x081ec355
 810c970:	081ec366 	.word	0x081ec366

0810c974 <__s2b>:
 810c974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c978:	460c      	mov	r4, r1
 810c97a:	4615      	mov	r5, r2
 810c97c:	461f      	mov	r7, r3
 810c97e:	2209      	movs	r2, #9
 810c980:	3308      	adds	r3, #8
 810c982:	4606      	mov	r6, r0
 810c984:	fb93 f3f2 	sdiv	r3, r3, r2
 810c988:	2100      	movs	r1, #0
 810c98a:	2201      	movs	r2, #1
 810c98c:	429a      	cmp	r2, r3
 810c98e:	db09      	blt.n	810c9a4 <__s2b+0x30>
 810c990:	4630      	mov	r0, r6
 810c992:	f7ff ff47 	bl	810c824 <_Balloc>
 810c996:	b940      	cbnz	r0, 810c9aa <__s2b+0x36>
 810c998:	4602      	mov	r2, r0
 810c99a:	4b19      	ldr	r3, [pc, #100]	; (810ca00 <__s2b+0x8c>)
 810c99c:	4819      	ldr	r0, [pc, #100]	; (810ca04 <__s2b+0x90>)
 810c99e:	21d3      	movs	r1, #211	; 0xd3
 810c9a0:	f001 fe8e 	bl	810e6c0 <__assert_func>
 810c9a4:	0052      	lsls	r2, r2, #1
 810c9a6:	3101      	adds	r1, #1
 810c9a8:	e7f0      	b.n	810c98c <__s2b+0x18>
 810c9aa:	9b08      	ldr	r3, [sp, #32]
 810c9ac:	6143      	str	r3, [r0, #20]
 810c9ae:	2d09      	cmp	r5, #9
 810c9b0:	f04f 0301 	mov.w	r3, #1
 810c9b4:	6103      	str	r3, [r0, #16]
 810c9b6:	dd16      	ble.n	810c9e6 <__s2b+0x72>
 810c9b8:	f104 0909 	add.w	r9, r4, #9
 810c9bc:	46c8      	mov	r8, r9
 810c9be:	442c      	add	r4, r5
 810c9c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c9c4:	4601      	mov	r1, r0
 810c9c6:	3b30      	subs	r3, #48	; 0x30
 810c9c8:	220a      	movs	r2, #10
 810c9ca:	4630      	mov	r0, r6
 810c9cc:	f7ff ff8c 	bl	810c8e8 <__multadd>
 810c9d0:	45a0      	cmp	r8, r4
 810c9d2:	d1f5      	bne.n	810c9c0 <__s2b+0x4c>
 810c9d4:	f1a5 0408 	sub.w	r4, r5, #8
 810c9d8:	444c      	add	r4, r9
 810c9da:	1b2d      	subs	r5, r5, r4
 810c9dc:	1963      	adds	r3, r4, r5
 810c9de:	42bb      	cmp	r3, r7
 810c9e0:	db04      	blt.n	810c9ec <__s2b+0x78>
 810c9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c9e6:	340a      	adds	r4, #10
 810c9e8:	2509      	movs	r5, #9
 810c9ea:	e7f6      	b.n	810c9da <__s2b+0x66>
 810c9ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c9f0:	4601      	mov	r1, r0
 810c9f2:	3b30      	subs	r3, #48	; 0x30
 810c9f4:	220a      	movs	r2, #10
 810c9f6:	4630      	mov	r0, r6
 810c9f8:	f7ff ff76 	bl	810c8e8 <__multadd>
 810c9fc:	e7ee      	b.n	810c9dc <__s2b+0x68>
 810c9fe:	bf00      	nop
 810ca00:	081ec355 	.word	0x081ec355
 810ca04:	081ec366 	.word	0x081ec366

0810ca08 <__hi0bits>:
 810ca08:	0c03      	lsrs	r3, r0, #16
 810ca0a:	041b      	lsls	r3, r3, #16
 810ca0c:	b9d3      	cbnz	r3, 810ca44 <__hi0bits+0x3c>
 810ca0e:	0400      	lsls	r0, r0, #16
 810ca10:	2310      	movs	r3, #16
 810ca12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810ca16:	bf04      	itt	eq
 810ca18:	0200      	lsleq	r0, r0, #8
 810ca1a:	3308      	addeq	r3, #8
 810ca1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810ca20:	bf04      	itt	eq
 810ca22:	0100      	lsleq	r0, r0, #4
 810ca24:	3304      	addeq	r3, #4
 810ca26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810ca2a:	bf04      	itt	eq
 810ca2c:	0080      	lsleq	r0, r0, #2
 810ca2e:	3302      	addeq	r3, #2
 810ca30:	2800      	cmp	r0, #0
 810ca32:	db05      	blt.n	810ca40 <__hi0bits+0x38>
 810ca34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810ca38:	f103 0301 	add.w	r3, r3, #1
 810ca3c:	bf08      	it	eq
 810ca3e:	2320      	moveq	r3, #32
 810ca40:	4618      	mov	r0, r3
 810ca42:	4770      	bx	lr
 810ca44:	2300      	movs	r3, #0
 810ca46:	e7e4      	b.n	810ca12 <__hi0bits+0xa>

0810ca48 <__lo0bits>:
 810ca48:	6803      	ldr	r3, [r0, #0]
 810ca4a:	f013 0207 	ands.w	r2, r3, #7
 810ca4e:	d00c      	beq.n	810ca6a <__lo0bits+0x22>
 810ca50:	07d9      	lsls	r1, r3, #31
 810ca52:	d422      	bmi.n	810ca9a <__lo0bits+0x52>
 810ca54:	079a      	lsls	r2, r3, #30
 810ca56:	bf49      	itett	mi
 810ca58:	085b      	lsrmi	r3, r3, #1
 810ca5a:	089b      	lsrpl	r3, r3, #2
 810ca5c:	6003      	strmi	r3, [r0, #0]
 810ca5e:	2201      	movmi	r2, #1
 810ca60:	bf5c      	itt	pl
 810ca62:	6003      	strpl	r3, [r0, #0]
 810ca64:	2202      	movpl	r2, #2
 810ca66:	4610      	mov	r0, r2
 810ca68:	4770      	bx	lr
 810ca6a:	b299      	uxth	r1, r3
 810ca6c:	b909      	cbnz	r1, 810ca72 <__lo0bits+0x2a>
 810ca6e:	0c1b      	lsrs	r3, r3, #16
 810ca70:	2210      	movs	r2, #16
 810ca72:	b2d9      	uxtb	r1, r3
 810ca74:	b909      	cbnz	r1, 810ca7a <__lo0bits+0x32>
 810ca76:	3208      	adds	r2, #8
 810ca78:	0a1b      	lsrs	r3, r3, #8
 810ca7a:	0719      	lsls	r1, r3, #28
 810ca7c:	bf04      	itt	eq
 810ca7e:	091b      	lsreq	r3, r3, #4
 810ca80:	3204      	addeq	r2, #4
 810ca82:	0799      	lsls	r1, r3, #30
 810ca84:	bf04      	itt	eq
 810ca86:	089b      	lsreq	r3, r3, #2
 810ca88:	3202      	addeq	r2, #2
 810ca8a:	07d9      	lsls	r1, r3, #31
 810ca8c:	d403      	bmi.n	810ca96 <__lo0bits+0x4e>
 810ca8e:	085b      	lsrs	r3, r3, #1
 810ca90:	f102 0201 	add.w	r2, r2, #1
 810ca94:	d003      	beq.n	810ca9e <__lo0bits+0x56>
 810ca96:	6003      	str	r3, [r0, #0]
 810ca98:	e7e5      	b.n	810ca66 <__lo0bits+0x1e>
 810ca9a:	2200      	movs	r2, #0
 810ca9c:	e7e3      	b.n	810ca66 <__lo0bits+0x1e>
 810ca9e:	2220      	movs	r2, #32
 810caa0:	e7e1      	b.n	810ca66 <__lo0bits+0x1e>
	...

0810caa4 <__i2b>:
 810caa4:	b510      	push	{r4, lr}
 810caa6:	460c      	mov	r4, r1
 810caa8:	2101      	movs	r1, #1
 810caaa:	f7ff febb 	bl	810c824 <_Balloc>
 810caae:	4602      	mov	r2, r0
 810cab0:	b928      	cbnz	r0, 810cabe <__i2b+0x1a>
 810cab2:	4b05      	ldr	r3, [pc, #20]	; (810cac8 <__i2b+0x24>)
 810cab4:	4805      	ldr	r0, [pc, #20]	; (810cacc <__i2b+0x28>)
 810cab6:	f240 1145 	movw	r1, #325	; 0x145
 810caba:	f001 fe01 	bl	810e6c0 <__assert_func>
 810cabe:	2301      	movs	r3, #1
 810cac0:	6144      	str	r4, [r0, #20]
 810cac2:	6103      	str	r3, [r0, #16]
 810cac4:	bd10      	pop	{r4, pc}
 810cac6:	bf00      	nop
 810cac8:	081ec355 	.word	0x081ec355
 810cacc:	081ec366 	.word	0x081ec366

0810cad0 <__multiply>:
 810cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cad4:	4691      	mov	r9, r2
 810cad6:	690a      	ldr	r2, [r1, #16]
 810cad8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cadc:	429a      	cmp	r2, r3
 810cade:	bfb8      	it	lt
 810cae0:	460b      	movlt	r3, r1
 810cae2:	460c      	mov	r4, r1
 810cae4:	bfbc      	itt	lt
 810cae6:	464c      	movlt	r4, r9
 810cae8:	4699      	movlt	r9, r3
 810caea:	6927      	ldr	r7, [r4, #16]
 810caec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810caf0:	68a3      	ldr	r3, [r4, #8]
 810caf2:	6861      	ldr	r1, [r4, #4]
 810caf4:	eb07 060a 	add.w	r6, r7, sl
 810caf8:	42b3      	cmp	r3, r6
 810cafa:	b085      	sub	sp, #20
 810cafc:	bfb8      	it	lt
 810cafe:	3101      	addlt	r1, #1
 810cb00:	f7ff fe90 	bl	810c824 <_Balloc>
 810cb04:	b930      	cbnz	r0, 810cb14 <__multiply+0x44>
 810cb06:	4602      	mov	r2, r0
 810cb08:	4b44      	ldr	r3, [pc, #272]	; (810cc1c <__multiply+0x14c>)
 810cb0a:	4845      	ldr	r0, [pc, #276]	; (810cc20 <__multiply+0x150>)
 810cb0c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810cb10:	f001 fdd6 	bl	810e6c0 <__assert_func>
 810cb14:	f100 0514 	add.w	r5, r0, #20
 810cb18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810cb1c:	462b      	mov	r3, r5
 810cb1e:	2200      	movs	r2, #0
 810cb20:	4543      	cmp	r3, r8
 810cb22:	d321      	bcc.n	810cb68 <__multiply+0x98>
 810cb24:	f104 0314 	add.w	r3, r4, #20
 810cb28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810cb2c:	f109 0314 	add.w	r3, r9, #20
 810cb30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810cb34:	9202      	str	r2, [sp, #8]
 810cb36:	1b3a      	subs	r2, r7, r4
 810cb38:	3a15      	subs	r2, #21
 810cb3a:	f022 0203 	bic.w	r2, r2, #3
 810cb3e:	3204      	adds	r2, #4
 810cb40:	f104 0115 	add.w	r1, r4, #21
 810cb44:	428f      	cmp	r7, r1
 810cb46:	bf38      	it	cc
 810cb48:	2204      	movcc	r2, #4
 810cb4a:	9201      	str	r2, [sp, #4]
 810cb4c:	9a02      	ldr	r2, [sp, #8]
 810cb4e:	9303      	str	r3, [sp, #12]
 810cb50:	429a      	cmp	r2, r3
 810cb52:	d80c      	bhi.n	810cb6e <__multiply+0x9e>
 810cb54:	2e00      	cmp	r6, #0
 810cb56:	dd03      	ble.n	810cb60 <__multiply+0x90>
 810cb58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810cb5c:	2b00      	cmp	r3, #0
 810cb5e:	d05b      	beq.n	810cc18 <__multiply+0x148>
 810cb60:	6106      	str	r6, [r0, #16]
 810cb62:	b005      	add	sp, #20
 810cb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cb68:	f843 2b04 	str.w	r2, [r3], #4
 810cb6c:	e7d8      	b.n	810cb20 <__multiply+0x50>
 810cb6e:	f8b3 a000 	ldrh.w	sl, [r3]
 810cb72:	f1ba 0f00 	cmp.w	sl, #0
 810cb76:	d024      	beq.n	810cbc2 <__multiply+0xf2>
 810cb78:	f104 0e14 	add.w	lr, r4, #20
 810cb7c:	46a9      	mov	r9, r5
 810cb7e:	f04f 0c00 	mov.w	ip, #0
 810cb82:	f85e 2b04 	ldr.w	r2, [lr], #4
 810cb86:	f8d9 1000 	ldr.w	r1, [r9]
 810cb8a:	fa1f fb82 	uxth.w	fp, r2
 810cb8e:	b289      	uxth	r1, r1
 810cb90:	fb0a 110b 	mla	r1, sl, fp, r1
 810cb94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810cb98:	f8d9 2000 	ldr.w	r2, [r9]
 810cb9c:	4461      	add	r1, ip
 810cb9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810cba2:	fb0a c20b 	mla	r2, sl, fp, ip
 810cba6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810cbaa:	b289      	uxth	r1, r1
 810cbac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810cbb0:	4577      	cmp	r7, lr
 810cbb2:	f849 1b04 	str.w	r1, [r9], #4
 810cbb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810cbba:	d8e2      	bhi.n	810cb82 <__multiply+0xb2>
 810cbbc:	9a01      	ldr	r2, [sp, #4]
 810cbbe:	f845 c002 	str.w	ip, [r5, r2]
 810cbc2:	9a03      	ldr	r2, [sp, #12]
 810cbc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810cbc8:	3304      	adds	r3, #4
 810cbca:	f1b9 0f00 	cmp.w	r9, #0
 810cbce:	d021      	beq.n	810cc14 <__multiply+0x144>
 810cbd0:	6829      	ldr	r1, [r5, #0]
 810cbd2:	f104 0c14 	add.w	ip, r4, #20
 810cbd6:	46ae      	mov	lr, r5
 810cbd8:	f04f 0a00 	mov.w	sl, #0
 810cbdc:	f8bc b000 	ldrh.w	fp, [ip]
 810cbe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810cbe4:	fb09 220b 	mla	r2, r9, fp, r2
 810cbe8:	4452      	add	r2, sl
 810cbea:	b289      	uxth	r1, r1
 810cbec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810cbf0:	f84e 1b04 	str.w	r1, [lr], #4
 810cbf4:	f85c 1b04 	ldr.w	r1, [ip], #4
 810cbf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cbfc:	f8be 1000 	ldrh.w	r1, [lr]
 810cc00:	fb09 110a 	mla	r1, r9, sl, r1
 810cc04:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810cc08:	4567      	cmp	r7, ip
 810cc0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cc0e:	d8e5      	bhi.n	810cbdc <__multiply+0x10c>
 810cc10:	9a01      	ldr	r2, [sp, #4]
 810cc12:	50a9      	str	r1, [r5, r2]
 810cc14:	3504      	adds	r5, #4
 810cc16:	e799      	b.n	810cb4c <__multiply+0x7c>
 810cc18:	3e01      	subs	r6, #1
 810cc1a:	e79b      	b.n	810cb54 <__multiply+0x84>
 810cc1c:	081ec355 	.word	0x081ec355
 810cc20:	081ec366 	.word	0x081ec366

0810cc24 <__pow5mult>:
 810cc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cc28:	4615      	mov	r5, r2
 810cc2a:	f012 0203 	ands.w	r2, r2, #3
 810cc2e:	4606      	mov	r6, r0
 810cc30:	460f      	mov	r7, r1
 810cc32:	d007      	beq.n	810cc44 <__pow5mult+0x20>
 810cc34:	4c25      	ldr	r4, [pc, #148]	; (810cccc <__pow5mult+0xa8>)
 810cc36:	3a01      	subs	r2, #1
 810cc38:	2300      	movs	r3, #0
 810cc3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810cc3e:	f7ff fe53 	bl	810c8e8 <__multadd>
 810cc42:	4607      	mov	r7, r0
 810cc44:	10ad      	asrs	r5, r5, #2
 810cc46:	d03d      	beq.n	810ccc4 <__pow5mult+0xa0>
 810cc48:	69f4      	ldr	r4, [r6, #28]
 810cc4a:	b97c      	cbnz	r4, 810cc6c <__pow5mult+0x48>
 810cc4c:	2010      	movs	r0, #16
 810cc4e:	f7fd fcfd 	bl	810a64c <malloc>
 810cc52:	4602      	mov	r2, r0
 810cc54:	61f0      	str	r0, [r6, #28]
 810cc56:	b928      	cbnz	r0, 810cc64 <__pow5mult+0x40>
 810cc58:	4b1d      	ldr	r3, [pc, #116]	; (810ccd0 <__pow5mult+0xac>)
 810cc5a:	481e      	ldr	r0, [pc, #120]	; (810ccd4 <__pow5mult+0xb0>)
 810cc5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 810cc60:	f001 fd2e 	bl	810e6c0 <__assert_func>
 810cc64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810cc68:	6004      	str	r4, [r0, #0]
 810cc6a:	60c4      	str	r4, [r0, #12]
 810cc6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810cc70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810cc74:	b94c      	cbnz	r4, 810cc8a <__pow5mult+0x66>
 810cc76:	f240 2171 	movw	r1, #625	; 0x271
 810cc7a:	4630      	mov	r0, r6
 810cc7c:	f7ff ff12 	bl	810caa4 <__i2b>
 810cc80:	2300      	movs	r3, #0
 810cc82:	f8c8 0008 	str.w	r0, [r8, #8]
 810cc86:	4604      	mov	r4, r0
 810cc88:	6003      	str	r3, [r0, #0]
 810cc8a:	f04f 0900 	mov.w	r9, #0
 810cc8e:	07eb      	lsls	r3, r5, #31
 810cc90:	d50a      	bpl.n	810cca8 <__pow5mult+0x84>
 810cc92:	4639      	mov	r1, r7
 810cc94:	4622      	mov	r2, r4
 810cc96:	4630      	mov	r0, r6
 810cc98:	f7ff ff1a 	bl	810cad0 <__multiply>
 810cc9c:	4639      	mov	r1, r7
 810cc9e:	4680      	mov	r8, r0
 810cca0:	4630      	mov	r0, r6
 810cca2:	f7ff fdff 	bl	810c8a4 <_Bfree>
 810cca6:	4647      	mov	r7, r8
 810cca8:	106d      	asrs	r5, r5, #1
 810ccaa:	d00b      	beq.n	810ccc4 <__pow5mult+0xa0>
 810ccac:	6820      	ldr	r0, [r4, #0]
 810ccae:	b938      	cbnz	r0, 810ccc0 <__pow5mult+0x9c>
 810ccb0:	4622      	mov	r2, r4
 810ccb2:	4621      	mov	r1, r4
 810ccb4:	4630      	mov	r0, r6
 810ccb6:	f7ff ff0b 	bl	810cad0 <__multiply>
 810ccba:	6020      	str	r0, [r4, #0]
 810ccbc:	f8c0 9000 	str.w	r9, [r0]
 810ccc0:	4604      	mov	r4, r0
 810ccc2:	e7e4      	b.n	810cc8e <__pow5mult+0x6a>
 810ccc4:	4638      	mov	r0, r7
 810ccc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ccca:	bf00      	nop
 810cccc:	081ec4b0 	.word	0x081ec4b0
 810ccd0:	081ec2e6 	.word	0x081ec2e6
 810ccd4:	081ec366 	.word	0x081ec366

0810ccd8 <__lshift>:
 810ccd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ccdc:	460c      	mov	r4, r1
 810ccde:	6849      	ldr	r1, [r1, #4]
 810cce0:	6923      	ldr	r3, [r4, #16]
 810cce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810cce6:	68a3      	ldr	r3, [r4, #8]
 810cce8:	4607      	mov	r7, r0
 810ccea:	4691      	mov	r9, r2
 810ccec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810ccf0:	f108 0601 	add.w	r6, r8, #1
 810ccf4:	42b3      	cmp	r3, r6
 810ccf6:	db0b      	blt.n	810cd10 <__lshift+0x38>
 810ccf8:	4638      	mov	r0, r7
 810ccfa:	f7ff fd93 	bl	810c824 <_Balloc>
 810ccfe:	4605      	mov	r5, r0
 810cd00:	b948      	cbnz	r0, 810cd16 <__lshift+0x3e>
 810cd02:	4602      	mov	r2, r0
 810cd04:	4b28      	ldr	r3, [pc, #160]	; (810cda8 <__lshift+0xd0>)
 810cd06:	4829      	ldr	r0, [pc, #164]	; (810cdac <__lshift+0xd4>)
 810cd08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810cd0c:	f001 fcd8 	bl	810e6c0 <__assert_func>
 810cd10:	3101      	adds	r1, #1
 810cd12:	005b      	lsls	r3, r3, #1
 810cd14:	e7ee      	b.n	810ccf4 <__lshift+0x1c>
 810cd16:	2300      	movs	r3, #0
 810cd18:	f100 0114 	add.w	r1, r0, #20
 810cd1c:	f100 0210 	add.w	r2, r0, #16
 810cd20:	4618      	mov	r0, r3
 810cd22:	4553      	cmp	r3, sl
 810cd24:	db33      	blt.n	810cd8e <__lshift+0xb6>
 810cd26:	6920      	ldr	r0, [r4, #16]
 810cd28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810cd2c:	f104 0314 	add.w	r3, r4, #20
 810cd30:	f019 091f 	ands.w	r9, r9, #31
 810cd34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810cd38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810cd3c:	d02b      	beq.n	810cd96 <__lshift+0xbe>
 810cd3e:	f1c9 0e20 	rsb	lr, r9, #32
 810cd42:	468a      	mov	sl, r1
 810cd44:	2200      	movs	r2, #0
 810cd46:	6818      	ldr	r0, [r3, #0]
 810cd48:	fa00 f009 	lsl.w	r0, r0, r9
 810cd4c:	4310      	orrs	r0, r2
 810cd4e:	f84a 0b04 	str.w	r0, [sl], #4
 810cd52:	f853 2b04 	ldr.w	r2, [r3], #4
 810cd56:	459c      	cmp	ip, r3
 810cd58:	fa22 f20e 	lsr.w	r2, r2, lr
 810cd5c:	d8f3      	bhi.n	810cd46 <__lshift+0x6e>
 810cd5e:	ebac 0304 	sub.w	r3, ip, r4
 810cd62:	3b15      	subs	r3, #21
 810cd64:	f023 0303 	bic.w	r3, r3, #3
 810cd68:	3304      	adds	r3, #4
 810cd6a:	f104 0015 	add.w	r0, r4, #21
 810cd6e:	4584      	cmp	ip, r0
 810cd70:	bf38      	it	cc
 810cd72:	2304      	movcc	r3, #4
 810cd74:	50ca      	str	r2, [r1, r3]
 810cd76:	b10a      	cbz	r2, 810cd7c <__lshift+0xa4>
 810cd78:	f108 0602 	add.w	r6, r8, #2
 810cd7c:	3e01      	subs	r6, #1
 810cd7e:	4638      	mov	r0, r7
 810cd80:	612e      	str	r6, [r5, #16]
 810cd82:	4621      	mov	r1, r4
 810cd84:	f7ff fd8e 	bl	810c8a4 <_Bfree>
 810cd88:	4628      	mov	r0, r5
 810cd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cd8e:	f842 0f04 	str.w	r0, [r2, #4]!
 810cd92:	3301      	adds	r3, #1
 810cd94:	e7c5      	b.n	810cd22 <__lshift+0x4a>
 810cd96:	3904      	subs	r1, #4
 810cd98:	f853 2b04 	ldr.w	r2, [r3], #4
 810cd9c:	f841 2f04 	str.w	r2, [r1, #4]!
 810cda0:	459c      	cmp	ip, r3
 810cda2:	d8f9      	bhi.n	810cd98 <__lshift+0xc0>
 810cda4:	e7ea      	b.n	810cd7c <__lshift+0xa4>
 810cda6:	bf00      	nop
 810cda8:	081ec355 	.word	0x081ec355
 810cdac:	081ec366 	.word	0x081ec366

0810cdb0 <__mcmp>:
 810cdb0:	b530      	push	{r4, r5, lr}
 810cdb2:	6902      	ldr	r2, [r0, #16]
 810cdb4:	690c      	ldr	r4, [r1, #16]
 810cdb6:	1b12      	subs	r2, r2, r4
 810cdb8:	d10e      	bne.n	810cdd8 <__mcmp+0x28>
 810cdba:	f100 0314 	add.w	r3, r0, #20
 810cdbe:	3114      	adds	r1, #20
 810cdc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810cdc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810cdc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810cdcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810cdd0:	42a5      	cmp	r5, r4
 810cdd2:	d003      	beq.n	810cddc <__mcmp+0x2c>
 810cdd4:	d305      	bcc.n	810cde2 <__mcmp+0x32>
 810cdd6:	2201      	movs	r2, #1
 810cdd8:	4610      	mov	r0, r2
 810cdda:	bd30      	pop	{r4, r5, pc}
 810cddc:	4283      	cmp	r3, r0
 810cdde:	d3f3      	bcc.n	810cdc8 <__mcmp+0x18>
 810cde0:	e7fa      	b.n	810cdd8 <__mcmp+0x28>
 810cde2:	f04f 32ff 	mov.w	r2, #4294967295
 810cde6:	e7f7      	b.n	810cdd8 <__mcmp+0x28>

0810cde8 <__mdiff>:
 810cde8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cdec:	460c      	mov	r4, r1
 810cdee:	4606      	mov	r6, r0
 810cdf0:	4611      	mov	r1, r2
 810cdf2:	4620      	mov	r0, r4
 810cdf4:	4690      	mov	r8, r2
 810cdf6:	f7ff ffdb 	bl	810cdb0 <__mcmp>
 810cdfa:	1e05      	subs	r5, r0, #0
 810cdfc:	d110      	bne.n	810ce20 <__mdiff+0x38>
 810cdfe:	4629      	mov	r1, r5
 810ce00:	4630      	mov	r0, r6
 810ce02:	f7ff fd0f 	bl	810c824 <_Balloc>
 810ce06:	b930      	cbnz	r0, 810ce16 <__mdiff+0x2e>
 810ce08:	4b3a      	ldr	r3, [pc, #232]	; (810cef4 <__mdiff+0x10c>)
 810ce0a:	4602      	mov	r2, r0
 810ce0c:	f240 2137 	movw	r1, #567	; 0x237
 810ce10:	4839      	ldr	r0, [pc, #228]	; (810cef8 <__mdiff+0x110>)
 810ce12:	f001 fc55 	bl	810e6c0 <__assert_func>
 810ce16:	2301      	movs	r3, #1
 810ce18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810ce1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ce20:	bfa4      	itt	ge
 810ce22:	4643      	movge	r3, r8
 810ce24:	46a0      	movge	r8, r4
 810ce26:	4630      	mov	r0, r6
 810ce28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810ce2c:	bfa6      	itte	ge
 810ce2e:	461c      	movge	r4, r3
 810ce30:	2500      	movge	r5, #0
 810ce32:	2501      	movlt	r5, #1
 810ce34:	f7ff fcf6 	bl	810c824 <_Balloc>
 810ce38:	b920      	cbnz	r0, 810ce44 <__mdiff+0x5c>
 810ce3a:	4b2e      	ldr	r3, [pc, #184]	; (810cef4 <__mdiff+0x10c>)
 810ce3c:	4602      	mov	r2, r0
 810ce3e:	f240 2145 	movw	r1, #581	; 0x245
 810ce42:	e7e5      	b.n	810ce10 <__mdiff+0x28>
 810ce44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810ce48:	6926      	ldr	r6, [r4, #16]
 810ce4a:	60c5      	str	r5, [r0, #12]
 810ce4c:	f104 0914 	add.w	r9, r4, #20
 810ce50:	f108 0514 	add.w	r5, r8, #20
 810ce54:	f100 0e14 	add.w	lr, r0, #20
 810ce58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810ce5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810ce60:	f108 0210 	add.w	r2, r8, #16
 810ce64:	46f2      	mov	sl, lr
 810ce66:	2100      	movs	r1, #0
 810ce68:	f859 3b04 	ldr.w	r3, [r9], #4
 810ce6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810ce70:	fa11 f88b 	uxtah	r8, r1, fp
 810ce74:	b299      	uxth	r1, r3
 810ce76:	0c1b      	lsrs	r3, r3, #16
 810ce78:	eba8 0801 	sub.w	r8, r8, r1
 810ce7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810ce80:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810ce84:	fa1f f888 	uxth.w	r8, r8
 810ce88:	1419      	asrs	r1, r3, #16
 810ce8a:	454e      	cmp	r6, r9
 810ce8c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810ce90:	f84a 3b04 	str.w	r3, [sl], #4
 810ce94:	d8e8      	bhi.n	810ce68 <__mdiff+0x80>
 810ce96:	1b33      	subs	r3, r6, r4
 810ce98:	3b15      	subs	r3, #21
 810ce9a:	f023 0303 	bic.w	r3, r3, #3
 810ce9e:	3304      	adds	r3, #4
 810cea0:	3415      	adds	r4, #21
 810cea2:	42a6      	cmp	r6, r4
 810cea4:	bf38      	it	cc
 810cea6:	2304      	movcc	r3, #4
 810cea8:	441d      	add	r5, r3
 810ceaa:	4473      	add	r3, lr
 810ceac:	469e      	mov	lr, r3
 810ceae:	462e      	mov	r6, r5
 810ceb0:	4566      	cmp	r6, ip
 810ceb2:	d30e      	bcc.n	810ced2 <__mdiff+0xea>
 810ceb4:	f10c 0203 	add.w	r2, ip, #3
 810ceb8:	1b52      	subs	r2, r2, r5
 810ceba:	f022 0203 	bic.w	r2, r2, #3
 810cebe:	3d03      	subs	r5, #3
 810cec0:	45ac      	cmp	ip, r5
 810cec2:	bf38      	it	cc
 810cec4:	2200      	movcc	r2, #0
 810cec6:	4413      	add	r3, r2
 810cec8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810cecc:	b17a      	cbz	r2, 810ceee <__mdiff+0x106>
 810cece:	6107      	str	r7, [r0, #16]
 810ced0:	e7a4      	b.n	810ce1c <__mdiff+0x34>
 810ced2:	f856 8b04 	ldr.w	r8, [r6], #4
 810ced6:	fa11 f288 	uxtah	r2, r1, r8
 810ceda:	1414      	asrs	r4, r2, #16
 810cedc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810cee0:	b292      	uxth	r2, r2
 810cee2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810cee6:	f84e 2b04 	str.w	r2, [lr], #4
 810ceea:	1421      	asrs	r1, r4, #16
 810ceec:	e7e0      	b.n	810ceb0 <__mdiff+0xc8>
 810ceee:	3f01      	subs	r7, #1
 810cef0:	e7ea      	b.n	810cec8 <__mdiff+0xe0>
 810cef2:	bf00      	nop
 810cef4:	081ec355 	.word	0x081ec355
 810cef8:	081ec366 	.word	0x081ec366

0810cefc <__ulp>:
 810cefc:	b082      	sub	sp, #8
 810cefe:	ed8d 0b00 	vstr	d0, [sp]
 810cf02:	9a01      	ldr	r2, [sp, #4]
 810cf04:	4b0f      	ldr	r3, [pc, #60]	; (810cf44 <__ulp+0x48>)
 810cf06:	4013      	ands	r3, r2
 810cf08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810cf0c:	2b00      	cmp	r3, #0
 810cf0e:	dc08      	bgt.n	810cf22 <__ulp+0x26>
 810cf10:	425b      	negs	r3, r3
 810cf12:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810cf16:	ea4f 5223 	mov.w	r2, r3, asr #20
 810cf1a:	da04      	bge.n	810cf26 <__ulp+0x2a>
 810cf1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810cf20:	4113      	asrs	r3, r2
 810cf22:	2200      	movs	r2, #0
 810cf24:	e008      	b.n	810cf38 <__ulp+0x3c>
 810cf26:	f1a2 0314 	sub.w	r3, r2, #20
 810cf2a:	2b1e      	cmp	r3, #30
 810cf2c:	bfda      	itte	le
 810cf2e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810cf32:	40da      	lsrle	r2, r3
 810cf34:	2201      	movgt	r2, #1
 810cf36:	2300      	movs	r3, #0
 810cf38:	4619      	mov	r1, r3
 810cf3a:	4610      	mov	r0, r2
 810cf3c:	ec41 0b10 	vmov	d0, r0, r1
 810cf40:	b002      	add	sp, #8
 810cf42:	4770      	bx	lr
 810cf44:	7ff00000 	.word	0x7ff00000

0810cf48 <__b2d>:
 810cf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cf4c:	6906      	ldr	r6, [r0, #16]
 810cf4e:	f100 0814 	add.w	r8, r0, #20
 810cf52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810cf56:	1f37      	subs	r7, r6, #4
 810cf58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810cf5c:	4610      	mov	r0, r2
 810cf5e:	f7ff fd53 	bl	810ca08 <__hi0bits>
 810cf62:	f1c0 0320 	rsb	r3, r0, #32
 810cf66:	280a      	cmp	r0, #10
 810cf68:	600b      	str	r3, [r1, #0]
 810cf6a:	491b      	ldr	r1, [pc, #108]	; (810cfd8 <__b2d+0x90>)
 810cf6c:	dc15      	bgt.n	810cf9a <__b2d+0x52>
 810cf6e:	f1c0 0c0b 	rsb	ip, r0, #11
 810cf72:	fa22 f30c 	lsr.w	r3, r2, ip
 810cf76:	45b8      	cmp	r8, r7
 810cf78:	ea43 0501 	orr.w	r5, r3, r1
 810cf7c:	bf34      	ite	cc
 810cf7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810cf82:	2300      	movcs	r3, #0
 810cf84:	3015      	adds	r0, #21
 810cf86:	fa02 f000 	lsl.w	r0, r2, r0
 810cf8a:	fa23 f30c 	lsr.w	r3, r3, ip
 810cf8e:	4303      	orrs	r3, r0
 810cf90:	461c      	mov	r4, r3
 810cf92:	ec45 4b10 	vmov	d0, r4, r5
 810cf96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810cf9a:	45b8      	cmp	r8, r7
 810cf9c:	bf3a      	itte	cc
 810cf9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810cfa2:	f1a6 0708 	subcc.w	r7, r6, #8
 810cfa6:	2300      	movcs	r3, #0
 810cfa8:	380b      	subs	r0, #11
 810cfaa:	d012      	beq.n	810cfd2 <__b2d+0x8a>
 810cfac:	f1c0 0120 	rsb	r1, r0, #32
 810cfb0:	fa23 f401 	lsr.w	r4, r3, r1
 810cfb4:	4082      	lsls	r2, r0
 810cfb6:	4322      	orrs	r2, r4
 810cfb8:	4547      	cmp	r7, r8
 810cfba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810cfbe:	bf8c      	ite	hi
 810cfc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810cfc4:	2200      	movls	r2, #0
 810cfc6:	4083      	lsls	r3, r0
 810cfc8:	40ca      	lsrs	r2, r1
 810cfca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810cfce:	4313      	orrs	r3, r2
 810cfd0:	e7de      	b.n	810cf90 <__b2d+0x48>
 810cfd2:	ea42 0501 	orr.w	r5, r2, r1
 810cfd6:	e7db      	b.n	810cf90 <__b2d+0x48>
 810cfd8:	3ff00000 	.word	0x3ff00000

0810cfdc <__d2b>:
 810cfdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810cfe0:	460f      	mov	r7, r1
 810cfe2:	2101      	movs	r1, #1
 810cfe4:	ec59 8b10 	vmov	r8, r9, d0
 810cfe8:	4616      	mov	r6, r2
 810cfea:	f7ff fc1b 	bl	810c824 <_Balloc>
 810cfee:	4604      	mov	r4, r0
 810cff0:	b930      	cbnz	r0, 810d000 <__d2b+0x24>
 810cff2:	4602      	mov	r2, r0
 810cff4:	4b24      	ldr	r3, [pc, #144]	; (810d088 <__d2b+0xac>)
 810cff6:	4825      	ldr	r0, [pc, #148]	; (810d08c <__d2b+0xb0>)
 810cff8:	f240 310f 	movw	r1, #783	; 0x30f
 810cffc:	f001 fb60 	bl	810e6c0 <__assert_func>
 810d000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810d004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d008:	bb2d      	cbnz	r5, 810d056 <__d2b+0x7a>
 810d00a:	9301      	str	r3, [sp, #4]
 810d00c:	f1b8 0300 	subs.w	r3, r8, #0
 810d010:	d026      	beq.n	810d060 <__d2b+0x84>
 810d012:	4668      	mov	r0, sp
 810d014:	9300      	str	r3, [sp, #0]
 810d016:	f7ff fd17 	bl	810ca48 <__lo0bits>
 810d01a:	e9dd 1200 	ldrd	r1, r2, [sp]
 810d01e:	b1e8      	cbz	r0, 810d05c <__d2b+0x80>
 810d020:	f1c0 0320 	rsb	r3, r0, #32
 810d024:	fa02 f303 	lsl.w	r3, r2, r3
 810d028:	430b      	orrs	r3, r1
 810d02a:	40c2      	lsrs	r2, r0
 810d02c:	6163      	str	r3, [r4, #20]
 810d02e:	9201      	str	r2, [sp, #4]
 810d030:	9b01      	ldr	r3, [sp, #4]
 810d032:	61a3      	str	r3, [r4, #24]
 810d034:	2b00      	cmp	r3, #0
 810d036:	bf14      	ite	ne
 810d038:	2202      	movne	r2, #2
 810d03a:	2201      	moveq	r2, #1
 810d03c:	6122      	str	r2, [r4, #16]
 810d03e:	b1bd      	cbz	r5, 810d070 <__d2b+0x94>
 810d040:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810d044:	4405      	add	r5, r0
 810d046:	603d      	str	r5, [r7, #0]
 810d048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810d04c:	6030      	str	r0, [r6, #0]
 810d04e:	4620      	mov	r0, r4
 810d050:	b003      	add	sp, #12
 810d052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810d05a:	e7d6      	b.n	810d00a <__d2b+0x2e>
 810d05c:	6161      	str	r1, [r4, #20]
 810d05e:	e7e7      	b.n	810d030 <__d2b+0x54>
 810d060:	a801      	add	r0, sp, #4
 810d062:	f7ff fcf1 	bl	810ca48 <__lo0bits>
 810d066:	9b01      	ldr	r3, [sp, #4]
 810d068:	6163      	str	r3, [r4, #20]
 810d06a:	3020      	adds	r0, #32
 810d06c:	2201      	movs	r2, #1
 810d06e:	e7e5      	b.n	810d03c <__d2b+0x60>
 810d070:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810d074:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810d078:	6038      	str	r0, [r7, #0]
 810d07a:	6918      	ldr	r0, [r3, #16]
 810d07c:	f7ff fcc4 	bl	810ca08 <__hi0bits>
 810d080:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810d084:	e7e2      	b.n	810d04c <__d2b+0x70>
 810d086:	bf00      	nop
 810d088:	081ec355 	.word	0x081ec355
 810d08c:	081ec366 	.word	0x081ec366

0810d090 <__ratio>:
 810d090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d094:	4688      	mov	r8, r1
 810d096:	4669      	mov	r1, sp
 810d098:	4681      	mov	r9, r0
 810d09a:	f7ff ff55 	bl	810cf48 <__b2d>
 810d09e:	a901      	add	r1, sp, #4
 810d0a0:	4640      	mov	r0, r8
 810d0a2:	ec55 4b10 	vmov	r4, r5, d0
 810d0a6:	f7ff ff4f 	bl	810cf48 <__b2d>
 810d0aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810d0ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810d0b2:	eba3 0c02 	sub.w	ip, r3, r2
 810d0b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 810d0ba:	1a9b      	subs	r3, r3, r2
 810d0bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810d0c0:	ec51 0b10 	vmov	r0, r1, d0
 810d0c4:	2b00      	cmp	r3, #0
 810d0c6:	bfd6      	itet	le
 810d0c8:	460a      	movle	r2, r1
 810d0ca:	462a      	movgt	r2, r5
 810d0cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810d0d0:	468b      	mov	fp, r1
 810d0d2:	462f      	mov	r7, r5
 810d0d4:	bfd4      	ite	le
 810d0d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810d0da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810d0de:	4620      	mov	r0, r4
 810d0e0:	ee10 2a10 	vmov	r2, s0
 810d0e4:	465b      	mov	r3, fp
 810d0e6:	4639      	mov	r1, r7
 810d0e8:	f7f3 fc38 	bl	810095c <__aeabi_ddiv>
 810d0ec:	ec41 0b10 	vmov	d0, r0, r1
 810d0f0:	b003      	add	sp, #12
 810d0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810d0f6 <__copybits>:
 810d0f6:	3901      	subs	r1, #1
 810d0f8:	b570      	push	{r4, r5, r6, lr}
 810d0fa:	1149      	asrs	r1, r1, #5
 810d0fc:	6914      	ldr	r4, [r2, #16]
 810d0fe:	3101      	adds	r1, #1
 810d100:	f102 0314 	add.w	r3, r2, #20
 810d104:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810d108:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810d10c:	1f05      	subs	r5, r0, #4
 810d10e:	42a3      	cmp	r3, r4
 810d110:	d30c      	bcc.n	810d12c <__copybits+0x36>
 810d112:	1aa3      	subs	r3, r4, r2
 810d114:	3b11      	subs	r3, #17
 810d116:	f023 0303 	bic.w	r3, r3, #3
 810d11a:	3211      	adds	r2, #17
 810d11c:	42a2      	cmp	r2, r4
 810d11e:	bf88      	it	hi
 810d120:	2300      	movhi	r3, #0
 810d122:	4418      	add	r0, r3
 810d124:	2300      	movs	r3, #0
 810d126:	4288      	cmp	r0, r1
 810d128:	d305      	bcc.n	810d136 <__copybits+0x40>
 810d12a:	bd70      	pop	{r4, r5, r6, pc}
 810d12c:	f853 6b04 	ldr.w	r6, [r3], #4
 810d130:	f845 6f04 	str.w	r6, [r5, #4]!
 810d134:	e7eb      	b.n	810d10e <__copybits+0x18>
 810d136:	f840 3b04 	str.w	r3, [r0], #4
 810d13a:	e7f4      	b.n	810d126 <__copybits+0x30>

0810d13c <__any_on>:
 810d13c:	f100 0214 	add.w	r2, r0, #20
 810d140:	6900      	ldr	r0, [r0, #16]
 810d142:	114b      	asrs	r3, r1, #5
 810d144:	4298      	cmp	r0, r3
 810d146:	b510      	push	{r4, lr}
 810d148:	db11      	blt.n	810d16e <__any_on+0x32>
 810d14a:	dd0a      	ble.n	810d162 <__any_on+0x26>
 810d14c:	f011 011f 	ands.w	r1, r1, #31
 810d150:	d007      	beq.n	810d162 <__any_on+0x26>
 810d152:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d156:	fa24 f001 	lsr.w	r0, r4, r1
 810d15a:	fa00 f101 	lsl.w	r1, r0, r1
 810d15e:	428c      	cmp	r4, r1
 810d160:	d10b      	bne.n	810d17a <__any_on+0x3e>
 810d162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d166:	4293      	cmp	r3, r2
 810d168:	d803      	bhi.n	810d172 <__any_on+0x36>
 810d16a:	2000      	movs	r0, #0
 810d16c:	bd10      	pop	{r4, pc}
 810d16e:	4603      	mov	r3, r0
 810d170:	e7f7      	b.n	810d162 <__any_on+0x26>
 810d172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d176:	2900      	cmp	r1, #0
 810d178:	d0f5      	beq.n	810d166 <__any_on+0x2a>
 810d17a:	2001      	movs	r0, #1
 810d17c:	e7f6      	b.n	810d16c <__any_on+0x30>

0810d17e <_malloc_usable_size_r>:
 810d17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d182:	1f18      	subs	r0, r3, #4
 810d184:	2b00      	cmp	r3, #0
 810d186:	bfbc      	itt	lt
 810d188:	580b      	ldrlt	r3, [r1, r0]
 810d18a:	18c0      	addlt	r0, r0, r3
 810d18c:	4770      	bx	lr

0810d18e <sulp>:
 810d18e:	b570      	push	{r4, r5, r6, lr}
 810d190:	4604      	mov	r4, r0
 810d192:	460d      	mov	r5, r1
 810d194:	ec45 4b10 	vmov	d0, r4, r5
 810d198:	4616      	mov	r6, r2
 810d19a:	f7ff feaf 	bl	810cefc <__ulp>
 810d19e:	ec51 0b10 	vmov	r0, r1, d0
 810d1a2:	b17e      	cbz	r6, 810d1c4 <sulp+0x36>
 810d1a4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810d1a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810d1ac:	2b00      	cmp	r3, #0
 810d1ae:	dd09      	ble.n	810d1c4 <sulp+0x36>
 810d1b0:	051b      	lsls	r3, r3, #20
 810d1b2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810d1b6:	2400      	movs	r4, #0
 810d1b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810d1bc:	4622      	mov	r2, r4
 810d1be:	462b      	mov	r3, r5
 810d1c0:	f7f3 faa2 	bl	8100708 <__aeabi_dmul>
 810d1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0810d1c8 <_strtod_l>:
 810d1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d1cc:	ed2d 8b02 	vpush	{d8}
 810d1d0:	b09b      	sub	sp, #108	; 0x6c
 810d1d2:	4604      	mov	r4, r0
 810d1d4:	9213      	str	r2, [sp, #76]	; 0x4c
 810d1d6:	2200      	movs	r2, #0
 810d1d8:	9216      	str	r2, [sp, #88]	; 0x58
 810d1da:	460d      	mov	r5, r1
 810d1dc:	f04f 0800 	mov.w	r8, #0
 810d1e0:	f04f 0900 	mov.w	r9, #0
 810d1e4:	460a      	mov	r2, r1
 810d1e6:	9215      	str	r2, [sp, #84]	; 0x54
 810d1e8:	7811      	ldrb	r1, [r2, #0]
 810d1ea:	292b      	cmp	r1, #43	; 0x2b
 810d1ec:	d04c      	beq.n	810d288 <_strtod_l+0xc0>
 810d1ee:	d83a      	bhi.n	810d266 <_strtod_l+0x9e>
 810d1f0:	290d      	cmp	r1, #13
 810d1f2:	d834      	bhi.n	810d25e <_strtod_l+0x96>
 810d1f4:	2908      	cmp	r1, #8
 810d1f6:	d834      	bhi.n	810d262 <_strtod_l+0x9a>
 810d1f8:	2900      	cmp	r1, #0
 810d1fa:	d03d      	beq.n	810d278 <_strtod_l+0xb0>
 810d1fc:	2200      	movs	r2, #0
 810d1fe:	920a      	str	r2, [sp, #40]	; 0x28
 810d200:	9e15      	ldr	r6, [sp, #84]	; 0x54
 810d202:	7832      	ldrb	r2, [r6, #0]
 810d204:	2a30      	cmp	r2, #48	; 0x30
 810d206:	f040 80b4 	bne.w	810d372 <_strtod_l+0x1aa>
 810d20a:	7872      	ldrb	r2, [r6, #1]
 810d20c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 810d210:	2a58      	cmp	r2, #88	; 0x58
 810d212:	d170      	bne.n	810d2f6 <_strtod_l+0x12e>
 810d214:	9302      	str	r3, [sp, #8]
 810d216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d218:	9301      	str	r3, [sp, #4]
 810d21a:	ab16      	add	r3, sp, #88	; 0x58
 810d21c:	9300      	str	r3, [sp, #0]
 810d21e:	4a8e      	ldr	r2, [pc, #568]	; (810d458 <_strtod_l+0x290>)
 810d220:	ab17      	add	r3, sp, #92	; 0x5c
 810d222:	a915      	add	r1, sp, #84	; 0x54
 810d224:	4620      	mov	r0, r4
 810d226:	f001 fae7 	bl	810e7f8 <__gethex>
 810d22a:	f010 070f 	ands.w	r7, r0, #15
 810d22e:	4605      	mov	r5, r0
 810d230:	d005      	beq.n	810d23e <_strtod_l+0x76>
 810d232:	2f06      	cmp	r7, #6
 810d234:	d12a      	bne.n	810d28c <_strtod_l+0xc4>
 810d236:	3601      	adds	r6, #1
 810d238:	2300      	movs	r3, #0
 810d23a:	9615      	str	r6, [sp, #84]	; 0x54
 810d23c:	930a      	str	r3, [sp, #40]	; 0x28
 810d23e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810d240:	2b00      	cmp	r3, #0
 810d242:	f040 857f 	bne.w	810dd44 <_strtod_l+0xb7c>
 810d246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d248:	b1db      	cbz	r3, 810d282 <_strtod_l+0xba>
 810d24a:	4642      	mov	r2, r8
 810d24c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810d250:	ec43 2b10 	vmov	d0, r2, r3
 810d254:	b01b      	add	sp, #108	; 0x6c
 810d256:	ecbd 8b02 	vpop	{d8}
 810d25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d25e:	2920      	cmp	r1, #32
 810d260:	d1cc      	bne.n	810d1fc <_strtod_l+0x34>
 810d262:	3201      	adds	r2, #1
 810d264:	e7bf      	b.n	810d1e6 <_strtod_l+0x1e>
 810d266:	292d      	cmp	r1, #45	; 0x2d
 810d268:	d1c8      	bne.n	810d1fc <_strtod_l+0x34>
 810d26a:	2101      	movs	r1, #1
 810d26c:	910a      	str	r1, [sp, #40]	; 0x28
 810d26e:	1c51      	adds	r1, r2, #1
 810d270:	9115      	str	r1, [sp, #84]	; 0x54
 810d272:	7852      	ldrb	r2, [r2, #1]
 810d274:	2a00      	cmp	r2, #0
 810d276:	d1c3      	bne.n	810d200 <_strtod_l+0x38>
 810d278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810d27a:	9515      	str	r5, [sp, #84]	; 0x54
 810d27c:	2b00      	cmp	r3, #0
 810d27e:	f040 855f 	bne.w	810dd40 <_strtod_l+0xb78>
 810d282:	4642      	mov	r2, r8
 810d284:	464b      	mov	r3, r9
 810d286:	e7e3      	b.n	810d250 <_strtod_l+0x88>
 810d288:	2100      	movs	r1, #0
 810d28a:	e7ef      	b.n	810d26c <_strtod_l+0xa4>
 810d28c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810d28e:	b13a      	cbz	r2, 810d2a0 <_strtod_l+0xd8>
 810d290:	2135      	movs	r1, #53	; 0x35
 810d292:	a818      	add	r0, sp, #96	; 0x60
 810d294:	f7ff ff2f 	bl	810d0f6 <__copybits>
 810d298:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d29a:	4620      	mov	r0, r4
 810d29c:	f7ff fb02 	bl	810c8a4 <_Bfree>
 810d2a0:	3f01      	subs	r7, #1
 810d2a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810d2a4:	2f04      	cmp	r7, #4
 810d2a6:	d806      	bhi.n	810d2b6 <_strtod_l+0xee>
 810d2a8:	e8df f007 	tbb	[pc, r7]
 810d2ac:	201d0314 	.word	0x201d0314
 810d2b0:	14          	.byte	0x14
 810d2b1:	00          	.byte	0x00
 810d2b2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810d2b6:	05e9      	lsls	r1, r5, #23
 810d2b8:	bf48      	it	mi
 810d2ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810d2be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d2c2:	0d1b      	lsrs	r3, r3, #20
 810d2c4:	051b      	lsls	r3, r3, #20
 810d2c6:	2b00      	cmp	r3, #0
 810d2c8:	d1b9      	bne.n	810d23e <_strtod_l+0x76>
 810d2ca:	f7fe fba3 	bl	810ba14 <__errno>
 810d2ce:	2322      	movs	r3, #34	; 0x22
 810d2d0:	6003      	str	r3, [r0, #0]
 810d2d2:	e7b4      	b.n	810d23e <_strtod_l+0x76>
 810d2d4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810d2d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810d2dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810d2e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810d2e4:	e7e7      	b.n	810d2b6 <_strtod_l+0xee>
 810d2e6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810d460 <_strtod_l+0x298>
 810d2ea:	e7e4      	b.n	810d2b6 <_strtod_l+0xee>
 810d2ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810d2f0:	f04f 38ff 	mov.w	r8, #4294967295
 810d2f4:	e7df      	b.n	810d2b6 <_strtod_l+0xee>
 810d2f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d2f8:	1c5a      	adds	r2, r3, #1
 810d2fa:	9215      	str	r2, [sp, #84]	; 0x54
 810d2fc:	785b      	ldrb	r3, [r3, #1]
 810d2fe:	2b30      	cmp	r3, #48	; 0x30
 810d300:	d0f9      	beq.n	810d2f6 <_strtod_l+0x12e>
 810d302:	2b00      	cmp	r3, #0
 810d304:	d09b      	beq.n	810d23e <_strtod_l+0x76>
 810d306:	2301      	movs	r3, #1
 810d308:	f04f 0a00 	mov.w	sl, #0
 810d30c:	9304      	str	r3, [sp, #16]
 810d30e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d310:	930b      	str	r3, [sp, #44]	; 0x2c
 810d312:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810d316:	46d3      	mov	fp, sl
 810d318:	220a      	movs	r2, #10
 810d31a:	9815      	ldr	r0, [sp, #84]	; 0x54
 810d31c:	7806      	ldrb	r6, [r0, #0]
 810d31e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810d322:	b2d9      	uxtb	r1, r3
 810d324:	2909      	cmp	r1, #9
 810d326:	d926      	bls.n	810d376 <_strtod_l+0x1ae>
 810d328:	494c      	ldr	r1, [pc, #304]	; (810d45c <_strtod_l+0x294>)
 810d32a:	2201      	movs	r2, #1
 810d32c:	f001 f98c 	bl	810e648 <strncmp>
 810d330:	2800      	cmp	r0, #0
 810d332:	d030      	beq.n	810d396 <_strtod_l+0x1ce>
 810d334:	2000      	movs	r0, #0
 810d336:	4632      	mov	r2, r6
 810d338:	9005      	str	r0, [sp, #20]
 810d33a:	465e      	mov	r6, fp
 810d33c:	4603      	mov	r3, r0
 810d33e:	2a65      	cmp	r2, #101	; 0x65
 810d340:	d001      	beq.n	810d346 <_strtod_l+0x17e>
 810d342:	2a45      	cmp	r2, #69	; 0x45
 810d344:	d113      	bne.n	810d36e <_strtod_l+0x1a6>
 810d346:	b91e      	cbnz	r6, 810d350 <_strtod_l+0x188>
 810d348:	9a04      	ldr	r2, [sp, #16]
 810d34a:	4302      	orrs	r2, r0
 810d34c:	d094      	beq.n	810d278 <_strtod_l+0xb0>
 810d34e:	2600      	movs	r6, #0
 810d350:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810d352:	1c6a      	adds	r2, r5, #1
 810d354:	9215      	str	r2, [sp, #84]	; 0x54
 810d356:	786a      	ldrb	r2, [r5, #1]
 810d358:	2a2b      	cmp	r2, #43	; 0x2b
 810d35a:	d074      	beq.n	810d446 <_strtod_l+0x27e>
 810d35c:	2a2d      	cmp	r2, #45	; 0x2d
 810d35e:	d078      	beq.n	810d452 <_strtod_l+0x28a>
 810d360:	f04f 0c00 	mov.w	ip, #0
 810d364:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810d368:	2909      	cmp	r1, #9
 810d36a:	d97f      	bls.n	810d46c <_strtod_l+0x2a4>
 810d36c:	9515      	str	r5, [sp, #84]	; 0x54
 810d36e:	2700      	movs	r7, #0
 810d370:	e09e      	b.n	810d4b0 <_strtod_l+0x2e8>
 810d372:	2300      	movs	r3, #0
 810d374:	e7c8      	b.n	810d308 <_strtod_l+0x140>
 810d376:	f1bb 0f08 	cmp.w	fp, #8
 810d37a:	bfd8      	it	le
 810d37c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810d37e:	f100 0001 	add.w	r0, r0, #1
 810d382:	bfda      	itte	le
 810d384:	fb02 3301 	mlale	r3, r2, r1, r3
 810d388:	9309      	strle	r3, [sp, #36]	; 0x24
 810d38a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810d38e:	f10b 0b01 	add.w	fp, fp, #1
 810d392:	9015      	str	r0, [sp, #84]	; 0x54
 810d394:	e7c1      	b.n	810d31a <_strtod_l+0x152>
 810d396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d398:	1c5a      	adds	r2, r3, #1
 810d39a:	9215      	str	r2, [sp, #84]	; 0x54
 810d39c:	785a      	ldrb	r2, [r3, #1]
 810d39e:	f1bb 0f00 	cmp.w	fp, #0
 810d3a2:	d037      	beq.n	810d414 <_strtod_l+0x24c>
 810d3a4:	9005      	str	r0, [sp, #20]
 810d3a6:	465e      	mov	r6, fp
 810d3a8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810d3ac:	2b09      	cmp	r3, #9
 810d3ae:	d912      	bls.n	810d3d6 <_strtod_l+0x20e>
 810d3b0:	2301      	movs	r3, #1
 810d3b2:	e7c4      	b.n	810d33e <_strtod_l+0x176>
 810d3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d3b6:	1c5a      	adds	r2, r3, #1
 810d3b8:	9215      	str	r2, [sp, #84]	; 0x54
 810d3ba:	785a      	ldrb	r2, [r3, #1]
 810d3bc:	3001      	adds	r0, #1
 810d3be:	2a30      	cmp	r2, #48	; 0x30
 810d3c0:	d0f8      	beq.n	810d3b4 <_strtod_l+0x1ec>
 810d3c2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810d3c6:	2b08      	cmp	r3, #8
 810d3c8:	f200 84c1 	bhi.w	810dd4e <_strtod_l+0xb86>
 810d3cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d3ce:	9005      	str	r0, [sp, #20]
 810d3d0:	2000      	movs	r0, #0
 810d3d2:	930b      	str	r3, [sp, #44]	; 0x2c
 810d3d4:	4606      	mov	r6, r0
 810d3d6:	3a30      	subs	r2, #48	; 0x30
 810d3d8:	f100 0301 	add.w	r3, r0, #1
 810d3dc:	d014      	beq.n	810d408 <_strtod_l+0x240>
 810d3de:	9905      	ldr	r1, [sp, #20]
 810d3e0:	4419      	add	r1, r3
 810d3e2:	9105      	str	r1, [sp, #20]
 810d3e4:	4633      	mov	r3, r6
 810d3e6:	eb00 0c06 	add.w	ip, r0, r6
 810d3ea:	210a      	movs	r1, #10
 810d3ec:	4563      	cmp	r3, ip
 810d3ee:	d113      	bne.n	810d418 <_strtod_l+0x250>
 810d3f0:	1833      	adds	r3, r6, r0
 810d3f2:	2b08      	cmp	r3, #8
 810d3f4:	f106 0601 	add.w	r6, r6, #1
 810d3f8:	4406      	add	r6, r0
 810d3fa:	dc1a      	bgt.n	810d432 <_strtod_l+0x26a>
 810d3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 810d3fe:	230a      	movs	r3, #10
 810d400:	fb03 2301 	mla	r3, r3, r1, r2
 810d404:	9309      	str	r3, [sp, #36]	; 0x24
 810d406:	2300      	movs	r3, #0
 810d408:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d40a:	1c51      	adds	r1, r2, #1
 810d40c:	9115      	str	r1, [sp, #84]	; 0x54
 810d40e:	7852      	ldrb	r2, [r2, #1]
 810d410:	4618      	mov	r0, r3
 810d412:	e7c9      	b.n	810d3a8 <_strtod_l+0x1e0>
 810d414:	4658      	mov	r0, fp
 810d416:	e7d2      	b.n	810d3be <_strtod_l+0x1f6>
 810d418:	2b08      	cmp	r3, #8
 810d41a:	f103 0301 	add.w	r3, r3, #1
 810d41e:	dc03      	bgt.n	810d428 <_strtod_l+0x260>
 810d420:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810d422:	434f      	muls	r7, r1
 810d424:	9709      	str	r7, [sp, #36]	; 0x24
 810d426:	e7e1      	b.n	810d3ec <_strtod_l+0x224>
 810d428:	2b10      	cmp	r3, #16
 810d42a:	bfd8      	it	le
 810d42c:	fb01 fa0a 	mulle.w	sl, r1, sl
 810d430:	e7dc      	b.n	810d3ec <_strtod_l+0x224>
 810d432:	2e10      	cmp	r6, #16
 810d434:	bfdc      	itt	le
 810d436:	230a      	movle	r3, #10
 810d438:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810d43c:	e7e3      	b.n	810d406 <_strtod_l+0x23e>
 810d43e:	2300      	movs	r3, #0
 810d440:	9305      	str	r3, [sp, #20]
 810d442:	2301      	movs	r3, #1
 810d444:	e780      	b.n	810d348 <_strtod_l+0x180>
 810d446:	f04f 0c00 	mov.w	ip, #0
 810d44a:	1caa      	adds	r2, r5, #2
 810d44c:	9215      	str	r2, [sp, #84]	; 0x54
 810d44e:	78aa      	ldrb	r2, [r5, #2]
 810d450:	e788      	b.n	810d364 <_strtod_l+0x19c>
 810d452:	f04f 0c01 	mov.w	ip, #1
 810d456:	e7f8      	b.n	810d44a <_strtod_l+0x282>
 810d458:	081ec4c0 	.word	0x081ec4c0
 810d45c:	081ec4bc 	.word	0x081ec4bc
 810d460:	7ff00000 	.word	0x7ff00000
 810d464:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d466:	1c51      	adds	r1, r2, #1
 810d468:	9115      	str	r1, [sp, #84]	; 0x54
 810d46a:	7852      	ldrb	r2, [r2, #1]
 810d46c:	2a30      	cmp	r2, #48	; 0x30
 810d46e:	d0f9      	beq.n	810d464 <_strtod_l+0x29c>
 810d470:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810d474:	2908      	cmp	r1, #8
 810d476:	f63f af7a 	bhi.w	810d36e <_strtod_l+0x1a6>
 810d47a:	3a30      	subs	r2, #48	; 0x30
 810d47c:	9208      	str	r2, [sp, #32]
 810d47e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d480:	920c      	str	r2, [sp, #48]	; 0x30
 810d482:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d484:	1c57      	adds	r7, r2, #1
 810d486:	9715      	str	r7, [sp, #84]	; 0x54
 810d488:	7852      	ldrb	r2, [r2, #1]
 810d48a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810d48e:	f1be 0f09 	cmp.w	lr, #9
 810d492:	d938      	bls.n	810d506 <_strtod_l+0x33e>
 810d494:	990c      	ldr	r1, [sp, #48]	; 0x30
 810d496:	1a7f      	subs	r7, r7, r1
 810d498:	2f08      	cmp	r7, #8
 810d49a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810d49e:	dc03      	bgt.n	810d4a8 <_strtod_l+0x2e0>
 810d4a0:	9908      	ldr	r1, [sp, #32]
 810d4a2:	428f      	cmp	r7, r1
 810d4a4:	bfa8      	it	ge
 810d4a6:	460f      	movge	r7, r1
 810d4a8:	f1bc 0f00 	cmp.w	ip, #0
 810d4ac:	d000      	beq.n	810d4b0 <_strtod_l+0x2e8>
 810d4ae:	427f      	negs	r7, r7
 810d4b0:	2e00      	cmp	r6, #0
 810d4b2:	d14f      	bne.n	810d554 <_strtod_l+0x38c>
 810d4b4:	9904      	ldr	r1, [sp, #16]
 810d4b6:	4301      	orrs	r1, r0
 810d4b8:	f47f aec1 	bne.w	810d23e <_strtod_l+0x76>
 810d4bc:	2b00      	cmp	r3, #0
 810d4be:	f47f aedb 	bne.w	810d278 <_strtod_l+0xb0>
 810d4c2:	2a69      	cmp	r2, #105	; 0x69
 810d4c4:	d029      	beq.n	810d51a <_strtod_l+0x352>
 810d4c6:	dc26      	bgt.n	810d516 <_strtod_l+0x34e>
 810d4c8:	2a49      	cmp	r2, #73	; 0x49
 810d4ca:	d026      	beq.n	810d51a <_strtod_l+0x352>
 810d4cc:	2a4e      	cmp	r2, #78	; 0x4e
 810d4ce:	f47f aed3 	bne.w	810d278 <_strtod_l+0xb0>
 810d4d2:	499b      	ldr	r1, [pc, #620]	; (810d740 <_strtod_l+0x578>)
 810d4d4:	a815      	add	r0, sp, #84	; 0x54
 810d4d6:	f001 fbcf 	bl	810ec78 <__match>
 810d4da:	2800      	cmp	r0, #0
 810d4dc:	f43f aecc 	beq.w	810d278 <_strtod_l+0xb0>
 810d4e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d4e2:	781b      	ldrb	r3, [r3, #0]
 810d4e4:	2b28      	cmp	r3, #40	; 0x28
 810d4e6:	d12f      	bne.n	810d548 <_strtod_l+0x380>
 810d4e8:	4996      	ldr	r1, [pc, #600]	; (810d744 <_strtod_l+0x57c>)
 810d4ea:	aa18      	add	r2, sp, #96	; 0x60
 810d4ec:	a815      	add	r0, sp, #84	; 0x54
 810d4ee:	f001 fbd7 	bl	810eca0 <__hexnan>
 810d4f2:	2805      	cmp	r0, #5
 810d4f4:	d128      	bne.n	810d548 <_strtod_l+0x380>
 810d4f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810d4f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810d4fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810d500:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810d504:	e69b      	b.n	810d23e <_strtod_l+0x76>
 810d506:	9f08      	ldr	r7, [sp, #32]
 810d508:	210a      	movs	r1, #10
 810d50a:	fb01 2107 	mla	r1, r1, r7, r2
 810d50e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810d512:	9208      	str	r2, [sp, #32]
 810d514:	e7b5      	b.n	810d482 <_strtod_l+0x2ba>
 810d516:	2a6e      	cmp	r2, #110	; 0x6e
 810d518:	e7d9      	b.n	810d4ce <_strtod_l+0x306>
 810d51a:	498b      	ldr	r1, [pc, #556]	; (810d748 <_strtod_l+0x580>)
 810d51c:	a815      	add	r0, sp, #84	; 0x54
 810d51e:	f001 fbab 	bl	810ec78 <__match>
 810d522:	2800      	cmp	r0, #0
 810d524:	f43f aea8 	beq.w	810d278 <_strtod_l+0xb0>
 810d528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d52a:	4988      	ldr	r1, [pc, #544]	; (810d74c <_strtod_l+0x584>)
 810d52c:	3b01      	subs	r3, #1
 810d52e:	a815      	add	r0, sp, #84	; 0x54
 810d530:	9315      	str	r3, [sp, #84]	; 0x54
 810d532:	f001 fba1 	bl	810ec78 <__match>
 810d536:	b910      	cbnz	r0, 810d53e <_strtod_l+0x376>
 810d538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d53a:	3301      	adds	r3, #1
 810d53c:	9315      	str	r3, [sp, #84]	; 0x54
 810d53e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810d75c <_strtod_l+0x594>
 810d542:	f04f 0800 	mov.w	r8, #0
 810d546:	e67a      	b.n	810d23e <_strtod_l+0x76>
 810d548:	4881      	ldr	r0, [pc, #516]	; (810d750 <_strtod_l+0x588>)
 810d54a:	f001 f8b1 	bl	810e6b0 <nan>
 810d54e:	ec59 8b10 	vmov	r8, r9, d0
 810d552:	e674      	b.n	810d23e <_strtod_l+0x76>
 810d554:	9b05      	ldr	r3, [sp, #20]
 810d556:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d558:	1afb      	subs	r3, r7, r3
 810d55a:	f1bb 0f00 	cmp.w	fp, #0
 810d55e:	bf08      	it	eq
 810d560:	46b3      	moveq	fp, r6
 810d562:	2e10      	cmp	r6, #16
 810d564:	9308      	str	r3, [sp, #32]
 810d566:	4635      	mov	r5, r6
 810d568:	bfa8      	it	ge
 810d56a:	2510      	movge	r5, #16
 810d56c:	f7f3 f852 	bl	8100614 <__aeabi_ui2d>
 810d570:	2e09      	cmp	r6, #9
 810d572:	4680      	mov	r8, r0
 810d574:	4689      	mov	r9, r1
 810d576:	dd13      	ble.n	810d5a0 <_strtod_l+0x3d8>
 810d578:	4b76      	ldr	r3, [pc, #472]	; (810d754 <_strtod_l+0x58c>)
 810d57a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d57e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810d582:	f7f3 f8c1 	bl	8100708 <__aeabi_dmul>
 810d586:	4680      	mov	r8, r0
 810d588:	4650      	mov	r0, sl
 810d58a:	4689      	mov	r9, r1
 810d58c:	f7f3 f842 	bl	8100614 <__aeabi_ui2d>
 810d590:	4602      	mov	r2, r0
 810d592:	460b      	mov	r3, r1
 810d594:	4640      	mov	r0, r8
 810d596:	4649      	mov	r1, r9
 810d598:	f7f2 ff00 	bl	810039c <__adddf3>
 810d59c:	4680      	mov	r8, r0
 810d59e:	4689      	mov	r9, r1
 810d5a0:	2e0f      	cmp	r6, #15
 810d5a2:	dc38      	bgt.n	810d616 <_strtod_l+0x44e>
 810d5a4:	9b08      	ldr	r3, [sp, #32]
 810d5a6:	2b00      	cmp	r3, #0
 810d5a8:	f43f ae49 	beq.w	810d23e <_strtod_l+0x76>
 810d5ac:	dd24      	ble.n	810d5f8 <_strtod_l+0x430>
 810d5ae:	2b16      	cmp	r3, #22
 810d5b0:	dc0b      	bgt.n	810d5ca <_strtod_l+0x402>
 810d5b2:	4968      	ldr	r1, [pc, #416]	; (810d754 <_strtod_l+0x58c>)
 810d5b4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810d5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d5bc:	4642      	mov	r2, r8
 810d5be:	464b      	mov	r3, r9
 810d5c0:	f7f3 f8a2 	bl	8100708 <__aeabi_dmul>
 810d5c4:	4680      	mov	r8, r0
 810d5c6:	4689      	mov	r9, r1
 810d5c8:	e639      	b.n	810d23e <_strtod_l+0x76>
 810d5ca:	9a08      	ldr	r2, [sp, #32]
 810d5cc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810d5d0:	4293      	cmp	r3, r2
 810d5d2:	db20      	blt.n	810d616 <_strtod_l+0x44e>
 810d5d4:	4c5f      	ldr	r4, [pc, #380]	; (810d754 <_strtod_l+0x58c>)
 810d5d6:	f1c6 060f 	rsb	r6, r6, #15
 810d5da:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810d5de:	4642      	mov	r2, r8
 810d5e0:	464b      	mov	r3, r9
 810d5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d5e6:	f7f3 f88f 	bl	8100708 <__aeabi_dmul>
 810d5ea:	9b08      	ldr	r3, [sp, #32]
 810d5ec:	1b9e      	subs	r6, r3, r6
 810d5ee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810d5f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 810d5f6:	e7e3      	b.n	810d5c0 <_strtod_l+0x3f8>
 810d5f8:	9b08      	ldr	r3, [sp, #32]
 810d5fa:	3316      	adds	r3, #22
 810d5fc:	db0b      	blt.n	810d616 <_strtod_l+0x44e>
 810d5fe:	9b05      	ldr	r3, [sp, #20]
 810d600:	1bdf      	subs	r7, r3, r7
 810d602:	4b54      	ldr	r3, [pc, #336]	; (810d754 <_strtod_l+0x58c>)
 810d604:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810d608:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d60c:	4640      	mov	r0, r8
 810d60e:	4649      	mov	r1, r9
 810d610:	f7f3 f9a4 	bl	810095c <__aeabi_ddiv>
 810d614:	e7d6      	b.n	810d5c4 <_strtod_l+0x3fc>
 810d616:	9b08      	ldr	r3, [sp, #32]
 810d618:	1b75      	subs	r5, r6, r5
 810d61a:	441d      	add	r5, r3
 810d61c:	2d00      	cmp	r5, #0
 810d61e:	dd70      	ble.n	810d702 <_strtod_l+0x53a>
 810d620:	f015 030f 	ands.w	r3, r5, #15
 810d624:	d00a      	beq.n	810d63c <_strtod_l+0x474>
 810d626:	494b      	ldr	r1, [pc, #300]	; (810d754 <_strtod_l+0x58c>)
 810d628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810d62c:	4642      	mov	r2, r8
 810d62e:	464b      	mov	r3, r9
 810d630:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d634:	f7f3 f868 	bl	8100708 <__aeabi_dmul>
 810d638:	4680      	mov	r8, r0
 810d63a:	4689      	mov	r9, r1
 810d63c:	f035 050f 	bics.w	r5, r5, #15
 810d640:	d04d      	beq.n	810d6de <_strtod_l+0x516>
 810d642:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810d646:	dd22      	ble.n	810d68e <_strtod_l+0x4c6>
 810d648:	2500      	movs	r5, #0
 810d64a:	46ab      	mov	fp, r5
 810d64c:	9509      	str	r5, [sp, #36]	; 0x24
 810d64e:	9505      	str	r5, [sp, #20]
 810d650:	2322      	movs	r3, #34	; 0x22
 810d652:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810d75c <_strtod_l+0x594>
 810d656:	6023      	str	r3, [r4, #0]
 810d658:	f04f 0800 	mov.w	r8, #0
 810d65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d65e:	2b00      	cmp	r3, #0
 810d660:	f43f aded 	beq.w	810d23e <_strtod_l+0x76>
 810d664:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d666:	4620      	mov	r0, r4
 810d668:	f7ff f91c 	bl	810c8a4 <_Bfree>
 810d66c:	9905      	ldr	r1, [sp, #20]
 810d66e:	4620      	mov	r0, r4
 810d670:	f7ff f918 	bl	810c8a4 <_Bfree>
 810d674:	4659      	mov	r1, fp
 810d676:	4620      	mov	r0, r4
 810d678:	f7ff f914 	bl	810c8a4 <_Bfree>
 810d67c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810d67e:	4620      	mov	r0, r4
 810d680:	f7ff f910 	bl	810c8a4 <_Bfree>
 810d684:	4629      	mov	r1, r5
 810d686:	4620      	mov	r0, r4
 810d688:	f7ff f90c 	bl	810c8a4 <_Bfree>
 810d68c:	e5d7      	b.n	810d23e <_strtod_l+0x76>
 810d68e:	4b32      	ldr	r3, [pc, #200]	; (810d758 <_strtod_l+0x590>)
 810d690:	9304      	str	r3, [sp, #16]
 810d692:	2300      	movs	r3, #0
 810d694:	112d      	asrs	r5, r5, #4
 810d696:	4640      	mov	r0, r8
 810d698:	4649      	mov	r1, r9
 810d69a:	469a      	mov	sl, r3
 810d69c:	2d01      	cmp	r5, #1
 810d69e:	dc21      	bgt.n	810d6e4 <_strtod_l+0x51c>
 810d6a0:	b10b      	cbz	r3, 810d6a6 <_strtod_l+0x4de>
 810d6a2:	4680      	mov	r8, r0
 810d6a4:	4689      	mov	r9, r1
 810d6a6:	492c      	ldr	r1, [pc, #176]	; (810d758 <_strtod_l+0x590>)
 810d6a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810d6ac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810d6b0:	4642      	mov	r2, r8
 810d6b2:	464b      	mov	r3, r9
 810d6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d6b8:	f7f3 f826 	bl	8100708 <__aeabi_dmul>
 810d6bc:	4b27      	ldr	r3, [pc, #156]	; (810d75c <_strtod_l+0x594>)
 810d6be:	460a      	mov	r2, r1
 810d6c0:	400b      	ands	r3, r1
 810d6c2:	4927      	ldr	r1, [pc, #156]	; (810d760 <_strtod_l+0x598>)
 810d6c4:	428b      	cmp	r3, r1
 810d6c6:	4680      	mov	r8, r0
 810d6c8:	d8be      	bhi.n	810d648 <_strtod_l+0x480>
 810d6ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810d6ce:	428b      	cmp	r3, r1
 810d6d0:	bf86      	itte	hi
 810d6d2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810d764 <_strtod_l+0x59c>
 810d6d6:	f04f 38ff 	movhi.w	r8, #4294967295
 810d6da:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810d6de:	2300      	movs	r3, #0
 810d6e0:	9304      	str	r3, [sp, #16]
 810d6e2:	e07b      	b.n	810d7dc <_strtod_l+0x614>
 810d6e4:	07ea      	lsls	r2, r5, #31
 810d6e6:	d505      	bpl.n	810d6f4 <_strtod_l+0x52c>
 810d6e8:	9b04      	ldr	r3, [sp, #16]
 810d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6ee:	f7f3 f80b 	bl	8100708 <__aeabi_dmul>
 810d6f2:	2301      	movs	r3, #1
 810d6f4:	9a04      	ldr	r2, [sp, #16]
 810d6f6:	3208      	adds	r2, #8
 810d6f8:	f10a 0a01 	add.w	sl, sl, #1
 810d6fc:	106d      	asrs	r5, r5, #1
 810d6fe:	9204      	str	r2, [sp, #16]
 810d700:	e7cc      	b.n	810d69c <_strtod_l+0x4d4>
 810d702:	d0ec      	beq.n	810d6de <_strtod_l+0x516>
 810d704:	426d      	negs	r5, r5
 810d706:	f015 020f 	ands.w	r2, r5, #15
 810d70a:	d00a      	beq.n	810d722 <_strtod_l+0x55a>
 810d70c:	4b11      	ldr	r3, [pc, #68]	; (810d754 <_strtod_l+0x58c>)
 810d70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d712:	4640      	mov	r0, r8
 810d714:	4649      	mov	r1, r9
 810d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d71a:	f7f3 f91f 	bl	810095c <__aeabi_ddiv>
 810d71e:	4680      	mov	r8, r0
 810d720:	4689      	mov	r9, r1
 810d722:	112d      	asrs	r5, r5, #4
 810d724:	d0db      	beq.n	810d6de <_strtod_l+0x516>
 810d726:	2d1f      	cmp	r5, #31
 810d728:	dd1e      	ble.n	810d768 <_strtod_l+0x5a0>
 810d72a:	2500      	movs	r5, #0
 810d72c:	46ab      	mov	fp, r5
 810d72e:	9509      	str	r5, [sp, #36]	; 0x24
 810d730:	9505      	str	r5, [sp, #20]
 810d732:	2322      	movs	r3, #34	; 0x22
 810d734:	f04f 0800 	mov.w	r8, #0
 810d738:	f04f 0900 	mov.w	r9, #0
 810d73c:	6023      	str	r3, [r4, #0]
 810d73e:	e78d      	b.n	810d65c <_strtod_l+0x494>
 810d740:	081ec2ad 	.word	0x081ec2ad
 810d744:	081ec4d4 	.word	0x081ec4d4
 810d748:	081ec2a5 	.word	0x081ec2a5
 810d74c:	081ec2dc 	.word	0x081ec2dc
 810d750:	081d8d89 	.word	0x081d8d89
 810d754:	081ec3e8 	.word	0x081ec3e8
 810d758:	081ec3c0 	.word	0x081ec3c0
 810d75c:	7ff00000 	.word	0x7ff00000
 810d760:	7ca00000 	.word	0x7ca00000
 810d764:	7fefffff 	.word	0x7fefffff
 810d768:	f015 0310 	ands.w	r3, r5, #16
 810d76c:	bf18      	it	ne
 810d76e:	236a      	movne	r3, #106	; 0x6a
 810d770:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810db14 <_strtod_l+0x94c>
 810d774:	9304      	str	r3, [sp, #16]
 810d776:	4640      	mov	r0, r8
 810d778:	4649      	mov	r1, r9
 810d77a:	2300      	movs	r3, #0
 810d77c:	07ea      	lsls	r2, r5, #31
 810d77e:	d504      	bpl.n	810d78a <_strtod_l+0x5c2>
 810d780:	e9da 2300 	ldrd	r2, r3, [sl]
 810d784:	f7f2 ffc0 	bl	8100708 <__aeabi_dmul>
 810d788:	2301      	movs	r3, #1
 810d78a:	106d      	asrs	r5, r5, #1
 810d78c:	f10a 0a08 	add.w	sl, sl, #8
 810d790:	d1f4      	bne.n	810d77c <_strtod_l+0x5b4>
 810d792:	b10b      	cbz	r3, 810d798 <_strtod_l+0x5d0>
 810d794:	4680      	mov	r8, r0
 810d796:	4689      	mov	r9, r1
 810d798:	9b04      	ldr	r3, [sp, #16]
 810d79a:	b1bb      	cbz	r3, 810d7cc <_strtod_l+0x604>
 810d79c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810d7a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810d7a4:	2b00      	cmp	r3, #0
 810d7a6:	4649      	mov	r1, r9
 810d7a8:	dd10      	ble.n	810d7cc <_strtod_l+0x604>
 810d7aa:	2b1f      	cmp	r3, #31
 810d7ac:	f340 811e 	ble.w	810d9ec <_strtod_l+0x824>
 810d7b0:	2b34      	cmp	r3, #52	; 0x34
 810d7b2:	bfde      	ittt	le
 810d7b4:	f04f 33ff 	movle.w	r3, #4294967295
 810d7b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810d7bc:	4093      	lslle	r3, r2
 810d7be:	f04f 0800 	mov.w	r8, #0
 810d7c2:	bfcc      	ite	gt
 810d7c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810d7c8:	ea03 0901 	andle.w	r9, r3, r1
 810d7cc:	2200      	movs	r2, #0
 810d7ce:	2300      	movs	r3, #0
 810d7d0:	4640      	mov	r0, r8
 810d7d2:	4649      	mov	r1, r9
 810d7d4:	f7f3 fa00 	bl	8100bd8 <__aeabi_dcmpeq>
 810d7d8:	2800      	cmp	r0, #0
 810d7da:	d1a6      	bne.n	810d72a <_strtod_l+0x562>
 810d7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d7de:	9300      	str	r3, [sp, #0]
 810d7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810d7e2:	4633      	mov	r3, r6
 810d7e4:	465a      	mov	r2, fp
 810d7e6:	4620      	mov	r0, r4
 810d7e8:	f7ff f8c4 	bl	810c974 <__s2b>
 810d7ec:	9009      	str	r0, [sp, #36]	; 0x24
 810d7ee:	2800      	cmp	r0, #0
 810d7f0:	f43f af2a 	beq.w	810d648 <_strtod_l+0x480>
 810d7f4:	9a08      	ldr	r2, [sp, #32]
 810d7f6:	9b05      	ldr	r3, [sp, #20]
 810d7f8:	2a00      	cmp	r2, #0
 810d7fa:	eba3 0307 	sub.w	r3, r3, r7
 810d7fe:	bfa8      	it	ge
 810d800:	2300      	movge	r3, #0
 810d802:	930c      	str	r3, [sp, #48]	; 0x30
 810d804:	2500      	movs	r5, #0
 810d806:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810d80a:	9312      	str	r3, [sp, #72]	; 0x48
 810d80c:	46ab      	mov	fp, r5
 810d80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d810:	4620      	mov	r0, r4
 810d812:	6859      	ldr	r1, [r3, #4]
 810d814:	f7ff f806 	bl	810c824 <_Balloc>
 810d818:	9005      	str	r0, [sp, #20]
 810d81a:	2800      	cmp	r0, #0
 810d81c:	f43f af18 	beq.w	810d650 <_strtod_l+0x488>
 810d820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d822:	691a      	ldr	r2, [r3, #16]
 810d824:	3202      	adds	r2, #2
 810d826:	f103 010c 	add.w	r1, r3, #12
 810d82a:	0092      	lsls	r2, r2, #2
 810d82c:	300c      	adds	r0, #12
 810d82e:	f7fe f91e 	bl	810ba6e <memcpy>
 810d832:	ec49 8b10 	vmov	d0, r8, r9
 810d836:	aa18      	add	r2, sp, #96	; 0x60
 810d838:	a917      	add	r1, sp, #92	; 0x5c
 810d83a:	4620      	mov	r0, r4
 810d83c:	f7ff fbce 	bl	810cfdc <__d2b>
 810d840:	ec49 8b18 	vmov	d8, r8, r9
 810d844:	9016      	str	r0, [sp, #88]	; 0x58
 810d846:	2800      	cmp	r0, #0
 810d848:	f43f af02 	beq.w	810d650 <_strtod_l+0x488>
 810d84c:	2101      	movs	r1, #1
 810d84e:	4620      	mov	r0, r4
 810d850:	f7ff f928 	bl	810caa4 <__i2b>
 810d854:	4683      	mov	fp, r0
 810d856:	2800      	cmp	r0, #0
 810d858:	f43f aefa 	beq.w	810d650 <_strtod_l+0x488>
 810d85c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810d85e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810d860:	2e00      	cmp	r6, #0
 810d862:	bfab      	itete	ge
 810d864:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810d866:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810d868:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810d86a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810d86e:	bfac      	ite	ge
 810d870:	eb06 0a03 	addge.w	sl, r6, r3
 810d874:	1b9f      	sublt	r7, r3, r6
 810d876:	9b04      	ldr	r3, [sp, #16]
 810d878:	1af6      	subs	r6, r6, r3
 810d87a:	4416      	add	r6, r2
 810d87c:	4ba0      	ldr	r3, [pc, #640]	; (810db00 <_strtod_l+0x938>)
 810d87e:	3e01      	subs	r6, #1
 810d880:	429e      	cmp	r6, r3
 810d882:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810d886:	f280 80c4 	bge.w	810da12 <_strtod_l+0x84a>
 810d88a:	1b9b      	subs	r3, r3, r6
 810d88c:	2b1f      	cmp	r3, #31
 810d88e:	eba2 0203 	sub.w	r2, r2, r3
 810d892:	f04f 0101 	mov.w	r1, #1
 810d896:	f300 80b0 	bgt.w	810d9fa <_strtod_l+0x832>
 810d89a:	fa01 f303 	lsl.w	r3, r1, r3
 810d89e:	930e      	str	r3, [sp, #56]	; 0x38
 810d8a0:	2300      	movs	r3, #0
 810d8a2:	930d      	str	r3, [sp, #52]	; 0x34
 810d8a4:	eb0a 0602 	add.w	r6, sl, r2
 810d8a8:	9b04      	ldr	r3, [sp, #16]
 810d8aa:	45b2      	cmp	sl, r6
 810d8ac:	4417      	add	r7, r2
 810d8ae:	441f      	add	r7, r3
 810d8b0:	4653      	mov	r3, sl
 810d8b2:	bfa8      	it	ge
 810d8b4:	4633      	movge	r3, r6
 810d8b6:	42bb      	cmp	r3, r7
 810d8b8:	bfa8      	it	ge
 810d8ba:	463b      	movge	r3, r7
 810d8bc:	2b00      	cmp	r3, #0
 810d8be:	bfc2      	ittt	gt
 810d8c0:	1af6      	subgt	r6, r6, r3
 810d8c2:	1aff      	subgt	r7, r7, r3
 810d8c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 810d8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d8ca:	2b00      	cmp	r3, #0
 810d8cc:	dd17      	ble.n	810d8fe <_strtod_l+0x736>
 810d8ce:	4659      	mov	r1, fp
 810d8d0:	461a      	mov	r2, r3
 810d8d2:	4620      	mov	r0, r4
 810d8d4:	f7ff f9a6 	bl	810cc24 <__pow5mult>
 810d8d8:	4683      	mov	fp, r0
 810d8da:	2800      	cmp	r0, #0
 810d8dc:	f43f aeb8 	beq.w	810d650 <_strtod_l+0x488>
 810d8e0:	4601      	mov	r1, r0
 810d8e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810d8e4:	4620      	mov	r0, r4
 810d8e6:	f7ff f8f3 	bl	810cad0 <__multiply>
 810d8ea:	900b      	str	r0, [sp, #44]	; 0x2c
 810d8ec:	2800      	cmp	r0, #0
 810d8ee:	f43f aeaf 	beq.w	810d650 <_strtod_l+0x488>
 810d8f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d8f4:	4620      	mov	r0, r4
 810d8f6:	f7fe ffd5 	bl	810c8a4 <_Bfree>
 810d8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d8fc:	9316      	str	r3, [sp, #88]	; 0x58
 810d8fe:	2e00      	cmp	r6, #0
 810d900:	f300 808c 	bgt.w	810da1c <_strtod_l+0x854>
 810d904:	9b08      	ldr	r3, [sp, #32]
 810d906:	2b00      	cmp	r3, #0
 810d908:	dd08      	ble.n	810d91c <_strtod_l+0x754>
 810d90a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810d90c:	9905      	ldr	r1, [sp, #20]
 810d90e:	4620      	mov	r0, r4
 810d910:	f7ff f988 	bl	810cc24 <__pow5mult>
 810d914:	9005      	str	r0, [sp, #20]
 810d916:	2800      	cmp	r0, #0
 810d918:	f43f ae9a 	beq.w	810d650 <_strtod_l+0x488>
 810d91c:	2f00      	cmp	r7, #0
 810d91e:	dd08      	ble.n	810d932 <_strtod_l+0x76a>
 810d920:	9905      	ldr	r1, [sp, #20]
 810d922:	463a      	mov	r2, r7
 810d924:	4620      	mov	r0, r4
 810d926:	f7ff f9d7 	bl	810ccd8 <__lshift>
 810d92a:	9005      	str	r0, [sp, #20]
 810d92c:	2800      	cmp	r0, #0
 810d92e:	f43f ae8f 	beq.w	810d650 <_strtod_l+0x488>
 810d932:	f1ba 0f00 	cmp.w	sl, #0
 810d936:	dd08      	ble.n	810d94a <_strtod_l+0x782>
 810d938:	4659      	mov	r1, fp
 810d93a:	4652      	mov	r2, sl
 810d93c:	4620      	mov	r0, r4
 810d93e:	f7ff f9cb 	bl	810ccd8 <__lshift>
 810d942:	4683      	mov	fp, r0
 810d944:	2800      	cmp	r0, #0
 810d946:	f43f ae83 	beq.w	810d650 <_strtod_l+0x488>
 810d94a:	9a05      	ldr	r2, [sp, #20]
 810d94c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d94e:	4620      	mov	r0, r4
 810d950:	f7ff fa4a 	bl	810cde8 <__mdiff>
 810d954:	4605      	mov	r5, r0
 810d956:	2800      	cmp	r0, #0
 810d958:	f43f ae7a 	beq.w	810d650 <_strtod_l+0x488>
 810d95c:	68c3      	ldr	r3, [r0, #12]
 810d95e:	930b      	str	r3, [sp, #44]	; 0x2c
 810d960:	2300      	movs	r3, #0
 810d962:	60c3      	str	r3, [r0, #12]
 810d964:	4659      	mov	r1, fp
 810d966:	f7ff fa23 	bl	810cdb0 <__mcmp>
 810d96a:	2800      	cmp	r0, #0
 810d96c:	da60      	bge.n	810da30 <_strtod_l+0x868>
 810d96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d970:	ea53 0308 	orrs.w	r3, r3, r8
 810d974:	f040 8084 	bne.w	810da80 <_strtod_l+0x8b8>
 810d978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d97c:	2b00      	cmp	r3, #0
 810d97e:	d17f      	bne.n	810da80 <_strtod_l+0x8b8>
 810d980:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d984:	0d1b      	lsrs	r3, r3, #20
 810d986:	051b      	lsls	r3, r3, #20
 810d988:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810d98c:	d978      	bls.n	810da80 <_strtod_l+0x8b8>
 810d98e:	696b      	ldr	r3, [r5, #20]
 810d990:	b913      	cbnz	r3, 810d998 <_strtod_l+0x7d0>
 810d992:	692b      	ldr	r3, [r5, #16]
 810d994:	2b01      	cmp	r3, #1
 810d996:	dd73      	ble.n	810da80 <_strtod_l+0x8b8>
 810d998:	4629      	mov	r1, r5
 810d99a:	2201      	movs	r2, #1
 810d99c:	4620      	mov	r0, r4
 810d99e:	f7ff f99b 	bl	810ccd8 <__lshift>
 810d9a2:	4659      	mov	r1, fp
 810d9a4:	4605      	mov	r5, r0
 810d9a6:	f7ff fa03 	bl	810cdb0 <__mcmp>
 810d9aa:	2800      	cmp	r0, #0
 810d9ac:	dd68      	ble.n	810da80 <_strtod_l+0x8b8>
 810d9ae:	9904      	ldr	r1, [sp, #16]
 810d9b0:	4a54      	ldr	r2, [pc, #336]	; (810db04 <_strtod_l+0x93c>)
 810d9b2:	464b      	mov	r3, r9
 810d9b4:	2900      	cmp	r1, #0
 810d9b6:	f000 8084 	beq.w	810dac2 <_strtod_l+0x8fa>
 810d9ba:	ea02 0109 	and.w	r1, r2, r9
 810d9be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810d9c2:	dc7e      	bgt.n	810dac2 <_strtod_l+0x8fa>
 810d9c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810d9c8:	f77f aeb3 	ble.w	810d732 <_strtod_l+0x56a>
 810d9cc:	4b4e      	ldr	r3, [pc, #312]	; (810db08 <_strtod_l+0x940>)
 810d9ce:	4640      	mov	r0, r8
 810d9d0:	4649      	mov	r1, r9
 810d9d2:	2200      	movs	r2, #0
 810d9d4:	f7f2 fe98 	bl	8100708 <__aeabi_dmul>
 810d9d8:	4b4a      	ldr	r3, [pc, #296]	; (810db04 <_strtod_l+0x93c>)
 810d9da:	400b      	ands	r3, r1
 810d9dc:	4680      	mov	r8, r0
 810d9de:	4689      	mov	r9, r1
 810d9e0:	2b00      	cmp	r3, #0
 810d9e2:	f47f ae3f 	bne.w	810d664 <_strtod_l+0x49c>
 810d9e6:	2322      	movs	r3, #34	; 0x22
 810d9e8:	6023      	str	r3, [r4, #0]
 810d9ea:	e63b      	b.n	810d664 <_strtod_l+0x49c>
 810d9ec:	f04f 32ff 	mov.w	r2, #4294967295
 810d9f0:	fa02 f303 	lsl.w	r3, r2, r3
 810d9f4:	ea03 0808 	and.w	r8, r3, r8
 810d9f8:	e6e8      	b.n	810d7cc <_strtod_l+0x604>
 810d9fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810d9fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810da02:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810da06:	36e2      	adds	r6, #226	; 0xe2
 810da08:	fa01 f306 	lsl.w	r3, r1, r6
 810da0c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810da10:	e748      	b.n	810d8a4 <_strtod_l+0x6dc>
 810da12:	2100      	movs	r1, #0
 810da14:	2301      	movs	r3, #1
 810da16:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810da1a:	e743      	b.n	810d8a4 <_strtod_l+0x6dc>
 810da1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810da1e:	4632      	mov	r2, r6
 810da20:	4620      	mov	r0, r4
 810da22:	f7ff f959 	bl	810ccd8 <__lshift>
 810da26:	9016      	str	r0, [sp, #88]	; 0x58
 810da28:	2800      	cmp	r0, #0
 810da2a:	f47f af6b 	bne.w	810d904 <_strtod_l+0x73c>
 810da2e:	e60f      	b.n	810d650 <_strtod_l+0x488>
 810da30:	46ca      	mov	sl, r9
 810da32:	d171      	bne.n	810db18 <_strtod_l+0x950>
 810da34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810da36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810da3a:	b352      	cbz	r2, 810da92 <_strtod_l+0x8ca>
 810da3c:	4a33      	ldr	r2, [pc, #204]	; (810db0c <_strtod_l+0x944>)
 810da3e:	4293      	cmp	r3, r2
 810da40:	d12a      	bne.n	810da98 <_strtod_l+0x8d0>
 810da42:	9b04      	ldr	r3, [sp, #16]
 810da44:	4641      	mov	r1, r8
 810da46:	b1fb      	cbz	r3, 810da88 <_strtod_l+0x8c0>
 810da48:	4b2e      	ldr	r3, [pc, #184]	; (810db04 <_strtod_l+0x93c>)
 810da4a:	ea09 0303 	and.w	r3, r9, r3
 810da4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810da52:	f04f 32ff 	mov.w	r2, #4294967295
 810da56:	d81a      	bhi.n	810da8e <_strtod_l+0x8c6>
 810da58:	0d1b      	lsrs	r3, r3, #20
 810da5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810da5e:	fa02 f303 	lsl.w	r3, r2, r3
 810da62:	4299      	cmp	r1, r3
 810da64:	d118      	bne.n	810da98 <_strtod_l+0x8d0>
 810da66:	4b2a      	ldr	r3, [pc, #168]	; (810db10 <_strtod_l+0x948>)
 810da68:	459a      	cmp	sl, r3
 810da6a:	d102      	bne.n	810da72 <_strtod_l+0x8aa>
 810da6c:	3101      	adds	r1, #1
 810da6e:	f43f adef 	beq.w	810d650 <_strtod_l+0x488>
 810da72:	4b24      	ldr	r3, [pc, #144]	; (810db04 <_strtod_l+0x93c>)
 810da74:	ea0a 0303 	and.w	r3, sl, r3
 810da78:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810da7c:	f04f 0800 	mov.w	r8, #0
 810da80:	9b04      	ldr	r3, [sp, #16]
 810da82:	2b00      	cmp	r3, #0
 810da84:	d1a2      	bne.n	810d9cc <_strtod_l+0x804>
 810da86:	e5ed      	b.n	810d664 <_strtod_l+0x49c>
 810da88:	f04f 33ff 	mov.w	r3, #4294967295
 810da8c:	e7e9      	b.n	810da62 <_strtod_l+0x89a>
 810da8e:	4613      	mov	r3, r2
 810da90:	e7e7      	b.n	810da62 <_strtod_l+0x89a>
 810da92:	ea53 0308 	orrs.w	r3, r3, r8
 810da96:	d08a      	beq.n	810d9ae <_strtod_l+0x7e6>
 810da98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810da9a:	b1e3      	cbz	r3, 810dad6 <_strtod_l+0x90e>
 810da9c:	ea13 0f0a 	tst.w	r3, sl
 810daa0:	d0ee      	beq.n	810da80 <_strtod_l+0x8b8>
 810daa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810daa4:	9a04      	ldr	r2, [sp, #16]
 810daa6:	4640      	mov	r0, r8
 810daa8:	4649      	mov	r1, r9
 810daaa:	b1c3      	cbz	r3, 810dade <_strtod_l+0x916>
 810daac:	f7ff fb6f 	bl	810d18e <sulp>
 810dab0:	4602      	mov	r2, r0
 810dab2:	460b      	mov	r3, r1
 810dab4:	ec51 0b18 	vmov	r0, r1, d8
 810dab8:	f7f2 fc70 	bl	810039c <__adddf3>
 810dabc:	4680      	mov	r8, r0
 810dabe:	4689      	mov	r9, r1
 810dac0:	e7de      	b.n	810da80 <_strtod_l+0x8b8>
 810dac2:	4013      	ands	r3, r2
 810dac4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810dac8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810dacc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810dad0:	f04f 38ff 	mov.w	r8, #4294967295
 810dad4:	e7d4      	b.n	810da80 <_strtod_l+0x8b8>
 810dad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810dad8:	ea13 0f08 	tst.w	r3, r8
 810dadc:	e7e0      	b.n	810daa0 <_strtod_l+0x8d8>
 810dade:	f7ff fb56 	bl	810d18e <sulp>
 810dae2:	4602      	mov	r2, r0
 810dae4:	460b      	mov	r3, r1
 810dae6:	ec51 0b18 	vmov	r0, r1, d8
 810daea:	f7f2 fc55 	bl	8100398 <__aeabi_dsub>
 810daee:	2200      	movs	r2, #0
 810daf0:	2300      	movs	r3, #0
 810daf2:	4680      	mov	r8, r0
 810daf4:	4689      	mov	r9, r1
 810daf6:	f7f3 f86f 	bl	8100bd8 <__aeabi_dcmpeq>
 810dafa:	2800      	cmp	r0, #0
 810dafc:	d0c0      	beq.n	810da80 <_strtod_l+0x8b8>
 810dafe:	e618      	b.n	810d732 <_strtod_l+0x56a>
 810db00:	fffffc02 	.word	0xfffffc02
 810db04:	7ff00000 	.word	0x7ff00000
 810db08:	39500000 	.word	0x39500000
 810db0c:	000fffff 	.word	0x000fffff
 810db10:	7fefffff 	.word	0x7fefffff
 810db14:	081ec4e8 	.word	0x081ec4e8
 810db18:	4659      	mov	r1, fp
 810db1a:	4628      	mov	r0, r5
 810db1c:	f7ff fab8 	bl	810d090 <__ratio>
 810db20:	ec57 6b10 	vmov	r6, r7, d0
 810db24:	ee10 0a10 	vmov	r0, s0
 810db28:	2200      	movs	r2, #0
 810db2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810db2e:	4639      	mov	r1, r7
 810db30:	f7f3 f866 	bl	8100c00 <__aeabi_dcmple>
 810db34:	2800      	cmp	r0, #0
 810db36:	d071      	beq.n	810dc1c <_strtod_l+0xa54>
 810db38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810db3a:	2b00      	cmp	r3, #0
 810db3c:	d17c      	bne.n	810dc38 <_strtod_l+0xa70>
 810db3e:	f1b8 0f00 	cmp.w	r8, #0
 810db42:	d15a      	bne.n	810dbfa <_strtod_l+0xa32>
 810db44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810db48:	2b00      	cmp	r3, #0
 810db4a:	d15d      	bne.n	810dc08 <_strtod_l+0xa40>
 810db4c:	4b90      	ldr	r3, [pc, #576]	; (810dd90 <_strtod_l+0xbc8>)
 810db4e:	2200      	movs	r2, #0
 810db50:	4630      	mov	r0, r6
 810db52:	4639      	mov	r1, r7
 810db54:	f7f3 f84a 	bl	8100bec <__aeabi_dcmplt>
 810db58:	2800      	cmp	r0, #0
 810db5a:	d15c      	bne.n	810dc16 <_strtod_l+0xa4e>
 810db5c:	4630      	mov	r0, r6
 810db5e:	4639      	mov	r1, r7
 810db60:	4b8c      	ldr	r3, [pc, #560]	; (810dd94 <_strtod_l+0xbcc>)
 810db62:	2200      	movs	r2, #0
 810db64:	f7f2 fdd0 	bl	8100708 <__aeabi_dmul>
 810db68:	4606      	mov	r6, r0
 810db6a:	460f      	mov	r7, r1
 810db6c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810db70:	9606      	str	r6, [sp, #24]
 810db72:	9307      	str	r3, [sp, #28]
 810db74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810db78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810db7c:	4b86      	ldr	r3, [pc, #536]	; (810dd98 <_strtod_l+0xbd0>)
 810db7e:	ea0a 0303 	and.w	r3, sl, r3
 810db82:	930d      	str	r3, [sp, #52]	; 0x34
 810db84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810db86:	4b85      	ldr	r3, [pc, #532]	; (810dd9c <_strtod_l+0xbd4>)
 810db88:	429a      	cmp	r2, r3
 810db8a:	f040 8090 	bne.w	810dcae <_strtod_l+0xae6>
 810db8e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810db92:	ec49 8b10 	vmov	d0, r8, r9
 810db96:	f7ff f9b1 	bl	810cefc <__ulp>
 810db9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810db9e:	ec51 0b10 	vmov	r0, r1, d0
 810dba2:	f7f2 fdb1 	bl	8100708 <__aeabi_dmul>
 810dba6:	4642      	mov	r2, r8
 810dba8:	464b      	mov	r3, r9
 810dbaa:	f7f2 fbf7 	bl	810039c <__adddf3>
 810dbae:	460b      	mov	r3, r1
 810dbb0:	4979      	ldr	r1, [pc, #484]	; (810dd98 <_strtod_l+0xbd0>)
 810dbb2:	4a7b      	ldr	r2, [pc, #492]	; (810dda0 <_strtod_l+0xbd8>)
 810dbb4:	4019      	ands	r1, r3
 810dbb6:	4291      	cmp	r1, r2
 810dbb8:	4680      	mov	r8, r0
 810dbba:	d944      	bls.n	810dc46 <_strtod_l+0xa7e>
 810dbbc:	ee18 2a90 	vmov	r2, s17
 810dbc0:	4b78      	ldr	r3, [pc, #480]	; (810dda4 <_strtod_l+0xbdc>)
 810dbc2:	429a      	cmp	r2, r3
 810dbc4:	d104      	bne.n	810dbd0 <_strtod_l+0xa08>
 810dbc6:	ee18 3a10 	vmov	r3, s16
 810dbca:	3301      	adds	r3, #1
 810dbcc:	f43f ad40 	beq.w	810d650 <_strtod_l+0x488>
 810dbd0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810dda4 <_strtod_l+0xbdc>
 810dbd4:	f04f 38ff 	mov.w	r8, #4294967295
 810dbd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 810dbda:	4620      	mov	r0, r4
 810dbdc:	f7fe fe62 	bl	810c8a4 <_Bfree>
 810dbe0:	9905      	ldr	r1, [sp, #20]
 810dbe2:	4620      	mov	r0, r4
 810dbe4:	f7fe fe5e 	bl	810c8a4 <_Bfree>
 810dbe8:	4659      	mov	r1, fp
 810dbea:	4620      	mov	r0, r4
 810dbec:	f7fe fe5a 	bl	810c8a4 <_Bfree>
 810dbf0:	4629      	mov	r1, r5
 810dbf2:	4620      	mov	r0, r4
 810dbf4:	f7fe fe56 	bl	810c8a4 <_Bfree>
 810dbf8:	e609      	b.n	810d80e <_strtod_l+0x646>
 810dbfa:	f1b8 0f01 	cmp.w	r8, #1
 810dbfe:	d103      	bne.n	810dc08 <_strtod_l+0xa40>
 810dc00:	f1b9 0f00 	cmp.w	r9, #0
 810dc04:	f43f ad95 	beq.w	810d732 <_strtod_l+0x56a>
 810dc08:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810dd60 <_strtod_l+0xb98>
 810dc0c:	4f60      	ldr	r7, [pc, #384]	; (810dd90 <_strtod_l+0xbc8>)
 810dc0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 810dc12:	2600      	movs	r6, #0
 810dc14:	e7ae      	b.n	810db74 <_strtod_l+0x9ac>
 810dc16:	4f5f      	ldr	r7, [pc, #380]	; (810dd94 <_strtod_l+0xbcc>)
 810dc18:	2600      	movs	r6, #0
 810dc1a:	e7a7      	b.n	810db6c <_strtod_l+0x9a4>
 810dc1c:	4b5d      	ldr	r3, [pc, #372]	; (810dd94 <_strtod_l+0xbcc>)
 810dc1e:	4630      	mov	r0, r6
 810dc20:	4639      	mov	r1, r7
 810dc22:	2200      	movs	r2, #0
 810dc24:	f7f2 fd70 	bl	8100708 <__aeabi_dmul>
 810dc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810dc2a:	4606      	mov	r6, r0
 810dc2c:	460f      	mov	r7, r1
 810dc2e:	2b00      	cmp	r3, #0
 810dc30:	d09c      	beq.n	810db6c <_strtod_l+0x9a4>
 810dc32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810dc36:	e79d      	b.n	810db74 <_strtod_l+0x9ac>
 810dc38:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810dd68 <_strtod_l+0xba0>
 810dc3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 810dc40:	ec57 6b17 	vmov	r6, r7, d7
 810dc44:	e796      	b.n	810db74 <_strtod_l+0x9ac>
 810dc46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810dc4a:	9b04      	ldr	r3, [sp, #16]
 810dc4c:	46ca      	mov	sl, r9
 810dc4e:	2b00      	cmp	r3, #0
 810dc50:	d1c2      	bne.n	810dbd8 <_strtod_l+0xa10>
 810dc52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810dc56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810dc58:	0d1b      	lsrs	r3, r3, #20
 810dc5a:	051b      	lsls	r3, r3, #20
 810dc5c:	429a      	cmp	r2, r3
 810dc5e:	d1bb      	bne.n	810dbd8 <_strtod_l+0xa10>
 810dc60:	4630      	mov	r0, r6
 810dc62:	4639      	mov	r1, r7
 810dc64:	f7f3 f8b0 	bl	8100dc8 <__aeabi_d2lz>
 810dc68:	f7f2 fd20 	bl	81006ac <__aeabi_l2d>
 810dc6c:	4602      	mov	r2, r0
 810dc6e:	460b      	mov	r3, r1
 810dc70:	4630      	mov	r0, r6
 810dc72:	4639      	mov	r1, r7
 810dc74:	f7f2 fb90 	bl	8100398 <__aeabi_dsub>
 810dc78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810dc7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810dc7e:	ea43 0308 	orr.w	r3, r3, r8
 810dc82:	4313      	orrs	r3, r2
 810dc84:	4606      	mov	r6, r0
 810dc86:	460f      	mov	r7, r1
 810dc88:	d054      	beq.n	810dd34 <_strtod_l+0xb6c>
 810dc8a:	a339      	add	r3, pc, #228	; (adr r3, 810dd70 <_strtod_l+0xba8>)
 810dc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc90:	f7f2 ffac 	bl	8100bec <__aeabi_dcmplt>
 810dc94:	2800      	cmp	r0, #0
 810dc96:	f47f ace5 	bne.w	810d664 <_strtod_l+0x49c>
 810dc9a:	a337      	add	r3, pc, #220	; (adr r3, 810dd78 <_strtod_l+0xbb0>)
 810dc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dca0:	4630      	mov	r0, r6
 810dca2:	4639      	mov	r1, r7
 810dca4:	f7f2 ffc0 	bl	8100c28 <__aeabi_dcmpgt>
 810dca8:	2800      	cmp	r0, #0
 810dcaa:	d095      	beq.n	810dbd8 <_strtod_l+0xa10>
 810dcac:	e4da      	b.n	810d664 <_strtod_l+0x49c>
 810dcae:	9b04      	ldr	r3, [sp, #16]
 810dcb0:	b333      	cbz	r3, 810dd00 <_strtod_l+0xb38>
 810dcb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810dcb4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810dcb8:	d822      	bhi.n	810dd00 <_strtod_l+0xb38>
 810dcba:	a331      	add	r3, pc, #196	; (adr r3, 810dd80 <_strtod_l+0xbb8>)
 810dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dcc0:	4630      	mov	r0, r6
 810dcc2:	4639      	mov	r1, r7
 810dcc4:	f7f2 ff9c 	bl	8100c00 <__aeabi_dcmple>
 810dcc8:	b1a0      	cbz	r0, 810dcf4 <_strtod_l+0xb2c>
 810dcca:	4639      	mov	r1, r7
 810dccc:	4630      	mov	r0, r6
 810dcce:	f7f2 fff3 	bl	8100cb8 <__aeabi_d2uiz>
 810dcd2:	2801      	cmp	r0, #1
 810dcd4:	bf38      	it	cc
 810dcd6:	2001      	movcc	r0, #1
 810dcd8:	f7f2 fc9c 	bl	8100614 <__aeabi_ui2d>
 810dcdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810dcde:	4606      	mov	r6, r0
 810dce0:	460f      	mov	r7, r1
 810dce2:	bb23      	cbnz	r3, 810dd2e <_strtod_l+0xb66>
 810dce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810dce8:	9010      	str	r0, [sp, #64]	; 0x40
 810dcea:	9311      	str	r3, [sp, #68]	; 0x44
 810dcec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810dcf0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810dcf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810dcf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810dcf8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810dcfc:	1a9b      	subs	r3, r3, r2
 810dcfe:	930f      	str	r3, [sp, #60]	; 0x3c
 810dd00:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810dd04:	eeb0 0a48 	vmov.f32	s0, s16
 810dd08:	eef0 0a68 	vmov.f32	s1, s17
 810dd0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810dd10:	f7ff f8f4 	bl	810cefc <__ulp>
 810dd14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810dd18:	ec53 2b10 	vmov	r2, r3, d0
 810dd1c:	f7f2 fcf4 	bl	8100708 <__aeabi_dmul>
 810dd20:	ec53 2b18 	vmov	r2, r3, d8
 810dd24:	f7f2 fb3a 	bl	810039c <__adddf3>
 810dd28:	4680      	mov	r8, r0
 810dd2a:	4689      	mov	r9, r1
 810dd2c:	e78d      	b.n	810dc4a <_strtod_l+0xa82>
 810dd2e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810dd32:	e7db      	b.n	810dcec <_strtod_l+0xb24>
 810dd34:	a314      	add	r3, pc, #80	; (adr r3, 810dd88 <_strtod_l+0xbc0>)
 810dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dd3a:	f7f2 ff57 	bl	8100bec <__aeabi_dcmplt>
 810dd3e:	e7b3      	b.n	810dca8 <_strtod_l+0xae0>
 810dd40:	2300      	movs	r3, #0
 810dd42:	930a      	str	r3, [sp, #40]	; 0x28
 810dd44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810dd46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810dd48:	6013      	str	r3, [r2, #0]
 810dd4a:	f7ff ba7c 	b.w	810d246 <_strtod_l+0x7e>
 810dd4e:	2a65      	cmp	r2, #101	; 0x65
 810dd50:	f43f ab75 	beq.w	810d43e <_strtod_l+0x276>
 810dd54:	2a45      	cmp	r2, #69	; 0x45
 810dd56:	f43f ab72 	beq.w	810d43e <_strtod_l+0x276>
 810dd5a:	2301      	movs	r3, #1
 810dd5c:	f7ff bbaa 	b.w	810d4b4 <_strtod_l+0x2ec>
 810dd60:	00000000 	.word	0x00000000
 810dd64:	bff00000 	.word	0xbff00000
 810dd68:	00000000 	.word	0x00000000
 810dd6c:	3ff00000 	.word	0x3ff00000
 810dd70:	94a03595 	.word	0x94a03595
 810dd74:	3fdfffff 	.word	0x3fdfffff
 810dd78:	35afe535 	.word	0x35afe535
 810dd7c:	3fe00000 	.word	0x3fe00000
 810dd80:	ffc00000 	.word	0xffc00000
 810dd84:	41dfffff 	.word	0x41dfffff
 810dd88:	94a03595 	.word	0x94a03595
 810dd8c:	3fcfffff 	.word	0x3fcfffff
 810dd90:	3ff00000 	.word	0x3ff00000
 810dd94:	3fe00000 	.word	0x3fe00000
 810dd98:	7ff00000 	.word	0x7ff00000
 810dd9c:	7fe00000 	.word	0x7fe00000
 810dda0:	7c9fffff 	.word	0x7c9fffff
 810dda4:	7fefffff 	.word	0x7fefffff

0810dda8 <_strtod_r>:
 810dda8:	4b01      	ldr	r3, [pc, #4]	; (810ddb0 <_strtod_r+0x8>)
 810ddaa:	f7ff ba0d 	b.w	810d1c8 <_strtod_l>
 810ddae:	bf00      	nop
 810ddb0:	100009f0 	.word	0x100009f0

0810ddb4 <_strtol_l.constprop.0>:
 810ddb4:	2b01      	cmp	r3, #1
 810ddb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ddba:	d001      	beq.n	810ddc0 <_strtol_l.constprop.0+0xc>
 810ddbc:	2b24      	cmp	r3, #36	; 0x24
 810ddbe:	d906      	bls.n	810ddce <_strtol_l.constprop.0+0x1a>
 810ddc0:	f7fd fe28 	bl	810ba14 <__errno>
 810ddc4:	2316      	movs	r3, #22
 810ddc6:	6003      	str	r3, [r0, #0]
 810ddc8:	2000      	movs	r0, #0
 810ddca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ddce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810deb4 <_strtol_l.constprop.0+0x100>
 810ddd2:	460d      	mov	r5, r1
 810ddd4:	462e      	mov	r6, r5
 810ddd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 810ddda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810ddde:	f017 0708 	ands.w	r7, r7, #8
 810dde2:	d1f7      	bne.n	810ddd4 <_strtol_l.constprop.0+0x20>
 810dde4:	2c2d      	cmp	r4, #45	; 0x2d
 810dde6:	d132      	bne.n	810de4e <_strtol_l.constprop.0+0x9a>
 810dde8:	782c      	ldrb	r4, [r5, #0]
 810ddea:	2701      	movs	r7, #1
 810ddec:	1cb5      	adds	r5, r6, #2
 810ddee:	2b00      	cmp	r3, #0
 810ddf0:	d05b      	beq.n	810deaa <_strtol_l.constprop.0+0xf6>
 810ddf2:	2b10      	cmp	r3, #16
 810ddf4:	d109      	bne.n	810de0a <_strtol_l.constprop.0+0x56>
 810ddf6:	2c30      	cmp	r4, #48	; 0x30
 810ddf8:	d107      	bne.n	810de0a <_strtol_l.constprop.0+0x56>
 810ddfa:	782c      	ldrb	r4, [r5, #0]
 810ddfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810de00:	2c58      	cmp	r4, #88	; 0x58
 810de02:	d14d      	bne.n	810dea0 <_strtol_l.constprop.0+0xec>
 810de04:	786c      	ldrb	r4, [r5, #1]
 810de06:	2310      	movs	r3, #16
 810de08:	3502      	adds	r5, #2
 810de0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810de0e:	f108 38ff 	add.w	r8, r8, #4294967295
 810de12:	f04f 0e00 	mov.w	lr, #0
 810de16:	fbb8 f9f3 	udiv	r9, r8, r3
 810de1a:	4676      	mov	r6, lr
 810de1c:	fb03 8a19 	mls	sl, r3, r9, r8
 810de20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810de24:	f1bc 0f09 	cmp.w	ip, #9
 810de28:	d816      	bhi.n	810de58 <_strtol_l.constprop.0+0xa4>
 810de2a:	4664      	mov	r4, ip
 810de2c:	42a3      	cmp	r3, r4
 810de2e:	dd24      	ble.n	810de7a <_strtol_l.constprop.0+0xc6>
 810de30:	f1be 3fff 	cmp.w	lr, #4294967295
 810de34:	d008      	beq.n	810de48 <_strtol_l.constprop.0+0x94>
 810de36:	45b1      	cmp	r9, r6
 810de38:	d31c      	bcc.n	810de74 <_strtol_l.constprop.0+0xc0>
 810de3a:	d101      	bne.n	810de40 <_strtol_l.constprop.0+0x8c>
 810de3c:	45a2      	cmp	sl, r4
 810de3e:	db19      	blt.n	810de74 <_strtol_l.constprop.0+0xc0>
 810de40:	fb06 4603 	mla	r6, r6, r3, r4
 810de44:	f04f 0e01 	mov.w	lr, #1
 810de48:	f815 4b01 	ldrb.w	r4, [r5], #1
 810de4c:	e7e8      	b.n	810de20 <_strtol_l.constprop.0+0x6c>
 810de4e:	2c2b      	cmp	r4, #43	; 0x2b
 810de50:	bf04      	itt	eq
 810de52:	782c      	ldrbeq	r4, [r5, #0]
 810de54:	1cb5      	addeq	r5, r6, #2
 810de56:	e7ca      	b.n	810ddee <_strtol_l.constprop.0+0x3a>
 810de58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810de5c:	f1bc 0f19 	cmp.w	ip, #25
 810de60:	d801      	bhi.n	810de66 <_strtol_l.constprop.0+0xb2>
 810de62:	3c37      	subs	r4, #55	; 0x37
 810de64:	e7e2      	b.n	810de2c <_strtol_l.constprop.0+0x78>
 810de66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810de6a:	f1bc 0f19 	cmp.w	ip, #25
 810de6e:	d804      	bhi.n	810de7a <_strtol_l.constprop.0+0xc6>
 810de70:	3c57      	subs	r4, #87	; 0x57
 810de72:	e7db      	b.n	810de2c <_strtol_l.constprop.0+0x78>
 810de74:	f04f 3eff 	mov.w	lr, #4294967295
 810de78:	e7e6      	b.n	810de48 <_strtol_l.constprop.0+0x94>
 810de7a:	f1be 3fff 	cmp.w	lr, #4294967295
 810de7e:	d105      	bne.n	810de8c <_strtol_l.constprop.0+0xd8>
 810de80:	2322      	movs	r3, #34	; 0x22
 810de82:	6003      	str	r3, [r0, #0]
 810de84:	4646      	mov	r6, r8
 810de86:	b942      	cbnz	r2, 810de9a <_strtol_l.constprop.0+0xe6>
 810de88:	4630      	mov	r0, r6
 810de8a:	e79e      	b.n	810ddca <_strtol_l.constprop.0+0x16>
 810de8c:	b107      	cbz	r7, 810de90 <_strtol_l.constprop.0+0xdc>
 810de8e:	4276      	negs	r6, r6
 810de90:	2a00      	cmp	r2, #0
 810de92:	d0f9      	beq.n	810de88 <_strtol_l.constprop.0+0xd4>
 810de94:	f1be 0f00 	cmp.w	lr, #0
 810de98:	d000      	beq.n	810de9c <_strtol_l.constprop.0+0xe8>
 810de9a:	1e69      	subs	r1, r5, #1
 810de9c:	6011      	str	r1, [r2, #0]
 810de9e:	e7f3      	b.n	810de88 <_strtol_l.constprop.0+0xd4>
 810dea0:	2430      	movs	r4, #48	; 0x30
 810dea2:	2b00      	cmp	r3, #0
 810dea4:	d1b1      	bne.n	810de0a <_strtol_l.constprop.0+0x56>
 810dea6:	2308      	movs	r3, #8
 810dea8:	e7af      	b.n	810de0a <_strtol_l.constprop.0+0x56>
 810deaa:	2c30      	cmp	r4, #48	; 0x30
 810deac:	d0a5      	beq.n	810ddfa <_strtol_l.constprop.0+0x46>
 810deae:	230a      	movs	r3, #10
 810deb0:	e7ab      	b.n	810de0a <_strtol_l.constprop.0+0x56>
 810deb2:	bf00      	nop
 810deb4:	081ec511 	.word	0x081ec511

0810deb8 <_strtol_r>:
 810deb8:	f7ff bf7c 	b.w	810ddb4 <_strtol_l.constprop.0>

0810debc <__ssputs_r>:
 810debc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810dec0:	688e      	ldr	r6, [r1, #8]
 810dec2:	461f      	mov	r7, r3
 810dec4:	42be      	cmp	r6, r7
 810dec6:	680b      	ldr	r3, [r1, #0]
 810dec8:	4682      	mov	sl, r0
 810deca:	460c      	mov	r4, r1
 810decc:	4690      	mov	r8, r2
 810dece:	d82c      	bhi.n	810df2a <__ssputs_r+0x6e>
 810ded0:	898a      	ldrh	r2, [r1, #12]
 810ded2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810ded6:	d026      	beq.n	810df26 <__ssputs_r+0x6a>
 810ded8:	6965      	ldr	r5, [r4, #20]
 810deda:	6909      	ldr	r1, [r1, #16]
 810dedc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810dee0:	eba3 0901 	sub.w	r9, r3, r1
 810dee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810dee8:	1c7b      	adds	r3, r7, #1
 810deea:	444b      	add	r3, r9
 810deec:	106d      	asrs	r5, r5, #1
 810deee:	429d      	cmp	r5, r3
 810def0:	bf38      	it	cc
 810def2:	461d      	movcc	r5, r3
 810def4:	0553      	lsls	r3, r2, #21
 810def6:	d527      	bpl.n	810df48 <__ssputs_r+0x8c>
 810def8:	4629      	mov	r1, r5
 810defa:	f7fc fbcf 	bl	810a69c <_malloc_r>
 810defe:	4606      	mov	r6, r0
 810df00:	b360      	cbz	r0, 810df5c <__ssputs_r+0xa0>
 810df02:	6921      	ldr	r1, [r4, #16]
 810df04:	464a      	mov	r2, r9
 810df06:	f7fd fdb2 	bl	810ba6e <memcpy>
 810df0a:	89a3      	ldrh	r3, [r4, #12]
 810df0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810df10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810df14:	81a3      	strh	r3, [r4, #12]
 810df16:	6126      	str	r6, [r4, #16]
 810df18:	6165      	str	r5, [r4, #20]
 810df1a:	444e      	add	r6, r9
 810df1c:	eba5 0509 	sub.w	r5, r5, r9
 810df20:	6026      	str	r6, [r4, #0]
 810df22:	60a5      	str	r5, [r4, #8]
 810df24:	463e      	mov	r6, r7
 810df26:	42be      	cmp	r6, r7
 810df28:	d900      	bls.n	810df2c <__ssputs_r+0x70>
 810df2a:	463e      	mov	r6, r7
 810df2c:	6820      	ldr	r0, [r4, #0]
 810df2e:	4632      	mov	r2, r6
 810df30:	4641      	mov	r1, r8
 810df32:	f000 fb6f 	bl	810e614 <memmove>
 810df36:	68a3      	ldr	r3, [r4, #8]
 810df38:	1b9b      	subs	r3, r3, r6
 810df3a:	60a3      	str	r3, [r4, #8]
 810df3c:	6823      	ldr	r3, [r4, #0]
 810df3e:	4433      	add	r3, r6
 810df40:	6023      	str	r3, [r4, #0]
 810df42:	2000      	movs	r0, #0
 810df44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810df48:	462a      	mov	r2, r5
 810df4a:	f7fc fc33 	bl	810a7b4 <_realloc_r>
 810df4e:	4606      	mov	r6, r0
 810df50:	2800      	cmp	r0, #0
 810df52:	d1e0      	bne.n	810df16 <__ssputs_r+0x5a>
 810df54:	6921      	ldr	r1, [r4, #16]
 810df56:	4650      	mov	r0, sl
 810df58:	f7fe fc18 	bl	810c78c <_free_r>
 810df5c:	230c      	movs	r3, #12
 810df5e:	f8ca 3000 	str.w	r3, [sl]
 810df62:	89a3      	ldrh	r3, [r4, #12]
 810df64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810df68:	81a3      	strh	r3, [r4, #12]
 810df6a:	f04f 30ff 	mov.w	r0, #4294967295
 810df6e:	e7e9      	b.n	810df44 <__ssputs_r+0x88>

0810df70 <_svfiprintf_r>:
 810df70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df74:	4698      	mov	r8, r3
 810df76:	898b      	ldrh	r3, [r1, #12]
 810df78:	061b      	lsls	r3, r3, #24
 810df7a:	b09d      	sub	sp, #116	; 0x74
 810df7c:	4607      	mov	r7, r0
 810df7e:	460d      	mov	r5, r1
 810df80:	4614      	mov	r4, r2
 810df82:	d50e      	bpl.n	810dfa2 <_svfiprintf_r+0x32>
 810df84:	690b      	ldr	r3, [r1, #16]
 810df86:	b963      	cbnz	r3, 810dfa2 <_svfiprintf_r+0x32>
 810df88:	2140      	movs	r1, #64	; 0x40
 810df8a:	f7fc fb87 	bl	810a69c <_malloc_r>
 810df8e:	6028      	str	r0, [r5, #0]
 810df90:	6128      	str	r0, [r5, #16]
 810df92:	b920      	cbnz	r0, 810df9e <_svfiprintf_r+0x2e>
 810df94:	230c      	movs	r3, #12
 810df96:	603b      	str	r3, [r7, #0]
 810df98:	f04f 30ff 	mov.w	r0, #4294967295
 810df9c:	e0d0      	b.n	810e140 <_svfiprintf_r+0x1d0>
 810df9e:	2340      	movs	r3, #64	; 0x40
 810dfa0:	616b      	str	r3, [r5, #20]
 810dfa2:	2300      	movs	r3, #0
 810dfa4:	9309      	str	r3, [sp, #36]	; 0x24
 810dfa6:	2320      	movs	r3, #32
 810dfa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810dfac:	f8cd 800c 	str.w	r8, [sp, #12]
 810dfb0:	2330      	movs	r3, #48	; 0x30
 810dfb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810e158 <_svfiprintf_r+0x1e8>
 810dfb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810dfba:	f04f 0901 	mov.w	r9, #1
 810dfbe:	4623      	mov	r3, r4
 810dfc0:	469a      	mov	sl, r3
 810dfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dfc6:	b10a      	cbz	r2, 810dfcc <_svfiprintf_r+0x5c>
 810dfc8:	2a25      	cmp	r2, #37	; 0x25
 810dfca:	d1f9      	bne.n	810dfc0 <_svfiprintf_r+0x50>
 810dfcc:	ebba 0b04 	subs.w	fp, sl, r4
 810dfd0:	d00b      	beq.n	810dfea <_svfiprintf_r+0x7a>
 810dfd2:	465b      	mov	r3, fp
 810dfd4:	4622      	mov	r2, r4
 810dfd6:	4629      	mov	r1, r5
 810dfd8:	4638      	mov	r0, r7
 810dfda:	f7ff ff6f 	bl	810debc <__ssputs_r>
 810dfde:	3001      	adds	r0, #1
 810dfe0:	f000 80a9 	beq.w	810e136 <_svfiprintf_r+0x1c6>
 810dfe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810dfe6:	445a      	add	r2, fp
 810dfe8:	9209      	str	r2, [sp, #36]	; 0x24
 810dfea:	f89a 3000 	ldrb.w	r3, [sl]
 810dfee:	2b00      	cmp	r3, #0
 810dff0:	f000 80a1 	beq.w	810e136 <_svfiprintf_r+0x1c6>
 810dff4:	2300      	movs	r3, #0
 810dff6:	f04f 32ff 	mov.w	r2, #4294967295
 810dffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810dffe:	f10a 0a01 	add.w	sl, sl, #1
 810e002:	9304      	str	r3, [sp, #16]
 810e004:	9307      	str	r3, [sp, #28]
 810e006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810e00a:	931a      	str	r3, [sp, #104]	; 0x68
 810e00c:	4654      	mov	r4, sl
 810e00e:	2205      	movs	r2, #5
 810e010:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e014:	4850      	ldr	r0, [pc, #320]	; (810e158 <_svfiprintf_r+0x1e8>)
 810e016:	f7f2 f963 	bl	81002e0 <memchr>
 810e01a:	9a04      	ldr	r2, [sp, #16]
 810e01c:	b9d8      	cbnz	r0, 810e056 <_svfiprintf_r+0xe6>
 810e01e:	06d0      	lsls	r0, r2, #27
 810e020:	bf44      	itt	mi
 810e022:	2320      	movmi	r3, #32
 810e024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e028:	0711      	lsls	r1, r2, #28
 810e02a:	bf44      	itt	mi
 810e02c:	232b      	movmi	r3, #43	; 0x2b
 810e02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e032:	f89a 3000 	ldrb.w	r3, [sl]
 810e036:	2b2a      	cmp	r3, #42	; 0x2a
 810e038:	d015      	beq.n	810e066 <_svfiprintf_r+0xf6>
 810e03a:	9a07      	ldr	r2, [sp, #28]
 810e03c:	4654      	mov	r4, sl
 810e03e:	2000      	movs	r0, #0
 810e040:	f04f 0c0a 	mov.w	ip, #10
 810e044:	4621      	mov	r1, r4
 810e046:	f811 3b01 	ldrb.w	r3, [r1], #1
 810e04a:	3b30      	subs	r3, #48	; 0x30
 810e04c:	2b09      	cmp	r3, #9
 810e04e:	d94d      	bls.n	810e0ec <_svfiprintf_r+0x17c>
 810e050:	b1b0      	cbz	r0, 810e080 <_svfiprintf_r+0x110>
 810e052:	9207      	str	r2, [sp, #28]
 810e054:	e014      	b.n	810e080 <_svfiprintf_r+0x110>
 810e056:	eba0 0308 	sub.w	r3, r0, r8
 810e05a:	fa09 f303 	lsl.w	r3, r9, r3
 810e05e:	4313      	orrs	r3, r2
 810e060:	9304      	str	r3, [sp, #16]
 810e062:	46a2      	mov	sl, r4
 810e064:	e7d2      	b.n	810e00c <_svfiprintf_r+0x9c>
 810e066:	9b03      	ldr	r3, [sp, #12]
 810e068:	1d19      	adds	r1, r3, #4
 810e06a:	681b      	ldr	r3, [r3, #0]
 810e06c:	9103      	str	r1, [sp, #12]
 810e06e:	2b00      	cmp	r3, #0
 810e070:	bfbb      	ittet	lt
 810e072:	425b      	neglt	r3, r3
 810e074:	f042 0202 	orrlt.w	r2, r2, #2
 810e078:	9307      	strge	r3, [sp, #28]
 810e07a:	9307      	strlt	r3, [sp, #28]
 810e07c:	bfb8      	it	lt
 810e07e:	9204      	strlt	r2, [sp, #16]
 810e080:	7823      	ldrb	r3, [r4, #0]
 810e082:	2b2e      	cmp	r3, #46	; 0x2e
 810e084:	d10c      	bne.n	810e0a0 <_svfiprintf_r+0x130>
 810e086:	7863      	ldrb	r3, [r4, #1]
 810e088:	2b2a      	cmp	r3, #42	; 0x2a
 810e08a:	d134      	bne.n	810e0f6 <_svfiprintf_r+0x186>
 810e08c:	9b03      	ldr	r3, [sp, #12]
 810e08e:	1d1a      	adds	r2, r3, #4
 810e090:	681b      	ldr	r3, [r3, #0]
 810e092:	9203      	str	r2, [sp, #12]
 810e094:	2b00      	cmp	r3, #0
 810e096:	bfb8      	it	lt
 810e098:	f04f 33ff 	movlt.w	r3, #4294967295
 810e09c:	3402      	adds	r4, #2
 810e09e:	9305      	str	r3, [sp, #20]
 810e0a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810e168 <_svfiprintf_r+0x1f8>
 810e0a4:	7821      	ldrb	r1, [r4, #0]
 810e0a6:	2203      	movs	r2, #3
 810e0a8:	4650      	mov	r0, sl
 810e0aa:	f7f2 f919 	bl	81002e0 <memchr>
 810e0ae:	b138      	cbz	r0, 810e0c0 <_svfiprintf_r+0x150>
 810e0b0:	9b04      	ldr	r3, [sp, #16]
 810e0b2:	eba0 000a 	sub.w	r0, r0, sl
 810e0b6:	2240      	movs	r2, #64	; 0x40
 810e0b8:	4082      	lsls	r2, r0
 810e0ba:	4313      	orrs	r3, r2
 810e0bc:	3401      	adds	r4, #1
 810e0be:	9304      	str	r3, [sp, #16]
 810e0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e0c4:	4825      	ldr	r0, [pc, #148]	; (810e15c <_svfiprintf_r+0x1ec>)
 810e0c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810e0ca:	2206      	movs	r2, #6
 810e0cc:	f7f2 f908 	bl	81002e0 <memchr>
 810e0d0:	2800      	cmp	r0, #0
 810e0d2:	d038      	beq.n	810e146 <_svfiprintf_r+0x1d6>
 810e0d4:	4b22      	ldr	r3, [pc, #136]	; (810e160 <_svfiprintf_r+0x1f0>)
 810e0d6:	bb1b      	cbnz	r3, 810e120 <_svfiprintf_r+0x1b0>
 810e0d8:	9b03      	ldr	r3, [sp, #12]
 810e0da:	3307      	adds	r3, #7
 810e0dc:	f023 0307 	bic.w	r3, r3, #7
 810e0e0:	3308      	adds	r3, #8
 810e0e2:	9303      	str	r3, [sp, #12]
 810e0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e0e6:	4433      	add	r3, r6
 810e0e8:	9309      	str	r3, [sp, #36]	; 0x24
 810e0ea:	e768      	b.n	810dfbe <_svfiprintf_r+0x4e>
 810e0ec:	fb0c 3202 	mla	r2, ip, r2, r3
 810e0f0:	460c      	mov	r4, r1
 810e0f2:	2001      	movs	r0, #1
 810e0f4:	e7a6      	b.n	810e044 <_svfiprintf_r+0xd4>
 810e0f6:	2300      	movs	r3, #0
 810e0f8:	3401      	adds	r4, #1
 810e0fa:	9305      	str	r3, [sp, #20]
 810e0fc:	4619      	mov	r1, r3
 810e0fe:	f04f 0c0a 	mov.w	ip, #10
 810e102:	4620      	mov	r0, r4
 810e104:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e108:	3a30      	subs	r2, #48	; 0x30
 810e10a:	2a09      	cmp	r2, #9
 810e10c:	d903      	bls.n	810e116 <_svfiprintf_r+0x1a6>
 810e10e:	2b00      	cmp	r3, #0
 810e110:	d0c6      	beq.n	810e0a0 <_svfiprintf_r+0x130>
 810e112:	9105      	str	r1, [sp, #20]
 810e114:	e7c4      	b.n	810e0a0 <_svfiprintf_r+0x130>
 810e116:	fb0c 2101 	mla	r1, ip, r1, r2
 810e11a:	4604      	mov	r4, r0
 810e11c:	2301      	movs	r3, #1
 810e11e:	e7f0      	b.n	810e102 <_svfiprintf_r+0x192>
 810e120:	ab03      	add	r3, sp, #12
 810e122:	9300      	str	r3, [sp, #0]
 810e124:	462a      	mov	r2, r5
 810e126:	4b0f      	ldr	r3, [pc, #60]	; (810e164 <_svfiprintf_r+0x1f4>)
 810e128:	a904      	add	r1, sp, #16
 810e12a:	4638      	mov	r0, r7
 810e12c:	f7fc fc12 	bl	810a954 <_printf_float>
 810e130:	1c42      	adds	r2, r0, #1
 810e132:	4606      	mov	r6, r0
 810e134:	d1d6      	bne.n	810e0e4 <_svfiprintf_r+0x174>
 810e136:	89ab      	ldrh	r3, [r5, #12]
 810e138:	065b      	lsls	r3, r3, #25
 810e13a:	f53f af2d 	bmi.w	810df98 <_svfiprintf_r+0x28>
 810e13e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810e140:	b01d      	add	sp, #116	; 0x74
 810e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e146:	ab03      	add	r3, sp, #12
 810e148:	9300      	str	r3, [sp, #0]
 810e14a:	462a      	mov	r2, r5
 810e14c:	4b05      	ldr	r3, [pc, #20]	; (810e164 <_svfiprintf_r+0x1f4>)
 810e14e:	a904      	add	r1, sp, #16
 810e150:	4638      	mov	r0, r7
 810e152:	f7fc fea3 	bl	810ae9c <_printf_i>
 810e156:	e7eb      	b.n	810e130 <_svfiprintf_r+0x1c0>
 810e158:	081ec611 	.word	0x081ec611
 810e15c:	081ec61b 	.word	0x081ec61b
 810e160:	0810a955 	.word	0x0810a955
 810e164:	0810debd 	.word	0x0810debd
 810e168:	081ec617 	.word	0x081ec617

0810e16c <__sfputc_r>:
 810e16c:	6893      	ldr	r3, [r2, #8]
 810e16e:	3b01      	subs	r3, #1
 810e170:	2b00      	cmp	r3, #0
 810e172:	b410      	push	{r4}
 810e174:	6093      	str	r3, [r2, #8]
 810e176:	da08      	bge.n	810e18a <__sfputc_r+0x1e>
 810e178:	6994      	ldr	r4, [r2, #24]
 810e17a:	42a3      	cmp	r3, r4
 810e17c:	db01      	blt.n	810e182 <__sfputc_r+0x16>
 810e17e:	290a      	cmp	r1, #10
 810e180:	d103      	bne.n	810e18a <__sfputc_r+0x1e>
 810e182:	f85d 4b04 	ldr.w	r4, [sp], #4
 810e186:	f7fd bb4e 	b.w	810b826 <__swbuf_r>
 810e18a:	6813      	ldr	r3, [r2, #0]
 810e18c:	1c58      	adds	r0, r3, #1
 810e18e:	6010      	str	r0, [r2, #0]
 810e190:	7019      	strb	r1, [r3, #0]
 810e192:	4608      	mov	r0, r1
 810e194:	f85d 4b04 	ldr.w	r4, [sp], #4
 810e198:	4770      	bx	lr

0810e19a <__sfputs_r>:
 810e19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e19c:	4606      	mov	r6, r0
 810e19e:	460f      	mov	r7, r1
 810e1a0:	4614      	mov	r4, r2
 810e1a2:	18d5      	adds	r5, r2, r3
 810e1a4:	42ac      	cmp	r4, r5
 810e1a6:	d101      	bne.n	810e1ac <__sfputs_r+0x12>
 810e1a8:	2000      	movs	r0, #0
 810e1aa:	e007      	b.n	810e1bc <__sfputs_r+0x22>
 810e1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e1b0:	463a      	mov	r2, r7
 810e1b2:	4630      	mov	r0, r6
 810e1b4:	f7ff ffda 	bl	810e16c <__sfputc_r>
 810e1b8:	1c43      	adds	r3, r0, #1
 810e1ba:	d1f3      	bne.n	810e1a4 <__sfputs_r+0xa>
 810e1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810e1c0 <_vfiprintf_r>:
 810e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e1c4:	460d      	mov	r5, r1
 810e1c6:	b09d      	sub	sp, #116	; 0x74
 810e1c8:	4614      	mov	r4, r2
 810e1ca:	4698      	mov	r8, r3
 810e1cc:	4606      	mov	r6, r0
 810e1ce:	b118      	cbz	r0, 810e1d8 <_vfiprintf_r+0x18>
 810e1d0:	6a03      	ldr	r3, [r0, #32]
 810e1d2:	b90b      	cbnz	r3, 810e1d8 <_vfiprintf_r+0x18>
 810e1d4:	f7fd fa20 	bl	810b618 <__sinit>
 810e1d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810e1da:	07d9      	lsls	r1, r3, #31
 810e1dc:	d405      	bmi.n	810e1ea <_vfiprintf_r+0x2a>
 810e1de:	89ab      	ldrh	r3, [r5, #12]
 810e1e0:	059a      	lsls	r2, r3, #22
 810e1e2:	d402      	bmi.n	810e1ea <_vfiprintf_r+0x2a>
 810e1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810e1e6:	f7fd fc40 	bl	810ba6a <__retarget_lock_acquire_recursive>
 810e1ea:	89ab      	ldrh	r3, [r5, #12]
 810e1ec:	071b      	lsls	r3, r3, #28
 810e1ee:	d501      	bpl.n	810e1f4 <_vfiprintf_r+0x34>
 810e1f0:	692b      	ldr	r3, [r5, #16]
 810e1f2:	b99b      	cbnz	r3, 810e21c <_vfiprintf_r+0x5c>
 810e1f4:	4629      	mov	r1, r5
 810e1f6:	4630      	mov	r0, r6
 810e1f8:	f7fd fb52 	bl	810b8a0 <__swsetup_r>
 810e1fc:	b170      	cbz	r0, 810e21c <_vfiprintf_r+0x5c>
 810e1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810e200:	07dc      	lsls	r4, r3, #31
 810e202:	d504      	bpl.n	810e20e <_vfiprintf_r+0x4e>
 810e204:	f04f 30ff 	mov.w	r0, #4294967295
 810e208:	b01d      	add	sp, #116	; 0x74
 810e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e20e:	89ab      	ldrh	r3, [r5, #12]
 810e210:	0598      	lsls	r0, r3, #22
 810e212:	d4f7      	bmi.n	810e204 <_vfiprintf_r+0x44>
 810e214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810e216:	f7fd fc29 	bl	810ba6c <__retarget_lock_release_recursive>
 810e21a:	e7f3      	b.n	810e204 <_vfiprintf_r+0x44>
 810e21c:	2300      	movs	r3, #0
 810e21e:	9309      	str	r3, [sp, #36]	; 0x24
 810e220:	2320      	movs	r3, #32
 810e222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810e226:	f8cd 800c 	str.w	r8, [sp, #12]
 810e22a:	2330      	movs	r3, #48	; 0x30
 810e22c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810e3e0 <_vfiprintf_r+0x220>
 810e230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810e234:	f04f 0901 	mov.w	r9, #1
 810e238:	4623      	mov	r3, r4
 810e23a:	469a      	mov	sl, r3
 810e23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e240:	b10a      	cbz	r2, 810e246 <_vfiprintf_r+0x86>
 810e242:	2a25      	cmp	r2, #37	; 0x25
 810e244:	d1f9      	bne.n	810e23a <_vfiprintf_r+0x7a>
 810e246:	ebba 0b04 	subs.w	fp, sl, r4
 810e24a:	d00b      	beq.n	810e264 <_vfiprintf_r+0xa4>
 810e24c:	465b      	mov	r3, fp
 810e24e:	4622      	mov	r2, r4
 810e250:	4629      	mov	r1, r5
 810e252:	4630      	mov	r0, r6
 810e254:	f7ff ffa1 	bl	810e19a <__sfputs_r>
 810e258:	3001      	adds	r0, #1
 810e25a:	f000 80a9 	beq.w	810e3b0 <_vfiprintf_r+0x1f0>
 810e25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810e260:	445a      	add	r2, fp
 810e262:	9209      	str	r2, [sp, #36]	; 0x24
 810e264:	f89a 3000 	ldrb.w	r3, [sl]
 810e268:	2b00      	cmp	r3, #0
 810e26a:	f000 80a1 	beq.w	810e3b0 <_vfiprintf_r+0x1f0>
 810e26e:	2300      	movs	r3, #0
 810e270:	f04f 32ff 	mov.w	r2, #4294967295
 810e274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810e278:	f10a 0a01 	add.w	sl, sl, #1
 810e27c:	9304      	str	r3, [sp, #16]
 810e27e:	9307      	str	r3, [sp, #28]
 810e280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810e284:	931a      	str	r3, [sp, #104]	; 0x68
 810e286:	4654      	mov	r4, sl
 810e288:	2205      	movs	r2, #5
 810e28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e28e:	4854      	ldr	r0, [pc, #336]	; (810e3e0 <_vfiprintf_r+0x220>)
 810e290:	f7f2 f826 	bl	81002e0 <memchr>
 810e294:	9a04      	ldr	r2, [sp, #16]
 810e296:	b9d8      	cbnz	r0, 810e2d0 <_vfiprintf_r+0x110>
 810e298:	06d1      	lsls	r1, r2, #27
 810e29a:	bf44      	itt	mi
 810e29c:	2320      	movmi	r3, #32
 810e29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e2a2:	0713      	lsls	r3, r2, #28
 810e2a4:	bf44      	itt	mi
 810e2a6:	232b      	movmi	r3, #43	; 0x2b
 810e2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e2ac:	f89a 3000 	ldrb.w	r3, [sl]
 810e2b0:	2b2a      	cmp	r3, #42	; 0x2a
 810e2b2:	d015      	beq.n	810e2e0 <_vfiprintf_r+0x120>
 810e2b4:	9a07      	ldr	r2, [sp, #28]
 810e2b6:	4654      	mov	r4, sl
 810e2b8:	2000      	movs	r0, #0
 810e2ba:	f04f 0c0a 	mov.w	ip, #10
 810e2be:	4621      	mov	r1, r4
 810e2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 810e2c4:	3b30      	subs	r3, #48	; 0x30
 810e2c6:	2b09      	cmp	r3, #9
 810e2c8:	d94d      	bls.n	810e366 <_vfiprintf_r+0x1a6>
 810e2ca:	b1b0      	cbz	r0, 810e2fa <_vfiprintf_r+0x13a>
 810e2cc:	9207      	str	r2, [sp, #28]
 810e2ce:	e014      	b.n	810e2fa <_vfiprintf_r+0x13a>
 810e2d0:	eba0 0308 	sub.w	r3, r0, r8
 810e2d4:	fa09 f303 	lsl.w	r3, r9, r3
 810e2d8:	4313      	orrs	r3, r2
 810e2da:	9304      	str	r3, [sp, #16]
 810e2dc:	46a2      	mov	sl, r4
 810e2de:	e7d2      	b.n	810e286 <_vfiprintf_r+0xc6>
 810e2e0:	9b03      	ldr	r3, [sp, #12]
 810e2e2:	1d19      	adds	r1, r3, #4
 810e2e4:	681b      	ldr	r3, [r3, #0]
 810e2e6:	9103      	str	r1, [sp, #12]
 810e2e8:	2b00      	cmp	r3, #0
 810e2ea:	bfbb      	ittet	lt
 810e2ec:	425b      	neglt	r3, r3
 810e2ee:	f042 0202 	orrlt.w	r2, r2, #2
 810e2f2:	9307      	strge	r3, [sp, #28]
 810e2f4:	9307      	strlt	r3, [sp, #28]
 810e2f6:	bfb8      	it	lt
 810e2f8:	9204      	strlt	r2, [sp, #16]
 810e2fa:	7823      	ldrb	r3, [r4, #0]
 810e2fc:	2b2e      	cmp	r3, #46	; 0x2e
 810e2fe:	d10c      	bne.n	810e31a <_vfiprintf_r+0x15a>
 810e300:	7863      	ldrb	r3, [r4, #1]
 810e302:	2b2a      	cmp	r3, #42	; 0x2a
 810e304:	d134      	bne.n	810e370 <_vfiprintf_r+0x1b0>
 810e306:	9b03      	ldr	r3, [sp, #12]
 810e308:	1d1a      	adds	r2, r3, #4
 810e30a:	681b      	ldr	r3, [r3, #0]
 810e30c:	9203      	str	r2, [sp, #12]
 810e30e:	2b00      	cmp	r3, #0
 810e310:	bfb8      	it	lt
 810e312:	f04f 33ff 	movlt.w	r3, #4294967295
 810e316:	3402      	adds	r4, #2
 810e318:	9305      	str	r3, [sp, #20]
 810e31a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810e3f0 <_vfiprintf_r+0x230>
 810e31e:	7821      	ldrb	r1, [r4, #0]
 810e320:	2203      	movs	r2, #3
 810e322:	4650      	mov	r0, sl
 810e324:	f7f1 ffdc 	bl	81002e0 <memchr>
 810e328:	b138      	cbz	r0, 810e33a <_vfiprintf_r+0x17a>
 810e32a:	9b04      	ldr	r3, [sp, #16]
 810e32c:	eba0 000a 	sub.w	r0, r0, sl
 810e330:	2240      	movs	r2, #64	; 0x40
 810e332:	4082      	lsls	r2, r0
 810e334:	4313      	orrs	r3, r2
 810e336:	3401      	adds	r4, #1
 810e338:	9304      	str	r3, [sp, #16]
 810e33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e33e:	4829      	ldr	r0, [pc, #164]	; (810e3e4 <_vfiprintf_r+0x224>)
 810e340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810e344:	2206      	movs	r2, #6
 810e346:	f7f1 ffcb 	bl	81002e0 <memchr>
 810e34a:	2800      	cmp	r0, #0
 810e34c:	d03f      	beq.n	810e3ce <_vfiprintf_r+0x20e>
 810e34e:	4b26      	ldr	r3, [pc, #152]	; (810e3e8 <_vfiprintf_r+0x228>)
 810e350:	bb1b      	cbnz	r3, 810e39a <_vfiprintf_r+0x1da>
 810e352:	9b03      	ldr	r3, [sp, #12]
 810e354:	3307      	adds	r3, #7
 810e356:	f023 0307 	bic.w	r3, r3, #7
 810e35a:	3308      	adds	r3, #8
 810e35c:	9303      	str	r3, [sp, #12]
 810e35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e360:	443b      	add	r3, r7
 810e362:	9309      	str	r3, [sp, #36]	; 0x24
 810e364:	e768      	b.n	810e238 <_vfiprintf_r+0x78>
 810e366:	fb0c 3202 	mla	r2, ip, r2, r3
 810e36a:	460c      	mov	r4, r1
 810e36c:	2001      	movs	r0, #1
 810e36e:	e7a6      	b.n	810e2be <_vfiprintf_r+0xfe>
 810e370:	2300      	movs	r3, #0
 810e372:	3401      	adds	r4, #1
 810e374:	9305      	str	r3, [sp, #20]
 810e376:	4619      	mov	r1, r3
 810e378:	f04f 0c0a 	mov.w	ip, #10
 810e37c:	4620      	mov	r0, r4
 810e37e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e382:	3a30      	subs	r2, #48	; 0x30
 810e384:	2a09      	cmp	r2, #9
 810e386:	d903      	bls.n	810e390 <_vfiprintf_r+0x1d0>
 810e388:	2b00      	cmp	r3, #0
 810e38a:	d0c6      	beq.n	810e31a <_vfiprintf_r+0x15a>
 810e38c:	9105      	str	r1, [sp, #20]
 810e38e:	e7c4      	b.n	810e31a <_vfiprintf_r+0x15a>
 810e390:	fb0c 2101 	mla	r1, ip, r1, r2
 810e394:	4604      	mov	r4, r0
 810e396:	2301      	movs	r3, #1
 810e398:	e7f0      	b.n	810e37c <_vfiprintf_r+0x1bc>
 810e39a:	ab03      	add	r3, sp, #12
 810e39c:	9300      	str	r3, [sp, #0]
 810e39e:	462a      	mov	r2, r5
 810e3a0:	4b12      	ldr	r3, [pc, #72]	; (810e3ec <_vfiprintf_r+0x22c>)
 810e3a2:	a904      	add	r1, sp, #16
 810e3a4:	4630      	mov	r0, r6
 810e3a6:	f7fc fad5 	bl	810a954 <_printf_float>
 810e3aa:	4607      	mov	r7, r0
 810e3ac:	1c78      	adds	r0, r7, #1
 810e3ae:	d1d6      	bne.n	810e35e <_vfiprintf_r+0x19e>
 810e3b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810e3b2:	07d9      	lsls	r1, r3, #31
 810e3b4:	d405      	bmi.n	810e3c2 <_vfiprintf_r+0x202>
 810e3b6:	89ab      	ldrh	r3, [r5, #12]
 810e3b8:	059a      	lsls	r2, r3, #22
 810e3ba:	d402      	bmi.n	810e3c2 <_vfiprintf_r+0x202>
 810e3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810e3be:	f7fd fb55 	bl	810ba6c <__retarget_lock_release_recursive>
 810e3c2:	89ab      	ldrh	r3, [r5, #12]
 810e3c4:	065b      	lsls	r3, r3, #25
 810e3c6:	f53f af1d 	bmi.w	810e204 <_vfiprintf_r+0x44>
 810e3ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 810e3cc:	e71c      	b.n	810e208 <_vfiprintf_r+0x48>
 810e3ce:	ab03      	add	r3, sp, #12
 810e3d0:	9300      	str	r3, [sp, #0]
 810e3d2:	462a      	mov	r2, r5
 810e3d4:	4b05      	ldr	r3, [pc, #20]	; (810e3ec <_vfiprintf_r+0x22c>)
 810e3d6:	a904      	add	r1, sp, #16
 810e3d8:	4630      	mov	r0, r6
 810e3da:	f7fc fd5f 	bl	810ae9c <_printf_i>
 810e3de:	e7e4      	b.n	810e3aa <_vfiprintf_r+0x1ea>
 810e3e0:	081ec611 	.word	0x081ec611
 810e3e4:	081ec61b 	.word	0x081ec61b
 810e3e8:	0810a955 	.word	0x0810a955
 810e3ec:	0810e19b 	.word	0x0810e19b
 810e3f0:	081ec617 	.word	0x081ec617

0810e3f4 <__sflush_r>:
 810e3f4:	898a      	ldrh	r2, [r1, #12]
 810e3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e3fa:	4605      	mov	r5, r0
 810e3fc:	0710      	lsls	r0, r2, #28
 810e3fe:	460c      	mov	r4, r1
 810e400:	d458      	bmi.n	810e4b4 <__sflush_r+0xc0>
 810e402:	684b      	ldr	r3, [r1, #4]
 810e404:	2b00      	cmp	r3, #0
 810e406:	dc05      	bgt.n	810e414 <__sflush_r+0x20>
 810e408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810e40a:	2b00      	cmp	r3, #0
 810e40c:	dc02      	bgt.n	810e414 <__sflush_r+0x20>
 810e40e:	2000      	movs	r0, #0
 810e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810e416:	2e00      	cmp	r6, #0
 810e418:	d0f9      	beq.n	810e40e <__sflush_r+0x1a>
 810e41a:	2300      	movs	r3, #0
 810e41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810e420:	682f      	ldr	r7, [r5, #0]
 810e422:	6a21      	ldr	r1, [r4, #32]
 810e424:	602b      	str	r3, [r5, #0]
 810e426:	d032      	beq.n	810e48e <__sflush_r+0x9a>
 810e428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810e42a:	89a3      	ldrh	r3, [r4, #12]
 810e42c:	075a      	lsls	r2, r3, #29
 810e42e:	d505      	bpl.n	810e43c <__sflush_r+0x48>
 810e430:	6863      	ldr	r3, [r4, #4]
 810e432:	1ac0      	subs	r0, r0, r3
 810e434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810e436:	b10b      	cbz	r3, 810e43c <__sflush_r+0x48>
 810e438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810e43a:	1ac0      	subs	r0, r0, r3
 810e43c:	2300      	movs	r3, #0
 810e43e:	4602      	mov	r2, r0
 810e440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810e442:	6a21      	ldr	r1, [r4, #32]
 810e444:	4628      	mov	r0, r5
 810e446:	47b0      	blx	r6
 810e448:	1c43      	adds	r3, r0, #1
 810e44a:	89a3      	ldrh	r3, [r4, #12]
 810e44c:	d106      	bne.n	810e45c <__sflush_r+0x68>
 810e44e:	6829      	ldr	r1, [r5, #0]
 810e450:	291d      	cmp	r1, #29
 810e452:	d82b      	bhi.n	810e4ac <__sflush_r+0xb8>
 810e454:	4a29      	ldr	r2, [pc, #164]	; (810e4fc <__sflush_r+0x108>)
 810e456:	410a      	asrs	r2, r1
 810e458:	07d6      	lsls	r6, r2, #31
 810e45a:	d427      	bmi.n	810e4ac <__sflush_r+0xb8>
 810e45c:	2200      	movs	r2, #0
 810e45e:	6062      	str	r2, [r4, #4]
 810e460:	04d9      	lsls	r1, r3, #19
 810e462:	6922      	ldr	r2, [r4, #16]
 810e464:	6022      	str	r2, [r4, #0]
 810e466:	d504      	bpl.n	810e472 <__sflush_r+0x7e>
 810e468:	1c42      	adds	r2, r0, #1
 810e46a:	d101      	bne.n	810e470 <__sflush_r+0x7c>
 810e46c:	682b      	ldr	r3, [r5, #0]
 810e46e:	b903      	cbnz	r3, 810e472 <__sflush_r+0x7e>
 810e470:	6560      	str	r0, [r4, #84]	; 0x54
 810e472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810e474:	602f      	str	r7, [r5, #0]
 810e476:	2900      	cmp	r1, #0
 810e478:	d0c9      	beq.n	810e40e <__sflush_r+0x1a>
 810e47a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810e47e:	4299      	cmp	r1, r3
 810e480:	d002      	beq.n	810e488 <__sflush_r+0x94>
 810e482:	4628      	mov	r0, r5
 810e484:	f7fe f982 	bl	810c78c <_free_r>
 810e488:	2000      	movs	r0, #0
 810e48a:	6360      	str	r0, [r4, #52]	; 0x34
 810e48c:	e7c0      	b.n	810e410 <__sflush_r+0x1c>
 810e48e:	2301      	movs	r3, #1
 810e490:	4628      	mov	r0, r5
 810e492:	47b0      	blx	r6
 810e494:	1c41      	adds	r1, r0, #1
 810e496:	d1c8      	bne.n	810e42a <__sflush_r+0x36>
 810e498:	682b      	ldr	r3, [r5, #0]
 810e49a:	2b00      	cmp	r3, #0
 810e49c:	d0c5      	beq.n	810e42a <__sflush_r+0x36>
 810e49e:	2b1d      	cmp	r3, #29
 810e4a0:	d001      	beq.n	810e4a6 <__sflush_r+0xb2>
 810e4a2:	2b16      	cmp	r3, #22
 810e4a4:	d101      	bne.n	810e4aa <__sflush_r+0xb6>
 810e4a6:	602f      	str	r7, [r5, #0]
 810e4a8:	e7b1      	b.n	810e40e <__sflush_r+0x1a>
 810e4aa:	89a3      	ldrh	r3, [r4, #12]
 810e4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e4b0:	81a3      	strh	r3, [r4, #12]
 810e4b2:	e7ad      	b.n	810e410 <__sflush_r+0x1c>
 810e4b4:	690f      	ldr	r7, [r1, #16]
 810e4b6:	2f00      	cmp	r7, #0
 810e4b8:	d0a9      	beq.n	810e40e <__sflush_r+0x1a>
 810e4ba:	0793      	lsls	r3, r2, #30
 810e4bc:	680e      	ldr	r6, [r1, #0]
 810e4be:	bf08      	it	eq
 810e4c0:	694b      	ldreq	r3, [r1, #20]
 810e4c2:	600f      	str	r7, [r1, #0]
 810e4c4:	bf18      	it	ne
 810e4c6:	2300      	movne	r3, #0
 810e4c8:	eba6 0807 	sub.w	r8, r6, r7
 810e4cc:	608b      	str	r3, [r1, #8]
 810e4ce:	f1b8 0f00 	cmp.w	r8, #0
 810e4d2:	dd9c      	ble.n	810e40e <__sflush_r+0x1a>
 810e4d4:	6a21      	ldr	r1, [r4, #32]
 810e4d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810e4d8:	4643      	mov	r3, r8
 810e4da:	463a      	mov	r2, r7
 810e4dc:	4628      	mov	r0, r5
 810e4de:	47b0      	blx	r6
 810e4e0:	2800      	cmp	r0, #0
 810e4e2:	dc06      	bgt.n	810e4f2 <__sflush_r+0xfe>
 810e4e4:	89a3      	ldrh	r3, [r4, #12]
 810e4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e4ea:	81a3      	strh	r3, [r4, #12]
 810e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 810e4f0:	e78e      	b.n	810e410 <__sflush_r+0x1c>
 810e4f2:	4407      	add	r7, r0
 810e4f4:	eba8 0800 	sub.w	r8, r8, r0
 810e4f8:	e7e9      	b.n	810e4ce <__sflush_r+0xda>
 810e4fa:	bf00      	nop
 810e4fc:	dfbffffe 	.word	0xdfbffffe

0810e500 <_fflush_r>:
 810e500:	b538      	push	{r3, r4, r5, lr}
 810e502:	690b      	ldr	r3, [r1, #16]
 810e504:	4605      	mov	r5, r0
 810e506:	460c      	mov	r4, r1
 810e508:	b913      	cbnz	r3, 810e510 <_fflush_r+0x10>
 810e50a:	2500      	movs	r5, #0
 810e50c:	4628      	mov	r0, r5
 810e50e:	bd38      	pop	{r3, r4, r5, pc}
 810e510:	b118      	cbz	r0, 810e51a <_fflush_r+0x1a>
 810e512:	6a03      	ldr	r3, [r0, #32]
 810e514:	b90b      	cbnz	r3, 810e51a <_fflush_r+0x1a>
 810e516:	f7fd f87f 	bl	810b618 <__sinit>
 810e51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e51e:	2b00      	cmp	r3, #0
 810e520:	d0f3      	beq.n	810e50a <_fflush_r+0xa>
 810e522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810e524:	07d0      	lsls	r0, r2, #31
 810e526:	d404      	bmi.n	810e532 <_fflush_r+0x32>
 810e528:	0599      	lsls	r1, r3, #22
 810e52a:	d402      	bmi.n	810e532 <_fflush_r+0x32>
 810e52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810e52e:	f7fd fa9c 	bl	810ba6a <__retarget_lock_acquire_recursive>
 810e532:	4628      	mov	r0, r5
 810e534:	4621      	mov	r1, r4
 810e536:	f7ff ff5d 	bl	810e3f4 <__sflush_r>
 810e53a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810e53c:	07da      	lsls	r2, r3, #31
 810e53e:	4605      	mov	r5, r0
 810e540:	d4e4      	bmi.n	810e50c <_fflush_r+0xc>
 810e542:	89a3      	ldrh	r3, [r4, #12]
 810e544:	059b      	lsls	r3, r3, #22
 810e546:	d4e1      	bmi.n	810e50c <_fflush_r+0xc>
 810e548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810e54a:	f7fd fa8f 	bl	810ba6c <__retarget_lock_release_recursive>
 810e54e:	e7dd      	b.n	810e50c <_fflush_r+0xc>

0810e550 <__swhatbuf_r>:
 810e550:	b570      	push	{r4, r5, r6, lr}
 810e552:	460c      	mov	r4, r1
 810e554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e558:	2900      	cmp	r1, #0
 810e55a:	b096      	sub	sp, #88	; 0x58
 810e55c:	4615      	mov	r5, r2
 810e55e:	461e      	mov	r6, r3
 810e560:	da0d      	bge.n	810e57e <__swhatbuf_r+0x2e>
 810e562:	89a3      	ldrh	r3, [r4, #12]
 810e564:	f013 0f80 	tst.w	r3, #128	; 0x80
 810e568:	f04f 0100 	mov.w	r1, #0
 810e56c:	bf0c      	ite	eq
 810e56e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810e572:	2340      	movne	r3, #64	; 0x40
 810e574:	2000      	movs	r0, #0
 810e576:	6031      	str	r1, [r6, #0]
 810e578:	602b      	str	r3, [r5, #0]
 810e57a:	b016      	add	sp, #88	; 0x58
 810e57c:	bd70      	pop	{r4, r5, r6, pc}
 810e57e:	466a      	mov	r2, sp
 810e580:	f000 f874 	bl	810e66c <_fstat_r>
 810e584:	2800      	cmp	r0, #0
 810e586:	dbec      	blt.n	810e562 <__swhatbuf_r+0x12>
 810e588:	9901      	ldr	r1, [sp, #4]
 810e58a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810e58e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810e592:	4259      	negs	r1, r3
 810e594:	4159      	adcs	r1, r3
 810e596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e59a:	e7eb      	b.n	810e574 <__swhatbuf_r+0x24>

0810e59c <__smakebuf_r>:
 810e59c:	898b      	ldrh	r3, [r1, #12]
 810e59e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e5a0:	079d      	lsls	r5, r3, #30
 810e5a2:	4606      	mov	r6, r0
 810e5a4:	460c      	mov	r4, r1
 810e5a6:	d507      	bpl.n	810e5b8 <__smakebuf_r+0x1c>
 810e5a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e5ac:	6023      	str	r3, [r4, #0]
 810e5ae:	6123      	str	r3, [r4, #16]
 810e5b0:	2301      	movs	r3, #1
 810e5b2:	6163      	str	r3, [r4, #20]
 810e5b4:	b002      	add	sp, #8
 810e5b6:	bd70      	pop	{r4, r5, r6, pc}
 810e5b8:	ab01      	add	r3, sp, #4
 810e5ba:	466a      	mov	r2, sp
 810e5bc:	f7ff ffc8 	bl	810e550 <__swhatbuf_r>
 810e5c0:	9900      	ldr	r1, [sp, #0]
 810e5c2:	4605      	mov	r5, r0
 810e5c4:	4630      	mov	r0, r6
 810e5c6:	f7fc f869 	bl	810a69c <_malloc_r>
 810e5ca:	b948      	cbnz	r0, 810e5e0 <__smakebuf_r+0x44>
 810e5cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e5d0:	059a      	lsls	r2, r3, #22
 810e5d2:	d4ef      	bmi.n	810e5b4 <__smakebuf_r+0x18>
 810e5d4:	f023 0303 	bic.w	r3, r3, #3
 810e5d8:	f043 0302 	orr.w	r3, r3, #2
 810e5dc:	81a3      	strh	r3, [r4, #12]
 810e5de:	e7e3      	b.n	810e5a8 <__smakebuf_r+0xc>
 810e5e0:	89a3      	ldrh	r3, [r4, #12]
 810e5e2:	6020      	str	r0, [r4, #0]
 810e5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e5e8:	81a3      	strh	r3, [r4, #12]
 810e5ea:	9b00      	ldr	r3, [sp, #0]
 810e5ec:	6163      	str	r3, [r4, #20]
 810e5ee:	9b01      	ldr	r3, [sp, #4]
 810e5f0:	6120      	str	r0, [r4, #16]
 810e5f2:	b15b      	cbz	r3, 810e60c <__smakebuf_r+0x70>
 810e5f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e5f8:	4630      	mov	r0, r6
 810e5fa:	f000 f849 	bl	810e690 <_isatty_r>
 810e5fe:	b128      	cbz	r0, 810e60c <__smakebuf_r+0x70>
 810e600:	89a3      	ldrh	r3, [r4, #12]
 810e602:	f023 0303 	bic.w	r3, r3, #3
 810e606:	f043 0301 	orr.w	r3, r3, #1
 810e60a:	81a3      	strh	r3, [r4, #12]
 810e60c:	89a3      	ldrh	r3, [r4, #12]
 810e60e:	431d      	orrs	r5, r3
 810e610:	81a5      	strh	r5, [r4, #12]
 810e612:	e7cf      	b.n	810e5b4 <__smakebuf_r+0x18>

0810e614 <memmove>:
 810e614:	4288      	cmp	r0, r1
 810e616:	b510      	push	{r4, lr}
 810e618:	eb01 0402 	add.w	r4, r1, r2
 810e61c:	d902      	bls.n	810e624 <memmove+0x10>
 810e61e:	4284      	cmp	r4, r0
 810e620:	4623      	mov	r3, r4
 810e622:	d807      	bhi.n	810e634 <memmove+0x20>
 810e624:	1e43      	subs	r3, r0, #1
 810e626:	42a1      	cmp	r1, r4
 810e628:	d008      	beq.n	810e63c <memmove+0x28>
 810e62a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810e62e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810e632:	e7f8      	b.n	810e626 <memmove+0x12>
 810e634:	4402      	add	r2, r0
 810e636:	4601      	mov	r1, r0
 810e638:	428a      	cmp	r2, r1
 810e63a:	d100      	bne.n	810e63e <memmove+0x2a>
 810e63c:	bd10      	pop	{r4, pc}
 810e63e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810e642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810e646:	e7f7      	b.n	810e638 <memmove+0x24>

0810e648 <strncmp>:
 810e648:	b510      	push	{r4, lr}
 810e64a:	b16a      	cbz	r2, 810e668 <strncmp+0x20>
 810e64c:	3901      	subs	r1, #1
 810e64e:	1884      	adds	r4, r0, r2
 810e650:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e654:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810e658:	429a      	cmp	r2, r3
 810e65a:	d103      	bne.n	810e664 <strncmp+0x1c>
 810e65c:	42a0      	cmp	r0, r4
 810e65e:	d001      	beq.n	810e664 <strncmp+0x1c>
 810e660:	2a00      	cmp	r2, #0
 810e662:	d1f5      	bne.n	810e650 <strncmp+0x8>
 810e664:	1ad0      	subs	r0, r2, r3
 810e666:	bd10      	pop	{r4, pc}
 810e668:	4610      	mov	r0, r2
 810e66a:	e7fc      	b.n	810e666 <strncmp+0x1e>

0810e66c <_fstat_r>:
 810e66c:	b538      	push	{r3, r4, r5, lr}
 810e66e:	4d07      	ldr	r5, [pc, #28]	; (810e68c <_fstat_r+0x20>)
 810e670:	2300      	movs	r3, #0
 810e672:	4604      	mov	r4, r0
 810e674:	4608      	mov	r0, r1
 810e676:	4611      	mov	r1, r2
 810e678:	602b      	str	r3, [r5, #0]
 810e67a:	f001 ff5b 	bl	8110534 <_fstat>
 810e67e:	1c43      	adds	r3, r0, #1
 810e680:	d102      	bne.n	810e688 <_fstat_r+0x1c>
 810e682:	682b      	ldr	r3, [r5, #0]
 810e684:	b103      	cbz	r3, 810e688 <_fstat_r+0x1c>
 810e686:	6023      	str	r3, [r4, #0]
 810e688:	bd38      	pop	{r3, r4, r5, pc}
 810e68a:	bf00      	nop
 810e68c:	1001ac74 	.word	0x1001ac74

0810e690 <_isatty_r>:
 810e690:	b538      	push	{r3, r4, r5, lr}
 810e692:	4d06      	ldr	r5, [pc, #24]	; (810e6ac <_isatty_r+0x1c>)
 810e694:	2300      	movs	r3, #0
 810e696:	4604      	mov	r4, r0
 810e698:	4608      	mov	r0, r1
 810e69a:	602b      	str	r3, [r5, #0]
 810e69c:	f001 ff5a 	bl	8110554 <_isatty>
 810e6a0:	1c43      	adds	r3, r0, #1
 810e6a2:	d102      	bne.n	810e6aa <_isatty_r+0x1a>
 810e6a4:	682b      	ldr	r3, [r5, #0]
 810e6a6:	b103      	cbz	r3, 810e6aa <_isatty_r+0x1a>
 810e6a8:	6023      	str	r3, [r4, #0]
 810e6aa:	bd38      	pop	{r3, r4, r5, pc}
 810e6ac:	1001ac74 	.word	0x1001ac74

0810e6b0 <nan>:
 810e6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810e6b8 <nan+0x8>
 810e6b4:	4770      	bx	lr
 810e6b6:	bf00      	nop
 810e6b8:	00000000 	.word	0x00000000
 810e6bc:	7ff80000 	.word	0x7ff80000

0810e6c0 <__assert_func>:
 810e6c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810e6c2:	4614      	mov	r4, r2
 810e6c4:	461a      	mov	r2, r3
 810e6c6:	4b09      	ldr	r3, [pc, #36]	; (810e6ec <__assert_func+0x2c>)
 810e6c8:	681b      	ldr	r3, [r3, #0]
 810e6ca:	4605      	mov	r5, r0
 810e6cc:	68d8      	ldr	r0, [r3, #12]
 810e6ce:	b14c      	cbz	r4, 810e6e4 <__assert_func+0x24>
 810e6d0:	4b07      	ldr	r3, [pc, #28]	; (810e6f0 <__assert_func+0x30>)
 810e6d2:	9100      	str	r1, [sp, #0]
 810e6d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810e6d8:	4906      	ldr	r1, [pc, #24]	; (810e6f4 <__assert_func+0x34>)
 810e6da:	462b      	mov	r3, r5
 810e6dc:	f000 fb9a 	bl	810ee14 <fiprintf>
 810e6e0:	f000 fbaa 	bl	810ee38 <abort>
 810e6e4:	4b04      	ldr	r3, [pc, #16]	; (810e6f8 <__assert_func+0x38>)
 810e6e6:	461c      	mov	r4, r3
 810e6e8:	e7f3      	b.n	810e6d2 <__assert_func+0x12>
 810e6ea:	bf00      	nop
 810e6ec:	100009ec 	.word	0x100009ec
 810e6f0:	081ec62a 	.word	0x081ec62a
 810e6f4:	081ec637 	.word	0x081ec637
 810e6f8:	081d8d89 	.word	0x081d8d89

0810e6fc <_calloc_r>:
 810e6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e6fe:	fba1 2402 	umull	r2, r4, r1, r2
 810e702:	b94c      	cbnz	r4, 810e718 <_calloc_r+0x1c>
 810e704:	4611      	mov	r1, r2
 810e706:	9201      	str	r2, [sp, #4]
 810e708:	f7fb ffc8 	bl	810a69c <_malloc_r>
 810e70c:	9a01      	ldr	r2, [sp, #4]
 810e70e:	4605      	mov	r5, r0
 810e710:	b930      	cbnz	r0, 810e720 <_calloc_r+0x24>
 810e712:	4628      	mov	r0, r5
 810e714:	b003      	add	sp, #12
 810e716:	bd30      	pop	{r4, r5, pc}
 810e718:	220c      	movs	r2, #12
 810e71a:	6002      	str	r2, [r0, #0]
 810e71c:	2500      	movs	r5, #0
 810e71e:	e7f8      	b.n	810e712 <_calloc_r+0x16>
 810e720:	4621      	mov	r1, r4
 810e722:	f7fd f915 	bl	810b950 <memset>
 810e726:	e7f4      	b.n	810e712 <_calloc_r+0x16>

0810e728 <rshift>:
 810e728:	6903      	ldr	r3, [r0, #16]
 810e72a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810e72e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e732:	ea4f 1261 	mov.w	r2, r1, asr #5
 810e736:	f100 0414 	add.w	r4, r0, #20
 810e73a:	dd45      	ble.n	810e7c8 <rshift+0xa0>
 810e73c:	f011 011f 	ands.w	r1, r1, #31
 810e740:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810e744:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810e748:	d10c      	bne.n	810e764 <rshift+0x3c>
 810e74a:	f100 0710 	add.w	r7, r0, #16
 810e74e:	4629      	mov	r1, r5
 810e750:	42b1      	cmp	r1, r6
 810e752:	d334      	bcc.n	810e7be <rshift+0x96>
 810e754:	1a9b      	subs	r3, r3, r2
 810e756:	009b      	lsls	r3, r3, #2
 810e758:	1eea      	subs	r2, r5, #3
 810e75a:	4296      	cmp	r6, r2
 810e75c:	bf38      	it	cc
 810e75e:	2300      	movcc	r3, #0
 810e760:	4423      	add	r3, r4
 810e762:	e015      	b.n	810e790 <rshift+0x68>
 810e764:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810e768:	f1c1 0820 	rsb	r8, r1, #32
 810e76c:	40cf      	lsrs	r7, r1
 810e76e:	f105 0e04 	add.w	lr, r5, #4
 810e772:	46a1      	mov	r9, r4
 810e774:	4576      	cmp	r6, lr
 810e776:	46f4      	mov	ip, lr
 810e778:	d815      	bhi.n	810e7a6 <rshift+0x7e>
 810e77a:	1a9a      	subs	r2, r3, r2
 810e77c:	0092      	lsls	r2, r2, #2
 810e77e:	3a04      	subs	r2, #4
 810e780:	3501      	adds	r5, #1
 810e782:	42ae      	cmp	r6, r5
 810e784:	bf38      	it	cc
 810e786:	2200      	movcc	r2, #0
 810e788:	18a3      	adds	r3, r4, r2
 810e78a:	50a7      	str	r7, [r4, r2]
 810e78c:	b107      	cbz	r7, 810e790 <rshift+0x68>
 810e78e:	3304      	adds	r3, #4
 810e790:	1b1a      	subs	r2, r3, r4
 810e792:	42a3      	cmp	r3, r4
 810e794:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810e798:	bf08      	it	eq
 810e79a:	2300      	moveq	r3, #0
 810e79c:	6102      	str	r2, [r0, #16]
 810e79e:	bf08      	it	eq
 810e7a0:	6143      	streq	r3, [r0, #20]
 810e7a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e7a6:	f8dc c000 	ldr.w	ip, [ip]
 810e7aa:	fa0c fc08 	lsl.w	ip, ip, r8
 810e7ae:	ea4c 0707 	orr.w	r7, ip, r7
 810e7b2:	f849 7b04 	str.w	r7, [r9], #4
 810e7b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 810e7ba:	40cf      	lsrs	r7, r1
 810e7bc:	e7da      	b.n	810e774 <rshift+0x4c>
 810e7be:	f851 cb04 	ldr.w	ip, [r1], #4
 810e7c2:	f847 cf04 	str.w	ip, [r7, #4]!
 810e7c6:	e7c3      	b.n	810e750 <rshift+0x28>
 810e7c8:	4623      	mov	r3, r4
 810e7ca:	e7e1      	b.n	810e790 <rshift+0x68>

0810e7cc <__hexdig_fun>:
 810e7cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810e7d0:	2b09      	cmp	r3, #9
 810e7d2:	d802      	bhi.n	810e7da <__hexdig_fun+0xe>
 810e7d4:	3820      	subs	r0, #32
 810e7d6:	b2c0      	uxtb	r0, r0
 810e7d8:	4770      	bx	lr
 810e7da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810e7de:	2b05      	cmp	r3, #5
 810e7e0:	d801      	bhi.n	810e7e6 <__hexdig_fun+0x1a>
 810e7e2:	3847      	subs	r0, #71	; 0x47
 810e7e4:	e7f7      	b.n	810e7d6 <__hexdig_fun+0xa>
 810e7e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810e7ea:	2b05      	cmp	r3, #5
 810e7ec:	d801      	bhi.n	810e7f2 <__hexdig_fun+0x26>
 810e7ee:	3827      	subs	r0, #39	; 0x27
 810e7f0:	e7f1      	b.n	810e7d6 <__hexdig_fun+0xa>
 810e7f2:	2000      	movs	r0, #0
 810e7f4:	4770      	bx	lr
	...

0810e7f8 <__gethex>:
 810e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e7fc:	4617      	mov	r7, r2
 810e7fe:	680a      	ldr	r2, [r1, #0]
 810e800:	b085      	sub	sp, #20
 810e802:	f102 0b02 	add.w	fp, r2, #2
 810e806:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810e80a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810e80e:	4681      	mov	r9, r0
 810e810:	468a      	mov	sl, r1
 810e812:	9302      	str	r3, [sp, #8]
 810e814:	32fe      	adds	r2, #254	; 0xfe
 810e816:	eb02 030b 	add.w	r3, r2, fp
 810e81a:	46d8      	mov	r8, fp
 810e81c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810e820:	9301      	str	r3, [sp, #4]
 810e822:	2830      	cmp	r0, #48	; 0x30
 810e824:	d0f7      	beq.n	810e816 <__gethex+0x1e>
 810e826:	f7ff ffd1 	bl	810e7cc <__hexdig_fun>
 810e82a:	4604      	mov	r4, r0
 810e82c:	2800      	cmp	r0, #0
 810e82e:	d138      	bne.n	810e8a2 <__gethex+0xaa>
 810e830:	49a7      	ldr	r1, [pc, #668]	; (810ead0 <__gethex+0x2d8>)
 810e832:	2201      	movs	r2, #1
 810e834:	4640      	mov	r0, r8
 810e836:	f7ff ff07 	bl	810e648 <strncmp>
 810e83a:	4606      	mov	r6, r0
 810e83c:	2800      	cmp	r0, #0
 810e83e:	d169      	bne.n	810e914 <__gethex+0x11c>
 810e840:	f898 0001 	ldrb.w	r0, [r8, #1]
 810e844:	465d      	mov	r5, fp
 810e846:	f7ff ffc1 	bl	810e7cc <__hexdig_fun>
 810e84a:	2800      	cmp	r0, #0
 810e84c:	d064      	beq.n	810e918 <__gethex+0x120>
 810e84e:	465a      	mov	r2, fp
 810e850:	7810      	ldrb	r0, [r2, #0]
 810e852:	2830      	cmp	r0, #48	; 0x30
 810e854:	4690      	mov	r8, r2
 810e856:	f102 0201 	add.w	r2, r2, #1
 810e85a:	d0f9      	beq.n	810e850 <__gethex+0x58>
 810e85c:	f7ff ffb6 	bl	810e7cc <__hexdig_fun>
 810e860:	2301      	movs	r3, #1
 810e862:	fab0 f480 	clz	r4, r0
 810e866:	0964      	lsrs	r4, r4, #5
 810e868:	465e      	mov	r6, fp
 810e86a:	9301      	str	r3, [sp, #4]
 810e86c:	4642      	mov	r2, r8
 810e86e:	4615      	mov	r5, r2
 810e870:	3201      	adds	r2, #1
 810e872:	7828      	ldrb	r0, [r5, #0]
 810e874:	f7ff ffaa 	bl	810e7cc <__hexdig_fun>
 810e878:	2800      	cmp	r0, #0
 810e87a:	d1f8      	bne.n	810e86e <__gethex+0x76>
 810e87c:	4994      	ldr	r1, [pc, #592]	; (810ead0 <__gethex+0x2d8>)
 810e87e:	2201      	movs	r2, #1
 810e880:	4628      	mov	r0, r5
 810e882:	f7ff fee1 	bl	810e648 <strncmp>
 810e886:	b978      	cbnz	r0, 810e8a8 <__gethex+0xb0>
 810e888:	b946      	cbnz	r6, 810e89c <__gethex+0xa4>
 810e88a:	1c6e      	adds	r6, r5, #1
 810e88c:	4632      	mov	r2, r6
 810e88e:	4615      	mov	r5, r2
 810e890:	3201      	adds	r2, #1
 810e892:	7828      	ldrb	r0, [r5, #0]
 810e894:	f7ff ff9a 	bl	810e7cc <__hexdig_fun>
 810e898:	2800      	cmp	r0, #0
 810e89a:	d1f8      	bne.n	810e88e <__gethex+0x96>
 810e89c:	1b73      	subs	r3, r6, r5
 810e89e:	009e      	lsls	r6, r3, #2
 810e8a0:	e004      	b.n	810e8ac <__gethex+0xb4>
 810e8a2:	2400      	movs	r4, #0
 810e8a4:	4626      	mov	r6, r4
 810e8a6:	e7e1      	b.n	810e86c <__gethex+0x74>
 810e8a8:	2e00      	cmp	r6, #0
 810e8aa:	d1f7      	bne.n	810e89c <__gethex+0xa4>
 810e8ac:	782b      	ldrb	r3, [r5, #0]
 810e8ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810e8b2:	2b50      	cmp	r3, #80	; 0x50
 810e8b4:	d13d      	bne.n	810e932 <__gethex+0x13a>
 810e8b6:	786b      	ldrb	r3, [r5, #1]
 810e8b8:	2b2b      	cmp	r3, #43	; 0x2b
 810e8ba:	d02f      	beq.n	810e91c <__gethex+0x124>
 810e8bc:	2b2d      	cmp	r3, #45	; 0x2d
 810e8be:	d031      	beq.n	810e924 <__gethex+0x12c>
 810e8c0:	1c69      	adds	r1, r5, #1
 810e8c2:	f04f 0b00 	mov.w	fp, #0
 810e8c6:	7808      	ldrb	r0, [r1, #0]
 810e8c8:	f7ff ff80 	bl	810e7cc <__hexdig_fun>
 810e8cc:	1e42      	subs	r2, r0, #1
 810e8ce:	b2d2      	uxtb	r2, r2
 810e8d0:	2a18      	cmp	r2, #24
 810e8d2:	d82e      	bhi.n	810e932 <__gethex+0x13a>
 810e8d4:	f1a0 0210 	sub.w	r2, r0, #16
 810e8d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810e8dc:	f7ff ff76 	bl	810e7cc <__hexdig_fun>
 810e8e0:	f100 3cff 	add.w	ip, r0, #4294967295
 810e8e4:	fa5f fc8c 	uxtb.w	ip, ip
 810e8e8:	f1bc 0f18 	cmp.w	ip, #24
 810e8ec:	d91d      	bls.n	810e92a <__gethex+0x132>
 810e8ee:	f1bb 0f00 	cmp.w	fp, #0
 810e8f2:	d000      	beq.n	810e8f6 <__gethex+0xfe>
 810e8f4:	4252      	negs	r2, r2
 810e8f6:	4416      	add	r6, r2
 810e8f8:	f8ca 1000 	str.w	r1, [sl]
 810e8fc:	b1dc      	cbz	r4, 810e936 <__gethex+0x13e>
 810e8fe:	9b01      	ldr	r3, [sp, #4]
 810e900:	2b00      	cmp	r3, #0
 810e902:	bf14      	ite	ne
 810e904:	f04f 0800 	movne.w	r8, #0
 810e908:	f04f 0806 	moveq.w	r8, #6
 810e90c:	4640      	mov	r0, r8
 810e90e:	b005      	add	sp, #20
 810e910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e914:	4645      	mov	r5, r8
 810e916:	4626      	mov	r6, r4
 810e918:	2401      	movs	r4, #1
 810e91a:	e7c7      	b.n	810e8ac <__gethex+0xb4>
 810e91c:	f04f 0b00 	mov.w	fp, #0
 810e920:	1ca9      	adds	r1, r5, #2
 810e922:	e7d0      	b.n	810e8c6 <__gethex+0xce>
 810e924:	f04f 0b01 	mov.w	fp, #1
 810e928:	e7fa      	b.n	810e920 <__gethex+0x128>
 810e92a:	230a      	movs	r3, #10
 810e92c:	fb03 0002 	mla	r0, r3, r2, r0
 810e930:	e7d0      	b.n	810e8d4 <__gethex+0xdc>
 810e932:	4629      	mov	r1, r5
 810e934:	e7e0      	b.n	810e8f8 <__gethex+0x100>
 810e936:	eba5 0308 	sub.w	r3, r5, r8
 810e93a:	3b01      	subs	r3, #1
 810e93c:	4621      	mov	r1, r4
 810e93e:	2b07      	cmp	r3, #7
 810e940:	dc0a      	bgt.n	810e958 <__gethex+0x160>
 810e942:	4648      	mov	r0, r9
 810e944:	f7fd ff6e 	bl	810c824 <_Balloc>
 810e948:	4604      	mov	r4, r0
 810e94a:	b940      	cbnz	r0, 810e95e <__gethex+0x166>
 810e94c:	4b61      	ldr	r3, [pc, #388]	; (810ead4 <__gethex+0x2dc>)
 810e94e:	4602      	mov	r2, r0
 810e950:	21e4      	movs	r1, #228	; 0xe4
 810e952:	4861      	ldr	r0, [pc, #388]	; (810ead8 <__gethex+0x2e0>)
 810e954:	f7ff feb4 	bl	810e6c0 <__assert_func>
 810e958:	3101      	adds	r1, #1
 810e95a:	105b      	asrs	r3, r3, #1
 810e95c:	e7ef      	b.n	810e93e <__gethex+0x146>
 810e95e:	f100 0a14 	add.w	sl, r0, #20
 810e962:	2300      	movs	r3, #0
 810e964:	495a      	ldr	r1, [pc, #360]	; (810ead0 <__gethex+0x2d8>)
 810e966:	f8cd a004 	str.w	sl, [sp, #4]
 810e96a:	469b      	mov	fp, r3
 810e96c:	45a8      	cmp	r8, r5
 810e96e:	d342      	bcc.n	810e9f6 <__gethex+0x1fe>
 810e970:	9801      	ldr	r0, [sp, #4]
 810e972:	f840 bb04 	str.w	fp, [r0], #4
 810e976:	eba0 000a 	sub.w	r0, r0, sl
 810e97a:	1080      	asrs	r0, r0, #2
 810e97c:	6120      	str	r0, [r4, #16]
 810e97e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810e982:	4658      	mov	r0, fp
 810e984:	f7fe f840 	bl	810ca08 <__hi0bits>
 810e988:	683d      	ldr	r5, [r7, #0]
 810e98a:	eba8 0000 	sub.w	r0, r8, r0
 810e98e:	42a8      	cmp	r0, r5
 810e990:	dd59      	ble.n	810ea46 <__gethex+0x24e>
 810e992:	eba0 0805 	sub.w	r8, r0, r5
 810e996:	4641      	mov	r1, r8
 810e998:	4620      	mov	r0, r4
 810e99a:	f7fe fbcf 	bl	810d13c <__any_on>
 810e99e:	4683      	mov	fp, r0
 810e9a0:	b1b8      	cbz	r0, 810e9d2 <__gethex+0x1da>
 810e9a2:	f108 33ff 	add.w	r3, r8, #4294967295
 810e9a6:	1159      	asrs	r1, r3, #5
 810e9a8:	f003 021f 	and.w	r2, r3, #31
 810e9ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810e9b0:	f04f 0b01 	mov.w	fp, #1
 810e9b4:	fa0b f202 	lsl.w	r2, fp, r2
 810e9b8:	420a      	tst	r2, r1
 810e9ba:	d00a      	beq.n	810e9d2 <__gethex+0x1da>
 810e9bc:	455b      	cmp	r3, fp
 810e9be:	dd06      	ble.n	810e9ce <__gethex+0x1d6>
 810e9c0:	f1a8 0102 	sub.w	r1, r8, #2
 810e9c4:	4620      	mov	r0, r4
 810e9c6:	f7fe fbb9 	bl	810d13c <__any_on>
 810e9ca:	2800      	cmp	r0, #0
 810e9cc:	d138      	bne.n	810ea40 <__gethex+0x248>
 810e9ce:	f04f 0b02 	mov.w	fp, #2
 810e9d2:	4641      	mov	r1, r8
 810e9d4:	4620      	mov	r0, r4
 810e9d6:	f7ff fea7 	bl	810e728 <rshift>
 810e9da:	4446      	add	r6, r8
 810e9dc:	68bb      	ldr	r3, [r7, #8]
 810e9de:	42b3      	cmp	r3, r6
 810e9e0:	da41      	bge.n	810ea66 <__gethex+0x26e>
 810e9e2:	4621      	mov	r1, r4
 810e9e4:	4648      	mov	r0, r9
 810e9e6:	f7fd ff5d 	bl	810c8a4 <_Bfree>
 810e9ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810e9ec:	2300      	movs	r3, #0
 810e9ee:	6013      	str	r3, [r2, #0]
 810e9f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810e9f4:	e78a      	b.n	810e90c <__gethex+0x114>
 810e9f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810e9fa:	2a2e      	cmp	r2, #46	; 0x2e
 810e9fc:	d014      	beq.n	810ea28 <__gethex+0x230>
 810e9fe:	2b20      	cmp	r3, #32
 810ea00:	d106      	bne.n	810ea10 <__gethex+0x218>
 810ea02:	9b01      	ldr	r3, [sp, #4]
 810ea04:	f843 bb04 	str.w	fp, [r3], #4
 810ea08:	f04f 0b00 	mov.w	fp, #0
 810ea0c:	9301      	str	r3, [sp, #4]
 810ea0e:	465b      	mov	r3, fp
 810ea10:	7828      	ldrb	r0, [r5, #0]
 810ea12:	9303      	str	r3, [sp, #12]
 810ea14:	f7ff feda 	bl	810e7cc <__hexdig_fun>
 810ea18:	9b03      	ldr	r3, [sp, #12]
 810ea1a:	f000 000f 	and.w	r0, r0, #15
 810ea1e:	4098      	lsls	r0, r3
 810ea20:	ea4b 0b00 	orr.w	fp, fp, r0
 810ea24:	3304      	adds	r3, #4
 810ea26:	e7a1      	b.n	810e96c <__gethex+0x174>
 810ea28:	45a8      	cmp	r8, r5
 810ea2a:	d8e8      	bhi.n	810e9fe <__gethex+0x206>
 810ea2c:	2201      	movs	r2, #1
 810ea2e:	4628      	mov	r0, r5
 810ea30:	9303      	str	r3, [sp, #12]
 810ea32:	f7ff fe09 	bl	810e648 <strncmp>
 810ea36:	4926      	ldr	r1, [pc, #152]	; (810ead0 <__gethex+0x2d8>)
 810ea38:	9b03      	ldr	r3, [sp, #12]
 810ea3a:	2800      	cmp	r0, #0
 810ea3c:	d1df      	bne.n	810e9fe <__gethex+0x206>
 810ea3e:	e795      	b.n	810e96c <__gethex+0x174>
 810ea40:	f04f 0b03 	mov.w	fp, #3
 810ea44:	e7c5      	b.n	810e9d2 <__gethex+0x1da>
 810ea46:	da0b      	bge.n	810ea60 <__gethex+0x268>
 810ea48:	eba5 0800 	sub.w	r8, r5, r0
 810ea4c:	4621      	mov	r1, r4
 810ea4e:	4642      	mov	r2, r8
 810ea50:	4648      	mov	r0, r9
 810ea52:	f7fe f941 	bl	810ccd8 <__lshift>
 810ea56:	eba6 0608 	sub.w	r6, r6, r8
 810ea5a:	4604      	mov	r4, r0
 810ea5c:	f100 0a14 	add.w	sl, r0, #20
 810ea60:	f04f 0b00 	mov.w	fp, #0
 810ea64:	e7ba      	b.n	810e9dc <__gethex+0x1e4>
 810ea66:	687b      	ldr	r3, [r7, #4]
 810ea68:	42b3      	cmp	r3, r6
 810ea6a:	dd73      	ble.n	810eb54 <__gethex+0x35c>
 810ea6c:	1b9e      	subs	r6, r3, r6
 810ea6e:	42b5      	cmp	r5, r6
 810ea70:	dc34      	bgt.n	810eadc <__gethex+0x2e4>
 810ea72:	68fb      	ldr	r3, [r7, #12]
 810ea74:	2b02      	cmp	r3, #2
 810ea76:	d023      	beq.n	810eac0 <__gethex+0x2c8>
 810ea78:	2b03      	cmp	r3, #3
 810ea7a:	d025      	beq.n	810eac8 <__gethex+0x2d0>
 810ea7c:	2b01      	cmp	r3, #1
 810ea7e:	d115      	bne.n	810eaac <__gethex+0x2b4>
 810ea80:	42b5      	cmp	r5, r6
 810ea82:	d113      	bne.n	810eaac <__gethex+0x2b4>
 810ea84:	2d01      	cmp	r5, #1
 810ea86:	d10b      	bne.n	810eaa0 <__gethex+0x2a8>
 810ea88:	9a02      	ldr	r2, [sp, #8]
 810ea8a:	687b      	ldr	r3, [r7, #4]
 810ea8c:	6013      	str	r3, [r2, #0]
 810ea8e:	2301      	movs	r3, #1
 810ea90:	6123      	str	r3, [r4, #16]
 810ea92:	f8ca 3000 	str.w	r3, [sl]
 810ea96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ea98:	f04f 0862 	mov.w	r8, #98	; 0x62
 810ea9c:	601c      	str	r4, [r3, #0]
 810ea9e:	e735      	b.n	810e90c <__gethex+0x114>
 810eaa0:	1e69      	subs	r1, r5, #1
 810eaa2:	4620      	mov	r0, r4
 810eaa4:	f7fe fb4a 	bl	810d13c <__any_on>
 810eaa8:	2800      	cmp	r0, #0
 810eaaa:	d1ed      	bne.n	810ea88 <__gethex+0x290>
 810eaac:	4621      	mov	r1, r4
 810eaae:	4648      	mov	r0, r9
 810eab0:	f7fd fef8 	bl	810c8a4 <_Bfree>
 810eab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810eab6:	2300      	movs	r3, #0
 810eab8:	6013      	str	r3, [r2, #0]
 810eaba:	f04f 0850 	mov.w	r8, #80	; 0x50
 810eabe:	e725      	b.n	810e90c <__gethex+0x114>
 810eac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810eac2:	2b00      	cmp	r3, #0
 810eac4:	d1f2      	bne.n	810eaac <__gethex+0x2b4>
 810eac6:	e7df      	b.n	810ea88 <__gethex+0x290>
 810eac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810eaca:	2b00      	cmp	r3, #0
 810eacc:	d1dc      	bne.n	810ea88 <__gethex+0x290>
 810eace:	e7ed      	b.n	810eaac <__gethex+0x2b4>
 810ead0:	081ec4bc 	.word	0x081ec4bc
 810ead4:	081ec355 	.word	0x081ec355
 810ead8:	081ec666 	.word	0x081ec666
 810eadc:	f106 38ff 	add.w	r8, r6, #4294967295
 810eae0:	f1bb 0f00 	cmp.w	fp, #0
 810eae4:	d133      	bne.n	810eb4e <__gethex+0x356>
 810eae6:	f1b8 0f00 	cmp.w	r8, #0
 810eaea:	d004      	beq.n	810eaf6 <__gethex+0x2fe>
 810eaec:	4641      	mov	r1, r8
 810eaee:	4620      	mov	r0, r4
 810eaf0:	f7fe fb24 	bl	810d13c <__any_on>
 810eaf4:	4683      	mov	fp, r0
 810eaf6:	ea4f 1268 	mov.w	r2, r8, asr #5
 810eafa:	2301      	movs	r3, #1
 810eafc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810eb00:	f008 081f 	and.w	r8, r8, #31
 810eb04:	fa03 f308 	lsl.w	r3, r3, r8
 810eb08:	4213      	tst	r3, r2
 810eb0a:	4631      	mov	r1, r6
 810eb0c:	4620      	mov	r0, r4
 810eb0e:	bf18      	it	ne
 810eb10:	f04b 0b02 	orrne.w	fp, fp, #2
 810eb14:	1bad      	subs	r5, r5, r6
 810eb16:	f7ff fe07 	bl	810e728 <rshift>
 810eb1a:	687e      	ldr	r6, [r7, #4]
 810eb1c:	f04f 0802 	mov.w	r8, #2
 810eb20:	f1bb 0f00 	cmp.w	fp, #0
 810eb24:	d04a      	beq.n	810ebbc <__gethex+0x3c4>
 810eb26:	68fb      	ldr	r3, [r7, #12]
 810eb28:	2b02      	cmp	r3, #2
 810eb2a:	d016      	beq.n	810eb5a <__gethex+0x362>
 810eb2c:	2b03      	cmp	r3, #3
 810eb2e:	d018      	beq.n	810eb62 <__gethex+0x36a>
 810eb30:	2b01      	cmp	r3, #1
 810eb32:	d109      	bne.n	810eb48 <__gethex+0x350>
 810eb34:	f01b 0f02 	tst.w	fp, #2
 810eb38:	d006      	beq.n	810eb48 <__gethex+0x350>
 810eb3a:	f8da 3000 	ldr.w	r3, [sl]
 810eb3e:	ea4b 0b03 	orr.w	fp, fp, r3
 810eb42:	f01b 0f01 	tst.w	fp, #1
 810eb46:	d10f      	bne.n	810eb68 <__gethex+0x370>
 810eb48:	f048 0810 	orr.w	r8, r8, #16
 810eb4c:	e036      	b.n	810ebbc <__gethex+0x3c4>
 810eb4e:	f04f 0b01 	mov.w	fp, #1
 810eb52:	e7d0      	b.n	810eaf6 <__gethex+0x2fe>
 810eb54:	f04f 0801 	mov.w	r8, #1
 810eb58:	e7e2      	b.n	810eb20 <__gethex+0x328>
 810eb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810eb5c:	f1c3 0301 	rsb	r3, r3, #1
 810eb60:	930f      	str	r3, [sp, #60]	; 0x3c
 810eb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810eb64:	2b00      	cmp	r3, #0
 810eb66:	d0ef      	beq.n	810eb48 <__gethex+0x350>
 810eb68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810eb6c:	f104 0214 	add.w	r2, r4, #20
 810eb70:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810eb74:	9301      	str	r3, [sp, #4]
 810eb76:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810eb7a:	2300      	movs	r3, #0
 810eb7c:	4694      	mov	ip, r2
 810eb7e:	f852 1b04 	ldr.w	r1, [r2], #4
 810eb82:	f1b1 3fff 	cmp.w	r1, #4294967295
 810eb86:	d01e      	beq.n	810ebc6 <__gethex+0x3ce>
 810eb88:	3101      	adds	r1, #1
 810eb8a:	f8cc 1000 	str.w	r1, [ip]
 810eb8e:	f1b8 0f02 	cmp.w	r8, #2
 810eb92:	f104 0214 	add.w	r2, r4, #20
 810eb96:	d13d      	bne.n	810ec14 <__gethex+0x41c>
 810eb98:	683b      	ldr	r3, [r7, #0]
 810eb9a:	3b01      	subs	r3, #1
 810eb9c:	42ab      	cmp	r3, r5
 810eb9e:	d10b      	bne.n	810ebb8 <__gethex+0x3c0>
 810eba0:	1169      	asrs	r1, r5, #5
 810eba2:	2301      	movs	r3, #1
 810eba4:	f005 051f 	and.w	r5, r5, #31
 810eba8:	fa03 f505 	lsl.w	r5, r3, r5
 810ebac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ebb0:	421d      	tst	r5, r3
 810ebb2:	bf18      	it	ne
 810ebb4:	f04f 0801 	movne.w	r8, #1
 810ebb8:	f048 0820 	orr.w	r8, r8, #32
 810ebbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ebbe:	601c      	str	r4, [r3, #0]
 810ebc0:	9b02      	ldr	r3, [sp, #8]
 810ebc2:	601e      	str	r6, [r3, #0]
 810ebc4:	e6a2      	b.n	810e90c <__gethex+0x114>
 810ebc6:	4290      	cmp	r0, r2
 810ebc8:	f842 3c04 	str.w	r3, [r2, #-4]
 810ebcc:	d8d6      	bhi.n	810eb7c <__gethex+0x384>
 810ebce:	68a2      	ldr	r2, [r4, #8]
 810ebd0:	4593      	cmp	fp, r2
 810ebd2:	db17      	blt.n	810ec04 <__gethex+0x40c>
 810ebd4:	6861      	ldr	r1, [r4, #4]
 810ebd6:	4648      	mov	r0, r9
 810ebd8:	3101      	adds	r1, #1
 810ebda:	f7fd fe23 	bl	810c824 <_Balloc>
 810ebde:	4682      	mov	sl, r0
 810ebe0:	b918      	cbnz	r0, 810ebea <__gethex+0x3f2>
 810ebe2:	4b1b      	ldr	r3, [pc, #108]	; (810ec50 <__gethex+0x458>)
 810ebe4:	4602      	mov	r2, r0
 810ebe6:	2184      	movs	r1, #132	; 0x84
 810ebe8:	e6b3      	b.n	810e952 <__gethex+0x15a>
 810ebea:	6922      	ldr	r2, [r4, #16]
 810ebec:	3202      	adds	r2, #2
 810ebee:	f104 010c 	add.w	r1, r4, #12
 810ebf2:	0092      	lsls	r2, r2, #2
 810ebf4:	300c      	adds	r0, #12
 810ebf6:	f7fc ff3a 	bl	810ba6e <memcpy>
 810ebfa:	4621      	mov	r1, r4
 810ebfc:	4648      	mov	r0, r9
 810ebfe:	f7fd fe51 	bl	810c8a4 <_Bfree>
 810ec02:	4654      	mov	r4, sl
 810ec04:	6922      	ldr	r2, [r4, #16]
 810ec06:	1c51      	adds	r1, r2, #1
 810ec08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810ec0c:	6121      	str	r1, [r4, #16]
 810ec0e:	2101      	movs	r1, #1
 810ec10:	6151      	str	r1, [r2, #20]
 810ec12:	e7bc      	b.n	810eb8e <__gethex+0x396>
 810ec14:	6921      	ldr	r1, [r4, #16]
 810ec16:	4559      	cmp	r1, fp
 810ec18:	dd0b      	ble.n	810ec32 <__gethex+0x43a>
 810ec1a:	2101      	movs	r1, #1
 810ec1c:	4620      	mov	r0, r4
 810ec1e:	f7ff fd83 	bl	810e728 <rshift>
 810ec22:	68bb      	ldr	r3, [r7, #8]
 810ec24:	3601      	adds	r6, #1
 810ec26:	42b3      	cmp	r3, r6
 810ec28:	f6ff aedb 	blt.w	810e9e2 <__gethex+0x1ea>
 810ec2c:	f04f 0801 	mov.w	r8, #1
 810ec30:	e7c2      	b.n	810ebb8 <__gethex+0x3c0>
 810ec32:	f015 051f 	ands.w	r5, r5, #31
 810ec36:	d0f9      	beq.n	810ec2c <__gethex+0x434>
 810ec38:	9b01      	ldr	r3, [sp, #4]
 810ec3a:	441a      	add	r2, r3
 810ec3c:	f1c5 0520 	rsb	r5, r5, #32
 810ec40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810ec44:	f7fd fee0 	bl	810ca08 <__hi0bits>
 810ec48:	42a8      	cmp	r0, r5
 810ec4a:	dbe6      	blt.n	810ec1a <__gethex+0x422>
 810ec4c:	e7ee      	b.n	810ec2c <__gethex+0x434>
 810ec4e:	bf00      	nop
 810ec50:	081ec355 	.word	0x081ec355

0810ec54 <L_shift>:
 810ec54:	f1c2 0208 	rsb	r2, r2, #8
 810ec58:	0092      	lsls	r2, r2, #2
 810ec5a:	b570      	push	{r4, r5, r6, lr}
 810ec5c:	f1c2 0620 	rsb	r6, r2, #32
 810ec60:	6843      	ldr	r3, [r0, #4]
 810ec62:	6804      	ldr	r4, [r0, #0]
 810ec64:	fa03 f506 	lsl.w	r5, r3, r6
 810ec68:	432c      	orrs	r4, r5
 810ec6a:	40d3      	lsrs	r3, r2
 810ec6c:	6004      	str	r4, [r0, #0]
 810ec6e:	f840 3f04 	str.w	r3, [r0, #4]!
 810ec72:	4288      	cmp	r0, r1
 810ec74:	d3f4      	bcc.n	810ec60 <L_shift+0xc>
 810ec76:	bd70      	pop	{r4, r5, r6, pc}

0810ec78 <__match>:
 810ec78:	b530      	push	{r4, r5, lr}
 810ec7a:	6803      	ldr	r3, [r0, #0]
 810ec7c:	3301      	adds	r3, #1
 810ec7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ec82:	b914      	cbnz	r4, 810ec8a <__match+0x12>
 810ec84:	6003      	str	r3, [r0, #0]
 810ec86:	2001      	movs	r0, #1
 810ec88:	bd30      	pop	{r4, r5, pc}
 810ec8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ec8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810ec92:	2d19      	cmp	r5, #25
 810ec94:	bf98      	it	ls
 810ec96:	3220      	addls	r2, #32
 810ec98:	42a2      	cmp	r2, r4
 810ec9a:	d0f0      	beq.n	810ec7e <__match+0x6>
 810ec9c:	2000      	movs	r0, #0
 810ec9e:	e7f3      	b.n	810ec88 <__match+0x10>

0810eca0 <__hexnan>:
 810eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810eca4:	680b      	ldr	r3, [r1, #0]
 810eca6:	6801      	ldr	r1, [r0, #0]
 810eca8:	115e      	asrs	r6, r3, #5
 810ecaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ecae:	f013 031f 	ands.w	r3, r3, #31
 810ecb2:	b087      	sub	sp, #28
 810ecb4:	bf18      	it	ne
 810ecb6:	3604      	addne	r6, #4
 810ecb8:	2500      	movs	r5, #0
 810ecba:	1f37      	subs	r7, r6, #4
 810ecbc:	4682      	mov	sl, r0
 810ecbe:	4690      	mov	r8, r2
 810ecc0:	9301      	str	r3, [sp, #4]
 810ecc2:	f846 5c04 	str.w	r5, [r6, #-4]
 810ecc6:	46b9      	mov	r9, r7
 810ecc8:	463c      	mov	r4, r7
 810ecca:	9502      	str	r5, [sp, #8]
 810eccc:	46ab      	mov	fp, r5
 810ecce:	784a      	ldrb	r2, [r1, #1]
 810ecd0:	1c4b      	adds	r3, r1, #1
 810ecd2:	9303      	str	r3, [sp, #12]
 810ecd4:	b342      	cbz	r2, 810ed28 <__hexnan+0x88>
 810ecd6:	4610      	mov	r0, r2
 810ecd8:	9105      	str	r1, [sp, #20]
 810ecda:	9204      	str	r2, [sp, #16]
 810ecdc:	f7ff fd76 	bl	810e7cc <__hexdig_fun>
 810ece0:	2800      	cmp	r0, #0
 810ece2:	d14f      	bne.n	810ed84 <__hexnan+0xe4>
 810ece4:	9a04      	ldr	r2, [sp, #16]
 810ece6:	9905      	ldr	r1, [sp, #20]
 810ece8:	2a20      	cmp	r2, #32
 810ecea:	d818      	bhi.n	810ed1e <__hexnan+0x7e>
 810ecec:	9b02      	ldr	r3, [sp, #8]
 810ecee:	459b      	cmp	fp, r3
 810ecf0:	dd13      	ble.n	810ed1a <__hexnan+0x7a>
 810ecf2:	454c      	cmp	r4, r9
 810ecf4:	d206      	bcs.n	810ed04 <__hexnan+0x64>
 810ecf6:	2d07      	cmp	r5, #7
 810ecf8:	dc04      	bgt.n	810ed04 <__hexnan+0x64>
 810ecfa:	462a      	mov	r2, r5
 810ecfc:	4649      	mov	r1, r9
 810ecfe:	4620      	mov	r0, r4
 810ed00:	f7ff ffa8 	bl	810ec54 <L_shift>
 810ed04:	4544      	cmp	r4, r8
 810ed06:	d950      	bls.n	810edaa <__hexnan+0x10a>
 810ed08:	2300      	movs	r3, #0
 810ed0a:	f1a4 0904 	sub.w	r9, r4, #4
 810ed0e:	f844 3c04 	str.w	r3, [r4, #-4]
 810ed12:	f8cd b008 	str.w	fp, [sp, #8]
 810ed16:	464c      	mov	r4, r9
 810ed18:	461d      	mov	r5, r3
 810ed1a:	9903      	ldr	r1, [sp, #12]
 810ed1c:	e7d7      	b.n	810ecce <__hexnan+0x2e>
 810ed1e:	2a29      	cmp	r2, #41	; 0x29
 810ed20:	d155      	bne.n	810edce <__hexnan+0x12e>
 810ed22:	3102      	adds	r1, #2
 810ed24:	f8ca 1000 	str.w	r1, [sl]
 810ed28:	f1bb 0f00 	cmp.w	fp, #0
 810ed2c:	d04f      	beq.n	810edce <__hexnan+0x12e>
 810ed2e:	454c      	cmp	r4, r9
 810ed30:	d206      	bcs.n	810ed40 <__hexnan+0xa0>
 810ed32:	2d07      	cmp	r5, #7
 810ed34:	dc04      	bgt.n	810ed40 <__hexnan+0xa0>
 810ed36:	462a      	mov	r2, r5
 810ed38:	4649      	mov	r1, r9
 810ed3a:	4620      	mov	r0, r4
 810ed3c:	f7ff ff8a 	bl	810ec54 <L_shift>
 810ed40:	4544      	cmp	r4, r8
 810ed42:	d934      	bls.n	810edae <__hexnan+0x10e>
 810ed44:	f1a8 0204 	sub.w	r2, r8, #4
 810ed48:	4623      	mov	r3, r4
 810ed4a:	f853 1b04 	ldr.w	r1, [r3], #4
 810ed4e:	f842 1f04 	str.w	r1, [r2, #4]!
 810ed52:	429f      	cmp	r7, r3
 810ed54:	d2f9      	bcs.n	810ed4a <__hexnan+0xaa>
 810ed56:	1b3b      	subs	r3, r7, r4
 810ed58:	f023 0303 	bic.w	r3, r3, #3
 810ed5c:	3304      	adds	r3, #4
 810ed5e:	3e03      	subs	r6, #3
 810ed60:	3401      	adds	r4, #1
 810ed62:	42a6      	cmp	r6, r4
 810ed64:	bf38      	it	cc
 810ed66:	2304      	movcc	r3, #4
 810ed68:	4443      	add	r3, r8
 810ed6a:	2200      	movs	r2, #0
 810ed6c:	f843 2b04 	str.w	r2, [r3], #4
 810ed70:	429f      	cmp	r7, r3
 810ed72:	d2fb      	bcs.n	810ed6c <__hexnan+0xcc>
 810ed74:	683b      	ldr	r3, [r7, #0]
 810ed76:	b91b      	cbnz	r3, 810ed80 <__hexnan+0xe0>
 810ed78:	4547      	cmp	r7, r8
 810ed7a:	d126      	bne.n	810edca <__hexnan+0x12a>
 810ed7c:	2301      	movs	r3, #1
 810ed7e:	603b      	str	r3, [r7, #0]
 810ed80:	2005      	movs	r0, #5
 810ed82:	e025      	b.n	810edd0 <__hexnan+0x130>
 810ed84:	3501      	adds	r5, #1
 810ed86:	2d08      	cmp	r5, #8
 810ed88:	f10b 0b01 	add.w	fp, fp, #1
 810ed8c:	dd06      	ble.n	810ed9c <__hexnan+0xfc>
 810ed8e:	4544      	cmp	r4, r8
 810ed90:	d9c3      	bls.n	810ed1a <__hexnan+0x7a>
 810ed92:	2300      	movs	r3, #0
 810ed94:	f844 3c04 	str.w	r3, [r4, #-4]
 810ed98:	2501      	movs	r5, #1
 810ed9a:	3c04      	subs	r4, #4
 810ed9c:	6822      	ldr	r2, [r4, #0]
 810ed9e:	f000 000f 	and.w	r0, r0, #15
 810eda2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810eda6:	6020      	str	r0, [r4, #0]
 810eda8:	e7b7      	b.n	810ed1a <__hexnan+0x7a>
 810edaa:	2508      	movs	r5, #8
 810edac:	e7b5      	b.n	810ed1a <__hexnan+0x7a>
 810edae:	9b01      	ldr	r3, [sp, #4]
 810edb0:	2b00      	cmp	r3, #0
 810edb2:	d0df      	beq.n	810ed74 <__hexnan+0xd4>
 810edb4:	f1c3 0320 	rsb	r3, r3, #32
 810edb8:	f04f 32ff 	mov.w	r2, #4294967295
 810edbc:	40da      	lsrs	r2, r3
 810edbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810edc2:	4013      	ands	r3, r2
 810edc4:	f846 3c04 	str.w	r3, [r6, #-4]
 810edc8:	e7d4      	b.n	810ed74 <__hexnan+0xd4>
 810edca:	3f04      	subs	r7, #4
 810edcc:	e7d2      	b.n	810ed74 <__hexnan+0xd4>
 810edce:	2004      	movs	r0, #4
 810edd0:	b007      	add	sp, #28
 810edd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810edd6 <__ascii_mbtowc>:
 810edd6:	b082      	sub	sp, #8
 810edd8:	b901      	cbnz	r1, 810eddc <__ascii_mbtowc+0x6>
 810edda:	a901      	add	r1, sp, #4
 810eddc:	b142      	cbz	r2, 810edf0 <__ascii_mbtowc+0x1a>
 810edde:	b14b      	cbz	r3, 810edf4 <__ascii_mbtowc+0x1e>
 810ede0:	7813      	ldrb	r3, [r2, #0]
 810ede2:	600b      	str	r3, [r1, #0]
 810ede4:	7812      	ldrb	r2, [r2, #0]
 810ede6:	1e10      	subs	r0, r2, #0
 810ede8:	bf18      	it	ne
 810edea:	2001      	movne	r0, #1
 810edec:	b002      	add	sp, #8
 810edee:	4770      	bx	lr
 810edf0:	4610      	mov	r0, r2
 810edf2:	e7fb      	b.n	810edec <__ascii_mbtowc+0x16>
 810edf4:	f06f 0001 	mvn.w	r0, #1
 810edf8:	e7f8      	b.n	810edec <__ascii_mbtowc+0x16>

0810edfa <__ascii_wctomb>:
 810edfa:	b149      	cbz	r1, 810ee10 <__ascii_wctomb+0x16>
 810edfc:	2aff      	cmp	r2, #255	; 0xff
 810edfe:	bf85      	ittet	hi
 810ee00:	238a      	movhi	r3, #138	; 0x8a
 810ee02:	6003      	strhi	r3, [r0, #0]
 810ee04:	700a      	strbls	r2, [r1, #0]
 810ee06:	f04f 30ff 	movhi.w	r0, #4294967295
 810ee0a:	bf98      	it	ls
 810ee0c:	2001      	movls	r0, #1
 810ee0e:	4770      	bx	lr
 810ee10:	4608      	mov	r0, r1
 810ee12:	4770      	bx	lr

0810ee14 <fiprintf>:
 810ee14:	b40e      	push	{r1, r2, r3}
 810ee16:	b503      	push	{r0, r1, lr}
 810ee18:	4601      	mov	r1, r0
 810ee1a:	ab03      	add	r3, sp, #12
 810ee1c:	4805      	ldr	r0, [pc, #20]	; (810ee34 <fiprintf+0x20>)
 810ee1e:	f853 2b04 	ldr.w	r2, [r3], #4
 810ee22:	6800      	ldr	r0, [r0, #0]
 810ee24:	9301      	str	r3, [sp, #4]
 810ee26:	f7ff f9cb 	bl	810e1c0 <_vfiprintf_r>
 810ee2a:	b002      	add	sp, #8
 810ee2c:	f85d eb04 	ldr.w	lr, [sp], #4
 810ee30:	b003      	add	sp, #12
 810ee32:	4770      	bx	lr
 810ee34:	100009ec 	.word	0x100009ec

0810ee38 <abort>:
 810ee38:	b508      	push	{r3, lr}
 810ee3a:	2006      	movs	r0, #6
 810ee3c:	f000 f82c 	bl	810ee98 <raise>
 810ee40:	2001      	movs	r0, #1
 810ee42:	f001 fbaf 	bl	81105a4 <_exit>

0810ee46 <_raise_r>:
 810ee46:	291f      	cmp	r1, #31
 810ee48:	b538      	push	{r3, r4, r5, lr}
 810ee4a:	4604      	mov	r4, r0
 810ee4c:	460d      	mov	r5, r1
 810ee4e:	d904      	bls.n	810ee5a <_raise_r+0x14>
 810ee50:	2316      	movs	r3, #22
 810ee52:	6003      	str	r3, [r0, #0]
 810ee54:	f04f 30ff 	mov.w	r0, #4294967295
 810ee58:	bd38      	pop	{r3, r4, r5, pc}
 810ee5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810ee5c:	b112      	cbz	r2, 810ee64 <_raise_r+0x1e>
 810ee5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ee62:	b94b      	cbnz	r3, 810ee78 <_raise_r+0x32>
 810ee64:	4620      	mov	r0, r4
 810ee66:	f000 f831 	bl	810eecc <_getpid_r>
 810ee6a:	462a      	mov	r2, r5
 810ee6c:	4601      	mov	r1, r0
 810ee6e:	4620      	mov	r0, r4
 810ee70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ee74:	f000 b818 	b.w	810eea8 <_kill_r>
 810ee78:	2b01      	cmp	r3, #1
 810ee7a:	d00a      	beq.n	810ee92 <_raise_r+0x4c>
 810ee7c:	1c59      	adds	r1, r3, #1
 810ee7e:	d103      	bne.n	810ee88 <_raise_r+0x42>
 810ee80:	2316      	movs	r3, #22
 810ee82:	6003      	str	r3, [r0, #0]
 810ee84:	2001      	movs	r0, #1
 810ee86:	e7e7      	b.n	810ee58 <_raise_r+0x12>
 810ee88:	2400      	movs	r4, #0
 810ee8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ee8e:	4628      	mov	r0, r5
 810ee90:	4798      	blx	r3
 810ee92:	2000      	movs	r0, #0
 810ee94:	e7e0      	b.n	810ee58 <_raise_r+0x12>
	...

0810ee98 <raise>:
 810ee98:	4b02      	ldr	r3, [pc, #8]	; (810eea4 <raise+0xc>)
 810ee9a:	4601      	mov	r1, r0
 810ee9c:	6818      	ldr	r0, [r3, #0]
 810ee9e:	f7ff bfd2 	b.w	810ee46 <_raise_r>
 810eea2:	bf00      	nop
 810eea4:	100009ec 	.word	0x100009ec

0810eea8 <_kill_r>:
 810eea8:	b538      	push	{r3, r4, r5, lr}
 810eeaa:	4d07      	ldr	r5, [pc, #28]	; (810eec8 <_kill_r+0x20>)
 810eeac:	2300      	movs	r3, #0
 810eeae:	4604      	mov	r4, r0
 810eeb0:	4608      	mov	r0, r1
 810eeb2:	4611      	mov	r1, r2
 810eeb4:	602b      	str	r3, [r5, #0]
 810eeb6:	f001 fb55 	bl	8110564 <_kill>
 810eeba:	1c43      	adds	r3, r0, #1
 810eebc:	d102      	bne.n	810eec4 <_kill_r+0x1c>
 810eebe:	682b      	ldr	r3, [r5, #0]
 810eec0:	b103      	cbz	r3, 810eec4 <_kill_r+0x1c>
 810eec2:	6023      	str	r3, [r4, #0]
 810eec4:	bd38      	pop	{r3, r4, r5, pc}
 810eec6:	bf00      	nop
 810eec8:	1001ac74 	.word	0x1001ac74

0810eecc <_getpid_r>:
 810eecc:	f001 bb3a 	b.w	8110544 <_getpid>

0810eed0 <expf>:
 810eed0:	b508      	push	{r3, lr}
 810eed2:	ed2d 8b02 	vpush	{d8}
 810eed6:	eef0 8a40 	vmov.f32	s17, s0
 810eeda:	f000 fa3d 	bl	810f358 <__ieee754_expf>
 810eede:	eeb0 8a40 	vmov.f32	s16, s0
 810eee2:	eeb0 0a68 	vmov.f32	s0, s17
 810eee6:	f000 f91b 	bl	810f120 <finitef>
 810eeea:	b160      	cbz	r0, 810ef06 <expf+0x36>
 810eeec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 810ef2c <expf+0x5c>
 810eef0:	eef4 8ae7 	vcmpe.f32	s17, s15
 810eef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eef8:	dd0a      	ble.n	810ef10 <expf+0x40>
 810eefa:	f7fc fd8b 	bl	810ba14 <__errno>
 810eefe:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 810ef30 <expf+0x60>
 810ef02:	2322      	movs	r3, #34	; 0x22
 810ef04:	6003      	str	r3, [r0, #0]
 810ef06:	eeb0 0a48 	vmov.f32	s0, s16
 810ef0a:	ecbd 8b02 	vpop	{d8}
 810ef0e:	bd08      	pop	{r3, pc}
 810ef10:	eddf 7a08 	vldr	s15, [pc, #32]	; 810ef34 <expf+0x64>
 810ef14:	eef4 8ae7 	vcmpe.f32	s17, s15
 810ef18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef1c:	d5f3      	bpl.n	810ef06 <expf+0x36>
 810ef1e:	f7fc fd79 	bl	810ba14 <__errno>
 810ef22:	2322      	movs	r3, #34	; 0x22
 810ef24:	ed9f 8a04 	vldr	s16, [pc, #16]	; 810ef38 <expf+0x68>
 810ef28:	6003      	str	r3, [r0, #0]
 810ef2a:	e7ec      	b.n	810ef06 <expf+0x36>
 810ef2c:	42b17217 	.word	0x42b17217
 810ef30:	7f800000 	.word	0x7f800000
 810ef34:	c2cff1b5 	.word	0xc2cff1b5
 810ef38:	00000000 	.word	0x00000000

0810ef3c <log10f>:
 810ef3c:	b508      	push	{r3, lr}
 810ef3e:	ed2d 8b02 	vpush	{d8}
 810ef42:	eeb0 8a40 	vmov.f32	s16, s0
 810ef46:	f000 fbc7 	bl	810f6d8 <__ieee754_log10f>
 810ef4a:	eeb4 8a48 	vcmp.f32	s16, s16
 810ef4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef52:	d60f      	bvs.n	810ef74 <log10f+0x38>
 810ef54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810ef58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef5c:	d80a      	bhi.n	810ef74 <log10f+0x38>
 810ef5e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810ef62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef66:	d108      	bne.n	810ef7a <log10f+0x3e>
 810ef68:	f7fc fd54 	bl	810ba14 <__errno>
 810ef6c:	2322      	movs	r3, #34	; 0x22
 810ef6e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 810ef90 <log10f+0x54>
 810ef72:	6003      	str	r3, [r0, #0]
 810ef74:	ecbd 8b02 	vpop	{d8}
 810ef78:	bd08      	pop	{r3, pc}
 810ef7a:	f7fc fd4b 	bl	810ba14 <__errno>
 810ef7e:	ecbd 8b02 	vpop	{d8}
 810ef82:	2321      	movs	r3, #33	; 0x21
 810ef84:	6003      	str	r3, [r0, #0]
 810ef86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810ef8a:	4802      	ldr	r0, [pc, #8]	; (810ef94 <log10f+0x58>)
 810ef8c:	f7fc bd7e 	b.w	810ba8c <nanf>
 810ef90:	ff800000 	.word	0xff800000
 810ef94:	081d8d89 	.word	0x081d8d89

0810ef98 <powf>:
 810ef98:	b508      	push	{r3, lr}
 810ef9a:	ed2d 8b04 	vpush	{d8-d9}
 810ef9e:	eeb0 8a60 	vmov.f32	s16, s1
 810efa2:	eeb0 9a40 	vmov.f32	s18, s0
 810efa6:	f000 fbef 	bl	810f788 <__ieee754_powf>
 810efaa:	eeb4 8a48 	vcmp.f32	s16, s16
 810efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efb2:	eef0 8a40 	vmov.f32	s17, s0
 810efb6:	d63e      	bvs.n	810f036 <powf+0x9e>
 810efb8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 810efbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efc0:	d112      	bne.n	810efe8 <powf+0x50>
 810efc2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810efc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efca:	d039      	beq.n	810f040 <powf+0xa8>
 810efcc:	eeb0 0a48 	vmov.f32	s0, s16
 810efd0:	f000 f8a6 	bl	810f120 <finitef>
 810efd4:	b378      	cbz	r0, 810f036 <powf+0x9e>
 810efd6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810efda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efde:	d52a      	bpl.n	810f036 <powf+0x9e>
 810efe0:	f7fc fd18 	bl	810ba14 <__errno>
 810efe4:	2322      	movs	r3, #34	; 0x22
 810efe6:	e014      	b.n	810f012 <powf+0x7a>
 810efe8:	f000 f89a 	bl	810f120 <finitef>
 810efec:	b998      	cbnz	r0, 810f016 <powf+0x7e>
 810efee:	eeb0 0a49 	vmov.f32	s0, s18
 810eff2:	f000 f895 	bl	810f120 <finitef>
 810eff6:	b170      	cbz	r0, 810f016 <powf+0x7e>
 810eff8:	eeb0 0a48 	vmov.f32	s0, s16
 810effc:	f000 f890 	bl	810f120 <finitef>
 810f000:	b148      	cbz	r0, 810f016 <powf+0x7e>
 810f002:	eef4 8a68 	vcmp.f32	s17, s17
 810f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f00a:	d7e9      	bvc.n	810efe0 <powf+0x48>
 810f00c:	f7fc fd02 	bl	810ba14 <__errno>
 810f010:	2321      	movs	r3, #33	; 0x21
 810f012:	6003      	str	r3, [r0, #0]
 810f014:	e00f      	b.n	810f036 <powf+0x9e>
 810f016:	eef5 8a40 	vcmp.f32	s17, #0.0
 810f01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f01e:	d10a      	bne.n	810f036 <powf+0x9e>
 810f020:	eeb0 0a49 	vmov.f32	s0, s18
 810f024:	f000 f87c 	bl	810f120 <finitef>
 810f028:	b128      	cbz	r0, 810f036 <powf+0x9e>
 810f02a:	eeb0 0a48 	vmov.f32	s0, s16
 810f02e:	f000 f877 	bl	810f120 <finitef>
 810f032:	2800      	cmp	r0, #0
 810f034:	d1d4      	bne.n	810efe0 <powf+0x48>
 810f036:	eeb0 0a68 	vmov.f32	s0, s17
 810f03a:	ecbd 8b04 	vpop	{d8-d9}
 810f03e:	bd08      	pop	{r3, pc}
 810f040:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 810f044:	e7f7      	b.n	810f036 <powf+0x9e>
	...

0810f048 <sqrtf>:
 810f048:	b508      	push	{r3, lr}
 810f04a:	ed2d 8b02 	vpush	{d8}
 810f04e:	eeb0 8a40 	vmov.f32	s16, s0
 810f052:	f000 f895 	bl	810f180 <__ieee754_sqrtf>
 810f056:	eeb4 8a48 	vcmp.f32	s16, s16
 810f05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f05e:	d60c      	bvs.n	810f07a <sqrtf+0x32>
 810f060:	eddf 8a07 	vldr	s17, [pc, #28]	; 810f080 <sqrtf+0x38>
 810f064:	eeb4 8ae8 	vcmpe.f32	s16, s17
 810f068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f06c:	d505      	bpl.n	810f07a <sqrtf+0x32>
 810f06e:	f7fc fcd1 	bl	810ba14 <__errno>
 810f072:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 810f076:	2321      	movs	r3, #33	; 0x21
 810f078:	6003      	str	r3, [r0, #0]
 810f07a:	ecbd 8b02 	vpop	{d8}
 810f07e:	bd08      	pop	{r3, pc}
 810f080:	00000000 	.word	0x00000000

0810f084 <fabsf>:
 810f084:	ee10 3a10 	vmov	r3, s0
 810f088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f08c:	ee00 3a10 	vmov	s0, r3
 810f090:	4770      	bx	lr
	...

0810f094 <sinf>:
 810f094:	ee10 3a10 	vmov	r3, s0
 810f098:	b507      	push	{r0, r1, r2, lr}
 810f09a:	4a1f      	ldr	r2, [pc, #124]	; (810f118 <sinf+0x84>)
 810f09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f0a0:	4293      	cmp	r3, r2
 810f0a2:	dc07      	bgt.n	810f0b4 <sinf+0x20>
 810f0a4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 810f11c <sinf+0x88>
 810f0a8:	2000      	movs	r0, #0
 810f0aa:	b003      	add	sp, #12
 810f0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 810f0b0:	f000 b90a 	b.w	810f2c8 <__kernel_sinf>
 810f0b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810f0b8:	db04      	blt.n	810f0c4 <sinf+0x30>
 810f0ba:	ee30 0a40 	vsub.f32	s0, s0, s0
 810f0be:	b003      	add	sp, #12
 810f0c0:	f85d fb04 	ldr.w	pc, [sp], #4
 810f0c4:	4668      	mov	r0, sp
 810f0c6:	f000 fe29 	bl	810fd1c <__ieee754_rem_pio2f>
 810f0ca:	f000 0003 	and.w	r0, r0, #3
 810f0ce:	2801      	cmp	r0, #1
 810f0d0:	d00a      	beq.n	810f0e8 <sinf+0x54>
 810f0d2:	2802      	cmp	r0, #2
 810f0d4:	d00f      	beq.n	810f0f6 <sinf+0x62>
 810f0d6:	b9c0      	cbnz	r0, 810f10a <sinf+0x76>
 810f0d8:	eddd 0a01 	vldr	s1, [sp, #4]
 810f0dc:	ed9d 0a00 	vldr	s0, [sp]
 810f0e0:	2001      	movs	r0, #1
 810f0e2:	f000 f8f1 	bl	810f2c8 <__kernel_sinf>
 810f0e6:	e7ea      	b.n	810f0be <sinf+0x2a>
 810f0e8:	eddd 0a01 	vldr	s1, [sp, #4]
 810f0ec:	ed9d 0a00 	vldr	s0, [sp]
 810f0f0:	f000 f88c 	bl	810f20c <__kernel_cosf>
 810f0f4:	e7e3      	b.n	810f0be <sinf+0x2a>
 810f0f6:	eddd 0a01 	vldr	s1, [sp, #4]
 810f0fa:	ed9d 0a00 	vldr	s0, [sp]
 810f0fe:	2001      	movs	r0, #1
 810f100:	f000 f8e2 	bl	810f2c8 <__kernel_sinf>
 810f104:	eeb1 0a40 	vneg.f32	s0, s0
 810f108:	e7d9      	b.n	810f0be <sinf+0x2a>
 810f10a:	eddd 0a01 	vldr	s1, [sp, #4]
 810f10e:	ed9d 0a00 	vldr	s0, [sp]
 810f112:	f000 f87b 	bl	810f20c <__kernel_cosf>
 810f116:	e7f5      	b.n	810f104 <sinf+0x70>
 810f118:	3f490fd8 	.word	0x3f490fd8
 810f11c:	00000000 	.word	0x00000000

0810f120 <finitef>:
 810f120:	b082      	sub	sp, #8
 810f122:	ed8d 0a01 	vstr	s0, [sp, #4]
 810f126:	9801      	ldr	r0, [sp, #4]
 810f128:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 810f12c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 810f130:	bfac      	ite	ge
 810f132:	2000      	movge	r0, #0
 810f134:	2001      	movlt	r0, #1
 810f136:	b002      	add	sp, #8
 810f138:	4770      	bx	lr

0810f13a <with_errnof>:
 810f13a:	b513      	push	{r0, r1, r4, lr}
 810f13c:	4604      	mov	r4, r0
 810f13e:	ed8d 0a01 	vstr	s0, [sp, #4]
 810f142:	f7fc fc67 	bl	810ba14 <__errno>
 810f146:	ed9d 0a01 	vldr	s0, [sp, #4]
 810f14a:	6004      	str	r4, [r0, #0]
 810f14c:	b002      	add	sp, #8
 810f14e:	bd10      	pop	{r4, pc}

0810f150 <xflowf>:
 810f150:	b130      	cbz	r0, 810f160 <xflowf+0x10>
 810f152:	eef1 7a40 	vneg.f32	s15, s0
 810f156:	ee27 0a80 	vmul.f32	s0, s15, s0
 810f15a:	2022      	movs	r0, #34	; 0x22
 810f15c:	f7ff bfed 	b.w	810f13a <with_errnof>
 810f160:	eef0 7a40 	vmov.f32	s15, s0
 810f164:	e7f7      	b.n	810f156 <xflowf+0x6>
	...

0810f168 <__math_uflowf>:
 810f168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810f170 <__math_uflowf+0x8>
 810f16c:	f7ff bff0 	b.w	810f150 <xflowf>
 810f170:	10000000 	.word	0x10000000

0810f174 <__math_oflowf>:
 810f174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810f17c <__math_oflowf+0x8>
 810f178:	f7ff bfea 	b.w	810f150 <xflowf>
 810f17c:	70000000 	.word	0x70000000

0810f180 <__ieee754_sqrtf>:
 810f180:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810f184:	4770      	bx	lr
	...

0810f188 <floorf>:
 810f188:	ee10 3a10 	vmov	r3, s0
 810f18c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810f190:	3a7f      	subs	r2, #127	; 0x7f
 810f192:	2a16      	cmp	r2, #22
 810f194:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810f198:	dc2a      	bgt.n	810f1f0 <floorf+0x68>
 810f19a:	2a00      	cmp	r2, #0
 810f19c:	da11      	bge.n	810f1c2 <floorf+0x3a>
 810f19e:	eddf 7a18 	vldr	s15, [pc, #96]	; 810f200 <floorf+0x78>
 810f1a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 810f1a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f1ae:	dd05      	ble.n	810f1bc <floorf+0x34>
 810f1b0:	2b00      	cmp	r3, #0
 810f1b2:	da23      	bge.n	810f1fc <floorf+0x74>
 810f1b4:	4a13      	ldr	r2, [pc, #76]	; (810f204 <floorf+0x7c>)
 810f1b6:	2900      	cmp	r1, #0
 810f1b8:	bf18      	it	ne
 810f1ba:	4613      	movne	r3, r2
 810f1bc:	ee00 3a10 	vmov	s0, r3
 810f1c0:	4770      	bx	lr
 810f1c2:	4911      	ldr	r1, [pc, #68]	; (810f208 <floorf+0x80>)
 810f1c4:	4111      	asrs	r1, r2
 810f1c6:	420b      	tst	r3, r1
 810f1c8:	d0fa      	beq.n	810f1c0 <floorf+0x38>
 810f1ca:	eddf 7a0d 	vldr	s15, [pc, #52]	; 810f200 <floorf+0x78>
 810f1ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 810f1d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810f1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f1da:	ddef      	ble.n	810f1bc <floorf+0x34>
 810f1dc:	2b00      	cmp	r3, #0
 810f1de:	bfbe      	ittt	lt
 810f1e0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 810f1e4:	fa40 f202 	asrlt.w	r2, r0, r2
 810f1e8:	189b      	addlt	r3, r3, r2
 810f1ea:	ea23 0301 	bic.w	r3, r3, r1
 810f1ee:	e7e5      	b.n	810f1bc <floorf+0x34>
 810f1f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 810f1f4:	d3e4      	bcc.n	810f1c0 <floorf+0x38>
 810f1f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f1fa:	4770      	bx	lr
 810f1fc:	2300      	movs	r3, #0
 810f1fe:	e7dd      	b.n	810f1bc <floorf+0x34>
 810f200:	7149f2ca 	.word	0x7149f2ca
 810f204:	bf800000 	.word	0xbf800000
 810f208:	007fffff 	.word	0x007fffff

0810f20c <__kernel_cosf>:
 810f20c:	ee10 3a10 	vmov	r3, s0
 810f210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f214:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 810f218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810f21c:	da05      	bge.n	810f22a <__kernel_cosf+0x1e>
 810f21e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 810f222:	ee17 2a90 	vmov	r2, s15
 810f226:	2a00      	cmp	r2, #0
 810f228:	d03b      	beq.n	810f2a2 <__kernel_cosf+0x96>
 810f22a:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f22e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 810f2a8 <__kernel_cosf+0x9c>
 810f232:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 810f2ac <__kernel_cosf+0xa0>
 810f236:	4a1e      	ldr	r2, [pc, #120]	; (810f2b0 <__kernel_cosf+0xa4>)
 810f238:	eea7 6a27 	vfma.f32	s12, s14, s15
 810f23c:	4293      	cmp	r3, r2
 810f23e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 810f2b4 <__kernel_cosf+0xa8>
 810f242:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f246:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 810f2b8 <__kernel_cosf+0xac>
 810f24a:	eea7 6a87 	vfma.f32	s12, s15, s14
 810f24e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 810f2bc <__kernel_cosf+0xb0>
 810f252:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f256:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 810f2c0 <__kernel_cosf+0xb4>
 810f25a:	eea7 6a87 	vfma.f32	s12, s15, s14
 810f25e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 810f262:	ee26 6a07 	vmul.f32	s12, s12, s14
 810f266:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810f26a:	eee7 0a06 	vfma.f32	s1, s14, s12
 810f26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810f272:	dc04      	bgt.n	810f27e <__kernel_cosf+0x72>
 810f274:	ee77 7ae0 	vsub.f32	s15, s15, s1
 810f278:	ee36 0ae7 	vsub.f32	s0, s13, s15
 810f27c:	4770      	bx	lr
 810f27e:	4a11      	ldr	r2, [pc, #68]	; (810f2c4 <__kernel_cosf+0xb8>)
 810f280:	4293      	cmp	r3, r2
 810f282:	bfda      	itte	le
 810f284:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 810f288:	ee07 3a10 	vmovle	s14, r3
 810f28c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 810f290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f294:	ee36 0ac7 	vsub.f32	s0, s13, s14
 810f298:	ee77 7ae0 	vsub.f32	s15, s15, s1
 810f29c:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f2a0:	4770      	bx	lr
 810f2a2:	eeb0 0a66 	vmov.f32	s0, s13
 810f2a6:	4770      	bx	lr
 810f2a8:	ad47d74e 	.word	0xad47d74e
 810f2ac:	310f74f6 	.word	0x310f74f6
 810f2b0:	3e999999 	.word	0x3e999999
 810f2b4:	b493f27c 	.word	0xb493f27c
 810f2b8:	37d00d01 	.word	0x37d00d01
 810f2bc:	bab60b61 	.word	0xbab60b61
 810f2c0:	3d2aaaab 	.word	0x3d2aaaab
 810f2c4:	3f480000 	.word	0x3f480000

0810f2c8 <__kernel_sinf>:
 810f2c8:	ee10 3a10 	vmov	r3, s0
 810f2cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f2d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 810f2d4:	da04      	bge.n	810f2e0 <__kernel_sinf+0x18>
 810f2d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 810f2da:	ee17 3a90 	vmov	r3, s15
 810f2de:	b35b      	cbz	r3, 810f338 <__kernel_sinf+0x70>
 810f2e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f2e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 810f33c <__kernel_sinf+0x74>
 810f2e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 810f340 <__kernel_sinf+0x78>
 810f2ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 810f2f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 810f344 <__kernel_sinf+0x7c>
 810f2f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f2f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 810f348 <__kernel_sinf+0x80>
 810f2fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 810f300:	eddf 7a12 	vldr	s15, [pc, #72]	; 810f34c <__kernel_sinf+0x84>
 810f304:	ee60 6a07 	vmul.f32	s13, s0, s14
 810f308:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f30c:	b930      	cbnz	r0, 810f31c <__kernel_sinf+0x54>
 810f30e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 810f350 <__kernel_sinf+0x88>
 810f312:	eea7 6a27 	vfma.f32	s12, s14, s15
 810f316:	eea6 0a26 	vfma.f32	s0, s12, s13
 810f31a:	4770      	bx	lr
 810f31c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 810f320:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 810f324:	eee0 7a86 	vfma.f32	s15, s1, s12
 810f328:	eed7 0a87 	vfnms.f32	s1, s15, s14
 810f32c:	eddf 7a09 	vldr	s15, [pc, #36]	; 810f354 <__kernel_sinf+0x8c>
 810f330:	eee6 0aa7 	vfma.f32	s1, s13, s15
 810f334:	ee30 0a60 	vsub.f32	s0, s0, s1
 810f338:	4770      	bx	lr
 810f33a:	bf00      	nop
 810f33c:	2f2ec9d3 	.word	0x2f2ec9d3
 810f340:	b2d72f34 	.word	0xb2d72f34
 810f344:	3638ef1b 	.word	0x3638ef1b
 810f348:	b9500d01 	.word	0xb9500d01
 810f34c:	3c088889 	.word	0x3c088889
 810f350:	be2aaaab 	.word	0xbe2aaaab
 810f354:	3e2aaaab 	.word	0x3e2aaaab

0810f358 <__ieee754_expf>:
 810f358:	ee10 2a10 	vmov	r2, s0
 810f35c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 810f360:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810f364:	d902      	bls.n	810f36c <__ieee754_expf+0x14>
 810f366:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f36a:	4770      	bx	lr
 810f36c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 810f370:	d106      	bne.n	810f380 <__ieee754_expf+0x28>
 810f372:	eddf 7a4e 	vldr	s15, [pc, #312]	; 810f4ac <__ieee754_expf+0x154>
 810f376:	2900      	cmp	r1, #0
 810f378:	bf18      	it	ne
 810f37a:	eeb0 0a67 	vmovne.f32	s0, s15
 810f37e:	4770      	bx	lr
 810f380:	484b      	ldr	r0, [pc, #300]	; (810f4b0 <__ieee754_expf+0x158>)
 810f382:	4282      	cmp	r2, r0
 810f384:	dd02      	ble.n	810f38c <__ieee754_expf+0x34>
 810f386:	2000      	movs	r0, #0
 810f388:	f7ff bef4 	b.w	810f174 <__math_oflowf>
 810f38c:	2a00      	cmp	r2, #0
 810f38e:	da05      	bge.n	810f39c <__ieee754_expf+0x44>
 810f390:	4a48      	ldr	r2, [pc, #288]	; (810f4b4 <__ieee754_expf+0x15c>)
 810f392:	4293      	cmp	r3, r2
 810f394:	d902      	bls.n	810f39c <__ieee754_expf+0x44>
 810f396:	2000      	movs	r0, #0
 810f398:	f7ff bee6 	b.w	810f168 <__math_uflowf>
 810f39c:	4a46      	ldr	r2, [pc, #280]	; (810f4b8 <__ieee754_expf+0x160>)
 810f39e:	4293      	cmp	r3, r2
 810f3a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 810f3a4:	d952      	bls.n	810f44c <__ieee754_expf+0xf4>
 810f3a6:	4a45      	ldr	r2, [pc, #276]	; (810f4bc <__ieee754_expf+0x164>)
 810f3a8:	4293      	cmp	r3, r2
 810f3aa:	ea4f 0281 	mov.w	r2, r1, lsl #2
 810f3ae:	d834      	bhi.n	810f41a <__ieee754_expf+0xc2>
 810f3b0:	4b43      	ldr	r3, [pc, #268]	; (810f4c0 <__ieee754_expf+0x168>)
 810f3b2:	4413      	add	r3, r2
 810f3b4:	ed93 7a00 	vldr	s14, [r3]
 810f3b8:	4b42      	ldr	r3, [pc, #264]	; (810f4c4 <__ieee754_expf+0x16c>)
 810f3ba:	4413      	add	r3, r2
 810f3bc:	ee30 7a47 	vsub.f32	s14, s0, s14
 810f3c0:	f1c1 0201 	rsb	r2, r1, #1
 810f3c4:	edd3 7a00 	vldr	s15, [r3]
 810f3c8:	1a52      	subs	r2, r2, r1
 810f3ca:	ee37 0a67 	vsub.f32	s0, s14, s15
 810f3ce:	ee20 6a00 	vmul.f32	s12, s0, s0
 810f3d2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 810f4c8 <__ieee754_expf+0x170>
 810f3d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810f4cc <__ieee754_expf+0x174>
 810f3da:	eee6 6a05 	vfma.f32	s13, s12, s10
 810f3de:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 810f4d0 <__ieee754_expf+0x178>
 810f3e2:	eea6 5a86 	vfma.f32	s10, s13, s12
 810f3e6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810f4d4 <__ieee754_expf+0x17c>
 810f3ea:	eee5 6a06 	vfma.f32	s13, s10, s12
 810f3ee:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 810f4d8 <__ieee754_expf+0x180>
 810f3f2:	eea6 5a86 	vfma.f32	s10, s13, s12
 810f3f6:	eef0 6a40 	vmov.f32	s13, s0
 810f3fa:	eee5 6a46 	vfms.f32	s13, s10, s12
 810f3fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 810f402:	ee20 5a26 	vmul.f32	s10, s0, s13
 810f406:	bb92      	cbnz	r2, 810f46e <__ieee754_expf+0x116>
 810f408:	ee76 6ac6 	vsub.f32	s13, s13, s12
 810f40c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 810f410:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810f414:	ee35 0ac0 	vsub.f32	s0, s11, s0
 810f418:	4770      	bx	lr
 810f41a:	4b30      	ldr	r3, [pc, #192]	; (810f4dc <__ieee754_expf+0x184>)
 810f41c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 810f4e0 <__ieee754_expf+0x188>
 810f420:	eddf 6a30 	vldr	s13, [pc, #192]	; 810f4e4 <__ieee754_expf+0x18c>
 810f424:	4413      	add	r3, r2
 810f426:	edd3 7a00 	vldr	s15, [r3]
 810f42a:	eee0 7a07 	vfma.f32	s15, s0, s14
 810f42e:	eeb0 7a40 	vmov.f32	s14, s0
 810f432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810f436:	ee17 2a90 	vmov	r2, s15
 810f43a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f43e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810f442:	eddf 6a29 	vldr	s13, [pc, #164]	; 810f4e8 <__ieee754_expf+0x190>
 810f446:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810f44a:	e7be      	b.n	810f3ca <__ieee754_expf+0x72>
 810f44c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 810f450:	d20b      	bcs.n	810f46a <__ieee754_expf+0x112>
 810f452:	eddf 6a26 	vldr	s13, [pc, #152]	; 810f4ec <__ieee754_expf+0x194>
 810f456:	ee70 6a26 	vadd.f32	s13, s0, s13
 810f45a:	eef4 6ae5 	vcmpe.f32	s13, s11
 810f45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f462:	dd02      	ble.n	810f46a <__ieee754_expf+0x112>
 810f464:	ee30 0a25 	vadd.f32	s0, s0, s11
 810f468:	4770      	bx	lr
 810f46a:	2200      	movs	r2, #0
 810f46c:	e7af      	b.n	810f3ce <__ieee754_expf+0x76>
 810f46e:	ee36 6a66 	vsub.f32	s12, s12, s13
 810f472:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 810f476:	eec5 6a06 	vdiv.f32	s13, s10, s12
 810f47a:	bfb8      	it	lt
 810f47c:	3264      	addlt	r2, #100	; 0x64
 810f47e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810f482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f486:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810f48a:	ee17 3a90 	vmov	r3, s15
 810f48e:	bfab      	itete	ge
 810f490:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 810f494:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 810f498:	ee00 3a10 	vmovge	s0, r3
 810f49c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 810f4f0 <__ieee754_expf+0x198>
 810f4a0:	bfbc      	itt	lt
 810f4a2:	ee00 3a10 	vmovlt	s0, r3
 810f4a6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 810f4aa:	4770      	bx	lr
 810f4ac:	00000000 	.word	0x00000000
 810f4b0:	42b17217 	.word	0x42b17217
 810f4b4:	42cff1b5 	.word	0x42cff1b5
 810f4b8:	3eb17218 	.word	0x3eb17218
 810f4bc:	3f851591 	.word	0x3f851591
 810f4c0:	081ec6d0 	.word	0x081ec6d0
 810f4c4:	081ec6d8 	.word	0x081ec6d8
 810f4c8:	3331bb4c 	.word	0x3331bb4c
 810f4cc:	b5ddea0e 	.word	0xb5ddea0e
 810f4d0:	388ab355 	.word	0x388ab355
 810f4d4:	bb360b61 	.word	0xbb360b61
 810f4d8:	3e2aaaab 	.word	0x3e2aaaab
 810f4dc:	081ec6c8 	.word	0x081ec6c8
 810f4e0:	3fb8aa3b 	.word	0x3fb8aa3b
 810f4e4:	3f317180 	.word	0x3f317180
 810f4e8:	3717f7d1 	.word	0x3717f7d1
 810f4ec:	7149f2ca 	.word	0x7149f2ca
 810f4f0:	0d800000 	.word	0x0d800000

0810f4f4 <__ieee754_logf>:
 810f4f4:	ee10 3a10 	vmov	r3, s0
 810f4f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810f4fc:	d106      	bne.n	810f50c <__ieee754_logf+0x18>
 810f4fe:	ed9f 7a66 	vldr	s14, [pc, #408]	; 810f698 <__ieee754_logf+0x1a4>
 810f502:	eddf 7a66 	vldr	s15, [pc, #408]	; 810f69c <__ieee754_logf+0x1a8>
 810f506:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810f50a:	4770      	bx	lr
 810f50c:	2b00      	cmp	r3, #0
 810f50e:	da02      	bge.n	810f516 <__ieee754_logf+0x22>
 810f510:	ee30 7a40 	vsub.f32	s14, s0, s0
 810f514:	e7f5      	b.n	810f502 <__ieee754_logf+0xe>
 810f516:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810f51a:	db02      	blt.n	810f522 <__ieee754_logf+0x2e>
 810f51c:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f520:	4770      	bx	lr
 810f522:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810f526:	bfb8      	it	lt
 810f528:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 810f6a0 <__ieee754_logf+0x1ac>
 810f52c:	485d      	ldr	r0, [pc, #372]	; (810f6a4 <__ieee754_logf+0x1b0>)
 810f52e:	bfbe      	ittt	lt
 810f530:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810f534:	f06f 0118 	mvnlt.w	r1, #24
 810f538:	ee17 3a90 	vmovlt	r3, s15
 810f53c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 810f540:	f3c3 0316 	ubfx	r3, r3, #0, #23
 810f544:	4418      	add	r0, r3
 810f546:	bfa8      	it	ge
 810f548:	2100      	movge	r1, #0
 810f54a:	3a7f      	subs	r2, #127	; 0x7f
 810f54c:	440a      	add	r2, r1
 810f54e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 810f552:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 810f556:	4319      	orrs	r1, r3
 810f558:	ee00 1a10 	vmov	s0, r1
 810f55c:	4952      	ldr	r1, [pc, #328]	; (810f6a8 <__ieee754_logf+0x1b4>)
 810f55e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 810f562:	f103 000f 	add.w	r0, r3, #15
 810f566:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f56a:	4001      	ands	r1, r0
 810f56c:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f570:	bb89      	cbnz	r1, 810f5d6 <__ieee754_logf+0xe2>
 810f572:	eeb5 0a40 	vcmp.f32	s0, #0.0
 810f576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f57a:	d10f      	bne.n	810f59c <__ieee754_logf+0xa8>
 810f57c:	2a00      	cmp	r2, #0
 810f57e:	f000 8087 	beq.w	810f690 <__ieee754_logf+0x19c>
 810f582:	ee07 2a90 	vmov	s15, r2
 810f586:	ed9f 0a49 	vldr	s0, [pc, #292]	; 810f6ac <__ieee754_logf+0x1b8>
 810f58a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 810f6b0 <__ieee754_logf+0x1bc>
 810f58e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f592:	ee27 0a80 	vmul.f32	s0, s15, s0
 810f596:	eea7 0a87 	vfma.f32	s0, s15, s14
 810f59a:	4770      	bx	lr
 810f59c:	eddf 6a45 	vldr	s13, [pc, #276]	; 810f6b4 <__ieee754_logf+0x1c0>
 810f5a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810f5a4:	eee0 7a66 	vfms.f32	s15, s0, s13
 810f5a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f5ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 810f5b0:	b912      	cbnz	r2, 810f5b8 <__ieee754_logf+0xc4>
 810f5b2:	ee30 0a47 	vsub.f32	s0, s0, s14
 810f5b6:	4770      	bx	lr
 810f5b8:	ee07 2a90 	vmov	s15, r2
 810f5bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810f6ac <__ieee754_logf+0x1b8>
 810f5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f5c4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810f5c8:	ee37 0a40 	vsub.f32	s0, s14, s0
 810f5cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 810f6b0 <__ieee754_logf+0x1bc>
 810f5d0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 810f5d4:	4770      	bx	lr
 810f5d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 810f5da:	ee70 7a27 	vadd.f32	s15, s0, s15
 810f5de:	eddf 5a36 	vldr	s11, [pc, #216]	; 810f6b8 <__ieee754_logf+0x1c4>
 810f5e2:	eddf 4a36 	vldr	s9, [pc, #216]	; 810f6bc <__ieee754_logf+0x1c8>
 810f5e6:	4936      	ldr	r1, [pc, #216]	; (810f6c0 <__ieee754_logf+0x1cc>)
 810f5e8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 810f5ec:	4419      	add	r1, r3
 810f5ee:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 810f5f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 810f5f6:	430b      	orrs	r3, r1
 810f5f8:	2b00      	cmp	r3, #0
 810f5fa:	ee07 2a90 	vmov	s15, r2
 810f5fe:	ee26 5a06 	vmul.f32	s10, s12, s12
 810f602:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810f606:	ee25 7a05 	vmul.f32	s14, s10, s10
 810f60a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 810f6c4 <__ieee754_logf+0x1d0>
 810f60e:	eee7 7a25 	vfma.f32	s15, s14, s11
 810f612:	eddf 5a2d 	vldr	s11, [pc, #180]	; 810f6c8 <__ieee754_logf+0x1d4>
 810f616:	eee7 5a87 	vfma.f32	s11, s15, s14
 810f61a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 810f6cc <__ieee754_logf+0x1d8>
 810f61e:	eee7 7a24 	vfma.f32	s15, s14, s9
 810f622:	eddf 4a2b 	vldr	s9, [pc, #172]	; 810f6d0 <__ieee754_logf+0x1dc>
 810f626:	eee7 4a87 	vfma.f32	s9, s15, s14
 810f62a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 810f6d4 <__ieee754_logf+0x1e0>
 810f62e:	eee4 7a87 	vfma.f32	s15, s9, s14
 810f632:	ee67 7a85 	vmul.f32	s15, s15, s10
 810f636:	eee5 7a87 	vfma.f32	s15, s11, s14
 810f63a:	dd1a      	ble.n	810f672 <__ieee754_logf+0x17e>
 810f63c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810f640:	ee20 7a07 	vmul.f32	s14, s0, s14
 810f644:	ee27 7a00 	vmul.f32	s14, s14, s0
 810f648:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f64c:	ee67 7a86 	vmul.f32	s15, s15, s12
 810f650:	b912      	cbnz	r2, 810f658 <__ieee754_logf+0x164>
 810f652:	ee37 7a67 	vsub.f32	s14, s14, s15
 810f656:	e7ac      	b.n	810f5b2 <__ieee754_logf+0xbe>
 810f658:	ed9f 6a14 	vldr	s12, [pc, #80]	; 810f6ac <__ieee754_logf+0x1b8>
 810f65c:	eee6 7a86 	vfma.f32	s15, s13, s12
 810f660:	ee37 7a67 	vsub.f32	s14, s14, s15
 810f664:	ee37 0a40 	vsub.f32	s0, s14, s0
 810f668:	eddf 7a11 	vldr	s15, [pc, #68]	; 810f6b0 <__ieee754_logf+0x1bc>
 810f66c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 810f670:	4770      	bx	lr
 810f672:	ee70 7a67 	vsub.f32	s15, s0, s15
 810f676:	ee67 7a86 	vmul.f32	s15, s15, s12
 810f67a:	b912      	cbnz	r2, 810f682 <__ieee754_logf+0x18e>
 810f67c:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f680:	4770      	bx	lr
 810f682:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 810f6ac <__ieee754_logf+0x1b8>
 810f686:	eee6 7ac7 	vfms.f32	s15, s13, s14
 810f68a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810f68e:	e7eb      	b.n	810f668 <__ieee754_logf+0x174>
 810f690:	ed9f 0a02 	vldr	s0, [pc, #8]	; 810f69c <__ieee754_logf+0x1a8>
 810f694:	4770      	bx	lr
 810f696:	bf00      	nop
 810f698:	cc000000 	.word	0xcc000000
 810f69c:	00000000 	.word	0x00000000
 810f6a0:	4c000000 	.word	0x4c000000
 810f6a4:	004afb20 	.word	0x004afb20
 810f6a8:	007ffff0 	.word	0x007ffff0
 810f6ac:	3717f7d1 	.word	0x3717f7d1
 810f6b0:	3f317180 	.word	0x3f317180
 810f6b4:	3eaaaaab 	.word	0x3eaaaaab
 810f6b8:	3e1cd04f 	.word	0x3e1cd04f
 810f6bc:	3e178897 	.word	0x3e178897
 810f6c0:	ffcf5c30 	.word	0xffcf5c30
 810f6c4:	3e638e29 	.word	0x3e638e29
 810f6c8:	3ecccccd 	.word	0x3ecccccd
 810f6cc:	3e3a3325 	.word	0x3e3a3325
 810f6d0:	3e924925 	.word	0x3e924925
 810f6d4:	3f2aaaab 	.word	0x3f2aaaab

0810f6d8 <__ieee754_log10f>:
 810f6d8:	b508      	push	{r3, lr}
 810f6da:	ee10 2a10 	vmov	r2, s0
 810f6de:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 810f6e2:	ed2d 8b02 	vpush	{d8}
 810f6e6:	d108      	bne.n	810f6fa <__ieee754_log10f+0x22>
 810f6e8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 810f770 <__ieee754_log10f+0x98>
 810f6ec:	eddf 7a21 	vldr	s15, [pc, #132]	; 810f774 <__ieee754_log10f+0x9c>
 810f6f0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810f6f4:	ecbd 8b02 	vpop	{d8}
 810f6f8:	bd08      	pop	{r3, pc}
 810f6fa:	2a00      	cmp	r2, #0
 810f6fc:	da02      	bge.n	810f704 <__ieee754_log10f+0x2c>
 810f6fe:	ee30 7a40 	vsub.f32	s14, s0, s0
 810f702:	e7f3      	b.n	810f6ec <__ieee754_log10f+0x14>
 810f704:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810f708:	db02      	blt.n	810f710 <__ieee754_log10f+0x38>
 810f70a:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f70e:	e7f1      	b.n	810f6f4 <__ieee754_log10f+0x1c>
 810f710:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 810f714:	bfbf      	itttt	lt
 810f716:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 810f778 <__ieee754_log10f+0xa0>
 810f71a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810f71e:	f06f 0118 	mvnlt.w	r1, #24
 810f722:	ee17 2a90 	vmovlt	r2, s15
 810f726:	ea4f 53e2 	mov.w	r3, r2, asr #23
 810f72a:	bfa8      	it	ge
 810f72c:	2100      	movge	r1, #0
 810f72e:	3b7f      	subs	r3, #127	; 0x7f
 810f730:	440b      	add	r3, r1
 810f732:	0fd9      	lsrs	r1, r3, #31
 810f734:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 810f738:	ee07 3a90 	vmov	s15, r3
 810f73c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 810f740:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 810f744:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 810f748:	ee00 3a10 	vmov	s0, r3
 810f74c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810f750:	f7ff fed0 	bl	810f4f4 <__ieee754_logf>
 810f754:	eddf 7a09 	vldr	s15, [pc, #36]	; 810f77c <__ieee754_log10f+0xa4>
 810f758:	ee20 0a27 	vmul.f32	s0, s0, s15
 810f75c:	eddf 7a08 	vldr	s15, [pc, #32]	; 810f780 <__ieee754_log10f+0xa8>
 810f760:	eea8 0a27 	vfma.f32	s0, s16, s15
 810f764:	eddf 7a07 	vldr	s15, [pc, #28]	; 810f784 <__ieee754_log10f+0xac>
 810f768:	eea8 0a27 	vfma.f32	s0, s16, s15
 810f76c:	e7c2      	b.n	810f6f4 <__ieee754_log10f+0x1c>
 810f76e:	bf00      	nop
 810f770:	cc000000 	.word	0xcc000000
 810f774:	00000000 	.word	0x00000000
 810f778:	4c000000 	.word	0x4c000000
 810f77c:	3ede5bd9 	.word	0x3ede5bd9
 810f780:	355427db 	.word	0x355427db
 810f784:	3e9a2080 	.word	0x3e9a2080

0810f788 <__ieee754_powf>:
 810f788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f78c:	ee10 4a90 	vmov	r4, s1
 810f790:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 810f794:	ed2d 8b02 	vpush	{d8}
 810f798:	ee10 7a10 	vmov	r7, s0
 810f79c:	eeb0 8a40 	vmov.f32	s16, s0
 810f7a0:	eef0 8a60 	vmov.f32	s17, s1
 810f7a4:	d10c      	bne.n	810f7c0 <__ieee754_powf+0x38>
 810f7a6:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 810f7aa:	007f      	lsls	r7, r7, #1
 810f7ac:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 810f7b0:	f240 8292 	bls.w	810fcd8 <__ieee754_powf+0x550>
 810f7b4:	ee38 0a28 	vadd.f32	s0, s16, s17
 810f7b8:	ecbd 8b02 	vpop	{d8}
 810f7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f7c0:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 810f7c4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 810f7c8:	dcf4      	bgt.n	810f7b4 <__ieee754_powf+0x2c>
 810f7ca:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810f7ce:	dd08      	ble.n	810f7e2 <__ieee754_powf+0x5a>
 810f7d0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 810f7d4:	d1ee      	bne.n	810f7b4 <__ieee754_powf+0x2c>
 810f7d6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 810f7da:	0064      	lsls	r4, r4, #1
 810f7dc:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 810f7e0:	e7e6      	b.n	810f7b0 <__ieee754_powf+0x28>
 810f7e2:	2f00      	cmp	r7, #0
 810f7e4:	da20      	bge.n	810f828 <__ieee754_powf+0xa0>
 810f7e6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 810f7ea:	da2d      	bge.n	810f848 <__ieee754_powf+0xc0>
 810f7ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810f7f0:	f2c0 827b 	blt.w	810fcea <__ieee754_powf+0x562>
 810f7f4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 810f7f8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 810f7fc:	fa48 f603 	asr.w	r6, r8, r3
 810f800:	fa06 f303 	lsl.w	r3, r6, r3
 810f804:	4543      	cmp	r3, r8
 810f806:	f040 8270 	bne.w	810fcea <__ieee754_powf+0x562>
 810f80a:	f006 0601 	and.w	r6, r6, #1
 810f80e:	f1c6 0602 	rsb	r6, r6, #2
 810f812:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810f816:	d11f      	bne.n	810f858 <__ieee754_powf+0xd0>
 810f818:	2c00      	cmp	r4, #0
 810f81a:	f280 8263 	bge.w	810fce4 <__ieee754_powf+0x55c>
 810f81e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f822:	ee87 0a88 	vdiv.f32	s0, s15, s16
 810f826:	e7c7      	b.n	810f7b8 <__ieee754_powf+0x30>
 810f828:	2600      	movs	r6, #0
 810f82a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810f82e:	d1f0      	bne.n	810f812 <__ieee754_powf+0x8a>
 810f830:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 810f834:	f000 8250 	beq.w	810fcd8 <__ieee754_powf+0x550>
 810f838:	dd08      	ble.n	810f84c <__ieee754_powf+0xc4>
 810f83a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 810fb40 <__ieee754_powf+0x3b8>
 810f83e:	2c00      	cmp	r4, #0
 810f840:	bfa8      	it	ge
 810f842:	eeb0 0a68 	vmovge.f32	s0, s17
 810f846:	e7b7      	b.n	810f7b8 <__ieee754_powf+0x30>
 810f848:	2602      	movs	r6, #2
 810f84a:	e7ee      	b.n	810f82a <__ieee754_powf+0xa2>
 810f84c:	2c00      	cmp	r4, #0
 810f84e:	f280 8246 	bge.w	810fcde <__ieee754_powf+0x556>
 810f852:	eeb1 0a68 	vneg.f32	s0, s17
 810f856:	e7af      	b.n	810f7b8 <__ieee754_powf+0x30>
 810f858:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 810f85c:	d102      	bne.n	810f864 <__ieee754_powf+0xdc>
 810f85e:	ee28 0a08 	vmul.f32	s0, s16, s16
 810f862:	e7a9      	b.n	810f7b8 <__ieee754_powf+0x30>
 810f864:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 810f868:	eeb0 0a48 	vmov.f32	s0, s16
 810f86c:	d107      	bne.n	810f87e <__ieee754_powf+0xf6>
 810f86e:	2f00      	cmp	r7, #0
 810f870:	db05      	blt.n	810f87e <__ieee754_powf+0xf6>
 810f872:	ecbd 8b02 	vpop	{d8}
 810f876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f87a:	f7ff bc81 	b.w	810f180 <__ieee754_sqrtf>
 810f87e:	f7ff fc01 	bl	810f084 <fabsf>
 810f882:	b125      	cbz	r5, 810f88e <__ieee754_powf+0x106>
 810f884:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 810f888:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 810f88c:	d115      	bne.n	810f8ba <__ieee754_powf+0x132>
 810f88e:	2c00      	cmp	r4, #0
 810f890:	bfbc      	itt	lt
 810f892:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 810f896:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 810f89a:	2f00      	cmp	r7, #0
 810f89c:	da8c      	bge.n	810f7b8 <__ieee754_powf+0x30>
 810f89e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 810f8a2:	4335      	orrs	r5, r6
 810f8a4:	d104      	bne.n	810f8b0 <__ieee754_powf+0x128>
 810f8a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 810f8aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 810f8ae:	e783      	b.n	810f7b8 <__ieee754_powf+0x30>
 810f8b0:	2e01      	cmp	r6, #1
 810f8b2:	d181      	bne.n	810f7b8 <__ieee754_powf+0x30>
 810f8b4:	eeb1 0a40 	vneg.f32	s0, s0
 810f8b8:	e77e      	b.n	810f7b8 <__ieee754_powf+0x30>
 810f8ba:	0ff8      	lsrs	r0, r7, #31
 810f8bc:	3801      	subs	r0, #1
 810f8be:	ea56 0300 	orrs.w	r3, r6, r0
 810f8c2:	d104      	bne.n	810f8ce <__ieee754_powf+0x146>
 810f8c4:	ee38 8a48 	vsub.f32	s16, s16, s16
 810f8c8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 810f8cc:	e774      	b.n	810f7b8 <__ieee754_powf+0x30>
 810f8ce:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 810f8d2:	dd73      	ble.n	810f9bc <__ieee754_powf+0x234>
 810f8d4:	4b9b      	ldr	r3, [pc, #620]	; (810fb44 <__ieee754_powf+0x3bc>)
 810f8d6:	429d      	cmp	r5, r3
 810f8d8:	dc08      	bgt.n	810f8ec <__ieee754_powf+0x164>
 810f8da:	2c00      	cmp	r4, #0
 810f8dc:	da0b      	bge.n	810f8f6 <__ieee754_powf+0x16e>
 810f8de:	2000      	movs	r0, #0
 810f8e0:	ecbd 8b02 	vpop	{d8}
 810f8e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f8e8:	f7ff bc44 	b.w	810f174 <__math_oflowf>
 810f8ec:	4b96      	ldr	r3, [pc, #600]	; (810fb48 <__ieee754_powf+0x3c0>)
 810f8ee:	429d      	cmp	r5, r3
 810f8f0:	dd08      	ble.n	810f904 <__ieee754_powf+0x17c>
 810f8f2:	2c00      	cmp	r4, #0
 810f8f4:	dcf3      	bgt.n	810f8de <__ieee754_powf+0x156>
 810f8f6:	2000      	movs	r0, #0
 810f8f8:	ecbd 8b02 	vpop	{d8}
 810f8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f900:	f7ff bc32 	b.w	810f168 <__math_uflowf>
 810f904:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f908:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f90c:	eddf 6a8f 	vldr	s13, [pc, #572]	; 810fb4c <__ieee754_powf+0x3c4>
 810f910:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 810f914:	eee0 6a67 	vfms.f32	s13, s0, s15
 810f918:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810f91c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 810f920:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f924:	ee27 7a27 	vmul.f32	s14, s14, s15
 810f928:	eddf 7a89 	vldr	s15, [pc, #548]	; 810fb50 <__ieee754_powf+0x3c8>
 810f92c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 810f930:	ed9f 7a88 	vldr	s14, [pc, #544]	; 810fb54 <__ieee754_powf+0x3cc>
 810f934:	eee0 7a07 	vfma.f32	s15, s0, s14
 810f938:	ed9f 7a87 	vldr	s14, [pc, #540]	; 810fb58 <__ieee754_powf+0x3d0>
 810f93c:	eef0 6a67 	vmov.f32	s13, s15
 810f940:	eee0 6a07 	vfma.f32	s13, s0, s14
 810f944:	ee16 3a90 	vmov	r3, s13
 810f948:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810f94c:	f023 030f 	bic.w	r3, r3, #15
 810f950:	ee06 3a90 	vmov	s13, r3
 810f954:	eee0 6a47 	vfms.f32	s13, s0, s14
 810f958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810f95c:	3e01      	subs	r6, #1
 810f95e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 810f962:	4306      	orrs	r6, r0
 810f964:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 810f968:	f024 040f 	bic.w	r4, r4, #15
 810f96c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 810f970:	bf08      	it	eq
 810f972:	eeb0 8a47 	vmoveq.f32	s16, s14
 810f976:	ee07 4a10 	vmov	s14, r4
 810f97a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 810f97e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 810f982:	ee07 3a90 	vmov	s15, r3
 810f986:	eee7 0a27 	vfma.f32	s1, s14, s15
 810f98a:	ee07 4a10 	vmov	s14, r4
 810f98e:	ee67 7a87 	vmul.f32	s15, s15, s14
 810f992:	ee30 7aa7 	vadd.f32	s14, s1, s15
 810f996:	ee17 1a10 	vmov	r1, s14
 810f99a:	2900      	cmp	r1, #0
 810f99c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810f9a0:	f340 817c 	ble.w	810fc9c <__ieee754_powf+0x514>
 810f9a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 810f9a8:	f340 80f8 	ble.w	810fb9c <__ieee754_powf+0x414>
 810f9ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810f9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f9b4:	bf4c      	ite	mi
 810f9b6:	2001      	movmi	r0, #1
 810f9b8:	2000      	movpl	r0, #0
 810f9ba:	e791      	b.n	810f8e0 <__ieee754_powf+0x158>
 810f9bc:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 810f9c0:	bf01      	itttt	eq
 810f9c2:	eddf 7a66 	vldreq	s15, [pc, #408]	; 810fb5c <__ieee754_powf+0x3d4>
 810f9c6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 810f9ca:	f06f 0317 	mvneq.w	r3, #23
 810f9ce:	ee17 5a90 	vmoveq	r5, s15
 810f9d2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 810f9d6:	bf18      	it	ne
 810f9d8:	2300      	movne	r3, #0
 810f9da:	3a7f      	subs	r2, #127	; 0x7f
 810f9dc:	441a      	add	r2, r3
 810f9de:	4b60      	ldr	r3, [pc, #384]	; (810fb60 <__ieee754_powf+0x3d8>)
 810f9e0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 810f9e4:	429d      	cmp	r5, r3
 810f9e6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 810f9ea:	dd06      	ble.n	810f9fa <__ieee754_powf+0x272>
 810f9ec:	4b5d      	ldr	r3, [pc, #372]	; (810fb64 <__ieee754_powf+0x3dc>)
 810f9ee:	429d      	cmp	r5, r3
 810f9f0:	f340 80a4 	ble.w	810fb3c <__ieee754_powf+0x3b4>
 810f9f4:	3201      	adds	r2, #1
 810f9f6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 810f9fa:	2500      	movs	r5, #0
 810f9fc:	4b5a      	ldr	r3, [pc, #360]	; (810fb68 <__ieee754_powf+0x3e0>)
 810f9fe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 810fa02:	ee07 1a10 	vmov	s14, r1
 810fa06:	edd3 5a00 	vldr	s11, [r3]
 810fa0a:	4b58      	ldr	r3, [pc, #352]	; (810fb6c <__ieee754_powf+0x3e4>)
 810fa0c:	ee75 7a87 	vadd.f32	s15, s11, s14
 810fa10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810fa14:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 810fa18:	1049      	asrs	r1, r1, #1
 810fa1a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 810fa1e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 810fa22:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 810fa26:	ee37 6a65 	vsub.f32	s12, s14, s11
 810fa2a:	ee07 1a90 	vmov	s15, r1
 810fa2e:	ee26 5a24 	vmul.f32	s10, s12, s9
 810fa32:	ee77 5ae5 	vsub.f32	s11, s15, s11
 810fa36:	ee15 7a10 	vmov	r7, s10
 810fa3a:	401f      	ands	r7, r3
 810fa3c:	ee06 7a90 	vmov	s13, r7
 810fa40:	eea6 6ae7 	vfms.f32	s12, s13, s15
 810fa44:	ee37 7a65 	vsub.f32	s14, s14, s11
 810fa48:	ee65 7a05 	vmul.f32	s15, s10, s10
 810fa4c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 810fa50:	eddf 5a47 	vldr	s11, [pc, #284]	; 810fb70 <__ieee754_powf+0x3e8>
 810fa54:	ed9f 7a47 	vldr	s14, [pc, #284]	; 810fb74 <__ieee754_powf+0x3ec>
 810fa58:	eee7 5a87 	vfma.f32	s11, s15, s14
 810fa5c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 810fb78 <__ieee754_powf+0x3f0>
 810fa60:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810fa64:	eddf 5a39 	vldr	s11, [pc, #228]	; 810fb4c <__ieee754_powf+0x3c4>
 810fa68:	eee7 5a27 	vfma.f32	s11, s14, s15
 810fa6c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 810fb7c <__ieee754_powf+0x3f4>
 810fa70:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810fa74:	eddf 5a42 	vldr	s11, [pc, #264]	; 810fb80 <__ieee754_powf+0x3f8>
 810fa78:	ee26 6a24 	vmul.f32	s12, s12, s9
 810fa7c:	eee7 5a27 	vfma.f32	s11, s14, s15
 810fa80:	ee35 7a26 	vadd.f32	s14, s10, s13
 810fa84:	ee67 4aa7 	vmul.f32	s9, s15, s15
 810fa88:	ee27 7a06 	vmul.f32	s14, s14, s12
 810fa8c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 810fa90:	eea4 7aa5 	vfma.f32	s14, s9, s11
 810fa94:	eef0 5a67 	vmov.f32	s11, s15
 810fa98:	eee6 5aa6 	vfma.f32	s11, s13, s13
 810fa9c:	ee75 5a87 	vadd.f32	s11, s11, s14
 810faa0:	ee15 1a90 	vmov	r1, s11
 810faa4:	4019      	ands	r1, r3
 810faa6:	ee05 1a90 	vmov	s11, r1
 810faaa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810faae:	eee6 7ae6 	vfms.f32	s15, s13, s13
 810fab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fab6:	ee67 7a85 	vmul.f32	s15, s15, s10
 810faba:	eee6 7a25 	vfma.f32	s15, s12, s11
 810fabe:	eeb0 6a67 	vmov.f32	s12, s15
 810fac2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 810fac6:	ee16 1a10 	vmov	r1, s12
 810faca:	4019      	ands	r1, r3
 810facc:	ee07 1a10 	vmov	s14, r1
 810fad0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 810fad4:	ee06 1a10 	vmov	s12, r1
 810fad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fadc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810fb84 <__ieee754_powf+0x3fc>
 810fae0:	4929      	ldr	r1, [pc, #164]	; (810fb88 <__ieee754_powf+0x400>)
 810fae2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 810fb8c <__ieee754_powf+0x404>
 810fae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 810faea:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810fb90 <__ieee754_powf+0x408>
 810faee:	eee6 7a07 	vfma.f32	s15, s12, s14
 810faf2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 810faf6:	ed91 7a00 	vldr	s14, [r1]
 810fafa:	ee77 7a87 	vadd.f32	s15, s15, s14
 810fafe:	ee07 2a10 	vmov	s14, r2
 810fb02:	eef0 6a67 	vmov.f32	s13, s15
 810fb06:	4a23      	ldr	r2, [pc, #140]	; (810fb94 <__ieee754_powf+0x40c>)
 810fb08:	eee6 6a25 	vfma.f32	s13, s12, s11
 810fb0c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 810fb10:	ed92 5a00 	vldr	s10, [r2]
 810fb14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810fb18:	ee76 6a85 	vadd.f32	s13, s13, s10
 810fb1c:	ee76 6a87 	vadd.f32	s13, s13, s14
 810fb20:	ee16 2a90 	vmov	r2, s13
 810fb24:	4013      	ands	r3, r2
 810fb26:	ee06 3a90 	vmov	s13, r3
 810fb2a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 810fb2e:	ee37 7a45 	vsub.f32	s14, s14, s10
 810fb32:	eea6 7a65 	vfms.f32	s14, s12, s11
 810fb36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fb3a:	e70f      	b.n	810f95c <__ieee754_powf+0x1d4>
 810fb3c:	2501      	movs	r5, #1
 810fb3e:	e75d      	b.n	810f9fc <__ieee754_powf+0x274>
 810fb40:	00000000 	.word	0x00000000
 810fb44:	3f7ffff3 	.word	0x3f7ffff3
 810fb48:	3f800007 	.word	0x3f800007
 810fb4c:	3eaaaaab 	.word	0x3eaaaaab
 810fb50:	3fb8aa3b 	.word	0x3fb8aa3b
 810fb54:	36eca570 	.word	0x36eca570
 810fb58:	3fb8aa00 	.word	0x3fb8aa00
 810fb5c:	4b800000 	.word	0x4b800000
 810fb60:	001cc471 	.word	0x001cc471
 810fb64:	005db3d6 	.word	0x005db3d6
 810fb68:	081ec6e0 	.word	0x081ec6e0
 810fb6c:	fffff000 	.word	0xfffff000
 810fb70:	3e6c3255 	.word	0x3e6c3255
 810fb74:	3e53f142 	.word	0x3e53f142
 810fb78:	3e8ba305 	.word	0x3e8ba305
 810fb7c:	3edb6db7 	.word	0x3edb6db7
 810fb80:	3f19999a 	.word	0x3f19999a
 810fb84:	3f76384f 	.word	0x3f76384f
 810fb88:	081ec6f0 	.word	0x081ec6f0
 810fb8c:	3f763800 	.word	0x3f763800
 810fb90:	369dc3a0 	.word	0x369dc3a0
 810fb94:	081ec6e8 	.word	0x081ec6e8
 810fb98:	3338aa3c 	.word	0x3338aa3c
 810fb9c:	f040 8093 	bne.w	810fcc6 <__ieee754_powf+0x53e>
 810fba0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 810fb98 <__ieee754_powf+0x410>
 810fba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 810fba8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 810fbac:	eef4 6ac7 	vcmpe.f32	s13, s14
 810fbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fbb4:	f73f aefa 	bgt.w	810f9ac <__ieee754_powf+0x224>
 810fbb8:	15db      	asrs	r3, r3, #23
 810fbba:	3b7e      	subs	r3, #126	; 0x7e
 810fbbc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 810fbc0:	4118      	asrs	r0, r3
 810fbc2:	4408      	add	r0, r1
 810fbc4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 810fbc8:	4a49      	ldr	r2, [pc, #292]	; (810fcf0 <__ieee754_powf+0x568>)
 810fbca:	3b7f      	subs	r3, #127	; 0x7f
 810fbcc:	411a      	asrs	r2, r3
 810fbce:	4002      	ands	r2, r0
 810fbd0:	ee07 2a10 	vmov	s14, r2
 810fbd4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 810fbd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 810fbdc:	f1c3 0317 	rsb	r3, r3, #23
 810fbe0:	4118      	asrs	r0, r3
 810fbe2:	2900      	cmp	r1, #0
 810fbe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fbe8:	bfb8      	it	lt
 810fbea:	4240      	neglt	r0, r0
 810fbec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 810fbf0:	eddf 6a40 	vldr	s13, [pc, #256]	; 810fcf4 <__ieee754_powf+0x56c>
 810fbf4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 810fcf8 <__ieee754_powf+0x570>
 810fbf8:	ee17 3a10 	vmov	r3, s14
 810fbfc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810fc00:	f023 030f 	bic.w	r3, r3, #15
 810fc04:	ee07 3a10 	vmov	s14, r3
 810fc08:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fc0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810fc10:	ee70 0ae7 	vsub.f32	s1, s1, s15
 810fc14:	eddf 7a39 	vldr	s15, [pc, #228]	; 810fcfc <__ieee754_powf+0x574>
 810fc18:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fc1c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 810fc20:	eef0 6a67 	vmov.f32	s13, s15
 810fc24:	eee7 6a06 	vfma.f32	s13, s14, s12
 810fc28:	eef0 5a66 	vmov.f32	s11, s13
 810fc2c:	eee7 5a46 	vfms.f32	s11, s14, s12
 810fc30:	ee26 7aa6 	vmul.f32	s14, s13, s13
 810fc34:	ee77 7ae5 	vsub.f32	s15, s15, s11
 810fc38:	ed9f 6a31 	vldr	s12, [pc, #196]	; 810fd00 <__ieee754_powf+0x578>
 810fc3c:	eddf 5a31 	vldr	s11, [pc, #196]	; 810fd04 <__ieee754_powf+0x57c>
 810fc40:	eea7 6a25 	vfma.f32	s12, s14, s11
 810fc44:	eddf 5a30 	vldr	s11, [pc, #192]	; 810fd08 <__ieee754_powf+0x580>
 810fc48:	eee6 5a07 	vfma.f32	s11, s12, s14
 810fc4c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 810fd0c <__ieee754_powf+0x584>
 810fc50:	eea5 6a87 	vfma.f32	s12, s11, s14
 810fc54:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810fd10 <__ieee754_powf+0x588>
 810fc58:	eee6 5a07 	vfma.f32	s11, s12, s14
 810fc5c:	eeb0 6a66 	vmov.f32	s12, s13
 810fc60:	eea5 6ac7 	vfms.f32	s12, s11, s14
 810fc64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 810fc68:	ee66 5a86 	vmul.f32	s11, s13, s12
 810fc6c:	ee36 6a47 	vsub.f32	s12, s12, s14
 810fc70:	eee6 7aa7 	vfma.f32	s15, s13, s15
 810fc74:	ee85 7a86 	vdiv.f32	s14, s11, s12
 810fc78:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fc7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810fc80:	ee30 0a67 	vsub.f32	s0, s0, s15
 810fc84:	ee10 3a10 	vmov	r3, s0
 810fc88:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 810fc8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810fc90:	da1f      	bge.n	810fcd2 <__ieee754_powf+0x54a>
 810fc92:	f000 f96f 	bl	810ff74 <scalbnf>
 810fc96:	ee20 0a08 	vmul.f32	s0, s0, s16
 810fc9a:	e58d      	b.n	810f7b8 <__ieee754_powf+0x30>
 810fc9c:	4a1d      	ldr	r2, [pc, #116]	; (810fd14 <__ieee754_powf+0x58c>)
 810fc9e:	4293      	cmp	r3, r2
 810fca0:	dd07      	ble.n	810fcb2 <__ieee754_powf+0x52a>
 810fca2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810fca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fcaa:	bf4c      	ite	mi
 810fcac:	2001      	movmi	r0, #1
 810fcae:	2000      	movpl	r0, #0
 810fcb0:	e622      	b.n	810f8f8 <__ieee754_powf+0x170>
 810fcb2:	d108      	bne.n	810fcc6 <__ieee754_powf+0x53e>
 810fcb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 810fcb8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 810fcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fcc0:	f6ff af7a 	blt.w	810fbb8 <__ieee754_powf+0x430>
 810fcc4:	e7ed      	b.n	810fca2 <__ieee754_powf+0x51a>
 810fcc6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 810fcca:	f73f af75 	bgt.w	810fbb8 <__ieee754_powf+0x430>
 810fcce:	2000      	movs	r0, #0
 810fcd0:	e78c      	b.n	810fbec <__ieee754_powf+0x464>
 810fcd2:	ee00 3a10 	vmov	s0, r3
 810fcd6:	e7de      	b.n	810fc96 <__ieee754_powf+0x50e>
 810fcd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810fcdc:	e56c      	b.n	810f7b8 <__ieee754_powf+0x30>
 810fcde:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 810fd18 <__ieee754_powf+0x590>
 810fce2:	e569      	b.n	810f7b8 <__ieee754_powf+0x30>
 810fce4:	eeb0 0a48 	vmov.f32	s0, s16
 810fce8:	e566      	b.n	810f7b8 <__ieee754_powf+0x30>
 810fcea:	2600      	movs	r6, #0
 810fcec:	e591      	b.n	810f812 <__ieee754_powf+0x8a>
 810fcee:	bf00      	nop
 810fcf0:	ff800000 	.word	0xff800000
 810fcf4:	3f317218 	.word	0x3f317218
 810fcf8:	3f317200 	.word	0x3f317200
 810fcfc:	35bfbe8c 	.word	0x35bfbe8c
 810fd00:	b5ddea0e 	.word	0xb5ddea0e
 810fd04:	3331bb4c 	.word	0x3331bb4c
 810fd08:	388ab355 	.word	0x388ab355
 810fd0c:	bb360b61 	.word	0xbb360b61
 810fd10:	3e2aaaab 	.word	0x3e2aaaab
 810fd14:	43160000 	.word	0x43160000
 810fd18:	00000000 	.word	0x00000000

0810fd1c <__ieee754_rem_pio2f>:
 810fd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810fd1e:	ee10 6a10 	vmov	r6, s0
 810fd22:	4b86      	ldr	r3, [pc, #536]	; (810ff3c <__ieee754_rem_pio2f+0x220>)
 810fd24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 810fd28:	429d      	cmp	r5, r3
 810fd2a:	b087      	sub	sp, #28
 810fd2c:	4604      	mov	r4, r0
 810fd2e:	dc05      	bgt.n	810fd3c <__ieee754_rem_pio2f+0x20>
 810fd30:	2300      	movs	r3, #0
 810fd32:	ed80 0a00 	vstr	s0, [r0]
 810fd36:	6043      	str	r3, [r0, #4]
 810fd38:	2000      	movs	r0, #0
 810fd3a:	e020      	b.n	810fd7e <__ieee754_rem_pio2f+0x62>
 810fd3c:	4b80      	ldr	r3, [pc, #512]	; (810ff40 <__ieee754_rem_pio2f+0x224>)
 810fd3e:	429d      	cmp	r5, r3
 810fd40:	dc38      	bgt.n	810fdb4 <__ieee754_rem_pio2f+0x98>
 810fd42:	2e00      	cmp	r6, #0
 810fd44:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 810ff44 <__ieee754_rem_pio2f+0x228>
 810fd48:	4b7f      	ldr	r3, [pc, #508]	; (810ff48 <__ieee754_rem_pio2f+0x22c>)
 810fd4a:	f025 050f 	bic.w	r5, r5, #15
 810fd4e:	dd18      	ble.n	810fd82 <__ieee754_rem_pio2f+0x66>
 810fd50:	429d      	cmp	r5, r3
 810fd52:	ee70 7a47 	vsub.f32	s15, s0, s14
 810fd56:	bf09      	itett	eq
 810fd58:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 810ff4c <__ieee754_rem_pio2f+0x230>
 810fd5c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 810ff50 <__ieee754_rem_pio2f+0x234>
 810fd60:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 810fd64:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 810ff54 <__ieee754_rem_pio2f+0x238>
 810fd68:	ee77 6ac7 	vsub.f32	s13, s15, s14
 810fd6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810fd70:	edc0 6a00 	vstr	s13, [r0]
 810fd74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fd78:	edc0 7a01 	vstr	s15, [r0, #4]
 810fd7c:	2001      	movs	r0, #1
 810fd7e:	b007      	add	sp, #28
 810fd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810fd82:	429d      	cmp	r5, r3
 810fd84:	ee70 7a07 	vadd.f32	s15, s0, s14
 810fd88:	bf09      	itett	eq
 810fd8a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 810ff4c <__ieee754_rem_pio2f+0x230>
 810fd8e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 810ff50 <__ieee754_rem_pio2f+0x234>
 810fd92:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 810fd96:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 810ff54 <__ieee754_rem_pio2f+0x238>
 810fd9a:	ee77 6a87 	vadd.f32	s13, s15, s14
 810fd9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810fda2:	edc0 6a00 	vstr	s13, [r0]
 810fda6:	ee77 7a87 	vadd.f32	s15, s15, s14
 810fdaa:	edc0 7a01 	vstr	s15, [r0, #4]
 810fdae:	f04f 30ff 	mov.w	r0, #4294967295
 810fdb2:	e7e4      	b.n	810fd7e <__ieee754_rem_pio2f+0x62>
 810fdb4:	4b68      	ldr	r3, [pc, #416]	; (810ff58 <__ieee754_rem_pio2f+0x23c>)
 810fdb6:	429d      	cmp	r5, r3
 810fdb8:	dc71      	bgt.n	810fe9e <__ieee754_rem_pio2f+0x182>
 810fdba:	f7ff f963 	bl	810f084 <fabsf>
 810fdbe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 810ff5c <__ieee754_rem_pio2f+0x240>
 810fdc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810fdc6:	eee0 7a07 	vfma.f32	s15, s0, s14
 810fdca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810fdce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810fdd2:	ee17 0a90 	vmov	r0, s15
 810fdd6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 810ff44 <__ieee754_rem_pio2f+0x228>
 810fdda:	eea7 0a67 	vfms.f32	s0, s14, s15
 810fdde:	281f      	cmp	r0, #31
 810fde0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 810ff50 <__ieee754_rem_pio2f+0x234>
 810fde4:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fde8:	eeb1 6a47 	vneg.f32	s12, s14
 810fdec:	ee70 6a67 	vsub.f32	s13, s0, s15
 810fdf0:	ee16 2a90 	vmov	r2, s13
 810fdf4:	dc1c      	bgt.n	810fe30 <__ieee754_rem_pio2f+0x114>
 810fdf6:	495a      	ldr	r1, [pc, #360]	; (810ff60 <__ieee754_rem_pio2f+0x244>)
 810fdf8:	1e47      	subs	r7, r0, #1
 810fdfa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 810fdfe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 810fe02:	428b      	cmp	r3, r1
 810fe04:	d014      	beq.n	810fe30 <__ieee754_rem_pio2f+0x114>
 810fe06:	6022      	str	r2, [r4, #0]
 810fe08:	ed94 7a00 	vldr	s14, [r4]
 810fe0c:	ee30 0a47 	vsub.f32	s0, s0, s14
 810fe10:	2e00      	cmp	r6, #0
 810fe12:	ee30 0a67 	vsub.f32	s0, s0, s15
 810fe16:	ed84 0a01 	vstr	s0, [r4, #4]
 810fe1a:	dab0      	bge.n	810fd7e <__ieee754_rem_pio2f+0x62>
 810fe1c:	eeb1 7a47 	vneg.f32	s14, s14
 810fe20:	eeb1 0a40 	vneg.f32	s0, s0
 810fe24:	ed84 7a00 	vstr	s14, [r4]
 810fe28:	ed84 0a01 	vstr	s0, [r4, #4]
 810fe2c:	4240      	negs	r0, r0
 810fe2e:	e7a6      	b.n	810fd7e <__ieee754_rem_pio2f+0x62>
 810fe30:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 810fe34:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 810fe38:	2908      	cmp	r1, #8
 810fe3a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 810fe3e:	dde2      	ble.n	810fe06 <__ieee754_rem_pio2f+0xea>
 810fe40:	eddf 5a42 	vldr	s11, [pc, #264]	; 810ff4c <__ieee754_rem_pio2f+0x230>
 810fe44:	eef0 6a40 	vmov.f32	s13, s0
 810fe48:	eee6 6a25 	vfma.f32	s13, s12, s11
 810fe4c:	ee70 7a66 	vsub.f32	s15, s0, s13
 810fe50:	eee6 7a25 	vfma.f32	s15, s12, s11
 810fe54:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810ff54 <__ieee754_rem_pio2f+0x238>
 810fe58:	eed7 7a25 	vfnms.f32	s15, s14, s11
 810fe5c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 810fe60:	ee15 2a90 	vmov	r2, s11
 810fe64:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 810fe68:	1a5b      	subs	r3, r3, r1
 810fe6a:	2b19      	cmp	r3, #25
 810fe6c:	dc04      	bgt.n	810fe78 <__ieee754_rem_pio2f+0x15c>
 810fe6e:	edc4 5a00 	vstr	s11, [r4]
 810fe72:	eeb0 0a66 	vmov.f32	s0, s13
 810fe76:	e7c7      	b.n	810fe08 <__ieee754_rem_pio2f+0xec>
 810fe78:	eddf 5a3a 	vldr	s11, [pc, #232]	; 810ff64 <__ieee754_rem_pio2f+0x248>
 810fe7c:	eeb0 0a66 	vmov.f32	s0, s13
 810fe80:	eea6 0a25 	vfma.f32	s0, s12, s11
 810fe84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 810fe88:	eddf 6a37 	vldr	s13, [pc, #220]	; 810ff68 <__ieee754_rem_pio2f+0x24c>
 810fe8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 810fe90:	eed7 7a26 	vfnms.f32	s15, s14, s13
 810fe94:	ee30 7a67 	vsub.f32	s14, s0, s15
 810fe98:	ed84 7a00 	vstr	s14, [r4]
 810fe9c:	e7b4      	b.n	810fe08 <__ieee754_rem_pio2f+0xec>
 810fe9e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 810fea2:	db06      	blt.n	810feb2 <__ieee754_rem_pio2f+0x196>
 810fea4:	ee70 7a40 	vsub.f32	s15, s0, s0
 810fea8:	edc0 7a01 	vstr	s15, [r0, #4]
 810feac:	edc0 7a00 	vstr	s15, [r0]
 810feb0:	e742      	b.n	810fd38 <__ieee754_rem_pio2f+0x1c>
 810feb2:	15ea      	asrs	r2, r5, #23
 810feb4:	3a86      	subs	r2, #134	; 0x86
 810feb6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 810feba:	ee07 3a90 	vmov	s15, r3
 810febe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 810fec2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 810ff6c <__ieee754_rem_pio2f+0x250>
 810fec6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810feca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fece:	ed8d 7a03 	vstr	s14, [sp, #12]
 810fed2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810fed6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 810feda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810fede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fee2:	ed8d 7a04 	vstr	s14, [sp, #16]
 810fee6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810feea:	eef5 7a40 	vcmp.f32	s15, #0.0
 810feee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fef2:	edcd 7a05 	vstr	s15, [sp, #20]
 810fef6:	d11e      	bne.n	810ff36 <__ieee754_rem_pio2f+0x21a>
 810fef8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810fefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ff00:	bf14      	ite	ne
 810ff02:	2302      	movne	r3, #2
 810ff04:	2301      	moveq	r3, #1
 810ff06:	491a      	ldr	r1, [pc, #104]	; (810ff70 <__ieee754_rem_pio2f+0x254>)
 810ff08:	9101      	str	r1, [sp, #4]
 810ff0a:	2102      	movs	r1, #2
 810ff0c:	9100      	str	r1, [sp, #0]
 810ff0e:	a803      	add	r0, sp, #12
 810ff10:	4621      	mov	r1, r4
 810ff12:	f000 f895 	bl	8110040 <__kernel_rem_pio2f>
 810ff16:	2e00      	cmp	r6, #0
 810ff18:	f6bf af31 	bge.w	810fd7e <__ieee754_rem_pio2f+0x62>
 810ff1c:	edd4 7a00 	vldr	s15, [r4]
 810ff20:	eef1 7a67 	vneg.f32	s15, s15
 810ff24:	edc4 7a00 	vstr	s15, [r4]
 810ff28:	edd4 7a01 	vldr	s15, [r4, #4]
 810ff2c:	eef1 7a67 	vneg.f32	s15, s15
 810ff30:	edc4 7a01 	vstr	s15, [r4, #4]
 810ff34:	e77a      	b.n	810fe2c <__ieee754_rem_pio2f+0x110>
 810ff36:	2303      	movs	r3, #3
 810ff38:	e7e5      	b.n	810ff06 <__ieee754_rem_pio2f+0x1ea>
 810ff3a:	bf00      	nop
 810ff3c:	3f490fd8 	.word	0x3f490fd8
 810ff40:	4016cbe3 	.word	0x4016cbe3
 810ff44:	3fc90f80 	.word	0x3fc90f80
 810ff48:	3fc90fd0 	.word	0x3fc90fd0
 810ff4c:	37354400 	.word	0x37354400
 810ff50:	37354443 	.word	0x37354443
 810ff54:	2e85a308 	.word	0x2e85a308
 810ff58:	43490f80 	.word	0x43490f80
 810ff5c:	3f22f984 	.word	0x3f22f984
 810ff60:	081ec6f8 	.word	0x081ec6f8
 810ff64:	2e85a300 	.word	0x2e85a300
 810ff68:	248d3132 	.word	0x248d3132
 810ff6c:	43800000 	.word	0x43800000
 810ff70:	081ec778 	.word	0x081ec778

0810ff74 <scalbnf>:
 810ff74:	ee10 3a10 	vmov	r3, s0
 810ff78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810ff7c:	d02b      	beq.n	810ffd6 <scalbnf+0x62>
 810ff7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810ff82:	d302      	bcc.n	810ff8a <scalbnf+0x16>
 810ff84:	ee30 0a00 	vadd.f32	s0, s0, s0
 810ff88:	4770      	bx	lr
 810ff8a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 810ff8e:	d123      	bne.n	810ffd8 <scalbnf+0x64>
 810ff90:	4b24      	ldr	r3, [pc, #144]	; (8110024 <scalbnf+0xb0>)
 810ff92:	eddf 7a25 	vldr	s15, [pc, #148]	; 8110028 <scalbnf+0xb4>
 810ff96:	4298      	cmp	r0, r3
 810ff98:	ee20 0a27 	vmul.f32	s0, s0, s15
 810ff9c:	db17      	blt.n	810ffce <scalbnf+0x5a>
 810ff9e:	ee10 3a10 	vmov	r3, s0
 810ffa2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810ffa6:	3a19      	subs	r2, #25
 810ffa8:	f24c 3150 	movw	r1, #50000	; 0xc350
 810ffac:	4288      	cmp	r0, r1
 810ffae:	dd15      	ble.n	810ffdc <scalbnf+0x68>
 810ffb0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 811002c <scalbnf+0xb8>
 810ffb4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8110030 <scalbnf+0xbc>
 810ffb8:	ee10 3a10 	vmov	r3, s0
 810ffbc:	eeb0 7a67 	vmov.f32	s14, s15
 810ffc0:	2b00      	cmp	r3, #0
 810ffc2:	bfb8      	it	lt
 810ffc4:	eef0 7a66 	vmovlt.f32	s15, s13
 810ffc8:	ee27 0a87 	vmul.f32	s0, s15, s14
 810ffcc:	4770      	bx	lr
 810ffce:	eddf 7a19 	vldr	s15, [pc, #100]	; 8110034 <scalbnf+0xc0>
 810ffd2:	ee27 0a80 	vmul.f32	s0, s15, s0
 810ffd6:	4770      	bx	lr
 810ffd8:	0dd2      	lsrs	r2, r2, #23
 810ffda:	e7e5      	b.n	810ffa8 <scalbnf+0x34>
 810ffdc:	4410      	add	r0, r2
 810ffde:	28fe      	cmp	r0, #254	; 0xfe
 810ffe0:	dce6      	bgt.n	810ffb0 <scalbnf+0x3c>
 810ffe2:	2800      	cmp	r0, #0
 810ffe4:	dd06      	ble.n	810fff4 <scalbnf+0x80>
 810ffe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810ffea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810ffee:	ee00 3a10 	vmov	s0, r3
 810fff2:	4770      	bx	lr
 810fff4:	f110 0f16 	cmn.w	r0, #22
 810fff8:	da09      	bge.n	811000e <scalbnf+0x9a>
 810fffa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8110034 <scalbnf+0xc0>
 810fffe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8110038 <scalbnf+0xc4>
 8110002:	ee10 3a10 	vmov	r3, s0
 8110006:	eeb0 7a67 	vmov.f32	s14, s15
 811000a:	2b00      	cmp	r3, #0
 811000c:	e7d9      	b.n	810ffc2 <scalbnf+0x4e>
 811000e:	3019      	adds	r0, #25
 8110010:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8110014:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8110018:	ed9f 0a08 	vldr	s0, [pc, #32]	; 811003c <scalbnf+0xc8>
 811001c:	ee07 3a90 	vmov	s15, r3
 8110020:	e7d7      	b.n	810ffd2 <scalbnf+0x5e>
 8110022:	bf00      	nop
 8110024:	ffff3cb0 	.word	0xffff3cb0
 8110028:	4c000000 	.word	0x4c000000
 811002c:	7149f2ca 	.word	0x7149f2ca
 8110030:	f149f2ca 	.word	0xf149f2ca
 8110034:	0da24260 	.word	0x0da24260
 8110038:	8da24260 	.word	0x8da24260
 811003c:	33000000 	.word	0x33000000

08110040 <__kernel_rem_pio2f>:
 8110040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110044:	ed2d 8b04 	vpush	{d8-d9}
 8110048:	b0d9      	sub	sp, #356	; 0x164
 811004a:	4688      	mov	r8, r1
 811004c:	9002      	str	r0, [sp, #8]
 811004e:	49b8      	ldr	r1, [pc, #736]	; (8110330 <__kernel_rem_pio2f+0x2f0>)
 8110050:	9866      	ldr	r0, [sp, #408]	; 0x198
 8110052:	9301      	str	r3, [sp, #4]
 8110054:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8110058:	9901      	ldr	r1, [sp, #4]
 811005a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 811005c:	f101 3bff 	add.w	fp, r1, #4294967295
 8110060:	1d11      	adds	r1, r2, #4
 8110062:	db25      	blt.n	81100b0 <__kernel_rem_pio2f+0x70>
 8110064:	1ed0      	subs	r0, r2, #3
 8110066:	bf48      	it	mi
 8110068:	1d10      	addmi	r0, r2, #4
 811006a:	10c0      	asrs	r0, r0, #3
 811006c:	1c45      	adds	r5, r0, #1
 811006e:	00e9      	lsls	r1, r5, #3
 8110070:	eba0 070b 	sub.w	r7, r0, fp
 8110074:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8110340 <__kernel_rem_pio2f+0x300>
 8110078:	9103      	str	r1, [sp, #12]
 811007a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 811007e:	eb0a 0c0b 	add.w	ip, sl, fp
 8110082:	ae1c      	add	r6, sp, #112	; 0x70
 8110084:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8110088:	2400      	movs	r4, #0
 811008a:	4564      	cmp	r4, ip
 811008c:	dd12      	ble.n	81100b4 <__kernel_rem_pio2f+0x74>
 811008e:	9901      	ldr	r1, [sp, #4]
 8110090:	ac1c      	add	r4, sp, #112	; 0x70
 8110092:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8110096:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 811009a:	f04f 0c00 	mov.w	ip, #0
 811009e:	45d4      	cmp	ip, sl
 81100a0:	dc27      	bgt.n	81100f2 <__kernel_rem_pio2f+0xb2>
 81100a2:	f8dd e008 	ldr.w	lr, [sp, #8]
 81100a6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8110340 <__kernel_rem_pio2f+0x300>
 81100aa:	4627      	mov	r7, r4
 81100ac:	2600      	movs	r6, #0
 81100ae:	e016      	b.n	81100de <__kernel_rem_pio2f+0x9e>
 81100b0:	2000      	movs	r0, #0
 81100b2:	e7db      	b.n	811006c <__kernel_rem_pio2f+0x2c>
 81100b4:	42e7      	cmn	r7, r4
 81100b6:	bf5d      	ittte	pl
 81100b8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 81100bc:	ee07 1a90 	vmovpl	s15, r1
 81100c0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 81100c4:	eef0 7a47 	vmovmi.f32	s15, s14
 81100c8:	ece6 7a01 	vstmia	r6!, {s15}
 81100cc:	3401      	adds	r4, #1
 81100ce:	e7dc      	b.n	811008a <__kernel_rem_pio2f+0x4a>
 81100d0:	ecfe 6a01 	vldmia	lr!, {s13}
 81100d4:	ed97 7a00 	vldr	s14, [r7]
 81100d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 81100dc:	3601      	adds	r6, #1
 81100de:	455e      	cmp	r6, fp
 81100e0:	f1a7 0704 	sub.w	r7, r7, #4
 81100e4:	ddf4      	ble.n	81100d0 <__kernel_rem_pio2f+0x90>
 81100e6:	ece9 7a01 	vstmia	r9!, {s15}
 81100ea:	f10c 0c01 	add.w	ip, ip, #1
 81100ee:	3404      	adds	r4, #4
 81100f0:	e7d5      	b.n	811009e <__kernel_rem_pio2f+0x5e>
 81100f2:	a908      	add	r1, sp, #32
 81100f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 81100f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 81100fc:	eddf 8a8f 	vldr	s17, [pc, #572]	; 811033c <__kernel_rem_pio2f+0x2fc>
 8110100:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8110338 <__kernel_rem_pio2f+0x2f8>
 8110104:	9105      	str	r1, [sp, #20]
 8110106:	9304      	str	r3, [sp, #16]
 8110108:	4656      	mov	r6, sl
 811010a:	00b3      	lsls	r3, r6, #2
 811010c:	9306      	str	r3, [sp, #24]
 811010e:	ab58      	add	r3, sp, #352	; 0x160
 8110110:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8110114:	ac08      	add	r4, sp, #32
 8110116:	ab44      	add	r3, sp, #272	; 0x110
 8110118:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 811011c:	46a4      	mov	ip, r4
 811011e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8110122:	4637      	mov	r7, r6
 8110124:	2f00      	cmp	r7, #0
 8110126:	f1a0 0004 	sub.w	r0, r0, #4
 811012a:	dc4a      	bgt.n	81101c2 <__kernel_rem_pio2f+0x182>
 811012c:	4628      	mov	r0, r5
 811012e:	9207      	str	r2, [sp, #28]
 8110130:	f7ff ff20 	bl	810ff74 <scalbnf>
 8110134:	eeb0 8a40 	vmov.f32	s16, s0
 8110138:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 811013c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8110140:	f7ff f822 	bl	810f188 <floorf>
 8110144:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8110148:	eea0 8a67 	vfms.f32	s16, s0, s15
 811014c:	2d00      	cmp	r5, #0
 811014e:	9a07      	ldr	r2, [sp, #28]
 8110150:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8110154:	ee17 9a90 	vmov	r9, s15
 8110158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 811015c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8110160:	dd41      	ble.n	81101e6 <__kernel_rem_pio2f+0x1a6>
 8110162:	f106 3cff 	add.w	ip, r6, #4294967295
 8110166:	ab08      	add	r3, sp, #32
 8110168:	f1c5 0e08 	rsb	lr, r5, #8
 811016c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8110170:	fa47 f00e 	asr.w	r0, r7, lr
 8110174:	4481      	add	r9, r0
 8110176:	fa00 f00e 	lsl.w	r0, r0, lr
 811017a:	1a3f      	subs	r7, r7, r0
 811017c:	f1c5 0007 	rsb	r0, r5, #7
 8110180:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8110184:	4107      	asrs	r7, r0
 8110186:	2f00      	cmp	r7, #0
 8110188:	dd3c      	ble.n	8110204 <__kernel_rem_pio2f+0x1c4>
 811018a:	f04f 0e00 	mov.w	lr, #0
 811018e:	f109 0901 	add.w	r9, r9, #1
 8110192:	4671      	mov	r1, lr
 8110194:	4576      	cmp	r6, lr
 8110196:	dc67      	bgt.n	8110268 <__kernel_rem_pio2f+0x228>
 8110198:	2d00      	cmp	r5, #0
 811019a:	dd03      	ble.n	81101a4 <__kernel_rem_pio2f+0x164>
 811019c:	2d01      	cmp	r5, #1
 811019e:	d074      	beq.n	811028a <__kernel_rem_pio2f+0x24a>
 81101a0:	2d02      	cmp	r5, #2
 81101a2:	d07b      	beq.n	811029c <__kernel_rem_pio2f+0x25c>
 81101a4:	2f02      	cmp	r7, #2
 81101a6:	d12d      	bne.n	8110204 <__kernel_rem_pio2f+0x1c4>
 81101a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 81101ac:	ee30 8a48 	vsub.f32	s16, s0, s16
 81101b0:	b341      	cbz	r1, 8110204 <__kernel_rem_pio2f+0x1c4>
 81101b2:	4628      	mov	r0, r5
 81101b4:	9207      	str	r2, [sp, #28]
 81101b6:	f7ff fedd 	bl	810ff74 <scalbnf>
 81101ba:	9a07      	ldr	r2, [sp, #28]
 81101bc:	ee38 8a40 	vsub.f32	s16, s16, s0
 81101c0:	e020      	b.n	8110204 <__kernel_rem_pio2f+0x1c4>
 81101c2:	ee60 7a28 	vmul.f32	s15, s0, s17
 81101c6:	3f01      	subs	r7, #1
 81101c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 81101cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81101d0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 81101d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 81101d8:	ecac 0a01 	vstmia	ip!, {s0}
 81101dc:	ed90 0a00 	vldr	s0, [r0]
 81101e0:	ee37 0a80 	vadd.f32	s0, s15, s0
 81101e4:	e79e      	b.n	8110124 <__kernel_rem_pio2f+0xe4>
 81101e6:	d105      	bne.n	81101f4 <__kernel_rem_pio2f+0x1b4>
 81101e8:	1e70      	subs	r0, r6, #1
 81101ea:	ab08      	add	r3, sp, #32
 81101ec:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 81101f0:	11ff      	asrs	r7, r7, #7
 81101f2:	e7c8      	b.n	8110186 <__kernel_rem_pio2f+0x146>
 81101f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 81101f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 81101fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8110200:	da30      	bge.n	8110264 <__kernel_rem_pio2f+0x224>
 8110202:	2700      	movs	r7, #0
 8110204:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8110208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 811020c:	f040 809a 	bne.w	8110344 <__kernel_rem_pio2f+0x304>
 8110210:	1e74      	subs	r4, r6, #1
 8110212:	46a4      	mov	ip, r4
 8110214:	2100      	movs	r1, #0
 8110216:	45d4      	cmp	ip, sl
 8110218:	da47      	bge.n	81102aa <__kernel_rem_pio2f+0x26a>
 811021a:	2900      	cmp	r1, #0
 811021c:	d063      	beq.n	81102e6 <__kernel_rem_pio2f+0x2a6>
 811021e:	ab08      	add	r3, sp, #32
 8110220:	3d08      	subs	r5, #8
 8110222:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8110226:	2b00      	cmp	r3, #0
 8110228:	d07f      	beq.n	811032a <__kernel_rem_pio2f+0x2ea>
 811022a:	4628      	mov	r0, r5
 811022c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8110230:	f7ff fea0 	bl	810ff74 <scalbnf>
 8110234:	1c63      	adds	r3, r4, #1
 8110236:	aa44      	add	r2, sp, #272	; 0x110
 8110238:	ed9f 7a40 	vldr	s14, [pc, #256]	; 811033c <__kernel_rem_pio2f+0x2fc>
 811023c:	0099      	lsls	r1, r3, #2
 811023e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8110242:	4623      	mov	r3, r4
 8110244:	2b00      	cmp	r3, #0
 8110246:	f280 80ad 	bge.w	81103a4 <__kernel_rem_pio2f+0x364>
 811024a:	4623      	mov	r3, r4
 811024c:	2b00      	cmp	r3, #0
 811024e:	f2c0 80cb 	blt.w	81103e8 <__kernel_rem_pio2f+0x3a8>
 8110252:	aa44      	add	r2, sp, #272	; 0x110
 8110254:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8110258:	4e36      	ldr	r6, [pc, #216]	; (8110334 <__kernel_rem_pio2f+0x2f4>)
 811025a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8110340 <__kernel_rem_pio2f+0x300>
 811025e:	2000      	movs	r0, #0
 8110260:	1ae2      	subs	r2, r4, r3
 8110262:	e0b6      	b.n	81103d2 <__kernel_rem_pio2f+0x392>
 8110264:	2702      	movs	r7, #2
 8110266:	e790      	b.n	811018a <__kernel_rem_pio2f+0x14a>
 8110268:	6820      	ldr	r0, [r4, #0]
 811026a:	b949      	cbnz	r1, 8110280 <__kernel_rem_pio2f+0x240>
 811026c:	b118      	cbz	r0, 8110276 <__kernel_rem_pio2f+0x236>
 811026e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8110272:	6020      	str	r0, [r4, #0]
 8110274:	2001      	movs	r0, #1
 8110276:	f10e 0e01 	add.w	lr, lr, #1
 811027a:	3404      	adds	r4, #4
 811027c:	4601      	mov	r1, r0
 811027e:	e789      	b.n	8110194 <__kernel_rem_pio2f+0x154>
 8110280:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8110284:	6020      	str	r0, [r4, #0]
 8110286:	4608      	mov	r0, r1
 8110288:	e7f5      	b.n	8110276 <__kernel_rem_pio2f+0x236>
 811028a:	1e74      	subs	r4, r6, #1
 811028c:	ab08      	add	r3, sp, #32
 811028e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8110292:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8110296:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 811029a:	e783      	b.n	81101a4 <__kernel_rem_pio2f+0x164>
 811029c:	1e74      	subs	r4, r6, #1
 811029e:	ab08      	add	r3, sp, #32
 81102a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 81102a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 81102a8:	e7f5      	b.n	8110296 <__kernel_rem_pio2f+0x256>
 81102aa:	ab08      	add	r3, sp, #32
 81102ac:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 81102b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 81102b4:	4301      	orrs	r1, r0
 81102b6:	e7ae      	b.n	8110216 <__kernel_rem_pio2f+0x1d6>
 81102b8:	3001      	adds	r0, #1
 81102ba:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 81102be:	2f00      	cmp	r7, #0
 81102c0:	d0fa      	beq.n	81102b8 <__kernel_rem_pio2f+0x278>
 81102c2:	9b06      	ldr	r3, [sp, #24]
 81102c4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 81102c8:	eb0d 0403 	add.w	r4, sp, r3
 81102cc:	9b01      	ldr	r3, [sp, #4]
 81102ce:	18f7      	adds	r7, r6, r3
 81102d0:	ab1c      	add	r3, sp, #112	; 0x70
 81102d2:	f106 0c01 	add.w	ip, r6, #1
 81102d6:	3c4c      	subs	r4, #76	; 0x4c
 81102d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 81102dc:	4430      	add	r0, r6
 81102de:	4560      	cmp	r0, ip
 81102e0:	da04      	bge.n	81102ec <__kernel_rem_pio2f+0x2ac>
 81102e2:	4606      	mov	r6, r0
 81102e4:	e711      	b.n	811010a <__kernel_rem_pio2f+0xca>
 81102e6:	9c05      	ldr	r4, [sp, #20]
 81102e8:	2001      	movs	r0, #1
 81102ea:	e7e6      	b.n	81102ba <__kernel_rem_pio2f+0x27a>
 81102ec:	9b04      	ldr	r3, [sp, #16]
 81102ee:	f8dd e008 	ldr.w	lr, [sp, #8]
 81102f2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 81102f6:	9306      	str	r3, [sp, #24]
 81102f8:	ee07 3a90 	vmov	s15, r3
 81102fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8110300:	2600      	movs	r6, #0
 8110302:	ece7 7a01 	vstmia	r7!, {s15}
 8110306:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8110340 <__kernel_rem_pio2f+0x300>
 811030a:	46b9      	mov	r9, r7
 811030c:	455e      	cmp	r6, fp
 811030e:	dd04      	ble.n	811031a <__kernel_rem_pio2f+0x2da>
 8110310:	ece4 7a01 	vstmia	r4!, {s15}
 8110314:	f10c 0c01 	add.w	ip, ip, #1
 8110318:	e7e1      	b.n	81102de <__kernel_rem_pio2f+0x29e>
 811031a:	ecfe 6a01 	vldmia	lr!, {s13}
 811031e:	ed39 7a01 	vldmdb	r9!, {s14}
 8110322:	3601      	adds	r6, #1
 8110324:	eee6 7a87 	vfma.f32	s15, s13, s14
 8110328:	e7f0      	b.n	811030c <__kernel_rem_pio2f+0x2cc>
 811032a:	3c01      	subs	r4, #1
 811032c:	e777      	b.n	811021e <__kernel_rem_pio2f+0x1de>
 811032e:	bf00      	nop
 8110330:	081ecabc 	.word	0x081ecabc
 8110334:	081eca90 	.word	0x081eca90
 8110338:	43800000 	.word	0x43800000
 811033c:	3b800000 	.word	0x3b800000
 8110340:	00000000 	.word	0x00000000
 8110344:	9b03      	ldr	r3, [sp, #12]
 8110346:	eeb0 0a48 	vmov.f32	s0, s16
 811034a:	1a98      	subs	r0, r3, r2
 811034c:	f7ff fe12 	bl	810ff74 <scalbnf>
 8110350:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8110338 <__kernel_rem_pio2f+0x2f8>
 8110354:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8110358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 811035c:	db19      	blt.n	8110392 <__kernel_rem_pio2f+0x352>
 811035e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 811033c <__kernel_rem_pio2f+0x2fc>
 8110362:	ee60 7a27 	vmul.f32	s15, s0, s15
 8110366:	aa08      	add	r2, sp, #32
 8110368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 811036c:	1c74      	adds	r4, r6, #1
 811036e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8110372:	3508      	adds	r5, #8
 8110374:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8110378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 811037c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8110380:	ee10 3a10 	vmov	r3, s0
 8110384:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8110388:	ee17 3a90 	vmov	r3, s15
 811038c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8110390:	e74b      	b.n	811022a <__kernel_rem_pio2f+0x1ea>
 8110392:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8110396:	aa08      	add	r2, sp, #32
 8110398:	ee10 3a10 	vmov	r3, s0
 811039c:	4634      	mov	r4, r6
 811039e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 81103a2:	e742      	b.n	811022a <__kernel_rem_pio2f+0x1ea>
 81103a4:	a808      	add	r0, sp, #32
 81103a6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 81103aa:	9001      	str	r0, [sp, #4]
 81103ac:	ee07 0a90 	vmov	s15, r0
 81103b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81103b4:	3b01      	subs	r3, #1
 81103b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 81103ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 81103be:	ed62 7a01 	vstmdb	r2!, {s15}
 81103c2:	e73f      	b.n	8110244 <__kernel_rem_pio2f+0x204>
 81103c4:	ecf6 6a01 	vldmia	r6!, {s13}
 81103c8:	ecb5 7a01 	vldmia	r5!, {s14}
 81103cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 81103d0:	3001      	adds	r0, #1
 81103d2:	4550      	cmp	r0, sl
 81103d4:	dc01      	bgt.n	81103da <__kernel_rem_pio2f+0x39a>
 81103d6:	4290      	cmp	r0, r2
 81103d8:	ddf4      	ble.n	81103c4 <__kernel_rem_pio2f+0x384>
 81103da:	a858      	add	r0, sp, #352	; 0x160
 81103dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 81103e0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 81103e4:	3b01      	subs	r3, #1
 81103e6:	e731      	b.n	811024c <__kernel_rem_pio2f+0x20c>
 81103e8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 81103ea:	2b02      	cmp	r3, #2
 81103ec:	dc09      	bgt.n	8110402 <__kernel_rem_pio2f+0x3c2>
 81103ee:	2b00      	cmp	r3, #0
 81103f0:	dc2b      	bgt.n	811044a <__kernel_rem_pio2f+0x40a>
 81103f2:	d044      	beq.n	811047e <__kernel_rem_pio2f+0x43e>
 81103f4:	f009 0007 	and.w	r0, r9, #7
 81103f8:	b059      	add	sp, #356	; 0x164
 81103fa:	ecbd 8b04 	vpop	{d8-d9}
 81103fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8110402:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8110404:	2b03      	cmp	r3, #3
 8110406:	d1f5      	bne.n	81103f4 <__kernel_rem_pio2f+0x3b4>
 8110408:	aa30      	add	r2, sp, #192	; 0xc0
 811040a:	1f0b      	subs	r3, r1, #4
 811040c:	4413      	add	r3, r2
 811040e:	461a      	mov	r2, r3
 8110410:	4620      	mov	r0, r4
 8110412:	2800      	cmp	r0, #0
 8110414:	f1a2 0204 	sub.w	r2, r2, #4
 8110418:	dc52      	bgt.n	81104c0 <__kernel_rem_pio2f+0x480>
 811041a:	4622      	mov	r2, r4
 811041c:	2a01      	cmp	r2, #1
 811041e:	f1a3 0304 	sub.w	r3, r3, #4
 8110422:	dc5d      	bgt.n	81104e0 <__kernel_rem_pio2f+0x4a0>
 8110424:	ab30      	add	r3, sp, #192	; 0xc0
 8110426:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8110340 <__kernel_rem_pio2f+0x300>
 811042a:	440b      	add	r3, r1
 811042c:	2c01      	cmp	r4, #1
 811042e:	dc67      	bgt.n	8110500 <__kernel_rem_pio2f+0x4c0>
 8110430:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8110434:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8110438:	2f00      	cmp	r7, #0
 811043a:	d167      	bne.n	811050c <__kernel_rem_pio2f+0x4cc>
 811043c:	edc8 6a00 	vstr	s13, [r8]
 8110440:	ed88 7a01 	vstr	s14, [r8, #4]
 8110444:	edc8 7a02 	vstr	s15, [r8, #8]
 8110448:	e7d4      	b.n	81103f4 <__kernel_rem_pio2f+0x3b4>
 811044a:	ab30      	add	r3, sp, #192	; 0xc0
 811044c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8110340 <__kernel_rem_pio2f+0x300>
 8110450:	440b      	add	r3, r1
 8110452:	4622      	mov	r2, r4
 8110454:	2a00      	cmp	r2, #0
 8110456:	da24      	bge.n	81104a2 <__kernel_rem_pio2f+0x462>
 8110458:	b34f      	cbz	r7, 81104ae <__kernel_rem_pio2f+0x46e>
 811045a:	eef1 7a47 	vneg.f32	s15, s14
 811045e:	edc8 7a00 	vstr	s15, [r8]
 8110462:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8110466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 811046a:	aa31      	add	r2, sp, #196	; 0xc4
 811046c:	2301      	movs	r3, #1
 811046e:	429c      	cmp	r4, r3
 8110470:	da20      	bge.n	81104b4 <__kernel_rem_pio2f+0x474>
 8110472:	b10f      	cbz	r7, 8110478 <__kernel_rem_pio2f+0x438>
 8110474:	eef1 7a67 	vneg.f32	s15, s15
 8110478:	edc8 7a01 	vstr	s15, [r8, #4]
 811047c:	e7ba      	b.n	81103f4 <__kernel_rem_pio2f+0x3b4>
 811047e:	ab30      	add	r3, sp, #192	; 0xc0
 8110480:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8110340 <__kernel_rem_pio2f+0x300>
 8110484:	440b      	add	r3, r1
 8110486:	2c00      	cmp	r4, #0
 8110488:	da05      	bge.n	8110496 <__kernel_rem_pio2f+0x456>
 811048a:	b10f      	cbz	r7, 8110490 <__kernel_rem_pio2f+0x450>
 811048c:	eef1 7a67 	vneg.f32	s15, s15
 8110490:	edc8 7a00 	vstr	s15, [r8]
 8110494:	e7ae      	b.n	81103f4 <__kernel_rem_pio2f+0x3b4>
 8110496:	ed33 7a01 	vldmdb	r3!, {s14}
 811049a:	3c01      	subs	r4, #1
 811049c:	ee77 7a87 	vadd.f32	s15, s15, s14
 81104a0:	e7f1      	b.n	8110486 <__kernel_rem_pio2f+0x446>
 81104a2:	ed73 7a01 	vldmdb	r3!, {s15}
 81104a6:	3a01      	subs	r2, #1
 81104a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 81104ac:	e7d2      	b.n	8110454 <__kernel_rem_pio2f+0x414>
 81104ae:	eef0 7a47 	vmov.f32	s15, s14
 81104b2:	e7d4      	b.n	811045e <__kernel_rem_pio2f+0x41e>
 81104b4:	ecb2 7a01 	vldmia	r2!, {s14}
 81104b8:	3301      	adds	r3, #1
 81104ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 81104be:	e7d6      	b.n	811046e <__kernel_rem_pio2f+0x42e>
 81104c0:	edd2 7a00 	vldr	s15, [r2]
 81104c4:	edd2 6a01 	vldr	s13, [r2, #4]
 81104c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 81104cc:	3801      	subs	r0, #1
 81104ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81104d2:	ed82 7a00 	vstr	s14, [r2]
 81104d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81104da:	edc2 7a01 	vstr	s15, [r2, #4]
 81104de:	e798      	b.n	8110412 <__kernel_rem_pio2f+0x3d2>
 81104e0:	edd3 7a00 	vldr	s15, [r3]
 81104e4:	edd3 6a01 	vldr	s13, [r3, #4]
 81104e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 81104ec:	3a01      	subs	r2, #1
 81104ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81104f2:	ed83 7a00 	vstr	s14, [r3]
 81104f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81104fa:	edc3 7a01 	vstr	s15, [r3, #4]
 81104fe:	e78d      	b.n	811041c <__kernel_rem_pio2f+0x3dc>
 8110500:	ed33 7a01 	vldmdb	r3!, {s14}
 8110504:	3c01      	subs	r4, #1
 8110506:	ee77 7a87 	vadd.f32	s15, s15, s14
 811050a:	e78f      	b.n	811042c <__kernel_rem_pio2f+0x3ec>
 811050c:	eef1 6a66 	vneg.f32	s13, s13
 8110510:	eeb1 7a47 	vneg.f32	s14, s14
 8110514:	edc8 6a00 	vstr	s13, [r8]
 8110518:	ed88 7a01 	vstr	s14, [r8, #4]
 811051c:	eef1 7a67 	vneg.f32	s15, s15
 8110520:	e790      	b.n	8110444 <__kernel_rem_pio2f+0x404>
 8110522:	bf00      	nop

08110524 <_close>:
 8110524:	4b02      	ldr	r3, [pc, #8]	; (8110530 <_close+0xc>)
 8110526:	2258      	movs	r2, #88	; 0x58
 8110528:	601a      	str	r2, [r3, #0]
 811052a:	f04f 30ff 	mov.w	r0, #4294967295
 811052e:	4770      	bx	lr
 8110530:	1001ac74 	.word	0x1001ac74

08110534 <_fstat>:
 8110534:	4b02      	ldr	r3, [pc, #8]	; (8110540 <_fstat+0xc>)
 8110536:	2258      	movs	r2, #88	; 0x58
 8110538:	601a      	str	r2, [r3, #0]
 811053a:	f04f 30ff 	mov.w	r0, #4294967295
 811053e:	4770      	bx	lr
 8110540:	1001ac74 	.word	0x1001ac74

08110544 <_getpid>:
 8110544:	4b02      	ldr	r3, [pc, #8]	; (8110550 <_getpid+0xc>)
 8110546:	2258      	movs	r2, #88	; 0x58
 8110548:	601a      	str	r2, [r3, #0]
 811054a:	f04f 30ff 	mov.w	r0, #4294967295
 811054e:	4770      	bx	lr
 8110550:	1001ac74 	.word	0x1001ac74

08110554 <_isatty>:
 8110554:	4b02      	ldr	r3, [pc, #8]	; (8110560 <_isatty+0xc>)
 8110556:	2258      	movs	r2, #88	; 0x58
 8110558:	601a      	str	r2, [r3, #0]
 811055a:	2000      	movs	r0, #0
 811055c:	4770      	bx	lr
 811055e:	bf00      	nop
 8110560:	1001ac74 	.word	0x1001ac74

08110564 <_kill>:
 8110564:	4b02      	ldr	r3, [pc, #8]	; (8110570 <_kill+0xc>)
 8110566:	2258      	movs	r2, #88	; 0x58
 8110568:	601a      	str	r2, [r3, #0]
 811056a:	f04f 30ff 	mov.w	r0, #4294967295
 811056e:	4770      	bx	lr
 8110570:	1001ac74 	.word	0x1001ac74

08110574 <_lseek>:
 8110574:	4b02      	ldr	r3, [pc, #8]	; (8110580 <_lseek+0xc>)
 8110576:	2258      	movs	r2, #88	; 0x58
 8110578:	601a      	str	r2, [r3, #0]
 811057a:	f04f 30ff 	mov.w	r0, #4294967295
 811057e:	4770      	bx	lr
 8110580:	1001ac74 	.word	0x1001ac74

08110584 <_read>:
 8110584:	4b02      	ldr	r3, [pc, #8]	; (8110590 <_read+0xc>)
 8110586:	2258      	movs	r2, #88	; 0x58
 8110588:	601a      	str	r2, [r3, #0]
 811058a:	f04f 30ff 	mov.w	r0, #4294967295
 811058e:	4770      	bx	lr
 8110590:	1001ac74 	.word	0x1001ac74

08110594 <_write>:
 8110594:	4b02      	ldr	r3, [pc, #8]	; (81105a0 <_write+0xc>)
 8110596:	2258      	movs	r2, #88	; 0x58
 8110598:	601a      	str	r2, [r3, #0]
 811059a:	f04f 30ff 	mov.w	r0, #4294967295
 811059e:	4770      	bx	lr
 81105a0:	1001ac74 	.word	0x1001ac74

081105a4 <_exit>:
 81105a4:	e7fe      	b.n	81105a4 <_exit>
	...

081105a8 <_init>:
 81105a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81105aa:	bf00      	nop
 81105ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81105ae:	bc08      	pop	{r3}
 81105b0:	469e      	mov	lr, r3
 81105b2:	4770      	bx	lr

081105b4 <_fini>:
 81105b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81105b6:	bf00      	nop
 81105b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81105ba:	bc08      	pop	{r3}
 81105bc:	469e      	mov	lr, r3
 81105be:	4770      	bx	lr
