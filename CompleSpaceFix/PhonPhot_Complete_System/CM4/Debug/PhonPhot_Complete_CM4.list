
PhonPhot_Complete_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010328  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000dc508  081105e0  081105e0  000205e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081ecae8  081ecae8  000fcae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081ecaf0  081ecaf0  000fcaf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081ecaf4  081ecaf4  000fcaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b10  1000004c  081ecaf8  0010004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001a11c  10000b60  081ed608  00100b60  2**5
                  ALLOC
  8 ._user_heap_stack 00002004  1001ac7c  081ed608  0010ac7c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0011004c  2**0
                  CONTENTS, READONLY
 10 .comment      000000e6  00000000  00000000  0011007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028c08  00000000  00000000  00110162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000509f  00000000  00000000  00138d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000d76b  00000000  00000000  0013de09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0014b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cc  00000000  00000000  0014c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000407b6  00000000  00000000  0014ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b28f  00000000  00000000  0018e58a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a6baa  00000000  00000000  001b9819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00005360  00000000  00000000  003603c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .ipc_data     0000004c  10000000  10000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .debug_line_str 00000081  00000000  00000000  00365724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000b60 	.word	0x10000b60
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081105b0 	.word	0x081105b0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000b64 	.word	0x10000b64
 81002dc:	081105b0 	.word	0x081105b0

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b07      	ldr	r3, [pc, #28]	; (8101120 <SystemInit+0x20>)
 8101102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8101106:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 810110a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810110e:	691a      	ldr	r2, [r3, #16]
 8101110:	f042 0210 	orr.w	r2, r2, #16
 8101114:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101116:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810111a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101124:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101126:	2400      	movs	r4, #0
{
 8101128:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 810112a:	221c      	movs	r2, #28
 810112c:	4621      	mov	r1, r4
 810112e:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8101130:	e9cd 4400 	strd	r4, r4, [sp]
 8101134:	9402      	str	r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101136:	f00a fc0f 	bl	810b958 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810113a:	482d      	ldr	r0, [pc, #180]	; (81011f0 <MX_ADC1_Init+0xcc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 810113c:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 81011fc <MX_ADC1_Init+0xd8>
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101140:	8284      	strh	r4, [r0, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8101142:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101146:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8101148:	e9c0 e300 	strd	lr, r3, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810114c:	2304      	movs	r3, #4
 810114e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 3;
 8101152:	2303      	movs	r3, #3
 8101154:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101156:	f44f 6190 	mov.w	r1, #1152	; 0x480
 810115a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 810115e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8101160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101164:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101168:	e9c0 340c 	strd	r3, r4, [r0, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810116c:	6084      	str	r4, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810116e:	7704      	strb	r4, [r0, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8101170:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101174:	f002 f870 	bl	8103258 <HAL_ADC_Init>
 8101178:	b108      	cbz	r0, 810117e <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 810117a:	f001 f8eb 	bl	8102354 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810117e:	481c      	ldr	r0, [pc, #112]	; (81011f0 <MX_ADC1_Init+0xcc>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101180:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101182:	4669      	mov	r1, sp
 8101184:	f002 f97c 	bl	8103480 <HAL_ADCEx_MultiModeConfigChannel>
 8101188:	b108      	cbz	r0, 810118e <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 810118a:	f001 f8e3 	bl	8102354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810118e:	4819      	ldr	r0, [pc, #100]	; (81011f4 <MX_ADC1_Init+0xd0>)
 8101190:	2306      	movs	r3, #6
 8101192:	e9cd 0303 	strd	r0, r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101196:	2403      	movs	r4, #3
 8101198:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810119c:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 81011a0:	f04f 0c04 	mov.w	ip, #4
 81011a4:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011a6:	4812      	ldr	r0, [pc, #72]	; (81011f0 <MX_ADC1_Init+0xcc>)
  sConfig.OffsetSignedSaturation = DISABLE;
 81011a8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011ac:	a903      	add	r1, sp, #12
  sConfig.Offset = 0;
 81011ae:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011b2:	f001 fd8f 	bl	8102cd4 <HAL_ADC_ConfigChannel>
 81011b6:	b108      	cbz	r0, 81011bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 81011b8:	f001 f8cc 	bl	8102354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81011bc:	2101      	movs	r1, #1
 81011be:	230c      	movs	r3, #12
 81011c0:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011c4:	480a      	ldr	r0, [pc, #40]	; (81011f0 <MX_ADC1_Init+0xcc>)
 81011c6:	eb0d 0103 	add.w	r1, sp, r3
 81011ca:	f001 fd83 	bl	8102cd4 <HAL_ADC_ConfigChannel>
 81011ce:	b108      	cbz	r0, 81011d4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81011d0:	f001 f8c0 	bl	8102354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011d4:	4a08      	ldr	r2, [pc, #32]	; (81011f8 <MX_ADC1_Init+0xd4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011d6:	4806      	ldr	r0, [pc, #24]	; (81011f0 <MX_ADC1_Init+0xcc>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011d8:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011da:	a903      	add	r1, sp, #12
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011dc:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011e0:	f001 fd78 	bl	8102cd4 <HAL_ADC_ConfigChannel>
 81011e4:	b108      	cbz	r0, 81011ea <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 81011e6:	f001 f8b5 	bl	8102354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81011ea:	b00a      	add	sp, #40	; 0x28
 81011ec:	bd10      	pop	{r4, pc}
 81011ee:	bf00      	nop
 81011f0:	10000b7c 	.word	0x10000b7c
 81011f4:	2a000400 	.word	0x2a000400
 81011f8:	04300002 	.word	0x04300002
 81011fc:	40022000 	.word	0x40022000

08101200 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8101200:	b500      	push	{lr}
 8101202:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8101204:	221c      	movs	r2, #28
 8101206:	2100      	movs	r1, #0
 8101208:	a801      	add	r0, sp, #4
 810120a:	f00a fba5 	bl	810b958 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 810120e:	4828      	ldr	r0, [pc, #160]	; (81012b0 <MX_ADC3_Init+0xb0>)
 8101210:	4b28      	ldr	r3, [pc, #160]	; (81012b4 <MX_ADC3_Init+0xb4>)
 8101212:	6003      	str	r3, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8101214:	2201      	movs	r2, #1
 8101216:	2300      	movs	r3, #0
 8101218:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810121c:	2204      	movs	r2, #4
 810121e:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 3;
 8101220:	2203      	movs	r2, #3
 8101222:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101224:	f44f 6c90 	mov.w	ip, #1152	; 0x480
 8101228:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 810122c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc3.Init.LowPowerAutoWait = DISABLE;
 810122e:	8283      	strh	r3, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8101230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101234:	e9c0 c109 	strd	ip, r1, [r0, #36]	; 0x24
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101238:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 810123c:	7703      	strb	r3, [r0, #28]
  hadc3.Init.OversamplingMode = DISABLE;
 810123e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8101242:	f002 f809 	bl	8103258 <HAL_ADC_Init>
 8101246:	b108      	cbz	r0, 810124c <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8101248:	f001 f884 	bl	8102354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810124c:	481a      	ldr	r0, [pc, #104]	; (81012b8 <MX_ADC3_Init+0xb8>)
 810124e:	2306      	movs	r3, #6
 8101250:	e9cd 0301 	strd	r0, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101254:	f04f 0c03 	mov.w	ip, #3
 8101258:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810125c:	e9cd c303 	strd	ip, r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 8101260:	f04f 0e04 	mov.w	lr, #4
 8101264:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101266:	4812      	ldr	r0, [pc, #72]	; (81012b0 <MX_ADC3_Init+0xb0>)
  sConfig.OffsetSignedSaturation = DISABLE;
 8101268:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810126c:	a901      	add	r1, sp, #4
  sConfig.Offset = 0;
 810126e:	e9cd e305 	strd	lr, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101272:	f001 fd2f 	bl	8102cd4 <HAL_ADC_ConfigChannel>
 8101276:	b108      	cbz	r0, 810127c <MX_ADC3_Init+0x7c>
  {
    Error_Handler();
 8101278:	f001 f86c 	bl	8102354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 810127c:	2101      	movs	r1, #1
 810127e:	230c      	movs	r3, #12
 8101280:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101284:	480a      	ldr	r0, [pc, #40]	; (81012b0 <MX_ADC3_Init+0xb0>)
 8101286:	a901      	add	r1, sp, #4
 8101288:	f001 fd24 	bl	8102cd4 <HAL_ADC_ConfigChannel>
 810128c:	b108      	cbz	r0, 8101292 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 810128e:	f001 f861 	bl	8102354 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8101292:	4a0a      	ldr	r2, [pc, #40]	; (81012bc <MX_ADC3_Init+0xbc>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101294:	4806      	ldr	r0, [pc, #24]	; (81012b0 <MX_ADC3_Init+0xb0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8101296:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101298:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 810129a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810129e:	f001 fd19 	bl	8102cd4 <HAL_ADC_ConfigChannel>
 81012a2:	b108      	cbz	r0, 81012a8 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 81012a4:	f001 f856 	bl	8102354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81012a8:	b009      	add	sp, #36	; 0x24
 81012aa:	f85d fb04 	ldr.w	pc, [sp], #4
 81012ae:	bf00      	nop
 81012b0:	10000be0 	.word	0x10000be0
 81012b4:	58026000 	.word	0x58026000
 81012b8:	1d500080 	.word	0x1d500080
 81012bc:	04300002 	.word	0x04300002

081012c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81012c0:	b570      	push	{r4, r5, r6, lr}
 81012c2:	4605      	mov	r5, r0
 81012c4:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012c6:	2214      	movs	r2, #20
 81012c8:	2100      	movs	r1, #0
 81012ca:	a807      	add	r0, sp, #28
 81012cc:	f00a fb44 	bl	810b958 <memset>
  if(adcHandle->Instance==ADC1)
 81012d0:	682b      	ldr	r3, [r5, #0]
 81012d2:	4a55      	ldr	r2, [pc, #340]	; (8101428 <HAL_ADC_MspInit+0x168>)
 81012d4:	4293      	cmp	r3, r2
 81012d6:	d158      	bne.n	810138a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012d8:	4b54      	ldr	r3, [pc, #336]	; (810142c <HAL_ADC_MspInit+0x16c>)

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 81012da:	4c55      	ldr	r4, [pc, #340]	; (8101430 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012dc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 81012e0:	4e54      	ldr	r6, [pc, #336]	; (8101434 <HAL_ADC_MspInit+0x174>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012e2:	f042 0220 	orr.w	r2, r2, #32
 81012e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 81012ea:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 81012ee:	f002 0220 	and.w	r2, r2, #32
 81012f2:	9201      	str	r2, [sp, #4]
 81012f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81012f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81012fa:	f042 0204 	orr.w	r2, r2, #4
 81012fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101302:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101306:	f002 0204 	and.w	r2, r2, #4
 810130a:	9202      	str	r2, [sp, #8]
 810130c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810130e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101312:	f042 0201 	orr.w	r2, r2, #1
 8101316:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810131e:	f003 0301 	and.w	r3, r3, #1
 8101322:	9303      	str	r3, [sp, #12]
 8101324:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101326:	2001      	movs	r0, #1
 8101328:	2303      	movs	r3, #3
 810132a:	e9cd 0307 	strd	r0, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 810132e:	a907      	add	r1, sp, #28
 8101330:	4841      	ldr	r0, [pc, #260]	; (8101438 <HAL_ADC_MspInit+0x178>)
 8101332:	f003 f9f3 	bl	810471c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101336:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 810133a:	4608      	mov	r0, r1
 810133c:	f001 fca8 	bl	8102c90 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8101340:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8101344:	4608      	mov	r0, r1
 8101346:	f001 fca3 	bl	8102c90 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810134a:	2309      	movs	r3, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 810134c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101350:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8101354:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101358:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810135c:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 810135e:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
 8101362:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8101366:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 810136a:	e9c4 e206 	strd	lr, r2, [r4, #24]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 810136e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101372:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8101376:	4620      	mov	r0, r4
 8101378:	f002 fae8 	bl	810394c <HAL_DMA_Init>
 810137c:	b108      	cbz	r0, 8101382 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 810137e:	f000 ffe9 	bl	8102354 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8101382:	64ec      	str	r4, [r5, #76]	; 0x4c
 8101384:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8101386:	b00c      	add	sp, #48	; 0x30
 8101388:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC3)
 810138a:	4a2c      	ldr	r2, [pc, #176]	; (810143c <HAL_ADC_MspInit+0x17c>)
 810138c:	4293      	cmp	r3, r2
 810138e:	d1fa      	bne.n	8101386 <HAL_ADC_MspInit+0xc6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101390:	4b26      	ldr	r3, [pc, #152]	; (810142c <HAL_ADC_MspInit+0x16c>)
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 8101392:	482b      	ldr	r0, [pc, #172]	; (8101440 <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc3.Instance = DMA1_Stream1;
 8101398:	4c2a      	ldr	r4, [pc, #168]	; (8101444 <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 810139a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 810139e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013a6:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 81013aa:	9204      	str	r2, [sp, #16]
 81013ac:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81013ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013b2:	f042 0220 	orr.w	r2, r2, #32
 81013b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013be:	f002 0220 	and.w	r2, r2, #32
 81013c2:	9205      	str	r2, [sp, #20]
 81013c4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81013c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013ca:	f042 0204 	orr.w	r2, r2, #4
 81013ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d6:	f003 0304 	and.w	r3, r3, #4
 81013da:	9306      	str	r3, [sp, #24]
 81013dc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013de:	f44f 7680 	mov.w	r6, #256	; 0x100
 81013e2:	2303      	movs	r3, #3
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013e4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013e6:	e9cd 6307 	strd	r6, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013ea:	f003 f997 	bl	810471c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81013ee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 81013f2:	4608      	mov	r0, r1
 81013f4:	f001 fc4c 	bl	8102c90 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 81013fc:	4608      	mov	r0, r1
 81013fe:	f001 fc47 	bl	8102c90 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8101402:	4a11      	ldr	r2, [pc, #68]	; (8101448 <HAL_ADC_MspInit+0x188>)
 8101404:	2373      	movs	r3, #115	; 0x73
 8101406:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 810140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 810140e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101412:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101416:	2300      	movs	r3, #0
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8101418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 810141c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8101420:	e9c4 2606 	strd	r2, r6, [r4, #24]
 8101424:	e7a3      	b.n	810136e <HAL_ADC_MspInit+0xae>
 8101426:	bf00      	nop
 8101428:	40022000 	.word	0x40022000
 810142c:	58024400 	.word	0x58024400
 8101430:	10000c44 	.word	0x10000c44
 8101434:	40020010 	.word	0x40020010
 8101438:	58020800 	.word	0x58020800
 810143c:	58026000 	.word	0x58026000
 8101440:	58021400 	.word	0x58021400
 8101444:	10000cbc 	.word	0x10000cbc
 8101448:	40020028 	.word	0x40020028

0810144c <limitFloat>:
	}
}

float limitFloat ( float _tested_value, float _min_bound, float _max_bound )
{
  if(_tested_value < _min_bound)
 810144c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8101450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101454:	d408      	bmi.n	8101468 <limitFloat+0x1c>
  if(_tested_value > _max_bound)
  {
    return _max_bound;
  }

  return _tested_value;
 8101456:	eeb4 0ac1 	vcmpe.f32	s0, s2
 810145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810145e:	bfd4      	ite	le
 8101460:	eef0 0a40 	vmovle.f32	s1, s0
 8101464:	eef0 0a41 	vmovgt.f32	s1, s2
}
 8101468:	eeb0 0a60 	vmov.f32	s0, s1
 810146c:	4770      	bx	lr
	...

08101470 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101470:	4b14      	ldr	r3, [pc, #80]	; (81014c4 <MX_DMA_Init+0x54>)
{
 8101472:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101474:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8101478:	f042 0201 	orr.w	r2, r2, #1
 810147c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8101480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101484:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101486:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810148a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 810148c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810148e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101490:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101492:	f002 f86b 	bl	810356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101496:	200b      	movs	r0, #11
 8101498:	f002 f89a 	bl	81035d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 810149c:	2200      	movs	r2, #0
 810149e:	4611      	mov	r1, r2
 81014a0:	200c      	movs	r0, #12
 81014a2:	f002 f863 	bl	810356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81014a6:	200c      	movs	r0, #12
 81014a8:	f002 f892 	bl	81035d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 81014ac:	2200      	movs	r2, #0
 81014ae:	4611      	mov	r1, r2
 81014b0:	202f      	movs	r0, #47	; 0x2f
 81014b2:	f002 f85b 	bl	810356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014b6:	202f      	movs	r0, #47	; 0x2f

}
 81014b8:	b003      	add	sp, #12
 81014ba:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014be:	f002 b887 	b.w	81035d0 <HAL_NVIC_EnableIRQ>
 81014c2:	bf00      	nop
 81014c4:	58024400 	.word	0x58024400

081014c8 <copySamplesForFFT>:

  //setUserLED1State( FALSE );
}

static void copySamplesForFFT( volatile uint16_t *_source1, volatile uint16_t *_source2 )
{
 81014c8:	b530      	push	{r4, r5, lr}
    // ADC3 packed microphone 1,4,5

    // convert to voltage
    // apply HANN_WINDOW_COEFF
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014ca:	eddf 6a3a 	vldr	s13, [pc, #232]	; 81015b4 <copySamplesForFFT+0xec>
 81014ce:	4d3a      	ldr	r5, [pc, #232]	; (81015b8 <copySamplesForFFT+0xf0>)
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014d0:	4c3a      	ldr	r4, [pc, #232]	; (81015bc <copySamplesForFFT+0xf4>)
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014d2:	2300      	movs	r3, #0
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014d4:	8802      	ldrh	r2, [r0, #0]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014d6:	ecb5 7a01 	vldmia	r5!, {s14}
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014da:	b292      	uxth	r2, r2
 81014dc:	ee07 2a90 	vmov	s15, r2
 81014e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014e4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014ec:	3006      	adds	r0, #6
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014f2:	3106      	adds	r1, #6
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014f4:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 81014f8:	f831 2c06 	ldrh.w	r2, [r1, #-6]
 81014fc:	b292      	uxth	r2, r2
 81014fe:	ee07 2a90 	vmov	s15, r2
 8101502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101506:	f503 7200 	add.w	r2, r3, #512	; 0x200
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810150a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 810150e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101512:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 8101516:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 810151a:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 810151e:	b292      	uxth	r2, r2
 8101520:	ee07 2a90 	vmov	s15, r2
 8101524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101528:	f503 6280 	add.w	r2, r3, #1024	; 0x400
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810152c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101530:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101534:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101538:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 810153c:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 8101540:	b292      	uxth	r2, r2
 8101542:	ee07 2a90 	vmov	s15, r2
 8101546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810154a:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810154e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101552:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101556:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 810155a:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 810155e:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 8101562:	b292      	uxth	r2, r2
 8101564:	ee07 2a90 	vmov	s15, r2
 8101568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810156c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101570:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101574:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101578:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 810157c:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101580:	f831 2c02 	ldrh.w	r2, [r1, #-2]
 8101584:	b292      	uxth	r2, r2
 8101586:	ee07 2a90 	vmov	s15, r2
 810158a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810158e:	f503 6220 	add.w	r2, r3, #2560	; 0xa00
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101592:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 8101596:	3301      	adds	r3, #1
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101598:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 810159c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 81015a4:	edc2 7a00 	vstr	s15, [r2]
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81015a8:	d194      	bne.n	81014d4 <copySamplesForFFT+0xc>
  }

  // set ready for FFT flag so base loop or an RTOS task can perform the op without blocking interrupts
  fft_samples_ready = TRUE;
 81015aa:	4b05      	ldr	r3, [pc, #20]	; (81015c0 <copySamplesForFFT+0xf8>)
 81015ac:	2201      	movs	r2, #1
 81015ae:	701a      	strb	r2, [r3, #0]
}
 81015b0:	bd30      	pop	{r4, r5, pc}
 81015b2:	bf00      	nop
 81015b4:	38533406 	.word	0x38533406
 81015b8:	08110600 	.word	0x08110600
 81015bc:	100156ec 	.word	0x100156ec
 81015c0:	100186ec 	.word	0x100186ec

081015c4 <performOutputAudioFIR>:
{
 81015c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81015c8:	4d4d      	ldr	r5, [pc, #308]	; (8101700 <performOutputAudioFIR+0x13c>)
 81015ca:	f201 4256 	addw	r2, r1, #1110	; 0x456
 81015ce:	f501 6796 	add.w	r7, r1, #1200	; 0x4b0
 81015d2:	46ac      	mov	ip, r5
  int32_t _temp = 0;
 81015d4:	2300      	movs	r3, #0
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 81015d6:	f832 6b02 	ldrh.w	r6, [r2], #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015da:	f93c 4b02 	ldrsh.w	r4, [ip], #2
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 81015de:	b236      	sxth	r6, r6
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015e0:	4374      	muls	r4, r6
  for ( _index = 0; _index < 45; _index++ )
 81015e2:	42ba      	cmp	r2, r7
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 81015e4:	eb03 4324 	add.w	r3, r3, r4, asr #16
  for ( _index = 0; _index < 45; _index++ )
 81015e8:	d1f5      	bne.n	81015d6 <performOutputAudioFIR+0x12>
 81015ea:	f8df c124 	ldr.w	ip, [pc, #292]	; 8101710 <performOutputAudioFIR+0x14c>
 81015ee:	2400      	movs	r4, #0
    _temp += ((int32_t)_current_data_buffer[_index - 45]
 81015f0:	f830 e004 	ldrh.w	lr, [r0, r4]
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015f4:	f83c 6f02 	ldrh.w	r6, [ip, #2]!
  for ( ; _index < 60; _index++ )
 81015f8:	3402      	adds	r4, #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81015fa:	fb16 f60e 	smulbb	r6, r6, lr
  for ( ; _index < 60; _index++ )
 81015fe:	2c1e      	cmp	r4, #30
 8101600:	4602      	mov	r2, r0
    _temp += ((int32_t)_current_data_buffer[_index - 45]
 8101602:	eb03 4326 	add.w	r3, r3, r6, asr #16
  for ( ; _index < 60; _index++ )
 8101606:	d1f3      	bne.n	81015f0 <performOutputAudioFIR+0x2c>
  output_audio_filtered_buffer[0] = _temp * output_audio_base_gain;
 8101608:	4c3e      	ldr	r4, [pc, #248]	; (8101704 <performOutputAudioFIR+0x140>)
 810160a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8101700 <performOutputAudioFIR+0x13c>
 810160e:	8826      	ldrh	r6, [r4, #0]
 8101610:	fb13 f306 	smulbb	r3, r3, r6
 8101614:	4e3c      	ldr	r6, [pc, #240]	; (8101708 <performOutputAudioFIR+0x144>)
 8101616:	b21b      	sxth	r3, r3
 8101618:	8033      	strh	r3, [r6, #0]
  for ( _index = 0; _index < 30; _index++ )
 810161a:	f201 4c74 	addw	ip, r1, #1140	; 0x474
  _temp = 0;
 810161e:	2300      	movs	r3, #0
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 8101620:	f83c 8b02 	ldrh.w	r8, [ip], #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101624:	f939 eb02 	ldrsh.w	lr, [r9], #2
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 8101628:	fa0f f888 	sxth.w	r8, r8
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810162c:	fb08 fe0e 	mul.w	lr, r8, lr
  for ( _index = 0; _index < 30; _index++ )
 8101630:	45bc      	cmp	ip, r7
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 8101632:	eb03 432e 	add.w	r3, r3, lr, asr #16
  for ( _index = 0; _index < 30; _index++ )
 8101636:	d1f3      	bne.n	8101620 <performOutputAudioFIR+0x5c>
 8101638:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8101714 <performOutputAudioFIR+0x150>
 810163c:	f04f 0c00 	mov.w	ip, #0
    _temp += ((int32_t)_current_data_buffer[_index - 30]
 8101640:	f830 900c 	ldrh.w	r9, [r0, ip]
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101644:	f838 ef02 	ldrh.w	lr, [r8, #2]!
  for ( ; _index < 60; _index++ )
 8101648:	f10c 0c02 	add.w	ip, ip, #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810164c:	fb1e fe09 	smulbb	lr, lr, r9
  for ( ; _index < 60; _index++ )
 8101650:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    _temp += ((int32_t)_current_data_buffer[_index - 30]
 8101654:	eb03 432e 	add.w	r3, r3, lr, asr #16
  for ( ; _index < 60; _index++ )
 8101658:	d1f2      	bne.n	8101640 <performOutputAudioFIR+0x7c>
  output_audio_filtered_buffer[1] = _temp * output_audio_base_gain;
 810165a:	f8b4 c000 	ldrh.w	ip, [r4]
 810165e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8101700 <performOutputAudioFIR+0x13c>
 8101662:	fb13 f30c 	smulbb	r3, r3, ip
 8101666:	b21b      	sxth	r3, r3
 8101668:	8073      	strh	r3, [r6, #2]
  for ( _index = 0; _index < 15; _index++ )
 810166a:	f201 4192 	addw	r1, r1, #1170	; 0x492
  _temp = 0;
 810166e:	2300      	movs	r3, #0
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 8101670:	f831 eb02 	ldrh.w	lr, [r1], #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101674:	f938 cb02 	ldrsh.w	ip, [r8], #2
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 8101678:	fa0f fe8e 	sxth.w	lr, lr
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810167c:	fb0e fc0c 	mul.w	ip, lr, ip
  for ( _index = 0; _index < 15; _index++ )
 8101680:	42b9      	cmp	r1, r7
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 8101682:	eb03 432c 	add.w	r3, r3, ip, asr #16
  for ( _index = 0; _index < 15; _index++ )
 8101686:	d1f3      	bne.n	8101670 <performOutputAudioFIR+0xac>
 8101688:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8101718 <performOutputAudioFIR+0x154>
 810168c:	2100      	movs	r1, #0
    _temp += ((int32_t)_current_data_buffer[_index - 15]
 810168e:	f830 e001 	ldrh.w	lr, [r0, r1]
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101692:	f83c 7f02 	ldrh.w	r7, [ip, #2]!
  for ( ; _index < 60; _index++ )
 8101696:	3102      	adds	r1, #2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101698:	fb17 f70e 	smulbb	r7, r7, lr
  for ( ; _index < 60; _index++ )
 810169c:	295a      	cmp	r1, #90	; 0x5a
    _temp += ((int32_t)_current_data_buffer[_index - 15]
 810169e:	eb03 4327 	add.w	r3, r3, r7, asr #16
  for ( ; _index < 60; _index++ )
 81016a2:	d1f4      	bne.n	810168e <performOutputAudioFIR+0xca>
  output_audio_filtered_buffer[2] = _temp * output_audio_base_gain;
 81016a4:	8821      	ldrh	r1, [r4, #0]
 81016a6:	fb13 f301 	smulbb	r3, r3, r1
 81016aa:	b21b      	sxth	r3, r3
 81016ac:	80b3      	strh	r3, [r6, #4]
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 81016ae:	2103      	movs	r1, #3
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016b0:	468e      	mov	lr, r1
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016b2:	46a8      	mov	r8, r5
 81016b4:	3101      	adds	r1, #1
 81016b6:	4613      	mov	r3, r2
    _temp = 0;
 81016b8:	2000      	movs	r0, #0
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016ba:	f102 0978 	add.w	r9, r2, #120	; 0x78
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016be:	f833 cb02 	ldrh.w	ip, [r3], #2
             * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_tap_index])
 81016c2:	f938 7b02 	ldrsh.w	r7, [r8], #2
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016c6:	fa0f fc8c 	sxth.w	ip, ip
             * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_tap_index])
 81016ca:	fb0c f707 	mul.w	r7, ip, r7
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016ce:	454b      	cmp	r3, r9
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 81016d0:	eb00 4027 	add.w	r0, r0, r7, asr #16
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 81016d4:	d1f3      	bne.n	81016be <performOutputAudioFIR+0xfa>
    output_audio_filtered_buffer[_fir_output_buffer_index] = _temp * output_audio_base_gain;
 81016d6:	8823      	ldrh	r3, [r4, #0]
 81016d8:	fb10 f303 	smulbb	r3, r0, r3
 81016dc:	b21b      	sxth	r3, r3
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 81016de:	2928      	cmp	r1, #40	; 0x28
    output_audio_filtered_buffer[_fir_output_buffer_index] = _temp * output_audio_base_gain;
 81016e0:	f826 301e 	strh.w	r3, [r6, lr, lsl #1]
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 81016e4:	f102 021e 	add.w	r2, r2, #30
 81016e8:	d1e2      	bne.n	81016b0 <performOutputAudioFIR+0xec>
  if ( !uart_data_flag )
 81016ea:	4b08      	ldr	r3, [pc, #32]	; (810170c <performOutputAudioFIR+0x148>)
 81016ec:	781b      	ldrb	r3, [r3, #0]
 81016ee:	b923      	cbnz	r3, 81016fa <performOutputAudioFIR+0x136>
}
 81016f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    playAudio( output_audio_filtered_buffer, OUTPUT_AUDIO_BUFFER_SIZE );
 81016f4:	4804      	ldr	r0, [pc, #16]	; (8101708 <performOutputAudioFIR+0x144>)
 81016f6:	f000 be5f 	b.w	81023b8 <playAudio>
}
 81016fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81016fe:	bf00      	nop
 8101700:	08110e00 	.word	0x08110e00
 8101704:	10000064 	.word	0x10000064
 8101708:	10019058 	.word	0x10019058
 810170c:	100190a8 	.word	0x100190a8
 8101710:	08110e58 	.word	0x08110e58
 8101714:	08110e3a 	.word	0x08110e3a
 8101718:	08110e1c 	.word	0x08110e1c

0810171c <ADC3DMATransferCompleteIRQCallback>:
{
 810171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( debug_output_enable )
 8101720:	4b78      	ldr	r3, [pc, #480]	; (8101904 <ADC3DMATransferCompleteIRQCallback+0x1e8>)
 8101722:	781b      	ldrb	r3, [r3, #0]
{
 8101724:	b093      	sub	sp, #76	; 0x4c
  if ( debug_output_enable )
 8101726:	b123      	cbz	r3, 8101732 <ADC3DMATransferCompleteIRQCallback+0x16>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 8101728:	4877      	ldr	r0, [pc, #476]	; (8101908 <ADC3DMATransferCompleteIRQCallback+0x1ec>)
 810172a:	2201      	movs	r2, #1
 810172c:	2104      	movs	r1, #4
 810172e:	f003 f8e3 	bl	81048f8 <HAL_GPIO_WritePin>
  setUserLED1State(TRUE);
 8101732:	2001      	movs	r0, #1
 8101734:	f000 fdfa 	bl	810232c <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 8101738:	4a74      	ldr	r2, [pc, #464]	; (810190c <ADC3DMATransferCompleteIRQCallback+0x1f0>)
 810173a:	8813      	ldrh	r3, [r2, #0]
 810173c:	3301      	adds	r3, #1
 810173e:	b29b      	uxth	r3, r3
 8101740:	2b14      	cmp	r3, #20
 8101742:	8013      	strh	r3, [r2, #0]
 8101744:	d105      	bne.n	8101752 <ADC3DMATransferCompleteIRQCallback+0x36>
    fft_op_skip_counter = 0;
 8101746:	2300      	movs	r3, #0
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 8101748:	4971      	ldr	r1, [pc, #452]	; (8101910 <ADC3DMATransferCompleteIRQCallback+0x1f4>)
 810174a:	4872      	ldr	r0, [pc, #456]	; (8101914 <ADC3DMATransferCompleteIRQCallback+0x1f8>)
    fft_op_skip_counter = 0;
 810174c:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 810174e:	f7ff febb 	bl	81014c8 <copySamplesForFFT>
{
 8101752:	2100      	movs	r1, #0
 8101754:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8101758:	e9cd 1102 	strd	r1, r1, [sp, #8]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 810175c:	4e6e      	ldr	r6, [pc, #440]	; (8101918 <ADC3DMATransferCompleteIRQCallback+0x1fc>)
 810175e:	4b6f      	ldr	r3, [pc, #444]	; (810191c <ADC3DMATransferCompleteIRQCallback+0x200>)
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 8101760:	4d6f      	ldr	r5, [pc, #444]	; (8101920 <ADC3DMATransferCompleteIRQCallback+0x204>)
{
 8101762:	9101      	str	r1, [sp, #4]
 8101764:	f44f 64e1 	mov.w	r4, #1800	; 0x708
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 8101768:	f44f 7916 	mov.w	r9, #600	; 0x258
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 810176c:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 8101770:	b292      	uxth	r2, r2
 8101772:	9206      	str	r2, [sp, #24]
 8101774:	881a      	ldrh	r2, [r3, #0]
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 8101776:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 810177a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 810177e:	8858      	ldrh	r0, [r3, #2]
 8101780:	f104 0801 	add.w	r8, r4, #1
 8101784:	b280      	uxth	r0, r0
 8101786:	9007      	str	r0, [sp, #28]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 8101788:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
 810178c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 8101790:	8898      	ldrh	r0, [r3, #4]
 8101792:	f104 0e02 	add.w	lr, r4, #2
 8101796:	b280      	uxth	r0, r0
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 8101798:	f836 c01e 	ldrh.w	ip, [r6, lr, lsl #1]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 810179c:	9008      	str	r0, [sp, #32]
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 810179e:	f8b3 b006 	ldrh.w	fp, [r3, #6]
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 81017a2:	f835 7018 	ldrh.w	r7, [r5, r8, lsl #1]
 81017a6:	f8b3 a008 	ldrh.w	sl, [r3, #8]
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81017aa:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
 81017ae:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 81017b2:	8958      	ldrh	r0, [r3, #10]
 81017b4:	b280      	uxth	r0, r0
 81017b6:	9009      	str	r0, [sp, #36]	; 0x24
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81017b8:	9806      	ldr	r0, [sp, #24]
 81017ba:	b292      	uxth	r2, r2
 81017bc:	1a82      	subs	r2, r0, r2
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 81017be:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 81017c2:	fa12 f280 	uxtah	r2, r2, r0
 81017c6:	9807      	ldr	r0, [sp, #28]
 81017c8:	1a12      	subs	r2, r2, r0
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81017ca:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 81017ce:	fa12 f280 	uxtah	r2, r2, r0
 81017d2:	9808      	ldr	r0, [sp, #32]
 81017d4:	1a12      	subs	r2, r2, r0
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 81017d6:	fa12 fc8c 	uxtah	ip, r2, ip
 81017da:	fa1f fb8b 	uxth.w	fp, fp
 81017de:	ebac 0c0b 	sub.w	ip, ip, fp
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81017e2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 81017e6:	fa1f fa8a 	uxth.w	sl, sl
 81017ea:	fa1c f787 	uxtah	r7, ip, r7
 81017ee:	eba7 070a 	sub.w	r7, r7, sl
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81017f2:	fa17 f082 	uxtah	r0, r7, r2
 81017f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81017f8:	1a80      	subs	r0, r0, r2
                                                          / 6);
 81017fa:	2206      	movs	r2, #6
 81017fc:	fb90 f0f2 	sdiv	r0, r0, r2
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101800:	4a48      	ldr	r2, [pc, #288]	; (8101924 <ADC3DMATransferCompleteIRQCallback+0x208>)
 8101802:	b200      	sxth	r0, r0
 8101804:	f822 0019 	strh.w	r0, [r2, r9, lsl #1]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101808:	9801      	ldr	r0, [sp, #4]
 810180a:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
 810180e:	fa10 f282 	uxtah	r2, r0, r2
 8101812:	9201      	str	r2, [sp, #4]
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101814:	9802      	ldr	r0, [sp, #8]
 8101816:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 810181a:	fa10 f282 	uxtah	r2, r0, r2
 810181e:	9202      	str	r2, [sp, #8]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101820:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
 8101824:	9803      	ldr	r0, [sp, #12]
 8101826:	fa10 f282 	uxtah	r2, r0, r2
 810182a:	9203      	str	r2, [sp, #12]
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 810182c:	9804      	ldr	r0, [sp, #16]
 810182e:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 8101832:	fa10 f282 	uxtah	r2, r0, r2
 8101836:	9204      	str	r2, [sp, #16]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101838:	9805      	ldr	r0, [sp, #20]
 810183a:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 810183e:	fa10 f282 	uxtah	r2, r0, r2
 8101842:	9205      	str	r2, [sp, #20]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 8101844:	f109 0901 	add.w	r9, r9, #1
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101848:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810184c:	f5b9 6f96 	cmp.w	r9, #1200	; 0x4b0
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101850:	fa11 f182 	uxtah	r1, r1, r2
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 8101854:	f104 0403 	add.w	r4, r4, #3
 8101858:	d188      	bne.n	810176c <ADC3DMATransferCompleteIRQCallback+0x50>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810185a:	f44f 7216 	mov.w	r2, #600	; 0x258
 810185e:	9801      	ldr	r0, [sp, #4]
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101860:	fbb1 f1f2 	udiv	r1, r1, r2
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101864:	fbb0 f0f2 	udiv	r0, r0, r2
 8101868:	4c2f      	ldr	r4, [pc, #188]	; (8101928 <ADC3DMATransferCompleteIRQCallback+0x20c>)
 810186a:	900c      	str	r0, [sp, #48]	; 0x30
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810186c:	9802      	ldr	r0, [sp, #8]
 810186e:	fbb0 f0f2 	udiv	r0, r0, r2
 8101872:	900d      	str	r0, [sp, #52]	; 0x34
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101874:	9803      	ldr	r0, [sp, #12]
 8101876:	fbb0 f0f2 	udiv	r0, r0, r2
 810187a:	900e      	str	r0, [sp, #56]	; 0x38
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810187c:	9804      	ldr	r0, [sp, #16]
 810187e:	fbb0 f0f2 	udiv	r0, r0, r2
 8101882:	900f      	str	r0, [sp, #60]	; 0x3c
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101884:	9805      	ldr	r0, [sp, #20]
 8101886:	fbb0 f0f2 	udiv	r0, r0, r2
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 810188a:	2200      	movs	r2, #0
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810188c:	9010      	str	r0, [sp, #64]	; 0x40
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810188e:	9111      	str	r1, [sp, #68]	; 0x44
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101890:	a80c      	add	r0, sp, #48	; 0x30
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101892:	f644 651e 	movw	r5, #19998	; 0x4e1e
      channel_is_valid[_channel] = FALSE;
 8101896:	4616      	mov	r6, r2
      channel_is_valid[_channel] = TRUE;
 8101898:	2701      	movs	r7, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 810189a:	f850 cb04 	ldr.w	ip, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 810189e:	f5ac 41b1 	sub.w	r1, ip, #22656	; 0x5880
 81018a2:	3970      	subs	r1, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81018a4:	42a9      	cmp	r1, r5
 81018a6:	d828      	bhi.n	81018fa <ADC3DMATransferCompleteIRQCallback+0x1de>
      channel_is_valid[_channel] = TRUE;
 81018a8:	54a7      	strb	r7, [r4, r2]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81018aa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 81018ae:	b289      	uxth	r1, r1
 81018b0:	458c      	cmp	ip, r1
        adc_channel_dynamic_offsets[_channel]++;
 81018b2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81018b6:	d919      	bls.n	81018ec <ADC3DMATransferCompleteIRQCallback+0x1d0>
        adc_channel_dynamic_offsets[_channel]++;
 81018b8:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 81018ba:	b289      	uxth	r1, r1
 81018bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81018c0:	3201      	adds	r2, #1
 81018c2:	2a06      	cmp	r2, #6
 81018c4:	d1e9      	bne.n	810189a <ADC3DMATransferCompleteIRQCallback+0x17e>
  performOutputAudioFIR( &output_audio_filter_input_buffer[ADC_BUFFER_SAMPLES_PER_CHANNEL / 2], &output_audio_filter_input_buffer[0] );
 81018c6:	4917      	ldr	r1, [pc, #92]	; (8101924 <ADC3DMATransferCompleteIRQCallback+0x208>)
 81018c8:	f501 6096 	add.w	r0, r1, #1200	; 0x4b0
 81018cc:	f7ff fe7a 	bl	81015c4 <performOutputAudioFIR>
  setUserLED1State(FALSE);
 81018d0:	2000      	movs	r0, #0
 81018d2:	f000 fd2b 	bl	810232c <setUserLED1State>
  if ( debug_output_enable )
 81018d6:	4b0b      	ldr	r3, [pc, #44]	; (8101904 <ADC3DMATransferCompleteIRQCallback+0x1e8>)
 81018d8:	781b      	ldrb	r3, [r3, #0]
 81018da:	b183      	cbz	r3, 81018fe <ADC3DMATransferCompleteIRQCallback+0x1e2>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81018dc:	480a      	ldr	r0, [pc, #40]	; (8101908 <ADC3DMATransferCompleteIRQCallback+0x1ec>)
 81018de:	2200      	movs	r2, #0
 81018e0:	2104      	movs	r1, #4
}
 81018e2:	b013      	add	sp, #76	; 0x4c
 81018e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81018e8:	f003 b806 	b.w	81048f8 <HAL_GPIO_WritePin>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 81018ec:	b289      	uxth	r1, r1
 81018ee:	458c      	cmp	ip, r1
 81018f0:	d2e6      	bcs.n	81018c0 <ADC3DMATransferCompleteIRQCallback+0x1a4>
        adc_channel_dynamic_offsets[_channel]--;
 81018f2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 81018f6:	3901      	subs	r1, #1
 81018f8:	e7df      	b.n	81018ba <ADC3DMATransferCompleteIRQCallback+0x19e>
      channel_is_valid[_channel] = FALSE;
 81018fa:	54a6      	strb	r6, [r4, r2]
 81018fc:	e7e0      	b.n	81018c0 <ADC3DMATransferCompleteIRQCallback+0x1a4>
}
 81018fe:	b013      	add	sp, #76	; 0x4c
 8101900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8101904:	10004590 	.word	0x10004590
 8101908:	58022000 	.word	0x58022000
 810190c:	100126e4 	.word	0x100126e4
 8101910:	10003764 	.word	0x10003764
 8101914:	10001b44 	.word	0x10001b44
 8101918:	10000d34 	.word	0x10000d34
 810191c:	10000054 	.word	0x10000054
 8101920:	10002954 	.word	0x10002954
 8101924:	100186f8 	.word	0x100186f8
 8101928:	1000458a 	.word	0x1000458a

0810192c <ADC3DMAHalfTransferIRQCallback>:
{
 810192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( debug_output_enable )
 8101930:	4b77      	ldr	r3, [pc, #476]	; (8101b10 <ADC3DMAHalfTransferIRQCallback+0x1e4>)
 8101932:	781b      	ldrb	r3, [r3, #0]
{
 8101934:	b093      	sub	sp, #76	; 0x4c
  if ( debug_output_enable )
 8101936:	b123      	cbz	r3, 8101942 <ADC3DMAHalfTransferIRQCallback+0x16>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 8101938:	4876      	ldr	r0, [pc, #472]	; (8101b14 <ADC3DMAHalfTransferIRQCallback+0x1e8>)
 810193a:	2201      	movs	r2, #1
 810193c:	2104      	movs	r1, #4
 810193e:	f002 ffdb 	bl	81048f8 <HAL_GPIO_WritePin>
  setUserLED1State(TRUE);
 8101942:	2001      	movs	r0, #1
 8101944:	f000 fcf2 	bl	810232c <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 8101948:	4a73      	ldr	r2, [pc, #460]	; (8101b18 <ADC3DMAHalfTransferIRQCallback+0x1ec>)
 810194a:	8813      	ldrh	r3, [r2, #0]
 810194c:	3301      	adds	r3, #1
 810194e:	b29b      	uxth	r3, r3
 8101950:	2b14      	cmp	r3, #20
 8101952:	8013      	strh	r3, [r2, #0]
 8101954:	d105      	bne.n	8101962 <ADC3DMAHalfTransferIRQCallback+0x36>
    fft_op_skip_counter = 0;
 8101956:	2300      	movs	r3, #0
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 8101958:	4970      	ldr	r1, [pc, #448]	; (8101b1c <ADC3DMAHalfTransferIRQCallback+0x1f0>)
 810195a:	4871      	ldr	r0, [pc, #452]	; (8101b20 <ADC3DMAHalfTransferIRQCallback+0x1f4>)
    fft_op_skip_counter = 0;
 810195c:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 810195e:	f7ff fdb3 	bl	81014c8 <copySamplesForFFT>
{
 8101962:	2300      	movs	r3, #0
 8101964:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8101968:	e9cd 3303 	strd	r3, r3, [sp, #12]
 810196c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101970:	4e6b      	ldr	r6, [pc, #428]	; (8101b20 <ADC3DMAHalfTransferIRQCallback+0x1f4>)
 8101972:	4a6c      	ldr	r2, [pc, #432]	; (8101b24 <ADC3DMAHalfTransferIRQCallback+0x1f8>)
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 8101974:	4d69      	ldr	r5, [pc, #420]	; (8101b1c <ADC3DMAHalfTransferIRQCallback+0x1f0>)
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101976:	4618      	mov	r0, r3
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101978:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 810197c:	b289      	uxth	r1, r1
 810197e:	9107      	str	r1, [sp, #28]
 8101980:	8811      	ldrh	r1, [r2, #0]
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 8101982:	f835 4013 	ldrh.w	r4, [r5, r3, lsl #1]
 8101986:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
 810198a:	8854      	ldrh	r4, [r2, #2]
 810198c:	f103 0801 	add.w	r8, r3, #1
 8101990:	b2a4      	uxth	r4, r4
 8101992:	9408      	str	r4, [sp, #32]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 8101994:	f836 4018 	ldrh.w	r4, [r6, r8, lsl #1]
 8101998:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 810199c:	8894      	ldrh	r4, [r2, #4]
 810199e:	f103 0e02 	add.w	lr, r3, #2
 81019a2:	b2a4      	uxth	r4, r4
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 81019a4:	f836 c01e 	ldrh.w	ip, [r6, lr, lsl #1]
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81019a8:	9409      	str	r4, [sp, #36]	; 0x24
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 81019aa:	f8b2 b006 	ldrh.w	fp, [r2, #6]
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 81019ae:	f835 7018 	ldrh.w	r7, [r5, r8, lsl #1]
 81019b2:	f8b2 a008 	ldrh.w	sl, [r2, #8]
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019b6:	f835 401e 	ldrh.w	r4, [r5, lr, lsl #1]
 81019ba:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81019be:	9c07      	ldr	r4, [sp, #28]
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019c0:	f8b2 900a 	ldrh.w	r9, [r2, #10]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81019c4:	b289      	uxth	r1, r1
 81019c6:	1a61      	subs	r1, r4, r1
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 81019c8:	f8bd 402a 	ldrh.w	r4, [sp, #42]	; 0x2a
 81019cc:	fa11 f184 	uxtah	r1, r1, r4
 81019d0:	9c08      	ldr	r4, [sp, #32]
 81019d2:	1b09      	subs	r1, r1, r4
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81019d4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 81019d8:	fa11 f184 	uxtah	r1, r1, r4
 81019dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 81019de:	1b09      	subs	r1, r1, r4
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 81019e0:	fa11 fc8c 	uxtah	ip, r1, ip
 81019e4:	fa1f fb8b 	uxth.w	fp, fp
 81019e8:	ebac 0c0b 	sub.w	ip, ip, fp
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019ec:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 81019f0:	fa1f fa8a 	uxth.w	sl, sl
 81019f4:	fa1c f787 	uxtah	r7, ip, r7
 81019f8:	eba7 070a 	sub.w	r7, r7, sl
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 81019fc:	fa17 f481 	uxtah	r4, r7, r1
 8101a00:	fa1f f989 	uxth.w	r9, r9
                                                          / 6);
 8101a04:	2106      	movs	r1, #6
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 8101a06:	eba4 0409 	sub.w	r4, r4, r9
                                                          / 6);
 8101a0a:	fb94 f4f1 	sdiv	r4, r4, r1
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101a0e:	4946      	ldr	r1, [pc, #280]	; (8101b28 <ADC3DMAHalfTransferIRQCallback+0x1fc>)
 8101a10:	b224      	sxth	r4, r4
 8101a12:	f821 4010 	strh.w	r4, [r1, r0, lsl #1]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101a16:	9c01      	ldr	r4, [sp, #4]
 8101a18:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8101a1c:	fa14 f181 	uxtah	r1, r4, r1
 8101a20:	9101      	str	r1, [sp, #4]
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101a22:	9c02      	ldr	r4, [sp, #8]
 8101a24:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8101a28:	fa14 f181 	uxtah	r1, r4, r1
 8101a2c:	9102      	str	r1, [sp, #8]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101a2e:	f836 1018 	ldrh.w	r1, [r6, r8, lsl #1]
 8101a32:	9c03      	ldr	r4, [sp, #12]
 8101a34:	fa14 f181 	uxtah	r1, r4, r1
 8101a38:	9103      	str	r1, [sp, #12]
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101a3a:	9c04      	ldr	r4, [sp, #16]
 8101a3c:	f836 101e 	ldrh.w	r1, [r6, lr, lsl #1]
 8101a40:	fa14 f181 	uxtah	r1, r4, r1
 8101a44:	9104      	str	r1, [sp, #16]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101a46:	9c05      	ldr	r4, [sp, #20]
 8101a48:	f835 1018 	ldrh.w	r1, [r5, r8, lsl #1]
 8101a4c:	fa14 f181 	uxtah	r1, r4, r1
 8101a50:	9105      	str	r1, [sp, #20]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a52:	9c06      	ldr	r4, [sp, #24]
 8101a54:	f835 101e 	ldrh.w	r1, [r5, lr, lsl #1]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a58:	3001      	adds	r0, #1
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a5a:	fa14 f181 	uxtah	r1, r4, r1
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a5e:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a62:	9106      	str	r1, [sp, #24]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a64:	f103 0303 	add.w	r3, r3, #3
 8101a68:	d186      	bne.n	8101978 <ADC3DMAHalfTransferIRQCallback+0x4c>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a6a:	9b01      	ldr	r3, [sp, #4]
 8101a6c:	4c2f      	ldr	r4, [pc, #188]	; (8101b2c <ADC3DMAHalfTransferIRQCallback+0x200>)
 8101a6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a72:	930c      	str	r3, [sp, #48]	; 0x30
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a74:	9b02      	ldr	r3, [sp, #8]
 8101a76:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a7a:	930d      	str	r3, [sp, #52]	; 0x34
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a7c:	9b03      	ldr	r3, [sp, #12]
 8101a7e:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a82:	930e      	str	r3, [sp, #56]	; 0x38
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a84:	9b04      	ldr	r3, [sp, #16]
 8101a86:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a8a:	930f      	str	r3, [sp, #60]	; 0x3c
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a8c:	9b05      	ldr	r3, [sp, #20]
 8101a8e:	fbb3 f3f0 	udiv	r3, r3, r0
 8101a92:	9310      	str	r3, [sp, #64]	; 0x40
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101a94:	2300      	movs	r3, #0
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a96:	fbb1 f0f0 	udiv	r0, r1, r0
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101a9a:	f644 651e 	movw	r5, #19998	; 0x4e1e
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a9e:	9011      	str	r0, [sp, #68]	; 0x44
      channel_is_valid[_channel] = FALSE;
 8101aa0:	461e      	mov	r6, r3
 8101aa2:	a80c      	add	r0, sp, #48	; 0x30
      channel_is_valid[_channel] = TRUE;
 8101aa4:	2701      	movs	r7, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101aa6:	f850 cb04 	ldr.w	ip, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 8101aaa:	f5ac 41b1 	sub.w	r1, ip, #22656	; 0x5880
 8101aae:	3970      	subs	r1, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101ab0:	42a9      	cmp	r1, r5
 8101ab2:	d828      	bhi.n	8101b06 <ADC3DMAHalfTransferIRQCallback+0x1da>
      channel_is_valid[_channel] = TRUE;
 8101ab4:	54e7      	strb	r7, [r4, r3]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101ab6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8101aba:	b289      	uxth	r1, r1
 8101abc:	458c      	cmp	ip, r1
        adc_channel_dynamic_offsets[_channel]++;
 8101abe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101ac2:	d919      	bls.n	8101af8 <ADC3DMAHalfTransferIRQCallback+0x1cc>
        adc_channel_dynamic_offsets[_channel]++;
 8101ac4:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 8101ac6:	b289      	uxth	r1, r1
 8101ac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101acc:	3301      	adds	r3, #1
 8101ace:	2b06      	cmp	r3, #6
 8101ad0:	d1e9      	bne.n	8101aa6 <ADC3DMAHalfTransferIRQCallback+0x17a>
  performOutputAudioFIR( &output_audio_filter_input_buffer[0], &output_audio_filter_input_buffer[ADC_BUFFER_SAMPLES_PER_CHANNEL / 2] );
 8101ad2:	4917      	ldr	r1, [pc, #92]	; (8101b30 <ADC3DMAHalfTransferIRQCallback+0x204>)
 8101ad4:	f5a1 6096 	sub.w	r0, r1, #1200	; 0x4b0
 8101ad8:	f7ff fd74 	bl	81015c4 <performOutputAudioFIR>
  setUserLED1State(FALSE);
 8101adc:	2000      	movs	r0, #0
 8101ade:	f000 fc25 	bl	810232c <setUserLED1State>
  if ( debug_output_enable )
 8101ae2:	4b0b      	ldr	r3, [pc, #44]	; (8101b10 <ADC3DMAHalfTransferIRQCallback+0x1e4>)
 8101ae4:	781b      	ldrb	r3, [r3, #0]
 8101ae6:	b183      	cbz	r3, 8101b0a <ADC3DMAHalfTransferIRQCallback+0x1de>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 8101ae8:	480a      	ldr	r0, [pc, #40]	; (8101b14 <ADC3DMAHalfTransferIRQCallback+0x1e8>)
 8101aea:	2200      	movs	r2, #0
 8101aec:	2104      	movs	r1, #4
}
 8101aee:	b013      	add	sp, #76	; 0x4c
 8101af0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 8101af4:	f002 bf00 	b.w	81048f8 <HAL_GPIO_WritePin>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 8101af8:	b289      	uxth	r1, r1
 8101afa:	458c      	cmp	ip, r1
 8101afc:	d2e6      	bcs.n	8101acc <ADC3DMAHalfTransferIRQCallback+0x1a0>
        adc_channel_dynamic_offsets[_channel]--;
 8101afe:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8101b02:	3901      	subs	r1, #1
 8101b04:	e7df      	b.n	8101ac6 <ADC3DMAHalfTransferIRQCallback+0x19a>
      channel_is_valid[_channel] = FALSE;
 8101b06:	54e6      	strb	r6, [r4, r3]
 8101b08:	e7e0      	b.n	8101acc <ADC3DMAHalfTransferIRQCallback+0x1a0>
}
 8101b0a:	b013      	add	sp, #76	; 0x4c
 8101b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8101b10:	10004590 	.word	0x10004590
 8101b14:	58022000 	.word	0x58022000
 8101b18:	100126e4 	.word	0x100126e4
 8101b1c:	10002954 	.word	0x10002954
 8101b20:	10000d34 	.word	0x10000d34
 8101b24:	10000054 	.word	0x10000054
 8101b28:	100186f8 	.word	0x100186f8
 8101b2c:	1000458a 	.word	0x1000458a
 8101b30:	10018ba8 	.word	0x10018ba8

08101b34 <dspGetIsAnomalyDetected>:
}
 8101b34:	4b01      	ldr	r3, [pc, #4]	; (8101b3c <dspGetIsAnomalyDetected+0x8>)
 8101b36:	7818      	ldrb	r0, [r3, #0]
 8101b38:	4770      	bx	lr
 8101b3a:	bf00      	nop
 8101b3c:	10004574 	.word	0x10004574

08101b40 <dspGetAnomalyFrequencyNormalized>:
}
 8101b40:	4b01      	ldr	r3, [pc, #4]	; (8101b48 <dspGetAnomalyFrequencyNormalized+0x8>)
 8101b42:	ed93 0a00 	vldr	s0, [r3]
 8101b46:	4770      	bx	lr
 8101b48:	1000457c 	.word	0x1000457c

08101b4c <dspGetAnomalyMagnitude>:
}
 8101b4c:	4b01      	ldr	r3, [pc, #4]	; (8101b54 <dspGetAnomalyMagnitude+0x8>)
 8101b4e:	ed93 0a00 	vldr	s0, [r3]
 8101b52:	4770      	bx	lr
 8101b54:	10004580 	.word	0x10004580

08101b58 <dspEntry>:
{
 8101b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101b5c:	ed2d 8b02 	vpush	{d8}
 8101b60:	b083      	sub	sp, #12
  alarminit( );
 8101b62:	f000 fbf9 	bl	8102358 <alarminit>
  IPCInitialize( );
 8101b66:	f000 fb51 	bl	810220c <IPCInitialize>
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101b6a:	2108      	movs	r1, #8
 8101b6c:	48cc      	ldr	r0, [pc, #816]	; (8101ea0 <dspEntry+0x348>)
  ADC1->CR |= ADC_CR_BOOST;
 8101b6e:	4dcd      	ldr	r5, [pc, #820]	; (8101ea4 <dspEntry+0x34c>)
  ADC3->CR |= ADC_CR_BOOST;
 8101b70:	4ccd      	ldr	r4, [pc, #820]	; (8101ea8 <dspEntry+0x350>)
    if ( fft_samples_ready )
 8101b72:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 8101f18 <dspEntry+0x3c0>

static void performFFT( void )
{
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
  {
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101b76:	4ecd      	ldr	r6, [pc, #820]	; (8101eac <dspEntry+0x354>)
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101b78:	f002 feb8 	bl	81048ec <HAL_GPIO_ReadPin>
 8101b7c:	4bcc      	ldr	r3, [pc, #816]	; (8101eb0 <dspEntry+0x358>)
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101b7e:	4acd      	ldr	r2, [pc, #820]	; (8101eb4 <dspEntry+0x35c>)
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101b80:	fab0 f080 	clz	r0, r0
 8101b84:	0940      	lsrs	r0, r0, #5
 8101b86:	7018      	strb	r0, [r3, #0]
  ADC1->CR |= ADC_CR_BOOST;
 8101b88:	68ab      	ldr	r3, [r5, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101b8a:	48cb      	ldr	r0, [pc, #812]	; (8101eb8 <dspEntry+0x360>)
  ADC1->CR |= ADC_CR_BOOST;
 8101b8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101b90:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_BOOST;
 8101b92:	68a3      	ldr	r3, [r4, #8]
 8101b94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101b98:	60a3      	str	r3, [r4, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101b9a:	2101      	movs	r1, #1
 8101b9c:	f002 fd94 	bl	81046c8 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_CPLT_CB_ID, ADC3DMATransferCompleteIRQCallback);
 8101ba0:	4ac6      	ldr	r2, [pc, #792]	; (8101ebc <dspEntry+0x364>)
 8101ba2:	48c5      	ldr	r0, [pc, #788]	; (8101eb8 <dspEntry+0x360>)
 8101ba4:	2100      	movs	r1, #0
 8101ba6:	f002 fd8f 	bl	81046c8 <HAL_DMA_RegisterCallback>
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101baa:	4bc5      	ldr	r3, [pc, #788]	; (8101ec0 <dspEntry+0x368>)
  ADC_Enable( &hadc1 );
 8101bac:	48c5      	ldr	r0, [pc, #788]	; (8101ec4 <dspEntry+0x36c>)
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101bae:	691a      	ldr	r2, [r3, #16]
 8101bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101bb4:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101bb6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101bba:	4ac3      	ldr	r2, [pc, #780]	; (8101ec8 <dspEntry+0x370>)
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101bbc:	6159      	str	r1, [r3, #20]
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101bbe:	619a      	str	r2, [r3, #24]
  DMA1_Stream0->M0AR = (uint32_t)adc1_read_buffer;
 8101bc0:	4ac2      	ldr	r2, [pc, #776]	; (8101ecc <dspEntry+0x374>)
 8101bc2:	61da      	str	r2, [r3, #28]
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 8101bc4:	691a      	ldr	r2, [r3, #16]
 8101bc6:	f042 0201 	orr.w	r2, r2, #1
 8101bca:	611a      	str	r2, [r3, #16]
  DMA1->LIFCR = DMA_LIFCR_CTCIF1;
 8101bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101bd0:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE | DMA_SxCR_CIRC;
 8101bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101bd4:	f442 728c 	orr.w	r2, r2, #280	; 0x118
 8101bd8:	629a      	str	r2, [r3, #40]	; 0x28
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101bda:	4abd      	ldr	r2, [pc, #756]	; (8101ed0 <dspEntry+0x378>)
  DMA1_Stream1->NDTR = ADC3_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101bdc:	62d9      	str	r1, [r3, #44]	; 0x2c
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101bde:	631a      	str	r2, [r3, #48]	; 0x30
  DMA1_Stream1->M0AR = (uint32_t)adc3_read_buffer;
 8101be0:	4abc      	ldr	r2, [pc, #752]	; (8101ed4 <dspEntry+0x37c>)
 8101be2:	635a      	str	r2, [r3, #52]	; 0x34
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 8101be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101be6:	f042 0201 	orr.w	r2, r2, #1
 8101bea:	629a      	str	r2, [r3, #40]	; 0x28
  ADC_Enable( &hadc1 );
 8101bec:	f001 fa44 	bl	8103078 <ADC_Enable>
  ADC_Enable( &hadc3 );
 8101bf0:	48b9      	ldr	r0, [pc, #740]	; (8101ed8 <dspEntry+0x380>)
 8101bf2:	f001 fa41 	bl	8103078 <ADC_Enable>
  while(!(ADC1->ISR | ADC_ISR_ADRDY) || !(ADC3->ISR | ADC_ISR_ADRDY));
 8101bf6:	682b      	ldr	r3, [r5, #0]
 8101bf8:	6823      	ldr	r3, [r4, #0]
  ADC1->CR |= ADC_CR_ADSTART;
 8101bfa:	68ab      	ldr	r3, [r5, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101bfc:	4ab7      	ldr	r2, [pc, #732]	; (8101edc <dspEntry+0x384>)
  HAL_TIM_Base_Start( &htim3 );
 8101bfe:	48b8      	ldr	r0, [pc, #736]	; (8101ee0 <dspEntry+0x388>)
  ADC1->CR |= ADC_CR_ADSTART;
 8101c00:	f043 0304 	orr.w	r3, r3, #4
 8101c04:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_ADSTART;
 8101c06:	68a3      	ldr	r3, [r4, #8]
 8101c08:	f043 0304 	orr.w	r3, r3, #4
 8101c0c:	60a3      	str	r3, [r4, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101c0e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8101c10:	f043 0302 	orr.w	r3, r3, #2
 8101c14:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM3->ARR = 750;
 8101c16:	4bb3      	ldr	r3, [pc, #716]	; (8101ee4 <dspEntry+0x38c>)
 8101c18:	f240 22ee 	movw	r2, #750	; 0x2ee
 8101c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = 375;
 8101c1e:	f240 1277 	movw	r2, #375	; 0x177
 8101c22:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCER |= TIM_CCER_CC1E;
 8101c24:	6a1a      	ldr	r2, [r3, #32]
 8101c26:	f042 0201 	orr.w	r2, r2, #1
 8101c2a:	621a      	str	r2, [r3, #32]
  HAL_TIM_Base_Start( &htim3 );
 8101c2c:	f004 fa60 	bl	81060f0 <HAL_TIM_Base_Start>
  arm_rfft_fast_init_f32( &fft_handler, FFT_BATCH_SIZE );
 8101c30:	48ad      	ldr	r0, [pc, #692]	; (8101ee8 <dspEntry+0x390>)
 8101c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101c36:	f006 fd4d 	bl	81086d4 <arm_rfft_fast_init_f32>
  float_union.valueu8[0] = 0x55;
 8101c3a:	4bac      	ldr	r3, [pc, #688]	; (8101eec <dspEntry+0x394>)
 8101c3c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8101c40:	601a      	str	r2, [r3, #0]
    if ( fft_samples_ready )
 8101c42:	f89b 3000 	ldrb.w	r3, [fp]
 8101c46:	2b00      	cmp	r3, #0
 8101c48:	f000 81e3 	beq.w	8102012 <dspEntry+0x4ba>
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101c4c:	4da8      	ldr	r5, [pc, #672]	; (8101ef0 <dspEntry+0x398>)
 8101c4e:	2400      	movs	r4, #0
 8101c50:	1932      	adds	r2, r6, r4
 8101c52:	1929      	adds	r1, r5, r4
 8101c54:	48a4      	ldr	r0, [pc, #656]	; (8101ee8 <dspEntry+0x390>)
 8101c56:	2300      	movs	r3, #0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101c58:	f504 6400 	add.w	r4, r4, #2048	; 0x800
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101c5c:	f006 fcd0 	bl	8108600 <arm_rfft_fast_f32>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101c60:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
 8101c64:	d1f4      	bne.n	8101c50 <dspEntry+0xf8>
    {
#ifdef FFT_AVERAGING
      // compute magnitude, correct for dc offset, save value to current magnitude buffer

      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c66:	ed9f 8aa3 	vldr	s16, [pc, #652]	; 8101ef4 <dspEntry+0x39c>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101c6a:	4fa3      	ldr	r7, [pc, #652]	; (8101ef8 <dspEntry+0x3a0>)
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101c6c:	2500      	movs	r5, #0
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101c6e:	2400      	movs	r4, #0
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c70:	026b      	lsls	r3, r5, #9
 8101c72:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8101c76:	eb03 0344 	add.w	r3, r3, r4, lsl #1
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101c7a:	3301      	adds	r3, #1
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c7c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101c80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c84:	edd2 7a00 	vldr	s15, [r2]
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101c88:	ed93 0a00 	vldr	s0, [r3]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101c8c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8101c90:	ee67 7a88 	vmul.f32	s15, s15, s16
  return sqrtf(_real * _real + _compl * _compl);
 8101c94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8101c98:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8101c9c:	f00d f9d8 	bl	810f050 <sqrtf>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101ca0:	f00d f950 	bl	810ef44 <log10f>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101ca4:	883b      	ldrh	r3, [r7, #0]

      // sampling for noise floor at startup
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101ca6:	f8df c274 	ldr.w	ip, [pc, #628]	; 8101f1c <dspEntry+0x3c4>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101caa:	4994      	ldr	r1, [pc, #592]	; (8101efc <dspEntry+0x3a4>)
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101cac:	f8bc 2000 	ldrh.w	r2, [ip]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101cb0:	00e8      	lsls	r0, r5, #3
 8101cb2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8101cb6:	fa10 f383 	uxtah	r3, r0, r3
 8101cba:	ee20 0a27 	vmul.f32	s0, s0, s15
 8101cbe:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101cc2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101cc6:	2a27      	cmp	r2, #39	; 0x27
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101cc8:	ed83 0a00 	vstr	s0, [r3]
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101ccc:	d821      	bhi.n	8101d12 <dspEntry+0x1ba>
      {
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101cce:	883b      	ldrh	r3, [r7, #0]
              > fft_noise_floor[_i] )
 8101cd0:	f8df e234 	ldr.w	lr, [pc, #564]	; 8101f08 <dspEntry+0x3b0>
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101cd4:	fa10 f383 	uxtah	r3, r0, r3
 8101cd8:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101cdc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8101ce0:	ed93 7a00 	vldr	s14, [r3]
              > fft_noise_floor[_i] )
 8101ce4:	eb0e 0384 	add.w	r3, lr, r4, lsl #2
 8101ce8:	edd3 7a00 	vldr	s15, [r3]
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              > fft_noise_floor[_i] )
 8101cf4:	ea4f 0884 	mov.w	r8, r4, lsl #2
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101cf8:	dc00      	bgt.n	8101cfc <dspEntry+0x1a4>
            || ( noise_floor_samples == 0 ))
 8101cfa:	b952      	cbnz	r2, 8101d12 <dspEntry+0x1ba>
        {
          fft_noise_floor[_i] = fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i];
 8101cfc:	883b      	ldrh	r3, [r7, #0]
 8101cfe:	fa10 f383 	uxtah	r3, r0, r3
 8101d02:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101d06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8101d0a:	44c6      	add	lr, r8
 8101d0c:	681b      	ldr	r3, [r3, #0]
 8101d0e:	f8ce 3000 	str.w	r3, [lr]
        }
      }

      // perform average calculation for this channel and magnitude index
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 8101d12:	eb04 23c5 	add.w	r3, r4, r5, lsl #11
 8101d16:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8101d1a:	f8df e204 	ldr.w	lr, [pc, #516]	; 8101f20 <dspEntry+0x3c8>
 8101d1e:	f8d3 8000 	ldr.w	r8, [r3]
 8101d22:	eb04 2305 	add.w	r3, r4, r5, lsl #8
 8101d26:	eb0e 0383 	add.w	r3, lr, r3, lsl #2

      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d2a:	f04f 0901 	mov.w	r9, #1
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 8101d2e:	f8c3 8000 	str.w	r8, [r3]
      {
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101d32:	eb00 0809 	add.w	r8, r0, r9
 8101d36:	eb04 2808 	add.w	r8, r4, r8, lsl #8
 8101d3a:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8101d3e:	edd8 7a00 	vldr	s15, [r8]
 8101d42:	ed93 7a00 	vldr	s14, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d46:	f109 0901 	add.w	r9, r9, #1
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d4e:	f1b9 0f08 	cmp.w	r9, #8
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101d52:	edc3 7a00 	vstr	s15, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101d56:	d1ec      	bne.n	8101d32 <dspEntry+0x1da>
      }

      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101d58:	edd3 7a00 	vldr	s15, [r3]
 8101d5c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8101d60:	ee67 7a87 	vmul.f32	s15, s15, s14
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101d64:	3401      	adds	r4, #1
 8101d66:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101d6a:	edc3 7a00 	vstr	s15, [r3]
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101d6e:	f47f af7f 	bne.w	8101c70 <dspEntry+0x118>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101d72:	3501      	adds	r5, #1
 8101d74:	2d06      	cmp	r5, #6
 8101d76:	f47f af7a 	bne.w	8101c6e <dspEntry+0x116>
  {
    noise_floor_samples++;
  }

  // increment fft buffer index for next iteration
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d7a:	883b      	ldrh	r3, [r7, #0]
  boolean_t _anomaly_detected = FALSE;

  // for each channel
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
  {
    _largest_magnitude_db = -200.0f;
 8101d7c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8101f00 <dspEntry+0x3a8>
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
    {
      // save bin and magnitude of bin with largest magnitude relative to the
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
                  + fft_trigger_threshold_offset_db))
 8101d80:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8101f24 <dspEntry+0x3cc>
  if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101d84:	2a27      	cmp	r2, #39	; 0x27
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d86:	f103 0301 	add.w	r3, r3, #1
  boolean_t _anomaly_detected = FALSE;
 8101d8a:	f04f 0000 	mov.w	r0, #0
    noise_floor_samples++;
 8101d8e:	bf98      	it	ls
 8101d90:	3201      	addls	r2, #1
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d92:	f003 0307 	and.w	r3, r3, #7
    noise_floor_samples++;
 8101d96:	bf98      	it	ls
 8101d98:	f8ac 2000 	strhls.w	r2, [ip]
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101d9c:	803b      	strh	r3, [r7, #0]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101d9e:	f8df c188 	ldr.w	ip, [pc, #392]	; 8101f28 <dspEntry+0x3d0>
        _anomaly_detected = TRUE;
      }
    }

    // update ultrasonic POIs for this channel
    channel_is_active_anomaly[channel] = _channel_active;
 8101da2:	4f58      	ldr	r7, [pc, #352]	; (8101f04 <dspEntry+0x3ac>)
  uint16_t _largest_magnitude_bin = 0;
 8101da4:	ee06 0a10 	vmov	s12, r0
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101da8:	4601      	mov	r1, r0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101daa:	4664      	mov	r4, ip
 8101dac:	222a      	movs	r2, #42	; 0x2a
    _channel_active = FALSE;
 8101dae:	f04f 0900 	mov.w	r9, #0
    _largest_magnitude_db = -200.0f;
 8101db2:	eef0 7a65 	vmov.f32	s15, s11
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101db6:	ea4f 2a01 	mov.w	sl, r1, lsl #8
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dba:	4d53      	ldr	r5, [pc, #332]	; (8101f08 <dspEntry+0x3b0>)
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dbc:	eb0a 0302 	add.w	r3, sl, r2
 8101dc0:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dc4:	eb05 0582 	add.w	r5, r5, r2, lsl #2
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dc8:	ed93 7a00 	vldr	s14, [r3]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dcc:	edd5 6a00 	vldr	s13, [r5]
                  + fft_trigger_threshold_offset_db))
 8101dd0:	ed98 5a00 	vldr	s10, [r8]
 8101dd4:	ee76 6a85 	vadd.f32	s13, s13, s10
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dd8:	ee37 7a66 	vsub.f32	s14, s14, s13
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101de4:	dd0c      	ble.n	8101e00 <dspEntry+0x2a8>
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101de6:	edd3 7a00 	vldr	s15, [r3]
                             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101dea:	ed95 7a00 	vldr	s14, [r5]
                                    + fft_trigger_threshold_offset_db);
 8101dee:	edd8 6a00 	vldr	s13, [r8]
 8101df2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8101df6:	b293      	uxth	r3, r2
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
        _largest_magnitude_bin = bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW;
 8101dfc:	ee06 3a10 	vmov	s12, r3
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101e00:	eb0a 0302 	add.w	r3, sl, r2
 8101e04:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8101e08:	edd3 6a00 	vldr	s13, [r3]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101e0c:	4b3e      	ldr	r3, [pc, #248]	; (8101f08 <dspEntry+0x3b0>)
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101e0e:	7825      	ldrb	r5, [r4, #0]
 8101e10:	9401      	str	r4, [sp, #4]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101e12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8101e16:	ed93 7a00 	vldr	s14, [r3]
                         + fft_trigger_threshold_offset_db ))
 8101e1a:	ed98 5a00 	vldr	s10, [r8]
 8101e1e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8101e22:	f005 037f 	and.w	r3, r5, #127	; 0x7f
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101e26:	eef4 6ac7 	vcmpe.f32	s13, s14
 8101e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101e2e:	f2c0 8114 	blt.w	810205a <dspEntry+0x502>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101e32:	2b18      	cmp	r3, #24
 8101e34:	d001      	beq.n	8101e3a <dspEntry+0x2e2>
 8101e36:	1c6b      	adds	r3, r5, #1
 8101e38:	b2db      	uxtb	r3, r3
      if ( fft_magnitude_trigger_counter[channel][bin_index] >= FFT_DETECT_THRESHOLD_RISING_COUNT )
 8101e3a:	2b0d      	cmp	r3, #13
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101e3c:	7023      	strb	r3, [r4, #0]
        fft_magnitude_trigger_counter[channel][bin_index] |= FFT_DETECT_BIN_ACTIVE_FLAG;
 8101e3e:	bf84      	itt	hi
 8101e40:	f063 037f 	ornhi	r3, r3, #127	; 0x7f
 8101e44:	7023      	strbhi	r3, [r4, #0]
      if ( fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_BIN_ACTIVE_FLAG )
 8101e46:	9b01      	ldr	r3, [sp, #4]
 8101e48:	f993 3000 	ldrsb.w	r3, [r3]
 8101e4c:	2b00      	cmp	r3, #0
        _anomaly_detected = TRUE;
 8101e4e:	bfb8      	it	lt
 8101e50:	2001      	movlt	r0, #1
 8101e52:	f102 0201 	add.w	r2, r2, #1
        _channel_active = TRUE;
 8101e56:	bfb8      	it	lt
 8101e58:	4681      	movlt	r9, r0
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101e5a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8101e5e:	f104 0401 	add.w	r4, r4, #1
 8101e62:	d1aa      	bne.n	8101dba <dspEntry+0x262>
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101e64:	4c29      	ldr	r4, [pc, #164]	; (8101f0c <dspEntry+0x3b4>)
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101e66:	4d2a      	ldr	r5, [pc, #168]	; (8101f10 <dspEntry+0x3b8>)
    channel_is_active_anomaly[channel] = _channel_active;
 8101e68:	f807 9001 	strb.w	r9, [r7, r1]
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101e6c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8101e70:	edc3 7a00 	vstr	s15, [r3]
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101e74:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8101e78:	eef8 7a46 	vcvt.f32.u32	s15, s12
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101e7c:	3101      	adds	r1, #1
 8101e7e:	2906      	cmp	r1, #6
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101e80:	edc3 7a00 	vstr	s15, [r3]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101e84:	f10c 0cd6 	add.w	ip, ip, #214	; 0xd6
 8101e88:	d18f      	bne.n	8101daa <dspEntry+0x252>
  }

  // increment previous/current detect state
  anomaly_detect_state_previous = anomaly_detect_state_current;
  anomaly_detect_state_current = _anomaly_detected;
 8101e8a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8101f2c <dspEntry+0x3d4>
 8101e8e:	f888 0000 	strb.w	r0, [r8]

  setUserLED2State( anomaly_detect_state_current );
 8101e92:	f000 fa55 	bl	8102340 <setUserLED2State>
      fft_results_ready = TRUE;
 8101e96:	4a1f      	ldr	r2, [pc, #124]	; (8101f14 <dspEntry+0x3bc>)
 8101e98:	2301      	movs	r3, #1
 8101e9a:	7013      	strb	r3, [r2, #0]
 8101e9c:	e048      	b.n	8101f30 <dspEntry+0x3d8>
 8101e9e:	bf00      	nop
 8101ea0:	58020c00 	.word	0x58020c00
 8101ea4:	40022000 	.word	0x40022000
 8101ea8:	58026000 	.word	0x58026000
 8101eac:	100126e8 	.word	0x100126e8
 8101eb0:	10004590 	.word	0x10004590
 8101eb4:	0810192d 	.word	0x0810192d
 8101eb8:	10000cbc 	.word	0x10000cbc
 8101ebc:	0810171d 	.word	0x0810171d
 8101ec0:	40020000 	.word	0x40020000
 8101ec4:	10000b7c 	.word	0x10000b7c
 8101ec8:	40022040 	.word	0x40022040
 8101ecc:	10000d34 	.word	0x10000d34
 8101ed0:	58026040 	.word	0x58026040
 8101ed4:	10002954 	.word	0x10002954
 8101ed8:	10000be0 	.word	0x10000be0
 8101edc:	5c001000 	.word	0x5c001000
 8101ee0:	1001914c 	.word	0x1001914c
 8101ee4:	40000400 	.word	0x40000400
 8101ee8:	10011dc8 	.word	0x10011dc8
 8101eec:	100186f0 	.word	0x100186f0
 8101ef0:	100156ec 	.word	0x100156ec
 8101ef4:	3c800000 	.word	0x3c800000
 8101ef8:	10011dc4 	.word	0x10011dc4
 8101efc:	100045c4 	.word	0x100045c4
 8101f00:	c3480000 	.word	0xc3480000
 8101f04:	10004584 	.word	0x10004584
 8101f08:	100122e4 	.word	0x100122e4
 8101f0c:	100045ac 	.word	0x100045ac
 8101f10:	10004594 	.word	0x10004594
 8101f14:	100156e8 	.word	0x100156e8
 8101f18:	100186ec 	.word	0x100186ec
 8101f1c:	100186f6 	.word	0x100186f6
 8101f20:	100105c4 	.word	0x100105c4
 8101f24:	10000060 	.word	0x10000060
 8101f28:	10011de0 	.word	0x10011de0
 8101f2c:	10004574 	.word	0x10004574
      fft_samples_ready = FALSE;
 8101f30:	2200      	movs	r2, #0
 8101f32:	f88b 2000 	strb.w	r2, [fp]
  int8_t _x_axis_vector,
         _y_axis_vector,
         _z_axis_vector;

  // Get range of magnitude and use as basis for determining direction
  _magnitude_max = fft_channel_magnitude_db[0];
 8101f36:	edd4 7a00 	vldr	s15, [r4]
  _magnitude_min = _magnitude_max;
 8101f3a:	eeb0 7a67 	vmov.f32	s14, s15

  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
  {
    if ( fft_channel_magnitude_db[_channel] > _magnitude_max )
 8101f3e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8101f42:	edd1 6a00 	vldr	s13, [r1]
 8101f46:	009a      	lsls	r2, r3, #2
 8101f48:	eef4 6ae7 	vcmpe.f32	s13, s15
 8101f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      _magnitude_max = fft_channel_magnitude_db[_channel];
    }
    if ( fft_channel_magnitude_db[_channel] < _magnitude_min )
 8101f50:	4422      	add	r2, r4
      _magnitude_max = fft_channel_magnitude_db[_channel];
 8101f52:	bfc8      	it	gt
 8101f54:	edd1 7a00 	vldrgt	s15, [r1]
    if ( fft_channel_magnitude_db[_channel] < _magnitude_min )
 8101f58:	edd2 6a00 	vldr	s13, [r2]
 8101f5c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8101f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
 8101f64:	f103 0301 	add.w	r3, r3, #1
    {
      _magnitude_min = fft_channel_magnitude_db[_channel];
 8101f68:	bf48      	it	mi
 8101f6a:	ed92 7a00 	vldrmi	s14, [r2]
  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
 8101f6e:	2b06      	cmp	r3, #6
 8101f70:	d1e5      	bne.n	8101f3e <dspEntry+0x3e6>
      localization_data_ready = TRUE;
 8101f72:	4b46      	ldr	r3, [pc, #280]	; (810208c <dspEntry+0x534>)
// Determines characteristics of an active anomaly, default values if none
// Only capable of generating one set of values, does not handle multiple anomalies
static void anomalyUpdateCharacteristics( void )
{
  // Anomaly frequency, ** just potato averaging of active microphone frequencies **
  float _sum = 0.0f;
 8101f74:	eddf 6a46 	vldr	s13, [pc, #280]	; 8102090 <dspEntry+0x538>
  // sum of frequencies of active channels
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
  {
    if ( channel_is_active_anomaly[_channel] )
    {
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101f78:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8102094 <dspEntry+0x53c>
 8101f7c:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8102098 <dspEntry+0x540>
      localization_data_ready = TRUE;
 8101f80:	2201      	movs	r2, #1
 8101f82:	701a      	strb	r2, [r3, #0]
  uint8_t _active_channels = 0;
 8101f84:	2300      	movs	r3, #0
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101f86:	461a      	mov	r2, r3
    if ( channel_is_active_anomaly[_channel] )
 8101f88:	5cb9      	ldrb	r1, [r7, r2]
 8101f8a:	b149      	cbz	r1, 8101fa0 <dspEntry+0x448>
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101f8c:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8101f90:	edd1 7a00 	vldr	s15, [r1]
 8101f94:	ee67 7a87 	vmul.f32	s15, s15, s14
      _active_channels++;
 8101f98:	3301      	adds	r3, #1
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101f9a:	eee7 6a86 	vfma.f32	s13, s15, s12
      _active_channels++;
 8101f9e:	b2db      	uxtb	r3, r3
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101fa0:	3201      	adds	r2, #1
 8101fa2:	2a06      	cmp	r2, #6
 8101fa4:	d1f0      	bne.n	8101f88 <dspEntry+0x430>
  if ( _active_channels == 0 )
  {
    anomaly_frequency = 20000.0f;
  }

  anomaly_frequency = _sum / _active_channels;
 8101fa6:	ee07 3a90 	vmov	s15, r3
 8101faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101fae:	4d3b      	ldr	r5, [pc, #236]	; (810209c <dspEntry+0x544>)

  // normalized frequency
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101fb0:	4b3b      	ldr	r3, [pc, #236]	; (81020a0 <dspEntry+0x548>)
  anomaly_frequency = _sum / _active_channels;
 8101fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101fb6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 81020a4 <dspEntry+0x54c>
 8101fba:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81020a8 <dspEntry+0x550>
  anomaly_frequency = _sum / _active_channels;
 8101fbe:	ed85 7a00 	vstr	s14, [r5]
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101fc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101fca:	edc3 7a00 	vstr	s15, [r3]

  // magnitude, ** also potato but functional **
  float _largest = -200.0f;
 8101fce:	eddf 7a37 	vldr	s15, [pc, #220]	; 81020ac <dspEntry+0x554>

  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101fd2:	2300      	movs	r3, #0
  {
    if (( fft_channel_magnitude_db[_channel] > _largest )
 8101fd4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8101fd8:	ed92 7a00 	vldr	s14, [r2]
 8101fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101fe4:	dd03      	ble.n	8101fee <dspEntry+0x496>
        && ( channel_is_active_anomaly[_channel] ))
 8101fe6:	5cf9      	ldrb	r1, [r7, r3]
 8101fe8:	b109      	cbz	r1, 8101fee <dspEntry+0x496>
    {
      _largest = fft_channel_magnitude_db[_channel];
 8101fea:	edd2 7a00 	vldr	s15, [r2]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101fee:	3301      	adds	r3, #1
 8101ff0:	2b06      	cmp	r3, #6
 8101ff2:	d1ef      	bne.n	8101fd4 <dspEntry+0x47c>
    }
  }

  anomaly_magnitude = _largest;
 8101ff4:	4c2e      	ldr	r4, [pc, #184]	; (81020b0 <dspEntry+0x558>)

  // update inter-processor communication (shared RAM region)
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101ff6:	f898 0000 	ldrb.w	r0, [r8]
  anomaly_magnitude = _largest;
 8101ffa:	edc4 7a00 	vstr	s15, [r4]
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101ffe:	f000 f923 	bl	8102248 <IPCSetAnomalyDetectState>
  IPCSetAnomalyFrequency( anomaly_frequency );
 8102002:	ed95 0a00 	vldr	s0, [r5]
 8102006:	f000 f925 	bl	8102254 <IPCSetAnomalyFrequency>
  IPCSetAnomalyMagnitudedB( anomaly_magnitude );
 810200a:	ed94 0a00 	vldr	s0, [r4]
 810200e:	f000 f927 	bl	8102260 <IPCSetAnomalyMagnitudedB>
    user_button_state_previous = user_button_state_current;
 8102012:	4d28      	ldr	r5, [pc, #160]	; (81020b4 <dspEntry+0x55c>)
 8102014:	4c28      	ldr	r4, [pc, #160]	; (81020b8 <dspEntry+0x560>)
 8102016:	782b      	ldrb	r3, [r5, #0]
 8102018:	7023      	strb	r3, [r4, #0]
    user_button_state_current = getUserButtonState( );
 810201a:	f000 f97b 	bl	8102314 <getUserButtonState>
 810201e:	7028      	strb	r0, [r5, #0]
    if ( user_button_state_current && !user_button_state_previous )
 8102020:	b138      	cbz	r0, 8102032 <dspEntry+0x4da>
 8102022:	7823      	ldrb	r3, [r4, #0]
 8102024:	b92b      	cbnz	r3, 8102032 <dspEntry+0x4da>
      uart_data_flag = (uart_data_flag ? FALSE : TRUE);
 8102026:	4a25      	ldr	r2, [pc, #148]	; (81020bc <dspEntry+0x564>)
 8102028:	7813      	ldrb	r3, [r2, #0]
 810202a:	fab3 f383 	clz	r3, r3
 810202e:	095b      	lsrs	r3, r3, #5
 8102030:	7013      	strb	r3, [r2, #0]
    if ( fft_results_ready && uart_data_flag )
 8102032:	4c23      	ldr	r4, [pc, #140]	; (81020c0 <dspEntry+0x568>)
 8102034:	7823      	ldrb	r3, [r4, #0]
 8102036:	2b00      	cmp	r3, #0
 8102038:	f43f ae03 	beq.w	8101c42 <dspEntry+0xea>
 810203c:	4b1f      	ldr	r3, [pc, #124]	; (81020bc <dspEntry+0x564>)
 810203e:	781b      	ldrb	r3, [r3, #0]
 8102040:	2b00      	cmp	r3, #0
 8102042:	f43f adfe 	beq.w	8101c42 <dspEntry+0xea>
      usart_data_skip_counter++;
 8102046:	4a1f      	ldr	r2, [pc, #124]	; (81020c4 <dspEntry+0x56c>)
 8102048:	8813      	ldrh	r3, [r2, #0]
 810204a:	3301      	adds	r3, #1
 810204c:	b29b      	uxth	r3, r3
      if ( usart_data_skip_counter >= USART_SKIP_N_DATA_SETS )
 810204e:	2b04      	cmp	r3, #4
 8102050:	d809      	bhi.n	8102066 <dspEntry+0x50e>
      usart_data_skip_counter++;
 8102052:	8013      	strh	r3, [r2, #0]
      fft_results_ready = FALSE;
 8102054:	2300      	movs	r3, #0
 8102056:	7023      	strb	r3, [r4, #0]
 8102058:	e5f3      	b.n	8101c42 <dspEntry+0xea>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 810205a:	2b00      	cmp	r3, #0
 810205c:	f43f aeed 	beq.w	8101e3a <dspEntry+0x2e2>
 8102060:	3d01      	subs	r5, #1
 8102062:	b2eb      	uxtb	r3, r5
 8102064:	e6e9      	b.n	8101e3a <dspEntry+0x2e2>
        usart_data_skip_counter = 0;
 8102066:	2300      	movs	r3, #0
 8102068:	8013      	strh	r3, [r2, #0]
        status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 810206a:	4917      	ldr	r1, [pc, #92]	; (81020c8 <dspEntry+0x570>)
 810206c:	4817      	ldr	r0, [pc, #92]	; (81020cc <dspEntry+0x574>)
        while ( (status = HAL_UART_Transmit_DMA( &huart3,
 810206e:	4d18      	ldr	r5, [pc, #96]	; (81020d0 <dspEntry+0x578>)
 8102070:	4f16      	ldr	r7, [pc, #88]	; (81020cc <dspEntry+0x574>)
        status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 8102072:	2204      	movs	r2, #4
 8102074:	f004 fb58 	bl	8106728 <HAL_UART_Transmit_DMA>
        while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8102078:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 810207c:	4629      	mov	r1, r5
 810207e:	4638      	mov	r0, r7
 8102080:	f004 fb52 	bl	8106728 <HAL_UART_Transmit_DMA>
              == HAL_BUSY );
 8102084:	2802      	cmp	r0, #2
 8102086:	d1e5      	bne.n	8102054 <dspEntry+0x4fc>
 8102088:	e7f6      	b.n	8102078 <dspEntry+0x520>
 810208a:	bf00      	nop
 810208c:	100186f4 	.word	0x100186f4
 8102090:	00000000 	.word	0x00000000
 8102094:	486a6000 	.word	0x486a6000
 8102098:	3b000000 	.word	0x3b000000
 810209c:	10004578 	.word	0x10004578
 81020a0:	1000457c 	.word	0x1000457c
 81020a4:	469c4000 	.word	0x469c4000
 81020a8:	47c35000 	.word	0x47c35000
 81020ac:	c3480000 	.word	0xc3480000
 81020b0:	10004580 	.word	0x10004580
 81020b4:	100190ac 	.word	0x100190ac
 81020b8:	100190ad 	.word	0x100190ad
 81020bc:	100190a8 	.word	0x100190a8
 81020c0:	100156e8 	.word	0x100156e8
 81020c4:	100190aa 	.word	0x100190aa
 81020c8:	100186f0 	.word	0x100186f0
 81020cc:	10019210 	.word	0x10019210
 81020d0:	100105c4 	.word	0x100105c4

081020d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 81020d6:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020d8:	2214      	movs	r2, #20
 81020da:	2100      	movs	r1, #0
 81020dc:	a807      	add	r0, sp, #28
 81020de:	f009 fc3b 	bl	810b958 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020e2:	4b45      	ldr	r3, [pc, #276]	; (81021f8 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 81020e4:	4f45      	ldr	r7, [pc, #276]	; (81021fc <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81020ea:	4e45      	ldr	r6, [pc, #276]	; (8102200 <MX_GPIO_Init+0x12c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020ec:	f042 0202 	orr.w	r2, r2, #2
 81020f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81020f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81020f8:	f002 0202 	and.w	r2, r2, #2
 81020fc:	9200      	str	r2, [sp, #0]
 81020fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102100:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102104:	f042 0208 	orr.w	r2, r2, #8
 8102108:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810210c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102110:	f002 0208 	and.w	r2, r2, #8
 8102114:	9201      	str	r2, [sp, #4]
 8102116:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8102118:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810211c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102120:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102124:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102128:	f402 7280 	and.w	r2, r2, #256	; 0x100
 810212c:	9202      	str	r2, [sp, #8]
 810212e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102134:	f042 0204 	orr.w	r2, r2, #4
 8102138:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810213c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102140:	f002 0204 	and.w	r2, r2, #4
 8102144:	9203      	str	r2, [sp, #12]
 8102146:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8102148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810214c:	f042 0220 	orr.w	r2, r2, #32
 8102150:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102158:	f002 0220 	and.w	r2, r2, #32
 810215c:	9204      	str	r2, [sp, #16]
 810215e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102160:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102164:	f042 0201 	orr.w	r2, r2, #1
 8102168:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810216c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102170:	f002 0201 	and.w	r2, r2, #1
 8102174:	9205      	str	r2, [sp, #20]
 8102176:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810217c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102180:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810218c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 810218e:	4638      	mov	r0, r7
 8102190:	2200      	movs	r2, #0
 8102192:	f242 0104 	movw	r1, #8196	; 0x2004
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102196:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102198:	f002 fbae 	bl	81048f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 810219c:	2200      	movs	r2, #0
 810219e:	4630      	mov	r0, r6
 81021a0:	2104      	movs	r1, #4
 81021a2:	f002 fba9 	bl	81048f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021a6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81021a8:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021aa:	2308      	movs	r3, #8
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 81021ac:	a907      	add	r1, sp, #28
 81021ae:	4815      	ldr	r0, [pc, #84]	; (8102204 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 81021b0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021b2:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 81021b6:	f002 fab1 	bl	810471c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = DEBUG_GPIO_0_Pin|LD2_Pin;
 81021ba:	f242 0304 	movw	r3, #8196	; 0x2004
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81021be:	a907      	add	r1, sp, #28
 81021c0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021c2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021c6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81021ca:	f002 faa7 	bl	810471c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 81021ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81021d2:	a907      	add	r1, sp, #28
 81021d4:	480c      	ldr	r0, [pc, #48]	; (8102208 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021d6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 81021d8:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 81021dc:	f002 fa9e 	bl	810471c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 81021e0:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81021e2:	a907      	add	r1, sp, #28
 81021e4:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021e6:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021ea:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 81021ee:	f002 fa95 	bl	810471c <HAL_GPIO_Init>

}
 81021f2:	b00d      	add	sp, #52	; 0x34
 81021f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81021f6:	bf00      	nop
 81021f8:	58024400 	.word	0x58024400
 81021fc:	58022000 	.word	0x58022000
 8102200:	58022400 	.word	0x58022400
 8102204:	58020c00 	.word	0x58020c00
 8102208:	58020800 	.word	0x58020800

0810220c <IPCInitialize>:
} shared_memory __attribute__((section(".ipc_data")));

void IPCInitialize( void )
{
  // only initialize a few, the others are constantly updated by DSP or others
  shared_memory.voice_volume_normalized = 0.5f;
 810220c:	4b07      	ldr	r3, [pc, #28]	; (810222c <IPCInitialize+0x20>)
 810220e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8102212:	601a      	str	r2, [r3, #0]
  shared_memory.voice_mute_active = FALSE;
 8102214:	2200      	movs	r2, #0
 8102216:	711a      	strb	r2, [r3, #4]
  shared_memory.anomaly_detection_active = FALSE;
 8102218:	715a      	strb	r2, [r3, #5]
  shared_memory.alarm_mute = FALSE;
 810221a:	719a      	strb	r2, [r3, #6]
  shared_memory.anomaly_vector[0] = 0;
 810221c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  shared_memory.anomaly_vector[1] = 0;
 8102220:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  shared_memory.anomaly_vector[2] = 0;
 8102224:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8102228:	4770      	bx	lr
 810222a:	bf00      	nop
 810222c:	10000000 	.word	0x10000000

08102230 <IPCGetVoiceVolumeNormalized>:

float IPCGetVoiceVolumeNormalized( void )
{
  return shared_memory.voice_volume_normalized;
 8102230:	4b01      	ldr	r3, [pc, #4]	; (8102238 <IPCGetVoiceVolumeNormalized+0x8>)
 8102232:	ed93 0a00 	vldr	s0, [r3]
}
 8102236:	4770      	bx	lr
 8102238:	10000000 	.word	0x10000000

0810223c <IPCGetVoiceMuteState>:
  shared_memory.voice_volume_normalized = new_vol;
}

boolean_t IPCGetVoiceMuteState( void )
{
  return shared_memory.voice_mute_active;
 810223c:	4b01      	ldr	r3, [pc, #4]	; (8102244 <IPCGetVoiceMuteState+0x8>)
 810223e:	7918      	ldrb	r0, [r3, #4]
}
 8102240:	4770      	bx	lr
 8102242:	bf00      	nop
 8102244:	10000000 	.word	0x10000000

08102248 <IPCSetAnomalyDetectState>:
  return shared_memory.anomaly_detection_active;
}

void IPCSetAnomalyDetectState( boolean_t new_state )
{
  shared_memory.anomaly_detection_active = new_state;
 8102248:	4b01      	ldr	r3, [pc, #4]	; (8102250 <IPCSetAnomalyDetectState+0x8>)
 810224a:	7158      	strb	r0, [r3, #5]
}
 810224c:	4770      	bx	lr
 810224e:	bf00      	nop
 8102250:	10000000 	.word	0x10000000

08102254 <IPCSetAnomalyFrequency>:
  return shared_memory.anomaly_frequency;
}

void IPCSetAnomalyFrequency( float new_freq )
{
  shared_memory.anomaly_frequency = new_freq;
 8102254:	4b01      	ldr	r3, [pc, #4]	; (810225c <IPCSetAnomalyFrequency+0x8>)
 8102256:	ed83 0a02 	vstr	s0, [r3, #8]
}
 810225a:	4770      	bx	lr
 810225c:	10000000 	.word	0x10000000

08102260 <IPCSetAnomalyMagnitudedB>:
  return shared_memory.anomaly_magnitude_db;
}

void IPCSetAnomalyMagnitudedB( float new_mag )
{
  shared_memory.anomaly_magnitude_db = new_mag;
 8102260:	4b01      	ldr	r3, [pc, #4]	; (8102268 <IPCSetAnomalyMagnitudedB+0x8>)
 8102262:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8102266:	4770      	bx	lr
 8102268:	10000000 	.word	0x10000000

0810226c <IPCGetAlarmMuteState>:

boolean_t IPCGetAlarmMuteState( void )
{
  return shared_memory.alarm_mute;
 810226c:	4b01      	ldr	r3, [pc, #4]	; (8102274 <IPCGetAlarmMuteState+0x8>)
 810226e:	7998      	ldrb	r0, [r3, #6]
}
 8102270:	4770      	bx	lr
 8102272:	bf00      	nop
 8102274:	10000000 	.word	0x10000000

08102278 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
  shared_memory.alarm_mute = new_state;
 8102278:	4b01      	ldr	r3, [pc, #4]	; (8102280 <IPCSetAlarmMuteState+0x8>)
 810227a:	7198      	strb	r0, [r3, #6]
}
 810227c:	4770      	bx	lr
 810227e:	bf00      	nop
 8102280:	10000000 	.word	0x10000000

08102284 <main>:

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102284:	4b20      	ldr	r3, [pc, #128]	; (8102308 <main+0x84>)
{
 8102286:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102288:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810228c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8102290:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810229c:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 810229e:	9301      	str	r3, [sp, #4]
 81022a0:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81022a2:	f002 fb2f 	bl	8104904 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */

  HAL_PWREx_ClearPendingEvent();
 81022a6:	f002 fb77 	bl	8104998 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81022aa:	2201      	movs	r2, #1
 81022ac:	2102      	movs	r1, #2
 81022ae:	2000      	movs	r0, #0
 81022b0:	f002 fb30 	bl	8104914 <HAL_PWREx_EnterSTOPMode>

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81022b4:	4b15      	ldr	r3, [pc, #84]	; (810230c <main+0x88>)
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 81022bc:	2b07      	cmp	r3, #7
 81022be:	4b14      	ldr	r3, [pc, #80]	; (8102310 <main+0x8c>)
 81022c0:	bf0b      	itete	eq
 81022c2:	f8d3 2104 	ldreq.w	r2, [r3, #260]	; 0x104
 81022c6:	f8d3 2114 	ldrne.w	r2, [r3, #276]	; 0x114
 81022ca:	f042 0201 	orreq.w	r2, r2, #1
 81022ce:	f042 0201 	orrne.w	r2, r2, #1
 81022d2:	bf0c      	ite	eq
 81022d4:	f8c3 2104 	streq.w	r2, [r3, #260]	; 0x104
 81022d8:	f8c3 2114 	strne.w	r2, [r3, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81022dc:	f000 fc72 	bl	8102bc4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81022e0:	f7ff fef8 	bl	81020d4 <MX_GPIO_Init>
  MX_DMA_Init();
 81022e4:	f7ff f8c4 	bl	8101470 <MX_DMA_Init>
  MX_TIM3_Init();
 81022e8:	f000 fb1e 	bl	8102928 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 81022ec:	f000 fb78 	bl	81029e0 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 81022f0:	f7fe ff86 	bl	8101200 <MX_ADC3_Init>
  MX_ADC1_Init();
 81022f4:	f7fe ff16 	bl	8101124 <MX_ADC1_Init>
  MX_X_CUBE_AI_Init();
 81022f8:	f005 f916 	bl	8107528 <MX_X_CUBE_AI_Init>

  /* USER CODE BEGIN 2 */

  dspEntry( );
 81022fc:	f7ff fc2c 	bl	8101b58 <dspEntry>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	MX_X_CUBE_AI_Process();
 8102300:	f005 f950 	bl	81075a4 <MX_X_CUBE_AI_Process>
  while (1)
 8102304:	e7fc      	b.n	8102300 <main+0x7c>
 8102306:	bf00      	nop
 8102308:	58024400 	.word	0x58024400
 810230c:	e000ed00 	.word	0xe000ed00
 8102310:	58026400 	.word	0x58026400

08102314 <getUserButtonState>:
}

/* USER CODE BEGIN 4 */

boolean_t getUserButtonState ( void )
{
 8102314:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin) ? TRUE : FALSE);
 8102316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 810231a:	4803      	ldr	r0, [pc, #12]	; (8102328 <getUserButtonState+0x14>)
 810231c:	f002 fae6 	bl	81048ec <HAL_GPIO_ReadPin>
}
 8102320:	3800      	subs	r0, #0
 8102322:	bf18      	it	ne
 8102324:	2001      	movne	r0, #1
 8102326:	bd08      	pop	{r3, pc}
 8102328:	58020800 	.word	0x58020800

0810232c <setUserLED1State>:

void setUserLED1State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 810232c:	fab0 f280 	clz	r2, r0
 8102330:	0952      	lsrs	r2, r2, #5
 8102332:	4802      	ldr	r0, [pc, #8]	; (810233c <setUserLED1State+0x10>)
 8102334:	2104      	movs	r1, #4
 8102336:	f002 badf 	b.w	81048f8 <HAL_GPIO_WritePin>
 810233a:	bf00      	nop
 810233c:	58022400 	.word	0x58022400

08102340 <setUserLED2State>:
}

void setUserLED2State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 8102340:	fab0 f280 	clz	r2, r0
 8102344:	0952      	lsrs	r2, r2, #5
 8102346:	4802      	ldr	r0, [pc, #8]	; (8102350 <setUserLED2State+0x10>)
 8102348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 810234c:	f002 bad4 	b.w	81048f8 <HAL_GPIO_WritePin>
 8102350:	58022000 	.word	0x58022000

08102354 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102354:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102356:	e7fe      	b.n	8102356 <Error_Handler+0x2>

08102358 <alarminit>:
extern UART_HandleTypeDef huart3;

// one-time generation of alarm tone,
//   contains integer number of cycles of alarm frequency to avoid discontinuities
void alarminit( )
{
 8102358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int n;

  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
	{
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 810235a:	a715      	add	r7, pc, #84	; (adr r7, 81023b0 <alarminit+0x58>)
 810235c:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8102360:	ed2d 8b02 	vpush	{d8}
 8102364:	4d10      	ldr	r5, [pc, #64]	; (81023a8 <alarminit+0x50>)
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102366:	ed9f 8a11 	vldr	s16, [pc, #68]	; 81023ac <alarminit+0x54>
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 810236a:	2400      	movs	r4, #0
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 810236c:	4620      	mov	r0, r4
 810236e:	f7fe f961 	bl	8100634 <__aeabi_i2d>
 8102372:	463b      	mov	r3, r7
 8102374:	4632      	mov	r2, r6
 8102376:	f7fe f9c7 	bl	8100708 <__aeabi_dmul>
 810237a:	f7fe fcbd 	bl	8100cf8 <__aeabi_d2f>
 810237e:	ee00 0a10 	vmov	s0, r0
 8102382:	f00c fe8b 	bl	810f09c <sinf>
 8102386:	ee20 0a08 	vmul.f32	s0, s0, s16
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 810238a:	3401      	adds	r4, #1
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 810238c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102390:	2c40      	cmp	r4, #64	; 0x40
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102392:	ee10 3a10 	vmov	r3, s0
 8102396:	f825 3b02 	strh.w	r3, [r5], #2
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 810239a:	d1e7      	bne.n	810236c <alarminit+0x14>
	}
}
 810239c:	ecbd 8b02 	vpop	{d8}
 81023a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81023a2:	bf00      	nop
 81023a4:	f3af 8000 	nop.w
 81023a8:	100190ba 	.word	0x100190ba
 81023ac:	447fc000 	.word	0x447fc000
 81023b0:	7f3321d2 	.word	0x7f3321d2
 81023b4:	3fd2d97c 	.word	0x3fd2d97c

081023b8 <playAudio>:

// passed array is voice audio from DSP
void playAudio( int16_t *audio_samples, uint16_t audio_sample_length )
{
 81023b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81023bc:	ed2d 8b02 	vpush	{d8}
	alarm_state_previous = alarm_state_current;
 81023c0:	f8df 8314 	ldr.w	r8, [pc, #788]	; 81026d8 <playAudio+0x320>
 81023c4:	4eb0      	ldr	r6, [pc, #704]	; (8102688 <playAudio+0x2d0>)
 81023c6:	f898 3000 	ldrb.w	r3, [r8]
 81023ca:	7033      	strb	r3, [r6, #0]
{
 81023cc:	b083      	sub	sp, #12
 81023ce:	4604      	mov	r4, r0
 81023d0:	9100      	str	r1, [sp, #0]
	alarm_state_current = dspGetIsAnomalyDetected( );
 81023d2:	f7ff fbaf 	bl	8101b34 <dspGetIsAnomalyDetected>
 81023d6:	4fad      	ldr	r7, [pc, #692]	; (810268c <playAudio+0x2d4>)
 81023d8:	f888 0000 	strb.w	r0, [r8]

	if ( alarm_state_current && !alarm_state_previous )
 81023dc:	2800      	cmp	r0, #0
 81023de:	f000 80a3 	beq.w	8102528 <playAudio+0x170>
 81023e2:	7830      	ldrb	r0, [r6, #0]
 81023e4:	2800      	cmp	r0, #0
 81023e6:	f040 809f 	bne.w	8102528 <playAudio+0x170>
	{
	  // alarm just went active, set mute false and set counter used for on/off cycle to zero
    alarm_mute = FALSE;
    alarm_counter = 0;
 81023ea:	4ba9      	ldr	r3, [pc, #676]	; (8102690 <playAudio+0x2d8>)
    alarm_mute = FALSE;
 81023ec:	7038      	strb	r0, [r7, #0]
    alarm_counter = 0;
 81023ee:	6018      	str	r0, [r3, #0]

    // set global mute state in IPC
    IPCSetAlarmMuteState( FALSE );
 81023f0:	f7ff ff42 	bl	8102278 <IPCSetAlarmMuteState>
	  // update mute state from IPC
	  alarm_mute = IPCGetAlarmMuteState( );
	}

	// update voice volume from IPC
	voice_volume_normalized = IPCGetVoiceVolumeNormalized( );
 81023f4:	f7ff ff1c 	bl	8102230 <IPCGetVoiceVolumeNormalized>
	voice_volume_log_approx = powf(voice_volume_normalized, 4.0f) * VOICE_VOLUME_MAX;
 81023f8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 81023fc:	f00c fdd0 	bl	810efa0 <powf>
 8102400:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8102404:	ee20 0a27 	vmul.f32	s0, s0, s15
 8102408:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 81026dc <playAudio+0x324>
 810240c:	ed89 0a00 	vstr	s0, [r9]
	// scale raw voice audio data depending on volume variable, the other sources have their own volume standards
	// TODO - adjust this scaling so the bounds are reasonable
	if ( IPCGetVoiceMuteState( ) )
 8102410:	f7ff ff14 	bl	810223c <IPCGetVoiceMuteState>
 8102414:	9b00      	ldr	r3, [sp, #0]
 8102416:	005d      	lsls	r5, r3, #1
 8102418:	2800      	cmp	r0, #0
 810241a:	f000 8089 	beq.w	8102530 <playAudio+0x178>
	{
	  // voice is muted, zero each sample
    for ( int index = 0; index < audio_sample_length; index++ )
    {
      audio_samples[index] = 0;
 810241e:	462a      	mov	r2, r5
 8102420:	2100      	movs	r1, #0
 8102422:	4620      	mov	r0, r4
 8102424:	f009 fa98 	bl	810b958 <memset>
      audio_samples[index] = (int16_t)((float)audio_samples[index] * voice_volume_log_approx);
    }
	}

	// Mix in alarm audio, if alarm active or needs to end
  if ( alarm_state_current && !alarm_mute )
 8102428:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 81026e0 <playAudio+0x328>
 810242c:	f898 0000 	ldrb.w	r0, [r8]
 8102430:	f8bc 3000 	ldrh.w	r3, [ip]
 8102434:	2800      	cmp	r0, #0
 8102436:	f040 8091 	bne.w	810255c <playAudio+0x1a4>
                                      ? 0 : alarm_tone_buffer_index + 1);
	    }
	    alarm_counter++;
	  }
	}
  else if ( alarm_tone_buffer_index != 0 )
 810243a:	b153      	cbz	r3, 8102452 <playAudio+0x9a>
    // TODO - same end condition as sonification? sample size 0?
    for ( int index = 0; index < audio_sample_length; index++ )
    {
      // alarm is not active but index is not zero, keep adding alarm samples until zero to avoid pop

      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 810243c:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 81026e4 <playAudio+0x32c>
 8102440:	4622      	mov	r2, r4
 8102442:	1967      	adds	r7, r4, r5
  else if ( alarm_tone_buffer_index != 0 )
 8102444:	2100      	movs	r1, #0
    for ( int index = 0; index < audio_sample_length; index++ )
 8102446:	42ba      	cmp	r2, r7
 8102448:	f040 80ee 	bne.w	8102628 <playAudio+0x270>
 810244c:	b109      	cbz	r1, 8102452 <playAudio+0x9a>
 810244e:	f8ac 3000 	strh.w	r3, [ip]
    }
  }

  // TODO - scale depending on magnitude from DSP *** test this
	// if alarm active
  if ( alarm_state_current )
 8102452:	2800      	cmp	r0, #0
 8102454:	f040 809e 	bne.w	8102594 <playAudio+0x1dc>
          sonification_index_n = 1;
        }
      }
    }
  }
  else if ( sonification_active )
 8102458:	f8df a258 	ldr.w	sl, [pc, #600]	; 81026b4 <playAudio+0x2fc>
 810245c:	f89a 3000 	ldrb.w	r3, [sl]
 8102460:	2b00      	cmp	r3, #0
 8102462:	f000 80bb 	beq.w	81025dc <playAudio+0x224>
    {
      // calculate sample, volume dependent on standard maximum and linear with dsp reported magnitude
      // sample magnitude has bounds from max of standard magnitude (65535/64) to min of (65535/184)
      // TODO - test this volume setup to see if it and the bounds work well
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102466:	f8df b26c 	ldr.w	fp, [pc, #620]	; 81026d4 <playAudio+0x31c>
 810246a:	4626      	mov	r6, r4
 810246c:	4425      	add	r5, r4
    for ( int index = 0; (index < audio_sample_length) && sonification_active; index++ )
 810246e:	42ae      	cmp	r6, r5
 8102470:	f000 80b4 	beq.w	81025dc <playAudio+0x224>
 8102474:	f89a 3000 	ldrb.w	r3, [sl]
 8102478:	2b00      	cmp	r3, #0
 810247a:	f000 80af 	beq.w	81025dc <playAudio+0x224>
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810247e:	4b85      	ldr	r3, [pc, #532]	; (8102694 <playAudio+0x2dc>)
 8102480:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8102698 <playAudio+0x2e0>
 8102484:	edd3 7a00 	vldr	s15, [r3]
 8102488:	ed9f 1a84 	vldr	s2, [pc, #528]	; 810269c <playAudio+0x2e4>
 810248c:	eddf 0a84 	vldr	s1, [pc, #528]	; 81026a0 <playAudio+0x2e8>
 8102490:	ee30 0a67 	vsub.f32	s0, s0, s15
 8102494:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8102498:	ee30 0a00 	vadd.f32	s0, s0, s0
 810249c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 81024a0:	f7fe ffd4 	bl	810144c <limitFloat>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81024a4:	4b7f      	ldr	r3, [pc, #508]	; (81026a4 <playAudio+0x2ec>)
 81024a6:	f8db 7000 	ldr.w	r7, [fp]
 81024aa:	edd3 6a00 	vldr	s13, [r3]
 81024ae:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 81026a8 <playAudio+0x2f0>
 81024b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81024b6:	eeb0 8a40 	vmov.f32	s16, s0
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81024ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81024be:	ee17 0a90 	vmov	r0, s15
 81024c2:	f7fe f8c9 	bl	8100658 <__aeabi_f2d>
 81024c6:	a36e      	add	r3, pc, #440	; (adr r3, 8102680 <playAudio+0x2c8>)
 81024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024cc:	f7fe f91c 	bl	8100708 <__aeabi_dmul>
 81024d0:	4680      	mov	r8, r0
 81024d2:	4638      	mov	r0, r7
 81024d4:	4689      	mov	r9, r1
 81024d6:	f7fe f89d 	bl	8100614 <__aeabi_ui2d>
 81024da:	460b      	mov	r3, r1
 81024dc:	4602      	mov	r2, r0
 81024de:	4649      	mov	r1, r9
 81024e0:	4640      	mov	r0, r8
 81024e2:	f7fe f911 	bl	8100708 <__aeabi_dmul>
 81024e6:	f7fe fc07 	bl	8100cf8 <__aeabi_d2f>
 81024ea:	ee00 0a10 	vmov	s0, r0
 81024ee:	f00c fdd5 	bl	810f09c <sinf>
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81024f2:	eddf 7a6e 	vldr	s15, [pc, #440]	; 81026ac <playAudio+0x2f4>
 81024f6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 81026b0 <playAudio+0x2f8>
 81024fa:	ee38 8a27 	vadd.f32	s16, s16, s15
 81024fe:	eec7 7a08 	vdiv.f32	s15, s14, s16
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102502:	ee27 0a80 	vmul.f32	s0, s15, s0
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102506:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 810250a:	ee10 3a10 	vmov	r3, s0
 810250e:	b21b      	sxth	r3, r3

      // end condition for sonification, no active anomaly and current sample small enough in amplitude to avoid output pop
      // *** zero because this works well, no noticable delay, and even 1 seems to be audible
      if ( sonification_sample == 0 )
 8102510:	b90b      	cbnz	r3, 8102516 <playAudio+0x15e>
      {
        sonification_active = FALSE;
 8102512:	f88a 3000 	strb.w	r3, [sl]
      }
      audio_samples[index] += sonification_sample;
 8102516:	f9b6 2000 	ldrsh.w	r2, [r6]
      sonification_index_n++;
 810251a:	3701      	adds	r7, #1
      audio_samples[index] += sonification_sample;
 810251c:	4413      	add	r3, r2
 810251e:	f826 3b02 	strh.w	r3, [r6], #2
      sonification_index_n++;
 8102522:	f8cb 7000 	str.w	r7, [fp]
    for ( int index = 0; (index < audio_sample_length) && sonification_active; index++ )
 8102526:	e7a2      	b.n	810246e <playAudio+0xb6>
	  alarm_mute = IPCGetAlarmMuteState( );
 8102528:	f7ff fea0 	bl	810226c <IPCGetAlarmMuteState>
 810252c:	7038      	strb	r0, [r7, #0]
 810252e:	e761      	b.n	81023f4 <playAudio+0x3c>
      audio_samples[index] = (int16_t)((float)audio_samples[index] * voice_volume_log_approx);
 8102530:	ed99 7a00 	vldr	s14, [r9]
 8102534:	4623      	mov	r3, r4
 8102536:	1962      	adds	r2, r4, r5
    for ( int index = 0; index < audio_sample_length; index++ )
 8102538:	4293      	cmp	r3, r2
 810253a:	f43f af75 	beq.w	8102428 <playAudio+0x70>
      audio_samples[index] = (int16_t)((float)audio_samples[index] * voice_volume_log_approx);
 810253e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8102542:	ee07 1a90 	vmov	s15, r1
 8102546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810254a:	ee67 7a87 	vmul.f32	s15, s15, s14
 810254e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8102552:	ee17 1a90 	vmov	r1, s15
 8102556:	f823 1b02 	strh.w	r1, [r3], #2
    for ( int index = 0; index < audio_sample_length; index++ )
 810255a:	e7ed      	b.n	8102538 <playAudio+0x180>
  if ( alarm_state_current && !alarm_mute )
 810255c:	783a      	ldrb	r2, [r7, #0]
 810255e:	2a00      	cmp	r2, #0
 8102560:	f47f af6b 	bne.w	810243a <playAudio+0x82>
 8102564:	f8df b128 	ldr.w	fp, [pc, #296]	; 8102690 <playAudio+0x2d8>
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102568:	f8df 8178 	ldr.w	r8, [pc, #376]	; 81026e4 <playAudio+0x32c>
 810256c:	f8db 0000 	ldr.w	r0, [fp]
  if ( alarm_state_current && !alarm_mute )
 8102570:	4691      	mov	r9, r2
    for ( int index = 0; index < audio_sample_length; index++ )
 8102572:	4611      	mov	r1, r2
	    if (( alarm_counter % 16000 < 4000 ) || ( alarm_tone_buffer_index != 0))
 8102574:	f44f 5e7a 	mov.w	lr, #16000	; 0x3e80
    for ( int index = 0; index < audio_sample_length; index++ )
 8102578:	9f00      	ldr	r7, [sp, #0]
 810257a:	428f      	cmp	r7, r1
 810257c:	eb01 0a00 	add.w	sl, r1, r0
 8102580:	dc38      	bgt.n	81025f4 <playAudio+0x23c>
 8102582:	4438      	add	r0, r7
 8102584:	b10a      	cbz	r2, 810258a <playAudio+0x1d2>
 8102586:	f8ac 3000 	strh.w	r3, [ip]
 810258a:	f1b9 0f00 	cmp.w	r9, #0
 810258e:	d001      	beq.n	8102594 <playAudio+0x1dc>
 8102590:	f8cb 0000 	str.w	r0, [fp]
    sonification_active = TRUE;
 8102594:	4b47      	ldr	r3, [pc, #284]	; (81026b4 <playAudio+0x2fc>)
 8102596:	2201      	movs	r2, #1
 8102598:	701a      	strb	r2, [r3, #0]
    sonification_frequency_normalized = dspGetAnomalyFrequencyNormalized( );
 810259a:	f7ff fad1 	bl	8101b40 <dspGetAnomalyFrequencyNormalized>
 810259e:	4a46      	ldr	r2, [pc, #280]	; (81026b8 <playAudio+0x300>)
    if ( alarm_state_previous == FALSE )
 81025a0:	7831      	ldrb	r1, [r6, #0]
    sonification_frequency_normalized = dspGetAnomalyFrequencyNormalized( );
 81025a2:	ed82 0a00 	vstr	s0, [r2]
    if ( alarm_state_previous == FALSE )
 81025a6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 81026bc <playAudio+0x304>
 81025aa:	eddf 7a45 	vldr	s15, [pc, #276]	; 81026c0 <playAudio+0x308>
      sonification_frequency_new = FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized;
 81025ae:	edd2 6a00 	vldr	s13, [r2]
 81025b2:	4b44      	ldr	r3, [pc, #272]	; (81026c4 <playAudio+0x30c>)
 81025b4:	4e37      	ldr	r6, [pc, #220]	; (8102694 <playAudio+0x2dc>)
 81025b6:	eee6 7a87 	vfma.f32	s15, s13, s14
    if ( alarm_state_previous == FALSE )
 81025ba:	2900      	cmp	r1, #0
 81025bc:	d143      	bne.n	8102646 <playAudio+0x28e>
      sonification_frequency_new = FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized;
 81025be:	edc3 7a00 	vstr	s15, [r3]
      sonification_magnitude = dspGetAnomalyMagnitude( );
 81025c2:	f7ff fac3 	bl	8101b4c <dspGetAnomalyMagnitude>
 81025c6:	1963      	adds	r3, r4, r5
      sonification_sample_previous = sonification_sample_current;
 81025c8:	f8df a11c 	ldr.w	sl, [pc, #284]	; 81026e8 <playAudio+0x330>
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 81025cc:	ed86 0a00 	vstr	s0, [r6]
 81025d0:	9301      	str	r3, [sp, #4]
 81025d2:	4626      	mov	r6, r4
    for ( int index = 0; index < audio_sample_length; index++ )
 81025d4:	9b01      	ldr	r3, [sp, #4]
 81025d6:	429e      	cmp	r6, r3
 81025d8:	f040 8088 	bne.w	81026ec <playAudio+0x334>
    }
  }

	// write mixed output audio to output -> stlink uart -> usb com port
  HAL_UART_Transmit_DMA( &huart3, (uint8_t*)audio_samples, audio_sample_length*2 );
 81025dc:	9b00      	ldr	r3, [sp, #0]
 81025de:	483a      	ldr	r0, [pc, #232]	; (81026c8 <playAudio+0x310>)
 81025e0:	005a      	lsls	r2, r3, #1
 81025e2:	b292      	uxth	r2, r2
 81025e4:	4621      	mov	r1, r4
}
 81025e6:	b003      	add	sp, #12
 81025e8:	ecbd 8b02 	vpop	{d8}
 81025ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_UART_Transmit_DMA( &huart3, (uint8_t*)audio_samples, audio_sample_length*2 );
 81025f0:	f004 b89a 	b.w	8106728 <HAL_UART_Transmit_DMA>
	    if (( alarm_counter % 16000 < 4000 ) || ( alarm_tone_buffer_index != 0))
 81025f4:	fbba f9fe 	udiv	r9, sl, lr
 81025f8:	fb0e a919 	mls	r9, lr, r9, sl
 81025fc:	f5b9 6f7a 	cmp.w	r9, #4000	; 0xfa0
 8102600:	d300      	bcc.n	8102604 <playAudio+0x24c>
 8102602:	b16b      	cbz	r3, 8102620 <playAudio+0x268>
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102604:	f838 9013 	ldrh.w	r9, [r8, r3, lsl #1]
 8102608:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 810260c:	2b3f      	cmp	r3, #63	; 0x3f
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 810260e:	444a      	add	r2, r9
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102610:	bf18      	it	ne
 8102612:	3301      	addne	r3, #1
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102614:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102618:	bf14      	ite	ne
 810261a:	b29b      	uxthne	r3, r3
 810261c:	2300      	moveq	r3, #0
 810261e:	2201      	movs	r2, #1
    for ( int index = 0; index < audio_sample_length; index++ )
 8102620:	3101      	adds	r1, #1
 8102622:	f04f 0901 	mov.w	r9, #1
 8102626:	e7a7      	b.n	8102578 <playAudio+0x1c0>
      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102628:	f83e 8013 	ldrh.w	r8, [lr, r3, lsl #1]
 810262c:	f9b2 1000 	ldrsh.w	r1, [r2]
      alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102630:	2b3f      	cmp	r3, #63	; 0x3f
      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102632:	4441      	add	r1, r8
      alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102634:	bf18      	it	ne
 8102636:	3301      	addne	r3, #1
      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 8102638:	f822 1b02 	strh.w	r1, [r2], #2
      alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 810263c:	bf14      	ite	ne
 810263e:	b29b      	uxthne	r3, r3
 8102640:	2300      	moveq	r3, #0
  else if ( alarm_tone_buffer_index != 0 )
 8102642:	2101      	movs	r1, #1
 8102644:	e6ff      	b.n	8102446 <playAudio+0x8e>
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 8102646:	edd3 6a00 	vldr	s13, [r3]
 810264a:	ed9f 6a20 	vldr	s12, [pc, #128]	; 81026cc <playAudio+0x314>
 810264e:	ed9f 8a20 	vldr	s16, [pc, #128]	; 81026d0 <playAudio+0x318>
 8102652:	ee66 6a86 	vmul.f32	s13, s13, s12
 8102656:	ee86 7a88 	vdiv.f32	s14, s13, s16
                                       / 400.0f;
 810265a:	eec7 6a88 	vdiv.f32	s13, s15, s16
                                     + (FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized)
 810265e:	ee77 7a26 	vadd.f32	s15, s14, s13
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 8102662:	edc3 7a00 	vstr	s15, [r3]
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 8102666:	edd6 7a00 	vldr	s15, [r6]
 810266a:	ee67 7a86 	vmul.f32	s15, s15, s12
 810266e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8102672:	f7ff fa6b 	bl	8101b4c <dspGetAnomalyMagnitude>
 8102676:	eec0 7a08 	vdiv.f32	s15, s0, s16
 810267a:	ee37 0aa8 	vadd.f32	s0, s15, s17
 810267e:	e7a2      	b.n	81025c6 <playAudio+0x20e>
 8102680:	54442d18 	.word	0x54442d18
 8102684:	400921fb 	.word	0x400921fb
 8102688:	100190b6 	.word	0x100190b6
 810268c:	100190b4 	.word	0x100190b4
 8102690:	100190b0 	.word	0x100190b0
 8102694:	10000074 	.word	0x10000074
 8102698:	42700000 	.word	0x42700000
 810269c:	42f00000 	.word	0x42f00000
 81026a0:	00000000 	.word	0x00000000
 81026a4:	10000068 	.word	0x10000068
 81026a8:	467a0000 	.word	0x467a0000
 81026ac:	42800000 	.word	0x42800000
 81026b0:	477fff00 	.word	0x477fff00
 81026b4:	1001913a 	.word	0x1001913a
 81026b8:	10000070 	.word	0x10000070
 81026bc:	45f3c000 	.word	0x45f3c000
 81026c0:	43480000 	.word	0x43480000
 81026c4:	1000006c 	.word	0x1000006c
 81026c8:	10019210 	.word	0x10019210
 81026cc:	43c78000 	.word	0x43c78000
 81026d0:	43c80000 	.word	0x43c80000
 81026d4:	1001913c 	.word	0x1001913c
 81026d8:	100190b5 	.word	0x100190b5
 81026dc:	10019144 	.word	0x10019144
 81026e0:	100190b8 	.word	0x100190b8
 81026e4:	100190ba 	.word	0x100190ba
 81026e8:	10019140 	.word	0x10019140
      sonification_sample_previous = sonification_sample_current;
 81026ec:	4a38      	ldr	r2, [pc, #224]	; (81027d0 <playAudio+0x418>)
 81026ee:	f8ba 3000 	ldrh.w	r3, [sl]
 81026f2:	8013      	strh	r3, [r2, #0]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81026f4:	4b37      	ldr	r3, [pc, #220]	; (81027d4 <playAudio+0x41c>)
 81026f6:	ed9f 0a38 	vldr	s0, [pc, #224]	; 81027d8 <playAudio+0x420>
 81026fa:	edd3 7a00 	vldr	s15, [r3]
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81026fe:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 81027f8 <playAudio+0x440>
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102702:	ed9f 1a36 	vldr	s2, [pc, #216]	; 81027dc <playAudio+0x424>
 8102706:	eddf 0a36 	vldr	s1, [pc, #216]	; 81027e0 <playAudio+0x428>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810270a:	4f36      	ldr	r7, [pc, #216]	; (81027e4 <playAudio+0x42c>)
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810270c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8102710:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8102714:	ee30 0a00 	vadd.f32	s0, s0, s0
 8102718:	ee80 0a27 	vdiv.f32	s0, s0, s15
 810271c:	f7fe fe96 	bl	810144c <limitFloat>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102720:	683d      	ldr	r5, [r7, #0]
 8102722:	ed9f 7a31 	vldr	s14, [pc, #196]	; 81027e8 <playAudio+0x430>
 8102726:	eddb 8a00 	vldr	s17, [fp]
 810272a:	eec8 7a87 	vdiv.f32	s15, s17, s14
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810272e:	eeb0 8a40 	vmov.f32	s16, s0
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102732:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8102736:	ee17 0a90 	vmov	r0, s15
 810273a:	f7fd ff8d 	bl	8100658 <__aeabi_f2d>
 810273e:	a322      	add	r3, pc, #136	; (adr r3, 81027c8 <playAudio+0x410>)
 8102740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102744:	f7fd ffe0 	bl	8100708 <__aeabi_dmul>
 8102748:	4680      	mov	r8, r0
 810274a:	4628      	mov	r0, r5
 810274c:	4689      	mov	r9, r1
 810274e:	f7fd ff61 	bl	8100614 <__aeabi_ui2d>
 8102752:	4602      	mov	r2, r0
 8102754:	460b      	mov	r3, r1
 8102756:	4640      	mov	r0, r8
 8102758:	4649      	mov	r1, r9
 810275a:	f7fd ffd5 	bl	8100708 <__aeabi_dmul>
 810275e:	f7fe facb 	bl	8100cf8 <__aeabi_d2f>
 8102762:	ee00 0a10 	vmov	s0, r0
 8102766:	f00c fc99 	bl	810f09c <sinf>
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810276a:	eddf 7a20 	vldr	s15, [pc, #128]	; 81027ec <playAudio+0x434>
 810276e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 81027f0 <playAudio+0x438>
      audio_samples[index] += sonification_sample_current;
 8102772:	f9b6 2000 	ldrsh.w	r2, [r6]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102776:	ee38 8a27 	vadd.f32	s16, s16, s15
      sonification_index_n++;
 810277a:	3501      	adds	r5, #1
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810277c:	eec7 7a08 	vdiv.f32	s15, s14, s16
      sonification_index_n++;
 8102780:	603d      	str	r5, [r7, #0]
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102782:	ee27 0a80 	vmul.f32	s0, s15, s0
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102786:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 810278a:	ee10 3a10 	vmov	r3, s0
 810278e:	b21b      	sxth	r3, r3
      audio_samples[index] += sonification_sample_current;
 8102790:	441a      	add	r2, r3
 8102792:	f826 2b02 	strh.w	r2, [r6], #2
      if ( sonification_frequency_new != sonification_frequency_current )
 8102796:	4a17      	ldr	r2, [pc, #92]	; (81027f4 <playAudio+0x43c>)
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102798:	f8aa 3000 	strh.w	r3, [sl]
      if ( sonification_frequency_new != sonification_frequency_current )
 810279c:	edd2 7a00 	vldr	s15, [r2]
 81027a0:	eef4 8a67 	vcmp.f32	s17, s15
 81027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81027a8:	f43f af14 	beq.w	81025d4 <playAudio+0x21c>
        if ((( sonification_sample_current == 0))
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	f47f af11 	bne.w	81025d4 <playAudio+0x21c>
            && (sonification_sample_previous < sonification_sample_current))
 81027b2:	4a07      	ldr	r2, [pc, #28]	; (81027d0 <playAudio+0x418>)
 81027b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 81027b8:	2b00      	cmp	r3, #0
          sonification_index_n = 1;
 81027ba:	bfbe      	ittt	lt
 81027bc:	2301      	movlt	r3, #1
          sonification_frequency_current = sonification_frequency_new;
 81027be:	edcb 7a00 	vstrlt	s15, [fp]
          sonification_index_n = 1;
 81027c2:	603b      	strlt	r3, [r7, #0]
    for ( int index = 0; index < audio_sample_length; index++ )
 81027c4:	e706      	b.n	81025d4 <playAudio+0x21c>
 81027c6:	bf00      	nop
 81027c8:	54442d18 	.word	0x54442d18
 81027cc:	400921fb 	.word	0x400921fb
 81027d0:	10019142 	.word	0x10019142
 81027d4:	10000074 	.word	0x10000074
 81027d8:	42700000 	.word	0x42700000
 81027dc:	42f00000 	.word	0x42f00000
 81027e0:	00000000 	.word	0x00000000
 81027e4:	1001913c 	.word	0x1001913c
 81027e8:	467a0000 	.word	0x467a0000
 81027ec:	42800000 	.word	0x42800000
 81027f0:	477fff00 	.word	0x477fff00
 81027f4:	1000006c 	.word	0x1000006c
 81027f8:	10000068 	.word	0x10000068

081027fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81027fc:	4b07      	ldr	r3, [pc, #28]	; (810281c <HAL_MspInit+0x20>)
 81027fe:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8102802:	f042 0202 	orr.w	r2, r2, #2
 8102806:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 810280a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
{
 810280e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102810:	f003 0302 	and.w	r3, r3, #2
 8102814:	9301      	str	r3, [sp, #4]
 8102816:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102818:	b002      	add	sp, #8
 810281a:	4770      	bx	lr
 810281c:	58024400 	.word	0x58024400

08102820 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102820:	e7fe      	b.n	8102820 <NMI_Handler>

08102822 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102822:	e7fe      	b.n	8102822 <HardFault_Handler>

08102824 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102824:	e7fe      	b.n	8102824 <MemManage_Handler>

08102826 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102826:	e7fe      	b.n	8102826 <BusFault_Handler>

08102828 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102828:	e7fe      	b.n	8102828 <UsageFault_Handler>

0810282a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810282a:	4770      	bx	lr

0810282c <DebugMon_Handler>:
 810282c:	4770      	bx	lr

0810282e <PendSV_Handler>:
 810282e:	4770      	bx	lr

08102830 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102830:	f000 ba16 	b.w	8102c60 <HAL_IncTick>

08102834 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8102834:	4801      	ldr	r0, [pc, #4]	; (810283c <DMA1_Stream0_IRQHandler+0x8>)
 8102836:	f001 bd79 	b.w	810432c <HAL_DMA_IRQHandler>
 810283a:	bf00      	nop
 810283c:	10000c44 	.word	0x10000c44

08102840 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8102840:	4801      	ldr	r0, [pc, #4]	; (8102848 <DMA1_Stream1_IRQHandler+0x8>)
 8102842:	f001 bd73 	b.w	810432c <HAL_DMA_IRQHandler>
 8102846:	bf00      	nop
 8102848:	10000cbc 	.word	0x10000cbc

0810284c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 810284c:	4801      	ldr	r0, [pc, #4]	; (8102854 <USART3_IRQHandler+0x8>)
 810284e:	f004 b807 	b.w	8106860 <HAL_UART_IRQHandler>
 8102852:	bf00      	nop
 8102854:	10019210 	.word	0x10019210

08102858 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102858:	4801      	ldr	r0, [pc, #4]	; (8102860 <DMA1_Stream7_IRQHandler+0x8>)
 810285a:	f001 bd67 	b.w	810432c <HAL_DMA_IRQHandler>
 810285e:	bf00      	nop
 8102860:	10019198 	.word	0x10019198

08102864 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102864:	4a0b      	ldr	r2, [pc, #44]	; (8102894 <_sbrk+0x30>)
 8102866:	6811      	ldr	r1, [r2, #0]
{
 8102868:	b510      	push	{r4, lr}
 810286a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 810286c:	b909      	cbnz	r1, 8102872 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 810286e:	490a      	ldr	r1, [pc, #40]	; (8102898 <_sbrk+0x34>)
 8102870:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102872:	6810      	ldr	r0, [r2, #0]
 8102874:	4909      	ldr	r1, [pc, #36]	; (810289c <_sbrk+0x38>)
 8102876:	4c0a      	ldr	r4, [pc, #40]	; (81028a0 <_sbrk+0x3c>)
 8102878:	4403      	add	r3, r0
 810287a:	1b09      	subs	r1, r1, r4
 810287c:	428b      	cmp	r3, r1
 810287e:	d906      	bls.n	810288e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8102880:	f009 f8cc 	bl	810ba1c <__errno>
 8102884:	230c      	movs	r3, #12
 8102886:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8102888:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 810288c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 810288e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8102890:	e7fc      	b.n	810288c <_sbrk+0x28>
 8102892:	bf00      	nop
 8102894:	10019148 	.word	0x10019148
 8102898:	1001ac80 	.word	0x1001ac80
 810289c:	10048000 	.word	0x10048000
 81028a0:	00001000 	.word	0x00001000

081028a4 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 81028a4:	6802      	ldr	r2, [r0, #0]
 81028a6:	4b09      	ldr	r3, [pc, #36]	; (81028cc <HAL_TIM_Base_MspInit+0x28>)
 81028a8:	429a      	cmp	r2, r3
{
 81028aa:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 81028ac:	d10c      	bne.n	81028c8 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 81028ae:	4b08      	ldr	r3, [pc, #32]	; (81028d0 <HAL_TIM_Base_MspInit+0x2c>)
 81028b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 81028b4:	f042 0202 	orr.w	r2, r2, #2
 81028b8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 81028bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81028c0:	f003 0302 	and.w	r3, r3, #2
 81028c4:	9301      	str	r3, [sp, #4]
 81028c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 81028c8:	b002      	add	sp, #8
 81028ca:	4770      	bx	lr
 81028cc:	40000400 	.word	0x40000400
 81028d0:	58024400 	.word	0x58024400

081028d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 81028d4:	b510      	push	{r4, lr}
 81028d6:	4604      	mov	r4, r0
 81028d8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81028da:	2214      	movs	r2, #20
 81028dc:	2100      	movs	r1, #0
 81028de:	a801      	add	r0, sp, #4
 81028e0:	f009 f83a 	bl	810b958 <memset>
  if(timHandle->Instance==TIM3)
 81028e4:	6822      	ldr	r2, [r4, #0]
 81028e6:	4b0d      	ldr	r3, [pc, #52]	; (810291c <HAL_TIM_MspPostInit+0x48>)
 81028e8:	429a      	cmp	r2, r3
 81028ea:	d115      	bne.n	8102918 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81028ec:	4b0c      	ldr	r3, [pc, #48]	; (8102920 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81028ee:	480d      	ldr	r0, [pc, #52]	; (8102924 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81028f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81028f4:	f042 0202 	orr.w	r2, r2, #2
 81028f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81028fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102900:	f003 0302 	and.w	r3, r3, #2
 8102904:	9300      	str	r3, [sp, #0]
 8102906:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102908:	2210      	movs	r2, #16
 810290a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810290c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810290e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102912:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102914:	f001 ff02 	bl	810471c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102918:	b006      	add	sp, #24
 810291a:	bd10      	pop	{r4, pc}
 810291c:	40000400 	.word	0x40000400
 8102920:	58024400 	.word	0x58024400
 8102924:	58020400 	.word	0x58020400

08102928 <MX_TIM3_Init>:
{
 8102928:	b510      	push	{r4, lr}
 810292a:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810292c:	2210      	movs	r2, #16
 810292e:	2100      	movs	r1, #0
 8102930:	a803      	add	r0, sp, #12
 8102932:	f009 f811 	bl	810b958 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102936:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102938:	221c      	movs	r2, #28
 810293a:	4621      	mov	r1, r4
 810293c:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102940:	e9cd 4400 	strd	r4, r4, [sp]
 8102944:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102946:	f009 f807 	bl	810b958 <memset>
  htim3.Instance = TIM3;
 810294a:	4823      	ldr	r0, [pc, #140]	; (81029d8 <MX_TIM3_Init+0xb0>)
 810294c:	4b23      	ldr	r3, [pc, #140]	; (81029dc <MX_TIM3_Init+0xb4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 810294e:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8102950:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 750;
 8102954:	f240 23ee 	movw	r3, #750	; 0x2ee
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102958:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810295c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 810295e:	f003 fc69 	bl	8106234 <HAL_TIM_Base_Init>
 8102962:	b108      	cbz	r0, 8102968 <MX_TIM3_Init+0x40>
    Error_Handler();
 8102964:	f7ff fcf6 	bl	8102354 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 810296c:	481a      	ldr	r0, [pc, #104]	; (81029d8 <MX_TIM3_Init+0xb0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810296e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102970:	a903      	add	r1, sp, #12
 8102972:	f003 fd8d 	bl	8106490 <HAL_TIM_ConfigClockSource>
 8102976:	b108      	cbz	r0, 810297c <MX_TIM3_Init+0x54>
    Error_Handler();
 8102978:	f7ff fcec 	bl	8102354 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 810297c:	4816      	ldr	r0, [pc, #88]	; (81029d8 <MX_TIM3_Init+0xb0>)
 810297e:	f003 fc89 	bl	8106294 <HAL_TIM_PWM_Init>
 8102982:	b108      	cbz	r0, 8102988 <MX_TIM3_Init+0x60>
    Error_Handler();
 8102984:	f7ff fce6 	bl	8102354 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8102988:	2320      	movs	r3, #32
 810298a:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810298c:	4812      	ldr	r0, [pc, #72]	; (81029d8 <MX_TIM3_Init+0xb0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810298e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102990:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102992:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102994:	f003 fe38 	bl	8106608 <HAL_TIMEx_MasterConfigSynchronization>
 8102998:	b108      	cbz	r0, 810299e <MX_TIM3_Init+0x76>
    Error_Handler();
 810299a:	f7ff fcdb 	bl	8102354 <Error_Handler>
  sConfigOC.Pulse = 400;
 810299e:	2270      	movs	r2, #112	; 0x70
 81029a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 81029a4:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81029a8:	480b      	ldr	r0, [pc, #44]	; (81029d8 <MX_TIM3_Init+0xb0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81029aa:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81029ac:	a907      	add	r1, sp, #28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81029ae:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81029b0:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81029b2:	f003 fce5 	bl	8106380 <HAL_TIM_PWM_ConfigChannel>
 81029b6:	b108      	cbz	r0, 81029bc <MX_TIM3_Init+0x94>
    Error_Handler();
 81029b8:	f7ff fccc 	bl	8102354 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81029bc:	4806      	ldr	r0, [pc, #24]	; (81029d8 <MX_TIM3_Init+0xb0>)
 81029be:	220c      	movs	r2, #12
 81029c0:	a907      	add	r1, sp, #28
 81029c2:	f003 fcdd 	bl	8106380 <HAL_TIM_PWM_ConfigChannel>
 81029c6:	b108      	cbz	r0, 81029cc <MX_TIM3_Init+0xa4>
    Error_Handler();
 81029c8:	f7ff fcc4 	bl	8102354 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 81029cc:	4802      	ldr	r0, [pc, #8]	; (81029d8 <MX_TIM3_Init+0xb0>)
 81029ce:	f7ff ff81 	bl	81028d4 <HAL_TIM_MspPostInit>
}
 81029d2:	b00e      	add	sp, #56	; 0x38
 81029d4:	bd10      	pop	{r4, pc}
 81029d6:	bf00      	nop
 81029d8:	1001914c 	.word	0x1001914c
 81029dc:	40000400 	.word	0x40000400

081029e0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 81029e0:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81029e2:	4816      	ldr	r0, [pc, #88]	; (8102a3c <MX_USART3_UART_Init+0x5c>)
  huart3.Init.BaudRate = 4000000;
 81029e4:	4a16      	ldr	r2, [pc, #88]	; (8102a40 <MX_USART3_UART_Init+0x60>)
 81029e6:	4b17      	ldr	r3, [pc, #92]	; (8102a44 <MX_USART3_UART_Init+0x64>)
 81029e8:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81029ec:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 81029ee:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 81029f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81029f4:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81029f8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81029fc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart3.Init.Parity = UART_PARITY_NONE;
 8102a00:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102a02:	f004 fb8b 	bl	810711c <HAL_UART_Init>
 8102a06:	b108      	cbz	r0, 8102a0c <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
 8102a08:	f7ff fca4 	bl	8102354 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102a0c:	480b      	ldr	r0, [pc, #44]	; (8102a3c <MX_USART3_UART_Init+0x5c>)
 8102a0e:	2100      	movs	r1, #0
 8102a10:	f004 fbf4 	bl	81071fc <HAL_UARTEx_SetTxFifoThreshold>
 8102a14:	b108      	cbz	r0, 8102a1a <MX_USART3_UART_Init+0x3a>
  {
    Error_Handler();
 8102a16:	f7ff fc9d 	bl	8102354 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102a1a:	4808      	ldr	r0, [pc, #32]	; (8102a3c <MX_USART3_UART_Init+0x5c>)
 8102a1c:	2100      	movs	r1, #0
 8102a1e:	f004 fc0d 	bl	810723c <HAL_UARTEx_SetRxFifoThreshold>
 8102a22:	b108      	cbz	r0, 8102a28 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8102a24:	f7ff fc96 	bl	8102354 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102a28:	4804      	ldr	r0, [pc, #16]	; (8102a3c <MX_USART3_UART_Init+0x5c>)
 8102a2a:	f004 fbcc 	bl	81071c6 <HAL_UARTEx_DisableFifoMode>
 8102a2e:	b118      	cbz	r0, 8102a38 <MX_USART3_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102a30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8102a34:	f7ff bc8e 	b.w	8102354 <Error_Handler>
}
 8102a38:	bd08      	pop	{r3, pc}
 8102a3a:	bf00      	nop
 8102a3c:	10019210 	.word	0x10019210
 8102a40:	40004800 	.word	0x40004800
 8102a44:	003d0900 	.word	0x003d0900

08102a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102a48:	b570      	push	{r4, r5, r6, lr}
 8102a4a:	b0b8      	sub	sp, #224	; 0xe0
 8102a4c:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a4e:	2214      	movs	r2, #20
 8102a50:	2100      	movs	r1, #0
 8102a52:	a803      	add	r0, sp, #12
 8102a54:	f008 ff80 	bl	810b958 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102a58:	22c0      	movs	r2, #192	; 0xc0
 8102a5a:	2100      	movs	r1, #0
 8102a5c:	a808      	add	r0, sp, #32
 8102a5e:	f008 ff7b 	bl	810b958 <memset>
  if(uartHandle->Instance==USART3)
 8102a62:	6832      	ldr	r2, [r6, #0]
 8102a64:	4b2a      	ldr	r3, [pc, #168]	; (8102b10 <HAL_UART_MspInit+0xc8>)
 8102a66:	429a      	cmp	r2, r3
 8102a68:	d150      	bne.n	8102b0c <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102a6a:	2202      	movs	r2, #2
 8102a6c:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a6e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102a70:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a74:	f002 f970 	bl	8104d58 <HAL_RCCEx_PeriphCLKConfig>
 8102a78:	b108      	cbz	r0, 8102a7e <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8102a7a:	f7ff fc6b 	bl	8102354 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102a7e:	4b25      	ldr	r3, [pc, #148]	; (8102b14 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102a80:	4825      	ldr	r0, [pc, #148]	; (8102b18 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8102a82:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream7;
 8102a86:	4c25      	ldr	r4, [pc, #148]	; (8102b1c <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8102a88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8102a8c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8102a90:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8102a94:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8102a98:	9201      	str	r2, [sp, #4]
 8102a9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102aa0:	f042 0202 	orr.w	r2, r2, #2
 8102aa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102aac:	f003 0302 	and.w	r3, r3, #2
 8102ab0:	9302      	str	r3, [sp, #8]
 8102ab2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ab4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8102ab8:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102aba:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102abc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ac0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102ac2:	2307      	movs	r3, #7
 8102ac4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ac6:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102aca:	f001 fe27 	bl	810471c <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102ace:	4914      	ldr	r1, [pc, #80]	; (8102b20 <HAL_UART_MspInit+0xd8>)
 8102ad0:	232e      	movs	r3, #46	; 0x2e
 8102ad2:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102ad6:	2340      	movs	r3, #64	; 0x40
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102ad8:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102adc:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102ae2:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8102ae6:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102aea:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102aee:	f000 ff2d 	bl	810394c <HAL_DMA_Init>
 8102af2:	b108      	cbz	r0, 8102af8 <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 8102af4:	f7ff fc2e 	bl	8102354 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102af8:	2200      	movs	r2, #0
 8102afa:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102afc:	67f4      	str	r4, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102afe:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102b00:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102b02:	f000 fd33 	bl	810356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102b06:	2027      	movs	r0, #39	; 0x27
 8102b08:	f000 fd62 	bl	81035d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102b0c:	b038      	add	sp, #224	; 0xe0
 8102b0e:	bd70      	pop	{r4, r5, r6, pc}
 8102b10:	40004800 	.word	0x40004800
 8102b14:	58024400 	.word	0x58024400
 8102b18:	58020400 	.word	0x58020400
 8102b1c:	10019198 	.word	0x10019198
 8102b20:	400200b8 	.word	0x400200b8

08102b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102b5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102b28:	f7fe faea 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102b2c:	480c      	ldr	r0, [pc, #48]	; (8102b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102b2e:	490d      	ldr	r1, [pc, #52]	; (8102b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102b30:	4a0d      	ldr	r2, [pc, #52]	; (8102b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102b34:	e002      	b.n	8102b3c <LoopCopyDataInit>

08102b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102b3a:	3304      	adds	r3, #4

08102b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102b40:	d3f9      	bcc.n	8102b36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102b42:	4a0a      	ldr	r2, [pc, #40]	; (8102b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102b44:	4c0a      	ldr	r4, [pc, #40]	; (8102b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102b48:	e001      	b.n	8102b4e <LoopFillZerobss>

08102b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102b4c:	3204      	adds	r2, #4

08102b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102b50:	d3fb      	bcc.n	8102b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102b52:	f008 ff69 	bl	810ba28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102b56:	f7ff fb95 	bl	8102284 <main>
  bx  lr
 8102b5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102b5c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102b60:	1000004c 	.word	0x1000004c
  ldr r1, =_edata
 8102b64:	10000b5c 	.word	0x10000b5c
  ldr r2, =_sidata
 8102b68:	081ecaf8 	.word	0x081ecaf8
  ldr r2, =_sbss
 8102b6c:	10000b60 	.word	0x10000b60
  ldr r4, =_ebss
 8102b70:	1001ac7c 	.word	0x1001ac7c

08102b74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102b74:	e7fe      	b.n	8102b74 <ADC3_IRQHandler>
	...

08102b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102b78:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102b7a:	4b0f      	ldr	r3, [pc, #60]	; (8102bb8 <HAL_InitTick+0x40>)
 8102b7c:	781a      	ldrb	r2, [r3, #0]
{
 8102b7e:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8102b80:	b90a      	cbnz	r2, 8102b86 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 8102b82:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8102b84:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8102b8e:	4a0b      	ldr	r2, [pc, #44]	; (8102bbc <HAL_InitTick+0x44>)
 8102b90:	6810      	ldr	r0, [r2, #0]
 8102b92:	fbb0 f0f3 	udiv	r0, r0, r3
 8102b96:	f000 fd29 	bl	81035ec <HAL_SYSTICK_Config>
 8102b9a:	4604      	mov	r4, r0
 8102b9c:	2800      	cmp	r0, #0
 8102b9e:	d1f0      	bne.n	8102b82 <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102ba0:	2d0f      	cmp	r5, #15
 8102ba2:	d8ee      	bhi.n	8102b82 <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102ba4:	4602      	mov	r2, r0
 8102ba6:	4629      	mov	r1, r5
 8102ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8102bac:	f000 fcde 	bl	810356c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102bb0:	4b03      	ldr	r3, [pc, #12]	; (8102bc0 <HAL_InitTick+0x48>)
 8102bb2:	4620      	mov	r0, r4
 8102bb4:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8102bb6:	e7e5      	b.n	8102b84 <HAL_InitTick+0xc>
 8102bb8:	10000078 	.word	0x10000078
 8102bbc:	1000004c 	.word	0x1000004c
 8102bc0:	1000007c 	.word	0x1000007c

08102bc4 <HAL_Init>:
{
 8102bc4:	b513      	push	{r0, r1, r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102bc6:	4c21      	ldr	r4, [pc, #132]	; (8102c4c <HAL_Init+0x88>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102bc8:	4a21      	ldr	r2, [pc, #132]	; (8102c50 <HAL_Init+0x8c>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102bca:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8102bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102bd2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8102bd6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8102bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102bde:	9301      	str	r3, [sp, #4]
 8102be0:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102be2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102be6:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102bea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102bee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102bf2:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102bf6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102bfa:	f043 0301 	orr.w	r3, r3, #1
 8102bfe:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102c02:	2003      	movs	r0, #3
 8102c04:	f000 fca0 	bl	8103548 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c08:	f001 fed0 	bl	81049ac <HAL_RCC_GetSysClockFreq>
 8102c0c:	69a2      	ldr	r2, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c0e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c10:	4910      	ldr	r1, [pc, #64]	; (8102c54 <HAL_Init+0x90>)
 8102c12:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c16:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c1a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c1c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c1e:	f002 021f 	and.w	r2, r2, #31
 8102c22:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c24:	f003 031f 	and.w	r3, r3, #31
 8102c28:	40d8      	lsrs	r0, r3
 8102c2a:	4b0b      	ldr	r3, [pc, #44]	; (8102c58 <HAL_Init+0x94>)
 8102c2c:	6018      	str	r0, [r3, #0]
  SystemCoreClock = SystemD2Clock;
 8102c2e:	4b0b      	ldr	r3, [pc, #44]	; (8102c5c <HAL_Init+0x98>)
 8102c30:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102c32:	200f      	movs	r0, #15
 8102c34:	f7ff ffa0 	bl	8102b78 <HAL_InitTick>
 8102c38:	4604      	mov	r4, r0
 8102c3a:	b920      	cbnz	r0, 8102c46 <HAL_Init+0x82>
  HAL_MspInit();
 8102c3c:	f7ff fdde 	bl	81027fc <HAL_MspInit>
}
 8102c40:	4620      	mov	r0, r4
 8102c42:	b002      	add	sp, #8
 8102c44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8102c46:	2401      	movs	r4, #1
 8102c48:	e7fa      	b.n	8102c40 <HAL_Init+0x7c>
 8102c4a:	bf00      	nop
 8102c4c:	58024400 	.word	0x58024400
 8102c50:	40024000 	.word	0x40024000
 8102c54:	081105f0 	.word	0x081105f0
 8102c58:	10000050 	.word	0x10000050
 8102c5c:	1000004c 	.word	0x1000004c

08102c60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8102c60:	4a03      	ldr	r2, [pc, #12]	; (8102c70 <HAL_IncTick+0x10>)
 8102c62:	4b04      	ldr	r3, [pc, #16]	; (8102c74 <HAL_IncTick+0x14>)
 8102c64:	6811      	ldr	r1, [r2, #0]
 8102c66:	781b      	ldrb	r3, [r3, #0]
 8102c68:	440b      	add	r3, r1
 8102c6a:	6013      	str	r3, [r2, #0]
}
 8102c6c:	4770      	bx	lr
 8102c6e:	bf00      	nop
 8102c70:	100192a4 	.word	0x100192a4
 8102c74:	10000078 	.word	0x10000078

08102c78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8102c78:	4b01      	ldr	r3, [pc, #4]	; (8102c80 <HAL_GetTick+0x8>)
 8102c7a:	6818      	ldr	r0, [r3, #0]
}
 8102c7c:	4770      	bx	lr
 8102c7e:	bf00      	nop
 8102c80:	100192a4 	.word	0x100192a4

08102c84 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8102c84:	4b01      	ldr	r3, [pc, #4]	; (8102c8c <HAL_GetREVID+0x8>)
 8102c86:	6818      	ldr	r0, [r3, #0]
}
 8102c88:	0c00      	lsrs	r0, r0, #16
 8102c8a:	4770      	bx	lr
 8102c8c:	5c001000 	.word	0x5c001000

08102c90 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102c90:	4a03      	ldr	r2, [pc, #12]	; (8102ca0 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8102c92:	6853      	ldr	r3, [r2, #4]
 8102c94:	ea23 0000 	bic.w	r0, r3, r0
 8102c98:	4301      	orrs	r1, r0
 8102c9a:	6051      	str	r1, [r2, #4]
}
 8102c9c:	4770      	bx	lr
 8102c9e:	bf00      	nop
 8102ca0:	58000400 	.word	0x58000400

08102ca4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102ca4:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102ca6:	0dcc      	lsrs	r4, r1, #23
 8102ca8:	f004 0404 	and.w	r4, r4, #4
 8102cac:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8102cae:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8102cb2:	5903      	ldr	r3, [r0, r4]
 8102cb4:	2507      	movs	r5, #7
 8102cb6:	408d      	lsls	r5, r1
 8102cb8:	ea23 0305 	bic.w	r3, r3, r5
 8102cbc:	408a      	lsls	r2, r1
 8102cbe:	4313      	orrs	r3, r2
 8102cc0:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102cc2:	bd30      	pop	{r4, r5, pc}

08102cc4 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102cc4:	6880      	ldr	r0, [r0, #8]
}
 8102cc6:	f000 0001 	and.w	r0, r0, #1
 8102cca:	4770      	bx	lr

08102ccc <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102ccc:	6880      	ldr	r0, [r0, #8]
}
 8102cce:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8102cd2:	4770      	bx	lr

08102cd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102cd6:	2300      	movs	r3, #0
 8102cd8:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102cda:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8102cde:	2b01      	cmp	r3, #1
{
 8102ce0:	4605      	mov	r5, r0
 8102ce2:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8102ce4:	f000 81c5 	beq.w	8103072 <HAL_ADC_ConfigChannel+0x39e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102ce8:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8102cea:	2301      	movs	r3, #1
 8102cec:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102cf0:	4620      	mov	r0, r4
 8102cf2:	f7ff ffeb 	bl	8102ccc <LL_ADC_REG_IsConversionOngoing>
 8102cf6:	2800      	cmp	r0, #0
 8102cf8:	f040 81b6 	bne.w	8103068 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102cfc:	680a      	ldr	r2, [r1, #0]
 8102cfe:	f3c2 0013 	ubfx	r0, r2, #0, #20
 8102d02:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8102d06:	2800      	cmp	r0, #0
 8102d08:	d16a      	bne.n	8102de0 <HAL_ADC_ConfigChannel+0x10c>
 8102d0a:	408b      	lsls	r3, r1
 8102d0c:	69e2      	ldr	r2, [r4, #28]
 8102d0e:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102d10:	6872      	ldr	r2, [r6, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102d12:	61e3      	str	r3, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102d14:	0990      	lsrs	r0, r2, #6
 8102d16:	f000 000c 	and.w	r0, r0, #12
 8102d1a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8102d1e:	f002 021f 	and.w	r2, r2, #31
 8102d22:	f85c 3000 	ldr.w	r3, [ip, r0]
 8102d26:	271f      	movs	r7, #31
 8102d28:	4097      	lsls	r7, r2
 8102d2a:	ea23 0307 	bic.w	r3, r3, r7
 8102d2e:	4091      	lsls	r1, r2
 8102d30:	430b      	orrs	r3, r1
 8102d32:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102d36:	4620      	mov	r0, r4
 8102d38:	f7ff ffc8 	bl	8102ccc <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102d3c:	68a3      	ldr	r3, [r4, #8]
 8102d3e:	f003 0308 	and.w	r3, r3, #8
 8102d42:	4318      	orrs	r0, r3
 8102d44:	d140      	bne.n	8102dc8 <HAL_ADC_ConfigChannel+0xf4>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102d46:	68b2      	ldr	r2, [r6, #8]
 8102d48:	6831      	ldr	r1, [r6, #0]
 8102d4a:	4620      	mov	r0, r4
 8102d4c:	f7ff ffaa 	bl	8102ca4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102d50:	4bb8      	ldr	r3, [pc, #736]	; (8103034 <HAL_ADC_ConfigChannel+0x360>)
 8102d52:	6972      	ldr	r2, [r6, #20]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102d5e:	68e3      	ldr	r3, [r4, #12]
 8102d60:	d147      	bne.n	8102df2 <HAL_ADC_ConfigChannel+0x11e>
 8102d62:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8102d66:	005b      	lsls	r3, r3, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d68:	6937      	ldr	r7, [r6, #16]
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102d6a:	6831      	ldr	r1, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d6c:	2f04      	cmp	r7, #4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102d6e:	fa02 f203 	lsl.w	r2, r2, r3
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102d72:	d046      	beq.n	8102e02 <HAL_ADC_ConfigChannel+0x12e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d74:	f104 0060 	add.w	r0, r4, #96	; 0x60
    MODIFY_REG(*preg,
 8102d78:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8102d7c:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 8102d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8102d84:	430b      	orrs	r3, r1
 8102d86:	4313      	orrs	r3, r2
 8102d88:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102d8c:	6931      	ldr	r1, [r6, #16]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102d8e:	7e72      	ldrb	r2, [r6, #25]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102d90:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8102d94:	1e57      	subs	r7, r2, #1
 8102d96:	427a      	negs	r2, r7
 8102d98:	417a      	adcs	r2, r7
 8102d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102d9e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8102da2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102da6:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102da8:	6931      	ldr	r1, [r6, #16]
 8102daa:	6922      	ldr	r2, [r4, #16]
 8102dac:	f103 3cff 	add.w	ip, r3, #4294967295
 8102db0:	f1dc 0300 	rsbs	r3, ip, #0
 8102db4:	eb43 030c 	adc.w	r3, r3, ip
 8102db8:	02db      	lsls	r3, r3, #11
 8102dba:	f001 011f 	and.w	r1, r1, #31
 8102dbe:	408b      	lsls	r3, r1
 8102dc0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8102dc4:	4313      	orrs	r3, r2
 8102dc6:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102dc8:	4620      	mov	r0, r4
 8102dca:	f7ff ff7b 	bl	8102cc4 <LL_ADC_IsEnabled>
 8102dce:	2800      	cmp	r0, #0
 8102dd0:	d03e      	beq.n	8102e50 <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102dd2:	2300      	movs	r3, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102dd4:	2200      	movs	r2, #0
 8102dd6:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8102dda:	4618      	mov	r0, r3
 8102ddc:	b003      	add	sp, #12
 8102dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102de0:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8102de4:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102de8:	f002 021f 	and.w	r2, r2, #31
 8102dec:	2301      	movs	r3, #1
 8102dee:	4093      	lsls	r3, r2
 8102df0:	e78c      	b.n	8102d0c <HAL_ADC_ConfigChannel+0x38>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102df2:	f013 0f10 	tst.w	r3, #16
 8102df6:	68e3      	ldr	r3, [r4, #12]
 8102df8:	d0b3      	beq.n	8102d62 <HAL_ADC_ConfigChannel+0x8e>
 8102dfa:	085b      	lsrs	r3, r3, #1
 8102dfc:	f003 0308 	and.w	r3, r3, #8
 8102e00:	e7b2      	b.n	8102d68 <HAL_ADC_ConfigChannel+0x94>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e02:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8102e04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e08:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102e0c:	bf02      	ittt	eq
 8102e0e:	6e23      	ldreq	r3, [r4, #96]	; 0x60
 8102e10:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e14:	6623      	streq	r3, [r4, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e18:	068a      	lsls	r2, r1, #26
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e1a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e1e:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102e20:	bf02      	ittt	eq
 8102e22:	6e63      	ldreq	r3, [r4, #100]	; 0x64
 8102e24:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e28:	6663      	streq	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e2a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8102e2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e30:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102e32:	bf02      	ittt	eq
 8102e34:	6ea3      	ldreq	r3, [r4, #104]	; 0x68
 8102e36:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e3a:	66a3      	streq	r3, [r4, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102e3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8102e3e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102e42:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102e44:	bf02      	ittt	eq
 8102e46:	6ee3      	ldreq	r3, [r4, #108]	; 0x6c
 8102e48:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 8102e4c:	66e3      	streq	r3, [r4, #108]	; 0x6c
 8102e4e:	e7bb      	b.n	8102dc8 <HAL_ADC_ConfigChannel+0xf4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102e50:	68f7      	ldr	r7, [r6, #12]
 8102e52:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8102e54:	4a78      	ldr	r2, [pc, #480]	; (8103038 <HAL_ADC_ConfigChannel+0x364>)
 8102e56:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8102e5a:	f007 0c18 	and.w	ip, r7, #24
 8102e5e:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8102e62:	fa22 f20c 	lsr.w	r2, r2, ip
 8102e66:	401a      	ands	r2, r3
 8102e68:	ea21 0100 	bic.w	r1, r1, r0
 8102e6c:	430a      	orrs	r2, r1
 8102e6e:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102e72:	4a72      	ldr	r2, [pc, #456]	; (810303c <HAL_ADC_ConfigChannel+0x368>)
 8102e74:	4297      	cmp	r7, r2
 8102e76:	d145      	bne.n	8102f04 <HAL_ADC_ConfigChannel+0x230>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102e78:	b9d0      	cbnz	r0, 8102eb0 <HAL_ADC_ConfigChannel+0x1dc>
 8102e7a:	0e9a      	lsrs	r2, r3, #26
 8102e7c:	3201      	adds	r2, #1
 8102e7e:	f002 071f 	and.w	r7, r2, #31
 8102e82:	2101      	movs	r1, #1
 8102e84:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e86:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102e88:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8102e8c:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102e90:	d929      	bls.n	8102ee6 <HAL_ADC_ConfigChannel+0x212>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102e92:	4311      	orrs	r1, r2
 8102e94:	2800      	cmp	r0, #0
 8102e96:	f040 808b 	bne.w	8102fb0 <HAL_ADC_ConfigChannel+0x2dc>
 8102e9a:	0e9b      	lsrs	r3, r3, #26
 8102e9c:	3301      	adds	r3, #1
 8102e9e:	f003 031f 	and.w	r3, r3, #31
 8102ea2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102ea6:	3b1e      	subs	r3, #30
 8102ea8:	051b      	lsls	r3, r3, #20
 8102eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102eae:	e024      	b.n	8102efa <HAL_ADC_ConfigChannel+0x226>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102eb0:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8102eb4:	b132      	cbz	r2, 8102ec4 <HAL_ADC_ConfigChannel+0x1f0>
  return __builtin_clz(value);
 8102eb6:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102eba:	3201      	adds	r2, #1
 8102ebc:	f002 021f 	and.w	r2, r2, #31
 8102ec0:	2a09      	cmp	r2, #9
 8102ec2:	d863      	bhi.n	8102f8c <HAL_ADC_ConfigChannel+0x2b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ec4:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102ec8:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102ecc:	3201      	adds	r2, #1
 8102ece:	0692      	lsls	r2, r2, #26
 8102ed0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102ed4:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8102ed8:	fab7 f787 	clz	r7, r7
 8102edc:	3701      	adds	r7, #1
 8102ede:	f007 071f 	and.w	r7, r7, #31
 8102ee2:	2101      	movs	r1, #1
 8102ee4:	40b9      	lsls	r1, r7
 8102ee6:	4311      	orrs	r1, r2
 8102ee8:	2800      	cmp	r0, #0
 8102eea:	d14a      	bne.n	8102f82 <HAL_ADC_ConfigChannel+0x2ae>
 8102eec:	0e9b      	lsrs	r3, r3, #26
 8102eee:	3301      	adds	r3, #1
 8102ef0:	f003 031f 	and.w	r3, r3, #31
 8102ef4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102ef8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102efa:	68b2      	ldr	r2, [r6, #8]
 8102efc:	4319      	orrs	r1, r3
 8102efe:	4620      	mov	r0, r4
 8102f00:	f7ff fed0 	bl	8102ca4 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102f04:	6832      	ldr	r2, [r6, #0]
 8102f06:	2a00      	cmp	r2, #0
 8102f08:	f6bf af63 	bge.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102f0c:	494c      	ldr	r1, [pc, #304]	; (8103040 <HAL_ADC_ConfigChannel+0x36c>)
 8102f0e:	428c      	cmp	r4, r1
 8102f10:	d05b      	beq.n	8102fca <HAL_ADC_ConfigChannel+0x2f6>
 8102f12:	4e4c      	ldr	r6, [pc, #304]	; (8103044 <HAL_ADC_ConfigChannel+0x370>)
 8102f14:	4b4c      	ldr	r3, [pc, #304]	; (8103048 <HAL_ADC_ConfigChannel+0x374>)
 8102f16:	484d      	ldr	r0, [pc, #308]	; (810304c <HAL_ADC_ConfigChannel+0x378>)
 8102f18:	42b4      	cmp	r4, r6
 8102f1a:	bf18      	it	ne
 8102f1c:	4603      	movne	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102f1e:	428c      	cmp	r4, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102f20:	689b      	ldr	r3, [r3, #8]
 8102f22:	d002      	beq.n	8102f2a <HAL_ADC_ConfigChannel+0x256>
 8102f24:	4947      	ldr	r1, [pc, #284]	; (8103044 <HAL_ADC_ConfigChannel+0x370>)
 8102f26:	428c      	cmp	r4, r1
 8102f28:	d151      	bne.n	8102fce <HAL_ADC_ConfigChannel+0x2fa>
 8102f2a:	4845      	ldr	r0, [pc, #276]	; (8103040 <HAL_ADC_ConfigChannel+0x36c>)
 8102f2c:	f7ff feca 	bl	8102cc4 <LL_ADC_IsEnabled>
 8102f30:	4601      	mov	r1, r0
 8102f32:	4844      	ldr	r0, [pc, #272]	; (8103044 <HAL_ADC_ConfigChannel+0x370>)
 8102f34:	f7ff fec6 	bl	8102cc4 <LL_ADC_IsEnabled>
 8102f38:	4308      	orrs	r0, r1
 8102f3a:	d14d      	bne.n	8102fd8 <HAL_ADC_ConfigChannel+0x304>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102f3c:	4844      	ldr	r0, [pc, #272]	; (8103050 <HAL_ADC_ConfigChannel+0x37c>)
 8102f3e:	4282      	cmp	r2, r0
 8102f40:	f003 71e0 	and.w	r1, r3, #29360128	; 0x1c00000
 8102f44:	d14e      	bne.n	8102fe4 <HAL_ADC_ConfigChannel+0x310>
 8102f46:	021b      	lsls	r3, r3, #8
 8102f48:	f53f af43 	bmi.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102f4c:	4b41      	ldr	r3, [pc, #260]	; (8103054 <HAL_ADC_ConfigChannel+0x380>)
 8102f4e:	429c      	cmp	r4, r3
 8102f50:	f47f af3f 	bne.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102f54:	4a3d      	ldr	r2, [pc, #244]	; (810304c <HAL_ADC_ConfigChannel+0x378>)
 8102f56:	6893      	ldr	r3, [r2, #8]
 8102f58:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8102f5c:	430b      	orrs	r3, r1
 8102f5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102f62:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102f64:	4b3c      	ldr	r3, [pc, #240]	; (8103058 <HAL_ADC_ConfigChannel+0x384>)
 8102f66:	4a3d      	ldr	r2, [pc, #244]	; (810305c <HAL_ADC_ConfigChannel+0x388>)
 8102f68:	681b      	ldr	r3, [r3, #0]
 8102f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8102f6e:	3301      	adds	r3, #1
 8102f70:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 8102f72:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8102f74:	9b01      	ldr	r3, [sp, #4]
 8102f76:	2b00      	cmp	r3, #0
 8102f78:	f43f af2b 	beq.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
                wait_loop_index--;
 8102f7c:	9b01      	ldr	r3, [sp, #4]
 8102f7e:	3b01      	subs	r3, #1
 8102f80:	e7f7      	b.n	8102f72 <HAL_ADC_ConfigChannel+0x29e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f82:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8102f86:	fab3 f383 	clz	r3, r3
 8102f8a:	e7b0      	b.n	8102eee <HAL_ADC_ConfigChannel+0x21a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f8c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102f90:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102f94:	3201      	adds	r2, #1
 8102f96:	0692      	lsls	r2, r2, #26
 8102f98:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f9c:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8102fa0:	fab7 f787 	clz	r7, r7
 8102fa4:	3701      	adds	r7, #1
 8102fa6:	f007 071f 	and.w	r7, r7, #31
 8102faa:	2101      	movs	r1, #1
 8102fac:	40b9      	lsls	r1, r7
 8102fae:	e770      	b.n	8102e92 <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102fb0:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102fb4:	fab2 f282 	clz	r2, r2
 8102fb8:	3201      	adds	r2, #1
 8102fba:	f002 021f 	and.w	r2, r2, #31
 8102fbe:	2303      	movs	r3, #3
 8102fc0:	f06f 001d 	mvn.w	r0, #29
 8102fc4:	fb13 0302 	smlabb	r3, r3, r2, r0
 8102fc8:	e76e      	b.n	8102ea8 <HAL_ADC_ConfigChannel+0x1d4>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102fca:	4b1f      	ldr	r3, [pc, #124]	; (8103048 <HAL_ADC_ConfigChannel+0x374>)
 8102fcc:	e7a7      	b.n	8102f1e <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102fce:	4821      	ldr	r0, [pc, #132]	; (8103054 <HAL_ADC_ConfigChannel+0x380>)
 8102fd0:	f7ff fe78 	bl	8102cc4 <LL_ADC_IsEnabled>
 8102fd4:	2800      	cmp	r0, #0
 8102fd6:	d0b1      	beq.n	8102f3c <HAL_ADC_ConfigChannel+0x268>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102fd8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8102fda:	f043 0320 	orr.w	r3, r3, #32
 8102fde:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8102fe0:	2301      	movs	r3, #1
 8102fe2:	e6f7      	b.n	8102dd4 <HAL_ADC_ConfigChannel+0x100>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102fe4:	481e      	ldr	r0, [pc, #120]	; (8103060 <HAL_ADC_ConfigChannel+0x38c>)
 8102fe6:	4282      	cmp	r2, r0
 8102fe8:	d110      	bne.n	810300c <HAL_ADC_ConfigChannel+0x338>
 8102fea:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8102fee:	f47f aef0 	bne.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102ff2:	4a18      	ldr	r2, [pc, #96]	; (8103054 <HAL_ADC_ConfigChannel+0x380>)
 8102ff4:	4294      	cmp	r4, r2
 8102ff6:	f47f aeec 	bne.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
 8102ffa:	4814      	ldr	r0, [pc, #80]	; (810304c <HAL_ADC_ConfigChannel+0x378>)
 8102ffc:	6882      	ldr	r2, [r0, #8]
 8102ffe:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8103002:	430a      	orrs	r2, r1
 8103004:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8103008:	6082      	str	r2, [r0, #8]
}
 810300a:	e6e3      	b.n	8102dd4 <HAL_ADC_ConfigChannel+0x100>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 810300c:	4815      	ldr	r0, [pc, #84]	; (8103064 <HAL_ADC_ConfigChannel+0x390>)
 810300e:	4282      	cmp	r2, r0
 8103010:	f47f aedf 	bne.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
 8103014:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8103018:	f47f aedb 	bne.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_VREFINT_INSTANCE(hadc))
 810301c:	4a0d      	ldr	r2, [pc, #52]	; (8103054 <HAL_ADC_ConfigChannel+0x380>)
 810301e:	4294      	cmp	r4, r2
 8103020:	f47f aed7 	bne.w	8102dd2 <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103024:	4809      	ldr	r0, [pc, #36]	; (810304c <HAL_ADC_ConfigChannel+0x378>)
 8103026:	6882      	ldr	r2, [r0, #8]
 8103028:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 810302c:	430a      	orrs	r2, r1
 810302e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8103032:	e7e9      	b.n	8103008 <HAL_ADC_ConfigChannel+0x334>
 8103034:	5c001000 	.word	0x5c001000
 8103038:	000fffff 	.word	0x000fffff
 810303c:	47ff0000 	.word	0x47ff0000
 8103040:	40022000 	.word	0x40022000
 8103044:	40022100 	.word	0x40022100
 8103048:	40022300 	.word	0x40022300
 810304c:	58026300 	.word	0x58026300
 8103050:	cb840000 	.word	0xcb840000
 8103054:	58026000 	.word	0x58026000
 8103058:	1000004c 	.word	0x1000004c
 810305c:	00030d40 	.word	0x00030d40
 8103060:	c7520000 	.word	0xc7520000
 8103064:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103068:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 810306a:	f042 0220 	orr.w	r2, r2, #32
 810306e:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8103070:	e6b0      	b.n	8102dd4 <HAL_ADC_ConfigChannel+0x100>
  __HAL_LOCK(hadc);
 8103072:	2302      	movs	r3, #2
 8103074:	e6b1      	b.n	8102dda <HAL_ADC_ConfigChannel+0x106>
 8103076:	bf00      	nop

08103078 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103078:	6802      	ldr	r2, [r0, #0]
{
 810307a:	b570      	push	{r4, r5, r6, lr}
 810307c:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810307e:	4610      	mov	r0, r2
 8103080:	f7ff fe20 	bl	8102cc4 <LL_ADC_IsEnabled>
 8103084:	b108      	cbz	r0, 810308a <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8103086:	2000      	movs	r0, #0
}
 8103088:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 810308a:	6891      	ldr	r1, [r2, #8]
 810308c:	4b22      	ldr	r3, [pc, #136]	; (8103118 <ADC_Enable+0xa0>)
 810308e:	4219      	tst	r1, r3
 8103090:	d009      	beq.n	81030a6 <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103092:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8103094:	f043 0310 	orr.w	r3, r3, #16
 8103098:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810309a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810309c:	f043 0301 	orr.w	r3, r3, #1
 81030a0:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 81030a2:	2001      	movs	r0, #1
 81030a4:	e7f0      	b.n	8103088 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 81030a6:	6893      	ldr	r3, [r2, #8]
 81030a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81030ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81030b0:	f043 0301 	orr.w	r3, r3, #1
 81030b4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 81030b6:	f7ff fddf 	bl	8102c78 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030ba:	6822      	ldr	r2, [r4, #0]
 81030bc:	4b17      	ldr	r3, [pc, #92]	; (810311c <ADC_Enable+0xa4>)
 81030be:	4918      	ldr	r1, [pc, #96]	; (8103120 <ADC_Enable+0xa8>)
 81030c0:	429a      	cmp	r2, r3
    tickstart = HAL_GetTick();
 81030c2:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030c4:	d00e      	beq.n	81030e4 <ADC_Enable+0x6c>
 81030c6:	4817      	ldr	r0, [pc, #92]	; (8103124 <ADC_Enable+0xac>)
 81030c8:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 81030cc:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 81030d0:	428a      	cmp	r2, r1
 81030d2:	bf08      	it	eq
 81030d4:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81030d6:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81030d8:	689b      	ldr	r3, [r3, #8]
 81030da:	d101      	bne.n	81030e0 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81030dc:	06db      	lsls	r3, r3, #27
 81030de:	d1d2      	bne.n	8103086 <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 81030e0:	4e11      	ldr	r6, [pc, #68]	; (8103128 <ADC_Enable+0xb0>)
 81030e2:	e013      	b.n	810310c <ADC_Enable+0x94>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81030e4:	4b0f      	ldr	r3, [pc, #60]	; (8103124 <ADC_Enable+0xac>)
 81030e6:	e7f6      	b.n	81030d6 <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81030e8:	4610      	mov	r0, r2
 81030ea:	f7ff fdeb 	bl	8102cc4 <LL_ADC_IsEnabled>
 81030ee:	b920      	cbnz	r0, 81030fa <ADC_Enable+0x82>
 81030f0:	6893      	ldr	r3, [r2, #8]
 81030f2:	4033      	ands	r3, r6
 81030f4:	f043 0301 	orr.w	r3, r3, #1
 81030f8:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 81030fa:	f7ff fdbd 	bl	8102c78 <HAL_GetTick>
 81030fe:	1b40      	subs	r0, r0, r5
 8103100:	2802      	cmp	r0, #2
 8103102:	d903      	bls.n	810310c <ADC_Enable+0x94>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103104:	6823      	ldr	r3, [r4, #0]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	07d8      	lsls	r0, r3, #31
 810310a:	d5c2      	bpl.n	8103092 <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810310c:	6822      	ldr	r2, [r4, #0]
 810310e:	6813      	ldr	r3, [r2, #0]
 8103110:	07d9      	lsls	r1, r3, #31
 8103112:	d5e9      	bpl.n	81030e8 <ADC_Enable+0x70>
 8103114:	e7b7      	b.n	8103086 <ADC_Enable+0xe>
 8103116:	bf00      	nop
 8103118:	8000003f 	.word	0x8000003f
 810311c:	40022000 	.word	0x40022000
 8103120:	40022100 	.word	0x40022100
 8103124:	40022300 	.word	0x40022300
 8103128:	7fffffc0 	.word	0x7fffffc0

0810312c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810312c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 810312e:	4a43      	ldr	r2, [pc, #268]	; (810323c <ADC_ConfigureBoostMode+0x110>)
 8103130:	6803      	ldr	r3, [r0, #0]
 8103132:	4293      	cmp	r3, r2
{
 8103134:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103136:	d003      	beq.n	8103140 <ADC_ConfigureBoostMode+0x14>
 8103138:	f502 7280 	add.w	r2, r2, #256	; 0x100
 810313c:	4293      	cmp	r3, r2
 810313e:	d125      	bne.n	810318c <ADC_ConfigureBoostMode+0x60>
 8103140:	4b3f      	ldr	r3, [pc, #252]	; (8103240 <ADC_ConfigureBoostMode+0x114>)
 8103142:	689b      	ldr	r3, [r3, #8]
 8103144:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8103148:	bf14      	ite	ne
 810314a:	2301      	movne	r3, #1
 810314c:	2300      	moveq	r3, #0
 810314e:	b9fb      	cbnz	r3, 8103190 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103150:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103154:	2100      	movs	r1, #0
 8103156:	f002 fd23 	bl	8105ba0 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 810315a:	686b      	ldr	r3, [r5, #4]
 810315c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103160:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8103162:	d04a      	beq.n	81031fa <ADC_ConfigureBoostMode+0xce>
 8103164:	d83f      	bhi.n	81031e6 <ADC_ConfigureBoostMode+0xba>
 8103166:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810316a:	d044      	beq.n	81031f6 <ADC_ConfigureBoostMode+0xca>
 810316c:	d836      	bhi.n	81031dc <ADC_ConfigureBoostMode+0xb0>
 810316e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103172:	d008      	beq.n	8103186 <ADC_ConfigureBoostMode+0x5a>
 8103174:	d82c      	bhi.n	81031d0 <ADC_ConfigureBoostMode+0xa4>
 8103176:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810317a:	d004      	beq.n	8103186 <ADC_ConfigureBoostMode+0x5a>
 810317c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8103180:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8103184:	d116      	bne.n	81031b4 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103186:	0c9b      	lsrs	r3, r3, #18
 8103188:	005b      	lsls	r3, r3, #1
 810318a:	e00f      	b.n	81031ac <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 810318c:	4b2d      	ldr	r3, [pc, #180]	; (8103244 <ADC_ConfigureBoostMode+0x118>)
 810318e:	e7d8      	b.n	8103142 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8103190:	f001 fcae 	bl	8104af0 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8103194:	686b      	ldr	r3, [r5, #4]
 8103196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    freq = HAL_RCC_GetHCLKFreq();
 810319a:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 810319c:	d005      	beq.n	81031aa <ADC_ConfigureBoostMode+0x7e>
 810319e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81031a2:	d006      	beq.n	81031b2 <ADC_ConfigureBoostMode+0x86>
 81031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81031a8:	d104      	bne.n	81031b4 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81031aa:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81031ac:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 81031b0:	e000      	b.n	81031b4 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 81031b2:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81031b4:	f7ff fd66 	bl	8102c84 <HAL_GetREVID>
 81031b8:	f241 0303 	movw	r3, #4099	; 0x1003
 81031bc:	4298      	cmp	r0, r3
 81031be:	682b      	ldr	r3, [r5, #0]
 81031c0:	d823      	bhi.n	810320a <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 81031c2:	4a21      	ldr	r2, [pc, #132]	; (8103248 <ADC_ConfigureBoostMode+0x11c>)
 81031c4:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81031c6:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 81031c8:	d91b      	bls.n	8103202 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81031ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81031ce:	e01a      	b.n	8103206 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 81031d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81031d4:	d0d7      	beq.n	8103186 <ADC_ConfigureBoostMode+0x5a>
 81031d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81031da:	e7d3      	b.n	8103184 <ADC_ConfigureBoostMode+0x58>
 81031dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81031e0:	d1e8      	bne.n	81031b4 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 81031e2:	0944      	lsrs	r4, r0, #5
        break;
 81031e4:	e7e6      	b.n	81031b4 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 81031e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81031ea:	d008      	beq.n	81031fe <ADC_ConfigureBoostMode+0xd2>
 81031ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81031f0:	d1e0      	bne.n	81031b4 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 81031f2:	0a04      	lsrs	r4, r0, #8
        break;
 81031f4:	e7de      	b.n	81031b4 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 81031f6:	0904      	lsrs	r4, r0, #4
        break;
 81031f8:	e7dc      	b.n	81031b4 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 81031fa:	0984      	lsrs	r4, r0, #6
        break;
 81031fc:	e7da      	b.n	81031b4 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 81031fe:	09c4      	lsrs	r4, r0, #7
        break;
 8103200:	e7d8      	b.n	81031b4 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103206:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103208:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 810320a:	4a10      	ldr	r2, [pc, #64]	; (810324c <ADC_ConfigureBoostMode+0x120>)
 810320c:	4294      	cmp	r4, r2
 810320e:	d803      	bhi.n	8103218 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103210:	689a      	ldr	r2, [r3, #8]
 8103212:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103216:	e7f6      	b.n	8103206 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8103218:	4a0d      	ldr	r2, [pc, #52]	; (8103250 <ADC_ConfigureBoostMode+0x124>)
 810321a:	4294      	cmp	r4, r2
 810321c:	d803      	bhi.n	8103226 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 810321e:	689a      	ldr	r2, [r3, #8]
 8103220:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103224:	e7d1      	b.n	81031ca <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8103226:	4a0b      	ldr	r2, [pc, #44]	; (8103254 <ADC_ConfigureBoostMode+0x128>)
 8103228:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810322a:	689a      	ldr	r2, [r3, #8]
 810322c:	bf9a      	itte	ls
 810322e:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
 8103232:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103236:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
 810323a:	e7e4      	b.n	8103206 <ADC_ConfigureBoostMode+0xda>
 810323c:	40022000 	.word	0x40022000
 8103240:	40022300 	.word	0x40022300
 8103244:	58026300 	.word	0x58026300
 8103248:	01312d00 	.word	0x01312d00
 810324c:	00bebc21 	.word	0x00bebc21
 8103250:	017d7841 	.word	0x017d7841
 8103254:	02faf081 	.word	0x02faf081

08103258 <HAL_ADC_Init>:
{
 8103258:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 810325a:	2300      	movs	r3, #0
 810325c:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 810325e:	4604      	mov	r4, r0
 8103260:	2800      	cmp	r0, #0
 8103262:	f000 80f1 	beq.w	8103448 <HAL_ADC_Init+0x1f0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103266:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8103268:	b925      	cbnz	r5, 8103274 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 810326a:	f7fe f829 	bl	81012c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 810326e:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8103270:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103274:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103276:	689a      	ldr	r2, [r3, #8]
 8103278:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 810327a:	bf41      	itttt	mi
 810327c:	689a      	ldrmi	r2, [r3, #8]
 810327e:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8103282:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8103286:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103288:	689a      	ldr	r2, [r3, #8]
 810328a:	00d1      	lsls	r1, r2, #3
 810328c:	f140 80a2 	bpl.w	81033d4 <HAL_ADC_Init+0x17c>
 8103290:	689a      	ldr	r2, [r3, #8]
 8103292:	00d2      	lsls	r2, r2, #3
 8103294:	f100 80b4 	bmi.w	8103400 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103298:	6d62      	ldr	r2, [r4, #84]	; 0x54
 810329a:	f042 0210 	orr.w	r2, r2, #16
 810329e:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81032a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 81032a2:	f042 0201 	orr.w	r2, r2, #1
 81032a6:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 81032a8:	2501      	movs	r5, #1
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81032aa:	4618      	mov	r0, r3
 81032ac:	f7ff fd0e 	bl	8102ccc <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81032b0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 81032b2:	f002 0210 	and.w	r2, r2, #16
 81032b6:	4310      	orrs	r0, r2
 81032b8:	f040 80c2 	bne.w	8103440 <HAL_ADC_Init+0x1e8>
    ADC_STATE_CLR_SET(hadc->State,
 81032bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 81032be:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 81032c2:	f042 0202 	orr.w	r2, r2, #2
 81032c6:	6562      	str	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81032c8:	4618      	mov	r0, r3
 81032ca:	f7ff fcfb 	bl	8102cc4 <LL_ADC_IsEnabled>
 81032ce:	b980      	cbnz	r0, 81032f2 <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81032d0:	4e5e      	ldr	r6, [pc, #376]	; (810344c <HAL_ADC_Init+0x1f4>)
 81032d2:	495f      	ldr	r1, [pc, #380]	; (8103450 <HAL_ADC_Init+0x1f8>)
 81032d4:	42b3      	cmp	r3, r6
 81032d6:	d002      	beq.n	81032de <HAL_ADC_Init+0x86>
 81032d8:	428b      	cmp	r3, r1
 81032da:	f040 8093 	bne.w	8103404 <HAL_ADC_Init+0x1ac>
 81032de:	485b      	ldr	r0, [pc, #364]	; (810344c <HAL_ADC_Init+0x1f4>)
 81032e0:	f7ff fcf0 	bl	8102cc4 <LL_ADC_IsEnabled>
 81032e4:	4602      	mov	r2, r0
 81032e6:	485a      	ldr	r0, [pc, #360]	; (8103450 <HAL_ADC_Init+0x1f8>)
 81032e8:	f7ff fcec 	bl	8102cc4 <LL_ADC_IsEnabled>
 81032ec:	4310      	orrs	r0, r2
 81032ee:	f000 8097 	beq.w	8103420 <HAL_ADC_Init+0x1c8>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81032f2:	f7ff fcc7 	bl	8102c84 <HAL_GetREVID>
 81032f6:	f241 0303 	movw	r3, #4099	; 0x1003
 81032fa:	4298      	cmp	r0, r3
 81032fc:	7f21      	ldrb	r1, [r4, #28]
 81032fe:	68a0      	ldr	r0, [r4, #8]
 8103300:	7d62      	ldrb	r2, [r4, #21]
 8103302:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8103304:	f240 8092 	bls.w	810342c <HAL_ADC_Init+0x1d4>
 8103308:	2810      	cmp	r0, #16
 810330a:	f040 808f 	bne.w	810342c <HAL_ADC_Init+0x1d4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810330e:	0352      	lsls	r2, r2, #13
 8103310:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8103314:	431a      	orrs	r2, r3
 8103316:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810331a:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 810331c:	bf02      	ittt	eq
 810331e:	6a22      	ldreq	r2, [r4, #32]
 8103320:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8103324:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 810332a:	b122      	cbz	r2, 8103336 <HAL_ADC_Init+0xde>
                  | hadc->Init.ExternalTrigConvEdge
 810332c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810332e:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103332:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103334:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8103336:	6822      	ldr	r2, [r4, #0]
 8103338:	4946      	ldr	r1, [pc, #280]	; (8103454 <HAL_ADC_Init+0x1fc>)
 810333a:	68d0      	ldr	r0, [r2, #12]
 810333c:	4001      	ands	r1, r0
 810333e:	4319      	orrs	r1, r3
 8103340:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103342:	4610      	mov	r0, r2
 8103344:	f7ff fcc2 	bl	8102ccc <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103348:	6893      	ldr	r3, [r2, #8]
 810334a:	f003 0308 	and.w	r3, r3, #8
 810334e:	4318      	orrs	r0, r3
 8103350:	d127      	bne.n	81033a2 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103352:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103354:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810335a:	f023 0303 	bic.w	r3, r3, #3
 810335e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8103362:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8103364:	430b      	orrs	r3, r1
 8103366:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8103368:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 810336c:	2b01      	cmp	r3, #1
 810336e:	d163      	bne.n	8103438 <HAL_ADC_Init+0x1e0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8103370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8103372:	6910      	ldr	r0, [r2, #16]
 8103374:	1e59      	subs	r1, r3, #1
 8103376:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 810337a:	4333      	orrs	r3, r6
 810337c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8103380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8103382:	430b      	orrs	r3, r1
 8103384:	4934      	ldr	r1, [pc, #208]	; (8103458 <HAL_ADC_Init+0x200>)
 8103386:	4001      	ands	r1, r0
 8103388:	430b      	orrs	r3, r1
 810338a:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810338e:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103390:	6913      	ldr	r3, [r2, #16]
 8103392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8103394:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8103398:	430b      	orrs	r3, r1
 810339a:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 810339c:	4620      	mov	r0, r4
 810339e:	f7ff fec5 	bl	810312c <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81033a2:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81033a4:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81033a6:	2b01      	cmp	r3, #1
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81033a8:	bf05      	ittet	eq
 81033aa:	6b11      	ldreq	r1, [r2, #48]	; 0x30
 81033ac:	69a3      	ldreq	r3, [r4, #24]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81033ae:	6b13      	ldrne	r3, [r2, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81033b0:	f103 33ff 	addeq.w	r3, r3, #4294967295
 81033b4:	bf06      	itte	eq
 81033b6:	f021 010f 	biceq.w	r1, r1, #15
 81033ba:	430b      	orreq	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81033bc:	f023 030f 	bicne.w	r3, r3, #15
 81033c0:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81033c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 81033c4:	f023 0303 	bic.w	r3, r3, #3
 81033c8:	f043 0301 	orr.w	r3, r3, #1
 81033cc:	6563      	str	r3, [r4, #84]	; 0x54
}
 81033ce:	4628      	mov	r0, r5
 81033d0:	b002      	add	sp, #8
 81033d2:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 81033d4:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81033d6:	4921      	ldr	r1, [pc, #132]	; (810345c <HAL_ADC_Init+0x204>)
 81033d8:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 81033dc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 81033e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 81033e4:	609a      	str	r2, [r3, #8]
 81033e6:	4a1e      	ldr	r2, [pc, #120]	; (8103460 <HAL_ADC_Init+0x208>)
 81033e8:	6812      	ldr	r2, [r2, #0]
 81033ea:	fbb2 f2f1 	udiv	r2, r2, r1
 81033ee:	3201      	adds	r2, #1
      wait_loop_index--;
 81033f0:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 81033f2:	9a01      	ldr	r2, [sp, #4]
 81033f4:	2a00      	cmp	r2, #0
 81033f6:	f43f af4b 	beq.w	8103290 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 81033fa:	9a01      	ldr	r2, [sp, #4]
 81033fc:	3a01      	subs	r2, #1
 81033fe:	e7f7      	b.n	81033f0 <HAL_ADC_Init+0x198>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103400:	2500      	movs	r5, #0
 8103402:	e752      	b.n	81032aa <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103404:	4817      	ldr	r0, [pc, #92]	; (8103464 <HAL_ADC_Init+0x20c>)
 8103406:	f7ff fc5d 	bl	8102cc4 <LL_ADC_IsEnabled>
 810340a:	2800      	cmp	r0, #0
 810340c:	f47f af71 	bne.w	81032f2 <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8103410:	4a15      	ldr	r2, [pc, #84]	; (8103468 <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8103412:	6893      	ldr	r3, [r2, #8]
 8103414:	6861      	ldr	r1, [r4, #4]
 8103416:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 810341a:	430b      	orrs	r3, r1
 810341c:	6093      	str	r3, [r2, #8]
}
 810341e:	e768      	b.n	81032f2 <HAL_ADC_Init+0x9a>
 8103420:	42b3      	cmp	r3, r6
 8103422:	d001      	beq.n	8103428 <HAL_ADC_Init+0x1d0>
 8103424:	428b      	cmp	r3, r1
 8103426:	d1f3      	bne.n	8103410 <HAL_ADC_Init+0x1b8>
 8103428:	4a10      	ldr	r2, [pc, #64]	; (810346c <HAL_ADC_Init+0x214>)
 810342a:	e7f2      	b.n	8103412 <HAL_ADC_Init+0x1ba>
                  hadc->Init.Overrun                                                    |
 810342c:	4303      	orrs	r3, r0
 810342e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8103436:	e770      	b.n	810331a <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103438:	6913      	ldr	r3, [r2, #16]
 810343a:	f023 0301 	bic.w	r3, r3, #1
 810343e:	e7a6      	b.n	810338e <HAL_ADC_Init+0x136>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103440:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8103442:	f043 0310 	orr.w	r3, r3, #16
 8103446:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8103448:	2501      	movs	r5, #1
 810344a:	e7c0      	b.n	81033ce <HAL_ADC_Init+0x176>
 810344c:	40022000 	.word	0x40022000
 8103450:	40022100 	.word	0x40022100
 8103454:	fff0c003 	.word	0xfff0c003
 8103458:	fc00f81e 	.word	0xfc00f81e
 810345c:	00030d40 	.word	0x00030d40
 8103460:	1000004c 	.word	0x1000004c
 8103464:	58026000 	.word	0x58026000
 8103468:	58026300 	.word	0x58026300
 810346c:	40022300 	.word	0x40022300

08103470 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103470:	6880      	ldr	r0, [r0, #8]
}
 8103472:	f000 0001 	and.w	r0, r0, #1
 8103476:	4770      	bx	lr

08103478 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103478:	6880      	ldr	r0, [r0, #8]
}
 810347a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 810347e:	4770      	bx	lr

08103480 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103480:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103482:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103486:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8103488:	2b01      	cmp	r3, #1
{
 810348a:	b09a      	sub	sp, #104	; 0x68
 810348c:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 810348e:	d052      	beq.n	8103536 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 8103490:	2301      	movs	r3, #1
 8103492:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103496:	6816      	ldr	r6, [r2, #0]
 8103498:	4c28      	ldr	r4, [pc, #160]	; (810353c <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810349a:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810349c:	42a6      	cmp	r6, r4
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810349e:	9016      	str	r0, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81034a0:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81034a2:	d10d      	bne.n	81034c0 <HAL_ADCEx_MultiModeConfigChannel+0x40>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81034a4:	4826      	ldr	r0, [pc, #152]	; (8103540 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 81034a6:	f7ff ffe7 	bl	8103478 <LL_ADC_REG_IsConversionOngoing>
 81034aa:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81034ac:	4630      	mov	r0, r6
 81034ae:	f7ff ffe3 	bl	8103478 <LL_ADC_REG_IsConversionOngoing>
 81034b2:	4320      	orrs	r0, r4
 81034b4:	d00d      	beq.n	81034d2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034b6:	6d51      	ldr	r1, [r2, #84]	; 0x54
 81034b8:	f041 0120 	orr.w	r1, r1, #32
 81034bc:	6551      	str	r1, [r2, #84]	; 0x54
 81034be:	e027      	b.n	8103510 <HAL_ADCEx_MultiModeConfigChannel+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034c0:	6d51      	ldr	r1, [r2, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 81034c2:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81034c6:	f041 0120 	orr.w	r1, r1, #32
 81034ca:	6551      	str	r1, [r2, #84]	; 0x54
    return HAL_ERROR;
 81034cc:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 81034ce:	b01a      	add	sp, #104	; 0x68
 81034d0:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034d2:	4c1c      	ldr	r4, [pc, #112]	; (8103544 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81034d4:	68a3      	ldr	r3, [r4, #8]
 81034d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81034da:	b1dd      	cbz	r5, 8103514 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81034dc:	6848      	ldr	r0, [r1, #4]
 81034de:	4303      	orrs	r3, r0
 81034e0:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81034e2:	4630      	mov	r0, r6
 81034e4:	f7ff ffc4 	bl	8103470 <LL_ADC_IsEnabled>
 81034e8:	4603      	mov	r3, r0
 81034ea:	4815      	ldr	r0, [pc, #84]	; (8103540 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 81034ec:	f7ff ffc0 	bl	8103470 <LL_ADC_IsEnabled>
 81034f0:	4303      	orrs	r3, r0
 81034f2:	d004      	beq.n	81034fe <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81034f4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 81034f6:	2300      	movs	r3, #0
 81034f8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 81034fc:	e7e7      	b.n	81034ce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 81034fe:	6889      	ldr	r1, [r1, #8]
 8103500:	68a0      	ldr	r0, [r4, #8]
 8103502:	430d      	orrs	r5, r1
 8103504:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8103508:	f021 010f 	bic.w	r1, r1, #15
 810350c:	430d      	orrs	r5, r1
 810350e:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 8103510:	4618      	mov	r0, r3
 8103512:	e7f0      	b.n	81034f6 <HAL_ADCEx_MultiModeConfigChannel+0x76>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103514:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103516:	4630      	mov	r0, r6
 8103518:	f7ff ffaa 	bl	8103470 <LL_ADC_IsEnabled>
 810351c:	4603      	mov	r3, r0
 810351e:	4808      	ldr	r0, [pc, #32]	; (8103540 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8103520:	f7ff ffa6 	bl	8103470 <LL_ADC_IsEnabled>
 8103524:	4303      	orrs	r3, r0
 8103526:	d1e5      	bne.n	81034f4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103528:	68a1      	ldr	r1, [r4, #8]
 810352a:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 810352e:	f021 010f 	bic.w	r1, r1, #15
 8103532:	60a1      	str	r1, [r4, #8]
 8103534:	e7ec      	b.n	8103510 <HAL_ADCEx_MultiModeConfigChannel+0x90>
  __HAL_LOCK(hadc);
 8103536:	2002      	movs	r0, #2
 8103538:	e7c9      	b.n	81034ce <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 810353a:	bf00      	nop
 810353c:	40022000 	.word	0x40022000
 8103540:	40022100 	.word	0x40022100
 8103544:	40022300 	.word	0x40022300

08103548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103548:	4907      	ldr	r1, [pc, #28]	; (8103568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 810354a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810354c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103550:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103552:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103558:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810355a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810355c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8103564:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8103566:	4770      	bx	lr
 8103568:	e000ed00 	.word	0xe000ed00

0810356c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810356c:	4b16      	ldr	r3, [pc, #88]	; (81035c8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810356e:	b530      	push	{r4, r5, lr}
 8103570:	68dc      	ldr	r4, [r3, #12]
 8103572:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103576:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810357a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810357c:	2b04      	cmp	r3, #4
 810357e:	bf28      	it	cs
 8103580:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103582:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103584:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103588:	bf8c      	ite	hi
 810358a:	3c03      	subhi	r4, #3
 810358c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810358e:	fa05 f303 	lsl.w	r3, r5, r3
 8103592:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103596:	40a5      	lsls	r5, r4
 8103598:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810359c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 810359e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81035a0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035a4:	bfac      	ite	ge
 81035a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035aa:	4a08      	ldrlt	r2, [pc, #32]	; (81035cc <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035b0:	bfb8      	it	lt
 81035b2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035b6:	b2db      	uxtb	r3, r3
 81035b8:	bfaa      	itet	ge
 81035ba:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035be:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035c0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 81035c4:	bd30      	pop	{r4, r5, pc}
 81035c6:	bf00      	nop
 81035c8:	e000ed00 	.word	0xe000ed00
 81035cc:	e000ed14 	.word	0xe000ed14

081035d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 81035d0:	2800      	cmp	r0, #0
 81035d2:	db07      	blt.n	81035e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81035d4:	4a04      	ldr	r2, [pc, #16]	; (81035e8 <HAL_NVIC_EnableIRQ+0x18>)
 81035d6:	0941      	lsrs	r1, r0, #5
 81035d8:	2301      	movs	r3, #1
 81035da:	f000 001f 	and.w	r0, r0, #31
 81035de:	4083      	lsls	r3, r0
 81035e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 81035e4:	4770      	bx	lr
 81035e6:	bf00      	nop
 81035e8:	e000e100 	.word	0xe000e100

081035ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81035ec:	3801      	subs	r0, #1
 81035ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 81035f2:	d20b      	bcs.n	810360c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81035f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035f8:	4a05      	ldr	r2, [pc, #20]	; (8103610 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81035fa:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035fc:	21f0      	movs	r1, #240	; 0xf0
 81035fe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103602:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103604:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103606:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103608:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810360a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 810360c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 810360e:	4770      	bx	lr
 8103610:	e000ed00 	.word	0xe000ed00

08103614 <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103614:	4b04      	ldr	r3, [pc, #16]	; (8103628 <HAL_GetCurrentCPUID+0x14>)
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 810361c:	2b07      	cmp	r3, #7
  }
}
 810361e:	bf0c      	ite	eq
 8103620:	2003      	moveq	r0, #3
 8103622:	2001      	movne	r0, #1
 8103624:	4770      	bx	lr
 8103626:	bf00      	nop
 8103628:	e000ed00 	.word	0xe000ed00

0810362c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810362c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810362e:	f8df c178 	ldr.w	ip, [pc, #376]	; 81037a8 <DMA_SetConfig+0x17c>
 8103632:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103634:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103636:	4564      	cmp	r4, ip
 8103638:	d045      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 810363a:	4d58      	ldr	r5, [pc, #352]	; (810379c <DMA_SetConfig+0x170>)
 810363c:	42ac      	cmp	r4, r5
 810363e:	d042      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103640:	3518      	adds	r5, #24
 8103642:	42ac      	cmp	r4, r5
 8103644:	d03f      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103646:	3518      	adds	r5, #24
 8103648:	42ac      	cmp	r4, r5
 810364a:	d03c      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 810364c:	3518      	adds	r5, #24
 810364e:	42ac      	cmp	r4, r5
 8103650:	d039      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103652:	3518      	adds	r5, #24
 8103654:	42ac      	cmp	r4, r5
 8103656:	d036      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103658:	3518      	adds	r5, #24
 810365a:	42ac      	cmp	r4, r5
 810365c:	d033      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 810365e:	3518      	adds	r5, #24
 8103660:	42ac      	cmp	r4, r5
 8103662:	d030      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103664:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8103668:	42ac      	cmp	r4, r5
 810366a:	d02c      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 810366c:	3518      	adds	r5, #24
 810366e:	42ac      	cmp	r4, r5
 8103670:	d029      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103672:	3518      	adds	r5, #24
 8103674:	42ac      	cmp	r4, r5
 8103676:	d026      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103678:	3518      	adds	r5, #24
 810367a:	42ac      	cmp	r4, r5
 810367c:	d023      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 810367e:	3518      	adds	r5, #24
 8103680:	42ac      	cmp	r4, r5
 8103682:	d020      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103684:	3518      	adds	r5, #24
 8103686:	42ac      	cmp	r4, r5
 8103688:	d01d      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 810368a:	3518      	adds	r5, #24
 810368c:	42ac      	cmp	r4, r5
 810368e:	d01a      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103690:	3518      	adds	r5, #24
 8103692:	42ac      	cmp	r4, r5
 8103694:	d017      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 8103696:	4d42      	ldr	r5, [pc, #264]	; (81037a0 <DMA_SetConfig+0x174>)
 8103698:	42ac      	cmp	r4, r5
 810369a:	d014      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 810369c:	3514      	adds	r5, #20
 810369e:	42ac      	cmp	r4, r5
 81036a0:	d011      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 81036a2:	3514      	adds	r5, #20
 81036a4:	42ac      	cmp	r4, r5
 81036a6:	d00e      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 81036a8:	3514      	adds	r5, #20
 81036aa:	42ac      	cmp	r4, r5
 81036ac:	d00b      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 81036ae:	3514      	adds	r5, #20
 81036b0:	42ac      	cmp	r4, r5
 81036b2:	d008      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 81036b4:	3514      	adds	r5, #20
 81036b6:	42ac      	cmp	r4, r5
 81036b8:	d005      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 81036ba:	3514      	adds	r5, #20
 81036bc:	42ac      	cmp	r4, r5
 81036be:	d002      	beq.n	81036c6 <DMA_SetConfig+0x9a>
 81036c0:	3514      	adds	r5, #20
 81036c2:	42ac      	cmp	r4, r5
 81036c4:	d169      	bne.n	810379a <DMA_SetConfig+0x16e>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81036c6:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 81036ca:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81036cc:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 81036ce:	b115      	cbz	r5, 81036d6 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81036d0:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 81036d4:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81036d6:	4564      	cmp	r4, ip
 81036d8:	d037      	beq.n	810374a <DMA_SetConfig+0x11e>
 81036da:	4d30      	ldr	r5, [pc, #192]	; (810379c <DMA_SetConfig+0x170>)
 81036dc:	42ac      	cmp	r4, r5
 81036de:	d034      	beq.n	810374a <DMA_SetConfig+0x11e>
 81036e0:	3518      	adds	r5, #24
 81036e2:	42ac      	cmp	r4, r5
 81036e4:	d031      	beq.n	810374a <DMA_SetConfig+0x11e>
 81036e6:	3518      	adds	r5, #24
 81036e8:	42ac      	cmp	r4, r5
 81036ea:	d02e      	beq.n	810374a <DMA_SetConfig+0x11e>
 81036ec:	3518      	adds	r5, #24
 81036ee:	42ac      	cmp	r4, r5
 81036f0:	d02b      	beq.n	810374a <DMA_SetConfig+0x11e>
 81036f2:	3518      	adds	r5, #24
 81036f4:	42ac      	cmp	r4, r5
 81036f6:	d028      	beq.n	810374a <DMA_SetConfig+0x11e>
 81036f8:	3518      	adds	r5, #24
 81036fa:	42ac      	cmp	r4, r5
 81036fc:	d025      	beq.n	810374a <DMA_SetConfig+0x11e>
 81036fe:	3518      	adds	r5, #24
 8103700:	42ac      	cmp	r4, r5
 8103702:	d022      	beq.n	810374a <DMA_SetConfig+0x11e>
 8103704:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8103708:	42ac      	cmp	r4, r5
 810370a:	d01e      	beq.n	810374a <DMA_SetConfig+0x11e>
 810370c:	3518      	adds	r5, #24
 810370e:	42ac      	cmp	r4, r5
 8103710:	d01b      	beq.n	810374a <DMA_SetConfig+0x11e>
 8103712:	3518      	adds	r5, #24
 8103714:	42ac      	cmp	r4, r5
 8103716:	d018      	beq.n	810374a <DMA_SetConfig+0x11e>
 8103718:	3518      	adds	r5, #24
 810371a:	42ac      	cmp	r4, r5
 810371c:	d015      	beq.n	810374a <DMA_SetConfig+0x11e>
 810371e:	3518      	adds	r5, #24
 8103720:	42ac      	cmp	r4, r5
 8103722:	d012      	beq.n	810374a <DMA_SetConfig+0x11e>
 8103724:	3518      	adds	r5, #24
 8103726:	42ac      	cmp	r4, r5
 8103728:	d00f      	beq.n	810374a <DMA_SetConfig+0x11e>
 810372a:	3518      	adds	r5, #24
 810372c:	42ac      	cmp	r4, r5
 810372e:	d00c      	beq.n	810374a <DMA_SetConfig+0x11e>
 8103730:	3518      	adds	r5, #24
 8103732:	42ac      	cmp	r4, r5
 8103734:	d009      	beq.n	810374a <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103736:	4d1a      	ldr	r5, [pc, #104]	; (81037a0 <DMA_SetConfig+0x174>)
 8103738:	42ac      	cmp	r4, r5
 810373a:	d119      	bne.n	8103770 <DMA_SetConfig+0x144>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810373c:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 810373e:	f005 061f 	and.w	r6, r5, #31
 8103742:	2501      	movs	r5, #1
 8103744:	40b5      	lsls	r5, r6
 8103746:	607d      	str	r5, [r7, #4]
 8103748:	e009      	b.n	810375e <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810374a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 810374c:	f005 061f 	and.w	r6, r5, #31
 8103750:	253f      	movs	r5, #63	; 0x3f
 8103752:	40b5      	lsls	r5, r6
 8103754:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8103756:	6825      	ldr	r5, [r4, #0]
 8103758:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 810375c:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810375e:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103760:	6883      	ldr	r3, [r0, #8]
 8103762:	2b40      	cmp	r3, #64	; 0x40
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8103764:	bf0b      	itete	eq
 8103766:	60a2      	streq	r2, [r4, #8]
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8103768:	60a1      	strne	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810376a:	60e1      	streq	r1, [r4, #12]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810376c:	60e2      	strne	r2, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810376e:	e014      	b.n	810379a <DMA_SetConfig+0x16e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103770:	4d0c      	ldr	r5, [pc, #48]	; (81037a4 <DMA_SetConfig+0x178>)
 8103772:	42ac      	cmp	r4, r5
 8103774:	d0e2      	beq.n	810373c <DMA_SetConfig+0x110>
 8103776:	3514      	adds	r5, #20
 8103778:	42ac      	cmp	r4, r5
 810377a:	d0df      	beq.n	810373c <DMA_SetConfig+0x110>
 810377c:	3514      	adds	r5, #20
 810377e:	42ac      	cmp	r4, r5
 8103780:	d0dc      	beq.n	810373c <DMA_SetConfig+0x110>
 8103782:	3514      	adds	r5, #20
 8103784:	42ac      	cmp	r4, r5
 8103786:	d0d9      	beq.n	810373c <DMA_SetConfig+0x110>
 8103788:	3514      	adds	r5, #20
 810378a:	42ac      	cmp	r4, r5
 810378c:	d0d6      	beq.n	810373c <DMA_SetConfig+0x110>
 810378e:	3514      	adds	r5, #20
 8103790:	42ac      	cmp	r4, r5
 8103792:	d0d3      	beq.n	810373c <DMA_SetConfig+0x110>
 8103794:	3514      	adds	r5, #20
 8103796:	42ac      	cmp	r4, r5
 8103798:	d0d0      	beq.n	810373c <DMA_SetConfig+0x110>
}
 810379a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810379c:	40020028 	.word	0x40020028
 81037a0:	58025408 	.word	0x58025408
 81037a4:	5802541c 	.word	0x5802541c
 81037a8:	40020010 	.word	0x40020010

081037ac <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81037ac:	6803      	ldr	r3, [r0, #0]
 81037ae:	4a23      	ldr	r2, [pc, #140]	; (810383c <DMA_CalcBaseAndBitshift+0x90>)
 81037b0:	4293      	cmp	r3, r2
{
 81037b2:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81037b4:	d032      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037b6:	3218      	adds	r2, #24
 81037b8:	4293      	cmp	r3, r2
 81037ba:	d02f      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037bc:	3218      	adds	r2, #24
 81037be:	4293      	cmp	r3, r2
 81037c0:	d02c      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037c2:	3218      	adds	r2, #24
 81037c4:	4293      	cmp	r3, r2
 81037c6:	d029      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037c8:	3218      	adds	r2, #24
 81037ca:	4293      	cmp	r3, r2
 81037cc:	d026      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037ce:	3218      	adds	r2, #24
 81037d0:	4293      	cmp	r3, r2
 81037d2:	d023      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037d4:	3218      	adds	r2, #24
 81037d6:	4293      	cmp	r3, r2
 81037d8:	d020      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037da:	3218      	adds	r2, #24
 81037dc:	4293      	cmp	r3, r2
 81037de:	d01d      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037e0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81037e4:	4293      	cmp	r3, r2
 81037e6:	d019      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037e8:	3218      	adds	r2, #24
 81037ea:	4293      	cmp	r3, r2
 81037ec:	d016      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037ee:	3218      	adds	r2, #24
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d013      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037f4:	3218      	adds	r2, #24
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d010      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 81037fa:	3218      	adds	r2, #24
 81037fc:	4293      	cmp	r3, r2
 81037fe:	d00d      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 8103800:	3218      	adds	r2, #24
 8103802:	4293      	cmp	r3, r2
 8103804:	d00a      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 8103806:	3218      	adds	r2, #24
 8103808:	4293      	cmp	r3, r2
 810380a:	d007      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
 810380c:	3218      	adds	r2, #24
 810380e:	4293      	cmp	r3, r2
 8103810:	d004      	beq.n	810381c <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103816:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8103818:	4618      	mov	r0, r3
 810381a:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810381c:	b2da      	uxtb	r2, r3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810381e:	4c08      	ldr	r4, [pc, #32]	; (8103840 <DMA_CalcBaseAndBitshift+0x94>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103820:	3a10      	subs	r2, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103826:	2118      	movs	r1, #24
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103828:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 810382c:	2a5f      	cmp	r2, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810382e:	fbb2 f1f1 	udiv	r1, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103832:	5c61      	ldrb	r1, [r4, r1]
 8103834:	65c1      	str	r1, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103836:	bf88      	it	hi
 8103838:	3304      	addhi	r3, #4
 810383a:	e7ec      	b.n	8103816 <DMA_CalcBaseAndBitshift+0x6a>
 810383c:	40020010 	.word	0x40020010
 8103840:	08110e78 	.word	0x08110e78

08103844 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103844:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103846:	4921      	ldr	r1, [pc, #132]	; (81038cc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8103848:	428a      	cmp	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810384a:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810384c:	d028      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810384e:	3114      	adds	r1, #20
 8103850:	428a      	cmp	r2, r1
 8103852:	d025      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103854:	3114      	adds	r1, #20
 8103856:	428a      	cmp	r2, r1
 8103858:	d022      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810385a:	3114      	adds	r1, #20
 810385c:	428a      	cmp	r2, r1
 810385e:	d01f      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103860:	3114      	adds	r1, #20
 8103862:	428a      	cmp	r2, r1
 8103864:	d01c      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103866:	3114      	adds	r1, #20
 8103868:	428a      	cmp	r2, r1
 810386a:	d019      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810386c:	3114      	adds	r1, #20
 810386e:	428a      	cmp	r2, r1
 8103870:	d016      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103872:	3114      	adds	r1, #20
 8103874:	428a      	cmp	r2, r1
 8103876:	d013      	beq.n	81038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103878:	2118      	movs	r1, #24
 810387a:	3b10      	subs	r3, #16
 810387c:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103880:	4913      	ldr	r1, [pc, #76]	; (81038d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8103882:	4411      	add	r1, r2
 8103884:	29a8      	cmp	r1, #168	; 0xa8
 8103886:	d91e      	bls.n	81038c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103888:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810388c:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810388e:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103892:	f003 031f 	and.w	r3, r3, #31
 8103896:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810389a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810389c:	490d      	ldr	r1, [pc, #52]	; (81038d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 810389e:	e00e      	b.n	81038be <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81038a0:	2214      	movs	r2, #20
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038a2:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81038a4:	3b08      	subs	r3, #8
 81038a6:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81038aa:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038ae:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81038b2:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038b6:	fa01 f303 	lsl.w	r3, r1, r3
 81038ba:	4907      	ldr	r1, [pc, #28]	; (81038d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81038bc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81038be:	e9c0 2118 	strd	r2, r1, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81038c2:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 81038c4:	4770      	bx	lr
      stream_number += 8U;
 81038c6:	3308      	adds	r3, #8
 81038c8:	e7de      	b.n	8103888 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 81038ca:	bf00      	nop
 81038cc:	58025408 	.word	0x58025408
 81038d0:	bffdfbf0 	.word	0xbffdfbf0
 81038d4:	40020880 	.word	0x40020880
 81038d8:	58025880 	.word	0x58025880

081038dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81038dc:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81038de:	1e51      	subs	r1, r2, #1
 81038e0:	2907      	cmp	r1, #7
{
 81038e2:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81038e4:	d821      	bhi.n	810392a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81038e6:	6803      	ldr	r3, [r0, #0]
 81038e8:	4c13      	ldr	r4, [pc, #76]	; (8103938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 81038ea:	42a3      	cmp	r3, r4
 81038ec:	d01e      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038ee:	3414      	adds	r4, #20
 81038f0:	42a3      	cmp	r3, r4
 81038f2:	d01b      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038f4:	3414      	adds	r4, #20
 81038f6:	42a3      	cmp	r3, r4
 81038f8:	d018      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81038fa:	3414      	adds	r4, #20
 81038fc:	42a3      	cmp	r3, r4
 81038fe:	d015      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103900:	3414      	adds	r4, #20
 8103902:	42a3      	cmp	r3, r4
 8103904:	d012      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103906:	3414      	adds	r4, #20
 8103908:	42a3      	cmp	r3, r4
 810390a:	d00f      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 810390c:	3414      	adds	r4, #20
 810390e:	42a3      	cmp	r3, r4
 8103910:	d00c      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103912:	3414      	adds	r4, #20
 8103914:	42a3      	cmp	r3, r4
 8103916:	d009      	beq.n	810392c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103918:	4b08      	ldr	r3, [pc, #32]	; (810393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 810391a:	4413      	add	r3, r2
 810391c:	4a08      	ldr	r2, [pc, #32]	; (8103940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 810391e:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103920:	e9c0 321b 	strd	r3, r2, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103924:	2301      	movs	r3, #1
 8103926:	408b      	lsls	r3, r1
 8103928:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 810392a:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810392c:	4b05      	ldr	r3, [pc, #20]	; (8103944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 810392e:	4413      	add	r3, r2
 8103930:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103932:	4a05      	ldr	r2, [pc, #20]	; (8103948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8103934:	e7f4      	b.n	8103920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 8103936:	bf00      	nop
 8103938:	58025408 	.word	0x58025408
 810393c:	1000823f 	.word	0x1000823f
 8103940:	40020940 	.word	0x40020940
 8103944:	1600963f 	.word	0x1600963f
 8103948:	58025940 	.word	0x58025940

0810394c <HAL_DMA_Init>:
{
 810394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810394e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8103950:	f7ff f992 	bl	8102c78 <HAL_GetTick>
 8103954:	4606      	mov	r6, r0
  if(hdma == NULL)
 8103956:	2c00      	cmp	r4, #0
 8103958:	f000 80cc 	beq.w	8103af4 <HAL_DMA_Init+0x1a8>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810395c:	6823      	ldr	r3, [r4, #0]
 810395e:	4d73      	ldr	r5, [pc, #460]	; (8103b2c <HAL_DMA_Init+0x1e0>)
 8103960:	42ab      	cmp	r3, r5
 8103962:	d06a      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 8103964:	4a72      	ldr	r2, [pc, #456]	; (8103b30 <HAL_DMA_Init+0x1e4>)
 8103966:	4293      	cmp	r3, r2
 8103968:	d067      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 810396a:	3218      	adds	r2, #24
 810396c:	4293      	cmp	r3, r2
 810396e:	d064      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 8103970:	3218      	adds	r2, #24
 8103972:	4293      	cmp	r3, r2
 8103974:	d061      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 8103976:	3218      	adds	r2, #24
 8103978:	4293      	cmp	r3, r2
 810397a:	d05e      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 810397c:	3218      	adds	r2, #24
 810397e:	4293      	cmp	r3, r2
 8103980:	d05b      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 8103982:	3218      	adds	r2, #24
 8103984:	4293      	cmp	r3, r2
 8103986:	d058      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 8103988:	3218      	adds	r2, #24
 810398a:	4293      	cmp	r3, r2
 810398c:	d055      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 810398e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103992:	4293      	cmp	r3, r2
 8103994:	d051      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 8103996:	3218      	adds	r2, #24
 8103998:	4293      	cmp	r3, r2
 810399a:	d04e      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 810399c:	3218      	adds	r2, #24
 810399e:	4293      	cmp	r3, r2
 81039a0:	d04b      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 81039a2:	3218      	adds	r2, #24
 81039a4:	4293      	cmp	r3, r2
 81039a6:	d048      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 81039a8:	3218      	adds	r2, #24
 81039aa:	4293      	cmp	r3, r2
 81039ac:	d045      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 81039ae:	3218      	adds	r2, #24
 81039b0:	4293      	cmp	r3, r2
 81039b2:	d042      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 81039b4:	3218      	adds	r2, #24
 81039b6:	4293      	cmp	r3, r2
 81039b8:	d03f      	beq.n	8103a3a <HAL_DMA_Init+0xee>
 81039ba:	3218      	adds	r2, #24
 81039bc:	4293      	cmp	r3, r2
 81039be:	d03c      	beq.n	8103a3a <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81039c0:	4a5c      	ldr	r2, [pc, #368]	; (8103b34 <HAL_DMA_Init+0x1e8>)
 81039c2:	4293      	cmp	r3, r2
 81039c4:	f040 8138 	bne.w	8103c38 <HAL_DMA_Init+0x2ec>
    hdma->State = HAL_DMA_STATE_BUSY;
 81039c8:	2202      	movs	r2, #2
 81039ca:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 81039ce:	2200      	movs	r2, #0
 81039d0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81039d4:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81039d6:	68a1      	ldr	r1, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81039d8:	f420 30ff 	bic.w	r0, r0, #130560	; 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81039dc:	2940      	cmp	r1, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81039de:	f420 70f8 	bic.w	r0, r0, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81039e2:	f000 8147 	beq.w	8103c74 <HAL_DMA_Init+0x328>
 81039e6:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
 81039ea:	4251      	negs	r1, r2
 81039ec:	4151      	adcs	r1, r2
 81039ee:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81039f0:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 81039f4:	08d2      	lsrs	r2, r2, #3
 81039f6:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81039fa:	6966      	ldr	r6, [r4, #20]
 81039fc:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103a00:	69a6      	ldr	r6, [r4, #24]
 8103a02:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103a06:	69e6      	ldr	r6, [r4, #28]
 8103a08:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103a0c:	6a26      	ldr	r6, [r4, #32]
 8103a0e:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8103a12:	4302      	orrs	r2, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103a14:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103a16:	4a48      	ldr	r2, [pc, #288]	; (8103b38 <HAL_DMA_Init+0x1ec>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103a18:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103a1a:	441a      	add	r2, r3
 8103a1c:	2314      	movs	r3, #20
 8103a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8103a22:	0092      	lsls	r2, r2, #2
 8103a24:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103a26:	4620      	mov	r0, r4
 8103a28:	f7ff fec0 	bl	81037ac <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103a2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8103a2e:	f003 021f 	and.w	r2, r3, #31
 8103a32:	2301      	movs	r3, #1
 8103a34:	4093      	lsls	r3, r2
 8103a36:	6043      	str	r3, [r0, #4]
 8103a38:	e094      	b.n	8103b64 <HAL_DMA_Init+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 8103a3a:	2202      	movs	r2, #2
 8103a3c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8103a40:	2200      	movs	r2, #0
 8103a42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8103a46:	681a      	ldr	r2, [r3, #0]
 8103a48:	f022 0201 	bic.w	r2, r2, #1
 8103a4c:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103a4e:	6822      	ldr	r2, [r4, #0]
 8103a50:	6813      	ldr	r3, [r2, #0]
 8103a52:	07df      	lsls	r7, r3, #31
 8103a54:	d444      	bmi.n	8103ae0 <HAL_DMA_Init+0x194>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103a56:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103a58:	4838      	ldr	r0, [pc, #224]	; (8103b3c <HAL_DMA_Init+0x1f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103a5a:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103a5c:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 8103a5e:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 8103a62:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103a64:	6926      	ldr	r6, [r4, #16]
 8103a66:	4333      	orrs	r3, r6
 8103a68:	6966      	ldr	r6, [r4, #20]
 8103a6a:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103a6c:	69e6      	ldr	r6, [r4, #28]
 8103a6e:	430b      	orrs	r3, r1
 8103a70:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 8103a72:	6a26      	ldr	r6, [r4, #32]
 8103a74:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103a76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8103a78:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8103a7a:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103a7e:	bf02      	ittt	eq
 8103a80:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	; 0x2c
 8103a84:	4338      	orreq	r0, r7
 8103a86:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103a88:	482d      	ldr	r0, [pc, #180]	; (8103b40 <HAL_DMA_Init+0x1f4>)
 8103a8a:	6800      	ldr	r0, [r0, #0]
 8103a8c:	0c00      	lsrs	r0, r0, #16
 8103a8e:	0400      	lsls	r0, r0, #16
 8103a90:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8103a94:	d30e      	bcc.n	8103ab4 <HAL_DMA_Init+0x168>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103a96:	6860      	ldr	r0, [r4, #4]
 8103a98:	f1a0 0729 	sub.w	r7, r0, #41	; 0x29
 8103a9c:	2f05      	cmp	r7, #5
 8103a9e:	d907      	bls.n	8103ab0 <HAL_DMA_Init+0x164>
 8103aa0:	383f      	subs	r0, #63	; 0x3f
 8103aa2:	2813      	cmp	r0, #19
 8103aa4:	d806      	bhi.n	8103ab4 <HAL_DMA_Init+0x168>
 8103aa6:	4f27      	ldr	r7, [pc, #156]	; (8103b44 <HAL_DMA_Init+0x1f8>)
 8103aa8:	fa27 f000 	lsr.w	r0, r7, r0
 8103aac:	07c0      	lsls	r0, r0, #31
 8103aae:	d501      	bpl.n	8103ab4 <HAL_DMA_Init+0x168>
        registerValue |= DMA_SxCR_TRBUFF;
 8103ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103ab4:	6013      	str	r3, [r2, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103ab6:	6953      	ldr	r3, [r2, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103ab8:	2e04      	cmp	r6, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103aba:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8103abe:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103ac2:	d145      	bne.n	8103b50 <HAL_DMA_Init+0x204>
      registerValue |= hdma->Init.FIFOThreshold;
 8103ac4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103ac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8103ac8:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103aca:	2e00      	cmp	r6, #0
 8103acc:	d040      	beq.n	8103b50 <HAL_DMA_Init+0x204>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103ace:	b999      	cbnz	r1, 8103af8 <HAL_DMA_Init+0x1ac>
    switch (hdma->Init.FIFOThreshold)
 8103ad0:	2801      	cmp	r0, #1
 8103ad2:	d021      	beq.n	8103b18 <HAL_DMA_Init+0x1cc>
 8103ad4:	f030 0102 	bics.w	r1, r0, #2
 8103ad8:	d13a      	bne.n	8103b50 <HAL_DMA_Init+0x204>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103ada:	01f1      	lsls	r1, r6, #7
 8103adc:	d538      	bpl.n	8103b50 <HAL_DMA_Init+0x204>
 8103ade:	e01e      	b.n	8103b1e <HAL_DMA_Init+0x1d2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103ae0:	f7ff f8ca 	bl	8102c78 <HAL_GetTick>
 8103ae4:	1b80      	subs	r0, r0, r6
 8103ae6:	2805      	cmp	r0, #5
 8103ae8:	d9b1      	bls.n	8103a4e <HAL_DMA_Init+0x102>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103aea:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103aec:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103aee:	2303      	movs	r3, #3
 8103af0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8103af4:	2001      	movs	r0, #1
 8103af6:	e017      	b.n	8103b28 <HAL_DMA_Init+0x1dc>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103af8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8103afc:	d124      	bne.n	8103b48 <HAL_DMA_Init+0x1fc>
    switch (hdma->Init.FIFOThreshold)
 8103afe:	2803      	cmp	r0, #3
 8103b00:	d826      	bhi.n	8103b50 <HAL_DMA_Init+0x204>
 8103b02:	a101      	add	r1, pc, #4	; (adr r1, 8103b08 <HAL_DMA_Init+0x1bc>)
 8103b04:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8103b08:	08103b1f 	.word	0x08103b1f
 8103b0c:	08103adb 	.word	0x08103adb
 8103b10:	08103b1f 	.word	0x08103b1f
 8103b14:	08103b19 	.word	0x08103b19
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103b18:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8103b1c:	d118      	bne.n	8103b50 <HAL_DMA_Init+0x204>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103b1e:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8103b20:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103b22:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8103b24:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8103b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8103b2a:	bf00      	nop
 8103b2c:	40020010 	.word	0x40020010
 8103b30:	40020028 	.word	0x40020028
 8103b34:	58025408 	.word	0x58025408
 8103b38:	a7fdabf8 	.word	0xa7fdabf8
 8103b3c:	fe10803f 	.word	0xfe10803f
 8103b40:	5c001000 	.word	0x5c001000
 8103b44:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8103b48:	2802      	cmp	r0, #2
 8103b4a:	d9e8      	bls.n	8103b1e <HAL_DMA_Init+0x1d2>
 8103b4c:	2803      	cmp	r0, #3
 8103b4e:	d0c4      	beq.n	8103ada <HAL_DMA_Init+0x18e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103b50:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103b52:	4620      	mov	r0, r4
 8103b54:	f7ff fe2a 	bl	81037ac <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103b58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8103b5a:	f003 021f 	and.w	r2, r3, #31
 8103b5e:	233f      	movs	r3, #63	; 0x3f
 8103b60:	4093      	lsls	r3, r2
 8103b62:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103b64:	6823      	ldr	r3, [r4, #0]
 8103b66:	42ab      	cmp	r3, r5
 8103b68:	d045      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b6a:	4a45      	ldr	r2, [pc, #276]	; (8103c80 <HAL_DMA_Init+0x334>)
 8103b6c:	4293      	cmp	r3, r2
 8103b6e:	d042      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b70:	3218      	adds	r2, #24
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d03f      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b76:	3218      	adds	r2, #24
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d03c      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b7c:	3218      	adds	r2, #24
 8103b7e:	4293      	cmp	r3, r2
 8103b80:	d039      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b82:	3218      	adds	r2, #24
 8103b84:	4293      	cmp	r3, r2
 8103b86:	d036      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b88:	3218      	adds	r2, #24
 8103b8a:	4293      	cmp	r3, r2
 8103b8c:	d033      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b8e:	3218      	adds	r2, #24
 8103b90:	4293      	cmp	r3, r2
 8103b92:	d030      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b94:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d02c      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103b9c:	3218      	adds	r2, #24
 8103b9e:	4293      	cmp	r3, r2
 8103ba0:	d029      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103ba2:	3218      	adds	r2, #24
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d026      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103ba8:	3218      	adds	r2, #24
 8103baa:	4293      	cmp	r3, r2
 8103bac:	d023      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bae:	3218      	adds	r2, #24
 8103bb0:	4293      	cmp	r3, r2
 8103bb2:	d020      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bb4:	3218      	adds	r2, #24
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d01d      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bba:	3218      	adds	r2, #24
 8103bbc:	4293      	cmp	r3, r2
 8103bbe:	d01a      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bc0:	3218      	adds	r2, #24
 8103bc2:	4293      	cmp	r3, r2
 8103bc4:	d017      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bc6:	4a2f      	ldr	r2, [pc, #188]	; (8103c84 <HAL_DMA_Init+0x338>)
 8103bc8:	4293      	cmp	r3, r2
 8103bca:	d014      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bcc:	3214      	adds	r2, #20
 8103bce:	4293      	cmp	r3, r2
 8103bd0:	d011      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bd2:	3214      	adds	r2, #20
 8103bd4:	4293      	cmp	r3, r2
 8103bd6:	d00e      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bd8:	3214      	adds	r2, #20
 8103bda:	4293      	cmp	r3, r2
 8103bdc:	d00b      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bde:	3214      	adds	r2, #20
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d008      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103be4:	3214      	adds	r2, #20
 8103be6:	4293      	cmp	r3, r2
 8103be8:	d005      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bea:	3214      	adds	r2, #20
 8103bec:	4293      	cmp	r3, r2
 8103bee:	d002      	beq.n	8103bf6 <HAL_DMA_Init+0x2aa>
 8103bf0:	3214      	adds	r2, #20
 8103bf2:	4293      	cmp	r3, r2
 8103bf4:	d11a      	bne.n	8103c2c <HAL_DMA_Init+0x2e0>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103bf6:	4620      	mov	r0, r4
 8103bf8:	f7ff fe24 	bl	8103844 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103bfc:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103bfe:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103c00:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103c02:	bf04      	itt	eq
 8103c04:	2300      	moveq	r3, #0
 8103c06:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103c08:	6863      	ldr	r3, [r4, #4]
 8103c0a:	b2d9      	uxtb	r1, r3
 8103c0c:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103c0e:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103c12:	3b01      	subs	r3, #1
 8103c14:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103c16:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103c18:	f04f 0500 	mov.w	r5, #0
 8103c1c:	d82c      	bhi.n	8103c78 <HAL_DMA_Init+0x32c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103c1e:	f7ff fe5d 	bl	81038dc <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103c22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8103c24:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103c26:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8103c2a:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103c2c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8103c2e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103c30:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8103c32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8103c36:	e777      	b.n	8103b28 <HAL_DMA_Init+0x1dc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103c38:	4a13      	ldr	r2, [pc, #76]	; (8103c88 <HAL_DMA_Init+0x33c>)
 8103c3a:	4293      	cmp	r3, r2
 8103c3c:	f43f aec4 	beq.w	81039c8 <HAL_DMA_Init+0x7c>
 8103c40:	3214      	adds	r2, #20
 8103c42:	4293      	cmp	r3, r2
 8103c44:	f43f aec0 	beq.w	81039c8 <HAL_DMA_Init+0x7c>
 8103c48:	3214      	adds	r2, #20
 8103c4a:	4293      	cmp	r3, r2
 8103c4c:	f43f aebc 	beq.w	81039c8 <HAL_DMA_Init+0x7c>
 8103c50:	3214      	adds	r2, #20
 8103c52:	4293      	cmp	r3, r2
 8103c54:	f43f aeb8 	beq.w	81039c8 <HAL_DMA_Init+0x7c>
 8103c58:	3214      	adds	r2, #20
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	f43f aeb4 	beq.w	81039c8 <HAL_DMA_Init+0x7c>
 8103c60:	3214      	adds	r2, #20
 8103c62:	4293      	cmp	r3, r2
 8103c64:	f43f aeb0 	beq.w	81039c8 <HAL_DMA_Init+0x7c>
 8103c68:	3214      	adds	r2, #20
 8103c6a:	4293      	cmp	r3, r2
 8103c6c:	f43f aeac 	beq.w	81039c8 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103c70:	2340      	movs	r3, #64	; 0x40
 8103c72:	e73b      	b.n	8103aec <HAL_DMA_Init+0x1a0>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103c74:	2110      	movs	r1, #16
 8103c76:	e6bb      	b.n	81039f0 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8103c78:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103c7c:	6765      	str	r5, [r4, #116]	; 0x74
 8103c7e:	e7d5      	b.n	8103c2c <HAL_DMA_Init+0x2e0>
 8103c80:	40020028 	.word	0x40020028
 8103c84:	58025408 	.word	0x58025408
 8103c88:	5802541c 	.word	0x5802541c

08103c8c <HAL_DMA_Start_IT>:
{
 8103c8c:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8103c8e:	2800      	cmp	r0, #0
 8103c90:	f000 810a 	beq.w	8103ea8 <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 8103c94:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8103c98:	2c01      	cmp	r4, #1
 8103c9a:	f000 8107 	beq.w	8103eac <HAL_DMA_Start_IT+0x220>
  if(HAL_DMA_STATE_READY == hdma->State)
 8103c9e:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8103ca2:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8103ca4:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8103ca6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8103caa:	f04f 0500 	mov.w	r5, #0
 8103cae:	f040 80f6 	bne.w	8103e9e <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 8103cb2:	2402      	movs	r4, #2
 8103cb4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8103cb8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103cba:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8103cbc:	4d7c      	ldr	r5, [pc, #496]	; (8103eb0 <HAL_DMA_Start_IT+0x224>)
 8103cbe:	42ac      	cmp	r4, r5
 8103cc0:	d01e      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cc2:	4e7c      	ldr	r6, [pc, #496]	; (8103eb4 <HAL_DMA_Start_IT+0x228>)
 8103cc4:	42b4      	cmp	r4, r6
 8103cc6:	d01b      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cc8:	3618      	adds	r6, #24
 8103cca:	42b4      	cmp	r4, r6
 8103ccc:	d018      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cce:	3618      	adds	r6, #24
 8103cd0:	42b4      	cmp	r4, r6
 8103cd2:	d015      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cd4:	3618      	adds	r6, #24
 8103cd6:	42b4      	cmp	r4, r6
 8103cd8:	d012      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cda:	3618      	adds	r6, #24
 8103cdc:	42b4      	cmp	r4, r6
 8103cde:	d00f      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103ce0:	3618      	adds	r6, #24
 8103ce2:	42b4      	cmp	r4, r6
 8103ce4:	d00c      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103ce6:	3618      	adds	r6, #24
 8103ce8:	42b4      	cmp	r4, r6
 8103cea:	d009      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cec:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8103cf0:	42b4      	cmp	r4, r6
 8103cf2:	d005      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cf4:	3618      	adds	r6, #24
 8103cf6:	42b4      	cmp	r4, r6
 8103cf8:	d002      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103cfa:	3618      	adds	r6, #24
 8103cfc:	42b4      	cmp	r4, r6
 8103cfe:	d0ff      	beq.n	8103d00 <HAL_DMA_Start_IT+0x74>
 8103d00:	6826      	ldr	r6, [r4, #0]
 8103d02:	f026 0601 	bic.w	r6, r6, #1
 8103d06:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8103d08:	f7ff fc90 	bl	810362c <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103d0c:	42ac      	cmp	r4, r5
 8103d0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8103d10:	d053      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d12:	4b68      	ldr	r3, [pc, #416]	; (8103eb4 <HAL_DMA_Start_IT+0x228>)
 8103d14:	429c      	cmp	r4, r3
 8103d16:	d050      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d18:	3318      	adds	r3, #24
 8103d1a:	429c      	cmp	r4, r3
 8103d1c:	d04d      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d1e:	3318      	adds	r3, #24
 8103d20:	429c      	cmp	r4, r3
 8103d22:	d04a      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d24:	3318      	adds	r3, #24
 8103d26:	429c      	cmp	r4, r3
 8103d28:	d047      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d2a:	3318      	adds	r3, #24
 8103d2c:	429c      	cmp	r4, r3
 8103d2e:	d044      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d30:	3318      	adds	r3, #24
 8103d32:	429c      	cmp	r4, r3
 8103d34:	d041      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d36:	3318      	adds	r3, #24
 8103d38:	429c      	cmp	r4, r3
 8103d3a:	d03e      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103d40:	429c      	cmp	r4, r3
 8103d42:	d03a      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d44:	3318      	adds	r3, #24
 8103d46:	429c      	cmp	r4, r3
 8103d48:	d037      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d4a:	3318      	adds	r3, #24
 8103d4c:	429c      	cmp	r4, r3
 8103d4e:	d034      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d50:	3318      	adds	r3, #24
 8103d52:	429c      	cmp	r4, r3
 8103d54:	d031      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d56:	3318      	adds	r3, #24
 8103d58:	429c      	cmp	r4, r3
 8103d5a:	d02e      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d5c:	3318      	adds	r3, #24
 8103d5e:	429c      	cmp	r4, r3
 8103d60:	d02b      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d62:	3318      	adds	r3, #24
 8103d64:	429c      	cmp	r4, r3
 8103d66:	d028      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
 8103d68:	3318      	adds	r3, #24
 8103d6a:	429c      	cmp	r4, r3
 8103d6c:	d025      	beq.n	8103dba <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8103d6e:	6823      	ldr	r3, [r4, #0]
 8103d70:	f023 030e 	bic.w	r3, r3, #14
 8103d74:	f043 030a 	orr.w	r3, r3, #10
 8103d78:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103d7a:	2a00      	cmp	r2, #0
 8103d7c:	d156      	bne.n	8103e2c <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103d7e:	4b4e      	ldr	r3, [pc, #312]	; (8103eb8 <HAL_DMA_Start_IT+0x22c>)
 8103d80:	429c      	cmp	r4, r3
 8103d82:	d027      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103d84:	4b4d      	ldr	r3, [pc, #308]	; (8103ebc <HAL_DMA_Start_IT+0x230>)
 8103d86:	429c      	cmp	r4, r3
 8103d88:	d024      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103d8a:	3314      	adds	r3, #20
 8103d8c:	429c      	cmp	r4, r3
 8103d8e:	d021      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103d90:	3314      	adds	r3, #20
 8103d92:	429c      	cmp	r4, r3
 8103d94:	d01e      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103d96:	3314      	adds	r3, #20
 8103d98:	429c      	cmp	r4, r3
 8103d9a:	d01b      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103d9c:	3314      	adds	r3, #20
 8103d9e:	429c      	cmp	r4, r3
 8103da0:	d018      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103da2:	3314      	adds	r3, #20
 8103da4:	429c      	cmp	r4, r3
 8103da6:	d015      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103da8:	3314      	adds	r3, #20
 8103daa:	429c      	cmp	r4, r3
 8103dac:	d012      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 8103dae:	6823      	ldr	r3, [r4, #0]
 8103db0:	f043 0301 	orr.w	r3, r3, #1
 8103db4:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103db6:	2000      	movs	r0, #0
}
 8103db8:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103dba:	6823      	ldr	r3, [r4, #0]
 8103dbc:	f023 031e 	bic.w	r3, r3, #30
 8103dc0:	f043 0316 	orr.w	r3, r3, #22
 8103dc4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103dc6:	b11a      	cbz	r2, 8103dd0 <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103dc8:	6823      	ldr	r3, [r4, #0]
 8103dca:	f043 0308 	orr.w	r3, r3, #8
 8103dce:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103dd0:	42ac      	cmp	r4, r5
 8103dd2:	d130      	bne.n	8103e36 <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8103dd4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8103dd6:	681a      	ldr	r2, [r3, #0]
 8103dd8:	03d2      	lsls	r2, r2, #15
 8103dda:	d45b      	bmi.n	8103e94 <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 8103ddc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8103dde:	b11b      	cbz	r3, 8103de8 <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8103de0:	681a      	ldr	r2, [r3, #0]
 8103de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103de6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8103de8:	42ac      	cmp	r4, r5
 8103dea:	d0e0      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103dec:	4b31      	ldr	r3, [pc, #196]	; (8103eb4 <HAL_DMA_Start_IT+0x228>)
 8103dee:	429c      	cmp	r4, r3
 8103df0:	d0dd      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103df2:	3318      	adds	r3, #24
 8103df4:	429c      	cmp	r4, r3
 8103df6:	d0da      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103df8:	3318      	adds	r3, #24
 8103dfa:	429c      	cmp	r4, r3
 8103dfc:	d0d7      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103dfe:	3318      	adds	r3, #24
 8103e00:	429c      	cmp	r4, r3
 8103e02:	d0d4      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103e04:	3318      	adds	r3, #24
 8103e06:	429c      	cmp	r4, r3
 8103e08:	d0d1      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103e0a:	3318      	adds	r3, #24
 8103e0c:	429c      	cmp	r4, r3
 8103e0e:	d0ce      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103e10:	3318      	adds	r3, #24
 8103e12:	429c      	cmp	r4, r3
 8103e14:	d0cb      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103e16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103e1a:	429c      	cmp	r4, r3
 8103e1c:	d0c7      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103e1e:	3318      	adds	r3, #24
 8103e20:	429c      	cmp	r4, r3
 8103e22:	d0c4      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103e24:	3318      	adds	r3, #24
 8103e26:	429c      	cmp	r4, r3
 8103e28:	d0c1      	beq.n	8103dae <HAL_DMA_Start_IT+0x122>
 8103e2a:	e7c0      	b.n	8103dae <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8103e2c:	6823      	ldr	r3, [r4, #0]
 8103e2e:	f043 0304 	orr.w	r3, r3, #4
 8103e32:	6023      	str	r3, [r4, #0]
 8103e34:	e7a3      	b.n	8103d7e <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103e36:	4b1f      	ldr	r3, [pc, #124]	; (8103eb4 <HAL_DMA_Start_IT+0x228>)
 8103e38:	429c      	cmp	r4, r3
 8103e3a:	d0cb      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e3c:	3318      	adds	r3, #24
 8103e3e:	429c      	cmp	r4, r3
 8103e40:	d0c8      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e42:	3318      	adds	r3, #24
 8103e44:	429c      	cmp	r4, r3
 8103e46:	d0c5      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e48:	3318      	adds	r3, #24
 8103e4a:	429c      	cmp	r4, r3
 8103e4c:	d0c2      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e4e:	3318      	adds	r3, #24
 8103e50:	429c      	cmp	r4, r3
 8103e52:	d0bf      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e54:	3318      	adds	r3, #24
 8103e56:	429c      	cmp	r4, r3
 8103e58:	d0bc      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e5a:	3318      	adds	r3, #24
 8103e5c:	429c      	cmp	r4, r3
 8103e5e:	d0b9      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e60:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103e64:	429c      	cmp	r4, r3
 8103e66:	d0b5      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e68:	3318      	adds	r3, #24
 8103e6a:	429c      	cmp	r4, r3
 8103e6c:	d0b2      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e6e:	3318      	adds	r3, #24
 8103e70:	429c      	cmp	r4, r3
 8103e72:	d0af      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e74:	3318      	adds	r3, #24
 8103e76:	429c      	cmp	r4, r3
 8103e78:	d0ac      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e7a:	3318      	adds	r3, #24
 8103e7c:	429c      	cmp	r4, r3
 8103e7e:	d0a9      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e80:	3318      	adds	r3, #24
 8103e82:	429c      	cmp	r4, r3
 8103e84:	d0a6      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e86:	3318      	adds	r3, #24
 8103e88:	429c      	cmp	r4, r3
 8103e8a:	d0a3      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e8c:	3318      	adds	r3, #24
 8103e8e:	429c      	cmp	r4, r3
 8103e90:	d0a0      	beq.n	8103dd4 <HAL_DMA_Start_IT+0x148>
 8103e92:	e774      	b.n	8103d7e <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8103e94:	681a      	ldr	r2, [r3, #0]
 8103e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103e9a:	601a      	str	r2, [r3, #0]
 8103e9c:	e79e      	b.n	8103ddc <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8103e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103ea2:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8103ea4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    return HAL_ERROR;
 8103ea8:	2001      	movs	r0, #1
 8103eaa:	e785      	b.n	8103db8 <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 8103eac:	2002      	movs	r0, #2
 8103eae:	e783      	b.n	8103db8 <HAL_DMA_Start_IT+0x12c>
 8103eb0:	40020010 	.word	0x40020010
 8103eb4:	40020028 	.word	0x40020028
 8103eb8:	58025408 	.word	0x58025408
 8103ebc:	5802541c 	.word	0x5802541c

08103ec0 <HAL_DMA_Abort>:
{
 8103ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103ec2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8103ec4:	f7fe fed8 	bl	8102c78 <HAL_GetTick>
 8103ec8:	4607      	mov	r7, r0
  if(hdma == NULL)
 8103eca:	b145      	cbz	r5, 8103ede <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103ecc:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8103ed0:	2b02      	cmp	r3, #2
 8103ed2:	d006      	beq.n	8103ee2 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103ed4:	2380      	movs	r3, #128	; 0x80
 8103ed6:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8103ed8:	2300      	movs	r3, #0
 8103eda:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8103ede:	2001      	movs	r0, #1
 8103ee0:	e153      	b.n	810418a <HAL_DMA_Abort+0x2ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103ee2:	682c      	ldr	r4, [r5, #0]
 8103ee4:	4ea9      	ldr	r6, [pc, #676]	; (810418c <HAL_DMA_Abort+0x2cc>)
 8103ee6:	42b4      	cmp	r4, r6
 8103ee8:	d04a      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103eea:	4ba9      	ldr	r3, [pc, #676]	; (8104190 <HAL_DMA_Abort+0x2d0>)
 8103eec:	429c      	cmp	r4, r3
 8103eee:	d047      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103ef0:	3318      	adds	r3, #24
 8103ef2:	429c      	cmp	r4, r3
 8103ef4:	d044      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103ef6:	3318      	adds	r3, #24
 8103ef8:	429c      	cmp	r4, r3
 8103efa:	d041      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103efc:	3318      	adds	r3, #24
 8103efe:	429c      	cmp	r4, r3
 8103f00:	d03e      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f02:	3318      	adds	r3, #24
 8103f04:	429c      	cmp	r4, r3
 8103f06:	d03b      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f08:	3318      	adds	r3, #24
 8103f0a:	429c      	cmp	r4, r3
 8103f0c:	d038      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f0e:	3318      	adds	r3, #24
 8103f10:	429c      	cmp	r4, r3
 8103f12:	d035      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f14:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103f18:	429c      	cmp	r4, r3
 8103f1a:	d031      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f1c:	3318      	adds	r3, #24
 8103f1e:	429c      	cmp	r4, r3
 8103f20:	d02e      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f22:	3318      	adds	r3, #24
 8103f24:	429c      	cmp	r4, r3
 8103f26:	d02b      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f28:	3318      	adds	r3, #24
 8103f2a:	429c      	cmp	r4, r3
 8103f2c:	d028      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f2e:	3318      	adds	r3, #24
 8103f30:	429c      	cmp	r4, r3
 8103f32:	d025      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f34:	3318      	adds	r3, #24
 8103f36:	429c      	cmp	r4, r3
 8103f38:	d022      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f3a:	3318      	adds	r3, #24
 8103f3c:	429c      	cmp	r4, r3
 8103f3e:	d01f      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
 8103f40:	3318      	adds	r3, #24
 8103f42:	429c      	cmp	r4, r3
 8103f44:	d01c      	beq.n	8103f80 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103f46:	6823      	ldr	r3, [r4, #0]
 8103f48:	f023 030e 	bic.w	r3, r3, #14
 8103f4c:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f4e:	4b91      	ldr	r3, [pc, #580]	; (8104194 <HAL_DMA_Abort+0x2d4>)
 8103f50:	429c      	cmp	r4, r3
 8103f52:	d01f      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8103f54:	3314      	adds	r3, #20
 8103f56:	429c      	cmp	r4, r3
 8103f58:	d01c      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8103f5a:	3314      	adds	r3, #20
 8103f5c:	429c      	cmp	r4, r3
 8103f5e:	d019      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8103f60:	3314      	adds	r3, #20
 8103f62:	429c      	cmp	r4, r3
 8103f64:	d016      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8103f66:	3314      	adds	r3, #20
 8103f68:	429c      	cmp	r4, r3
 8103f6a:	d013      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8103f6c:	3314      	adds	r3, #20
 8103f6e:	429c      	cmp	r4, r3
 8103f70:	d010      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8103f72:	3314      	adds	r3, #20
 8103f74:	429c      	cmp	r4, r3
 8103f76:	d00d      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8103f78:	3314      	adds	r3, #20
 8103f7a:	429c      	cmp	r4, r3
 8103f7c:	d112      	bne.n	8103fa4 <HAL_DMA_Abort+0xe4>
 8103f7e:	e009      	b.n	8103f94 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103f80:	6823      	ldr	r3, [r4, #0]
 8103f82:	f023 031e 	bic.w	r3, r3, #30
 8103f86:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103f88:	6963      	ldr	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f8a:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8103f90:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f92:	d176      	bne.n	8104082 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103f94:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8103f96:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8103f98:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103f9e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8103fa0:	f040 80ab 	bne.w	81040fa <HAL_DMA_Abort+0x23a>
 8103fa4:	6823      	ldr	r3, [r4, #0]
 8103fa6:	f023 0301 	bic.w	r3, r3, #1
 8103faa:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103fac:	6823      	ldr	r3, [r4, #0]
 8103fae:	07db      	lsls	r3, r3, #31
 8103fb0:	f100 80cd 	bmi.w	810414e <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103fb4:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103fb6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103fba:	42b3      	cmp	r3, r6
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103fbc:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103fc0:	f000 80d1 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103fc4:	4972      	ldr	r1, [pc, #456]	; (8104190 <HAL_DMA_Abort+0x2d0>)
 8103fc6:	428b      	cmp	r3, r1
 8103fc8:	f000 80cd 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103fcc:	3118      	adds	r1, #24
 8103fce:	428b      	cmp	r3, r1
 8103fd0:	f000 80c9 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103fd4:	3118      	adds	r1, #24
 8103fd6:	428b      	cmp	r3, r1
 8103fd8:	f000 80c5 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103fdc:	3118      	adds	r1, #24
 8103fde:	428b      	cmp	r3, r1
 8103fe0:	f000 80c1 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103fe4:	3118      	adds	r1, #24
 8103fe6:	428b      	cmp	r3, r1
 8103fe8:	f000 80bd 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103fec:	3118      	adds	r1, #24
 8103fee:	428b      	cmp	r3, r1
 8103ff0:	f000 80b9 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103ff4:	3118      	adds	r1, #24
 8103ff6:	428b      	cmp	r3, r1
 8103ff8:	f000 80b5 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8103ffc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8104000:	428b      	cmp	r3, r1
 8104002:	f000 80b0 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8104006:	3118      	adds	r1, #24
 8104008:	428b      	cmp	r3, r1
 810400a:	f000 80ac 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 810400e:	3118      	adds	r1, #24
 8104010:	428b      	cmp	r3, r1
 8104012:	f000 80a8 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8104016:	3118      	adds	r1, #24
 8104018:	428b      	cmp	r3, r1
 810401a:	f000 80a4 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 810401e:	3118      	adds	r1, #24
 8104020:	428b      	cmp	r3, r1
 8104022:	f000 80a0 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8104026:	3118      	adds	r1, #24
 8104028:	428b      	cmp	r3, r1
 810402a:	f000 809c 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 810402e:	3118      	adds	r1, #24
 8104030:	428b      	cmp	r3, r1
 8104032:	f000 8098 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
 8104036:	3118      	adds	r1, #24
 8104038:	428b      	cmp	r3, r1
 810403a:	f000 8094 	beq.w	8104166 <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810403e:	2101      	movs	r1, #1
 8104040:	fa01 f202 	lsl.w	r2, r1, r2
 8104044:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104046:	4a53      	ldr	r2, [pc, #332]	; (8104194 <HAL_DMA_Abort+0x2d4>)
 8104048:	4293      	cmp	r3, r2
 810404a:	f000 8092 	beq.w	8104172 <HAL_DMA_Abort+0x2b2>
 810404e:	3214      	adds	r2, #20
 8104050:	4293      	cmp	r3, r2
 8104052:	f000 808e 	beq.w	8104172 <HAL_DMA_Abort+0x2b2>
 8104056:	3214      	adds	r2, #20
 8104058:	4293      	cmp	r3, r2
 810405a:	f000 808a 	beq.w	8104172 <HAL_DMA_Abort+0x2b2>
 810405e:	3214      	adds	r2, #20
 8104060:	4293      	cmp	r3, r2
 8104062:	f000 8086 	beq.w	8104172 <HAL_DMA_Abort+0x2b2>
 8104066:	3214      	adds	r2, #20
 8104068:	4293      	cmp	r3, r2
 810406a:	f000 8082 	beq.w	8104172 <HAL_DMA_Abort+0x2b2>
 810406e:	3214      	adds	r2, #20
 8104070:	4293      	cmp	r3, r2
 8104072:	d07e      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 8104074:	3214      	adds	r2, #20
 8104076:	4293      	cmp	r3, r2
 8104078:	d07b      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 810407a:	3214      	adds	r2, #20
 810407c:	4293      	cmp	r3, r2
 810407e:	d17e      	bne.n	810417e <HAL_DMA_Abort+0x2be>
 8104080:	e077      	b.n	8104172 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104082:	4b43      	ldr	r3, [pc, #268]	; (8104190 <HAL_DMA_Abort+0x2d0>)
 8104084:	429c      	cmp	r4, r3
 8104086:	d085      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 8104088:	3318      	adds	r3, #24
 810408a:	429c      	cmp	r4, r3
 810408c:	d082      	beq.n	8103f94 <HAL_DMA_Abort+0xd4>
 810408e:	3318      	adds	r3, #24
 8104090:	429c      	cmp	r4, r3
 8104092:	f43f af7f 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 8104096:	3318      	adds	r3, #24
 8104098:	429c      	cmp	r4, r3
 810409a:	f43f af7b 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 810409e:	3318      	adds	r3, #24
 81040a0:	429c      	cmp	r4, r3
 81040a2:	f43f af77 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040a6:	3318      	adds	r3, #24
 81040a8:	429c      	cmp	r4, r3
 81040aa:	f43f af73 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040ae:	3318      	adds	r3, #24
 81040b0:	429c      	cmp	r4, r3
 81040b2:	f43f af6f 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81040ba:	429c      	cmp	r4, r3
 81040bc:	f43f af6a 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040c0:	3318      	adds	r3, #24
 81040c2:	429c      	cmp	r4, r3
 81040c4:	f43f af66 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040c8:	3318      	adds	r3, #24
 81040ca:	429c      	cmp	r4, r3
 81040cc:	f43f af62 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040d0:	3318      	adds	r3, #24
 81040d2:	429c      	cmp	r4, r3
 81040d4:	f43f af5e 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040d8:	3318      	adds	r3, #24
 81040da:	429c      	cmp	r4, r3
 81040dc:	f43f af5a 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040e0:	3318      	adds	r3, #24
 81040e2:	429c      	cmp	r4, r3
 81040e4:	f43f af56 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040e8:	3318      	adds	r3, #24
 81040ea:	429c      	cmp	r4, r3
 81040ec:	f43f af52 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040f0:	3318      	adds	r3, #24
 81040f2:	429c      	cmp	r4, r3
 81040f4:	f43f af4e 	beq.w	8103f94 <HAL_DMA_Abort+0xd4>
 81040f8:	e729      	b.n	8103f4e <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 81040fa:	4b25      	ldr	r3, [pc, #148]	; (8104190 <HAL_DMA_Abort+0x2d0>)
 81040fc:	429c      	cmp	r4, r3
 81040fe:	f43f af51 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 8104102:	3318      	adds	r3, #24
 8104104:	429c      	cmp	r4, r3
 8104106:	f43f af4d 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 810410a:	3318      	adds	r3, #24
 810410c:	429c      	cmp	r4, r3
 810410e:	f43f af49 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 8104112:	3318      	adds	r3, #24
 8104114:	429c      	cmp	r4, r3
 8104116:	f43f af45 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 810411a:	3318      	adds	r3, #24
 810411c:	429c      	cmp	r4, r3
 810411e:	f43f af41 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 8104122:	3318      	adds	r3, #24
 8104124:	429c      	cmp	r4, r3
 8104126:	f43f af3d 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 810412a:	3318      	adds	r3, #24
 810412c:	429c      	cmp	r4, r3
 810412e:	f43f af39 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 8104132:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8104136:	429c      	cmp	r4, r3
 8104138:	f43f af34 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 810413c:	3318      	adds	r3, #24
 810413e:	429c      	cmp	r4, r3
 8104140:	f43f af30 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 8104144:	3318      	adds	r3, #24
 8104146:	429c      	cmp	r4, r3
 8104148:	f43f af2c 	beq.w	8103fa4 <HAL_DMA_Abort+0xe4>
 810414c:	e72a      	b.n	8103fa4 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810414e:	f7fe fd93 	bl	8102c78 <HAL_GetTick>
 8104152:	1bc0      	subs	r0, r0, r7
 8104154:	2805      	cmp	r0, #5
 8104156:	f67f af29 	bls.w	8103fac <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810415a:	2320      	movs	r3, #32
 810415c:	656b      	str	r3, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 810415e:	2303      	movs	r3, #3
 8104160:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8104164:	e6b8      	b.n	8103ed8 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104166:	213f      	movs	r1, #63	; 0x3f
 8104168:	fa01 f202 	lsl.w	r2, r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810416c:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810416e:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104170:	d112      	bne.n	8104198 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104172:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8104176:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8104178:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 810417a:	2b00      	cmp	r3, #0
 810417c:	d13b      	bne.n	81041f6 <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 810417e:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8104180:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8104182:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8104186:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 810418a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810418c:	40020010 	.word	0x40020010
 8104190:	40020028 	.word	0x40020028
 8104194:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104198:	4a1b      	ldr	r2, [pc, #108]	; (8104208 <HAL_DMA_Abort+0x348>)
 810419a:	4293      	cmp	r3, r2
 810419c:	d0e9      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 810419e:	3218      	adds	r2, #24
 81041a0:	4293      	cmp	r3, r2
 81041a2:	d0e6      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041a4:	3218      	adds	r2, #24
 81041a6:	4293      	cmp	r3, r2
 81041a8:	d0e3      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041aa:	3218      	adds	r2, #24
 81041ac:	4293      	cmp	r3, r2
 81041ae:	d0e0      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041b0:	3218      	adds	r2, #24
 81041b2:	4293      	cmp	r3, r2
 81041b4:	d0dd      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041b6:	3218      	adds	r2, #24
 81041b8:	4293      	cmp	r3, r2
 81041ba:	d0da      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041bc:	3218      	adds	r2, #24
 81041be:	4293      	cmp	r3, r2
 81041c0:	d0d7      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041c2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81041c6:	4293      	cmp	r3, r2
 81041c8:	d0d3      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041ca:	3218      	adds	r2, #24
 81041cc:	4293      	cmp	r3, r2
 81041ce:	d0d0      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041d0:	3218      	adds	r2, #24
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d0cd      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041d6:	3218      	adds	r2, #24
 81041d8:	4293      	cmp	r3, r2
 81041da:	d0ca      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041dc:	3218      	adds	r2, #24
 81041de:	4293      	cmp	r3, r2
 81041e0:	d0c7      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041e2:	3218      	adds	r2, #24
 81041e4:	4293      	cmp	r3, r2
 81041e6:	d0c4      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041e8:	3218      	adds	r2, #24
 81041ea:	4293      	cmp	r3, r2
 81041ec:	d0c1      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041ee:	3218      	adds	r2, #24
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d0be      	beq.n	8104172 <HAL_DMA_Abort+0x2b2>
 81041f4:	e727      	b.n	8104046 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81041f6:	681a      	ldr	r2, [r3, #0]
 81041f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81041fc:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81041fe:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8104202:	605a      	str	r2, [r3, #4]
 8104204:	e7bb      	b.n	810417e <HAL_DMA_Abort+0x2be>
 8104206:	bf00      	nop
 8104208:	40020028 	.word	0x40020028

0810420c <HAL_DMA_Abort_IT>:
{
 810420c:	b510      	push	{r4, lr}
  if(hdma == NULL)
 810420e:	b128      	cbz	r0, 810421c <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104210:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8104214:	2b02      	cmp	r3, #2
 8104216:	d003      	beq.n	8104220 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104218:	2380      	movs	r3, #128	; 0x80
 810421a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 810421c:	2001      	movs	r0, #1
 810421e:	e05d      	b.n	81042dc <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104220:	6803      	ldr	r3, [r0, #0]
 8104222:	4a3f      	ldr	r2, [pc, #252]	; (8104320 <HAL_DMA_Abort_IT+0x114>)
 8104224:	4293      	cmp	r3, r2
 8104226:	d051      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104228:	3218      	adds	r2, #24
 810422a:	4293      	cmp	r3, r2
 810422c:	d04e      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 810422e:	3218      	adds	r2, #24
 8104230:	4293      	cmp	r3, r2
 8104232:	d04b      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104234:	3218      	adds	r2, #24
 8104236:	4293      	cmp	r3, r2
 8104238:	d048      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 810423a:	3218      	adds	r2, #24
 810423c:	4293      	cmp	r3, r2
 810423e:	d045      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104240:	3218      	adds	r2, #24
 8104242:	4293      	cmp	r3, r2
 8104244:	d042      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104246:	3218      	adds	r2, #24
 8104248:	4293      	cmp	r3, r2
 810424a:	d03f      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 810424c:	3218      	adds	r2, #24
 810424e:	4293      	cmp	r3, r2
 8104250:	d03c      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104252:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8104256:	4293      	cmp	r3, r2
 8104258:	d038      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 810425a:	3218      	adds	r2, #24
 810425c:	4293      	cmp	r3, r2
 810425e:	d035      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104260:	3218      	adds	r2, #24
 8104262:	4293      	cmp	r3, r2
 8104264:	d032      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104266:	3218      	adds	r2, #24
 8104268:	4293      	cmp	r3, r2
 810426a:	d02f      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 810426c:	3218      	adds	r2, #24
 810426e:	4293      	cmp	r3, r2
 8104270:	d02c      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104272:	3218      	adds	r2, #24
 8104274:	4293      	cmp	r3, r2
 8104276:	d029      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 8104278:	3218      	adds	r2, #24
 810427a:	4293      	cmp	r3, r2
 810427c:	d026      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
 810427e:	3218      	adds	r2, #24
 8104280:	4293      	cmp	r3, r2
 8104282:	d023      	beq.n	81042cc <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104284:	681a      	ldr	r2, [r3, #0]
 8104286:	f022 020e 	bic.w	r2, r2, #14
 810428a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 810428c:	681a      	ldr	r2, [r3, #0]
 810428e:	f022 0201 	bic.w	r2, r2, #1
 8104292:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104294:	4a23      	ldr	r2, [pc, #140]	; (8104324 <HAL_DMA_Abort_IT+0x118>)
 8104296:	4293      	cmp	r3, r2
 8104298:	d121      	bne.n	81042de <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810429a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 810429c:	6813      	ldr	r3, [r2, #0]
 810429e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81042a2:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81042a4:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 81042a8:	f003 021f 	and.w	r2, r3, #31
 81042ac:	2301      	movs	r3, #1
 81042ae:	4093      	lsls	r3, r2
 81042b0:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81042b2:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 81042b6:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 81042b8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 81042ba:	b32b      	cbz	r3, 8104308 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81042bc:	681a      	ldr	r2, [r3, #0]
 81042be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81042c2:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81042c4:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 81042c8:	605a      	str	r2, [r3, #4]
 81042ca:	e01d      	b.n	8104308 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 81042cc:	2204      	movs	r2, #4
 81042ce:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 81042d2:	681a      	ldr	r2, [r3, #0]
 81042d4:	f022 0201 	bic.w	r2, r2, #1
 81042d8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 81042da:	2000      	movs	r0, #0
}
 81042dc:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81042de:	4a12      	ldr	r2, [pc, #72]	; (8104328 <HAL_DMA_Abort_IT+0x11c>)
 81042e0:	4293      	cmp	r3, r2
 81042e2:	d0da      	beq.n	810429a <HAL_DMA_Abort_IT+0x8e>
 81042e4:	3214      	adds	r2, #20
 81042e6:	4293      	cmp	r3, r2
 81042e8:	d0d7      	beq.n	810429a <HAL_DMA_Abort_IT+0x8e>
 81042ea:	3214      	adds	r2, #20
 81042ec:	4293      	cmp	r3, r2
 81042ee:	d0d4      	beq.n	810429a <HAL_DMA_Abort_IT+0x8e>
 81042f0:	3214      	adds	r2, #20
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d0d1      	beq.n	810429a <HAL_DMA_Abort_IT+0x8e>
 81042f6:	3214      	adds	r2, #20
 81042f8:	4293      	cmp	r3, r2
 81042fa:	d0ce      	beq.n	810429a <HAL_DMA_Abort_IT+0x8e>
 81042fc:	3214      	adds	r2, #20
 81042fe:	4293      	cmp	r3, r2
 8104300:	d0cb      	beq.n	810429a <HAL_DMA_Abort_IT+0x8e>
 8104302:	3214      	adds	r2, #20
 8104304:	4293      	cmp	r3, r2
 8104306:	d0c8      	beq.n	810429a <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8104308:	2301      	movs	r3, #1
 810430a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 810430e:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8104310:	2400      	movs	r4, #0
 8104312:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8104316:	b10b      	cbz	r3, 810431c <HAL_DMA_Abort_IT+0x110>
        hdma->XferAbortCallback(hdma);
 8104318:	4798      	blx	r3
 810431a:	e7de      	b.n	81042da <HAL_DMA_Abort_IT+0xce>
  return HAL_OK;
 810431c:	4618      	mov	r0, r3
 810431e:	e7dd      	b.n	81042dc <HAL_DMA_Abort_IT+0xd0>
 8104320:	40020010 	.word	0x40020010
 8104324:	58025408 	.word	0x58025408
 8104328:	5802541c 	.word	0x5802541c

0810432c <HAL_DMA_IRQHandler>:
{
 810432c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8104330:	2300      	movs	r3, #0
 8104332:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104334:	4b84      	ldr	r3, [pc, #528]	; (8104548 <HAL_DMA_IRQHandler+0x21c>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104336:	4f85      	ldr	r7, [pc, #532]	; (810454c <HAL_DMA_IRQHandler+0x220>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8104338:	681e      	ldr	r6, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810433a:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810433c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810433e:	42bb      	cmp	r3, r7
  tmpisr_dma  = regs_dma->ISR;
 8104340:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8104344:	f8d5 c000 	ldr.w	ip, [r5]
{
 8104348:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810434a:	d047      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 810434c:	4a80      	ldr	r2, [pc, #512]	; (8104550 <HAL_DMA_IRQHandler+0x224>)
 810434e:	4293      	cmp	r3, r2
 8104350:	d044      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104352:	3218      	adds	r2, #24
 8104354:	4293      	cmp	r3, r2
 8104356:	d041      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104358:	3218      	adds	r2, #24
 810435a:	4293      	cmp	r3, r2
 810435c:	d03e      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 810435e:	3218      	adds	r2, #24
 8104360:	4293      	cmp	r3, r2
 8104362:	d03b      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104364:	3218      	adds	r2, #24
 8104366:	4293      	cmp	r3, r2
 8104368:	d038      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 810436a:	3218      	adds	r2, #24
 810436c:	4293      	cmp	r3, r2
 810436e:	d035      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104370:	3218      	adds	r2, #24
 8104372:	4293      	cmp	r3, r2
 8104374:	d032      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104376:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810437a:	4293      	cmp	r3, r2
 810437c:	d02e      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 810437e:	3218      	adds	r2, #24
 8104380:	4293      	cmp	r3, r2
 8104382:	d02b      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104384:	3218      	adds	r2, #24
 8104386:	4293      	cmp	r3, r2
 8104388:	d028      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 810438a:	3218      	adds	r2, #24
 810438c:	4293      	cmp	r3, r2
 810438e:	d025      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104390:	3218      	adds	r2, #24
 8104392:	4293      	cmp	r3, r2
 8104394:	d022      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 8104396:	3218      	adds	r2, #24
 8104398:	4293      	cmp	r3, r2
 810439a:	d01f      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 810439c:	3218      	adds	r2, #24
 810439e:	4293      	cmp	r3, r2
 81043a0:	d01c      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
 81043a2:	3218      	adds	r2, #24
 81043a4:	4293      	cmp	r3, r2
 81043a6:	d019      	beq.n	81043dc <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81043a8:	4a6a      	ldr	r2, [pc, #424]	; (8104554 <HAL_DMA_IRQHandler+0x228>)
 81043aa:	4293      	cmp	r3, r2
 81043ac:	f040 8134 	bne.w	8104618 <HAL_DMA_IRQHandler+0x2ec>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81043b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81043b2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81043b4:	f001 011f 	and.w	r1, r1, #31
 81043b8:	2004      	movs	r0, #4
 81043ba:	4088      	lsls	r0, r1
 81043bc:	ea10 0f0c 	tst.w	r0, ip
 81043c0:	f000 8151 	beq.w	8104666 <HAL_DMA_IRQHandler+0x33a>
 81043c4:	0756      	lsls	r6, r2, #29
 81043c6:	f140 814e 	bpl.w	8104666 <HAL_DMA_IRQHandler+0x33a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043ca:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81043cc:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043ce:	f140 8142 	bpl.w	8104656 <HAL_DMA_IRQHandler+0x32a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81043d2:	03d3      	lsls	r3, r2, #15
 81043d4:	f100 8145 	bmi.w	8104662 <HAL_DMA_IRQHandler+0x336>
          if(hdma->XferM1HalfCpltCallback != NULL)
 81043d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 81043da:	e0a0      	b.n	810451e <HAL_DMA_IRQHandler+0x1f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81043dc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81043de:	2108      	movs	r1, #8
 81043e0:	f002 021f 	and.w	r2, r2, #31
 81043e4:	4091      	lsls	r1, r2
 81043e6:	ea11 0f08 	tst.w	r1, r8
 81043ea:	d00b      	beq.n	8104404 <HAL_DMA_IRQHandler+0xd8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81043ec:	6818      	ldr	r0, [r3, #0]
 81043ee:	0740      	lsls	r0, r0, #29
 81043f0:	d508      	bpl.n	8104404 <HAL_DMA_IRQHandler+0xd8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81043f2:	6818      	ldr	r0, [r3, #0]
 81043f4:	f020 0004 	bic.w	r0, r0, #4
 81043f8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81043fa:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81043fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 81043fe:	f041 0101 	orr.w	r1, r1, #1
 8104402:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104404:	fa28 f102 	lsr.w	r1, r8, r2
 8104408:	07c8      	lsls	r0, r1, #31
 810440a:	d509      	bpl.n	8104420 <HAL_DMA_IRQHandler+0xf4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810440c:	6959      	ldr	r1, [r3, #20]
 810440e:	0609      	lsls	r1, r1, #24
 8104410:	d506      	bpl.n	8104420 <HAL_DMA_IRQHandler+0xf4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104412:	2101      	movs	r1, #1
 8104414:	4091      	lsls	r1, r2
 8104416:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8104418:	6d61      	ldr	r1, [r4, #84]	; 0x54
 810441a:	f041 0102 	orr.w	r1, r1, #2
 810441e:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104420:	2104      	movs	r1, #4
 8104422:	4091      	lsls	r1, r2
 8104424:	ea11 0f08 	tst.w	r1, r8
 8104428:	d007      	beq.n	810443a <HAL_DMA_IRQHandler+0x10e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 810442a:	6818      	ldr	r0, [r3, #0]
 810442c:	0780      	lsls	r0, r0, #30
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810442e:	bf41      	itttt	mi
 8104430:	60a9      	strmi	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8104432:	6d61      	ldrmi	r1, [r4, #84]	; 0x54
 8104434:	f041 0104 	orrmi.w	r1, r1, #4
 8104438:	6561      	strmi	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810443a:	2110      	movs	r1, #16
 810443c:	fa01 f202 	lsl.w	r2, r1, r2
 8104440:	ea12 0f08 	tst.w	r2, r8
 8104444:	d00f      	beq.n	8104466 <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8104446:	6819      	ldr	r1, [r3, #0]
 8104448:	0709      	lsls	r1, r1, #28
 810444a:	d50c      	bpl.n	8104466 <HAL_DMA_IRQHandler+0x13a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 810444c:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810444e:	681a      	ldr	r2, [r3, #0]
 8104450:	0350      	lsls	r0, r2, #13
 8104452:	d56c      	bpl.n	810452e <HAL_DMA_IRQHandler+0x202>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	0319      	lsls	r1, r3, #12
 8104458:	d401      	bmi.n	810445e <HAL_DMA_IRQHandler+0x132>
          if(hdma->XferHalfCpltCallback != NULL)
 810445a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810445c:	e000      	b.n	8104460 <HAL_DMA_IRQHandler+0x134>
            if(hdma->XferM1HalfCpltCallback != NULL)
 810445e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8104460:	b10b      	cbz	r3, 8104466 <HAL_DMA_IRQHandler+0x13a>
            hdma->XferHalfCpltCallback(hdma);
 8104462:	4620      	mov	r0, r4
 8104464:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104466:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8104468:	2120      	movs	r1, #32
 810446a:	f002 021f 	and.w	r2, r2, #31
 810446e:	4091      	lsls	r1, r2
 8104470:	ea11 0f08 	tst.w	r1, r8
 8104474:	d07a      	beq.n	810456c <HAL_DMA_IRQHandler+0x240>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104476:	6823      	ldr	r3, [r4, #0]
 8104478:	42bb      	cmp	r3, r7
 810447a:	d02d      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 810447c:	4834      	ldr	r0, [pc, #208]	; (8104550 <HAL_DMA_IRQHandler+0x224>)
 810447e:	4283      	cmp	r3, r0
 8104480:	d02a      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 8104482:	3018      	adds	r0, #24
 8104484:	4283      	cmp	r3, r0
 8104486:	d027      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 8104488:	3018      	adds	r0, #24
 810448a:	4283      	cmp	r3, r0
 810448c:	d024      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 810448e:	3018      	adds	r0, #24
 8104490:	4283      	cmp	r3, r0
 8104492:	d021      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 8104494:	3018      	adds	r0, #24
 8104496:	4283      	cmp	r3, r0
 8104498:	d01e      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 810449a:	3018      	adds	r0, #24
 810449c:	4283      	cmp	r3, r0
 810449e:	d01b      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044a0:	3018      	adds	r0, #24
 81044a2:	4283      	cmp	r3, r0
 81044a4:	d018      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044a6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 81044aa:	4283      	cmp	r3, r0
 81044ac:	d014      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044ae:	3018      	adds	r0, #24
 81044b0:	4283      	cmp	r3, r0
 81044b2:	d011      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044b4:	3018      	adds	r0, #24
 81044b6:	4283      	cmp	r3, r0
 81044b8:	d00e      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044ba:	3018      	adds	r0, #24
 81044bc:	4283      	cmp	r3, r0
 81044be:	d00b      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044c0:	3018      	adds	r0, #24
 81044c2:	4283      	cmp	r3, r0
 81044c4:	d008      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044c6:	3018      	adds	r0, #24
 81044c8:	4283      	cmp	r3, r0
 81044ca:	d005      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044cc:	3018      	adds	r0, #24
 81044ce:	4283      	cmp	r3, r0
 81044d0:	d002      	beq.n	81044d8 <HAL_DMA_IRQHandler+0x1ac>
 81044d2:	3018      	adds	r0, #24
 81044d4:	4283      	cmp	r3, r0
 81044d6:	d132      	bne.n	810453e <HAL_DMA_IRQHandler+0x212>
 81044d8:	6818      	ldr	r0, [r3, #0]
 81044da:	f010 0f10 	tst.w	r0, #16
 81044de:	d045      	beq.n	810456c <HAL_DMA_IRQHandler+0x240>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81044e0:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 81044e2:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 81044e6:	2904      	cmp	r1, #4
 81044e8:	d136      	bne.n	8104558 <HAL_DMA_IRQHandler+0x22c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81044ea:	6819      	ldr	r1, [r3, #0]
 81044ec:	f021 0116 	bic.w	r1, r1, #22
 81044f0:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81044f2:	6959      	ldr	r1, [r3, #20]
 81044f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81044f8:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81044fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 81044fc:	b909      	cbnz	r1, 8104502 <HAL_DMA_IRQHandler+0x1d6>
 81044fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8104500:	b119      	cbz	r1, 810450a <HAL_DMA_IRQHandler+0x1de>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104502:	6819      	ldr	r1, [r3, #0]
 8104504:	f021 0108 	bic.w	r1, r1, #8
 8104508:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810450a:	233f      	movs	r3, #63	; 0x3f
 810450c:	4093      	lsls	r3, r2
 810450e:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8104510:	2301      	movs	r3, #1
 8104512:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8104516:	2300      	movs	r3, #0
 8104518:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 810451c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 810451e:	2b00      	cmp	r3, #0
 8104520:	f000 8096 	beq.w	8104650 <HAL_DMA_IRQHandler+0x324>
        hdma->XferErrorCallback(hdma);
 8104524:	4620      	mov	r0, r4
}
 8104526:	b002      	add	sp, #8
 8104528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 810452c:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810452e:	681a      	ldr	r2, [r3, #0]
 8104530:	05d2      	lsls	r2, r2, #23
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104532:	bf5e      	ittt	pl
 8104534:	681a      	ldrpl	r2, [r3, #0]
 8104536:	f022 0208 	bicpl.w	r2, r2, #8
 810453a:	601a      	strpl	r2, [r3, #0]
 810453c:	e78d      	b.n	810445a <HAL_DMA_IRQHandler+0x12e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 810453e:	6818      	ldr	r0, [r3, #0]
 8104540:	f010 0f02 	tst.w	r0, #2
 8104544:	e7cb      	b.n	81044de <HAL_DMA_IRQHandler+0x1b2>
 8104546:	bf00      	nop
 8104548:	1000004c 	.word	0x1000004c
 810454c:	40020010 	.word	0x40020010
 8104550:	40020028 	.word	0x40020028
 8104554:	58025408 	.word	0x58025408
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104558:	681a      	ldr	r2, [r3, #0]
 810455a:	0355      	lsls	r5, r2, #13
 810455c:	d54d      	bpl.n	81045fa <HAL_DMA_IRQHandler+0x2ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	0318      	lsls	r0, r3, #12
 8104562:	d457      	bmi.n	8104614 <HAL_DMA_IRQHandler+0x2e8>
            if(hdma->XferM1CpltCallback != NULL)
 8104564:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8104566:	b10b      	cbz	r3, 810456c <HAL_DMA_IRQHandler+0x240>
            hdma->XferCpltCallback(hdma);
 8104568:	4620      	mov	r0, r4
 810456a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810456c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 810456e:	2b00      	cmp	r3, #0
 8104570:	d06e      	beq.n	8104650 <HAL_DMA_IRQHandler+0x324>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8104572:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8104574:	07d9      	lsls	r1, r3, #31
 8104576:	d53e      	bpl.n	81045f6 <HAL_DMA_IRQHandler+0x2ca>
        hdma->State = HAL_DMA_STATE_ABORT;
 8104578:	2304      	movs	r3, #4
 810457a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 810457e:	6823      	ldr	r3, [r4, #0]
 8104580:	42bb      	cmp	r3, r7
 8104582:	d01e      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 8104584:	4a4e      	ldr	r2, [pc, #312]	; (81046c0 <HAL_DMA_IRQHandler+0x394>)
 8104586:	4293      	cmp	r3, r2
 8104588:	d01b      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 810458a:	3218      	adds	r2, #24
 810458c:	4293      	cmp	r3, r2
 810458e:	d018      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 8104590:	3218      	adds	r2, #24
 8104592:	4293      	cmp	r3, r2
 8104594:	d015      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 8104596:	3218      	adds	r2, #24
 8104598:	4293      	cmp	r3, r2
 810459a:	d012      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 810459c:	3218      	adds	r2, #24
 810459e:	4293      	cmp	r3, r2
 81045a0:	d00f      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 81045a2:	3218      	adds	r2, #24
 81045a4:	4293      	cmp	r3, r2
 81045a6:	d00c      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 81045a8:	3218      	adds	r2, #24
 81045aa:	4293      	cmp	r3, r2
 81045ac:	d009      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 81045ae:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81045b2:	4293      	cmp	r3, r2
 81045b4:	d005      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 81045b6:	3218      	adds	r2, #24
 81045b8:	4293      	cmp	r3, r2
 81045ba:	d002      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 81045bc:	3218      	adds	r2, #24
 81045be:	4293      	cmp	r3, r2
 81045c0:	d0ff      	beq.n	81045c2 <HAL_DMA_IRQHandler+0x296>
 81045c2:	681a      	ldr	r2, [r3, #0]
 81045c4:	f022 0201 	bic.w	r2, r2, #1
 81045c8:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 81045ca:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 81045ce:	fbb6 f6f2 	udiv	r6, r6, r2
          if (++count > timeout)
 81045d2:	9a01      	ldr	r2, [sp, #4]
 81045d4:	3201      	adds	r2, #1
 81045d6:	42b2      	cmp	r2, r6
 81045d8:	9201      	str	r2, [sp, #4]
 81045da:	d802      	bhi.n	81045e2 <HAL_DMA_IRQHandler+0x2b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81045dc:	681a      	ldr	r2, [r3, #0]
 81045de:	07d2      	lsls	r2, r2, #31
 81045e0:	d4f7      	bmi.n	81045d2 <HAL_DMA_IRQHandler+0x2a6>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 81045e6:	bf4c      	ite	mi
 81045e8:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 81045ea:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 81045ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 81045f0:	2300      	movs	r3, #0
 81045f2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 81045f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 81045f8:	e791      	b.n	810451e <HAL_DMA_IRQHandler+0x1f2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81045fa:	681a      	ldr	r2, [r3, #0]
 81045fc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8104600:	d108      	bne.n	8104614 <HAL_DMA_IRQHandler+0x2e8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104602:	6819      	ldr	r1, [r3, #0]
 8104604:	f021 0110 	bic.w	r1, r1, #16
 8104608:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 810460a:	2301      	movs	r3, #1
 810460c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8104610:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8104614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8104616:	e7a6      	b.n	8104566 <HAL_DMA_IRQHandler+0x23a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8104618:	4a2a      	ldr	r2, [pc, #168]	; (81046c4 <HAL_DMA_IRQHandler+0x398>)
 810461a:	4293      	cmp	r3, r2
 810461c:	f43f aec8 	beq.w	81043b0 <HAL_DMA_IRQHandler+0x84>
 8104620:	3214      	adds	r2, #20
 8104622:	4293      	cmp	r3, r2
 8104624:	f43f aec4 	beq.w	81043b0 <HAL_DMA_IRQHandler+0x84>
 8104628:	3214      	adds	r2, #20
 810462a:	4293      	cmp	r3, r2
 810462c:	f43f aec0 	beq.w	81043b0 <HAL_DMA_IRQHandler+0x84>
 8104630:	3214      	adds	r2, #20
 8104632:	4293      	cmp	r3, r2
 8104634:	f43f aebc 	beq.w	81043b0 <HAL_DMA_IRQHandler+0x84>
 8104638:	3214      	adds	r2, #20
 810463a:	4293      	cmp	r3, r2
 810463c:	f43f aeb8 	beq.w	81043b0 <HAL_DMA_IRQHandler+0x84>
 8104640:	3214      	adds	r2, #20
 8104642:	4293      	cmp	r3, r2
 8104644:	f43f aeb4 	beq.w	81043b0 <HAL_DMA_IRQHandler+0x84>
 8104648:	3214      	adds	r2, #20
 810464a:	4293      	cmp	r3, r2
 810464c:	f43f aeb0 	beq.w	81043b0 <HAL_DMA_IRQHandler+0x84>
}
 8104650:	b002      	add	sp, #8
 8104652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104656:	0697      	lsls	r7, r2, #26
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8104658:	bf5e      	ittt	pl
 810465a:	681a      	ldrpl	r2, [r3, #0]
 810465c:	f022 0204 	bicpl.w	r2, r2, #4
 8104660:	601a      	strpl	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8104662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8104664:	e75b      	b.n	810451e <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104666:	2002      	movs	r0, #2
 8104668:	4088      	lsls	r0, r1
 810466a:	ea10 0f0c 	tst.w	r0, ip
 810466e:	d016      	beq.n	810469e <HAL_DMA_IRQHandler+0x372>
 8104670:	0796      	lsls	r6, r2, #30
 8104672:	d514      	bpl.n	810469e <HAL_DMA_IRQHandler+0x372>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104674:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104676:	0410      	lsls	r0, r2, #16
 8104678:	d503      	bpl.n	8104682 <HAL_DMA_IRQHandler+0x356>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810467a:	03d1      	lsls	r1, r2, #15
 810467c:	d40d      	bmi.n	810469a <HAL_DMA_IRQHandler+0x36e>
          if(hdma->XferM1CpltCallback != NULL)
 810467e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8104680:	e74d      	b.n	810451e <HAL_DMA_IRQHandler+0x1f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104682:	f012 0220 	ands.w	r2, r2, #32
 8104686:	d108      	bne.n	810469a <HAL_DMA_IRQHandler+0x36e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104688:	6819      	ldr	r1, [r3, #0]
 810468a:	f021 010a 	bic.w	r1, r1, #10
 810468e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8104690:	2301      	movs	r3, #1
 8104692:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8104696:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 810469a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810469c:	e73f      	b.n	810451e <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810469e:	2008      	movs	r0, #8
 81046a0:	4088      	lsls	r0, r1
 81046a2:	ea10 0f0c 	tst.w	r0, ip
 81046a6:	d0d3      	beq.n	8104650 <HAL_DMA_IRQHandler+0x324>
 81046a8:	0712      	lsls	r2, r2, #28
 81046aa:	d5d1      	bpl.n	8104650 <HAL_DMA_IRQHandler+0x324>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81046ac:	681a      	ldr	r2, [r3, #0]
 81046ae:	f022 020e 	bic.w	r2, r2, #14
 81046b2:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81046b4:	2301      	movs	r3, #1
 81046b6:	fa03 f101 	lsl.w	r1, r3, r1
 81046ba:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81046bc:	6563      	str	r3, [r4, #84]	; 0x54
 81046be:	e795      	b.n	81045ec <HAL_DMA_IRQHandler+0x2c0>
 81046c0:	40020028 	.word	0x40020028
 81046c4:	5802541c 	.word	0x5802541c

081046c8 <HAL_DMA_RegisterCallback>:
{
 81046c8:	b510      	push	{r4, lr}
  if(hdma == NULL)
 81046ca:	b318      	cbz	r0, 8104714 <HAL_DMA_RegisterCallback+0x4c>
  __HAL_LOCK(hdma);
 81046cc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 81046d0:	2b01      	cmp	r3, #1
 81046d2:	d021      	beq.n	8104718 <HAL_DMA_RegisterCallback+0x50>
  if(HAL_DMA_STATE_READY == hdma->State)
 81046d4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 81046d8:	2c01      	cmp	r4, #1
 81046da:	b2e3      	uxtb	r3, r4
 81046dc:	d118      	bne.n	8104710 <HAL_DMA_RegisterCallback+0x48>
    switch (CallbackID)
 81046de:	2905      	cmp	r1, #5
 81046e0:	d806      	bhi.n	81046f0 <HAL_DMA_RegisterCallback+0x28>
 81046e2:	e8df f001 	tbb	[pc, r1]
 81046e6:	0a03      	.short	0x0a03
 81046e8:	13110f0d 	.word	0x13110f0d
      hdma->XferCpltCallback = pCallback;
 81046ec:	63c2      	str	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 81046ee:	460b      	mov	r3, r1
  __HAL_UNLOCK(hdma);
 81046f0:	2200      	movs	r2, #0
 81046f2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 81046f6:	4618      	mov	r0, r3
 81046f8:	bd10      	pop	{r4, pc}
      hdma->XferHalfCpltCallback = pCallback;
 81046fa:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 81046fc:	2300      	movs	r3, #0
      break;
 81046fe:	e7f7      	b.n	81046f0 <HAL_DMA_RegisterCallback+0x28>
      hdma->XferM1CpltCallback = pCallback;
 8104700:	6442      	str	r2, [r0, #68]	; 0x44
      break;
 8104702:	e7fb      	b.n	81046fc <HAL_DMA_RegisterCallback+0x34>
      hdma->XferM1HalfCpltCallback = pCallback;
 8104704:	6482      	str	r2, [r0, #72]	; 0x48
      break;
 8104706:	e7f9      	b.n	81046fc <HAL_DMA_RegisterCallback+0x34>
      hdma->XferErrorCallback = pCallback;
 8104708:	64c2      	str	r2, [r0, #76]	; 0x4c
      break;
 810470a:	e7f7      	b.n	81046fc <HAL_DMA_RegisterCallback+0x34>
      hdma->XferAbortCallback = pCallback;
 810470c:	6502      	str	r2, [r0, #80]	; 0x50
 810470e:	e7f5      	b.n	81046fc <HAL_DMA_RegisterCallback+0x34>
    status =  HAL_ERROR;
 8104710:	2301      	movs	r3, #1
 8104712:	e7ed      	b.n	81046f0 <HAL_DMA_RegisterCallback+0x28>
    return HAL_ERROR;
 8104714:	2301      	movs	r3, #1
 8104716:	e7ee      	b.n	81046f6 <HAL_DMA_RegisterCallback+0x2e>
  __HAL_LOCK(hdma);
 8104718:	2302      	movs	r3, #2
 810471a:	e7ec      	b.n	81046f6 <HAL_DMA_RegisterCallback+0x2e>

0810471c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810471c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104720:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 81048e8 <HAL_GPIO_Init+0x1cc>
  uint32_t position = 0x00U;
 8104724:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104726:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810472a:	680a      	ldr	r2, [r1, #0]
 810472c:	fa32 f503 	lsrs.w	r5, r2, r3
 8104730:	d102      	bne.n	8104738 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8104732:	b003      	add	sp, #12
 8104734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104738:	f04f 0e01 	mov.w	lr, #1
 810473c:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8104740:	ea1e 0202 	ands.w	r2, lr, r2
 8104744:	f000 80ba 	beq.w	81048bc <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104748:	684e      	ldr	r6, [r1, #4]
 810474a:	f006 0503 	and.w	r5, r6, #3
 810474e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104752:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104756:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104758:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810475c:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810475e:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104762:	d834      	bhi.n	81047ce <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8104764:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104766:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 810476a:	68cf      	ldr	r7, [r1, #12]
 810476c:	fa07 f708 	lsl.w	r7, r7, r8
 8104770:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8104774:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8104776:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104778:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810477c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8104780:	409f      	lsls	r7, r3
 8104782:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8104786:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8104788:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810478a:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810478e:	688f      	ldr	r7, [r1, #8]
 8104790:	fa07 f708 	lsl.w	r7, r7, r8
 8104794:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104798:	2d02      	cmp	r5, #2
      GPIOx->PUPDR = temp;
 810479a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810479c:	d119      	bne.n	81047d2 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 810479e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 81047a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81047a6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 81047aa:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81047ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 81047b2:	f04f 0e0f 	mov.w	lr, #15
 81047b6:	fa0e fe0b 	lsl.w	lr, lr, fp
 81047ba:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81047be:	690f      	ldr	r7, [r1, #16]
 81047c0:	fa07 f70b 	lsl.w	r7, r7, fp
 81047c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 81047c8:	f8ca 7020 	str.w	r7, [sl, #32]
 81047cc:	e001      	b.n	81047d2 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81047ce:	2d03      	cmp	r5, #3
 81047d0:	d1da      	bne.n	8104788 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 81047d2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81047d4:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81047d8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81047dc:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81047de:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 81047e2:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81047e4:	d06a      	beq.n	81048bc <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81047e6:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 81047ea:	f045 0502 	orr.w	r5, r5, #2
 81047ee:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 81047f2:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 81047f6:	f023 0703 	bic.w	r7, r3, #3
 81047fa:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
 81047fe:	f005 0502 	and.w	r5, r5, #2
 8104802:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8104806:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104808:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810480c:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 810480e:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104812:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8104816:	250f      	movs	r5, #15
 8104818:	fa05 f50c 	lsl.w	r5, r5, ip
 810481c:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104820:	4d30      	ldr	r5, [pc, #192]	; (81048e4 <HAL_GPIO_Init+0x1c8>)
 8104822:	42a8      	cmp	r0, r5
 8104824:	d04c      	beq.n	81048c0 <HAL_GPIO_Init+0x1a4>
 8104826:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810482a:	42a8      	cmp	r0, r5
 810482c:	d04a      	beq.n	81048c4 <HAL_GPIO_Init+0x1a8>
 810482e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104832:	42a8      	cmp	r0, r5
 8104834:	d048      	beq.n	81048c8 <HAL_GPIO_Init+0x1ac>
 8104836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810483a:	42a8      	cmp	r0, r5
 810483c:	d046      	beq.n	81048cc <HAL_GPIO_Init+0x1b0>
 810483e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104842:	42a8      	cmp	r0, r5
 8104844:	d044      	beq.n	81048d0 <HAL_GPIO_Init+0x1b4>
 8104846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810484a:	42a8      	cmp	r0, r5
 810484c:	d042      	beq.n	81048d4 <HAL_GPIO_Init+0x1b8>
 810484e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104852:	42a8      	cmp	r0, r5
 8104854:	d040      	beq.n	81048d8 <HAL_GPIO_Init+0x1bc>
 8104856:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810485a:	42a8      	cmp	r0, r5
 810485c:	d03e      	beq.n	81048dc <HAL_GPIO_Init+0x1c0>
 810485e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8104862:	42a8      	cmp	r0, r5
 8104864:	d03c      	beq.n	81048e0 <HAL_GPIO_Init+0x1c4>
 8104866:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810486a:	42a8      	cmp	r0, r5
 810486c:	bf0c      	ite	eq
 810486e:	2509      	moveq	r5, #9
 8104870:	250a      	movne	r5, #10
 8104872:	fa05 f50c 	lsl.w	r5, r5, ip
 8104876:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 810487a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 810487c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 810487e:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104880:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8104884:	bf0c      	ite	eq
 8104886:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104888:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 810488a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 810488c:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810488e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8104892:	bf0c      	ite	eq
 8104894:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104896:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8104898:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 810489a:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810489e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 81048a2:	bf0c      	ite	eq
 81048a4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 81048a6:	4315      	orrne	r5, r2
        EXTI_CurrentCPU->EMR1 = temp;
 81048a8:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
        temp = EXTI_CurrentCPU->IMR1;
 81048ac:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81048b0:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 81048b2:	bf54      	ite	pl
 81048b4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 81048b6:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 81048b8:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    position++;
 81048bc:	3301      	adds	r3, #1
 81048be:	e734      	b.n	810472a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81048c0:	2500      	movs	r5, #0
 81048c2:	e7d6      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048c4:	2501      	movs	r5, #1
 81048c6:	e7d4      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048c8:	2502      	movs	r5, #2
 81048ca:	e7d2      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048cc:	2503      	movs	r5, #3
 81048ce:	e7d0      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048d0:	2504      	movs	r5, #4
 81048d2:	e7ce      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048d4:	2505      	movs	r5, #5
 81048d6:	e7cc      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048d8:	2506      	movs	r5, #6
 81048da:	e7ca      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048dc:	2507      	movs	r5, #7
 81048de:	e7c8      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048e0:	2508      	movs	r5, #8
 81048e2:	e7c6      	b.n	8104872 <HAL_GPIO_Init+0x156>
 81048e4:	58020000 	.word	0x58020000
 81048e8:	58024400 	.word	0x58024400

081048ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 81048ec:	6903      	ldr	r3, [r0, #16]
 81048ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 81048f0:	bf14      	ite	ne
 81048f2:	2001      	movne	r0, #1
 81048f4:	2000      	moveq	r0, #0
 81048f6:	4770      	bx	lr

081048f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81048f8:	b10a      	cbz	r2, 81048fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81048fa:	6181      	str	r1, [r0, #24]
  }
}
 81048fc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81048fe:	0409      	lsls	r1, r1, #16
 8104900:	e7fb      	b.n	81048fa <HAL_GPIO_WritePin+0x2>
	...

08104904 <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104904:	4a02      	ldr	r2, [pc, #8]	; (8104910 <HAL_HSEM_ActivateNotification+0xc>)
 8104906:	6913      	ldr	r3, [r2, #16]
 8104908:	4318      	orrs	r0, r3
 810490a:	6110      	str	r0, [r2, #16]
#endif
}
 810490c:	4770      	bx	lr
 810490e:	bf00      	nop
 8104910:	58026500 	.word	0x58026500

08104914 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104914:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104916:	4c1e      	ldr	r4, [pc, #120]	; (8104990 <HAL_PWREx_EnterSTOPMode+0x7c>)
 8104918:	6823      	ldr	r3, [r4, #0]
 810491a:	f023 0301 	bic.w	r3, r3, #1
 810491e:	4318      	orrs	r0, r3
{
 8104920:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104922:	6020      	str	r0, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104924:	b9c2      	cbnz	r2, 8104958 <HAL_PWREx_EnterSTOPMode+0x44>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104926:	f7fe fe75 	bl	8103614 <HAL_GetCurrentCPUID>
 810492a:	2803      	cmp	r0, #3
 810492c:	d113      	bne.n	8104956 <HAL_PWREx_EnterSTOPMode+0x42>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810492e:	6923      	ldr	r3, [r4, #16]
 8104930:	f023 0301 	bic.w	r3, r3, #1
 8104934:	6123      	str	r3, [r4, #16]

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104936:	4b17      	ldr	r3, [pc, #92]	; (8104994 <HAL_PWREx_EnterSTOPMode+0x80>)
 8104938:	691a      	ldr	r2, [r3, #16]
 810493a:	f042 0204 	orr.w	r2, r2, #4
 810493e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8104944:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104948:	2d01      	cmp	r5, #1
 810494a:	d110      	bne.n	810496e <HAL_PWREx_EnterSTOPMode+0x5a>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810494c:	bf30      	wfi
      /* Request Wait For Event */
      __WFE ();
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810494e:	691a      	ldr	r2, [r3, #16]
 8104950:	f022 0204 	bic.w	r2, r2, #4
 8104954:	611a      	str	r2, [r3, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104956:	bd38      	pop	{r3, r4, r5, pc}
  else if (Domain == PWR_D2_DOMAIN)
 8104958:	2a01      	cmp	r2, #1
 810495a:	d10a      	bne.n	8104972 <HAL_PWREx_EnterSTOPMode+0x5e>
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810495c:	f7fe fe5a 	bl	8103614 <HAL_GetCurrentCPUID>
 8104960:	2801      	cmp	r0, #1
 8104962:	d1f8      	bne.n	8104956 <HAL_PWREx_EnterSTOPMode+0x42>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104964:	6963      	ldr	r3, [r4, #20]
 8104966:	f023 0302 	bic.w	r3, r3, #2
 810496a:	6163      	str	r3, [r4, #20]
 810496c:	e7e3      	b.n	8104936 <HAL_PWREx_EnterSTOPMode+0x22>
      __WFE ();
 810496e:	bf20      	wfe
 8104970:	e7ed      	b.n	810494e <HAL_PWREx_EnterSTOPMode+0x3a>
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104972:	f7fe fe4f 	bl	8103614 <HAL_GetCurrentCPUID>
 8104976:	2803      	cmp	r0, #3
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104978:	bf0b      	itete	eq
 810497a:	6923      	ldreq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810497c:	6963      	ldrne	r3, [r4, #20]
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810497e:	f023 0304 	biceq.w	r3, r3, #4
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104982:	f023 0304 	bicne.w	r3, r3, #4
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104986:	bf0c      	ite	eq
 8104988:	6123      	streq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810498a:	6163      	strne	r3, [r4, #20]
 810498c:	e7e3      	b.n	8104956 <HAL_PWREx_EnterSTOPMode+0x42>
 810498e:	bf00      	nop
 8104990:	58024800 	.word	0x58024800
 8104994:	e000ed00 	.word	0xe000ed00

08104998 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104998:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810499a:	f7fe fe3b 	bl	8103614 <HAL_GetCurrentCPUID>
 810499e:	2803      	cmp	r0, #3
 81049a0:	d101      	bne.n	81049a6 <HAL_PWREx_ClearPendingEvent+0xe>
    __WFE ();
  }
  else
  {
    __SEV ();
    __WFE ();
 81049a2:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81049a4:	bd08      	pop	{r3, pc}
    __SEV ();
 81049a6:	bf40      	sev
 81049a8:	e7fb      	b.n	81049a2 <HAL_PWREx_ClearPendingEvent+0xa>
	...

081049ac <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81049ac:	4b49      	ldr	r3, [pc, #292]	; (8104ad4 <HAL_RCC_GetSysClockFreq+0x128>)
 81049ae:	691a      	ldr	r2, [r3, #16]
 81049b0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 81049b4:	2a10      	cmp	r2, #16
{
 81049b6:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 81049b8:	f000 8088 	beq.w	8104acc <HAL_RCC_GetSysClockFreq+0x120>
 81049bc:	2a18      	cmp	r2, #24
 81049be:	d00c      	beq.n	81049da <HAL_RCC_GetSysClockFreq+0x2e>
 81049c0:	2a00      	cmp	r2, #0
 81049c2:	f040 8085 	bne.w	8104ad0 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81049c6:	681a      	ldr	r2, [r3, #0]
 81049c8:	4843      	ldr	r0, [pc, #268]	; (8104ad8 <HAL_RCC_GetSysClockFreq+0x12c>)
 81049ca:	f012 0f20 	tst.w	r2, #32
 81049ce:	d003      	beq.n	81049d8 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81049d0:	681b      	ldr	r3, [r3, #0]
 81049d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81049d6:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 81049d8:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81049da:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81049dc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81049de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 81049e2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81049e6:	f3c5 1005 	ubfx	r0, r5, #4, #6
      if (pllm != 0U)
 81049ea:	d0f5      	beq.n	81049d8 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049ec:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81049f0:	f004 0401 	and.w	r4, r4, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049f4:	4362      	muls	r2, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81049f6:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81049fa:	ee06 2a90 	vmov	s13, r2
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81049fe:	f001 0103 	and.w	r1, r1, #3
 8104a02:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104a08:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8104a0c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8104a10:	d04e      	beq.n	8104ab0 <HAL_RCC_GetSysClockFreq+0x104>
 8104a12:	2902      	cmp	r1, #2
 8104a14:	d03e      	beq.n	8104a94 <HAL_RCC_GetSysClockFreq+0xe8>
 8104a16:	2900      	cmp	r1, #0
 8104a18:	d14a      	bne.n	8104ab0 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a1a:	681a      	ldr	r2, [r3, #0]
 8104a1c:	0692      	lsls	r2, r2, #26
 8104a1e:	d527      	bpl.n	8104a70 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a20:	6819      	ldr	r1, [r3, #0]
 8104a22:	4a2d      	ldr	r2, [pc, #180]	; (8104ad8 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a26:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8104a2a:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a2c:	ee07 2a90 	vmov	s15, r2
 8104a30:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8104a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a38:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8104a3c:	ee07 3a10 	vmov	s14, r3
 8104a40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8104a44:	ee37 7a26 	vadd.f32	s14, s14, s13
 8104a48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8104a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104a50:	4b20      	ldr	r3, [pc, #128]	; (8104ad4 <HAL_RCC_GetSysClockFreq+0x128>)
 8104a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a54:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8104a58:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104a5a:	ee07 3a10 	vmov	s14, r3
 8104a5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8104a62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8104a66:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8104a6a:	ee17 0a90 	vmov	r0, s15
 8104a6e:	e7b3      	b.n	81049d8 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a76:	ee07 3a90 	vmov	s15, r3
 8104a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a82:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104a86:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8104adc <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a8a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8104a8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8104a92:	e7dd      	b.n	8104a50 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a9a:	ee07 3a90 	vmov	s15, r3
 8104a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aa6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104aaa:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8104ae0 <HAL_RCC_GetSysClockFreq+0x134>
 8104aae:	e7ec      	b.n	8104a8a <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ab6:	ee07 3a90 	vmov	s15, r3
 8104aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ac2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104ac6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8104ae4 <HAL_RCC_GetSysClockFreq+0x138>
 8104aca:	e7de      	b.n	8104a8a <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104acc:	4806      	ldr	r0, [pc, #24]	; (8104ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8104ace:	e783      	b.n	81049d8 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8104ad0:	4806      	ldr	r0, [pc, #24]	; (8104aec <HAL_RCC_GetSysClockFreq+0x140>)
 8104ad2:	e781      	b.n	81049d8 <HAL_RCC_GetSysClockFreq+0x2c>
 8104ad4:	58024400 	.word	0x58024400
 8104ad8:	03d09000 	.word	0x03d09000
 8104adc:	4c742400 	.word	0x4c742400
 8104ae0:	4bbebc20 	.word	0x4bbebc20
 8104ae4:	4a742400 	.word	0x4a742400
 8104ae8:	017d7840 	.word	0x017d7840
 8104aec:	003d0900 	.word	0x003d0900

08104af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104af0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104af2:	f7ff ff5b 	bl	81049ac <HAL_RCC_GetSysClockFreq>
 8104af6:	4b0a      	ldr	r3, [pc, #40]	; (8104b20 <HAL_RCC_GetHCLKFreq+0x30>)
 8104af8:	490a      	ldr	r1, [pc, #40]	; (8104b24 <HAL_RCC_GetHCLKFreq+0x34>)
 8104afa:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104afc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104afe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104b02:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104b06:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104b08:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104b0a:	f002 021f 	and.w	r2, r2, #31
 8104b0e:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104b10:	f003 031f 	and.w	r3, r3, #31
 8104b14:	40d8      	lsrs	r0, r3
 8104b16:	4b04      	ldr	r3, [pc, #16]	; (8104b28 <HAL_RCC_GetHCLKFreq+0x38>)
 8104b18:	6018      	str	r0, [r3, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104b1a:	4b04      	ldr	r3, [pc, #16]	; (8104b2c <HAL_RCC_GetHCLKFreq+0x3c>)
 8104b1c:	6018      	str	r0, [r3, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8104b1e:	bd08      	pop	{r3, pc}
 8104b20:	58024400 	.word	0x58024400
 8104b24:	081105f0 	.word	0x081105f0
 8104b28:	10000050 	.word	0x10000050
 8104b2c:	1000004c 	.word	0x1000004c

08104b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104b30:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104b32:	f7ff ffdd 	bl	8104af0 <HAL_RCC_GetHCLKFreq>
 8104b36:	4b05      	ldr	r3, [pc, #20]	; (8104b4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8104b38:	4a05      	ldr	r2, [pc, #20]	; (8104b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8104b3a:	69db      	ldr	r3, [r3, #28]
 8104b3c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8104b40:	5cd3      	ldrb	r3, [r2, r3]
 8104b42:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104b46:	40d8      	lsrs	r0, r3
 8104b48:	bd08      	pop	{r3, pc}
 8104b4a:	bf00      	nop
 8104b4c:	58024400 	.word	0x58024400
 8104b50:	081105f0 	.word	0x081105f0

08104b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104b54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104b56:	f7ff ffcb 	bl	8104af0 <HAL_RCC_GetHCLKFreq>
 8104b5a:	4b05      	ldr	r3, [pc, #20]	; (8104b70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8104b5c:	4a05      	ldr	r2, [pc, #20]	; (8104b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8104b5e:	69db      	ldr	r3, [r3, #28]
 8104b60:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8104b64:	5cd3      	ldrb	r3, [r2, r3]
 8104b66:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104b6a:	40d8      	lsrs	r0, r3
 8104b6c:	bd08      	pop	{r3, pc}
 8104b6e:	bf00      	nop
 8104b70:	58024400 	.word	0x58024400
 8104b74:	081105f0 	.word	0x081105f0

08104b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104b7a:	4c3a      	ldr	r4, [pc, #232]	; (8104c64 <RCCEx_PLL2_Config+0xec>)
 8104b7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104b7e:	f003 0303 	and.w	r3, r3, #3
 8104b82:	2b03      	cmp	r3, #3
{
 8104b84:	4606      	mov	r6, r0
 8104b86:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104b88:	d069      	beq.n	8104c5e <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104b8a:	6823      	ldr	r3, [r4, #0]
 8104b8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104b90:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104b92:	f7fe f871 	bl	8102c78 <HAL_GetTick>
 8104b96:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104b98:	6823      	ldr	r3, [r4, #0]
 8104b9a:	011a      	lsls	r2, r3, #4
 8104b9c:	d44b      	bmi.n	8104c36 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104b9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104ba0:	6832      	ldr	r2, [r6, #0]
 8104ba2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8104ba6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8104baa:	62a3      	str	r3, [r4, #40]	; 0x28
 8104bac:	68b3      	ldr	r3, [r6, #8]
 8104bae:	68f2      	ldr	r2, [r6, #12]
 8104bb0:	3b01      	subs	r3, #1
 8104bb2:	3a01      	subs	r2, #1
 8104bb4:	025b      	lsls	r3, r3, #9
 8104bb6:	0412      	lsls	r2, r2, #16
 8104bb8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8104bbc:	b29b      	uxth	r3, r3
 8104bbe:	4313      	orrs	r3, r2
 8104bc0:	6872      	ldr	r2, [r6, #4]
 8104bc2:	3a01      	subs	r2, #1
 8104bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104bc8:	4313      	orrs	r3, r2
 8104bca:	6932      	ldr	r2, [r6, #16]
 8104bcc:	3a01      	subs	r2, #1
 8104bce:	0612      	lsls	r2, r2, #24
 8104bd0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8104bd4:	4313      	orrs	r3, r2
 8104bd6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104bda:	6972      	ldr	r2, [r6, #20]
 8104bdc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8104be0:	4313      	orrs	r3, r2
 8104be2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104be6:	69b2      	ldr	r2, [r6, #24]
 8104be8:	f023 0320 	bic.w	r3, r3, #32
 8104bec:	4313      	orrs	r3, r2
 8104bee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104bf0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104bf2:	f023 0310 	bic.w	r3, r3, #16
 8104bf6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8104bfa:	69f2      	ldr	r2, [r6, #28]
 8104bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104c00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104c04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8104c08:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104c0c:	f043 0310 	orr.w	r3, r3, #16
 8104c10:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8104c14:	b9b5      	cbnz	r5, 8104c44 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104c16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104c1c:	4c11      	ldr	r4, [pc, #68]	; (8104c64 <RCCEx_PLL2_Config+0xec>)
 8104c1e:	6823      	ldr	r3, [r4, #0]
 8104c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104c24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c26:	f7fe f827 	bl	8102c78 <HAL_GetTick>
 8104c2a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104c2c:	6823      	ldr	r3, [r4, #0]
 8104c2e:	011b      	lsls	r3, r3, #4
 8104c30:	d50f      	bpl.n	8104c52 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8104c32:	2000      	movs	r0, #0
 8104c34:	e005      	b.n	8104c42 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104c36:	f7fe f81f 	bl	8102c78 <HAL_GetTick>
 8104c3a:	1bc0      	subs	r0, r0, r7
 8104c3c:	2802      	cmp	r0, #2
 8104c3e:	d9ab      	bls.n	8104b98 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8104c40:	2003      	movs	r0, #3
}
 8104c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8104c44:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104c46:	bf0c      	ite	eq
 8104c48:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104c4c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8104c50:	e7e3      	b.n	8104c1a <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104c52:	f7fe f811 	bl	8102c78 <HAL_GetTick>
 8104c56:	1b40      	subs	r0, r0, r5
 8104c58:	2802      	cmp	r0, #2
 8104c5a:	d9e7      	bls.n	8104c2c <RCCEx_PLL2_Config+0xb4>
 8104c5c:	e7f0      	b.n	8104c40 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8104c5e:	2001      	movs	r0, #1
 8104c60:	e7ef      	b.n	8104c42 <RCCEx_PLL2_Config+0xca>
 8104c62:	bf00      	nop
 8104c64:	58024400 	.word	0x58024400

08104c68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104c6a:	4c3a      	ldr	r4, [pc, #232]	; (8104d54 <RCCEx_PLL3_Config+0xec>)
 8104c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104c6e:	f003 0303 	and.w	r3, r3, #3
 8104c72:	2b03      	cmp	r3, #3
{
 8104c74:	4606      	mov	r6, r0
 8104c76:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104c78:	d069      	beq.n	8104d4e <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104c7a:	6823      	ldr	r3, [r4, #0]
 8104c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104c80:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c82:	f7fd fff9 	bl	8102c78 <HAL_GetTick>
 8104c86:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104c88:	6823      	ldr	r3, [r4, #0]
 8104c8a:	009a      	lsls	r2, r3, #2
 8104c8c:	d44b      	bmi.n	8104d26 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104c8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8104c90:	6832      	ldr	r2, [r6, #0]
 8104c92:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8104c96:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8104c9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8104c9c:	68b3      	ldr	r3, [r6, #8]
 8104c9e:	68f2      	ldr	r2, [r6, #12]
 8104ca0:	3b01      	subs	r3, #1
 8104ca2:	3a01      	subs	r2, #1
 8104ca4:	025b      	lsls	r3, r3, #9
 8104ca6:	0412      	lsls	r2, r2, #16
 8104ca8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8104cac:	b29b      	uxth	r3, r3
 8104cae:	4313      	orrs	r3, r2
 8104cb0:	6872      	ldr	r2, [r6, #4]
 8104cb2:	3a01      	subs	r2, #1
 8104cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104cb8:	4313      	orrs	r3, r2
 8104cba:	6932      	ldr	r2, [r6, #16]
 8104cbc:	3a01      	subs	r2, #1
 8104cbe:	0612      	lsls	r2, r2, #24
 8104cc0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8104cc4:	4313      	orrs	r3, r2
 8104cc6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104cc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104cca:	6972      	ldr	r2, [r6, #20]
 8104ccc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8104cd0:	4313      	orrs	r3, r2
 8104cd2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104cd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104cd6:	69b2      	ldr	r2, [r6, #24]
 8104cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104cdc:	4313      	orrs	r3, r2
 8104cde:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104ce0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104ce6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104ce8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8104cea:	69f2      	ldr	r2, [r6, #28]
 8104cec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104cf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104cf4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8104cf8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104cfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104d00:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8104d04:	b9b5      	cbnz	r5, 8104d34 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104d06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104d0c:	4c11      	ldr	r4, [pc, #68]	; (8104d54 <RCCEx_PLL3_Config+0xec>)
 8104d0e:	6823      	ldr	r3, [r4, #0]
 8104d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104d14:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104d16:	f7fd ffaf 	bl	8102c78 <HAL_GetTick>
 8104d1a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104d1c:	6823      	ldr	r3, [r4, #0]
 8104d1e:	009b      	lsls	r3, r3, #2
 8104d20:	d50f      	bpl.n	8104d42 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8104d22:	2000      	movs	r0, #0
 8104d24:	e005      	b.n	8104d32 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104d26:	f7fd ffa7 	bl	8102c78 <HAL_GetTick>
 8104d2a:	1bc0      	subs	r0, r0, r7
 8104d2c:	2802      	cmp	r0, #2
 8104d2e:	d9ab      	bls.n	8104c88 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8104d30:	2003      	movs	r0, #3
}
 8104d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8104d34:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104d36:	bf0c      	ite	eq
 8104d38:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104d3c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8104d40:	e7e3      	b.n	8104d0a <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104d42:	f7fd ff99 	bl	8102c78 <HAL_GetTick>
 8104d46:	1b40      	subs	r0, r0, r5
 8104d48:	2802      	cmp	r0, #2
 8104d4a:	d9e7      	bls.n	8104d1c <RCCEx_PLL3_Config+0xb4>
 8104d4c:	e7f0      	b.n	8104d30 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8104d4e:	2001      	movs	r0, #1
 8104d50:	e7ef      	b.n	8104d32 <RCCEx_PLL3_Config+0xca>
 8104d52:	bf00      	nop
 8104d54:	58024400 	.word	0x58024400

08104d58 <HAL_RCCEx_PeriphCLKConfig>:
{
 8104d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104d5c:	6803      	ldr	r3, [r0, #0]
{
 8104d5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104d60:	0118      	lsls	r0, r3, #4
 8104d62:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8104d66:	d509      	bpl.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8104d68:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8104d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d6e:	d02f      	beq.n	8104dd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8104d70:	d813      	bhi.n	8104d9a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8104d72:	b1f3      	cbz	r3, 8104db2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8104d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104d78:	d021      	beq.n	8104dbe <HAL_RCCEx_PeriphCLKConfig+0x66>
 8104d7a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104d7c:	682b      	ldr	r3, [r5, #0]
 8104d7e:	05d9      	lsls	r1, r3, #23
 8104d80:	f140 80ed 	bpl.w	8104f5e <HAL_RCCEx_PeriphCLKConfig+0x206>
    switch (PeriphClkInit->Sai1ClockSelection)
 8104d84:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8104d86:	2b04      	cmp	r3, #4
 8104d88:	f200 80e8 	bhi.w	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8104d8c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8104d90:	002d0026 	.word	0x002d0026
 8104d94:	002b00e0 	.word	0x002b00e0
 8104d98:	002b      	.short	0x002b
    switch (PeriphClkInit->SpdifrxClockSelection)
 8104d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d9e:	d1ec      	bne.n	8104d7a <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104da0:	4aa9      	ldr	r2, [pc, #676]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104da2:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8104da4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104da6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8104daa:	430b      	orrs	r3, r1
 8104dac:	6513      	str	r3, [r2, #80]	; 0x50
 8104dae:	2600      	movs	r6, #0
 8104db0:	e7e4      	b.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104db2:	4aa5      	ldr	r2, [pc, #660]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104db4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104dba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8104dbc:	e7f0      	b.n	8104da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104dbe:	2102      	movs	r1, #2
 8104dc0:	f105 0008 	add.w	r0, r5, #8
 8104dc4:	f7ff fed8 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104dc8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8104dca:	2800      	cmp	r0, #0
 8104dcc:	d1d6      	bne.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8104dce:	e7e7      	b.n	8104da0 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104dd0:	2102      	movs	r1, #2
 8104dd2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104dd6:	f7ff ff47 	bl	8104c68 <RCCEx_PLL3_Config>
 8104dda:	e7f5      	b.n	8104dc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ddc:	4a9a      	ldr	r2, [pc, #616]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104dde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104de4:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 8104de6:	4634      	mov	r4, r6
 8104de8:	e005      	b.n	8104df6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104dea:	2100      	movs	r1, #0
 8104dec:	f105 0008 	add.w	r0, r5, #8
 8104df0:	f7ff fec2 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104df4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104df6:	2c00      	cmp	r4, #0
 8104df8:	f040 80b3 	bne.w	8104f62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104dfc:	4a92      	ldr	r2, [pc, #584]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104dfe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8104e00:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104e02:	f023 0307 	bic.w	r3, r3, #7
 8104e06:	430b      	orrs	r3, r1
 8104e08:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104e0a:	682b      	ldr	r3, [r5, #0]
 8104e0c:	059a      	lsls	r2, r3, #22
 8104e0e:	d50d      	bpl.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8104e10:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8104e12:	2b80      	cmp	r3, #128	; 0x80
 8104e14:	f000 80c3 	beq.w	8104f9e <HAL_RCCEx_PeriphCLKConfig+0x246>
 8104e18:	f200 80a5 	bhi.w	8104f66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8104e1c:	2b00      	cmp	r3, #0
 8104e1e:	f000 80b1 	beq.w	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8104e22:	2b40      	cmp	r3, #64	; 0x40
 8104e24:	f000 80b4 	beq.w	8104f90 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8104e28:	2601      	movs	r6, #1
 8104e2a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104e2c:	682b      	ldr	r3, [r5, #0]
 8104e2e:	055b      	lsls	r3, r3, #21
 8104e30:	d510      	bpl.n	8104e54 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4AClockSelection)
 8104e32:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8104e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104e3a:	f000 80d6 	beq.w	8104fea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104e3e:	f200 80b6 	bhi.w	8104fae <HAL_RCCEx_PeriphCLKConfig+0x256>
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	f000 80c4 	beq.w	8104fd0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8104e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104e4c:	f000 80c6 	beq.w	8104fdc <HAL_RCCEx_PeriphCLKConfig+0x284>
 8104e50:	2601      	movs	r6, #1
 8104e52:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104e54:	682b      	ldr	r3, [r5, #0]
 8104e56:	051f      	lsls	r7, r3, #20
 8104e58:	d510      	bpl.n	8104e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 8104e5a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8104e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104e62:	f000 80e8 	beq.w	8105036 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8104e66:	f200 80c8 	bhi.w	8104ffa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	f000 80d6 	beq.w	810501c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8104e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104e74:	f000 80d8 	beq.w	8105028 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104e78:	2601      	movs	r6, #1
 8104e7a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104e7c:	682b      	ldr	r3, [r5, #0]
 8104e7e:	0198      	lsls	r0, r3, #6
 8104e80:	d50d      	bpl.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8104e82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8104e84:	2b20      	cmp	r3, #32
 8104e86:	f000 80f3 	beq.w	8105070 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8104e8a:	f200 80df 	bhi.w	810504c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8104e8e:	2b00      	cmp	r3, #0
 8104e90:	f000 80df 	beq.w	8105052 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8104e94:	2b10      	cmp	r3, #16
 8104e96:	f000 80e5 	beq.w	8105064 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8104e9a:	2601      	movs	r6, #1
 8104e9c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104e9e:	682b      	ldr	r3, [r5, #0]
 8104ea0:	04d9      	lsls	r1, r3, #19
 8104ea2:	d50f      	bpl.n	8104ec4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8104ea4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8104ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104eaa:	f000 8107 	beq.w	81050bc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8104eae:	f200 80e8 	bhi.w	8105082 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8104eb2:	2b00      	cmp	r3, #0
 8104eb4:	f000 80f5 	beq.w	81050a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104ebc:	f000 80f7 	beq.w	81050ae <HAL_RCCEx_PeriphCLKConfig+0x356>
 8104ec0:	2601      	movs	r6, #1
 8104ec2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104ec4:	682b      	ldr	r3, [r5, #0]
 8104ec6:	049a      	lsls	r2, r3, #18
 8104ec8:	d50f      	bpl.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi45ClockSelection)
 8104eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8104ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104ed0:	f000 8115 	beq.w	81050fe <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8104ed4:	f200 80fa 	bhi.w	81050cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	f000 8100 	beq.w	81050de <HAL_RCCEx_PeriphCLKConfig+0x386>
 8104ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104ee2:	f000 8105 	beq.w	81050f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8104ee6:	2601      	movs	r6, #1
 8104ee8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104eea:	682b      	ldr	r3, [r5, #0]
 8104eec:	045b      	lsls	r3, r3, #17
 8104eee:	d510      	bpl.n	8104f12 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Spi6ClockSelection)
 8104ef0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8104ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ef8:	f000 8123 	beq.w	8105142 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8104efc:	f200 8107 	bhi.w	810510e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8104f00:	2b00      	cmp	r3, #0
 8104f02:	f000 810d 	beq.w	8105120 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8104f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f0a:	f000 8113 	beq.w	8105134 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8104f0e:	2601      	movs	r6, #1
 8104f10:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104f12:	682b      	ldr	r3, [r5, #0]
 8104f14:	041f      	lsls	r7, r3, #16
 8104f16:	d50d      	bpl.n	8104f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->FdcanClockSelection)
 8104f18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8104f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f1e:	f000 8118 	beq.w	8105152 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8104f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f26:	f000 8122 	beq.w	810516e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	f000 8116 	beq.w	810515c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8104f30:	2601      	movs	r6, #1
 8104f32:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104f34:	682b      	ldr	r3, [r5, #0]
 8104f36:	01d8      	lsls	r0, r3, #7
 8104f38:	f140 8130 	bpl.w	810519c <HAL_RCCEx_PeriphCLKConfig+0x444>
    switch (PeriphClkInit->FmcClockSelection)
 8104f3c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8104f3e:	2b03      	cmp	r3, #3
 8104f40:	f200 8171 	bhi.w	8105226 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8104f44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8104f48:	011c0121 	.word	0x011c0121
 8104f4c:	01210168 	.word	0x01210168
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f50:	2100      	movs	r1, #0
 8104f52:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104f56:	f7ff fe87 	bl	8104c68 <RCCEx_PLL3_Config>
 8104f5a:	e74b      	b.n	8104df4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch (PeriphClkInit->Sai1ClockSelection)
 8104f5c:	2601      	movs	r6, #1
 8104f5e:	4634      	mov	r4, r6
 8104f60:	e753      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8104f62:	4626      	mov	r6, r4
 8104f64:	e751      	b.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch (PeriphClkInit->Sai23ClockSelection)
 8104f66:	2bc0      	cmp	r3, #192	; 0xc0
 8104f68:	d003      	beq.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8104f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f6e:	f47f af5b 	bne.w	8104e28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if (ret == HAL_OK)
 8104f72:	b9d4      	cbnz	r4, 8104faa <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104f74:	4a34      	ldr	r2, [pc, #208]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104f76:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8104f78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104f7a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8104f7e:	430b      	orrs	r3, r1
 8104f80:	6513      	str	r3, [r2, #80]	; 0x50
 8104f82:	e753      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f84:	4a30      	ldr	r2, [pc, #192]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104f86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8104f8e:	e7f0      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f90:	2100      	movs	r1, #0
 8104f92:	f105 0008 	add.w	r0, r5, #8
 8104f96:	f7ff fdef 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f9a:	4604      	mov	r4, r0
        break;
 8104f9c:	e7e9      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f9e:	2100      	movs	r1, #0
 8104fa0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104fa4:	f7ff fe60 	bl	8104c68 <RCCEx_PLL3_Config>
 8104fa8:	e7f7      	b.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8104faa:	4626      	mov	r6, r4
 8104fac:	e73e      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai4AClockSelection)
 8104fae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104fb2:	d003      	beq.n	8104fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8104fb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104fb8:	f47f af4a 	bne.w	8104e50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if (ret == HAL_OK)
 8104fbc:	b9dc      	cbnz	r4, 8104ff6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104fbe:	4a22      	ldr	r2, [pc, #136]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104fc0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8104fc4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104fc6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8104fca:	430b      	orrs	r3, r1
 8104fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8104fce:	e741      	b.n	8104e54 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fd0:	4a1d      	ldr	r2, [pc, #116]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104fd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8104fda:	e7ef      	b.n	8104fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104fdc:	2100      	movs	r1, #0
 8104fde:	f105 0008 	add.w	r0, r5, #8
 8104fe2:	f7ff fdc9 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104fe6:	4604      	mov	r4, r0
        break;
 8104fe8:	e7e8      	b.n	8104fbc <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104fea:	2100      	movs	r1, #0
 8104fec:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104ff0:	f7ff fe3a 	bl	8104c68 <RCCEx_PLL3_Config>
 8104ff4:	e7f7      	b.n	8104fe6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8104ff6:	4626      	mov	r6, r4
 8104ff8:	e72c      	b.n	8104e54 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4BClockSelection)
 8104ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ffe:	d003      	beq.n	8105008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105004:	f47f af38 	bne.w	8104e78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    if (ret == HAL_OK)
 8105008:	b9dc      	cbnz	r4, 8105042 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810500a:	4a0f      	ldr	r2, [pc, #60]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 810500c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8105010:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8105016:	430b      	orrs	r3, r1
 8105018:	6593      	str	r3, [r2, #88]	; 0x58
 810501a:	e72f      	b.n	8104e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810501c:	4a0a      	ldr	r2, [pc, #40]	; (8105048 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 810501e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105024:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8105026:	e7ef      	b.n	8105008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105028:	2100      	movs	r1, #0
 810502a:	f105 0008 	add.w	r0, r5, #8
 810502e:	f7ff fda3 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105032:	4604      	mov	r4, r0
        break;
 8105034:	e7e8      	b.n	8105008 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105036:	2100      	movs	r1, #0
 8105038:	f105 0028 	add.w	r0, r5, #40	; 0x28
 810503c:	f7ff fe14 	bl	8104c68 <RCCEx_PLL3_Config>
 8105040:	e7f7      	b.n	8105032 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8105042:	4626      	mov	r6, r4
 8105044:	e71a      	b.n	8104e7c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8105046:	bf00      	nop
 8105048:	58024400 	.word	0x58024400
    switch (PeriphClkInit->QspiClockSelection)
 810504c:	2b30      	cmp	r3, #48	; 0x30
 810504e:	f47f af24 	bne.w	8104e9a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if (ret == HAL_OK)
 8105052:	b9a4      	cbnz	r4, 810507e <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105054:	4aa0      	ldr	r2, [pc, #640]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105056:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8105058:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 810505a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810505e:	430b      	orrs	r3, r1
 8105060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105062:	e71c      	b.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105064:	4a9c      	ldr	r2, [pc, #624]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105066:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810506c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 810506e:	e7f0      	b.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105070:	2102      	movs	r1, #2
 8105072:	f105 0008 	add.w	r0, r5, #8
 8105076:	f7ff fd7f 	bl	8104b78 <RCCEx_PLL2_Config>
 810507a:	4604      	mov	r4, r0
        break;
 810507c:	e7e9      	b.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 810507e:	4626      	mov	r6, r4
 8105080:	e70d      	b.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Spi123ClockSelection)
 8105082:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105086:	d003      	beq.n	8105090 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8105088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810508c:	f47f af18 	bne.w	8104ec0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if (ret == HAL_OK)
 8105090:	b9d4      	cbnz	r4, 81050c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105092:	4a91      	ldr	r2, [pc, #580]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105094:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8105096:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8105098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810509c:	430b      	orrs	r3, r1
 810509e:	6513      	str	r3, [r2, #80]	; 0x50
 81050a0:	e710      	b.n	8104ec4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81050a2:	4a8d      	ldr	r2, [pc, #564]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81050a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 81050a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81050aa:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 81050ac:	e7f0      	b.n	8105090 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81050ae:	2100      	movs	r1, #0
 81050b0:	f105 0008 	add.w	r0, r5, #8
 81050b4:	f7ff fd60 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81050b8:	4604      	mov	r4, r0
        break;
 81050ba:	e7e9      	b.n	8105090 <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81050bc:	2100      	movs	r1, #0
 81050be:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81050c2:	f7ff fdd1 	bl	8104c68 <RCCEx_PLL3_Config>
 81050c6:	e7f7      	b.n	81050b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81050c8:	4626      	mov	r6, r4
 81050ca:	e6fb      	b.n	8104ec4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi45ClockSelection)
 81050cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81050d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 81050d4:	d003      	beq.n	81050de <HAL_RCCEx_PeriphCLKConfig+0x386>
 81050d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81050da:	f47f af04 	bne.w	8104ee6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    if (ret == HAL_OK)
 81050de:	b9a4      	cbnz	r4, 810510a <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81050e0:	4a7d      	ldr	r2, [pc, #500]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81050e2:	6e69      	ldr	r1, [r5, #100]	; 0x64
 81050e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 81050e6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 81050ea:	430b      	orrs	r3, r1
 81050ec:	6513      	str	r3, [r2, #80]	; 0x50
 81050ee:	e6fc      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81050f0:	2101      	movs	r1, #1
 81050f2:	f105 0008 	add.w	r0, r5, #8
 81050f6:	f7ff fd3f 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81050fa:	4604      	mov	r4, r0
        break;
 81050fc:	e7ef      	b.n	81050de <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81050fe:	2101      	movs	r1, #1
 8105100:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105104:	f7ff fdb0 	bl	8104c68 <RCCEx_PLL3_Config>
 8105108:	e7f7      	b.n	81050fa <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 810510a:	4626      	mov	r6, r4
 810510c:	e6ed      	b.n	8104eea <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi6ClockSelection)
 810510e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8105112:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8105116:	d003      	beq.n	8105120 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8105118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810511c:	f47f aef7 	bne.w	8104f0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    if (ret == HAL_OK)
 8105120:	b9ac      	cbnz	r4, 810514e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105122:	4a6d      	ldr	r2, [pc, #436]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105124:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8105128:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810512a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 810512e:	430b      	orrs	r3, r1
 8105130:	6593      	str	r3, [r2, #88]	; 0x58
 8105132:	e6ee      	b.n	8104f12 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105134:	2101      	movs	r1, #1
 8105136:	f105 0008 	add.w	r0, r5, #8
 810513a:	f7ff fd1d 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810513e:	4604      	mov	r4, r0
        break;
 8105140:	e7ee      	b.n	8105120 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105142:	2101      	movs	r1, #1
 8105144:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105148:	f7ff fd8e 	bl	8104c68 <RCCEx_PLL3_Config>
 810514c:	e7f7      	b.n	810513e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810514e:	4626      	mov	r6, r4
 8105150:	e6df      	b.n	8104f12 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105152:	4a61      	ldr	r2, [pc, #388]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105154:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810515a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 810515c:	b974      	cbnz	r4, 810517c <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810515e:	4a5e      	ldr	r2, [pc, #376]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105160:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8105162:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8105164:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8105168:	430b      	orrs	r3, r1
 810516a:	6513      	str	r3, [r2, #80]	; 0x50
 810516c:	e6e2      	b.n	8104f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810516e:	2101      	movs	r1, #1
 8105170:	f105 0008 	add.w	r0, r5, #8
 8105174:	f7ff fd00 	bl	8104b78 <RCCEx_PLL2_Config>
 8105178:	4604      	mov	r4, r0
        break;
 810517a:	e7ef      	b.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x404>
 810517c:	4626      	mov	r6, r4
 810517e:	e6d9      	b.n	8104f34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105180:	4a55      	ldr	r2, [pc, #340]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105188:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 810518a:	2c00      	cmp	r4, #0
 810518c:	d14e      	bne.n	810522c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810518e:	4a52      	ldr	r2, [pc, #328]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8105190:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8105192:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8105194:	f023 0303 	bic.w	r3, r3, #3
 8105198:	430b      	orrs	r3, r1
 810519a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810519c:	682b      	ldr	r3, [r5, #0]
 810519e:	0259      	lsls	r1, r3, #9
 81051a0:	d54e      	bpl.n	8105240 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81051a2:	4f4e      	ldr	r7, [pc, #312]	; (81052dc <HAL_RCCEx_PeriphCLKConfig+0x584>)
 81051a4:	683b      	ldr	r3, [r7, #0]
 81051a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81051aa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 81051ac:	f7fd fd64 	bl	8102c78 <HAL_GetTick>
 81051b0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81051b2:	683b      	ldr	r3, [r7, #0]
 81051b4:	05da      	lsls	r2, r3, #23
 81051b6:	d53b      	bpl.n	8105230 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if (ret == HAL_OK)
 81051b8:	2c00      	cmp	r4, #0
 81051ba:	d16d      	bne.n	8105298 <HAL_RCCEx_PeriphCLKConfig+0x540>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81051bc:	4b46      	ldr	r3, [pc, #280]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81051be:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 81051c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81051c4:	4042      	eors	r2, r0
 81051c6:	f412 7f40 	tst.w	r2, #768	; 0x300
 81051ca:	d00b      	beq.n	81051e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81051cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 81051ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81051d0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 81051d4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81051d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81051d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 81051dc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 81051e0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 81051e2:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81051e4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 81051e8:	d041      	beq.n	810526e <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81051ea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 81051ee:	493a      	ldr	r1, [pc, #232]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81051f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 81051f4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 81051f8:	d14a      	bne.n	8105290 <HAL_RCCEx_PeriphCLKConfig+0x538>
 81051fa:	6908      	ldr	r0, [r1, #16]
 81051fc:	4a38      	ldr	r2, [pc, #224]	; (81052e0 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 81051fe:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8105202:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8105206:	4302      	orrs	r2, r0
 8105208:	610a      	str	r2, [r1, #16]
 810520a:	4a33      	ldr	r2, [pc, #204]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810520c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 810520e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105212:	430b      	orrs	r3, r1
 8105214:	6713      	str	r3, [r2, #112]	; 0x70
 8105216:	e013      	b.n	8105240 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105218:	2102      	movs	r1, #2
 810521a:	f105 0008 	add.w	r0, r5, #8
 810521e:	f7ff fcab 	bl	8104b78 <RCCEx_PLL2_Config>
 8105222:	4604      	mov	r4, r0
        break;
 8105224:	e7b1      	b.n	810518a <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch (PeriphClkInit->FmcClockSelection)
 8105226:	2601      	movs	r6, #1
 8105228:	4634      	mov	r4, r6
 810522a:	e7b7      	b.n	810519c <HAL_RCCEx_PeriphCLKConfig+0x444>
 810522c:	4626      	mov	r6, r4
 810522e:	e7b5      	b.n	810519c <HAL_RCCEx_PeriphCLKConfig+0x444>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105230:	f7fd fd22 	bl	8102c78 <HAL_GetTick>
 8105234:	eba0 0008 	sub.w	r0, r0, r8
 8105238:	2864      	cmp	r0, #100	; 0x64
 810523a:	d9ba      	bls.n	81051b2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
        ret = HAL_TIMEOUT;
 810523c:	2603      	movs	r6, #3
 810523e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105240:	682b      	ldr	r3, [r5, #0]
 8105242:	07d8      	lsls	r0, r3, #31
 8105244:	d508      	bpl.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Usart16ClockSelection)
 8105246:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8105248:	2b10      	cmp	r3, #16
 810524a:	d03d      	beq.n	81052c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 810524c:	d826      	bhi.n	810529c <HAL_RCCEx_PeriphCLKConfig+0x544>
 810524e:	b35b      	cbz	r3, 81052a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8105250:	2b08      	cmp	r3, #8
 8105252:	d032      	beq.n	81052ba <HAL_RCCEx_PeriphCLKConfig+0x562>
 8105254:	2601      	movs	r6, #1
 8105256:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105258:	682b      	ldr	r3, [r5, #0]
 810525a:	0799      	lsls	r1, r3, #30
 810525c:	d550      	bpl.n	8105300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 810525e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8105260:	2b05      	cmp	r3, #5
 8105262:	d863      	bhi.n	810532c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105264:	e8df f003 	tbb	[pc, r3]
 8105268:	445c3e44 	.word	0x445c3e44
 810526c:	4444      	.short	0x4444
        tickstart = HAL_GetTick();
 810526e:	f7fd fd03 	bl	8102c78 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105272:	f8df 8064 	ldr.w	r8, [pc, #100]	; 81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 8105276:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105278:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810527c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8105280:	079b      	lsls	r3, r3, #30
 8105282:	d4b2      	bmi.n	81051ea <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105284:	f7fd fcf8 	bl	8102c78 <HAL_GetTick>
 8105288:	1bc0      	subs	r0, r0, r7
 810528a:	4548      	cmp	r0, r9
 810528c:	d9f6      	bls.n	810527c <HAL_RCCEx_PeriphCLKConfig+0x524>
 810528e:	e7d5      	b.n	810523c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105290:	690a      	ldr	r2, [r1, #16]
 8105292:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8105296:	e7b7      	b.n	8105208 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8105298:	4626      	mov	r6, r4
 810529a:	e7d1      	b.n	8105240 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    switch (PeriphClkInit->Usart16ClockSelection)
 810529c:	f023 0208 	bic.w	r2, r3, #8
 81052a0:	2a20      	cmp	r2, #32
 81052a2:	d001      	beq.n	81052a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 81052a4:	2b18      	cmp	r3, #24
 81052a6:	d1d5      	bne.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if (ret == HAL_OK)
 81052a8:	b9a4      	cbnz	r4, 81052d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81052aa:	4a0b      	ldr	r2, [pc, #44]	; (81052d8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81052ac:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 81052ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81052b0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 81052b4:	430b      	orrs	r3, r1
 81052b6:	6553      	str	r3, [r2, #84]	; 0x54
 81052b8:	e7ce      	b.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81052ba:	2101      	movs	r1, #1
 81052bc:	f105 0008 	add.w	r0, r5, #8
 81052c0:	f7ff fc5a 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052c4:	4604      	mov	r4, r0
        break;
 81052c6:	e7ef      	b.n	81052a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052c8:	2101      	movs	r1, #1
 81052ca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81052ce:	f7ff fccb 	bl	8104c68 <RCCEx_PLL3_Config>
 81052d2:	e7f7      	b.n	81052c4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 81052d4:	4626      	mov	r6, r4
 81052d6:	e7bf      	b.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x500>
 81052d8:	58024400 	.word	0x58024400
 81052dc:	58024800 	.word	0x58024800
 81052e0:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81052e4:	2101      	movs	r1, #1
 81052e6:	f105 0008 	add.w	r0, r5, #8
 81052ea:	f7ff fc45 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052ee:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 81052f0:	b9fc      	cbnz	r4, 8105332 <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81052f2:	4a11      	ldr	r2, [pc, #68]	; (8105338 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 81052f4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 81052f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81052f8:	f023 0307 	bic.w	r3, r3, #7
 81052fc:	430b      	orrs	r3, r1
 81052fe:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105300:	682b      	ldr	r3, [r5, #0]
 8105302:	075a      	lsls	r2, r3, #29
 8105304:	d52b      	bpl.n	810535e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105306:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 810530a:	2b05      	cmp	r3, #5
 810530c:	f200 817c 	bhi.w	8105608 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8105310:	e8df f013 	tbh	[pc, r3, lsl #1]
 8105314:	0014001a 	.word	0x0014001a
 8105318:	001a0174 	.word	0x001a0174
 810531c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105320:	2101      	movs	r1, #1
 8105322:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105326:	f7ff fc9f 	bl	8104c68 <RCCEx_PLL3_Config>
 810532a:	e7e0      	b.n	81052ee <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Usart234578ClockSelection)
 810532c:	2601      	movs	r6, #1
 810532e:	4634      	mov	r4, r6
 8105330:	e7e6      	b.n	8105300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8105332:	4626      	mov	r6, r4
 8105334:	e7e4      	b.n	8105300 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8105336:	bf00      	nop
 8105338:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810533c:	2101      	movs	r1, #1
 810533e:	f105 0008 	add.w	r0, r5, #8
 8105342:	f7ff fc19 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105346:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8105348:	2c00      	cmp	r4, #0
 810534a:	f040 8160 	bne.w	810560e <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810534e:	4aaa      	ldr	r2, [pc, #680]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105350:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8105354:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105356:	f023 0307 	bic.w	r3, r3, #7
 810535a:	430b      	orrs	r3, r1
 810535c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810535e:	682b      	ldr	r3, [r5, #0]
 8105360:	069b      	lsls	r3, r3, #26
 8105362:	d510      	bpl.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105364:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8105368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810536c:	f000 816b 	beq.w	8105646 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8105370:	f200 814f 	bhi.w	8105612 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8105374:	2b00      	cmp	r3, #0
 8105376:	f000 8155 	beq.w	8105624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 810537a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810537e:	f000 815b 	beq.w	8105638 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8105382:	2601      	movs	r6, #1
 8105384:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105386:	682b      	ldr	r3, [r5, #0]
 8105388:	065f      	lsls	r7, r3, #25
 810538a:	d510      	bpl.n	81053ae <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim2ClockSelection)
 810538c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8105390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105394:	f000 8179 	beq.w	810568a <HAL_RCCEx_PeriphCLKConfig+0x932>
 8105398:	f200 815d 	bhi.w	8105656 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 810539c:	2b00      	cmp	r3, #0
 810539e:	f000 8163 	beq.w	8105668 <HAL_RCCEx_PeriphCLKConfig+0x910>
 81053a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81053a6:	f000 8169 	beq.w	810567c <HAL_RCCEx_PeriphCLKConfig+0x924>
 81053aa:	2601      	movs	r6, #1
 81053ac:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81053ae:	682b      	ldr	r3, [r5, #0]
 81053b0:	0618      	lsls	r0, r3, #24
 81053b2:	d510      	bpl.n	81053d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 81053b4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 81053b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81053bc:	f000 8187 	beq.w	81056ce <HAL_RCCEx_PeriphCLKConfig+0x976>
 81053c0:	f200 816b 	bhi.w	810569a <HAL_RCCEx_PeriphCLKConfig+0x942>
 81053c4:	2b00      	cmp	r3, #0
 81053c6:	f000 8171 	beq.w	81056ac <HAL_RCCEx_PeriphCLKConfig+0x954>
 81053ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81053ce:	f000 8177 	beq.w	81056c0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81053d2:	2601      	movs	r6, #1
 81053d4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81053d6:	682b      	ldr	r3, [r5, #0]
 81053d8:	0719      	lsls	r1, r3, #28
 81053da:	d514      	bpl.n	8105406 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81053dc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 81053e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81053e4:	d107      	bne.n	81053f6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81053e6:	2102      	movs	r1, #2
 81053e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81053ec:	f7ff fc3c 	bl	8104c68 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 81053f0:	2800      	cmp	r0, #0
 81053f2:	bf18      	it	ne
 81053f4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81053f6:	4a80      	ldr	r2, [pc, #512]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 81053f8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 81053fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81053fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8105402:	430b      	orrs	r3, r1
 8105404:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105406:	682b      	ldr	r3, [r5, #0]
 8105408:	06da      	lsls	r2, r3, #27
 810540a:	d514      	bpl.n	8105436 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810540c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8105410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105414:	d107      	bne.n	8105426 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105416:	2102      	movs	r1, #2
 8105418:	f105 0028 	add.w	r0, r5, #40	; 0x28
 810541c:	f7ff fc24 	bl	8104c68 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8105420:	2800      	cmp	r0, #0
 8105422:	bf18      	it	ne
 8105424:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105426:	4a74      	ldr	r2, [pc, #464]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105428:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 810542c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105432:	430b      	orrs	r3, r1
 8105434:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105436:	682b      	ldr	r3, [r5, #0]
 8105438:	031b      	lsls	r3, r3, #12
 810543a:	d51b      	bpl.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch (PeriphClkInit->AdcClockSelection)
 810543c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8105440:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8105444:	f000 814b 	beq.w	81056de <HAL_RCCEx_PeriphCLKConfig+0x986>
 8105448:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 810544c:	d007      	beq.n	810545e <HAL_RCCEx_PeriphCLKConfig+0x706>
 810544e:	2900      	cmp	r1, #0
 8105450:	f040 814b 	bne.w	81056ea <HAL_RCCEx_PeriphCLKConfig+0x992>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105454:	f105 0008 	add.w	r0, r5, #8
 8105458:	f7ff fb8e 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810545c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 810545e:	2c00      	cmp	r4, #0
 8105460:	f040 8146 	bne.w	81056f0 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105464:	4a64      	ldr	r2, [pc, #400]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105466:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 810546a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810546c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8105470:	430b      	orrs	r3, r1
 8105472:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105474:	682b      	ldr	r3, [r5, #0]
 8105476:	035f      	lsls	r7, r3, #13
 8105478:	d51c      	bpl.n	81054b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch (PeriphClkInit->UsbClockSelection)
 810547a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 810547e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105482:	f000 8137 	beq.w	81056f4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8105486:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810548a:	d008      	beq.n	810549e <HAL_RCCEx_PeriphCLKConfig+0x746>
 810548c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105490:	f040 8137 	bne.w	8105702 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105494:	4a58      	ldr	r2, [pc, #352]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105496:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810549c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 810549e:	2c00      	cmp	r4, #0
 81054a0:	f040 8132 	bne.w	8105708 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81054a4:	4a54      	ldr	r2, [pc, #336]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 81054a6:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 81054aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 81054ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81054b0:	430b      	orrs	r3, r1
 81054b2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81054b4:	682b      	ldr	r3, [r5, #0]
 81054b6:	03d8      	lsls	r0, r3, #15
 81054b8:	d509      	bpl.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SdmmcClockSelection)
 81054ba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 81054bc:	2b00      	cmp	r3, #0
 81054be:	f000 8125 	beq.w	810570c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 81054c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054c6:	f000 812f 	beq.w	8105728 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81054ca:	2601      	movs	r6, #1
 81054cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81054ce:	682b      	ldr	r3, [r5, #0]
 81054d0:	0099      	lsls	r1, r3, #2
 81054d2:	d507      	bpl.n	81054e4 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81054d4:	2102      	movs	r1, #2
 81054d6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81054da:	f7ff fbc5 	bl	8104c68 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 81054de:	2800      	cmp	r0, #0
 81054e0:	bf18      	it	ne
 81054e2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81054e4:	e9d5 3100 	ldrd	r3, r1, [r5]
 81054e8:	039a      	lsls	r2, r3, #14
 81054ea:	d50b      	bpl.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->RngClockSelection)
 81054ec:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 81054f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 81054f4:	f000 812f 	beq.w	8105756 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 81054f8:	f200 811f 	bhi.w	810573a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81054fc:	2800      	cmp	r0, #0
 81054fe:	f000 8122 	beq.w	8105746 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8105502:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105504:	02df      	lsls	r7, r3, #11
 8105506:	d506      	bpl.n	8105516 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105508:	483b      	ldr	r0, [pc, #236]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810550a:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 810550c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 810550e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8105512:	4322      	orrs	r2, r4
 8105514:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105516:	00dc      	lsls	r4, r3, #3
 8105518:	d507      	bpl.n	810552a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810551a:	4837      	ldr	r0, [pc, #220]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810551c:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 8105520:	6902      	ldr	r2, [r0, #16]
 8105522:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105526:	4322      	orrs	r2, r4
 8105528:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810552a:	0298      	lsls	r0, r3, #10
 810552c:	d506      	bpl.n	810553c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810552e:	4832      	ldr	r0, [pc, #200]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105530:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8105532:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8105534:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8105538:	4322      	orrs	r2, r4
 810553a:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810553c:	005a      	lsls	r2, r3, #1
 810553e:	d509      	bpl.n	8105554 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105540:	4a2d      	ldr	r2, [pc, #180]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8105542:	6910      	ldr	r0, [r2, #16]
 8105544:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8105548:	6110      	str	r0, [r2, #16]
 810554a:	6910      	ldr	r0, [r2, #16]
 810554c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8105550:	4320      	orrs	r0, r4
 8105552:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105554:	2b00      	cmp	r3, #0
 8105556:	da06      	bge.n	8105566 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105558:	4827      	ldr	r0, [pc, #156]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810555a:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 810555c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 810555e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8105562:	4322      	orrs	r2, r4
 8105564:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105566:	021b      	lsls	r3, r3, #8
 8105568:	d507      	bpl.n	810557a <HAL_RCCEx_PeriphCLKConfig+0x822>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810556a:	4a23      	ldr	r2, [pc, #140]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 810556c:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8105570:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8105572:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8105576:	4303      	orrs	r3, r0
 8105578:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810557a:	07cf      	lsls	r7, r1, #31
 810557c:	d507      	bpl.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x836>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810557e:	2100      	movs	r1, #0
 8105580:	f105 0008 	add.w	r0, r5, #8
 8105584:	f7ff faf8 	bl	8104b78 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8105588:	2800      	cmp	r0, #0
 810558a:	bf18      	it	ne
 810558c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810558e:	686b      	ldr	r3, [r5, #4]
 8105590:	079c      	lsls	r4, r3, #30
 8105592:	d507      	bpl.n	81055a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105594:	2101      	movs	r1, #1
 8105596:	f105 0008 	add.w	r0, r5, #8
 810559a:	f7ff faed 	bl	8104b78 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 810559e:	2800      	cmp	r0, #0
 81055a0:	bf18      	it	ne
 81055a2:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81055a4:	686b      	ldr	r3, [r5, #4]
 81055a6:	0758      	lsls	r0, r3, #29
 81055a8:	d507      	bpl.n	81055ba <HAL_RCCEx_PeriphCLKConfig+0x862>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81055aa:	2102      	movs	r1, #2
 81055ac:	f105 0008 	add.w	r0, r5, #8
 81055b0:	f7ff fae2 	bl	8104b78 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 81055b4:	2800      	cmp	r0, #0
 81055b6:	bf18      	it	ne
 81055b8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81055ba:	686b      	ldr	r3, [r5, #4]
 81055bc:	0719      	lsls	r1, r3, #28
 81055be:	d507      	bpl.n	81055d0 <HAL_RCCEx_PeriphCLKConfig+0x878>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81055c0:	2100      	movs	r1, #0
 81055c2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81055c6:	f7ff fb4f 	bl	8104c68 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 81055ca:	2800      	cmp	r0, #0
 81055cc:	bf18      	it	ne
 81055ce:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81055d0:	686b      	ldr	r3, [r5, #4]
 81055d2:	06da      	lsls	r2, r3, #27
 81055d4:	d507      	bpl.n	81055e6 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81055d6:	2101      	movs	r1, #1
 81055d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81055dc:	f7ff fb44 	bl	8104c68 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 81055e0:	2800      	cmp	r0, #0
 81055e2:	bf18      	it	ne
 81055e4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81055e6:	686b      	ldr	r3, [r5, #4]
 81055e8:	069b      	lsls	r3, r3, #26
 81055ea:	f100 80bc 	bmi.w	8105766 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    return HAL_OK;
 81055ee:	1e30      	subs	r0, r6, #0
 81055f0:	bf18      	it	ne
 81055f2:	2001      	movne	r0, #1
}
 81055f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81055f8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81055fc:	2101      	movs	r1, #1
 81055fe:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105602:	f7ff fb31 	bl	8104c68 <RCCEx_PLL3_Config>
 8105606:	e69e      	b.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105608:	2601      	movs	r6, #1
 810560a:	4634      	mov	r4, r6
 810560c:	e6a7      	b.n	810535e <HAL_RCCEx_PeriphCLKConfig+0x606>
 810560e:	4626      	mov	r6, r4
 8105610:	e6a5      	b.n	810535e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105612:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8105616:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 810561a:	d003      	beq.n	8105624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 810561c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105620:	f47f aeaf 	bne.w	8105382 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    if (ret == HAL_OK)
 8105624:	b9ac      	cbnz	r4, 8105652 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105626:	4a55      	ldr	r2, [pc, #340]	; (810577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105628:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 810562c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 810562e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8105632:	430b      	orrs	r3, r1
 8105634:	6553      	str	r3, [r2, #84]	; 0x54
 8105636:	e6a6      	b.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105638:	2100      	movs	r1, #0
 810563a:	f105 0008 	add.w	r0, r5, #8
 810563e:	f7ff fa9b 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105642:	4604      	mov	r4, r0
        break;
 8105644:	e7ee      	b.n	8105624 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105646:	2102      	movs	r1, #2
 8105648:	f105 0028 	add.w	r0, r5, #40	; 0x28
 810564c:	f7ff fb0c 	bl	8104c68 <RCCEx_PLL3_Config>
 8105650:	e7f7      	b.n	8105642 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8105652:	4626      	mov	r6, r4
 8105654:	e697      	b.n	8105386 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810565a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 810565e:	d003      	beq.n	8105668 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8105660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8105664:	f47f aea1 	bne.w	81053aa <HAL_RCCEx_PeriphCLKConfig+0x652>
    if (ret == HAL_OK)
 8105668:	b9ac      	cbnz	r4, 8105696 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810566a:	4a44      	ldr	r2, [pc, #272]	; (810577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 810566c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8105670:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105672:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8105676:	430b      	orrs	r3, r1
 8105678:	6593      	str	r3, [r2, #88]	; 0x58
 810567a:	e698      	b.n	81053ae <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810567c:	2100      	movs	r1, #0
 810567e:	f105 0008 	add.w	r0, r5, #8
 8105682:	f7ff fa79 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105686:	4604      	mov	r4, r0
        break;
 8105688:	e7ee      	b.n	8105668 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810568a:	2102      	movs	r1, #2
 810568c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8105690:	f7ff faea 	bl	8104c68 <RCCEx_PLL3_Config>
 8105694:	e7f7      	b.n	8105686 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8105696:	4626      	mov	r6, r4
 8105698:	e689      	b.n	81053ae <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim345ClockSelection)
 810569a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810569e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 81056a2:	d003      	beq.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0x954>
 81056a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81056a8:	f47f ae93 	bne.w	81053d2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    if (ret == HAL_OK)
 81056ac:	b9ac      	cbnz	r4, 81056da <HAL_RCCEx_PeriphCLKConfig+0x982>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81056ae:	4a33      	ldr	r2, [pc, #204]	; (810577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 81056b0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 81056b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81056b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81056ba:	430b      	orrs	r3, r1
 81056bc:	6593      	str	r3, [r2, #88]	; 0x58
 81056be:	e68a      	b.n	81053d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81056c0:	2100      	movs	r1, #0
 81056c2:	f105 0008 	add.w	r0, r5, #8
 81056c6:	f7ff fa57 	bl	8104b78 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81056ca:	4604      	mov	r4, r0
        break;
 81056cc:	e7ee      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0x954>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81056ce:	2102      	movs	r1, #2
 81056d0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81056d4:	f7ff fac8 	bl	8104c68 <RCCEx_PLL3_Config>
 81056d8:	e7f7      	b.n	81056ca <HAL_RCCEx_PeriphCLKConfig+0x972>
 81056da:	4626      	mov	r6, r4
 81056dc:	e67b      	b.n	81053d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81056de:	2102      	movs	r1, #2
 81056e0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81056e4:	f7ff fac0 	bl	8104c68 <RCCEx_PLL3_Config>
 81056e8:	e6b8      	b.n	810545c <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 81056ea:	2601      	movs	r6, #1
 81056ec:	4634      	mov	r4, r6
 81056ee:	e6c1      	b.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 81056f0:	4626      	mov	r6, r4
 81056f2:	e6bf      	b.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81056f4:	2101      	movs	r1, #1
 81056f6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81056fa:	f7ff fab5 	bl	8104c68 <RCCEx_PLL3_Config>
 81056fe:	4604      	mov	r4, r0
        break;
 8105700:	e6cd      	b.n	810549e <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (PeriphClkInit->UsbClockSelection)
 8105702:	2601      	movs	r6, #1
 8105704:	4634      	mov	r4, r6
 8105706:	e6d5      	b.n	81054b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8105708:	4626      	mov	r6, r4
 810570a:	e6d3      	b.n	81054b4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810570c:	4a1b      	ldr	r2, [pc, #108]	; (810577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 810570e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8105710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105714:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8105716:	b974      	cbnz	r4, 8105736 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105718:	4a18      	ldr	r2, [pc, #96]	; (810577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 810571a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 810571c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 810571e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105722:	430b      	orrs	r3, r1
 8105724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105726:	e6d2      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105728:	2102      	movs	r1, #2
 810572a:	f105 0008 	add.w	r0, r5, #8
 810572e:	f7ff fa23 	bl	8104b78 <RCCEx_PLL2_Config>
 8105732:	4604      	mov	r4, r0
        break;
 8105734:	e7ef      	b.n	8105716 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8105736:	4626      	mov	r6, r4
 8105738:	e6c9      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->RngClockSelection)
 810573a:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 810573e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8105742:	f47f aede 	bne.w	8105502 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    if (ret == HAL_OK)
 8105746:	b964      	cbnz	r4, 8105762 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105748:	4c0c      	ldr	r4, [pc, #48]	; (810577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 810574a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 810574c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8105750:	4302      	orrs	r2, r0
 8105752:	6562      	str	r2, [r4, #84]	; 0x54
 8105754:	e6d6      	b.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105756:	4f09      	ldr	r7, [pc, #36]	; (810577c <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8105758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810575a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 810575e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 8105760:	e7f1      	b.n	8105746 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8105762:	4626      	mov	r6, r4
 8105764:	e6ce      	b.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105766:	2102      	movs	r1, #2
 8105768:	f105 0028 	add.w	r0, r5, #40	; 0x28
 810576c:	f7ff fa7c 	bl	8104c68 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8105770:	2800      	cmp	r0, #0
 8105772:	f43f af3c 	beq.w	81055ee <HAL_RCCEx_PeriphCLKConfig+0x896>
  return HAL_ERROR;
 8105776:	2001      	movs	r0, #1
 8105778:	e73c      	b.n	81055f4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 810577a:	bf00      	nop
 810577c:	58024400 	.word	0x58024400

08105780 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8105780:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105782:	f7ff f9b5 	bl	8104af0 <HAL_RCC_GetHCLKFreq>
 8105786:	4b05      	ldr	r3, [pc, #20]	; (810579c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8105788:	4a05      	ldr	r2, [pc, #20]	; (81057a0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 810578a:	6a1b      	ldr	r3, [r3, #32]
 810578c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8105790:	5cd3      	ldrb	r3, [r2, r3]
 8105792:	f003 031f 	and.w	r3, r3, #31
}
 8105796:	40d8      	lsrs	r0, r3
 8105798:	bd08      	pop	{r3, pc}
 810579a:	bf00      	nop
 810579c:	58024400 	.word	0x58024400
 81057a0:	081105f0 	.word	0x081105f0

081057a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057a4:	494f      	ldr	r1, [pc, #316]	; (81058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 81057a6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81057aa:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81057ac:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81057ae:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 81057b0:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81057b4:	f3c6 3305 	ubfx	r3, r6, #12, #6
  if (pll2m != 0U)
 81057b8:	f000 8090 	beq.w	81058dc <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057bc:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81057c0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81057c4:	f3c5 1200 	ubfx	r2, r5, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81057c8:	4353      	muls	r3, r2
 81057ca:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057ce:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 81057d2:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81057d8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 81057dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 81057e0:	d06e      	beq.n	81058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 81057e2:	2c02      	cmp	r4, #2
 81057e4:	d05e      	beq.n	81058a4 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 81057e6:	2c00      	cmp	r4, #0
 81057e8:	d16a      	bne.n	81058c0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81057ea:	680b      	ldr	r3, [r1, #0]
 81057ec:	069b      	lsls	r3, r3, #26
 81057ee:	d547      	bpl.n	8105880 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057f0:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057f2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057f4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 81057f8:	4a3b      	ldr	r2, [pc, #236]	; (81058e8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 81057fa:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057fc:	ee07 2a90 	vmov	s15, r2
 8105800:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105808:	eec5 7a87 	vdiv.f32	s15, s11, s14
 810580c:	ee07 3a10 	vmov	s14, r3
 8105810:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105814:	ee37 7a26 	vadd.f32	s14, s14, s13
 8105818:	ee37 7a06 	vadd.f32	s14, s14, s12
 810581c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105820:	4a30      	ldr	r2, [pc, #192]	; (81058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8105822:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8105824:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105828:	ee07 3a10 	vmov	s14, r3
 810582c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105830:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105838:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 810583c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105840:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8105842:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8105846:	ee07 3a10 	vmov	s14, r3
 810584a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810584e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105856:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 810585a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810585e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8105860:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8105864:	ee06 3a90 	vmov	s13, r3
 8105868:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 810586c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8105870:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8105874:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105878:	ee17 3a90 	vmov	r3, s15
 810587c:	6083      	str	r3, [r0, #8]
}
 810587e:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105880:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8105882:	eddf 5a1a 	vldr	s11, [pc, #104]	; 81058ec <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8105886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810588a:	ee07 3a90 	vmov	s15, r3
 810588e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105896:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810589a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 810589e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 81058a2:	e7bd      	b.n	8105820 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81058a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 81058a6:	eddf 5a12 	vldr	s11, [pc, #72]	; 81058f0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 81058aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ae:	ee07 3a90 	vmov	s15, r3
 81058b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81058b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 81058be:	e7ec      	b.n	810589a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81058c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 81058c2:	eddf 5a0c 	vldr	s11, [pc, #48]	; 81058f4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 81058c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ca:	ee07 3a90 	vmov	s15, r3
 81058ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81058d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 81058da:	e7de      	b.n	810589a <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81058dc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81058e0:	e7cc      	b.n	810587c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 81058e2:	bf00      	nop
 81058e4:	58024400 	.word	0x58024400
 81058e8:	03d09000 	.word	0x03d09000
 81058ec:	4c742400 	.word	0x4c742400
 81058f0:	4bbebc20 	.word	0x4bbebc20
 81058f4:	4a742400 	.word	0x4a742400

081058f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81058f8:	494f      	ldr	r1, [pc, #316]	; (8105a38 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 81058fa:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81058fc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81058fe:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105900:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105902:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 8105904:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105908:	f3c6 5305 	ubfx	r3, r6, #20, #6
  if (pll3m != 0U)
 810590c:	f000 8090 	beq.w	8105a30 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105910:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105914:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105918:	f3c5 2200 	ubfx	r2, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810591c:	4353      	muls	r3, r2
 810591e:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105922:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8105926:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810592c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105930:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 8105934:	d06e      	beq.n	8105a14 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 8105936:	2c02      	cmp	r4, #2
 8105938:	d05e      	beq.n	81059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 810593a:	2c00      	cmp	r4, #0
 810593c:	d16a      	bne.n	8105a14 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810593e:	680b      	ldr	r3, [r1, #0]
 8105940:	069b      	lsls	r3, r3, #26
 8105942:	d547      	bpl.n	81059d4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105944:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105946:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105948:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 810594c:	4a3b      	ldr	r2, [pc, #236]	; (8105a3c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 810594e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105950:	ee07 2a90 	vmov	s15, r2
 8105954:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810595c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105960:	ee07 3a10 	vmov	s14, r3
 8105964:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105968:	ee37 7a26 	vadd.f32	s14, s14, s13
 810596c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105970:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105974:	4a30      	ldr	r2, [pc, #192]	; (8105a38 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8105976:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8105978:	f3c3 2346 	ubfx	r3, r3, #9, #7
 810597c:	ee07 3a10 	vmov	s14, r3
 8105980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105984:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105988:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810598c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105990:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105994:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8105996:	f3c3 4306 	ubfx	r3, r3, #16, #7
 810599a:	ee07 3a10 	vmov	s14, r3
 810599e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81059a2:	ee37 7a06 	vadd.f32	s14, s14, s12
 81059a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81059aa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 81059ae:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81059b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 81059b4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 81059b8:	ee06 3a90 	vmov	s13, r3
 81059bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81059c0:	ee76 6a86 	vadd.f32	s13, s13, s12
 81059c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81059c8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 81059cc:	ee17 3a90 	vmov	r3, s15
 81059d0:	6083      	str	r3, [r0, #8]
}
 81059d2:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81059d6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8105a40 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 81059da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059de:	ee07 3a90 	vmov	s15, r3
 81059e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059ea:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059ee:	eec5 6a87 	vdiv.f32	s13, s11, s14
 81059f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 81059f6:	e7bd      	b.n	8105974 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81059fa:	eddf 5a12 	vldr	s11, [pc, #72]	; 8105a44 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 81059fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a02:	ee07 3a90 	vmov	s15, r3
 8105a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a0e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105a12:	e7ec      	b.n	81059ee <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105a16:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8105a48 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8105a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a1e:	ee07 3a90 	vmov	s15, r3
 8105a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a2a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105a2e:	e7de      	b.n	81059ee <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105a30:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105a34:	e7cc      	b.n	81059d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8105a36:	bf00      	nop
 8105a38:	58024400 	.word	0x58024400
 8105a3c:	03d09000 	.word	0x03d09000
 8105a40:	4c742400 	.word	0x4c742400
 8105a44:	4bbebc20 	.word	0x4bbebc20
 8105a48:	4a742400 	.word	0x4a742400

08105a4c <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a4c:	494f      	ldr	r1, [pc, #316]	; (8105b8c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8105a4e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a50:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105a52:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105a54:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a56:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  if (pll1m != 0U)
 8105a58:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105a5c:	f3c6 1305 	ubfx	r3, r6, #4, #6
  if (pll1m != 0U)
 8105a60:	f000 8090 	beq.w	8105b84 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a64:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a68:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105a6c:	f005 0201 	and.w	r2, r5, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a70:	4353      	muls	r3, r2
 8105a72:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a76:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8105a7a:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105a80:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105a84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 8105a88:	d04e      	beq.n	8105b28 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8105a8a:	2c02      	cmp	r4, #2
 8105a8c:	d05e      	beq.n	8105b4c <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 8105a8e:	2c00      	cmp	r4, #0
 8105a90:	d16a      	bne.n	8105b68 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a92:	680b      	ldr	r3, [r1, #0]
 8105a94:	069b      	lsls	r3, r3, #26
 8105a96:	d567      	bpl.n	8105b68 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a98:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a9a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a9c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8105aa0:	4a3b      	ldr	r2, [pc, #236]	; (8105b90 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 8105aa2:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105aa4:	ee07 2a90 	vmov	s15, r2
 8105aa8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ab0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105ab4:	ee07 3a10 	vmov	s14, r3
 8105ab8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105abc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8105ac0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105ac8:	4a30      	ldr	r2, [pc, #192]	; (8105b8c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8105aca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105acc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105ad0:	ee07 3a10 	vmov	s14, r3
 8105ad4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105ad8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105adc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105ae0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105ae4:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105ae8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105aea:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8105aee:	ee07 3a10 	vmov	s14, r3
 8105af2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105af6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105afa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105afe:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105b02:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105b06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105b08:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8105b0c:	ee06 3a90 	vmov	s13, r3
 8105b10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105b14:	ee76 6a86 	vadd.f32	s13, s13, s12
 8105b18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8105b1c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105b20:	ee17 3a90 	vmov	r3, s15
 8105b24:	6083      	str	r3, [r0, #8]
}
 8105b26:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b28:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8105b2a:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8105b94 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8105b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b32:	ee07 3a90 	vmov	s15, r3
 8105b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b3e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b42:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8105b46:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8105b4a:	e7bd      	b.n	8105ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b4c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8105b4e:	eddf 5a12 	vldr	s11, [pc, #72]	; 8105b98 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8105b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b56:	ee07 3a90 	vmov	s15, r3
 8105b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b62:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105b66:	e7ec      	b.n	8105b42 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b68:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8105b6a:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8105b9c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8105b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b72:	ee07 3a90 	vmov	s15, r3
 8105b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105b82:	e7de      	b.n	8105b42 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105b84:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105b88:	e7cc      	b.n	8105b24 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8105b8a:	bf00      	nop
 8105b8c:	58024400 	.word	0x58024400
 8105b90:	03d09000 	.word	0x03d09000
 8105b94:	4a742400 	.word	0x4a742400
 8105b98:	4bbebc20 	.word	0x4bbebc20
 8105b9c:	4c742400 	.word	0x4c742400

08105ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8105ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105ba2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8105ba6:	430b      	orrs	r3, r1
 8105ba8:	d114      	bne.n	8105bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8105baa:	4b9e      	ldr	r3, [pc, #632]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105bae:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 8105bb2:	2a04      	cmp	r2, #4
 8105bb4:	d82f      	bhi.n	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105bb6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8105bba:	0108      	.short	0x0108
 8105bbc:	0005001d 	.word	0x0005001d
 8105bc0:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105bc4:	6818      	ldr	r0, [r3, #0]
 8105bc6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105bca:	d01b      	beq.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105bcc:	a801      	add	r0, sp, #4
 8105bce:	f7ff fe93 	bl	81058f8 <HAL_RCCEx_GetPLL3ClockFreq>
 8105bd2:	e016      	b.n	8105c02 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105bd4:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8105bd8:	430b      	orrs	r3, r1
 8105bda:	d11e      	bne.n	8105c1a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105bdc:	4b91      	ldr	r3, [pc, #580]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105bde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105be0:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
 8105be4:	2a80      	cmp	r2, #128	; 0x80
 8105be6:	d0ed      	beq.n	8105bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105be8:	d80f      	bhi.n	8105c0a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8105bea:	2a00      	cmp	r2, #0
 8105bec:	f000 80ed 	beq.w	8105dca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105bf0:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
 8105bf2:	d110      	bne.n	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105bf4:	6818      	ldr	r0, [r3, #0]
 8105bf6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105bfa:	d003      	beq.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105bfc:	a801      	add	r0, sp, #4
 8105bfe:	f7ff fdd1 	bl	81057a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105c02:	9801      	ldr	r0, [sp, #4]
}
 8105c04:	b005      	add	sp, #20
 8105c06:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8105c0a:	2ac0      	cmp	r2, #192	; 0xc0
 8105c0c:	f000 813a 	beq.w	8105e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105c10:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
 8105c14:	d01a      	beq.n	8105c4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    switch (srcclk)
 8105c16:	2000      	movs	r0, #0
  return frequency;
 8105c18:	e7f4      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105c1a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8105c1e:	430b      	orrs	r3, r1
 8105c20:	d133      	bne.n	8105c8a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105c22:	4b80      	ldr	r3, [pc, #512]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105c26:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
    switch (saiclocksource)
 8105c2a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8105c2e:	d0c9      	beq.n	8105bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105c30:	d805      	bhi.n	8105c3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8105c32:	2a00      	cmp	r2, #0
 8105c34:	f000 80c9 	beq.w	8105dca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105c38:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8105c3c:	e7d9      	b.n	8105bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105c3e:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8105c42:	f000 811f 	beq.w	8105e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105c46:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8105c4a:	e7e3      	b.n	8105c14 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105c4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105c4e:	6819      	ldr	r1, [r3, #0]
 8105c50:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105c52:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105c56:	d506      	bpl.n	8105c66 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8105c58:	b92a      	cbnz	r2, 8105c66 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105c5a:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105c5c:	4872      	ldr	r0, [pc, #456]	; (8105e28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8105c5e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8105c62:	40d8      	lsrs	r0, r3
 8105c64:	e7ce      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105c66:	4b6f      	ldr	r3, [pc, #444]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105c68:	6819      	ldr	r1, [r3, #0]
 8105c6a:	05c9      	lsls	r1, r1, #23
 8105c6c:	d503      	bpl.n	8105c76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8105c6e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8105c72:	f000 8109 	beq.w	8105e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105c76:	6818      	ldr	r0, [r3, #0]
 8105c78:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8105c7c:	d0c2      	beq.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 8105c7e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8105c82:	486a      	ldr	r0, [pc, #424]	; (8105e2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8105c84:	bf18      	it	ne
 8105c86:	2000      	movne	r0, #0
 8105c88:	e7bc      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105c8a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8105c8e:	430b      	orrs	r3, r1
 8105c90:	d125      	bne.n	8105cde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8105c92:	4b64      	ldr	r3, [pc, #400]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105c94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105c96:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
    switch (saiclocksource)
 8105c9a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8105c9e:	d091      	beq.n	8105bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105ca0:	d805      	bhi.n	8105cae <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8105ca2:	2a00      	cmp	r2, #0
 8105ca4:	f000 8091 	beq.w	8105dca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105ca8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8105cac:	e7a1      	b.n	8105bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105cae:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8105cb2:	f000 80e7 	beq.w	8105e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105cb6:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
    switch (srcclk)
 8105cba:	d1ac      	bne.n	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105cbe:	6819      	ldr	r1, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105cc0:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105cc2:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105cc4:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105cc8:	d501      	bpl.n	8105cce <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8105cca:	2a00      	cmp	r2, #0
 8105ccc:	d0c6      	beq.n	8105c5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105cce:	05d9      	lsls	r1, r3, #23
 8105cd0:	d503      	bpl.n	8105cda <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8105cd2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8105cd6:	f000 80d7 	beq.w	8105e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105cda:	4b52      	ldr	r3, [pc, #328]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105cdc:	e7cb      	b.n	8105c76 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105cde:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8105ce2:	430b      	orrs	r3, r1
 8105ce4:	d114      	bne.n	8105d10 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105ce6:	4b4f      	ldr	r3, [pc, #316]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105ce8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105cea:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
 8105cee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8105cf2:	f43f af67 	beq.w	8105bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105cf6:	d804      	bhi.n	8105d02 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8105cf8:	2a00      	cmp	r2, #0
 8105cfa:	d066      	beq.n	8105dca <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105cfc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8105d00:	e777      	b.n	8105bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105d02:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8105d06:	f000 80bd 	beq.w	8105e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105d0a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8105d0e:	e7d4      	b.n	8105cba <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8105d10:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8105d14:	430b      	orrs	r3, r1
 8105d16:	d134      	bne.n	8105d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8105d18:	4a42      	ldr	r2, [pc, #264]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105d1a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8105d1c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8105d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105d24:	f000 808a 	beq.w	8105e3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8105d28:	d80d      	bhi.n	8105d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8105d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105d2e:	d016      	beq.n	8105d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d34:	d01c      	beq.n	8105d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105d36:	2b00      	cmp	r3, #0
 8105d38:	f47f af6d 	bne.w	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 8105d3c:	b005      	add	sp, #20
 8105d3e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8105d42:	f7fe bef5 	b.w	8104b30 <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 8105d46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105d4a:	d07e      	beq.n	8105e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8105d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    switch (srcclk)
 8105d50:	f47f af61 	bne.w	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105d54:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 8105d56:	4b35      	ldr	r3, [pc, #212]	; (8105e2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8105d58:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8105d5c:	e079      	b.n	8105e52 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105d5e:	6810      	ldr	r0, [r2, #0]
 8105d60:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105d64:	f43f af4e 	beq.w	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105d68:	a801      	add	r0, sp, #4
 8105d6a:	f7ff fd1b 	bl	81057a4 <HAL_RCCEx_GetPLL2ClockFreq>
 8105d6e:	e034      	b.n	8105dda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105d70:	6810      	ldr	r0, [r2, #0]
 8105d72:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105d76:	f43f af45 	beq.w	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105d7a:	a801      	add	r0, sp, #4
 8105d7c:	f7ff fdbc 	bl	81058f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105d80:	e02b      	b.n	8105dda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8105d82:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8105d86:	430b      	orrs	r3, r1
 8105d88:	d117      	bne.n	8105dba <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105d8a:	4b26      	ldr	r3, [pc, #152]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105d8e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
 8105d92:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8105d96:	d006      	beq.n	8105da6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8105d98:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8105d9c:	d08e      	beq.n	8105cbc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8105d9e:	2a00      	cmp	r2, #0
 8105da0:	f47f af39 	bne.w	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105da4:	e726      	b.n	8105bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105da6:	6818      	ldr	r0, [r3, #0]
 8105da8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105dac:	f43f af2a 	beq.w	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105db0:	a801      	add	r0, sp, #4
 8105db2:	f7ff fda1 	bl	81058f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105db6:	9803      	ldr	r0, [sp, #12]
 8105db8:	e724      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105dba:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8105dbe:	430b      	orrs	r3, r1
 8105dc0:	d116      	bne.n	8105df0 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8105dc2:	4b18      	ldr	r3, [pc, #96]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8105dc6:	03d2      	lsls	r2, r2, #15
 8105dc8:	d409      	bmi.n	8105dde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105dca:	6818      	ldr	r0, [r3, #0]
 8105dcc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8105dd0:	f43f af18 	beq.w	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105dd4:	a801      	add	r0, sp, #4
 8105dd6:	f7ff fe39 	bl	8105a4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105dda:	9802      	ldr	r0, [sp, #8]
 8105ddc:	e712      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105dde:	6818      	ldr	r0, [r3, #0]
 8105de0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105de4:	f43f af0e 	beq.w	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105de8:	a801      	add	r0, sp, #4
 8105dea:	f7ff fcdb 	bl	81057a4 <HAL_RCCEx_GetPLL2ClockFreq>
 8105dee:	e7e2      	b.n	8105db6 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105df0:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8105df4:	430b      	orrs	r3, r1
 8105df6:	d12f      	bne.n	8105e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8105df8:	4a0a      	ldr	r2, [pc, #40]	; (8105e24 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105dfa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105dfc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8105e00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105e04:	d01a      	beq.n	8105e3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8105e06:	d813      	bhi.n	8105e30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 8105e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105e0c:	d0a7      	beq.n	8105d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e12:	d0ad      	beq.n	8105d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105e14:	2b00      	cmp	r3, #0
 8105e16:	f47f aefe 	bne.w	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 8105e1a:	b005      	add	sp, #20
 8105e1c:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105e20:	f7ff bcae 	b.w	8105780 <HAL_RCCEx_GetD3PCLK1Freq>
 8105e24:	58024400 	.word	0x58024400
 8105e28:	03d09000 	.word	0x03d09000
 8105e2c:	017d7840 	.word	0x017d7840
    switch (srcclk)
 8105e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105e34:	d009      	beq.n	8105e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8105e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105e3a:	e789      	b.n	8105d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105e3c:	6810      	ldr	r0, [r2, #0]
 8105e3e:	f010 0004 	ands.w	r0, r0, #4
 8105e42:	f43f aedf 	beq.w	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105e46:	6813      	ldr	r3, [r2, #0]
 8105e48:	e708      	b.n	8105c5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105e4a:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 8105e4c:	4b0f      	ldr	r3, [pc, #60]	; (8105e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8105e4e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
          frequency = HSE_VALUE;
 8105e52:	bf18      	it	ne
 8105e54:	4618      	movne	r0, r3
 8105e56:	e6d5      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105e58:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8105e5c:	4301      	orrs	r1, r0
 8105e5e:	f47f aeda 	bne.w	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8105e62:	4a0b      	ldr	r2, [pc, #44]	; (8105e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8105e64:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8105e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8105e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105e6e:	d007      	beq.n	8105e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8105e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e74:	f43f af73 	beq.w	8105d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	f47f aecc 	bne.w	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105e7e:	e769      	b.n	8105d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105e80:	6810      	ldr	r0, [r2, #0]
 8105e82:	e7a3      	b.n	8105dcc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8105e84:	4803      	ldr	r0, [pc, #12]	; (8105e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8105e86:	e6bd      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 8105e88:	4800      	ldr	r0, [pc, #0]	; (8105e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8105e8a:	e6bb      	b.n	8105c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8105e8c:	003d0900 	.word	0x003d0900
 8105e90:	58024400 	.word	0x58024400
 8105e94:	00bb8000 	.word	0x00bb8000

08105e98 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105e98:	6a03      	ldr	r3, [r0, #32]
 8105e9a:	f023 0301 	bic.w	r3, r3, #1
 8105e9e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105ea0:	6a03      	ldr	r3, [r0, #32]
{
 8105ea2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105ea4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105ea6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105ea8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105eaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8105eae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8105eb2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105eb4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8105eb6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8105eba:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105ebc:	4d1b      	ldr	r5, [pc, #108]	; (8105f2c <TIM_OC1_SetConfig+0x94>)
 8105ebe:	42a8      	cmp	r0, r5
 8105ec0:	d00f      	beq.n	8105ee2 <TIM_OC1_SetConfig+0x4a>
 8105ec2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ec6:	42a8      	cmp	r0, r5
 8105ec8:	d00b      	beq.n	8105ee2 <TIM_OC1_SetConfig+0x4a>
 8105eca:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8105ece:	42a8      	cmp	r0, r5
 8105ed0:	d007      	beq.n	8105ee2 <TIM_OC1_SetConfig+0x4a>
 8105ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ed6:	42a8      	cmp	r0, r5
 8105ed8:	d003      	beq.n	8105ee2 <TIM_OC1_SetConfig+0x4a>
 8105eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ede:	42a8      	cmp	r0, r5
 8105ee0:	d11e      	bne.n	8105f20 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105ee2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8105ee4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8105ee8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105eea:	4d10      	ldr	r5, [pc, #64]	; (8105f2c <TIM_OC1_SetConfig+0x94>)
 8105eec:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8105eee:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105ef2:	d00f      	beq.n	8105f14 <TIM_OC1_SetConfig+0x7c>
 8105ef4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ef8:	42a8      	cmp	r0, r5
 8105efa:	d00b      	beq.n	8105f14 <TIM_OC1_SetConfig+0x7c>
 8105efc:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8105f00:	42a8      	cmp	r0, r5
 8105f02:	d007      	beq.n	8105f14 <TIM_OC1_SetConfig+0x7c>
 8105f04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f08:	42a8      	cmp	r0, r5
 8105f0a:	d003      	beq.n	8105f14 <TIM_OC1_SetConfig+0x7c>
 8105f0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f10:	42a8      	cmp	r0, r5
 8105f12:	d105      	bne.n	8105f20 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105f14:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105f18:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105f1c:	4334      	orrs	r4, r6
 8105f1e:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105f20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105f22:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105f24:	684a      	ldr	r2, [r1, #4]
 8105f26:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105f28:	6203      	str	r3, [r0, #32]
}
 8105f2a:	bd70      	pop	{r4, r5, r6, pc}
 8105f2c:	40010000 	.word	0x40010000

08105f30 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105f30:	6a03      	ldr	r3, [r0, #32]
 8105f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105f36:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105f38:	6a03      	ldr	r3, [r0, #32]
{
 8105f3a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105f3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105f3e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105f40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105f42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8105f46:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8105f4a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105f4c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8105f4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105f52:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105f56:	4d16      	ldr	r5, [pc, #88]	; (8105fb0 <TIM_OC3_SetConfig+0x80>)
 8105f58:	42a8      	cmp	r0, r5
 8105f5a:	d003      	beq.n	8105f64 <TIM_OC3_SetConfig+0x34>
 8105f5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f60:	42a8      	cmp	r0, r5
 8105f62:	d10d      	bne.n	8105f80 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105f64:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8105f66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105f6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105f6e:	4d10      	ldr	r5, [pc, #64]	; (8105fb0 <TIM_OC3_SetConfig+0x80>)
 8105f70:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8105f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105f76:	d00e      	beq.n	8105f96 <TIM_OC3_SetConfig+0x66>
 8105f78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f7c:	42a8      	cmp	r0, r5
 8105f7e:	d00a      	beq.n	8105f96 <TIM_OC3_SetConfig+0x66>
 8105f80:	4d0c      	ldr	r5, [pc, #48]	; (8105fb4 <TIM_OC3_SetConfig+0x84>)
 8105f82:	42a8      	cmp	r0, r5
 8105f84:	d007      	beq.n	8105f96 <TIM_OC3_SetConfig+0x66>
 8105f86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f8a:	42a8      	cmp	r0, r5
 8105f8c:	d003      	beq.n	8105f96 <TIM_OC3_SetConfig+0x66>
 8105f8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105f92:	42a8      	cmp	r0, r5
 8105f94:	d106      	bne.n	8105fa4 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105f96:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8105f9a:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105f9e:	4334      	orrs	r4, r6
 8105fa0:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105fa4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105fa6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8105fa8:	684a      	ldr	r2, [r1, #4]
 8105faa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105fac:	6203      	str	r3, [r0, #32]
}
 8105fae:	bd70      	pop	{r4, r5, r6, pc}
 8105fb0:	40010000 	.word	0x40010000
 8105fb4:	40014000 	.word	0x40014000

08105fb8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8105fb8:	6a03      	ldr	r3, [r0, #32]
 8105fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8105fbe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105fc0:	6a03      	ldr	r3, [r0, #32]
{
 8105fc2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105fc4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105fc6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105fc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105fca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8105fce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105fd2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105fd6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8105fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105fdc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105fe0:	4d0e      	ldr	r5, [pc, #56]	; (810601c <TIM_OC4_SetConfig+0x64>)
 8105fe2:	42a8      	cmp	r0, r5
 8105fe4:	d00f      	beq.n	8106006 <TIM_OC4_SetConfig+0x4e>
 8105fe6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105fea:	42a8      	cmp	r0, r5
 8105fec:	d00b      	beq.n	8106006 <TIM_OC4_SetConfig+0x4e>
 8105fee:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8105ff2:	42a8      	cmp	r0, r5
 8105ff4:	d007      	beq.n	8106006 <TIM_OC4_SetConfig+0x4e>
 8105ff6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105ffa:	42a8      	cmp	r0, r5
 8105ffc:	d003      	beq.n	8106006 <TIM_OC4_SetConfig+0x4e>
 8105ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106002:	42a8      	cmp	r0, r5
 8106004:	d104      	bne.n	8106010 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106006:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106008:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810600c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106010:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106012:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106014:	684a      	ldr	r2, [r1, #4]
 8106016:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106018:	6203      	str	r3, [r0, #32]
}
 810601a:	bd30      	pop	{r4, r5, pc}
 810601c:	40010000 	.word	0x40010000

08106020 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106020:	6a03      	ldr	r3, [r0, #32]
 8106022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106026:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106028:	6a03      	ldr	r3, [r0, #32]
{
 810602a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810602c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810602e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106030:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106032:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 810603a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810603c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 810603e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106042:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106046:	4d0f      	ldr	r5, [pc, #60]	; (8106084 <TIM_OC5_SetConfig+0x64>)
 8106048:	42a8      	cmp	r0, r5
 810604a:	d00f      	beq.n	810606c <TIM_OC5_SetConfig+0x4c>
 810604c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106050:	42a8      	cmp	r0, r5
 8106052:	d00b      	beq.n	810606c <TIM_OC5_SetConfig+0x4c>
 8106054:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8106058:	42a8      	cmp	r0, r5
 810605a:	d007      	beq.n	810606c <TIM_OC5_SetConfig+0x4c>
 810605c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106060:	42a8      	cmp	r0, r5
 8106062:	d003      	beq.n	810606c <TIM_OC5_SetConfig+0x4c>
 8106064:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106068:	42a8      	cmp	r0, r5
 810606a:	d104      	bne.n	8106076 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810606c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 810606e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106072:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106076:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106078:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810607a:	684a      	ldr	r2, [r1, #4]
 810607c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810607e:	6203      	str	r3, [r0, #32]
}
 8106080:	bd30      	pop	{r4, r5, pc}
 8106082:	bf00      	nop
 8106084:	40010000 	.word	0x40010000

08106088 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8106088:	6a03      	ldr	r3, [r0, #32]
 810608a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810608e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106090:	6a03      	ldr	r3, [r0, #32]
{
 8106092:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106094:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106096:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106098:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810609a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 810609e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81060a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81060a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81060a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81060ac:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81060b0:	4d0e      	ldr	r5, [pc, #56]	; (81060ec <TIM_OC6_SetConfig+0x64>)
 81060b2:	42a8      	cmp	r0, r5
 81060b4:	d00f      	beq.n	81060d6 <TIM_OC6_SetConfig+0x4e>
 81060b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81060ba:	42a8      	cmp	r0, r5
 81060bc:	d00b      	beq.n	81060d6 <TIM_OC6_SetConfig+0x4e>
 81060be:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 81060c2:	42a8      	cmp	r0, r5
 81060c4:	d007      	beq.n	81060d6 <TIM_OC6_SetConfig+0x4e>
 81060c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81060ca:	42a8      	cmp	r0, r5
 81060cc:	d003      	beq.n	81060d6 <TIM_OC6_SetConfig+0x4e>
 81060ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81060d2:	42a8      	cmp	r0, r5
 81060d4:	d104      	bne.n	81060e0 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81060d6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 81060d8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81060dc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81060e0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81060e2:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81060e4:	684a      	ldr	r2, [r1, #4]
 81060e6:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81060e8:	6203      	str	r3, [r0, #32]
}
 81060ea:	bd30      	pop	{r4, r5, pc}
 81060ec:	40010000 	.word	0x40010000

081060f0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 81060f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 81060f4:	2b01      	cmp	r3, #1
 81060f6:	d12f      	bne.n	8106158 <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 81060f8:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81060fa:	4a18      	ldr	r2, [pc, #96]	; (810615c <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 81060fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106100:	6803      	ldr	r3, [r0, #0]
 8106102:	4293      	cmp	r3, r2
 8106104:	d01a      	beq.n	810613c <HAL_TIM_Base_Start+0x4c>
 8106106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810610a:	d017      	beq.n	810613c <HAL_TIM_Base_Start+0x4c>
 810610c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8106110:	4293      	cmp	r3, r2
 8106112:	d013      	beq.n	810613c <HAL_TIM_Base_Start+0x4c>
 8106114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106118:	4293      	cmp	r3, r2
 810611a:	d00f      	beq.n	810613c <HAL_TIM_Base_Start+0x4c>
 810611c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106120:	4293      	cmp	r3, r2
 8106122:	d00b      	beq.n	810613c <HAL_TIM_Base_Start+0x4c>
 8106124:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8106128:	4293      	cmp	r3, r2
 810612a:	d007      	beq.n	810613c <HAL_TIM_Base_Start+0x4c>
 810612c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8106130:	4293      	cmp	r3, r2
 8106132:	d003      	beq.n	810613c <HAL_TIM_Base_Start+0x4c>
 8106134:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8106138:	4293      	cmp	r3, r2
 810613a:	d107      	bne.n	810614c <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810613c:	6899      	ldr	r1, [r3, #8]
 810613e:	4a08      	ldr	r2, [pc, #32]	; (8106160 <HAL_TIM_Base_Start+0x70>)
 8106140:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106142:	2a06      	cmp	r2, #6
 8106144:	d006      	beq.n	8106154 <HAL_TIM_Base_Start+0x64>
 8106146:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 810614a:	d003      	beq.n	8106154 <HAL_TIM_Base_Start+0x64>
    __HAL_TIM_ENABLE(htim);
 810614c:	681a      	ldr	r2, [r3, #0]
 810614e:	f042 0201 	orr.w	r2, r2, #1
 8106152:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8106154:	2000      	movs	r0, #0
}
 8106156:	4770      	bx	lr
    return HAL_ERROR;
 8106158:	2001      	movs	r0, #1
 810615a:	4770      	bx	lr
 810615c:	40010000 	.word	0x40010000
 8106160:	00010007 	.word	0x00010007

08106164 <HAL_TIM_PWM_MspInit>:
 8106164:	4770      	bx	lr
	...

08106168 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106168:	4a30      	ldr	r2, [pc, #192]	; (810622c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 810616a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810616c:	4290      	cmp	r0, r2
 810616e:	d012      	beq.n	8106196 <TIM_Base_SetConfig+0x2e>
 8106170:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8106174:	d00f      	beq.n	8106196 <TIM_Base_SetConfig+0x2e>
 8106176:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 810617a:	4290      	cmp	r0, r2
 810617c:	d00b      	beq.n	8106196 <TIM_Base_SetConfig+0x2e>
 810617e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106182:	4290      	cmp	r0, r2
 8106184:	d007      	beq.n	8106196 <TIM_Base_SetConfig+0x2e>
 8106186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810618a:	4290      	cmp	r0, r2
 810618c:	d003      	beq.n	8106196 <TIM_Base_SetConfig+0x2e>
 810618e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8106192:	4290      	cmp	r0, r2
 8106194:	d119      	bne.n	81061ca <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8106196:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 810619c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810619e:	4a23      	ldr	r2, [pc, #140]	; (810622c <TIM_Base_SetConfig+0xc4>)
 81061a0:	4290      	cmp	r0, r2
 81061a2:	d01d      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 81061a8:	d01a      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061aa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 81061ae:	4290      	cmp	r0, r2
 81061b0:	d016      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061b6:	4290      	cmp	r0, r2
 81061b8:	d012      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061be:	4290      	cmp	r0, r2
 81061c0:	d00e      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 81061c6:	4290      	cmp	r0, r2
 81061c8:	d00a      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061ca:	4a19      	ldr	r2, [pc, #100]	; (8106230 <TIM_Base_SetConfig+0xc8>)
 81061cc:	4290      	cmp	r0, r2
 81061ce:	d007      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061d4:	4290      	cmp	r0, r2
 81061d6:	d003      	beq.n	81061e0 <TIM_Base_SetConfig+0x78>
 81061d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81061dc:	4290      	cmp	r0, r2
 81061de:	d103      	bne.n	81061e8 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81061e0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 81061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81061e6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81061e8:	694a      	ldr	r2, [r1, #20]
 81061ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81061ee:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 81061f0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 81061f2:	688b      	ldr	r3, [r1, #8]
 81061f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 81061f6:	680b      	ldr	r3, [r1, #0]
 81061f8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81061fa:	4b0c      	ldr	r3, [pc, #48]	; (810622c <TIM_Base_SetConfig+0xc4>)
 81061fc:	4298      	cmp	r0, r3
 81061fe:	d00f      	beq.n	8106220 <TIM_Base_SetConfig+0xb8>
 8106200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8106204:	4298      	cmp	r0, r3
 8106206:	d00b      	beq.n	8106220 <TIM_Base_SetConfig+0xb8>
 8106208:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 810620c:	4298      	cmp	r0, r3
 810620e:	d007      	beq.n	8106220 <TIM_Base_SetConfig+0xb8>
 8106210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8106214:	4298      	cmp	r0, r3
 8106216:	d003      	beq.n	8106220 <TIM_Base_SetConfig+0xb8>
 8106218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810621c:	4298      	cmp	r0, r3
 810621e:	d101      	bne.n	8106224 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8106220:	690b      	ldr	r3, [r1, #16]
 8106222:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8106224:	2301      	movs	r3, #1
 8106226:	6143      	str	r3, [r0, #20]
}
 8106228:	4770      	bx	lr
 810622a:	bf00      	nop
 810622c:	40010000 	.word	0x40010000
 8106230:	40014000 	.word	0x40014000

08106234 <HAL_TIM_Base_Init>:
{
 8106234:	b510      	push	{r4, lr}
  if (htim == NULL)
 8106236:	4604      	mov	r4, r0
 8106238:	b350      	cbz	r0, 8106290 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 810623a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 810623e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8106242:	b91b      	cbnz	r3, 810624c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8106244:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8106248:	f7fc fb2c 	bl	81028a4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 810624c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810624e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8106250:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106254:	1d21      	adds	r1, r4, #4
 8106256:	f7ff ff87 	bl	8106168 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810625a:	2301      	movs	r3, #1
 810625c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8106260:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106262:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8106266:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 810626a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 810626e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8106272:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810627a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 810627e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106282:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8106286:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 810628a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 810628e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8106290:	2001      	movs	r0, #1
 8106292:	e7fc      	b.n	810628e <HAL_TIM_Base_Init+0x5a>

08106294 <HAL_TIM_PWM_Init>:
{
 8106294:	b510      	push	{r4, lr}
  if (htim == NULL)
 8106296:	4604      	mov	r4, r0
 8106298:	b350      	cbz	r0, 81062f0 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 810629a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 810629e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 81062a2:	b91b      	cbnz	r3, 81062ac <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 81062a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 81062a8:	f7ff ff5c 	bl	8106164 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 81062ac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81062ae:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 81062b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81062b4:	1d21      	adds	r1, r4, #4
 81062b6:	f7ff ff57 	bl	8106168 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81062ba:	2301      	movs	r3, #1
 81062bc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 81062c0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81062c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 81062c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 81062ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 81062ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 81062d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81062d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81062da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 81062de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81062e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 81062e6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 81062ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 81062ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 81062f0:	2001      	movs	r0, #1
 81062f2:	e7fc      	b.n	81062ee <HAL_TIM_PWM_Init+0x5a>

081062f4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81062f4:	6a03      	ldr	r3, [r0, #32]
 81062f6:	f023 0310 	bic.w	r3, r3, #16
 81062fa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 81062fc:	6a03      	ldr	r3, [r0, #32]
{
 81062fe:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8106300:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8106302:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106304:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106306:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 810630a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810630e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106312:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8106314:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106318:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810631c:	4d16      	ldr	r5, [pc, #88]	; (8106378 <TIM_OC2_SetConfig+0x84>)
 810631e:	42a8      	cmp	r0, r5
 8106320:	d003      	beq.n	810632a <TIM_OC2_SetConfig+0x36>
 8106322:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106326:	42a8      	cmp	r0, r5
 8106328:	d10d      	bne.n	8106346 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810632a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 810632c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106330:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106334:	4d10      	ldr	r5, [pc, #64]	; (8106378 <TIM_OC2_SetConfig+0x84>)
 8106336:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8106338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810633c:	d00e      	beq.n	810635c <TIM_OC2_SetConfig+0x68>
 810633e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106342:	42a8      	cmp	r0, r5
 8106344:	d00a      	beq.n	810635c <TIM_OC2_SetConfig+0x68>
 8106346:	4d0d      	ldr	r5, [pc, #52]	; (810637c <TIM_OC2_SetConfig+0x88>)
 8106348:	42a8      	cmp	r0, r5
 810634a:	d007      	beq.n	810635c <TIM_OC2_SetConfig+0x68>
 810634c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106350:	42a8      	cmp	r0, r5
 8106352:	d003      	beq.n	810635c <TIM_OC2_SetConfig+0x68>
 8106354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106358:	42a8      	cmp	r0, r5
 810635a:	d106      	bne.n	810636a <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810635c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106360:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8106364:	4334      	orrs	r4, r6
 8106366:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 810636a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 810636c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 810636e:	684a      	ldr	r2, [r1, #4]
 8106370:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8106372:	6203      	str	r3, [r0, #32]
}
 8106374:	bd70      	pop	{r4, r5, r6, pc}
 8106376:	bf00      	nop
 8106378:	40010000 	.word	0x40010000
 810637c:	40014000 	.word	0x40014000

08106380 <HAL_TIM_PWM_ConfigChannel>:
{
 8106380:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8106382:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8106386:	2b01      	cmp	r3, #1
{
 8106388:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 810638a:	d074      	beq.n	8106476 <HAL_TIM_PWM_ConfigChannel+0xf6>
 810638c:	2301      	movs	r3, #1
  switch (Channel)
 810638e:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8106390:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8106394:	d04f      	beq.n	8106436 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8106396:	d809      	bhi.n	81063ac <HAL_TIM_PWM_ConfigChannel+0x2c>
 8106398:	2a04      	cmp	r2, #4
 810639a:	d02c      	beq.n	81063f6 <HAL_TIM_PWM_ConfigChannel+0x76>
 810639c:	2a08      	cmp	r2, #8
 810639e:	d03a      	beq.n	8106416 <HAL_TIM_PWM_ConfigChannel+0x96>
 81063a0:	b1c2      	cbz	r2, 81063d4 <HAL_TIM_PWM_ConfigChannel+0x54>
 81063a2:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 81063a4:	2300      	movs	r3, #0
 81063a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 81063aa:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 81063ac:	2a10      	cmp	r2, #16
 81063ae:	d052      	beq.n	8106456 <HAL_TIM_PWM_ConfigChannel+0xd6>
 81063b0:	2a14      	cmp	r2, #20
 81063b2:	d1f6      	bne.n	81063a2 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81063b4:	6800      	ldr	r0, [r0, #0]
 81063b6:	f7ff fe67 	bl	8106088 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81063ba:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81063bc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81063be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 81063c2:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81063c4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 81063c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81063ca:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81063cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 81063ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 81063d2:	e04e      	b.n	8106472 <HAL_TIM_PWM_ConfigChannel+0xf2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81063d4:	6800      	ldr	r0, [r0, #0]
 81063d6:	f7ff fd5f 	bl	8105e98 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81063da:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81063dc:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81063de:	f043 0308 	orr.w	r3, r3, #8
 81063e2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81063e4:	6983      	ldr	r3, [r0, #24]
 81063e6:	f023 0304 	bic.w	r3, r3, #4
 81063ea:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81063ec:	6983      	ldr	r3, [r0, #24]
 81063ee:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81063f0:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 81063f2:	2000      	movs	r0, #0
      break;
 81063f4:	e7d6      	b.n	81063a4 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81063f6:	6800      	ldr	r0, [r0, #0]
 81063f8:	f7ff ff7c 	bl	81062f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81063fc:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81063fe:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8106404:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106406:	6983      	ldr	r3, [r0, #24]
 8106408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810640c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810640e:	6983      	ldr	r3, [r0, #24]
 8106410:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8106414:	e7ec      	b.n	81063f0 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8106416:	6800      	ldr	r0, [r0, #0]
 8106418:	f7ff fd8a 	bl	8105f30 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810641c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810641e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106420:	f043 0308 	orr.w	r3, r3, #8
 8106424:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106426:	69c3      	ldr	r3, [r0, #28]
 8106428:	f023 0304 	bic.w	r3, r3, #4
 810642c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810642e:	69c3      	ldr	r3, [r0, #28]
 8106430:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106432:	61c3      	str	r3, [r0, #28]
      break;
 8106434:	e7dd      	b.n	81063f2 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8106436:	6800      	ldr	r0, [r0, #0]
 8106438:	f7ff fdbe 	bl	8105fb8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810643c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810643e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8106444:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8106446:	69c3      	ldr	r3, [r0, #28]
 8106448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810644c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810644e:	69c3      	ldr	r3, [r0, #28]
 8106450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8106454:	e7ed      	b.n	8106432 <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106456:	6800      	ldr	r0, [r0, #0]
 8106458:	f7ff fde2 	bl	8106020 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810645c:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810645e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106460:	f043 0308 	orr.w	r3, r3, #8
 8106464:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106466:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8106468:	f023 0304 	bic.w	r3, r3, #4
 810646c:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810646e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8106470:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106472:	6543      	str	r3, [r0, #84]	; 0x54
 8106474:	e7bd      	b.n	81063f2 <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 8106476:	2002      	movs	r0, #2
 8106478:	e797      	b.n	81063aa <HAL_TIM_PWM_ConfigChannel+0x2a>

0810647a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810647a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810647c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810647e:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106480:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106484:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8106488:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810648a:	6083      	str	r3, [r0, #8]
}
 810648c:	bd10      	pop	{r4, pc}
	...

08106490 <HAL_TIM_ConfigClockSource>:
{
 8106490:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8106492:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8106496:	2b01      	cmp	r3, #1
{
 8106498:	4604      	mov	r4, r0
 810649a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 810649e:	f000 80aa 	beq.w	81065f6 <HAL_TIM_ConfigClockSource+0x166>
 81064a2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 81064a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 81064a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 81064ac:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81064ae:	4b53      	ldr	r3, [pc, #332]	; (81065fc <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 81064b0:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81064b2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 81064b4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 81064b6:	680b      	ldr	r3, [r1, #0]
 81064b8:	2b70      	cmp	r3, #112	; 0x70
 81064ba:	d056      	beq.n	810656a <HAL_TIM_ConfigClockSource+0xda>
 81064bc:	d83c      	bhi.n	8106538 <HAL_TIM_ConfigClockSource+0xa8>
 81064be:	2b50      	cmp	r3, #80	; 0x50
 81064c0:	d067      	beq.n	8106592 <HAL_TIM_ConfigClockSource+0x102>
 81064c2:	d81d      	bhi.n	8106500 <HAL_TIM_ConfigClockSource+0x70>
 81064c4:	2b40      	cmp	r3, #64	; 0x40
 81064c6:	d07d      	beq.n	81065c4 <HAL_TIM_ConfigClockSource+0x134>
 81064c8:	d806      	bhi.n	81064d8 <HAL_TIM_ConfigClockSource+0x48>
 81064ca:	2b20      	cmp	r3, #32
 81064cc:	d00e      	beq.n	81064ec <HAL_TIM_ConfigClockSource+0x5c>
 81064ce:	d80b      	bhi.n	81064e8 <HAL_TIM_ConfigClockSource+0x58>
 81064d0:	f033 0210 	bics.w	r2, r3, #16
 81064d4:	d00a      	beq.n	81064ec <HAL_TIM_ConfigClockSource+0x5c>
 81064d6:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 81064d8:	2301      	movs	r3, #1
 81064da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 81064de:	2300      	movs	r3, #0
 81064e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 81064e4:	4610      	mov	r0, r2
 81064e6:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 81064e8:	2b30      	cmp	r3, #48	; 0x30
 81064ea:	d1f4      	bne.n	81064d6 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 81064ec:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 81064ee:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 81064f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81064f6:	431a      	orrs	r2, r3
 81064f8:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 81064fc:	6082      	str	r2, [r0, #8]
 81064fe:	e03d      	b.n	810657c <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
 8106500:	2b60      	cmp	r3, #96	; 0x60
 8106502:	d1e9      	bne.n	81064d8 <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106504:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8106506:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106508:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810650a:	f023 0310 	bic.w	r3, r3, #16
 810650e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106510:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8106512:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106514:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 810651c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106520:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8106524:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8106526:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8106528:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 810652a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106532:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8106536:	e020      	b.n	810657a <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8106538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810653c:	d020      	beq.n	8106580 <HAL_TIM_ConfigClockSource+0xf0>
 810653e:	d804      	bhi.n	810654a <HAL_TIM_ConfigClockSource+0xba>
  HAL_StatusTypeDef status = HAL_OK;
 8106540:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8106544:	bf18      	it	ne
 8106546:	2201      	movne	r2, #1
 8106548:	e7c6      	b.n	81064d8 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 810654a:	492d      	ldr	r1, [pc, #180]	; (8106600 <HAL_TIM_ConfigClockSource+0x170>)
 810654c:	428b      	cmp	r3, r1
 810654e:	d0cd      	beq.n	81064ec <HAL_TIM_ConfigClockSource+0x5c>
 8106550:	d805      	bhi.n	810655e <HAL_TIM_ConfigClockSource+0xce>
 8106552:	f023 0110 	bic.w	r1, r3, #16
 8106556:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 810655a:	d0c7      	beq.n	81064ec <HAL_TIM_ConfigClockSource+0x5c>
 810655c:	e7bc      	b.n	81064d8 <HAL_TIM_ConfigClockSource+0x48>
 810655e:	4929      	ldr	r1, [pc, #164]	; (8106604 <HAL_TIM_ConfigClockSource+0x174>)
 8106560:	428b      	cmp	r3, r1
 8106562:	d0c3      	beq.n	81064ec <HAL_TIM_ConfigClockSource+0x5c>
 8106564:	3110      	adds	r1, #16
 8106566:	428b      	cmp	r3, r1
 8106568:	e7f7      	b.n	810655a <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 810656a:	68cb      	ldr	r3, [r1, #12]
 810656c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8106570:	f7ff ff83 	bl	810647a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8106574:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8106576:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810657a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 810657c:	2200      	movs	r2, #0
}
 810657e:	e7ab      	b.n	81064d8 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
 8106580:	68cb      	ldr	r3, [r1, #12]
 8106582:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8106586:	f7ff ff78 	bl	810647a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810658a:	6883      	ldr	r3, [r0, #8]
 810658c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8106590:	e7f3      	b.n	810657a <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 8106592:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106594:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8106596:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106598:	6a03      	ldr	r3, [r0, #32]
 810659a:	f023 0301 	bic.w	r3, r3, #1
 810659e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 81065a0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81065a2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81065a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81065aa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 81065ae:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 81065b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 81065b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 81065b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 81065b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81065be:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 81065c2:	e7da      	b.n	810657a <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 81065c4:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 81065c6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 81065c8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81065ca:	6a03      	ldr	r3, [r0, #32]
 81065cc:	f023 0301 	bic.w	r3, r3, #1
 81065d0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 81065d2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81065d4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81065d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81065dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 81065e0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 81065e2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 81065e4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 81065e6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 81065e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81065ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81065f0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 81065f4:	e7c1      	b.n	810657a <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 81065f6:	461a      	mov	r2, r3
 81065f8:	e774      	b.n	81064e4 <HAL_TIM_ConfigClockSource+0x54>
 81065fa:	bf00      	nop
 81065fc:	ffce0088 	.word	0xffce0088
 8106600:	00100020 	.word	0x00100020
 8106604:	00100030 	.word	0x00100030

08106608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106608:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810660a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 810660e:	2b01      	cmp	r3, #1
 8106610:	f04f 0302 	mov.w	r3, #2
 8106614:	d03a      	beq.n	810668c <HAL_TIMEx_MasterConfigSynchronization+0x84>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106616:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810661a:	4d1d      	ldr	r5, [pc, #116]	; (8106690 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 810661c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810661e:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8106620:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8106622:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106624:	d002      	beq.n	810662c <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8106626:	4e1b      	ldr	r6, [pc, #108]	; (8106694 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8106628:	42b3      	cmp	r3, r6
 810662a:	d103      	bne.n	8106634 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810662c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 810662e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106632:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106634:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8106636:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810663a:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810663c:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 810663e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106640:	d019      	beq.n	8106676 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106646:	d016      	beq.n	8106676 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106648:	4a13      	ldr	r2, [pc, #76]	; (8106698 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 810664a:	4293      	cmp	r3, r2
 810664c:	d013      	beq.n	8106676 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 810664e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106652:	4293      	cmp	r3, r2
 8106654:	d00f      	beq.n	8106676 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810665a:	4293      	cmp	r3, r2
 810665c:	d00b      	beq.n	8106676 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 810665e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8106662:	4293      	cmp	r3, r2
 8106664:	d007      	beq.n	8106676 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8106666:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 810666a:	4293      	cmp	r3, r2
 810666c:	d003      	beq.n	8106676 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 810666e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8106672:	4293      	cmp	r3, r2
 8106674:	d104      	bne.n	8106680 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106676:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106678:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810667c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810667e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106680:	2301      	movs	r3, #1
 8106682:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106686:	2300      	movs	r3, #0
 8106688:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 810668c:	4618      	mov	r0, r3

  return HAL_OK;
}
 810668e:	bd70      	pop	{r4, r5, r6, pc}
 8106690:	40010000 	.word	0x40010000
 8106694:	40010400 	.word	0x40010400
 8106698:	40000400 	.word	0x40000400

0810669c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810669c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810669e:	e852 3f00 	ldrex	r3, [r2]
 81066a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066a6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 81066aa:	6802      	ldr	r2, [r0, #0]
 81066ac:	2900      	cmp	r1, #0
 81066ae:	d1f5      	bne.n	810669c <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066b0:	f102 0308 	add.w	r3, r2, #8
 81066b4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 81066b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066bc:	f102 0c08 	add.w	ip, r2, #8
 81066c0:	e84c 3100 	strex	r1, r3, [ip]
 81066c4:	2900      	cmp	r1, #0
 81066c6:	d1f3      	bne.n	81066b0 <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81066c8:	2320      	movs	r3, #32
 81066ca:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 81066ce:	4770      	bx	lr

081066d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81066d0:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81066d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066d4:	e852 3f00 	ldrex	r3, [r2]
 81066d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066dc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 81066e0:	6802      	ldr	r2, [r0, #0]
 81066e2:	2900      	cmp	r1, #0
 81066e4:	d1f5      	bne.n	81066d2 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81066e6:	4c0f      	ldr	r4, [pc, #60]	; (8106724 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81066e8:	f102 0308 	add.w	r3, r2, #8
 81066ec:	e853 3f00 	ldrex	r3, [r3]
 81066f0:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066f2:	f102 0c08 	add.w	ip, r2, #8
 81066f6:	e84c 3100 	strex	r1, r3, [ip]
 81066fa:	2900      	cmp	r1, #0
 81066fc:	d1f4      	bne.n	81066e8 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81066fe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8106700:	2b01      	cmp	r3, #1
 8106702:	d107      	bne.n	8106714 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106704:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106708:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810670c:	e842 3100 	strex	r1, r3, [r2]
 8106710:	2900      	cmp	r1, #0
 8106712:	d1f7      	bne.n	8106704 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106714:	2320      	movs	r3, #32
 8106716:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810671a:	2300      	movs	r3, #0
 810671c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810671e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8106720:	bd10      	pop	{r4, pc}
 8106722:	bf00      	nop
 8106724:	effffffe 	.word	0xeffffffe

08106728 <HAL_UART_Transmit_DMA>:
{
 8106728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810672a:	4604      	mov	r4, r0
 810672c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 810672e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8106732:	2d20      	cmp	r5, #32
 8106734:	d132      	bne.n	810679c <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 8106736:	b1f1      	cbz	r1, 8106776 <HAL_UART_Transmit_DMA+0x4e>
 8106738:	b1ea      	cbz	r2, 8106776 <HAL_UART_Transmit_DMA+0x4e>
    if (huart->hdmatx != NULL)
 810673a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    huart->TxXferCount = Size;
 810673c:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->TxXferSize  = Size;
 8106740:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106744:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106746:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106748:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    huart->pTxBuffPtr  = pData;
 810674c:	6521      	str	r1, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810674e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8106752:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 8106754:	b188      	cbz	r0, 810677a <HAL_UART_Transmit_DMA+0x52>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8106756:	4f12      	ldr	r7, [pc, #72]	; (81067a0 <HAL_UART_Transmit_DMA+0x78>)
 8106758:	63c7      	str	r7, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810675a:	4f12      	ldr	r7, [pc, #72]	; (81067a4 <HAL_UART_Transmit_DMA+0x7c>)
 810675c:	6407      	str	r7, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810675e:	4f12      	ldr	r7, [pc, #72]	; (81067a8 <HAL_UART_Transmit_DMA+0x80>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8106760:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8106762:	e9c0 7613 	strd	r7, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8106766:	f7fd fa91 	bl	8103c8c <HAL_DMA_Start_IT>
 810676a:	b130      	cbz	r0, 810677a <HAL_UART_Transmit_DMA+0x52>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810676c:	2310      	movs	r3, #16
 810676e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8106772:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
      return HAL_ERROR;
 8106776:	2001      	movs	r0, #1
 8106778:	e00f      	b.n	810679a <HAL_UART_Transmit_DMA+0x72>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810677a:	6823      	ldr	r3, [r4, #0]
 810677c:	2240      	movs	r2, #64	; 0x40
 810677e:	621a      	str	r2, [r3, #32]
 8106780:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106782:	f102 0308 	add.w	r3, r2, #8
 8106786:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810678e:	f102 0108 	add.w	r1, r2, #8
 8106792:	e841 3000 	strex	r0, r3, [r1]
 8106796:	2800      	cmp	r0, #0
 8106798:	d1f3      	bne.n	8106782 <HAL_UART_Transmit_DMA+0x5a>
}
 810679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 810679c:	2002      	movs	r0, #2
 810679e:	e7fc      	b.n	810679a <HAL_UART_Transmit_DMA+0x72>
 81067a0:	081067af 	.word	0x081067af
 81067a4:	081067f7 	.word	0x081067f7
 81067a8:	08106803 	.word	0x08106803

081067ac <HAL_UART_TxCpltCallback>:
 81067ac:	4770      	bx	lr

081067ae <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81067ae:	69c2      	ldr	r2, [r0, #28]
 81067b0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 81067b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81067b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81067b8:	d018      	beq.n	81067ec <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 81067ba:	2200      	movs	r2, #0
 81067bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81067c0:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81067c2:	f101 0208 	add.w	r2, r1, #8
 81067c6:	e852 2f00 	ldrex	r2, [r2]
 81067ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81067ce:	3108      	adds	r1, #8
 81067d0:	e841 2000 	strex	r0, r2, [r1]
   return(result);
 81067d4:	681a      	ldr	r2, [r3, #0]
 81067d6:	2800      	cmp	r0, #0
 81067d8:	d1f2      	bne.n	81067c0 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81067da:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81067de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81067e2:	e842 3100 	strex	r1, r3, [r2]
 81067e6:	2900      	cmp	r1, #0
 81067e8:	d1f7      	bne.n	81067da <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 81067ea:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 81067ec:	4618      	mov	r0, r3
 81067ee:	f7ff ffdd 	bl	81067ac <HAL_UART_TxCpltCallback>
}
 81067f2:	e7fa      	b.n	81067ea <UART_DMATransmitCplt+0x3c>

081067f4 <HAL_UART_TxHalfCpltCallback>:
 81067f4:	4770      	bx	lr

081067f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81067f6:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 81067f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 81067fa:	f7ff fffb 	bl	81067f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81067fe:	bd08      	pop	{r3, pc}

08106800 <HAL_UART_ErrorCallback>:
 8106800:	4770      	bx	lr

08106802 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8106802:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8106804:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8106806:	6804      	ldr	r4, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8106808:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810680c:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8106810:	68a2      	ldr	r2, [r4, #8]
 8106812:	0612      	lsls	r2, r2, #24
 8106814:	d506      	bpl.n	8106824 <UART_DMAError+0x22>
 8106816:	2b21      	cmp	r3, #33	; 0x21
 8106818:	d104      	bne.n	8106824 <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810681a:	2300      	movs	r3, #0
 810681c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8106820:	f7ff ff3c 	bl	810669c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8106824:	68a3      	ldr	r3, [r4, #8]
 8106826:	065b      	lsls	r3, r3, #25
 8106828:	d506      	bpl.n	8106838 <UART_DMAError+0x36>
 810682a:	2d22      	cmp	r5, #34	; 0x22
 810682c:	d104      	bne.n	8106838 <UART_DMAError+0x36>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810682e:	2300      	movs	r3, #0
 8106830:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8106834:	f7ff ff4c 	bl	81066d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8106838:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 810683c:	f043 0310 	orr.w	r3, r3, #16
 8106840:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8106844:	f7ff ffdc 	bl	8106800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106848:	bd38      	pop	{r3, r4, r5, pc}

0810684a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810684a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810684c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 810684e:	2300      	movs	r3, #0
 8106850:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8106854:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8106858:	f7ff ffd2 	bl	8106800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810685c:	bd08      	pop	{r3, pc}

0810685e <HAL_UARTEx_RxEventCallback>:
}
 810685e:	4770      	bx	lr

08106860 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8106860:	6803      	ldr	r3, [r0, #0]
 8106862:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8106864:	681a      	ldr	r2, [r3, #0]
{
 8106866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 810686a:	f640 060f 	movw	r6, #2063	; 0x80f
 810686e:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8106870:	689d      	ldr	r5, [r3, #8]
{
 8106872:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8106874:	d110      	bne.n	8106898 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8106876:	068e      	lsls	r6, r1, #26
 8106878:	f140 8097 	bpl.w	81069aa <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810687c:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8106880:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8106884:	433e      	orrs	r6, r7
 8106886:	f000 8090 	beq.w	81069aa <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 810688a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 810688c:	2b00      	cmp	r3, #0
 810688e:	f000 8085 	beq.w	810699c <HAL_UART_IRQHandler+0x13c>
}
 8106892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8106896:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8106898:	4eaa      	ldr	r6, [pc, #680]	; (8106b44 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810689a:	48ab      	ldr	r0, [pc, #684]	; (8106b48 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810689c:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810689e:	4010      	ands	r0, r2
 81068a0:	4330      	orrs	r0, r6
 81068a2:	f000 8082 	beq.w	81069aa <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81068a6:	07cf      	lsls	r7, r1, #31
 81068a8:	d509      	bpl.n	81068be <HAL_UART_IRQHandler+0x5e>
 81068aa:	05d0      	lsls	r0, r2, #23
 81068ac:	d507      	bpl.n	81068be <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81068ae:	2001      	movs	r0, #1
 81068b0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81068b2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 81068b6:	f040 0001 	orr.w	r0, r0, #1
 81068ba:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81068be:	078f      	lsls	r7, r1, #30
 81068c0:	d509      	bpl.n	81068d6 <HAL_UART_IRQHandler+0x76>
 81068c2:	07e8      	lsls	r0, r5, #31
 81068c4:	d507      	bpl.n	81068d6 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81068c6:	2002      	movs	r0, #2
 81068c8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 81068ca:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 81068ce:	f040 0004 	orr.w	r0, r0, #4
 81068d2:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81068d6:	074f      	lsls	r7, r1, #29
 81068d8:	d509      	bpl.n	81068ee <HAL_UART_IRQHandler+0x8e>
 81068da:	07e8      	lsls	r0, r5, #31
 81068dc:	d507      	bpl.n	81068ee <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81068de:	2004      	movs	r0, #4
 81068e0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81068e2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 81068e6:	f040 0002 	orr.w	r0, r0, #2
 81068ea:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 81068ee:	070f      	lsls	r7, r1, #28
 81068f0:	d50b      	bpl.n	810690a <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81068f2:	f002 0020 	and.w	r0, r2, #32
 81068f6:	4330      	orrs	r0, r6
 81068f8:	d007      	beq.n	810690a <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81068fa:	2008      	movs	r0, #8
 81068fc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81068fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8106902:	f040 0008 	orr.w	r0, r0, #8
 8106906:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810690a:	050e      	lsls	r6, r1, #20
 810690c:	d50a      	bpl.n	8106924 <HAL_UART_IRQHandler+0xc4>
 810690e:	0150      	lsls	r0, r2, #5
 8106910:	d508      	bpl.n	8106924 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106912:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8106916:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8106918:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 810691c:	f043 0320 	orr.w	r3, r3, #32
 8106920:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8106924:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8106928:	2b00      	cmp	r3, #0
 810692a:	d037      	beq.n	810699c <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810692c:	068b      	lsls	r3, r1, #26
 810692e:	d509      	bpl.n	8106944 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106930:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8106934:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8106938:	432a      	orrs	r2, r5
 810693a:	d003      	beq.n	8106944 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 810693c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 810693e:	b10b      	cbz	r3, 8106944 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 8106940:	4620      	mov	r0, r4
 8106942:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106944:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8106946:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810694a:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810694c:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106954:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8106958:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810695a:	d021      	beq.n	81069a0 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 810695c:	f7ff feb8 	bl	81066d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8106960:	68b3      	ldr	r3, [r6, #8]
 8106962:	065f      	lsls	r7, r3, #25
 8106964:	d517      	bpl.n	8106996 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106966:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106968:	f102 0308 	add.w	r3, r2, #8
 810696c:	e853 3f00 	ldrex	r3, [r3]
 8106970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106974:	3208      	adds	r2, #8
 8106976:	e842 3100 	strex	r1, r3, [r2]
 810697a:	2900      	cmp	r1, #0
 810697c:	d1f3      	bne.n	8106966 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 810697e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8106982:	b140      	cbz	r0, 8106996 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8106984:	4b71      	ldr	r3, [pc, #452]	; (8106b4c <HAL_UART_IRQHandler+0x2ec>)
 8106986:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8106988:	f7fd fc40 	bl	810420c <HAL_DMA_Abort_IT>
 810698c:	b130      	cbz	r0, 810699c <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810698e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8106992:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8106994:	e77d      	b.n	8106892 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8106996:	4620      	mov	r0, r4
 8106998:	f7ff ff32 	bl	8106800 <HAL_UART_ErrorCallback>
}
 810699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 81069a0:	f7ff ff2e 	bl	8106800 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81069a4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 81069a8:	e7f8      	b.n	810699c <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81069aa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 81069ac:	2801      	cmp	r0, #1
 81069ae:	f040 80ae 	bne.w	8106b0e <HAL_UART_IRQHandler+0x2ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 81069b2:	06ce      	lsls	r6, r1, #27
 81069b4:	f140 80ab 	bpl.w	8106b0e <HAL_UART_IRQHandler+0x2ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 81069b8:	06d0      	lsls	r0, r2, #27
 81069ba:	f140 80a8 	bpl.w	8106b0e <HAL_UART_IRQHandler+0x2ae>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81069be:	2210      	movs	r2, #16
 81069c0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81069c2:	689a      	ldr	r2, [r3, #8]
 81069c4:	0652      	lsls	r2, r2, #25
 81069c6:	d56e      	bpl.n	8106aa6 <HAL_UART_IRQHandler+0x246>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 81069c8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 81069cc:	4860      	ldr	r0, [pc, #384]	; (8106b50 <HAL_UART_IRQHandler+0x2f0>)
 81069ce:	680a      	ldr	r2, [r1, #0]
 81069d0:	4282      	cmp	r2, r0
 81069d2:	d01e      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069d4:	3018      	adds	r0, #24
 81069d6:	4282      	cmp	r2, r0
 81069d8:	d01b      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069da:	3018      	adds	r0, #24
 81069dc:	4282      	cmp	r2, r0
 81069de:	d018      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069e0:	3018      	adds	r0, #24
 81069e2:	4282      	cmp	r2, r0
 81069e4:	d015      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069e6:	3018      	adds	r0, #24
 81069e8:	4282      	cmp	r2, r0
 81069ea:	d012      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069ec:	3018      	adds	r0, #24
 81069ee:	4282      	cmp	r2, r0
 81069f0:	d00f      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069f2:	3018      	adds	r0, #24
 81069f4:	4282      	cmp	r2, r0
 81069f6:	d00c      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069f8:	3018      	adds	r0, #24
 81069fa:	4282      	cmp	r2, r0
 81069fc:	d009      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 81069fe:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8106a02:	4282      	cmp	r2, r0
 8106a04:	d005      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 8106a06:	3018      	adds	r0, #24
 8106a08:	4282      	cmp	r2, r0
 8106a0a:	d002      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 8106a0c:	3018      	adds	r0, #24
 8106a0e:	4282      	cmp	r2, r0
 8106a10:	d0ff      	beq.n	8106a12 <HAL_UART_IRQHandler+0x1b2>
 8106a12:	6852      	ldr	r2, [r2, #4]
 8106a14:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8106a16:	2a00      	cmp	r2, #0
 8106a18:	d0c0      	beq.n	810699c <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8106a1a:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8106a1e:	4290      	cmp	r0, r2
 8106a20:	d9bc      	bls.n	810699c <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 8106a22:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8106a26:	69ca      	ldr	r2, [r1, #28]
 8106a28:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8106a2c:	d02f      	beq.n	8106a8e <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a2e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8106a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a36:	e843 2100 	strex	r1, r2, [r3]
 8106a3a:	2900      	cmp	r1, #0
 8106a3c:	d1f7      	bne.n	8106a2e <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a3e:	f103 0208 	add.w	r2, r3, #8
 8106a42:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106a46:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a4a:	f103 0008 	add.w	r0, r3, #8
 8106a4e:	e840 2100 	strex	r1, r2, [r0]
 8106a52:	2900      	cmp	r1, #0
 8106a54:	d1f3      	bne.n	8106a3e <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a56:	f103 0208 	add.w	r2, r3, #8
 8106a5a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a62:	f103 0008 	add.w	r0, r3, #8
 8106a66:	e840 2100 	strex	r1, r2, [r0]
 8106a6a:	2900      	cmp	r1, #0
 8106a6c:	d1f3      	bne.n	8106a56 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 8106a6e:	2220      	movs	r2, #32
 8106a70:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106a74:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106a76:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106a7a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106a7e:	e843 2100 	strex	r1, r2, [r3]
 8106a82:	2900      	cmp	r1, #0
 8106a84:	d1f7      	bne.n	8106a76 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8106a86:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8106a8a:	f7fd fa19 	bl	8103ec0 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8106a8e:	2302      	movs	r3, #2
 8106a90:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8106a92:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8106a96:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8106a9a:	1ac9      	subs	r1, r1, r3
 8106a9c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8106a9e:	4620      	mov	r0, r4
 8106aa0:	f7ff fedd 	bl	810685e <HAL_UARTEx_RxEventCallback>
 8106aa4:	e77a      	b.n	810699c <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106aa6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8106aaa:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106aae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8106ab2:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106ab4:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8106ab6:	2800      	cmp	r0, #0
 8106ab8:	f43f af70 	beq.w	810699c <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106abc:	1a89      	subs	r1, r1, r2
 8106abe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8106ac0:	2900      	cmp	r1, #0
 8106ac2:	f43f af6b 	beq.w	810699c <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ac6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106aca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ace:	e843 2000 	strex	r0, r2, [r3]
 8106ad2:	2800      	cmp	r0, #0
 8106ad4:	d1f7      	bne.n	8106ac6 <HAL_UART_IRQHandler+0x266>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106ad6:	4d1f      	ldr	r5, [pc, #124]	; (8106b54 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ad8:	f103 0208 	add.w	r2, r3, #8
 8106adc:	e852 2f00 	ldrex	r2, [r2]
 8106ae0:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ae2:	f103 0608 	add.w	r6, r3, #8
 8106ae6:	e846 2000 	strex	r0, r2, [r6]
 8106aea:	2800      	cmp	r0, #0
 8106aec:	d1f4      	bne.n	8106ad8 <HAL_UART_IRQHandler+0x278>
        huart->RxState = HAL_UART_STATE_READY;
 8106aee:	2220      	movs	r2, #32
 8106af0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8106af4:	6760      	str	r0, [r4, #116]	; 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106af6:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106af8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106afc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106b00:	e843 2000 	strex	r0, r2, [r3]
 8106b04:	2800      	cmp	r0, #0
 8106b06:	d1f7      	bne.n	8106af8 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8106b08:	2302      	movs	r3, #2
 8106b0a:	6723      	str	r3, [r4, #112]	; 0x70
 8106b0c:	e7c7      	b.n	8106a9e <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8106b0e:	02cf      	lsls	r7, r1, #11
 8106b10:	d509      	bpl.n	8106b26 <HAL_UART_IRQHandler+0x2c6>
 8106b12:	026e      	lsls	r6, r5, #9
 8106b14:	d507      	bpl.n	8106b26 <HAL_UART_IRQHandler+0x2c6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106b16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8106b1a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106b1c:	621a      	str	r2, [r3, #32]
}
 8106b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8106b22:	f000 bb4d 	b.w	81071c0 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8106b26:	0608      	lsls	r0, r1, #24
 8106b28:	d516      	bpl.n	8106b58 <HAL_UART_IRQHandler+0x2f8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8106b2a:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8106b2e:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 8106b32:	4328      	orrs	r0, r5
 8106b34:	d010      	beq.n	8106b58 <HAL_UART_IRQHandler+0x2f8>
    if (huart->TxISR != NULL)
 8106b36:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8106b38:	2b00      	cmp	r3, #0
 8106b3a:	f43f af2f 	beq.w	810699c <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 8106b3e:	4620      	mov	r0, r4
 8106b40:	e6a7      	b.n	8106892 <HAL_UART_IRQHandler+0x32>
 8106b42:	bf00      	nop
 8106b44:	10000001 	.word	0x10000001
 8106b48:	04000120 	.word	0x04000120
 8106b4c:	0810684b 	.word	0x0810684b
 8106b50:	40020010 	.word	0x40020010
 8106b54:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8106b58:	064f      	lsls	r7, r1, #25
 8106b5a:	d511      	bpl.n	8106b80 <HAL_UART_IRQHandler+0x320>
 8106b5c:	0656      	lsls	r6, r2, #25
 8106b5e:	d50f      	bpl.n	8106b80 <HAL_UART_IRQHandler+0x320>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106b60:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8106b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106b68:	e843 2100 	strex	r1, r2, [r3]
 8106b6c:	2900      	cmp	r1, #0
 8106b6e:	d1f7      	bne.n	8106b60 <HAL_UART_IRQHandler+0x300>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8106b70:	2320      	movs	r3, #32
 8106b72:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8106b76:	67a1      	str	r1, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8106b78:	4620      	mov	r0, r4
 8106b7a:	f7ff fe17 	bl	81067ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106b7e:	e70d      	b.n	810699c <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8106b80:	020d      	lsls	r5, r1, #8
 8106b82:	d506      	bpl.n	8106b92 <HAL_UART_IRQHandler+0x332>
 8106b84:	0050      	lsls	r0, r2, #1
 8106b86:	d504      	bpl.n	8106b92 <HAL_UART_IRQHandler+0x332>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106b88:	4620      	mov	r0, r4
}
 8106b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106b8e:	f000 bb19 	b.w	81071c4 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8106b92:	01cb      	lsls	r3, r1, #7
 8106b94:	f57f af02 	bpl.w	810699c <HAL_UART_IRQHandler+0x13c>
 8106b98:	2a00      	cmp	r2, #0
 8106b9a:	f6bf aeff 	bge.w	810699c <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106b9e:	4620      	mov	r0, r4
}
 8106ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106ba4:	f000 bb0d 	b.w	81071c2 <HAL_UARTEx_RxFifoFullCallback>

08106ba8 <UART_SetConfig>:
{
 8106ba8:	b530      	push	{r4, r5, lr}
 8106baa:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8106bac:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106bae:	6921      	ldr	r1, [r4, #16]
 8106bb0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106bb2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106bb4:	69c0      	ldr	r0, [r0, #28]
 8106bb6:	430a      	orrs	r2, r1
 8106bb8:	6961      	ldr	r1, [r4, #20]
 8106bba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106bbc:	4997      	ldr	r1, [pc, #604]	; (8106e1c <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106bbe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106bc0:	4029      	ands	r1, r5
 8106bc2:	430a      	orrs	r2, r1
 8106bc4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106bc6:	685a      	ldr	r2, [r3, #4]
 8106bc8:	68e1      	ldr	r1, [r4, #12]
 8106bca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8106bce:	430a      	orrs	r2, r1
 8106bd0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106bd2:	4a93      	ldr	r2, [pc, #588]	; (8106e20 <UART_SetConfig+0x278>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106bd4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106bd6:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8106bd8:	bf1c      	itt	ne
 8106bda:	6a22      	ldrne	r2, [r4, #32]
 8106bdc:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106bde:	689a      	ldr	r2, [r3, #8]
 8106be0:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8106be4:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8106be8:	430a      	orrs	r2, r1
 8106bea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106bee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8106bf0:	f022 020f 	bic.w	r2, r2, #15
 8106bf4:	430a      	orrs	r2, r1
 8106bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106bf8:	4a8a      	ldr	r2, [pc, #552]	; (8106e24 <UART_SetConfig+0x27c>)
 8106bfa:	4293      	cmp	r3, r2
{
 8106bfc:	b087      	sub	sp, #28
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106bfe:	d11b      	bne.n	8106c38 <UART_SetConfig+0x90>
 8106c00:	4b89      	ldr	r3, [pc, #548]	; (8106e28 <UART_SetConfig+0x280>)
 8106c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106c08:	2b28      	cmp	r3, #40	; 0x28
 8106c0a:	d86c      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106c0c:	4a87      	ldr	r2, [pc, #540]	; (8106e2c <UART_SetConfig+0x284>)
 8106c0e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106c10:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8106c14:	f040 8132 	bne.w	8106e7c <UART_SetConfig+0x2d4>
    switch (clocksource)
 8106c18:	2b08      	cmp	r3, #8
 8106c1a:	f200 80c0 	bhi.w	8106d9e <UART_SetConfig+0x1f6>
 8106c1e:	2b08      	cmp	r3, #8
 8106c20:	d861      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106c22:	e8df f013 	tbh	[pc, r3, lsl #1]
 8106c26:	00e7      	.short	0x00e7
 8106c28:	006000ec 	.word	0x006000ec
 8106c2c:	00ef0060 	.word	0x00ef0060
 8106c30:	00600060 	.word	0x00600060
 8106c34:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106c38:	4a7d      	ldr	r2, [pc, #500]	; (8106e30 <UART_SetConfig+0x288>)
 8106c3a:	4293      	cmp	r3, r2
 8106c3c:	d107      	bne.n	8106c4e <UART_SetConfig+0xa6>
 8106c3e:	4b7a      	ldr	r3, [pc, #488]	; (8106e28 <UART_SetConfig+0x280>)
 8106c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c42:	f003 0307 	and.w	r3, r3, #7
 8106c46:	2b05      	cmp	r3, #5
 8106c48:	d84d      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106c4a:	4a7a      	ldr	r2, [pc, #488]	; (8106e34 <UART_SetConfig+0x28c>)
 8106c4c:	e7df      	b.n	8106c0e <UART_SetConfig+0x66>
 8106c4e:	4a7a      	ldr	r2, [pc, #488]	; (8106e38 <UART_SetConfig+0x290>)
 8106c50:	4293      	cmp	r3, r2
 8106c52:	d107      	bne.n	8106c64 <UART_SetConfig+0xbc>
 8106c54:	4b74      	ldr	r3, [pc, #464]	; (8106e28 <UART_SetConfig+0x280>)
 8106c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c58:	f003 0307 	and.w	r3, r3, #7
 8106c5c:	2b05      	cmp	r3, #5
 8106c5e:	d842      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106c60:	4a76      	ldr	r2, [pc, #472]	; (8106e3c <UART_SetConfig+0x294>)
 8106c62:	e7d4      	b.n	8106c0e <UART_SetConfig+0x66>
 8106c64:	4a76      	ldr	r2, [pc, #472]	; (8106e40 <UART_SetConfig+0x298>)
 8106c66:	4293      	cmp	r3, r2
 8106c68:	d107      	bne.n	8106c7a <UART_SetConfig+0xd2>
 8106c6a:	4b6f      	ldr	r3, [pc, #444]	; (8106e28 <UART_SetConfig+0x280>)
 8106c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c6e:	f003 0307 	and.w	r3, r3, #7
 8106c72:	2b05      	cmp	r3, #5
 8106c74:	d837      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106c76:	4a73      	ldr	r2, [pc, #460]	; (8106e44 <UART_SetConfig+0x29c>)
 8106c78:	e7c9      	b.n	8106c0e <UART_SetConfig+0x66>
 8106c7a:	4a73      	ldr	r2, [pc, #460]	; (8106e48 <UART_SetConfig+0x2a0>)
 8106c7c:	4293      	cmp	r3, r2
 8106c7e:	d107      	bne.n	8106c90 <UART_SetConfig+0xe8>
 8106c80:	4b69      	ldr	r3, [pc, #420]	; (8106e28 <UART_SetConfig+0x280>)
 8106c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c84:	f003 0307 	and.w	r3, r3, #7
 8106c88:	2b05      	cmp	r3, #5
 8106c8a:	d82c      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106c8c:	4a6f      	ldr	r2, [pc, #444]	; (8106e4c <UART_SetConfig+0x2a4>)
 8106c8e:	e7be      	b.n	8106c0e <UART_SetConfig+0x66>
 8106c90:	4a6f      	ldr	r2, [pc, #444]	; (8106e50 <UART_SetConfig+0x2a8>)
 8106c92:	4293      	cmp	r3, r2
 8106c94:	d107      	bne.n	8106ca6 <UART_SetConfig+0xfe>
 8106c96:	4b64      	ldr	r3, [pc, #400]	; (8106e28 <UART_SetConfig+0x280>)
 8106c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106c9e:	2b28      	cmp	r3, #40	; 0x28
 8106ca0:	d821      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106ca2:	4a6c      	ldr	r2, [pc, #432]	; (8106e54 <UART_SetConfig+0x2ac>)
 8106ca4:	e7b3      	b.n	8106c0e <UART_SetConfig+0x66>
 8106ca6:	4a6c      	ldr	r2, [pc, #432]	; (8106e58 <UART_SetConfig+0x2b0>)
 8106ca8:	4293      	cmp	r3, r2
 8106caa:	d107      	bne.n	8106cbc <UART_SetConfig+0x114>
 8106cac:	4b5e      	ldr	r3, [pc, #376]	; (8106e28 <UART_SetConfig+0x280>)
 8106cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cb0:	f003 0307 	and.w	r3, r3, #7
 8106cb4:	2b05      	cmp	r3, #5
 8106cb6:	d816      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106cb8:	4a68      	ldr	r2, [pc, #416]	; (8106e5c <UART_SetConfig+0x2b4>)
 8106cba:	e7a8      	b.n	8106c0e <UART_SetConfig+0x66>
 8106cbc:	4a68      	ldr	r2, [pc, #416]	; (8106e60 <UART_SetConfig+0x2b8>)
 8106cbe:	4293      	cmp	r3, r2
 8106cc0:	d107      	bne.n	8106cd2 <UART_SetConfig+0x12a>
 8106cc2:	4b59      	ldr	r3, [pc, #356]	; (8106e28 <UART_SetConfig+0x280>)
 8106cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106cc6:	f003 0307 	and.w	r3, r3, #7
 8106cca:	2b05      	cmp	r3, #5
 8106ccc:	d80b      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106cce:	4a65      	ldr	r2, [pc, #404]	; (8106e64 <UART_SetConfig+0x2bc>)
 8106cd0:	e79d      	b.n	8106c0e <UART_SetConfig+0x66>
 8106cd2:	4a53      	ldr	r2, [pc, #332]	; (8106e20 <UART_SetConfig+0x278>)
 8106cd4:	4293      	cmp	r3, r2
 8106cd6:	d106      	bne.n	8106ce6 <UART_SetConfig+0x13e>
 8106cd8:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8106cdc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8106cde:	f003 0307 	and.w	r3, r3, #7
 8106ce2:	2b05      	cmp	r3, #5
 8106ce4:	d901      	bls.n	8106cea <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106ce6:	2001      	movs	r0, #1
 8106ce8:	e00e      	b.n	8106d08 <UART_SetConfig+0x160>
 8106cea:	495f      	ldr	r1, [pc, #380]	; (8106e68 <UART_SetConfig+0x2c0>)
 8106cec:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8106cee:	2b10      	cmp	r3, #16
 8106cf0:	d023      	beq.n	8106d3a <UART_SetConfig+0x192>
 8106cf2:	d811      	bhi.n	8106d18 <UART_SetConfig+0x170>
 8106cf4:	2b04      	cmp	r3, #4
 8106cf6:	d016      	beq.n	8106d26 <UART_SetConfig+0x17e>
 8106cf8:	2b08      	cmp	r3, #8
 8106cfa:	d019      	beq.n	8106d30 <UART_SetConfig+0x188>
 8106cfc:	2b02      	cmp	r3, #2
 8106cfe:	d1f2      	bne.n	8106ce6 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106d00:	f7fe fd3e 	bl	8105780 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8106d04:	bb10      	cbnz	r0, 8106d4c <UART_SetConfig+0x1a4>
 8106d06:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8106d08:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8106d0c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8106d0e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8106d10:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 8106d14:	b007      	add	sp, #28
 8106d16:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8106d18:	2b20      	cmp	r3, #32
 8106d1a:	d03e      	beq.n	8106d9a <UART_SetConfig+0x1f2>
 8106d1c:	2b40      	cmp	r3, #64	; 0x40
 8106d1e:	d1e2      	bne.n	8106ce6 <UART_SetConfig+0x13e>
 8106d20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8106d24:	e012      	b.n	8106d4c <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106d26:	4668      	mov	r0, sp
 8106d28:	f7fe fd3c 	bl	81057a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106d2c:	9801      	ldr	r0, [sp, #4]
        break;
 8106d2e:	e7e9      	b.n	8106d04 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106d30:	a803      	add	r0, sp, #12
 8106d32:	f7fe fde1 	bl	81058f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106d36:	9804      	ldr	r0, [sp, #16]
        break;
 8106d38:	e7e4      	b.n	8106d04 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d3a:	6813      	ldr	r3, [r2, #0]
 8106d3c:	484b      	ldr	r0, [pc, #300]	; (8106e6c <UART_SetConfig+0x2c4>)
 8106d3e:	f013 0f20 	tst.w	r3, #32
 8106d42:	d003      	beq.n	8106d4c <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106d44:	6813      	ldr	r3, [r2, #0]
 8106d46:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106d4a:	40d8      	lsrs	r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106d4c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106d4e:	4b48      	ldr	r3, [pc, #288]	; (8106e70 <UART_SetConfig+0x2c8>)
 8106d50:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106d52:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106d56:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8106d5a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106d5e:	4299      	cmp	r1, r3
 8106d60:	d8c1      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
 8106d62:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8106d66:	d8be      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106d68:	2300      	movs	r3, #0
 8106d6a:	4619      	mov	r1, r3
 8106d6c:	f7fa f814 	bl	8100d98 <__aeabi_uldivmod>
 8106d70:	0209      	lsls	r1, r1, #8
 8106d72:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8106d76:	086b      	lsrs	r3, r5, #1
 8106d78:	0200      	lsls	r0, r0, #8
 8106d7a:	18c0      	adds	r0, r0, r3
 8106d7c:	462a      	mov	r2, r5
 8106d7e:	f04f 0300 	mov.w	r3, #0
 8106d82:	f141 0100 	adc.w	r1, r1, #0
 8106d86:	f7fa f807 	bl	8100d98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106d8a:	4b3a      	ldr	r3, [pc, #232]	; (8106e74 <UART_SetConfig+0x2cc>)
 8106d8c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106d90:	429a      	cmp	r2, r3
 8106d92:	d8a8      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106d94:	6823      	ldr	r3, [r4, #0]
 8106d96:	60d8      	str	r0, [r3, #12]
 8106d98:	e7b5      	b.n	8106d06 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8106d9a:	4837      	ldr	r0, [pc, #220]	; (8106e78 <UART_SetConfig+0x2d0>)
 8106d9c:	e7d6      	b.n	8106d4c <UART_SetConfig+0x1a4>
    switch (clocksource)
 8106d9e:	2b20      	cmp	r3, #32
 8106da0:	d03a      	beq.n	8106e18 <UART_SetConfig+0x270>
 8106da2:	2b40      	cmp	r3, #64	; 0x40
 8106da4:	d00b      	beq.n	8106dbe <UART_SetConfig+0x216>
 8106da6:	2b10      	cmp	r3, #16
 8106da8:	d19d      	bne.n	8106ce6 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106daa:	4b1f      	ldr	r3, [pc, #124]	; (8106e28 <UART_SetConfig+0x280>)
 8106dac:	482f      	ldr	r0, [pc, #188]	; (8106e6c <UART_SetConfig+0x2c4>)
 8106dae:	681a      	ldr	r2, [r3, #0]
 8106db0:	f012 0f20 	tst.w	r2, #32
 8106db4:	d003      	beq.n	8106dbe <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106db6:	681b      	ldr	r3, [r3, #0]
 8106db8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106dbc:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106dbe:	6861      	ldr	r1, [r4, #4]
 8106dc0:	4b2b      	ldr	r3, [pc, #172]	; (8106e70 <UART_SetConfig+0x2c8>)
 8106dc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8106dc4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8106dc8:	fbb0 f2f2 	udiv	r2, r0, r2
 8106dcc:	084b      	lsrs	r3, r1, #1
 8106dce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106dd2:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106dd6:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106dda:	f1a3 0110 	sub.w	r1, r3, #16
 8106dde:	4291      	cmp	r1, r2
 8106de0:	d881      	bhi.n	8106ce6 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106de2:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8106de6:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106de8:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106dea:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8106dee:	4313      	orrs	r3, r2
 8106df0:	60cb      	str	r3, [r1, #12]
 8106df2:	e788      	b.n	8106d06 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8106df4:	f7fd fe9c 	bl	8104b30 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8106df8:	2800      	cmp	r0, #0
 8106dfa:	d084      	beq.n	8106d06 <UART_SetConfig+0x15e>
 8106dfc:	e7df      	b.n	8106dbe <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 8106dfe:	f7fd fea9 	bl	8104b54 <HAL_RCC_GetPCLK2Freq>
        break;
 8106e02:	e7f9      	b.n	8106df8 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e04:	4668      	mov	r0, sp
 8106e06:	f7fe fccd 	bl	81057a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106e0a:	9801      	ldr	r0, [sp, #4]
        break;
 8106e0c:	e7f4      	b.n	8106df8 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e0e:	a803      	add	r0, sp, #12
 8106e10:	f7fe fd72 	bl	81058f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106e14:	9804      	ldr	r0, [sp, #16]
        break;
 8106e16:	e7ef      	b.n	8106df8 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 8106e18:	4817      	ldr	r0, [pc, #92]	; (8106e78 <UART_SetConfig+0x2d0>)
 8106e1a:	e7d0      	b.n	8106dbe <UART_SetConfig+0x216>
 8106e1c:	cfff69f3 	.word	0xcfff69f3
 8106e20:	58000c00 	.word	0x58000c00
 8106e24:	40011000 	.word	0x40011000
 8106e28:	58024400 	.word	0x58024400
 8106e2c:	08110e80 	.word	0x08110e80
 8106e30:	40004400 	.word	0x40004400
 8106e34:	08110ea9 	.word	0x08110ea9
 8106e38:	40004800 	.word	0x40004800
 8106e3c:	08110ea9 	.word	0x08110ea9
 8106e40:	40004c00 	.word	0x40004c00
 8106e44:	08110ea9 	.word	0x08110ea9
 8106e48:	40005000 	.word	0x40005000
 8106e4c:	08110ea9 	.word	0x08110ea9
 8106e50:	40011400 	.word	0x40011400
 8106e54:	08110e80 	.word	0x08110e80
 8106e58:	40007800 	.word	0x40007800
 8106e5c:	08110ea9 	.word	0x08110ea9
 8106e60:	40007c00 	.word	0x40007c00
 8106e64:	08110ea9 	.word	0x08110ea9
 8106e68:	08110eaf 	.word	0x08110eaf
 8106e6c:	03d09000 	.word	0x03d09000
 8106e70:	08110eb6 	.word	0x08110eb6
 8106e74:	000ffcff 	.word	0x000ffcff
 8106e78:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8106e7c:	2b08      	cmp	r3, #8
 8106e7e:	d817      	bhi.n	8106eb0 <UART_SetConfig+0x308>
 8106e80:	2b08      	cmp	r3, #8
 8106e82:	f63f af30 	bhi.w	8106ce6 <UART_SetConfig+0x13e>
 8106e86:	a201      	add	r2, pc, #4	; (adr r2, 8106e8c <UART_SetConfig+0x2e4>)
 8106e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e8c:	08106ef3 	.word	0x08106ef3
 8106e90:	08106eff 	.word	0x08106eff
 8106e94:	08106ce7 	.word	0x08106ce7
 8106e98:	08106ce7 	.word	0x08106ce7
 8106e9c:	08106f05 	.word	0x08106f05
 8106ea0:	08106ce7 	.word	0x08106ce7
 8106ea4:	08106ce7 	.word	0x08106ce7
 8106ea8:	08106ce7 	.word	0x08106ce7
 8106eac:	08106f0f 	.word	0x08106f0f
 8106eb0:	2b20      	cmp	r3, #32
 8106eb2:	d031      	beq.n	8106f18 <UART_SetConfig+0x370>
 8106eb4:	2b40      	cmp	r3, #64	; 0x40
 8106eb6:	d031      	beq.n	8106f1c <UART_SetConfig+0x374>
 8106eb8:	2b10      	cmp	r3, #16
 8106eba:	f47f af14 	bne.w	8106ce6 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106ebe:	4b19      	ldr	r3, [pc, #100]	; (8106f24 <UART_SetConfig+0x37c>)
 8106ec0:	4819      	ldr	r0, [pc, #100]	; (8106f28 <UART_SetConfig+0x380>)
 8106ec2:	681a      	ldr	r2, [r3, #0]
 8106ec4:	f012 0f20 	tst.w	r2, #32
 8106ec8:	d003      	beq.n	8106ed2 <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106eca:	681b      	ldr	r3, [r3, #0]
 8106ecc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106ed0:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106ed2:	6863      	ldr	r3, [r4, #4]
 8106ed4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8106ed6:	4a15      	ldr	r2, [pc, #84]	; (8106f2c <UART_SetConfig+0x384>)
 8106ed8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8106edc:	fbb0 f0f2 	udiv	r0, r0, r2
 8106ee0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8106ee4:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106ee8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8106eec:	f1a0 0210 	sub.w	r2, r0, #16
 8106ef0:	e74e      	b.n	8106d90 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8106ef2:	f7fd fe1d 	bl	8104b30 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8106ef6:	2800      	cmp	r0, #0
 8106ef8:	f43f af05 	beq.w	8106d06 <UART_SetConfig+0x15e>
 8106efc:	e7e9      	b.n	8106ed2 <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8106efe:	f7fd fe29 	bl	8104b54 <HAL_RCC_GetPCLK2Freq>
        break;
 8106f02:	e7f8      	b.n	8106ef6 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f04:	4668      	mov	r0, sp
 8106f06:	f7fe fc4d 	bl	81057a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106f0a:	9801      	ldr	r0, [sp, #4]
        break;
 8106f0c:	e7f3      	b.n	8106ef6 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f0e:	a803      	add	r0, sp, #12
 8106f10:	f7fe fcf2 	bl	81058f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106f14:	9804      	ldr	r0, [sp, #16]
        break;
 8106f16:	e7ee      	b.n	8106ef6 <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 8106f18:	4805      	ldr	r0, [pc, #20]	; (8106f30 <UART_SetConfig+0x388>)
 8106f1a:	e7da      	b.n	8106ed2 <UART_SetConfig+0x32a>
    switch (clocksource)
 8106f1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8106f20:	e7d7      	b.n	8106ed2 <UART_SetConfig+0x32a>
 8106f22:	bf00      	nop
 8106f24:	58024400 	.word	0x58024400
 8106f28:	03d09000 	.word	0x03d09000
 8106f2c:	08110eb6 	.word	0x08110eb6
 8106f30:	003d0900 	.word	0x003d0900

08106f34 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106f34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8106f36:	07da      	lsls	r2, r3, #31
{
 8106f38:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106f3a:	d506      	bpl.n	8106f4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106f3c:	6801      	ldr	r1, [r0, #0]
 8106f3e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8106f40:	684a      	ldr	r2, [r1, #4]
 8106f42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8106f46:	4322      	orrs	r2, r4
 8106f48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106f4a:	079c      	lsls	r4, r3, #30
 8106f4c:	d506      	bpl.n	8106f5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106f4e:	6801      	ldr	r1, [r0, #0]
 8106f50:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8106f52:	684a      	ldr	r2, [r1, #4]
 8106f54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106f58:	4322      	orrs	r2, r4
 8106f5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106f5c:	0759      	lsls	r1, r3, #29
 8106f5e:	d506      	bpl.n	8106f6e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106f60:	6801      	ldr	r1, [r0, #0]
 8106f62:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8106f64:	684a      	ldr	r2, [r1, #4]
 8106f66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8106f6a:	4322      	orrs	r2, r4
 8106f6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106f6e:	071a      	lsls	r2, r3, #28
 8106f70:	d506      	bpl.n	8106f80 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106f72:	6801      	ldr	r1, [r0, #0]
 8106f74:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8106f76:	684a      	ldr	r2, [r1, #4]
 8106f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106f7c:	4322      	orrs	r2, r4
 8106f7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106f80:	06dc      	lsls	r4, r3, #27
 8106f82:	d506      	bpl.n	8106f92 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106f84:	6801      	ldr	r1, [r0, #0]
 8106f86:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8106f88:	688a      	ldr	r2, [r1, #8]
 8106f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8106f8e:	4322      	orrs	r2, r4
 8106f90:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106f92:	0699      	lsls	r1, r3, #26
 8106f94:	d506      	bpl.n	8106fa4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106f96:	6801      	ldr	r1, [r0, #0]
 8106f98:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8106f9a:	688a      	ldr	r2, [r1, #8]
 8106f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8106fa0:	4322      	orrs	r2, r4
 8106fa2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106fa4:	065a      	lsls	r2, r3, #25
 8106fa6:	d50f      	bpl.n	8106fc8 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106fa8:	6801      	ldr	r1, [r0, #0]
 8106faa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8106fac:	684a      	ldr	r2, [r1, #4]
 8106fae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8106fb2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106fb4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106fb8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106fba:	d105      	bne.n	8106fc8 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106fbc:	684a      	ldr	r2, [r1, #4]
 8106fbe:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8106fc0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8106fc4:	4322      	orrs	r2, r4
 8106fc6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106fc8:	061b      	lsls	r3, r3, #24
 8106fca:	d506      	bpl.n	8106fda <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106fcc:	6802      	ldr	r2, [r0, #0]
 8106fce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8106fd0:	6853      	ldr	r3, [r2, #4]
 8106fd2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8106fd6:	430b      	orrs	r3, r1
 8106fd8:	6053      	str	r3, [r2, #4]
}
 8106fda:	bd10      	pop	{r4, pc}

08106fdc <UART_WaitOnFlagUntilTimeout>:
{
 8106fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106fe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8106fe4:	4604      	mov	r4, r0
 8106fe6:	460f      	mov	r7, r1
 8106fe8:	4616      	mov	r6, r2
 8106fea:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106fec:	6822      	ldr	r2, [r4, #0]
 8106fee:	69d3      	ldr	r3, [r2, #28]
 8106ff0:	ea37 0303 	bics.w	r3, r7, r3
 8106ff4:	bf0c      	ite	eq
 8106ff6:	2301      	moveq	r3, #1
 8106ff8:	2300      	movne	r3, #0
 8106ffa:	42b3      	cmp	r3, r6
 8106ffc:	d001      	beq.n	8107002 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8106ffe:	2000      	movs	r0, #0
 8107000:	e01e      	b.n	8107040 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8107002:	f1b9 3fff 	cmp.w	r9, #4294967295
 8107006:	d0f2      	beq.n	8106fee <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107008:	f7fb fe36 	bl	8102c78 <HAL_GetTick>
 810700c:	eba0 0008 	sub.w	r0, r0, r8
 8107010:	4548      	cmp	r0, r9
 8107012:	d825      	bhi.n	8107060 <UART_WaitOnFlagUntilTimeout+0x84>
 8107014:	f1b9 0f00 	cmp.w	r9, #0
 8107018:	d022      	beq.n	8107060 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810701a:	6820      	ldr	r0, [r4, #0]
 810701c:	6803      	ldr	r3, [r0, #0]
 810701e:	075a      	lsls	r2, r3, #29
 8107020:	d5e4      	bpl.n	8106fec <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8107022:	69c5      	ldr	r5, [r0, #28]
 8107024:	f015 0508 	ands.w	r5, r5, #8
 8107028:	d00c      	beq.n	8107044 <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810702a:	2508      	movs	r5, #8
 810702c:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 810702e:	4620      	mov	r0, r4
 8107030:	f7ff fb4e 	bl	81066d0 <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 8107034:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8107036:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 810703a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
           return HAL_ERROR;
 810703e:	2001      	movs	r0, #1
}
 8107040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107044:	69c3      	ldr	r3, [r0, #28]
 8107046:	051b      	lsls	r3, r3, #20
 8107048:	d5d0      	bpl.n	8106fec <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810704a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810704e:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8107050:	4620      	mov	r0, r4
 8107052:	f7ff fb3d 	bl	81066d0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107056:	2320      	movs	r3, #32
 8107058:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 810705c:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 8107060:	2003      	movs	r0, #3
 8107062:	e7ed      	b.n	8107040 <UART_WaitOnFlagUntilTimeout+0x64>

08107064 <UART_CheckIdleState>:
{
 8107064:	b530      	push	{r4, r5, lr}
 8107066:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107068:	2500      	movs	r5, #0
{
 810706a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810706c:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8107070:	f7fb fe02 	bl	8102c78 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107074:	6822      	ldr	r2, [r4, #0]
 8107076:	6812      	ldr	r2, [r2, #0]
 8107078:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 810707a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810707c:	d51d      	bpl.n	81070ba <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810707e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8107082:	9200      	str	r2, [sp, #0]
 8107084:	9003      	str	r0, [sp, #12]
 8107086:	462a      	mov	r2, r5
 8107088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810708c:	4620      	mov	r0, r4
 810708e:	f7ff ffa5 	bl	8106fdc <UART_WaitOnFlagUntilTimeout>
 8107092:	9b03      	ldr	r3, [sp, #12]
 8107094:	b188      	cbz	r0, 81070ba <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8107096:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107098:	e852 3f00 	ldrex	r3, [r2]
 810709c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81070a0:	e842 3100 	strex	r1, r3, [r2]
 81070a4:	2900      	cmp	r1, #0
 81070a6:	d1f6      	bne.n	8107096 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 81070a8:	2320      	movs	r3, #32
 81070aa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 81070ae:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 81070b0:	2300      	movs	r3, #0
 81070b2:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 81070b6:	b005      	add	sp, #20
 81070b8:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81070ba:	6822      	ldr	r2, [r4, #0]
 81070bc:	6812      	ldr	r2, [r2, #0]
 81070be:	0752      	lsls	r2, r2, #29
 81070c0:	d523      	bpl.n	810710a <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81070c2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 81070c6:	9200      	str	r2, [sp, #0]
 81070c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81070cc:	2200      	movs	r2, #0
 81070ce:	4620      	mov	r0, r4
 81070d0:	f7ff ff84 	bl	8106fdc <UART_WaitOnFlagUntilTimeout>
 81070d4:	b1c8      	cbz	r0, 810710a <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81070d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81070d8:	e852 3f00 	ldrex	r3, [r2]
 81070dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81070e0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 81070e4:	6822      	ldr	r2, [r4, #0]
 81070e6:	2900      	cmp	r1, #0
 81070e8:	d1f5      	bne.n	81070d6 <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81070ea:	f102 0308 	add.w	r3, r2, #8
 81070ee:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81070f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81070f6:	f102 0008 	add.w	r0, r2, #8
 81070fa:	e840 3100 	strex	r1, r3, [r0]
 81070fe:	2900      	cmp	r1, #0
 8107100:	d1f3      	bne.n	81070ea <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 8107102:	2320      	movs	r3, #32
 8107104:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8107108:	e7d1      	b.n	81070ae <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 810710a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810710c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 810710e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8107112:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107116:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8107118:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 810711a:	e7c9      	b.n	81070b0 <UART_CheckIdleState+0x4c>

0810711c <HAL_UART_Init>:
{
 810711c:	b510      	push	{r4, lr}
  if (huart == NULL)
 810711e:	4604      	mov	r4, r0
 8107120:	b350      	cbz	r0, 8107178 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8107122:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8107126:	b91b      	cbnz	r3, 8107130 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8107128:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 810712c:	f7fb fc8c 	bl	8102a48 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8107130:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107132:	2324      	movs	r3, #36	; 0x24
 8107134:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8107138:	6813      	ldr	r3, [r2, #0]
 810713a:	f023 0301 	bic.w	r3, r3, #1
 810713e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107140:	4620      	mov	r0, r4
 8107142:	f7ff fd31 	bl	8106ba8 <UART_SetConfig>
 8107146:	2801      	cmp	r0, #1
 8107148:	d016      	beq.n	8107178 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810714a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810714c:	b113      	cbz	r3, 8107154 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 810714e:	4620      	mov	r0, r4
 8107150:	f7ff fef0 	bl	8106f34 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107154:	6823      	ldr	r3, [r4, #0]
 8107156:	685a      	ldr	r2, [r3, #4]
 8107158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810715c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810715e:	689a      	ldr	r2, [r3, #8]
 8107160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107164:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8107166:	681a      	ldr	r2, [r3, #0]
 8107168:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 810716c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 810716e:	601a      	str	r2, [r3, #0]
}
 8107170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8107174:	f7ff bf76 	b.w	8107064 <UART_CheckIdleState>
}
 8107178:	2001      	movs	r0, #1
 810717a:	bd10      	pop	{r4, pc}

0810717c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810717c:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 810717e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107180:	b92b      	cbnz	r3, 810718e <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8107182:	2301      	movs	r3, #1
 8107184:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107188:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810718c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810718e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107190:	4d09      	ldr	r5, [pc, #36]	; (81071b8 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107192:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107194:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8107196:	4c09      	ldr	r4, [pc, #36]	; (81071bc <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107198:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810719a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810719e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 81071a0:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81071a2:	011b      	lsls	r3, r3, #4
 81071a4:	fbb3 f3f1 	udiv	r3, r3, r1
 81071a8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81071ac:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 81071ae:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81071b0:	011b      	lsls	r3, r3, #4
 81071b2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 81071b6:	e7e7      	b.n	8107188 <UARTEx_SetNbDataToProcess+0xc>
 81071b8:	08110ed6 	.word	0x08110ed6
 81071bc:	08110ece 	.word	0x08110ece

081071c0 <HAL_UARTEx_WakeupCallback>:
}
 81071c0:	4770      	bx	lr

081071c2 <HAL_UARTEx_RxFifoFullCallback>:
 81071c2:	4770      	bx	lr

081071c4 <HAL_UARTEx_TxFifoEmptyCallback>:
 81071c4:	4770      	bx	lr

081071c6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 81071c6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 81071ca:	2b01      	cmp	r3, #1
 81071cc:	d014      	beq.n	81071f8 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81071ce:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 81071d0:	2324      	movs	r3, #36	; 0x24
 81071d2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81071d6:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 81071d8:	6813      	ldr	r3, [r2, #0]
 81071da:	f023 0301 	bic.w	r3, r3, #1
 81071de:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81071e0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81071e4:	2300      	movs	r3, #0
 81071e6:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81071e8:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 81071ea:	2220      	movs	r2, #32
 81071ec:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 81071f0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 81071f4:	4618      	mov	r0, r3
 81071f6:	4770      	bx	lr
  __HAL_LOCK(huart);
 81071f8:	2002      	movs	r0, #2
}
 81071fa:	4770      	bx	lr

081071fc <HAL_UARTEx_SetTxFifoThreshold>:
{
 81071fc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 81071fe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8107202:	2b01      	cmp	r3, #1
{
 8107204:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8107206:	d017      	beq.n	8107238 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107208:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 810720a:	2324      	movs	r3, #36	; 0x24
 810720c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107210:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8107212:	682b      	ldr	r3, [r5, #0]
 8107214:	f023 0301 	bic.w	r3, r3, #1
 8107218:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810721a:	68ab      	ldr	r3, [r5, #8]
 810721c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8107220:	4319      	orrs	r1, r3
 8107222:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8107224:	f7ff ffaa 	bl	810717c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8107228:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810722a:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 810722c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8107230:	2000      	movs	r0, #0
 8107232:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8107236:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8107238:	2002      	movs	r0, #2
 810723a:	e7fc      	b.n	8107236 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0810723c <HAL_UARTEx_SetRxFifoThreshold>:
{
 810723c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 810723e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8107242:	2b01      	cmp	r3, #1
{
 8107244:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8107246:	d017      	beq.n	8107278 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107248:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 810724a:	2324      	movs	r3, #36	; 0x24
 810724c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107250:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8107252:	682b      	ldr	r3, [r5, #0]
 8107254:	f023 0301 	bic.w	r3, r3, #1
 8107258:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810725a:	68ab      	ldr	r3, [r5, #8]
 810725c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8107260:	4319      	orrs	r1, r3
 8107262:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8107264:	f7ff ff8a 	bl	810717c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8107268:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810726a:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 810726c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8107270:	2000      	movs	r0, #0
 8107272:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8107276:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8107278:	2002      	movs	r0, #2
 810727a:	e7fc      	b.n	8107276 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0810727c <ai_ann_762_get_error>:
}

AI_API_ENTRY
ai_error ai_ann_762_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 810727c:	f001 bb80 	b.w	8108980 <ai_platform_network_get_error>

08107280 <ai_ann_762_create>:
}

AI_API_ENTRY
ai_error ai_ann_762_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8107280:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8107282:	2305      	movs	r3, #5
 8107284:	2200      	movs	r2, #0
 8107286:	e9cd 3200 	strd	r3, r2, [sp]
 810728a:	4a03      	ldr	r2, [pc, #12]	; (8107298 <ai_ann_762_create+0x18>)
 810728c:	2301      	movs	r3, #1
 810728e:	f001 fd91 	bl	8108db4 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8107292:	b003      	add	sp, #12
 8107294:	f85d fb04 	ldr.w	pc, [sp], #4
 8107298:	10000510 	.word	0x10000510

0810729c <ai_ann_762_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_762_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 810729c:	b910      	cbnz	r0, 81072a4 <ai_ann_762_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 810729e:	4802      	ldr	r0, [pc, #8]	; (81072a8 <ai_ann_762_inputs_get+0xc>)
 81072a0:	4b02      	ldr	r3, [pc, #8]	; (81072ac <ai_ann_762_inputs_get+0x10>)
 81072a2:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 81072a4:	f001 bbe0 	b.w	8108a68 <ai_platform_inputs_get>
 81072a8:	10000510 	.word	0x10000510
 81072ac:	a1c00100 	.word	0xa1c00100

081072b0 <ai_ann_762_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_762_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 81072b0:	b910      	cbnz	r0, 81072b8 <ai_ann_762_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 81072b2:	4802      	ldr	r0, [pc, #8]	; (81072bc <ai_ann_762_outputs_get+0xc>)
 81072b4:	4b02      	ldr	r3, [pc, #8]	; (81072c0 <ai_ann_762_outputs_get+0x10>)
 81072b6:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 81072b8:	f001 bcac 	b.w	8108c14 <ai_platform_outputs_get>
 81072bc:	10000510 	.word	0x10000510
 81072c0:	a1c00100 	.word	0xa1c00100

081072c4 <ai_ann_762_init>:
}

AI_API_ENTRY
ai_bool ai_ann_762_init(
  ai_handle network, const ai_network_params* params)
{
 81072c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81072c8:	4607      	mov	r7, r0
 81072ca:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 81072cc:	f001 fe48 	bl	8108f60 <ai_platform_network_init>
  if (!net_ctx) return false;
 81072d0:	4604      	mov	r4, r0
 81072d2:	2800      	cmp	r0, #0
 81072d4:	f000 8092 	beq.w	81073fc <ai_ann_762_init+0x138>
  if (ai_platform_get_weights_map(g_ann_762_weights_map, 1, params)) {
 81072d8:	4e4f      	ldr	r6, [pc, #316]	; (8107418 <ai_ann_762_init+0x154>)
 81072da:	4642      	mov	r2, r8
 81072dc:	2101      	movs	r1, #1
 81072de:	4630      	mov	r0, r6
 81072e0:	f001 fa84 	bl	81087ec <ai_platform_get_weights_map>
 81072e4:	4605      	mov	r5, r0
 81072e6:	2800      	cmp	r0, #0
 81072e8:	f000 808a 	beq.w	8107400 <ai_ann_762_init+0x13c>
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 81072ec:	4a4b      	ldr	r2, [pc, #300]	; (810741c <ai_ann_762_init+0x158>)
 81072ee:	6813      	ldr	r3, [r2, #0]
 81072f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 81072f4:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 0);
 81072f6:	6833      	ldr	r3, [r6, #0]
    gemm_3_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 0);
 81072f8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 81072fc:	4a48      	ldr	r2, [pc, #288]	; (8107420 <ai_ann_762_init+0x15c>)
 81072fe:	6811      	ldr	r1, [r2, #0]
 8107300:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8107304:	6011      	str	r1, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 1044);
 8107306:	f203 4114 	addw	r1, r3, #1044	; 0x414
 810730a:	6091      	str	r1, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 20);
 810730c:	f103 0114 	add.w	r1, r3, #20
 8107310:	60d1      	str	r1, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8107312:	4a44      	ldr	r2, [pc, #272]	; (8107424 <ai_ann_762_init+0x160>)
 8107314:	6811      	ldr	r1, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 581688);
 8107316:	f503 260e 	add.w	r6, r3, #581632	; 0x8e000
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 810731a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 810731e:	6011      	str	r1, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 581688);
 8107320:	f106 0138 	add.w	r1, r6, #56	; 0x38
    gemm_0_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 581688);
 8107324:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8107328:	4a3f      	ldr	r2, [pc, #252]	; (8107428 <ai_ann_762_init+0x164>)
 810732a:	6811      	ldr	r1, [r2, #0]
 810732c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8107330:	6011      	str	r1, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 584736);
 8107332:	f506 6142 	add.w	r1, r6, #3104	; 0xc20
    gemm_2_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 584736);
 8107336:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 810733a:	4a3c      	ldr	r2, [pc, #240]	; (810742c <ai_ann_762_init+0x168>)
 810733c:	6811      	ldr	r1, [r2, #0]
 810733e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8107342:	6011      	str	r1, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 586272);
 8107344:	f503 210f 	add.w	r1, r3, #585728	; 0x8f000
 8107348:	f501 7108 	add.w	r1, r1, #544	; 0x220
    gemm_1_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 585248);
 810734c:	f506 6662 	add.w	r6, r6, #3616	; 0xe20
    gemm_1_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 586272);
 8107350:	6091      	str	r1, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 585248);
 8107352:	60d6      	str	r6, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8107354:	4a36      	ldr	r2, [pc, #216]	; (8107430 <ai_ann_762_init+0x16c>)
 8107356:	6811      	ldr	r1, [r2, #0]
 8107358:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 810735c:	6011      	str	r1, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_ann_762_weights_map[0] + 781344);
 810735e:	f503 213e 	add.w	r1, r3, #778240	; 0xbe000
 8107362:	f501 6142 	add.w	r1, r1, #3104	; 0xc20
    gemm_1_bias_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 781344);
 8107366:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 810736a:	4a32      	ldr	r2, [pc, #200]	; (8107434 <ai_ann_762_init+0x170>)
 810736c:	6811      	ldr	r1, [r2, #0]
 810736e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8107372:	6011      	str	r1, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 783392);
 8107374:	f503 213f 	add.w	r1, r3, #782336	; 0xbf000
 8107378:	f501 6084 	add.w	r0, r1, #1056	; 0x420
    gemm_2_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 782368);
 810737c:	3120      	adds	r1, #32
 810737e:	60d1      	str	r1, [r2, #12]
    gemm_2_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 783392);
 8107380:	6090      	str	r0, [r2, #8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8107382:	4a2d      	ldr	r2, [pc, #180]	; (8107438 <ai_ann_762_init+0x174>)
 8107384:	6811      	ldr	r1, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 816160);
 8107386:	f503 2347 	add.w	r3, r3, #815104	; 0xc7000
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 810738a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_3_weights_array.data = AI_PTR(g_ann_762_weights_map[0] + 816160);
 810738e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8107392:	6011      	str	r1, [r2, #0]
    gemm_3_weights_array.data_start = AI_PTR(g_ann_762_weights_map[0] + 816160);
 8107394:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_ann_762_activations_map, 1, params)) {
 8107398:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8107460 <ai_ann_762_init+0x19c>
 810739c:	4642      	mov	r2, r8
 810739e:	2101      	movs	r1, #1
 81073a0:	4648      	mov	r0, r9
 81073a2:	f001 fa77 	bl	8108894 <ai_platform_get_activations_map>
 81073a6:	4606      	mov	r6, r0
 81073a8:	b380      	cbz	r0, 810740c <ai_ann_762_init+0x148>
    serving_default_dense_input0_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073aa:	f8d9 3000 	ldr.w	r3, [r9]
 81073ae:	4a23      	ldr	r2, [pc, #140]	; (810743c <ai_ann_762_init+0x178>)
    gemm_0_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073b0:	4923      	ldr	r1, [pc, #140]	; (8107440 <ai_ann_762_init+0x17c>)
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073b2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073b6:	f603 32e8 	addw	r2, r3, #3048	; 0xbe8
    gemm_0_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073ba:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073be:	4921      	ldr	r1, [pc, #132]	; (8107444 <ai_ann_762_init+0x180>)
    nl_0_nl_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073c0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    gemm_1_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073c4:	4920      	ldr	r1, [pc, #128]	; (8107448 <ai_ann_762_init+0x184>)
    gemm_1_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 3048);
 81073c6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073ca:	4a20      	ldr	r2, [pc, #128]	; (810744c <ai_ann_762_init+0x188>)
    nl_1_nl_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073cc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_2_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 1024);
 81073d0:	4a1f      	ldr	r2, [pc, #124]	; (8107450 <ai_ann_762_init+0x18c>)
 81073d2:	f503 6180 	add.w	r1, r3, #1024	; 0x400
    gemm_2_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 1024);
 81073d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_2_nl_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073da:	4a1e      	ldr	r2, [pc, #120]	; (8107454 <ai_ann_762_init+0x190>)
    nl_2_nl_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073dc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_3_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 512);
 81073e0:	4a1d      	ldr	r2, [pc, #116]	; (8107458 <ai_ann_762_init+0x194>)
 81073e2:	f503 7100 	add.w	r1, r3, #512	; 0x200
    gemm_3_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 512);
 81073e6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_4_output_array.data = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073ea:	4a1c      	ldr	r2, [pc, #112]	; (810745c <ai_ann_762_init+0x198>)
    nl_4_output_array.data_start = AI_PTR(g_ann_762_activations_map[0] + 0);
 81073ec:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= ann_762_configure_weights(net_ctx, params);
  ok &= ann_762_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 81073f0:	4638      	mov	r0, r7
 81073f2:	f001 fea3 	bl	810913c <ai_platform_network_post_init>
 81073f6:	4030      	ands	r0, r6
 81073f8:	4005      	ands	r5, r0
 81073fa:	b2e8      	uxtb	r0, r5

  return ok;
}
 81073fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8107400:	2212      	movs	r2, #18
 8107402:	2130      	movs	r1, #48	; 0x30
 8107404:	4620      	mov	r0, r4
 8107406:	f001 fb29 	bl	8108a5c <ai_platform_network_set_error>
  return false;
 810740a:	e7c5      	b.n	8107398 <ai_ann_762_init+0xd4>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 810740c:	2213      	movs	r2, #19
 810740e:	2130      	movs	r1, #48	; 0x30
 8107410:	4620      	mov	r0, r4
 8107412:	f001 fb23 	bl	8108a5c <ai_platform_network_set_error>
  return false;
 8107416:	e7eb      	b.n	81073f0 <ai_ann_762_init+0x12c>
 8107418:	10019344 	.word	0x10019344
 810741c:	10000758 	.word	0x10000758
 8107420:	100005ec 	.word	0x100005ec
 8107424:	10000578 	.word	0x10000578
 8107428:	100006b8 	.word	0x100006b8
 810742c:	1000068c 	.word	0x1000068c
 8107430:	10000618 	.word	0x10000618
 8107434:	1000072c 	.word	0x1000072c
 8107438:	100007cc 	.word	0x100007cc
 810743c:	10000928 	.word	0x10000928
 8107440:	100005c0 	.word	0x100005c0
 8107444:	10000818 	.word	0x10000818
 8107448:	10000660 	.word	0x10000660
 810744c:	10000864 	.word	0x10000864
 8107450:	10000700 	.word	0x10000700
 8107454:	100008b0 	.word	0x100008b0
 8107458:	100007a0 	.word	0x100007a0
 810745c:	100008fc 	.word	0x100008fc
 8107460:	10019340 	.word	0x10019340

08107464 <ai_ann_762_create_and_init>:
{
 8107464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8107468:	4688      	mov	r8, r1
 810746a:	b08f      	sub	sp, #60	; 0x3c
    err = ai_ann_762_create(network, AI_ANN_762_DATA_CONFIG);
 810746c:	2100      	movs	r1, #0
{
 810746e:	4606      	mov	r6, r0
 8107470:	4617      	mov	r7, r2
    err = ai_ann_762_create(network, AI_ANN_762_DATA_CONFIG);
 8107472:	f7ff ff05 	bl	8107280 <ai_ann_762_create>
    if (err.type != AI_ERROR_NONE)
 8107476:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_ann_762_create(network, AI_ANN_762_DATA_CONFIG);
 810747a:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 810747c:	d107      	bne.n	810748e <ai_ann_762_create_and_init+0x2a>
    if (ai_ann_762_data_params_get(&params) != true) {
 810747e:	4668      	mov	r0, sp
 8107480:	f000 f83a 	bl	81074f8 <ai_ann_762_data_params_get>
 8107484:	b938      	cbnz	r0, 8107496 <ai_ann_762_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8107486:	6830      	ldr	r0, [r6, #0]
 8107488:	f001 fa7a 	bl	8108980 <ai_platform_network_get_error>
 810748c:	4604      	mov	r4, r0
}
 810748e:	4620      	mov	r0, r4
 8107490:	b00f      	add	sp, #60	; 0x3c
 8107492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 8107496:	f1b8 0f00 	cmp.w	r8, #0
 810749a:	d11a      	bne.n	81074d2 <ai_ann_762_create_and_init+0x6e>
    if (weights) {
 810749c:	bb3f      	cbnz	r7, 81074ee <ai_ann_762_create_and_init+0x8a>
    if (ai_ann_762_init(*network, &params) != true) {
 810749e:	6830      	ldr	r0, [r6, #0]
 81074a0:	4669      	mov	r1, sp
 81074a2:	f7ff ff0f 	bl	81072c4 <ai_ann_762_init>
 81074a6:	b928      	cbnz	r0, 81074b4 <ai_ann_762_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 81074a8:	6830      	ldr	r0, [r6, #0]
 81074aa:	f001 fa69 	bl	8108980 <ai_platform_network_get_error>
 81074ae:	fa5f f980 	uxtb.w	r9, r0
 81074b2:	4604      	mov	r4, r0
    return err;
 81074b4:	f369 0407 	bfi	r4, r9, #0, #8
 81074b8:	e7e9      	b.n	810748e <ai_ann_762_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 81074ba:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 81074be:	4629      	mov	r1, r5
 81074c0:	a803      	add	r0, sp, #12
 81074c2:	f001 f97f 	bl	81087c4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 81074c6:	3501      	adds	r5, #1
 81074c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 81074cc:	42ab      	cmp	r3, r5
 81074ce:	dcf4      	bgt.n	81074ba <ai_ann_762_create_and_init+0x56>
 81074d0:	e7e4      	b.n	810749c <ai_ann_762_create_and_init+0x38>
 81074d2:	464d      	mov	r5, r9
 81074d4:	e7f8      	b.n	81074c8 <ai_ann_762_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 81074d6:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 81074da:	4629      	mov	r1, r5
 81074dc:	a801      	add	r0, sp, #4
 81074de:	f001 f971 	bl	81087c4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 81074e2:	3501      	adds	r5, #1
 81074e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 81074e8:	42ab      	cmp	r3, r5
 81074ea:	dcf4      	bgt.n	81074d6 <ai_ann_762_create_and_init+0x72>
 81074ec:	e7d7      	b.n	810749e <ai_ann_762_create_and_init+0x3a>
 81074ee:	2500      	movs	r5, #0
 81074f0:	e7f8      	b.n	81074e4 <ai_ann_762_create_and_init+0x80>

081074f2 <ai_ann_762_run>:

AI_API_ENTRY
ai_i32 ai_ann_762_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 81074f2:	f001 beab 	b.w	810924c <ai_platform_network_process>
	...

081074f8 <ai_ann_762_data_params_get>:
 * @ingroup ann_762_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_ann_762_data_params_get(ai_network_params* params)
{
 81074f8:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 81074fa:	4603      	mov	r3, r0
{
 81074fc:	b085      	sub	sp, #20
  if (!params) return false;
 81074fe:	b170      	cbz	r0, 810751e <ai_ann_762_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8107500:	4c08      	ldr	r4, [pc, #32]	; (8107524 <ai_ann_762_data_params_get+0x2c>)
 8107502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8107506:	466a      	mov	r2, sp
 8107508:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_762_DATA_ACTIVATIONS_COUNT, g_ann_762_data_map_activations);
  
  const ai_buffer_array map_weights = 
 810750c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8107510:	ad02      	add	r5, sp, #8
 8107512:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_762_DATA_WEIGHTS_COUNT, g_ann_762_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8107516:	4629      	mov	r1, r5
 8107518:	4618      	mov	r0, r3
 810751a:	f001 fa0f 	bl	810893c <ai_platform_bind_network_params>
}
 810751e:	b005      	add	sp, #20
 8107520:	bd30      	pop	{r4, r5, pc}
 8107522:	bf00      	nop
 8107524:	081105e0 	.word	0x081105e0

08107528 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8107528:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_ann_762_create_and_init(&ann_762, act_addr, NULL);
 810752a:	4c15      	ldr	r4, [pc, #84]	; (8107580 <MX_X_CUBE_AI_Init+0x58>)
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 810752c:	4815      	ldr	r0, [pc, #84]	; (8107584 <MX_X_CUBE_AI_Init+0x5c>)
 810752e:	f004 f913 	bl	810b758 <puts>
  err = ai_ann_762_create_and_init(&ann_762, act_addr, NULL);
 8107532:	4915      	ldr	r1, [pc, #84]	; (8107588 <MX_X_CUBE_AI_Init+0x60>)
 8107534:	2200      	movs	r2, #0
 8107536:	4620      	mov	r0, r4
 8107538:	f7ff ff94 	bl	8107464 <ai_ann_762_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 810753c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8107540:	d008      	beq.n	8107554 <MX_X_CUBE_AI_Init+0x2c>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8107542:	0a03      	lsrs	r3, r0, #8
 8107544:	460a      	mov	r2, r1
 8107546:	4811      	ldr	r0, [pc, #68]	; (810758c <MX_X_CUBE_AI_Init+0x64>)
 8107548:	4911      	ldr	r1, [pc, #68]	; (8107590 <MX_X_CUBE_AI_Init+0x68>)

  ai_boostrap(data_activations0);
    /* USER CODE END 5 */
}
 810754a:	b003      	add	sp, #12
 810754c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8107550:	f004 b89c 	b.w	810b68c <iprintf>
  ai_input = ai_ann_762_inputs_get(ann_762, NULL);
 8107554:	6820      	ldr	r0, [r4, #0]
 8107556:	9101      	str	r1, [sp, #4]
 8107558:	f7ff fea0 	bl	810729c <ai_ann_762_inputs_get>
 810755c:	4d0d      	ldr	r5, [pc, #52]	; (8107594 <MX_X_CUBE_AI_Init+0x6c>)
  ai_output = ai_ann_762_outputs_get(ann_762, NULL);
 810755e:	9901      	ldr	r1, [sp, #4]
  ai_input = ai_ann_762_inputs_get(ann_762, NULL);
 8107560:	6028      	str	r0, [r5, #0]
  ai_output = ai_ann_762_outputs_get(ann_762, NULL);
 8107562:	6820      	ldr	r0, [r4, #0]
 8107564:	f7ff fea4 	bl	81072b0 <ai_ann_762_outputs_get>
 8107568:	4b0b      	ldr	r3, [pc, #44]	; (8107598 <MX_X_CUBE_AI_Init+0x70>)
 810756a:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 810756c:	682b      	ldr	r3, [r5, #0]
 810756e:	685a      	ldr	r2, [r3, #4]
 8107570:	4b0a      	ldr	r3, [pc, #40]	; (810759c <MX_X_CUBE_AI_Init+0x74>)
 8107572:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 8107574:	6842      	ldr	r2, [r0, #4]
 8107576:	4b0a      	ldr	r3, [pc, #40]	; (81075a0 <MX_X_CUBE_AI_Init+0x78>)
 8107578:	601a      	str	r2, [r3, #0]
}
 810757a:	b003      	add	sp, #12
 810757c:	bd30      	pop	{r4, r5, pc}
 810757e:	bf00      	nop
 8107580:	10019350 	.word	0x10019350
 8107584:	081d8d40 	.word	0x081d8d40
 8107588:	10000990 	.word	0x10000990
 810758c:	081d8d78 	.word	0x081d8d78
 8107590:	081d8d5d 	.word	0x081d8d5d
 8107594:	10019348 	.word	0x10019348
 8107598:	1001934c 	.word	0x1001934c
 810759c:	10019354 	.word	0x10019354
 81075a0:	10019358 	.word	0x10019358

081075a4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 81075a4:	b570      	push	{r4, r5, r6, lr}
    /* USER CODE BEGIN 6 */
  int res = -1;

  printf("TEMPLATE - run - main loop\r\n");

  if (ann_762) {
 81075a6:	4c10      	ldr	r4, [pc, #64]	; (81075e8 <MX_X_CUBE_AI_Process+0x44>)
  printf("TEMPLATE - run - main loop\r\n");
 81075a8:	4810      	ldr	r0, [pc, #64]	; (81075ec <MX_X_CUBE_AI_Process+0x48>)
 81075aa:	f004 f8d5 	bl	810b758 <puts>
  if (ann_762) {
 81075ae:	6823      	ldr	r3, [r4, #0]
 81075b0:	b18b      	cbz	r3, 81075d6 <MX_X_CUBE_AI_Process+0x32>
  batch = ai_ann_762_run(ann_762, ai_input, ai_output);
 81075b2:	4e0f      	ldr	r6, [pc, #60]	; (81075f0 <MX_X_CUBE_AI_Process+0x4c>)
 81075b4:	4d0f      	ldr	r5, [pc, #60]	; (81075f4 <MX_X_CUBE_AI_Process+0x50>)
 81075b6:	6832      	ldr	r2, [r6, #0]
 81075b8:	6829      	ldr	r1, [r5, #0]
 81075ba:	6820      	ldr	r0, [r4, #0]
 81075bc:	f7ff ff99 	bl	81074f2 <ai_ann_762_run>
  if (batch != 1) {
 81075c0:	2801      	cmp	r0, #1
 81075c2:	d0f8      	beq.n	81075b6 <MX_X_CUBE_AI_Process+0x12>
    ai_log_err(ai_ann_762_get_error(ann_762),
 81075c4:	6820      	ldr	r0, [r4, #0]
 81075c6:	f7ff fe59 	bl	810727c <ai_ann_762_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 81075ca:	490b      	ldr	r1, [pc, #44]	; (81075f8 <MX_X_CUBE_AI_Process+0x54>)
 81075cc:	0a03      	lsrs	r3, r0, #8
 81075ce:	b2c2      	uxtb	r2, r0
 81075d0:	480a      	ldr	r0, [pc, #40]	; (81075fc <MX_X_CUBE_AI_Process+0x58>)
 81075d2:	f004 f85b 	bl	810b68c <iprintf>
  if (res) {
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
    ai_log_err(err, "Process has FAILED");
  }
    /* USER CODE END 6 */
}
 81075d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 81075da:	4909      	ldr	r1, [pc, #36]	; (8107600 <MX_X_CUBE_AI_Process+0x5c>)
 81075dc:	4807      	ldr	r0, [pc, #28]	; (81075fc <MX_X_CUBE_AI_Process+0x58>)
 81075de:	2310      	movs	r3, #16
 81075e0:	2211      	movs	r2, #17
 81075e2:	f004 b853 	b.w	810b68c <iprintf>
 81075e6:	bf00      	nop
 81075e8:	10019350 	.word	0x10019350
 81075ec:	081d8daa 	.word	0x081d8daa
 81075f0:	1001934c 	.word	0x1001934c
 81075f4:	10019348 	.word	0x10019348
 81075f8:	081d8dc6 	.word	0x081d8dc6
 81075fc:	081d8d78 	.word	0x081d8d78
 8107600:	081d8dd5 	.word	0x081d8dd5

08107604 <arm_rfft_32_fast_init_f32>:
 8107604:	b180      	cbz	r0, 8107628 <arm_rfft_32_fast_init_f32+0x24>
 8107606:	4b0a      	ldr	r3, [pc, #40]	; (8107630 <arm_rfft_32_fast_init_f32+0x2c>)
 8107608:	4a0a      	ldr	r2, [pc, #40]	; (8107634 <arm_rfft_32_fast_init_f32+0x30>)
 810760a:	8999      	ldrh	r1, [r3, #12]
 810760c:	b430      	push	{r4, r5}
 810760e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107612:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107616:	8181      	strh	r1, [r0, #12]
 8107618:	2320      	movs	r3, #32
 810761a:	2110      	movs	r1, #16
 810761c:	8001      	strh	r1, [r0, #0]
 810761e:	8203      	strh	r3, [r0, #16]
 8107620:	6142      	str	r2, [r0, #20]
 8107622:	bc30      	pop	{r4, r5}
 8107624:	2000      	movs	r0, #0
 8107626:	4770      	bx	lr
 8107628:	f04f 30ff 	mov.w	r0, #4294967295
 810762c:	4770      	bx	lr
 810762e:	bf00      	nop
 8107630:	081dc360 	.word	0x081dc360
 8107634:	081e7940 	.word	0x081e7940

08107638 <arm_rfft_64_fast_init_f32>:
 8107638:	b180      	cbz	r0, 810765c <arm_rfft_64_fast_init_f32+0x24>
 810763a:	4b0a      	ldr	r3, [pc, #40]	; (8107664 <arm_rfft_64_fast_init_f32+0x2c>)
 810763c:	4a0a      	ldr	r2, [pc, #40]	; (8107668 <arm_rfft_64_fast_init_f32+0x30>)
 810763e:	8999      	ldrh	r1, [r3, #12]
 8107640:	b430      	push	{r4, r5}
 8107642:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107646:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810764a:	8181      	strh	r1, [r0, #12]
 810764c:	2340      	movs	r3, #64	; 0x40
 810764e:	2120      	movs	r1, #32
 8107650:	8001      	strh	r1, [r0, #0]
 8107652:	8203      	strh	r3, [r0, #16]
 8107654:	6142      	str	r2, [r0, #20]
 8107656:	bc30      	pop	{r4, r5}
 8107658:	2000      	movs	r0, #0
 810765a:	4770      	bx	lr
 810765c:	f04f 30ff 	mov.w	r0, #4294967295
 8107660:	4770      	bx	lr
 8107662:	bf00      	nop
 8107664:	081dc390 	.word	0x081dc390
 8107668:	081ec1c0 	.word	0x081ec1c0

0810766c <arm_rfft_128_fast_init_f32>:
 810766c:	b180      	cbz	r0, 8107690 <arm_rfft_128_fast_init_f32+0x24>
 810766e:	4b0a      	ldr	r3, [pc, #40]	; (8107698 <arm_rfft_128_fast_init_f32+0x2c>)
 8107670:	4a0a      	ldr	r2, [pc, #40]	; (810769c <arm_rfft_128_fast_init_f32+0x30>)
 8107672:	8999      	ldrh	r1, [r3, #12]
 8107674:	b430      	push	{r4, r5}
 8107676:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810767a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810767e:	8181      	strh	r1, [r0, #12]
 8107680:	2380      	movs	r3, #128	; 0x80
 8107682:	2140      	movs	r1, #64	; 0x40
 8107684:	8001      	strh	r1, [r0, #0]
 8107686:	8203      	strh	r3, [r0, #16]
 8107688:	6142      	str	r2, [r0, #20]
 810768a:	bc30      	pop	{r4, r5}
 810768c:	2000      	movs	r0, #0
 810768e:	4770      	bx	lr
 8107690:	f04f 30ff 	mov.w	r0, #4294967295
 8107694:	4770      	bx	lr
 8107696:	bf00      	nop
 8107698:	081dc3b0 	.word	0x081dc3b0
 810769c:	081e5340 	.word	0x081e5340

081076a0 <arm_rfft_256_fast_init_f32>:
 81076a0:	b188      	cbz	r0, 81076c6 <arm_rfft_256_fast_init_f32+0x26>
 81076a2:	4b0a      	ldr	r3, [pc, #40]	; (81076cc <arm_rfft_256_fast_init_f32+0x2c>)
 81076a4:	4a0a      	ldr	r2, [pc, #40]	; (81076d0 <arm_rfft_256_fast_init_f32+0x30>)
 81076a6:	8999      	ldrh	r1, [r3, #12]
 81076a8:	b430      	push	{r4, r5}
 81076aa:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81076ae:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81076b2:	8181      	strh	r1, [r0, #12]
 81076b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 81076b8:	2180      	movs	r1, #128	; 0x80
 81076ba:	8001      	strh	r1, [r0, #0]
 81076bc:	8203      	strh	r3, [r0, #16]
 81076be:	6142      	str	r2, [r0, #20]
 81076c0:	bc30      	pop	{r4, r5}
 81076c2:	2000      	movs	r0, #0
 81076c4:	4770      	bx	lr
 81076c6:	f04f 30ff 	mov.w	r0, #4294967295
 81076ca:	4770      	bx	lr
 81076cc:	081dc350 	.word	0x081dc350
 81076d0:	081e7540 	.word	0x081e7540

081076d4 <arm_rfft_512_fast_init_f32>:
 81076d4:	b190      	cbz	r0, 81076fc <arm_rfft_512_fast_init_f32+0x28>
 81076d6:	4b0b      	ldr	r3, [pc, #44]	; (8107704 <arm_rfft_512_fast_init_f32+0x30>)
 81076d8:	4a0b      	ldr	r2, [pc, #44]	; (8107708 <arm_rfft_512_fast_init_f32+0x34>)
 81076da:	8999      	ldrh	r1, [r3, #12]
 81076dc:	b430      	push	{r4, r5}
 81076de:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81076e2:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81076e6:	8181      	strh	r1, [r0, #12]
 81076e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 81076ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 81076f0:	8001      	strh	r1, [r0, #0]
 81076f2:	8203      	strh	r3, [r0, #16]
 81076f4:	6142      	str	r2, [r0, #20]
 81076f6:	bc30      	pop	{r4, r5}
 81076f8:	2000      	movs	r0, #0
 81076fa:	4770      	bx	lr
 81076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8107700:	4770      	bx	lr
 8107702:	bf00      	nop
 8107704:	081dc380 	.word	0x081dc380
 8107708:	081eb9c0 	.word	0x081eb9c0

0810770c <arm_rfft_1024_fast_init_f32>:
 810770c:	b190      	cbz	r0, 8107734 <arm_rfft_1024_fast_init_f32+0x28>
 810770e:	4b0b      	ldr	r3, [pc, #44]	; (810773c <arm_rfft_1024_fast_init_f32+0x30>)
 8107710:	4a0b      	ldr	r2, [pc, #44]	; (8107740 <arm_rfft_1024_fast_init_f32+0x34>)
 8107712:	8999      	ldrh	r1, [r3, #12]
 8107714:	b430      	push	{r4, r5}
 8107716:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810771a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810771e:	8181      	strh	r1, [r0, #12]
 8107720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8107724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8107728:	8001      	strh	r1, [r0, #0]
 810772a:	8203      	strh	r3, [r0, #16]
 810772c:	6142      	str	r2, [r0, #20]
 810772e:	bc30      	pop	{r4, r5}
 8107730:	2000      	movs	r0, #0
 8107732:	4770      	bx	lr
 8107734:	f04f 30ff 	mov.w	r0, #4294967295
 8107738:	4770      	bx	lr
 810773a:	bf00      	nop
 810773c:	081dc3a0 	.word	0x081dc3a0
 8107740:	081e4340 	.word	0x081e4340

08107744 <arm_rfft_2048_fast_init_f32>:
 8107744:	b190      	cbz	r0, 810776c <arm_rfft_2048_fast_init_f32+0x28>
 8107746:	4b0b      	ldr	r3, [pc, #44]	; (8107774 <arm_rfft_2048_fast_init_f32+0x30>)
 8107748:	4a0b      	ldr	r2, [pc, #44]	; (8107778 <arm_rfft_2048_fast_init_f32+0x34>)
 810774a:	8999      	ldrh	r1, [r3, #12]
 810774c:	b430      	push	{r4, r5}
 810774e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107752:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107756:	8181      	strh	r1, [r0, #12]
 8107758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810775c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8107760:	8001      	strh	r1, [r0, #0]
 8107762:	8203      	strh	r3, [r0, #16]
 8107764:	6142      	str	r2, [r0, #20]
 8107766:	bc30      	pop	{r4, r5}
 8107768:	2000      	movs	r0, #0
 810776a:	4770      	bx	lr
 810776c:	f04f 30ff 	mov.w	r0, #4294967295
 8107770:	4770      	bx	lr
 8107772:	bf00      	nop
 8107774:	081dc340 	.word	0x081dc340
 8107778:	081e5540 	.word	0x081e5540

0810777c <arm_rfft_4096_fast_init_f32>:
 810777c:	b190      	cbz	r0, 81077a4 <arm_rfft_4096_fast_init_f32+0x28>
 810777e:	4b0b      	ldr	r3, [pc, #44]	; (81077ac <arm_rfft_4096_fast_init_f32+0x30>)
 8107780:	4a0b      	ldr	r2, [pc, #44]	; (81077b0 <arm_rfft_4096_fast_init_f32+0x34>)
 8107782:	8999      	ldrh	r1, [r3, #12]
 8107784:	b430      	push	{r4, r5}
 8107786:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810778a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810778e:	8181      	strh	r1, [r0, #12]
 8107790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8107794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8107798:	8001      	strh	r1, [r0, #0]
 810779a:	8203      	strh	r3, [r0, #16]
 810779c:	6142      	str	r2, [r0, #20]
 810779e:	bc30      	pop	{r4, r5}
 81077a0:	2000      	movs	r0, #0
 81077a2:	4770      	bx	lr
 81077a4:	f04f 30ff 	mov.w	r0, #4294967295
 81077a8:	4770      	bx	lr
 81077aa:	bf00      	nop
 81077ac:	081dc370 	.word	0x081dc370
 81077b0:	081e79c0 	.word	0x081e79c0

081077b4 <arm_radix8_butterfly_f32>:
 81077b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81077b8:	ed2d 8b10 	vpush	{d8-d15}
 81077bc:	b097      	sub	sp, #92	; 0x5c
 81077be:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 81077c2:	4603      	mov	r3, r0
 81077c4:	3304      	adds	r3, #4
 81077c6:	eddf cacb 	vldr	s25, [pc, #812]	; 8107af4 <arm_radix8_butterfly_f32+0x340>
 81077ca:	9014      	str	r0, [sp, #80]	; 0x50
 81077cc:	468a      	mov	sl, r1
 81077ce:	468b      	mov	fp, r1
 81077d0:	9315      	str	r3, [sp, #84]	; 0x54
 81077d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 81077d4:	ea4f 06db 	mov.w	r6, fp, lsr #3
 81077d8:	eb04 1246 	add.w	r2, r4, r6, lsl #5
 81077dc:	eb02 1006 	add.w	r0, r2, r6, lsl #4
 81077e0:	0131      	lsls	r1, r6, #4
 81077e2:	eba6 0386 	sub.w	r3, r6, r6, lsl #2
 81077e6:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 81077ea:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 81077ee:	e9cd 0100 	strd	r0, r1, [sp]
 81077f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 81077f6:	3104      	adds	r1, #4
 81077f8:	f108 0004 	add.w	r0, r8, #4
 81077fc:	9611      	str	r6, [sp, #68]	; 0x44
 81077fe:	4420      	add	r0, r4
 8107800:	4421      	add	r1, r4
 8107802:	012c      	lsls	r4, r5, #4
 8107804:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8107808:	9403      	str	r4, [sp, #12]
 810780a:	00ec      	lsls	r4, r5, #3
 810780c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 810780e:	9404      	str	r4, [sp, #16]
 8107810:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8107814:	9405      	str	r4, [sp, #20]
 8107816:	016c      	lsls	r4, r5, #5
 8107818:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
 810781c:	9402      	str	r4, [sp, #8]
 810781e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8107820:	9c00      	ldr	r4, [sp, #0]
 8107822:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8107826:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 810782a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810782e:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8107832:	f04f 0c00 	mov.w	ip, #0
 8107836:	ed51 aa01 	vldr	s21, [r1, #-4]
 810783a:	edd3 1a00 	vldr	s3, [r3]
 810783e:	ed92 7a00 	vldr	s14, [r2]
 8107842:	ed94 5a00 	vldr	s10, [r4]
 8107846:	ed96 4a00 	vldr	s8, [r6]
 810784a:	edd7 7a00 	vldr	s15, [r7]
 810784e:	ed15 2a01 	vldr	s4, [r5, #-4]
 8107852:	ed50 6a01 	vldr	s13, [r0, #-4]
 8107856:	ee32 ba07 	vadd.f32	s22, s4, s14
 810785a:	ee76 0a84 	vadd.f32	s1, s13, s8
 810785e:	ee7a 5a85 	vadd.f32	s11, s21, s10
 8107862:	ee31 0aa7 	vadd.f32	s0, s3, s15
 8107866:	ee3b 6a25 	vadd.f32	s12, s22, s11
 810786a:	ee70 4a80 	vadd.f32	s9, s1, s0
 810786e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8107872:	ee36 4a24 	vadd.f32	s8, s12, s9
 8107876:	ee36 6a64 	vsub.f32	s12, s12, s9
 810787a:	ed05 4a01 	vstr	s8, [r5, #-4]
 810787e:	ed82 6a00 	vstr	s12, [r2]
 8107882:	edd0 ba00 	vldr	s23, [r0]
 8107886:	edd6 2a01 	vldr	s5, [r6, #4]
 810788a:	edd3 9a01 	vldr	s19, [r3, #4]
 810788e:	ed95 aa00 	vldr	s20, [r5]
 8107892:	ed92 6a01 	vldr	s12, [r2, #4]
 8107896:	ed97 3a01 	vldr	s6, [r7, #4]
 810789a:	ed91 ca00 	vldr	s24, [r1]
 810789e:	edd4 4a01 	vldr	s9, [r4, #4]
 81078a2:	ee7b 3ae2 	vsub.f32	s7, s23, s5
 81078a6:	ee36 9ae1 	vsub.f32	s18, s13, s3
 81078aa:	ee32 2a47 	vsub.f32	s4, s4, s14
 81078ae:	ee73 8ae9 	vsub.f32	s17, s7, s19
 81078b2:	ee3a 4a46 	vsub.f32	s8, s20, s12
 81078b6:	ee39 9a27 	vadd.f32	s18, s18, s15
 81078ba:	ee78 8a83 	vadd.f32	s17, s17, s6
 81078be:	eeb0 8a42 	vmov.f32	s16, s4
 81078c2:	eea9 8a6c 	vfms.f32	s16, s18, s25
 81078c6:	44dc      	add	ip, fp
 81078c8:	45e2      	cmp	sl, ip
 81078ca:	ee73 3ac3 	vsub.f32	s7, s7, s6
 81078ce:	eeb0 1a44 	vmov.f32	s2, s8
 81078d2:	eea8 1aec 	vfms.f32	s2, s17, s25
 81078d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81078da:	ee33 7aa9 	vadd.f32	s14, s7, s19
 81078de:	ee7c 3a64 	vsub.f32	s7, s24, s9
 81078e2:	ee77 7aa1 	vadd.f32	s15, s15, s3
 81078e6:	ee3a 6a06 	vadd.f32	s12, s20, s12
 81078ea:	ee7a 1ac5 	vsub.f32	s3, s21, s10
 81078ee:	ee3c aa24 	vadd.f32	s20, s24, s9
 81078f2:	ee74 4acc 	vsub.f32	s9, s9, s24
 81078f6:	ee39 3a83 	vadd.f32	s6, s19, s6
 81078fa:	ee35 5a6a 	vsub.f32	s10, s10, s21
 81078fe:	eef0 9a63 	vmov.f32	s19, s7
 8107902:	eef0 aa48 	vmov.f32	s21, s16
 8107906:	eee7 9a2c 	vfma.f32	s19, s14, s25
 810790a:	eea8 4aac 	vfma.f32	s8, s17, s25
 810790e:	eee7 4a2c 	vfma.f32	s9, s14, s25
 8107912:	eee7 aa6c 	vfms.f32	s21, s14, s25
 8107916:	eef0 8a41 	vmov.f32	s17, s2
 810791a:	eeb0 7a42 	vmov.f32	s14, s4
 810791e:	eeb0 2a61 	vmov.f32	s4, s3
 8107922:	ee7b 6a65 	vsub.f32	s13, s22, s11
 8107926:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 810792a:	ee76 5a4a 	vsub.f32	s11, s12, s20
 810792e:	eea9 7a2c 	vfma.f32	s14, s18, s25
 8107932:	eea7 2aac 	vfma.f32	s4, s15, s25
 8107936:	eea7 5aac 	vfma.f32	s10, s15, s25
 810793a:	eee7 8aec 	vfms.f32	s17, s15, s25
 810793e:	ee32 ba83 	vadd.f32	s22, s5, s6
 8107942:	ee76 bac3 	vsub.f32	s23, s13, s6
 8107946:	ee35 9ae0 	vsub.f32	s18, s11, s1
 810794a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 810794e:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8107952:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8107956:	ee36 aa0b 	vadd.f32	s20, s12, s22
 810795a:	ee76 6a83 	vadd.f32	s13, s13, s6
 810795e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8107962:	ee34 3a42 	vsub.f32	s6, s8, s4
 8107966:	ee77 0a29 	vadd.f32	s1, s14, s19
 810796a:	ee36 6a4b 	vsub.f32	s12, s12, s22
 810796e:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 8107972:	ee39 0a00 	vadd.f32	s0, s18, s0
 8107976:	ee73 3aaa 	vadd.f32	s7, s7, s21
 810797a:	ee78 4a24 	vadd.f32	s9, s16, s9
 810797e:	ee37 7a69 	vsub.f32	s14, s14, s19
 8107982:	ee31 5a05 	vadd.f32	s10, s2, s10
 8107986:	ee71 5aa8 	vadd.f32	s11, s3, s17
 810798a:	ee32 4a04 	vadd.f32	s8, s4, s8
 810798e:	ed85 aa00 	vstr	s20, [r5]
 8107992:	ed82 6a01 	vstr	s12, [r2, #4]
 8107996:	444d      	add	r5, r9
 8107998:	ed41 2a01 	vstr	s5, [r1, #-4]
 810799c:	444a      	add	r2, r9
 810799e:	edc4 6a00 	vstr	s13, [r4]
 81079a2:	ed81 0a00 	vstr	s0, [r1]
 81079a6:	edc4 7a01 	vstr	s15, [r4, #4]
 81079aa:	4449      	add	r1, r9
 81079ac:	ed40 0a01 	vstr	s1, [r0, #-4]
 81079b0:	444c      	add	r4, r9
 81079b2:	ed87 7a00 	vstr	s14, [r7]
 81079b6:	edc6 3a00 	vstr	s7, [r6]
 81079ba:	edc3 4a00 	vstr	s9, [r3]
 81079be:	ed80 3a00 	vstr	s6, [r0]
 81079c2:	ed87 4a01 	vstr	s8, [r7, #4]
 81079c6:	4448      	add	r0, r9
 81079c8:	ed86 5a01 	vstr	s10, [r6, #4]
 81079cc:	444f      	add	r7, r9
 81079ce:	edc3 5a01 	vstr	s11, [r3, #4]
 81079d2:	444e      	add	r6, r9
 81079d4:	444b      	add	r3, r9
 81079d6:	f63f af2e 	bhi.w	8107836 <arm_radix8_butterfly_f32+0x82>
 81079da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81079dc:	2b07      	cmp	r3, #7
 81079de:	f240 81c9 	bls.w	8107d74 <arm_radix8_butterfly_f32+0x5c0>
 81079e2:	9d02      	ldr	r5, [sp, #8]
 81079e4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 81079e6:	9b01      	ldr	r3, [sp, #4]
 81079e8:	9803      	ldr	r0, [sp, #12]
 81079ea:	9904      	ldr	r1, [sp, #16]
 81079ec:	9a05      	ldr	r2, [sp, #20]
 81079ee:	3508      	adds	r5, #8
 81079f0:	1975      	adds	r5, r6, r5
 81079f2:	330c      	adds	r3, #12
 81079f4:	950e      	str	r5, [sp, #56]	; 0x38
 81079f6:	4635      	mov	r5, r6
 81079f8:	18eb      	adds	r3, r5, r3
 81079fa:	f108 0808 	add.w	r8, r8, #8
 81079fe:	f10e 0408 	add.w	r4, lr, #8
 8107a02:	3008      	adds	r0, #8
 8107a04:	3108      	adds	r1, #8
 8107a06:	3208      	adds	r2, #8
 8107a08:	9307      	str	r3, [sp, #28]
 8107a0a:	f105 030c 	add.w	r3, r5, #12
 8107a0e:	4446      	add	r6, r8
 8107a10:	f04f 0e00 	mov.w	lr, #0
 8107a14:	192c      	adds	r4, r5, r4
 8107a16:	1828      	adds	r0, r5, r0
 8107a18:	1869      	adds	r1, r5, r1
 8107a1a:	18aa      	adds	r2, r5, r2
 8107a1c:	9308      	str	r3, [sp, #32]
 8107a1e:	465b      	mov	r3, fp
 8107a20:	960d      	str	r6, [sp, #52]	; 0x34
 8107a22:	46f3      	mov	fp, lr
 8107a24:	940c      	str	r4, [sp, #48]	; 0x30
 8107a26:	900b      	str	r0, [sp, #44]	; 0x2c
 8107a28:	910a      	str	r1, [sp, #40]	; 0x28
 8107a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8107a2c:	f04f 0801 	mov.w	r8, #1
 8107a30:	469e      	mov	lr, r3
 8107a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8107a34:	449b      	add	fp, r3
 8107a36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8107a38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8107a3c:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8107a40:	9310      	str	r3, [sp, #64]	; 0x40
 8107a42:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 8107a46:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8107a4a:	9102      	str	r1, [sp, #8]
 8107a4c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8107a50:	eb01 05cb 	add.w	r5, r1, fp, lsl #3
 8107a54:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8107a58:	edd6 7a00 	vldr	s15, [r6]
 8107a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8107a5e:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8107a62:	9101      	str	r1, [sp, #4]
 8107a64:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8107a68:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
 8107a6c:	edd3 aa01 	vldr	s21, [r3, #4]
 8107a70:	edcd 7a06 	vstr	s15, [sp, #24]
 8107a74:	9b01      	ldr	r3, [sp, #4]
 8107a76:	edd5 7a00 	vldr	s15, [r5]
 8107a7a:	ed97 ba01 	vldr	s22, [r7, #4]
 8107a7e:	edcd 7a05 	vstr	s15, [sp, #20]
 8107a82:	edd3 7a00 	vldr	s15, [r3]
 8107a86:	9b02      	ldr	r3, [sp, #8]
 8107a88:	edcd 7a04 	vstr	s15, [sp, #16]
 8107a8c:	edd3 7a00 	vldr	s15, [r3]
 8107a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8107a92:	edcd 7a03 	vstr	s15, [sp, #12]
 8107a96:	eb07 0ccb 	add.w	ip, r7, fp, lsl #3
 8107a9a:	edd3 7a00 	vldr	s15, [r3]
 8107a9e:	eddc ba01 	vldr	s23, [ip, #4]
 8107aa2:	edcd 7a02 	vstr	s15, [sp, #8]
 8107aa6:	eb0c 01cb 	add.w	r1, ip, fp, lsl #3
 8107aaa:	edd2 7a00 	vldr	s15, [r2]
 8107aae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8107ab0:	9100      	str	r1, [sp, #0]
 8107ab2:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
 8107ab6:	4601      	mov	r1, r0
 8107ab8:	ed91 da01 	vldr	s26, [r1, #4]
 8107abc:	edcd 7a01 	vstr	s15, [sp, #4]
 8107ac0:	9900      	ldr	r1, [sp, #0]
 8107ac2:	edd2 7a00 	vldr	s15, [r2]
 8107ac6:	ed91 ca01 	vldr	s24, [r1, #4]
 8107aca:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 8107ace:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8107ad2:	ed94 ea01 	vldr	s28, [r4, #4]
 8107ad6:	edd0 da01 	vldr	s27, [r0, #4]
 8107ada:	edcd 7a00 	vstr	s15, [sp]
 8107ade:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 8107ae2:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
 8107ae6:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 8107aea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8107aee:	46c4      	mov	ip, r8
 8107af0:	e002      	b.n	8107af8 <arm_radix8_butterfly_f32+0x344>
 8107af2:	bf00      	nop
 8107af4:	3f3504f3 	.word	0x3f3504f3
 8107af8:	ed94 9a00 	vldr	s18, [r4]
 8107afc:	ed90 fa00 	vldr	s30, [r0]
 8107b00:	ed91 6a00 	vldr	s12, [r1]
 8107b04:	edd5 7a00 	vldr	s15, [r5]
 8107b08:	edd3 6a00 	vldr	s13, [r3]
 8107b0c:	ed57 4a01 	vldr	s9, [r7, #-4]
 8107b10:	ed92 5a00 	vldr	s10, [r2]
 8107b14:	ed56 3a01 	vldr	s7, [r6, #-4]
 8107b18:	ed96 aa00 	vldr	s20, [r6]
 8107b1c:	ee35 0a06 	vadd.f32	s0, s10, s12
 8107b20:	ee73 5aa6 	vadd.f32	s11, s7, s13
 8107b24:	ee39 8a27 	vadd.f32	s16, s18, s15
 8107b28:	ee34 7a8f 	vadd.f32	s14, s9, s30
 8107b2c:	ee70 2a08 	vadd.f32	s5, s0, s16
 8107b30:	ee75 ea87 	vadd.f32	s29, s11, s14
 8107b34:	ee35 5a46 	vsub.f32	s10, s10, s12
 8107b38:	ee3e 6aa2 	vadd.f32	s12, s29, s5
 8107b3c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8107b40:	ed06 6a01 	vstr	s12, [r6, #-4]
 8107b44:	edd1 9a01 	vldr	s19, [r1, #4]
 8107b48:	edd2 fa01 	vldr	s31, [r2, #4]
 8107b4c:	edd4 6a01 	vldr	s13, [r4, #4]
 8107b50:	edd3 1a01 	vldr	s3, [r3, #4]
 8107b54:	ed95 3a01 	vldr	s6, [r5, #4]
 8107b58:	edd0 8a01 	vldr	s17, [r0, #4]
 8107b5c:	ed97 4a00 	vldr	s8, [r7]
 8107b60:	ee3f 6ae9 	vsub.f32	s12, s31, s19
 8107b64:	ee35 1a49 	vsub.f32	s2, s10, s18
 8107b68:	ee76 0a66 	vsub.f32	s1, s12, s13
 8107b6c:	ee31 1a27 	vadd.f32	s2, s2, s15
 8107b70:	ee3a 2a61 	vsub.f32	s4, s20, s3
 8107b74:	ee75 7a67 	vsub.f32	s15, s10, s15
 8107b78:	ee70 0a83 	vadd.f32	s1, s1, s6
 8107b7c:	ee3f 5aa9 	vadd.f32	s10, s31, s19
 8107b80:	ee74 9acf 	vsub.f32	s19, s9, s30
 8107b84:	ee77 7a89 	vadd.f32	s15, s15, s18
 8107b88:	ee7a 1a21 	vadd.f32	s3, s20, s3
 8107b8c:	eeb0 aa42 	vmov.f32	s20, s4
 8107b90:	ee74 fa68 	vsub.f32	s31, s8, s17
 8107b94:	eea0 aaec 	vfms.f32	s20, s1, s25
 8107b98:	44f4      	add	ip, lr
 8107b9a:	45e2      	cmp	sl, ip
 8107b9c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8107ba0:	eeb0 9a63 	vmov.f32	s18, s7
 8107ba4:	ee74 5a28 	vadd.f32	s11, s8, s17
 8107ba8:	ee38 4ac4 	vsub.f32	s8, s17, s8
 8107bac:	eef0 8a69 	vmov.f32	s17, s19
 8107bb0:	eea1 9a6c 	vfms.f32	s18, s2, s25
 8107bb4:	eee7 8aac 	vfma.f32	s17, s15, s25
 8107bb8:	ee36 6a43 	vsub.f32	s12, s12, s6
 8107bbc:	ee7f 4a64 	vsub.f32	s9, s30, s9
 8107bc0:	ee36 6a26 	vadd.f32	s12, s12, s13
 8107bc4:	eea0 2aac 	vfma.f32	s4, s1, s25
 8107bc8:	eef0 0a4a 	vmov.f32	s1, s20
 8107bcc:	eee7 0aec 	vfms.f32	s1, s15, s25
 8107bd0:	eee7 4aac 	vfma.f32	s9, s15, s25
 8107bd4:	eef0 7a68 	vmov.f32	s15, s17
 8107bd8:	eef0 8a49 	vmov.f32	s17, s18
 8107bdc:	ee36 3a83 	vadd.f32	s6, s13, s6
 8107be0:	eee6 8a6c 	vfms.f32	s17, s12, s25
 8107be4:	eee1 3a2c 	vfma.f32	s7, s2, s25
 8107be8:	eeb0 1a6f 	vmov.f32	s2, s31
 8107bec:	eea6 1a2c 	vfma.f32	s2, s12, s25
 8107bf0:	ee71 6ae5 	vsub.f32	s13, s3, s11
 8107bf4:	eea6 4a2c 	vfma.f32	s8, s12, s25
 8107bf8:	ee71 5aa5 	vadd.f32	s11, s3, s11
 8107bfc:	ee75 1a03 	vadd.f32	s3, s10, s6
 8107c00:	ee7e 2ae2 	vsub.f32	s5, s29, s5
 8107c04:	ee37 fa43 	vsub.f32	s30, s14, s6
 8107c08:	ee75 eae1 	vsub.f32	s29, s11, s3
 8107c0c:	eeb0 6a68 	vmov.f32	s12, s17
 8107c10:	ee76 8ac0 	vsub.f32	s17, s13, s0
 8107c14:	ee34 4a09 	vadd.f32	s8, s8, s18
 8107c18:	ee76 fa2f 	vadd.f32	s31, s12, s31
 8107c1c:	ee76 6ac8 	vsub.f32	s13, s13, s16
 8107c20:	ee33 6a81 	vadd.f32	s12, s7, s2
 8107c24:	ee38 8a88 	vadd.f32	s16, s17, s16
 8107c28:	ee73 3ac1 	vsub.f32	s7, s7, s2
 8107c2c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8107c30:	ee2c 1a2e 	vmul.f32	s2, s24, s29
 8107c34:	ee3f 5a05 	vadd.f32	s10, s30, s10
 8107c38:	ee22 9acc 	vnmul.f32	s18, s5, s24
 8107c3c:	ed9d fa03 	vldr	s30, [sp, #12]
 8107c40:	ee70 6a26 	vadd.f32	s13, s0, s13
 8107c44:	ee33 7a07 	vadd.f32	s14, s6, s14
 8107c48:	eeaf 1a22 	vfma.f32	s2, s30, s5
 8107c4c:	eeaf 9a2e 	vfma.f32	s18, s30, s29
 8107c50:	ee7a 4a24 	vadd.f32	s9, s20, s9
 8107c54:	ed9d fa01 	vldr	s30, [sp, #4]
 8107c58:	ee79 9aa0 	vadd.f32	s19, s19, s1
 8107c5c:	ee25 aa4b 	vnmul.f32	s20, s10, s22
 8107c60:	ee72 0a67 	vsub.f32	s1, s4, s15
 8107c64:	ee37 2a82 	vadd.f32	s4, s15, s4
 8107c68:	ee6b 7a08 	vmul.f32	s15, s22, s16
 8107c6c:	eeaf aa08 	vfma.f32	s20, s30, s16
 8107c70:	eeef 7a05 	vfma.f32	s15, s30, s10
 8107c74:	ee2d 3aa6 	vmul.f32	s6, s27, s13
 8107c78:	ed9d fa05 	vldr	s30, [sp, #20]
 8107c7c:	ee67 8a6d 	vnmul.f32	s17, s14, s27
 8107c80:	eeaf 3a07 	vfma.f32	s6, s30, s14
 8107c84:	eeef 8a26 	vfma.f32	s17, s30, s13
 8107c88:	ee66 2a6a 	vnmul.f32	s5, s12, s21
 8107c8c:	ed9d fa00 	vldr	s30, [sp]
 8107c90:	ee2a 0aa0 	vmul.f32	s0, s21, s1
 8107c94:	eeef 2a20 	vfma.f32	s5, s30, s1
 8107c98:	ee6e ea02 	vmul.f32	s29, s28, s4
 8107c9c:	eddd 0a06 	vldr	s1, [sp, #24]
 8107ca0:	ee23 5ace 	vnmul.f32	s10, s7, s28
 8107ca4:	eee0 eaa3 	vfma.f32	s29, s1, s7
 8107ca8:	ee2b 8aa9 	vmul.f32	s16, s23, s19
 8107cac:	eddd 3a02 	vldr	s7, [sp, #8]
 8107cb0:	eeaf 0a06 	vfma.f32	s0, s30, s12
 8107cb4:	eea3 8a84 	vfma.f32	s16, s7, s8
 8107cb8:	ee24 7a6b 	vnmul.f32	s14, s8, s23
 8107cbc:	ee6d 6a24 	vmul.f32	s13, s26, s9
 8107cc0:	ed9d 4a04 	vldr	s8, [sp, #16]
 8107cc4:	ee2f 6acd 	vnmul.f32	s12, s31, s26
 8107cc8:	eea0 5a82 	vfma.f32	s10, s1, s4
 8107ccc:	eea3 7aa9 	vfma.f32	s14, s7, s19
 8107cd0:	eee4 6a2f 	vfma.f32	s13, s8, s31
 8107cd4:	eea4 6a24 	vfma.f32	s12, s8, s9
 8107cd8:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8107cdc:	edc6 5a00 	vstr	s11, [r6]
 8107ce0:	ed83 1a00 	vstr	s2, [r3]
 8107ce4:	ed83 9a01 	vstr	s18, [r3, #4]
 8107ce8:	444e      	add	r6, r9
 8107cea:	ed47 7a01 	vstr	s15, [r7, #-4]
 8107cee:	ed87 aa00 	vstr	s20, [r7]
 8107cf2:	444b      	add	r3, r9
 8107cf4:	ed80 3a00 	vstr	s6, [r0]
 8107cf8:	edc0 8a01 	vstr	s17, [r0, #4]
 8107cfc:	444f      	add	r7, r9
 8107cfe:	ed82 0a00 	vstr	s0, [r2]
 8107d02:	4448      	add	r0, r9
 8107d04:	edc2 2a01 	vstr	s5, [r2, #4]
 8107d08:	edc5 ea00 	vstr	s29, [r5]
 8107d0c:	ed85 5a01 	vstr	s10, [r5, #4]
 8107d10:	444a      	add	r2, r9
 8107d12:	edc1 6a00 	vstr	s13, [r1]
 8107d16:	ed81 6a01 	vstr	s12, [r1, #4]
 8107d1a:	444d      	add	r5, r9
 8107d1c:	ed84 8a00 	vstr	s16, [r4]
 8107d20:	ed84 7a01 	vstr	s14, [r4, #4]
 8107d24:	4449      	add	r1, r9
 8107d26:	444c      	add	r4, r9
 8107d28:	f63f aee6 	bhi.w	8107af8 <arm_radix8_butterfly_f32+0x344>
 8107d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8107d2e:	3308      	adds	r3, #8
 8107d30:	930e      	str	r3, [sp, #56]	; 0x38
 8107d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107d34:	3308      	adds	r3, #8
 8107d36:	930d      	str	r3, [sp, #52]	; 0x34
 8107d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8107d3a:	3308      	adds	r3, #8
 8107d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8107d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107d40:	3308      	adds	r3, #8
 8107d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8107d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107d46:	3308      	adds	r3, #8
 8107d48:	930a      	str	r3, [sp, #40]	; 0x28
 8107d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107d4c:	3308      	adds	r3, #8
 8107d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8107d50:	9b08      	ldr	r3, [sp, #32]
 8107d52:	3308      	adds	r3, #8
 8107d54:	9308      	str	r3, [sp, #32]
 8107d56:	9b07      	ldr	r3, [sp, #28]
 8107d58:	3308      	adds	r3, #8
 8107d5a:	9307      	str	r3, [sp, #28]
 8107d5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8107d5e:	f108 0801 	add.w	r8, r8, #1
 8107d62:	4543      	cmp	r3, r8
 8107d64:	f47f ae65 	bne.w	8107a32 <arm_radix8_butterfly_f32+0x27e>
 8107d68:	469b      	mov	fp, r3
 8107d6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8107d6c:	00db      	lsls	r3, r3, #3
 8107d6e:	b29b      	uxth	r3, r3
 8107d70:	9312      	str	r3, [sp, #72]	; 0x48
 8107d72:	e52e      	b.n	81077d2 <arm_radix8_butterfly_f32+0x1e>
 8107d74:	b017      	add	sp, #92	; 0x5c
 8107d76:	ecbd 8b10 	vpop	{d8-d15}
 8107d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107d7e:	bf00      	nop

08107d80 <arm_cfft_radix8by2_f32>:
 8107d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107d84:	f8b0 e000 	ldrh.w	lr, [r0]
 8107d88:	6842      	ldr	r2, [r0, #4]
 8107d8a:	ed2d 8b08 	vpush	{d8-d11}
 8107d8e:	4607      	mov	r7, r0
 8107d90:	4608      	mov	r0, r1
 8107d92:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8107d96:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8107d9a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8107d9e:	b082      	sub	sp, #8
 8107da0:	f000 80a0 	beq.w	8107ee4 <arm_cfft_radix8by2_f32+0x164>
 8107da4:	008c      	lsls	r4, r1, #2
 8107da6:	3410      	adds	r4, #16
 8107da8:	f100 0310 	add.w	r3, r0, #16
 8107dac:	1906      	adds	r6, r0, r4
 8107dae:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8107db2:	4444      	add	r4, r8
 8107db4:	f102 0c10 	add.w	ip, r2, #16
 8107db8:	f108 0510 	add.w	r5, r8, #16
 8107dbc:	ed15 2a04 	vldr	s4, [r5, #-16]
 8107dc0:	ed55 2a03 	vldr	s5, [r5, #-12]
 8107dc4:	ed14 5a04 	vldr	s10, [r4, #-16]
 8107dc8:	ed54 5a03 	vldr	s11, [r4, #-12]
 8107dcc:	ed53 4a04 	vldr	s9, [r3, #-16]
 8107dd0:	ed55 8a02 	vldr	s17, [r5, #-8]
 8107dd4:	ed15 8a01 	vldr	s16, [r5, #-4]
 8107dd8:	ed16 3a04 	vldr	s6, [r6, #-16]
 8107ddc:	ed56 3a03 	vldr	s7, [r6, #-12]
 8107de0:	ed54 7a02 	vldr	s15, [r4, #-8]
 8107de4:	ed14 7a01 	vldr	s14, [r4, #-4]
 8107de8:	ed13 4a03 	vldr	s8, [r3, #-12]
 8107dec:	ed53 6a02 	vldr	s13, [r3, #-8]
 8107df0:	ed13 6a01 	vldr	s12, [r3, #-4]
 8107df4:	ed16 0a02 	vldr	s0, [r6, #-8]
 8107df8:	ed56 0a01 	vldr	s1, [r6, #-4]
 8107dfc:	ee74 ba82 	vadd.f32	s23, s9, s4
 8107e00:	ee34 ba22 	vadd.f32	s22, s8, s5
 8107e04:	ee73 9a05 	vadd.f32	s19, s6, s10
 8107e08:	ee33 9aa5 	vadd.f32	s18, s7, s11
 8107e0c:	ee30 1a27 	vadd.f32	s2, s0, s15
 8107e10:	ee70 1a87 	vadd.f32	s3, s1, s14
 8107e14:	ee76 aaa8 	vadd.f32	s21, s13, s17
 8107e18:	ee36 aa08 	vadd.f32	s20, s12, s16
 8107e1c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8107e20:	ed03 ba03 	vstr	s22, [r3, #-12]
 8107e24:	ed43 aa02 	vstr	s21, [r3, #-8]
 8107e28:	ed03 aa01 	vstr	s20, [r3, #-4]
 8107e2c:	ed06 1a02 	vstr	s2, [r6, #-8]
 8107e30:	ed46 1a01 	vstr	s3, [r6, #-4]
 8107e34:	ed46 9a04 	vstr	s19, [r6, #-16]
 8107e38:	ed06 9a03 	vstr	s18, [r6, #-12]
 8107e3c:	ee74 4ac2 	vsub.f32	s9, s9, s4
 8107e40:	ee34 4a62 	vsub.f32	s8, s8, s5
 8107e44:	ee35 5a43 	vsub.f32	s10, s10, s6
 8107e48:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8107e4c:	ed1c 3a04 	vldr	s6, [ip, #-16]
 8107e50:	ed5c 3a03 	vldr	s7, [ip, #-12]
 8107e54:	ee23 2a65 	vnmul.f32	s4, s6, s11
 8107e58:	ee64 1a23 	vmul.f32	s3, s8, s7
 8107e5c:	ee23 1ae4 	vnmul.f32	s2, s7, s9
 8107e60:	ee65 2a03 	vmul.f32	s5, s10, s6
 8107e64:	eea4 1a03 	vfma.f32	s2, s8, s6
 8107e68:	3310      	adds	r3, #16
 8107e6a:	4573      	cmp	r3, lr
 8107e6c:	eee4 1a83 	vfma.f32	s3, s9, s6
 8107e70:	f106 0610 	add.w	r6, r6, #16
 8107e74:	f10c 0c10 	add.w	ip, ip, #16
 8107e78:	eea5 2a23 	vfma.f32	s4, s10, s7
 8107e7c:	f105 0510 	add.w	r5, r5, #16
 8107e80:	f104 0410 	add.w	r4, r4, #16
 8107e84:	eee5 2aa3 	vfma.f32	s5, s11, s7
 8107e88:	ed05 1a07 	vstr	s2, [r5, #-28]	; 0xffffffe4
 8107e8c:	ed45 1a08 	vstr	s3, [r5, #-32]	; 0xffffffe0
 8107e90:	ed04 2a08 	vstr	s4, [r4, #-32]	; 0xffffffe0
 8107e94:	ed44 2a07 	vstr	s5, [r4, #-28]	; 0xffffffe4
 8107e98:	ed5c 5a05 	vldr	s11, [ip, #-20]	; 0xffffffec
 8107e9c:	ed1c 5a06 	vldr	s10, [ip, #-24]	; 0xffffffe8
 8107ea0:	ee76 6ae8 	vsub.f32	s13, s13, s17
 8107ea4:	ee36 6a48 	vsub.f32	s12, s12, s16
 8107ea8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8107eac:	ee37 7a60 	vsub.f32	s14, s14, s1
 8107eb0:	ee26 3a25 	vmul.f32	s6, s12, s11
 8107eb4:	ee65 3ae6 	vnmul.f32	s7, s11, s13
 8107eb8:	ee27 4a85 	vmul.f32	s8, s15, s10
 8107ebc:	ee65 4a47 	vnmul.f32	s9, s10, s14
 8107ec0:	eee6 3a05 	vfma.f32	s7, s12, s10
 8107ec4:	eea6 3a85 	vfma.f32	s6, s13, s10
 8107ec8:	eea7 4a25 	vfma.f32	s8, s14, s11
 8107ecc:	eee7 4aa5 	vfma.f32	s9, s15, s11
 8107ed0:	ed05 3a06 	vstr	s6, [r5, #-24]	; 0xffffffe8
 8107ed4:	ed45 3a05 	vstr	s7, [r5, #-20]	; 0xffffffec
 8107ed8:	ed04 4a05 	vstr	s8, [r4, #-20]	; 0xffffffec
 8107edc:	ed44 4a06 	vstr	s9, [r4, #-24]	; 0xffffffe8
 8107ee0:	f47f af6c 	bne.w	8107dbc <arm_cfft_radix8by2_f32+0x3c>
 8107ee4:	b289      	uxth	r1, r1
 8107ee6:	2302      	movs	r3, #2
 8107ee8:	9101      	str	r1, [sp, #4]
 8107eea:	f7ff fc63 	bl	81077b4 <arm_radix8_butterfly_f32>
 8107eee:	9901      	ldr	r1, [sp, #4]
 8107ef0:	687a      	ldr	r2, [r7, #4]
 8107ef2:	4640      	mov	r0, r8
 8107ef4:	2302      	movs	r3, #2
 8107ef6:	b002      	add	sp, #8
 8107ef8:	ecbd 8b08 	vpop	{d8-d11}
 8107efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107f00:	f7ff bc58 	b.w	81077b4 <arm_radix8_butterfly_f32>

08107f04 <arm_cfft_radix8by4_f32>:
 8107f04:	8803      	ldrh	r3, [r0, #0]
 8107f06:	ed91 7a00 	vldr	s14, [r1]
 8107f0a:	edd1 7a01 	vldr	s15, [r1, #4]
 8107f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107f12:	085b      	lsrs	r3, r3, #1
 8107f14:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8107f18:	edd2 5a00 	vldr	s11, [r2]
 8107f1c:	6847      	ldr	r7, [r0, #4]
 8107f1e:	ed92 4a01 	vldr	s8, [r2, #4]
 8107f22:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8107f26:	ed2d 8b0e 	vpush	{d8-d14}
 8107f2a:	ed98 5a00 	vldr	s10, [r8]
 8107f2e:	edd8 2a01 	vldr	s5, [r8, #4]
 8107f32:	ee37 6a25 	vadd.f32	s12, s14, s11
 8107f36:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 8107f3a:	edd5 4a00 	vldr	s9, [r5]
 8107f3e:	ed95 3a01 	vldr	s6, [r5, #4]
 8107f42:	ee75 6a06 	vadd.f32	s13, s10, s12
 8107f46:	b08f      	sub	sp, #60	; 0x3c
 8107f48:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8107f4c:	900d      	str	r0, [sp, #52]	; 0x34
 8107f4e:	4608      	mov	r0, r1
 8107f50:	edc0 6a00 	vstr	s13, [r0]
 8107f54:	ee37 7a65 	vsub.f32	s14, s14, s11
 8107f58:	ee77 6a84 	vadd.f32	s13, s15, s8
 8107f5c:	edd8 5a01 	vldr	s11, [r8, #4]
 8107f60:	ed95 2a01 	vldr	s4, [r5, #4]
 8107f64:	920a      	str	r2, [sp, #40]	; 0x28
 8107f66:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8107f6a:	ee36 6a64 	vsub.f32	s12, s12, s9
 8107f6e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8107f72:	ee73 3a07 	vadd.f32	s7, s6, s14
 8107f76:	ee35 4a27 	vadd.f32	s8, s10, s15
 8107f7a:	4614      	mov	r4, r2
 8107f7c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8107f80:	3408      	adds	r4, #8
 8107f82:	462e      	mov	r6, r5
 8107f84:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8107f88:	3108      	adds	r1, #8
 8107f8a:	3608      	adds	r6, #8
 8107f8c:	9406      	str	r4, [sp, #24]
 8107f8e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8107f92:	ee36 6a45 	vsub.f32	s12, s12, s10
 8107f96:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8107f9a:	ee75 5a82 	vadd.f32	s11, s11, s4
 8107f9e:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8107fa2:	ee74 4a64 	vsub.f32	s9, s8, s9
 8107fa6:	463c      	mov	r4, r7
 8107fa8:	9103      	str	r1, [sp, #12]
 8107faa:	9607      	str	r6, [sp, #28]
 8107fac:	4611      	mov	r1, r2
 8107fae:	f107 0608 	add.w	r6, r7, #8
 8107fb2:	085a      	lsrs	r2, r3, #1
 8107fb4:	3418      	adds	r4, #24
 8107fb6:	edc0 5a01 	vstr	s11, [r0, #4]
 8107fba:	920c      	str	r2, [sp, #48]	; 0x30
 8107fbc:	edc5 3a00 	vstr	s7, [r5]
 8107fc0:	edc5 4a01 	vstr	s9, [r5, #4]
 8107fc4:	9602      	str	r6, [sp, #8]
 8107fc6:	ed81 6a00 	vstr	s12, [r1]
 8107fca:	edc1 6a01 	vstr	s13, [r1, #4]
 8107fce:	9401      	str	r4, [sp, #4]
 8107fd0:	ee37 7a43 	vsub.f32	s14, s14, s6
 8107fd4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8107fd8:	3a02      	subs	r2, #2
 8107fda:	463e      	mov	r6, r7
 8107fdc:	460c      	mov	r4, r1
 8107fde:	4641      	mov	r1, r8
 8107fe0:	3610      	adds	r6, #16
 8107fe2:	3108      	adds	r1, #8
 8107fe4:	0852      	lsrs	r2, r2, #1
 8107fe6:	970b      	str	r7, [sp, #44]	; 0x2c
 8107fe8:	9509      	str	r5, [sp, #36]	; 0x24
 8107fea:	9604      	str	r6, [sp, #16]
 8107fec:	ed88 7a00 	vstr	s14, [r8]
 8107ff0:	9105      	str	r1, [sp, #20]
 8107ff2:	edc8 7a01 	vstr	s15, [r8, #4]
 8107ff6:	9208      	str	r2, [sp, #32]
 8107ff8:	f000 812f 	beq.w	810825a <arm_cfft_radix8by4_f32+0x356>
 8107ffc:	4639      	mov	r1, r7
 8107ffe:	009b      	lsls	r3, r3, #2
 8108000:	4622      	mov	r2, r4
 8108002:	3b0c      	subs	r3, #12
 8108004:	f101 0930 	add.w	r9, r1, #48	; 0x30
 8108008:	9908      	ldr	r1, [sp, #32]
 810800a:	f1a5 0c0c 	sub.w	ip, r5, #12
 810800e:	46b3      	mov	fp, r6
 8108010:	f107 0a20 	add.w	sl, r7, #32
 8108014:	4443      	add	r3, r8
 8108016:	f102 0710 	add.w	r7, r2, #16
 810801a:	f100 0e10 	add.w	lr, r0, #16
 810801e:	3510      	adds	r5, #16
 8108020:	3c0c      	subs	r4, #12
 8108022:	f1a8 060c 	sub.w	r6, r8, #12
 8108026:	f108 0210 	add.w	r2, r8, #16
 810802a:	ed12 5a02 	vldr	s10, [r2, #-8]
 810802e:	ed57 6a02 	vldr	s13, [r7, #-8]
 8108032:	ed15 0a02 	vldr	s0, [r5, #-8]
 8108036:	ed5e 5a02 	vldr	s11, [lr, #-8]
 810803a:	ed17 7a01 	vldr	s14, [r7, #-4]
 810803e:	ed52 0a01 	vldr	s1, [r2, #-4]
 8108042:	ed15 9a01 	vldr	s18, [r5, #-4]
 8108046:	ed5e 4a01 	vldr	s9, [lr, #-4]
 810804a:	ee75 3aa6 	vadd.f32	s7, s11, s13
 810804e:	ee70 7a05 	vadd.f32	s15, s0, s10
 8108052:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8108056:	ee77 7aa3 	vadd.f32	s15, s15, s7
 810805a:	ee34 4a87 	vadd.f32	s8, s9, s14
 810805e:	ed4e 7a02 	vstr	s15, [lr, #-8]
 8108062:	ed52 6a01 	vldr	s13, [r2, #-4]
 8108066:	ed55 7a01 	vldr	s15, [r5, #-4]
 810806a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810806e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8108072:	ee77 7a84 	vadd.f32	s15, s15, s8
 8108076:	ee75 dae0 	vsub.f32	s27, s11, s1
 810807a:	ed4e 7a01 	vstr	s15, [lr, #-4]
 810807e:	ed96 7a02 	vldr	s14, [r6, #8]
 8108082:	ed93 ba02 	vldr	s22, [r3, #8]
 8108086:	ed9c 1a02 	vldr	s2, [ip, #8]
 810808a:	edd4 7a02 	vldr	s15, [r4, #8]
 810808e:	edd6 1a01 	vldr	s3, [r6, #4]
 8108092:	edd3 9a01 	vldr	s19, [r3, #4]
 8108096:	edd4 8a01 	vldr	s17, [r4, #4]
 810809a:	ed9c 8a01 	vldr	s16, [ip, #4]
 810809e:	ee71 aa07 	vadd.f32	s21, s2, s14
 81080a2:	ee37 aa8b 	vadd.f32	s20, s15, s22
 81080a6:	ee38 3a21 	vadd.f32	s6, s16, s3
 81080aa:	ee7a 2a8a 	vadd.f32	s5, s21, s20
 81080ae:	ee37 6acb 	vsub.f32	s12, s15, s22
 81080b2:	edcc 2a02 	vstr	s5, [ip, #8]
 81080b6:	edd3 2a01 	vldr	s5, [r3, #4]
 81080ba:	ed94 2a01 	vldr	s4, [r4, #4]
 81080be:	ee32 2a22 	vadd.f32	s4, s4, s5
 81080c2:	ee71 2a29 	vadd.f32	s5, s2, s19
 81080c6:	ee32 2a03 	vadd.f32	s4, s4, s6
 81080ca:	ee72 2ac7 	vsub.f32	s5, s5, s14
 81080ce:	ed8c 2a01 	vstr	s4, [ip, #4]
 81080d2:	ee74 6ac0 	vsub.f32	s13, s9, s0
 81080d6:	ee36 ca61 	vsub.f32	s24, s12, s3
 81080da:	ed5b ba01 	vldr	s23, [fp, #-4]
 81080de:	ed5b ca02 	vldr	s25, [fp, #-8]
 81080e2:	ee72 2ae8 	vsub.f32	s5, s5, s17
 81080e6:	ee7d da89 	vadd.f32	s27, s27, s18
 81080ea:	ee76 6a85 	vadd.f32	s13, s13, s10
 81080ee:	ee3c ca08 	vadd.f32	s24, s24, s16
 81080f2:	ee22 eaac 	vmul.f32	s28, s5, s25
 81080f6:	ee2b daed 	vnmul.f32	s26, s23, s27
 81080fa:	ee66 eaab 	vmul.f32	s29, s13, s23
 81080fe:	ee2c 2acc 	vnmul.f32	s4, s25, s24
 8108102:	eea6 daac 	vfma.f32	s26, s13, s25
 8108106:	3901      	subs	r1, #1
 8108108:	f10e 0e08 	add.w	lr, lr, #8
 810810c:	eef0 6a4e 	vmov.f32	s13, s28
 8108110:	eea2 2aab 	vfma.f32	s4, s5, s23
 8108114:	f1ac 0c08 	sub.w	ip, ip, #8
 8108118:	f10b 0b08 	add.w	fp, fp, #8
 810811c:	eeec 6a2b 	vfma.f32	s13, s24, s23
 8108120:	f105 0508 	add.w	r5, r5, #8
 8108124:	f1a4 0408 	sub.w	r4, r4, #8
 8108128:	eeed eaac 	vfma.f32	s29, s27, s25
 810812c:	f10a 0a10 	add.w	sl, sl, #16
 8108130:	f107 0708 	add.w	r7, r7, #8
 8108134:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8108138:	ee33 3a68 	vsub.f32	s6, s6, s17
 810813c:	ed05 da03 	vstr	s26, [r5, #-12]
 8108140:	ed45 ea04 	vstr	s29, [r5, #-16]
 8108144:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8108148:	ed84 2a04 	vstr	s4, [r4, #16]
 810814c:	edc4 6a03 	vstr	s13, [r4, #12]
 8108150:	ee34 4a49 	vsub.f32	s8, s8, s18
 8108154:	ed5a 6a07 	vldr	s13, [sl, #-28]	; 0xffffffe4
 8108158:	ed5a 2a08 	vldr	s5, [sl, #-32]	; 0xffffffe0
 810815c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8108160:	ee77 7acb 	vsub.f32	s15, s15, s22
 8108164:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8108168:	ee34 4a60 	vsub.f32	s8, s8, s1
 810816c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8108170:	ee26 2ac3 	vnmul.f32	s4, s13, s6
 8108174:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8108178:	ee64 aa26 	vmul.f32	s21, s8, s13
 810817c:	ee66 6ae3 	vnmul.f32	s13, s13, s7
 8108180:	eee3 7a62 	vfms.f32	s15, s6, s5
 8108184:	f1a6 0608 	sub.w	r6, r6, #8
 8108188:	f109 0918 	add.w	r9, r9, #24
 810818c:	eeb0 3a42 	vmov.f32	s6, s4
 8108190:	eee4 6a22 	vfma.f32	s13, s8, s5
 8108194:	f102 0208 	add.w	r2, r2, #8
 8108198:	f1a3 0308 	sub.w	r3, r3, #8
 810819c:	eeaa 3a22 	vfma.f32	s6, s20, s5
 81081a0:	eee3 aaa2 	vfma.f32	s21, s7, s5
 81081a4:	ee37 7a29 	vadd.f32	s14, s14, s19
 81081a8:	ee34 5ac5 	vsub.f32	s10, s9, s10
 81081ac:	ee75 5ac9 	vsub.f32	s11, s11, s18
 81081b0:	ee36 6a48 	vsub.f32	s12, s12, s16
 81081b4:	ee37 7a68 	vsub.f32	s14, s14, s17
 81081b8:	ed47 aa04 	vstr	s21, [r7, #-16]
 81081bc:	ed47 6a03 	vstr	s13, [r7, #-12]
 81081c0:	ed86 3a04 	vstr	s6, [r6, #16]
 81081c4:	edc6 7a03 	vstr	s15, [r6, #12]
 81081c8:	ee75 6aa0 	vadd.f32	s13, s11, s1
 81081cc:	ee76 7a21 	vadd.f32	s15, s12, s3
 81081d0:	ed59 5a0c 	vldr	s11, [r9, #-48]	; 0xffffffd0
 81081d4:	ed19 6a0b 	vldr	s12, [r9, #-44]	; 0xffffffd4
 81081d8:	ee35 5a00 	vadd.f32	s10, s10, s0
 81081dc:	ee37 7a41 	vsub.f32	s14, s14, s2
 81081e0:	ee65 3a06 	vmul.f32	s7, s10, s12
 81081e4:	ee27 4a25 	vmul.f32	s8, s14, s11
 81081e8:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 81081ec:	eee6 3aa5 	vfma.f32	s7, s13, s11
 81081f0:	ee26 3a66 	vnmul.f32	s6, s12, s13
 81081f4:	eef0 6a44 	vmov.f32	s13, s8
 81081f8:	eee7 6a86 	vfma.f32	s13, s15, s12
 81081fc:	eef0 7a64 	vmov.f32	s15, s9
 8108200:	eea5 3a25 	vfma.f32	s6, s10, s11
 8108204:	eee7 7a06 	vfma.f32	s15, s14, s12
 8108208:	ed02 3a03 	vstr	s6, [r2, #-12]
 810820c:	ed42 3a04 	vstr	s7, [r2, #-16]
 8108210:	edc3 6a03 	vstr	s13, [r3, #12]
 8108214:	edc3 7a04 	vstr	s15, [r3, #16]
 8108218:	f47f af07 	bne.w	810802a <arm_cfft_radix8by4_f32+0x126>
 810821c:	9a08      	ldr	r2, [sp, #32]
 810821e:	9903      	ldr	r1, [sp, #12]
 8108220:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108224:	9103      	str	r1, [sp, #12]
 8108226:	9902      	ldr	r1, [sp, #8]
 8108228:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 810822c:	9102      	str	r1, [sp, #8]
 810822e:	9907      	ldr	r1, [sp, #28]
 8108230:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108234:	9107      	str	r1, [sp, #28]
 8108236:	9904      	ldr	r1, [sp, #16]
 8108238:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 810823c:	9104      	str	r1, [sp, #16]
 810823e:	9906      	ldr	r1, [sp, #24]
 8108240:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108244:	9106      	str	r1, [sp, #24]
 8108246:	9905      	ldr	r1, [sp, #20]
 8108248:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 810824c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8108250:	9205      	str	r2, [sp, #20]
 8108252:	9a01      	ldr	r2, [sp, #4]
 8108254:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8108258:	9301      	str	r3, [sp, #4]
 810825a:	9b07      	ldr	r3, [sp, #28]
 810825c:	9903      	ldr	r1, [sp, #12]
 810825e:	9e06      	ldr	r6, [sp, #24]
 8108260:	9d05      	ldr	r5, [sp, #20]
 8108262:	edd3 4a00 	vldr	s9, [r3]
 8108266:	edd5 7a00 	vldr	s15, [r5]
 810826a:	edd1 3a00 	vldr	s7, [r1]
 810826e:	edd6 6a00 	vldr	s13, [r6]
 8108272:	edd3 2a01 	vldr	s5, [r3, #4]
 8108276:	ed95 3a01 	vldr	s6, [r5, #4]
 810827a:	ed96 4a01 	vldr	s8, [r6, #4]
 810827e:	ed91 7a01 	vldr	s14, [r1, #4]
 8108282:	9a02      	ldr	r2, [sp, #8]
 8108284:	9c01      	ldr	r4, [sp, #4]
 8108286:	ee34 5aa7 	vadd.f32	s10, s9, s15
 810828a:	ee73 5aa6 	vadd.f32	s11, s7, s13
 810828e:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8108292:	ee35 5a25 	vadd.f32	s10, s10, s11
 8108296:	ee37 6a04 	vadd.f32	s12, s14, s8
 810829a:	ed81 5a00 	vstr	s10, [r1]
 810829e:	edd5 3a01 	vldr	s7, [r5, #4]
 81082a2:	ed93 5a01 	vldr	s10, [r3, #4]
 81082a6:	ee35 5a23 	vadd.f32	s10, s10, s7
 81082aa:	ee37 7a44 	vsub.f32	s14, s14, s8
 81082ae:	ee35 5a06 	vadd.f32	s10, s10, s12
 81082b2:	ee37 4a64 	vsub.f32	s8, s14, s9
 81082b6:	ee76 3ac3 	vsub.f32	s7, s13, s6
 81082ba:	ed81 5a01 	vstr	s10, [r1, #4]
 81082be:	ed92 5a01 	vldr	s10, [r2, #4]
 81082c2:	edd2 1a00 	vldr	s3, [r2]
 81082c6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 81082ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81082cc:	9102      	str	r1, [sp, #8]
 81082ce:	ee73 3aa2 	vadd.f32	s7, s7, s5
 81082d2:	ee34 4a27 	vadd.f32	s8, s8, s15
 81082d6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 81082da:	ee24 2a05 	vmul.f32	s4, s8, s10
 81082de:	ee25 5a63 	vnmul.f32	s10, s10, s7
 81082e2:	eea3 2aa1 	vfma.f32	s4, s7, s3
 81082e6:	eea4 5a21 	vfma.f32	s10, s8, s3
 81082ea:	ed83 2a00 	vstr	s4, [r3]
 81082ee:	ed83 5a01 	vstr	s10, [r3, #4]
 81082f2:	ee36 6a62 	vsub.f32	s12, s12, s5
 81082f6:	9b04      	ldr	r3, [sp, #16]
 81082f8:	ee36 6a43 	vsub.f32	s12, s12, s6
 81082fc:	ed93 5a01 	vldr	s10, [r3, #4]
 8108300:	edd3 3a00 	vldr	s7, [r3]
 8108304:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108308:	ee26 4a05 	vmul.f32	s8, s12, s10
 810830c:	ee25 5a65 	vnmul.f32	s10, s10, s11
 8108310:	eea5 4aa3 	vfma.f32	s8, s11, s7
 8108314:	2304      	movs	r3, #4
 8108316:	eea6 5a23 	vfma.f32	s10, s12, s7
 810831a:	ee77 7a67 	vsub.f32	s15, s14, s15
 810831e:	ee36 7ae2 	vsub.f32	s14, s13, s5
 8108322:	ed86 4a00 	vstr	s8, [r6]
 8108326:	ed86 5a01 	vstr	s10, [r6, #4]
 810832a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 810832e:	ee37 7a03 	vadd.f32	s14, s14, s6
 8108332:	edd4 6a01 	vldr	s13, [r4, #4]
 8108336:	edd4 5a00 	vldr	s11, [r4]
 810833a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 810833e:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 8108342:	eea7 6a25 	vfma.f32	s12, s14, s11
 8108346:	eee7 6aa5 	vfma.f32	s13, s15, s11
 810834a:	ed85 6a00 	vstr	s12, [r5]
 810834e:	edc5 6a01 	vstr	s13, [r5, #4]
 8108352:	f7ff fa2f 	bl	81077b4 <arm_radix8_butterfly_f32>
 8108356:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8108358:	9902      	ldr	r1, [sp, #8]
 810835a:	9809      	ldr	r0, [sp, #36]	; 0x24
 810835c:	6862      	ldr	r2, [r4, #4]
 810835e:	9101      	str	r1, [sp, #4]
 8108360:	2304      	movs	r3, #4
 8108362:	f7ff fa27 	bl	81077b4 <arm_radix8_butterfly_f32>
 8108366:	980a      	ldr	r0, [sp, #40]	; 0x28
 8108368:	9901      	ldr	r1, [sp, #4]
 810836a:	6862      	ldr	r2, [r4, #4]
 810836c:	2304      	movs	r3, #4
 810836e:	f7ff fa21 	bl	81077b4 <arm_radix8_butterfly_f32>
 8108372:	9901      	ldr	r1, [sp, #4]
 8108374:	6862      	ldr	r2, [r4, #4]
 8108376:	4640      	mov	r0, r8
 8108378:	2304      	movs	r3, #4
 810837a:	b00f      	add	sp, #60	; 0x3c
 810837c:	ecbd 8b0e 	vpop	{d8-d14}
 8108380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108384:	f7ff ba16 	b.w	81077b4 <arm_radix8_butterfly_f32>

08108388 <arm_cfft_f32>:
 8108388:	2a01      	cmp	r2, #1
 810838a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810838e:	8805      	ldrh	r5, [r0, #0]
 8108390:	4680      	mov	r8, r0
 8108392:	4691      	mov	r9, r2
 8108394:	460c      	mov	r4, r1
 8108396:	461f      	mov	r7, r3
 8108398:	d076      	beq.n	8108488 <arm_cfft_f32+0x100>
 810839a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 810839e:	d06e      	beq.n	810847e <arm_cfft_f32+0xf6>
 81083a0:	d80e      	bhi.n	81083c0 <arm_cfft_f32+0x38>
 81083a2:	2d40      	cmp	r5, #64	; 0x40
 81083a4:	d013      	beq.n	81083ce <arm_cfft_f32+0x46>
 81083a6:	d966      	bls.n	8108476 <arm_cfft_f32+0xee>
 81083a8:	2d80      	cmp	r5, #128	; 0x80
 81083aa:	d103      	bne.n	81083b4 <arm_cfft_f32+0x2c>
 81083ac:	4621      	mov	r1, r4
 81083ae:	4640      	mov	r0, r8
 81083b0:	f7ff fce6 	bl	8107d80 <arm_cfft_radix8by2_f32>
 81083b4:	b9a7      	cbnz	r7, 81083e0 <arm_cfft_f32+0x58>
 81083b6:	f1b9 0f01 	cmp.w	r9, #1
 81083ba:	d036      	beq.n	810842a <arm_cfft_f32+0xa2>
 81083bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81083c0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 81083c4:	d05b      	beq.n	810847e <arm_cfft_f32+0xf6>
 81083c6:	d94f      	bls.n	8108468 <arm_cfft_f32+0xe0>
 81083c8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 81083cc:	d1f2      	bne.n	81083b4 <arm_cfft_f32+0x2c>
 81083ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
 81083d2:	2301      	movs	r3, #1
 81083d4:	4629      	mov	r1, r5
 81083d6:	4620      	mov	r0, r4
 81083d8:	f7ff f9ec 	bl	81077b4 <arm_radix8_butterfly_f32>
 81083dc:	2f00      	cmp	r7, #0
 81083de:	d0ea      	beq.n	81083b6 <arm_cfft_f32+0x2e>
 81083e0:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 81083e4:	f8d8 c008 	ldr.w	ip, [r8, #8]
 81083e8:	2f00      	cmp	r7, #0
 81083ea:	d0e4      	beq.n	81083b6 <arm_cfft_f32+0x2e>
 81083ec:	2200      	movs	r2, #0
 81083ee:	f10c 0e02 	add.w	lr, ip, #2
 81083f2:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 81083f6:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 81083fa:	0889      	lsrs	r1, r1, #2
 81083fc:	089b      	lsrs	r3, r3, #2
 81083fe:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8108402:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8108406:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 810840a:	0088      	lsls	r0, r1, #2
 810840c:	009b      	lsls	r3, r3, #2
 810840e:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8108412:	3304      	adds	r3, #4
 8108414:	3004      	adds	r0, #4
 8108416:	3202      	adds	r2, #2
 8108418:	58e1      	ldr	r1, [r4, r3]
 810841a:	5826      	ldr	r6, [r4, r0]
 810841c:	50e6      	str	r6, [r4, r3]
 810841e:	42ba      	cmp	r2, r7
 8108420:	5021      	str	r1, [r4, r0]
 8108422:	d3e6      	bcc.n	81083f2 <arm_cfft_f32+0x6a>
 8108424:	f1b9 0f01 	cmp.w	r9, #1
 8108428:	d1c8      	bne.n	81083bc <arm_cfft_f32+0x34>
 810842a:	ee07 5a90 	vmov	s15, r5
 810842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108436:	eec7 6a27 	vdiv.f32	s13, s14, s15
 810843a:	2d00      	cmp	r5, #0
 810843c:	d0be      	beq.n	81083bc <arm_cfft_f32+0x34>
 810843e:	3408      	adds	r4, #8
 8108440:	2300      	movs	r3, #0
 8108442:	3301      	adds	r3, #1
 8108444:	429d      	cmp	r5, r3
 8108446:	f104 0408 	add.w	r4, r4, #8
 810844a:	ed14 7a04 	vldr	s14, [r4, #-16]
 810844e:	ed54 7a03 	vldr	s15, [r4, #-12]
 8108452:	ee27 7a26 	vmul.f32	s14, s14, s13
 8108456:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 810845a:	ed04 7a04 	vstr	s14, [r4, #-16]
 810845e:	ed44 7a03 	vstr	s15, [r4, #-12]
 8108462:	d1ee      	bne.n	8108442 <arm_cfft_f32+0xba>
 8108464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108468:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 810846c:	d0af      	beq.n	81083ce <arm_cfft_f32+0x46>
 810846e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8108472:	d09b      	beq.n	81083ac <arm_cfft_f32+0x24>
 8108474:	e79e      	b.n	81083b4 <arm_cfft_f32+0x2c>
 8108476:	2d10      	cmp	r5, #16
 8108478:	d098      	beq.n	81083ac <arm_cfft_f32+0x24>
 810847a:	2d20      	cmp	r5, #32
 810847c:	d19a      	bne.n	81083b4 <arm_cfft_f32+0x2c>
 810847e:	4621      	mov	r1, r4
 8108480:	4640      	mov	r0, r8
 8108482:	f7ff fd3f 	bl	8107f04 <arm_cfft_radix8by4_f32>
 8108486:	e795      	b.n	81083b4 <arm_cfft_f32+0x2c>
 8108488:	b175      	cbz	r5, 81084a8 <arm_cfft_f32+0x120>
 810848a:	f101 020c 	add.w	r2, r1, #12
 810848e:	2100      	movs	r1, #0
 8108490:	ed52 7a02 	vldr	s15, [r2, #-8]
 8108494:	3101      	adds	r1, #1
 8108496:	eef1 7a67 	vneg.f32	s15, s15
 810849a:	428d      	cmp	r5, r1
 810849c:	ed42 7a02 	vstr	s15, [r2, #-8]
 81084a0:	f102 0208 	add.w	r2, r2, #8
 81084a4:	d1f4      	bne.n	8108490 <arm_cfft_f32+0x108>
 81084a6:	e778      	b.n	810839a <arm_cfft_f32+0x12>
 81084a8:	2b00      	cmp	r3, #0
 81084aa:	d087      	beq.n	81083bc <arm_cfft_f32+0x34>
 81084ac:	8987      	ldrh	r7, [r0, #12]
 81084ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
 81084b2:	2f00      	cmp	r7, #0
 81084b4:	d19a      	bne.n	81083ec <arm_cfft_f32+0x64>
 81084b6:	e7b8      	b.n	810842a <arm_cfft_f32+0xa2>

081084b8 <stage_rfft_f32>:
 81084b8:	edd1 7a01 	vldr	s15, [r1, #4]
 81084bc:	ed91 6a00 	vldr	s12, [r1]
 81084c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 81084c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 81084c8:	eeb0 7a67 	vmov.f32	s14, s15
 81084cc:	eea6 7a26 	vfma.f32	s14, s12, s13
 81084d0:	b410      	push	{r4}
 81084d2:	eed6 7a26 	vfnms.f32	s15, s12, s13
 81084d6:	8804      	ldrh	r4, [r0, #0]
 81084d8:	6940      	ldr	r0, [r0, #20]
 81084da:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 81084de:	ee27 7a23 	vmul.f32	s14, s14, s7
 81084e2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 81084e6:	3c01      	subs	r4, #1
 81084e8:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 81084ec:	ed82 7a00 	vstr	s14, [r2]
 81084f0:	edc2 7a01 	vstr	s15, [r2, #4]
 81084f4:	3010      	adds	r0, #16
 81084f6:	3210      	adds	r2, #16
 81084f8:	3b08      	subs	r3, #8
 81084fa:	3110      	adds	r1, #16
 81084fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8108500:	ed11 5a01 	vldr	s10, [r1, #-4]
 8108504:	edd3 7a02 	vldr	s15, [r3, #8]
 8108508:	ed11 4a02 	vldr	s8, [r1, #-8]
 810850c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8108510:	ed10 6a02 	vldr	s12, [r0, #-8]
 8108514:	ee77 4ac4 	vsub.f32	s9, s15, s8
 8108518:	ee35 7a66 	vsub.f32	s14, s10, s13
 810851c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8108520:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8108524:	3c01      	subs	r4, #1
 8108526:	2c00      	cmp	r4, #0
 8108528:	eee6 7a24 	vfma.f32	s15, s12, s9
 810852c:	f1a3 0308 	sub.w	r3, r3, #8
 8108530:	f101 0108 	add.w	r1, r1, #8
 8108534:	ee76 6a85 	vadd.f32	s13, s13, s10
 8108538:	f100 0008 	add.w	r0, r0, #8
 810853c:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8108540:	f102 0208 	add.w	r2, r2, #8
 8108544:	eea6 7a66 	vfms.f32	s14, s12, s13
 8108548:	ee67 7aa3 	vmul.f32	s15, s15, s7
 810854c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108550:	ed42 7a04 	vstr	s15, [r2, #-16]
 8108554:	ed02 7a03 	vstr	s14, [r2, #-12]
 8108558:	dcd0      	bgt.n	81084fc <stage_rfft_f32+0x44>
 810855a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810855e:	4770      	bx	lr

08108560 <merge_rfft_f32>:
 8108560:	edd1 7a00 	vldr	s15, [r1]
 8108564:	edd1 6a01 	vldr	s13, [r1, #4]
 8108568:	b430      	push	{r4, r5}
 810856a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 810856e:	8804      	ldrh	r4, [r0, #0]
 8108570:	6940      	ldr	r0, [r0, #20]
 8108572:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8108576:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 810857a:	1e65      	subs	r5, r4, #1
 810857c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108580:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108584:	2d00      	cmp	r5, #0
 8108586:	ed82 7a00 	vstr	s14, [r2]
 810858a:	edc2 7a01 	vstr	s15, [r2, #4]
 810858e:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8108592:	dd32      	ble.n	81085fa <merge_rfft_f32+0x9a>
 8108594:	eba3 04c4 	sub.w	r4, r3, r4, lsl #3
 8108598:	3010      	adds	r0, #16
 810859a:	3210      	adds	r2, #16
 810859c:	3110      	adds	r1, #16
 810859e:	3b08      	subs	r3, #8
 81085a0:	edd3 6a03 	vldr	s13, [r3, #12]
 81085a4:	edd3 7a02 	vldr	s15, [r3, #8]
 81085a8:	ed11 5a01 	vldr	s10, [r1, #-4]
 81085ac:	ed11 4a02 	vldr	s8, [r1, #-8]
 81085b0:	ed50 5a01 	vldr	s11, [r0, #-4]
 81085b4:	ed10 6a02 	vldr	s12, [r0, #-8]
 81085b8:	ee74 4a67 	vsub.f32	s9, s8, s15
 81085bc:	ee35 7a66 	vsub.f32	s14, s10, s13
 81085c0:	ee77 7a84 	vadd.f32	s15, s15, s8
 81085c4:	eea5 7aa4 	vfma.f32	s14, s11, s9
 81085c8:	3b08      	subs	r3, #8
 81085ca:	429c      	cmp	r4, r3
 81085cc:	eee6 7a64 	vfms.f32	s15, s12, s9
 81085d0:	f101 0108 	add.w	r1, r1, #8
 81085d4:	f100 0008 	add.w	r0, r0, #8
 81085d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 81085dc:	f102 0208 	add.w	r2, r2, #8
 81085e0:	eee5 7ae6 	vfms.f32	s15, s11, s13
 81085e4:	eea6 7a66 	vfms.f32	s14, s12, s13
 81085e8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 81085ec:	ee27 7a23 	vmul.f32	s14, s14, s7
 81085f0:	ed42 7a04 	vstr	s15, [r2, #-16]
 81085f4:	ed02 7a03 	vstr	s14, [r2, #-12]
 81085f8:	d1d2      	bne.n	81085a0 <merge_rfft_f32+0x40>
 81085fa:	bc30      	pop	{r4, r5}
 81085fc:	4770      	bx	lr
 81085fe:	bf00      	nop

08108600 <arm_rfft_fast_f32>:
 8108600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108604:	4605      	mov	r5, r0
 8108606:	4616      	mov	r6, r2
 8108608:	b153      	cbz	r3, 8108620 <arm_rfft_fast_f32+0x20>
 810860a:	461f      	mov	r7, r3
 810860c:	f7ff ffa8 	bl	8108560 <merge_rfft_f32>
 8108610:	463a      	mov	r2, r7
 8108612:	4631      	mov	r1, r6
 8108614:	4628      	mov	r0, r5
 8108616:	2301      	movs	r3, #1
 8108618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810861c:	f7ff beb4 	b.w	8108388 <arm_cfft_f32>
 8108620:	460c      	mov	r4, r1
 8108622:	8801      	ldrh	r1, [r0, #0]
 8108624:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8108628:	d03f      	beq.n	81086aa <arm_rfft_fast_f32+0xaa>
 810862a:	d82d      	bhi.n	8108688 <arm_rfft_fast_f32+0x88>
 810862c:	2940      	cmp	r1, #64	; 0x40
 810862e:	d032      	beq.n	8108696 <arm_rfft_fast_f32+0x96>
 8108630:	d937      	bls.n	81086a2 <arm_rfft_fast_f32+0xa2>
 8108632:	2980      	cmp	r1, #128	; 0x80
 8108634:	d049      	beq.n	81086ca <arm_rfft_fast_f32+0xca>
 8108636:	89a8      	ldrh	r0, [r5, #12]
 8108638:	f8d5 c008 	ldr.w	ip, [r5, #8]
 810863c:	b1e8      	cbz	r0, 810867a <arm_rfft_fast_f32+0x7a>
 810863e:	2200      	movs	r2, #0
 8108640:	f10c 0e02 	add.w	lr, ip, #2
 8108644:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 8108648:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 810864c:	0889      	lsrs	r1, r1, #2
 810864e:	089b      	lsrs	r3, r3, #2
 8108650:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
 8108654:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8108658:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 810865c:	008f      	lsls	r7, r1, #2
 810865e:	009b      	lsls	r3, r3, #2
 8108660:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8108664:	3304      	adds	r3, #4
 8108666:	3704      	adds	r7, #4
 8108668:	3202      	adds	r2, #2
 810866a:	f854 8003 	ldr.w	r8, [r4, r3]
 810866e:	59e1      	ldr	r1, [r4, r7]
 8108670:	50e1      	str	r1, [r4, r3]
 8108672:	4290      	cmp	r0, r2
 8108674:	f844 8007 	str.w	r8, [r4, r7]
 8108678:	d8e4      	bhi.n	8108644 <arm_rfft_fast_f32+0x44>
 810867a:	4632      	mov	r2, r6
 810867c:	4621      	mov	r1, r4
 810867e:	4628      	mov	r0, r5
 8108680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108684:	f7ff bf18 	b.w	81084b8 <stage_rfft_f32>
 8108688:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 810868c:	d00d      	beq.n	81086aa <arm_rfft_fast_f32+0xaa>
 810868e:	d916      	bls.n	81086be <arm_rfft_fast_f32+0xbe>
 8108690:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8108694:	d10d      	bne.n	81086b2 <arm_rfft_fast_f32+0xb2>
 8108696:	686a      	ldr	r2, [r5, #4]
 8108698:	2301      	movs	r3, #1
 810869a:	4620      	mov	r0, r4
 810869c:	f7ff f88a 	bl	81077b4 <arm_radix8_butterfly_f32>
 81086a0:	e007      	b.n	81086b2 <arm_rfft_fast_f32+0xb2>
 81086a2:	2910      	cmp	r1, #16
 81086a4:	d011      	beq.n	81086ca <arm_rfft_fast_f32+0xca>
 81086a6:	2920      	cmp	r1, #32
 81086a8:	d103      	bne.n	81086b2 <arm_rfft_fast_f32+0xb2>
 81086aa:	4621      	mov	r1, r4
 81086ac:	4628      	mov	r0, r5
 81086ae:	f7ff fc29 	bl	8107f04 <arm_cfft_radix8by4_f32>
 81086b2:	89a8      	ldrh	r0, [r5, #12]
 81086b4:	f8d5 c008 	ldr.w	ip, [r5, #8]
 81086b8:	2800      	cmp	r0, #0
 81086ba:	d1c0      	bne.n	810863e <arm_rfft_fast_f32+0x3e>
 81086bc:	e7dd      	b.n	810867a <arm_rfft_fast_f32+0x7a>
 81086be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 81086c2:	d0e8      	beq.n	8108696 <arm_rfft_fast_f32+0x96>
 81086c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81086c8:	d1f3      	bne.n	81086b2 <arm_rfft_fast_f32+0xb2>
 81086ca:	4621      	mov	r1, r4
 81086cc:	4628      	mov	r0, r5
 81086ce:	f7ff fb57 	bl	8107d80 <arm_cfft_radix8by2_f32>
 81086d2:	e7ee      	b.n	81086b2 <arm_rfft_fast_f32+0xb2>

081086d4 <arm_rfft_fast_init_f32>:
 81086d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 81086d8:	d024      	beq.n	8108724 <arm_rfft_fast_init_f32+0x50>
 81086da:	d807      	bhi.n	81086ec <arm_rfft_fast_init_f32+0x18>
 81086dc:	2980      	cmp	r1, #128	; 0x80
 81086de:	d01c      	beq.n	810871a <arm_rfft_fast_init_f32+0x46>
 81086e0:	d90c      	bls.n	81086fc <arm_rfft_fast_init_f32+0x28>
 81086e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 81086e6:	d11a      	bne.n	810871e <arm_rfft_fast_init_f32+0x4a>
 81086e8:	4b0f      	ldr	r3, [pc, #60]	; (8108728 <arm_rfft_fast_init_f32+0x54>)
 81086ea:	4718      	bx	r3
 81086ec:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 81086f0:	d011      	beq.n	8108716 <arm_rfft_fast_init_f32+0x42>
 81086f2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 81086f6:	d107      	bne.n	8108708 <arm_rfft_fast_init_f32+0x34>
 81086f8:	4b0c      	ldr	r3, [pc, #48]	; (810872c <arm_rfft_fast_init_f32+0x58>)
 81086fa:	4718      	bx	r3
 81086fc:	2920      	cmp	r1, #32
 81086fe:	d008      	beq.n	8108712 <arm_rfft_fast_init_f32+0x3e>
 8108700:	2940      	cmp	r1, #64	; 0x40
 8108702:	d10c      	bne.n	810871e <arm_rfft_fast_init_f32+0x4a>
 8108704:	4b0a      	ldr	r3, [pc, #40]	; (8108730 <arm_rfft_fast_init_f32+0x5c>)
 8108706:	e7f0      	b.n	81086ea <arm_rfft_fast_init_f32+0x16>
 8108708:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810870c:	d107      	bne.n	810871e <arm_rfft_fast_init_f32+0x4a>
 810870e:	4b09      	ldr	r3, [pc, #36]	; (8108734 <arm_rfft_fast_init_f32+0x60>)
 8108710:	e7eb      	b.n	81086ea <arm_rfft_fast_init_f32+0x16>
 8108712:	4b09      	ldr	r3, [pc, #36]	; (8108738 <arm_rfft_fast_init_f32+0x64>)
 8108714:	e7e9      	b.n	81086ea <arm_rfft_fast_init_f32+0x16>
 8108716:	4b09      	ldr	r3, [pc, #36]	; (810873c <arm_rfft_fast_init_f32+0x68>)
 8108718:	e7e7      	b.n	81086ea <arm_rfft_fast_init_f32+0x16>
 810871a:	4b09      	ldr	r3, [pc, #36]	; (8108740 <arm_rfft_fast_init_f32+0x6c>)
 810871c:	e7e5      	b.n	81086ea <arm_rfft_fast_init_f32+0x16>
 810871e:	f04f 30ff 	mov.w	r0, #4294967295
 8108722:	4770      	bx	lr
 8108724:	4b07      	ldr	r3, [pc, #28]	; (8108744 <arm_rfft_fast_init_f32+0x70>)
 8108726:	e7e0      	b.n	81086ea <arm_rfft_fast_init_f32+0x16>
 8108728:	081076a1 	.word	0x081076a1
 810872c:	0810777d 	.word	0x0810777d
 8108730:	08107639 	.word	0x08107639
 8108734:	0810770d 	.word	0x0810770d
 8108738:	08107605 	.word	0x08107605
 810873c:	08107745 	.word	0x08107745
 8108740:	0810766d 	.word	0x0810766d
 8108744:	081076d5 	.word	0x081076d5

08108748 <ai_buffer_get_size>:
 8108748:	b378      	cbz	r0, 81087aa <ai_buffer_get_size+0x62>
 810874a:	b410      	push	{r4}
 810874c:	6803      	ldr	r3, [r0, #0]
 810874e:	4a17      	ldr	r2, [pc, #92]	; (81087ac <ai_buffer_get_size+0x64>)
 8108750:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8108754:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8108758:	4293      	cmp	r3, r2
 810875a:	d01e      	beq.n	810879a <ai_buffer_get_size+0x52>
 810875c:	6984      	ldr	r4, [r0, #24]
 810875e:	6862      	ldr	r2, [r4, #4]
 8108760:	7d03      	ldrb	r3, [r0, #20]
 8108762:	6941      	ldr	r1, [r0, #20]
 8108764:	f1a3 0301 	sub.w	r3, r3, #1
 8108768:	fab3 f383 	clz	r3, r3
 810876c:	095b      	lsrs	r3, r3, #5
 810876e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8108772:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8108776:	da0b      	bge.n	8108790 <ai_buffer_get_size+0x48>
 8108778:	2b01      	cmp	r3, #1
 810877a:	d102      	bne.n	8108782 <ai_buffer_get_size+0x3a>
 810877c:	2802      	cmp	r0, #2
 810877e:	d007      	beq.n	8108790 <ai_buffer_get_size+0x48>
 8108780:	2302      	movs	r3, #2
 8108782:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8108786:	3301      	adds	r3, #1
 8108788:	4298      	cmp	r0, r3
 810878a:	fb01 f202 	mul.w	r2, r1, r2
 810878e:	d1f3      	bne.n	8108778 <ai_buffer_get_size+0x30>
 8108790:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8108794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108798:	4770      	bx	lr
 810879a:	2900      	cmp	r1, #0
 810879c:	d0de      	beq.n	810875c <ai_buffer_get_size+0x14>
 810879e:	6984      	ldr	r4, [r0, #24]
 81087a0:	6863      	ldr	r3, [r4, #4]
 81087a2:	331f      	adds	r3, #31
 81087a4:	f023 021f 	bic.w	r2, r3, #31
 81087a8:	e7da      	b.n	8108760 <ai_buffer_get_size+0x18>
 81087aa:	4770      	bx	lr
 81087ac:	000400c0 	.word	0x000400c0

081087b0 <ai_buffer_array_sane>:
 81087b0:	b138      	cbz	r0, 81087c2 <ai_buffer_array_sane+0x12>
 81087b2:	6843      	ldr	r3, [r0, #4]
 81087b4:	b123      	cbz	r3, 81087c0 <ai_buffer_array_sane+0x10>
 81087b6:	8840      	ldrh	r0, [r0, #2]
 81087b8:	3800      	subs	r0, #0
 81087ba:	bf18      	it	ne
 81087bc:	2001      	movne	r0, #1
 81087be:	4770      	bx	lr
 81087c0:	4618      	mov	r0, r3
 81087c2:	4770      	bx	lr

081087c4 <ai_buffer_array_item_set_address>:
 81087c4:	b150      	cbz	r0, 81087dc <ai_buffer_array_item_set_address+0x18>
 81087c6:	6843      	ldr	r3, [r0, #4]
 81087c8:	b14b      	cbz	r3, 81087de <ai_buffer_array_item_set_address+0x1a>
 81087ca:	8840      	ldrh	r0, [r0, #2]
 81087cc:	b900      	cbnz	r0, 81087d0 <ai_buffer_array_item_set_address+0xc>
 81087ce:	4770      	bx	lr
 81087d0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 81087d4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 81087d8:	2001      	movs	r0, #1
 81087da:	604a      	str	r2, [r1, #4]
 81087dc:	4770      	bx	lr
 81087de:	4618      	mov	r0, r3
 81087e0:	4770      	bx	lr
 81087e2:	bf00      	nop

081087e4 <_ai_platform_acquire_crc>:
 81087e4:	2001      	movs	r0, #1
 81087e6:	4770      	bx	lr

081087e8 <_ai_platform_release_crc>:
 81087e8:	4770      	bx	lr
 81087ea:	bf00      	nop

081087ec <ai_platform_get_weights_map>:
 81087ec:	2a00      	cmp	r2, #0
 81087ee:	d037      	beq.n	8108860 <ai_platform_get_weights_map+0x74>
 81087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81087f2:	4604      	mov	r4, r0
 81087f4:	b1a0      	cbz	r0, 8108820 <ai_platform_get_weights_map+0x34>
 81087f6:	460f      	mov	r7, r1
 81087f8:	b191      	cbz	r1, 8108820 <ai_platform_get_weights_map+0x34>
 81087fa:	4b25      	ldr	r3, [pc, #148]	; (8108890 <ai_platform_get_weights_map+0xa4>)
 81087fc:	6810      	ldr	r0, [r2, #0]
 81087fe:	4298      	cmp	r0, r3
 8108800:	4615      	mov	r5, r2
 8108802:	d00f      	beq.n	8108824 <ai_platform_get_weights_map+0x38>
 8108804:	6855      	ldr	r5, [r2, #4]
 8108806:	b15d      	cbz	r5, 8108820 <ai_platform_get_weights_map+0x34>
 8108808:	682e      	ldr	r6, [r5, #0]
 810880a:	429e      	cmp	r6, r3
 810880c:	d02a      	beq.n	8108864 <ai_platform_get_weights_map+0x78>
 810880e:	f1a1 0001 	sub.w	r0, r1, #1
 8108812:	6025      	str	r5, [r4, #0]
 8108814:	fab0 f080 	clz	r0, r0
 8108818:	0940      	lsrs	r0, r0, #5
 810881a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810881c:	42a7      	cmp	r7, r4
 810881e:	d034      	beq.n	810888a <ai_platform_get_weights_map+0x9e>
 8108820:	2000      	movs	r0, #0
 8108822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108824:	1d10      	adds	r0, r2, #4
 8108826:	f7ff ffc3 	bl	81087b0 <ai_buffer_array_sane>
 810882a:	2800      	cmp	r0, #0
 810882c:	d0f8      	beq.n	8108820 <ai_platform_get_weights_map+0x34>
 810882e:	88eb      	ldrh	r3, [r5, #6]
 8108830:	429f      	cmp	r7, r3
 8108832:	d1f5      	bne.n	8108820 <ai_platform_get_weights_map+0x34>
 8108834:	f04f 0e00 	mov.w	lr, #0
 8108838:	1f23      	subs	r3, r4, #4
 810883a:	4670      	mov	r0, lr
 810883c:	68aa      	ldr	r2, [r5, #8]
 810883e:	eb02 0c0e 	add.w	ip, r2, lr
 8108842:	f10e 0e1c 	add.w	lr, lr, #28
 8108846:	f8dc 4004 	ldr.w	r4, [ip, #4]
 810884a:	b124      	cbz	r4, 8108856 <ai_platform_get_weights_map+0x6a>
 810884c:	3001      	adds	r0, #1
 810884e:	4287      	cmp	r7, r0
 8108850:	f843 4f04 	str.w	r4, [r3, #4]!
 8108854:	d1f2      	bne.n	810883c <ai_platform_get_weights_map+0x50>
 8108856:	1a38      	subs	r0, r7, r0
 8108858:	fab0 f080 	clz	r0, r0
 810885c:	0940      	lsrs	r0, r0, #5
 810885e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108860:	2000      	movs	r0, #0
 8108862:	4770      	bx	lr
 8108864:	1f23      	subs	r3, r4, #4
 8108866:	4628      	mov	r0, r5
 8108868:	2400      	movs	r4, #0
 810886a:	e000      	b.n	810886e <ai_platform_get_weights_map+0x82>
 810886c:	4614      	mov	r4, r2
 810886e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8108872:	42b2      	cmp	r2, r6
 8108874:	d0d2      	beq.n	810881c <ai_platform_get_weights_map+0x30>
 8108876:	f843 2f04 	str.w	r2, [r3, #4]!
 810887a:	1c62      	adds	r2, r4, #1
 810887c:	4297      	cmp	r7, r2
 810887e:	d1f5      	bne.n	810886c <ai_platform_get_weights_map+0x80>
 8108880:	3402      	adds	r4, #2
 8108882:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8108886:	42b3      	cmp	r3, r6
 8108888:	d1ca      	bne.n	8108820 <ai_platform_get_weights_map+0x34>
 810888a:	2001      	movs	r0, #1
 810888c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810888e:	bf00      	nop
 8108890:	a1facade 	.word	0xa1facade

08108894 <ai_platform_get_activations_map>:
 8108894:	2a00      	cmp	r2, #0
 8108896:	d038      	beq.n	810890a <ai_platform_get_activations_map+0x76>
 8108898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810889a:	4604      	mov	r4, r0
 810889c:	b1a0      	cbz	r0, 81088c8 <ai_platform_get_activations_map+0x34>
 810889e:	460f      	mov	r7, r1
 81088a0:	b191      	cbz	r1, 81088c8 <ai_platform_get_activations_map+0x34>
 81088a2:	4b25      	ldr	r3, [pc, #148]	; (8108938 <ai_platform_get_activations_map+0xa4>)
 81088a4:	6810      	ldr	r0, [r2, #0]
 81088a6:	4298      	cmp	r0, r3
 81088a8:	4615      	mov	r5, r2
 81088aa:	d00f      	beq.n	81088cc <ai_platform_get_activations_map+0x38>
 81088ac:	6a15      	ldr	r5, [r2, #32]
 81088ae:	b15d      	cbz	r5, 81088c8 <ai_platform_get_activations_map+0x34>
 81088b0:	682e      	ldr	r6, [r5, #0]
 81088b2:	429e      	cmp	r6, r3
 81088b4:	d02b      	beq.n	810890e <ai_platform_get_activations_map+0x7a>
 81088b6:	f1a1 0001 	sub.w	r0, r1, #1
 81088ba:	6025      	str	r5, [r4, #0]
 81088bc:	fab0 f080 	clz	r0, r0
 81088c0:	0940      	lsrs	r0, r0, #5
 81088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81088c4:	42a7      	cmp	r7, r4
 81088c6:	d035      	beq.n	8108934 <ai_platform_get_activations_map+0xa0>
 81088c8:	2000      	movs	r0, #0
 81088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81088cc:	f102 000c 	add.w	r0, r2, #12
 81088d0:	f7ff ff6e 	bl	81087b0 <ai_buffer_array_sane>
 81088d4:	2800      	cmp	r0, #0
 81088d6:	d0f7      	beq.n	81088c8 <ai_platform_get_activations_map+0x34>
 81088d8:	89eb      	ldrh	r3, [r5, #14]
 81088da:	429f      	cmp	r7, r3
 81088dc:	d1f4      	bne.n	81088c8 <ai_platform_get_activations_map+0x34>
 81088de:	f04f 0e00 	mov.w	lr, #0
 81088e2:	1f23      	subs	r3, r4, #4
 81088e4:	4670      	mov	r0, lr
 81088e6:	692a      	ldr	r2, [r5, #16]
 81088e8:	eb02 0c0e 	add.w	ip, r2, lr
 81088ec:	f10e 0e1c 	add.w	lr, lr, #28
 81088f0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 81088f4:	b124      	cbz	r4, 8108900 <ai_platform_get_activations_map+0x6c>
 81088f6:	3001      	adds	r0, #1
 81088f8:	4287      	cmp	r7, r0
 81088fa:	f843 4f04 	str.w	r4, [r3, #4]!
 81088fe:	d1f2      	bne.n	81088e6 <ai_platform_get_activations_map+0x52>
 8108900:	1a38      	subs	r0, r7, r0
 8108902:	fab0 f080 	clz	r0, r0
 8108906:	0940      	lsrs	r0, r0, #5
 8108908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810890a:	2000      	movs	r0, #0
 810890c:	4770      	bx	lr
 810890e:	1f23      	subs	r3, r4, #4
 8108910:	4628      	mov	r0, r5
 8108912:	2400      	movs	r4, #0
 8108914:	e000      	b.n	8108918 <ai_platform_get_activations_map+0x84>
 8108916:	4614      	mov	r4, r2
 8108918:	f850 2f04 	ldr.w	r2, [r0, #4]!
 810891c:	42b2      	cmp	r2, r6
 810891e:	d0d1      	beq.n	81088c4 <ai_platform_get_activations_map+0x30>
 8108920:	f843 2f04 	str.w	r2, [r3, #4]!
 8108924:	1c62      	adds	r2, r4, #1
 8108926:	4297      	cmp	r7, r2
 8108928:	d1f5      	bne.n	8108916 <ai_platform_get_activations_map+0x82>
 810892a:	3402      	adds	r4, #2
 810892c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8108930:	42b3      	cmp	r3, r6
 8108932:	d1c9      	bne.n	81088c8 <ai_platform_get_activations_map+0x34>
 8108934:	2001      	movs	r0, #1
 8108936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108938:	a1facade 	.word	0xa1facade

0810893c <ai_platform_bind_network_params>:
 810893c:	b1a0      	cbz	r0, 8108968 <ai_platform_bind_network_params+0x2c>
 810893e:	b1b1      	cbz	r1, 810896e <ai_platform_bind_network_params+0x32>
 8108940:	b1c2      	cbz	r2, 8108974 <ai_platform_bind_network_params+0x38>
 8108942:	b410      	push	{r4}
 8108944:	4603      	mov	r3, r0
 8108946:	4c0d      	ldr	r4, [pc, #52]	; (810897c <ai_platform_bind_network_params+0x40>)
 8108948:	f843 4b04 	str.w	r4, [r3], #4
 810894c:	f100 0c0c 	add.w	ip, r0, #12
 8108950:	c903      	ldmia	r1, {r0, r1}
 8108952:	e883 0003 	stmia.w	r3, {r0, r1}
 8108956:	e892 0003 	ldmia.w	r2, {r0, r1}
 810895a:	e88c 0003 	stmia.w	ip, {r0, r1}
 810895e:	2301      	movs	r3, #1
 8108960:	4618      	mov	r0, r3
 8108962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108966:	4770      	bx	lr
 8108968:	4603      	mov	r3, r0
 810896a:	4618      	mov	r0, r3
 810896c:	4770      	bx	lr
 810896e:	460b      	mov	r3, r1
 8108970:	4618      	mov	r0, r3
 8108972:	4770      	bx	lr
 8108974:	4613      	mov	r3, r2
 8108976:	4618      	mov	r0, r3
 8108978:	4770      	bx	lr
 810897a:	bf00      	nop
 810897c:	a1facade 	.word	0xa1facade

08108980 <ai_platform_network_get_error>:
 8108980:	b510      	push	{r4, lr}
 8108982:	b1f0      	cbz	r0, 81089c2 <ai_platform_network_get_error+0x42>
 8108984:	4b2f      	ldr	r3, [pc, #188]	; (8108a44 <ai_platform_network_get_error+0xc4>)
 8108986:	6802      	ldr	r2, [r0, #0]
 8108988:	429a      	cmp	r2, r3
 810898a:	4604      	mov	r4, r0
 810898c:	d119      	bne.n	81089c2 <ai_platform_network_get_error+0x42>
 810898e:	f7ff ff29 	bl	81087e4 <_ai_platform_acquire_crc>
 8108992:	4b2d      	ldr	r3, [pc, #180]	; (8108a48 <ai_platform_network_get_error+0xc8>)
 8108994:	681b      	ldr	r3, [r3, #0]
 8108996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810899a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810899e:	d03c      	beq.n	8108a1a <ai_platform_network_get_error+0x9a>
 81089a0:	4a2a      	ldr	r2, [pc, #168]	; (8108a4c <ai_platform_network_get_error+0xcc>)
 81089a2:	2301      	movs	r3, #1
 81089a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81089a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81089ac:	2b00      	cmp	r3, #0
 81089ae:	d1fb      	bne.n	81089a8 <ai_platform_network_get_error+0x28>
 81089b0:	4b27      	ldr	r3, [pc, #156]	; (8108a50 <ai_platform_network_get_error+0xd0>)
 81089b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81089b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81089ba:	4b26      	ldr	r3, [pc, #152]	; (8108a54 <ai_platform_network_get_error+0xd4>)
 81089bc:	429a      	cmp	r2, r3
 81089be:	d038      	beq.n	8108a32 <ai_platform_network_get_error+0xb2>
 81089c0:	e7fe      	b.n	81089c0 <ai_platform_network_get_error+0x40>
 81089c2:	f7ff ff0f 	bl	81087e4 <_ai_platform_acquire_crc>
 81089c6:	4b20      	ldr	r3, [pc, #128]	; (8108a48 <ai_platform_network_get_error+0xc8>)
 81089c8:	681b      	ldr	r3, [r3, #0]
 81089ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81089ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81089d2:	d010      	beq.n	81089f6 <ai_platform_network_get_error+0x76>
 81089d4:	4a1d      	ldr	r2, [pc, #116]	; (8108a4c <ai_platform_network_get_error+0xcc>)
 81089d6:	2301      	movs	r3, #1
 81089d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81089dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81089e0:	2b00      	cmp	r3, #0
 81089e2:	d1fb      	bne.n	81089dc <ai_platform_network_get_error+0x5c>
 81089e4:	4b1a      	ldr	r3, [pc, #104]	; (8108a50 <ai_platform_network_get_error+0xd0>)
 81089e6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81089ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81089ee:	4b19      	ldr	r3, [pc, #100]	; (8108a54 <ai_platform_network_get_error+0xd4>)
 81089f0:	429a      	cmp	r2, r3
 81089f2:	d00d      	beq.n	8108a10 <ai_platform_network_get_error+0x90>
 81089f4:	e7fe      	b.n	81089f4 <ai_platform_network_get_error+0x74>
 81089f6:	4a18      	ldr	r2, [pc, #96]	; (8108a58 <ai_platform_network_get_error+0xd8>)
 81089f8:	2301      	movs	r3, #1
 81089fa:	6093      	str	r3, [r2, #8]
 81089fc:	6893      	ldr	r3, [r2, #8]
 81089fe:	2b00      	cmp	r3, #0
 8108a00:	d1fc      	bne.n	81089fc <ai_platform_network_get_error+0x7c>
 8108a02:	4b13      	ldr	r3, [pc, #76]	; (8108a50 <ai_platform_network_get_error+0xd0>)
 8108a04:	6013      	str	r3, [r2, #0]
 8108a06:	6812      	ldr	r2, [r2, #0]
 8108a08:	4b12      	ldr	r3, [pc, #72]	; (8108a54 <ai_platform_network_get_error+0xd4>)
 8108a0a:	429a      	cmp	r2, r3
 8108a0c:	d000      	beq.n	8108a10 <ai_platform_network_get_error+0x90>
 8108a0e:	e7fe      	b.n	8108a0e <ai_platform_network_get_error+0x8e>
 8108a10:	f7ff feea 	bl	81087e8 <_ai_platform_release_crc>
 8108a14:	f241 0010 	movw	r0, #4112	; 0x1010
 8108a18:	bd10      	pop	{r4, pc}
 8108a1a:	4a0f      	ldr	r2, [pc, #60]	; (8108a58 <ai_platform_network_get_error+0xd8>)
 8108a1c:	2301      	movs	r3, #1
 8108a1e:	6093      	str	r3, [r2, #8]
 8108a20:	6893      	ldr	r3, [r2, #8]
 8108a22:	2b00      	cmp	r3, #0
 8108a24:	d1fc      	bne.n	8108a20 <ai_platform_network_get_error+0xa0>
 8108a26:	4b0a      	ldr	r3, [pc, #40]	; (8108a50 <ai_platform_network_get_error+0xd0>)
 8108a28:	6013      	str	r3, [r2, #0]
 8108a2a:	6812      	ldr	r2, [r2, #0]
 8108a2c:	4b09      	ldr	r3, [pc, #36]	; (8108a54 <ai_platform_network_get_error+0xd4>)
 8108a2e:	429a      	cmp	r2, r3
 8108a30:	d107      	bne.n	8108a42 <ai_platform_network_get_error+0xc2>
 8108a32:	f7ff fed9 	bl	81087e8 <_ai_platform_release_crc>
 8108a36:	f104 0010 	add.w	r0, r4, #16
 8108a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108a3e:	f000 be8b 	b.w	8109758 <core_get_error>
 8108a42:	e7fe      	b.n	8108a42 <ai_platform_network_get_error+0xc2>
 8108a44:	a1c00100 	.word	0xa1c00100
 8108a48:	e0042000 	.word	0xe0042000
 8108a4c:	58024000 	.word	0x58024000
 8108a50:	f407a5c2 	.word	0xf407a5c2
 8108a54:	b5e8b5cd 	.word	0xb5e8b5cd
 8108a58:	40023000 	.word	0x40023000

08108a5c <ai_platform_network_set_error>:
 8108a5c:	b110      	cbz	r0, 8108a64 <ai_platform_network_set_error+0x8>
 8108a5e:	3010      	adds	r0, #16
 8108a60:	f000 be80 	b.w	8109764 <core_set_error>
 8108a64:	4770      	bx	lr
 8108a66:	bf00      	nop

08108a68 <ai_platform_inputs_get>:
 8108a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108a6c:	b085      	sub	sp, #20
 8108a6e:	9102      	str	r1, [sp, #8]
 8108a70:	b1f0      	cbz	r0, 8108ab0 <ai_platform_inputs_get+0x48>
 8108a72:	4b62      	ldr	r3, [pc, #392]	; (8108bfc <ai_platform_inputs_get+0x194>)
 8108a74:	6802      	ldr	r2, [r0, #0]
 8108a76:	429a      	cmp	r2, r3
 8108a78:	4607      	mov	r7, r0
 8108a7a:	d119      	bne.n	8108ab0 <ai_platform_inputs_get+0x48>
 8108a7c:	f7ff feb2 	bl	81087e4 <_ai_platform_acquire_crc>
 8108a80:	4b5f      	ldr	r3, [pc, #380]	; (8108c00 <ai_platform_inputs_get+0x198>)
 8108a82:	681b      	ldr	r3, [r3, #0]
 8108a84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108a8c:	d03d      	beq.n	8108b0a <ai_platform_inputs_get+0xa2>
 8108a8e:	4a5d      	ldr	r2, [pc, #372]	; (8108c04 <ai_platform_inputs_get+0x19c>)
 8108a90:	2301      	movs	r3, #1
 8108a92:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108a96:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108a9a:	2b00      	cmp	r3, #0
 8108a9c:	d1fb      	bne.n	8108a96 <ai_platform_inputs_get+0x2e>
 8108a9e:	4b5a      	ldr	r3, [pc, #360]	; (8108c08 <ai_platform_inputs_get+0x1a0>)
 8108aa0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108aa4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108aa8:	4b58      	ldr	r3, [pc, #352]	; (8108c0c <ai_platform_inputs_get+0x1a4>)
 8108aaa:	429a      	cmp	r2, r3
 8108aac:	d039      	beq.n	8108b22 <ai_platform_inputs_get+0xba>
 8108aae:	e7fe      	b.n	8108aae <ai_platform_inputs_get+0x46>
 8108ab0:	f7ff fe98 	bl	81087e4 <_ai_platform_acquire_crc>
 8108ab4:	4b52      	ldr	r3, [pc, #328]	; (8108c00 <ai_platform_inputs_get+0x198>)
 8108ab6:	681b      	ldr	r3, [r3, #0]
 8108ab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108ac0:	d010      	beq.n	8108ae4 <ai_platform_inputs_get+0x7c>
 8108ac2:	4a50      	ldr	r2, [pc, #320]	; (8108c04 <ai_platform_inputs_get+0x19c>)
 8108ac4:	2301      	movs	r3, #1
 8108ac6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108aca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108ace:	2b00      	cmp	r3, #0
 8108ad0:	d1fb      	bne.n	8108aca <ai_platform_inputs_get+0x62>
 8108ad2:	4b4d      	ldr	r3, [pc, #308]	; (8108c08 <ai_platform_inputs_get+0x1a0>)
 8108ad4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108ad8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108adc:	4b4b      	ldr	r3, [pc, #300]	; (8108c0c <ai_platform_inputs_get+0x1a4>)
 8108ade:	429a      	cmp	r2, r3
 8108ae0:	d00d      	beq.n	8108afe <ai_platform_inputs_get+0x96>
 8108ae2:	e7fe      	b.n	8108ae2 <ai_platform_inputs_get+0x7a>
 8108ae4:	4a4a      	ldr	r2, [pc, #296]	; (8108c10 <ai_platform_inputs_get+0x1a8>)
 8108ae6:	2301      	movs	r3, #1
 8108ae8:	6093      	str	r3, [r2, #8]
 8108aea:	6893      	ldr	r3, [r2, #8]
 8108aec:	2b00      	cmp	r3, #0
 8108aee:	d1fc      	bne.n	8108aea <ai_platform_inputs_get+0x82>
 8108af0:	4b45      	ldr	r3, [pc, #276]	; (8108c08 <ai_platform_inputs_get+0x1a0>)
 8108af2:	6013      	str	r3, [r2, #0]
 8108af4:	6812      	ldr	r2, [r2, #0]
 8108af6:	4b45      	ldr	r3, [pc, #276]	; (8108c0c <ai_platform_inputs_get+0x1a4>)
 8108af8:	429a      	cmp	r2, r3
 8108afa:	d000      	beq.n	8108afe <ai_platform_inputs_get+0x96>
 8108afc:	e7fe      	b.n	8108afc <ai_platform_inputs_get+0x94>
 8108afe:	f7ff fe73 	bl	81087e8 <_ai_platform_release_crc>
 8108b02:	2000      	movs	r0, #0
 8108b04:	b005      	add	sp, #20
 8108b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108b0a:	4a41      	ldr	r2, [pc, #260]	; (8108c10 <ai_platform_inputs_get+0x1a8>)
 8108b0c:	2301      	movs	r3, #1
 8108b0e:	6093      	str	r3, [r2, #8]
 8108b10:	6893      	ldr	r3, [r2, #8]
 8108b12:	2b00      	cmp	r3, #0
 8108b14:	d1fc      	bne.n	8108b10 <ai_platform_inputs_get+0xa8>
 8108b16:	4b3c      	ldr	r3, [pc, #240]	; (8108c08 <ai_platform_inputs_get+0x1a0>)
 8108b18:	6013      	str	r3, [r2, #0]
 8108b1a:	6812      	ldr	r2, [r2, #0]
 8108b1c:	4b3b      	ldr	r3, [pc, #236]	; (8108c0c <ai_platform_inputs_get+0x1a4>)
 8108b1e:	429a      	cmp	r2, r3
 8108b20:	d155      	bne.n	8108bce <ai_platform_inputs_get+0x166>
 8108b22:	f7ff fe61 	bl	81087e8 <_ai_platform_release_crc>
 8108b26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8108b28:	2b00      	cmp	r3, #0
 8108b2a:	d051      	beq.n	8108bd0 <ai_platform_inputs_get+0x168>
 8108b2c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8108b30:	f1ba 0f00 	cmp.w	sl, #0
 8108b34:	d04c      	beq.n	8108bd0 <ai_platform_inputs_get+0x168>
 8108b36:	f04f 0b00 	mov.w	fp, #0
 8108b3a:	465d      	mov	r5, fp
 8108b3c:	9703      	str	r7, [sp, #12]
 8108b3e:	e016      	b.n	8108b6e <ai_platform_inputs_get+0x106>
 8108b40:	9901      	ldr	r1, [sp, #4]
 8108b42:	2301      	movs	r3, #1
 8108b44:	507b      	str	r3, [r7, r1]
 8108b46:	69b1      	ldr	r1, [r6, #24]
 8108b48:	6849      	ldr	r1, [r1, #4]
 8108b4a:	6121      	str	r1, [r4, #16]
 8108b4c:	f04f 0301 	mov.w	r3, #1
 8108b50:	7523      	strb	r3, [r4, #20]
 8108b52:	e9c4 c200 	strd	ip, r2, [r4]
 8108b56:	6962      	ldr	r2, [r4, #20]
 8108b58:	60a0      	str	r0, [r4, #8]
 8108b5a:	2300      	movs	r3, #0
 8108b5c:	f369 221f 	bfi	r2, r9, #8, #24
 8108b60:	f8c4 8018 	str.w	r8, [r4, #24]
 8108b64:	60e3      	str	r3, [r4, #12]
 8108b66:	3501      	adds	r5, #1
 8108b68:	f10b 0b1c 	add.w	fp, fp, #28
 8108b6c:	6162      	str	r2, [r4, #20]
 8108b6e:	f8ba 3000 	ldrh.w	r3, [sl]
 8108b72:	42ab      	cmp	r3, r5
 8108b74:	b2aa      	uxth	r2, r5
 8108b76:	d93a      	bls.n	8108bee <ai_platform_inputs_get+0x186>
 8108b78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8108b7c:	00e9      	lsls	r1, r5, #3
 8108b7e:	9101      	str	r1, [sp, #4]
 8108b80:	2b00      	cmp	r3, #0
 8108b82:	d034      	beq.n	8108bee <ai_platform_inputs_get+0x186>
 8108b84:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8108b88:	2e00      	cmp	r6, #0
 8108b8a:	d030      	beq.n	8108bee <ai_platform_inputs_get+0x186>
 8108b8c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108b90:	69b2      	ldr	r2, [r6, #24]
 8108b92:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8108b96:	6810      	ldr	r0, [r2, #0]
 8108b98:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8108b9c:	68b3      	ldr	r3, [r6, #8]
 8108b9e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8108ba2:	f001 fc93 	bl	810a4cc <ai_array_to_buffer_fmt>
 8108ba6:	69b1      	ldr	r1, [r6, #24]
 8108ba8:	4684      	mov	ip, r0
 8108baa:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8108bae:	688a      	ldr	r2, [r1, #8]
 8108bb0:	445c      	add	r4, fp
 8108bb2:	2800      	cmp	r0, #0
 8108bb4:	d0c8      	beq.n	8108b48 <ai_platform_inputs_get+0xe0>
 8108bb6:	2100      	movs	r1, #0
 8108bb8:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8108bbc:	6831      	ldr	r1, [r6, #0]
 8108bbe:	6041      	str	r1, [r0, #4]
 8108bc0:	b111      	cbz	r1, 8108bc8 <ai_platform_inputs_get+0x160>
 8108bc2:	8849      	ldrh	r1, [r1, #2]
 8108bc4:	2900      	cmp	r1, #0
 8108bc6:	d1bb      	bne.n	8108b40 <ai_platform_inputs_get+0xd8>
 8108bc8:	69b1      	ldr	r1, [r6, #24]
 8108bca:	2000      	movs	r0, #0
 8108bcc:	e7bc      	b.n	8108b48 <ai_platform_inputs_get+0xe0>
 8108bce:	e7fe      	b.n	8108bce <ai_platform_inputs_get+0x166>
 8108bd0:	2218      	movs	r2, #24
 8108bd2:	2111      	movs	r1, #17
 8108bd4:	f107 0010 	add.w	r0, r7, #16
 8108bd8:	f000 fdc4 	bl	8109764 <core_set_error>
 8108bdc:	2200      	movs	r2, #0
 8108bde:	4610      	mov	r0, r2
 8108be0:	9b02      	ldr	r3, [sp, #8]
 8108be2:	2b00      	cmp	r3, #0
 8108be4:	d08e      	beq.n	8108b04 <ai_platform_inputs_get+0x9c>
 8108be6:	801a      	strh	r2, [r3, #0]
 8108be8:	b005      	add	sp, #20
 8108bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108bee:	9f03      	ldr	r7, [sp, #12]
 8108bf0:	2a00      	cmp	r2, #0
 8108bf2:	d0ed      	beq.n	8108bd0 <ai_platform_inputs_get+0x168>
 8108bf4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108bf8:	6858      	ldr	r0, [r3, #4]
 8108bfa:	e7f1      	b.n	8108be0 <ai_platform_inputs_get+0x178>
 8108bfc:	a1c00100 	.word	0xa1c00100
 8108c00:	e0042000 	.word	0xe0042000
 8108c04:	58024000 	.word	0x58024000
 8108c08:	f407a5c2 	.word	0xf407a5c2
 8108c0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8108c10:	40023000 	.word	0x40023000

08108c14 <ai_platform_outputs_get>:
 8108c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108c18:	b085      	sub	sp, #20
 8108c1a:	9102      	str	r1, [sp, #8]
 8108c1c:	b1f0      	cbz	r0, 8108c5c <ai_platform_outputs_get+0x48>
 8108c1e:	4b5f      	ldr	r3, [pc, #380]	; (8108d9c <ai_platform_outputs_get+0x188>)
 8108c20:	6802      	ldr	r2, [r0, #0]
 8108c22:	429a      	cmp	r2, r3
 8108c24:	4607      	mov	r7, r0
 8108c26:	d119      	bne.n	8108c5c <ai_platform_outputs_get+0x48>
 8108c28:	f7ff fddc 	bl	81087e4 <_ai_platform_acquire_crc>
 8108c2c:	4b5c      	ldr	r3, [pc, #368]	; (8108da0 <ai_platform_outputs_get+0x18c>)
 8108c2e:	681b      	ldr	r3, [r3, #0]
 8108c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108c38:	d03d      	beq.n	8108cb6 <ai_platform_outputs_get+0xa2>
 8108c3a:	4a5a      	ldr	r2, [pc, #360]	; (8108da4 <ai_platform_outputs_get+0x190>)
 8108c3c:	2301      	movs	r3, #1
 8108c3e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108c42:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108c46:	2b00      	cmp	r3, #0
 8108c48:	d1fb      	bne.n	8108c42 <ai_platform_outputs_get+0x2e>
 8108c4a:	4b57      	ldr	r3, [pc, #348]	; (8108da8 <ai_platform_outputs_get+0x194>)
 8108c4c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108c50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108c54:	4b55      	ldr	r3, [pc, #340]	; (8108dac <ai_platform_outputs_get+0x198>)
 8108c56:	429a      	cmp	r2, r3
 8108c58:	d039      	beq.n	8108cce <ai_platform_outputs_get+0xba>
 8108c5a:	e7fe      	b.n	8108c5a <ai_platform_outputs_get+0x46>
 8108c5c:	f7ff fdc2 	bl	81087e4 <_ai_platform_acquire_crc>
 8108c60:	4b4f      	ldr	r3, [pc, #316]	; (8108da0 <ai_platform_outputs_get+0x18c>)
 8108c62:	681b      	ldr	r3, [r3, #0]
 8108c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108c6c:	d010      	beq.n	8108c90 <ai_platform_outputs_get+0x7c>
 8108c6e:	4a4d      	ldr	r2, [pc, #308]	; (8108da4 <ai_platform_outputs_get+0x190>)
 8108c70:	2301      	movs	r3, #1
 8108c72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108c76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108c7a:	2b00      	cmp	r3, #0
 8108c7c:	d1fb      	bne.n	8108c76 <ai_platform_outputs_get+0x62>
 8108c7e:	4b4a      	ldr	r3, [pc, #296]	; (8108da8 <ai_platform_outputs_get+0x194>)
 8108c80:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108c84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108c88:	4b48      	ldr	r3, [pc, #288]	; (8108dac <ai_platform_outputs_get+0x198>)
 8108c8a:	429a      	cmp	r2, r3
 8108c8c:	d00d      	beq.n	8108caa <ai_platform_outputs_get+0x96>
 8108c8e:	e7fe      	b.n	8108c8e <ai_platform_outputs_get+0x7a>
 8108c90:	4a47      	ldr	r2, [pc, #284]	; (8108db0 <ai_platform_outputs_get+0x19c>)
 8108c92:	2301      	movs	r3, #1
 8108c94:	6093      	str	r3, [r2, #8]
 8108c96:	6893      	ldr	r3, [r2, #8]
 8108c98:	2b00      	cmp	r3, #0
 8108c9a:	d1fc      	bne.n	8108c96 <ai_platform_outputs_get+0x82>
 8108c9c:	4b42      	ldr	r3, [pc, #264]	; (8108da8 <ai_platform_outputs_get+0x194>)
 8108c9e:	6013      	str	r3, [r2, #0]
 8108ca0:	6812      	ldr	r2, [r2, #0]
 8108ca2:	4b42      	ldr	r3, [pc, #264]	; (8108dac <ai_platform_outputs_get+0x198>)
 8108ca4:	429a      	cmp	r2, r3
 8108ca6:	d000      	beq.n	8108caa <ai_platform_outputs_get+0x96>
 8108ca8:	e7fe      	b.n	8108ca8 <ai_platform_outputs_get+0x94>
 8108caa:	f7ff fd9d 	bl	81087e8 <_ai_platform_release_crc>
 8108cae:	2000      	movs	r0, #0
 8108cb0:	b005      	add	sp, #20
 8108cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108cb6:	4a3e      	ldr	r2, [pc, #248]	; (8108db0 <ai_platform_outputs_get+0x19c>)
 8108cb8:	2301      	movs	r3, #1
 8108cba:	6093      	str	r3, [r2, #8]
 8108cbc:	6893      	ldr	r3, [r2, #8]
 8108cbe:	2b00      	cmp	r3, #0
 8108cc0:	d1fc      	bne.n	8108cbc <ai_platform_outputs_get+0xa8>
 8108cc2:	4b39      	ldr	r3, [pc, #228]	; (8108da8 <ai_platform_outputs_get+0x194>)
 8108cc4:	6013      	str	r3, [r2, #0]
 8108cc6:	6812      	ldr	r2, [r2, #0]
 8108cc8:	4b38      	ldr	r3, [pc, #224]	; (8108dac <ai_platform_outputs_get+0x198>)
 8108cca:	429a      	cmp	r2, r3
 8108ccc:	d150      	bne.n	8108d70 <ai_platform_outputs_get+0x15c>
 8108cce:	f7ff fd8b 	bl	81087e8 <_ai_platform_release_crc>
 8108cd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8108cd4:	2b01      	cmp	r3, #1
 8108cd6:	d958      	bls.n	8108d8a <ai_platform_outputs_get+0x176>
 8108cd8:	f04f 0b00 	mov.w	fp, #0
 8108cdc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8108ce0:	9703      	str	r7, [sp, #12]
 8108ce2:	465d      	mov	r5, fp
 8108ce4:	e016      	b.n	8108d14 <ai_platform_outputs_get+0x100>
 8108ce6:	9901      	ldr	r1, [sp, #4]
 8108ce8:	2301      	movs	r3, #1
 8108cea:	507b      	str	r3, [r7, r1]
 8108cec:	69b1      	ldr	r1, [r6, #24]
 8108cee:	6849      	ldr	r1, [r1, #4]
 8108cf0:	6121      	str	r1, [r4, #16]
 8108cf2:	f04f 0301 	mov.w	r3, #1
 8108cf6:	7523      	strb	r3, [r4, #20]
 8108cf8:	e9c4 c200 	strd	ip, r2, [r4]
 8108cfc:	6962      	ldr	r2, [r4, #20]
 8108cfe:	60a0      	str	r0, [r4, #8]
 8108d00:	2300      	movs	r3, #0
 8108d02:	f369 221f 	bfi	r2, r9, #8, #24
 8108d06:	f8c4 8018 	str.w	r8, [r4, #24]
 8108d0a:	60e3      	str	r3, [r4, #12]
 8108d0c:	3501      	adds	r5, #1
 8108d0e:	f10b 0b1c 	add.w	fp, fp, #28
 8108d12:	6162      	str	r2, [r4, #20]
 8108d14:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8108d18:	42ab      	cmp	r3, r5
 8108d1a:	b2aa      	uxth	r2, r5
 8108d1c:	d929      	bls.n	8108d72 <ai_platform_outputs_get+0x15e>
 8108d1e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8108d22:	00e9      	lsls	r1, r5, #3
 8108d24:	9101      	str	r1, [sp, #4]
 8108d26:	b323      	cbz	r3, 8108d72 <ai_platform_outputs_get+0x15e>
 8108d28:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8108d2c:	b30e      	cbz	r6, 8108d72 <ai_platform_outputs_get+0x15e>
 8108d2e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8108d32:	69b2      	ldr	r2, [r6, #24]
 8108d34:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8108d38:	6810      	ldr	r0, [r2, #0]
 8108d3a:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8108d3e:	68b3      	ldr	r3, [r6, #8]
 8108d40:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8108d44:	f001 fbc2 	bl	810a4cc <ai_array_to_buffer_fmt>
 8108d48:	69b1      	ldr	r1, [r6, #24]
 8108d4a:	4684      	mov	ip, r0
 8108d4c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8108d50:	688a      	ldr	r2, [r1, #8]
 8108d52:	445c      	add	r4, fp
 8108d54:	2800      	cmp	r0, #0
 8108d56:	d0ca      	beq.n	8108cee <ai_platform_outputs_get+0xda>
 8108d58:	2100      	movs	r1, #0
 8108d5a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8108d5e:	6831      	ldr	r1, [r6, #0]
 8108d60:	6041      	str	r1, [r0, #4]
 8108d62:	b111      	cbz	r1, 8108d6a <ai_platform_outputs_get+0x156>
 8108d64:	8849      	ldrh	r1, [r1, #2]
 8108d66:	2900      	cmp	r1, #0
 8108d68:	d1bd      	bne.n	8108ce6 <ai_platform_outputs_get+0xd2>
 8108d6a:	69b1      	ldr	r1, [r6, #24]
 8108d6c:	2000      	movs	r0, #0
 8108d6e:	e7be      	b.n	8108cee <ai_platform_outputs_get+0xda>
 8108d70:	e7fe      	b.n	8108d70 <ai_platform_outputs_get+0x15c>
 8108d72:	9f03      	ldr	r7, [sp, #12]
 8108d74:	b14a      	cbz	r2, 8108d8a <ai_platform_outputs_get+0x176>
 8108d76:	f8da 3014 	ldr.w	r3, [sl, #20]
 8108d7a:	6858      	ldr	r0, [r3, #4]
 8108d7c:	9b02      	ldr	r3, [sp, #8]
 8108d7e:	2b00      	cmp	r3, #0
 8108d80:	d096      	beq.n	8108cb0 <ai_platform_outputs_get+0x9c>
 8108d82:	801a      	strh	r2, [r3, #0]
 8108d84:	b005      	add	sp, #20
 8108d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108d8a:	2218      	movs	r2, #24
 8108d8c:	2111      	movs	r1, #17
 8108d8e:	f107 0010 	add.w	r0, r7, #16
 8108d92:	f000 fce7 	bl	8109764 <core_set_error>
 8108d96:	2200      	movs	r2, #0
 8108d98:	4610      	mov	r0, r2
 8108d9a:	e7ef      	b.n	8108d7c <ai_platform_outputs_get+0x168>
 8108d9c:	a1c00100 	.word	0xa1c00100
 8108da0:	e0042000 	.word	0xe0042000
 8108da4:	58024000 	.word	0x58024000
 8108da8:	f407a5c2 	.word	0xf407a5c2
 8108dac:	b5e8b5cd 	.word	0xb5e8b5cd
 8108db0:	40023000 	.word	0x40023000

08108db4 <ai_platform_network_create>:
 8108db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108db8:	b083      	sub	sp, #12
 8108dba:	4606      	mov	r6, r0
 8108dbc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8108dc0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8108dc4:	4615      	mov	r5, r2
 8108dc6:	461f      	mov	r7, r3
 8108dc8:	f7ff fd0c 	bl	81087e4 <_ai_platform_acquire_crc>
 8108dcc:	b188      	cbz	r0, 8108df2 <ai_platform_network_create+0x3e>
 8108dce:	4a5d      	ldr	r2, [pc, #372]	; (8108f44 <ai_platform_network_create+0x190>)
 8108dd0:	6812      	ldr	r2, [r2, #0]
 8108dd2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8108dd6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8108dda:	4603      	mov	r3, r0
 8108ddc:	d00e      	beq.n	8108dfc <ai_platform_network_create+0x48>
 8108dde:	4a5a      	ldr	r2, [pc, #360]	; (8108f48 <ai_platform_network_create+0x194>)
 8108de0:	2118      	movs	r1, #24
 8108de2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8108de6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8108dea:	2918      	cmp	r1, #24
 8108dec:	d018      	beq.n	8108e20 <ai_platform_network_create+0x6c>
 8108dee:	f7ff fcfb 	bl	81087e8 <_ai_platform_release_crc>
 8108df2:	f244 1033 	movw	r0, #16691	; 0x4133
 8108df6:	b003      	add	sp, #12
 8108df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108dfc:	4a53      	ldr	r2, [pc, #332]	; (8108f4c <ai_platform_network_create+0x198>)
 8108dfe:	2101      	movs	r1, #1
 8108e00:	6091      	str	r1, [r2, #8]
 8108e02:	2114      	movs	r1, #20
 8108e04:	e001      	b.n	8108e0a <ai_platform_network_create+0x56>
 8108e06:	3901      	subs	r1, #1
 8108e08:	d002      	beq.n	8108e10 <ai_platform_network_create+0x5c>
 8108e0a:	6894      	ldr	r4, [r2, #8]
 8108e0c:	2c00      	cmp	r4, #0
 8108e0e:	d1fa      	bne.n	8108e06 <ai_platform_network_create+0x52>
 8108e10:	4a4e      	ldr	r2, [pc, #312]	; (8108f4c <ai_platform_network_create+0x198>)
 8108e12:	6891      	ldr	r1, [r2, #8]
 8108e14:	b911      	cbnz	r1, 8108e1c <ai_platform_network_create+0x68>
 8108e16:	6812      	ldr	r2, [r2, #0]
 8108e18:	3201      	adds	r2, #1
 8108e1a:	d008      	beq.n	8108e2e <ai_platform_network_create+0x7a>
 8108e1c:	4618      	mov	r0, r3
 8108e1e:	e7e6      	b.n	8108dee <ai_platform_network_create+0x3a>
 8108e20:	2101      	movs	r1, #1
 8108e22:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8108e26:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8108e2a:	2900      	cmp	r1, #0
 8108e2c:	d1fb      	bne.n	8108e26 <ai_platform_network_create+0x72>
 8108e2e:	4618      	mov	r0, r3
 8108e30:	f7ff fcda 	bl	81087e8 <_ai_platform_release_crc>
 8108e34:	f7ff fcd6 	bl	81087e4 <_ai_platform_acquire_crc>
 8108e38:	4b42      	ldr	r3, [pc, #264]	; (8108f44 <ai_platform_network_create+0x190>)
 8108e3a:	681b      	ldr	r3, [r3, #0]
 8108e3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108e44:	d010      	beq.n	8108e68 <ai_platform_network_create+0xb4>
 8108e46:	4b40      	ldr	r3, [pc, #256]	; (8108f48 <ai_platform_network_create+0x194>)
 8108e48:	2201      	movs	r2, #1
 8108e4a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8108e4e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8108e52:	2900      	cmp	r1, #0
 8108e54:	d1fb      	bne.n	8108e4e <ai_platform_network_create+0x9a>
 8108e56:	4a3e      	ldr	r2, [pc, #248]	; (8108f50 <ai_platform_network_create+0x19c>)
 8108e58:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8108e5c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8108e60:	4b3c      	ldr	r3, [pc, #240]	; (8108f54 <ai_platform_network_create+0x1a0>)
 8108e62:	429a      	cmp	r2, r3
 8108e64:	d00c      	beq.n	8108e80 <ai_platform_network_create+0xcc>
 8108e66:	e7fe      	b.n	8108e66 <ai_platform_network_create+0xb2>
 8108e68:	4a38      	ldr	r2, [pc, #224]	; (8108f4c <ai_platform_network_create+0x198>)
 8108e6a:	2301      	movs	r3, #1
 8108e6c:	6093      	str	r3, [r2, #8]
 8108e6e:	6893      	ldr	r3, [r2, #8]
 8108e70:	2b00      	cmp	r3, #0
 8108e72:	d1fc      	bne.n	8108e6e <ai_platform_network_create+0xba>
 8108e74:	4b36      	ldr	r3, [pc, #216]	; (8108f50 <ai_platform_network_create+0x19c>)
 8108e76:	6013      	str	r3, [r2, #0]
 8108e78:	6812      	ldr	r2, [r2, #0]
 8108e7a:	4b36      	ldr	r3, [pc, #216]	; (8108f54 <ai_platform_network_create+0x1a0>)
 8108e7c:	429a      	cmp	r2, r3
 8108e7e:	d122      	bne.n	8108ec6 <ai_platform_network_create+0x112>
 8108e80:	f7ff fcb2 	bl	81087e8 <_ai_platform_release_crc>
 8108e84:	b38e      	cbz	r6, 8108eea <ai_platform_network_create+0x136>
 8108e86:	4b34      	ldr	r3, [pc, #208]	; (8108f58 <ai_platform_network_create+0x1a4>)
 8108e88:	602b      	str	r3, [r5, #0]
 8108e8a:	6035      	str	r5, [r6, #0]
 8108e8c:	f000 fc62 	bl	8109754 <core_init>
 8108e90:	b1d0      	cbz	r0, 8108ec8 <ai_platform_network_create+0x114>
 8108e92:	f7ff fca7 	bl	81087e4 <_ai_platform_acquire_crc>
 8108e96:	4b2b      	ldr	r3, [pc, #172]	; (8108f44 <ai_platform_network_create+0x190>)
 8108e98:	681b      	ldr	r3, [r3, #0]
 8108e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108ea2:	d025      	beq.n	8108ef0 <ai_platform_network_create+0x13c>
 8108ea4:	4a28      	ldr	r2, [pc, #160]	; (8108f48 <ai_platform_network_create+0x194>)
 8108ea6:	2301      	movs	r3, #1
 8108ea8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108eac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108eb0:	2b00      	cmp	r3, #0
 8108eb2:	d1fb      	bne.n	8108eac <ai_platform_network_create+0xf8>
 8108eb4:	4b26      	ldr	r3, [pc, #152]	; (8108f50 <ai_platform_network_create+0x19c>)
 8108eb6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108eba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108ebe:	4b25      	ldr	r3, [pc, #148]	; (8108f54 <ai_platform_network_create+0x1a0>)
 8108ec0:	429a      	cmp	r2, r3
 8108ec2:	d022      	beq.n	8108f0a <ai_platform_network_create+0x156>
 8108ec4:	e7fe      	b.n	8108ec4 <ai_platform_network_create+0x110>
 8108ec6:	e7fe      	b.n	8108ec6 <ai_platform_network_create+0x112>
 8108ec8:	2430      	movs	r4, #48	; 0x30
 8108eca:	2300      	movs	r3, #0
 8108ecc:	6033      	str	r3, [r6, #0]
 8108ece:	2610      	movs	r6, #16
 8108ed0:	464a      	mov	r2, r9
 8108ed2:	4641      	mov	r1, r8
 8108ed4:	4638      	mov	r0, r7
 8108ed6:	f001 fb9f 	bl	810a618 <ai_version_get>
 8108eda:	4603      	mov	r3, r0
 8108edc:	2000      	movs	r0, #0
 8108ede:	f364 0007 	bfi	r0, r4, #0, #8
 8108ee2:	64ab      	str	r3, [r5, #72]	; 0x48
 8108ee4:	f366 201f 	bfi	r0, r6, #8, #24
 8108ee8:	e785      	b.n	8108df6 <ai_platform_network_create+0x42>
 8108eea:	f241 0010 	movw	r0, #4112	; 0x1010
 8108eee:	e782      	b.n	8108df6 <ai_platform_network_create+0x42>
 8108ef0:	4a16      	ldr	r2, [pc, #88]	; (8108f4c <ai_platform_network_create+0x198>)
 8108ef2:	2301      	movs	r3, #1
 8108ef4:	6093      	str	r3, [r2, #8]
 8108ef6:	6893      	ldr	r3, [r2, #8]
 8108ef8:	2b00      	cmp	r3, #0
 8108efa:	d1fc      	bne.n	8108ef6 <ai_platform_network_create+0x142>
 8108efc:	4b14      	ldr	r3, [pc, #80]	; (8108f50 <ai_platform_network_create+0x19c>)
 8108efe:	6013      	str	r3, [r2, #0]
 8108f00:	6812      	ldr	r2, [r2, #0]
 8108f02:	4b14      	ldr	r3, [pc, #80]	; (8108f54 <ai_platform_network_create+0x1a0>)
 8108f04:	429a      	cmp	r2, r3
 8108f06:	d000      	beq.n	8108f0a <ai_platform_network_create+0x156>
 8108f08:	e7fe      	b.n	8108f08 <ai_platform_network_create+0x154>
 8108f0a:	f7ff fc6d 	bl	81087e8 <_ai_platform_release_crc>
 8108f0e:	2200      	movs	r2, #0
 8108f10:	4641      	mov	r1, r8
 8108f12:	4638      	mov	r0, r7
 8108f14:	f001 fb80 	bl	810a618 <ai_version_get>
 8108f18:	2200      	movs	r2, #0
 8108f1a:	4604      	mov	r4, r0
 8108f1c:	2105      	movs	r1, #5
 8108f1e:	2001      	movs	r0, #1
 8108f20:	f001 fb7a 	bl	810a618 <ai_version_get>
 8108f24:	4284      	cmp	r4, r0
 8108f26:	d001      	beq.n	8108f2c <ai_platform_network_create+0x178>
 8108f28:	2401      	movs	r4, #1
 8108f2a:	e7ce      	b.n	8108eca <ai_platform_network_create+0x116>
 8108f2c:	4b0b      	ldr	r3, [pc, #44]	; (8108f5c <ai_platform_network_create+0x1a8>)
 8108f2e:	9301      	str	r3, [sp, #4]
 8108f30:	a801      	add	r0, sp, #4
 8108f32:	f000 fc23 	bl	810977c <ai_check_custom_types>
 8108f36:	b110      	cbz	r0, 8108f3e <ai_platform_network_create+0x18a>
 8108f38:	2600      	movs	r6, #0
 8108f3a:	4634      	mov	r4, r6
 8108f3c:	e7c8      	b.n	8108ed0 <ai_platform_network_create+0x11c>
 8108f3e:	2402      	movs	r4, #2
 8108f40:	e7c3      	b.n	8108eca <ai_platform_network_create+0x116>
 8108f42:	bf00      	nop
 8108f44:	e0042000 	.word	0xe0042000
 8108f48:	58024000 	.word	0x58024000
 8108f4c:	40023000 	.word	0x40023000
 8108f50:	f407a5c2 	.word	0xf407a5c2
 8108f54:	b5e8b5cd 	.word	0xb5e8b5cd
 8108f58:	a1c00100 	.word	0xa1c00100
 8108f5c:	84048403 	.word	0x84048403

08108f60 <ai_platform_network_init>:
 8108f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108f64:	b1f8      	cbz	r0, 8108fa6 <ai_platform_network_init+0x46>
 8108f66:	4b6e      	ldr	r3, [pc, #440]	; (8109120 <ai_platform_network_init+0x1c0>)
 8108f68:	6802      	ldr	r2, [r0, #0]
 8108f6a:	429a      	cmp	r2, r3
 8108f6c:	4604      	mov	r4, r0
 8108f6e:	d11a      	bne.n	8108fa6 <ai_platform_network_init+0x46>
 8108f70:	460e      	mov	r6, r1
 8108f72:	f7ff fc37 	bl	81087e4 <_ai_platform_acquire_crc>
 8108f76:	4b6b      	ldr	r3, [pc, #428]	; (8109124 <ai_platform_network_init+0x1c4>)
 8108f78:	681b      	ldr	r3, [r3, #0]
 8108f7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108f82:	d03d      	beq.n	8109000 <ai_platform_network_init+0xa0>
 8108f84:	4a68      	ldr	r2, [pc, #416]	; (8109128 <ai_platform_network_init+0x1c8>)
 8108f86:	2301      	movs	r3, #1
 8108f88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108f8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108f90:	2b00      	cmp	r3, #0
 8108f92:	d1fb      	bne.n	8108f8c <ai_platform_network_init+0x2c>
 8108f94:	4b65      	ldr	r3, [pc, #404]	; (810912c <ai_platform_network_init+0x1cc>)
 8108f96:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108f9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108f9e:	4b64      	ldr	r3, [pc, #400]	; (8109130 <ai_platform_network_init+0x1d0>)
 8108fa0:	429a      	cmp	r2, r3
 8108fa2:	d039      	beq.n	8109018 <ai_platform_network_init+0xb8>
 8108fa4:	e7fe      	b.n	8108fa4 <ai_platform_network_init+0x44>
 8108fa6:	f7ff fc1d 	bl	81087e4 <_ai_platform_acquire_crc>
 8108faa:	4b5e      	ldr	r3, [pc, #376]	; (8109124 <ai_platform_network_init+0x1c4>)
 8108fac:	681b      	ldr	r3, [r3, #0]
 8108fae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108fb6:	d010      	beq.n	8108fda <ai_platform_network_init+0x7a>
 8108fb8:	4a5b      	ldr	r2, [pc, #364]	; (8109128 <ai_platform_network_init+0x1c8>)
 8108fba:	2301      	movs	r3, #1
 8108fbc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108fc0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108fc4:	2b00      	cmp	r3, #0
 8108fc6:	d1fb      	bne.n	8108fc0 <ai_platform_network_init+0x60>
 8108fc8:	4b58      	ldr	r3, [pc, #352]	; (810912c <ai_platform_network_init+0x1cc>)
 8108fca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108fce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108fd2:	4b57      	ldr	r3, [pc, #348]	; (8109130 <ai_platform_network_init+0x1d0>)
 8108fd4:	429a      	cmp	r2, r3
 8108fd6:	d00d      	beq.n	8108ff4 <ai_platform_network_init+0x94>
 8108fd8:	e7fe      	b.n	8108fd8 <ai_platform_network_init+0x78>
 8108fda:	4a56      	ldr	r2, [pc, #344]	; (8109134 <ai_platform_network_init+0x1d4>)
 8108fdc:	2301      	movs	r3, #1
 8108fde:	6093      	str	r3, [r2, #8]
 8108fe0:	6893      	ldr	r3, [r2, #8]
 8108fe2:	2b00      	cmp	r3, #0
 8108fe4:	d1fc      	bne.n	8108fe0 <ai_platform_network_init+0x80>
 8108fe6:	4b51      	ldr	r3, [pc, #324]	; (810912c <ai_platform_network_init+0x1cc>)
 8108fe8:	6013      	str	r3, [r2, #0]
 8108fea:	6812      	ldr	r2, [r2, #0]
 8108fec:	4b50      	ldr	r3, [pc, #320]	; (8109130 <ai_platform_network_init+0x1d0>)
 8108fee:	429a      	cmp	r2, r3
 8108ff0:	d000      	beq.n	8108ff4 <ai_platform_network_init+0x94>
 8108ff2:	e7fe      	b.n	8108ff2 <ai_platform_network_init+0x92>
 8108ff4:	f7ff fbf8 	bl	81087e8 <_ai_platform_release_crc>
 8108ff8:	2600      	movs	r6, #0
 8108ffa:	4630      	mov	r0, r6
 8108ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109000:	4a4c      	ldr	r2, [pc, #304]	; (8109134 <ai_platform_network_init+0x1d4>)
 8109002:	2301      	movs	r3, #1
 8109004:	6093      	str	r3, [r2, #8]
 8109006:	6893      	ldr	r3, [r2, #8]
 8109008:	2b00      	cmp	r3, #0
 810900a:	d1fc      	bne.n	8109006 <ai_platform_network_init+0xa6>
 810900c:	4b47      	ldr	r3, [pc, #284]	; (810912c <ai_platform_network_init+0x1cc>)
 810900e:	6013      	str	r3, [r2, #0]
 8109010:	6812      	ldr	r2, [r2, #0]
 8109012:	4b47      	ldr	r3, [pc, #284]	; (8109130 <ai_platform_network_init+0x1d0>)
 8109014:	429a      	cmp	r2, r3
 8109016:	d11c      	bne.n	8109052 <ai_platform_network_init+0xf2>
 8109018:	f7ff fbe6 	bl	81087e8 <_ai_platform_release_crc>
 810901c:	2e00      	cmp	r6, #0
 810901e:	d06f      	beq.n	8109100 <ai_platform_network_init+0x1a0>
 8109020:	4b45      	ldr	r3, [pc, #276]	; (8109138 <ai_platform_network_init+0x1d8>)
 8109022:	6832      	ldr	r2, [r6, #0]
 8109024:	429a      	cmp	r2, r3
 8109026:	d115      	bne.n	8109054 <ai_platform_network_init+0xf4>
 8109028:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 810902c:	6933      	ldr	r3, [r6, #16]
 810902e:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8109032:	89f7      	ldrh	r7, [r6, #14]
 8109034:	62a3      	str	r3, [r4, #40]	; 0x28
 8109036:	e9c4 2107 	strd	r2, r1, [r4, #28]
 810903a:	2303      	movs	r3, #3
 810903c:	84e7      	strh	r7, [r4, #38]	; 0x26
 810903e:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8109042:	60e3      	str	r3, [r4, #12]
 8109044:	4620      	mov	r0, r4
 8109046:	4626      	mov	r6, r4
 8109048:	f000 fbc2 	bl	81097d0 <ai_layers_init_all>
 810904c:	4630      	mov	r0, r6
 810904e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109052:	e7fe      	b.n	8109052 <ai_platform_network_init+0xf2>
 8109054:	2101      	movs	r1, #1
 8109056:	4630      	mov	r0, r6
 8109058:	4635      	mov	r5, r6
 810905a:	6876      	ldr	r6, [r6, #4]
 810905c:	f7ff fb74 	bl	8108748 <ai_buffer_get_size>
 8109060:	f105 081c 	add.w	r8, r5, #28
 8109064:	4681      	mov	r9, r0
 8109066:	2101      	movs	r1, #1
 8109068:	4640      	mov	r0, r8
 810906a:	6a2f      	ldr	r7, [r5, #32]
 810906c:	f7ff fb6c 	bl	8108748 <ai_buffer_get_size>
 8109070:	f1b9 0f00 	cmp.w	r9, #0
 8109074:	d025      	beq.n	81090c2 <ai_platform_network_init+0x162>
 8109076:	2201      	movs	r2, #1
 8109078:	4696      	mov	lr, r2
 810907a:	bb30      	cbnz	r0, 81090ca <ai_platform_network_init+0x16a>
 810907c:	4680      	mov	r8, r0
 810907e:	4607      	mov	r7, r0
 8109080:	b376      	cbz	r6, 81090e0 <ai_platform_network_init+0x180>
 8109082:	8be3      	ldrh	r3, [r4, #30]
 8109084:	4573      	cmp	r3, lr
 8109086:	d323      	bcc.n	81090d0 <ai_platform_network_init+0x170>
 8109088:	b142      	cbz	r2, 810909c <ai_platform_network_init+0x13c>
 810908a:	46ac      	mov	ip, r5
 810908c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8109090:	6a25      	ldr	r5, [r4, #32]
 8109092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8109094:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8109098:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 810909c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 810909e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 81090a2:	2600      	movs	r6, #0
 81090a4:	42bb      	cmp	r3, r7
 81090a6:	83a6      	strh	r6, [r4, #28]
 81090a8:	d323      	bcc.n	81090f2 <ai_platform_network_init+0x192>
 81090aa:	b37f      	cbz	r7, 810910c <ai_platform_network_init+0x1ac>
 81090ac:	46c4      	mov	ip, r8
 81090ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 81090b2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 81090b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81090b6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 81090ba:	46b6      	mov	lr, r6
 81090bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 81090c0:	e7bb      	b.n	810903a <ai_platform_network_init+0xda>
 81090c2:	464a      	mov	r2, r9
 81090c4:	46ce      	mov	lr, r9
 81090c6:	464d      	mov	r5, r9
 81090c8:	e7d7      	b.n	810907a <ai_platform_network_init+0x11a>
 81090ca:	b30f      	cbz	r7, 8109110 <ai_platform_network_init+0x1b0>
 81090cc:	2701      	movs	r7, #1
 81090ce:	e7d7      	b.n	8109080 <ai_platform_network_init+0x120>
 81090d0:	2212      	movs	r2, #18
 81090d2:	2116      	movs	r1, #22
 81090d4:	f104 0010 	add.w	r0, r4, #16
 81090d8:	f000 fb44 	bl	8109764 <core_set_error>
 81090dc:	2600      	movs	r6, #0
 81090de:	e78c      	b.n	8108ffa <ai_platform_network_init+0x9a>
 81090e0:	f1b9 0f00 	cmp.w	r9, #0
 81090e4:	d0cd      	beq.n	8109082 <ai_platform_network_init+0x122>
 81090e6:	2110      	movs	r1, #16
 81090e8:	2212      	movs	r2, #18
 81090ea:	1860      	adds	r0, r4, r1
 81090ec:	f000 fb3a 	bl	8109764 <core_set_error>
 81090f0:	e783      	b.n	8108ffa <ai_platform_network_init+0x9a>
 81090f2:	2213      	movs	r2, #19
 81090f4:	2116      	movs	r1, #22
 81090f6:	f104 0010 	add.w	r0, r4, #16
 81090fa:	f000 fb33 	bl	8109764 <core_set_error>
 81090fe:	e77c      	b.n	8108ffa <ai_platform_network_init+0x9a>
 8109100:	2110      	movs	r1, #16
 8109102:	2211      	movs	r2, #17
 8109104:	1860      	adds	r0, r4, r1
 8109106:	f000 fb2d 	bl	8109764 <core_set_error>
 810910a:	e776      	b.n	8108ffa <ai_platform_network_init+0x9a>
 810910c:	46be      	mov	lr, r7
 810910e:	e794      	b.n	810903a <ai_platform_network_init+0xda>
 8109110:	2110      	movs	r1, #16
 8109112:	2213      	movs	r2, #19
 8109114:	1860      	adds	r0, r4, r1
 8109116:	f000 fb25 	bl	8109764 <core_set_error>
 810911a:	463e      	mov	r6, r7
 810911c:	e76d      	b.n	8108ffa <ai_platform_network_init+0x9a>
 810911e:	bf00      	nop
 8109120:	a1c00100 	.word	0xa1c00100
 8109124:	e0042000 	.word	0xe0042000
 8109128:	58024000 	.word	0x58024000
 810912c:	f407a5c2 	.word	0xf407a5c2
 8109130:	b5e8b5cd 	.word	0xb5e8b5cd
 8109134:	40023000 	.word	0x40023000
 8109138:	a1facade 	.word	0xa1facade

0810913c <ai_platform_network_post_init>:
 810913c:	b538      	push	{r3, r4, r5, lr}
 810913e:	b1f0      	cbz	r0, 810917e <ai_platform_network_post_init+0x42>
 8109140:	4b3c      	ldr	r3, [pc, #240]	; (8109234 <ai_platform_network_post_init+0xf8>)
 8109142:	6802      	ldr	r2, [r0, #0]
 8109144:	429a      	cmp	r2, r3
 8109146:	4604      	mov	r4, r0
 8109148:	d119      	bne.n	810917e <ai_platform_network_post_init+0x42>
 810914a:	f7ff fb4b 	bl	81087e4 <_ai_platform_acquire_crc>
 810914e:	4b3a      	ldr	r3, [pc, #232]	; (8109238 <ai_platform_network_post_init+0xfc>)
 8109150:	681b      	ldr	r3, [r3, #0]
 8109152:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810915a:	d03b      	beq.n	81091d4 <ai_platform_network_post_init+0x98>
 810915c:	4a37      	ldr	r2, [pc, #220]	; (810923c <ai_platform_network_post_init+0x100>)
 810915e:	2301      	movs	r3, #1
 8109160:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8109164:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8109168:	2b00      	cmp	r3, #0
 810916a:	d1fb      	bne.n	8109164 <ai_platform_network_post_init+0x28>
 810916c:	4b34      	ldr	r3, [pc, #208]	; (8109240 <ai_platform_network_post_init+0x104>)
 810916e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8109172:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8109176:	4b33      	ldr	r3, [pc, #204]	; (8109244 <ai_platform_network_post_init+0x108>)
 8109178:	429a      	cmp	r2, r3
 810917a:	d037      	beq.n	81091ec <ai_platform_network_post_init+0xb0>
 810917c:	e7fe      	b.n	810917c <ai_platform_network_post_init+0x40>
 810917e:	f7ff fb31 	bl	81087e4 <_ai_platform_acquire_crc>
 8109182:	4b2d      	ldr	r3, [pc, #180]	; (8109238 <ai_platform_network_post_init+0xfc>)
 8109184:	681b      	ldr	r3, [r3, #0]
 8109186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810918a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810918e:	d010      	beq.n	81091b2 <ai_platform_network_post_init+0x76>
 8109190:	4a2a      	ldr	r2, [pc, #168]	; (810923c <ai_platform_network_post_init+0x100>)
 8109192:	2301      	movs	r3, #1
 8109194:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8109198:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 810919c:	2b00      	cmp	r3, #0
 810919e:	d1fb      	bne.n	8109198 <ai_platform_network_post_init+0x5c>
 81091a0:	4b27      	ldr	r3, [pc, #156]	; (8109240 <ai_platform_network_post_init+0x104>)
 81091a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81091a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81091aa:	4b26      	ldr	r3, [pc, #152]	; (8109244 <ai_platform_network_post_init+0x108>)
 81091ac:	429a      	cmp	r2, r3
 81091ae:	d00d      	beq.n	81091cc <ai_platform_network_post_init+0x90>
 81091b0:	e7fe      	b.n	81091b0 <ai_platform_network_post_init+0x74>
 81091b2:	4a25      	ldr	r2, [pc, #148]	; (8109248 <ai_platform_network_post_init+0x10c>)
 81091b4:	2301      	movs	r3, #1
 81091b6:	6093      	str	r3, [r2, #8]
 81091b8:	6893      	ldr	r3, [r2, #8]
 81091ba:	2b00      	cmp	r3, #0
 81091bc:	d1fc      	bne.n	81091b8 <ai_platform_network_post_init+0x7c>
 81091be:	4b20      	ldr	r3, [pc, #128]	; (8109240 <ai_platform_network_post_init+0x104>)
 81091c0:	6013      	str	r3, [r2, #0]
 81091c2:	6812      	ldr	r2, [r2, #0]
 81091c4:	4b1f      	ldr	r3, [pc, #124]	; (8109244 <ai_platform_network_post_init+0x108>)
 81091c6:	429a      	cmp	r2, r3
 81091c8:	d000      	beq.n	81091cc <ai_platform_network_post_init+0x90>
 81091ca:	e7fe      	b.n	81091ca <ai_platform_network_post_init+0x8e>
 81091cc:	f7ff fb0c 	bl	81087e8 <_ai_platform_release_crc>
 81091d0:	2000      	movs	r0, #0
 81091d2:	bd38      	pop	{r3, r4, r5, pc}
 81091d4:	4a1c      	ldr	r2, [pc, #112]	; (8109248 <ai_platform_network_post_init+0x10c>)
 81091d6:	2301      	movs	r3, #1
 81091d8:	6093      	str	r3, [r2, #8]
 81091da:	6893      	ldr	r3, [r2, #8]
 81091dc:	2b00      	cmp	r3, #0
 81091de:	d1fc      	bne.n	81091da <ai_platform_network_post_init+0x9e>
 81091e0:	4b17      	ldr	r3, [pc, #92]	; (8109240 <ai_platform_network_post_init+0x104>)
 81091e2:	6013      	str	r3, [r2, #0]
 81091e4:	6812      	ldr	r2, [r2, #0]
 81091e6:	4b17      	ldr	r3, [pc, #92]	; (8109244 <ai_platform_network_post_init+0x108>)
 81091e8:	429a      	cmp	r2, r3
 81091ea:	d11a      	bne.n	8109222 <ai_platform_network_post_init+0xe6>
 81091ec:	f7ff fafc 	bl	81087e8 <_ai_platform_release_crc>
 81091f0:	68e3      	ldr	r3, [r4, #12]
 81091f2:	f013 0502 	ands.w	r5, r3, #2
 81091f6:	d015      	beq.n	8109224 <ai_platform_network_post_init+0xe8>
 81091f8:	4620      	mov	r0, r4
 81091fa:	f000 faf7 	bl	81097ec <ai_layers_post_init_all>
 81091fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8109200:	b16b      	cbz	r3, 810921e <ai_platform_network_post_init+0xe2>
 8109202:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8109204:	e007      	b.n	8109216 <ai_platform_network_post_init+0xda>
 8109206:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 810920a:	4798      	blx	r3
 810920c:	692b      	ldr	r3, [r5, #16]
 810920e:	42ab      	cmp	r3, r5
 8109210:	d005      	beq.n	810921e <ai_platform_network_post_init+0xe2>
 8109212:	b123      	cbz	r3, 810921e <ai_platform_network_post_init+0xe2>
 8109214:	461d      	mov	r5, r3
 8109216:	4629      	mov	r1, r5
 8109218:	2000      	movs	r0, #0
 810921a:	2d00      	cmp	r5, #0
 810921c:	d1f3      	bne.n	8109206 <ai_platform_network_post_init+0xca>
 810921e:	2001      	movs	r0, #1
 8109220:	bd38      	pop	{r3, r4, r5, pc}
 8109222:	e7fe      	b.n	8109222 <ai_platform_network_post_init+0xe6>
 8109224:	2210      	movs	r2, #16
 8109226:	2111      	movs	r1, #17
 8109228:	18a0      	adds	r0, r4, r2
 810922a:	f000 fa9b 	bl	8109764 <core_set_error>
 810922e:	4628      	mov	r0, r5
 8109230:	bd38      	pop	{r3, r4, r5, pc}
 8109232:	bf00      	nop
 8109234:	a1c00100 	.word	0xa1c00100
 8109238:	e0042000 	.word	0xe0042000
 810923c:	58024000 	.word	0x58024000
 8109240:	f407a5c2 	.word	0xf407a5c2
 8109244:	b5e8b5cd 	.word	0xb5e8b5cd
 8109248:	40023000 	.word	0x40023000

0810924c <ai_platform_network_process>:
 810924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109250:	460e      	mov	r6, r1
 8109252:	b085      	sub	sp, #20
 8109254:	4693      	mov	fp, r2
 8109256:	4605      	mov	r5, r0
 8109258:	b120      	cbz	r0, 8109264 <ai_platform_network_process+0x18>
 810925a:	4bb8      	ldr	r3, [pc, #736]	; (810953c <ai_platform_network_process+0x2f0>)
 810925c:	6802      	ldr	r2, [r0, #0]
 810925e:	429a      	cmp	r2, r3
 8109260:	bf18      	it	ne
 8109262:	2500      	movne	r5, #0
 8109264:	f7ff fabe 	bl	81087e4 <_ai_platform_acquire_crc>
 8109268:	4bb5      	ldr	r3, [pc, #724]	; (8109540 <ai_platform_network_process+0x2f4>)
 810926a:	681b      	ldr	r3, [r3, #0]
 810926c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109274:	d010      	beq.n	8109298 <ai_platform_network_process+0x4c>
 8109276:	4ab3      	ldr	r2, [pc, #716]	; (8109544 <ai_platform_network_process+0x2f8>)
 8109278:	2301      	movs	r3, #1
 810927a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 810927e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8109282:	2b00      	cmp	r3, #0
 8109284:	d1fb      	bne.n	810927e <ai_platform_network_process+0x32>
 8109286:	4bb0      	ldr	r3, [pc, #704]	; (8109548 <ai_platform_network_process+0x2fc>)
 8109288:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 810928c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8109290:	4bae      	ldr	r3, [pc, #696]	; (810954c <ai_platform_network_process+0x300>)
 8109292:	429a      	cmp	r2, r3
 8109294:	d00d      	beq.n	81092b2 <ai_platform_network_process+0x66>
 8109296:	e7fe      	b.n	8109296 <ai_platform_network_process+0x4a>
 8109298:	4aad      	ldr	r2, [pc, #692]	; (8109550 <ai_platform_network_process+0x304>)
 810929a:	2301      	movs	r3, #1
 810929c:	6093      	str	r3, [r2, #8]
 810929e:	6893      	ldr	r3, [r2, #8]
 81092a0:	2b00      	cmp	r3, #0
 81092a2:	d1fc      	bne.n	810929e <ai_platform_network_process+0x52>
 81092a4:	4ba8      	ldr	r3, [pc, #672]	; (8109548 <ai_platform_network_process+0x2fc>)
 81092a6:	6013      	str	r3, [r2, #0]
 81092a8:	6812      	ldr	r2, [r2, #0]
 81092aa:	4ba8      	ldr	r3, [pc, #672]	; (810954c <ai_platform_network_process+0x300>)
 81092ac:	429a      	cmp	r2, r3
 81092ae:	f040 812c 	bne.w	810950a <ai_platform_network_process+0x2be>
 81092b2:	f7ff fa99 	bl	81087e8 <_ai_platform_release_crc>
 81092b6:	2d00      	cmp	r5, #0
 81092b8:	f000 8154 	beq.w	8109564 <ai_platform_network_process+0x318>
 81092bc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 81092be:	2b00      	cmp	r3, #0
 81092c0:	f000 8124 	beq.w	810950c <ai_platform_network_process+0x2c0>
 81092c4:	68eb      	ldr	r3, [r5, #12]
 81092c6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 81092ca:	f003 0303 	and.w	r3, r3, #3
 81092ce:	2700      	movs	r7, #0
 81092d0:	2b03      	cmp	r3, #3
 81092d2:	616f      	str	r7, [r5, #20]
 81092d4:	f040 813e 	bne.w	8109554 <ai_platform_network_process+0x308>
 81092d8:	2e00      	cmp	r6, #0
 81092da:	f000 811d 	beq.w	8109518 <ai_platform_network_process+0x2cc>
 81092de:	f1ba 0f00 	cmp.w	sl, #0
 81092e2:	f000 8119 	beq.w	8109518 <ai_platform_network_process+0x2cc>
 81092e6:	f8ba 3000 	ldrh.w	r3, [sl]
 81092ea:	2b00      	cmp	r3, #0
 81092ec:	f000 8114 	beq.w	8109518 <ai_platform_network_process+0x2cc>
 81092f0:	69b3      	ldr	r3, [r6, #24]
 81092f2:	f8cd b00c 	str.w	fp, [sp, #12]
 81092f6:	681b      	ldr	r3, [r3, #0]
 81092f8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 81092fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8109300:	2b00      	cmp	r3, #0
 8109302:	d072      	beq.n	81093ea <ai_platform_network_process+0x19e>
 8109304:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8109308:	2c00      	cmp	r4, #0
 810930a:	d06e      	beq.n	81093ea <ai_platform_network_process+0x19e>
 810930c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8109310:	f8d3 9000 	ldr.w	r9, [r3]
 8109314:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8109318:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 810931c:	f000 81de 	beq.w	81096dc <ai_platform_network_process+0x490>
 8109320:	69a3      	ldr	r3, [r4, #24]
 8109322:	2101      	movs	r1, #1
 8109324:	4630      	mov	r0, r6
 8109326:	685d      	ldr	r5, [r3, #4]
 8109328:	f7ff fa0e 	bl	8108748 <ai_buffer_get_size>
 810932c:	4285      	cmp	r5, r0
 810932e:	f0c0 811b 	bcc.w	8109568 <ai_platform_network_process+0x31c>
 8109332:	68e0      	ldr	r0, [r4, #12]
 8109334:	69b1      	ldr	r1, [r6, #24]
 8109336:	68c2      	ldr	r2, [r0, #12]
 8109338:	68cb      	ldr	r3, [r1, #12]
 810933a:	429a      	cmp	r2, r3
 810933c:	f040 8114 	bne.w	8109568 <ai_platform_network_process+0x31c>
 8109340:	6882      	ldr	r2, [r0, #8]
 8109342:	688b      	ldr	r3, [r1, #8]
 8109344:	429a      	cmp	r2, r3
 8109346:	f040 810f 	bne.w	8109568 <ai_platform_network_process+0x31c>
 810934a:	6842      	ldr	r2, [r0, #4]
 810934c:	684b      	ldr	r3, [r1, #4]
 810934e:	429a      	cmp	r2, r3
 8109350:	f040 810a 	bne.w	8109568 <ai_platform_network_process+0x31c>
 8109354:	69a3      	ldr	r3, [r4, #24]
 8109356:	e9d3 0100 	ldrd	r0, r1, [r3]
 810935a:	f001 f94b 	bl	810a5f4 <ai_array_get_data_byte_size>
 810935e:	4605      	mov	r5, r0
 8109360:	4620      	mov	r0, r4
 8109362:	f001 f95f 	bl	810a624 <get_tensor_byte_size>
 8109366:	4285      	cmp	r5, r0
 8109368:	f0c0 80fe 	bcc.w	8109568 <ai_platform_network_process+0x31c>
 810936c:	69a3      	ldr	r3, [r4, #24]
 810936e:	6818      	ldr	r0, [r3, #0]
 8109370:	f001 f8ac 	bl	810a4cc <ai_array_to_buffer_fmt>
 8109374:	6833      	ldr	r3, [r6, #0]
 8109376:	4058      	eors	r0, r3
 8109378:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 810937c:	f040 81b9 	bne.w	81096f2 <ai_platform_network_process+0x4a6>
 8109380:	6873      	ldr	r3, [r6, #4]
 8109382:	2b00      	cmp	r3, #0
 8109384:	f000 81ac 	beq.w	81096e0 <ai_platform_network_process+0x494>
 8109388:	69b3      	ldr	r3, [r6, #24]
 810938a:	681b      	ldr	r3, [r3, #0]
 810938c:	2b00      	cmp	r3, #0
 810938e:	f000 819c 	beq.w	81096ca <ai_platform_network_process+0x47e>
 8109392:	9a01      	ldr	r2, [sp, #4]
 8109394:	429a      	cmp	r2, r3
 8109396:	bf38      	it	cc
 8109398:	461a      	movcc	r2, r3
 810939a:	4620      	mov	r0, r4
 810939c:	9201      	str	r2, [sp, #4]
 810939e:	f001 f941 	bl	810a624 <get_tensor_byte_size>
 81093a2:	f8c8 0008 	str.w	r0, [r8, #8]
 81093a6:	69b3      	ldr	r3, [r6, #24]
 81093a8:	681b      	ldr	r3, [r3, #0]
 81093aa:	fb00 f303 	mul.w	r3, r0, r3
 81093ae:	f8c8 300c 	str.w	r3, [r8, #12]
 81093b2:	6871      	ldr	r1, [r6, #4]
 81093b4:	f8c8 1004 	str.w	r1, [r8, #4]
 81093b8:	440b      	add	r3, r1
 81093ba:	f849 300b 	str.w	r3, [r9, fp]
 81093be:	69a0      	ldr	r0, [r4, #24]
 81093c0:	6803      	ldr	r3, [r0, #0]
 81093c2:	009a      	lsls	r2, r3, #2
 81093c4:	f107 0701 	add.w	r7, r7, #1
 81093c8:	f106 061c 	add.w	r6, r6, #28
 81093cc:	f100 80af 	bmi.w	810952e <ai_platform_network_process+0x2e2>
 81093d0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 81093d4:	1a9b      	subs	r3, r3, r2
 81093d6:	4419      	add	r1, r3
 81093d8:	6081      	str	r1, [r0, #8]
 81093da:	69a3      	ldr	r3, [r4, #24]
 81093dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 81093e0:	60da      	str	r2, [r3, #12]
 81093e2:	f8ba 3000 	ldrh.w	r3, [sl]
 81093e6:	42bb      	cmp	r3, r7
 81093e8:	d888      	bhi.n	81092fc <ai_platform_network_process+0xb0>
 81093ea:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 81093ee:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 81093f0:	f1bb 0f00 	cmp.w	fp, #0
 81093f4:	f000 8186 	beq.w	8109704 <ai_platform_network_process+0x4b8>
 81093f8:	2a01      	cmp	r2, #1
 81093fa:	f240 815e 	bls.w	81096ba <ai_platform_network_process+0x46e>
 81093fe:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8109402:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8109406:	2b00      	cmp	r3, #0
 8109408:	f000 8157 	beq.w	81096ba <ai_platform_network_process+0x46e>
 810940c:	465e      	mov	r6, fp
 810940e:	2700      	movs	r7, #0
 8109410:	462c      	mov	r4, r5
 8109412:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8109416:	2b00      	cmp	r3, #0
 8109418:	f000 80b4 	beq.w	8109584 <ai_platform_network_process+0x338>
 810941c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8109420:	2d00      	cmp	r5, #0
 8109422:	f000 80af 	beq.w	8109584 <ai_platform_network_process+0x338>
 8109426:	f8d9 3014 	ldr.w	r3, [r9, #20]
 810942a:	f8d3 8000 	ldr.w	r8, [r3]
 810942e:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8109432:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8109436:	f000 8171 	beq.w	810971c <ai_platform_network_process+0x4d0>
 810943a:	69ab      	ldr	r3, [r5, #24]
 810943c:	2101      	movs	r1, #1
 810943e:	685b      	ldr	r3, [r3, #4]
 8109440:	9302      	str	r3, [sp, #8]
 8109442:	4630      	mov	r0, r6
 8109444:	f7ff f980 	bl	8108748 <ai_buffer_get_size>
 8109448:	9b02      	ldr	r3, [sp, #8]
 810944a:	4283      	cmp	r3, r0
 810944c:	f0c0 8134 	bcc.w	81096b8 <ai_platform_network_process+0x46c>
 8109450:	68e8      	ldr	r0, [r5, #12]
 8109452:	69b1      	ldr	r1, [r6, #24]
 8109454:	68c2      	ldr	r2, [r0, #12]
 8109456:	68cb      	ldr	r3, [r1, #12]
 8109458:	429a      	cmp	r2, r3
 810945a:	f040 812d 	bne.w	81096b8 <ai_platform_network_process+0x46c>
 810945e:	6882      	ldr	r2, [r0, #8]
 8109460:	688b      	ldr	r3, [r1, #8]
 8109462:	429a      	cmp	r2, r3
 8109464:	f040 8128 	bne.w	81096b8 <ai_platform_network_process+0x46c>
 8109468:	6842      	ldr	r2, [r0, #4]
 810946a:	684b      	ldr	r3, [r1, #4]
 810946c:	429a      	cmp	r2, r3
 810946e:	f040 8123 	bne.w	81096b8 <ai_platform_network_process+0x46c>
 8109472:	69ab      	ldr	r3, [r5, #24]
 8109474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8109478:	f001 f8bc 	bl	810a5f4 <ai_array_get_data_byte_size>
 810947c:	9002      	str	r0, [sp, #8]
 810947e:	4628      	mov	r0, r5
 8109480:	f001 f8d0 	bl	810a624 <get_tensor_byte_size>
 8109484:	9b02      	ldr	r3, [sp, #8]
 8109486:	4283      	cmp	r3, r0
 8109488:	f0c0 8116 	bcc.w	81096b8 <ai_platform_network_process+0x46c>
 810948c:	69ab      	ldr	r3, [r5, #24]
 810948e:	6818      	ldr	r0, [r3, #0]
 8109490:	f001 f81c 	bl	810a4cc <ai_array_to_buffer_fmt>
 8109494:	6833      	ldr	r3, [r6, #0]
 8109496:	4058      	eors	r0, r3
 8109498:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 810949c:	f040 8136 	bne.w	810970c <ai_platform_network_process+0x4c0>
 81094a0:	6873      	ldr	r3, [r6, #4]
 81094a2:	2b00      	cmp	r3, #0
 81094a4:	f000 814d 	beq.w	8109742 <ai_platform_network_process+0x4f6>
 81094a8:	69b3      	ldr	r3, [r6, #24]
 81094aa:	681b      	ldr	r3, [r3, #0]
 81094ac:	2b00      	cmp	r3, #0
 81094ae:	f000 813f 	beq.w	8109730 <ai_platform_network_process+0x4e4>
 81094b2:	9a01      	ldr	r2, [sp, #4]
 81094b4:	429a      	cmp	r2, r3
 81094b6:	bf38      	it	cc
 81094b8:	461a      	movcc	r2, r3
 81094ba:	4628      	mov	r0, r5
 81094bc:	9201      	str	r2, [sp, #4]
 81094be:	f001 f8b1 	bl	810a624 <get_tensor_byte_size>
 81094c2:	f8ca 0008 	str.w	r0, [sl, #8]
 81094c6:	69b3      	ldr	r3, [r6, #24]
 81094c8:	681b      	ldr	r3, [r3, #0]
 81094ca:	fb00 f303 	mul.w	r3, r0, r3
 81094ce:	f8ca 300c 	str.w	r3, [sl, #12]
 81094d2:	6871      	ldr	r1, [r6, #4]
 81094d4:	f8ca 1004 	str.w	r1, [sl, #4]
 81094d8:	440b      	add	r3, r1
 81094da:	f848 300b 	str.w	r3, [r8, fp]
 81094de:	69a8      	ldr	r0, [r5, #24]
 81094e0:	6803      	ldr	r3, [r0, #0]
 81094e2:	009b      	lsls	r3, r3, #2
 81094e4:	f107 0701 	add.w	r7, r7, #1
 81094e8:	f106 061c 	add.w	r6, r6, #28
 81094ec:	d445      	bmi.n	810957a <ai_platform_network_process+0x32e>
 81094ee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 81094f2:	1a9b      	subs	r3, r3, r2
 81094f4:	4419      	add	r1, r3
 81094f6:	6081      	str	r1, [r0, #8]
 81094f8:	69ab      	ldr	r3, [r5, #24]
 81094fa:	f8da 2004 	ldr.w	r2, [sl, #4]
 81094fe:	60da      	str	r2, [r3, #12]
 8109500:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8109504:	429f      	cmp	r7, r3
 8109506:	d384      	bcc.n	8109412 <ai_platform_network_process+0x1c6>
 8109508:	e03c      	b.n	8109584 <ai_platform_network_process+0x338>
 810950a:	e7fe      	b.n	810950a <ai_platform_network_process+0x2be>
 810950c:	68ea      	ldr	r2, [r5, #12]
 810950e:	616b      	str	r3, [r5, #20]
 8109510:	f002 0203 	and.w	r2, r2, #3
 8109514:	2a03      	cmp	r2, #3
 8109516:	d11d      	bne.n	8109554 <ai_platform_network_process+0x308>
 8109518:	2217      	movs	r2, #23
 810951a:	2112      	movs	r1, #18
 810951c:	f105 0010 	add.w	r0, r5, #16
 8109520:	f000 f920 	bl	8109764 <core_set_error>
 8109524:	2400      	movs	r4, #0
 8109526:	4620      	mov	r0, r4
 8109528:	b005      	add	sp, #20
 810952a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810952e:	f8ba 3000 	ldrh.w	r3, [sl]
 8109532:	429f      	cmp	r7, r3
 8109534:	f4ff aee2 	bcc.w	81092fc <ai_platform_network_process+0xb0>
 8109538:	e757      	b.n	81093ea <ai_platform_network_process+0x19e>
 810953a:	bf00      	nop
 810953c:	a1c00100 	.word	0xa1c00100
 8109540:	e0042000 	.word	0xe0042000
 8109544:	58024000 	.word	0x58024000
 8109548:	f407a5c2 	.word	0xf407a5c2
 810954c:	b5e8b5cd 	.word	0xb5e8b5cd
 8109550:	40023000 	.word	0x40023000
 8109554:	2230      	movs	r2, #48	; 0x30
 8109556:	2111      	movs	r1, #17
 8109558:	f105 0010 	add.w	r0, r5, #16
 810955c:	f000 f902 	bl	8109764 <core_set_error>
 8109560:	2400      	movs	r4, #0
 8109562:	e7e0      	b.n	8109526 <ai_platform_network_process+0x2da>
 8109564:	462c      	mov	r4, r5
 8109566:	e7de      	b.n	8109526 <ai_platform_network_process+0x2da>
 8109568:	9d02      	ldr	r5, [sp, #8]
 810956a:	2218      	movs	r2, #24
 810956c:	2112      	movs	r1, #18
 810956e:	f105 0010 	add.w	r0, r5, #16
 8109572:	f000 f8f7 	bl	8109764 <core_set_error>
 8109576:	2400      	movs	r4, #0
 8109578:	e7d5      	b.n	8109526 <ai_platform_network_process+0x2da>
 810957a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 810957e:	429f      	cmp	r7, r3
 8109580:	f4ff af47 	bcc.w	8109412 <ai_platform_network_process+0x1c6>
 8109584:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8109588:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 810958a:	82a3      	strh	r3, [r4, #20]
 810958c:	4625      	mov	r5, r4
 810958e:	2a00      	cmp	r2, #0
 8109590:	f040 808c 	bne.w	81096ac <ai_platform_network_process+0x460>
 8109594:	4616      	mov	r6, r2
 8109596:	4617      	mov	r7, r2
 8109598:	8aec      	ldrh	r4, [r5, #22]
 810959a:	429c      	cmp	r4, r3
 810959c:	bf38      	it	cc
 810959e:	46ab      	movcc	fp, r5
 81095a0:	d2c1      	bcs.n	8109526 <ai_platform_network_process+0x2da>
 81095a2:	2e00      	cmp	r6, #0
 81095a4:	d030      	beq.n	8109608 <ai_platform_network_process+0x3bc>
 81095a6:	f04f 0800 	mov.w	r8, #0
 81095aa:	e014      	b.n	81095d6 <ai_platform_network_process+0x38a>
 81095ac:	6882      	ldr	r2, [r0, #8]
 81095ae:	68c5      	ldr	r5, [r0, #12]
 81095b0:	6863      	ldr	r3, [r4, #4]
 81095b2:	1b52      	subs	r2, r2, r5
 81095b4:	4413      	add	r3, r2
 81095b6:	6083      	str	r3, [r0, #8]
 81095b8:	698b      	ldr	r3, [r1, #24]
 81095ba:	6862      	ldr	r2, [r4, #4]
 81095bc:	60da      	str	r2, [r3, #12]
 81095be:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 81095c2:	f859 200a 	ldr.w	r2, [r9, sl]
 81095c6:	440b      	add	r3, r1
 81095c8:	4293      	cmp	r3, r2
 81095ca:	bf24      	itt	cs
 81095cc:	68e3      	ldrcs	r3, [r4, #12]
 81095ce:	1ad3      	subcs	r3, r2, r3
 81095d0:	6063      	str	r3, [r4, #4]
 81095d2:	f108 0801 	add.w	r8, r8, #1
 81095d6:	8833      	ldrh	r3, [r6, #0]
 81095d8:	4543      	cmp	r3, r8
 81095da:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 81095de:	d913      	bls.n	8109608 <ai_platform_network_process+0x3bc>
 81095e0:	6873      	ldr	r3, [r6, #4]
 81095e2:	b18b      	cbz	r3, 8109608 <ai_platform_network_process+0x3bc>
 81095e4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 81095e8:	b171      	cbz	r1, 8109608 <ai_platform_network_process+0x3bc>
 81095ea:	6988      	ldr	r0, [r1, #24]
 81095ec:	68b2      	ldr	r2, [r6, #8]
 81095ee:	6803      	ldr	r3, [r0, #0]
 81095f0:	f8d2 9000 	ldr.w	r9, [r2]
 81095f4:	009d      	lsls	r5, r3, #2
 81095f6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 81095fa:	d5d7      	bpl.n	81095ac <ai_platform_network_process+0x360>
 81095fc:	6881      	ldr	r1, [r0, #8]
 81095fe:	68a2      	ldr	r2, [r4, #8]
 8109600:	6860      	ldr	r0, [r4, #4]
 8109602:	f000 fedd 	bl	810a3c0 <st_int8_copy>
 8109606:	e7da      	b.n	81095be <ai_platform_network_process+0x372>
 8109608:	4658      	mov	r0, fp
 810960a:	f000 f903 	bl	8109814 <ai_layers_forward_all>
 810960e:	2f00      	cmp	r7, #0
 8109610:	d03d      	beq.n	810968e <ai_platform_network_process+0x442>
 8109612:	2400      	movs	r4, #0
 8109614:	e016      	b.n	8109644 <ai_platform_network_process+0x3f8>
 8109616:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 810961a:	f859 100a 	ldr.w	r1, [r9, sl]
 810961e:	4413      	add	r3, r2
 8109620:	428b      	cmp	r3, r1
 8109622:	bf24      	itt	cs
 8109624:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8109628:	1acb      	subcs	r3, r1, r3
 810962a:	f8c8 3004 	str.w	r3, [r8, #4]
 810962e:	6981      	ldr	r1, [r0, #24]
 8109630:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8109634:	1b52      	subs	r2, r2, r5
 8109636:	4413      	add	r3, r2
 8109638:	608b      	str	r3, [r1, #8]
 810963a:	6983      	ldr	r3, [r0, #24]
 810963c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8109640:	60da      	str	r2, [r3, #12]
 8109642:	3401      	adds	r4, #1
 8109644:	883b      	ldrh	r3, [r7, #0]
 8109646:	42a3      	cmp	r3, r4
 8109648:	d921      	bls.n	810968e <ai_platform_network_process+0x442>
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	b1fb      	cbz	r3, 810968e <ai_platform_network_process+0x442>
 810964e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8109652:	b1e0      	cbz	r0, 810968e <ai_platform_network_process+0x442>
 8109654:	68ba      	ldr	r2, [r7, #8]
 8109656:	6983      	ldr	r3, [r0, #24]
 8109658:	f8d2 9000 	ldr.w	r9, [r2]
 810965c:	681a      	ldr	r2, [r3, #0]
 810965e:	0092      	lsls	r2, r2, #2
 8109660:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8109664:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8109668:	d5d5      	bpl.n	8109616 <ai_platform_network_process+0x3ca>
 810966a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 810966e:	6898      	ldr	r0, [r3, #8]
 8109670:	f000 fea6 	bl	810a3c0 <st_int8_copy>
 8109674:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8109678:	f859 200a 	ldr.w	r2, [r9, sl]
 810967c:	440b      	add	r3, r1
 810967e:	4293      	cmp	r3, r2
 8109680:	bf24      	itt	cs
 8109682:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8109686:	1ad3      	subcs	r3, r2, r3
 8109688:	f8c8 3004 	str.w	r3, [r8, #4]
 810968c:	e7d9      	b.n	8109642 <ai_platform_network_process+0x3f6>
 810968e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8109692:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8109696:	3401      	adds	r4, #1
 8109698:	b2a4      	uxth	r4, r4
 810969a:	42a3      	cmp	r3, r4
 810969c:	f8ab 4016 	strh.w	r4, [fp, #22]
 81096a0:	f63f af7f 	bhi.w	81095a2 <ai_platform_network_process+0x356>
 81096a4:	4620      	mov	r0, r4
 81096a6:	b005      	add	sp, #20
 81096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81096ac:	2a01      	cmp	r2, #1
 81096ae:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 81096b0:	d03c      	beq.n	810972c <ai_platform_network_process+0x4e0>
 81096b2:	f106 070c 	add.w	r7, r6, #12
 81096b6:	e76f      	b.n	8109598 <ai_platform_network_process+0x34c>
 81096b8:	4625      	mov	r5, r4
 81096ba:	2218      	movs	r2, #24
 81096bc:	2113      	movs	r1, #19
 81096be:	f105 0010 	add.w	r0, r5, #16
 81096c2:	f000 f84f 	bl	8109764 <core_set_error>
 81096c6:	2400      	movs	r4, #0
 81096c8:	e72d      	b.n	8109526 <ai_platform_network_process+0x2da>
 81096ca:	9d02      	ldr	r5, [sp, #8]
 81096cc:	4604      	mov	r4, r0
 81096ce:	2221      	movs	r2, #33	; 0x21
 81096d0:	2112      	movs	r1, #18
 81096d2:	f105 0010 	add.w	r0, r5, #16
 81096d6:	f000 f845 	bl	8109764 <core_set_error>
 81096da:	e724      	b.n	8109526 <ai_platform_network_process+0x2da>
 81096dc:	9d02      	ldr	r5, [sp, #8]
 81096de:	e71b      	b.n	8109518 <ai_platform_network_process+0x2cc>
 81096e0:	9d02      	ldr	r5, [sp, #8]
 81096e2:	4604      	mov	r4, r0
 81096e4:	2217      	movs	r2, #23
 81096e6:	2112      	movs	r1, #18
 81096e8:	f105 0010 	add.w	r0, r5, #16
 81096ec:	f000 f83a 	bl	8109764 <core_set_error>
 81096f0:	e719      	b.n	8109526 <ai_platform_network_process+0x2da>
 81096f2:	9d02      	ldr	r5, [sp, #8]
 81096f4:	2219      	movs	r2, #25
 81096f6:	2112      	movs	r1, #18
 81096f8:	f105 0010 	add.w	r0, r5, #16
 81096fc:	f000 f832 	bl	8109764 <core_set_error>
 8109700:	2400      	movs	r4, #0
 8109702:	e710      	b.n	8109526 <ai_platform_network_process+0x2da>
 8109704:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8109708:	82ab      	strh	r3, [r5, #20]
 810970a:	e740      	b.n	810958e <ai_platform_network_process+0x342>
 810970c:	f104 0010 	add.w	r0, r4, #16
 8109710:	2219      	movs	r2, #25
 8109712:	2113      	movs	r1, #19
 8109714:	f000 f826 	bl	8109764 <core_set_error>
 8109718:	2400      	movs	r4, #0
 810971a:	e704      	b.n	8109526 <ai_platform_network_process+0x2da>
 810971c:	f104 0010 	add.w	r0, r4, #16
 8109720:	2217      	movs	r2, #23
 8109722:	2113      	movs	r1, #19
 8109724:	f000 f81e 	bl	8109764 <core_set_error>
 8109728:	4654      	mov	r4, sl
 810972a:	e6fc      	b.n	8109526 <ai_platform_network_process+0x2da>
 810972c:	2700      	movs	r7, #0
 810972e:	e733      	b.n	8109598 <ai_platform_network_process+0x34c>
 8109730:	4625      	mov	r5, r4
 8109732:	2221      	movs	r2, #33	; 0x21
 8109734:	4604      	mov	r4, r0
 8109736:	2113      	movs	r1, #19
 8109738:	f105 0010 	add.w	r0, r5, #16
 810973c:	f000 f812 	bl	8109764 <core_set_error>
 8109740:	e6f1      	b.n	8109526 <ai_platform_network_process+0x2da>
 8109742:	4625      	mov	r5, r4
 8109744:	2217      	movs	r2, #23
 8109746:	4604      	mov	r4, r0
 8109748:	2113      	movs	r1, #19
 810974a:	f105 0010 	add.w	r0, r5, #16
 810974e:	f000 f809 	bl	8109764 <core_set_error>
 8109752:	e6e8      	b.n	8109526 <ai_platform_network_process+0x2da>

08109754 <core_init>:
 8109754:	2001      	movs	r0, #1
 8109756:	4770      	bx	lr

08109758 <core_get_error>:
 8109758:	4603      	mov	r3, r0
 810975a:	2200      	movs	r2, #0
 810975c:	6800      	ldr	r0, [r0, #0]
 810975e:	601a      	str	r2, [r3, #0]
 8109760:	4770      	bx	lr
 8109762:	bf00      	nop

08109764 <core_set_error>:
 8109764:	4603      	mov	r3, r0
 8109766:	7800      	ldrb	r0, [r0, #0]
 8109768:	b108      	cbz	r0, 810976e <core_set_error+0xa>
 810976a:	2000      	movs	r0, #0
 810976c:	4770      	bx	lr
 810976e:	7019      	strb	r1, [r3, #0]
 8109770:	6819      	ldr	r1, [r3, #0]
 8109772:	f362 211f 	bfi	r1, r2, #8, #24
 8109776:	2001      	movs	r0, #1
 8109778:	6019      	str	r1, [r3, #0]
 810977a:	4770      	bx	lr

0810977c <ai_check_custom_types>:
 810977c:	b082      	sub	sp, #8
 810977e:	4b13      	ldr	r3, [pc, #76]	; (81097cc <ai_check_custom_types+0x50>)
 8109780:	9301      	str	r3, [sp, #4]
 8109782:	b118      	cbz	r0, 810978c <ai_check_custom_types+0x10>
 8109784:	7803      	ldrb	r3, [r0, #0]
 8109786:	2b03      	cmp	r3, #3
 8109788:	d002      	beq.n	8109790 <ai_check_custom_types+0x14>
 810978a:	2000      	movs	r0, #0
 810978c:	b002      	add	sp, #8
 810978e:	4770      	bx	lr
 8109790:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8109794:	4293      	cmp	r3, r2
 8109796:	d004      	beq.n	81097a2 <ai_check_custom_types+0x26>
 8109798:	2001      	movs	r0, #1
 810979a:	f080 0001 	eor.w	r0, r0, #1
 810979e:	b002      	add	sp, #8
 81097a0:	4770      	bx	lr
 81097a2:	7842      	ldrb	r2, [r0, #1]
 81097a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 81097a8:	429a      	cmp	r2, r3
 81097aa:	f100 0001 	add.w	r0, r0, #1
 81097ae:	d1f3      	bne.n	8109798 <ai_check_custom_types+0x1c>
 81097b0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 81097b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 81097b8:	429a      	cmp	r2, r3
 81097ba:	d1ed      	bne.n	8109798 <ai_check_custom_types+0x1c>
 81097bc:	7842      	ldrb	r2, [r0, #1]
 81097be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 81097c2:	429a      	cmp	r2, r3
 81097c4:	d1e8      	bne.n	8109798 <ai_check_custom_types+0x1c>
 81097c6:	2000      	movs	r0, #0
 81097c8:	e7e7      	b.n	810979a <ai_check_custom_types+0x1e>
 81097ca:	bf00      	nop
 81097cc:	84048403 	.word	0x84048403

081097d0 <ai_layers_init_all>:
 81097d0:	4601      	mov	r1, r0
 81097d2:	2000      	movs	r0, #0
 81097d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 81097d6:	b143      	cbz	r3, 81097ea <ai_layers_init_all+0x1a>
 81097d8:	691a      	ldr	r2, [r3, #16]
 81097da:	60d9      	str	r1, [r3, #12]
 81097dc:	429a      	cmp	r2, r3
 81097de:	f100 0001 	add.w	r0, r0, #1
 81097e2:	d002      	beq.n	81097ea <ai_layers_init_all+0x1a>
 81097e4:	b10a      	cbz	r2, 81097ea <ai_layers_init_all+0x1a>
 81097e6:	4613      	mov	r3, r2
 81097e8:	e7f5      	b.n	81097d6 <ai_layers_init_all+0x6>
 81097ea:	4770      	bx	lr

081097ec <ai_layers_post_init_all>:
 81097ec:	b538      	push	{r3, r4, r5, lr}
 81097ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 81097f0:	2500      	movs	r5, #0
 81097f2:	b16c      	cbz	r4, 8109810 <ai_layers_post_init_all+0x24>
 81097f4:	6863      	ldr	r3, [r4, #4]
 81097f6:	07db      	lsls	r3, r3, #31
 81097f8:	d504      	bpl.n	8109804 <ai_layers_post_init_all+0x18>
 81097fa:	6a23      	ldr	r3, [r4, #32]
 81097fc:	4620      	mov	r0, r4
 81097fe:	b10b      	cbz	r3, 8109804 <ai_layers_post_init_all+0x18>
 8109800:	4798      	blx	r3
 8109802:	3501      	adds	r5, #1
 8109804:	6923      	ldr	r3, [r4, #16]
 8109806:	42a3      	cmp	r3, r4
 8109808:	d002      	beq.n	8109810 <ai_layers_post_init_all+0x24>
 810980a:	b10b      	cbz	r3, 8109810 <ai_layers_post_init_all+0x24>
 810980c:	461c      	mov	r4, r3
 810980e:	e7f0      	b.n	81097f2 <ai_layers_post_init_all+0x6>
 8109810:	4628      	mov	r0, r5
 8109812:	bd38      	pop	{r3, r4, r5, pc}

08109814 <ai_layers_forward_all>:
 8109814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109818:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 810981c:	4604      	mov	r4, r0
 810981e:	f1b8 0f00 	cmp.w	r8, #0
 8109822:	d02b      	beq.n	810987c <ai_layers_forward_all+0x68>
 8109824:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8109826:	6381      	str	r1, [r0, #56]	; 0x38
 8109828:	b321      	cbz	r1, 8109874 <ai_layers_forward_all+0x60>
 810982a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 810982c:	2001      	movs	r0, #1
 810982e:	47c0      	blx	r8
 8109830:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8109832:	b1fe      	cbz	r6, 8109874 <ai_layers_forward_all+0x60>
 8109834:	2700      	movs	r7, #0
 8109836:	4631      	mov	r1, r6
 8109838:	6c22      	ldr	r2, [r4, #64]	; 0x40
 810983a:	2002      	movs	r0, #2
 810983c:	47c0      	blx	r8
 810983e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8109840:	4628      	mov	r0, r5
 8109842:	696b      	ldr	r3, [r5, #20]
 8109844:	4798      	blx	r3
 8109846:	692e      	ldr	r6, [r5, #16]
 8109848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 810984a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 810984c:	42b5      	cmp	r5, r6
 810984e:	f04f 0003 	mov.w	r0, #3
 8109852:	d007      	beq.n	8109864 <ai_layers_forward_all+0x50>
 8109854:	47c0      	blx	r8
 8109856:	3701      	adds	r7, #1
 8109858:	63a6      	str	r6, [r4, #56]	; 0x38
 810985a:	2e00      	cmp	r6, #0
 810985c:	d1eb      	bne.n	8109836 <ai_layers_forward_all+0x22>
 810985e:	4638      	mov	r0, r7
 8109860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109864:	2003      	movs	r0, #3
 8109866:	47c0      	blx	r8
 8109868:	2300      	movs	r3, #0
 810986a:	3701      	adds	r7, #1
 810986c:	63a3      	str	r3, [r4, #56]	; 0x38
 810986e:	4638      	mov	r0, r7
 8109870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109874:	2700      	movs	r7, #0
 8109876:	4638      	mov	r0, r7
 8109878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810987c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 810987e:	6385      	str	r5, [r0, #56]	; 0x38
 8109880:	2d00      	cmp	r5, #0
 8109882:	d0f7      	beq.n	8109874 <ai_layers_forward_all+0x60>
 8109884:	4647      	mov	r7, r8
 8109886:	696b      	ldr	r3, [r5, #20]
 8109888:	4628      	mov	r0, r5
 810988a:	4798      	blx	r3
 810988c:	462b      	mov	r3, r5
 810988e:	692d      	ldr	r5, [r5, #16]
 8109890:	429d      	cmp	r5, r3
 8109892:	d004      	beq.n	810989e <ai_layers_forward_all+0x8a>
 8109894:	63a5      	str	r5, [r4, #56]	; 0x38
 8109896:	3701      	adds	r7, #1
 8109898:	2d00      	cmp	r5, #0
 810989a:	d1f4      	bne.n	8109886 <ai_layers_forward_all+0x72>
 810989c:	e7df      	b.n	810985e <ai_layers_forward_all+0x4a>
 810989e:	2300      	movs	r3, #0
 81098a0:	63a3      	str	r3, [r4, #56]	; 0x38
 81098a2:	3701      	adds	r7, #1
 81098a4:	e7db      	b.n	810985e <ai_layers_forward_all+0x4a>
 81098a6:	bf00      	nop

081098a8 <forward_dense>:
 81098a8:	6983      	ldr	r3, [r0, #24]
 81098aa:	881a      	ldrh	r2, [r3, #0]
 81098ac:	2a00      	cmp	r2, #0
 81098ae:	f000 8181 	beq.w	8109bb4 <forward_dense+0x30c>
 81098b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81098b6:	ed2d 8b02 	vpush	{d8}
 81098ba:	f8d3 c004 	ldr.w	ip, [r3, #4]
 81098be:	f8dc 5004 	ldr.w	r5, [ip, #4]
 81098c2:	b095      	sub	sp, #84	; 0x54
 81098c4:	b105      	cbz	r5, 81098c8 <forward_dense+0x20>
 81098c6:	682d      	ldr	r5, [r5, #0]
 81098c8:	2a01      	cmp	r2, #1
 81098ca:	f000 828f 	beq.w	8109dec <forward_dense+0x544>
 81098ce:	f8dc 6010 	ldr.w	r6, [ip, #16]
 81098d2:	b106      	cbz	r6, 81098d6 <forward_dense+0x2e>
 81098d4:	6836      	ldr	r6, [r6, #0]
 81098d6:	2a02      	cmp	r2, #2
 81098d8:	f000 816e 	beq.w	8109bb8 <forward_dense+0x310>
 81098dc:	f8dc 301c 	ldr.w	r3, [ip, #28]
 81098e0:	930b      	str	r3, [sp, #44]	; 0x2c
 81098e2:	2b00      	cmp	r3, #0
 81098e4:	f000 8274 	beq.w	8109dd0 <forward_dense+0x528>
 81098e8:	4619      	mov	r1, r3
 81098ea:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 81098ee:	6809      	ldr	r1, [r1, #0]
 81098f0:	910d      	str	r1, [sp, #52]	; 0x34
 81098f2:	2b01      	cmp	r3, #1
 81098f4:	f240 826e 	bls.w	8109dd4 <forward_dense+0x52c>
 81098f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81098fa:	685b      	ldr	r3, [r3, #4]
 81098fc:	930b      	str	r3, [sp, #44]	; 0x2c
 81098fe:	460b      	mov	r3, r1
 8109900:	68e8      	ldr	r0, [r5, #12]
 8109902:	68f7      	ldr	r7, [r6, #12]
 8109904:	6840      	ldr	r0, [r0, #4]
 8109906:	6999      	ldr	r1, [r3, #24]
 8109908:	9013      	str	r0, [sp, #76]	; 0x4c
 810990a:	6878      	ldr	r0, [r7, #4]
 810990c:	680b      	ldr	r3, [r1, #0]
 810990e:	9012      	str	r0, [sp, #72]	; 0x48
 8109910:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8109914:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8109918:	fb00 f404 	mul.w	r4, r0, r4
 810991c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8109920:	fa4e f000 	asr.w	r0, lr, r0
 8109924:	2a03      	cmp	r2, #3
 8109926:	9010      	str	r0, [sp, #64]	; 0x40
 8109928:	f000 825d 	beq.w	8109de6 <forward_dense+0x53e>
 810992c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8109930:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8109934:	2a00      	cmp	r2, #0
 8109936:	f000 8246 	beq.w	8109dc6 <forward_dense+0x51e>
 810993a:	6812      	ldr	r2, [r2, #0]
 810993c:	2a00      	cmp	r2, #0
 810993e:	f000 8242 	beq.w	8109dc6 <forward_dense+0x51e>
 8109942:	2b04      	cmp	r3, #4
 8109944:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8109948:	f000 822c 	beq.w	8109da4 <forward_dense+0x4fc>
 810994c:	2b08      	cmp	r3, #8
 810994e:	f000 8229 	beq.w	8109da4 <forward_dense+0x4fc>
 8109952:	f04f 0b00 	mov.w	fp, #0
 8109956:	69b2      	ldr	r2, [r6, #24]
 8109958:	69ab      	ldr	r3, [r5, #24]
 810995a:	6891      	ldr	r1, [r2, #8]
 810995c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810995e:	689b      	ldr	r3, [r3, #8]
 8109960:	6952      	ldr	r2, [r2, #20]
 8109962:	9106      	str	r1, [sp, #24]
 8109964:	fb07 f404 	mul.w	r4, r7, r4
 8109968:	f8d2 9004 	ldr.w	r9, [r2, #4]
 810996c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810996e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8109972:	4281      	cmp	r1, r0
 8109974:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8109978:	900e      	str	r0, [sp, #56]	; 0x38
 810997a:	940c      	str	r4, [sp, #48]	; 0x30
 810997c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8109980:	f080 8113 	bcs.w	8109baa <forward_dense+0x302>
 8109984:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8109986:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8109bd4 <forward_dense+0x32c>
 810998a:	f021 0201 	bic.w	r2, r1, #1
 810998e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8109992:	9204      	str	r2, [sp, #16]
 8109994:	f001 0201 	and.w	r2, r1, #1
 8109998:	08c8      	lsrs	r0, r1, #3
 810999a:	9208      	str	r2, [sp, #32]
 810999c:	008a      	lsls	r2, r1, #2
 810999e:	f001 0a07 	and.w	sl, r1, #7
 81099a2:	920f      	str	r2, [sp, #60]	; 0x3c
 81099a4:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 81099a8:	3320      	adds	r3, #32
 81099aa:	465c      	mov	r4, fp
 81099ac:	9007      	str	r0, [sp, #28]
 81099ae:	46cb      	mov	fp, r9
 81099b0:	9205      	str	r2, [sp, #20]
 81099b2:	9302      	str	r3, [sp, #8]
 81099b4:	46c1      	mov	r9, r8
 81099b6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 81099ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81099bc:	699b      	ldr	r3, [r3, #24]
 81099be:	689a      	ldr	r2, [r3, #8]
 81099c0:	9b02      	ldr	r3, [sp, #8]
 81099c2:	3b20      	subs	r3, #32
 81099c4:	930a      	str	r3, [sp, #40]	; 0x28
 81099c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81099c8:	b10b      	cbz	r3, 81099ce <forward_dense+0x126>
 81099ca:	699b      	ldr	r3, [r3, #24]
 81099cc:	689b      	ldr	r3, [r3, #8]
 81099ce:	2c00      	cmp	r4, #0
 81099d0:	f000 81da 	beq.w	8109d88 <forward_dense+0x4e0>
 81099d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 81099d6:	2904      	cmp	r1, #4
 81099d8:	9906      	ldr	r1, [sp, #24]
 81099da:	f000 80fd 	beq.w	8109bd8 <forward_dense+0x330>
 81099de:	4549      	cmp	r1, r9
 81099e0:	f080 80d2 	bcs.w	8109b88 <forward_dense+0x2e0>
 81099e4:	460f      	mov	r7, r1
 81099e6:	9907      	ldr	r1, [sp, #28]
 81099e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 81099ec:	f8dd a014 	ldr.w	sl, [sp, #20]
 81099f0:	1c4e      	adds	r6, r1, #1
 81099f2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 81099f6:	4694      	mov	ip, r2
 81099f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81099fa:	468e      	mov	lr, r1
 81099fc:	2b00      	cmp	r3, #0
 81099fe:	f000 80de 	beq.w	8109bbe <forward_dense+0x316>
 8109a02:	ecf3 2a01 	vldmia	r3!, {s5}
 8109a06:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8109bd4 <forward_dense+0x32c>
 8109a0a:	f1be 0f00 	cmp.w	lr, #0
 8109a0e:	f000 80de 	beq.w	8109bce <forward_dense+0x326>
 8109a12:	f10c 0108 	add.w	r1, ip, #8
 8109a16:	4640      	mov	r0, r8
 8109a18:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8109a1c:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8109a20:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8109a24:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8109a28:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8109a2c:	ed10 5a04 	vldr	s10, [r0, #-16]
 8109a30:	ed50 5a03 	vldr	s11, [r0, #-12]
 8109a34:	ed10 6a02 	vldr	s12, [r0, #-8]
 8109a38:	ed50 6a01 	vldr	s13, [r0, #-4]
 8109a3c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a40:	edd5 7a00 	vldr	s15, [r5]
 8109a44:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8109a48:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a4c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8109a50:	ed95 3a00 	vldr	s6, [r5]
 8109a54:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8109a58:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109a5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a60:	3108      	adds	r1, #8
 8109a62:	edd5 3a00 	vldr	s7, [r5]
 8109a66:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8109a6a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8109a6e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a72:	3020      	adds	r0, #32
 8109a74:	ed95 4a00 	vldr	s8, [r5]
 8109a78:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8109a7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109a80:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a84:	edd5 4a00 	vldr	s9, [r5]
 8109a88:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8109a8c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8109a90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109a94:	ed95 5a00 	vldr	s10, [r5]
 8109a98:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8109a9c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109aa0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109aa4:	edd5 5a00 	vldr	s11, [r5]
 8109aa8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8109aac:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109ab0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109ab4:	428e      	cmp	r6, r1
 8109ab6:	ed95 6a00 	vldr	s12, [r5]
 8109aba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109ac2:	d1a9      	bne.n	8109a18 <forward_dense+0x170>
 8109ac4:	f1a6 0108 	sub.w	r1, r6, #8
 8109ac8:	4650      	mov	r0, sl
 8109aca:	2a00      	cmp	r2, #0
 8109acc:	d04a      	beq.n	8109b64 <forward_dense+0x2bc>
 8109ace:	780d      	ldrb	r5, [r1, #0]
 8109ad0:	edd0 6a00 	vldr	s13, [r0]
 8109ad4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109ad8:	edd5 7a00 	vldr	s15, [r5]
 8109adc:	2a01      	cmp	r2, #1
 8109ade:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109ae2:	d03f      	beq.n	8109b64 <forward_dense+0x2bc>
 8109ae4:	784d      	ldrb	r5, [r1, #1]
 8109ae6:	edd0 6a01 	vldr	s13, [r0, #4]
 8109aea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109aee:	edd5 7a00 	vldr	s15, [r5]
 8109af2:	2a02      	cmp	r2, #2
 8109af4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109af8:	d034      	beq.n	8109b64 <forward_dense+0x2bc>
 8109afa:	788d      	ldrb	r5, [r1, #2]
 8109afc:	edd0 6a02 	vldr	s13, [r0, #8]
 8109b00:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109b04:	edd5 7a00 	vldr	s15, [r5]
 8109b08:	2a03      	cmp	r2, #3
 8109b0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b0e:	d029      	beq.n	8109b64 <forward_dense+0x2bc>
 8109b10:	78cd      	ldrb	r5, [r1, #3]
 8109b12:	edd0 6a03 	vldr	s13, [r0, #12]
 8109b16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109b1a:	edd5 7a00 	vldr	s15, [r5]
 8109b1e:	2a04      	cmp	r2, #4
 8109b20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b24:	d01e      	beq.n	8109b64 <forward_dense+0x2bc>
 8109b26:	790d      	ldrb	r5, [r1, #4]
 8109b28:	edd0 6a04 	vldr	s13, [r0, #16]
 8109b2c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109b30:	edd5 7a00 	vldr	s15, [r5]
 8109b34:	2a05      	cmp	r2, #5
 8109b36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b3a:	d013      	beq.n	8109b64 <forward_dense+0x2bc>
 8109b3c:	794d      	ldrb	r5, [r1, #5]
 8109b3e:	edd0 6a05 	vldr	s13, [r0, #20]
 8109b42:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109b46:	edd5 7a00 	vldr	s15, [r5]
 8109b4a:	2a06      	cmp	r2, #6
 8109b4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b50:	d008      	beq.n	8109b64 <forward_dense+0x2bc>
 8109b52:	7989      	ldrb	r1, [r1, #6]
 8109b54:	edd0 7a06 	vldr	s15, [r0, #24]
 8109b58:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109b5c:	edd1 6a00 	vldr	s13, [r1]
 8109b60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109b64:	44dc      	add	ip, fp
 8109b66:	445e      	add	r6, fp
 8109b68:	ee32 7a87 	vadd.f32	s14, s5, s14
 8109b6c:	eca7 7a01 	vstmia	r7!, {s14}
 8109b70:	454f      	cmp	r7, r9
 8109b72:	f4ff af43 	bcc.w	81099fc <forward_dense+0x154>
 8109b76:	9a06      	ldr	r2, [sp, #24]
 8109b78:	eba9 0302 	sub.w	r3, r9, r2
 8109b7c:	3b01      	subs	r3, #1
 8109b7e:	f023 0303 	bic.w	r3, r3, #3
 8109b82:	3304      	adds	r3, #4
 8109b84:	18d3      	adds	r3, r2, r3
 8109b86:	9306      	str	r3, [sp, #24]
 8109b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109b8a:	9a05      	ldr	r2, [sp, #20]
 8109b8c:	4499      	add	r9, r3
 8109b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109b90:	441a      	add	r2, r3
 8109b92:	9205      	str	r2, [sp, #20]
 8109b94:	9a02      	ldr	r2, [sp, #8]
 8109b96:	441a      	add	r2, r3
 8109b98:	9202      	str	r2, [sp, #8]
 8109b9a:	9a04      	ldr	r2, [sp, #16]
 8109b9c:	441a      	add	r2, r3
 8109b9e:	9204      	str	r2, [sp, #16]
 8109ba0:	9b06      	ldr	r3, [sp, #24]
 8109ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109ba4:	4293      	cmp	r3, r2
 8109ba6:	f4ff af08 	bcc.w	81099ba <forward_dense+0x112>
 8109baa:	b015      	add	sp, #84	; 0x54
 8109bac:	ecbd 8b02 	vpop	{d8}
 8109bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109bb4:	6853      	ldr	r3, [r2, #4]
 8109bb6:	deff      	udf	#255	; 0xff
 8109bb8:	2300      	movs	r3, #0
 8109bba:	685b      	ldr	r3, [r3, #4]
 8109bbc:	deff      	udf	#255	; 0xff
 8109bbe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8109bd4 <forward_dense+0x32c>
 8109bc2:	eef0 2a48 	vmov.f32	s5, s16
 8109bc6:	f1be 0f00 	cmp.w	lr, #0
 8109bca:	f47f af22 	bne.w	8109a12 <forward_dense+0x16a>
 8109bce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8109bd0:	4661      	mov	r1, ip
 8109bd2:	e77a      	b.n	8109aca <forward_dense+0x222>
 8109bd4:	00000000 	.word	0x00000000
 8109bd8:	4549      	cmp	r1, r9
 8109bda:	d2d5      	bcs.n	8109b88 <forward_dense+0x2e0>
 8109bdc:	9807      	ldr	r0, [sp, #28]
 8109bde:	9103      	str	r1, [sp, #12]
 8109be0:	9904      	ldr	r1, [sp, #16]
 8109be2:	f100 0c01 	add.w	ip, r0, #1
 8109be6:	3901      	subs	r1, #1
 8109be8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8109bec:	9109      	str	r1, [sp, #36]	; 0x24
 8109bee:	2b00      	cmp	r3, #0
 8109bf0:	f000 80b2 	beq.w	8109d58 <forward_dense+0x4b0>
 8109bf4:	9907      	ldr	r1, [sp, #28]
 8109bf6:	ecf3 2a01 	vldmia	r3!, {s5}
 8109bfa:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8109bd4 <forward_dense+0x32c>
 8109bfe:	2900      	cmp	r1, #0
 8109c00:	f000 80b2 	beq.w	8109d68 <forward_dense+0x4c0>
 8109c04:	9902      	ldr	r1, [sp, #8]
 8109c06:	1d10      	adds	r0, r2, #4
 8109c08:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8109c0c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8109c10:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8109c14:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8109c18:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8109c1c:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8109c20:	ed11 5a04 	vldr	s10, [r1, #-16]
 8109c24:	ed51 5a03 	vldr	s11, [r1, #-12]
 8109c28:	ed11 6a02 	vldr	s12, [r1, #-8]
 8109c2c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8109c30:	f006 070f 	and.w	r7, r6, #15
 8109c34:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8109c38:	edd7 7a00 	vldr	s15, [r7]
 8109c3c:	0936      	lsrs	r6, r6, #4
 8109c3e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c42:	ed96 3a00 	vldr	s6, [r6]
 8109c46:	ee67 7a82 	vmul.f32	s15, s15, s4
 8109c4a:	092e      	lsrs	r6, r5, #4
 8109c4c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109c50:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c54:	f005 050f 	and.w	r5, r5, #15
 8109c58:	edd6 3a00 	vldr	s7, [r6]
 8109c5c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8109c60:	eee3 7a84 	vfma.f32	s15, s7, s8
 8109c64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109c68:	0937      	lsrs	r7, r6, #4
 8109c6a:	ed95 4a00 	vldr	s8, [r5]
 8109c6e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8109c72:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109c76:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8109c7a:	f006 060f 	and.w	r6, r6, #15
 8109c7e:	edd7 4a00 	vldr	s9, [r7]
 8109c82:	eee4 7a85 	vfma.f32	s15, s9, s10
 8109c86:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c8a:	3004      	adds	r0, #4
 8109c8c:	ed96 5a00 	vldr	s10, [r6]
 8109c90:	092e      	lsrs	r6, r5, #4
 8109c92:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109c96:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109c9a:	f005 050f 	and.w	r5, r5, #15
 8109c9e:	edd6 5a00 	vldr	s11, [r6]
 8109ca2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109ca6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109caa:	4584      	cmp	ip, r0
 8109cac:	ed95 6a00 	vldr	s12, [r5]
 8109cb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109cb4:	f101 0120 	add.w	r1, r1, #32
 8109cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109cbc:	d1a4      	bne.n	8109c08 <forward_dense+0x360>
 8109cbe:	f8dd e014 	ldr.w	lr, [sp, #20]
 8109cc2:	f1ac 0804 	sub.w	r8, ip, #4
 8109cc6:	9904      	ldr	r1, [sp, #16]
 8109cc8:	458e      	cmp	lr, r1
 8109cca:	d22a      	bcs.n	8109d22 <forward_dense+0x47a>
 8109ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109cce:	eba1 070e 	sub.w	r7, r1, lr
 8109cd2:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8109cd6:	f10e 0008 	add.w	r0, lr, #8
 8109cda:	f108 36ff 	add.w	r6, r8, #4294967295
 8109cde:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8109ce2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109ce6:	ed50 5a01 	vldr	s11, [r0, #-4]
 8109cea:	ed50 6a02 	vldr	s13, [r0, #-8]
 8109cee:	f001 050f 	and.w	r5, r1, #15
 8109cf2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109cf6:	edd5 7a00 	vldr	s15, [r5]
 8109cfa:	0909      	lsrs	r1, r1, #4
 8109cfc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109d00:	ed91 6a00 	vldr	s12, [r1]
 8109d04:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8109d08:	42b7      	cmp	r7, r6
 8109d0a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109d0e:	f100 0008 	add.w	r0, r0, #8
 8109d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109d16:	d1e4      	bne.n	8109ce2 <forward_dense+0x43a>
 8109d18:	f10a 0a01 	add.w	sl, sl, #1
 8109d1c:	44d0      	add	r8, sl
 8109d1e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8109d22:	9908      	ldr	r1, [sp, #32]
 8109d24:	b321      	cbz	r1, 8109d70 <forward_dense+0x4c8>
 8109d26:	f898 1000 	ldrb.w	r1, [r8]
 8109d2a:	edde 7a00 	vldr	s15, [lr]
 8109d2e:	0909      	lsrs	r1, r1, #4
 8109d30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109d34:	edd1 6a00 	vldr	s13, [r1]
 8109d38:	9903      	ldr	r1, [sp, #12]
 8109d3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109d3e:	445a      	add	r2, fp
 8109d40:	44dc      	add	ip, fp
 8109d42:	ee72 2a87 	vadd.f32	s5, s5, s14
 8109d46:	ece1 2a01 	vstmia	r1!, {s5}
 8109d4a:	4589      	cmp	r9, r1
 8109d4c:	9103      	str	r1, [sp, #12]
 8109d4e:	f67f af12 	bls.w	8109b76 <forward_dense+0x2ce>
 8109d52:	2b00      	cmp	r3, #0
 8109d54:	f47f af4e 	bne.w	8109bf4 <forward_dense+0x34c>
 8109d58:	9907      	ldr	r1, [sp, #28]
 8109d5a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8109bd4 <forward_dense+0x32c>
 8109d5e:	eef0 2a48 	vmov.f32	s5, s16
 8109d62:	2900      	cmp	r1, #0
 8109d64:	f47f af4e 	bne.w	8109c04 <forward_dense+0x35c>
 8109d68:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8109d6c:	4690      	mov	r8, r2
 8109d6e:	e7aa      	b.n	8109cc6 <forward_dense+0x41e>
 8109d70:	9903      	ldr	r1, [sp, #12]
 8109d72:	ee32 7a87 	vadd.f32	s14, s5, s14
 8109d76:	445a      	add	r2, fp
 8109d78:	eca1 7a01 	vstmia	r1!, {s14}
 8109d7c:	4549      	cmp	r1, r9
 8109d7e:	9103      	str	r1, [sp, #12]
 8109d80:	44dc      	add	ip, fp
 8109d82:	f4ff af34 	bcc.w	8109bee <forward_dense+0x346>
 8109d86:	e6f6      	b.n	8109b76 <forward_dense+0x2ce>
 8109d88:	9912      	ldr	r1, [sp, #72]	; 0x48
 8109d8a:	9d06      	ldr	r5, [sp, #24]
 8109d8c:	9101      	str	r1, [sp, #4]
 8109d8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8109d90:	9100      	str	r1, [sp, #0]
 8109d92:	4628      	mov	r0, r5
 8109d94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8109d96:	f000 f9ef 	bl	810a178 <forward_lite_dense_if32of32wf32>
 8109d9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109d9c:	462b      	mov	r3, r5
 8109d9e:	4413      	add	r3, r2
 8109da0:	9306      	str	r3, [sp, #24]
 8109da2:	e6f1      	b.n	8109b88 <forward_dense+0x2e0>
 8109da4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8109da8:	f1b9 0f00 	cmp.w	r9, #0
 8109dac:	d016      	beq.n	8109ddc <forward_dense+0x534>
 8109dae:	e9d9 0100 	ldrd	r0, r1, [r9]
 8109db2:	f000 fbf7 	bl	810a5a4 <ai_array_get_byte_size>
 8109db6:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8109dba:	4602      	mov	r2, r0
 8109dbc:	4659      	mov	r1, fp
 8109dbe:	4640      	mov	r0, r8
 8109dc0:	f000 fafe 	bl	810a3c0 <st_int8_copy>
 8109dc4:	e5c7      	b.n	8109956 <forward_dense+0xae>
 8109dc6:	2b04      	cmp	r3, #4
 8109dc8:	d00a      	beq.n	8109de0 <forward_dense+0x538>
 8109dca:	f04f 0900 	mov.w	r9, #0
 8109dce:	e5bd      	b.n	810994c <forward_dense+0xa4>
 8109dd0:	930d      	str	r3, [sp, #52]	; 0x34
 8109dd2:	e595      	b.n	8109900 <forward_dense+0x58>
 8109dd4:	2300      	movs	r3, #0
 8109dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8109dd8:	460b      	mov	r3, r1
 8109dda:	e591      	b.n	8109900 <forward_dense+0x58>
 8109ddc:	46c3      	mov	fp, r8
 8109dde:	e5ba      	b.n	8109956 <forward_dense+0xae>
 8109de0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8109de4:	e5b7      	b.n	8109956 <forward_dense+0xae>
 8109de6:	2300      	movs	r3, #0
 8109de8:	685b      	ldr	r3, [r3, #4]
 8109dea:	deff      	udf	#255	; 0xff
 8109dec:	2300      	movs	r3, #0
 8109dee:	685b      	ldr	r3, [r3, #4]
 8109df0:	deff      	udf	#255	; 0xff
 8109df2:	bf00      	nop

08109df4 <forward_relu>:
 8109df4:	6982      	ldr	r2, [r0, #24]
 8109df6:	8813      	ldrh	r3, [r2, #0]
 8109df8:	2b00      	cmp	r3, #0
 8109dfa:	d05b      	beq.n	8109eb4 <forward_relu+0xc0>
 8109dfc:	6851      	ldr	r1, [r2, #4]
 8109dfe:	684a      	ldr	r2, [r1, #4]
 8109e00:	b102      	cbz	r2, 8109e04 <forward_relu+0x10>
 8109e02:	6812      	ldr	r2, [r2, #0]
 8109e04:	2b01      	cmp	r3, #1
 8109e06:	f000 8123 	beq.w	810a050 <forward_relu+0x25c>
 8109e0a:	b470      	push	{r4, r5, r6}
 8109e0c:	6909      	ldr	r1, [r1, #16]
 8109e0e:	b101      	cbz	r1, 8109e12 <forward_relu+0x1e>
 8109e10:	6809      	ldr	r1, [r1, #0]
 8109e12:	69c6      	ldr	r6, [r0, #28]
 8109e14:	2e00      	cmp	r6, #0
 8109e16:	f000 8097 	beq.w	8109f48 <forward_relu+0x154>
 8109e1a:	6873      	ldr	r3, [r6, #4]
 8109e1c:	6988      	ldr	r0, [r1, #24]
 8109e1e:	6991      	ldr	r1, [r2, #24]
 8109e20:	2b01      	cmp	r3, #1
 8109e22:	f000 80c1 	beq.w	8109fa8 <forward_relu+0x1b4>
 8109e26:	6893      	ldr	r3, [r2, #8]
 8109e28:	6880      	ldr	r0, [r0, #8]
 8109e2a:	688c      	ldr	r4, [r1, #8]
 8109e2c:	0a1b      	lsrs	r3, r3, #8
 8109e2e:	f000 80f2 	beq.w	810a016 <forward_relu+0x222>
 8109e32:	68d5      	ldr	r5, [r2, #12]
 8109e34:	2201      	movs	r2, #1
 8109e36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8109e3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109e3e:	42ab      	cmp	r3, r5
 8109e40:	fb01 f202 	mul.w	r2, r1, r2
 8109e44:	d1f9      	bne.n	8109e3a <forward_relu+0x46>
 8109e46:	68b3      	ldr	r3, [r6, #8]
 8109e48:	ed93 7a02 	vldr	s14, [r3, #8]
 8109e4c:	edd3 6a00 	vldr	s13, [r3]
 8109e50:	ed93 6a01 	vldr	s12, [r3, #4]
 8109e54:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8109e58:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8109e5c:	3a01      	subs	r2, #1
 8109e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109e62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109e66:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109e6a:	d425      	bmi.n	8109eb8 <forward_relu+0xc4>
 8109e6c:	429c      	cmp	r4, r3
 8109e6e:	d81f      	bhi.n	8109eb0 <forward_relu+0xbc>
 8109e70:	1d1a      	adds	r2, r3, #4
 8109e72:	1d01      	adds	r1, r0, #4
 8109e74:	e00d      	b.n	8109e92 <forward_relu+0x9e>
 8109e76:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109e7e:	db03      	blt.n	8109e88 <forward_relu+0x94>
 8109e80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8109e84:	ee67 7a86 	vmul.f32	s15, s15, s12
 8109e88:	3b08      	subs	r3, #8
 8109e8a:	429c      	cmp	r4, r3
 8109e8c:	ed61 7a01 	vstmdb	r1!, {s15}
 8109e90:	d80e      	bhi.n	8109eb0 <forward_relu+0xbc>
 8109e92:	4613      	mov	r3, r2
 8109e94:	ed72 7a01 	vldmdb	r2!, {s15}
 8109e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8109e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109ea0:	d9e9      	bls.n	8109e76 <forward_relu+0x82>
 8109ea2:	3b08      	subs	r3, #8
 8109ea4:	eef0 7a47 	vmov.f32	s15, s14
 8109ea8:	429c      	cmp	r4, r3
 8109eaa:	ed61 7a01 	vstmdb	r1!, {s15}
 8109eae:	d9f0      	bls.n	8109e92 <forward_relu+0x9e>
 8109eb0:	bc70      	pop	{r4, r5, r6}
 8109eb2:	4770      	bx	lr
 8109eb4:	685b      	ldr	r3, [r3, #4]
 8109eb6:	deff      	udf	#255	; 0xff
 8109eb8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8109ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109ec0:	d11f      	bne.n	8109f02 <forward_relu+0x10e>
 8109ec2:	429c      	cmp	r4, r3
 8109ec4:	d8f4      	bhi.n	8109eb0 <forward_relu+0xbc>
 8109ec6:	1b1c      	subs	r4, r3, r4
 8109ec8:	f024 0403 	bic.w	r4, r4, #3
 8109ecc:	1d1a      	adds	r2, r3, #4
 8109ece:	2500      	movs	r5, #0
 8109ed0:	1b1b      	subs	r3, r3, r4
 8109ed2:	1d01      	adds	r1, r0, #4
 8109ed4:	ed72 7a01 	vldmdb	r2!, {s15}
 8109ed8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8109edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109ee0:	dc0a      	bgt.n	8109ef8 <forward_relu+0x104>
 8109ee2:	429a      	cmp	r2, r3
 8109ee4:	f841 5d04 	str.w	r5, [r1, #-4]!
 8109ee8:	d0e2      	beq.n	8109eb0 <forward_relu+0xbc>
 8109eea:	ed72 7a01 	vldmdb	r2!, {s15}
 8109eee:	eef4 7ae6 	vcmpe.f32	s15, s13
 8109ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109ef6:	ddf4      	ble.n	8109ee2 <forward_relu+0xee>
 8109ef8:	429a      	cmp	r2, r3
 8109efa:	ed61 7a01 	vstmdb	r1!, {s15}
 8109efe:	d1e9      	bne.n	8109ed4 <forward_relu+0xe0>
 8109f00:	e7d6      	b.n	8109eb0 <forward_relu+0xbc>
 8109f02:	429c      	cmp	r4, r3
 8109f04:	d8d4      	bhi.n	8109eb0 <forward_relu+0xbc>
 8109f06:	1b1c      	subs	r4, r3, r4
 8109f08:	f024 0403 	bic.w	r4, r4, #3
 8109f0c:	1d1a      	adds	r2, r3, #4
 8109f0e:	1d01      	adds	r1, r0, #4
 8109f10:	1b1b      	subs	r3, r3, r4
 8109f12:	ed72 7a01 	vldmdb	r2!, {s15}
 8109f16:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109f1e:	db0e      	blt.n	8109f3e <forward_relu+0x14a>
 8109f20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8109f24:	4293      	cmp	r3, r2
 8109f26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8109f2a:	ed61 7a01 	vstmdb	r1!, {s15}
 8109f2e:	d0bf      	beq.n	8109eb0 <forward_relu+0xbc>
 8109f30:	ed72 7a01 	vldmdb	r2!, {s15}
 8109f34:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109f3c:	daf0      	bge.n	8109f20 <forward_relu+0x12c>
 8109f3e:	4293      	cmp	r3, r2
 8109f40:	ed61 7a01 	vstmdb	r1!, {s15}
 8109f44:	d1e5      	bne.n	8109f12 <forward_relu+0x11e>
 8109f46:	e7b3      	b.n	8109eb0 <forward_relu+0xbc>
 8109f48:	6893      	ldr	r3, [r2, #8]
 8109f4a:	6989      	ldr	r1, [r1, #24]
 8109f4c:	6990      	ldr	r0, [r2, #24]
 8109f4e:	6889      	ldr	r1, [r1, #8]
 8109f50:	6884      	ldr	r4, [r0, #8]
 8109f52:	0a1b      	lsrs	r3, r3, #8
 8109f54:	d075      	beq.n	810a042 <forward_relu+0x24e>
 8109f56:	68d5      	ldr	r5, [r2, #12]
 8109f58:	2201      	movs	r2, #1
 8109f5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8109f5e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8109f62:	429d      	cmp	r5, r3
 8109f64:	fb00 f202 	mul.w	r2, r0, r2
 8109f68:	d1f9      	bne.n	8109f5e <forward_relu+0x16a>
 8109f6a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8109f6e:	3b01      	subs	r3, #1
 8109f70:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8109f74:	4294      	cmp	r4, r2
 8109f76:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8109f7a:	d899      	bhi.n	8109eb0 <forward_relu+0xbc>
 8109f7c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 810a058 <forward_relu+0x264>
 8109f80:	3204      	adds	r2, #4
 8109f82:	3104      	adds	r1, #4
 8109f84:	4613      	mov	r3, r2
 8109f86:	ed72 7a01 	vldmdb	r2!, {s15}
 8109f8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8109f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109f92:	f1a3 0308 	sub.w	r3, r3, #8
 8109f96:	bfb8      	it	lt
 8109f98:	eef0 7a47 	vmovlt.f32	s15, s14
 8109f9c:	429c      	cmp	r4, r3
 8109f9e:	ed61 7a01 	vstmdb	r1!, {s15}
 8109fa2:	d9ef      	bls.n	8109f84 <forward_relu+0x190>
 8109fa4:	bc70      	pop	{r4, r5, r6}
 8109fa6:	4770      	bx	lr
 8109fa8:	688c      	ldr	r4, [r1, #8]
 8109faa:	6891      	ldr	r1, [r2, #8]
 8109fac:	6880      	ldr	r0, [r0, #8]
 8109fae:	0a09      	lsrs	r1, r1, #8
 8109fb0:	d049      	beq.n	810a046 <forward_relu+0x252>
 8109fb2:	68d5      	ldr	r5, [r2, #12]
 8109fb4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8109fb8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8109fbc:	42aa      	cmp	r2, r5
 8109fbe:	fb01 f303 	mul.w	r3, r1, r3
 8109fc2:	d1f9      	bne.n	8109fb8 <forward_relu+0x1c4>
 8109fc4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8109fc8:	3a01      	subs	r2, #1
 8109fca:	68b1      	ldr	r1, [r6, #8]
 8109fcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109fd0:	429c      	cmp	r4, r3
 8109fd2:	ed91 7a00 	vldr	s14, [r1]
 8109fd6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109fda:	f63f af69 	bhi.w	8109eb0 <forward_relu+0xbc>
 8109fde:	2500      	movs	r5, #0
 8109fe0:	3304      	adds	r3, #4
 8109fe2:	1d02      	adds	r2, r0, #4
 8109fe4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8109fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8109fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109ff0:	f1a3 0104 	sub.w	r1, r3, #4
 8109ff4:	f1a3 0308 	sub.w	r3, r3, #8
 8109ff8:	d406      	bmi.n	810a008 <forward_relu+0x214>
 8109ffa:	429c      	cmp	r4, r3
 8109ffc:	f842 5d04 	str.w	r5, [r2, #-4]!
 810a000:	f63f af56 	bhi.w	8109eb0 <forward_relu+0xbc>
 810a004:	460b      	mov	r3, r1
 810a006:	e7ed      	b.n	8109fe4 <forward_relu+0x1f0>
 810a008:	429c      	cmp	r4, r3
 810a00a:	ed62 7a01 	vstmdb	r2!, {s15}
 810a00e:	f63f af4f 	bhi.w	8109eb0 <forward_relu+0xbc>
 810a012:	460b      	mov	r3, r1
 810a014:	e7e6      	b.n	8109fe4 <forward_relu+0x1f0>
 810a016:	68b3      	ldr	r3, [r6, #8]
 810a018:	ed93 7a02 	vldr	s14, [r3, #8]
 810a01c:	edd3 6a00 	vldr	s13, [r3]
 810a020:	ed93 6a01 	vldr	s12, [r3, #4]
 810a024:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 810a028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a02c:	d401      	bmi.n	810a032 <forward_relu+0x23e>
 810a02e:	4623      	mov	r3, r4
 810a030:	e71e      	b.n	8109e70 <forward_relu+0x7c>
 810a032:	eeb5 6a40 	vcmp.f32	s12, #0.0
 810a036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a03a:	4623      	mov	r3, r4
 810a03c:	f47f af63 	bne.w	8109f06 <forward_relu+0x112>
 810a040:	e741      	b.n	8109ec6 <forward_relu+0xd2>
 810a042:	4622      	mov	r2, r4
 810a044:	e79a      	b.n	8109f7c <forward_relu+0x188>
 810a046:	68b2      	ldr	r2, [r6, #8]
 810a048:	4623      	mov	r3, r4
 810a04a:	ed92 7a00 	vldr	s14, [r2]
 810a04e:	e7c6      	b.n	8109fde <forward_relu+0x1ea>
 810a050:	2300      	movs	r3, #0
 810a052:	685b      	ldr	r3, [r3, #4]
 810a054:	deff      	udf	#255	; 0xff
 810a056:	bf00      	nop
 810a058:	00000000 	.word	0x00000000

0810a05c <forward_sm>:
 810a05c:	6982      	ldr	r2, [r0, #24]
 810a05e:	8813      	ldrh	r3, [r2, #0]
 810a060:	2b00      	cmp	r3, #0
 810a062:	d07c      	beq.n	810a15e <forward_sm+0x102>
 810a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a068:	ed2d 8b04 	vpush	{d8-d9}
 810a06c:	6852      	ldr	r2, [r2, #4]
 810a06e:	6854      	ldr	r4, [r2, #4]
 810a070:	b085      	sub	sp, #20
 810a072:	b104      	cbz	r4, 810a076 <forward_sm+0x1a>
 810a074:	6824      	ldr	r4, [r4, #0]
 810a076:	2b01      	cmp	r3, #1
 810a078:	d076      	beq.n	810a168 <forward_sm+0x10c>
 810a07a:	6913      	ldr	r3, [r2, #16]
 810a07c:	2b00      	cmp	r3, #0
 810a07e:	d076      	beq.n	810a16e <forward_sm+0x112>
 810a080:	681e      	ldr	r6, [r3, #0]
 810a082:	68a3      	ldr	r3, [r4, #8]
 810a084:	68e0      	ldr	r0, [r4, #12]
 810a086:	68f2      	ldr	r2, [r6, #12]
 810a088:	6845      	ldr	r5, [r0, #4]
 810a08a:	6857      	ldr	r7, [r2, #4]
 810a08c:	0a1b      	lsrs	r3, r3, #8
 810a08e:	d068      	beq.n	810a162 <forward_sm+0x106>
 810a090:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 810a094:	2201      	movs	r2, #1
 810a096:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810a09a:	4298      	cmp	r0, r3
 810a09c:	fb01 f202 	mul.w	r2, r1, r2
 810a0a0:	d1f9      	bne.n	810a096 <forward_sm+0x3a>
 810a0a2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 810a0a6:	69a2      	ldr	r2, [r4, #24]
 810a0a8:	69b3      	ldr	r3, [r6, #24]
 810a0aa:	6892      	ldr	r2, [r2, #8]
 810a0ac:	f8d3 8008 	ldr.w	r8, [r3, #8]
 810a0b0:	eb02 0309 	add.w	r3, r2, r9
 810a0b4:	429a      	cmp	r2, r3
 810a0b6:	9301      	str	r3, [sp, #4]
 810a0b8:	d24c      	bcs.n	810a154 <forward_sm+0xf8>
 810a0ba:	00bb      	lsls	r3, r7, #2
 810a0bc:	9303      	str	r3, [sp, #12]
 810a0be:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 810a0c2:	00ab      	lsls	r3, r5, #2
 810a0c4:	2d01      	cmp	r5, #1
 810a0c6:	ed92 8a00 	vldr	s16, [r2]
 810a0ca:	9302      	str	r3, [sp, #8]
 810a0cc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 810a0d0:	463e      	mov	r6, r7
 810a0d2:	d93c      	bls.n	810a14e <forward_sm+0xf2>
 810a0d4:	1d13      	adds	r3, r2, #4
 810a0d6:	ecf3 7a01 	vldmia	r3!, {s15}
 810a0da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810a0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a0e2:	bfb8      	it	lt
 810a0e4:	eeb0 8a67 	vmovlt.f32	s16, s15
 810a0e8:	429e      	cmp	r6, r3
 810a0ea:	d1f4      	bne.n	810a0d6 <forward_sm+0x7a>
 810a0ec:	eddf 8a21 	vldr	s17, [pc, #132]	; 810a174 <forward_sm+0x118>
 810a0f0:	4692      	mov	sl, r2
 810a0f2:	46c3      	mov	fp, r8
 810a0f4:	46c1      	mov	r9, r8
 810a0f6:	2400      	movs	r4, #0
 810a0f8:	ecba 0a01 	vldmia	sl!, {s0}
 810a0fc:	ee30 0a48 	vsub.f32	s0, s0, s16
 810a100:	f004 feea 	bl	810eed8 <expf>
 810a104:	3401      	adds	r4, #1
 810a106:	42a5      	cmp	r5, r4
 810a108:	ee78 8a80 	vadd.f32	s17, s17, s0
 810a10c:	eca9 0a01 	vstmia	r9!, {s0}
 810a110:	d8f2      	bhi.n	810a0f8 <forward_sm+0x9c>
 810a112:	eef5 8a40 	vcmp.f32	s17, #0.0
 810a116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810a11a:	d00b      	beq.n	810a134 <forward_sm+0xd8>
 810a11c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 810a120:	2300      	movs	r3, #0
 810a122:	3301      	adds	r3, #1
 810a124:	429d      	cmp	r5, r3
 810a126:	eddb 7a00 	vldr	s15, [fp]
 810a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a12e:	eceb 7a01 	vstmia	fp!, {s15}
 810a132:	d8f6      	bhi.n	810a122 <forward_sm+0xc6>
 810a134:	9b03      	ldr	r3, [sp, #12]
 810a136:	9901      	ldr	r1, [sp, #4]
 810a138:	4498      	add	r8, r3
 810a13a:	9b02      	ldr	r3, [sp, #8]
 810a13c:	42b9      	cmp	r1, r7
 810a13e:	463a      	mov	r2, r7
 810a140:	441e      	add	r6, r3
 810a142:	d907      	bls.n	810a154 <forward_sm+0xf8>
 810a144:	2d01      	cmp	r5, #1
 810a146:	ed92 8a00 	vldr	s16, [r2]
 810a14a:	441f      	add	r7, r3
 810a14c:	d8c2      	bhi.n	810a0d4 <forward_sm+0x78>
 810a14e:	2d00      	cmp	r5, #0
 810a150:	d0f0      	beq.n	810a134 <forward_sm+0xd8>
 810a152:	e7cb      	b.n	810a0ec <forward_sm+0x90>
 810a154:	b005      	add	sp, #20
 810a156:	ecbd 8b04 	vpop	{d8-d9}
 810a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a15e:	685b      	ldr	r3, [r3, #4]
 810a160:	deff      	udf	#255	; 0xff
 810a162:	f04f 0904 	mov.w	r9, #4
 810a166:	e79e      	b.n	810a0a6 <forward_sm+0x4a>
 810a168:	2300      	movs	r3, #0
 810a16a:	685b      	ldr	r3, [r3, #4]
 810a16c:	deff      	udf	#255	; 0xff
 810a16e:	68db      	ldr	r3, [r3, #12]
 810a170:	deff      	udf	#255	; 0xff
 810a172:	bf00      	nop
 810a174:	00000000 	.word	0x00000000

0810a178 <forward_lite_dense_if32of32wf32>:
 810a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a17c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 810a180:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 810a184:	4287      	cmp	r7, r0
 810a186:	f240 8106 	bls.w	810a396 <forward_lite_dense_if32of32wf32+0x21e>
 810a18a:	f1a6 0810 	sub.w	r8, r6, #16
 810a18e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 810a192:	f108 0801 	add.w	r8, r8, #1
 810a196:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 810a19a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 810a19e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 810a1a2:	4605      	mov	r5, r0
 810a1a4:	f006 0a0f 	and.w	sl, r6, #15
 810a1a8:	2e0f      	cmp	r6, #15
 810a1aa:	ed9f 7a84 	vldr	s14, [pc, #528]	; 810a3bc <forward_lite_dense_if32of32wf32+0x244>
 810a1ae:	f240 8101 	bls.w	810a3b4 <forward_lite_dense_if32of32wf32+0x23c>
 810a1b2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 810a1b6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 810a1ba:	46b6      	mov	lr, r6
 810a1bc:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 810a1c0:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 810a1c4:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 810a1c8:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 810a1cc:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 810a1d0:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 810a1d4:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 810a1d8:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 810a1dc:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 810a1e0:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 810a1e4:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 810a1e8:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 810a1ec:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 810a1f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 810a1f4:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 810a1f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a1fc:	f1ae 0e10 	sub.w	lr, lr, #16
 810a200:	f1be 0f0f 	cmp.w	lr, #15
 810a204:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 810a208:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 810a20c:	eee5 7a86 	vfma.f32	s15, s11, s12
 810a210:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 810a214:	f104 0440 	add.w	r4, r4, #64	; 0x40
 810a218:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 810a21c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 810a220:	eee4 7aa6 	vfma.f32	s15, s9, s13
 810a224:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 810a228:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 810a22c:	eee5 7a25 	vfma.f32	s15, s10, s11
 810a230:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 810a234:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 810a238:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a23c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 810a240:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 810a244:	eee3 7a23 	vfma.f32	s15, s6, s7
 810a248:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 810a24c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 810a250:	eee4 7a24 	vfma.f32	s15, s8, s9
 810a254:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 810a258:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 810a25c:	eee5 7a25 	vfma.f32	s15, s10, s11
 810a260:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 810a264:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 810a268:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a26c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 810a270:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 810a274:	eee1 7a21 	vfma.f32	s15, s2, s3
 810a278:	eee2 7a22 	vfma.f32	s15, s4, s5
 810a27c:	eee3 7a23 	vfma.f32	s15, s6, s7
 810a280:	eee4 7a24 	vfma.f32	s15, s8, s9
 810a284:	eee5 7a25 	vfma.f32	s15, s10, s11
 810a288:	eee6 7a26 	vfma.f32	s15, s12, s13
 810a28c:	ee37 7a27 	vadd.f32	s14, s14, s15
 810a290:	d894      	bhi.n	810a1bc <forward_lite_dense_if32of32wf32+0x44>
 810a292:	eb02 0e0b 	add.w	lr, r2, fp
 810a296:	4654      	mov	r4, sl
 810a298:	46c4      	mov	ip, r8
 810a29a:	2c00      	cmp	r4, #0
 810a29c:	d075      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a29e:	eddc 6a00 	vldr	s13, [ip]
 810a2a2:	edde 7a00 	vldr	s15, [lr]
 810a2a6:	2c01      	cmp	r4, #1
 810a2a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2ac:	d06d      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a2ae:	eddc 6a01 	vldr	s13, [ip, #4]
 810a2b2:	edde 7a01 	vldr	s15, [lr, #4]
 810a2b6:	2c02      	cmp	r4, #2
 810a2b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2bc:	d065      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a2be:	eddc 6a02 	vldr	s13, [ip, #8]
 810a2c2:	edde 7a02 	vldr	s15, [lr, #8]
 810a2c6:	2c03      	cmp	r4, #3
 810a2c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2cc:	d05d      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a2ce:	eddc 6a03 	vldr	s13, [ip, #12]
 810a2d2:	edde 7a03 	vldr	s15, [lr, #12]
 810a2d6:	2c04      	cmp	r4, #4
 810a2d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2dc:	d055      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a2de:	eddc 6a04 	vldr	s13, [ip, #16]
 810a2e2:	edde 7a04 	vldr	s15, [lr, #16]
 810a2e6:	2c05      	cmp	r4, #5
 810a2e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2ec:	d04d      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a2ee:	eddc 6a05 	vldr	s13, [ip, #20]
 810a2f2:	edde 7a05 	vldr	s15, [lr, #20]
 810a2f6:	2c06      	cmp	r4, #6
 810a2f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a2fc:	d045      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a2fe:	eddc 6a06 	vldr	s13, [ip, #24]
 810a302:	edde 7a06 	vldr	s15, [lr, #24]
 810a306:	2c07      	cmp	r4, #7
 810a308:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a30c:	d03d      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a30e:	eddc 6a07 	vldr	s13, [ip, #28]
 810a312:	edde 7a07 	vldr	s15, [lr, #28]
 810a316:	2c08      	cmp	r4, #8
 810a318:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a31c:	d035      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a31e:	eddc 6a08 	vldr	s13, [ip, #32]
 810a322:	edde 7a08 	vldr	s15, [lr, #32]
 810a326:	2c09      	cmp	r4, #9
 810a328:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a32c:	d02d      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a32e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 810a332:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 810a336:	2c0a      	cmp	r4, #10
 810a338:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a33c:	d025      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a33e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 810a342:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 810a346:	2c0b      	cmp	r4, #11
 810a348:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a34c:	d01d      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a34e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 810a352:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 810a356:	2c0c      	cmp	r4, #12
 810a358:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a35c:	d015      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a35e:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 810a362:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 810a366:	3c0d      	subs	r4, #13
 810a368:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a36c:	d00d      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a36e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 810a372:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 810a376:	2c01      	cmp	r4, #1
 810a378:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a37c:	d005      	beq.n	810a38a <forward_lite_dense_if32of32wf32+0x212>
 810a37e:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 810a382:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 810a386:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810a38a:	444a      	add	r2, r9
 810a38c:	eca5 7a01 	vstmia	r5!, {s14}
 810a390:	42af      	cmp	r7, r5
 810a392:	f63f af09 	bhi.w	810a1a8 <forward_lite_dense_if32of32wf32+0x30>
 810a396:	b15b      	cbz	r3, 810a3b0 <forward_lite_dense_if32of32wf32+0x238>
 810a398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a39a:	b14a      	cbz	r2, 810a3b0 <forward_lite_dense_if32of32wf32+0x238>
 810a39c:	edd0 7a00 	vldr	s15, [r0]
 810a3a0:	ecb3 7a01 	vldmia	r3!, {s14}
 810a3a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 810a3a8:	ece0 7a01 	vstmia	r0!, {s15}
 810a3ac:	4287      	cmp	r7, r0
 810a3ae:	d1f5      	bne.n	810a39c <forward_lite_dense_if32of32wf32+0x224>
 810a3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a3b4:	4634      	mov	r4, r6
 810a3b6:	4696      	mov	lr, r2
 810a3b8:	468c      	mov	ip, r1
 810a3ba:	e76e      	b.n	810a29a <forward_lite_dense_if32of32wf32+0x122>
 810a3bc:	00000000 	.word	0x00000000

0810a3c0 <st_int8_copy>:
 810a3c0:	4288      	cmp	r0, r1
 810a3c2:	d057      	beq.n	810a474 <st_int8_copy+0xb4>
 810a3c4:	2a00      	cmp	r2, #0
 810a3c6:	d055      	beq.n	810a474 <st_int8_copy+0xb4>
 810a3c8:	4288      	cmp	r0, r1
 810a3ca:	d354      	bcc.n	810a476 <st_int8_copy+0xb6>
 810a3cc:	078b      	lsls	r3, r1, #30
 810a3ce:	d102      	bne.n	810a3d6 <st_int8_copy+0x16>
 810a3d0:	e009      	b.n	810a3e6 <st_int8_copy+0x26>
 810a3d2:	2a00      	cmp	r2, #0
 810a3d4:	d05c      	beq.n	810a490 <st_int8_copy+0xd0>
 810a3d6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 810a3da:	f801 3b01 	strb.w	r3, [r1], #1
 810a3de:	078b      	lsls	r3, r1, #30
 810a3e0:	f102 32ff 	add.w	r2, r2, #4294967295
 810a3e4:	d1f5      	bne.n	810a3d2 <st_int8_copy+0x12>
 810a3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a3ea:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 810a3ee:	d069      	beq.n	810a4c4 <st_int8_copy+0x104>
 810a3f0:	ea41 0300 	orr.w	r3, r1, r0
 810a3f4:	075b      	lsls	r3, r3, #29
 810a3f6:	d14c      	bne.n	810a492 <st_int8_copy+0xd2>
 810a3f8:	f10e 33ff 	add.w	r3, lr, #4294967295
 810a3fc:	2b01      	cmp	r3, #1
 810a3fe:	d948      	bls.n	810a492 <st_int8_copy+0xd2>
 810a400:	f100 0310 	add.w	r3, r0, #16
 810a404:	ea4f 140e 	mov.w	r4, lr, lsl #4
 810a408:	f101 0c10 	add.w	ip, r1, #16
 810a40c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 810a410:	ed13 6b04 	vldr	d6, [r3, #-16]
 810a414:	ed13 7b02 	vldr	d7, [r3, #-8]
 810a418:	3310      	adds	r3, #16
 810a41a:	4573      	cmp	r3, lr
 810a41c:	ed0c 6b04 	vstr	d6, [ip, #-16]
 810a420:	ed0c 7b02 	vstr	d7, [ip, #-8]
 810a424:	f10c 0c10 	add.w	ip, ip, #16
 810a428:	d1f2      	bne.n	810a410 <st_int8_copy+0x50>
 810a42a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 810a42e:	4421      	add	r1, r4
 810a430:	4420      	add	r0, r4
 810a432:	f002 0203 	and.w	r2, r2, #3
 810a436:	b16b      	cbz	r3, 810a454 <st_int8_copy+0x94>
 810a438:	6804      	ldr	r4, [r0, #0]
 810a43a:	600c      	str	r4, [r1, #0]
 810a43c:	1e5c      	subs	r4, r3, #1
 810a43e:	d005      	beq.n	810a44c <st_int8_copy+0x8c>
 810a440:	6845      	ldr	r5, [r0, #4]
 810a442:	604d      	str	r5, [r1, #4]
 810a444:	2c01      	cmp	r4, #1
 810a446:	bf1c      	itt	ne
 810a448:	6884      	ldrne	r4, [r0, #8]
 810a44a:	608c      	strne	r4, [r1, #8]
 810a44c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 810a450:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 810a454:	b162      	cbz	r2, 810a470 <st_int8_copy+0xb0>
 810a456:	f990 3000 	ldrsb.w	r3, [r0]
 810a45a:	700b      	strb	r3, [r1, #0]
 810a45c:	3a01      	subs	r2, #1
 810a45e:	d007      	beq.n	810a470 <st_int8_copy+0xb0>
 810a460:	f990 3001 	ldrsb.w	r3, [r0, #1]
 810a464:	704b      	strb	r3, [r1, #1]
 810a466:	2a01      	cmp	r2, #1
 810a468:	bf1c      	itt	ne
 810a46a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 810a46e:	708b      	strbne	r3, [r1, #2]
 810a470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a474:	4770      	bx	lr
 810a476:	1883      	adds	r3, r0, r2
 810a478:	428b      	cmp	r3, r1
 810a47a:	d9a7      	bls.n	810a3cc <st_int8_copy+0xc>
 810a47c:	4283      	cmp	r3, r0
 810a47e:	440a      	add	r2, r1
 810a480:	d9f8      	bls.n	810a474 <st_int8_copy+0xb4>
 810a482:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 810a486:	f802 1d01 	strb.w	r1, [r2, #-1]!
 810a48a:	4283      	cmp	r3, r0
 810a48c:	d1f9      	bne.n	810a482 <st_int8_copy+0xc2>
 810a48e:	4770      	bx	lr
 810a490:	4770      	bx	lr
 810a492:	ea4f 140e 	mov.w	r4, lr, lsl #4
 810a496:	460b      	mov	r3, r1
 810a498:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 810a49c:	4684      	mov	ip, r0
 810a49e:	f8dc 7000 	ldr.w	r7, [ip]
 810a4a2:	f8dc 6004 	ldr.w	r6, [ip, #4]
 810a4a6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 810a4aa:	f8dc 800c 	ldr.w	r8, [ip, #12]
 810a4ae:	f8c3 800c 	str.w	r8, [r3, #12]
 810a4b2:	601f      	str	r7, [r3, #0]
 810a4b4:	605e      	str	r6, [r3, #4]
 810a4b6:	609d      	str	r5, [r3, #8]
 810a4b8:	3310      	adds	r3, #16
 810a4ba:	459e      	cmp	lr, r3
 810a4bc:	f10c 0c10 	add.w	ip, ip, #16
 810a4c0:	d1ed      	bne.n	810a49e <st_int8_copy+0xde>
 810a4c2:	e7b2      	b.n	810a42a <st_int8_copy+0x6a>
 810a4c4:	0893      	lsrs	r3, r2, #2
 810a4c6:	f002 0203 	and.w	r2, r2, #3
 810a4ca:	e7b4      	b.n	810a436 <st_int8_copy+0x76>

0810a4cc <ai_array_to_buffer_fmt>:
 810a4cc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 810a4d0:	2b02      	cmp	r3, #2
 810a4d2:	d050      	beq.n	810a576 <ai_array_to_buffer_fmt+0xaa>
 810a4d4:	4b2a      	ldr	r3, [pc, #168]	; (810a580 <ai_array_to_buffer_fmt+0xb4>)
 810a4d6:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 810a4da:	429a      	cmp	r2, r3
 810a4dc:	d00b      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a4de:	dc1c      	bgt.n	810a51a <ai_array_to_buffer_fmt+0x4e>
 810a4e0:	4b28      	ldr	r3, [pc, #160]	; (810a584 <ai_array_to_buffer_fmt+0xb8>)
 810a4e2:	429a      	cmp	r2, r3
 810a4e4:	d007      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a4e6:	dd0b      	ble.n	810a500 <ai_array_to_buffer_fmt+0x34>
 810a4e8:	4b27      	ldr	r3, [pc, #156]	; (810a588 <ai_array_to_buffer_fmt+0xbc>)
 810a4ea:	429a      	cmp	r2, r3
 810a4ec:	d003      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a4ee:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 810a4f2:	429a      	cmp	r2, r3
 810a4f4:	d131      	bne.n	810a55a <ai_array_to_buffer_fmt+0x8e>
 810a4f6:	4613      	mov	r3, r2
 810a4f8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 810a4fc:	4318      	orrs	r0, r3
 810a4fe:	4770      	bx	lr
 810a500:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 810a504:	429a      	cmp	r2, r3
 810a506:	d0f6      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a508:	dd2c      	ble.n	810a564 <ai_array_to_buffer_fmt+0x98>
 810a50a:	4b20      	ldr	r3, [pc, #128]	; (810a58c <ai_array_to_buffer_fmt+0xc0>)
 810a50c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 810a510:	429a      	cmp	r2, r3
 810a512:	bf18      	it	ne
 810a514:	2340      	movne	r3, #64	; 0x40
 810a516:	4318      	orrs	r0, r3
 810a518:	4770      	bx	lr
 810a51a:	4b1d      	ldr	r3, [pc, #116]	; (810a590 <ai_array_to_buffer_fmt+0xc4>)
 810a51c:	429a      	cmp	r2, r3
 810a51e:	d0ea      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a520:	dd0e      	ble.n	810a540 <ai_array_to_buffer_fmt+0x74>
 810a522:	4b1c      	ldr	r3, [pc, #112]	; (810a594 <ai_array_to_buffer_fmt+0xc8>)
 810a524:	429a      	cmp	r2, r3
 810a526:	d0e6      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a528:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 810a52c:	429a      	cmp	r2, r3
 810a52e:	d0e2      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a530:	4b19      	ldr	r3, [pc, #100]	; (810a598 <ai_array_to_buffer_fmt+0xcc>)
 810a532:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 810a536:	429a      	cmp	r2, r3
 810a538:	bf18      	it	ne
 810a53a:	2340      	movne	r3, #64	; 0x40
 810a53c:	4318      	orrs	r0, r3
 810a53e:	4770      	bx	lr
 810a540:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 810a544:	429a      	cmp	r2, r3
 810a546:	d0d6      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a548:	3307      	adds	r3, #7
 810a54a:	429a      	cmp	r2, r3
 810a54c:	d0d3      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a54e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 810a552:	429a      	cmp	r2, r3
 810a554:	bf18      	it	ne
 810a556:	2340      	movne	r3, #64	; 0x40
 810a558:	e7ce      	b.n	810a4f8 <ai_array_to_buffer_fmt+0x2c>
 810a55a:	4b10      	ldr	r3, [pc, #64]	; (810a59c <ai_array_to_buffer_fmt+0xd0>)
 810a55c:	429a      	cmp	r2, r3
 810a55e:	bf18      	it	ne
 810a560:	2340      	movne	r3, #64	; 0x40
 810a562:	e7c9      	b.n	810a4f8 <ai_array_to_buffer_fmt+0x2c>
 810a564:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 810a568:	429a      	cmp	r2, r3
 810a56a:	d0c4      	beq.n	810a4f6 <ai_array_to_buffer_fmt+0x2a>
 810a56c:	3380      	adds	r3, #128	; 0x80
 810a56e:	429a      	cmp	r2, r3
 810a570:	bf18      	it	ne
 810a572:	2340      	movne	r3, #64	; 0x40
 810a574:	e7c0      	b.n	810a4f8 <ai_array_to_buffer_fmt+0x2c>
 810a576:	4b0a      	ldr	r3, [pc, #40]	; (810a5a0 <ai_array_to_buffer_fmt+0xd4>)
 810a578:	4003      	ands	r3, r0
 810a57a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810a57e:	e7bb      	b.n	810a4f8 <ai_array_to_buffer_fmt+0x2c>
 810a580:	00840040 	.word	0x00840040
 810a584:	00040840 	.word	0x00040840
 810a588:	00041040 	.word	0x00041040
 810a58c:	00040447 	.word	0x00040447
 810a590:	00840840 	.word	0x00840840
 810a594:	00841040 	.word	0x00841040
 810a598:	0084084f 	.word	0x0084084f
 810a59c:	0004084f 	.word	0x0004084f
 810a5a0:	00803fff 	.word	0x00803fff

0810a5a4 <ai_array_get_byte_size>:
 810a5a4:	b319      	cbz	r1, 810a5ee <ai_array_get_byte_size+0x4a>
 810a5a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 810a5aa:	fb03 f101 	mul.w	r1, r3, r1
 810a5ae:	3107      	adds	r1, #7
 810a5b0:	f3c0 4243 	ubfx	r2, r0, #17, #4
 810a5b4:	f021 0307 	bic.w	r3, r1, #7
 810a5b8:	2a04      	cmp	r2, #4
 810a5ba:	f3c0 5141 	ubfx	r1, r0, #21, #2
 810a5be:	fa23 f101 	lsr.w	r1, r3, r1
 810a5c2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 810a5c6:	d00b      	beq.n	810a5e0 <ai_array_get_byte_size+0x3c>
 810a5c8:	2a08      	cmp	r2, #8
 810a5ca:	d002      	beq.n	810a5d2 <ai_array_get_byte_size+0x2e>
 810a5cc:	3107      	adds	r1, #7
 810a5ce:	08c8      	lsrs	r0, r1, #3
 810a5d0:	4770      	bx	lr
 810a5d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 810a5d6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 810a5da:	3107      	adds	r1, #7
 810a5dc:	08c8      	lsrs	r0, r1, #3
 810a5de:	4770      	bx	lr
 810a5e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 810a5e4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 810a5e8:	3107      	adds	r1, #7
 810a5ea:	08c8      	lsrs	r0, r1, #3
 810a5ec:	4770      	bx	lr
 810a5ee:	4608      	mov	r0, r1
 810a5f0:	4770      	bx	lr
 810a5f2:	bf00      	nop

0810a5f4 <ai_array_get_data_byte_size>:
 810a5f4:	b169      	cbz	r1, 810a612 <ai_array_get_data_byte_size+0x1e>
 810a5f6:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 810a5fa:	fb02 f101 	mul.w	r1, r2, r1
 810a5fe:	1dcb      	adds	r3, r1, #7
 810a600:	f023 0307 	bic.w	r3, r3, #7
 810a604:	f3c0 5041 	ubfx	r0, r0, #21, #2
 810a608:	fa23 f000 	lsr.w	r0, r3, r0
 810a60c:	3007      	adds	r0, #7
 810a60e:	08c0      	lsrs	r0, r0, #3
 810a610:	4770      	bx	lr
 810a612:	4608      	mov	r0, r1
 810a614:	4770      	bx	lr
 810a616:	bf00      	nop

0810a618 <ai_version_get>:
 810a618:	0212      	lsls	r2, r2, #8
 810a61a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810a61e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 810a622:	4770      	bx	lr

0810a624 <get_tensor_byte_size>:
 810a624:	b410      	push	{r4}
 810a626:	6983      	ldr	r3, [r0, #24]
 810a628:	68c4      	ldr	r4, [r0, #12]
 810a62a:	6941      	ldr	r1, [r0, #20]
 810a62c:	681b      	ldr	r3, [r3, #0]
 810a62e:	68e0      	ldr	r0, [r4, #12]
 810a630:	4a07      	ldr	r2, [pc, #28]	; (810a650 <get_tensor_byte_size+0x2c>)
 810a632:	68c9      	ldr	r1, [r1, #12]
 810a634:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a638:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 810a63c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 810a640:	fb01 f000 	mul.w	r0, r1, r0
 810a644:	4293      	cmp	r3, r2
 810a646:	bf04      	itt	eq
 810a648:	3007      	addeq	r0, #7
 810a64a:	08c0      	lsreq	r0, r0, #3
 810a64c:	4770      	bx	lr
 810a64e:	bf00      	nop
 810a650:	000400c0 	.word	0x000400c0

0810a654 <malloc>:
 810a654:	4b02      	ldr	r3, [pc, #8]	; (810a660 <malloc+0xc>)
 810a656:	4601      	mov	r1, r0
 810a658:	6818      	ldr	r0, [r3, #0]
 810a65a:	f000 b823 	b.w	810a6a4 <_malloc_r>
 810a65e:	bf00      	nop
 810a660:	100009ec 	.word	0x100009ec

0810a664 <sbrk_aligned>:
 810a664:	b570      	push	{r4, r5, r6, lr}
 810a666:	4e0e      	ldr	r6, [pc, #56]	; (810a6a0 <sbrk_aligned+0x3c>)
 810a668:	460c      	mov	r4, r1
 810a66a:	6831      	ldr	r1, [r6, #0]
 810a66c:	4605      	mov	r5, r0
 810a66e:	b911      	cbnz	r1, 810a676 <sbrk_aligned+0x12>
 810a670:	f001 f9b2 	bl	810b9d8 <_sbrk_r>
 810a674:	6030      	str	r0, [r6, #0]
 810a676:	4621      	mov	r1, r4
 810a678:	4628      	mov	r0, r5
 810a67a:	f001 f9ad 	bl	810b9d8 <_sbrk_r>
 810a67e:	1c43      	adds	r3, r0, #1
 810a680:	d00a      	beq.n	810a698 <sbrk_aligned+0x34>
 810a682:	1cc4      	adds	r4, r0, #3
 810a684:	f024 0403 	bic.w	r4, r4, #3
 810a688:	42a0      	cmp	r0, r4
 810a68a:	d007      	beq.n	810a69c <sbrk_aligned+0x38>
 810a68c:	1a21      	subs	r1, r4, r0
 810a68e:	4628      	mov	r0, r5
 810a690:	f001 f9a2 	bl	810b9d8 <_sbrk_r>
 810a694:	3001      	adds	r0, #1
 810a696:	d101      	bne.n	810a69c <sbrk_aligned+0x38>
 810a698:	f04f 34ff 	mov.w	r4, #4294967295
 810a69c:	4620      	mov	r0, r4
 810a69e:	bd70      	pop	{r4, r5, r6, pc}
 810a6a0:	1001ab34 	.word	0x1001ab34

0810a6a4 <_malloc_r>:
 810a6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a6a8:	1ccd      	adds	r5, r1, #3
 810a6aa:	f025 0503 	bic.w	r5, r5, #3
 810a6ae:	3508      	adds	r5, #8
 810a6b0:	2d0c      	cmp	r5, #12
 810a6b2:	bf38      	it	cc
 810a6b4:	250c      	movcc	r5, #12
 810a6b6:	2d00      	cmp	r5, #0
 810a6b8:	4607      	mov	r7, r0
 810a6ba:	db01      	blt.n	810a6c0 <_malloc_r+0x1c>
 810a6bc:	42a9      	cmp	r1, r5
 810a6be:	d905      	bls.n	810a6cc <_malloc_r+0x28>
 810a6c0:	230c      	movs	r3, #12
 810a6c2:	603b      	str	r3, [r7, #0]
 810a6c4:	2600      	movs	r6, #0
 810a6c6:	4630      	mov	r0, r6
 810a6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a6cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810a7a0 <_malloc_r+0xfc>
 810a6d0:	f000 f868 	bl	810a7a4 <__malloc_lock>
 810a6d4:	f8d8 3000 	ldr.w	r3, [r8]
 810a6d8:	461c      	mov	r4, r3
 810a6da:	bb5c      	cbnz	r4, 810a734 <_malloc_r+0x90>
 810a6dc:	4629      	mov	r1, r5
 810a6de:	4638      	mov	r0, r7
 810a6e0:	f7ff ffc0 	bl	810a664 <sbrk_aligned>
 810a6e4:	1c43      	adds	r3, r0, #1
 810a6e6:	4604      	mov	r4, r0
 810a6e8:	d155      	bne.n	810a796 <_malloc_r+0xf2>
 810a6ea:	f8d8 4000 	ldr.w	r4, [r8]
 810a6ee:	4626      	mov	r6, r4
 810a6f0:	2e00      	cmp	r6, #0
 810a6f2:	d145      	bne.n	810a780 <_malloc_r+0xdc>
 810a6f4:	2c00      	cmp	r4, #0
 810a6f6:	d048      	beq.n	810a78a <_malloc_r+0xe6>
 810a6f8:	6823      	ldr	r3, [r4, #0]
 810a6fa:	4631      	mov	r1, r6
 810a6fc:	4638      	mov	r0, r7
 810a6fe:	eb04 0903 	add.w	r9, r4, r3
 810a702:	f001 f969 	bl	810b9d8 <_sbrk_r>
 810a706:	4581      	cmp	r9, r0
 810a708:	d13f      	bne.n	810a78a <_malloc_r+0xe6>
 810a70a:	6821      	ldr	r1, [r4, #0]
 810a70c:	1a6d      	subs	r5, r5, r1
 810a70e:	4629      	mov	r1, r5
 810a710:	4638      	mov	r0, r7
 810a712:	f7ff ffa7 	bl	810a664 <sbrk_aligned>
 810a716:	3001      	adds	r0, #1
 810a718:	d037      	beq.n	810a78a <_malloc_r+0xe6>
 810a71a:	6823      	ldr	r3, [r4, #0]
 810a71c:	442b      	add	r3, r5
 810a71e:	6023      	str	r3, [r4, #0]
 810a720:	f8d8 3000 	ldr.w	r3, [r8]
 810a724:	2b00      	cmp	r3, #0
 810a726:	d038      	beq.n	810a79a <_malloc_r+0xf6>
 810a728:	685a      	ldr	r2, [r3, #4]
 810a72a:	42a2      	cmp	r2, r4
 810a72c:	d12b      	bne.n	810a786 <_malloc_r+0xe2>
 810a72e:	2200      	movs	r2, #0
 810a730:	605a      	str	r2, [r3, #4]
 810a732:	e00f      	b.n	810a754 <_malloc_r+0xb0>
 810a734:	6822      	ldr	r2, [r4, #0]
 810a736:	1b52      	subs	r2, r2, r5
 810a738:	d41f      	bmi.n	810a77a <_malloc_r+0xd6>
 810a73a:	2a0b      	cmp	r2, #11
 810a73c:	d917      	bls.n	810a76e <_malloc_r+0xca>
 810a73e:	1961      	adds	r1, r4, r5
 810a740:	42a3      	cmp	r3, r4
 810a742:	6025      	str	r5, [r4, #0]
 810a744:	bf18      	it	ne
 810a746:	6059      	strne	r1, [r3, #4]
 810a748:	6863      	ldr	r3, [r4, #4]
 810a74a:	bf08      	it	eq
 810a74c:	f8c8 1000 	streq.w	r1, [r8]
 810a750:	5162      	str	r2, [r4, r5]
 810a752:	604b      	str	r3, [r1, #4]
 810a754:	4638      	mov	r0, r7
 810a756:	f104 060b 	add.w	r6, r4, #11
 810a75a:	f000 f829 	bl	810a7b0 <__malloc_unlock>
 810a75e:	f026 0607 	bic.w	r6, r6, #7
 810a762:	1d23      	adds	r3, r4, #4
 810a764:	1af2      	subs	r2, r6, r3
 810a766:	d0ae      	beq.n	810a6c6 <_malloc_r+0x22>
 810a768:	1b9b      	subs	r3, r3, r6
 810a76a:	50a3      	str	r3, [r4, r2]
 810a76c:	e7ab      	b.n	810a6c6 <_malloc_r+0x22>
 810a76e:	42a3      	cmp	r3, r4
 810a770:	6862      	ldr	r2, [r4, #4]
 810a772:	d1dd      	bne.n	810a730 <_malloc_r+0x8c>
 810a774:	f8c8 2000 	str.w	r2, [r8]
 810a778:	e7ec      	b.n	810a754 <_malloc_r+0xb0>
 810a77a:	4623      	mov	r3, r4
 810a77c:	6864      	ldr	r4, [r4, #4]
 810a77e:	e7ac      	b.n	810a6da <_malloc_r+0x36>
 810a780:	4634      	mov	r4, r6
 810a782:	6876      	ldr	r6, [r6, #4]
 810a784:	e7b4      	b.n	810a6f0 <_malloc_r+0x4c>
 810a786:	4613      	mov	r3, r2
 810a788:	e7cc      	b.n	810a724 <_malloc_r+0x80>
 810a78a:	230c      	movs	r3, #12
 810a78c:	603b      	str	r3, [r7, #0]
 810a78e:	4638      	mov	r0, r7
 810a790:	f000 f80e 	bl	810a7b0 <__malloc_unlock>
 810a794:	e797      	b.n	810a6c6 <_malloc_r+0x22>
 810a796:	6025      	str	r5, [r4, #0]
 810a798:	e7dc      	b.n	810a754 <_malloc_r+0xb0>
 810a79a:	605b      	str	r3, [r3, #4]
 810a79c:	deff      	udf	#255	; 0xff
 810a79e:	bf00      	nop
 810a7a0:	1001ab30 	.word	0x1001ab30

0810a7a4 <__malloc_lock>:
 810a7a4:	4801      	ldr	r0, [pc, #4]	; (810a7ac <__malloc_lock+0x8>)
 810a7a6:	f001 b964 	b.w	810ba72 <__retarget_lock_acquire_recursive>
 810a7aa:	bf00      	nop
 810a7ac:	1001ac78 	.word	0x1001ac78

0810a7b0 <__malloc_unlock>:
 810a7b0:	4801      	ldr	r0, [pc, #4]	; (810a7b8 <__malloc_unlock+0x8>)
 810a7b2:	f001 b95f 	b.w	810ba74 <__retarget_lock_release_recursive>
 810a7b6:	bf00      	nop
 810a7b8:	1001ac78 	.word	0x1001ac78

0810a7bc <_realloc_r>:
 810a7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a7c0:	4680      	mov	r8, r0
 810a7c2:	4614      	mov	r4, r2
 810a7c4:	460e      	mov	r6, r1
 810a7c6:	b921      	cbnz	r1, 810a7d2 <_realloc_r+0x16>
 810a7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a7cc:	4611      	mov	r1, r2
 810a7ce:	f7ff bf69 	b.w	810a6a4 <_malloc_r>
 810a7d2:	b92a      	cbnz	r2, 810a7e0 <_realloc_r+0x24>
 810a7d4:	f001 ffde 	bl	810c794 <_free_r>
 810a7d8:	4625      	mov	r5, r4
 810a7da:	4628      	mov	r0, r5
 810a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a7e0:	f002 fcd1 	bl	810d186 <_malloc_usable_size_r>
 810a7e4:	4284      	cmp	r4, r0
 810a7e6:	4607      	mov	r7, r0
 810a7e8:	d802      	bhi.n	810a7f0 <_realloc_r+0x34>
 810a7ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810a7ee:	d812      	bhi.n	810a816 <_realloc_r+0x5a>
 810a7f0:	4621      	mov	r1, r4
 810a7f2:	4640      	mov	r0, r8
 810a7f4:	f7ff ff56 	bl	810a6a4 <_malloc_r>
 810a7f8:	4605      	mov	r5, r0
 810a7fa:	2800      	cmp	r0, #0
 810a7fc:	d0ed      	beq.n	810a7da <_realloc_r+0x1e>
 810a7fe:	42bc      	cmp	r4, r7
 810a800:	4622      	mov	r2, r4
 810a802:	4631      	mov	r1, r6
 810a804:	bf28      	it	cs
 810a806:	463a      	movcs	r2, r7
 810a808:	f001 f935 	bl	810ba76 <memcpy>
 810a80c:	4631      	mov	r1, r6
 810a80e:	4640      	mov	r0, r8
 810a810:	f001 ffc0 	bl	810c794 <_free_r>
 810a814:	e7e1      	b.n	810a7da <_realloc_r+0x1e>
 810a816:	4635      	mov	r5, r6
 810a818:	e7df      	b.n	810a7da <_realloc_r+0x1e>

0810a81a <__cvt>:
 810a81a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a81e:	ec55 4b10 	vmov	r4, r5, d0
 810a822:	2d00      	cmp	r5, #0
 810a824:	460e      	mov	r6, r1
 810a826:	4619      	mov	r1, r3
 810a828:	462b      	mov	r3, r5
 810a82a:	bfbb      	ittet	lt
 810a82c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810a830:	461d      	movlt	r5, r3
 810a832:	2300      	movge	r3, #0
 810a834:	232d      	movlt	r3, #45	; 0x2d
 810a836:	700b      	strb	r3, [r1, #0]
 810a838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a83a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810a83e:	4691      	mov	r9, r2
 810a840:	f023 0820 	bic.w	r8, r3, #32
 810a844:	bfbc      	itt	lt
 810a846:	4622      	movlt	r2, r4
 810a848:	4614      	movlt	r4, r2
 810a84a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a84e:	d005      	beq.n	810a85c <__cvt+0x42>
 810a850:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810a854:	d100      	bne.n	810a858 <__cvt+0x3e>
 810a856:	3601      	adds	r6, #1
 810a858:	2102      	movs	r1, #2
 810a85a:	e000      	b.n	810a85e <__cvt+0x44>
 810a85c:	2103      	movs	r1, #3
 810a85e:	ab03      	add	r3, sp, #12
 810a860:	9301      	str	r3, [sp, #4]
 810a862:	ab02      	add	r3, sp, #8
 810a864:	9300      	str	r3, [sp, #0]
 810a866:	ec45 4b10 	vmov	d0, r4, r5
 810a86a:	4653      	mov	r3, sl
 810a86c:	4632      	mov	r2, r6
 810a86e:	f001 f99f 	bl	810bbb0 <_dtoa_r>
 810a872:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810a876:	4607      	mov	r7, r0
 810a878:	d102      	bne.n	810a880 <__cvt+0x66>
 810a87a:	f019 0f01 	tst.w	r9, #1
 810a87e:	d022      	beq.n	810a8c6 <__cvt+0xac>
 810a880:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a884:	eb07 0906 	add.w	r9, r7, r6
 810a888:	d110      	bne.n	810a8ac <__cvt+0x92>
 810a88a:	783b      	ldrb	r3, [r7, #0]
 810a88c:	2b30      	cmp	r3, #48	; 0x30
 810a88e:	d10a      	bne.n	810a8a6 <__cvt+0x8c>
 810a890:	2200      	movs	r2, #0
 810a892:	2300      	movs	r3, #0
 810a894:	4620      	mov	r0, r4
 810a896:	4629      	mov	r1, r5
 810a898:	f7f6 f99e 	bl	8100bd8 <__aeabi_dcmpeq>
 810a89c:	b918      	cbnz	r0, 810a8a6 <__cvt+0x8c>
 810a89e:	f1c6 0601 	rsb	r6, r6, #1
 810a8a2:	f8ca 6000 	str.w	r6, [sl]
 810a8a6:	f8da 3000 	ldr.w	r3, [sl]
 810a8aa:	4499      	add	r9, r3
 810a8ac:	2200      	movs	r2, #0
 810a8ae:	2300      	movs	r3, #0
 810a8b0:	4620      	mov	r0, r4
 810a8b2:	4629      	mov	r1, r5
 810a8b4:	f7f6 f990 	bl	8100bd8 <__aeabi_dcmpeq>
 810a8b8:	b108      	cbz	r0, 810a8be <__cvt+0xa4>
 810a8ba:	f8cd 900c 	str.w	r9, [sp, #12]
 810a8be:	2230      	movs	r2, #48	; 0x30
 810a8c0:	9b03      	ldr	r3, [sp, #12]
 810a8c2:	454b      	cmp	r3, r9
 810a8c4:	d307      	bcc.n	810a8d6 <__cvt+0xbc>
 810a8c6:	9b03      	ldr	r3, [sp, #12]
 810a8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a8ca:	1bdb      	subs	r3, r3, r7
 810a8cc:	4638      	mov	r0, r7
 810a8ce:	6013      	str	r3, [r2, #0]
 810a8d0:	b004      	add	sp, #16
 810a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a8d6:	1c59      	adds	r1, r3, #1
 810a8d8:	9103      	str	r1, [sp, #12]
 810a8da:	701a      	strb	r2, [r3, #0]
 810a8dc:	e7f0      	b.n	810a8c0 <__cvt+0xa6>

0810a8de <__exponent>:
 810a8de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810a8e0:	4603      	mov	r3, r0
 810a8e2:	2900      	cmp	r1, #0
 810a8e4:	bfb8      	it	lt
 810a8e6:	4249      	neglt	r1, r1
 810a8e8:	f803 2b02 	strb.w	r2, [r3], #2
 810a8ec:	bfb4      	ite	lt
 810a8ee:	222d      	movlt	r2, #45	; 0x2d
 810a8f0:	222b      	movge	r2, #43	; 0x2b
 810a8f2:	2909      	cmp	r1, #9
 810a8f4:	7042      	strb	r2, [r0, #1]
 810a8f6:	dd2a      	ble.n	810a94e <__exponent+0x70>
 810a8f8:	f10d 0207 	add.w	r2, sp, #7
 810a8fc:	4617      	mov	r7, r2
 810a8fe:	260a      	movs	r6, #10
 810a900:	4694      	mov	ip, r2
 810a902:	fb91 f5f6 	sdiv	r5, r1, r6
 810a906:	fb06 1415 	mls	r4, r6, r5, r1
 810a90a:	3430      	adds	r4, #48	; 0x30
 810a90c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 810a910:	460c      	mov	r4, r1
 810a912:	2c63      	cmp	r4, #99	; 0x63
 810a914:	f102 32ff 	add.w	r2, r2, #4294967295
 810a918:	4629      	mov	r1, r5
 810a91a:	dcf1      	bgt.n	810a900 <__exponent+0x22>
 810a91c:	3130      	adds	r1, #48	; 0x30
 810a91e:	f1ac 0402 	sub.w	r4, ip, #2
 810a922:	f802 1c01 	strb.w	r1, [r2, #-1]
 810a926:	1c41      	adds	r1, r0, #1
 810a928:	4622      	mov	r2, r4
 810a92a:	42ba      	cmp	r2, r7
 810a92c:	d30a      	bcc.n	810a944 <__exponent+0x66>
 810a92e:	f10d 0209 	add.w	r2, sp, #9
 810a932:	eba2 020c 	sub.w	r2, r2, ip
 810a936:	42bc      	cmp	r4, r7
 810a938:	bf88      	it	hi
 810a93a:	2200      	movhi	r2, #0
 810a93c:	4413      	add	r3, r2
 810a93e:	1a18      	subs	r0, r3, r0
 810a940:	b003      	add	sp, #12
 810a942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a944:	f812 5b01 	ldrb.w	r5, [r2], #1
 810a948:	f801 5f01 	strb.w	r5, [r1, #1]!
 810a94c:	e7ed      	b.n	810a92a <__exponent+0x4c>
 810a94e:	2330      	movs	r3, #48	; 0x30
 810a950:	3130      	adds	r1, #48	; 0x30
 810a952:	7083      	strb	r3, [r0, #2]
 810a954:	70c1      	strb	r1, [r0, #3]
 810a956:	1d03      	adds	r3, r0, #4
 810a958:	e7f1      	b.n	810a93e <__exponent+0x60>
	...

0810a95c <_printf_float>:
 810a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a960:	ed2d 8b02 	vpush	{d8}
 810a964:	b08d      	sub	sp, #52	; 0x34
 810a966:	460c      	mov	r4, r1
 810a968:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810a96c:	4616      	mov	r6, r2
 810a96e:	461f      	mov	r7, r3
 810a970:	4605      	mov	r5, r0
 810a972:	f000 fff9 	bl	810b968 <_localeconv_r>
 810a976:	f8d0 a000 	ldr.w	sl, [r0]
 810a97a:	4650      	mov	r0, sl
 810a97c:	f7f5 fd00 	bl	8100380 <strlen>
 810a980:	2300      	movs	r3, #0
 810a982:	930a      	str	r3, [sp, #40]	; 0x28
 810a984:	6823      	ldr	r3, [r4, #0]
 810a986:	9305      	str	r3, [sp, #20]
 810a988:	f8d8 3000 	ldr.w	r3, [r8]
 810a98c:	f894 b018 	ldrb.w	fp, [r4, #24]
 810a990:	3307      	adds	r3, #7
 810a992:	f023 0307 	bic.w	r3, r3, #7
 810a996:	f103 0208 	add.w	r2, r3, #8
 810a99a:	f8c8 2000 	str.w	r2, [r8]
 810a99e:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a9a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a9a6:	9307      	str	r3, [sp, #28]
 810a9a8:	f8cd 8018 	str.w	r8, [sp, #24]
 810a9ac:	ee08 0a10 	vmov	s16, r0
 810a9b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 810a9b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a9b8:	4b9e      	ldr	r3, [pc, #632]	; (810ac34 <_printf_float+0x2d8>)
 810a9ba:	f04f 32ff 	mov.w	r2, #4294967295
 810a9be:	f7f6 f93d 	bl	8100c3c <__aeabi_dcmpun>
 810a9c2:	bb88      	cbnz	r0, 810aa28 <_printf_float+0xcc>
 810a9c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a9c8:	4b9a      	ldr	r3, [pc, #616]	; (810ac34 <_printf_float+0x2d8>)
 810a9ca:	f04f 32ff 	mov.w	r2, #4294967295
 810a9ce:	f7f6 f917 	bl	8100c00 <__aeabi_dcmple>
 810a9d2:	bb48      	cbnz	r0, 810aa28 <_printf_float+0xcc>
 810a9d4:	2200      	movs	r2, #0
 810a9d6:	2300      	movs	r3, #0
 810a9d8:	4640      	mov	r0, r8
 810a9da:	4649      	mov	r1, r9
 810a9dc:	f7f6 f906 	bl	8100bec <__aeabi_dcmplt>
 810a9e0:	b110      	cbz	r0, 810a9e8 <_printf_float+0x8c>
 810a9e2:	232d      	movs	r3, #45	; 0x2d
 810a9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a9e8:	4a93      	ldr	r2, [pc, #588]	; (810ac38 <_printf_float+0x2dc>)
 810a9ea:	4b94      	ldr	r3, [pc, #592]	; (810ac3c <_printf_float+0x2e0>)
 810a9ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810a9f0:	bf94      	ite	ls
 810a9f2:	4690      	movls	r8, r2
 810a9f4:	4698      	movhi	r8, r3
 810a9f6:	2303      	movs	r3, #3
 810a9f8:	6123      	str	r3, [r4, #16]
 810a9fa:	9b05      	ldr	r3, [sp, #20]
 810a9fc:	f023 0304 	bic.w	r3, r3, #4
 810aa00:	6023      	str	r3, [r4, #0]
 810aa02:	f04f 0900 	mov.w	r9, #0
 810aa06:	9700      	str	r7, [sp, #0]
 810aa08:	4633      	mov	r3, r6
 810aa0a:	aa0b      	add	r2, sp, #44	; 0x2c
 810aa0c:	4621      	mov	r1, r4
 810aa0e:	4628      	mov	r0, r5
 810aa10:	f000 f9da 	bl	810adc8 <_printf_common>
 810aa14:	3001      	adds	r0, #1
 810aa16:	f040 8090 	bne.w	810ab3a <_printf_float+0x1de>
 810aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 810aa1e:	b00d      	add	sp, #52	; 0x34
 810aa20:	ecbd 8b02 	vpop	{d8}
 810aa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aa28:	4642      	mov	r2, r8
 810aa2a:	464b      	mov	r3, r9
 810aa2c:	4640      	mov	r0, r8
 810aa2e:	4649      	mov	r1, r9
 810aa30:	f7f6 f904 	bl	8100c3c <__aeabi_dcmpun>
 810aa34:	b140      	cbz	r0, 810aa48 <_printf_float+0xec>
 810aa36:	464b      	mov	r3, r9
 810aa38:	2b00      	cmp	r3, #0
 810aa3a:	bfbc      	itt	lt
 810aa3c:	232d      	movlt	r3, #45	; 0x2d
 810aa3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810aa42:	4a7f      	ldr	r2, [pc, #508]	; (810ac40 <_printf_float+0x2e4>)
 810aa44:	4b7f      	ldr	r3, [pc, #508]	; (810ac44 <_printf_float+0x2e8>)
 810aa46:	e7d1      	b.n	810a9ec <_printf_float+0x90>
 810aa48:	6863      	ldr	r3, [r4, #4]
 810aa4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810aa4e:	9206      	str	r2, [sp, #24]
 810aa50:	1c5a      	adds	r2, r3, #1
 810aa52:	d13f      	bne.n	810aad4 <_printf_float+0x178>
 810aa54:	2306      	movs	r3, #6
 810aa56:	6063      	str	r3, [r4, #4]
 810aa58:	9b05      	ldr	r3, [sp, #20]
 810aa5a:	6861      	ldr	r1, [r4, #4]
 810aa5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810aa60:	2300      	movs	r3, #0
 810aa62:	9303      	str	r3, [sp, #12]
 810aa64:	ab0a      	add	r3, sp, #40	; 0x28
 810aa66:	e9cd b301 	strd	fp, r3, [sp, #4]
 810aa6a:	ab09      	add	r3, sp, #36	; 0x24
 810aa6c:	ec49 8b10 	vmov	d0, r8, r9
 810aa70:	9300      	str	r3, [sp, #0]
 810aa72:	6022      	str	r2, [r4, #0]
 810aa74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810aa78:	4628      	mov	r0, r5
 810aa7a:	f7ff fece 	bl	810a81a <__cvt>
 810aa7e:	9b06      	ldr	r3, [sp, #24]
 810aa80:	9909      	ldr	r1, [sp, #36]	; 0x24
 810aa82:	2b47      	cmp	r3, #71	; 0x47
 810aa84:	4680      	mov	r8, r0
 810aa86:	d108      	bne.n	810aa9a <_printf_float+0x13e>
 810aa88:	1cc8      	adds	r0, r1, #3
 810aa8a:	db02      	blt.n	810aa92 <_printf_float+0x136>
 810aa8c:	6863      	ldr	r3, [r4, #4]
 810aa8e:	4299      	cmp	r1, r3
 810aa90:	dd41      	ble.n	810ab16 <_printf_float+0x1ba>
 810aa92:	f1ab 0302 	sub.w	r3, fp, #2
 810aa96:	fa5f fb83 	uxtb.w	fp, r3
 810aa9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810aa9e:	d820      	bhi.n	810aae2 <_printf_float+0x186>
 810aaa0:	3901      	subs	r1, #1
 810aaa2:	465a      	mov	r2, fp
 810aaa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810aaa8:	9109      	str	r1, [sp, #36]	; 0x24
 810aaaa:	f7ff ff18 	bl	810a8de <__exponent>
 810aaae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810aab0:	1813      	adds	r3, r2, r0
 810aab2:	2a01      	cmp	r2, #1
 810aab4:	4681      	mov	r9, r0
 810aab6:	6123      	str	r3, [r4, #16]
 810aab8:	dc02      	bgt.n	810aac0 <_printf_float+0x164>
 810aaba:	6822      	ldr	r2, [r4, #0]
 810aabc:	07d2      	lsls	r2, r2, #31
 810aabe:	d501      	bpl.n	810aac4 <_printf_float+0x168>
 810aac0:	3301      	adds	r3, #1
 810aac2:	6123      	str	r3, [r4, #16]
 810aac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810aac8:	2b00      	cmp	r3, #0
 810aaca:	d09c      	beq.n	810aa06 <_printf_float+0xaa>
 810aacc:	232d      	movs	r3, #45	; 0x2d
 810aace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810aad2:	e798      	b.n	810aa06 <_printf_float+0xaa>
 810aad4:	9a06      	ldr	r2, [sp, #24]
 810aad6:	2a47      	cmp	r2, #71	; 0x47
 810aad8:	d1be      	bne.n	810aa58 <_printf_float+0xfc>
 810aada:	2b00      	cmp	r3, #0
 810aadc:	d1bc      	bne.n	810aa58 <_printf_float+0xfc>
 810aade:	2301      	movs	r3, #1
 810aae0:	e7b9      	b.n	810aa56 <_printf_float+0xfa>
 810aae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810aae6:	d118      	bne.n	810ab1a <_printf_float+0x1be>
 810aae8:	2900      	cmp	r1, #0
 810aaea:	6863      	ldr	r3, [r4, #4]
 810aaec:	dd0b      	ble.n	810ab06 <_printf_float+0x1aa>
 810aaee:	6121      	str	r1, [r4, #16]
 810aaf0:	b913      	cbnz	r3, 810aaf8 <_printf_float+0x19c>
 810aaf2:	6822      	ldr	r2, [r4, #0]
 810aaf4:	07d0      	lsls	r0, r2, #31
 810aaf6:	d502      	bpl.n	810aafe <_printf_float+0x1a2>
 810aaf8:	3301      	adds	r3, #1
 810aafa:	440b      	add	r3, r1
 810aafc:	6123      	str	r3, [r4, #16]
 810aafe:	65a1      	str	r1, [r4, #88]	; 0x58
 810ab00:	f04f 0900 	mov.w	r9, #0
 810ab04:	e7de      	b.n	810aac4 <_printf_float+0x168>
 810ab06:	b913      	cbnz	r3, 810ab0e <_printf_float+0x1b2>
 810ab08:	6822      	ldr	r2, [r4, #0]
 810ab0a:	07d2      	lsls	r2, r2, #31
 810ab0c:	d501      	bpl.n	810ab12 <_printf_float+0x1b6>
 810ab0e:	3302      	adds	r3, #2
 810ab10:	e7f4      	b.n	810aafc <_printf_float+0x1a0>
 810ab12:	2301      	movs	r3, #1
 810ab14:	e7f2      	b.n	810aafc <_printf_float+0x1a0>
 810ab16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810ab1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ab1c:	4299      	cmp	r1, r3
 810ab1e:	db05      	blt.n	810ab2c <_printf_float+0x1d0>
 810ab20:	6823      	ldr	r3, [r4, #0]
 810ab22:	6121      	str	r1, [r4, #16]
 810ab24:	07d8      	lsls	r0, r3, #31
 810ab26:	d5ea      	bpl.n	810aafe <_printf_float+0x1a2>
 810ab28:	1c4b      	adds	r3, r1, #1
 810ab2a:	e7e7      	b.n	810aafc <_printf_float+0x1a0>
 810ab2c:	2900      	cmp	r1, #0
 810ab2e:	bfd4      	ite	le
 810ab30:	f1c1 0202 	rsble	r2, r1, #2
 810ab34:	2201      	movgt	r2, #1
 810ab36:	4413      	add	r3, r2
 810ab38:	e7e0      	b.n	810aafc <_printf_float+0x1a0>
 810ab3a:	6823      	ldr	r3, [r4, #0]
 810ab3c:	055a      	lsls	r2, r3, #21
 810ab3e:	d407      	bmi.n	810ab50 <_printf_float+0x1f4>
 810ab40:	6923      	ldr	r3, [r4, #16]
 810ab42:	4642      	mov	r2, r8
 810ab44:	4631      	mov	r1, r6
 810ab46:	4628      	mov	r0, r5
 810ab48:	47b8      	blx	r7
 810ab4a:	3001      	adds	r0, #1
 810ab4c:	d12c      	bne.n	810aba8 <_printf_float+0x24c>
 810ab4e:	e764      	b.n	810aa1a <_printf_float+0xbe>
 810ab50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810ab54:	f240 80e0 	bls.w	810ad18 <_printf_float+0x3bc>
 810ab58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ab5c:	2200      	movs	r2, #0
 810ab5e:	2300      	movs	r3, #0
 810ab60:	f7f6 f83a 	bl	8100bd8 <__aeabi_dcmpeq>
 810ab64:	2800      	cmp	r0, #0
 810ab66:	d034      	beq.n	810abd2 <_printf_float+0x276>
 810ab68:	4a37      	ldr	r2, [pc, #220]	; (810ac48 <_printf_float+0x2ec>)
 810ab6a:	2301      	movs	r3, #1
 810ab6c:	4631      	mov	r1, r6
 810ab6e:	4628      	mov	r0, r5
 810ab70:	47b8      	blx	r7
 810ab72:	3001      	adds	r0, #1
 810ab74:	f43f af51 	beq.w	810aa1a <_printf_float+0xbe>
 810ab78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ab7c:	429a      	cmp	r2, r3
 810ab7e:	db02      	blt.n	810ab86 <_printf_float+0x22a>
 810ab80:	6823      	ldr	r3, [r4, #0]
 810ab82:	07d8      	lsls	r0, r3, #31
 810ab84:	d510      	bpl.n	810aba8 <_printf_float+0x24c>
 810ab86:	ee18 3a10 	vmov	r3, s16
 810ab8a:	4652      	mov	r2, sl
 810ab8c:	4631      	mov	r1, r6
 810ab8e:	4628      	mov	r0, r5
 810ab90:	47b8      	blx	r7
 810ab92:	3001      	adds	r0, #1
 810ab94:	f43f af41 	beq.w	810aa1a <_printf_float+0xbe>
 810ab98:	f04f 0800 	mov.w	r8, #0
 810ab9c:	f104 091a 	add.w	r9, r4, #26
 810aba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810aba2:	3b01      	subs	r3, #1
 810aba4:	4543      	cmp	r3, r8
 810aba6:	dc09      	bgt.n	810abbc <_printf_float+0x260>
 810aba8:	6823      	ldr	r3, [r4, #0]
 810abaa:	079b      	lsls	r3, r3, #30
 810abac:	f100 8107 	bmi.w	810adbe <_printf_float+0x462>
 810abb0:	68e0      	ldr	r0, [r4, #12]
 810abb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810abb4:	4298      	cmp	r0, r3
 810abb6:	bfb8      	it	lt
 810abb8:	4618      	movlt	r0, r3
 810abba:	e730      	b.n	810aa1e <_printf_float+0xc2>
 810abbc:	2301      	movs	r3, #1
 810abbe:	464a      	mov	r2, r9
 810abc0:	4631      	mov	r1, r6
 810abc2:	4628      	mov	r0, r5
 810abc4:	47b8      	blx	r7
 810abc6:	3001      	adds	r0, #1
 810abc8:	f43f af27 	beq.w	810aa1a <_printf_float+0xbe>
 810abcc:	f108 0801 	add.w	r8, r8, #1
 810abd0:	e7e6      	b.n	810aba0 <_printf_float+0x244>
 810abd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810abd4:	2b00      	cmp	r3, #0
 810abd6:	dc39      	bgt.n	810ac4c <_printf_float+0x2f0>
 810abd8:	4a1b      	ldr	r2, [pc, #108]	; (810ac48 <_printf_float+0x2ec>)
 810abda:	2301      	movs	r3, #1
 810abdc:	4631      	mov	r1, r6
 810abde:	4628      	mov	r0, r5
 810abe0:	47b8      	blx	r7
 810abe2:	3001      	adds	r0, #1
 810abe4:	f43f af19 	beq.w	810aa1a <_printf_float+0xbe>
 810abe8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810abec:	4313      	orrs	r3, r2
 810abee:	d102      	bne.n	810abf6 <_printf_float+0x29a>
 810abf0:	6823      	ldr	r3, [r4, #0]
 810abf2:	07d9      	lsls	r1, r3, #31
 810abf4:	d5d8      	bpl.n	810aba8 <_printf_float+0x24c>
 810abf6:	ee18 3a10 	vmov	r3, s16
 810abfa:	4652      	mov	r2, sl
 810abfc:	4631      	mov	r1, r6
 810abfe:	4628      	mov	r0, r5
 810ac00:	47b8      	blx	r7
 810ac02:	3001      	adds	r0, #1
 810ac04:	f43f af09 	beq.w	810aa1a <_printf_float+0xbe>
 810ac08:	f04f 0900 	mov.w	r9, #0
 810ac0c:	f104 0a1a 	add.w	sl, r4, #26
 810ac10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ac12:	425b      	negs	r3, r3
 810ac14:	454b      	cmp	r3, r9
 810ac16:	dc01      	bgt.n	810ac1c <_printf_float+0x2c0>
 810ac18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ac1a:	e792      	b.n	810ab42 <_printf_float+0x1e6>
 810ac1c:	2301      	movs	r3, #1
 810ac1e:	4652      	mov	r2, sl
 810ac20:	4631      	mov	r1, r6
 810ac22:	4628      	mov	r0, r5
 810ac24:	47b8      	blx	r7
 810ac26:	3001      	adds	r0, #1
 810ac28:	f43f aef7 	beq.w	810aa1a <_printf_float+0xbe>
 810ac2c:	f109 0901 	add.w	r9, r9, #1
 810ac30:	e7ee      	b.n	810ac10 <_printf_float+0x2b4>
 810ac32:	bf00      	nop
 810ac34:	7fefffff 	.word	0x7fefffff
 810ac38:	081ec2c0 	.word	0x081ec2c0
 810ac3c:	081ec2c4 	.word	0x081ec2c4
 810ac40:	081ec2c8 	.word	0x081ec2c8
 810ac44:	081ec2cc 	.word	0x081ec2cc
 810ac48:	081ec2d0 	.word	0x081ec2d0
 810ac4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ac4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810ac50:	429a      	cmp	r2, r3
 810ac52:	bfa8      	it	ge
 810ac54:	461a      	movge	r2, r3
 810ac56:	2a00      	cmp	r2, #0
 810ac58:	4691      	mov	r9, r2
 810ac5a:	dc37      	bgt.n	810accc <_printf_float+0x370>
 810ac5c:	f04f 0b00 	mov.w	fp, #0
 810ac60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810ac64:	f104 021a 	add.w	r2, r4, #26
 810ac68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810ac6a:	9305      	str	r3, [sp, #20]
 810ac6c:	eba3 0309 	sub.w	r3, r3, r9
 810ac70:	455b      	cmp	r3, fp
 810ac72:	dc33      	bgt.n	810acdc <_printf_float+0x380>
 810ac74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810ac78:	429a      	cmp	r2, r3
 810ac7a:	db3b      	blt.n	810acf4 <_printf_float+0x398>
 810ac7c:	6823      	ldr	r3, [r4, #0]
 810ac7e:	07da      	lsls	r2, r3, #31
 810ac80:	d438      	bmi.n	810acf4 <_printf_float+0x398>
 810ac82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810ac86:	eba2 0903 	sub.w	r9, r2, r3
 810ac8a:	9b05      	ldr	r3, [sp, #20]
 810ac8c:	1ad2      	subs	r2, r2, r3
 810ac8e:	4591      	cmp	r9, r2
 810ac90:	bfa8      	it	ge
 810ac92:	4691      	movge	r9, r2
 810ac94:	f1b9 0f00 	cmp.w	r9, #0
 810ac98:	dc35      	bgt.n	810ad06 <_printf_float+0x3aa>
 810ac9a:	f04f 0800 	mov.w	r8, #0
 810ac9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810aca2:	f104 0a1a 	add.w	sl, r4, #26
 810aca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810acaa:	1a9b      	subs	r3, r3, r2
 810acac:	eba3 0309 	sub.w	r3, r3, r9
 810acb0:	4543      	cmp	r3, r8
 810acb2:	f77f af79 	ble.w	810aba8 <_printf_float+0x24c>
 810acb6:	2301      	movs	r3, #1
 810acb8:	4652      	mov	r2, sl
 810acba:	4631      	mov	r1, r6
 810acbc:	4628      	mov	r0, r5
 810acbe:	47b8      	blx	r7
 810acc0:	3001      	adds	r0, #1
 810acc2:	f43f aeaa 	beq.w	810aa1a <_printf_float+0xbe>
 810acc6:	f108 0801 	add.w	r8, r8, #1
 810acca:	e7ec      	b.n	810aca6 <_printf_float+0x34a>
 810accc:	4613      	mov	r3, r2
 810acce:	4631      	mov	r1, r6
 810acd0:	4642      	mov	r2, r8
 810acd2:	4628      	mov	r0, r5
 810acd4:	47b8      	blx	r7
 810acd6:	3001      	adds	r0, #1
 810acd8:	d1c0      	bne.n	810ac5c <_printf_float+0x300>
 810acda:	e69e      	b.n	810aa1a <_printf_float+0xbe>
 810acdc:	2301      	movs	r3, #1
 810acde:	4631      	mov	r1, r6
 810ace0:	4628      	mov	r0, r5
 810ace2:	9205      	str	r2, [sp, #20]
 810ace4:	47b8      	blx	r7
 810ace6:	3001      	adds	r0, #1
 810ace8:	f43f ae97 	beq.w	810aa1a <_printf_float+0xbe>
 810acec:	9a05      	ldr	r2, [sp, #20]
 810acee:	f10b 0b01 	add.w	fp, fp, #1
 810acf2:	e7b9      	b.n	810ac68 <_printf_float+0x30c>
 810acf4:	ee18 3a10 	vmov	r3, s16
 810acf8:	4652      	mov	r2, sl
 810acfa:	4631      	mov	r1, r6
 810acfc:	4628      	mov	r0, r5
 810acfe:	47b8      	blx	r7
 810ad00:	3001      	adds	r0, #1
 810ad02:	d1be      	bne.n	810ac82 <_printf_float+0x326>
 810ad04:	e689      	b.n	810aa1a <_printf_float+0xbe>
 810ad06:	9a05      	ldr	r2, [sp, #20]
 810ad08:	464b      	mov	r3, r9
 810ad0a:	4442      	add	r2, r8
 810ad0c:	4631      	mov	r1, r6
 810ad0e:	4628      	mov	r0, r5
 810ad10:	47b8      	blx	r7
 810ad12:	3001      	adds	r0, #1
 810ad14:	d1c1      	bne.n	810ac9a <_printf_float+0x33e>
 810ad16:	e680      	b.n	810aa1a <_printf_float+0xbe>
 810ad18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810ad1a:	2a01      	cmp	r2, #1
 810ad1c:	dc01      	bgt.n	810ad22 <_printf_float+0x3c6>
 810ad1e:	07db      	lsls	r3, r3, #31
 810ad20:	d53a      	bpl.n	810ad98 <_printf_float+0x43c>
 810ad22:	2301      	movs	r3, #1
 810ad24:	4642      	mov	r2, r8
 810ad26:	4631      	mov	r1, r6
 810ad28:	4628      	mov	r0, r5
 810ad2a:	47b8      	blx	r7
 810ad2c:	3001      	adds	r0, #1
 810ad2e:	f43f ae74 	beq.w	810aa1a <_printf_float+0xbe>
 810ad32:	ee18 3a10 	vmov	r3, s16
 810ad36:	4652      	mov	r2, sl
 810ad38:	4631      	mov	r1, r6
 810ad3a:	4628      	mov	r0, r5
 810ad3c:	47b8      	blx	r7
 810ad3e:	3001      	adds	r0, #1
 810ad40:	f43f ae6b 	beq.w	810aa1a <_printf_float+0xbe>
 810ad44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810ad48:	2200      	movs	r2, #0
 810ad4a:	2300      	movs	r3, #0
 810ad4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 810ad50:	f7f5 ff42 	bl	8100bd8 <__aeabi_dcmpeq>
 810ad54:	b9d8      	cbnz	r0, 810ad8e <_printf_float+0x432>
 810ad56:	f10a 33ff 	add.w	r3, sl, #4294967295
 810ad5a:	f108 0201 	add.w	r2, r8, #1
 810ad5e:	4631      	mov	r1, r6
 810ad60:	4628      	mov	r0, r5
 810ad62:	47b8      	blx	r7
 810ad64:	3001      	adds	r0, #1
 810ad66:	d10e      	bne.n	810ad86 <_printf_float+0x42a>
 810ad68:	e657      	b.n	810aa1a <_printf_float+0xbe>
 810ad6a:	2301      	movs	r3, #1
 810ad6c:	4652      	mov	r2, sl
 810ad6e:	4631      	mov	r1, r6
 810ad70:	4628      	mov	r0, r5
 810ad72:	47b8      	blx	r7
 810ad74:	3001      	adds	r0, #1
 810ad76:	f43f ae50 	beq.w	810aa1a <_printf_float+0xbe>
 810ad7a:	f108 0801 	add.w	r8, r8, #1
 810ad7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810ad80:	3b01      	subs	r3, #1
 810ad82:	4543      	cmp	r3, r8
 810ad84:	dcf1      	bgt.n	810ad6a <_printf_float+0x40e>
 810ad86:	464b      	mov	r3, r9
 810ad88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810ad8c:	e6da      	b.n	810ab44 <_printf_float+0x1e8>
 810ad8e:	f04f 0800 	mov.w	r8, #0
 810ad92:	f104 0a1a 	add.w	sl, r4, #26
 810ad96:	e7f2      	b.n	810ad7e <_printf_float+0x422>
 810ad98:	2301      	movs	r3, #1
 810ad9a:	4642      	mov	r2, r8
 810ad9c:	e7df      	b.n	810ad5e <_printf_float+0x402>
 810ad9e:	2301      	movs	r3, #1
 810ada0:	464a      	mov	r2, r9
 810ada2:	4631      	mov	r1, r6
 810ada4:	4628      	mov	r0, r5
 810ada6:	47b8      	blx	r7
 810ada8:	3001      	adds	r0, #1
 810adaa:	f43f ae36 	beq.w	810aa1a <_printf_float+0xbe>
 810adae:	f108 0801 	add.w	r8, r8, #1
 810adb2:	68e3      	ldr	r3, [r4, #12]
 810adb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810adb6:	1a5b      	subs	r3, r3, r1
 810adb8:	4543      	cmp	r3, r8
 810adba:	dcf0      	bgt.n	810ad9e <_printf_float+0x442>
 810adbc:	e6f8      	b.n	810abb0 <_printf_float+0x254>
 810adbe:	f04f 0800 	mov.w	r8, #0
 810adc2:	f104 0919 	add.w	r9, r4, #25
 810adc6:	e7f4      	b.n	810adb2 <_printf_float+0x456>

0810adc8 <_printf_common>:
 810adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810adcc:	4616      	mov	r6, r2
 810adce:	4699      	mov	r9, r3
 810add0:	688a      	ldr	r2, [r1, #8]
 810add2:	690b      	ldr	r3, [r1, #16]
 810add4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810add8:	4293      	cmp	r3, r2
 810adda:	bfb8      	it	lt
 810addc:	4613      	movlt	r3, r2
 810adde:	6033      	str	r3, [r6, #0]
 810ade0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810ade4:	4607      	mov	r7, r0
 810ade6:	460c      	mov	r4, r1
 810ade8:	b10a      	cbz	r2, 810adee <_printf_common+0x26>
 810adea:	3301      	adds	r3, #1
 810adec:	6033      	str	r3, [r6, #0]
 810adee:	6823      	ldr	r3, [r4, #0]
 810adf0:	0699      	lsls	r1, r3, #26
 810adf2:	bf42      	ittt	mi
 810adf4:	6833      	ldrmi	r3, [r6, #0]
 810adf6:	3302      	addmi	r3, #2
 810adf8:	6033      	strmi	r3, [r6, #0]
 810adfa:	6825      	ldr	r5, [r4, #0]
 810adfc:	f015 0506 	ands.w	r5, r5, #6
 810ae00:	d106      	bne.n	810ae10 <_printf_common+0x48>
 810ae02:	f104 0a19 	add.w	sl, r4, #25
 810ae06:	68e3      	ldr	r3, [r4, #12]
 810ae08:	6832      	ldr	r2, [r6, #0]
 810ae0a:	1a9b      	subs	r3, r3, r2
 810ae0c:	42ab      	cmp	r3, r5
 810ae0e:	dc26      	bgt.n	810ae5e <_printf_common+0x96>
 810ae10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810ae14:	1e13      	subs	r3, r2, #0
 810ae16:	6822      	ldr	r2, [r4, #0]
 810ae18:	bf18      	it	ne
 810ae1a:	2301      	movne	r3, #1
 810ae1c:	0692      	lsls	r2, r2, #26
 810ae1e:	d42b      	bmi.n	810ae78 <_printf_common+0xb0>
 810ae20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810ae24:	4649      	mov	r1, r9
 810ae26:	4638      	mov	r0, r7
 810ae28:	47c0      	blx	r8
 810ae2a:	3001      	adds	r0, #1
 810ae2c:	d01e      	beq.n	810ae6c <_printf_common+0xa4>
 810ae2e:	6823      	ldr	r3, [r4, #0]
 810ae30:	6922      	ldr	r2, [r4, #16]
 810ae32:	f003 0306 	and.w	r3, r3, #6
 810ae36:	2b04      	cmp	r3, #4
 810ae38:	bf02      	ittt	eq
 810ae3a:	68e5      	ldreq	r5, [r4, #12]
 810ae3c:	6833      	ldreq	r3, [r6, #0]
 810ae3e:	1aed      	subeq	r5, r5, r3
 810ae40:	68a3      	ldr	r3, [r4, #8]
 810ae42:	bf0c      	ite	eq
 810ae44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810ae48:	2500      	movne	r5, #0
 810ae4a:	4293      	cmp	r3, r2
 810ae4c:	bfc4      	itt	gt
 810ae4e:	1a9b      	subgt	r3, r3, r2
 810ae50:	18ed      	addgt	r5, r5, r3
 810ae52:	2600      	movs	r6, #0
 810ae54:	341a      	adds	r4, #26
 810ae56:	42b5      	cmp	r5, r6
 810ae58:	d11a      	bne.n	810ae90 <_printf_common+0xc8>
 810ae5a:	2000      	movs	r0, #0
 810ae5c:	e008      	b.n	810ae70 <_printf_common+0xa8>
 810ae5e:	2301      	movs	r3, #1
 810ae60:	4652      	mov	r2, sl
 810ae62:	4649      	mov	r1, r9
 810ae64:	4638      	mov	r0, r7
 810ae66:	47c0      	blx	r8
 810ae68:	3001      	adds	r0, #1
 810ae6a:	d103      	bne.n	810ae74 <_printf_common+0xac>
 810ae6c:	f04f 30ff 	mov.w	r0, #4294967295
 810ae70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ae74:	3501      	adds	r5, #1
 810ae76:	e7c6      	b.n	810ae06 <_printf_common+0x3e>
 810ae78:	18e1      	adds	r1, r4, r3
 810ae7a:	1c5a      	adds	r2, r3, #1
 810ae7c:	2030      	movs	r0, #48	; 0x30
 810ae7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810ae82:	4422      	add	r2, r4
 810ae84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810ae88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810ae8c:	3302      	adds	r3, #2
 810ae8e:	e7c7      	b.n	810ae20 <_printf_common+0x58>
 810ae90:	2301      	movs	r3, #1
 810ae92:	4622      	mov	r2, r4
 810ae94:	4649      	mov	r1, r9
 810ae96:	4638      	mov	r0, r7
 810ae98:	47c0      	blx	r8
 810ae9a:	3001      	adds	r0, #1
 810ae9c:	d0e6      	beq.n	810ae6c <_printf_common+0xa4>
 810ae9e:	3601      	adds	r6, #1
 810aea0:	e7d9      	b.n	810ae56 <_printf_common+0x8e>
	...

0810aea4 <_printf_i>:
 810aea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810aea8:	7e0f      	ldrb	r7, [r1, #24]
 810aeaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810aeac:	2f78      	cmp	r7, #120	; 0x78
 810aeae:	4691      	mov	r9, r2
 810aeb0:	4680      	mov	r8, r0
 810aeb2:	460c      	mov	r4, r1
 810aeb4:	469a      	mov	sl, r3
 810aeb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810aeba:	d807      	bhi.n	810aecc <_printf_i+0x28>
 810aebc:	2f62      	cmp	r7, #98	; 0x62
 810aebe:	d80a      	bhi.n	810aed6 <_printf_i+0x32>
 810aec0:	2f00      	cmp	r7, #0
 810aec2:	f000 80d4 	beq.w	810b06e <_printf_i+0x1ca>
 810aec6:	2f58      	cmp	r7, #88	; 0x58
 810aec8:	f000 80c0 	beq.w	810b04c <_printf_i+0x1a8>
 810aecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810aed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810aed4:	e03a      	b.n	810af4c <_printf_i+0xa8>
 810aed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810aeda:	2b15      	cmp	r3, #21
 810aedc:	d8f6      	bhi.n	810aecc <_printf_i+0x28>
 810aede:	a101      	add	r1, pc, #4	; (adr r1, 810aee4 <_printf_i+0x40>)
 810aee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810aee4:	0810af3d 	.word	0x0810af3d
 810aee8:	0810af51 	.word	0x0810af51
 810aeec:	0810aecd 	.word	0x0810aecd
 810aef0:	0810aecd 	.word	0x0810aecd
 810aef4:	0810aecd 	.word	0x0810aecd
 810aef8:	0810aecd 	.word	0x0810aecd
 810aefc:	0810af51 	.word	0x0810af51
 810af00:	0810aecd 	.word	0x0810aecd
 810af04:	0810aecd 	.word	0x0810aecd
 810af08:	0810aecd 	.word	0x0810aecd
 810af0c:	0810aecd 	.word	0x0810aecd
 810af10:	0810b055 	.word	0x0810b055
 810af14:	0810af7d 	.word	0x0810af7d
 810af18:	0810b00f 	.word	0x0810b00f
 810af1c:	0810aecd 	.word	0x0810aecd
 810af20:	0810aecd 	.word	0x0810aecd
 810af24:	0810b077 	.word	0x0810b077
 810af28:	0810aecd 	.word	0x0810aecd
 810af2c:	0810af7d 	.word	0x0810af7d
 810af30:	0810aecd 	.word	0x0810aecd
 810af34:	0810aecd 	.word	0x0810aecd
 810af38:	0810b017 	.word	0x0810b017
 810af3c:	682b      	ldr	r3, [r5, #0]
 810af3e:	1d1a      	adds	r2, r3, #4
 810af40:	681b      	ldr	r3, [r3, #0]
 810af42:	602a      	str	r2, [r5, #0]
 810af44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810af48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810af4c:	2301      	movs	r3, #1
 810af4e:	e09f      	b.n	810b090 <_printf_i+0x1ec>
 810af50:	6820      	ldr	r0, [r4, #0]
 810af52:	682b      	ldr	r3, [r5, #0]
 810af54:	0607      	lsls	r7, r0, #24
 810af56:	f103 0104 	add.w	r1, r3, #4
 810af5a:	6029      	str	r1, [r5, #0]
 810af5c:	d501      	bpl.n	810af62 <_printf_i+0xbe>
 810af5e:	681e      	ldr	r6, [r3, #0]
 810af60:	e003      	b.n	810af6a <_printf_i+0xc6>
 810af62:	0646      	lsls	r6, r0, #25
 810af64:	d5fb      	bpl.n	810af5e <_printf_i+0xba>
 810af66:	f9b3 6000 	ldrsh.w	r6, [r3]
 810af6a:	2e00      	cmp	r6, #0
 810af6c:	da03      	bge.n	810af76 <_printf_i+0xd2>
 810af6e:	232d      	movs	r3, #45	; 0x2d
 810af70:	4276      	negs	r6, r6
 810af72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810af76:	485a      	ldr	r0, [pc, #360]	; (810b0e0 <_printf_i+0x23c>)
 810af78:	230a      	movs	r3, #10
 810af7a:	e012      	b.n	810afa2 <_printf_i+0xfe>
 810af7c:	682b      	ldr	r3, [r5, #0]
 810af7e:	6820      	ldr	r0, [r4, #0]
 810af80:	1d19      	adds	r1, r3, #4
 810af82:	6029      	str	r1, [r5, #0]
 810af84:	0605      	lsls	r5, r0, #24
 810af86:	d501      	bpl.n	810af8c <_printf_i+0xe8>
 810af88:	681e      	ldr	r6, [r3, #0]
 810af8a:	e002      	b.n	810af92 <_printf_i+0xee>
 810af8c:	0641      	lsls	r1, r0, #25
 810af8e:	d5fb      	bpl.n	810af88 <_printf_i+0xe4>
 810af90:	881e      	ldrh	r6, [r3, #0]
 810af92:	4853      	ldr	r0, [pc, #332]	; (810b0e0 <_printf_i+0x23c>)
 810af94:	2f6f      	cmp	r7, #111	; 0x6f
 810af96:	bf0c      	ite	eq
 810af98:	2308      	moveq	r3, #8
 810af9a:	230a      	movne	r3, #10
 810af9c:	2100      	movs	r1, #0
 810af9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810afa2:	6865      	ldr	r5, [r4, #4]
 810afa4:	60a5      	str	r5, [r4, #8]
 810afa6:	2d00      	cmp	r5, #0
 810afa8:	bfa2      	ittt	ge
 810afaa:	6821      	ldrge	r1, [r4, #0]
 810afac:	f021 0104 	bicge.w	r1, r1, #4
 810afb0:	6021      	strge	r1, [r4, #0]
 810afb2:	b90e      	cbnz	r6, 810afb8 <_printf_i+0x114>
 810afb4:	2d00      	cmp	r5, #0
 810afb6:	d04b      	beq.n	810b050 <_printf_i+0x1ac>
 810afb8:	4615      	mov	r5, r2
 810afba:	fbb6 f1f3 	udiv	r1, r6, r3
 810afbe:	fb03 6711 	mls	r7, r3, r1, r6
 810afc2:	5dc7      	ldrb	r7, [r0, r7]
 810afc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810afc8:	4637      	mov	r7, r6
 810afca:	42bb      	cmp	r3, r7
 810afcc:	460e      	mov	r6, r1
 810afce:	d9f4      	bls.n	810afba <_printf_i+0x116>
 810afd0:	2b08      	cmp	r3, #8
 810afd2:	d10b      	bne.n	810afec <_printf_i+0x148>
 810afd4:	6823      	ldr	r3, [r4, #0]
 810afd6:	07de      	lsls	r6, r3, #31
 810afd8:	d508      	bpl.n	810afec <_printf_i+0x148>
 810afda:	6923      	ldr	r3, [r4, #16]
 810afdc:	6861      	ldr	r1, [r4, #4]
 810afde:	4299      	cmp	r1, r3
 810afe0:	bfde      	ittt	le
 810afe2:	2330      	movle	r3, #48	; 0x30
 810afe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 810afe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 810afec:	1b52      	subs	r2, r2, r5
 810afee:	6122      	str	r2, [r4, #16]
 810aff0:	f8cd a000 	str.w	sl, [sp]
 810aff4:	464b      	mov	r3, r9
 810aff6:	aa03      	add	r2, sp, #12
 810aff8:	4621      	mov	r1, r4
 810affa:	4640      	mov	r0, r8
 810affc:	f7ff fee4 	bl	810adc8 <_printf_common>
 810b000:	3001      	adds	r0, #1
 810b002:	d14a      	bne.n	810b09a <_printf_i+0x1f6>
 810b004:	f04f 30ff 	mov.w	r0, #4294967295
 810b008:	b004      	add	sp, #16
 810b00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b00e:	6823      	ldr	r3, [r4, #0]
 810b010:	f043 0320 	orr.w	r3, r3, #32
 810b014:	6023      	str	r3, [r4, #0]
 810b016:	4833      	ldr	r0, [pc, #204]	; (810b0e4 <_printf_i+0x240>)
 810b018:	2778      	movs	r7, #120	; 0x78
 810b01a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810b01e:	6823      	ldr	r3, [r4, #0]
 810b020:	6829      	ldr	r1, [r5, #0]
 810b022:	061f      	lsls	r7, r3, #24
 810b024:	f851 6b04 	ldr.w	r6, [r1], #4
 810b028:	d402      	bmi.n	810b030 <_printf_i+0x18c>
 810b02a:	065f      	lsls	r7, r3, #25
 810b02c:	bf48      	it	mi
 810b02e:	b2b6      	uxthmi	r6, r6
 810b030:	07df      	lsls	r7, r3, #31
 810b032:	bf48      	it	mi
 810b034:	f043 0320 	orrmi.w	r3, r3, #32
 810b038:	6029      	str	r1, [r5, #0]
 810b03a:	bf48      	it	mi
 810b03c:	6023      	strmi	r3, [r4, #0]
 810b03e:	b91e      	cbnz	r6, 810b048 <_printf_i+0x1a4>
 810b040:	6823      	ldr	r3, [r4, #0]
 810b042:	f023 0320 	bic.w	r3, r3, #32
 810b046:	6023      	str	r3, [r4, #0]
 810b048:	2310      	movs	r3, #16
 810b04a:	e7a7      	b.n	810af9c <_printf_i+0xf8>
 810b04c:	4824      	ldr	r0, [pc, #144]	; (810b0e0 <_printf_i+0x23c>)
 810b04e:	e7e4      	b.n	810b01a <_printf_i+0x176>
 810b050:	4615      	mov	r5, r2
 810b052:	e7bd      	b.n	810afd0 <_printf_i+0x12c>
 810b054:	682b      	ldr	r3, [r5, #0]
 810b056:	6826      	ldr	r6, [r4, #0]
 810b058:	6961      	ldr	r1, [r4, #20]
 810b05a:	1d18      	adds	r0, r3, #4
 810b05c:	6028      	str	r0, [r5, #0]
 810b05e:	0635      	lsls	r5, r6, #24
 810b060:	681b      	ldr	r3, [r3, #0]
 810b062:	d501      	bpl.n	810b068 <_printf_i+0x1c4>
 810b064:	6019      	str	r1, [r3, #0]
 810b066:	e002      	b.n	810b06e <_printf_i+0x1ca>
 810b068:	0670      	lsls	r0, r6, #25
 810b06a:	d5fb      	bpl.n	810b064 <_printf_i+0x1c0>
 810b06c:	8019      	strh	r1, [r3, #0]
 810b06e:	2300      	movs	r3, #0
 810b070:	6123      	str	r3, [r4, #16]
 810b072:	4615      	mov	r5, r2
 810b074:	e7bc      	b.n	810aff0 <_printf_i+0x14c>
 810b076:	682b      	ldr	r3, [r5, #0]
 810b078:	1d1a      	adds	r2, r3, #4
 810b07a:	602a      	str	r2, [r5, #0]
 810b07c:	681d      	ldr	r5, [r3, #0]
 810b07e:	6862      	ldr	r2, [r4, #4]
 810b080:	2100      	movs	r1, #0
 810b082:	4628      	mov	r0, r5
 810b084:	f7f5 f92c 	bl	81002e0 <memchr>
 810b088:	b108      	cbz	r0, 810b08e <_printf_i+0x1ea>
 810b08a:	1b40      	subs	r0, r0, r5
 810b08c:	6060      	str	r0, [r4, #4]
 810b08e:	6863      	ldr	r3, [r4, #4]
 810b090:	6123      	str	r3, [r4, #16]
 810b092:	2300      	movs	r3, #0
 810b094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b098:	e7aa      	b.n	810aff0 <_printf_i+0x14c>
 810b09a:	6923      	ldr	r3, [r4, #16]
 810b09c:	462a      	mov	r2, r5
 810b09e:	4649      	mov	r1, r9
 810b0a0:	4640      	mov	r0, r8
 810b0a2:	47d0      	blx	sl
 810b0a4:	3001      	adds	r0, #1
 810b0a6:	d0ad      	beq.n	810b004 <_printf_i+0x160>
 810b0a8:	6823      	ldr	r3, [r4, #0]
 810b0aa:	079b      	lsls	r3, r3, #30
 810b0ac:	d413      	bmi.n	810b0d6 <_printf_i+0x232>
 810b0ae:	68e0      	ldr	r0, [r4, #12]
 810b0b0:	9b03      	ldr	r3, [sp, #12]
 810b0b2:	4298      	cmp	r0, r3
 810b0b4:	bfb8      	it	lt
 810b0b6:	4618      	movlt	r0, r3
 810b0b8:	e7a6      	b.n	810b008 <_printf_i+0x164>
 810b0ba:	2301      	movs	r3, #1
 810b0bc:	4632      	mov	r2, r6
 810b0be:	4649      	mov	r1, r9
 810b0c0:	4640      	mov	r0, r8
 810b0c2:	47d0      	blx	sl
 810b0c4:	3001      	adds	r0, #1
 810b0c6:	d09d      	beq.n	810b004 <_printf_i+0x160>
 810b0c8:	3501      	adds	r5, #1
 810b0ca:	68e3      	ldr	r3, [r4, #12]
 810b0cc:	9903      	ldr	r1, [sp, #12]
 810b0ce:	1a5b      	subs	r3, r3, r1
 810b0d0:	42ab      	cmp	r3, r5
 810b0d2:	dcf2      	bgt.n	810b0ba <_printf_i+0x216>
 810b0d4:	e7eb      	b.n	810b0ae <_printf_i+0x20a>
 810b0d6:	2500      	movs	r5, #0
 810b0d8:	f104 0619 	add.w	r6, r4, #25
 810b0dc:	e7f5      	b.n	810b0ca <_printf_i+0x226>
 810b0de:	bf00      	nop
 810b0e0:	081ec2d2 	.word	0x081ec2d2
 810b0e4:	081ec2e3 	.word	0x081ec2e3

0810b0e8 <_scanf_float>:
 810b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b0ec:	b087      	sub	sp, #28
 810b0ee:	4617      	mov	r7, r2
 810b0f0:	9303      	str	r3, [sp, #12]
 810b0f2:	688b      	ldr	r3, [r1, #8]
 810b0f4:	1e5a      	subs	r2, r3, #1
 810b0f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810b0fa:	bf83      	ittte	hi
 810b0fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810b100:	195b      	addhi	r3, r3, r5
 810b102:	9302      	strhi	r3, [sp, #8]
 810b104:	2300      	movls	r3, #0
 810b106:	bf86      	itte	hi
 810b108:	f240 135d 	movwhi	r3, #349	; 0x15d
 810b10c:	608b      	strhi	r3, [r1, #8]
 810b10e:	9302      	strls	r3, [sp, #8]
 810b110:	680b      	ldr	r3, [r1, #0]
 810b112:	468b      	mov	fp, r1
 810b114:	2500      	movs	r5, #0
 810b116:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810b11a:	f84b 3b1c 	str.w	r3, [fp], #28
 810b11e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810b122:	4680      	mov	r8, r0
 810b124:	460c      	mov	r4, r1
 810b126:	465e      	mov	r6, fp
 810b128:	46aa      	mov	sl, r5
 810b12a:	46a9      	mov	r9, r5
 810b12c:	9501      	str	r5, [sp, #4]
 810b12e:	68a2      	ldr	r2, [r4, #8]
 810b130:	b152      	cbz	r2, 810b148 <_scanf_float+0x60>
 810b132:	683b      	ldr	r3, [r7, #0]
 810b134:	781b      	ldrb	r3, [r3, #0]
 810b136:	2b4e      	cmp	r3, #78	; 0x4e
 810b138:	d864      	bhi.n	810b204 <_scanf_float+0x11c>
 810b13a:	2b40      	cmp	r3, #64	; 0x40
 810b13c:	d83c      	bhi.n	810b1b8 <_scanf_float+0xd0>
 810b13e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810b142:	b2c8      	uxtb	r0, r1
 810b144:	280e      	cmp	r0, #14
 810b146:	d93a      	bls.n	810b1be <_scanf_float+0xd6>
 810b148:	f1b9 0f00 	cmp.w	r9, #0
 810b14c:	d003      	beq.n	810b156 <_scanf_float+0x6e>
 810b14e:	6823      	ldr	r3, [r4, #0]
 810b150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b154:	6023      	str	r3, [r4, #0]
 810b156:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b15a:	f1ba 0f01 	cmp.w	sl, #1
 810b15e:	f200 8113 	bhi.w	810b388 <_scanf_float+0x2a0>
 810b162:	455e      	cmp	r6, fp
 810b164:	f200 8105 	bhi.w	810b372 <_scanf_float+0x28a>
 810b168:	2501      	movs	r5, #1
 810b16a:	4628      	mov	r0, r5
 810b16c:	b007      	add	sp, #28
 810b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b172:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810b176:	2a0d      	cmp	r2, #13
 810b178:	d8e6      	bhi.n	810b148 <_scanf_float+0x60>
 810b17a:	a101      	add	r1, pc, #4	; (adr r1, 810b180 <_scanf_float+0x98>)
 810b17c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810b180:	0810b2bf 	.word	0x0810b2bf
 810b184:	0810b149 	.word	0x0810b149
 810b188:	0810b149 	.word	0x0810b149
 810b18c:	0810b149 	.word	0x0810b149
 810b190:	0810b31f 	.word	0x0810b31f
 810b194:	0810b2f7 	.word	0x0810b2f7
 810b198:	0810b149 	.word	0x0810b149
 810b19c:	0810b149 	.word	0x0810b149
 810b1a0:	0810b2cd 	.word	0x0810b2cd
 810b1a4:	0810b149 	.word	0x0810b149
 810b1a8:	0810b149 	.word	0x0810b149
 810b1ac:	0810b149 	.word	0x0810b149
 810b1b0:	0810b149 	.word	0x0810b149
 810b1b4:	0810b285 	.word	0x0810b285
 810b1b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810b1bc:	e7db      	b.n	810b176 <_scanf_float+0x8e>
 810b1be:	290e      	cmp	r1, #14
 810b1c0:	d8c2      	bhi.n	810b148 <_scanf_float+0x60>
 810b1c2:	a001      	add	r0, pc, #4	; (adr r0, 810b1c8 <_scanf_float+0xe0>)
 810b1c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810b1c8:	0810b277 	.word	0x0810b277
 810b1cc:	0810b149 	.word	0x0810b149
 810b1d0:	0810b277 	.word	0x0810b277
 810b1d4:	0810b30b 	.word	0x0810b30b
 810b1d8:	0810b149 	.word	0x0810b149
 810b1dc:	0810b225 	.word	0x0810b225
 810b1e0:	0810b261 	.word	0x0810b261
 810b1e4:	0810b261 	.word	0x0810b261
 810b1e8:	0810b261 	.word	0x0810b261
 810b1ec:	0810b261 	.word	0x0810b261
 810b1f0:	0810b261 	.word	0x0810b261
 810b1f4:	0810b261 	.word	0x0810b261
 810b1f8:	0810b261 	.word	0x0810b261
 810b1fc:	0810b261 	.word	0x0810b261
 810b200:	0810b261 	.word	0x0810b261
 810b204:	2b6e      	cmp	r3, #110	; 0x6e
 810b206:	d809      	bhi.n	810b21c <_scanf_float+0x134>
 810b208:	2b60      	cmp	r3, #96	; 0x60
 810b20a:	d8b2      	bhi.n	810b172 <_scanf_float+0x8a>
 810b20c:	2b54      	cmp	r3, #84	; 0x54
 810b20e:	d077      	beq.n	810b300 <_scanf_float+0x218>
 810b210:	2b59      	cmp	r3, #89	; 0x59
 810b212:	d199      	bne.n	810b148 <_scanf_float+0x60>
 810b214:	2d07      	cmp	r5, #7
 810b216:	d197      	bne.n	810b148 <_scanf_float+0x60>
 810b218:	2508      	movs	r5, #8
 810b21a:	e029      	b.n	810b270 <_scanf_float+0x188>
 810b21c:	2b74      	cmp	r3, #116	; 0x74
 810b21e:	d06f      	beq.n	810b300 <_scanf_float+0x218>
 810b220:	2b79      	cmp	r3, #121	; 0x79
 810b222:	e7f6      	b.n	810b212 <_scanf_float+0x12a>
 810b224:	6821      	ldr	r1, [r4, #0]
 810b226:	05c8      	lsls	r0, r1, #23
 810b228:	d51a      	bpl.n	810b260 <_scanf_float+0x178>
 810b22a:	9b02      	ldr	r3, [sp, #8]
 810b22c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810b230:	6021      	str	r1, [r4, #0]
 810b232:	f109 0901 	add.w	r9, r9, #1
 810b236:	b11b      	cbz	r3, 810b240 <_scanf_float+0x158>
 810b238:	3b01      	subs	r3, #1
 810b23a:	3201      	adds	r2, #1
 810b23c:	9302      	str	r3, [sp, #8]
 810b23e:	60a2      	str	r2, [r4, #8]
 810b240:	68a3      	ldr	r3, [r4, #8]
 810b242:	3b01      	subs	r3, #1
 810b244:	60a3      	str	r3, [r4, #8]
 810b246:	6923      	ldr	r3, [r4, #16]
 810b248:	3301      	adds	r3, #1
 810b24a:	6123      	str	r3, [r4, #16]
 810b24c:	687b      	ldr	r3, [r7, #4]
 810b24e:	3b01      	subs	r3, #1
 810b250:	2b00      	cmp	r3, #0
 810b252:	607b      	str	r3, [r7, #4]
 810b254:	f340 8084 	ble.w	810b360 <_scanf_float+0x278>
 810b258:	683b      	ldr	r3, [r7, #0]
 810b25a:	3301      	adds	r3, #1
 810b25c:	603b      	str	r3, [r7, #0]
 810b25e:	e766      	b.n	810b12e <_scanf_float+0x46>
 810b260:	eb1a 0f05 	cmn.w	sl, r5
 810b264:	f47f af70 	bne.w	810b148 <_scanf_float+0x60>
 810b268:	6822      	ldr	r2, [r4, #0]
 810b26a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810b26e:	6022      	str	r2, [r4, #0]
 810b270:	f806 3b01 	strb.w	r3, [r6], #1
 810b274:	e7e4      	b.n	810b240 <_scanf_float+0x158>
 810b276:	6822      	ldr	r2, [r4, #0]
 810b278:	0610      	lsls	r0, r2, #24
 810b27a:	f57f af65 	bpl.w	810b148 <_scanf_float+0x60>
 810b27e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810b282:	e7f4      	b.n	810b26e <_scanf_float+0x186>
 810b284:	f1ba 0f00 	cmp.w	sl, #0
 810b288:	d10e      	bne.n	810b2a8 <_scanf_float+0x1c0>
 810b28a:	f1b9 0f00 	cmp.w	r9, #0
 810b28e:	d10e      	bne.n	810b2ae <_scanf_float+0x1c6>
 810b290:	6822      	ldr	r2, [r4, #0]
 810b292:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b296:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b29a:	d108      	bne.n	810b2ae <_scanf_float+0x1c6>
 810b29c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b2a0:	6022      	str	r2, [r4, #0]
 810b2a2:	f04f 0a01 	mov.w	sl, #1
 810b2a6:	e7e3      	b.n	810b270 <_scanf_float+0x188>
 810b2a8:	f1ba 0f02 	cmp.w	sl, #2
 810b2ac:	d055      	beq.n	810b35a <_scanf_float+0x272>
 810b2ae:	2d01      	cmp	r5, #1
 810b2b0:	d002      	beq.n	810b2b8 <_scanf_float+0x1d0>
 810b2b2:	2d04      	cmp	r5, #4
 810b2b4:	f47f af48 	bne.w	810b148 <_scanf_float+0x60>
 810b2b8:	3501      	adds	r5, #1
 810b2ba:	b2ed      	uxtb	r5, r5
 810b2bc:	e7d8      	b.n	810b270 <_scanf_float+0x188>
 810b2be:	f1ba 0f01 	cmp.w	sl, #1
 810b2c2:	f47f af41 	bne.w	810b148 <_scanf_float+0x60>
 810b2c6:	f04f 0a02 	mov.w	sl, #2
 810b2ca:	e7d1      	b.n	810b270 <_scanf_float+0x188>
 810b2cc:	b97d      	cbnz	r5, 810b2ee <_scanf_float+0x206>
 810b2ce:	f1b9 0f00 	cmp.w	r9, #0
 810b2d2:	f47f af3c 	bne.w	810b14e <_scanf_float+0x66>
 810b2d6:	6822      	ldr	r2, [r4, #0]
 810b2d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810b2dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810b2e0:	f47f af39 	bne.w	810b156 <_scanf_float+0x6e>
 810b2e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b2e8:	6022      	str	r2, [r4, #0]
 810b2ea:	2501      	movs	r5, #1
 810b2ec:	e7c0      	b.n	810b270 <_scanf_float+0x188>
 810b2ee:	2d03      	cmp	r5, #3
 810b2f0:	d0e2      	beq.n	810b2b8 <_scanf_float+0x1d0>
 810b2f2:	2d05      	cmp	r5, #5
 810b2f4:	e7de      	b.n	810b2b4 <_scanf_float+0x1cc>
 810b2f6:	2d02      	cmp	r5, #2
 810b2f8:	f47f af26 	bne.w	810b148 <_scanf_float+0x60>
 810b2fc:	2503      	movs	r5, #3
 810b2fe:	e7b7      	b.n	810b270 <_scanf_float+0x188>
 810b300:	2d06      	cmp	r5, #6
 810b302:	f47f af21 	bne.w	810b148 <_scanf_float+0x60>
 810b306:	2507      	movs	r5, #7
 810b308:	e7b2      	b.n	810b270 <_scanf_float+0x188>
 810b30a:	6822      	ldr	r2, [r4, #0]
 810b30c:	0591      	lsls	r1, r2, #22
 810b30e:	f57f af1b 	bpl.w	810b148 <_scanf_float+0x60>
 810b312:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810b316:	6022      	str	r2, [r4, #0]
 810b318:	f8cd 9004 	str.w	r9, [sp, #4]
 810b31c:	e7a8      	b.n	810b270 <_scanf_float+0x188>
 810b31e:	6822      	ldr	r2, [r4, #0]
 810b320:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810b324:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810b328:	d006      	beq.n	810b338 <_scanf_float+0x250>
 810b32a:	0550      	lsls	r0, r2, #21
 810b32c:	f57f af0c 	bpl.w	810b148 <_scanf_float+0x60>
 810b330:	f1b9 0f00 	cmp.w	r9, #0
 810b334:	f43f af0f 	beq.w	810b156 <_scanf_float+0x6e>
 810b338:	0591      	lsls	r1, r2, #22
 810b33a:	bf58      	it	pl
 810b33c:	9901      	ldrpl	r1, [sp, #4]
 810b33e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810b342:	bf58      	it	pl
 810b344:	eba9 0101 	subpl.w	r1, r9, r1
 810b348:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810b34c:	bf58      	it	pl
 810b34e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810b352:	6022      	str	r2, [r4, #0]
 810b354:	f04f 0900 	mov.w	r9, #0
 810b358:	e78a      	b.n	810b270 <_scanf_float+0x188>
 810b35a:	f04f 0a03 	mov.w	sl, #3
 810b35e:	e787      	b.n	810b270 <_scanf_float+0x188>
 810b360:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810b364:	4639      	mov	r1, r7
 810b366:	4640      	mov	r0, r8
 810b368:	4798      	blx	r3
 810b36a:	2800      	cmp	r0, #0
 810b36c:	f43f aedf 	beq.w	810b12e <_scanf_float+0x46>
 810b370:	e6ea      	b.n	810b148 <_scanf_float+0x60>
 810b372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b37a:	463a      	mov	r2, r7
 810b37c:	4640      	mov	r0, r8
 810b37e:	4798      	blx	r3
 810b380:	6923      	ldr	r3, [r4, #16]
 810b382:	3b01      	subs	r3, #1
 810b384:	6123      	str	r3, [r4, #16]
 810b386:	e6ec      	b.n	810b162 <_scanf_float+0x7a>
 810b388:	1e6b      	subs	r3, r5, #1
 810b38a:	2b06      	cmp	r3, #6
 810b38c:	d825      	bhi.n	810b3da <_scanf_float+0x2f2>
 810b38e:	2d02      	cmp	r5, #2
 810b390:	d836      	bhi.n	810b400 <_scanf_float+0x318>
 810b392:	455e      	cmp	r6, fp
 810b394:	f67f aee8 	bls.w	810b168 <_scanf_float+0x80>
 810b398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b39c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b3a0:	463a      	mov	r2, r7
 810b3a2:	4640      	mov	r0, r8
 810b3a4:	4798      	blx	r3
 810b3a6:	6923      	ldr	r3, [r4, #16]
 810b3a8:	3b01      	subs	r3, #1
 810b3aa:	6123      	str	r3, [r4, #16]
 810b3ac:	e7f1      	b.n	810b392 <_scanf_float+0x2aa>
 810b3ae:	9802      	ldr	r0, [sp, #8]
 810b3b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b3b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810b3b8:	9002      	str	r0, [sp, #8]
 810b3ba:	463a      	mov	r2, r7
 810b3bc:	4640      	mov	r0, r8
 810b3be:	4798      	blx	r3
 810b3c0:	6923      	ldr	r3, [r4, #16]
 810b3c2:	3b01      	subs	r3, #1
 810b3c4:	6123      	str	r3, [r4, #16]
 810b3c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b3ca:	fa5f fa8a 	uxtb.w	sl, sl
 810b3ce:	f1ba 0f02 	cmp.w	sl, #2
 810b3d2:	d1ec      	bne.n	810b3ae <_scanf_float+0x2c6>
 810b3d4:	3d03      	subs	r5, #3
 810b3d6:	b2ed      	uxtb	r5, r5
 810b3d8:	1b76      	subs	r6, r6, r5
 810b3da:	6823      	ldr	r3, [r4, #0]
 810b3dc:	05da      	lsls	r2, r3, #23
 810b3de:	d52f      	bpl.n	810b440 <_scanf_float+0x358>
 810b3e0:	055b      	lsls	r3, r3, #21
 810b3e2:	d510      	bpl.n	810b406 <_scanf_float+0x31e>
 810b3e4:	455e      	cmp	r6, fp
 810b3e6:	f67f aebf 	bls.w	810b168 <_scanf_float+0x80>
 810b3ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b3ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810b3f2:	463a      	mov	r2, r7
 810b3f4:	4640      	mov	r0, r8
 810b3f6:	4798      	blx	r3
 810b3f8:	6923      	ldr	r3, [r4, #16]
 810b3fa:	3b01      	subs	r3, #1
 810b3fc:	6123      	str	r3, [r4, #16]
 810b3fe:	e7f1      	b.n	810b3e4 <_scanf_float+0x2fc>
 810b400:	46aa      	mov	sl, r5
 810b402:	9602      	str	r6, [sp, #8]
 810b404:	e7df      	b.n	810b3c6 <_scanf_float+0x2de>
 810b406:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810b40a:	6923      	ldr	r3, [r4, #16]
 810b40c:	2965      	cmp	r1, #101	; 0x65
 810b40e:	f103 33ff 	add.w	r3, r3, #4294967295
 810b412:	f106 35ff 	add.w	r5, r6, #4294967295
 810b416:	6123      	str	r3, [r4, #16]
 810b418:	d00c      	beq.n	810b434 <_scanf_float+0x34c>
 810b41a:	2945      	cmp	r1, #69	; 0x45
 810b41c:	d00a      	beq.n	810b434 <_scanf_float+0x34c>
 810b41e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b422:	463a      	mov	r2, r7
 810b424:	4640      	mov	r0, r8
 810b426:	4798      	blx	r3
 810b428:	6923      	ldr	r3, [r4, #16]
 810b42a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810b42e:	3b01      	subs	r3, #1
 810b430:	1eb5      	subs	r5, r6, #2
 810b432:	6123      	str	r3, [r4, #16]
 810b434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810b438:	463a      	mov	r2, r7
 810b43a:	4640      	mov	r0, r8
 810b43c:	4798      	blx	r3
 810b43e:	462e      	mov	r6, r5
 810b440:	6825      	ldr	r5, [r4, #0]
 810b442:	f015 0510 	ands.w	r5, r5, #16
 810b446:	d158      	bne.n	810b4fa <_scanf_float+0x412>
 810b448:	7035      	strb	r5, [r6, #0]
 810b44a:	6823      	ldr	r3, [r4, #0]
 810b44c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810b450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810b454:	d11c      	bne.n	810b490 <_scanf_float+0x3a8>
 810b456:	9b01      	ldr	r3, [sp, #4]
 810b458:	454b      	cmp	r3, r9
 810b45a:	eba3 0209 	sub.w	r2, r3, r9
 810b45e:	d124      	bne.n	810b4aa <_scanf_float+0x3c2>
 810b460:	2200      	movs	r2, #0
 810b462:	4659      	mov	r1, fp
 810b464:	4640      	mov	r0, r8
 810b466:	f002 fca3 	bl	810ddb0 <_strtod_r>
 810b46a:	9b03      	ldr	r3, [sp, #12]
 810b46c:	6821      	ldr	r1, [r4, #0]
 810b46e:	681b      	ldr	r3, [r3, #0]
 810b470:	f011 0f02 	tst.w	r1, #2
 810b474:	ec57 6b10 	vmov	r6, r7, d0
 810b478:	f103 0204 	add.w	r2, r3, #4
 810b47c:	d020      	beq.n	810b4c0 <_scanf_float+0x3d8>
 810b47e:	9903      	ldr	r1, [sp, #12]
 810b480:	600a      	str	r2, [r1, #0]
 810b482:	681b      	ldr	r3, [r3, #0]
 810b484:	e9c3 6700 	strd	r6, r7, [r3]
 810b488:	68e3      	ldr	r3, [r4, #12]
 810b48a:	3301      	adds	r3, #1
 810b48c:	60e3      	str	r3, [r4, #12]
 810b48e:	e66c      	b.n	810b16a <_scanf_float+0x82>
 810b490:	9b04      	ldr	r3, [sp, #16]
 810b492:	2b00      	cmp	r3, #0
 810b494:	d0e4      	beq.n	810b460 <_scanf_float+0x378>
 810b496:	9905      	ldr	r1, [sp, #20]
 810b498:	230a      	movs	r3, #10
 810b49a:	462a      	mov	r2, r5
 810b49c:	3101      	adds	r1, #1
 810b49e:	4640      	mov	r0, r8
 810b4a0:	f002 fd0e 	bl	810dec0 <_strtol_r>
 810b4a4:	9b04      	ldr	r3, [sp, #16]
 810b4a6:	9e05      	ldr	r6, [sp, #20]
 810b4a8:	1ac2      	subs	r2, r0, r3
 810b4aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810b4ae:	429e      	cmp	r6, r3
 810b4b0:	bf28      	it	cs
 810b4b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810b4b6:	4912      	ldr	r1, [pc, #72]	; (810b500 <_scanf_float+0x418>)
 810b4b8:	4630      	mov	r0, r6
 810b4ba:	f000 f955 	bl	810b768 <siprintf>
 810b4be:	e7cf      	b.n	810b460 <_scanf_float+0x378>
 810b4c0:	f011 0f04 	tst.w	r1, #4
 810b4c4:	9903      	ldr	r1, [sp, #12]
 810b4c6:	600a      	str	r2, [r1, #0]
 810b4c8:	d1db      	bne.n	810b482 <_scanf_float+0x39a>
 810b4ca:	f8d3 8000 	ldr.w	r8, [r3]
 810b4ce:	ee10 2a10 	vmov	r2, s0
 810b4d2:	ee10 0a10 	vmov	r0, s0
 810b4d6:	463b      	mov	r3, r7
 810b4d8:	4639      	mov	r1, r7
 810b4da:	f7f5 fbaf 	bl	8100c3c <__aeabi_dcmpun>
 810b4de:	b128      	cbz	r0, 810b4ec <_scanf_float+0x404>
 810b4e0:	4808      	ldr	r0, [pc, #32]	; (810b504 <_scanf_float+0x41c>)
 810b4e2:	f000 fad7 	bl	810ba94 <nanf>
 810b4e6:	ed88 0a00 	vstr	s0, [r8]
 810b4ea:	e7cd      	b.n	810b488 <_scanf_float+0x3a0>
 810b4ec:	4630      	mov	r0, r6
 810b4ee:	4639      	mov	r1, r7
 810b4f0:	f7f5 fc02 	bl	8100cf8 <__aeabi_d2f>
 810b4f4:	f8c8 0000 	str.w	r0, [r8]
 810b4f8:	e7c6      	b.n	810b488 <_scanf_float+0x3a0>
 810b4fa:	2500      	movs	r5, #0
 810b4fc:	e635      	b.n	810b16a <_scanf_float+0x82>
 810b4fe:	bf00      	nop
 810b500:	081ec2f4 	.word	0x081ec2f4
 810b504:	081d8da9 	.word	0x081d8da9

0810b508 <std>:
 810b508:	2300      	movs	r3, #0
 810b50a:	b510      	push	{r4, lr}
 810b50c:	4604      	mov	r4, r0
 810b50e:	e9c0 3300 	strd	r3, r3, [r0]
 810b512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b516:	6083      	str	r3, [r0, #8]
 810b518:	8181      	strh	r1, [r0, #12]
 810b51a:	6643      	str	r3, [r0, #100]	; 0x64
 810b51c:	81c2      	strh	r2, [r0, #14]
 810b51e:	6183      	str	r3, [r0, #24]
 810b520:	4619      	mov	r1, r3
 810b522:	2208      	movs	r2, #8
 810b524:	305c      	adds	r0, #92	; 0x5c
 810b526:	f000 fa17 	bl	810b958 <memset>
 810b52a:	4b0d      	ldr	r3, [pc, #52]	; (810b560 <std+0x58>)
 810b52c:	6263      	str	r3, [r4, #36]	; 0x24
 810b52e:	4b0d      	ldr	r3, [pc, #52]	; (810b564 <std+0x5c>)
 810b530:	62a3      	str	r3, [r4, #40]	; 0x28
 810b532:	4b0d      	ldr	r3, [pc, #52]	; (810b568 <std+0x60>)
 810b534:	62e3      	str	r3, [r4, #44]	; 0x2c
 810b536:	4b0d      	ldr	r3, [pc, #52]	; (810b56c <std+0x64>)
 810b538:	6323      	str	r3, [r4, #48]	; 0x30
 810b53a:	4b0d      	ldr	r3, [pc, #52]	; (810b570 <std+0x68>)
 810b53c:	6224      	str	r4, [r4, #32]
 810b53e:	429c      	cmp	r4, r3
 810b540:	d006      	beq.n	810b550 <std+0x48>
 810b542:	f103 0268 	add.w	r2, r3, #104	; 0x68
 810b546:	4294      	cmp	r4, r2
 810b548:	d002      	beq.n	810b550 <std+0x48>
 810b54a:	33d0      	adds	r3, #208	; 0xd0
 810b54c:	429c      	cmp	r4, r3
 810b54e:	d105      	bne.n	810b55c <std+0x54>
 810b550:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b558:	f000 ba8a 	b.w	810ba70 <__retarget_lock_init_recursive>
 810b55c:	bd10      	pop	{r4, pc}
 810b55e:	bf00      	nop
 810b560:	0810b7a9 	.word	0x0810b7a9
 810b564:	0810b7cb 	.word	0x0810b7cb
 810b568:	0810b803 	.word	0x0810b803
 810b56c:	0810b827 	.word	0x0810b827
 810b570:	1001ab38 	.word	0x1001ab38

0810b574 <stdio_exit_handler>:
 810b574:	4a02      	ldr	r2, [pc, #8]	; (810b580 <stdio_exit_handler+0xc>)
 810b576:	4903      	ldr	r1, [pc, #12]	; (810b584 <stdio_exit_handler+0x10>)
 810b578:	4803      	ldr	r0, [pc, #12]	; (810b588 <stdio_exit_handler+0x14>)
 810b57a:	f000 b869 	b.w	810b650 <_fwalk_sglue>
 810b57e:	bf00      	nop
 810b580:	10000994 	.word	0x10000994
 810b584:	0810e509 	.word	0x0810e509
 810b588:	100009a0 	.word	0x100009a0

0810b58c <cleanup_stdio>:
 810b58c:	6841      	ldr	r1, [r0, #4]
 810b58e:	4b0c      	ldr	r3, [pc, #48]	; (810b5c0 <cleanup_stdio+0x34>)
 810b590:	4299      	cmp	r1, r3
 810b592:	b510      	push	{r4, lr}
 810b594:	4604      	mov	r4, r0
 810b596:	d001      	beq.n	810b59c <cleanup_stdio+0x10>
 810b598:	f002 ffb6 	bl	810e508 <_fflush_r>
 810b59c:	68a1      	ldr	r1, [r4, #8]
 810b59e:	4b09      	ldr	r3, [pc, #36]	; (810b5c4 <cleanup_stdio+0x38>)
 810b5a0:	4299      	cmp	r1, r3
 810b5a2:	d002      	beq.n	810b5aa <cleanup_stdio+0x1e>
 810b5a4:	4620      	mov	r0, r4
 810b5a6:	f002 ffaf 	bl	810e508 <_fflush_r>
 810b5aa:	68e1      	ldr	r1, [r4, #12]
 810b5ac:	4b06      	ldr	r3, [pc, #24]	; (810b5c8 <cleanup_stdio+0x3c>)
 810b5ae:	4299      	cmp	r1, r3
 810b5b0:	d004      	beq.n	810b5bc <cleanup_stdio+0x30>
 810b5b2:	4620      	mov	r0, r4
 810b5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b5b8:	f002 bfa6 	b.w	810e508 <_fflush_r>
 810b5bc:	bd10      	pop	{r4, pc}
 810b5be:	bf00      	nop
 810b5c0:	1001ab38 	.word	0x1001ab38
 810b5c4:	1001aba0 	.word	0x1001aba0
 810b5c8:	1001ac08 	.word	0x1001ac08

0810b5cc <global_stdio_init.part.0>:
 810b5cc:	b510      	push	{r4, lr}
 810b5ce:	4b0b      	ldr	r3, [pc, #44]	; (810b5fc <global_stdio_init.part.0+0x30>)
 810b5d0:	4c0b      	ldr	r4, [pc, #44]	; (810b600 <global_stdio_init.part.0+0x34>)
 810b5d2:	4a0c      	ldr	r2, [pc, #48]	; (810b604 <global_stdio_init.part.0+0x38>)
 810b5d4:	601a      	str	r2, [r3, #0]
 810b5d6:	4620      	mov	r0, r4
 810b5d8:	2200      	movs	r2, #0
 810b5da:	2104      	movs	r1, #4
 810b5dc:	f7ff ff94 	bl	810b508 <std>
 810b5e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810b5e4:	2201      	movs	r2, #1
 810b5e6:	2109      	movs	r1, #9
 810b5e8:	f7ff ff8e 	bl	810b508 <std>
 810b5ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 810b5f0:	2202      	movs	r2, #2
 810b5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b5f6:	2112      	movs	r1, #18
 810b5f8:	f7ff bf86 	b.w	810b508 <std>
 810b5fc:	1001ac70 	.word	0x1001ac70
 810b600:	1001ab38 	.word	0x1001ab38
 810b604:	0810b575 	.word	0x0810b575

0810b608 <__sfp_lock_acquire>:
 810b608:	4801      	ldr	r0, [pc, #4]	; (810b610 <__sfp_lock_acquire+0x8>)
 810b60a:	f000 ba32 	b.w	810ba72 <__retarget_lock_acquire_recursive>
 810b60e:	bf00      	nop
 810b610:	1001ac79 	.word	0x1001ac79

0810b614 <__sfp_lock_release>:
 810b614:	4801      	ldr	r0, [pc, #4]	; (810b61c <__sfp_lock_release+0x8>)
 810b616:	f000 ba2d 	b.w	810ba74 <__retarget_lock_release_recursive>
 810b61a:	bf00      	nop
 810b61c:	1001ac79 	.word	0x1001ac79

0810b620 <__sinit>:
 810b620:	b510      	push	{r4, lr}
 810b622:	4604      	mov	r4, r0
 810b624:	f7ff fff0 	bl	810b608 <__sfp_lock_acquire>
 810b628:	6a23      	ldr	r3, [r4, #32]
 810b62a:	b11b      	cbz	r3, 810b634 <__sinit+0x14>
 810b62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b630:	f7ff bff0 	b.w	810b614 <__sfp_lock_release>
 810b634:	4b04      	ldr	r3, [pc, #16]	; (810b648 <__sinit+0x28>)
 810b636:	6223      	str	r3, [r4, #32]
 810b638:	4b04      	ldr	r3, [pc, #16]	; (810b64c <__sinit+0x2c>)
 810b63a:	681b      	ldr	r3, [r3, #0]
 810b63c:	2b00      	cmp	r3, #0
 810b63e:	d1f5      	bne.n	810b62c <__sinit+0xc>
 810b640:	f7ff ffc4 	bl	810b5cc <global_stdio_init.part.0>
 810b644:	e7f2      	b.n	810b62c <__sinit+0xc>
 810b646:	bf00      	nop
 810b648:	0810b58d 	.word	0x0810b58d
 810b64c:	1001ac70 	.word	0x1001ac70

0810b650 <_fwalk_sglue>:
 810b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b654:	4607      	mov	r7, r0
 810b656:	4688      	mov	r8, r1
 810b658:	4614      	mov	r4, r2
 810b65a:	2600      	movs	r6, #0
 810b65c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b660:	f1b9 0901 	subs.w	r9, r9, #1
 810b664:	d505      	bpl.n	810b672 <_fwalk_sglue+0x22>
 810b666:	6824      	ldr	r4, [r4, #0]
 810b668:	2c00      	cmp	r4, #0
 810b66a:	d1f7      	bne.n	810b65c <_fwalk_sglue+0xc>
 810b66c:	4630      	mov	r0, r6
 810b66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b672:	89ab      	ldrh	r3, [r5, #12]
 810b674:	2b01      	cmp	r3, #1
 810b676:	d907      	bls.n	810b688 <_fwalk_sglue+0x38>
 810b678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b67c:	3301      	adds	r3, #1
 810b67e:	d003      	beq.n	810b688 <_fwalk_sglue+0x38>
 810b680:	4629      	mov	r1, r5
 810b682:	4638      	mov	r0, r7
 810b684:	47c0      	blx	r8
 810b686:	4306      	orrs	r6, r0
 810b688:	3568      	adds	r5, #104	; 0x68
 810b68a:	e7e9      	b.n	810b660 <_fwalk_sglue+0x10>

0810b68c <iprintf>:
 810b68c:	b40f      	push	{r0, r1, r2, r3}
 810b68e:	b507      	push	{r0, r1, r2, lr}
 810b690:	4906      	ldr	r1, [pc, #24]	; (810b6ac <iprintf+0x20>)
 810b692:	ab04      	add	r3, sp, #16
 810b694:	6808      	ldr	r0, [r1, #0]
 810b696:	f853 2b04 	ldr.w	r2, [r3], #4
 810b69a:	6881      	ldr	r1, [r0, #8]
 810b69c:	9301      	str	r3, [sp, #4]
 810b69e:	f002 fd93 	bl	810e1c8 <_vfiprintf_r>
 810b6a2:	b003      	add	sp, #12
 810b6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 810b6a8:	b004      	add	sp, #16
 810b6aa:	4770      	bx	lr
 810b6ac:	100009ec 	.word	0x100009ec

0810b6b0 <_puts_r>:
 810b6b0:	6a03      	ldr	r3, [r0, #32]
 810b6b2:	b570      	push	{r4, r5, r6, lr}
 810b6b4:	6884      	ldr	r4, [r0, #8]
 810b6b6:	4605      	mov	r5, r0
 810b6b8:	460e      	mov	r6, r1
 810b6ba:	b90b      	cbnz	r3, 810b6c0 <_puts_r+0x10>
 810b6bc:	f7ff ffb0 	bl	810b620 <__sinit>
 810b6c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b6c2:	07db      	lsls	r3, r3, #31
 810b6c4:	d405      	bmi.n	810b6d2 <_puts_r+0x22>
 810b6c6:	89a3      	ldrh	r3, [r4, #12]
 810b6c8:	0598      	lsls	r0, r3, #22
 810b6ca:	d402      	bmi.n	810b6d2 <_puts_r+0x22>
 810b6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b6ce:	f000 f9d0 	bl	810ba72 <__retarget_lock_acquire_recursive>
 810b6d2:	89a3      	ldrh	r3, [r4, #12]
 810b6d4:	0719      	lsls	r1, r3, #28
 810b6d6:	d513      	bpl.n	810b700 <_puts_r+0x50>
 810b6d8:	6923      	ldr	r3, [r4, #16]
 810b6da:	b18b      	cbz	r3, 810b700 <_puts_r+0x50>
 810b6dc:	3e01      	subs	r6, #1
 810b6de:	68a3      	ldr	r3, [r4, #8]
 810b6e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810b6e4:	3b01      	subs	r3, #1
 810b6e6:	60a3      	str	r3, [r4, #8]
 810b6e8:	b9e9      	cbnz	r1, 810b726 <_puts_r+0x76>
 810b6ea:	2b00      	cmp	r3, #0
 810b6ec:	da2e      	bge.n	810b74c <_puts_r+0x9c>
 810b6ee:	4622      	mov	r2, r4
 810b6f0:	210a      	movs	r1, #10
 810b6f2:	4628      	mov	r0, r5
 810b6f4:	f000 f89b 	bl	810b82e <__swbuf_r>
 810b6f8:	3001      	adds	r0, #1
 810b6fa:	d007      	beq.n	810b70c <_puts_r+0x5c>
 810b6fc:	250a      	movs	r5, #10
 810b6fe:	e007      	b.n	810b710 <_puts_r+0x60>
 810b700:	4621      	mov	r1, r4
 810b702:	4628      	mov	r0, r5
 810b704:	f000 f8d0 	bl	810b8a8 <__swsetup_r>
 810b708:	2800      	cmp	r0, #0
 810b70a:	d0e7      	beq.n	810b6dc <_puts_r+0x2c>
 810b70c:	f04f 35ff 	mov.w	r5, #4294967295
 810b710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b712:	07da      	lsls	r2, r3, #31
 810b714:	d405      	bmi.n	810b722 <_puts_r+0x72>
 810b716:	89a3      	ldrh	r3, [r4, #12]
 810b718:	059b      	lsls	r3, r3, #22
 810b71a:	d402      	bmi.n	810b722 <_puts_r+0x72>
 810b71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b71e:	f000 f9a9 	bl	810ba74 <__retarget_lock_release_recursive>
 810b722:	4628      	mov	r0, r5
 810b724:	bd70      	pop	{r4, r5, r6, pc}
 810b726:	2b00      	cmp	r3, #0
 810b728:	da04      	bge.n	810b734 <_puts_r+0x84>
 810b72a:	69a2      	ldr	r2, [r4, #24]
 810b72c:	429a      	cmp	r2, r3
 810b72e:	dc06      	bgt.n	810b73e <_puts_r+0x8e>
 810b730:	290a      	cmp	r1, #10
 810b732:	d004      	beq.n	810b73e <_puts_r+0x8e>
 810b734:	6823      	ldr	r3, [r4, #0]
 810b736:	1c5a      	adds	r2, r3, #1
 810b738:	6022      	str	r2, [r4, #0]
 810b73a:	7019      	strb	r1, [r3, #0]
 810b73c:	e7cf      	b.n	810b6de <_puts_r+0x2e>
 810b73e:	4622      	mov	r2, r4
 810b740:	4628      	mov	r0, r5
 810b742:	f000 f874 	bl	810b82e <__swbuf_r>
 810b746:	3001      	adds	r0, #1
 810b748:	d1c9      	bne.n	810b6de <_puts_r+0x2e>
 810b74a:	e7df      	b.n	810b70c <_puts_r+0x5c>
 810b74c:	6823      	ldr	r3, [r4, #0]
 810b74e:	250a      	movs	r5, #10
 810b750:	1c5a      	adds	r2, r3, #1
 810b752:	6022      	str	r2, [r4, #0]
 810b754:	701d      	strb	r5, [r3, #0]
 810b756:	e7db      	b.n	810b710 <_puts_r+0x60>

0810b758 <puts>:
 810b758:	4b02      	ldr	r3, [pc, #8]	; (810b764 <puts+0xc>)
 810b75a:	4601      	mov	r1, r0
 810b75c:	6818      	ldr	r0, [r3, #0]
 810b75e:	f7ff bfa7 	b.w	810b6b0 <_puts_r>
 810b762:	bf00      	nop
 810b764:	100009ec 	.word	0x100009ec

0810b768 <siprintf>:
 810b768:	b40e      	push	{r1, r2, r3}
 810b76a:	b500      	push	{lr}
 810b76c:	b09c      	sub	sp, #112	; 0x70
 810b76e:	ab1d      	add	r3, sp, #116	; 0x74
 810b770:	9002      	str	r0, [sp, #8]
 810b772:	9006      	str	r0, [sp, #24]
 810b774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810b778:	4809      	ldr	r0, [pc, #36]	; (810b7a0 <siprintf+0x38>)
 810b77a:	9107      	str	r1, [sp, #28]
 810b77c:	9104      	str	r1, [sp, #16]
 810b77e:	4909      	ldr	r1, [pc, #36]	; (810b7a4 <siprintf+0x3c>)
 810b780:	f853 2b04 	ldr.w	r2, [r3], #4
 810b784:	9105      	str	r1, [sp, #20]
 810b786:	6800      	ldr	r0, [r0, #0]
 810b788:	9301      	str	r3, [sp, #4]
 810b78a:	a902      	add	r1, sp, #8
 810b78c:	f002 fbf4 	bl	810df78 <_svfiprintf_r>
 810b790:	9b02      	ldr	r3, [sp, #8]
 810b792:	2200      	movs	r2, #0
 810b794:	701a      	strb	r2, [r3, #0]
 810b796:	b01c      	add	sp, #112	; 0x70
 810b798:	f85d eb04 	ldr.w	lr, [sp], #4
 810b79c:	b003      	add	sp, #12
 810b79e:	4770      	bx	lr
 810b7a0:	100009ec 	.word	0x100009ec
 810b7a4:	ffff0208 	.word	0xffff0208

0810b7a8 <__sread>:
 810b7a8:	b510      	push	{r4, lr}
 810b7aa:	460c      	mov	r4, r1
 810b7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b7b0:	f000 f900 	bl	810b9b4 <_read_r>
 810b7b4:	2800      	cmp	r0, #0
 810b7b6:	bfab      	itete	ge
 810b7b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b7ba:	89a3      	ldrhlt	r3, [r4, #12]
 810b7bc:	181b      	addge	r3, r3, r0
 810b7be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b7c2:	bfac      	ite	ge
 810b7c4:	6563      	strge	r3, [r4, #84]	; 0x54
 810b7c6:	81a3      	strhlt	r3, [r4, #12]
 810b7c8:	bd10      	pop	{r4, pc}

0810b7ca <__swrite>:
 810b7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b7ce:	461f      	mov	r7, r3
 810b7d0:	898b      	ldrh	r3, [r1, #12]
 810b7d2:	05db      	lsls	r3, r3, #23
 810b7d4:	4605      	mov	r5, r0
 810b7d6:	460c      	mov	r4, r1
 810b7d8:	4616      	mov	r6, r2
 810b7da:	d505      	bpl.n	810b7e8 <__swrite+0x1e>
 810b7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b7e0:	2302      	movs	r3, #2
 810b7e2:	2200      	movs	r2, #0
 810b7e4:	f000 f8d4 	bl	810b990 <_lseek_r>
 810b7e8:	89a3      	ldrh	r3, [r4, #12]
 810b7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b7ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b7f2:	81a3      	strh	r3, [r4, #12]
 810b7f4:	4632      	mov	r2, r6
 810b7f6:	463b      	mov	r3, r7
 810b7f8:	4628      	mov	r0, r5
 810b7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b7fe:	f000 b8fb 	b.w	810b9f8 <_write_r>

0810b802 <__sseek>:
 810b802:	b510      	push	{r4, lr}
 810b804:	460c      	mov	r4, r1
 810b806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b80a:	f000 f8c1 	bl	810b990 <_lseek_r>
 810b80e:	1c43      	adds	r3, r0, #1
 810b810:	89a3      	ldrh	r3, [r4, #12]
 810b812:	bf15      	itete	ne
 810b814:	6560      	strne	r0, [r4, #84]	; 0x54
 810b816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810b81a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810b81e:	81a3      	strheq	r3, [r4, #12]
 810b820:	bf18      	it	ne
 810b822:	81a3      	strhne	r3, [r4, #12]
 810b824:	bd10      	pop	{r4, pc}

0810b826 <__sclose>:
 810b826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b82a:	f000 b8a1 	b.w	810b970 <_close_r>

0810b82e <__swbuf_r>:
 810b82e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b830:	460e      	mov	r6, r1
 810b832:	4614      	mov	r4, r2
 810b834:	4605      	mov	r5, r0
 810b836:	b118      	cbz	r0, 810b840 <__swbuf_r+0x12>
 810b838:	6a03      	ldr	r3, [r0, #32]
 810b83a:	b90b      	cbnz	r3, 810b840 <__swbuf_r+0x12>
 810b83c:	f7ff fef0 	bl	810b620 <__sinit>
 810b840:	69a3      	ldr	r3, [r4, #24]
 810b842:	60a3      	str	r3, [r4, #8]
 810b844:	89a3      	ldrh	r3, [r4, #12]
 810b846:	071a      	lsls	r2, r3, #28
 810b848:	d525      	bpl.n	810b896 <__swbuf_r+0x68>
 810b84a:	6923      	ldr	r3, [r4, #16]
 810b84c:	b31b      	cbz	r3, 810b896 <__swbuf_r+0x68>
 810b84e:	6823      	ldr	r3, [r4, #0]
 810b850:	6922      	ldr	r2, [r4, #16]
 810b852:	1a98      	subs	r0, r3, r2
 810b854:	6963      	ldr	r3, [r4, #20]
 810b856:	b2f6      	uxtb	r6, r6
 810b858:	4283      	cmp	r3, r0
 810b85a:	4637      	mov	r7, r6
 810b85c:	dc04      	bgt.n	810b868 <__swbuf_r+0x3a>
 810b85e:	4621      	mov	r1, r4
 810b860:	4628      	mov	r0, r5
 810b862:	f002 fe51 	bl	810e508 <_fflush_r>
 810b866:	b9e0      	cbnz	r0, 810b8a2 <__swbuf_r+0x74>
 810b868:	68a3      	ldr	r3, [r4, #8]
 810b86a:	3b01      	subs	r3, #1
 810b86c:	60a3      	str	r3, [r4, #8]
 810b86e:	6823      	ldr	r3, [r4, #0]
 810b870:	1c5a      	adds	r2, r3, #1
 810b872:	6022      	str	r2, [r4, #0]
 810b874:	701e      	strb	r6, [r3, #0]
 810b876:	6962      	ldr	r2, [r4, #20]
 810b878:	1c43      	adds	r3, r0, #1
 810b87a:	429a      	cmp	r2, r3
 810b87c:	d004      	beq.n	810b888 <__swbuf_r+0x5a>
 810b87e:	89a3      	ldrh	r3, [r4, #12]
 810b880:	07db      	lsls	r3, r3, #31
 810b882:	d506      	bpl.n	810b892 <__swbuf_r+0x64>
 810b884:	2e0a      	cmp	r6, #10
 810b886:	d104      	bne.n	810b892 <__swbuf_r+0x64>
 810b888:	4621      	mov	r1, r4
 810b88a:	4628      	mov	r0, r5
 810b88c:	f002 fe3c 	bl	810e508 <_fflush_r>
 810b890:	b938      	cbnz	r0, 810b8a2 <__swbuf_r+0x74>
 810b892:	4638      	mov	r0, r7
 810b894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b896:	4621      	mov	r1, r4
 810b898:	4628      	mov	r0, r5
 810b89a:	f000 f805 	bl	810b8a8 <__swsetup_r>
 810b89e:	2800      	cmp	r0, #0
 810b8a0:	d0d5      	beq.n	810b84e <__swbuf_r+0x20>
 810b8a2:	f04f 37ff 	mov.w	r7, #4294967295
 810b8a6:	e7f4      	b.n	810b892 <__swbuf_r+0x64>

0810b8a8 <__swsetup_r>:
 810b8a8:	b538      	push	{r3, r4, r5, lr}
 810b8aa:	4b2a      	ldr	r3, [pc, #168]	; (810b954 <__swsetup_r+0xac>)
 810b8ac:	4605      	mov	r5, r0
 810b8ae:	6818      	ldr	r0, [r3, #0]
 810b8b0:	460c      	mov	r4, r1
 810b8b2:	b118      	cbz	r0, 810b8bc <__swsetup_r+0x14>
 810b8b4:	6a03      	ldr	r3, [r0, #32]
 810b8b6:	b90b      	cbnz	r3, 810b8bc <__swsetup_r+0x14>
 810b8b8:	f7ff feb2 	bl	810b620 <__sinit>
 810b8bc:	89a3      	ldrh	r3, [r4, #12]
 810b8be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b8c2:	0718      	lsls	r0, r3, #28
 810b8c4:	d422      	bmi.n	810b90c <__swsetup_r+0x64>
 810b8c6:	06d9      	lsls	r1, r3, #27
 810b8c8:	d407      	bmi.n	810b8da <__swsetup_r+0x32>
 810b8ca:	2309      	movs	r3, #9
 810b8cc:	602b      	str	r3, [r5, #0]
 810b8ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b8d2:	81a3      	strh	r3, [r4, #12]
 810b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 810b8d8:	e034      	b.n	810b944 <__swsetup_r+0x9c>
 810b8da:	0758      	lsls	r0, r3, #29
 810b8dc:	d512      	bpl.n	810b904 <__swsetup_r+0x5c>
 810b8de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b8e0:	b141      	cbz	r1, 810b8f4 <__swsetup_r+0x4c>
 810b8e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b8e6:	4299      	cmp	r1, r3
 810b8e8:	d002      	beq.n	810b8f0 <__swsetup_r+0x48>
 810b8ea:	4628      	mov	r0, r5
 810b8ec:	f000 ff52 	bl	810c794 <_free_r>
 810b8f0:	2300      	movs	r3, #0
 810b8f2:	6363      	str	r3, [r4, #52]	; 0x34
 810b8f4:	89a3      	ldrh	r3, [r4, #12]
 810b8f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b8fa:	81a3      	strh	r3, [r4, #12]
 810b8fc:	2300      	movs	r3, #0
 810b8fe:	6063      	str	r3, [r4, #4]
 810b900:	6923      	ldr	r3, [r4, #16]
 810b902:	6023      	str	r3, [r4, #0]
 810b904:	89a3      	ldrh	r3, [r4, #12]
 810b906:	f043 0308 	orr.w	r3, r3, #8
 810b90a:	81a3      	strh	r3, [r4, #12]
 810b90c:	6923      	ldr	r3, [r4, #16]
 810b90e:	b94b      	cbnz	r3, 810b924 <__swsetup_r+0x7c>
 810b910:	89a3      	ldrh	r3, [r4, #12]
 810b912:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b91a:	d003      	beq.n	810b924 <__swsetup_r+0x7c>
 810b91c:	4621      	mov	r1, r4
 810b91e:	4628      	mov	r0, r5
 810b920:	f002 fe40 	bl	810e5a4 <__smakebuf_r>
 810b924:	89a0      	ldrh	r0, [r4, #12]
 810b926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b92a:	f010 0301 	ands.w	r3, r0, #1
 810b92e:	d00a      	beq.n	810b946 <__swsetup_r+0x9e>
 810b930:	2300      	movs	r3, #0
 810b932:	60a3      	str	r3, [r4, #8]
 810b934:	6963      	ldr	r3, [r4, #20]
 810b936:	425b      	negs	r3, r3
 810b938:	61a3      	str	r3, [r4, #24]
 810b93a:	6923      	ldr	r3, [r4, #16]
 810b93c:	b943      	cbnz	r3, 810b950 <__swsetup_r+0xa8>
 810b93e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b942:	d1c4      	bne.n	810b8ce <__swsetup_r+0x26>
 810b944:	bd38      	pop	{r3, r4, r5, pc}
 810b946:	0781      	lsls	r1, r0, #30
 810b948:	bf58      	it	pl
 810b94a:	6963      	ldrpl	r3, [r4, #20]
 810b94c:	60a3      	str	r3, [r4, #8]
 810b94e:	e7f4      	b.n	810b93a <__swsetup_r+0x92>
 810b950:	2000      	movs	r0, #0
 810b952:	e7f7      	b.n	810b944 <__swsetup_r+0x9c>
 810b954:	100009ec 	.word	0x100009ec

0810b958 <memset>:
 810b958:	4402      	add	r2, r0
 810b95a:	4603      	mov	r3, r0
 810b95c:	4293      	cmp	r3, r2
 810b95e:	d100      	bne.n	810b962 <memset+0xa>
 810b960:	4770      	bx	lr
 810b962:	f803 1b01 	strb.w	r1, [r3], #1
 810b966:	e7f9      	b.n	810b95c <memset+0x4>

0810b968 <_localeconv_r>:
 810b968:	4800      	ldr	r0, [pc, #0]	; (810b96c <_localeconv_r+0x4>)
 810b96a:	4770      	bx	lr
 810b96c:	10000ae0 	.word	0x10000ae0

0810b970 <_close_r>:
 810b970:	b538      	push	{r3, r4, r5, lr}
 810b972:	4d06      	ldr	r5, [pc, #24]	; (810b98c <_close_r+0x1c>)
 810b974:	2300      	movs	r3, #0
 810b976:	4604      	mov	r4, r0
 810b978:	4608      	mov	r0, r1
 810b97a:	602b      	str	r3, [r5, #0]
 810b97c:	f004 fdd6 	bl	811052c <_close>
 810b980:	1c43      	adds	r3, r0, #1
 810b982:	d102      	bne.n	810b98a <_close_r+0x1a>
 810b984:	682b      	ldr	r3, [r5, #0]
 810b986:	b103      	cbz	r3, 810b98a <_close_r+0x1a>
 810b988:	6023      	str	r3, [r4, #0]
 810b98a:	bd38      	pop	{r3, r4, r5, pc}
 810b98c:	1001ac74 	.word	0x1001ac74

0810b990 <_lseek_r>:
 810b990:	b538      	push	{r3, r4, r5, lr}
 810b992:	4d07      	ldr	r5, [pc, #28]	; (810b9b0 <_lseek_r+0x20>)
 810b994:	4604      	mov	r4, r0
 810b996:	4608      	mov	r0, r1
 810b998:	4611      	mov	r1, r2
 810b99a:	2200      	movs	r2, #0
 810b99c:	602a      	str	r2, [r5, #0]
 810b99e:	461a      	mov	r2, r3
 810b9a0:	f004 fdec 	bl	811057c <_lseek>
 810b9a4:	1c43      	adds	r3, r0, #1
 810b9a6:	d102      	bne.n	810b9ae <_lseek_r+0x1e>
 810b9a8:	682b      	ldr	r3, [r5, #0]
 810b9aa:	b103      	cbz	r3, 810b9ae <_lseek_r+0x1e>
 810b9ac:	6023      	str	r3, [r4, #0]
 810b9ae:	bd38      	pop	{r3, r4, r5, pc}
 810b9b0:	1001ac74 	.word	0x1001ac74

0810b9b4 <_read_r>:
 810b9b4:	b538      	push	{r3, r4, r5, lr}
 810b9b6:	4d07      	ldr	r5, [pc, #28]	; (810b9d4 <_read_r+0x20>)
 810b9b8:	4604      	mov	r4, r0
 810b9ba:	4608      	mov	r0, r1
 810b9bc:	4611      	mov	r1, r2
 810b9be:	2200      	movs	r2, #0
 810b9c0:	602a      	str	r2, [r5, #0]
 810b9c2:	461a      	mov	r2, r3
 810b9c4:	f004 fde2 	bl	811058c <_read>
 810b9c8:	1c43      	adds	r3, r0, #1
 810b9ca:	d102      	bne.n	810b9d2 <_read_r+0x1e>
 810b9cc:	682b      	ldr	r3, [r5, #0]
 810b9ce:	b103      	cbz	r3, 810b9d2 <_read_r+0x1e>
 810b9d0:	6023      	str	r3, [r4, #0]
 810b9d2:	bd38      	pop	{r3, r4, r5, pc}
 810b9d4:	1001ac74 	.word	0x1001ac74

0810b9d8 <_sbrk_r>:
 810b9d8:	b538      	push	{r3, r4, r5, lr}
 810b9da:	4d06      	ldr	r5, [pc, #24]	; (810b9f4 <_sbrk_r+0x1c>)
 810b9dc:	2300      	movs	r3, #0
 810b9de:	4604      	mov	r4, r0
 810b9e0:	4608      	mov	r0, r1
 810b9e2:	602b      	str	r3, [r5, #0]
 810b9e4:	f7f6 ff3e 	bl	8102864 <_sbrk>
 810b9e8:	1c43      	adds	r3, r0, #1
 810b9ea:	d102      	bne.n	810b9f2 <_sbrk_r+0x1a>
 810b9ec:	682b      	ldr	r3, [r5, #0]
 810b9ee:	b103      	cbz	r3, 810b9f2 <_sbrk_r+0x1a>
 810b9f0:	6023      	str	r3, [r4, #0]
 810b9f2:	bd38      	pop	{r3, r4, r5, pc}
 810b9f4:	1001ac74 	.word	0x1001ac74

0810b9f8 <_write_r>:
 810b9f8:	b538      	push	{r3, r4, r5, lr}
 810b9fa:	4d07      	ldr	r5, [pc, #28]	; (810ba18 <_write_r+0x20>)
 810b9fc:	4604      	mov	r4, r0
 810b9fe:	4608      	mov	r0, r1
 810ba00:	4611      	mov	r1, r2
 810ba02:	2200      	movs	r2, #0
 810ba04:	602a      	str	r2, [r5, #0]
 810ba06:	461a      	mov	r2, r3
 810ba08:	f004 fdc8 	bl	811059c <_write>
 810ba0c:	1c43      	adds	r3, r0, #1
 810ba0e:	d102      	bne.n	810ba16 <_write_r+0x1e>
 810ba10:	682b      	ldr	r3, [r5, #0]
 810ba12:	b103      	cbz	r3, 810ba16 <_write_r+0x1e>
 810ba14:	6023      	str	r3, [r4, #0]
 810ba16:	bd38      	pop	{r3, r4, r5, pc}
 810ba18:	1001ac74 	.word	0x1001ac74

0810ba1c <__errno>:
 810ba1c:	4b01      	ldr	r3, [pc, #4]	; (810ba24 <__errno+0x8>)
 810ba1e:	6818      	ldr	r0, [r3, #0]
 810ba20:	4770      	bx	lr
 810ba22:	bf00      	nop
 810ba24:	100009ec 	.word	0x100009ec

0810ba28 <__libc_init_array>:
 810ba28:	b570      	push	{r4, r5, r6, lr}
 810ba2a:	4d0d      	ldr	r5, [pc, #52]	; (810ba60 <__libc_init_array+0x38>)
 810ba2c:	4c0d      	ldr	r4, [pc, #52]	; (810ba64 <__libc_init_array+0x3c>)
 810ba2e:	1b64      	subs	r4, r4, r5
 810ba30:	10a4      	asrs	r4, r4, #2
 810ba32:	2600      	movs	r6, #0
 810ba34:	42a6      	cmp	r6, r4
 810ba36:	d109      	bne.n	810ba4c <__libc_init_array+0x24>
 810ba38:	4d0b      	ldr	r5, [pc, #44]	; (810ba68 <__libc_init_array+0x40>)
 810ba3a:	4c0c      	ldr	r4, [pc, #48]	; (810ba6c <__libc_init_array+0x44>)
 810ba3c:	f004 fdb8 	bl	81105b0 <_init>
 810ba40:	1b64      	subs	r4, r4, r5
 810ba42:	10a4      	asrs	r4, r4, #2
 810ba44:	2600      	movs	r6, #0
 810ba46:	42a6      	cmp	r6, r4
 810ba48:	d105      	bne.n	810ba56 <__libc_init_array+0x2e>
 810ba4a:	bd70      	pop	{r4, r5, r6, pc}
 810ba4c:	f855 3b04 	ldr.w	r3, [r5], #4
 810ba50:	4798      	blx	r3
 810ba52:	3601      	adds	r6, #1
 810ba54:	e7ee      	b.n	810ba34 <__libc_init_array+0xc>
 810ba56:	f855 3b04 	ldr.w	r3, [r5], #4
 810ba5a:	4798      	blx	r3
 810ba5c:	3601      	adds	r6, #1
 810ba5e:	e7f2      	b.n	810ba46 <__libc_init_array+0x1e>
 810ba60:	081ecaf0 	.word	0x081ecaf0
 810ba64:	081ecaf0 	.word	0x081ecaf0
 810ba68:	081ecaf0 	.word	0x081ecaf0
 810ba6c:	081ecaf4 	.word	0x081ecaf4

0810ba70 <__retarget_lock_init_recursive>:
 810ba70:	4770      	bx	lr

0810ba72 <__retarget_lock_acquire_recursive>:
 810ba72:	4770      	bx	lr

0810ba74 <__retarget_lock_release_recursive>:
 810ba74:	4770      	bx	lr

0810ba76 <memcpy>:
 810ba76:	440a      	add	r2, r1
 810ba78:	4291      	cmp	r1, r2
 810ba7a:	f100 33ff 	add.w	r3, r0, #4294967295
 810ba7e:	d100      	bne.n	810ba82 <memcpy+0xc>
 810ba80:	4770      	bx	lr
 810ba82:	b510      	push	{r4, lr}
 810ba84:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ba88:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ba8c:	4291      	cmp	r1, r2
 810ba8e:	d1f9      	bne.n	810ba84 <memcpy+0xe>
 810ba90:	bd10      	pop	{r4, pc}
	...

0810ba94 <nanf>:
 810ba94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810ba9c <nanf+0x8>
 810ba98:	4770      	bx	lr
 810ba9a:	bf00      	nop
 810ba9c:	7fc00000 	.word	0x7fc00000

0810baa0 <quorem>:
 810baa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810baa4:	6903      	ldr	r3, [r0, #16]
 810baa6:	690c      	ldr	r4, [r1, #16]
 810baa8:	42a3      	cmp	r3, r4
 810baaa:	4607      	mov	r7, r0
 810baac:	db7e      	blt.n	810bbac <quorem+0x10c>
 810baae:	3c01      	subs	r4, #1
 810bab0:	f101 0814 	add.w	r8, r1, #20
 810bab4:	f100 0514 	add.w	r5, r0, #20
 810bab8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810babc:	9301      	str	r3, [sp, #4]
 810babe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810bac2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810bac6:	3301      	adds	r3, #1
 810bac8:	429a      	cmp	r2, r3
 810baca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810bace:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810bad2:	fbb2 f6f3 	udiv	r6, r2, r3
 810bad6:	d331      	bcc.n	810bb3c <quorem+0x9c>
 810bad8:	f04f 0e00 	mov.w	lr, #0
 810badc:	4640      	mov	r0, r8
 810bade:	46ac      	mov	ip, r5
 810bae0:	46f2      	mov	sl, lr
 810bae2:	f850 2b04 	ldr.w	r2, [r0], #4
 810bae6:	b293      	uxth	r3, r2
 810bae8:	fb06 e303 	mla	r3, r6, r3, lr
 810baec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810baf0:	0c1a      	lsrs	r2, r3, #16
 810baf2:	b29b      	uxth	r3, r3
 810baf4:	ebaa 0303 	sub.w	r3, sl, r3
 810baf8:	f8dc a000 	ldr.w	sl, [ip]
 810bafc:	fa13 f38a 	uxtah	r3, r3, sl
 810bb00:	fb06 220e 	mla	r2, r6, lr, r2
 810bb04:	9300      	str	r3, [sp, #0]
 810bb06:	9b00      	ldr	r3, [sp, #0]
 810bb08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810bb0c:	b292      	uxth	r2, r2
 810bb0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810bb12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810bb16:	f8bd 3000 	ldrh.w	r3, [sp]
 810bb1a:	4581      	cmp	r9, r0
 810bb1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810bb20:	f84c 3b04 	str.w	r3, [ip], #4
 810bb24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810bb28:	d2db      	bcs.n	810bae2 <quorem+0x42>
 810bb2a:	f855 300b 	ldr.w	r3, [r5, fp]
 810bb2e:	b92b      	cbnz	r3, 810bb3c <quorem+0x9c>
 810bb30:	9b01      	ldr	r3, [sp, #4]
 810bb32:	3b04      	subs	r3, #4
 810bb34:	429d      	cmp	r5, r3
 810bb36:	461a      	mov	r2, r3
 810bb38:	d32c      	bcc.n	810bb94 <quorem+0xf4>
 810bb3a:	613c      	str	r4, [r7, #16]
 810bb3c:	4638      	mov	r0, r7
 810bb3e:	f001 f93b 	bl	810cdb8 <__mcmp>
 810bb42:	2800      	cmp	r0, #0
 810bb44:	db22      	blt.n	810bb8c <quorem+0xec>
 810bb46:	3601      	adds	r6, #1
 810bb48:	4629      	mov	r1, r5
 810bb4a:	2000      	movs	r0, #0
 810bb4c:	f858 2b04 	ldr.w	r2, [r8], #4
 810bb50:	f8d1 c000 	ldr.w	ip, [r1]
 810bb54:	b293      	uxth	r3, r2
 810bb56:	1ac3      	subs	r3, r0, r3
 810bb58:	0c12      	lsrs	r2, r2, #16
 810bb5a:	fa13 f38c 	uxtah	r3, r3, ip
 810bb5e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810bb62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810bb66:	b29b      	uxth	r3, r3
 810bb68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810bb6c:	45c1      	cmp	r9, r8
 810bb6e:	f841 3b04 	str.w	r3, [r1], #4
 810bb72:	ea4f 4022 	mov.w	r0, r2, asr #16
 810bb76:	d2e9      	bcs.n	810bb4c <quorem+0xac>
 810bb78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810bb7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810bb80:	b922      	cbnz	r2, 810bb8c <quorem+0xec>
 810bb82:	3b04      	subs	r3, #4
 810bb84:	429d      	cmp	r5, r3
 810bb86:	461a      	mov	r2, r3
 810bb88:	d30a      	bcc.n	810bba0 <quorem+0x100>
 810bb8a:	613c      	str	r4, [r7, #16]
 810bb8c:	4630      	mov	r0, r6
 810bb8e:	b003      	add	sp, #12
 810bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bb94:	6812      	ldr	r2, [r2, #0]
 810bb96:	3b04      	subs	r3, #4
 810bb98:	2a00      	cmp	r2, #0
 810bb9a:	d1ce      	bne.n	810bb3a <quorem+0x9a>
 810bb9c:	3c01      	subs	r4, #1
 810bb9e:	e7c9      	b.n	810bb34 <quorem+0x94>
 810bba0:	6812      	ldr	r2, [r2, #0]
 810bba2:	3b04      	subs	r3, #4
 810bba4:	2a00      	cmp	r2, #0
 810bba6:	d1f0      	bne.n	810bb8a <quorem+0xea>
 810bba8:	3c01      	subs	r4, #1
 810bbaa:	e7eb      	b.n	810bb84 <quorem+0xe4>
 810bbac:	2000      	movs	r0, #0
 810bbae:	e7ee      	b.n	810bb8e <quorem+0xee>

0810bbb0 <_dtoa_r>:
 810bbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bbb4:	ed2d 8b04 	vpush	{d8-d9}
 810bbb8:	69c5      	ldr	r5, [r0, #28]
 810bbba:	b093      	sub	sp, #76	; 0x4c
 810bbbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 810bbc0:	ec57 6b10 	vmov	r6, r7, d0
 810bbc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810bbc8:	9107      	str	r1, [sp, #28]
 810bbca:	4604      	mov	r4, r0
 810bbcc:	920a      	str	r2, [sp, #40]	; 0x28
 810bbce:	930d      	str	r3, [sp, #52]	; 0x34
 810bbd0:	b975      	cbnz	r5, 810bbf0 <_dtoa_r+0x40>
 810bbd2:	2010      	movs	r0, #16
 810bbd4:	f7fe fd3e 	bl	810a654 <malloc>
 810bbd8:	4602      	mov	r2, r0
 810bbda:	61e0      	str	r0, [r4, #28]
 810bbdc:	b920      	cbnz	r0, 810bbe8 <_dtoa_r+0x38>
 810bbde:	4bae      	ldr	r3, [pc, #696]	; (810be98 <_dtoa_r+0x2e8>)
 810bbe0:	21ef      	movs	r1, #239	; 0xef
 810bbe2:	48ae      	ldr	r0, [pc, #696]	; (810be9c <_dtoa_r+0x2ec>)
 810bbe4:	f002 fd70 	bl	810e6c8 <__assert_func>
 810bbe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810bbec:	6005      	str	r5, [r0, #0]
 810bbee:	60c5      	str	r5, [r0, #12]
 810bbf0:	69e3      	ldr	r3, [r4, #28]
 810bbf2:	6819      	ldr	r1, [r3, #0]
 810bbf4:	b151      	cbz	r1, 810bc0c <_dtoa_r+0x5c>
 810bbf6:	685a      	ldr	r2, [r3, #4]
 810bbf8:	604a      	str	r2, [r1, #4]
 810bbfa:	2301      	movs	r3, #1
 810bbfc:	4093      	lsls	r3, r2
 810bbfe:	608b      	str	r3, [r1, #8]
 810bc00:	4620      	mov	r0, r4
 810bc02:	f000 fe53 	bl	810c8ac <_Bfree>
 810bc06:	69e3      	ldr	r3, [r4, #28]
 810bc08:	2200      	movs	r2, #0
 810bc0a:	601a      	str	r2, [r3, #0]
 810bc0c:	1e3b      	subs	r3, r7, #0
 810bc0e:	bfbb      	ittet	lt
 810bc10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810bc14:	9303      	strlt	r3, [sp, #12]
 810bc16:	2300      	movge	r3, #0
 810bc18:	2201      	movlt	r2, #1
 810bc1a:	bfac      	ite	ge
 810bc1c:	f8c8 3000 	strge.w	r3, [r8]
 810bc20:	f8c8 2000 	strlt.w	r2, [r8]
 810bc24:	4b9e      	ldr	r3, [pc, #632]	; (810bea0 <_dtoa_r+0x2f0>)
 810bc26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810bc2a:	ea33 0308 	bics.w	r3, r3, r8
 810bc2e:	d11b      	bne.n	810bc68 <_dtoa_r+0xb8>
 810bc30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810bc32:	f242 730f 	movw	r3, #9999	; 0x270f
 810bc36:	6013      	str	r3, [r2, #0]
 810bc38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810bc3c:	4333      	orrs	r3, r6
 810bc3e:	f000 8593 	beq.w	810c768 <_dtoa_r+0xbb8>
 810bc42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bc44:	b963      	cbnz	r3, 810bc60 <_dtoa_r+0xb0>
 810bc46:	4b97      	ldr	r3, [pc, #604]	; (810bea4 <_dtoa_r+0x2f4>)
 810bc48:	e027      	b.n	810bc9a <_dtoa_r+0xea>
 810bc4a:	4b97      	ldr	r3, [pc, #604]	; (810bea8 <_dtoa_r+0x2f8>)
 810bc4c:	9300      	str	r3, [sp, #0]
 810bc4e:	3308      	adds	r3, #8
 810bc50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810bc52:	6013      	str	r3, [r2, #0]
 810bc54:	9800      	ldr	r0, [sp, #0]
 810bc56:	b013      	add	sp, #76	; 0x4c
 810bc58:	ecbd 8b04 	vpop	{d8-d9}
 810bc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bc60:	4b90      	ldr	r3, [pc, #576]	; (810bea4 <_dtoa_r+0x2f4>)
 810bc62:	9300      	str	r3, [sp, #0]
 810bc64:	3303      	adds	r3, #3
 810bc66:	e7f3      	b.n	810bc50 <_dtoa_r+0xa0>
 810bc68:	ed9d 7b02 	vldr	d7, [sp, #8]
 810bc6c:	2200      	movs	r2, #0
 810bc6e:	ec51 0b17 	vmov	r0, r1, d7
 810bc72:	eeb0 8a47 	vmov.f32	s16, s14
 810bc76:	eef0 8a67 	vmov.f32	s17, s15
 810bc7a:	2300      	movs	r3, #0
 810bc7c:	f7f4 ffac 	bl	8100bd8 <__aeabi_dcmpeq>
 810bc80:	4681      	mov	r9, r0
 810bc82:	b160      	cbz	r0, 810bc9e <_dtoa_r+0xee>
 810bc84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810bc86:	2301      	movs	r3, #1
 810bc88:	6013      	str	r3, [r2, #0]
 810bc8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bc8c:	2b00      	cmp	r3, #0
 810bc8e:	f000 8568 	beq.w	810c762 <_dtoa_r+0xbb2>
 810bc92:	4b86      	ldr	r3, [pc, #536]	; (810beac <_dtoa_r+0x2fc>)
 810bc94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810bc96:	6013      	str	r3, [r2, #0]
 810bc98:	3b01      	subs	r3, #1
 810bc9a:	9300      	str	r3, [sp, #0]
 810bc9c:	e7da      	b.n	810bc54 <_dtoa_r+0xa4>
 810bc9e:	aa10      	add	r2, sp, #64	; 0x40
 810bca0:	a911      	add	r1, sp, #68	; 0x44
 810bca2:	4620      	mov	r0, r4
 810bca4:	eeb0 0a48 	vmov.f32	s0, s16
 810bca8:	eef0 0a68 	vmov.f32	s1, s17
 810bcac:	f001 f99a 	bl	810cfe4 <__d2b>
 810bcb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810bcb4:	4682      	mov	sl, r0
 810bcb6:	2d00      	cmp	r5, #0
 810bcb8:	d07f      	beq.n	810bdba <_dtoa_r+0x20a>
 810bcba:	ee18 3a90 	vmov	r3, s17
 810bcbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810bcc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810bcc6:	ec51 0b18 	vmov	r0, r1, d8
 810bcca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810bcce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810bcd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810bcd6:	4619      	mov	r1, r3
 810bcd8:	2200      	movs	r2, #0
 810bcda:	4b75      	ldr	r3, [pc, #468]	; (810beb0 <_dtoa_r+0x300>)
 810bcdc:	f7f4 fb5c 	bl	8100398 <__aeabi_dsub>
 810bce0:	a367      	add	r3, pc, #412	; (adr r3, 810be80 <_dtoa_r+0x2d0>)
 810bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bce6:	f7f4 fd0f 	bl	8100708 <__aeabi_dmul>
 810bcea:	a367      	add	r3, pc, #412	; (adr r3, 810be88 <_dtoa_r+0x2d8>)
 810bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bcf0:	f7f4 fb54 	bl	810039c <__adddf3>
 810bcf4:	4606      	mov	r6, r0
 810bcf6:	4628      	mov	r0, r5
 810bcf8:	460f      	mov	r7, r1
 810bcfa:	f7f4 fc9b 	bl	8100634 <__aeabi_i2d>
 810bcfe:	a364      	add	r3, pc, #400	; (adr r3, 810be90 <_dtoa_r+0x2e0>)
 810bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bd04:	f7f4 fd00 	bl	8100708 <__aeabi_dmul>
 810bd08:	4602      	mov	r2, r0
 810bd0a:	460b      	mov	r3, r1
 810bd0c:	4630      	mov	r0, r6
 810bd0e:	4639      	mov	r1, r7
 810bd10:	f7f4 fb44 	bl	810039c <__adddf3>
 810bd14:	4606      	mov	r6, r0
 810bd16:	460f      	mov	r7, r1
 810bd18:	f7f4 ffa6 	bl	8100c68 <__aeabi_d2iz>
 810bd1c:	2200      	movs	r2, #0
 810bd1e:	4683      	mov	fp, r0
 810bd20:	2300      	movs	r3, #0
 810bd22:	4630      	mov	r0, r6
 810bd24:	4639      	mov	r1, r7
 810bd26:	f7f4 ff61 	bl	8100bec <__aeabi_dcmplt>
 810bd2a:	b148      	cbz	r0, 810bd40 <_dtoa_r+0x190>
 810bd2c:	4658      	mov	r0, fp
 810bd2e:	f7f4 fc81 	bl	8100634 <__aeabi_i2d>
 810bd32:	4632      	mov	r2, r6
 810bd34:	463b      	mov	r3, r7
 810bd36:	f7f4 ff4f 	bl	8100bd8 <__aeabi_dcmpeq>
 810bd3a:	b908      	cbnz	r0, 810bd40 <_dtoa_r+0x190>
 810bd3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 810bd40:	f1bb 0f16 	cmp.w	fp, #22
 810bd44:	d857      	bhi.n	810bdf6 <_dtoa_r+0x246>
 810bd46:	4b5b      	ldr	r3, [pc, #364]	; (810beb4 <_dtoa_r+0x304>)
 810bd48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bd50:	ec51 0b18 	vmov	r0, r1, d8
 810bd54:	f7f4 ff4a 	bl	8100bec <__aeabi_dcmplt>
 810bd58:	2800      	cmp	r0, #0
 810bd5a:	d04e      	beq.n	810bdfa <_dtoa_r+0x24a>
 810bd5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 810bd60:	2300      	movs	r3, #0
 810bd62:	930c      	str	r3, [sp, #48]	; 0x30
 810bd64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810bd66:	1b5b      	subs	r3, r3, r5
 810bd68:	1e5a      	subs	r2, r3, #1
 810bd6a:	bf45      	ittet	mi
 810bd6c:	f1c3 0301 	rsbmi	r3, r3, #1
 810bd70:	9305      	strmi	r3, [sp, #20]
 810bd72:	2300      	movpl	r3, #0
 810bd74:	2300      	movmi	r3, #0
 810bd76:	9206      	str	r2, [sp, #24]
 810bd78:	bf54      	ite	pl
 810bd7a:	9305      	strpl	r3, [sp, #20]
 810bd7c:	9306      	strmi	r3, [sp, #24]
 810bd7e:	f1bb 0f00 	cmp.w	fp, #0
 810bd82:	db3c      	blt.n	810bdfe <_dtoa_r+0x24e>
 810bd84:	9b06      	ldr	r3, [sp, #24]
 810bd86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810bd8a:	445b      	add	r3, fp
 810bd8c:	9306      	str	r3, [sp, #24]
 810bd8e:	2300      	movs	r3, #0
 810bd90:	9308      	str	r3, [sp, #32]
 810bd92:	9b07      	ldr	r3, [sp, #28]
 810bd94:	2b09      	cmp	r3, #9
 810bd96:	d868      	bhi.n	810be6a <_dtoa_r+0x2ba>
 810bd98:	2b05      	cmp	r3, #5
 810bd9a:	bfc4      	itt	gt
 810bd9c:	3b04      	subgt	r3, #4
 810bd9e:	9307      	strgt	r3, [sp, #28]
 810bda0:	9b07      	ldr	r3, [sp, #28]
 810bda2:	f1a3 0302 	sub.w	r3, r3, #2
 810bda6:	bfcc      	ite	gt
 810bda8:	2500      	movgt	r5, #0
 810bdaa:	2501      	movle	r5, #1
 810bdac:	2b03      	cmp	r3, #3
 810bdae:	f200 8085 	bhi.w	810bebc <_dtoa_r+0x30c>
 810bdb2:	e8df f003 	tbb	[pc, r3]
 810bdb6:	3b2e      	.short	0x3b2e
 810bdb8:	5839      	.short	0x5839
 810bdba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810bdbe:	441d      	add	r5, r3
 810bdc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810bdc4:	2b20      	cmp	r3, #32
 810bdc6:	bfc1      	itttt	gt
 810bdc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810bdcc:	fa08 f803 	lslgt.w	r8, r8, r3
 810bdd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810bdd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 810bdd8:	bfd6      	itet	le
 810bdda:	f1c3 0320 	rsble	r3, r3, #32
 810bdde:	ea48 0003 	orrgt.w	r0, r8, r3
 810bde2:	fa06 f003 	lslle.w	r0, r6, r3
 810bde6:	f7f4 fc15 	bl	8100614 <__aeabi_ui2d>
 810bdea:	2201      	movs	r2, #1
 810bdec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810bdf0:	3d01      	subs	r5, #1
 810bdf2:	920e      	str	r2, [sp, #56]	; 0x38
 810bdf4:	e76f      	b.n	810bcd6 <_dtoa_r+0x126>
 810bdf6:	2301      	movs	r3, #1
 810bdf8:	e7b3      	b.n	810bd62 <_dtoa_r+0x1b2>
 810bdfa:	900c      	str	r0, [sp, #48]	; 0x30
 810bdfc:	e7b2      	b.n	810bd64 <_dtoa_r+0x1b4>
 810bdfe:	9b05      	ldr	r3, [sp, #20]
 810be00:	eba3 030b 	sub.w	r3, r3, fp
 810be04:	9305      	str	r3, [sp, #20]
 810be06:	f1cb 0300 	rsb	r3, fp, #0
 810be0a:	9308      	str	r3, [sp, #32]
 810be0c:	2300      	movs	r3, #0
 810be0e:	930b      	str	r3, [sp, #44]	; 0x2c
 810be10:	e7bf      	b.n	810bd92 <_dtoa_r+0x1e2>
 810be12:	2300      	movs	r3, #0
 810be14:	9309      	str	r3, [sp, #36]	; 0x24
 810be16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810be18:	2b00      	cmp	r3, #0
 810be1a:	dc52      	bgt.n	810bec2 <_dtoa_r+0x312>
 810be1c:	2301      	movs	r3, #1
 810be1e:	9301      	str	r3, [sp, #4]
 810be20:	9304      	str	r3, [sp, #16]
 810be22:	461a      	mov	r2, r3
 810be24:	920a      	str	r2, [sp, #40]	; 0x28
 810be26:	e00b      	b.n	810be40 <_dtoa_r+0x290>
 810be28:	2301      	movs	r3, #1
 810be2a:	e7f3      	b.n	810be14 <_dtoa_r+0x264>
 810be2c:	2300      	movs	r3, #0
 810be2e:	9309      	str	r3, [sp, #36]	; 0x24
 810be30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810be32:	445b      	add	r3, fp
 810be34:	9301      	str	r3, [sp, #4]
 810be36:	3301      	adds	r3, #1
 810be38:	2b01      	cmp	r3, #1
 810be3a:	9304      	str	r3, [sp, #16]
 810be3c:	bfb8      	it	lt
 810be3e:	2301      	movlt	r3, #1
 810be40:	69e0      	ldr	r0, [r4, #28]
 810be42:	2100      	movs	r1, #0
 810be44:	2204      	movs	r2, #4
 810be46:	f102 0614 	add.w	r6, r2, #20
 810be4a:	429e      	cmp	r6, r3
 810be4c:	d93d      	bls.n	810beca <_dtoa_r+0x31a>
 810be4e:	6041      	str	r1, [r0, #4]
 810be50:	4620      	mov	r0, r4
 810be52:	f000 fceb 	bl	810c82c <_Balloc>
 810be56:	9000      	str	r0, [sp, #0]
 810be58:	2800      	cmp	r0, #0
 810be5a:	d139      	bne.n	810bed0 <_dtoa_r+0x320>
 810be5c:	4b16      	ldr	r3, [pc, #88]	; (810beb8 <_dtoa_r+0x308>)
 810be5e:	4602      	mov	r2, r0
 810be60:	f240 11af 	movw	r1, #431	; 0x1af
 810be64:	e6bd      	b.n	810bbe2 <_dtoa_r+0x32>
 810be66:	2301      	movs	r3, #1
 810be68:	e7e1      	b.n	810be2e <_dtoa_r+0x27e>
 810be6a:	2501      	movs	r5, #1
 810be6c:	2300      	movs	r3, #0
 810be6e:	9307      	str	r3, [sp, #28]
 810be70:	9509      	str	r5, [sp, #36]	; 0x24
 810be72:	f04f 33ff 	mov.w	r3, #4294967295
 810be76:	9301      	str	r3, [sp, #4]
 810be78:	9304      	str	r3, [sp, #16]
 810be7a:	2200      	movs	r2, #0
 810be7c:	2312      	movs	r3, #18
 810be7e:	e7d1      	b.n	810be24 <_dtoa_r+0x274>
 810be80:	636f4361 	.word	0x636f4361
 810be84:	3fd287a7 	.word	0x3fd287a7
 810be88:	8b60c8b3 	.word	0x8b60c8b3
 810be8c:	3fc68a28 	.word	0x3fc68a28
 810be90:	509f79fb 	.word	0x509f79fb
 810be94:	3fd34413 	.word	0x3fd34413
 810be98:	081ec306 	.word	0x081ec306
 810be9c:	081ec31d 	.word	0x081ec31d
 810bea0:	7ff00000 	.word	0x7ff00000
 810bea4:	081ec302 	.word	0x081ec302
 810bea8:	081ec2f9 	.word	0x081ec2f9
 810beac:	081ec2d1 	.word	0x081ec2d1
 810beb0:	3ff80000 	.word	0x3ff80000
 810beb4:	081ec408 	.word	0x081ec408
 810beb8:	081ec375 	.word	0x081ec375
 810bebc:	2301      	movs	r3, #1
 810bebe:	9309      	str	r3, [sp, #36]	; 0x24
 810bec0:	e7d7      	b.n	810be72 <_dtoa_r+0x2c2>
 810bec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bec4:	9301      	str	r3, [sp, #4]
 810bec6:	9304      	str	r3, [sp, #16]
 810bec8:	e7ba      	b.n	810be40 <_dtoa_r+0x290>
 810beca:	3101      	adds	r1, #1
 810becc:	0052      	lsls	r2, r2, #1
 810bece:	e7ba      	b.n	810be46 <_dtoa_r+0x296>
 810bed0:	69e3      	ldr	r3, [r4, #28]
 810bed2:	9a00      	ldr	r2, [sp, #0]
 810bed4:	601a      	str	r2, [r3, #0]
 810bed6:	9b04      	ldr	r3, [sp, #16]
 810bed8:	2b0e      	cmp	r3, #14
 810beda:	f200 80a8 	bhi.w	810c02e <_dtoa_r+0x47e>
 810bede:	2d00      	cmp	r5, #0
 810bee0:	f000 80a5 	beq.w	810c02e <_dtoa_r+0x47e>
 810bee4:	f1bb 0f00 	cmp.w	fp, #0
 810bee8:	dd38      	ble.n	810bf5c <_dtoa_r+0x3ac>
 810beea:	4bc0      	ldr	r3, [pc, #768]	; (810c1ec <_dtoa_r+0x63c>)
 810beec:	f00b 020f 	and.w	r2, fp, #15
 810bef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bef4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810bef8:	e9d3 6700 	ldrd	r6, r7, [r3]
 810befc:	ea4f 182b 	mov.w	r8, fp, asr #4
 810bf00:	d019      	beq.n	810bf36 <_dtoa_r+0x386>
 810bf02:	4bbb      	ldr	r3, [pc, #748]	; (810c1f0 <_dtoa_r+0x640>)
 810bf04:	ec51 0b18 	vmov	r0, r1, d8
 810bf08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810bf0c:	f7f4 fd26 	bl	810095c <__aeabi_ddiv>
 810bf10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bf14:	f008 080f 	and.w	r8, r8, #15
 810bf18:	2503      	movs	r5, #3
 810bf1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810c1f0 <_dtoa_r+0x640>
 810bf1e:	f1b8 0f00 	cmp.w	r8, #0
 810bf22:	d10a      	bne.n	810bf3a <_dtoa_r+0x38a>
 810bf24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bf28:	4632      	mov	r2, r6
 810bf2a:	463b      	mov	r3, r7
 810bf2c:	f7f4 fd16 	bl	810095c <__aeabi_ddiv>
 810bf30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bf34:	e02b      	b.n	810bf8e <_dtoa_r+0x3de>
 810bf36:	2502      	movs	r5, #2
 810bf38:	e7ef      	b.n	810bf1a <_dtoa_r+0x36a>
 810bf3a:	f018 0f01 	tst.w	r8, #1
 810bf3e:	d008      	beq.n	810bf52 <_dtoa_r+0x3a2>
 810bf40:	4630      	mov	r0, r6
 810bf42:	4639      	mov	r1, r7
 810bf44:	e9d9 2300 	ldrd	r2, r3, [r9]
 810bf48:	f7f4 fbde 	bl	8100708 <__aeabi_dmul>
 810bf4c:	3501      	adds	r5, #1
 810bf4e:	4606      	mov	r6, r0
 810bf50:	460f      	mov	r7, r1
 810bf52:	ea4f 0868 	mov.w	r8, r8, asr #1
 810bf56:	f109 0908 	add.w	r9, r9, #8
 810bf5a:	e7e0      	b.n	810bf1e <_dtoa_r+0x36e>
 810bf5c:	f000 809f 	beq.w	810c09e <_dtoa_r+0x4ee>
 810bf60:	f1cb 0600 	rsb	r6, fp, #0
 810bf64:	4ba1      	ldr	r3, [pc, #644]	; (810c1ec <_dtoa_r+0x63c>)
 810bf66:	4fa2      	ldr	r7, [pc, #648]	; (810c1f0 <_dtoa_r+0x640>)
 810bf68:	f006 020f 	and.w	r2, r6, #15
 810bf6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bf74:	ec51 0b18 	vmov	r0, r1, d8
 810bf78:	f7f4 fbc6 	bl	8100708 <__aeabi_dmul>
 810bf7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bf80:	1136      	asrs	r6, r6, #4
 810bf82:	2300      	movs	r3, #0
 810bf84:	2502      	movs	r5, #2
 810bf86:	2e00      	cmp	r6, #0
 810bf88:	d17e      	bne.n	810c088 <_dtoa_r+0x4d8>
 810bf8a:	2b00      	cmp	r3, #0
 810bf8c:	d1d0      	bne.n	810bf30 <_dtoa_r+0x380>
 810bf8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bf90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810bf94:	2b00      	cmp	r3, #0
 810bf96:	f000 8084 	beq.w	810c0a2 <_dtoa_r+0x4f2>
 810bf9a:	4b96      	ldr	r3, [pc, #600]	; (810c1f4 <_dtoa_r+0x644>)
 810bf9c:	2200      	movs	r2, #0
 810bf9e:	4640      	mov	r0, r8
 810bfa0:	4649      	mov	r1, r9
 810bfa2:	f7f4 fe23 	bl	8100bec <__aeabi_dcmplt>
 810bfa6:	2800      	cmp	r0, #0
 810bfa8:	d07b      	beq.n	810c0a2 <_dtoa_r+0x4f2>
 810bfaa:	9b04      	ldr	r3, [sp, #16]
 810bfac:	2b00      	cmp	r3, #0
 810bfae:	d078      	beq.n	810c0a2 <_dtoa_r+0x4f2>
 810bfb0:	9b01      	ldr	r3, [sp, #4]
 810bfb2:	2b00      	cmp	r3, #0
 810bfb4:	dd39      	ble.n	810c02a <_dtoa_r+0x47a>
 810bfb6:	4b90      	ldr	r3, [pc, #576]	; (810c1f8 <_dtoa_r+0x648>)
 810bfb8:	2200      	movs	r2, #0
 810bfba:	4640      	mov	r0, r8
 810bfbc:	4649      	mov	r1, r9
 810bfbe:	f7f4 fba3 	bl	8100708 <__aeabi_dmul>
 810bfc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bfc6:	9e01      	ldr	r6, [sp, #4]
 810bfc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 810bfcc:	3501      	adds	r5, #1
 810bfce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810bfd2:	4628      	mov	r0, r5
 810bfd4:	f7f4 fb2e 	bl	8100634 <__aeabi_i2d>
 810bfd8:	4642      	mov	r2, r8
 810bfda:	464b      	mov	r3, r9
 810bfdc:	f7f4 fb94 	bl	8100708 <__aeabi_dmul>
 810bfe0:	4b86      	ldr	r3, [pc, #536]	; (810c1fc <_dtoa_r+0x64c>)
 810bfe2:	2200      	movs	r2, #0
 810bfe4:	f7f4 f9da 	bl	810039c <__adddf3>
 810bfe8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810bfec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bff0:	9303      	str	r3, [sp, #12]
 810bff2:	2e00      	cmp	r6, #0
 810bff4:	d158      	bne.n	810c0a8 <_dtoa_r+0x4f8>
 810bff6:	4b82      	ldr	r3, [pc, #520]	; (810c200 <_dtoa_r+0x650>)
 810bff8:	2200      	movs	r2, #0
 810bffa:	4640      	mov	r0, r8
 810bffc:	4649      	mov	r1, r9
 810bffe:	f7f4 f9cb 	bl	8100398 <__aeabi_dsub>
 810c002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810c006:	4680      	mov	r8, r0
 810c008:	4689      	mov	r9, r1
 810c00a:	f7f4 fe0d 	bl	8100c28 <__aeabi_dcmpgt>
 810c00e:	2800      	cmp	r0, #0
 810c010:	f040 8296 	bne.w	810c540 <_dtoa_r+0x990>
 810c014:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810c018:	4640      	mov	r0, r8
 810c01a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c01e:	4649      	mov	r1, r9
 810c020:	f7f4 fde4 	bl	8100bec <__aeabi_dcmplt>
 810c024:	2800      	cmp	r0, #0
 810c026:	f040 8289 	bne.w	810c53c <_dtoa_r+0x98c>
 810c02a:	ed8d 8b02 	vstr	d8, [sp, #8]
 810c02e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810c030:	2b00      	cmp	r3, #0
 810c032:	f2c0 814e 	blt.w	810c2d2 <_dtoa_r+0x722>
 810c036:	f1bb 0f0e 	cmp.w	fp, #14
 810c03a:	f300 814a 	bgt.w	810c2d2 <_dtoa_r+0x722>
 810c03e:	4b6b      	ldr	r3, [pc, #428]	; (810c1ec <_dtoa_r+0x63c>)
 810c040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810c044:	e9d3 8900 	ldrd	r8, r9, [r3]
 810c048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c04a:	2b00      	cmp	r3, #0
 810c04c:	f280 80dc 	bge.w	810c208 <_dtoa_r+0x658>
 810c050:	9b04      	ldr	r3, [sp, #16]
 810c052:	2b00      	cmp	r3, #0
 810c054:	f300 80d8 	bgt.w	810c208 <_dtoa_r+0x658>
 810c058:	f040 826f 	bne.w	810c53a <_dtoa_r+0x98a>
 810c05c:	4b68      	ldr	r3, [pc, #416]	; (810c200 <_dtoa_r+0x650>)
 810c05e:	2200      	movs	r2, #0
 810c060:	4640      	mov	r0, r8
 810c062:	4649      	mov	r1, r9
 810c064:	f7f4 fb50 	bl	8100708 <__aeabi_dmul>
 810c068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810c06c:	f7f4 fdd2 	bl	8100c14 <__aeabi_dcmpge>
 810c070:	9e04      	ldr	r6, [sp, #16]
 810c072:	4637      	mov	r7, r6
 810c074:	2800      	cmp	r0, #0
 810c076:	f040 8245 	bne.w	810c504 <_dtoa_r+0x954>
 810c07a:	9d00      	ldr	r5, [sp, #0]
 810c07c:	2331      	movs	r3, #49	; 0x31
 810c07e:	f805 3b01 	strb.w	r3, [r5], #1
 810c082:	f10b 0b01 	add.w	fp, fp, #1
 810c086:	e241      	b.n	810c50c <_dtoa_r+0x95c>
 810c088:	07f2      	lsls	r2, r6, #31
 810c08a:	d505      	bpl.n	810c098 <_dtoa_r+0x4e8>
 810c08c:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c090:	f7f4 fb3a 	bl	8100708 <__aeabi_dmul>
 810c094:	3501      	adds	r5, #1
 810c096:	2301      	movs	r3, #1
 810c098:	1076      	asrs	r6, r6, #1
 810c09a:	3708      	adds	r7, #8
 810c09c:	e773      	b.n	810bf86 <_dtoa_r+0x3d6>
 810c09e:	2502      	movs	r5, #2
 810c0a0:	e775      	b.n	810bf8e <_dtoa_r+0x3de>
 810c0a2:	9e04      	ldr	r6, [sp, #16]
 810c0a4:	465f      	mov	r7, fp
 810c0a6:	e792      	b.n	810bfce <_dtoa_r+0x41e>
 810c0a8:	9900      	ldr	r1, [sp, #0]
 810c0aa:	4b50      	ldr	r3, [pc, #320]	; (810c1ec <_dtoa_r+0x63c>)
 810c0ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 810c0b0:	4431      	add	r1, r6
 810c0b2:	9102      	str	r1, [sp, #8]
 810c0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c0b6:	eeb0 9a47 	vmov.f32	s18, s14
 810c0ba:	eef0 9a67 	vmov.f32	s19, s15
 810c0be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810c0c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810c0c6:	2900      	cmp	r1, #0
 810c0c8:	d044      	beq.n	810c154 <_dtoa_r+0x5a4>
 810c0ca:	494e      	ldr	r1, [pc, #312]	; (810c204 <_dtoa_r+0x654>)
 810c0cc:	2000      	movs	r0, #0
 810c0ce:	f7f4 fc45 	bl	810095c <__aeabi_ddiv>
 810c0d2:	ec53 2b19 	vmov	r2, r3, d9
 810c0d6:	f7f4 f95f 	bl	8100398 <__aeabi_dsub>
 810c0da:	9d00      	ldr	r5, [sp, #0]
 810c0dc:	ec41 0b19 	vmov	d9, r0, r1
 810c0e0:	4649      	mov	r1, r9
 810c0e2:	4640      	mov	r0, r8
 810c0e4:	f7f4 fdc0 	bl	8100c68 <__aeabi_d2iz>
 810c0e8:	4606      	mov	r6, r0
 810c0ea:	f7f4 faa3 	bl	8100634 <__aeabi_i2d>
 810c0ee:	4602      	mov	r2, r0
 810c0f0:	460b      	mov	r3, r1
 810c0f2:	4640      	mov	r0, r8
 810c0f4:	4649      	mov	r1, r9
 810c0f6:	f7f4 f94f 	bl	8100398 <__aeabi_dsub>
 810c0fa:	3630      	adds	r6, #48	; 0x30
 810c0fc:	f805 6b01 	strb.w	r6, [r5], #1
 810c100:	ec53 2b19 	vmov	r2, r3, d9
 810c104:	4680      	mov	r8, r0
 810c106:	4689      	mov	r9, r1
 810c108:	f7f4 fd70 	bl	8100bec <__aeabi_dcmplt>
 810c10c:	2800      	cmp	r0, #0
 810c10e:	d164      	bne.n	810c1da <_dtoa_r+0x62a>
 810c110:	4642      	mov	r2, r8
 810c112:	464b      	mov	r3, r9
 810c114:	4937      	ldr	r1, [pc, #220]	; (810c1f4 <_dtoa_r+0x644>)
 810c116:	2000      	movs	r0, #0
 810c118:	f7f4 f93e 	bl	8100398 <__aeabi_dsub>
 810c11c:	ec53 2b19 	vmov	r2, r3, d9
 810c120:	f7f4 fd64 	bl	8100bec <__aeabi_dcmplt>
 810c124:	2800      	cmp	r0, #0
 810c126:	f040 80b6 	bne.w	810c296 <_dtoa_r+0x6e6>
 810c12a:	9b02      	ldr	r3, [sp, #8]
 810c12c:	429d      	cmp	r5, r3
 810c12e:	f43f af7c 	beq.w	810c02a <_dtoa_r+0x47a>
 810c132:	4b31      	ldr	r3, [pc, #196]	; (810c1f8 <_dtoa_r+0x648>)
 810c134:	ec51 0b19 	vmov	r0, r1, d9
 810c138:	2200      	movs	r2, #0
 810c13a:	f7f4 fae5 	bl	8100708 <__aeabi_dmul>
 810c13e:	4b2e      	ldr	r3, [pc, #184]	; (810c1f8 <_dtoa_r+0x648>)
 810c140:	ec41 0b19 	vmov	d9, r0, r1
 810c144:	2200      	movs	r2, #0
 810c146:	4640      	mov	r0, r8
 810c148:	4649      	mov	r1, r9
 810c14a:	f7f4 fadd 	bl	8100708 <__aeabi_dmul>
 810c14e:	4680      	mov	r8, r0
 810c150:	4689      	mov	r9, r1
 810c152:	e7c5      	b.n	810c0e0 <_dtoa_r+0x530>
 810c154:	ec51 0b17 	vmov	r0, r1, d7
 810c158:	f7f4 fad6 	bl	8100708 <__aeabi_dmul>
 810c15c:	9b02      	ldr	r3, [sp, #8]
 810c15e:	9d00      	ldr	r5, [sp, #0]
 810c160:	930f      	str	r3, [sp, #60]	; 0x3c
 810c162:	ec41 0b19 	vmov	d9, r0, r1
 810c166:	4649      	mov	r1, r9
 810c168:	4640      	mov	r0, r8
 810c16a:	f7f4 fd7d 	bl	8100c68 <__aeabi_d2iz>
 810c16e:	4606      	mov	r6, r0
 810c170:	f7f4 fa60 	bl	8100634 <__aeabi_i2d>
 810c174:	3630      	adds	r6, #48	; 0x30
 810c176:	4602      	mov	r2, r0
 810c178:	460b      	mov	r3, r1
 810c17a:	4640      	mov	r0, r8
 810c17c:	4649      	mov	r1, r9
 810c17e:	f7f4 f90b 	bl	8100398 <__aeabi_dsub>
 810c182:	f805 6b01 	strb.w	r6, [r5], #1
 810c186:	9b02      	ldr	r3, [sp, #8]
 810c188:	429d      	cmp	r5, r3
 810c18a:	4680      	mov	r8, r0
 810c18c:	4689      	mov	r9, r1
 810c18e:	f04f 0200 	mov.w	r2, #0
 810c192:	d124      	bne.n	810c1de <_dtoa_r+0x62e>
 810c194:	4b1b      	ldr	r3, [pc, #108]	; (810c204 <_dtoa_r+0x654>)
 810c196:	ec51 0b19 	vmov	r0, r1, d9
 810c19a:	f7f4 f8ff 	bl	810039c <__adddf3>
 810c19e:	4602      	mov	r2, r0
 810c1a0:	460b      	mov	r3, r1
 810c1a2:	4640      	mov	r0, r8
 810c1a4:	4649      	mov	r1, r9
 810c1a6:	f7f4 fd3f 	bl	8100c28 <__aeabi_dcmpgt>
 810c1aa:	2800      	cmp	r0, #0
 810c1ac:	d173      	bne.n	810c296 <_dtoa_r+0x6e6>
 810c1ae:	ec53 2b19 	vmov	r2, r3, d9
 810c1b2:	4914      	ldr	r1, [pc, #80]	; (810c204 <_dtoa_r+0x654>)
 810c1b4:	2000      	movs	r0, #0
 810c1b6:	f7f4 f8ef 	bl	8100398 <__aeabi_dsub>
 810c1ba:	4602      	mov	r2, r0
 810c1bc:	460b      	mov	r3, r1
 810c1be:	4640      	mov	r0, r8
 810c1c0:	4649      	mov	r1, r9
 810c1c2:	f7f4 fd13 	bl	8100bec <__aeabi_dcmplt>
 810c1c6:	2800      	cmp	r0, #0
 810c1c8:	f43f af2f 	beq.w	810c02a <_dtoa_r+0x47a>
 810c1cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810c1ce:	1e6b      	subs	r3, r5, #1
 810c1d0:	930f      	str	r3, [sp, #60]	; 0x3c
 810c1d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810c1d6:	2b30      	cmp	r3, #48	; 0x30
 810c1d8:	d0f8      	beq.n	810c1cc <_dtoa_r+0x61c>
 810c1da:	46bb      	mov	fp, r7
 810c1dc:	e04a      	b.n	810c274 <_dtoa_r+0x6c4>
 810c1de:	4b06      	ldr	r3, [pc, #24]	; (810c1f8 <_dtoa_r+0x648>)
 810c1e0:	f7f4 fa92 	bl	8100708 <__aeabi_dmul>
 810c1e4:	4680      	mov	r8, r0
 810c1e6:	4689      	mov	r9, r1
 810c1e8:	e7bd      	b.n	810c166 <_dtoa_r+0x5b6>
 810c1ea:	bf00      	nop
 810c1ec:	081ec408 	.word	0x081ec408
 810c1f0:	081ec3e0 	.word	0x081ec3e0
 810c1f4:	3ff00000 	.word	0x3ff00000
 810c1f8:	40240000 	.word	0x40240000
 810c1fc:	401c0000 	.word	0x401c0000
 810c200:	40140000 	.word	0x40140000
 810c204:	3fe00000 	.word	0x3fe00000
 810c208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c20c:	9d00      	ldr	r5, [sp, #0]
 810c20e:	4642      	mov	r2, r8
 810c210:	464b      	mov	r3, r9
 810c212:	4630      	mov	r0, r6
 810c214:	4639      	mov	r1, r7
 810c216:	f7f4 fba1 	bl	810095c <__aeabi_ddiv>
 810c21a:	f7f4 fd25 	bl	8100c68 <__aeabi_d2iz>
 810c21e:	9001      	str	r0, [sp, #4]
 810c220:	f7f4 fa08 	bl	8100634 <__aeabi_i2d>
 810c224:	4642      	mov	r2, r8
 810c226:	464b      	mov	r3, r9
 810c228:	f7f4 fa6e 	bl	8100708 <__aeabi_dmul>
 810c22c:	4602      	mov	r2, r0
 810c22e:	460b      	mov	r3, r1
 810c230:	4630      	mov	r0, r6
 810c232:	4639      	mov	r1, r7
 810c234:	f7f4 f8b0 	bl	8100398 <__aeabi_dsub>
 810c238:	9e01      	ldr	r6, [sp, #4]
 810c23a:	9f04      	ldr	r7, [sp, #16]
 810c23c:	3630      	adds	r6, #48	; 0x30
 810c23e:	f805 6b01 	strb.w	r6, [r5], #1
 810c242:	9e00      	ldr	r6, [sp, #0]
 810c244:	1bae      	subs	r6, r5, r6
 810c246:	42b7      	cmp	r7, r6
 810c248:	4602      	mov	r2, r0
 810c24a:	460b      	mov	r3, r1
 810c24c:	d134      	bne.n	810c2b8 <_dtoa_r+0x708>
 810c24e:	f7f4 f8a5 	bl	810039c <__adddf3>
 810c252:	4642      	mov	r2, r8
 810c254:	464b      	mov	r3, r9
 810c256:	4606      	mov	r6, r0
 810c258:	460f      	mov	r7, r1
 810c25a:	f7f4 fce5 	bl	8100c28 <__aeabi_dcmpgt>
 810c25e:	b9c8      	cbnz	r0, 810c294 <_dtoa_r+0x6e4>
 810c260:	4642      	mov	r2, r8
 810c262:	464b      	mov	r3, r9
 810c264:	4630      	mov	r0, r6
 810c266:	4639      	mov	r1, r7
 810c268:	f7f4 fcb6 	bl	8100bd8 <__aeabi_dcmpeq>
 810c26c:	b110      	cbz	r0, 810c274 <_dtoa_r+0x6c4>
 810c26e:	9b01      	ldr	r3, [sp, #4]
 810c270:	07db      	lsls	r3, r3, #31
 810c272:	d40f      	bmi.n	810c294 <_dtoa_r+0x6e4>
 810c274:	4651      	mov	r1, sl
 810c276:	4620      	mov	r0, r4
 810c278:	f000 fb18 	bl	810c8ac <_Bfree>
 810c27c:	2300      	movs	r3, #0
 810c27e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c280:	702b      	strb	r3, [r5, #0]
 810c282:	f10b 0301 	add.w	r3, fp, #1
 810c286:	6013      	str	r3, [r2, #0]
 810c288:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c28a:	2b00      	cmp	r3, #0
 810c28c:	f43f ace2 	beq.w	810bc54 <_dtoa_r+0xa4>
 810c290:	601d      	str	r5, [r3, #0]
 810c292:	e4df      	b.n	810bc54 <_dtoa_r+0xa4>
 810c294:	465f      	mov	r7, fp
 810c296:	462b      	mov	r3, r5
 810c298:	461d      	mov	r5, r3
 810c29a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c29e:	2a39      	cmp	r2, #57	; 0x39
 810c2a0:	d106      	bne.n	810c2b0 <_dtoa_r+0x700>
 810c2a2:	9a00      	ldr	r2, [sp, #0]
 810c2a4:	429a      	cmp	r2, r3
 810c2a6:	d1f7      	bne.n	810c298 <_dtoa_r+0x6e8>
 810c2a8:	9900      	ldr	r1, [sp, #0]
 810c2aa:	2230      	movs	r2, #48	; 0x30
 810c2ac:	3701      	adds	r7, #1
 810c2ae:	700a      	strb	r2, [r1, #0]
 810c2b0:	781a      	ldrb	r2, [r3, #0]
 810c2b2:	3201      	adds	r2, #1
 810c2b4:	701a      	strb	r2, [r3, #0]
 810c2b6:	e790      	b.n	810c1da <_dtoa_r+0x62a>
 810c2b8:	4ba3      	ldr	r3, [pc, #652]	; (810c548 <_dtoa_r+0x998>)
 810c2ba:	2200      	movs	r2, #0
 810c2bc:	f7f4 fa24 	bl	8100708 <__aeabi_dmul>
 810c2c0:	2200      	movs	r2, #0
 810c2c2:	2300      	movs	r3, #0
 810c2c4:	4606      	mov	r6, r0
 810c2c6:	460f      	mov	r7, r1
 810c2c8:	f7f4 fc86 	bl	8100bd8 <__aeabi_dcmpeq>
 810c2cc:	2800      	cmp	r0, #0
 810c2ce:	d09e      	beq.n	810c20e <_dtoa_r+0x65e>
 810c2d0:	e7d0      	b.n	810c274 <_dtoa_r+0x6c4>
 810c2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c2d4:	2a00      	cmp	r2, #0
 810c2d6:	f000 80ca 	beq.w	810c46e <_dtoa_r+0x8be>
 810c2da:	9a07      	ldr	r2, [sp, #28]
 810c2dc:	2a01      	cmp	r2, #1
 810c2de:	f300 80ad 	bgt.w	810c43c <_dtoa_r+0x88c>
 810c2e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810c2e4:	2a00      	cmp	r2, #0
 810c2e6:	f000 80a5 	beq.w	810c434 <_dtoa_r+0x884>
 810c2ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810c2ee:	9e08      	ldr	r6, [sp, #32]
 810c2f0:	9d05      	ldr	r5, [sp, #20]
 810c2f2:	9a05      	ldr	r2, [sp, #20]
 810c2f4:	441a      	add	r2, r3
 810c2f6:	9205      	str	r2, [sp, #20]
 810c2f8:	9a06      	ldr	r2, [sp, #24]
 810c2fa:	2101      	movs	r1, #1
 810c2fc:	441a      	add	r2, r3
 810c2fe:	4620      	mov	r0, r4
 810c300:	9206      	str	r2, [sp, #24]
 810c302:	f000 fbd3 	bl	810caac <__i2b>
 810c306:	4607      	mov	r7, r0
 810c308:	b165      	cbz	r5, 810c324 <_dtoa_r+0x774>
 810c30a:	9b06      	ldr	r3, [sp, #24]
 810c30c:	2b00      	cmp	r3, #0
 810c30e:	dd09      	ble.n	810c324 <_dtoa_r+0x774>
 810c310:	42ab      	cmp	r3, r5
 810c312:	9a05      	ldr	r2, [sp, #20]
 810c314:	bfa8      	it	ge
 810c316:	462b      	movge	r3, r5
 810c318:	1ad2      	subs	r2, r2, r3
 810c31a:	9205      	str	r2, [sp, #20]
 810c31c:	9a06      	ldr	r2, [sp, #24]
 810c31e:	1aed      	subs	r5, r5, r3
 810c320:	1ad3      	subs	r3, r2, r3
 810c322:	9306      	str	r3, [sp, #24]
 810c324:	9b08      	ldr	r3, [sp, #32]
 810c326:	b1f3      	cbz	r3, 810c366 <_dtoa_r+0x7b6>
 810c328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c32a:	2b00      	cmp	r3, #0
 810c32c:	f000 80a3 	beq.w	810c476 <_dtoa_r+0x8c6>
 810c330:	2e00      	cmp	r6, #0
 810c332:	dd10      	ble.n	810c356 <_dtoa_r+0x7a6>
 810c334:	4639      	mov	r1, r7
 810c336:	4632      	mov	r2, r6
 810c338:	4620      	mov	r0, r4
 810c33a:	f000 fc77 	bl	810cc2c <__pow5mult>
 810c33e:	4652      	mov	r2, sl
 810c340:	4601      	mov	r1, r0
 810c342:	4607      	mov	r7, r0
 810c344:	4620      	mov	r0, r4
 810c346:	f000 fbc7 	bl	810cad8 <__multiply>
 810c34a:	4651      	mov	r1, sl
 810c34c:	4680      	mov	r8, r0
 810c34e:	4620      	mov	r0, r4
 810c350:	f000 faac 	bl	810c8ac <_Bfree>
 810c354:	46c2      	mov	sl, r8
 810c356:	9b08      	ldr	r3, [sp, #32]
 810c358:	1b9a      	subs	r2, r3, r6
 810c35a:	d004      	beq.n	810c366 <_dtoa_r+0x7b6>
 810c35c:	4651      	mov	r1, sl
 810c35e:	4620      	mov	r0, r4
 810c360:	f000 fc64 	bl	810cc2c <__pow5mult>
 810c364:	4682      	mov	sl, r0
 810c366:	2101      	movs	r1, #1
 810c368:	4620      	mov	r0, r4
 810c36a:	f000 fb9f 	bl	810caac <__i2b>
 810c36e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c370:	2b00      	cmp	r3, #0
 810c372:	4606      	mov	r6, r0
 810c374:	f340 8081 	ble.w	810c47a <_dtoa_r+0x8ca>
 810c378:	461a      	mov	r2, r3
 810c37a:	4601      	mov	r1, r0
 810c37c:	4620      	mov	r0, r4
 810c37e:	f000 fc55 	bl	810cc2c <__pow5mult>
 810c382:	9b07      	ldr	r3, [sp, #28]
 810c384:	2b01      	cmp	r3, #1
 810c386:	4606      	mov	r6, r0
 810c388:	dd7a      	ble.n	810c480 <_dtoa_r+0x8d0>
 810c38a:	f04f 0800 	mov.w	r8, #0
 810c38e:	6933      	ldr	r3, [r6, #16]
 810c390:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810c394:	6918      	ldr	r0, [r3, #16]
 810c396:	f000 fb3b 	bl	810ca10 <__hi0bits>
 810c39a:	f1c0 0020 	rsb	r0, r0, #32
 810c39e:	9b06      	ldr	r3, [sp, #24]
 810c3a0:	4418      	add	r0, r3
 810c3a2:	f010 001f 	ands.w	r0, r0, #31
 810c3a6:	f000 8094 	beq.w	810c4d2 <_dtoa_r+0x922>
 810c3aa:	f1c0 0320 	rsb	r3, r0, #32
 810c3ae:	2b04      	cmp	r3, #4
 810c3b0:	f340 8085 	ble.w	810c4be <_dtoa_r+0x90e>
 810c3b4:	9b05      	ldr	r3, [sp, #20]
 810c3b6:	f1c0 001c 	rsb	r0, r0, #28
 810c3ba:	4403      	add	r3, r0
 810c3bc:	9305      	str	r3, [sp, #20]
 810c3be:	9b06      	ldr	r3, [sp, #24]
 810c3c0:	4403      	add	r3, r0
 810c3c2:	4405      	add	r5, r0
 810c3c4:	9306      	str	r3, [sp, #24]
 810c3c6:	9b05      	ldr	r3, [sp, #20]
 810c3c8:	2b00      	cmp	r3, #0
 810c3ca:	dd05      	ble.n	810c3d8 <_dtoa_r+0x828>
 810c3cc:	4651      	mov	r1, sl
 810c3ce:	461a      	mov	r2, r3
 810c3d0:	4620      	mov	r0, r4
 810c3d2:	f000 fc85 	bl	810cce0 <__lshift>
 810c3d6:	4682      	mov	sl, r0
 810c3d8:	9b06      	ldr	r3, [sp, #24]
 810c3da:	2b00      	cmp	r3, #0
 810c3dc:	dd05      	ble.n	810c3ea <_dtoa_r+0x83a>
 810c3de:	4631      	mov	r1, r6
 810c3e0:	461a      	mov	r2, r3
 810c3e2:	4620      	mov	r0, r4
 810c3e4:	f000 fc7c 	bl	810cce0 <__lshift>
 810c3e8:	4606      	mov	r6, r0
 810c3ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810c3ec:	2b00      	cmp	r3, #0
 810c3ee:	d072      	beq.n	810c4d6 <_dtoa_r+0x926>
 810c3f0:	4631      	mov	r1, r6
 810c3f2:	4650      	mov	r0, sl
 810c3f4:	f000 fce0 	bl	810cdb8 <__mcmp>
 810c3f8:	2800      	cmp	r0, #0
 810c3fa:	da6c      	bge.n	810c4d6 <_dtoa_r+0x926>
 810c3fc:	2300      	movs	r3, #0
 810c3fe:	4651      	mov	r1, sl
 810c400:	220a      	movs	r2, #10
 810c402:	4620      	mov	r0, r4
 810c404:	f000 fa74 	bl	810c8f0 <__multadd>
 810c408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c40a:	f10b 3bff 	add.w	fp, fp, #4294967295
 810c40e:	4682      	mov	sl, r0
 810c410:	2b00      	cmp	r3, #0
 810c412:	f000 81b0 	beq.w	810c776 <_dtoa_r+0xbc6>
 810c416:	2300      	movs	r3, #0
 810c418:	4639      	mov	r1, r7
 810c41a:	220a      	movs	r2, #10
 810c41c:	4620      	mov	r0, r4
 810c41e:	f000 fa67 	bl	810c8f0 <__multadd>
 810c422:	9b01      	ldr	r3, [sp, #4]
 810c424:	2b00      	cmp	r3, #0
 810c426:	4607      	mov	r7, r0
 810c428:	f300 8096 	bgt.w	810c558 <_dtoa_r+0x9a8>
 810c42c:	9b07      	ldr	r3, [sp, #28]
 810c42e:	2b02      	cmp	r3, #2
 810c430:	dc59      	bgt.n	810c4e6 <_dtoa_r+0x936>
 810c432:	e091      	b.n	810c558 <_dtoa_r+0x9a8>
 810c434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810c436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810c43a:	e758      	b.n	810c2ee <_dtoa_r+0x73e>
 810c43c:	9b04      	ldr	r3, [sp, #16]
 810c43e:	1e5e      	subs	r6, r3, #1
 810c440:	9b08      	ldr	r3, [sp, #32]
 810c442:	42b3      	cmp	r3, r6
 810c444:	bfbf      	itttt	lt
 810c446:	9b08      	ldrlt	r3, [sp, #32]
 810c448:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810c44a:	9608      	strlt	r6, [sp, #32]
 810c44c:	1af3      	sublt	r3, r6, r3
 810c44e:	bfb4      	ite	lt
 810c450:	18d2      	addlt	r2, r2, r3
 810c452:	1b9e      	subge	r6, r3, r6
 810c454:	9b04      	ldr	r3, [sp, #16]
 810c456:	bfbc      	itt	lt
 810c458:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810c45a:	2600      	movlt	r6, #0
 810c45c:	2b00      	cmp	r3, #0
 810c45e:	bfb7      	itett	lt
 810c460:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810c464:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810c468:	1a9d      	sublt	r5, r3, r2
 810c46a:	2300      	movlt	r3, #0
 810c46c:	e741      	b.n	810c2f2 <_dtoa_r+0x742>
 810c46e:	9e08      	ldr	r6, [sp, #32]
 810c470:	9d05      	ldr	r5, [sp, #20]
 810c472:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810c474:	e748      	b.n	810c308 <_dtoa_r+0x758>
 810c476:	9a08      	ldr	r2, [sp, #32]
 810c478:	e770      	b.n	810c35c <_dtoa_r+0x7ac>
 810c47a:	9b07      	ldr	r3, [sp, #28]
 810c47c:	2b01      	cmp	r3, #1
 810c47e:	dc19      	bgt.n	810c4b4 <_dtoa_r+0x904>
 810c480:	9b02      	ldr	r3, [sp, #8]
 810c482:	b9bb      	cbnz	r3, 810c4b4 <_dtoa_r+0x904>
 810c484:	9b03      	ldr	r3, [sp, #12]
 810c486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810c48a:	b99b      	cbnz	r3, 810c4b4 <_dtoa_r+0x904>
 810c48c:	9b03      	ldr	r3, [sp, #12]
 810c48e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810c492:	0d1b      	lsrs	r3, r3, #20
 810c494:	051b      	lsls	r3, r3, #20
 810c496:	b183      	cbz	r3, 810c4ba <_dtoa_r+0x90a>
 810c498:	9b05      	ldr	r3, [sp, #20]
 810c49a:	3301      	adds	r3, #1
 810c49c:	9305      	str	r3, [sp, #20]
 810c49e:	9b06      	ldr	r3, [sp, #24]
 810c4a0:	3301      	adds	r3, #1
 810c4a2:	9306      	str	r3, [sp, #24]
 810c4a4:	f04f 0801 	mov.w	r8, #1
 810c4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c4aa:	2b00      	cmp	r3, #0
 810c4ac:	f47f af6f 	bne.w	810c38e <_dtoa_r+0x7de>
 810c4b0:	2001      	movs	r0, #1
 810c4b2:	e774      	b.n	810c39e <_dtoa_r+0x7ee>
 810c4b4:	f04f 0800 	mov.w	r8, #0
 810c4b8:	e7f6      	b.n	810c4a8 <_dtoa_r+0x8f8>
 810c4ba:	4698      	mov	r8, r3
 810c4bc:	e7f4      	b.n	810c4a8 <_dtoa_r+0x8f8>
 810c4be:	d082      	beq.n	810c3c6 <_dtoa_r+0x816>
 810c4c0:	9a05      	ldr	r2, [sp, #20]
 810c4c2:	331c      	adds	r3, #28
 810c4c4:	441a      	add	r2, r3
 810c4c6:	9205      	str	r2, [sp, #20]
 810c4c8:	9a06      	ldr	r2, [sp, #24]
 810c4ca:	441a      	add	r2, r3
 810c4cc:	441d      	add	r5, r3
 810c4ce:	9206      	str	r2, [sp, #24]
 810c4d0:	e779      	b.n	810c3c6 <_dtoa_r+0x816>
 810c4d2:	4603      	mov	r3, r0
 810c4d4:	e7f4      	b.n	810c4c0 <_dtoa_r+0x910>
 810c4d6:	9b04      	ldr	r3, [sp, #16]
 810c4d8:	2b00      	cmp	r3, #0
 810c4da:	dc37      	bgt.n	810c54c <_dtoa_r+0x99c>
 810c4dc:	9b07      	ldr	r3, [sp, #28]
 810c4de:	2b02      	cmp	r3, #2
 810c4e0:	dd34      	ble.n	810c54c <_dtoa_r+0x99c>
 810c4e2:	9b04      	ldr	r3, [sp, #16]
 810c4e4:	9301      	str	r3, [sp, #4]
 810c4e6:	9b01      	ldr	r3, [sp, #4]
 810c4e8:	b963      	cbnz	r3, 810c504 <_dtoa_r+0x954>
 810c4ea:	4631      	mov	r1, r6
 810c4ec:	2205      	movs	r2, #5
 810c4ee:	4620      	mov	r0, r4
 810c4f0:	f000 f9fe 	bl	810c8f0 <__multadd>
 810c4f4:	4601      	mov	r1, r0
 810c4f6:	4606      	mov	r6, r0
 810c4f8:	4650      	mov	r0, sl
 810c4fa:	f000 fc5d 	bl	810cdb8 <__mcmp>
 810c4fe:	2800      	cmp	r0, #0
 810c500:	f73f adbb 	bgt.w	810c07a <_dtoa_r+0x4ca>
 810c504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c506:	9d00      	ldr	r5, [sp, #0]
 810c508:	ea6f 0b03 	mvn.w	fp, r3
 810c50c:	f04f 0800 	mov.w	r8, #0
 810c510:	4631      	mov	r1, r6
 810c512:	4620      	mov	r0, r4
 810c514:	f000 f9ca 	bl	810c8ac <_Bfree>
 810c518:	2f00      	cmp	r7, #0
 810c51a:	f43f aeab 	beq.w	810c274 <_dtoa_r+0x6c4>
 810c51e:	f1b8 0f00 	cmp.w	r8, #0
 810c522:	d005      	beq.n	810c530 <_dtoa_r+0x980>
 810c524:	45b8      	cmp	r8, r7
 810c526:	d003      	beq.n	810c530 <_dtoa_r+0x980>
 810c528:	4641      	mov	r1, r8
 810c52a:	4620      	mov	r0, r4
 810c52c:	f000 f9be 	bl	810c8ac <_Bfree>
 810c530:	4639      	mov	r1, r7
 810c532:	4620      	mov	r0, r4
 810c534:	f000 f9ba 	bl	810c8ac <_Bfree>
 810c538:	e69c      	b.n	810c274 <_dtoa_r+0x6c4>
 810c53a:	2600      	movs	r6, #0
 810c53c:	4637      	mov	r7, r6
 810c53e:	e7e1      	b.n	810c504 <_dtoa_r+0x954>
 810c540:	46bb      	mov	fp, r7
 810c542:	4637      	mov	r7, r6
 810c544:	e599      	b.n	810c07a <_dtoa_r+0x4ca>
 810c546:	bf00      	nop
 810c548:	40240000 	.word	0x40240000
 810c54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c54e:	2b00      	cmp	r3, #0
 810c550:	f000 80c8 	beq.w	810c6e4 <_dtoa_r+0xb34>
 810c554:	9b04      	ldr	r3, [sp, #16]
 810c556:	9301      	str	r3, [sp, #4]
 810c558:	2d00      	cmp	r5, #0
 810c55a:	dd05      	ble.n	810c568 <_dtoa_r+0x9b8>
 810c55c:	4639      	mov	r1, r7
 810c55e:	462a      	mov	r2, r5
 810c560:	4620      	mov	r0, r4
 810c562:	f000 fbbd 	bl	810cce0 <__lshift>
 810c566:	4607      	mov	r7, r0
 810c568:	f1b8 0f00 	cmp.w	r8, #0
 810c56c:	d05b      	beq.n	810c626 <_dtoa_r+0xa76>
 810c56e:	6879      	ldr	r1, [r7, #4]
 810c570:	4620      	mov	r0, r4
 810c572:	f000 f95b 	bl	810c82c <_Balloc>
 810c576:	4605      	mov	r5, r0
 810c578:	b928      	cbnz	r0, 810c586 <_dtoa_r+0x9d6>
 810c57a:	4b83      	ldr	r3, [pc, #524]	; (810c788 <_dtoa_r+0xbd8>)
 810c57c:	4602      	mov	r2, r0
 810c57e:	f240 21ef 	movw	r1, #751	; 0x2ef
 810c582:	f7ff bb2e 	b.w	810bbe2 <_dtoa_r+0x32>
 810c586:	693a      	ldr	r2, [r7, #16]
 810c588:	3202      	adds	r2, #2
 810c58a:	0092      	lsls	r2, r2, #2
 810c58c:	f107 010c 	add.w	r1, r7, #12
 810c590:	300c      	adds	r0, #12
 810c592:	f7ff fa70 	bl	810ba76 <memcpy>
 810c596:	2201      	movs	r2, #1
 810c598:	4629      	mov	r1, r5
 810c59a:	4620      	mov	r0, r4
 810c59c:	f000 fba0 	bl	810cce0 <__lshift>
 810c5a0:	9b00      	ldr	r3, [sp, #0]
 810c5a2:	3301      	adds	r3, #1
 810c5a4:	9304      	str	r3, [sp, #16]
 810c5a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 810c5aa:	4413      	add	r3, r2
 810c5ac:	9308      	str	r3, [sp, #32]
 810c5ae:	9b02      	ldr	r3, [sp, #8]
 810c5b0:	f003 0301 	and.w	r3, r3, #1
 810c5b4:	46b8      	mov	r8, r7
 810c5b6:	9306      	str	r3, [sp, #24]
 810c5b8:	4607      	mov	r7, r0
 810c5ba:	9b04      	ldr	r3, [sp, #16]
 810c5bc:	4631      	mov	r1, r6
 810c5be:	3b01      	subs	r3, #1
 810c5c0:	4650      	mov	r0, sl
 810c5c2:	9301      	str	r3, [sp, #4]
 810c5c4:	f7ff fa6c 	bl	810baa0 <quorem>
 810c5c8:	4641      	mov	r1, r8
 810c5ca:	9002      	str	r0, [sp, #8]
 810c5cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810c5d0:	4650      	mov	r0, sl
 810c5d2:	f000 fbf1 	bl	810cdb8 <__mcmp>
 810c5d6:	463a      	mov	r2, r7
 810c5d8:	9005      	str	r0, [sp, #20]
 810c5da:	4631      	mov	r1, r6
 810c5dc:	4620      	mov	r0, r4
 810c5de:	f000 fc07 	bl	810cdf0 <__mdiff>
 810c5e2:	68c2      	ldr	r2, [r0, #12]
 810c5e4:	4605      	mov	r5, r0
 810c5e6:	bb02      	cbnz	r2, 810c62a <_dtoa_r+0xa7a>
 810c5e8:	4601      	mov	r1, r0
 810c5ea:	4650      	mov	r0, sl
 810c5ec:	f000 fbe4 	bl	810cdb8 <__mcmp>
 810c5f0:	4602      	mov	r2, r0
 810c5f2:	4629      	mov	r1, r5
 810c5f4:	4620      	mov	r0, r4
 810c5f6:	9209      	str	r2, [sp, #36]	; 0x24
 810c5f8:	f000 f958 	bl	810c8ac <_Bfree>
 810c5fc:	9b07      	ldr	r3, [sp, #28]
 810c5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c600:	9d04      	ldr	r5, [sp, #16]
 810c602:	ea43 0102 	orr.w	r1, r3, r2
 810c606:	9b06      	ldr	r3, [sp, #24]
 810c608:	4319      	orrs	r1, r3
 810c60a:	d110      	bne.n	810c62e <_dtoa_r+0xa7e>
 810c60c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810c610:	d029      	beq.n	810c666 <_dtoa_r+0xab6>
 810c612:	9b05      	ldr	r3, [sp, #20]
 810c614:	2b00      	cmp	r3, #0
 810c616:	dd02      	ble.n	810c61e <_dtoa_r+0xa6e>
 810c618:	9b02      	ldr	r3, [sp, #8]
 810c61a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810c61e:	9b01      	ldr	r3, [sp, #4]
 810c620:	f883 9000 	strb.w	r9, [r3]
 810c624:	e774      	b.n	810c510 <_dtoa_r+0x960>
 810c626:	4638      	mov	r0, r7
 810c628:	e7ba      	b.n	810c5a0 <_dtoa_r+0x9f0>
 810c62a:	2201      	movs	r2, #1
 810c62c:	e7e1      	b.n	810c5f2 <_dtoa_r+0xa42>
 810c62e:	9b05      	ldr	r3, [sp, #20]
 810c630:	2b00      	cmp	r3, #0
 810c632:	db04      	blt.n	810c63e <_dtoa_r+0xa8e>
 810c634:	9907      	ldr	r1, [sp, #28]
 810c636:	430b      	orrs	r3, r1
 810c638:	9906      	ldr	r1, [sp, #24]
 810c63a:	430b      	orrs	r3, r1
 810c63c:	d120      	bne.n	810c680 <_dtoa_r+0xad0>
 810c63e:	2a00      	cmp	r2, #0
 810c640:	dded      	ble.n	810c61e <_dtoa_r+0xa6e>
 810c642:	4651      	mov	r1, sl
 810c644:	2201      	movs	r2, #1
 810c646:	4620      	mov	r0, r4
 810c648:	f000 fb4a 	bl	810cce0 <__lshift>
 810c64c:	4631      	mov	r1, r6
 810c64e:	4682      	mov	sl, r0
 810c650:	f000 fbb2 	bl	810cdb8 <__mcmp>
 810c654:	2800      	cmp	r0, #0
 810c656:	dc03      	bgt.n	810c660 <_dtoa_r+0xab0>
 810c658:	d1e1      	bne.n	810c61e <_dtoa_r+0xa6e>
 810c65a:	f019 0f01 	tst.w	r9, #1
 810c65e:	d0de      	beq.n	810c61e <_dtoa_r+0xa6e>
 810c660:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810c664:	d1d8      	bne.n	810c618 <_dtoa_r+0xa68>
 810c666:	9a01      	ldr	r2, [sp, #4]
 810c668:	2339      	movs	r3, #57	; 0x39
 810c66a:	7013      	strb	r3, [r2, #0]
 810c66c:	462b      	mov	r3, r5
 810c66e:	461d      	mov	r5, r3
 810c670:	3b01      	subs	r3, #1
 810c672:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810c676:	2a39      	cmp	r2, #57	; 0x39
 810c678:	d06c      	beq.n	810c754 <_dtoa_r+0xba4>
 810c67a:	3201      	adds	r2, #1
 810c67c:	701a      	strb	r2, [r3, #0]
 810c67e:	e747      	b.n	810c510 <_dtoa_r+0x960>
 810c680:	2a00      	cmp	r2, #0
 810c682:	dd07      	ble.n	810c694 <_dtoa_r+0xae4>
 810c684:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810c688:	d0ed      	beq.n	810c666 <_dtoa_r+0xab6>
 810c68a:	9a01      	ldr	r2, [sp, #4]
 810c68c:	f109 0301 	add.w	r3, r9, #1
 810c690:	7013      	strb	r3, [r2, #0]
 810c692:	e73d      	b.n	810c510 <_dtoa_r+0x960>
 810c694:	9b04      	ldr	r3, [sp, #16]
 810c696:	9a08      	ldr	r2, [sp, #32]
 810c698:	f803 9c01 	strb.w	r9, [r3, #-1]
 810c69c:	4293      	cmp	r3, r2
 810c69e:	d043      	beq.n	810c728 <_dtoa_r+0xb78>
 810c6a0:	4651      	mov	r1, sl
 810c6a2:	2300      	movs	r3, #0
 810c6a4:	220a      	movs	r2, #10
 810c6a6:	4620      	mov	r0, r4
 810c6a8:	f000 f922 	bl	810c8f0 <__multadd>
 810c6ac:	45b8      	cmp	r8, r7
 810c6ae:	4682      	mov	sl, r0
 810c6b0:	f04f 0300 	mov.w	r3, #0
 810c6b4:	f04f 020a 	mov.w	r2, #10
 810c6b8:	4641      	mov	r1, r8
 810c6ba:	4620      	mov	r0, r4
 810c6bc:	d107      	bne.n	810c6ce <_dtoa_r+0xb1e>
 810c6be:	f000 f917 	bl	810c8f0 <__multadd>
 810c6c2:	4680      	mov	r8, r0
 810c6c4:	4607      	mov	r7, r0
 810c6c6:	9b04      	ldr	r3, [sp, #16]
 810c6c8:	3301      	adds	r3, #1
 810c6ca:	9304      	str	r3, [sp, #16]
 810c6cc:	e775      	b.n	810c5ba <_dtoa_r+0xa0a>
 810c6ce:	f000 f90f 	bl	810c8f0 <__multadd>
 810c6d2:	4639      	mov	r1, r7
 810c6d4:	4680      	mov	r8, r0
 810c6d6:	2300      	movs	r3, #0
 810c6d8:	220a      	movs	r2, #10
 810c6da:	4620      	mov	r0, r4
 810c6dc:	f000 f908 	bl	810c8f0 <__multadd>
 810c6e0:	4607      	mov	r7, r0
 810c6e2:	e7f0      	b.n	810c6c6 <_dtoa_r+0xb16>
 810c6e4:	9b04      	ldr	r3, [sp, #16]
 810c6e6:	9301      	str	r3, [sp, #4]
 810c6e8:	9d00      	ldr	r5, [sp, #0]
 810c6ea:	4631      	mov	r1, r6
 810c6ec:	4650      	mov	r0, sl
 810c6ee:	f7ff f9d7 	bl	810baa0 <quorem>
 810c6f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810c6f6:	9b00      	ldr	r3, [sp, #0]
 810c6f8:	f805 9b01 	strb.w	r9, [r5], #1
 810c6fc:	1aea      	subs	r2, r5, r3
 810c6fe:	9b01      	ldr	r3, [sp, #4]
 810c700:	4293      	cmp	r3, r2
 810c702:	dd07      	ble.n	810c714 <_dtoa_r+0xb64>
 810c704:	4651      	mov	r1, sl
 810c706:	2300      	movs	r3, #0
 810c708:	220a      	movs	r2, #10
 810c70a:	4620      	mov	r0, r4
 810c70c:	f000 f8f0 	bl	810c8f0 <__multadd>
 810c710:	4682      	mov	sl, r0
 810c712:	e7ea      	b.n	810c6ea <_dtoa_r+0xb3a>
 810c714:	9b01      	ldr	r3, [sp, #4]
 810c716:	2b00      	cmp	r3, #0
 810c718:	bfc8      	it	gt
 810c71a:	461d      	movgt	r5, r3
 810c71c:	9b00      	ldr	r3, [sp, #0]
 810c71e:	bfd8      	it	le
 810c720:	2501      	movle	r5, #1
 810c722:	441d      	add	r5, r3
 810c724:	f04f 0800 	mov.w	r8, #0
 810c728:	4651      	mov	r1, sl
 810c72a:	2201      	movs	r2, #1
 810c72c:	4620      	mov	r0, r4
 810c72e:	f000 fad7 	bl	810cce0 <__lshift>
 810c732:	4631      	mov	r1, r6
 810c734:	4682      	mov	sl, r0
 810c736:	f000 fb3f 	bl	810cdb8 <__mcmp>
 810c73a:	2800      	cmp	r0, #0
 810c73c:	dc96      	bgt.n	810c66c <_dtoa_r+0xabc>
 810c73e:	d102      	bne.n	810c746 <_dtoa_r+0xb96>
 810c740:	f019 0f01 	tst.w	r9, #1
 810c744:	d192      	bne.n	810c66c <_dtoa_r+0xabc>
 810c746:	462b      	mov	r3, r5
 810c748:	461d      	mov	r5, r3
 810c74a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c74e:	2a30      	cmp	r2, #48	; 0x30
 810c750:	d0fa      	beq.n	810c748 <_dtoa_r+0xb98>
 810c752:	e6dd      	b.n	810c510 <_dtoa_r+0x960>
 810c754:	9a00      	ldr	r2, [sp, #0]
 810c756:	429a      	cmp	r2, r3
 810c758:	d189      	bne.n	810c66e <_dtoa_r+0xabe>
 810c75a:	f10b 0b01 	add.w	fp, fp, #1
 810c75e:	2331      	movs	r3, #49	; 0x31
 810c760:	e796      	b.n	810c690 <_dtoa_r+0xae0>
 810c762:	4b0a      	ldr	r3, [pc, #40]	; (810c78c <_dtoa_r+0xbdc>)
 810c764:	f7ff ba99 	b.w	810bc9a <_dtoa_r+0xea>
 810c768:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c76a:	2b00      	cmp	r3, #0
 810c76c:	f47f aa6d 	bne.w	810bc4a <_dtoa_r+0x9a>
 810c770:	4b07      	ldr	r3, [pc, #28]	; (810c790 <_dtoa_r+0xbe0>)
 810c772:	f7ff ba92 	b.w	810bc9a <_dtoa_r+0xea>
 810c776:	9b01      	ldr	r3, [sp, #4]
 810c778:	2b00      	cmp	r3, #0
 810c77a:	dcb5      	bgt.n	810c6e8 <_dtoa_r+0xb38>
 810c77c:	9b07      	ldr	r3, [sp, #28]
 810c77e:	2b02      	cmp	r3, #2
 810c780:	f73f aeb1 	bgt.w	810c4e6 <_dtoa_r+0x936>
 810c784:	e7b0      	b.n	810c6e8 <_dtoa_r+0xb38>
 810c786:	bf00      	nop
 810c788:	081ec375 	.word	0x081ec375
 810c78c:	081ec2d0 	.word	0x081ec2d0
 810c790:	081ec2f9 	.word	0x081ec2f9

0810c794 <_free_r>:
 810c794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c796:	2900      	cmp	r1, #0
 810c798:	d044      	beq.n	810c824 <_free_r+0x90>
 810c79a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c79e:	9001      	str	r0, [sp, #4]
 810c7a0:	2b00      	cmp	r3, #0
 810c7a2:	f1a1 0404 	sub.w	r4, r1, #4
 810c7a6:	bfb8      	it	lt
 810c7a8:	18e4      	addlt	r4, r4, r3
 810c7aa:	f7fd fffb 	bl	810a7a4 <__malloc_lock>
 810c7ae:	4a1e      	ldr	r2, [pc, #120]	; (810c828 <_free_r+0x94>)
 810c7b0:	9801      	ldr	r0, [sp, #4]
 810c7b2:	6813      	ldr	r3, [r2, #0]
 810c7b4:	b933      	cbnz	r3, 810c7c4 <_free_r+0x30>
 810c7b6:	6063      	str	r3, [r4, #4]
 810c7b8:	6014      	str	r4, [r2, #0]
 810c7ba:	b003      	add	sp, #12
 810c7bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810c7c0:	f7fd bff6 	b.w	810a7b0 <__malloc_unlock>
 810c7c4:	42a3      	cmp	r3, r4
 810c7c6:	d908      	bls.n	810c7da <_free_r+0x46>
 810c7c8:	6825      	ldr	r5, [r4, #0]
 810c7ca:	1961      	adds	r1, r4, r5
 810c7cc:	428b      	cmp	r3, r1
 810c7ce:	bf01      	itttt	eq
 810c7d0:	6819      	ldreq	r1, [r3, #0]
 810c7d2:	685b      	ldreq	r3, [r3, #4]
 810c7d4:	1949      	addeq	r1, r1, r5
 810c7d6:	6021      	streq	r1, [r4, #0]
 810c7d8:	e7ed      	b.n	810c7b6 <_free_r+0x22>
 810c7da:	461a      	mov	r2, r3
 810c7dc:	685b      	ldr	r3, [r3, #4]
 810c7de:	b10b      	cbz	r3, 810c7e4 <_free_r+0x50>
 810c7e0:	42a3      	cmp	r3, r4
 810c7e2:	d9fa      	bls.n	810c7da <_free_r+0x46>
 810c7e4:	6811      	ldr	r1, [r2, #0]
 810c7e6:	1855      	adds	r5, r2, r1
 810c7e8:	42a5      	cmp	r5, r4
 810c7ea:	d10b      	bne.n	810c804 <_free_r+0x70>
 810c7ec:	6824      	ldr	r4, [r4, #0]
 810c7ee:	4421      	add	r1, r4
 810c7f0:	1854      	adds	r4, r2, r1
 810c7f2:	42a3      	cmp	r3, r4
 810c7f4:	6011      	str	r1, [r2, #0]
 810c7f6:	d1e0      	bne.n	810c7ba <_free_r+0x26>
 810c7f8:	681c      	ldr	r4, [r3, #0]
 810c7fa:	685b      	ldr	r3, [r3, #4]
 810c7fc:	6053      	str	r3, [r2, #4]
 810c7fe:	440c      	add	r4, r1
 810c800:	6014      	str	r4, [r2, #0]
 810c802:	e7da      	b.n	810c7ba <_free_r+0x26>
 810c804:	d902      	bls.n	810c80c <_free_r+0x78>
 810c806:	230c      	movs	r3, #12
 810c808:	6003      	str	r3, [r0, #0]
 810c80a:	e7d6      	b.n	810c7ba <_free_r+0x26>
 810c80c:	6825      	ldr	r5, [r4, #0]
 810c80e:	1961      	adds	r1, r4, r5
 810c810:	428b      	cmp	r3, r1
 810c812:	bf04      	itt	eq
 810c814:	6819      	ldreq	r1, [r3, #0]
 810c816:	685b      	ldreq	r3, [r3, #4]
 810c818:	6063      	str	r3, [r4, #4]
 810c81a:	bf04      	itt	eq
 810c81c:	1949      	addeq	r1, r1, r5
 810c81e:	6021      	streq	r1, [r4, #0]
 810c820:	6054      	str	r4, [r2, #4]
 810c822:	e7ca      	b.n	810c7ba <_free_r+0x26>
 810c824:	b003      	add	sp, #12
 810c826:	bd30      	pop	{r4, r5, pc}
 810c828:	1001ab30 	.word	0x1001ab30

0810c82c <_Balloc>:
 810c82c:	b570      	push	{r4, r5, r6, lr}
 810c82e:	69c6      	ldr	r6, [r0, #28]
 810c830:	4604      	mov	r4, r0
 810c832:	460d      	mov	r5, r1
 810c834:	b976      	cbnz	r6, 810c854 <_Balloc+0x28>
 810c836:	2010      	movs	r0, #16
 810c838:	f7fd ff0c 	bl	810a654 <malloc>
 810c83c:	4602      	mov	r2, r0
 810c83e:	61e0      	str	r0, [r4, #28]
 810c840:	b920      	cbnz	r0, 810c84c <_Balloc+0x20>
 810c842:	4b18      	ldr	r3, [pc, #96]	; (810c8a4 <_Balloc+0x78>)
 810c844:	4818      	ldr	r0, [pc, #96]	; (810c8a8 <_Balloc+0x7c>)
 810c846:	216b      	movs	r1, #107	; 0x6b
 810c848:	f001 ff3e 	bl	810e6c8 <__assert_func>
 810c84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c850:	6006      	str	r6, [r0, #0]
 810c852:	60c6      	str	r6, [r0, #12]
 810c854:	69e6      	ldr	r6, [r4, #28]
 810c856:	68f3      	ldr	r3, [r6, #12]
 810c858:	b183      	cbz	r3, 810c87c <_Balloc+0x50>
 810c85a:	69e3      	ldr	r3, [r4, #28]
 810c85c:	68db      	ldr	r3, [r3, #12]
 810c85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c862:	b9b8      	cbnz	r0, 810c894 <_Balloc+0x68>
 810c864:	2101      	movs	r1, #1
 810c866:	fa01 f605 	lsl.w	r6, r1, r5
 810c86a:	1d72      	adds	r2, r6, #5
 810c86c:	0092      	lsls	r2, r2, #2
 810c86e:	4620      	mov	r0, r4
 810c870:	f001 ff48 	bl	810e704 <_calloc_r>
 810c874:	b160      	cbz	r0, 810c890 <_Balloc+0x64>
 810c876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c87a:	e00e      	b.n	810c89a <_Balloc+0x6e>
 810c87c:	2221      	movs	r2, #33	; 0x21
 810c87e:	2104      	movs	r1, #4
 810c880:	4620      	mov	r0, r4
 810c882:	f001 ff3f 	bl	810e704 <_calloc_r>
 810c886:	69e3      	ldr	r3, [r4, #28]
 810c888:	60f0      	str	r0, [r6, #12]
 810c88a:	68db      	ldr	r3, [r3, #12]
 810c88c:	2b00      	cmp	r3, #0
 810c88e:	d1e4      	bne.n	810c85a <_Balloc+0x2e>
 810c890:	2000      	movs	r0, #0
 810c892:	bd70      	pop	{r4, r5, r6, pc}
 810c894:	6802      	ldr	r2, [r0, #0]
 810c896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c89a:	2300      	movs	r3, #0
 810c89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c8a0:	e7f7      	b.n	810c892 <_Balloc+0x66>
 810c8a2:	bf00      	nop
 810c8a4:	081ec306 	.word	0x081ec306
 810c8a8:	081ec386 	.word	0x081ec386

0810c8ac <_Bfree>:
 810c8ac:	b570      	push	{r4, r5, r6, lr}
 810c8ae:	69c6      	ldr	r6, [r0, #28]
 810c8b0:	4605      	mov	r5, r0
 810c8b2:	460c      	mov	r4, r1
 810c8b4:	b976      	cbnz	r6, 810c8d4 <_Bfree+0x28>
 810c8b6:	2010      	movs	r0, #16
 810c8b8:	f7fd fecc 	bl	810a654 <malloc>
 810c8bc:	4602      	mov	r2, r0
 810c8be:	61e8      	str	r0, [r5, #28]
 810c8c0:	b920      	cbnz	r0, 810c8cc <_Bfree+0x20>
 810c8c2:	4b09      	ldr	r3, [pc, #36]	; (810c8e8 <_Bfree+0x3c>)
 810c8c4:	4809      	ldr	r0, [pc, #36]	; (810c8ec <_Bfree+0x40>)
 810c8c6:	218f      	movs	r1, #143	; 0x8f
 810c8c8:	f001 fefe 	bl	810e6c8 <__assert_func>
 810c8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c8d0:	6006      	str	r6, [r0, #0]
 810c8d2:	60c6      	str	r6, [r0, #12]
 810c8d4:	b13c      	cbz	r4, 810c8e6 <_Bfree+0x3a>
 810c8d6:	69eb      	ldr	r3, [r5, #28]
 810c8d8:	6862      	ldr	r2, [r4, #4]
 810c8da:	68db      	ldr	r3, [r3, #12]
 810c8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c8e0:	6021      	str	r1, [r4, #0]
 810c8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c8e6:	bd70      	pop	{r4, r5, r6, pc}
 810c8e8:	081ec306 	.word	0x081ec306
 810c8ec:	081ec386 	.word	0x081ec386

0810c8f0 <__multadd>:
 810c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c8f4:	690d      	ldr	r5, [r1, #16]
 810c8f6:	4607      	mov	r7, r0
 810c8f8:	460c      	mov	r4, r1
 810c8fa:	461e      	mov	r6, r3
 810c8fc:	f101 0c14 	add.w	ip, r1, #20
 810c900:	2000      	movs	r0, #0
 810c902:	f8dc 3000 	ldr.w	r3, [ip]
 810c906:	b299      	uxth	r1, r3
 810c908:	fb02 6101 	mla	r1, r2, r1, r6
 810c90c:	0c1e      	lsrs	r6, r3, #16
 810c90e:	0c0b      	lsrs	r3, r1, #16
 810c910:	fb02 3306 	mla	r3, r2, r6, r3
 810c914:	b289      	uxth	r1, r1
 810c916:	3001      	adds	r0, #1
 810c918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c91c:	4285      	cmp	r5, r0
 810c91e:	f84c 1b04 	str.w	r1, [ip], #4
 810c922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c926:	dcec      	bgt.n	810c902 <__multadd+0x12>
 810c928:	b30e      	cbz	r6, 810c96e <__multadd+0x7e>
 810c92a:	68a3      	ldr	r3, [r4, #8]
 810c92c:	42ab      	cmp	r3, r5
 810c92e:	dc19      	bgt.n	810c964 <__multadd+0x74>
 810c930:	6861      	ldr	r1, [r4, #4]
 810c932:	4638      	mov	r0, r7
 810c934:	3101      	adds	r1, #1
 810c936:	f7ff ff79 	bl	810c82c <_Balloc>
 810c93a:	4680      	mov	r8, r0
 810c93c:	b928      	cbnz	r0, 810c94a <__multadd+0x5a>
 810c93e:	4602      	mov	r2, r0
 810c940:	4b0c      	ldr	r3, [pc, #48]	; (810c974 <__multadd+0x84>)
 810c942:	480d      	ldr	r0, [pc, #52]	; (810c978 <__multadd+0x88>)
 810c944:	21ba      	movs	r1, #186	; 0xba
 810c946:	f001 febf 	bl	810e6c8 <__assert_func>
 810c94a:	6922      	ldr	r2, [r4, #16]
 810c94c:	3202      	adds	r2, #2
 810c94e:	f104 010c 	add.w	r1, r4, #12
 810c952:	0092      	lsls	r2, r2, #2
 810c954:	300c      	adds	r0, #12
 810c956:	f7ff f88e 	bl	810ba76 <memcpy>
 810c95a:	4621      	mov	r1, r4
 810c95c:	4638      	mov	r0, r7
 810c95e:	f7ff ffa5 	bl	810c8ac <_Bfree>
 810c962:	4644      	mov	r4, r8
 810c964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c968:	3501      	adds	r5, #1
 810c96a:	615e      	str	r6, [r3, #20]
 810c96c:	6125      	str	r5, [r4, #16]
 810c96e:	4620      	mov	r0, r4
 810c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c974:	081ec375 	.word	0x081ec375
 810c978:	081ec386 	.word	0x081ec386

0810c97c <__s2b>:
 810c97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c980:	460c      	mov	r4, r1
 810c982:	4615      	mov	r5, r2
 810c984:	461f      	mov	r7, r3
 810c986:	2209      	movs	r2, #9
 810c988:	3308      	adds	r3, #8
 810c98a:	4606      	mov	r6, r0
 810c98c:	fb93 f3f2 	sdiv	r3, r3, r2
 810c990:	2100      	movs	r1, #0
 810c992:	2201      	movs	r2, #1
 810c994:	429a      	cmp	r2, r3
 810c996:	db09      	blt.n	810c9ac <__s2b+0x30>
 810c998:	4630      	mov	r0, r6
 810c99a:	f7ff ff47 	bl	810c82c <_Balloc>
 810c99e:	b940      	cbnz	r0, 810c9b2 <__s2b+0x36>
 810c9a0:	4602      	mov	r2, r0
 810c9a2:	4b19      	ldr	r3, [pc, #100]	; (810ca08 <__s2b+0x8c>)
 810c9a4:	4819      	ldr	r0, [pc, #100]	; (810ca0c <__s2b+0x90>)
 810c9a6:	21d3      	movs	r1, #211	; 0xd3
 810c9a8:	f001 fe8e 	bl	810e6c8 <__assert_func>
 810c9ac:	0052      	lsls	r2, r2, #1
 810c9ae:	3101      	adds	r1, #1
 810c9b0:	e7f0      	b.n	810c994 <__s2b+0x18>
 810c9b2:	9b08      	ldr	r3, [sp, #32]
 810c9b4:	6143      	str	r3, [r0, #20]
 810c9b6:	2d09      	cmp	r5, #9
 810c9b8:	f04f 0301 	mov.w	r3, #1
 810c9bc:	6103      	str	r3, [r0, #16]
 810c9be:	dd16      	ble.n	810c9ee <__s2b+0x72>
 810c9c0:	f104 0909 	add.w	r9, r4, #9
 810c9c4:	46c8      	mov	r8, r9
 810c9c6:	442c      	add	r4, r5
 810c9c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c9cc:	4601      	mov	r1, r0
 810c9ce:	3b30      	subs	r3, #48	; 0x30
 810c9d0:	220a      	movs	r2, #10
 810c9d2:	4630      	mov	r0, r6
 810c9d4:	f7ff ff8c 	bl	810c8f0 <__multadd>
 810c9d8:	45a0      	cmp	r8, r4
 810c9da:	d1f5      	bne.n	810c9c8 <__s2b+0x4c>
 810c9dc:	f1a5 0408 	sub.w	r4, r5, #8
 810c9e0:	444c      	add	r4, r9
 810c9e2:	1b2d      	subs	r5, r5, r4
 810c9e4:	1963      	adds	r3, r4, r5
 810c9e6:	42bb      	cmp	r3, r7
 810c9e8:	db04      	blt.n	810c9f4 <__s2b+0x78>
 810c9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c9ee:	340a      	adds	r4, #10
 810c9f0:	2509      	movs	r5, #9
 810c9f2:	e7f6      	b.n	810c9e2 <__s2b+0x66>
 810c9f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c9f8:	4601      	mov	r1, r0
 810c9fa:	3b30      	subs	r3, #48	; 0x30
 810c9fc:	220a      	movs	r2, #10
 810c9fe:	4630      	mov	r0, r6
 810ca00:	f7ff ff76 	bl	810c8f0 <__multadd>
 810ca04:	e7ee      	b.n	810c9e4 <__s2b+0x68>
 810ca06:	bf00      	nop
 810ca08:	081ec375 	.word	0x081ec375
 810ca0c:	081ec386 	.word	0x081ec386

0810ca10 <__hi0bits>:
 810ca10:	0c03      	lsrs	r3, r0, #16
 810ca12:	041b      	lsls	r3, r3, #16
 810ca14:	b9d3      	cbnz	r3, 810ca4c <__hi0bits+0x3c>
 810ca16:	0400      	lsls	r0, r0, #16
 810ca18:	2310      	movs	r3, #16
 810ca1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810ca1e:	bf04      	itt	eq
 810ca20:	0200      	lsleq	r0, r0, #8
 810ca22:	3308      	addeq	r3, #8
 810ca24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810ca28:	bf04      	itt	eq
 810ca2a:	0100      	lsleq	r0, r0, #4
 810ca2c:	3304      	addeq	r3, #4
 810ca2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810ca32:	bf04      	itt	eq
 810ca34:	0080      	lsleq	r0, r0, #2
 810ca36:	3302      	addeq	r3, #2
 810ca38:	2800      	cmp	r0, #0
 810ca3a:	db05      	blt.n	810ca48 <__hi0bits+0x38>
 810ca3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810ca40:	f103 0301 	add.w	r3, r3, #1
 810ca44:	bf08      	it	eq
 810ca46:	2320      	moveq	r3, #32
 810ca48:	4618      	mov	r0, r3
 810ca4a:	4770      	bx	lr
 810ca4c:	2300      	movs	r3, #0
 810ca4e:	e7e4      	b.n	810ca1a <__hi0bits+0xa>

0810ca50 <__lo0bits>:
 810ca50:	6803      	ldr	r3, [r0, #0]
 810ca52:	f013 0207 	ands.w	r2, r3, #7
 810ca56:	d00c      	beq.n	810ca72 <__lo0bits+0x22>
 810ca58:	07d9      	lsls	r1, r3, #31
 810ca5a:	d422      	bmi.n	810caa2 <__lo0bits+0x52>
 810ca5c:	079a      	lsls	r2, r3, #30
 810ca5e:	bf49      	itett	mi
 810ca60:	085b      	lsrmi	r3, r3, #1
 810ca62:	089b      	lsrpl	r3, r3, #2
 810ca64:	6003      	strmi	r3, [r0, #0]
 810ca66:	2201      	movmi	r2, #1
 810ca68:	bf5c      	itt	pl
 810ca6a:	6003      	strpl	r3, [r0, #0]
 810ca6c:	2202      	movpl	r2, #2
 810ca6e:	4610      	mov	r0, r2
 810ca70:	4770      	bx	lr
 810ca72:	b299      	uxth	r1, r3
 810ca74:	b909      	cbnz	r1, 810ca7a <__lo0bits+0x2a>
 810ca76:	0c1b      	lsrs	r3, r3, #16
 810ca78:	2210      	movs	r2, #16
 810ca7a:	b2d9      	uxtb	r1, r3
 810ca7c:	b909      	cbnz	r1, 810ca82 <__lo0bits+0x32>
 810ca7e:	3208      	adds	r2, #8
 810ca80:	0a1b      	lsrs	r3, r3, #8
 810ca82:	0719      	lsls	r1, r3, #28
 810ca84:	bf04      	itt	eq
 810ca86:	091b      	lsreq	r3, r3, #4
 810ca88:	3204      	addeq	r2, #4
 810ca8a:	0799      	lsls	r1, r3, #30
 810ca8c:	bf04      	itt	eq
 810ca8e:	089b      	lsreq	r3, r3, #2
 810ca90:	3202      	addeq	r2, #2
 810ca92:	07d9      	lsls	r1, r3, #31
 810ca94:	d403      	bmi.n	810ca9e <__lo0bits+0x4e>
 810ca96:	085b      	lsrs	r3, r3, #1
 810ca98:	f102 0201 	add.w	r2, r2, #1
 810ca9c:	d003      	beq.n	810caa6 <__lo0bits+0x56>
 810ca9e:	6003      	str	r3, [r0, #0]
 810caa0:	e7e5      	b.n	810ca6e <__lo0bits+0x1e>
 810caa2:	2200      	movs	r2, #0
 810caa4:	e7e3      	b.n	810ca6e <__lo0bits+0x1e>
 810caa6:	2220      	movs	r2, #32
 810caa8:	e7e1      	b.n	810ca6e <__lo0bits+0x1e>
	...

0810caac <__i2b>:
 810caac:	b510      	push	{r4, lr}
 810caae:	460c      	mov	r4, r1
 810cab0:	2101      	movs	r1, #1
 810cab2:	f7ff febb 	bl	810c82c <_Balloc>
 810cab6:	4602      	mov	r2, r0
 810cab8:	b928      	cbnz	r0, 810cac6 <__i2b+0x1a>
 810caba:	4b05      	ldr	r3, [pc, #20]	; (810cad0 <__i2b+0x24>)
 810cabc:	4805      	ldr	r0, [pc, #20]	; (810cad4 <__i2b+0x28>)
 810cabe:	f240 1145 	movw	r1, #325	; 0x145
 810cac2:	f001 fe01 	bl	810e6c8 <__assert_func>
 810cac6:	2301      	movs	r3, #1
 810cac8:	6144      	str	r4, [r0, #20]
 810caca:	6103      	str	r3, [r0, #16]
 810cacc:	bd10      	pop	{r4, pc}
 810cace:	bf00      	nop
 810cad0:	081ec375 	.word	0x081ec375
 810cad4:	081ec386 	.word	0x081ec386

0810cad8 <__multiply>:
 810cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cadc:	4691      	mov	r9, r2
 810cade:	690a      	ldr	r2, [r1, #16]
 810cae0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810cae4:	429a      	cmp	r2, r3
 810cae6:	bfb8      	it	lt
 810cae8:	460b      	movlt	r3, r1
 810caea:	460c      	mov	r4, r1
 810caec:	bfbc      	itt	lt
 810caee:	464c      	movlt	r4, r9
 810caf0:	4699      	movlt	r9, r3
 810caf2:	6927      	ldr	r7, [r4, #16]
 810caf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810caf8:	68a3      	ldr	r3, [r4, #8]
 810cafa:	6861      	ldr	r1, [r4, #4]
 810cafc:	eb07 060a 	add.w	r6, r7, sl
 810cb00:	42b3      	cmp	r3, r6
 810cb02:	b085      	sub	sp, #20
 810cb04:	bfb8      	it	lt
 810cb06:	3101      	addlt	r1, #1
 810cb08:	f7ff fe90 	bl	810c82c <_Balloc>
 810cb0c:	b930      	cbnz	r0, 810cb1c <__multiply+0x44>
 810cb0e:	4602      	mov	r2, r0
 810cb10:	4b44      	ldr	r3, [pc, #272]	; (810cc24 <__multiply+0x14c>)
 810cb12:	4845      	ldr	r0, [pc, #276]	; (810cc28 <__multiply+0x150>)
 810cb14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810cb18:	f001 fdd6 	bl	810e6c8 <__assert_func>
 810cb1c:	f100 0514 	add.w	r5, r0, #20
 810cb20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810cb24:	462b      	mov	r3, r5
 810cb26:	2200      	movs	r2, #0
 810cb28:	4543      	cmp	r3, r8
 810cb2a:	d321      	bcc.n	810cb70 <__multiply+0x98>
 810cb2c:	f104 0314 	add.w	r3, r4, #20
 810cb30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810cb34:	f109 0314 	add.w	r3, r9, #20
 810cb38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810cb3c:	9202      	str	r2, [sp, #8]
 810cb3e:	1b3a      	subs	r2, r7, r4
 810cb40:	3a15      	subs	r2, #21
 810cb42:	f022 0203 	bic.w	r2, r2, #3
 810cb46:	3204      	adds	r2, #4
 810cb48:	f104 0115 	add.w	r1, r4, #21
 810cb4c:	428f      	cmp	r7, r1
 810cb4e:	bf38      	it	cc
 810cb50:	2204      	movcc	r2, #4
 810cb52:	9201      	str	r2, [sp, #4]
 810cb54:	9a02      	ldr	r2, [sp, #8]
 810cb56:	9303      	str	r3, [sp, #12]
 810cb58:	429a      	cmp	r2, r3
 810cb5a:	d80c      	bhi.n	810cb76 <__multiply+0x9e>
 810cb5c:	2e00      	cmp	r6, #0
 810cb5e:	dd03      	ble.n	810cb68 <__multiply+0x90>
 810cb60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810cb64:	2b00      	cmp	r3, #0
 810cb66:	d05b      	beq.n	810cc20 <__multiply+0x148>
 810cb68:	6106      	str	r6, [r0, #16]
 810cb6a:	b005      	add	sp, #20
 810cb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cb70:	f843 2b04 	str.w	r2, [r3], #4
 810cb74:	e7d8      	b.n	810cb28 <__multiply+0x50>
 810cb76:	f8b3 a000 	ldrh.w	sl, [r3]
 810cb7a:	f1ba 0f00 	cmp.w	sl, #0
 810cb7e:	d024      	beq.n	810cbca <__multiply+0xf2>
 810cb80:	f104 0e14 	add.w	lr, r4, #20
 810cb84:	46a9      	mov	r9, r5
 810cb86:	f04f 0c00 	mov.w	ip, #0
 810cb8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 810cb8e:	f8d9 1000 	ldr.w	r1, [r9]
 810cb92:	fa1f fb82 	uxth.w	fp, r2
 810cb96:	b289      	uxth	r1, r1
 810cb98:	fb0a 110b 	mla	r1, sl, fp, r1
 810cb9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810cba0:	f8d9 2000 	ldr.w	r2, [r9]
 810cba4:	4461      	add	r1, ip
 810cba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810cbaa:	fb0a c20b 	mla	r2, sl, fp, ip
 810cbae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810cbb2:	b289      	uxth	r1, r1
 810cbb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810cbb8:	4577      	cmp	r7, lr
 810cbba:	f849 1b04 	str.w	r1, [r9], #4
 810cbbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810cbc2:	d8e2      	bhi.n	810cb8a <__multiply+0xb2>
 810cbc4:	9a01      	ldr	r2, [sp, #4]
 810cbc6:	f845 c002 	str.w	ip, [r5, r2]
 810cbca:	9a03      	ldr	r2, [sp, #12]
 810cbcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810cbd0:	3304      	adds	r3, #4
 810cbd2:	f1b9 0f00 	cmp.w	r9, #0
 810cbd6:	d021      	beq.n	810cc1c <__multiply+0x144>
 810cbd8:	6829      	ldr	r1, [r5, #0]
 810cbda:	f104 0c14 	add.w	ip, r4, #20
 810cbde:	46ae      	mov	lr, r5
 810cbe0:	f04f 0a00 	mov.w	sl, #0
 810cbe4:	f8bc b000 	ldrh.w	fp, [ip]
 810cbe8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810cbec:	fb09 220b 	mla	r2, r9, fp, r2
 810cbf0:	4452      	add	r2, sl
 810cbf2:	b289      	uxth	r1, r1
 810cbf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810cbf8:	f84e 1b04 	str.w	r1, [lr], #4
 810cbfc:	f85c 1b04 	ldr.w	r1, [ip], #4
 810cc00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cc04:	f8be 1000 	ldrh.w	r1, [lr]
 810cc08:	fb09 110a 	mla	r1, r9, sl, r1
 810cc0c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810cc10:	4567      	cmp	r7, ip
 810cc12:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810cc16:	d8e5      	bhi.n	810cbe4 <__multiply+0x10c>
 810cc18:	9a01      	ldr	r2, [sp, #4]
 810cc1a:	50a9      	str	r1, [r5, r2]
 810cc1c:	3504      	adds	r5, #4
 810cc1e:	e799      	b.n	810cb54 <__multiply+0x7c>
 810cc20:	3e01      	subs	r6, #1
 810cc22:	e79b      	b.n	810cb5c <__multiply+0x84>
 810cc24:	081ec375 	.word	0x081ec375
 810cc28:	081ec386 	.word	0x081ec386

0810cc2c <__pow5mult>:
 810cc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810cc30:	4615      	mov	r5, r2
 810cc32:	f012 0203 	ands.w	r2, r2, #3
 810cc36:	4606      	mov	r6, r0
 810cc38:	460f      	mov	r7, r1
 810cc3a:	d007      	beq.n	810cc4c <__pow5mult+0x20>
 810cc3c:	4c25      	ldr	r4, [pc, #148]	; (810ccd4 <__pow5mult+0xa8>)
 810cc3e:	3a01      	subs	r2, #1
 810cc40:	2300      	movs	r3, #0
 810cc42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810cc46:	f7ff fe53 	bl	810c8f0 <__multadd>
 810cc4a:	4607      	mov	r7, r0
 810cc4c:	10ad      	asrs	r5, r5, #2
 810cc4e:	d03d      	beq.n	810cccc <__pow5mult+0xa0>
 810cc50:	69f4      	ldr	r4, [r6, #28]
 810cc52:	b97c      	cbnz	r4, 810cc74 <__pow5mult+0x48>
 810cc54:	2010      	movs	r0, #16
 810cc56:	f7fd fcfd 	bl	810a654 <malloc>
 810cc5a:	4602      	mov	r2, r0
 810cc5c:	61f0      	str	r0, [r6, #28]
 810cc5e:	b928      	cbnz	r0, 810cc6c <__pow5mult+0x40>
 810cc60:	4b1d      	ldr	r3, [pc, #116]	; (810ccd8 <__pow5mult+0xac>)
 810cc62:	481e      	ldr	r0, [pc, #120]	; (810ccdc <__pow5mult+0xb0>)
 810cc64:	f240 11b3 	movw	r1, #435	; 0x1b3
 810cc68:	f001 fd2e 	bl	810e6c8 <__assert_func>
 810cc6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810cc70:	6004      	str	r4, [r0, #0]
 810cc72:	60c4      	str	r4, [r0, #12]
 810cc74:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810cc78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810cc7c:	b94c      	cbnz	r4, 810cc92 <__pow5mult+0x66>
 810cc7e:	f240 2171 	movw	r1, #625	; 0x271
 810cc82:	4630      	mov	r0, r6
 810cc84:	f7ff ff12 	bl	810caac <__i2b>
 810cc88:	2300      	movs	r3, #0
 810cc8a:	f8c8 0008 	str.w	r0, [r8, #8]
 810cc8e:	4604      	mov	r4, r0
 810cc90:	6003      	str	r3, [r0, #0]
 810cc92:	f04f 0900 	mov.w	r9, #0
 810cc96:	07eb      	lsls	r3, r5, #31
 810cc98:	d50a      	bpl.n	810ccb0 <__pow5mult+0x84>
 810cc9a:	4639      	mov	r1, r7
 810cc9c:	4622      	mov	r2, r4
 810cc9e:	4630      	mov	r0, r6
 810cca0:	f7ff ff1a 	bl	810cad8 <__multiply>
 810cca4:	4639      	mov	r1, r7
 810cca6:	4680      	mov	r8, r0
 810cca8:	4630      	mov	r0, r6
 810ccaa:	f7ff fdff 	bl	810c8ac <_Bfree>
 810ccae:	4647      	mov	r7, r8
 810ccb0:	106d      	asrs	r5, r5, #1
 810ccb2:	d00b      	beq.n	810cccc <__pow5mult+0xa0>
 810ccb4:	6820      	ldr	r0, [r4, #0]
 810ccb6:	b938      	cbnz	r0, 810ccc8 <__pow5mult+0x9c>
 810ccb8:	4622      	mov	r2, r4
 810ccba:	4621      	mov	r1, r4
 810ccbc:	4630      	mov	r0, r6
 810ccbe:	f7ff ff0b 	bl	810cad8 <__multiply>
 810ccc2:	6020      	str	r0, [r4, #0]
 810ccc4:	f8c0 9000 	str.w	r9, [r0]
 810ccc8:	4604      	mov	r4, r0
 810ccca:	e7e4      	b.n	810cc96 <__pow5mult+0x6a>
 810cccc:	4638      	mov	r0, r7
 810ccce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ccd2:	bf00      	nop
 810ccd4:	081ec4d0 	.word	0x081ec4d0
 810ccd8:	081ec306 	.word	0x081ec306
 810ccdc:	081ec386 	.word	0x081ec386

0810cce0 <__lshift>:
 810cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cce4:	460c      	mov	r4, r1
 810cce6:	6849      	ldr	r1, [r1, #4]
 810cce8:	6923      	ldr	r3, [r4, #16]
 810ccea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810ccee:	68a3      	ldr	r3, [r4, #8]
 810ccf0:	4607      	mov	r7, r0
 810ccf2:	4691      	mov	r9, r2
 810ccf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810ccf8:	f108 0601 	add.w	r6, r8, #1
 810ccfc:	42b3      	cmp	r3, r6
 810ccfe:	db0b      	blt.n	810cd18 <__lshift+0x38>
 810cd00:	4638      	mov	r0, r7
 810cd02:	f7ff fd93 	bl	810c82c <_Balloc>
 810cd06:	4605      	mov	r5, r0
 810cd08:	b948      	cbnz	r0, 810cd1e <__lshift+0x3e>
 810cd0a:	4602      	mov	r2, r0
 810cd0c:	4b28      	ldr	r3, [pc, #160]	; (810cdb0 <__lshift+0xd0>)
 810cd0e:	4829      	ldr	r0, [pc, #164]	; (810cdb4 <__lshift+0xd4>)
 810cd10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810cd14:	f001 fcd8 	bl	810e6c8 <__assert_func>
 810cd18:	3101      	adds	r1, #1
 810cd1a:	005b      	lsls	r3, r3, #1
 810cd1c:	e7ee      	b.n	810ccfc <__lshift+0x1c>
 810cd1e:	2300      	movs	r3, #0
 810cd20:	f100 0114 	add.w	r1, r0, #20
 810cd24:	f100 0210 	add.w	r2, r0, #16
 810cd28:	4618      	mov	r0, r3
 810cd2a:	4553      	cmp	r3, sl
 810cd2c:	db33      	blt.n	810cd96 <__lshift+0xb6>
 810cd2e:	6920      	ldr	r0, [r4, #16]
 810cd30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810cd34:	f104 0314 	add.w	r3, r4, #20
 810cd38:	f019 091f 	ands.w	r9, r9, #31
 810cd3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810cd40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810cd44:	d02b      	beq.n	810cd9e <__lshift+0xbe>
 810cd46:	f1c9 0e20 	rsb	lr, r9, #32
 810cd4a:	468a      	mov	sl, r1
 810cd4c:	2200      	movs	r2, #0
 810cd4e:	6818      	ldr	r0, [r3, #0]
 810cd50:	fa00 f009 	lsl.w	r0, r0, r9
 810cd54:	4310      	orrs	r0, r2
 810cd56:	f84a 0b04 	str.w	r0, [sl], #4
 810cd5a:	f853 2b04 	ldr.w	r2, [r3], #4
 810cd5e:	459c      	cmp	ip, r3
 810cd60:	fa22 f20e 	lsr.w	r2, r2, lr
 810cd64:	d8f3      	bhi.n	810cd4e <__lshift+0x6e>
 810cd66:	ebac 0304 	sub.w	r3, ip, r4
 810cd6a:	3b15      	subs	r3, #21
 810cd6c:	f023 0303 	bic.w	r3, r3, #3
 810cd70:	3304      	adds	r3, #4
 810cd72:	f104 0015 	add.w	r0, r4, #21
 810cd76:	4584      	cmp	ip, r0
 810cd78:	bf38      	it	cc
 810cd7a:	2304      	movcc	r3, #4
 810cd7c:	50ca      	str	r2, [r1, r3]
 810cd7e:	b10a      	cbz	r2, 810cd84 <__lshift+0xa4>
 810cd80:	f108 0602 	add.w	r6, r8, #2
 810cd84:	3e01      	subs	r6, #1
 810cd86:	4638      	mov	r0, r7
 810cd88:	612e      	str	r6, [r5, #16]
 810cd8a:	4621      	mov	r1, r4
 810cd8c:	f7ff fd8e 	bl	810c8ac <_Bfree>
 810cd90:	4628      	mov	r0, r5
 810cd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cd96:	f842 0f04 	str.w	r0, [r2, #4]!
 810cd9a:	3301      	adds	r3, #1
 810cd9c:	e7c5      	b.n	810cd2a <__lshift+0x4a>
 810cd9e:	3904      	subs	r1, #4
 810cda0:	f853 2b04 	ldr.w	r2, [r3], #4
 810cda4:	f841 2f04 	str.w	r2, [r1, #4]!
 810cda8:	459c      	cmp	ip, r3
 810cdaa:	d8f9      	bhi.n	810cda0 <__lshift+0xc0>
 810cdac:	e7ea      	b.n	810cd84 <__lshift+0xa4>
 810cdae:	bf00      	nop
 810cdb0:	081ec375 	.word	0x081ec375
 810cdb4:	081ec386 	.word	0x081ec386

0810cdb8 <__mcmp>:
 810cdb8:	b530      	push	{r4, r5, lr}
 810cdba:	6902      	ldr	r2, [r0, #16]
 810cdbc:	690c      	ldr	r4, [r1, #16]
 810cdbe:	1b12      	subs	r2, r2, r4
 810cdc0:	d10e      	bne.n	810cde0 <__mcmp+0x28>
 810cdc2:	f100 0314 	add.w	r3, r0, #20
 810cdc6:	3114      	adds	r1, #20
 810cdc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810cdcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810cdd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810cdd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810cdd8:	42a5      	cmp	r5, r4
 810cdda:	d003      	beq.n	810cde4 <__mcmp+0x2c>
 810cddc:	d305      	bcc.n	810cdea <__mcmp+0x32>
 810cdde:	2201      	movs	r2, #1
 810cde0:	4610      	mov	r0, r2
 810cde2:	bd30      	pop	{r4, r5, pc}
 810cde4:	4283      	cmp	r3, r0
 810cde6:	d3f3      	bcc.n	810cdd0 <__mcmp+0x18>
 810cde8:	e7fa      	b.n	810cde0 <__mcmp+0x28>
 810cdea:	f04f 32ff 	mov.w	r2, #4294967295
 810cdee:	e7f7      	b.n	810cde0 <__mcmp+0x28>

0810cdf0 <__mdiff>:
 810cdf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cdf4:	460c      	mov	r4, r1
 810cdf6:	4606      	mov	r6, r0
 810cdf8:	4611      	mov	r1, r2
 810cdfa:	4620      	mov	r0, r4
 810cdfc:	4690      	mov	r8, r2
 810cdfe:	f7ff ffdb 	bl	810cdb8 <__mcmp>
 810ce02:	1e05      	subs	r5, r0, #0
 810ce04:	d110      	bne.n	810ce28 <__mdiff+0x38>
 810ce06:	4629      	mov	r1, r5
 810ce08:	4630      	mov	r0, r6
 810ce0a:	f7ff fd0f 	bl	810c82c <_Balloc>
 810ce0e:	b930      	cbnz	r0, 810ce1e <__mdiff+0x2e>
 810ce10:	4b3a      	ldr	r3, [pc, #232]	; (810cefc <__mdiff+0x10c>)
 810ce12:	4602      	mov	r2, r0
 810ce14:	f240 2137 	movw	r1, #567	; 0x237
 810ce18:	4839      	ldr	r0, [pc, #228]	; (810cf00 <__mdiff+0x110>)
 810ce1a:	f001 fc55 	bl	810e6c8 <__assert_func>
 810ce1e:	2301      	movs	r3, #1
 810ce20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810ce24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ce28:	bfa4      	itt	ge
 810ce2a:	4643      	movge	r3, r8
 810ce2c:	46a0      	movge	r8, r4
 810ce2e:	4630      	mov	r0, r6
 810ce30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810ce34:	bfa6      	itte	ge
 810ce36:	461c      	movge	r4, r3
 810ce38:	2500      	movge	r5, #0
 810ce3a:	2501      	movlt	r5, #1
 810ce3c:	f7ff fcf6 	bl	810c82c <_Balloc>
 810ce40:	b920      	cbnz	r0, 810ce4c <__mdiff+0x5c>
 810ce42:	4b2e      	ldr	r3, [pc, #184]	; (810cefc <__mdiff+0x10c>)
 810ce44:	4602      	mov	r2, r0
 810ce46:	f240 2145 	movw	r1, #581	; 0x245
 810ce4a:	e7e5      	b.n	810ce18 <__mdiff+0x28>
 810ce4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810ce50:	6926      	ldr	r6, [r4, #16]
 810ce52:	60c5      	str	r5, [r0, #12]
 810ce54:	f104 0914 	add.w	r9, r4, #20
 810ce58:	f108 0514 	add.w	r5, r8, #20
 810ce5c:	f100 0e14 	add.w	lr, r0, #20
 810ce60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810ce64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810ce68:	f108 0210 	add.w	r2, r8, #16
 810ce6c:	46f2      	mov	sl, lr
 810ce6e:	2100      	movs	r1, #0
 810ce70:	f859 3b04 	ldr.w	r3, [r9], #4
 810ce74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810ce78:	fa11 f88b 	uxtah	r8, r1, fp
 810ce7c:	b299      	uxth	r1, r3
 810ce7e:	0c1b      	lsrs	r3, r3, #16
 810ce80:	eba8 0801 	sub.w	r8, r8, r1
 810ce84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810ce88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810ce8c:	fa1f f888 	uxth.w	r8, r8
 810ce90:	1419      	asrs	r1, r3, #16
 810ce92:	454e      	cmp	r6, r9
 810ce94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810ce98:	f84a 3b04 	str.w	r3, [sl], #4
 810ce9c:	d8e8      	bhi.n	810ce70 <__mdiff+0x80>
 810ce9e:	1b33      	subs	r3, r6, r4
 810cea0:	3b15      	subs	r3, #21
 810cea2:	f023 0303 	bic.w	r3, r3, #3
 810cea6:	3304      	adds	r3, #4
 810cea8:	3415      	adds	r4, #21
 810ceaa:	42a6      	cmp	r6, r4
 810ceac:	bf38      	it	cc
 810ceae:	2304      	movcc	r3, #4
 810ceb0:	441d      	add	r5, r3
 810ceb2:	4473      	add	r3, lr
 810ceb4:	469e      	mov	lr, r3
 810ceb6:	462e      	mov	r6, r5
 810ceb8:	4566      	cmp	r6, ip
 810ceba:	d30e      	bcc.n	810ceda <__mdiff+0xea>
 810cebc:	f10c 0203 	add.w	r2, ip, #3
 810cec0:	1b52      	subs	r2, r2, r5
 810cec2:	f022 0203 	bic.w	r2, r2, #3
 810cec6:	3d03      	subs	r5, #3
 810cec8:	45ac      	cmp	ip, r5
 810ceca:	bf38      	it	cc
 810cecc:	2200      	movcc	r2, #0
 810cece:	4413      	add	r3, r2
 810ced0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810ced4:	b17a      	cbz	r2, 810cef6 <__mdiff+0x106>
 810ced6:	6107      	str	r7, [r0, #16]
 810ced8:	e7a4      	b.n	810ce24 <__mdiff+0x34>
 810ceda:	f856 8b04 	ldr.w	r8, [r6], #4
 810cede:	fa11 f288 	uxtah	r2, r1, r8
 810cee2:	1414      	asrs	r4, r2, #16
 810cee4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810cee8:	b292      	uxth	r2, r2
 810ceea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810ceee:	f84e 2b04 	str.w	r2, [lr], #4
 810cef2:	1421      	asrs	r1, r4, #16
 810cef4:	e7e0      	b.n	810ceb8 <__mdiff+0xc8>
 810cef6:	3f01      	subs	r7, #1
 810cef8:	e7ea      	b.n	810ced0 <__mdiff+0xe0>
 810cefa:	bf00      	nop
 810cefc:	081ec375 	.word	0x081ec375
 810cf00:	081ec386 	.word	0x081ec386

0810cf04 <__ulp>:
 810cf04:	b082      	sub	sp, #8
 810cf06:	ed8d 0b00 	vstr	d0, [sp]
 810cf0a:	9a01      	ldr	r2, [sp, #4]
 810cf0c:	4b0f      	ldr	r3, [pc, #60]	; (810cf4c <__ulp+0x48>)
 810cf0e:	4013      	ands	r3, r2
 810cf10:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810cf14:	2b00      	cmp	r3, #0
 810cf16:	dc08      	bgt.n	810cf2a <__ulp+0x26>
 810cf18:	425b      	negs	r3, r3
 810cf1a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810cf1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 810cf22:	da04      	bge.n	810cf2e <__ulp+0x2a>
 810cf24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810cf28:	4113      	asrs	r3, r2
 810cf2a:	2200      	movs	r2, #0
 810cf2c:	e008      	b.n	810cf40 <__ulp+0x3c>
 810cf2e:	f1a2 0314 	sub.w	r3, r2, #20
 810cf32:	2b1e      	cmp	r3, #30
 810cf34:	bfda      	itte	le
 810cf36:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810cf3a:	40da      	lsrle	r2, r3
 810cf3c:	2201      	movgt	r2, #1
 810cf3e:	2300      	movs	r3, #0
 810cf40:	4619      	mov	r1, r3
 810cf42:	4610      	mov	r0, r2
 810cf44:	ec41 0b10 	vmov	d0, r0, r1
 810cf48:	b002      	add	sp, #8
 810cf4a:	4770      	bx	lr
 810cf4c:	7ff00000 	.word	0x7ff00000

0810cf50 <__b2d>:
 810cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810cf54:	6906      	ldr	r6, [r0, #16]
 810cf56:	f100 0814 	add.w	r8, r0, #20
 810cf5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810cf5e:	1f37      	subs	r7, r6, #4
 810cf60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810cf64:	4610      	mov	r0, r2
 810cf66:	f7ff fd53 	bl	810ca10 <__hi0bits>
 810cf6a:	f1c0 0320 	rsb	r3, r0, #32
 810cf6e:	280a      	cmp	r0, #10
 810cf70:	600b      	str	r3, [r1, #0]
 810cf72:	491b      	ldr	r1, [pc, #108]	; (810cfe0 <__b2d+0x90>)
 810cf74:	dc15      	bgt.n	810cfa2 <__b2d+0x52>
 810cf76:	f1c0 0c0b 	rsb	ip, r0, #11
 810cf7a:	fa22 f30c 	lsr.w	r3, r2, ip
 810cf7e:	45b8      	cmp	r8, r7
 810cf80:	ea43 0501 	orr.w	r5, r3, r1
 810cf84:	bf34      	ite	cc
 810cf86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810cf8a:	2300      	movcs	r3, #0
 810cf8c:	3015      	adds	r0, #21
 810cf8e:	fa02 f000 	lsl.w	r0, r2, r0
 810cf92:	fa23 f30c 	lsr.w	r3, r3, ip
 810cf96:	4303      	orrs	r3, r0
 810cf98:	461c      	mov	r4, r3
 810cf9a:	ec45 4b10 	vmov	d0, r4, r5
 810cf9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810cfa2:	45b8      	cmp	r8, r7
 810cfa4:	bf3a      	itte	cc
 810cfa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810cfaa:	f1a6 0708 	subcc.w	r7, r6, #8
 810cfae:	2300      	movcs	r3, #0
 810cfb0:	380b      	subs	r0, #11
 810cfb2:	d012      	beq.n	810cfda <__b2d+0x8a>
 810cfb4:	f1c0 0120 	rsb	r1, r0, #32
 810cfb8:	fa23 f401 	lsr.w	r4, r3, r1
 810cfbc:	4082      	lsls	r2, r0
 810cfbe:	4322      	orrs	r2, r4
 810cfc0:	4547      	cmp	r7, r8
 810cfc2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810cfc6:	bf8c      	ite	hi
 810cfc8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810cfcc:	2200      	movls	r2, #0
 810cfce:	4083      	lsls	r3, r0
 810cfd0:	40ca      	lsrs	r2, r1
 810cfd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810cfd6:	4313      	orrs	r3, r2
 810cfd8:	e7de      	b.n	810cf98 <__b2d+0x48>
 810cfda:	ea42 0501 	orr.w	r5, r2, r1
 810cfde:	e7db      	b.n	810cf98 <__b2d+0x48>
 810cfe0:	3ff00000 	.word	0x3ff00000

0810cfe4 <__d2b>:
 810cfe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810cfe8:	460f      	mov	r7, r1
 810cfea:	2101      	movs	r1, #1
 810cfec:	ec59 8b10 	vmov	r8, r9, d0
 810cff0:	4616      	mov	r6, r2
 810cff2:	f7ff fc1b 	bl	810c82c <_Balloc>
 810cff6:	4604      	mov	r4, r0
 810cff8:	b930      	cbnz	r0, 810d008 <__d2b+0x24>
 810cffa:	4602      	mov	r2, r0
 810cffc:	4b24      	ldr	r3, [pc, #144]	; (810d090 <__d2b+0xac>)
 810cffe:	4825      	ldr	r0, [pc, #148]	; (810d094 <__d2b+0xb0>)
 810d000:	f240 310f 	movw	r1, #783	; 0x30f
 810d004:	f001 fb60 	bl	810e6c8 <__assert_func>
 810d008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810d00c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d010:	bb2d      	cbnz	r5, 810d05e <__d2b+0x7a>
 810d012:	9301      	str	r3, [sp, #4]
 810d014:	f1b8 0300 	subs.w	r3, r8, #0
 810d018:	d026      	beq.n	810d068 <__d2b+0x84>
 810d01a:	4668      	mov	r0, sp
 810d01c:	9300      	str	r3, [sp, #0]
 810d01e:	f7ff fd17 	bl	810ca50 <__lo0bits>
 810d022:	e9dd 1200 	ldrd	r1, r2, [sp]
 810d026:	b1e8      	cbz	r0, 810d064 <__d2b+0x80>
 810d028:	f1c0 0320 	rsb	r3, r0, #32
 810d02c:	fa02 f303 	lsl.w	r3, r2, r3
 810d030:	430b      	orrs	r3, r1
 810d032:	40c2      	lsrs	r2, r0
 810d034:	6163      	str	r3, [r4, #20]
 810d036:	9201      	str	r2, [sp, #4]
 810d038:	9b01      	ldr	r3, [sp, #4]
 810d03a:	61a3      	str	r3, [r4, #24]
 810d03c:	2b00      	cmp	r3, #0
 810d03e:	bf14      	ite	ne
 810d040:	2202      	movne	r2, #2
 810d042:	2201      	moveq	r2, #1
 810d044:	6122      	str	r2, [r4, #16]
 810d046:	b1bd      	cbz	r5, 810d078 <__d2b+0x94>
 810d048:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810d04c:	4405      	add	r5, r0
 810d04e:	603d      	str	r5, [r7, #0]
 810d050:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810d054:	6030      	str	r0, [r6, #0]
 810d056:	4620      	mov	r0, r4
 810d058:	b003      	add	sp, #12
 810d05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d05e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810d062:	e7d6      	b.n	810d012 <__d2b+0x2e>
 810d064:	6161      	str	r1, [r4, #20]
 810d066:	e7e7      	b.n	810d038 <__d2b+0x54>
 810d068:	a801      	add	r0, sp, #4
 810d06a:	f7ff fcf1 	bl	810ca50 <__lo0bits>
 810d06e:	9b01      	ldr	r3, [sp, #4]
 810d070:	6163      	str	r3, [r4, #20]
 810d072:	3020      	adds	r0, #32
 810d074:	2201      	movs	r2, #1
 810d076:	e7e5      	b.n	810d044 <__d2b+0x60>
 810d078:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810d07c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810d080:	6038      	str	r0, [r7, #0]
 810d082:	6918      	ldr	r0, [r3, #16]
 810d084:	f7ff fcc4 	bl	810ca10 <__hi0bits>
 810d088:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810d08c:	e7e2      	b.n	810d054 <__d2b+0x70>
 810d08e:	bf00      	nop
 810d090:	081ec375 	.word	0x081ec375
 810d094:	081ec386 	.word	0x081ec386

0810d098 <__ratio>:
 810d098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d09c:	4688      	mov	r8, r1
 810d09e:	4669      	mov	r1, sp
 810d0a0:	4681      	mov	r9, r0
 810d0a2:	f7ff ff55 	bl	810cf50 <__b2d>
 810d0a6:	a901      	add	r1, sp, #4
 810d0a8:	4640      	mov	r0, r8
 810d0aa:	ec55 4b10 	vmov	r4, r5, d0
 810d0ae:	f7ff ff4f 	bl	810cf50 <__b2d>
 810d0b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810d0b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810d0ba:	eba3 0c02 	sub.w	ip, r3, r2
 810d0be:	e9dd 3200 	ldrd	r3, r2, [sp]
 810d0c2:	1a9b      	subs	r3, r3, r2
 810d0c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810d0c8:	ec51 0b10 	vmov	r0, r1, d0
 810d0cc:	2b00      	cmp	r3, #0
 810d0ce:	bfd6      	itet	le
 810d0d0:	460a      	movle	r2, r1
 810d0d2:	462a      	movgt	r2, r5
 810d0d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810d0d8:	468b      	mov	fp, r1
 810d0da:	462f      	mov	r7, r5
 810d0dc:	bfd4      	ite	le
 810d0de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810d0e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810d0e6:	4620      	mov	r0, r4
 810d0e8:	ee10 2a10 	vmov	r2, s0
 810d0ec:	465b      	mov	r3, fp
 810d0ee:	4639      	mov	r1, r7
 810d0f0:	f7f3 fc34 	bl	810095c <__aeabi_ddiv>
 810d0f4:	ec41 0b10 	vmov	d0, r0, r1
 810d0f8:	b003      	add	sp, #12
 810d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810d0fe <__copybits>:
 810d0fe:	3901      	subs	r1, #1
 810d100:	b570      	push	{r4, r5, r6, lr}
 810d102:	1149      	asrs	r1, r1, #5
 810d104:	6914      	ldr	r4, [r2, #16]
 810d106:	3101      	adds	r1, #1
 810d108:	f102 0314 	add.w	r3, r2, #20
 810d10c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810d110:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810d114:	1f05      	subs	r5, r0, #4
 810d116:	42a3      	cmp	r3, r4
 810d118:	d30c      	bcc.n	810d134 <__copybits+0x36>
 810d11a:	1aa3      	subs	r3, r4, r2
 810d11c:	3b11      	subs	r3, #17
 810d11e:	f023 0303 	bic.w	r3, r3, #3
 810d122:	3211      	adds	r2, #17
 810d124:	42a2      	cmp	r2, r4
 810d126:	bf88      	it	hi
 810d128:	2300      	movhi	r3, #0
 810d12a:	4418      	add	r0, r3
 810d12c:	2300      	movs	r3, #0
 810d12e:	4288      	cmp	r0, r1
 810d130:	d305      	bcc.n	810d13e <__copybits+0x40>
 810d132:	bd70      	pop	{r4, r5, r6, pc}
 810d134:	f853 6b04 	ldr.w	r6, [r3], #4
 810d138:	f845 6f04 	str.w	r6, [r5, #4]!
 810d13c:	e7eb      	b.n	810d116 <__copybits+0x18>
 810d13e:	f840 3b04 	str.w	r3, [r0], #4
 810d142:	e7f4      	b.n	810d12e <__copybits+0x30>

0810d144 <__any_on>:
 810d144:	f100 0214 	add.w	r2, r0, #20
 810d148:	6900      	ldr	r0, [r0, #16]
 810d14a:	114b      	asrs	r3, r1, #5
 810d14c:	4298      	cmp	r0, r3
 810d14e:	b510      	push	{r4, lr}
 810d150:	db11      	blt.n	810d176 <__any_on+0x32>
 810d152:	dd0a      	ble.n	810d16a <__any_on+0x26>
 810d154:	f011 011f 	ands.w	r1, r1, #31
 810d158:	d007      	beq.n	810d16a <__any_on+0x26>
 810d15a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810d15e:	fa24 f001 	lsr.w	r0, r4, r1
 810d162:	fa00 f101 	lsl.w	r1, r0, r1
 810d166:	428c      	cmp	r4, r1
 810d168:	d10b      	bne.n	810d182 <__any_on+0x3e>
 810d16a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d16e:	4293      	cmp	r3, r2
 810d170:	d803      	bhi.n	810d17a <__any_on+0x36>
 810d172:	2000      	movs	r0, #0
 810d174:	bd10      	pop	{r4, pc}
 810d176:	4603      	mov	r3, r0
 810d178:	e7f7      	b.n	810d16a <__any_on+0x26>
 810d17a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810d17e:	2900      	cmp	r1, #0
 810d180:	d0f5      	beq.n	810d16e <__any_on+0x2a>
 810d182:	2001      	movs	r0, #1
 810d184:	e7f6      	b.n	810d174 <__any_on+0x30>

0810d186 <_malloc_usable_size_r>:
 810d186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d18a:	1f18      	subs	r0, r3, #4
 810d18c:	2b00      	cmp	r3, #0
 810d18e:	bfbc      	itt	lt
 810d190:	580b      	ldrlt	r3, [r1, r0]
 810d192:	18c0      	addlt	r0, r0, r3
 810d194:	4770      	bx	lr

0810d196 <sulp>:
 810d196:	b570      	push	{r4, r5, r6, lr}
 810d198:	4604      	mov	r4, r0
 810d19a:	460d      	mov	r5, r1
 810d19c:	ec45 4b10 	vmov	d0, r4, r5
 810d1a0:	4616      	mov	r6, r2
 810d1a2:	f7ff feaf 	bl	810cf04 <__ulp>
 810d1a6:	ec51 0b10 	vmov	r0, r1, d0
 810d1aa:	b17e      	cbz	r6, 810d1cc <sulp+0x36>
 810d1ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810d1b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810d1b4:	2b00      	cmp	r3, #0
 810d1b6:	dd09      	ble.n	810d1cc <sulp+0x36>
 810d1b8:	051b      	lsls	r3, r3, #20
 810d1ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810d1be:	2400      	movs	r4, #0
 810d1c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810d1c4:	4622      	mov	r2, r4
 810d1c6:	462b      	mov	r3, r5
 810d1c8:	f7f3 fa9e 	bl	8100708 <__aeabi_dmul>
 810d1cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0810d1d0 <_strtod_l>:
 810d1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d1d4:	ed2d 8b02 	vpush	{d8}
 810d1d8:	b09b      	sub	sp, #108	; 0x6c
 810d1da:	4604      	mov	r4, r0
 810d1dc:	9213      	str	r2, [sp, #76]	; 0x4c
 810d1de:	2200      	movs	r2, #0
 810d1e0:	9216      	str	r2, [sp, #88]	; 0x58
 810d1e2:	460d      	mov	r5, r1
 810d1e4:	f04f 0800 	mov.w	r8, #0
 810d1e8:	f04f 0900 	mov.w	r9, #0
 810d1ec:	460a      	mov	r2, r1
 810d1ee:	9215      	str	r2, [sp, #84]	; 0x54
 810d1f0:	7811      	ldrb	r1, [r2, #0]
 810d1f2:	292b      	cmp	r1, #43	; 0x2b
 810d1f4:	d04c      	beq.n	810d290 <_strtod_l+0xc0>
 810d1f6:	d83a      	bhi.n	810d26e <_strtod_l+0x9e>
 810d1f8:	290d      	cmp	r1, #13
 810d1fa:	d834      	bhi.n	810d266 <_strtod_l+0x96>
 810d1fc:	2908      	cmp	r1, #8
 810d1fe:	d834      	bhi.n	810d26a <_strtod_l+0x9a>
 810d200:	2900      	cmp	r1, #0
 810d202:	d03d      	beq.n	810d280 <_strtod_l+0xb0>
 810d204:	2200      	movs	r2, #0
 810d206:	920a      	str	r2, [sp, #40]	; 0x28
 810d208:	9e15      	ldr	r6, [sp, #84]	; 0x54
 810d20a:	7832      	ldrb	r2, [r6, #0]
 810d20c:	2a30      	cmp	r2, #48	; 0x30
 810d20e:	f040 80b4 	bne.w	810d37a <_strtod_l+0x1aa>
 810d212:	7872      	ldrb	r2, [r6, #1]
 810d214:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 810d218:	2a58      	cmp	r2, #88	; 0x58
 810d21a:	d170      	bne.n	810d2fe <_strtod_l+0x12e>
 810d21c:	9302      	str	r3, [sp, #8]
 810d21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d220:	9301      	str	r3, [sp, #4]
 810d222:	ab16      	add	r3, sp, #88	; 0x58
 810d224:	9300      	str	r3, [sp, #0]
 810d226:	4a8e      	ldr	r2, [pc, #568]	; (810d460 <_strtod_l+0x290>)
 810d228:	ab17      	add	r3, sp, #92	; 0x5c
 810d22a:	a915      	add	r1, sp, #84	; 0x54
 810d22c:	4620      	mov	r0, r4
 810d22e:	f001 fae7 	bl	810e800 <__gethex>
 810d232:	f010 070f 	ands.w	r7, r0, #15
 810d236:	4605      	mov	r5, r0
 810d238:	d005      	beq.n	810d246 <_strtod_l+0x76>
 810d23a:	2f06      	cmp	r7, #6
 810d23c:	d12a      	bne.n	810d294 <_strtod_l+0xc4>
 810d23e:	3601      	adds	r6, #1
 810d240:	2300      	movs	r3, #0
 810d242:	9615      	str	r6, [sp, #84]	; 0x54
 810d244:	930a      	str	r3, [sp, #40]	; 0x28
 810d246:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810d248:	2b00      	cmp	r3, #0
 810d24a:	f040 857f 	bne.w	810dd4c <_strtod_l+0xb7c>
 810d24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d250:	b1db      	cbz	r3, 810d28a <_strtod_l+0xba>
 810d252:	4642      	mov	r2, r8
 810d254:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810d258:	ec43 2b10 	vmov	d0, r2, r3
 810d25c:	b01b      	add	sp, #108	; 0x6c
 810d25e:	ecbd 8b02 	vpop	{d8}
 810d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d266:	2920      	cmp	r1, #32
 810d268:	d1cc      	bne.n	810d204 <_strtod_l+0x34>
 810d26a:	3201      	adds	r2, #1
 810d26c:	e7bf      	b.n	810d1ee <_strtod_l+0x1e>
 810d26e:	292d      	cmp	r1, #45	; 0x2d
 810d270:	d1c8      	bne.n	810d204 <_strtod_l+0x34>
 810d272:	2101      	movs	r1, #1
 810d274:	910a      	str	r1, [sp, #40]	; 0x28
 810d276:	1c51      	adds	r1, r2, #1
 810d278:	9115      	str	r1, [sp, #84]	; 0x54
 810d27a:	7852      	ldrb	r2, [r2, #1]
 810d27c:	2a00      	cmp	r2, #0
 810d27e:	d1c3      	bne.n	810d208 <_strtod_l+0x38>
 810d280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810d282:	9515      	str	r5, [sp, #84]	; 0x54
 810d284:	2b00      	cmp	r3, #0
 810d286:	f040 855f 	bne.w	810dd48 <_strtod_l+0xb78>
 810d28a:	4642      	mov	r2, r8
 810d28c:	464b      	mov	r3, r9
 810d28e:	e7e3      	b.n	810d258 <_strtod_l+0x88>
 810d290:	2100      	movs	r1, #0
 810d292:	e7ef      	b.n	810d274 <_strtod_l+0xa4>
 810d294:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810d296:	b13a      	cbz	r2, 810d2a8 <_strtod_l+0xd8>
 810d298:	2135      	movs	r1, #53	; 0x35
 810d29a:	a818      	add	r0, sp, #96	; 0x60
 810d29c:	f7ff ff2f 	bl	810d0fe <__copybits>
 810d2a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d2a2:	4620      	mov	r0, r4
 810d2a4:	f7ff fb02 	bl	810c8ac <_Bfree>
 810d2a8:	3f01      	subs	r7, #1
 810d2aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810d2ac:	2f04      	cmp	r7, #4
 810d2ae:	d806      	bhi.n	810d2be <_strtod_l+0xee>
 810d2b0:	e8df f007 	tbb	[pc, r7]
 810d2b4:	201d0314 	.word	0x201d0314
 810d2b8:	14          	.byte	0x14
 810d2b9:	00          	.byte	0x00
 810d2ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810d2be:	05e9      	lsls	r1, r5, #23
 810d2c0:	bf48      	it	mi
 810d2c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810d2c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d2ca:	0d1b      	lsrs	r3, r3, #20
 810d2cc:	051b      	lsls	r3, r3, #20
 810d2ce:	2b00      	cmp	r3, #0
 810d2d0:	d1b9      	bne.n	810d246 <_strtod_l+0x76>
 810d2d2:	f7fe fba3 	bl	810ba1c <__errno>
 810d2d6:	2322      	movs	r3, #34	; 0x22
 810d2d8:	6003      	str	r3, [r0, #0]
 810d2da:	e7b4      	b.n	810d246 <_strtod_l+0x76>
 810d2dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810d2e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810d2e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810d2e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810d2ec:	e7e7      	b.n	810d2be <_strtod_l+0xee>
 810d2ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810d468 <_strtod_l+0x298>
 810d2f2:	e7e4      	b.n	810d2be <_strtod_l+0xee>
 810d2f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810d2f8:	f04f 38ff 	mov.w	r8, #4294967295
 810d2fc:	e7df      	b.n	810d2be <_strtod_l+0xee>
 810d2fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d300:	1c5a      	adds	r2, r3, #1
 810d302:	9215      	str	r2, [sp, #84]	; 0x54
 810d304:	785b      	ldrb	r3, [r3, #1]
 810d306:	2b30      	cmp	r3, #48	; 0x30
 810d308:	d0f9      	beq.n	810d2fe <_strtod_l+0x12e>
 810d30a:	2b00      	cmp	r3, #0
 810d30c:	d09b      	beq.n	810d246 <_strtod_l+0x76>
 810d30e:	2301      	movs	r3, #1
 810d310:	f04f 0a00 	mov.w	sl, #0
 810d314:	9304      	str	r3, [sp, #16]
 810d316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d318:	930b      	str	r3, [sp, #44]	; 0x2c
 810d31a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810d31e:	46d3      	mov	fp, sl
 810d320:	220a      	movs	r2, #10
 810d322:	9815      	ldr	r0, [sp, #84]	; 0x54
 810d324:	7806      	ldrb	r6, [r0, #0]
 810d326:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810d32a:	b2d9      	uxtb	r1, r3
 810d32c:	2909      	cmp	r1, #9
 810d32e:	d926      	bls.n	810d37e <_strtod_l+0x1ae>
 810d330:	494c      	ldr	r1, [pc, #304]	; (810d464 <_strtod_l+0x294>)
 810d332:	2201      	movs	r2, #1
 810d334:	f001 f98c 	bl	810e650 <strncmp>
 810d338:	2800      	cmp	r0, #0
 810d33a:	d030      	beq.n	810d39e <_strtod_l+0x1ce>
 810d33c:	2000      	movs	r0, #0
 810d33e:	4632      	mov	r2, r6
 810d340:	9005      	str	r0, [sp, #20]
 810d342:	465e      	mov	r6, fp
 810d344:	4603      	mov	r3, r0
 810d346:	2a65      	cmp	r2, #101	; 0x65
 810d348:	d001      	beq.n	810d34e <_strtod_l+0x17e>
 810d34a:	2a45      	cmp	r2, #69	; 0x45
 810d34c:	d113      	bne.n	810d376 <_strtod_l+0x1a6>
 810d34e:	b91e      	cbnz	r6, 810d358 <_strtod_l+0x188>
 810d350:	9a04      	ldr	r2, [sp, #16]
 810d352:	4302      	orrs	r2, r0
 810d354:	d094      	beq.n	810d280 <_strtod_l+0xb0>
 810d356:	2600      	movs	r6, #0
 810d358:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810d35a:	1c6a      	adds	r2, r5, #1
 810d35c:	9215      	str	r2, [sp, #84]	; 0x54
 810d35e:	786a      	ldrb	r2, [r5, #1]
 810d360:	2a2b      	cmp	r2, #43	; 0x2b
 810d362:	d074      	beq.n	810d44e <_strtod_l+0x27e>
 810d364:	2a2d      	cmp	r2, #45	; 0x2d
 810d366:	d078      	beq.n	810d45a <_strtod_l+0x28a>
 810d368:	f04f 0c00 	mov.w	ip, #0
 810d36c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810d370:	2909      	cmp	r1, #9
 810d372:	d97f      	bls.n	810d474 <_strtod_l+0x2a4>
 810d374:	9515      	str	r5, [sp, #84]	; 0x54
 810d376:	2700      	movs	r7, #0
 810d378:	e09e      	b.n	810d4b8 <_strtod_l+0x2e8>
 810d37a:	2300      	movs	r3, #0
 810d37c:	e7c8      	b.n	810d310 <_strtod_l+0x140>
 810d37e:	f1bb 0f08 	cmp.w	fp, #8
 810d382:	bfd8      	it	le
 810d384:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810d386:	f100 0001 	add.w	r0, r0, #1
 810d38a:	bfda      	itte	le
 810d38c:	fb02 3301 	mlale	r3, r2, r1, r3
 810d390:	9309      	strle	r3, [sp, #36]	; 0x24
 810d392:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810d396:	f10b 0b01 	add.w	fp, fp, #1
 810d39a:	9015      	str	r0, [sp, #84]	; 0x54
 810d39c:	e7c1      	b.n	810d322 <_strtod_l+0x152>
 810d39e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d3a0:	1c5a      	adds	r2, r3, #1
 810d3a2:	9215      	str	r2, [sp, #84]	; 0x54
 810d3a4:	785a      	ldrb	r2, [r3, #1]
 810d3a6:	f1bb 0f00 	cmp.w	fp, #0
 810d3aa:	d037      	beq.n	810d41c <_strtod_l+0x24c>
 810d3ac:	9005      	str	r0, [sp, #20]
 810d3ae:	465e      	mov	r6, fp
 810d3b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810d3b4:	2b09      	cmp	r3, #9
 810d3b6:	d912      	bls.n	810d3de <_strtod_l+0x20e>
 810d3b8:	2301      	movs	r3, #1
 810d3ba:	e7c4      	b.n	810d346 <_strtod_l+0x176>
 810d3bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d3be:	1c5a      	adds	r2, r3, #1
 810d3c0:	9215      	str	r2, [sp, #84]	; 0x54
 810d3c2:	785a      	ldrb	r2, [r3, #1]
 810d3c4:	3001      	adds	r0, #1
 810d3c6:	2a30      	cmp	r2, #48	; 0x30
 810d3c8:	d0f8      	beq.n	810d3bc <_strtod_l+0x1ec>
 810d3ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810d3ce:	2b08      	cmp	r3, #8
 810d3d0:	f200 84c1 	bhi.w	810dd56 <_strtod_l+0xb86>
 810d3d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d3d6:	9005      	str	r0, [sp, #20]
 810d3d8:	2000      	movs	r0, #0
 810d3da:	930b      	str	r3, [sp, #44]	; 0x2c
 810d3dc:	4606      	mov	r6, r0
 810d3de:	3a30      	subs	r2, #48	; 0x30
 810d3e0:	f100 0301 	add.w	r3, r0, #1
 810d3e4:	d014      	beq.n	810d410 <_strtod_l+0x240>
 810d3e6:	9905      	ldr	r1, [sp, #20]
 810d3e8:	4419      	add	r1, r3
 810d3ea:	9105      	str	r1, [sp, #20]
 810d3ec:	4633      	mov	r3, r6
 810d3ee:	eb00 0c06 	add.w	ip, r0, r6
 810d3f2:	210a      	movs	r1, #10
 810d3f4:	4563      	cmp	r3, ip
 810d3f6:	d113      	bne.n	810d420 <_strtod_l+0x250>
 810d3f8:	1833      	adds	r3, r6, r0
 810d3fa:	2b08      	cmp	r3, #8
 810d3fc:	f106 0601 	add.w	r6, r6, #1
 810d400:	4406      	add	r6, r0
 810d402:	dc1a      	bgt.n	810d43a <_strtod_l+0x26a>
 810d404:	9909      	ldr	r1, [sp, #36]	; 0x24
 810d406:	230a      	movs	r3, #10
 810d408:	fb03 2301 	mla	r3, r3, r1, r2
 810d40c:	9309      	str	r3, [sp, #36]	; 0x24
 810d40e:	2300      	movs	r3, #0
 810d410:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d412:	1c51      	adds	r1, r2, #1
 810d414:	9115      	str	r1, [sp, #84]	; 0x54
 810d416:	7852      	ldrb	r2, [r2, #1]
 810d418:	4618      	mov	r0, r3
 810d41a:	e7c9      	b.n	810d3b0 <_strtod_l+0x1e0>
 810d41c:	4658      	mov	r0, fp
 810d41e:	e7d2      	b.n	810d3c6 <_strtod_l+0x1f6>
 810d420:	2b08      	cmp	r3, #8
 810d422:	f103 0301 	add.w	r3, r3, #1
 810d426:	dc03      	bgt.n	810d430 <_strtod_l+0x260>
 810d428:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810d42a:	434f      	muls	r7, r1
 810d42c:	9709      	str	r7, [sp, #36]	; 0x24
 810d42e:	e7e1      	b.n	810d3f4 <_strtod_l+0x224>
 810d430:	2b10      	cmp	r3, #16
 810d432:	bfd8      	it	le
 810d434:	fb01 fa0a 	mulle.w	sl, r1, sl
 810d438:	e7dc      	b.n	810d3f4 <_strtod_l+0x224>
 810d43a:	2e10      	cmp	r6, #16
 810d43c:	bfdc      	itt	le
 810d43e:	230a      	movle	r3, #10
 810d440:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810d444:	e7e3      	b.n	810d40e <_strtod_l+0x23e>
 810d446:	2300      	movs	r3, #0
 810d448:	9305      	str	r3, [sp, #20]
 810d44a:	2301      	movs	r3, #1
 810d44c:	e780      	b.n	810d350 <_strtod_l+0x180>
 810d44e:	f04f 0c00 	mov.w	ip, #0
 810d452:	1caa      	adds	r2, r5, #2
 810d454:	9215      	str	r2, [sp, #84]	; 0x54
 810d456:	78aa      	ldrb	r2, [r5, #2]
 810d458:	e788      	b.n	810d36c <_strtod_l+0x19c>
 810d45a:	f04f 0c01 	mov.w	ip, #1
 810d45e:	e7f8      	b.n	810d452 <_strtod_l+0x282>
 810d460:	081ec4e0 	.word	0x081ec4e0
 810d464:	081ec4dc 	.word	0x081ec4dc
 810d468:	7ff00000 	.word	0x7ff00000
 810d46c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d46e:	1c51      	adds	r1, r2, #1
 810d470:	9115      	str	r1, [sp, #84]	; 0x54
 810d472:	7852      	ldrb	r2, [r2, #1]
 810d474:	2a30      	cmp	r2, #48	; 0x30
 810d476:	d0f9      	beq.n	810d46c <_strtod_l+0x29c>
 810d478:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810d47c:	2908      	cmp	r1, #8
 810d47e:	f63f af7a 	bhi.w	810d376 <_strtod_l+0x1a6>
 810d482:	3a30      	subs	r2, #48	; 0x30
 810d484:	9208      	str	r2, [sp, #32]
 810d486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d488:	920c      	str	r2, [sp, #48]	; 0x30
 810d48a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810d48c:	1c57      	adds	r7, r2, #1
 810d48e:	9715      	str	r7, [sp, #84]	; 0x54
 810d490:	7852      	ldrb	r2, [r2, #1]
 810d492:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810d496:	f1be 0f09 	cmp.w	lr, #9
 810d49a:	d938      	bls.n	810d50e <_strtod_l+0x33e>
 810d49c:	990c      	ldr	r1, [sp, #48]	; 0x30
 810d49e:	1a7f      	subs	r7, r7, r1
 810d4a0:	2f08      	cmp	r7, #8
 810d4a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810d4a6:	dc03      	bgt.n	810d4b0 <_strtod_l+0x2e0>
 810d4a8:	9908      	ldr	r1, [sp, #32]
 810d4aa:	428f      	cmp	r7, r1
 810d4ac:	bfa8      	it	ge
 810d4ae:	460f      	movge	r7, r1
 810d4b0:	f1bc 0f00 	cmp.w	ip, #0
 810d4b4:	d000      	beq.n	810d4b8 <_strtod_l+0x2e8>
 810d4b6:	427f      	negs	r7, r7
 810d4b8:	2e00      	cmp	r6, #0
 810d4ba:	d14f      	bne.n	810d55c <_strtod_l+0x38c>
 810d4bc:	9904      	ldr	r1, [sp, #16]
 810d4be:	4301      	orrs	r1, r0
 810d4c0:	f47f aec1 	bne.w	810d246 <_strtod_l+0x76>
 810d4c4:	2b00      	cmp	r3, #0
 810d4c6:	f47f aedb 	bne.w	810d280 <_strtod_l+0xb0>
 810d4ca:	2a69      	cmp	r2, #105	; 0x69
 810d4cc:	d029      	beq.n	810d522 <_strtod_l+0x352>
 810d4ce:	dc26      	bgt.n	810d51e <_strtod_l+0x34e>
 810d4d0:	2a49      	cmp	r2, #73	; 0x49
 810d4d2:	d026      	beq.n	810d522 <_strtod_l+0x352>
 810d4d4:	2a4e      	cmp	r2, #78	; 0x4e
 810d4d6:	f47f aed3 	bne.w	810d280 <_strtod_l+0xb0>
 810d4da:	499b      	ldr	r1, [pc, #620]	; (810d748 <_strtod_l+0x578>)
 810d4dc:	a815      	add	r0, sp, #84	; 0x54
 810d4de:	f001 fbcf 	bl	810ec80 <__match>
 810d4e2:	2800      	cmp	r0, #0
 810d4e4:	f43f aecc 	beq.w	810d280 <_strtod_l+0xb0>
 810d4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d4ea:	781b      	ldrb	r3, [r3, #0]
 810d4ec:	2b28      	cmp	r3, #40	; 0x28
 810d4ee:	d12f      	bne.n	810d550 <_strtod_l+0x380>
 810d4f0:	4996      	ldr	r1, [pc, #600]	; (810d74c <_strtod_l+0x57c>)
 810d4f2:	aa18      	add	r2, sp, #96	; 0x60
 810d4f4:	a815      	add	r0, sp, #84	; 0x54
 810d4f6:	f001 fbd7 	bl	810eca8 <__hexnan>
 810d4fa:	2805      	cmp	r0, #5
 810d4fc:	d128      	bne.n	810d550 <_strtod_l+0x380>
 810d4fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810d500:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810d504:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810d508:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810d50c:	e69b      	b.n	810d246 <_strtod_l+0x76>
 810d50e:	9f08      	ldr	r7, [sp, #32]
 810d510:	210a      	movs	r1, #10
 810d512:	fb01 2107 	mla	r1, r1, r7, r2
 810d516:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810d51a:	9208      	str	r2, [sp, #32]
 810d51c:	e7b5      	b.n	810d48a <_strtod_l+0x2ba>
 810d51e:	2a6e      	cmp	r2, #110	; 0x6e
 810d520:	e7d9      	b.n	810d4d6 <_strtod_l+0x306>
 810d522:	498b      	ldr	r1, [pc, #556]	; (810d750 <_strtod_l+0x580>)
 810d524:	a815      	add	r0, sp, #84	; 0x54
 810d526:	f001 fbab 	bl	810ec80 <__match>
 810d52a:	2800      	cmp	r0, #0
 810d52c:	f43f aea8 	beq.w	810d280 <_strtod_l+0xb0>
 810d530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d532:	4988      	ldr	r1, [pc, #544]	; (810d754 <_strtod_l+0x584>)
 810d534:	3b01      	subs	r3, #1
 810d536:	a815      	add	r0, sp, #84	; 0x54
 810d538:	9315      	str	r3, [sp, #84]	; 0x54
 810d53a:	f001 fba1 	bl	810ec80 <__match>
 810d53e:	b910      	cbnz	r0, 810d546 <_strtod_l+0x376>
 810d540:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d542:	3301      	adds	r3, #1
 810d544:	9315      	str	r3, [sp, #84]	; 0x54
 810d546:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810d764 <_strtod_l+0x594>
 810d54a:	f04f 0800 	mov.w	r8, #0
 810d54e:	e67a      	b.n	810d246 <_strtod_l+0x76>
 810d550:	4881      	ldr	r0, [pc, #516]	; (810d758 <_strtod_l+0x588>)
 810d552:	f001 f8b1 	bl	810e6b8 <nan>
 810d556:	ec59 8b10 	vmov	r8, r9, d0
 810d55a:	e674      	b.n	810d246 <_strtod_l+0x76>
 810d55c:	9b05      	ldr	r3, [sp, #20]
 810d55e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d560:	1afb      	subs	r3, r7, r3
 810d562:	f1bb 0f00 	cmp.w	fp, #0
 810d566:	bf08      	it	eq
 810d568:	46b3      	moveq	fp, r6
 810d56a:	2e10      	cmp	r6, #16
 810d56c:	9308      	str	r3, [sp, #32]
 810d56e:	4635      	mov	r5, r6
 810d570:	bfa8      	it	ge
 810d572:	2510      	movge	r5, #16
 810d574:	f7f3 f84e 	bl	8100614 <__aeabi_ui2d>
 810d578:	2e09      	cmp	r6, #9
 810d57a:	4680      	mov	r8, r0
 810d57c:	4689      	mov	r9, r1
 810d57e:	dd13      	ble.n	810d5a8 <_strtod_l+0x3d8>
 810d580:	4b76      	ldr	r3, [pc, #472]	; (810d75c <_strtod_l+0x58c>)
 810d582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d586:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810d58a:	f7f3 f8bd 	bl	8100708 <__aeabi_dmul>
 810d58e:	4680      	mov	r8, r0
 810d590:	4650      	mov	r0, sl
 810d592:	4689      	mov	r9, r1
 810d594:	f7f3 f83e 	bl	8100614 <__aeabi_ui2d>
 810d598:	4602      	mov	r2, r0
 810d59a:	460b      	mov	r3, r1
 810d59c:	4640      	mov	r0, r8
 810d59e:	4649      	mov	r1, r9
 810d5a0:	f7f2 fefc 	bl	810039c <__adddf3>
 810d5a4:	4680      	mov	r8, r0
 810d5a6:	4689      	mov	r9, r1
 810d5a8:	2e0f      	cmp	r6, #15
 810d5aa:	dc38      	bgt.n	810d61e <_strtod_l+0x44e>
 810d5ac:	9b08      	ldr	r3, [sp, #32]
 810d5ae:	2b00      	cmp	r3, #0
 810d5b0:	f43f ae49 	beq.w	810d246 <_strtod_l+0x76>
 810d5b4:	dd24      	ble.n	810d600 <_strtod_l+0x430>
 810d5b6:	2b16      	cmp	r3, #22
 810d5b8:	dc0b      	bgt.n	810d5d2 <_strtod_l+0x402>
 810d5ba:	4968      	ldr	r1, [pc, #416]	; (810d75c <_strtod_l+0x58c>)
 810d5bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810d5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d5c4:	4642      	mov	r2, r8
 810d5c6:	464b      	mov	r3, r9
 810d5c8:	f7f3 f89e 	bl	8100708 <__aeabi_dmul>
 810d5cc:	4680      	mov	r8, r0
 810d5ce:	4689      	mov	r9, r1
 810d5d0:	e639      	b.n	810d246 <_strtod_l+0x76>
 810d5d2:	9a08      	ldr	r2, [sp, #32]
 810d5d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810d5d8:	4293      	cmp	r3, r2
 810d5da:	db20      	blt.n	810d61e <_strtod_l+0x44e>
 810d5dc:	4c5f      	ldr	r4, [pc, #380]	; (810d75c <_strtod_l+0x58c>)
 810d5de:	f1c6 060f 	rsb	r6, r6, #15
 810d5e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810d5e6:	4642      	mov	r2, r8
 810d5e8:	464b      	mov	r3, r9
 810d5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d5ee:	f7f3 f88b 	bl	8100708 <__aeabi_dmul>
 810d5f2:	9b08      	ldr	r3, [sp, #32]
 810d5f4:	1b9e      	subs	r6, r3, r6
 810d5f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810d5fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 810d5fe:	e7e3      	b.n	810d5c8 <_strtod_l+0x3f8>
 810d600:	9b08      	ldr	r3, [sp, #32]
 810d602:	3316      	adds	r3, #22
 810d604:	db0b      	blt.n	810d61e <_strtod_l+0x44e>
 810d606:	9b05      	ldr	r3, [sp, #20]
 810d608:	1bdf      	subs	r7, r3, r7
 810d60a:	4b54      	ldr	r3, [pc, #336]	; (810d75c <_strtod_l+0x58c>)
 810d60c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810d610:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d614:	4640      	mov	r0, r8
 810d616:	4649      	mov	r1, r9
 810d618:	f7f3 f9a0 	bl	810095c <__aeabi_ddiv>
 810d61c:	e7d6      	b.n	810d5cc <_strtod_l+0x3fc>
 810d61e:	9b08      	ldr	r3, [sp, #32]
 810d620:	1b75      	subs	r5, r6, r5
 810d622:	441d      	add	r5, r3
 810d624:	2d00      	cmp	r5, #0
 810d626:	dd70      	ble.n	810d70a <_strtod_l+0x53a>
 810d628:	f015 030f 	ands.w	r3, r5, #15
 810d62c:	d00a      	beq.n	810d644 <_strtod_l+0x474>
 810d62e:	494b      	ldr	r1, [pc, #300]	; (810d75c <_strtod_l+0x58c>)
 810d630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810d634:	4642      	mov	r2, r8
 810d636:	464b      	mov	r3, r9
 810d638:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d63c:	f7f3 f864 	bl	8100708 <__aeabi_dmul>
 810d640:	4680      	mov	r8, r0
 810d642:	4689      	mov	r9, r1
 810d644:	f035 050f 	bics.w	r5, r5, #15
 810d648:	d04d      	beq.n	810d6e6 <_strtod_l+0x516>
 810d64a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810d64e:	dd22      	ble.n	810d696 <_strtod_l+0x4c6>
 810d650:	2500      	movs	r5, #0
 810d652:	46ab      	mov	fp, r5
 810d654:	9509      	str	r5, [sp, #36]	; 0x24
 810d656:	9505      	str	r5, [sp, #20]
 810d658:	2322      	movs	r3, #34	; 0x22
 810d65a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810d764 <_strtod_l+0x594>
 810d65e:	6023      	str	r3, [r4, #0]
 810d660:	f04f 0800 	mov.w	r8, #0
 810d664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d666:	2b00      	cmp	r3, #0
 810d668:	f43f aded 	beq.w	810d246 <_strtod_l+0x76>
 810d66c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d66e:	4620      	mov	r0, r4
 810d670:	f7ff f91c 	bl	810c8ac <_Bfree>
 810d674:	9905      	ldr	r1, [sp, #20]
 810d676:	4620      	mov	r0, r4
 810d678:	f7ff f918 	bl	810c8ac <_Bfree>
 810d67c:	4659      	mov	r1, fp
 810d67e:	4620      	mov	r0, r4
 810d680:	f7ff f914 	bl	810c8ac <_Bfree>
 810d684:	9909      	ldr	r1, [sp, #36]	; 0x24
 810d686:	4620      	mov	r0, r4
 810d688:	f7ff f910 	bl	810c8ac <_Bfree>
 810d68c:	4629      	mov	r1, r5
 810d68e:	4620      	mov	r0, r4
 810d690:	f7ff f90c 	bl	810c8ac <_Bfree>
 810d694:	e5d7      	b.n	810d246 <_strtod_l+0x76>
 810d696:	4b32      	ldr	r3, [pc, #200]	; (810d760 <_strtod_l+0x590>)
 810d698:	9304      	str	r3, [sp, #16]
 810d69a:	2300      	movs	r3, #0
 810d69c:	112d      	asrs	r5, r5, #4
 810d69e:	4640      	mov	r0, r8
 810d6a0:	4649      	mov	r1, r9
 810d6a2:	469a      	mov	sl, r3
 810d6a4:	2d01      	cmp	r5, #1
 810d6a6:	dc21      	bgt.n	810d6ec <_strtod_l+0x51c>
 810d6a8:	b10b      	cbz	r3, 810d6ae <_strtod_l+0x4de>
 810d6aa:	4680      	mov	r8, r0
 810d6ac:	4689      	mov	r9, r1
 810d6ae:	492c      	ldr	r1, [pc, #176]	; (810d760 <_strtod_l+0x590>)
 810d6b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810d6b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810d6b8:	4642      	mov	r2, r8
 810d6ba:	464b      	mov	r3, r9
 810d6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d6c0:	f7f3 f822 	bl	8100708 <__aeabi_dmul>
 810d6c4:	4b27      	ldr	r3, [pc, #156]	; (810d764 <_strtod_l+0x594>)
 810d6c6:	460a      	mov	r2, r1
 810d6c8:	400b      	ands	r3, r1
 810d6ca:	4927      	ldr	r1, [pc, #156]	; (810d768 <_strtod_l+0x598>)
 810d6cc:	428b      	cmp	r3, r1
 810d6ce:	4680      	mov	r8, r0
 810d6d0:	d8be      	bhi.n	810d650 <_strtod_l+0x480>
 810d6d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810d6d6:	428b      	cmp	r3, r1
 810d6d8:	bf86      	itte	hi
 810d6da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810d76c <_strtod_l+0x59c>
 810d6de:	f04f 38ff 	movhi.w	r8, #4294967295
 810d6e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810d6e6:	2300      	movs	r3, #0
 810d6e8:	9304      	str	r3, [sp, #16]
 810d6ea:	e07b      	b.n	810d7e4 <_strtod_l+0x614>
 810d6ec:	07ea      	lsls	r2, r5, #31
 810d6ee:	d505      	bpl.n	810d6fc <_strtod_l+0x52c>
 810d6f0:	9b04      	ldr	r3, [sp, #16]
 810d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6f6:	f7f3 f807 	bl	8100708 <__aeabi_dmul>
 810d6fa:	2301      	movs	r3, #1
 810d6fc:	9a04      	ldr	r2, [sp, #16]
 810d6fe:	3208      	adds	r2, #8
 810d700:	f10a 0a01 	add.w	sl, sl, #1
 810d704:	106d      	asrs	r5, r5, #1
 810d706:	9204      	str	r2, [sp, #16]
 810d708:	e7cc      	b.n	810d6a4 <_strtod_l+0x4d4>
 810d70a:	d0ec      	beq.n	810d6e6 <_strtod_l+0x516>
 810d70c:	426d      	negs	r5, r5
 810d70e:	f015 020f 	ands.w	r2, r5, #15
 810d712:	d00a      	beq.n	810d72a <_strtod_l+0x55a>
 810d714:	4b11      	ldr	r3, [pc, #68]	; (810d75c <_strtod_l+0x58c>)
 810d716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d71a:	4640      	mov	r0, r8
 810d71c:	4649      	mov	r1, r9
 810d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d722:	f7f3 f91b 	bl	810095c <__aeabi_ddiv>
 810d726:	4680      	mov	r8, r0
 810d728:	4689      	mov	r9, r1
 810d72a:	112d      	asrs	r5, r5, #4
 810d72c:	d0db      	beq.n	810d6e6 <_strtod_l+0x516>
 810d72e:	2d1f      	cmp	r5, #31
 810d730:	dd1e      	ble.n	810d770 <_strtod_l+0x5a0>
 810d732:	2500      	movs	r5, #0
 810d734:	46ab      	mov	fp, r5
 810d736:	9509      	str	r5, [sp, #36]	; 0x24
 810d738:	9505      	str	r5, [sp, #20]
 810d73a:	2322      	movs	r3, #34	; 0x22
 810d73c:	f04f 0800 	mov.w	r8, #0
 810d740:	f04f 0900 	mov.w	r9, #0
 810d744:	6023      	str	r3, [r4, #0]
 810d746:	e78d      	b.n	810d664 <_strtod_l+0x494>
 810d748:	081ec2cd 	.word	0x081ec2cd
 810d74c:	081ec4f4 	.word	0x081ec4f4
 810d750:	081ec2c5 	.word	0x081ec2c5
 810d754:	081ec2fc 	.word	0x081ec2fc
 810d758:	081d8da9 	.word	0x081d8da9
 810d75c:	081ec408 	.word	0x081ec408
 810d760:	081ec3e0 	.word	0x081ec3e0
 810d764:	7ff00000 	.word	0x7ff00000
 810d768:	7ca00000 	.word	0x7ca00000
 810d76c:	7fefffff 	.word	0x7fefffff
 810d770:	f015 0310 	ands.w	r3, r5, #16
 810d774:	bf18      	it	ne
 810d776:	236a      	movne	r3, #106	; 0x6a
 810d778:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810db1c <_strtod_l+0x94c>
 810d77c:	9304      	str	r3, [sp, #16]
 810d77e:	4640      	mov	r0, r8
 810d780:	4649      	mov	r1, r9
 810d782:	2300      	movs	r3, #0
 810d784:	07ea      	lsls	r2, r5, #31
 810d786:	d504      	bpl.n	810d792 <_strtod_l+0x5c2>
 810d788:	e9da 2300 	ldrd	r2, r3, [sl]
 810d78c:	f7f2 ffbc 	bl	8100708 <__aeabi_dmul>
 810d790:	2301      	movs	r3, #1
 810d792:	106d      	asrs	r5, r5, #1
 810d794:	f10a 0a08 	add.w	sl, sl, #8
 810d798:	d1f4      	bne.n	810d784 <_strtod_l+0x5b4>
 810d79a:	b10b      	cbz	r3, 810d7a0 <_strtod_l+0x5d0>
 810d79c:	4680      	mov	r8, r0
 810d79e:	4689      	mov	r9, r1
 810d7a0:	9b04      	ldr	r3, [sp, #16]
 810d7a2:	b1bb      	cbz	r3, 810d7d4 <_strtod_l+0x604>
 810d7a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810d7a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810d7ac:	2b00      	cmp	r3, #0
 810d7ae:	4649      	mov	r1, r9
 810d7b0:	dd10      	ble.n	810d7d4 <_strtod_l+0x604>
 810d7b2:	2b1f      	cmp	r3, #31
 810d7b4:	f340 811e 	ble.w	810d9f4 <_strtod_l+0x824>
 810d7b8:	2b34      	cmp	r3, #52	; 0x34
 810d7ba:	bfde      	ittt	le
 810d7bc:	f04f 33ff 	movle.w	r3, #4294967295
 810d7c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810d7c4:	4093      	lslle	r3, r2
 810d7c6:	f04f 0800 	mov.w	r8, #0
 810d7ca:	bfcc      	ite	gt
 810d7cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810d7d0:	ea03 0901 	andle.w	r9, r3, r1
 810d7d4:	2200      	movs	r2, #0
 810d7d6:	2300      	movs	r3, #0
 810d7d8:	4640      	mov	r0, r8
 810d7da:	4649      	mov	r1, r9
 810d7dc:	f7f3 f9fc 	bl	8100bd8 <__aeabi_dcmpeq>
 810d7e0:	2800      	cmp	r0, #0
 810d7e2:	d1a6      	bne.n	810d732 <_strtod_l+0x562>
 810d7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d7e6:	9300      	str	r3, [sp, #0]
 810d7e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810d7ea:	4633      	mov	r3, r6
 810d7ec:	465a      	mov	r2, fp
 810d7ee:	4620      	mov	r0, r4
 810d7f0:	f7ff f8c4 	bl	810c97c <__s2b>
 810d7f4:	9009      	str	r0, [sp, #36]	; 0x24
 810d7f6:	2800      	cmp	r0, #0
 810d7f8:	f43f af2a 	beq.w	810d650 <_strtod_l+0x480>
 810d7fc:	9a08      	ldr	r2, [sp, #32]
 810d7fe:	9b05      	ldr	r3, [sp, #20]
 810d800:	2a00      	cmp	r2, #0
 810d802:	eba3 0307 	sub.w	r3, r3, r7
 810d806:	bfa8      	it	ge
 810d808:	2300      	movge	r3, #0
 810d80a:	930c      	str	r3, [sp, #48]	; 0x30
 810d80c:	2500      	movs	r5, #0
 810d80e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810d812:	9312      	str	r3, [sp, #72]	; 0x48
 810d814:	46ab      	mov	fp, r5
 810d816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d818:	4620      	mov	r0, r4
 810d81a:	6859      	ldr	r1, [r3, #4]
 810d81c:	f7ff f806 	bl	810c82c <_Balloc>
 810d820:	9005      	str	r0, [sp, #20]
 810d822:	2800      	cmp	r0, #0
 810d824:	f43f af18 	beq.w	810d658 <_strtod_l+0x488>
 810d828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d82a:	691a      	ldr	r2, [r3, #16]
 810d82c:	3202      	adds	r2, #2
 810d82e:	f103 010c 	add.w	r1, r3, #12
 810d832:	0092      	lsls	r2, r2, #2
 810d834:	300c      	adds	r0, #12
 810d836:	f7fe f91e 	bl	810ba76 <memcpy>
 810d83a:	ec49 8b10 	vmov	d0, r8, r9
 810d83e:	aa18      	add	r2, sp, #96	; 0x60
 810d840:	a917      	add	r1, sp, #92	; 0x5c
 810d842:	4620      	mov	r0, r4
 810d844:	f7ff fbce 	bl	810cfe4 <__d2b>
 810d848:	ec49 8b18 	vmov	d8, r8, r9
 810d84c:	9016      	str	r0, [sp, #88]	; 0x58
 810d84e:	2800      	cmp	r0, #0
 810d850:	f43f af02 	beq.w	810d658 <_strtod_l+0x488>
 810d854:	2101      	movs	r1, #1
 810d856:	4620      	mov	r0, r4
 810d858:	f7ff f928 	bl	810caac <__i2b>
 810d85c:	4683      	mov	fp, r0
 810d85e:	2800      	cmp	r0, #0
 810d860:	f43f aefa 	beq.w	810d658 <_strtod_l+0x488>
 810d864:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810d866:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810d868:	2e00      	cmp	r6, #0
 810d86a:	bfab      	itete	ge
 810d86c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810d86e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810d870:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810d872:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810d876:	bfac      	ite	ge
 810d878:	eb06 0a03 	addge.w	sl, r6, r3
 810d87c:	1b9f      	sublt	r7, r3, r6
 810d87e:	9b04      	ldr	r3, [sp, #16]
 810d880:	1af6      	subs	r6, r6, r3
 810d882:	4416      	add	r6, r2
 810d884:	4ba0      	ldr	r3, [pc, #640]	; (810db08 <_strtod_l+0x938>)
 810d886:	3e01      	subs	r6, #1
 810d888:	429e      	cmp	r6, r3
 810d88a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810d88e:	f280 80c4 	bge.w	810da1a <_strtod_l+0x84a>
 810d892:	1b9b      	subs	r3, r3, r6
 810d894:	2b1f      	cmp	r3, #31
 810d896:	eba2 0203 	sub.w	r2, r2, r3
 810d89a:	f04f 0101 	mov.w	r1, #1
 810d89e:	f300 80b0 	bgt.w	810da02 <_strtod_l+0x832>
 810d8a2:	fa01 f303 	lsl.w	r3, r1, r3
 810d8a6:	930e      	str	r3, [sp, #56]	; 0x38
 810d8a8:	2300      	movs	r3, #0
 810d8aa:	930d      	str	r3, [sp, #52]	; 0x34
 810d8ac:	eb0a 0602 	add.w	r6, sl, r2
 810d8b0:	9b04      	ldr	r3, [sp, #16]
 810d8b2:	45b2      	cmp	sl, r6
 810d8b4:	4417      	add	r7, r2
 810d8b6:	441f      	add	r7, r3
 810d8b8:	4653      	mov	r3, sl
 810d8ba:	bfa8      	it	ge
 810d8bc:	4633      	movge	r3, r6
 810d8be:	42bb      	cmp	r3, r7
 810d8c0:	bfa8      	it	ge
 810d8c2:	463b      	movge	r3, r7
 810d8c4:	2b00      	cmp	r3, #0
 810d8c6:	bfc2      	ittt	gt
 810d8c8:	1af6      	subgt	r6, r6, r3
 810d8ca:	1aff      	subgt	r7, r7, r3
 810d8cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 810d8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d8d2:	2b00      	cmp	r3, #0
 810d8d4:	dd17      	ble.n	810d906 <_strtod_l+0x736>
 810d8d6:	4659      	mov	r1, fp
 810d8d8:	461a      	mov	r2, r3
 810d8da:	4620      	mov	r0, r4
 810d8dc:	f7ff f9a6 	bl	810cc2c <__pow5mult>
 810d8e0:	4683      	mov	fp, r0
 810d8e2:	2800      	cmp	r0, #0
 810d8e4:	f43f aeb8 	beq.w	810d658 <_strtod_l+0x488>
 810d8e8:	4601      	mov	r1, r0
 810d8ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810d8ec:	4620      	mov	r0, r4
 810d8ee:	f7ff f8f3 	bl	810cad8 <__multiply>
 810d8f2:	900b      	str	r0, [sp, #44]	; 0x2c
 810d8f4:	2800      	cmp	r0, #0
 810d8f6:	f43f aeaf 	beq.w	810d658 <_strtod_l+0x488>
 810d8fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d8fc:	4620      	mov	r0, r4
 810d8fe:	f7fe ffd5 	bl	810c8ac <_Bfree>
 810d902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d904:	9316      	str	r3, [sp, #88]	; 0x58
 810d906:	2e00      	cmp	r6, #0
 810d908:	f300 808c 	bgt.w	810da24 <_strtod_l+0x854>
 810d90c:	9b08      	ldr	r3, [sp, #32]
 810d90e:	2b00      	cmp	r3, #0
 810d910:	dd08      	ble.n	810d924 <_strtod_l+0x754>
 810d912:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810d914:	9905      	ldr	r1, [sp, #20]
 810d916:	4620      	mov	r0, r4
 810d918:	f7ff f988 	bl	810cc2c <__pow5mult>
 810d91c:	9005      	str	r0, [sp, #20]
 810d91e:	2800      	cmp	r0, #0
 810d920:	f43f ae9a 	beq.w	810d658 <_strtod_l+0x488>
 810d924:	2f00      	cmp	r7, #0
 810d926:	dd08      	ble.n	810d93a <_strtod_l+0x76a>
 810d928:	9905      	ldr	r1, [sp, #20]
 810d92a:	463a      	mov	r2, r7
 810d92c:	4620      	mov	r0, r4
 810d92e:	f7ff f9d7 	bl	810cce0 <__lshift>
 810d932:	9005      	str	r0, [sp, #20]
 810d934:	2800      	cmp	r0, #0
 810d936:	f43f ae8f 	beq.w	810d658 <_strtod_l+0x488>
 810d93a:	f1ba 0f00 	cmp.w	sl, #0
 810d93e:	dd08      	ble.n	810d952 <_strtod_l+0x782>
 810d940:	4659      	mov	r1, fp
 810d942:	4652      	mov	r2, sl
 810d944:	4620      	mov	r0, r4
 810d946:	f7ff f9cb 	bl	810cce0 <__lshift>
 810d94a:	4683      	mov	fp, r0
 810d94c:	2800      	cmp	r0, #0
 810d94e:	f43f ae83 	beq.w	810d658 <_strtod_l+0x488>
 810d952:	9a05      	ldr	r2, [sp, #20]
 810d954:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d956:	4620      	mov	r0, r4
 810d958:	f7ff fa4a 	bl	810cdf0 <__mdiff>
 810d95c:	4605      	mov	r5, r0
 810d95e:	2800      	cmp	r0, #0
 810d960:	f43f ae7a 	beq.w	810d658 <_strtod_l+0x488>
 810d964:	68c3      	ldr	r3, [r0, #12]
 810d966:	930b      	str	r3, [sp, #44]	; 0x2c
 810d968:	2300      	movs	r3, #0
 810d96a:	60c3      	str	r3, [r0, #12]
 810d96c:	4659      	mov	r1, fp
 810d96e:	f7ff fa23 	bl	810cdb8 <__mcmp>
 810d972:	2800      	cmp	r0, #0
 810d974:	da60      	bge.n	810da38 <_strtod_l+0x868>
 810d976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d978:	ea53 0308 	orrs.w	r3, r3, r8
 810d97c:	f040 8084 	bne.w	810da88 <_strtod_l+0x8b8>
 810d980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d984:	2b00      	cmp	r3, #0
 810d986:	d17f      	bne.n	810da88 <_strtod_l+0x8b8>
 810d988:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d98c:	0d1b      	lsrs	r3, r3, #20
 810d98e:	051b      	lsls	r3, r3, #20
 810d990:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810d994:	d978      	bls.n	810da88 <_strtod_l+0x8b8>
 810d996:	696b      	ldr	r3, [r5, #20]
 810d998:	b913      	cbnz	r3, 810d9a0 <_strtod_l+0x7d0>
 810d99a:	692b      	ldr	r3, [r5, #16]
 810d99c:	2b01      	cmp	r3, #1
 810d99e:	dd73      	ble.n	810da88 <_strtod_l+0x8b8>
 810d9a0:	4629      	mov	r1, r5
 810d9a2:	2201      	movs	r2, #1
 810d9a4:	4620      	mov	r0, r4
 810d9a6:	f7ff f99b 	bl	810cce0 <__lshift>
 810d9aa:	4659      	mov	r1, fp
 810d9ac:	4605      	mov	r5, r0
 810d9ae:	f7ff fa03 	bl	810cdb8 <__mcmp>
 810d9b2:	2800      	cmp	r0, #0
 810d9b4:	dd68      	ble.n	810da88 <_strtod_l+0x8b8>
 810d9b6:	9904      	ldr	r1, [sp, #16]
 810d9b8:	4a54      	ldr	r2, [pc, #336]	; (810db0c <_strtod_l+0x93c>)
 810d9ba:	464b      	mov	r3, r9
 810d9bc:	2900      	cmp	r1, #0
 810d9be:	f000 8084 	beq.w	810daca <_strtod_l+0x8fa>
 810d9c2:	ea02 0109 	and.w	r1, r2, r9
 810d9c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810d9ca:	dc7e      	bgt.n	810daca <_strtod_l+0x8fa>
 810d9cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810d9d0:	f77f aeb3 	ble.w	810d73a <_strtod_l+0x56a>
 810d9d4:	4b4e      	ldr	r3, [pc, #312]	; (810db10 <_strtod_l+0x940>)
 810d9d6:	4640      	mov	r0, r8
 810d9d8:	4649      	mov	r1, r9
 810d9da:	2200      	movs	r2, #0
 810d9dc:	f7f2 fe94 	bl	8100708 <__aeabi_dmul>
 810d9e0:	4b4a      	ldr	r3, [pc, #296]	; (810db0c <_strtod_l+0x93c>)
 810d9e2:	400b      	ands	r3, r1
 810d9e4:	4680      	mov	r8, r0
 810d9e6:	4689      	mov	r9, r1
 810d9e8:	2b00      	cmp	r3, #0
 810d9ea:	f47f ae3f 	bne.w	810d66c <_strtod_l+0x49c>
 810d9ee:	2322      	movs	r3, #34	; 0x22
 810d9f0:	6023      	str	r3, [r4, #0]
 810d9f2:	e63b      	b.n	810d66c <_strtod_l+0x49c>
 810d9f4:	f04f 32ff 	mov.w	r2, #4294967295
 810d9f8:	fa02 f303 	lsl.w	r3, r2, r3
 810d9fc:	ea03 0808 	and.w	r8, r3, r8
 810da00:	e6e8      	b.n	810d7d4 <_strtod_l+0x604>
 810da02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810da06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810da0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810da0e:	36e2      	adds	r6, #226	; 0xe2
 810da10:	fa01 f306 	lsl.w	r3, r1, r6
 810da14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810da18:	e748      	b.n	810d8ac <_strtod_l+0x6dc>
 810da1a:	2100      	movs	r1, #0
 810da1c:	2301      	movs	r3, #1
 810da1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810da22:	e743      	b.n	810d8ac <_strtod_l+0x6dc>
 810da24:	9916      	ldr	r1, [sp, #88]	; 0x58
 810da26:	4632      	mov	r2, r6
 810da28:	4620      	mov	r0, r4
 810da2a:	f7ff f959 	bl	810cce0 <__lshift>
 810da2e:	9016      	str	r0, [sp, #88]	; 0x58
 810da30:	2800      	cmp	r0, #0
 810da32:	f47f af6b 	bne.w	810d90c <_strtod_l+0x73c>
 810da36:	e60f      	b.n	810d658 <_strtod_l+0x488>
 810da38:	46ca      	mov	sl, r9
 810da3a:	d171      	bne.n	810db20 <_strtod_l+0x950>
 810da3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810da3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810da42:	b352      	cbz	r2, 810da9a <_strtod_l+0x8ca>
 810da44:	4a33      	ldr	r2, [pc, #204]	; (810db14 <_strtod_l+0x944>)
 810da46:	4293      	cmp	r3, r2
 810da48:	d12a      	bne.n	810daa0 <_strtod_l+0x8d0>
 810da4a:	9b04      	ldr	r3, [sp, #16]
 810da4c:	4641      	mov	r1, r8
 810da4e:	b1fb      	cbz	r3, 810da90 <_strtod_l+0x8c0>
 810da50:	4b2e      	ldr	r3, [pc, #184]	; (810db0c <_strtod_l+0x93c>)
 810da52:	ea09 0303 	and.w	r3, r9, r3
 810da56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810da5a:	f04f 32ff 	mov.w	r2, #4294967295
 810da5e:	d81a      	bhi.n	810da96 <_strtod_l+0x8c6>
 810da60:	0d1b      	lsrs	r3, r3, #20
 810da62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810da66:	fa02 f303 	lsl.w	r3, r2, r3
 810da6a:	4299      	cmp	r1, r3
 810da6c:	d118      	bne.n	810daa0 <_strtod_l+0x8d0>
 810da6e:	4b2a      	ldr	r3, [pc, #168]	; (810db18 <_strtod_l+0x948>)
 810da70:	459a      	cmp	sl, r3
 810da72:	d102      	bne.n	810da7a <_strtod_l+0x8aa>
 810da74:	3101      	adds	r1, #1
 810da76:	f43f adef 	beq.w	810d658 <_strtod_l+0x488>
 810da7a:	4b24      	ldr	r3, [pc, #144]	; (810db0c <_strtod_l+0x93c>)
 810da7c:	ea0a 0303 	and.w	r3, sl, r3
 810da80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810da84:	f04f 0800 	mov.w	r8, #0
 810da88:	9b04      	ldr	r3, [sp, #16]
 810da8a:	2b00      	cmp	r3, #0
 810da8c:	d1a2      	bne.n	810d9d4 <_strtod_l+0x804>
 810da8e:	e5ed      	b.n	810d66c <_strtod_l+0x49c>
 810da90:	f04f 33ff 	mov.w	r3, #4294967295
 810da94:	e7e9      	b.n	810da6a <_strtod_l+0x89a>
 810da96:	4613      	mov	r3, r2
 810da98:	e7e7      	b.n	810da6a <_strtod_l+0x89a>
 810da9a:	ea53 0308 	orrs.w	r3, r3, r8
 810da9e:	d08a      	beq.n	810d9b6 <_strtod_l+0x7e6>
 810daa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810daa2:	b1e3      	cbz	r3, 810dade <_strtod_l+0x90e>
 810daa4:	ea13 0f0a 	tst.w	r3, sl
 810daa8:	d0ee      	beq.n	810da88 <_strtod_l+0x8b8>
 810daaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810daac:	9a04      	ldr	r2, [sp, #16]
 810daae:	4640      	mov	r0, r8
 810dab0:	4649      	mov	r1, r9
 810dab2:	b1c3      	cbz	r3, 810dae6 <_strtod_l+0x916>
 810dab4:	f7ff fb6f 	bl	810d196 <sulp>
 810dab8:	4602      	mov	r2, r0
 810daba:	460b      	mov	r3, r1
 810dabc:	ec51 0b18 	vmov	r0, r1, d8
 810dac0:	f7f2 fc6c 	bl	810039c <__adddf3>
 810dac4:	4680      	mov	r8, r0
 810dac6:	4689      	mov	r9, r1
 810dac8:	e7de      	b.n	810da88 <_strtod_l+0x8b8>
 810daca:	4013      	ands	r3, r2
 810dacc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810dad0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810dad4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810dad8:	f04f 38ff 	mov.w	r8, #4294967295
 810dadc:	e7d4      	b.n	810da88 <_strtod_l+0x8b8>
 810dade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810dae0:	ea13 0f08 	tst.w	r3, r8
 810dae4:	e7e0      	b.n	810daa8 <_strtod_l+0x8d8>
 810dae6:	f7ff fb56 	bl	810d196 <sulp>
 810daea:	4602      	mov	r2, r0
 810daec:	460b      	mov	r3, r1
 810daee:	ec51 0b18 	vmov	r0, r1, d8
 810daf2:	f7f2 fc51 	bl	8100398 <__aeabi_dsub>
 810daf6:	2200      	movs	r2, #0
 810daf8:	2300      	movs	r3, #0
 810dafa:	4680      	mov	r8, r0
 810dafc:	4689      	mov	r9, r1
 810dafe:	f7f3 f86b 	bl	8100bd8 <__aeabi_dcmpeq>
 810db02:	2800      	cmp	r0, #0
 810db04:	d0c0      	beq.n	810da88 <_strtod_l+0x8b8>
 810db06:	e618      	b.n	810d73a <_strtod_l+0x56a>
 810db08:	fffffc02 	.word	0xfffffc02
 810db0c:	7ff00000 	.word	0x7ff00000
 810db10:	39500000 	.word	0x39500000
 810db14:	000fffff 	.word	0x000fffff
 810db18:	7fefffff 	.word	0x7fefffff
 810db1c:	081ec508 	.word	0x081ec508
 810db20:	4659      	mov	r1, fp
 810db22:	4628      	mov	r0, r5
 810db24:	f7ff fab8 	bl	810d098 <__ratio>
 810db28:	ec57 6b10 	vmov	r6, r7, d0
 810db2c:	ee10 0a10 	vmov	r0, s0
 810db30:	2200      	movs	r2, #0
 810db32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810db36:	4639      	mov	r1, r7
 810db38:	f7f3 f862 	bl	8100c00 <__aeabi_dcmple>
 810db3c:	2800      	cmp	r0, #0
 810db3e:	d071      	beq.n	810dc24 <_strtod_l+0xa54>
 810db40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810db42:	2b00      	cmp	r3, #0
 810db44:	d17c      	bne.n	810dc40 <_strtod_l+0xa70>
 810db46:	f1b8 0f00 	cmp.w	r8, #0
 810db4a:	d15a      	bne.n	810dc02 <_strtod_l+0xa32>
 810db4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810db50:	2b00      	cmp	r3, #0
 810db52:	d15d      	bne.n	810dc10 <_strtod_l+0xa40>
 810db54:	4b90      	ldr	r3, [pc, #576]	; (810dd98 <_strtod_l+0xbc8>)
 810db56:	2200      	movs	r2, #0
 810db58:	4630      	mov	r0, r6
 810db5a:	4639      	mov	r1, r7
 810db5c:	f7f3 f846 	bl	8100bec <__aeabi_dcmplt>
 810db60:	2800      	cmp	r0, #0
 810db62:	d15c      	bne.n	810dc1e <_strtod_l+0xa4e>
 810db64:	4630      	mov	r0, r6
 810db66:	4639      	mov	r1, r7
 810db68:	4b8c      	ldr	r3, [pc, #560]	; (810dd9c <_strtod_l+0xbcc>)
 810db6a:	2200      	movs	r2, #0
 810db6c:	f7f2 fdcc 	bl	8100708 <__aeabi_dmul>
 810db70:	4606      	mov	r6, r0
 810db72:	460f      	mov	r7, r1
 810db74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810db78:	9606      	str	r6, [sp, #24]
 810db7a:	9307      	str	r3, [sp, #28]
 810db7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810db80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810db84:	4b86      	ldr	r3, [pc, #536]	; (810dda0 <_strtod_l+0xbd0>)
 810db86:	ea0a 0303 	and.w	r3, sl, r3
 810db8a:	930d      	str	r3, [sp, #52]	; 0x34
 810db8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810db8e:	4b85      	ldr	r3, [pc, #532]	; (810dda4 <_strtod_l+0xbd4>)
 810db90:	429a      	cmp	r2, r3
 810db92:	f040 8090 	bne.w	810dcb6 <_strtod_l+0xae6>
 810db96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810db9a:	ec49 8b10 	vmov	d0, r8, r9
 810db9e:	f7ff f9b1 	bl	810cf04 <__ulp>
 810dba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810dba6:	ec51 0b10 	vmov	r0, r1, d0
 810dbaa:	f7f2 fdad 	bl	8100708 <__aeabi_dmul>
 810dbae:	4642      	mov	r2, r8
 810dbb0:	464b      	mov	r3, r9
 810dbb2:	f7f2 fbf3 	bl	810039c <__adddf3>
 810dbb6:	460b      	mov	r3, r1
 810dbb8:	4979      	ldr	r1, [pc, #484]	; (810dda0 <_strtod_l+0xbd0>)
 810dbba:	4a7b      	ldr	r2, [pc, #492]	; (810dda8 <_strtod_l+0xbd8>)
 810dbbc:	4019      	ands	r1, r3
 810dbbe:	4291      	cmp	r1, r2
 810dbc0:	4680      	mov	r8, r0
 810dbc2:	d944      	bls.n	810dc4e <_strtod_l+0xa7e>
 810dbc4:	ee18 2a90 	vmov	r2, s17
 810dbc8:	4b78      	ldr	r3, [pc, #480]	; (810ddac <_strtod_l+0xbdc>)
 810dbca:	429a      	cmp	r2, r3
 810dbcc:	d104      	bne.n	810dbd8 <_strtod_l+0xa08>
 810dbce:	ee18 3a10 	vmov	r3, s16
 810dbd2:	3301      	adds	r3, #1
 810dbd4:	f43f ad40 	beq.w	810d658 <_strtod_l+0x488>
 810dbd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810ddac <_strtod_l+0xbdc>
 810dbdc:	f04f 38ff 	mov.w	r8, #4294967295
 810dbe0:	9916      	ldr	r1, [sp, #88]	; 0x58
 810dbe2:	4620      	mov	r0, r4
 810dbe4:	f7fe fe62 	bl	810c8ac <_Bfree>
 810dbe8:	9905      	ldr	r1, [sp, #20]
 810dbea:	4620      	mov	r0, r4
 810dbec:	f7fe fe5e 	bl	810c8ac <_Bfree>
 810dbf0:	4659      	mov	r1, fp
 810dbf2:	4620      	mov	r0, r4
 810dbf4:	f7fe fe5a 	bl	810c8ac <_Bfree>
 810dbf8:	4629      	mov	r1, r5
 810dbfa:	4620      	mov	r0, r4
 810dbfc:	f7fe fe56 	bl	810c8ac <_Bfree>
 810dc00:	e609      	b.n	810d816 <_strtod_l+0x646>
 810dc02:	f1b8 0f01 	cmp.w	r8, #1
 810dc06:	d103      	bne.n	810dc10 <_strtod_l+0xa40>
 810dc08:	f1b9 0f00 	cmp.w	r9, #0
 810dc0c:	f43f ad95 	beq.w	810d73a <_strtod_l+0x56a>
 810dc10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810dd68 <_strtod_l+0xb98>
 810dc14:	4f60      	ldr	r7, [pc, #384]	; (810dd98 <_strtod_l+0xbc8>)
 810dc16:	ed8d 7b06 	vstr	d7, [sp, #24]
 810dc1a:	2600      	movs	r6, #0
 810dc1c:	e7ae      	b.n	810db7c <_strtod_l+0x9ac>
 810dc1e:	4f5f      	ldr	r7, [pc, #380]	; (810dd9c <_strtod_l+0xbcc>)
 810dc20:	2600      	movs	r6, #0
 810dc22:	e7a7      	b.n	810db74 <_strtod_l+0x9a4>
 810dc24:	4b5d      	ldr	r3, [pc, #372]	; (810dd9c <_strtod_l+0xbcc>)
 810dc26:	4630      	mov	r0, r6
 810dc28:	4639      	mov	r1, r7
 810dc2a:	2200      	movs	r2, #0
 810dc2c:	f7f2 fd6c 	bl	8100708 <__aeabi_dmul>
 810dc30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810dc32:	4606      	mov	r6, r0
 810dc34:	460f      	mov	r7, r1
 810dc36:	2b00      	cmp	r3, #0
 810dc38:	d09c      	beq.n	810db74 <_strtod_l+0x9a4>
 810dc3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810dc3e:	e79d      	b.n	810db7c <_strtod_l+0x9ac>
 810dc40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810dd70 <_strtod_l+0xba0>
 810dc44:	ed8d 7b06 	vstr	d7, [sp, #24]
 810dc48:	ec57 6b17 	vmov	r6, r7, d7
 810dc4c:	e796      	b.n	810db7c <_strtod_l+0x9ac>
 810dc4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810dc52:	9b04      	ldr	r3, [sp, #16]
 810dc54:	46ca      	mov	sl, r9
 810dc56:	2b00      	cmp	r3, #0
 810dc58:	d1c2      	bne.n	810dbe0 <_strtod_l+0xa10>
 810dc5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810dc5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810dc60:	0d1b      	lsrs	r3, r3, #20
 810dc62:	051b      	lsls	r3, r3, #20
 810dc64:	429a      	cmp	r2, r3
 810dc66:	d1bb      	bne.n	810dbe0 <_strtod_l+0xa10>
 810dc68:	4630      	mov	r0, r6
 810dc6a:	4639      	mov	r1, r7
 810dc6c:	f7f3 f8ac 	bl	8100dc8 <__aeabi_d2lz>
 810dc70:	f7f2 fd1c 	bl	81006ac <__aeabi_l2d>
 810dc74:	4602      	mov	r2, r0
 810dc76:	460b      	mov	r3, r1
 810dc78:	4630      	mov	r0, r6
 810dc7a:	4639      	mov	r1, r7
 810dc7c:	f7f2 fb8c 	bl	8100398 <__aeabi_dsub>
 810dc80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810dc82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810dc86:	ea43 0308 	orr.w	r3, r3, r8
 810dc8a:	4313      	orrs	r3, r2
 810dc8c:	4606      	mov	r6, r0
 810dc8e:	460f      	mov	r7, r1
 810dc90:	d054      	beq.n	810dd3c <_strtod_l+0xb6c>
 810dc92:	a339      	add	r3, pc, #228	; (adr r3, 810dd78 <_strtod_l+0xba8>)
 810dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc98:	f7f2 ffa8 	bl	8100bec <__aeabi_dcmplt>
 810dc9c:	2800      	cmp	r0, #0
 810dc9e:	f47f ace5 	bne.w	810d66c <_strtod_l+0x49c>
 810dca2:	a337      	add	r3, pc, #220	; (adr r3, 810dd80 <_strtod_l+0xbb0>)
 810dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dca8:	4630      	mov	r0, r6
 810dcaa:	4639      	mov	r1, r7
 810dcac:	f7f2 ffbc 	bl	8100c28 <__aeabi_dcmpgt>
 810dcb0:	2800      	cmp	r0, #0
 810dcb2:	d095      	beq.n	810dbe0 <_strtod_l+0xa10>
 810dcb4:	e4da      	b.n	810d66c <_strtod_l+0x49c>
 810dcb6:	9b04      	ldr	r3, [sp, #16]
 810dcb8:	b333      	cbz	r3, 810dd08 <_strtod_l+0xb38>
 810dcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810dcbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810dcc0:	d822      	bhi.n	810dd08 <_strtod_l+0xb38>
 810dcc2:	a331      	add	r3, pc, #196	; (adr r3, 810dd88 <_strtod_l+0xbb8>)
 810dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dcc8:	4630      	mov	r0, r6
 810dcca:	4639      	mov	r1, r7
 810dccc:	f7f2 ff98 	bl	8100c00 <__aeabi_dcmple>
 810dcd0:	b1a0      	cbz	r0, 810dcfc <_strtod_l+0xb2c>
 810dcd2:	4639      	mov	r1, r7
 810dcd4:	4630      	mov	r0, r6
 810dcd6:	f7f2 ffef 	bl	8100cb8 <__aeabi_d2uiz>
 810dcda:	2801      	cmp	r0, #1
 810dcdc:	bf38      	it	cc
 810dcde:	2001      	movcc	r0, #1
 810dce0:	f7f2 fc98 	bl	8100614 <__aeabi_ui2d>
 810dce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810dce6:	4606      	mov	r6, r0
 810dce8:	460f      	mov	r7, r1
 810dcea:	bb23      	cbnz	r3, 810dd36 <_strtod_l+0xb66>
 810dcec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810dcf0:	9010      	str	r0, [sp, #64]	; 0x40
 810dcf2:	9311      	str	r3, [sp, #68]	; 0x44
 810dcf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810dcf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810dcfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810dcfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810dd00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810dd04:	1a9b      	subs	r3, r3, r2
 810dd06:	930f      	str	r3, [sp, #60]	; 0x3c
 810dd08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810dd0c:	eeb0 0a48 	vmov.f32	s0, s16
 810dd10:	eef0 0a68 	vmov.f32	s1, s17
 810dd14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810dd18:	f7ff f8f4 	bl	810cf04 <__ulp>
 810dd1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810dd20:	ec53 2b10 	vmov	r2, r3, d0
 810dd24:	f7f2 fcf0 	bl	8100708 <__aeabi_dmul>
 810dd28:	ec53 2b18 	vmov	r2, r3, d8
 810dd2c:	f7f2 fb36 	bl	810039c <__adddf3>
 810dd30:	4680      	mov	r8, r0
 810dd32:	4689      	mov	r9, r1
 810dd34:	e78d      	b.n	810dc52 <_strtod_l+0xa82>
 810dd36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810dd3a:	e7db      	b.n	810dcf4 <_strtod_l+0xb24>
 810dd3c:	a314      	add	r3, pc, #80	; (adr r3, 810dd90 <_strtod_l+0xbc0>)
 810dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dd42:	f7f2 ff53 	bl	8100bec <__aeabi_dcmplt>
 810dd46:	e7b3      	b.n	810dcb0 <_strtod_l+0xae0>
 810dd48:	2300      	movs	r3, #0
 810dd4a:	930a      	str	r3, [sp, #40]	; 0x28
 810dd4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810dd4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810dd50:	6013      	str	r3, [r2, #0]
 810dd52:	f7ff ba7c 	b.w	810d24e <_strtod_l+0x7e>
 810dd56:	2a65      	cmp	r2, #101	; 0x65
 810dd58:	f43f ab75 	beq.w	810d446 <_strtod_l+0x276>
 810dd5c:	2a45      	cmp	r2, #69	; 0x45
 810dd5e:	f43f ab72 	beq.w	810d446 <_strtod_l+0x276>
 810dd62:	2301      	movs	r3, #1
 810dd64:	f7ff bbaa 	b.w	810d4bc <_strtod_l+0x2ec>
 810dd68:	00000000 	.word	0x00000000
 810dd6c:	bff00000 	.word	0xbff00000
 810dd70:	00000000 	.word	0x00000000
 810dd74:	3ff00000 	.word	0x3ff00000
 810dd78:	94a03595 	.word	0x94a03595
 810dd7c:	3fdfffff 	.word	0x3fdfffff
 810dd80:	35afe535 	.word	0x35afe535
 810dd84:	3fe00000 	.word	0x3fe00000
 810dd88:	ffc00000 	.word	0xffc00000
 810dd8c:	41dfffff 	.word	0x41dfffff
 810dd90:	94a03595 	.word	0x94a03595
 810dd94:	3fcfffff 	.word	0x3fcfffff
 810dd98:	3ff00000 	.word	0x3ff00000
 810dd9c:	3fe00000 	.word	0x3fe00000
 810dda0:	7ff00000 	.word	0x7ff00000
 810dda4:	7fe00000 	.word	0x7fe00000
 810dda8:	7c9fffff 	.word	0x7c9fffff
 810ddac:	7fefffff 	.word	0x7fefffff

0810ddb0 <_strtod_r>:
 810ddb0:	4b01      	ldr	r3, [pc, #4]	; (810ddb8 <_strtod_r+0x8>)
 810ddb2:	f7ff ba0d 	b.w	810d1d0 <_strtod_l>
 810ddb6:	bf00      	nop
 810ddb8:	100009f0 	.word	0x100009f0

0810ddbc <_strtol_l.constprop.0>:
 810ddbc:	2b01      	cmp	r3, #1
 810ddbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ddc2:	d001      	beq.n	810ddc8 <_strtol_l.constprop.0+0xc>
 810ddc4:	2b24      	cmp	r3, #36	; 0x24
 810ddc6:	d906      	bls.n	810ddd6 <_strtol_l.constprop.0+0x1a>
 810ddc8:	f7fd fe28 	bl	810ba1c <__errno>
 810ddcc:	2316      	movs	r3, #22
 810ddce:	6003      	str	r3, [r0, #0]
 810ddd0:	2000      	movs	r0, #0
 810ddd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ddd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810debc <_strtol_l.constprop.0+0x100>
 810ddda:	460d      	mov	r5, r1
 810dddc:	462e      	mov	r6, r5
 810ddde:	f815 4b01 	ldrb.w	r4, [r5], #1
 810dde2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810dde6:	f017 0708 	ands.w	r7, r7, #8
 810ddea:	d1f7      	bne.n	810dddc <_strtol_l.constprop.0+0x20>
 810ddec:	2c2d      	cmp	r4, #45	; 0x2d
 810ddee:	d132      	bne.n	810de56 <_strtol_l.constprop.0+0x9a>
 810ddf0:	782c      	ldrb	r4, [r5, #0]
 810ddf2:	2701      	movs	r7, #1
 810ddf4:	1cb5      	adds	r5, r6, #2
 810ddf6:	2b00      	cmp	r3, #0
 810ddf8:	d05b      	beq.n	810deb2 <_strtol_l.constprop.0+0xf6>
 810ddfa:	2b10      	cmp	r3, #16
 810ddfc:	d109      	bne.n	810de12 <_strtol_l.constprop.0+0x56>
 810ddfe:	2c30      	cmp	r4, #48	; 0x30
 810de00:	d107      	bne.n	810de12 <_strtol_l.constprop.0+0x56>
 810de02:	782c      	ldrb	r4, [r5, #0]
 810de04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810de08:	2c58      	cmp	r4, #88	; 0x58
 810de0a:	d14d      	bne.n	810dea8 <_strtol_l.constprop.0+0xec>
 810de0c:	786c      	ldrb	r4, [r5, #1]
 810de0e:	2310      	movs	r3, #16
 810de10:	3502      	adds	r5, #2
 810de12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810de16:	f108 38ff 	add.w	r8, r8, #4294967295
 810de1a:	f04f 0e00 	mov.w	lr, #0
 810de1e:	fbb8 f9f3 	udiv	r9, r8, r3
 810de22:	4676      	mov	r6, lr
 810de24:	fb03 8a19 	mls	sl, r3, r9, r8
 810de28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810de2c:	f1bc 0f09 	cmp.w	ip, #9
 810de30:	d816      	bhi.n	810de60 <_strtol_l.constprop.0+0xa4>
 810de32:	4664      	mov	r4, ip
 810de34:	42a3      	cmp	r3, r4
 810de36:	dd24      	ble.n	810de82 <_strtol_l.constprop.0+0xc6>
 810de38:	f1be 3fff 	cmp.w	lr, #4294967295
 810de3c:	d008      	beq.n	810de50 <_strtol_l.constprop.0+0x94>
 810de3e:	45b1      	cmp	r9, r6
 810de40:	d31c      	bcc.n	810de7c <_strtol_l.constprop.0+0xc0>
 810de42:	d101      	bne.n	810de48 <_strtol_l.constprop.0+0x8c>
 810de44:	45a2      	cmp	sl, r4
 810de46:	db19      	blt.n	810de7c <_strtol_l.constprop.0+0xc0>
 810de48:	fb06 4603 	mla	r6, r6, r3, r4
 810de4c:	f04f 0e01 	mov.w	lr, #1
 810de50:	f815 4b01 	ldrb.w	r4, [r5], #1
 810de54:	e7e8      	b.n	810de28 <_strtol_l.constprop.0+0x6c>
 810de56:	2c2b      	cmp	r4, #43	; 0x2b
 810de58:	bf04      	itt	eq
 810de5a:	782c      	ldrbeq	r4, [r5, #0]
 810de5c:	1cb5      	addeq	r5, r6, #2
 810de5e:	e7ca      	b.n	810ddf6 <_strtol_l.constprop.0+0x3a>
 810de60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810de64:	f1bc 0f19 	cmp.w	ip, #25
 810de68:	d801      	bhi.n	810de6e <_strtol_l.constprop.0+0xb2>
 810de6a:	3c37      	subs	r4, #55	; 0x37
 810de6c:	e7e2      	b.n	810de34 <_strtol_l.constprop.0+0x78>
 810de6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810de72:	f1bc 0f19 	cmp.w	ip, #25
 810de76:	d804      	bhi.n	810de82 <_strtol_l.constprop.0+0xc6>
 810de78:	3c57      	subs	r4, #87	; 0x57
 810de7a:	e7db      	b.n	810de34 <_strtol_l.constprop.0+0x78>
 810de7c:	f04f 3eff 	mov.w	lr, #4294967295
 810de80:	e7e6      	b.n	810de50 <_strtol_l.constprop.0+0x94>
 810de82:	f1be 3fff 	cmp.w	lr, #4294967295
 810de86:	d105      	bne.n	810de94 <_strtol_l.constprop.0+0xd8>
 810de88:	2322      	movs	r3, #34	; 0x22
 810de8a:	6003      	str	r3, [r0, #0]
 810de8c:	4646      	mov	r6, r8
 810de8e:	b942      	cbnz	r2, 810dea2 <_strtol_l.constprop.0+0xe6>
 810de90:	4630      	mov	r0, r6
 810de92:	e79e      	b.n	810ddd2 <_strtol_l.constprop.0+0x16>
 810de94:	b107      	cbz	r7, 810de98 <_strtol_l.constprop.0+0xdc>
 810de96:	4276      	negs	r6, r6
 810de98:	2a00      	cmp	r2, #0
 810de9a:	d0f9      	beq.n	810de90 <_strtol_l.constprop.0+0xd4>
 810de9c:	f1be 0f00 	cmp.w	lr, #0
 810dea0:	d000      	beq.n	810dea4 <_strtol_l.constprop.0+0xe8>
 810dea2:	1e69      	subs	r1, r5, #1
 810dea4:	6011      	str	r1, [r2, #0]
 810dea6:	e7f3      	b.n	810de90 <_strtol_l.constprop.0+0xd4>
 810dea8:	2430      	movs	r4, #48	; 0x30
 810deaa:	2b00      	cmp	r3, #0
 810deac:	d1b1      	bne.n	810de12 <_strtol_l.constprop.0+0x56>
 810deae:	2308      	movs	r3, #8
 810deb0:	e7af      	b.n	810de12 <_strtol_l.constprop.0+0x56>
 810deb2:	2c30      	cmp	r4, #48	; 0x30
 810deb4:	d0a5      	beq.n	810de02 <_strtol_l.constprop.0+0x46>
 810deb6:	230a      	movs	r3, #10
 810deb8:	e7ab      	b.n	810de12 <_strtol_l.constprop.0+0x56>
 810deba:	bf00      	nop
 810debc:	081ec531 	.word	0x081ec531

0810dec0 <_strtol_r>:
 810dec0:	f7ff bf7c 	b.w	810ddbc <_strtol_l.constprop.0>

0810dec4 <__ssputs_r>:
 810dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810dec8:	688e      	ldr	r6, [r1, #8]
 810deca:	461f      	mov	r7, r3
 810decc:	42be      	cmp	r6, r7
 810dece:	680b      	ldr	r3, [r1, #0]
 810ded0:	4682      	mov	sl, r0
 810ded2:	460c      	mov	r4, r1
 810ded4:	4690      	mov	r8, r2
 810ded6:	d82c      	bhi.n	810df32 <__ssputs_r+0x6e>
 810ded8:	898a      	ldrh	r2, [r1, #12]
 810deda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810dede:	d026      	beq.n	810df2e <__ssputs_r+0x6a>
 810dee0:	6965      	ldr	r5, [r4, #20]
 810dee2:	6909      	ldr	r1, [r1, #16]
 810dee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810dee8:	eba3 0901 	sub.w	r9, r3, r1
 810deec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810def0:	1c7b      	adds	r3, r7, #1
 810def2:	444b      	add	r3, r9
 810def4:	106d      	asrs	r5, r5, #1
 810def6:	429d      	cmp	r5, r3
 810def8:	bf38      	it	cc
 810defa:	461d      	movcc	r5, r3
 810defc:	0553      	lsls	r3, r2, #21
 810defe:	d527      	bpl.n	810df50 <__ssputs_r+0x8c>
 810df00:	4629      	mov	r1, r5
 810df02:	f7fc fbcf 	bl	810a6a4 <_malloc_r>
 810df06:	4606      	mov	r6, r0
 810df08:	b360      	cbz	r0, 810df64 <__ssputs_r+0xa0>
 810df0a:	6921      	ldr	r1, [r4, #16]
 810df0c:	464a      	mov	r2, r9
 810df0e:	f7fd fdb2 	bl	810ba76 <memcpy>
 810df12:	89a3      	ldrh	r3, [r4, #12]
 810df14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810df18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810df1c:	81a3      	strh	r3, [r4, #12]
 810df1e:	6126      	str	r6, [r4, #16]
 810df20:	6165      	str	r5, [r4, #20]
 810df22:	444e      	add	r6, r9
 810df24:	eba5 0509 	sub.w	r5, r5, r9
 810df28:	6026      	str	r6, [r4, #0]
 810df2a:	60a5      	str	r5, [r4, #8]
 810df2c:	463e      	mov	r6, r7
 810df2e:	42be      	cmp	r6, r7
 810df30:	d900      	bls.n	810df34 <__ssputs_r+0x70>
 810df32:	463e      	mov	r6, r7
 810df34:	6820      	ldr	r0, [r4, #0]
 810df36:	4632      	mov	r2, r6
 810df38:	4641      	mov	r1, r8
 810df3a:	f000 fb6f 	bl	810e61c <memmove>
 810df3e:	68a3      	ldr	r3, [r4, #8]
 810df40:	1b9b      	subs	r3, r3, r6
 810df42:	60a3      	str	r3, [r4, #8]
 810df44:	6823      	ldr	r3, [r4, #0]
 810df46:	4433      	add	r3, r6
 810df48:	6023      	str	r3, [r4, #0]
 810df4a:	2000      	movs	r0, #0
 810df4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810df50:	462a      	mov	r2, r5
 810df52:	f7fc fc33 	bl	810a7bc <_realloc_r>
 810df56:	4606      	mov	r6, r0
 810df58:	2800      	cmp	r0, #0
 810df5a:	d1e0      	bne.n	810df1e <__ssputs_r+0x5a>
 810df5c:	6921      	ldr	r1, [r4, #16]
 810df5e:	4650      	mov	r0, sl
 810df60:	f7fe fc18 	bl	810c794 <_free_r>
 810df64:	230c      	movs	r3, #12
 810df66:	f8ca 3000 	str.w	r3, [sl]
 810df6a:	89a3      	ldrh	r3, [r4, #12]
 810df6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810df70:	81a3      	strh	r3, [r4, #12]
 810df72:	f04f 30ff 	mov.w	r0, #4294967295
 810df76:	e7e9      	b.n	810df4c <__ssputs_r+0x88>

0810df78 <_svfiprintf_r>:
 810df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df7c:	4698      	mov	r8, r3
 810df7e:	898b      	ldrh	r3, [r1, #12]
 810df80:	061b      	lsls	r3, r3, #24
 810df82:	b09d      	sub	sp, #116	; 0x74
 810df84:	4607      	mov	r7, r0
 810df86:	460d      	mov	r5, r1
 810df88:	4614      	mov	r4, r2
 810df8a:	d50e      	bpl.n	810dfaa <_svfiprintf_r+0x32>
 810df8c:	690b      	ldr	r3, [r1, #16]
 810df8e:	b963      	cbnz	r3, 810dfaa <_svfiprintf_r+0x32>
 810df90:	2140      	movs	r1, #64	; 0x40
 810df92:	f7fc fb87 	bl	810a6a4 <_malloc_r>
 810df96:	6028      	str	r0, [r5, #0]
 810df98:	6128      	str	r0, [r5, #16]
 810df9a:	b920      	cbnz	r0, 810dfa6 <_svfiprintf_r+0x2e>
 810df9c:	230c      	movs	r3, #12
 810df9e:	603b      	str	r3, [r7, #0]
 810dfa0:	f04f 30ff 	mov.w	r0, #4294967295
 810dfa4:	e0d0      	b.n	810e148 <_svfiprintf_r+0x1d0>
 810dfa6:	2340      	movs	r3, #64	; 0x40
 810dfa8:	616b      	str	r3, [r5, #20]
 810dfaa:	2300      	movs	r3, #0
 810dfac:	9309      	str	r3, [sp, #36]	; 0x24
 810dfae:	2320      	movs	r3, #32
 810dfb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810dfb4:	f8cd 800c 	str.w	r8, [sp, #12]
 810dfb8:	2330      	movs	r3, #48	; 0x30
 810dfba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810e160 <_svfiprintf_r+0x1e8>
 810dfbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810dfc2:	f04f 0901 	mov.w	r9, #1
 810dfc6:	4623      	mov	r3, r4
 810dfc8:	469a      	mov	sl, r3
 810dfca:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dfce:	b10a      	cbz	r2, 810dfd4 <_svfiprintf_r+0x5c>
 810dfd0:	2a25      	cmp	r2, #37	; 0x25
 810dfd2:	d1f9      	bne.n	810dfc8 <_svfiprintf_r+0x50>
 810dfd4:	ebba 0b04 	subs.w	fp, sl, r4
 810dfd8:	d00b      	beq.n	810dff2 <_svfiprintf_r+0x7a>
 810dfda:	465b      	mov	r3, fp
 810dfdc:	4622      	mov	r2, r4
 810dfde:	4629      	mov	r1, r5
 810dfe0:	4638      	mov	r0, r7
 810dfe2:	f7ff ff6f 	bl	810dec4 <__ssputs_r>
 810dfe6:	3001      	adds	r0, #1
 810dfe8:	f000 80a9 	beq.w	810e13e <_svfiprintf_r+0x1c6>
 810dfec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810dfee:	445a      	add	r2, fp
 810dff0:	9209      	str	r2, [sp, #36]	; 0x24
 810dff2:	f89a 3000 	ldrb.w	r3, [sl]
 810dff6:	2b00      	cmp	r3, #0
 810dff8:	f000 80a1 	beq.w	810e13e <_svfiprintf_r+0x1c6>
 810dffc:	2300      	movs	r3, #0
 810dffe:	f04f 32ff 	mov.w	r2, #4294967295
 810e002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810e006:	f10a 0a01 	add.w	sl, sl, #1
 810e00a:	9304      	str	r3, [sp, #16]
 810e00c:	9307      	str	r3, [sp, #28]
 810e00e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810e012:	931a      	str	r3, [sp, #104]	; 0x68
 810e014:	4654      	mov	r4, sl
 810e016:	2205      	movs	r2, #5
 810e018:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e01c:	4850      	ldr	r0, [pc, #320]	; (810e160 <_svfiprintf_r+0x1e8>)
 810e01e:	f7f2 f95f 	bl	81002e0 <memchr>
 810e022:	9a04      	ldr	r2, [sp, #16]
 810e024:	b9d8      	cbnz	r0, 810e05e <_svfiprintf_r+0xe6>
 810e026:	06d0      	lsls	r0, r2, #27
 810e028:	bf44      	itt	mi
 810e02a:	2320      	movmi	r3, #32
 810e02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e030:	0711      	lsls	r1, r2, #28
 810e032:	bf44      	itt	mi
 810e034:	232b      	movmi	r3, #43	; 0x2b
 810e036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e03a:	f89a 3000 	ldrb.w	r3, [sl]
 810e03e:	2b2a      	cmp	r3, #42	; 0x2a
 810e040:	d015      	beq.n	810e06e <_svfiprintf_r+0xf6>
 810e042:	9a07      	ldr	r2, [sp, #28]
 810e044:	4654      	mov	r4, sl
 810e046:	2000      	movs	r0, #0
 810e048:	f04f 0c0a 	mov.w	ip, #10
 810e04c:	4621      	mov	r1, r4
 810e04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810e052:	3b30      	subs	r3, #48	; 0x30
 810e054:	2b09      	cmp	r3, #9
 810e056:	d94d      	bls.n	810e0f4 <_svfiprintf_r+0x17c>
 810e058:	b1b0      	cbz	r0, 810e088 <_svfiprintf_r+0x110>
 810e05a:	9207      	str	r2, [sp, #28]
 810e05c:	e014      	b.n	810e088 <_svfiprintf_r+0x110>
 810e05e:	eba0 0308 	sub.w	r3, r0, r8
 810e062:	fa09 f303 	lsl.w	r3, r9, r3
 810e066:	4313      	orrs	r3, r2
 810e068:	9304      	str	r3, [sp, #16]
 810e06a:	46a2      	mov	sl, r4
 810e06c:	e7d2      	b.n	810e014 <_svfiprintf_r+0x9c>
 810e06e:	9b03      	ldr	r3, [sp, #12]
 810e070:	1d19      	adds	r1, r3, #4
 810e072:	681b      	ldr	r3, [r3, #0]
 810e074:	9103      	str	r1, [sp, #12]
 810e076:	2b00      	cmp	r3, #0
 810e078:	bfbb      	ittet	lt
 810e07a:	425b      	neglt	r3, r3
 810e07c:	f042 0202 	orrlt.w	r2, r2, #2
 810e080:	9307      	strge	r3, [sp, #28]
 810e082:	9307      	strlt	r3, [sp, #28]
 810e084:	bfb8      	it	lt
 810e086:	9204      	strlt	r2, [sp, #16]
 810e088:	7823      	ldrb	r3, [r4, #0]
 810e08a:	2b2e      	cmp	r3, #46	; 0x2e
 810e08c:	d10c      	bne.n	810e0a8 <_svfiprintf_r+0x130>
 810e08e:	7863      	ldrb	r3, [r4, #1]
 810e090:	2b2a      	cmp	r3, #42	; 0x2a
 810e092:	d134      	bne.n	810e0fe <_svfiprintf_r+0x186>
 810e094:	9b03      	ldr	r3, [sp, #12]
 810e096:	1d1a      	adds	r2, r3, #4
 810e098:	681b      	ldr	r3, [r3, #0]
 810e09a:	9203      	str	r2, [sp, #12]
 810e09c:	2b00      	cmp	r3, #0
 810e09e:	bfb8      	it	lt
 810e0a0:	f04f 33ff 	movlt.w	r3, #4294967295
 810e0a4:	3402      	adds	r4, #2
 810e0a6:	9305      	str	r3, [sp, #20]
 810e0a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810e170 <_svfiprintf_r+0x1f8>
 810e0ac:	7821      	ldrb	r1, [r4, #0]
 810e0ae:	2203      	movs	r2, #3
 810e0b0:	4650      	mov	r0, sl
 810e0b2:	f7f2 f915 	bl	81002e0 <memchr>
 810e0b6:	b138      	cbz	r0, 810e0c8 <_svfiprintf_r+0x150>
 810e0b8:	9b04      	ldr	r3, [sp, #16]
 810e0ba:	eba0 000a 	sub.w	r0, r0, sl
 810e0be:	2240      	movs	r2, #64	; 0x40
 810e0c0:	4082      	lsls	r2, r0
 810e0c2:	4313      	orrs	r3, r2
 810e0c4:	3401      	adds	r4, #1
 810e0c6:	9304      	str	r3, [sp, #16]
 810e0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e0cc:	4825      	ldr	r0, [pc, #148]	; (810e164 <_svfiprintf_r+0x1ec>)
 810e0ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810e0d2:	2206      	movs	r2, #6
 810e0d4:	f7f2 f904 	bl	81002e0 <memchr>
 810e0d8:	2800      	cmp	r0, #0
 810e0da:	d038      	beq.n	810e14e <_svfiprintf_r+0x1d6>
 810e0dc:	4b22      	ldr	r3, [pc, #136]	; (810e168 <_svfiprintf_r+0x1f0>)
 810e0de:	bb1b      	cbnz	r3, 810e128 <_svfiprintf_r+0x1b0>
 810e0e0:	9b03      	ldr	r3, [sp, #12]
 810e0e2:	3307      	adds	r3, #7
 810e0e4:	f023 0307 	bic.w	r3, r3, #7
 810e0e8:	3308      	adds	r3, #8
 810e0ea:	9303      	str	r3, [sp, #12]
 810e0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e0ee:	4433      	add	r3, r6
 810e0f0:	9309      	str	r3, [sp, #36]	; 0x24
 810e0f2:	e768      	b.n	810dfc6 <_svfiprintf_r+0x4e>
 810e0f4:	fb0c 3202 	mla	r2, ip, r2, r3
 810e0f8:	460c      	mov	r4, r1
 810e0fa:	2001      	movs	r0, #1
 810e0fc:	e7a6      	b.n	810e04c <_svfiprintf_r+0xd4>
 810e0fe:	2300      	movs	r3, #0
 810e100:	3401      	adds	r4, #1
 810e102:	9305      	str	r3, [sp, #20]
 810e104:	4619      	mov	r1, r3
 810e106:	f04f 0c0a 	mov.w	ip, #10
 810e10a:	4620      	mov	r0, r4
 810e10c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e110:	3a30      	subs	r2, #48	; 0x30
 810e112:	2a09      	cmp	r2, #9
 810e114:	d903      	bls.n	810e11e <_svfiprintf_r+0x1a6>
 810e116:	2b00      	cmp	r3, #0
 810e118:	d0c6      	beq.n	810e0a8 <_svfiprintf_r+0x130>
 810e11a:	9105      	str	r1, [sp, #20]
 810e11c:	e7c4      	b.n	810e0a8 <_svfiprintf_r+0x130>
 810e11e:	fb0c 2101 	mla	r1, ip, r1, r2
 810e122:	4604      	mov	r4, r0
 810e124:	2301      	movs	r3, #1
 810e126:	e7f0      	b.n	810e10a <_svfiprintf_r+0x192>
 810e128:	ab03      	add	r3, sp, #12
 810e12a:	9300      	str	r3, [sp, #0]
 810e12c:	462a      	mov	r2, r5
 810e12e:	4b0f      	ldr	r3, [pc, #60]	; (810e16c <_svfiprintf_r+0x1f4>)
 810e130:	a904      	add	r1, sp, #16
 810e132:	4638      	mov	r0, r7
 810e134:	f7fc fc12 	bl	810a95c <_printf_float>
 810e138:	1c42      	adds	r2, r0, #1
 810e13a:	4606      	mov	r6, r0
 810e13c:	d1d6      	bne.n	810e0ec <_svfiprintf_r+0x174>
 810e13e:	89ab      	ldrh	r3, [r5, #12]
 810e140:	065b      	lsls	r3, r3, #25
 810e142:	f53f af2d 	bmi.w	810dfa0 <_svfiprintf_r+0x28>
 810e146:	9809      	ldr	r0, [sp, #36]	; 0x24
 810e148:	b01d      	add	sp, #116	; 0x74
 810e14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e14e:	ab03      	add	r3, sp, #12
 810e150:	9300      	str	r3, [sp, #0]
 810e152:	462a      	mov	r2, r5
 810e154:	4b05      	ldr	r3, [pc, #20]	; (810e16c <_svfiprintf_r+0x1f4>)
 810e156:	a904      	add	r1, sp, #16
 810e158:	4638      	mov	r0, r7
 810e15a:	f7fc fea3 	bl	810aea4 <_printf_i>
 810e15e:	e7eb      	b.n	810e138 <_svfiprintf_r+0x1c0>
 810e160:	081ec631 	.word	0x081ec631
 810e164:	081ec63b 	.word	0x081ec63b
 810e168:	0810a95d 	.word	0x0810a95d
 810e16c:	0810dec5 	.word	0x0810dec5
 810e170:	081ec637 	.word	0x081ec637

0810e174 <__sfputc_r>:
 810e174:	6893      	ldr	r3, [r2, #8]
 810e176:	3b01      	subs	r3, #1
 810e178:	2b00      	cmp	r3, #0
 810e17a:	b410      	push	{r4}
 810e17c:	6093      	str	r3, [r2, #8]
 810e17e:	da08      	bge.n	810e192 <__sfputc_r+0x1e>
 810e180:	6994      	ldr	r4, [r2, #24]
 810e182:	42a3      	cmp	r3, r4
 810e184:	db01      	blt.n	810e18a <__sfputc_r+0x16>
 810e186:	290a      	cmp	r1, #10
 810e188:	d103      	bne.n	810e192 <__sfputc_r+0x1e>
 810e18a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810e18e:	f7fd bb4e 	b.w	810b82e <__swbuf_r>
 810e192:	6813      	ldr	r3, [r2, #0]
 810e194:	1c58      	adds	r0, r3, #1
 810e196:	6010      	str	r0, [r2, #0]
 810e198:	7019      	strb	r1, [r3, #0]
 810e19a:	4608      	mov	r0, r1
 810e19c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810e1a0:	4770      	bx	lr

0810e1a2 <__sfputs_r>:
 810e1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e1a4:	4606      	mov	r6, r0
 810e1a6:	460f      	mov	r7, r1
 810e1a8:	4614      	mov	r4, r2
 810e1aa:	18d5      	adds	r5, r2, r3
 810e1ac:	42ac      	cmp	r4, r5
 810e1ae:	d101      	bne.n	810e1b4 <__sfputs_r+0x12>
 810e1b0:	2000      	movs	r0, #0
 810e1b2:	e007      	b.n	810e1c4 <__sfputs_r+0x22>
 810e1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e1b8:	463a      	mov	r2, r7
 810e1ba:	4630      	mov	r0, r6
 810e1bc:	f7ff ffda 	bl	810e174 <__sfputc_r>
 810e1c0:	1c43      	adds	r3, r0, #1
 810e1c2:	d1f3      	bne.n	810e1ac <__sfputs_r+0xa>
 810e1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810e1c8 <_vfiprintf_r>:
 810e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e1cc:	460d      	mov	r5, r1
 810e1ce:	b09d      	sub	sp, #116	; 0x74
 810e1d0:	4614      	mov	r4, r2
 810e1d2:	4698      	mov	r8, r3
 810e1d4:	4606      	mov	r6, r0
 810e1d6:	b118      	cbz	r0, 810e1e0 <_vfiprintf_r+0x18>
 810e1d8:	6a03      	ldr	r3, [r0, #32]
 810e1da:	b90b      	cbnz	r3, 810e1e0 <_vfiprintf_r+0x18>
 810e1dc:	f7fd fa20 	bl	810b620 <__sinit>
 810e1e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810e1e2:	07d9      	lsls	r1, r3, #31
 810e1e4:	d405      	bmi.n	810e1f2 <_vfiprintf_r+0x2a>
 810e1e6:	89ab      	ldrh	r3, [r5, #12]
 810e1e8:	059a      	lsls	r2, r3, #22
 810e1ea:	d402      	bmi.n	810e1f2 <_vfiprintf_r+0x2a>
 810e1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810e1ee:	f7fd fc40 	bl	810ba72 <__retarget_lock_acquire_recursive>
 810e1f2:	89ab      	ldrh	r3, [r5, #12]
 810e1f4:	071b      	lsls	r3, r3, #28
 810e1f6:	d501      	bpl.n	810e1fc <_vfiprintf_r+0x34>
 810e1f8:	692b      	ldr	r3, [r5, #16]
 810e1fa:	b99b      	cbnz	r3, 810e224 <_vfiprintf_r+0x5c>
 810e1fc:	4629      	mov	r1, r5
 810e1fe:	4630      	mov	r0, r6
 810e200:	f7fd fb52 	bl	810b8a8 <__swsetup_r>
 810e204:	b170      	cbz	r0, 810e224 <_vfiprintf_r+0x5c>
 810e206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810e208:	07dc      	lsls	r4, r3, #31
 810e20a:	d504      	bpl.n	810e216 <_vfiprintf_r+0x4e>
 810e20c:	f04f 30ff 	mov.w	r0, #4294967295
 810e210:	b01d      	add	sp, #116	; 0x74
 810e212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e216:	89ab      	ldrh	r3, [r5, #12]
 810e218:	0598      	lsls	r0, r3, #22
 810e21a:	d4f7      	bmi.n	810e20c <_vfiprintf_r+0x44>
 810e21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810e21e:	f7fd fc29 	bl	810ba74 <__retarget_lock_release_recursive>
 810e222:	e7f3      	b.n	810e20c <_vfiprintf_r+0x44>
 810e224:	2300      	movs	r3, #0
 810e226:	9309      	str	r3, [sp, #36]	; 0x24
 810e228:	2320      	movs	r3, #32
 810e22a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810e22e:	f8cd 800c 	str.w	r8, [sp, #12]
 810e232:	2330      	movs	r3, #48	; 0x30
 810e234:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810e3e8 <_vfiprintf_r+0x220>
 810e238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810e23c:	f04f 0901 	mov.w	r9, #1
 810e240:	4623      	mov	r3, r4
 810e242:	469a      	mov	sl, r3
 810e244:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e248:	b10a      	cbz	r2, 810e24e <_vfiprintf_r+0x86>
 810e24a:	2a25      	cmp	r2, #37	; 0x25
 810e24c:	d1f9      	bne.n	810e242 <_vfiprintf_r+0x7a>
 810e24e:	ebba 0b04 	subs.w	fp, sl, r4
 810e252:	d00b      	beq.n	810e26c <_vfiprintf_r+0xa4>
 810e254:	465b      	mov	r3, fp
 810e256:	4622      	mov	r2, r4
 810e258:	4629      	mov	r1, r5
 810e25a:	4630      	mov	r0, r6
 810e25c:	f7ff ffa1 	bl	810e1a2 <__sfputs_r>
 810e260:	3001      	adds	r0, #1
 810e262:	f000 80a9 	beq.w	810e3b8 <_vfiprintf_r+0x1f0>
 810e266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810e268:	445a      	add	r2, fp
 810e26a:	9209      	str	r2, [sp, #36]	; 0x24
 810e26c:	f89a 3000 	ldrb.w	r3, [sl]
 810e270:	2b00      	cmp	r3, #0
 810e272:	f000 80a1 	beq.w	810e3b8 <_vfiprintf_r+0x1f0>
 810e276:	2300      	movs	r3, #0
 810e278:	f04f 32ff 	mov.w	r2, #4294967295
 810e27c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810e280:	f10a 0a01 	add.w	sl, sl, #1
 810e284:	9304      	str	r3, [sp, #16]
 810e286:	9307      	str	r3, [sp, #28]
 810e288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810e28c:	931a      	str	r3, [sp, #104]	; 0x68
 810e28e:	4654      	mov	r4, sl
 810e290:	2205      	movs	r2, #5
 810e292:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e296:	4854      	ldr	r0, [pc, #336]	; (810e3e8 <_vfiprintf_r+0x220>)
 810e298:	f7f2 f822 	bl	81002e0 <memchr>
 810e29c:	9a04      	ldr	r2, [sp, #16]
 810e29e:	b9d8      	cbnz	r0, 810e2d8 <_vfiprintf_r+0x110>
 810e2a0:	06d1      	lsls	r1, r2, #27
 810e2a2:	bf44      	itt	mi
 810e2a4:	2320      	movmi	r3, #32
 810e2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e2aa:	0713      	lsls	r3, r2, #28
 810e2ac:	bf44      	itt	mi
 810e2ae:	232b      	movmi	r3, #43	; 0x2b
 810e2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810e2b4:	f89a 3000 	ldrb.w	r3, [sl]
 810e2b8:	2b2a      	cmp	r3, #42	; 0x2a
 810e2ba:	d015      	beq.n	810e2e8 <_vfiprintf_r+0x120>
 810e2bc:	9a07      	ldr	r2, [sp, #28]
 810e2be:	4654      	mov	r4, sl
 810e2c0:	2000      	movs	r0, #0
 810e2c2:	f04f 0c0a 	mov.w	ip, #10
 810e2c6:	4621      	mov	r1, r4
 810e2c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 810e2cc:	3b30      	subs	r3, #48	; 0x30
 810e2ce:	2b09      	cmp	r3, #9
 810e2d0:	d94d      	bls.n	810e36e <_vfiprintf_r+0x1a6>
 810e2d2:	b1b0      	cbz	r0, 810e302 <_vfiprintf_r+0x13a>
 810e2d4:	9207      	str	r2, [sp, #28]
 810e2d6:	e014      	b.n	810e302 <_vfiprintf_r+0x13a>
 810e2d8:	eba0 0308 	sub.w	r3, r0, r8
 810e2dc:	fa09 f303 	lsl.w	r3, r9, r3
 810e2e0:	4313      	orrs	r3, r2
 810e2e2:	9304      	str	r3, [sp, #16]
 810e2e4:	46a2      	mov	sl, r4
 810e2e6:	e7d2      	b.n	810e28e <_vfiprintf_r+0xc6>
 810e2e8:	9b03      	ldr	r3, [sp, #12]
 810e2ea:	1d19      	adds	r1, r3, #4
 810e2ec:	681b      	ldr	r3, [r3, #0]
 810e2ee:	9103      	str	r1, [sp, #12]
 810e2f0:	2b00      	cmp	r3, #0
 810e2f2:	bfbb      	ittet	lt
 810e2f4:	425b      	neglt	r3, r3
 810e2f6:	f042 0202 	orrlt.w	r2, r2, #2
 810e2fa:	9307      	strge	r3, [sp, #28]
 810e2fc:	9307      	strlt	r3, [sp, #28]
 810e2fe:	bfb8      	it	lt
 810e300:	9204      	strlt	r2, [sp, #16]
 810e302:	7823      	ldrb	r3, [r4, #0]
 810e304:	2b2e      	cmp	r3, #46	; 0x2e
 810e306:	d10c      	bne.n	810e322 <_vfiprintf_r+0x15a>
 810e308:	7863      	ldrb	r3, [r4, #1]
 810e30a:	2b2a      	cmp	r3, #42	; 0x2a
 810e30c:	d134      	bne.n	810e378 <_vfiprintf_r+0x1b0>
 810e30e:	9b03      	ldr	r3, [sp, #12]
 810e310:	1d1a      	adds	r2, r3, #4
 810e312:	681b      	ldr	r3, [r3, #0]
 810e314:	9203      	str	r2, [sp, #12]
 810e316:	2b00      	cmp	r3, #0
 810e318:	bfb8      	it	lt
 810e31a:	f04f 33ff 	movlt.w	r3, #4294967295
 810e31e:	3402      	adds	r4, #2
 810e320:	9305      	str	r3, [sp, #20]
 810e322:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810e3f8 <_vfiprintf_r+0x230>
 810e326:	7821      	ldrb	r1, [r4, #0]
 810e328:	2203      	movs	r2, #3
 810e32a:	4650      	mov	r0, sl
 810e32c:	f7f1 ffd8 	bl	81002e0 <memchr>
 810e330:	b138      	cbz	r0, 810e342 <_vfiprintf_r+0x17a>
 810e332:	9b04      	ldr	r3, [sp, #16]
 810e334:	eba0 000a 	sub.w	r0, r0, sl
 810e338:	2240      	movs	r2, #64	; 0x40
 810e33a:	4082      	lsls	r2, r0
 810e33c:	4313      	orrs	r3, r2
 810e33e:	3401      	adds	r4, #1
 810e340:	9304      	str	r3, [sp, #16]
 810e342:	f814 1b01 	ldrb.w	r1, [r4], #1
 810e346:	4829      	ldr	r0, [pc, #164]	; (810e3ec <_vfiprintf_r+0x224>)
 810e348:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810e34c:	2206      	movs	r2, #6
 810e34e:	f7f1 ffc7 	bl	81002e0 <memchr>
 810e352:	2800      	cmp	r0, #0
 810e354:	d03f      	beq.n	810e3d6 <_vfiprintf_r+0x20e>
 810e356:	4b26      	ldr	r3, [pc, #152]	; (810e3f0 <_vfiprintf_r+0x228>)
 810e358:	bb1b      	cbnz	r3, 810e3a2 <_vfiprintf_r+0x1da>
 810e35a:	9b03      	ldr	r3, [sp, #12]
 810e35c:	3307      	adds	r3, #7
 810e35e:	f023 0307 	bic.w	r3, r3, #7
 810e362:	3308      	adds	r3, #8
 810e364:	9303      	str	r3, [sp, #12]
 810e366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810e368:	443b      	add	r3, r7
 810e36a:	9309      	str	r3, [sp, #36]	; 0x24
 810e36c:	e768      	b.n	810e240 <_vfiprintf_r+0x78>
 810e36e:	fb0c 3202 	mla	r2, ip, r2, r3
 810e372:	460c      	mov	r4, r1
 810e374:	2001      	movs	r0, #1
 810e376:	e7a6      	b.n	810e2c6 <_vfiprintf_r+0xfe>
 810e378:	2300      	movs	r3, #0
 810e37a:	3401      	adds	r4, #1
 810e37c:	9305      	str	r3, [sp, #20]
 810e37e:	4619      	mov	r1, r3
 810e380:	f04f 0c0a 	mov.w	ip, #10
 810e384:	4620      	mov	r0, r4
 810e386:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e38a:	3a30      	subs	r2, #48	; 0x30
 810e38c:	2a09      	cmp	r2, #9
 810e38e:	d903      	bls.n	810e398 <_vfiprintf_r+0x1d0>
 810e390:	2b00      	cmp	r3, #0
 810e392:	d0c6      	beq.n	810e322 <_vfiprintf_r+0x15a>
 810e394:	9105      	str	r1, [sp, #20]
 810e396:	e7c4      	b.n	810e322 <_vfiprintf_r+0x15a>
 810e398:	fb0c 2101 	mla	r1, ip, r1, r2
 810e39c:	4604      	mov	r4, r0
 810e39e:	2301      	movs	r3, #1
 810e3a0:	e7f0      	b.n	810e384 <_vfiprintf_r+0x1bc>
 810e3a2:	ab03      	add	r3, sp, #12
 810e3a4:	9300      	str	r3, [sp, #0]
 810e3a6:	462a      	mov	r2, r5
 810e3a8:	4b12      	ldr	r3, [pc, #72]	; (810e3f4 <_vfiprintf_r+0x22c>)
 810e3aa:	a904      	add	r1, sp, #16
 810e3ac:	4630      	mov	r0, r6
 810e3ae:	f7fc fad5 	bl	810a95c <_printf_float>
 810e3b2:	4607      	mov	r7, r0
 810e3b4:	1c78      	adds	r0, r7, #1
 810e3b6:	d1d6      	bne.n	810e366 <_vfiprintf_r+0x19e>
 810e3b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810e3ba:	07d9      	lsls	r1, r3, #31
 810e3bc:	d405      	bmi.n	810e3ca <_vfiprintf_r+0x202>
 810e3be:	89ab      	ldrh	r3, [r5, #12]
 810e3c0:	059a      	lsls	r2, r3, #22
 810e3c2:	d402      	bmi.n	810e3ca <_vfiprintf_r+0x202>
 810e3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810e3c6:	f7fd fb55 	bl	810ba74 <__retarget_lock_release_recursive>
 810e3ca:	89ab      	ldrh	r3, [r5, #12]
 810e3cc:	065b      	lsls	r3, r3, #25
 810e3ce:	f53f af1d 	bmi.w	810e20c <_vfiprintf_r+0x44>
 810e3d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 810e3d4:	e71c      	b.n	810e210 <_vfiprintf_r+0x48>
 810e3d6:	ab03      	add	r3, sp, #12
 810e3d8:	9300      	str	r3, [sp, #0]
 810e3da:	462a      	mov	r2, r5
 810e3dc:	4b05      	ldr	r3, [pc, #20]	; (810e3f4 <_vfiprintf_r+0x22c>)
 810e3de:	a904      	add	r1, sp, #16
 810e3e0:	4630      	mov	r0, r6
 810e3e2:	f7fc fd5f 	bl	810aea4 <_printf_i>
 810e3e6:	e7e4      	b.n	810e3b2 <_vfiprintf_r+0x1ea>
 810e3e8:	081ec631 	.word	0x081ec631
 810e3ec:	081ec63b 	.word	0x081ec63b
 810e3f0:	0810a95d 	.word	0x0810a95d
 810e3f4:	0810e1a3 	.word	0x0810e1a3
 810e3f8:	081ec637 	.word	0x081ec637

0810e3fc <__sflush_r>:
 810e3fc:	898a      	ldrh	r2, [r1, #12]
 810e3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e402:	4605      	mov	r5, r0
 810e404:	0710      	lsls	r0, r2, #28
 810e406:	460c      	mov	r4, r1
 810e408:	d458      	bmi.n	810e4bc <__sflush_r+0xc0>
 810e40a:	684b      	ldr	r3, [r1, #4]
 810e40c:	2b00      	cmp	r3, #0
 810e40e:	dc05      	bgt.n	810e41c <__sflush_r+0x20>
 810e410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810e412:	2b00      	cmp	r3, #0
 810e414:	dc02      	bgt.n	810e41c <__sflush_r+0x20>
 810e416:	2000      	movs	r0, #0
 810e418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810e41e:	2e00      	cmp	r6, #0
 810e420:	d0f9      	beq.n	810e416 <__sflush_r+0x1a>
 810e422:	2300      	movs	r3, #0
 810e424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810e428:	682f      	ldr	r7, [r5, #0]
 810e42a:	6a21      	ldr	r1, [r4, #32]
 810e42c:	602b      	str	r3, [r5, #0]
 810e42e:	d032      	beq.n	810e496 <__sflush_r+0x9a>
 810e430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810e432:	89a3      	ldrh	r3, [r4, #12]
 810e434:	075a      	lsls	r2, r3, #29
 810e436:	d505      	bpl.n	810e444 <__sflush_r+0x48>
 810e438:	6863      	ldr	r3, [r4, #4]
 810e43a:	1ac0      	subs	r0, r0, r3
 810e43c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810e43e:	b10b      	cbz	r3, 810e444 <__sflush_r+0x48>
 810e440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810e442:	1ac0      	subs	r0, r0, r3
 810e444:	2300      	movs	r3, #0
 810e446:	4602      	mov	r2, r0
 810e448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810e44a:	6a21      	ldr	r1, [r4, #32]
 810e44c:	4628      	mov	r0, r5
 810e44e:	47b0      	blx	r6
 810e450:	1c43      	adds	r3, r0, #1
 810e452:	89a3      	ldrh	r3, [r4, #12]
 810e454:	d106      	bne.n	810e464 <__sflush_r+0x68>
 810e456:	6829      	ldr	r1, [r5, #0]
 810e458:	291d      	cmp	r1, #29
 810e45a:	d82b      	bhi.n	810e4b4 <__sflush_r+0xb8>
 810e45c:	4a29      	ldr	r2, [pc, #164]	; (810e504 <__sflush_r+0x108>)
 810e45e:	410a      	asrs	r2, r1
 810e460:	07d6      	lsls	r6, r2, #31
 810e462:	d427      	bmi.n	810e4b4 <__sflush_r+0xb8>
 810e464:	2200      	movs	r2, #0
 810e466:	6062      	str	r2, [r4, #4]
 810e468:	04d9      	lsls	r1, r3, #19
 810e46a:	6922      	ldr	r2, [r4, #16]
 810e46c:	6022      	str	r2, [r4, #0]
 810e46e:	d504      	bpl.n	810e47a <__sflush_r+0x7e>
 810e470:	1c42      	adds	r2, r0, #1
 810e472:	d101      	bne.n	810e478 <__sflush_r+0x7c>
 810e474:	682b      	ldr	r3, [r5, #0]
 810e476:	b903      	cbnz	r3, 810e47a <__sflush_r+0x7e>
 810e478:	6560      	str	r0, [r4, #84]	; 0x54
 810e47a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810e47c:	602f      	str	r7, [r5, #0]
 810e47e:	2900      	cmp	r1, #0
 810e480:	d0c9      	beq.n	810e416 <__sflush_r+0x1a>
 810e482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810e486:	4299      	cmp	r1, r3
 810e488:	d002      	beq.n	810e490 <__sflush_r+0x94>
 810e48a:	4628      	mov	r0, r5
 810e48c:	f7fe f982 	bl	810c794 <_free_r>
 810e490:	2000      	movs	r0, #0
 810e492:	6360      	str	r0, [r4, #52]	; 0x34
 810e494:	e7c0      	b.n	810e418 <__sflush_r+0x1c>
 810e496:	2301      	movs	r3, #1
 810e498:	4628      	mov	r0, r5
 810e49a:	47b0      	blx	r6
 810e49c:	1c41      	adds	r1, r0, #1
 810e49e:	d1c8      	bne.n	810e432 <__sflush_r+0x36>
 810e4a0:	682b      	ldr	r3, [r5, #0]
 810e4a2:	2b00      	cmp	r3, #0
 810e4a4:	d0c5      	beq.n	810e432 <__sflush_r+0x36>
 810e4a6:	2b1d      	cmp	r3, #29
 810e4a8:	d001      	beq.n	810e4ae <__sflush_r+0xb2>
 810e4aa:	2b16      	cmp	r3, #22
 810e4ac:	d101      	bne.n	810e4b2 <__sflush_r+0xb6>
 810e4ae:	602f      	str	r7, [r5, #0]
 810e4b0:	e7b1      	b.n	810e416 <__sflush_r+0x1a>
 810e4b2:	89a3      	ldrh	r3, [r4, #12]
 810e4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e4b8:	81a3      	strh	r3, [r4, #12]
 810e4ba:	e7ad      	b.n	810e418 <__sflush_r+0x1c>
 810e4bc:	690f      	ldr	r7, [r1, #16]
 810e4be:	2f00      	cmp	r7, #0
 810e4c0:	d0a9      	beq.n	810e416 <__sflush_r+0x1a>
 810e4c2:	0793      	lsls	r3, r2, #30
 810e4c4:	680e      	ldr	r6, [r1, #0]
 810e4c6:	bf08      	it	eq
 810e4c8:	694b      	ldreq	r3, [r1, #20]
 810e4ca:	600f      	str	r7, [r1, #0]
 810e4cc:	bf18      	it	ne
 810e4ce:	2300      	movne	r3, #0
 810e4d0:	eba6 0807 	sub.w	r8, r6, r7
 810e4d4:	608b      	str	r3, [r1, #8]
 810e4d6:	f1b8 0f00 	cmp.w	r8, #0
 810e4da:	dd9c      	ble.n	810e416 <__sflush_r+0x1a>
 810e4dc:	6a21      	ldr	r1, [r4, #32]
 810e4de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810e4e0:	4643      	mov	r3, r8
 810e4e2:	463a      	mov	r2, r7
 810e4e4:	4628      	mov	r0, r5
 810e4e6:	47b0      	blx	r6
 810e4e8:	2800      	cmp	r0, #0
 810e4ea:	dc06      	bgt.n	810e4fa <__sflush_r+0xfe>
 810e4ec:	89a3      	ldrh	r3, [r4, #12]
 810e4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810e4f2:	81a3      	strh	r3, [r4, #12]
 810e4f4:	f04f 30ff 	mov.w	r0, #4294967295
 810e4f8:	e78e      	b.n	810e418 <__sflush_r+0x1c>
 810e4fa:	4407      	add	r7, r0
 810e4fc:	eba8 0800 	sub.w	r8, r8, r0
 810e500:	e7e9      	b.n	810e4d6 <__sflush_r+0xda>
 810e502:	bf00      	nop
 810e504:	dfbffffe 	.word	0xdfbffffe

0810e508 <_fflush_r>:
 810e508:	b538      	push	{r3, r4, r5, lr}
 810e50a:	690b      	ldr	r3, [r1, #16]
 810e50c:	4605      	mov	r5, r0
 810e50e:	460c      	mov	r4, r1
 810e510:	b913      	cbnz	r3, 810e518 <_fflush_r+0x10>
 810e512:	2500      	movs	r5, #0
 810e514:	4628      	mov	r0, r5
 810e516:	bd38      	pop	{r3, r4, r5, pc}
 810e518:	b118      	cbz	r0, 810e522 <_fflush_r+0x1a>
 810e51a:	6a03      	ldr	r3, [r0, #32]
 810e51c:	b90b      	cbnz	r3, 810e522 <_fflush_r+0x1a>
 810e51e:	f7fd f87f 	bl	810b620 <__sinit>
 810e522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e526:	2b00      	cmp	r3, #0
 810e528:	d0f3      	beq.n	810e512 <_fflush_r+0xa>
 810e52a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810e52c:	07d0      	lsls	r0, r2, #31
 810e52e:	d404      	bmi.n	810e53a <_fflush_r+0x32>
 810e530:	0599      	lsls	r1, r3, #22
 810e532:	d402      	bmi.n	810e53a <_fflush_r+0x32>
 810e534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810e536:	f7fd fa9c 	bl	810ba72 <__retarget_lock_acquire_recursive>
 810e53a:	4628      	mov	r0, r5
 810e53c:	4621      	mov	r1, r4
 810e53e:	f7ff ff5d 	bl	810e3fc <__sflush_r>
 810e542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810e544:	07da      	lsls	r2, r3, #31
 810e546:	4605      	mov	r5, r0
 810e548:	d4e4      	bmi.n	810e514 <_fflush_r+0xc>
 810e54a:	89a3      	ldrh	r3, [r4, #12]
 810e54c:	059b      	lsls	r3, r3, #22
 810e54e:	d4e1      	bmi.n	810e514 <_fflush_r+0xc>
 810e550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810e552:	f7fd fa8f 	bl	810ba74 <__retarget_lock_release_recursive>
 810e556:	e7dd      	b.n	810e514 <_fflush_r+0xc>

0810e558 <__swhatbuf_r>:
 810e558:	b570      	push	{r4, r5, r6, lr}
 810e55a:	460c      	mov	r4, r1
 810e55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e560:	2900      	cmp	r1, #0
 810e562:	b096      	sub	sp, #88	; 0x58
 810e564:	4615      	mov	r5, r2
 810e566:	461e      	mov	r6, r3
 810e568:	da0d      	bge.n	810e586 <__swhatbuf_r+0x2e>
 810e56a:	89a3      	ldrh	r3, [r4, #12]
 810e56c:	f013 0f80 	tst.w	r3, #128	; 0x80
 810e570:	f04f 0100 	mov.w	r1, #0
 810e574:	bf0c      	ite	eq
 810e576:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810e57a:	2340      	movne	r3, #64	; 0x40
 810e57c:	2000      	movs	r0, #0
 810e57e:	6031      	str	r1, [r6, #0]
 810e580:	602b      	str	r3, [r5, #0]
 810e582:	b016      	add	sp, #88	; 0x58
 810e584:	bd70      	pop	{r4, r5, r6, pc}
 810e586:	466a      	mov	r2, sp
 810e588:	f000 f874 	bl	810e674 <_fstat_r>
 810e58c:	2800      	cmp	r0, #0
 810e58e:	dbec      	blt.n	810e56a <__swhatbuf_r+0x12>
 810e590:	9901      	ldr	r1, [sp, #4]
 810e592:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810e596:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810e59a:	4259      	negs	r1, r3
 810e59c:	4159      	adcs	r1, r3
 810e59e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e5a2:	e7eb      	b.n	810e57c <__swhatbuf_r+0x24>

0810e5a4 <__smakebuf_r>:
 810e5a4:	898b      	ldrh	r3, [r1, #12]
 810e5a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e5a8:	079d      	lsls	r5, r3, #30
 810e5aa:	4606      	mov	r6, r0
 810e5ac:	460c      	mov	r4, r1
 810e5ae:	d507      	bpl.n	810e5c0 <__smakebuf_r+0x1c>
 810e5b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e5b4:	6023      	str	r3, [r4, #0]
 810e5b6:	6123      	str	r3, [r4, #16]
 810e5b8:	2301      	movs	r3, #1
 810e5ba:	6163      	str	r3, [r4, #20]
 810e5bc:	b002      	add	sp, #8
 810e5be:	bd70      	pop	{r4, r5, r6, pc}
 810e5c0:	ab01      	add	r3, sp, #4
 810e5c2:	466a      	mov	r2, sp
 810e5c4:	f7ff ffc8 	bl	810e558 <__swhatbuf_r>
 810e5c8:	9900      	ldr	r1, [sp, #0]
 810e5ca:	4605      	mov	r5, r0
 810e5cc:	4630      	mov	r0, r6
 810e5ce:	f7fc f869 	bl	810a6a4 <_malloc_r>
 810e5d2:	b948      	cbnz	r0, 810e5e8 <__smakebuf_r+0x44>
 810e5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e5d8:	059a      	lsls	r2, r3, #22
 810e5da:	d4ef      	bmi.n	810e5bc <__smakebuf_r+0x18>
 810e5dc:	f023 0303 	bic.w	r3, r3, #3
 810e5e0:	f043 0302 	orr.w	r3, r3, #2
 810e5e4:	81a3      	strh	r3, [r4, #12]
 810e5e6:	e7e3      	b.n	810e5b0 <__smakebuf_r+0xc>
 810e5e8:	89a3      	ldrh	r3, [r4, #12]
 810e5ea:	6020      	str	r0, [r4, #0]
 810e5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e5f0:	81a3      	strh	r3, [r4, #12]
 810e5f2:	9b00      	ldr	r3, [sp, #0]
 810e5f4:	6163      	str	r3, [r4, #20]
 810e5f6:	9b01      	ldr	r3, [sp, #4]
 810e5f8:	6120      	str	r0, [r4, #16]
 810e5fa:	b15b      	cbz	r3, 810e614 <__smakebuf_r+0x70>
 810e5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e600:	4630      	mov	r0, r6
 810e602:	f000 f849 	bl	810e698 <_isatty_r>
 810e606:	b128      	cbz	r0, 810e614 <__smakebuf_r+0x70>
 810e608:	89a3      	ldrh	r3, [r4, #12]
 810e60a:	f023 0303 	bic.w	r3, r3, #3
 810e60e:	f043 0301 	orr.w	r3, r3, #1
 810e612:	81a3      	strh	r3, [r4, #12]
 810e614:	89a3      	ldrh	r3, [r4, #12]
 810e616:	431d      	orrs	r5, r3
 810e618:	81a5      	strh	r5, [r4, #12]
 810e61a:	e7cf      	b.n	810e5bc <__smakebuf_r+0x18>

0810e61c <memmove>:
 810e61c:	4288      	cmp	r0, r1
 810e61e:	b510      	push	{r4, lr}
 810e620:	eb01 0402 	add.w	r4, r1, r2
 810e624:	d902      	bls.n	810e62c <memmove+0x10>
 810e626:	4284      	cmp	r4, r0
 810e628:	4623      	mov	r3, r4
 810e62a:	d807      	bhi.n	810e63c <memmove+0x20>
 810e62c:	1e43      	subs	r3, r0, #1
 810e62e:	42a1      	cmp	r1, r4
 810e630:	d008      	beq.n	810e644 <memmove+0x28>
 810e632:	f811 2b01 	ldrb.w	r2, [r1], #1
 810e636:	f803 2f01 	strb.w	r2, [r3, #1]!
 810e63a:	e7f8      	b.n	810e62e <memmove+0x12>
 810e63c:	4402      	add	r2, r0
 810e63e:	4601      	mov	r1, r0
 810e640:	428a      	cmp	r2, r1
 810e642:	d100      	bne.n	810e646 <memmove+0x2a>
 810e644:	bd10      	pop	{r4, pc}
 810e646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810e64a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810e64e:	e7f7      	b.n	810e640 <memmove+0x24>

0810e650 <strncmp>:
 810e650:	b510      	push	{r4, lr}
 810e652:	b16a      	cbz	r2, 810e670 <strncmp+0x20>
 810e654:	3901      	subs	r1, #1
 810e656:	1884      	adds	r4, r0, r2
 810e658:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e65c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810e660:	429a      	cmp	r2, r3
 810e662:	d103      	bne.n	810e66c <strncmp+0x1c>
 810e664:	42a0      	cmp	r0, r4
 810e666:	d001      	beq.n	810e66c <strncmp+0x1c>
 810e668:	2a00      	cmp	r2, #0
 810e66a:	d1f5      	bne.n	810e658 <strncmp+0x8>
 810e66c:	1ad0      	subs	r0, r2, r3
 810e66e:	bd10      	pop	{r4, pc}
 810e670:	4610      	mov	r0, r2
 810e672:	e7fc      	b.n	810e66e <strncmp+0x1e>

0810e674 <_fstat_r>:
 810e674:	b538      	push	{r3, r4, r5, lr}
 810e676:	4d07      	ldr	r5, [pc, #28]	; (810e694 <_fstat_r+0x20>)
 810e678:	2300      	movs	r3, #0
 810e67a:	4604      	mov	r4, r0
 810e67c:	4608      	mov	r0, r1
 810e67e:	4611      	mov	r1, r2
 810e680:	602b      	str	r3, [r5, #0]
 810e682:	f001 ff5b 	bl	811053c <_fstat>
 810e686:	1c43      	adds	r3, r0, #1
 810e688:	d102      	bne.n	810e690 <_fstat_r+0x1c>
 810e68a:	682b      	ldr	r3, [r5, #0]
 810e68c:	b103      	cbz	r3, 810e690 <_fstat_r+0x1c>
 810e68e:	6023      	str	r3, [r4, #0]
 810e690:	bd38      	pop	{r3, r4, r5, pc}
 810e692:	bf00      	nop
 810e694:	1001ac74 	.word	0x1001ac74

0810e698 <_isatty_r>:
 810e698:	b538      	push	{r3, r4, r5, lr}
 810e69a:	4d06      	ldr	r5, [pc, #24]	; (810e6b4 <_isatty_r+0x1c>)
 810e69c:	2300      	movs	r3, #0
 810e69e:	4604      	mov	r4, r0
 810e6a0:	4608      	mov	r0, r1
 810e6a2:	602b      	str	r3, [r5, #0]
 810e6a4:	f001 ff5a 	bl	811055c <_isatty>
 810e6a8:	1c43      	adds	r3, r0, #1
 810e6aa:	d102      	bne.n	810e6b2 <_isatty_r+0x1a>
 810e6ac:	682b      	ldr	r3, [r5, #0]
 810e6ae:	b103      	cbz	r3, 810e6b2 <_isatty_r+0x1a>
 810e6b0:	6023      	str	r3, [r4, #0]
 810e6b2:	bd38      	pop	{r3, r4, r5, pc}
 810e6b4:	1001ac74 	.word	0x1001ac74

0810e6b8 <nan>:
 810e6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810e6c0 <nan+0x8>
 810e6bc:	4770      	bx	lr
 810e6be:	bf00      	nop
 810e6c0:	00000000 	.word	0x00000000
 810e6c4:	7ff80000 	.word	0x7ff80000

0810e6c8 <__assert_func>:
 810e6c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810e6ca:	4614      	mov	r4, r2
 810e6cc:	461a      	mov	r2, r3
 810e6ce:	4b09      	ldr	r3, [pc, #36]	; (810e6f4 <__assert_func+0x2c>)
 810e6d0:	681b      	ldr	r3, [r3, #0]
 810e6d2:	4605      	mov	r5, r0
 810e6d4:	68d8      	ldr	r0, [r3, #12]
 810e6d6:	b14c      	cbz	r4, 810e6ec <__assert_func+0x24>
 810e6d8:	4b07      	ldr	r3, [pc, #28]	; (810e6f8 <__assert_func+0x30>)
 810e6da:	9100      	str	r1, [sp, #0]
 810e6dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810e6e0:	4906      	ldr	r1, [pc, #24]	; (810e6fc <__assert_func+0x34>)
 810e6e2:	462b      	mov	r3, r5
 810e6e4:	f000 fb9a 	bl	810ee1c <fiprintf>
 810e6e8:	f000 fbaa 	bl	810ee40 <abort>
 810e6ec:	4b04      	ldr	r3, [pc, #16]	; (810e700 <__assert_func+0x38>)
 810e6ee:	461c      	mov	r4, r3
 810e6f0:	e7f3      	b.n	810e6da <__assert_func+0x12>
 810e6f2:	bf00      	nop
 810e6f4:	100009ec 	.word	0x100009ec
 810e6f8:	081ec64a 	.word	0x081ec64a
 810e6fc:	081ec657 	.word	0x081ec657
 810e700:	081d8da9 	.word	0x081d8da9

0810e704 <_calloc_r>:
 810e704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e706:	fba1 2402 	umull	r2, r4, r1, r2
 810e70a:	b94c      	cbnz	r4, 810e720 <_calloc_r+0x1c>
 810e70c:	4611      	mov	r1, r2
 810e70e:	9201      	str	r2, [sp, #4]
 810e710:	f7fb ffc8 	bl	810a6a4 <_malloc_r>
 810e714:	9a01      	ldr	r2, [sp, #4]
 810e716:	4605      	mov	r5, r0
 810e718:	b930      	cbnz	r0, 810e728 <_calloc_r+0x24>
 810e71a:	4628      	mov	r0, r5
 810e71c:	b003      	add	sp, #12
 810e71e:	bd30      	pop	{r4, r5, pc}
 810e720:	220c      	movs	r2, #12
 810e722:	6002      	str	r2, [r0, #0]
 810e724:	2500      	movs	r5, #0
 810e726:	e7f8      	b.n	810e71a <_calloc_r+0x16>
 810e728:	4621      	mov	r1, r4
 810e72a:	f7fd f915 	bl	810b958 <memset>
 810e72e:	e7f4      	b.n	810e71a <_calloc_r+0x16>

0810e730 <rshift>:
 810e730:	6903      	ldr	r3, [r0, #16]
 810e732:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810e736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e73a:	ea4f 1261 	mov.w	r2, r1, asr #5
 810e73e:	f100 0414 	add.w	r4, r0, #20
 810e742:	dd45      	ble.n	810e7d0 <rshift+0xa0>
 810e744:	f011 011f 	ands.w	r1, r1, #31
 810e748:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810e74c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810e750:	d10c      	bne.n	810e76c <rshift+0x3c>
 810e752:	f100 0710 	add.w	r7, r0, #16
 810e756:	4629      	mov	r1, r5
 810e758:	42b1      	cmp	r1, r6
 810e75a:	d334      	bcc.n	810e7c6 <rshift+0x96>
 810e75c:	1a9b      	subs	r3, r3, r2
 810e75e:	009b      	lsls	r3, r3, #2
 810e760:	1eea      	subs	r2, r5, #3
 810e762:	4296      	cmp	r6, r2
 810e764:	bf38      	it	cc
 810e766:	2300      	movcc	r3, #0
 810e768:	4423      	add	r3, r4
 810e76a:	e015      	b.n	810e798 <rshift+0x68>
 810e76c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810e770:	f1c1 0820 	rsb	r8, r1, #32
 810e774:	40cf      	lsrs	r7, r1
 810e776:	f105 0e04 	add.w	lr, r5, #4
 810e77a:	46a1      	mov	r9, r4
 810e77c:	4576      	cmp	r6, lr
 810e77e:	46f4      	mov	ip, lr
 810e780:	d815      	bhi.n	810e7ae <rshift+0x7e>
 810e782:	1a9a      	subs	r2, r3, r2
 810e784:	0092      	lsls	r2, r2, #2
 810e786:	3a04      	subs	r2, #4
 810e788:	3501      	adds	r5, #1
 810e78a:	42ae      	cmp	r6, r5
 810e78c:	bf38      	it	cc
 810e78e:	2200      	movcc	r2, #0
 810e790:	18a3      	adds	r3, r4, r2
 810e792:	50a7      	str	r7, [r4, r2]
 810e794:	b107      	cbz	r7, 810e798 <rshift+0x68>
 810e796:	3304      	adds	r3, #4
 810e798:	1b1a      	subs	r2, r3, r4
 810e79a:	42a3      	cmp	r3, r4
 810e79c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810e7a0:	bf08      	it	eq
 810e7a2:	2300      	moveq	r3, #0
 810e7a4:	6102      	str	r2, [r0, #16]
 810e7a6:	bf08      	it	eq
 810e7a8:	6143      	streq	r3, [r0, #20]
 810e7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e7ae:	f8dc c000 	ldr.w	ip, [ip]
 810e7b2:	fa0c fc08 	lsl.w	ip, ip, r8
 810e7b6:	ea4c 0707 	orr.w	r7, ip, r7
 810e7ba:	f849 7b04 	str.w	r7, [r9], #4
 810e7be:	f85e 7b04 	ldr.w	r7, [lr], #4
 810e7c2:	40cf      	lsrs	r7, r1
 810e7c4:	e7da      	b.n	810e77c <rshift+0x4c>
 810e7c6:	f851 cb04 	ldr.w	ip, [r1], #4
 810e7ca:	f847 cf04 	str.w	ip, [r7, #4]!
 810e7ce:	e7c3      	b.n	810e758 <rshift+0x28>
 810e7d0:	4623      	mov	r3, r4
 810e7d2:	e7e1      	b.n	810e798 <rshift+0x68>

0810e7d4 <__hexdig_fun>:
 810e7d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810e7d8:	2b09      	cmp	r3, #9
 810e7da:	d802      	bhi.n	810e7e2 <__hexdig_fun+0xe>
 810e7dc:	3820      	subs	r0, #32
 810e7de:	b2c0      	uxtb	r0, r0
 810e7e0:	4770      	bx	lr
 810e7e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810e7e6:	2b05      	cmp	r3, #5
 810e7e8:	d801      	bhi.n	810e7ee <__hexdig_fun+0x1a>
 810e7ea:	3847      	subs	r0, #71	; 0x47
 810e7ec:	e7f7      	b.n	810e7de <__hexdig_fun+0xa>
 810e7ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810e7f2:	2b05      	cmp	r3, #5
 810e7f4:	d801      	bhi.n	810e7fa <__hexdig_fun+0x26>
 810e7f6:	3827      	subs	r0, #39	; 0x27
 810e7f8:	e7f1      	b.n	810e7de <__hexdig_fun+0xa>
 810e7fa:	2000      	movs	r0, #0
 810e7fc:	4770      	bx	lr
	...

0810e800 <__gethex>:
 810e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e804:	4617      	mov	r7, r2
 810e806:	680a      	ldr	r2, [r1, #0]
 810e808:	b085      	sub	sp, #20
 810e80a:	f102 0b02 	add.w	fp, r2, #2
 810e80e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810e812:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810e816:	4681      	mov	r9, r0
 810e818:	468a      	mov	sl, r1
 810e81a:	9302      	str	r3, [sp, #8]
 810e81c:	32fe      	adds	r2, #254	; 0xfe
 810e81e:	eb02 030b 	add.w	r3, r2, fp
 810e822:	46d8      	mov	r8, fp
 810e824:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810e828:	9301      	str	r3, [sp, #4]
 810e82a:	2830      	cmp	r0, #48	; 0x30
 810e82c:	d0f7      	beq.n	810e81e <__gethex+0x1e>
 810e82e:	f7ff ffd1 	bl	810e7d4 <__hexdig_fun>
 810e832:	4604      	mov	r4, r0
 810e834:	2800      	cmp	r0, #0
 810e836:	d138      	bne.n	810e8aa <__gethex+0xaa>
 810e838:	49a7      	ldr	r1, [pc, #668]	; (810ead8 <__gethex+0x2d8>)
 810e83a:	2201      	movs	r2, #1
 810e83c:	4640      	mov	r0, r8
 810e83e:	f7ff ff07 	bl	810e650 <strncmp>
 810e842:	4606      	mov	r6, r0
 810e844:	2800      	cmp	r0, #0
 810e846:	d169      	bne.n	810e91c <__gethex+0x11c>
 810e848:	f898 0001 	ldrb.w	r0, [r8, #1]
 810e84c:	465d      	mov	r5, fp
 810e84e:	f7ff ffc1 	bl	810e7d4 <__hexdig_fun>
 810e852:	2800      	cmp	r0, #0
 810e854:	d064      	beq.n	810e920 <__gethex+0x120>
 810e856:	465a      	mov	r2, fp
 810e858:	7810      	ldrb	r0, [r2, #0]
 810e85a:	2830      	cmp	r0, #48	; 0x30
 810e85c:	4690      	mov	r8, r2
 810e85e:	f102 0201 	add.w	r2, r2, #1
 810e862:	d0f9      	beq.n	810e858 <__gethex+0x58>
 810e864:	f7ff ffb6 	bl	810e7d4 <__hexdig_fun>
 810e868:	2301      	movs	r3, #1
 810e86a:	fab0 f480 	clz	r4, r0
 810e86e:	0964      	lsrs	r4, r4, #5
 810e870:	465e      	mov	r6, fp
 810e872:	9301      	str	r3, [sp, #4]
 810e874:	4642      	mov	r2, r8
 810e876:	4615      	mov	r5, r2
 810e878:	3201      	adds	r2, #1
 810e87a:	7828      	ldrb	r0, [r5, #0]
 810e87c:	f7ff ffaa 	bl	810e7d4 <__hexdig_fun>
 810e880:	2800      	cmp	r0, #0
 810e882:	d1f8      	bne.n	810e876 <__gethex+0x76>
 810e884:	4994      	ldr	r1, [pc, #592]	; (810ead8 <__gethex+0x2d8>)
 810e886:	2201      	movs	r2, #1
 810e888:	4628      	mov	r0, r5
 810e88a:	f7ff fee1 	bl	810e650 <strncmp>
 810e88e:	b978      	cbnz	r0, 810e8b0 <__gethex+0xb0>
 810e890:	b946      	cbnz	r6, 810e8a4 <__gethex+0xa4>
 810e892:	1c6e      	adds	r6, r5, #1
 810e894:	4632      	mov	r2, r6
 810e896:	4615      	mov	r5, r2
 810e898:	3201      	adds	r2, #1
 810e89a:	7828      	ldrb	r0, [r5, #0]
 810e89c:	f7ff ff9a 	bl	810e7d4 <__hexdig_fun>
 810e8a0:	2800      	cmp	r0, #0
 810e8a2:	d1f8      	bne.n	810e896 <__gethex+0x96>
 810e8a4:	1b73      	subs	r3, r6, r5
 810e8a6:	009e      	lsls	r6, r3, #2
 810e8a8:	e004      	b.n	810e8b4 <__gethex+0xb4>
 810e8aa:	2400      	movs	r4, #0
 810e8ac:	4626      	mov	r6, r4
 810e8ae:	e7e1      	b.n	810e874 <__gethex+0x74>
 810e8b0:	2e00      	cmp	r6, #0
 810e8b2:	d1f7      	bne.n	810e8a4 <__gethex+0xa4>
 810e8b4:	782b      	ldrb	r3, [r5, #0]
 810e8b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810e8ba:	2b50      	cmp	r3, #80	; 0x50
 810e8bc:	d13d      	bne.n	810e93a <__gethex+0x13a>
 810e8be:	786b      	ldrb	r3, [r5, #1]
 810e8c0:	2b2b      	cmp	r3, #43	; 0x2b
 810e8c2:	d02f      	beq.n	810e924 <__gethex+0x124>
 810e8c4:	2b2d      	cmp	r3, #45	; 0x2d
 810e8c6:	d031      	beq.n	810e92c <__gethex+0x12c>
 810e8c8:	1c69      	adds	r1, r5, #1
 810e8ca:	f04f 0b00 	mov.w	fp, #0
 810e8ce:	7808      	ldrb	r0, [r1, #0]
 810e8d0:	f7ff ff80 	bl	810e7d4 <__hexdig_fun>
 810e8d4:	1e42      	subs	r2, r0, #1
 810e8d6:	b2d2      	uxtb	r2, r2
 810e8d8:	2a18      	cmp	r2, #24
 810e8da:	d82e      	bhi.n	810e93a <__gethex+0x13a>
 810e8dc:	f1a0 0210 	sub.w	r2, r0, #16
 810e8e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810e8e4:	f7ff ff76 	bl	810e7d4 <__hexdig_fun>
 810e8e8:	f100 3cff 	add.w	ip, r0, #4294967295
 810e8ec:	fa5f fc8c 	uxtb.w	ip, ip
 810e8f0:	f1bc 0f18 	cmp.w	ip, #24
 810e8f4:	d91d      	bls.n	810e932 <__gethex+0x132>
 810e8f6:	f1bb 0f00 	cmp.w	fp, #0
 810e8fa:	d000      	beq.n	810e8fe <__gethex+0xfe>
 810e8fc:	4252      	negs	r2, r2
 810e8fe:	4416      	add	r6, r2
 810e900:	f8ca 1000 	str.w	r1, [sl]
 810e904:	b1dc      	cbz	r4, 810e93e <__gethex+0x13e>
 810e906:	9b01      	ldr	r3, [sp, #4]
 810e908:	2b00      	cmp	r3, #0
 810e90a:	bf14      	ite	ne
 810e90c:	f04f 0800 	movne.w	r8, #0
 810e910:	f04f 0806 	moveq.w	r8, #6
 810e914:	4640      	mov	r0, r8
 810e916:	b005      	add	sp, #20
 810e918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e91c:	4645      	mov	r5, r8
 810e91e:	4626      	mov	r6, r4
 810e920:	2401      	movs	r4, #1
 810e922:	e7c7      	b.n	810e8b4 <__gethex+0xb4>
 810e924:	f04f 0b00 	mov.w	fp, #0
 810e928:	1ca9      	adds	r1, r5, #2
 810e92a:	e7d0      	b.n	810e8ce <__gethex+0xce>
 810e92c:	f04f 0b01 	mov.w	fp, #1
 810e930:	e7fa      	b.n	810e928 <__gethex+0x128>
 810e932:	230a      	movs	r3, #10
 810e934:	fb03 0002 	mla	r0, r3, r2, r0
 810e938:	e7d0      	b.n	810e8dc <__gethex+0xdc>
 810e93a:	4629      	mov	r1, r5
 810e93c:	e7e0      	b.n	810e900 <__gethex+0x100>
 810e93e:	eba5 0308 	sub.w	r3, r5, r8
 810e942:	3b01      	subs	r3, #1
 810e944:	4621      	mov	r1, r4
 810e946:	2b07      	cmp	r3, #7
 810e948:	dc0a      	bgt.n	810e960 <__gethex+0x160>
 810e94a:	4648      	mov	r0, r9
 810e94c:	f7fd ff6e 	bl	810c82c <_Balloc>
 810e950:	4604      	mov	r4, r0
 810e952:	b940      	cbnz	r0, 810e966 <__gethex+0x166>
 810e954:	4b61      	ldr	r3, [pc, #388]	; (810eadc <__gethex+0x2dc>)
 810e956:	4602      	mov	r2, r0
 810e958:	21e4      	movs	r1, #228	; 0xe4
 810e95a:	4861      	ldr	r0, [pc, #388]	; (810eae0 <__gethex+0x2e0>)
 810e95c:	f7ff feb4 	bl	810e6c8 <__assert_func>
 810e960:	3101      	adds	r1, #1
 810e962:	105b      	asrs	r3, r3, #1
 810e964:	e7ef      	b.n	810e946 <__gethex+0x146>
 810e966:	f100 0a14 	add.w	sl, r0, #20
 810e96a:	2300      	movs	r3, #0
 810e96c:	495a      	ldr	r1, [pc, #360]	; (810ead8 <__gethex+0x2d8>)
 810e96e:	f8cd a004 	str.w	sl, [sp, #4]
 810e972:	469b      	mov	fp, r3
 810e974:	45a8      	cmp	r8, r5
 810e976:	d342      	bcc.n	810e9fe <__gethex+0x1fe>
 810e978:	9801      	ldr	r0, [sp, #4]
 810e97a:	f840 bb04 	str.w	fp, [r0], #4
 810e97e:	eba0 000a 	sub.w	r0, r0, sl
 810e982:	1080      	asrs	r0, r0, #2
 810e984:	6120      	str	r0, [r4, #16]
 810e986:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810e98a:	4658      	mov	r0, fp
 810e98c:	f7fe f840 	bl	810ca10 <__hi0bits>
 810e990:	683d      	ldr	r5, [r7, #0]
 810e992:	eba8 0000 	sub.w	r0, r8, r0
 810e996:	42a8      	cmp	r0, r5
 810e998:	dd59      	ble.n	810ea4e <__gethex+0x24e>
 810e99a:	eba0 0805 	sub.w	r8, r0, r5
 810e99e:	4641      	mov	r1, r8
 810e9a0:	4620      	mov	r0, r4
 810e9a2:	f7fe fbcf 	bl	810d144 <__any_on>
 810e9a6:	4683      	mov	fp, r0
 810e9a8:	b1b8      	cbz	r0, 810e9da <__gethex+0x1da>
 810e9aa:	f108 33ff 	add.w	r3, r8, #4294967295
 810e9ae:	1159      	asrs	r1, r3, #5
 810e9b0:	f003 021f 	and.w	r2, r3, #31
 810e9b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810e9b8:	f04f 0b01 	mov.w	fp, #1
 810e9bc:	fa0b f202 	lsl.w	r2, fp, r2
 810e9c0:	420a      	tst	r2, r1
 810e9c2:	d00a      	beq.n	810e9da <__gethex+0x1da>
 810e9c4:	455b      	cmp	r3, fp
 810e9c6:	dd06      	ble.n	810e9d6 <__gethex+0x1d6>
 810e9c8:	f1a8 0102 	sub.w	r1, r8, #2
 810e9cc:	4620      	mov	r0, r4
 810e9ce:	f7fe fbb9 	bl	810d144 <__any_on>
 810e9d2:	2800      	cmp	r0, #0
 810e9d4:	d138      	bne.n	810ea48 <__gethex+0x248>
 810e9d6:	f04f 0b02 	mov.w	fp, #2
 810e9da:	4641      	mov	r1, r8
 810e9dc:	4620      	mov	r0, r4
 810e9de:	f7ff fea7 	bl	810e730 <rshift>
 810e9e2:	4446      	add	r6, r8
 810e9e4:	68bb      	ldr	r3, [r7, #8]
 810e9e6:	42b3      	cmp	r3, r6
 810e9e8:	da41      	bge.n	810ea6e <__gethex+0x26e>
 810e9ea:	4621      	mov	r1, r4
 810e9ec:	4648      	mov	r0, r9
 810e9ee:	f7fd ff5d 	bl	810c8ac <_Bfree>
 810e9f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810e9f4:	2300      	movs	r3, #0
 810e9f6:	6013      	str	r3, [r2, #0]
 810e9f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810e9fc:	e78a      	b.n	810e914 <__gethex+0x114>
 810e9fe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810ea02:	2a2e      	cmp	r2, #46	; 0x2e
 810ea04:	d014      	beq.n	810ea30 <__gethex+0x230>
 810ea06:	2b20      	cmp	r3, #32
 810ea08:	d106      	bne.n	810ea18 <__gethex+0x218>
 810ea0a:	9b01      	ldr	r3, [sp, #4]
 810ea0c:	f843 bb04 	str.w	fp, [r3], #4
 810ea10:	f04f 0b00 	mov.w	fp, #0
 810ea14:	9301      	str	r3, [sp, #4]
 810ea16:	465b      	mov	r3, fp
 810ea18:	7828      	ldrb	r0, [r5, #0]
 810ea1a:	9303      	str	r3, [sp, #12]
 810ea1c:	f7ff feda 	bl	810e7d4 <__hexdig_fun>
 810ea20:	9b03      	ldr	r3, [sp, #12]
 810ea22:	f000 000f 	and.w	r0, r0, #15
 810ea26:	4098      	lsls	r0, r3
 810ea28:	ea4b 0b00 	orr.w	fp, fp, r0
 810ea2c:	3304      	adds	r3, #4
 810ea2e:	e7a1      	b.n	810e974 <__gethex+0x174>
 810ea30:	45a8      	cmp	r8, r5
 810ea32:	d8e8      	bhi.n	810ea06 <__gethex+0x206>
 810ea34:	2201      	movs	r2, #1
 810ea36:	4628      	mov	r0, r5
 810ea38:	9303      	str	r3, [sp, #12]
 810ea3a:	f7ff fe09 	bl	810e650 <strncmp>
 810ea3e:	4926      	ldr	r1, [pc, #152]	; (810ead8 <__gethex+0x2d8>)
 810ea40:	9b03      	ldr	r3, [sp, #12]
 810ea42:	2800      	cmp	r0, #0
 810ea44:	d1df      	bne.n	810ea06 <__gethex+0x206>
 810ea46:	e795      	b.n	810e974 <__gethex+0x174>
 810ea48:	f04f 0b03 	mov.w	fp, #3
 810ea4c:	e7c5      	b.n	810e9da <__gethex+0x1da>
 810ea4e:	da0b      	bge.n	810ea68 <__gethex+0x268>
 810ea50:	eba5 0800 	sub.w	r8, r5, r0
 810ea54:	4621      	mov	r1, r4
 810ea56:	4642      	mov	r2, r8
 810ea58:	4648      	mov	r0, r9
 810ea5a:	f7fe f941 	bl	810cce0 <__lshift>
 810ea5e:	eba6 0608 	sub.w	r6, r6, r8
 810ea62:	4604      	mov	r4, r0
 810ea64:	f100 0a14 	add.w	sl, r0, #20
 810ea68:	f04f 0b00 	mov.w	fp, #0
 810ea6c:	e7ba      	b.n	810e9e4 <__gethex+0x1e4>
 810ea6e:	687b      	ldr	r3, [r7, #4]
 810ea70:	42b3      	cmp	r3, r6
 810ea72:	dd73      	ble.n	810eb5c <__gethex+0x35c>
 810ea74:	1b9e      	subs	r6, r3, r6
 810ea76:	42b5      	cmp	r5, r6
 810ea78:	dc34      	bgt.n	810eae4 <__gethex+0x2e4>
 810ea7a:	68fb      	ldr	r3, [r7, #12]
 810ea7c:	2b02      	cmp	r3, #2
 810ea7e:	d023      	beq.n	810eac8 <__gethex+0x2c8>
 810ea80:	2b03      	cmp	r3, #3
 810ea82:	d025      	beq.n	810ead0 <__gethex+0x2d0>
 810ea84:	2b01      	cmp	r3, #1
 810ea86:	d115      	bne.n	810eab4 <__gethex+0x2b4>
 810ea88:	42b5      	cmp	r5, r6
 810ea8a:	d113      	bne.n	810eab4 <__gethex+0x2b4>
 810ea8c:	2d01      	cmp	r5, #1
 810ea8e:	d10b      	bne.n	810eaa8 <__gethex+0x2a8>
 810ea90:	9a02      	ldr	r2, [sp, #8]
 810ea92:	687b      	ldr	r3, [r7, #4]
 810ea94:	6013      	str	r3, [r2, #0]
 810ea96:	2301      	movs	r3, #1
 810ea98:	6123      	str	r3, [r4, #16]
 810ea9a:	f8ca 3000 	str.w	r3, [sl]
 810ea9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810eaa0:	f04f 0862 	mov.w	r8, #98	; 0x62
 810eaa4:	601c      	str	r4, [r3, #0]
 810eaa6:	e735      	b.n	810e914 <__gethex+0x114>
 810eaa8:	1e69      	subs	r1, r5, #1
 810eaaa:	4620      	mov	r0, r4
 810eaac:	f7fe fb4a 	bl	810d144 <__any_on>
 810eab0:	2800      	cmp	r0, #0
 810eab2:	d1ed      	bne.n	810ea90 <__gethex+0x290>
 810eab4:	4621      	mov	r1, r4
 810eab6:	4648      	mov	r0, r9
 810eab8:	f7fd fef8 	bl	810c8ac <_Bfree>
 810eabc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810eabe:	2300      	movs	r3, #0
 810eac0:	6013      	str	r3, [r2, #0]
 810eac2:	f04f 0850 	mov.w	r8, #80	; 0x50
 810eac6:	e725      	b.n	810e914 <__gethex+0x114>
 810eac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810eaca:	2b00      	cmp	r3, #0
 810eacc:	d1f2      	bne.n	810eab4 <__gethex+0x2b4>
 810eace:	e7df      	b.n	810ea90 <__gethex+0x290>
 810ead0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ead2:	2b00      	cmp	r3, #0
 810ead4:	d1dc      	bne.n	810ea90 <__gethex+0x290>
 810ead6:	e7ed      	b.n	810eab4 <__gethex+0x2b4>
 810ead8:	081ec4dc 	.word	0x081ec4dc
 810eadc:	081ec375 	.word	0x081ec375
 810eae0:	081ec686 	.word	0x081ec686
 810eae4:	f106 38ff 	add.w	r8, r6, #4294967295
 810eae8:	f1bb 0f00 	cmp.w	fp, #0
 810eaec:	d133      	bne.n	810eb56 <__gethex+0x356>
 810eaee:	f1b8 0f00 	cmp.w	r8, #0
 810eaf2:	d004      	beq.n	810eafe <__gethex+0x2fe>
 810eaf4:	4641      	mov	r1, r8
 810eaf6:	4620      	mov	r0, r4
 810eaf8:	f7fe fb24 	bl	810d144 <__any_on>
 810eafc:	4683      	mov	fp, r0
 810eafe:	ea4f 1268 	mov.w	r2, r8, asr #5
 810eb02:	2301      	movs	r3, #1
 810eb04:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810eb08:	f008 081f 	and.w	r8, r8, #31
 810eb0c:	fa03 f308 	lsl.w	r3, r3, r8
 810eb10:	4213      	tst	r3, r2
 810eb12:	4631      	mov	r1, r6
 810eb14:	4620      	mov	r0, r4
 810eb16:	bf18      	it	ne
 810eb18:	f04b 0b02 	orrne.w	fp, fp, #2
 810eb1c:	1bad      	subs	r5, r5, r6
 810eb1e:	f7ff fe07 	bl	810e730 <rshift>
 810eb22:	687e      	ldr	r6, [r7, #4]
 810eb24:	f04f 0802 	mov.w	r8, #2
 810eb28:	f1bb 0f00 	cmp.w	fp, #0
 810eb2c:	d04a      	beq.n	810ebc4 <__gethex+0x3c4>
 810eb2e:	68fb      	ldr	r3, [r7, #12]
 810eb30:	2b02      	cmp	r3, #2
 810eb32:	d016      	beq.n	810eb62 <__gethex+0x362>
 810eb34:	2b03      	cmp	r3, #3
 810eb36:	d018      	beq.n	810eb6a <__gethex+0x36a>
 810eb38:	2b01      	cmp	r3, #1
 810eb3a:	d109      	bne.n	810eb50 <__gethex+0x350>
 810eb3c:	f01b 0f02 	tst.w	fp, #2
 810eb40:	d006      	beq.n	810eb50 <__gethex+0x350>
 810eb42:	f8da 3000 	ldr.w	r3, [sl]
 810eb46:	ea4b 0b03 	orr.w	fp, fp, r3
 810eb4a:	f01b 0f01 	tst.w	fp, #1
 810eb4e:	d10f      	bne.n	810eb70 <__gethex+0x370>
 810eb50:	f048 0810 	orr.w	r8, r8, #16
 810eb54:	e036      	b.n	810ebc4 <__gethex+0x3c4>
 810eb56:	f04f 0b01 	mov.w	fp, #1
 810eb5a:	e7d0      	b.n	810eafe <__gethex+0x2fe>
 810eb5c:	f04f 0801 	mov.w	r8, #1
 810eb60:	e7e2      	b.n	810eb28 <__gethex+0x328>
 810eb62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810eb64:	f1c3 0301 	rsb	r3, r3, #1
 810eb68:	930f      	str	r3, [sp, #60]	; 0x3c
 810eb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810eb6c:	2b00      	cmp	r3, #0
 810eb6e:	d0ef      	beq.n	810eb50 <__gethex+0x350>
 810eb70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810eb74:	f104 0214 	add.w	r2, r4, #20
 810eb78:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810eb7c:	9301      	str	r3, [sp, #4]
 810eb7e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810eb82:	2300      	movs	r3, #0
 810eb84:	4694      	mov	ip, r2
 810eb86:	f852 1b04 	ldr.w	r1, [r2], #4
 810eb8a:	f1b1 3fff 	cmp.w	r1, #4294967295
 810eb8e:	d01e      	beq.n	810ebce <__gethex+0x3ce>
 810eb90:	3101      	adds	r1, #1
 810eb92:	f8cc 1000 	str.w	r1, [ip]
 810eb96:	f1b8 0f02 	cmp.w	r8, #2
 810eb9a:	f104 0214 	add.w	r2, r4, #20
 810eb9e:	d13d      	bne.n	810ec1c <__gethex+0x41c>
 810eba0:	683b      	ldr	r3, [r7, #0]
 810eba2:	3b01      	subs	r3, #1
 810eba4:	42ab      	cmp	r3, r5
 810eba6:	d10b      	bne.n	810ebc0 <__gethex+0x3c0>
 810eba8:	1169      	asrs	r1, r5, #5
 810ebaa:	2301      	movs	r3, #1
 810ebac:	f005 051f 	and.w	r5, r5, #31
 810ebb0:	fa03 f505 	lsl.w	r5, r3, r5
 810ebb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ebb8:	421d      	tst	r5, r3
 810ebba:	bf18      	it	ne
 810ebbc:	f04f 0801 	movne.w	r8, #1
 810ebc0:	f048 0820 	orr.w	r8, r8, #32
 810ebc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ebc6:	601c      	str	r4, [r3, #0]
 810ebc8:	9b02      	ldr	r3, [sp, #8]
 810ebca:	601e      	str	r6, [r3, #0]
 810ebcc:	e6a2      	b.n	810e914 <__gethex+0x114>
 810ebce:	4290      	cmp	r0, r2
 810ebd0:	f842 3c04 	str.w	r3, [r2, #-4]
 810ebd4:	d8d6      	bhi.n	810eb84 <__gethex+0x384>
 810ebd6:	68a2      	ldr	r2, [r4, #8]
 810ebd8:	4593      	cmp	fp, r2
 810ebda:	db17      	blt.n	810ec0c <__gethex+0x40c>
 810ebdc:	6861      	ldr	r1, [r4, #4]
 810ebde:	4648      	mov	r0, r9
 810ebe0:	3101      	adds	r1, #1
 810ebe2:	f7fd fe23 	bl	810c82c <_Balloc>
 810ebe6:	4682      	mov	sl, r0
 810ebe8:	b918      	cbnz	r0, 810ebf2 <__gethex+0x3f2>
 810ebea:	4b1b      	ldr	r3, [pc, #108]	; (810ec58 <__gethex+0x458>)
 810ebec:	4602      	mov	r2, r0
 810ebee:	2184      	movs	r1, #132	; 0x84
 810ebf0:	e6b3      	b.n	810e95a <__gethex+0x15a>
 810ebf2:	6922      	ldr	r2, [r4, #16]
 810ebf4:	3202      	adds	r2, #2
 810ebf6:	f104 010c 	add.w	r1, r4, #12
 810ebfa:	0092      	lsls	r2, r2, #2
 810ebfc:	300c      	adds	r0, #12
 810ebfe:	f7fc ff3a 	bl	810ba76 <memcpy>
 810ec02:	4621      	mov	r1, r4
 810ec04:	4648      	mov	r0, r9
 810ec06:	f7fd fe51 	bl	810c8ac <_Bfree>
 810ec0a:	4654      	mov	r4, sl
 810ec0c:	6922      	ldr	r2, [r4, #16]
 810ec0e:	1c51      	adds	r1, r2, #1
 810ec10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810ec14:	6121      	str	r1, [r4, #16]
 810ec16:	2101      	movs	r1, #1
 810ec18:	6151      	str	r1, [r2, #20]
 810ec1a:	e7bc      	b.n	810eb96 <__gethex+0x396>
 810ec1c:	6921      	ldr	r1, [r4, #16]
 810ec1e:	4559      	cmp	r1, fp
 810ec20:	dd0b      	ble.n	810ec3a <__gethex+0x43a>
 810ec22:	2101      	movs	r1, #1
 810ec24:	4620      	mov	r0, r4
 810ec26:	f7ff fd83 	bl	810e730 <rshift>
 810ec2a:	68bb      	ldr	r3, [r7, #8]
 810ec2c:	3601      	adds	r6, #1
 810ec2e:	42b3      	cmp	r3, r6
 810ec30:	f6ff aedb 	blt.w	810e9ea <__gethex+0x1ea>
 810ec34:	f04f 0801 	mov.w	r8, #1
 810ec38:	e7c2      	b.n	810ebc0 <__gethex+0x3c0>
 810ec3a:	f015 051f 	ands.w	r5, r5, #31
 810ec3e:	d0f9      	beq.n	810ec34 <__gethex+0x434>
 810ec40:	9b01      	ldr	r3, [sp, #4]
 810ec42:	441a      	add	r2, r3
 810ec44:	f1c5 0520 	rsb	r5, r5, #32
 810ec48:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810ec4c:	f7fd fee0 	bl	810ca10 <__hi0bits>
 810ec50:	42a8      	cmp	r0, r5
 810ec52:	dbe6      	blt.n	810ec22 <__gethex+0x422>
 810ec54:	e7ee      	b.n	810ec34 <__gethex+0x434>
 810ec56:	bf00      	nop
 810ec58:	081ec375 	.word	0x081ec375

0810ec5c <L_shift>:
 810ec5c:	f1c2 0208 	rsb	r2, r2, #8
 810ec60:	0092      	lsls	r2, r2, #2
 810ec62:	b570      	push	{r4, r5, r6, lr}
 810ec64:	f1c2 0620 	rsb	r6, r2, #32
 810ec68:	6843      	ldr	r3, [r0, #4]
 810ec6a:	6804      	ldr	r4, [r0, #0]
 810ec6c:	fa03 f506 	lsl.w	r5, r3, r6
 810ec70:	432c      	orrs	r4, r5
 810ec72:	40d3      	lsrs	r3, r2
 810ec74:	6004      	str	r4, [r0, #0]
 810ec76:	f840 3f04 	str.w	r3, [r0, #4]!
 810ec7a:	4288      	cmp	r0, r1
 810ec7c:	d3f4      	bcc.n	810ec68 <L_shift+0xc>
 810ec7e:	bd70      	pop	{r4, r5, r6, pc}

0810ec80 <__match>:
 810ec80:	b530      	push	{r4, r5, lr}
 810ec82:	6803      	ldr	r3, [r0, #0]
 810ec84:	3301      	adds	r3, #1
 810ec86:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ec8a:	b914      	cbnz	r4, 810ec92 <__match+0x12>
 810ec8c:	6003      	str	r3, [r0, #0]
 810ec8e:	2001      	movs	r0, #1
 810ec90:	bd30      	pop	{r4, r5, pc}
 810ec92:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ec96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810ec9a:	2d19      	cmp	r5, #25
 810ec9c:	bf98      	it	ls
 810ec9e:	3220      	addls	r2, #32
 810eca0:	42a2      	cmp	r2, r4
 810eca2:	d0f0      	beq.n	810ec86 <__match+0x6>
 810eca4:	2000      	movs	r0, #0
 810eca6:	e7f3      	b.n	810ec90 <__match+0x10>

0810eca8 <__hexnan>:
 810eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ecac:	680b      	ldr	r3, [r1, #0]
 810ecae:	6801      	ldr	r1, [r0, #0]
 810ecb0:	115e      	asrs	r6, r3, #5
 810ecb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ecb6:	f013 031f 	ands.w	r3, r3, #31
 810ecba:	b087      	sub	sp, #28
 810ecbc:	bf18      	it	ne
 810ecbe:	3604      	addne	r6, #4
 810ecc0:	2500      	movs	r5, #0
 810ecc2:	1f37      	subs	r7, r6, #4
 810ecc4:	4682      	mov	sl, r0
 810ecc6:	4690      	mov	r8, r2
 810ecc8:	9301      	str	r3, [sp, #4]
 810ecca:	f846 5c04 	str.w	r5, [r6, #-4]
 810ecce:	46b9      	mov	r9, r7
 810ecd0:	463c      	mov	r4, r7
 810ecd2:	9502      	str	r5, [sp, #8]
 810ecd4:	46ab      	mov	fp, r5
 810ecd6:	784a      	ldrb	r2, [r1, #1]
 810ecd8:	1c4b      	adds	r3, r1, #1
 810ecda:	9303      	str	r3, [sp, #12]
 810ecdc:	b342      	cbz	r2, 810ed30 <__hexnan+0x88>
 810ecde:	4610      	mov	r0, r2
 810ece0:	9105      	str	r1, [sp, #20]
 810ece2:	9204      	str	r2, [sp, #16]
 810ece4:	f7ff fd76 	bl	810e7d4 <__hexdig_fun>
 810ece8:	2800      	cmp	r0, #0
 810ecea:	d14f      	bne.n	810ed8c <__hexnan+0xe4>
 810ecec:	9a04      	ldr	r2, [sp, #16]
 810ecee:	9905      	ldr	r1, [sp, #20]
 810ecf0:	2a20      	cmp	r2, #32
 810ecf2:	d818      	bhi.n	810ed26 <__hexnan+0x7e>
 810ecf4:	9b02      	ldr	r3, [sp, #8]
 810ecf6:	459b      	cmp	fp, r3
 810ecf8:	dd13      	ble.n	810ed22 <__hexnan+0x7a>
 810ecfa:	454c      	cmp	r4, r9
 810ecfc:	d206      	bcs.n	810ed0c <__hexnan+0x64>
 810ecfe:	2d07      	cmp	r5, #7
 810ed00:	dc04      	bgt.n	810ed0c <__hexnan+0x64>
 810ed02:	462a      	mov	r2, r5
 810ed04:	4649      	mov	r1, r9
 810ed06:	4620      	mov	r0, r4
 810ed08:	f7ff ffa8 	bl	810ec5c <L_shift>
 810ed0c:	4544      	cmp	r4, r8
 810ed0e:	d950      	bls.n	810edb2 <__hexnan+0x10a>
 810ed10:	2300      	movs	r3, #0
 810ed12:	f1a4 0904 	sub.w	r9, r4, #4
 810ed16:	f844 3c04 	str.w	r3, [r4, #-4]
 810ed1a:	f8cd b008 	str.w	fp, [sp, #8]
 810ed1e:	464c      	mov	r4, r9
 810ed20:	461d      	mov	r5, r3
 810ed22:	9903      	ldr	r1, [sp, #12]
 810ed24:	e7d7      	b.n	810ecd6 <__hexnan+0x2e>
 810ed26:	2a29      	cmp	r2, #41	; 0x29
 810ed28:	d155      	bne.n	810edd6 <__hexnan+0x12e>
 810ed2a:	3102      	adds	r1, #2
 810ed2c:	f8ca 1000 	str.w	r1, [sl]
 810ed30:	f1bb 0f00 	cmp.w	fp, #0
 810ed34:	d04f      	beq.n	810edd6 <__hexnan+0x12e>
 810ed36:	454c      	cmp	r4, r9
 810ed38:	d206      	bcs.n	810ed48 <__hexnan+0xa0>
 810ed3a:	2d07      	cmp	r5, #7
 810ed3c:	dc04      	bgt.n	810ed48 <__hexnan+0xa0>
 810ed3e:	462a      	mov	r2, r5
 810ed40:	4649      	mov	r1, r9
 810ed42:	4620      	mov	r0, r4
 810ed44:	f7ff ff8a 	bl	810ec5c <L_shift>
 810ed48:	4544      	cmp	r4, r8
 810ed4a:	d934      	bls.n	810edb6 <__hexnan+0x10e>
 810ed4c:	f1a8 0204 	sub.w	r2, r8, #4
 810ed50:	4623      	mov	r3, r4
 810ed52:	f853 1b04 	ldr.w	r1, [r3], #4
 810ed56:	f842 1f04 	str.w	r1, [r2, #4]!
 810ed5a:	429f      	cmp	r7, r3
 810ed5c:	d2f9      	bcs.n	810ed52 <__hexnan+0xaa>
 810ed5e:	1b3b      	subs	r3, r7, r4
 810ed60:	f023 0303 	bic.w	r3, r3, #3
 810ed64:	3304      	adds	r3, #4
 810ed66:	3e03      	subs	r6, #3
 810ed68:	3401      	adds	r4, #1
 810ed6a:	42a6      	cmp	r6, r4
 810ed6c:	bf38      	it	cc
 810ed6e:	2304      	movcc	r3, #4
 810ed70:	4443      	add	r3, r8
 810ed72:	2200      	movs	r2, #0
 810ed74:	f843 2b04 	str.w	r2, [r3], #4
 810ed78:	429f      	cmp	r7, r3
 810ed7a:	d2fb      	bcs.n	810ed74 <__hexnan+0xcc>
 810ed7c:	683b      	ldr	r3, [r7, #0]
 810ed7e:	b91b      	cbnz	r3, 810ed88 <__hexnan+0xe0>
 810ed80:	4547      	cmp	r7, r8
 810ed82:	d126      	bne.n	810edd2 <__hexnan+0x12a>
 810ed84:	2301      	movs	r3, #1
 810ed86:	603b      	str	r3, [r7, #0]
 810ed88:	2005      	movs	r0, #5
 810ed8a:	e025      	b.n	810edd8 <__hexnan+0x130>
 810ed8c:	3501      	adds	r5, #1
 810ed8e:	2d08      	cmp	r5, #8
 810ed90:	f10b 0b01 	add.w	fp, fp, #1
 810ed94:	dd06      	ble.n	810eda4 <__hexnan+0xfc>
 810ed96:	4544      	cmp	r4, r8
 810ed98:	d9c3      	bls.n	810ed22 <__hexnan+0x7a>
 810ed9a:	2300      	movs	r3, #0
 810ed9c:	f844 3c04 	str.w	r3, [r4, #-4]
 810eda0:	2501      	movs	r5, #1
 810eda2:	3c04      	subs	r4, #4
 810eda4:	6822      	ldr	r2, [r4, #0]
 810eda6:	f000 000f 	and.w	r0, r0, #15
 810edaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810edae:	6020      	str	r0, [r4, #0]
 810edb0:	e7b7      	b.n	810ed22 <__hexnan+0x7a>
 810edb2:	2508      	movs	r5, #8
 810edb4:	e7b5      	b.n	810ed22 <__hexnan+0x7a>
 810edb6:	9b01      	ldr	r3, [sp, #4]
 810edb8:	2b00      	cmp	r3, #0
 810edba:	d0df      	beq.n	810ed7c <__hexnan+0xd4>
 810edbc:	f1c3 0320 	rsb	r3, r3, #32
 810edc0:	f04f 32ff 	mov.w	r2, #4294967295
 810edc4:	40da      	lsrs	r2, r3
 810edc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810edca:	4013      	ands	r3, r2
 810edcc:	f846 3c04 	str.w	r3, [r6, #-4]
 810edd0:	e7d4      	b.n	810ed7c <__hexnan+0xd4>
 810edd2:	3f04      	subs	r7, #4
 810edd4:	e7d2      	b.n	810ed7c <__hexnan+0xd4>
 810edd6:	2004      	movs	r0, #4
 810edd8:	b007      	add	sp, #28
 810edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810edde <__ascii_mbtowc>:
 810edde:	b082      	sub	sp, #8
 810ede0:	b901      	cbnz	r1, 810ede4 <__ascii_mbtowc+0x6>
 810ede2:	a901      	add	r1, sp, #4
 810ede4:	b142      	cbz	r2, 810edf8 <__ascii_mbtowc+0x1a>
 810ede6:	b14b      	cbz	r3, 810edfc <__ascii_mbtowc+0x1e>
 810ede8:	7813      	ldrb	r3, [r2, #0]
 810edea:	600b      	str	r3, [r1, #0]
 810edec:	7812      	ldrb	r2, [r2, #0]
 810edee:	1e10      	subs	r0, r2, #0
 810edf0:	bf18      	it	ne
 810edf2:	2001      	movne	r0, #1
 810edf4:	b002      	add	sp, #8
 810edf6:	4770      	bx	lr
 810edf8:	4610      	mov	r0, r2
 810edfa:	e7fb      	b.n	810edf4 <__ascii_mbtowc+0x16>
 810edfc:	f06f 0001 	mvn.w	r0, #1
 810ee00:	e7f8      	b.n	810edf4 <__ascii_mbtowc+0x16>

0810ee02 <__ascii_wctomb>:
 810ee02:	b149      	cbz	r1, 810ee18 <__ascii_wctomb+0x16>
 810ee04:	2aff      	cmp	r2, #255	; 0xff
 810ee06:	bf85      	ittet	hi
 810ee08:	238a      	movhi	r3, #138	; 0x8a
 810ee0a:	6003      	strhi	r3, [r0, #0]
 810ee0c:	700a      	strbls	r2, [r1, #0]
 810ee0e:	f04f 30ff 	movhi.w	r0, #4294967295
 810ee12:	bf98      	it	ls
 810ee14:	2001      	movls	r0, #1
 810ee16:	4770      	bx	lr
 810ee18:	4608      	mov	r0, r1
 810ee1a:	4770      	bx	lr

0810ee1c <fiprintf>:
 810ee1c:	b40e      	push	{r1, r2, r3}
 810ee1e:	b503      	push	{r0, r1, lr}
 810ee20:	4601      	mov	r1, r0
 810ee22:	ab03      	add	r3, sp, #12
 810ee24:	4805      	ldr	r0, [pc, #20]	; (810ee3c <fiprintf+0x20>)
 810ee26:	f853 2b04 	ldr.w	r2, [r3], #4
 810ee2a:	6800      	ldr	r0, [r0, #0]
 810ee2c:	9301      	str	r3, [sp, #4]
 810ee2e:	f7ff f9cb 	bl	810e1c8 <_vfiprintf_r>
 810ee32:	b002      	add	sp, #8
 810ee34:	f85d eb04 	ldr.w	lr, [sp], #4
 810ee38:	b003      	add	sp, #12
 810ee3a:	4770      	bx	lr
 810ee3c:	100009ec 	.word	0x100009ec

0810ee40 <abort>:
 810ee40:	b508      	push	{r3, lr}
 810ee42:	2006      	movs	r0, #6
 810ee44:	f000 f82c 	bl	810eea0 <raise>
 810ee48:	2001      	movs	r0, #1
 810ee4a:	f001 fbaf 	bl	81105ac <_exit>

0810ee4e <_raise_r>:
 810ee4e:	291f      	cmp	r1, #31
 810ee50:	b538      	push	{r3, r4, r5, lr}
 810ee52:	4604      	mov	r4, r0
 810ee54:	460d      	mov	r5, r1
 810ee56:	d904      	bls.n	810ee62 <_raise_r+0x14>
 810ee58:	2316      	movs	r3, #22
 810ee5a:	6003      	str	r3, [r0, #0]
 810ee5c:	f04f 30ff 	mov.w	r0, #4294967295
 810ee60:	bd38      	pop	{r3, r4, r5, pc}
 810ee62:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810ee64:	b112      	cbz	r2, 810ee6c <_raise_r+0x1e>
 810ee66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ee6a:	b94b      	cbnz	r3, 810ee80 <_raise_r+0x32>
 810ee6c:	4620      	mov	r0, r4
 810ee6e:	f000 f831 	bl	810eed4 <_getpid_r>
 810ee72:	462a      	mov	r2, r5
 810ee74:	4601      	mov	r1, r0
 810ee76:	4620      	mov	r0, r4
 810ee78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ee7c:	f000 b818 	b.w	810eeb0 <_kill_r>
 810ee80:	2b01      	cmp	r3, #1
 810ee82:	d00a      	beq.n	810ee9a <_raise_r+0x4c>
 810ee84:	1c59      	adds	r1, r3, #1
 810ee86:	d103      	bne.n	810ee90 <_raise_r+0x42>
 810ee88:	2316      	movs	r3, #22
 810ee8a:	6003      	str	r3, [r0, #0]
 810ee8c:	2001      	movs	r0, #1
 810ee8e:	e7e7      	b.n	810ee60 <_raise_r+0x12>
 810ee90:	2400      	movs	r4, #0
 810ee92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ee96:	4628      	mov	r0, r5
 810ee98:	4798      	blx	r3
 810ee9a:	2000      	movs	r0, #0
 810ee9c:	e7e0      	b.n	810ee60 <_raise_r+0x12>
	...

0810eea0 <raise>:
 810eea0:	4b02      	ldr	r3, [pc, #8]	; (810eeac <raise+0xc>)
 810eea2:	4601      	mov	r1, r0
 810eea4:	6818      	ldr	r0, [r3, #0]
 810eea6:	f7ff bfd2 	b.w	810ee4e <_raise_r>
 810eeaa:	bf00      	nop
 810eeac:	100009ec 	.word	0x100009ec

0810eeb0 <_kill_r>:
 810eeb0:	b538      	push	{r3, r4, r5, lr}
 810eeb2:	4d07      	ldr	r5, [pc, #28]	; (810eed0 <_kill_r+0x20>)
 810eeb4:	2300      	movs	r3, #0
 810eeb6:	4604      	mov	r4, r0
 810eeb8:	4608      	mov	r0, r1
 810eeba:	4611      	mov	r1, r2
 810eebc:	602b      	str	r3, [r5, #0]
 810eebe:	f001 fb55 	bl	811056c <_kill>
 810eec2:	1c43      	adds	r3, r0, #1
 810eec4:	d102      	bne.n	810eecc <_kill_r+0x1c>
 810eec6:	682b      	ldr	r3, [r5, #0]
 810eec8:	b103      	cbz	r3, 810eecc <_kill_r+0x1c>
 810eeca:	6023      	str	r3, [r4, #0]
 810eecc:	bd38      	pop	{r3, r4, r5, pc}
 810eece:	bf00      	nop
 810eed0:	1001ac74 	.word	0x1001ac74

0810eed4 <_getpid_r>:
 810eed4:	f001 bb3a 	b.w	811054c <_getpid>

0810eed8 <expf>:
 810eed8:	b508      	push	{r3, lr}
 810eeda:	ed2d 8b02 	vpush	{d8}
 810eede:	eef0 8a40 	vmov.f32	s17, s0
 810eee2:	f000 fa3d 	bl	810f360 <__ieee754_expf>
 810eee6:	eeb0 8a40 	vmov.f32	s16, s0
 810eeea:	eeb0 0a68 	vmov.f32	s0, s17
 810eeee:	f000 f91b 	bl	810f128 <finitef>
 810eef2:	b160      	cbz	r0, 810ef0e <expf+0x36>
 810eef4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 810ef34 <expf+0x5c>
 810eef8:	eef4 8ae7 	vcmpe.f32	s17, s15
 810eefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef00:	dd0a      	ble.n	810ef18 <expf+0x40>
 810ef02:	f7fc fd8b 	bl	810ba1c <__errno>
 810ef06:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 810ef38 <expf+0x60>
 810ef0a:	2322      	movs	r3, #34	; 0x22
 810ef0c:	6003      	str	r3, [r0, #0]
 810ef0e:	eeb0 0a48 	vmov.f32	s0, s16
 810ef12:	ecbd 8b02 	vpop	{d8}
 810ef16:	bd08      	pop	{r3, pc}
 810ef18:	eddf 7a08 	vldr	s15, [pc, #32]	; 810ef3c <expf+0x64>
 810ef1c:	eef4 8ae7 	vcmpe.f32	s17, s15
 810ef20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef24:	d5f3      	bpl.n	810ef0e <expf+0x36>
 810ef26:	f7fc fd79 	bl	810ba1c <__errno>
 810ef2a:	2322      	movs	r3, #34	; 0x22
 810ef2c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 810ef40 <expf+0x68>
 810ef30:	6003      	str	r3, [r0, #0]
 810ef32:	e7ec      	b.n	810ef0e <expf+0x36>
 810ef34:	42b17217 	.word	0x42b17217
 810ef38:	7f800000 	.word	0x7f800000
 810ef3c:	c2cff1b5 	.word	0xc2cff1b5
 810ef40:	00000000 	.word	0x00000000

0810ef44 <log10f>:
 810ef44:	b508      	push	{r3, lr}
 810ef46:	ed2d 8b02 	vpush	{d8}
 810ef4a:	eeb0 8a40 	vmov.f32	s16, s0
 810ef4e:	f000 fbc7 	bl	810f6e0 <__ieee754_log10f>
 810ef52:	eeb4 8a48 	vcmp.f32	s16, s16
 810ef56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef5a:	d60f      	bvs.n	810ef7c <log10f+0x38>
 810ef5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810ef60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef64:	d80a      	bhi.n	810ef7c <log10f+0x38>
 810ef66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810ef6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ef6e:	d108      	bne.n	810ef82 <log10f+0x3e>
 810ef70:	f7fc fd54 	bl	810ba1c <__errno>
 810ef74:	2322      	movs	r3, #34	; 0x22
 810ef76:	ed9f 0a08 	vldr	s0, [pc, #32]	; 810ef98 <log10f+0x54>
 810ef7a:	6003      	str	r3, [r0, #0]
 810ef7c:	ecbd 8b02 	vpop	{d8}
 810ef80:	bd08      	pop	{r3, pc}
 810ef82:	f7fc fd4b 	bl	810ba1c <__errno>
 810ef86:	ecbd 8b02 	vpop	{d8}
 810ef8a:	2321      	movs	r3, #33	; 0x21
 810ef8c:	6003      	str	r3, [r0, #0]
 810ef8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810ef92:	4802      	ldr	r0, [pc, #8]	; (810ef9c <log10f+0x58>)
 810ef94:	f7fc bd7e 	b.w	810ba94 <nanf>
 810ef98:	ff800000 	.word	0xff800000
 810ef9c:	081d8da9 	.word	0x081d8da9

0810efa0 <powf>:
 810efa0:	b508      	push	{r3, lr}
 810efa2:	ed2d 8b04 	vpush	{d8-d9}
 810efa6:	eeb0 8a60 	vmov.f32	s16, s1
 810efaa:	eeb0 9a40 	vmov.f32	s18, s0
 810efae:	f000 fbef 	bl	810f790 <__ieee754_powf>
 810efb2:	eeb4 8a48 	vcmp.f32	s16, s16
 810efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efba:	eef0 8a40 	vmov.f32	s17, s0
 810efbe:	d63e      	bvs.n	810f03e <powf+0x9e>
 810efc0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 810efc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efc8:	d112      	bne.n	810eff0 <powf+0x50>
 810efca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810efce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efd2:	d039      	beq.n	810f048 <powf+0xa8>
 810efd4:	eeb0 0a48 	vmov.f32	s0, s16
 810efd8:	f000 f8a6 	bl	810f128 <finitef>
 810efdc:	b378      	cbz	r0, 810f03e <powf+0x9e>
 810efde:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810efe6:	d52a      	bpl.n	810f03e <powf+0x9e>
 810efe8:	f7fc fd18 	bl	810ba1c <__errno>
 810efec:	2322      	movs	r3, #34	; 0x22
 810efee:	e014      	b.n	810f01a <powf+0x7a>
 810eff0:	f000 f89a 	bl	810f128 <finitef>
 810eff4:	b998      	cbnz	r0, 810f01e <powf+0x7e>
 810eff6:	eeb0 0a49 	vmov.f32	s0, s18
 810effa:	f000 f895 	bl	810f128 <finitef>
 810effe:	b170      	cbz	r0, 810f01e <powf+0x7e>
 810f000:	eeb0 0a48 	vmov.f32	s0, s16
 810f004:	f000 f890 	bl	810f128 <finitef>
 810f008:	b148      	cbz	r0, 810f01e <powf+0x7e>
 810f00a:	eef4 8a68 	vcmp.f32	s17, s17
 810f00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f012:	d7e9      	bvc.n	810efe8 <powf+0x48>
 810f014:	f7fc fd02 	bl	810ba1c <__errno>
 810f018:	2321      	movs	r3, #33	; 0x21
 810f01a:	6003      	str	r3, [r0, #0]
 810f01c:	e00f      	b.n	810f03e <powf+0x9e>
 810f01e:	eef5 8a40 	vcmp.f32	s17, #0.0
 810f022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f026:	d10a      	bne.n	810f03e <powf+0x9e>
 810f028:	eeb0 0a49 	vmov.f32	s0, s18
 810f02c:	f000 f87c 	bl	810f128 <finitef>
 810f030:	b128      	cbz	r0, 810f03e <powf+0x9e>
 810f032:	eeb0 0a48 	vmov.f32	s0, s16
 810f036:	f000 f877 	bl	810f128 <finitef>
 810f03a:	2800      	cmp	r0, #0
 810f03c:	d1d4      	bne.n	810efe8 <powf+0x48>
 810f03e:	eeb0 0a68 	vmov.f32	s0, s17
 810f042:	ecbd 8b04 	vpop	{d8-d9}
 810f046:	bd08      	pop	{r3, pc}
 810f048:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 810f04c:	e7f7      	b.n	810f03e <powf+0x9e>
	...

0810f050 <sqrtf>:
 810f050:	b508      	push	{r3, lr}
 810f052:	ed2d 8b02 	vpush	{d8}
 810f056:	eeb0 8a40 	vmov.f32	s16, s0
 810f05a:	f000 f895 	bl	810f188 <__ieee754_sqrtf>
 810f05e:	eeb4 8a48 	vcmp.f32	s16, s16
 810f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f066:	d60c      	bvs.n	810f082 <sqrtf+0x32>
 810f068:	eddf 8a07 	vldr	s17, [pc, #28]	; 810f088 <sqrtf+0x38>
 810f06c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 810f070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f074:	d505      	bpl.n	810f082 <sqrtf+0x32>
 810f076:	f7fc fcd1 	bl	810ba1c <__errno>
 810f07a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 810f07e:	2321      	movs	r3, #33	; 0x21
 810f080:	6003      	str	r3, [r0, #0]
 810f082:	ecbd 8b02 	vpop	{d8}
 810f086:	bd08      	pop	{r3, pc}
 810f088:	00000000 	.word	0x00000000

0810f08c <fabsf>:
 810f08c:	ee10 3a10 	vmov	r3, s0
 810f090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f094:	ee00 3a10 	vmov	s0, r3
 810f098:	4770      	bx	lr
	...

0810f09c <sinf>:
 810f09c:	ee10 3a10 	vmov	r3, s0
 810f0a0:	b507      	push	{r0, r1, r2, lr}
 810f0a2:	4a1f      	ldr	r2, [pc, #124]	; (810f120 <sinf+0x84>)
 810f0a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f0a8:	4293      	cmp	r3, r2
 810f0aa:	dc07      	bgt.n	810f0bc <sinf+0x20>
 810f0ac:	eddf 0a1d 	vldr	s1, [pc, #116]	; 810f124 <sinf+0x88>
 810f0b0:	2000      	movs	r0, #0
 810f0b2:	b003      	add	sp, #12
 810f0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 810f0b8:	f000 b90a 	b.w	810f2d0 <__kernel_sinf>
 810f0bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810f0c0:	db04      	blt.n	810f0cc <sinf+0x30>
 810f0c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 810f0c6:	b003      	add	sp, #12
 810f0c8:	f85d fb04 	ldr.w	pc, [sp], #4
 810f0cc:	4668      	mov	r0, sp
 810f0ce:	f000 fe29 	bl	810fd24 <__ieee754_rem_pio2f>
 810f0d2:	f000 0003 	and.w	r0, r0, #3
 810f0d6:	2801      	cmp	r0, #1
 810f0d8:	d00a      	beq.n	810f0f0 <sinf+0x54>
 810f0da:	2802      	cmp	r0, #2
 810f0dc:	d00f      	beq.n	810f0fe <sinf+0x62>
 810f0de:	b9c0      	cbnz	r0, 810f112 <sinf+0x76>
 810f0e0:	eddd 0a01 	vldr	s1, [sp, #4]
 810f0e4:	ed9d 0a00 	vldr	s0, [sp]
 810f0e8:	2001      	movs	r0, #1
 810f0ea:	f000 f8f1 	bl	810f2d0 <__kernel_sinf>
 810f0ee:	e7ea      	b.n	810f0c6 <sinf+0x2a>
 810f0f0:	eddd 0a01 	vldr	s1, [sp, #4]
 810f0f4:	ed9d 0a00 	vldr	s0, [sp]
 810f0f8:	f000 f88c 	bl	810f214 <__kernel_cosf>
 810f0fc:	e7e3      	b.n	810f0c6 <sinf+0x2a>
 810f0fe:	eddd 0a01 	vldr	s1, [sp, #4]
 810f102:	ed9d 0a00 	vldr	s0, [sp]
 810f106:	2001      	movs	r0, #1
 810f108:	f000 f8e2 	bl	810f2d0 <__kernel_sinf>
 810f10c:	eeb1 0a40 	vneg.f32	s0, s0
 810f110:	e7d9      	b.n	810f0c6 <sinf+0x2a>
 810f112:	eddd 0a01 	vldr	s1, [sp, #4]
 810f116:	ed9d 0a00 	vldr	s0, [sp]
 810f11a:	f000 f87b 	bl	810f214 <__kernel_cosf>
 810f11e:	e7f5      	b.n	810f10c <sinf+0x70>
 810f120:	3f490fd8 	.word	0x3f490fd8
 810f124:	00000000 	.word	0x00000000

0810f128 <finitef>:
 810f128:	b082      	sub	sp, #8
 810f12a:	ed8d 0a01 	vstr	s0, [sp, #4]
 810f12e:	9801      	ldr	r0, [sp, #4]
 810f130:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 810f134:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 810f138:	bfac      	ite	ge
 810f13a:	2000      	movge	r0, #0
 810f13c:	2001      	movlt	r0, #1
 810f13e:	b002      	add	sp, #8
 810f140:	4770      	bx	lr

0810f142 <with_errnof>:
 810f142:	b513      	push	{r0, r1, r4, lr}
 810f144:	4604      	mov	r4, r0
 810f146:	ed8d 0a01 	vstr	s0, [sp, #4]
 810f14a:	f7fc fc67 	bl	810ba1c <__errno>
 810f14e:	ed9d 0a01 	vldr	s0, [sp, #4]
 810f152:	6004      	str	r4, [r0, #0]
 810f154:	b002      	add	sp, #8
 810f156:	bd10      	pop	{r4, pc}

0810f158 <xflowf>:
 810f158:	b130      	cbz	r0, 810f168 <xflowf+0x10>
 810f15a:	eef1 7a40 	vneg.f32	s15, s0
 810f15e:	ee27 0a80 	vmul.f32	s0, s15, s0
 810f162:	2022      	movs	r0, #34	; 0x22
 810f164:	f7ff bfed 	b.w	810f142 <with_errnof>
 810f168:	eef0 7a40 	vmov.f32	s15, s0
 810f16c:	e7f7      	b.n	810f15e <xflowf+0x6>
	...

0810f170 <__math_uflowf>:
 810f170:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810f178 <__math_uflowf+0x8>
 810f174:	f7ff bff0 	b.w	810f158 <xflowf>
 810f178:	10000000 	.word	0x10000000

0810f17c <__math_oflowf>:
 810f17c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810f184 <__math_oflowf+0x8>
 810f180:	f7ff bfea 	b.w	810f158 <xflowf>
 810f184:	70000000 	.word	0x70000000

0810f188 <__ieee754_sqrtf>:
 810f188:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810f18c:	4770      	bx	lr
	...

0810f190 <floorf>:
 810f190:	ee10 3a10 	vmov	r3, s0
 810f194:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810f198:	3a7f      	subs	r2, #127	; 0x7f
 810f19a:	2a16      	cmp	r2, #22
 810f19c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810f1a0:	dc2a      	bgt.n	810f1f8 <floorf+0x68>
 810f1a2:	2a00      	cmp	r2, #0
 810f1a4:	da11      	bge.n	810f1ca <floorf+0x3a>
 810f1a6:	eddf 7a18 	vldr	s15, [pc, #96]	; 810f208 <floorf+0x78>
 810f1aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 810f1ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810f1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f1b6:	dd05      	ble.n	810f1c4 <floorf+0x34>
 810f1b8:	2b00      	cmp	r3, #0
 810f1ba:	da23      	bge.n	810f204 <floorf+0x74>
 810f1bc:	4a13      	ldr	r2, [pc, #76]	; (810f20c <floorf+0x7c>)
 810f1be:	2900      	cmp	r1, #0
 810f1c0:	bf18      	it	ne
 810f1c2:	4613      	movne	r3, r2
 810f1c4:	ee00 3a10 	vmov	s0, r3
 810f1c8:	4770      	bx	lr
 810f1ca:	4911      	ldr	r1, [pc, #68]	; (810f210 <floorf+0x80>)
 810f1cc:	4111      	asrs	r1, r2
 810f1ce:	420b      	tst	r3, r1
 810f1d0:	d0fa      	beq.n	810f1c8 <floorf+0x38>
 810f1d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 810f208 <floorf+0x78>
 810f1d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 810f1da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f1e2:	ddef      	ble.n	810f1c4 <floorf+0x34>
 810f1e4:	2b00      	cmp	r3, #0
 810f1e6:	bfbe      	ittt	lt
 810f1e8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 810f1ec:	fa40 f202 	asrlt.w	r2, r0, r2
 810f1f0:	189b      	addlt	r3, r3, r2
 810f1f2:	ea23 0301 	bic.w	r3, r3, r1
 810f1f6:	e7e5      	b.n	810f1c4 <floorf+0x34>
 810f1f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 810f1fc:	d3e4      	bcc.n	810f1c8 <floorf+0x38>
 810f1fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f202:	4770      	bx	lr
 810f204:	2300      	movs	r3, #0
 810f206:	e7dd      	b.n	810f1c4 <floorf+0x34>
 810f208:	7149f2ca 	.word	0x7149f2ca
 810f20c:	bf800000 	.word	0xbf800000
 810f210:	007fffff 	.word	0x007fffff

0810f214 <__kernel_cosf>:
 810f214:	ee10 3a10 	vmov	r3, s0
 810f218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f21c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 810f220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810f224:	da05      	bge.n	810f232 <__kernel_cosf+0x1e>
 810f226:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 810f22a:	ee17 2a90 	vmov	r2, s15
 810f22e:	2a00      	cmp	r2, #0
 810f230:	d03b      	beq.n	810f2aa <__kernel_cosf+0x96>
 810f232:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f236:	eddf 7a1e 	vldr	s15, [pc, #120]	; 810f2b0 <__kernel_cosf+0x9c>
 810f23a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 810f2b4 <__kernel_cosf+0xa0>
 810f23e:	4a1e      	ldr	r2, [pc, #120]	; (810f2b8 <__kernel_cosf+0xa4>)
 810f240:	eea7 6a27 	vfma.f32	s12, s14, s15
 810f244:	4293      	cmp	r3, r2
 810f246:	eddf 7a1d 	vldr	s15, [pc, #116]	; 810f2bc <__kernel_cosf+0xa8>
 810f24a:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f24e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 810f2c0 <__kernel_cosf+0xac>
 810f252:	eea7 6a87 	vfma.f32	s12, s15, s14
 810f256:	eddf 7a1b 	vldr	s15, [pc, #108]	; 810f2c4 <__kernel_cosf+0xb0>
 810f25a:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f25e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 810f2c8 <__kernel_cosf+0xb4>
 810f262:	eea7 6a87 	vfma.f32	s12, s15, s14
 810f266:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 810f26a:	ee26 6a07 	vmul.f32	s12, s12, s14
 810f26e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810f272:	eee7 0a06 	vfma.f32	s1, s14, s12
 810f276:	ee67 7a27 	vmul.f32	s15, s14, s15
 810f27a:	dc04      	bgt.n	810f286 <__kernel_cosf+0x72>
 810f27c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 810f280:	ee36 0ae7 	vsub.f32	s0, s13, s15
 810f284:	4770      	bx	lr
 810f286:	4a11      	ldr	r2, [pc, #68]	; (810f2cc <__kernel_cosf+0xb8>)
 810f288:	4293      	cmp	r3, r2
 810f28a:	bfda      	itte	le
 810f28c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 810f290:	ee07 3a10 	vmovle	s14, r3
 810f294:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 810f298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f29c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 810f2a0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 810f2a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f2a8:	4770      	bx	lr
 810f2aa:	eeb0 0a66 	vmov.f32	s0, s13
 810f2ae:	4770      	bx	lr
 810f2b0:	ad47d74e 	.word	0xad47d74e
 810f2b4:	310f74f6 	.word	0x310f74f6
 810f2b8:	3e999999 	.word	0x3e999999
 810f2bc:	b493f27c 	.word	0xb493f27c
 810f2c0:	37d00d01 	.word	0x37d00d01
 810f2c4:	bab60b61 	.word	0xbab60b61
 810f2c8:	3d2aaaab 	.word	0x3d2aaaab
 810f2cc:	3f480000 	.word	0x3f480000

0810f2d0 <__kernel_sinf>:
 810f2d0:	ee10 3a10 	vmov	r3, s0
 810f2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810f2d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 810f2dc:	da04      	bge.n	810f2e8 <__kernel_sinf+0x18>
 810f2de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 810f2e2:	ee17 3a90 	vmov	r3, s15
 810f2e6:	b35b      	cbz	r3, 810f340 <__kernel_sinf+0x70>
 810f2e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f2ec:	eddf 7a15 	vldr	s15, [pc, #84]	; 810f344 <__kernel_sinf+0x74>
 810f2f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 810f348 <__kernel_sinf+0x78>
 810f2f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 810f2f8:	eddf 7a14 	vldr	s15, [pc, #80]	; 810f34c <__kernel_sinf+0x7c>
 810f2fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f300:	ed9f 6a13 	vldr	s12, [pc, #76]	; 810f350 <__kernel_sinf+0x80>
 810f304:	eea7 6a87 	vfma.f32	s12, s15, s14
 810f308:	eddf 7a12 	vldr	s15, [pc, #72]	; 810f354 <__kernel_sinf+0x84>
 810f30c:	ee60 6a07 	vmul.f32	s13, s0, s14
 810f310:	eee6 7a07 	vfma.f32	s15, s12, s14
 810f314:	b930      	cbnz	r0, 810f324 <__kernel_sinf+0x54>
 810f316:	ed9f 6a10 	vldr	s12, [pc, #64]	; 810f358 <__kernel_sinf+0x88>
 810f31a:	eea7 6a27 	vfma.f32	s12, s14, s15
 810f31e:	eea6 0a26 	vfma.f32	s0, s12, s13
 810f322:	4770      	bx	lr
 810f324:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 810f328:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 810f32c:	eee0 7a86 	vfma.f32	s15, s1, s12
 810f330:	eed7 0a87 	vfnms.f32	s1, s15, s14
 810f334:	eddf 7a09 	vldr	s15, [pc, #36]	; 810f35c <__kernel_sinf+0x8c>
 810f338:	eee6 0aa7 	vfma.f32	s1, s13, s15
 810f33c:	ee30 0a60 	vsub.f32	s0, s0, s1
 810f340:	4770      	bx	lr
 810f342:	bf00      	nop
 810f344:	2f2ec9d3 	.word	0x2f2ec9d3
 810f348:	b2d72f34 	.word	0xb2d72f34
 810f34c:	3638ef1b 	.word	0x3638ef1b
 810f350:	b9500d01 	.word	0xb9500d01
 810f354:	3c088889 	.word	0x3c088889
 810f358:	be2aaaab 	.word	0xbe2aaaab
 810f35c:	3e2aaaab 	.word	0x3e2aaaab

0810f360 <__ieee754_expf>:
 810f360:	ee10 2a10 	vmov	r2, s0
 810f364:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 810f368:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810f36c:	d902      	bls.n	810f374 <__ieee754_expf+0x14>
 810f36e:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f372:	4770      	bx	lr
 810f374:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 810f378:	d106      	bne.n	810f388 <__ieee754_expf+0x28>
 810f37a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 810f4b4 <__ieee754_expf+0x154>
 810f37e:	2900      	cmp	r1, #0
 810f380:	bf18      	it	ne
 810f382:	eeb0 0a67 	vmovne.f32	s0, s15
 810f386:	4770      	bx	lr
 810f388:	484b      	ldr	r0, [pc, #300]	; (810f4b8 <__ieee754_expf+0x158>)
 810f38a:	4282      	cmp	r2, r0
 810f38c:	dd02      	ble.n	810f394 <__ieee754_expf+0x34>
 810f38e:	2000      	movs	r0, #0
 810f390:	f7ff bef4 	b.w	810f17c <__math_oflowf>
 810f394:	2a00      	cmp	r2, #0
 810f396:	da05      	bge.n	810f3a4 <__ieee754_expf+0x44>
 810f398:	4a48      	ldr	r2, [pc, #288]	; (810f4bc <__ieee754_expf+0x15c>)
 810f39a:	4293      	cmp	r3, r2
 810f39c:	d902      	bls.n	810f3a4 <__ieee754_expf+0x44>
 810f39e:	2000      	movs	r0, #0
 810f3a0:	f7ff bee6 	b.w	810f170 <__math_uflowf>
 810f3a4:	4a46      	ldr	r2, [pc, #280]	; (810f4c0 <__ieee754_expf+0x160>)
 810f3a6:	4293      	cmp	r3, r2
 810f3a8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 810f3ac:	d952      	bls.n	810f454 <__ieee754_expf+0xf4>
 810f3ae:	4a45      	ldr	r2, [pc, #276]	; (810f4c4 <__ieee754_expf+0x164>)
 810f3b0:	4293      	cmp	r3, r2
 810f3b2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 810f3b6:	d834      	bhi.n	810f422 <__ieee754_expf+0xc2>
 810f3b8:	4b43      	ldr	r3, [pc, #268]	; (810f4c8 <__ieee754_expf+0x168>)
 810f3ba:	4413      	add	r3, r2
 810f3bc:	ed93 7a00 	vldr	s14, [r3]
 810f3c0:	4b42      	ldr	r3, [pc, #264]	; (810f4cc <__ieee754_expf+0x16c>)
 810f3c2:	4413      	add	r3, r2
 810f3c4:	ee30 7a47 	vsub.f32	s14, s0, s14
 810f3c8:	f1c1 0201 	rsb	r2, r1, #1
 810f3cc:	edd3 7a00 	vldr	s15, [r3]
 810f3d0:	1a52      	subs	r2, r2, r1
 810f3d2:	ee37 0a67 	vsub.f32	s0, s14, s15
 810f3d6:	ee20 6a00 	vmul.f32	s12, s0, s0
 810f3da:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 810f4d0 <__ieee754_expf+0x170>
 810f3de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810f4d4 <__ieee754_expf+0x174>
 810f3e2:	eee6 6a05 	vfma.f32	s13, s12, s10
 810f3e6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 810f4d8 <__ieee754_expf+0x178>
 810f3ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 810f3ee:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810f4dc <__ieee754_expf+0x17c>
 810f3f2:	eee5 6a06 	vfma.f32	s13, s10, s12
 810f3f6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 810f4e0 <__ieee754_expf+0x180>
 810f3fa:	eea6 5a86 	vfma.f32	s10, s13, s12
 810f3fe:	eef0 6a40 	vmov.f32	s13, s0
 810f402:	eee5 6a46 	vfms.f32	s13, s10, s12
 810f406:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 810f40a:	ee20 5a26 	vmul.f32	s10, s0, s13
 810f40e:	bb92      	cbnz	r2, 810f476 <__ieee754_expf+0x116>
 810f410:	ee76 6ac6 	vsub.f32	s13, s13, s12
 810f414:	eec5 7a26 	vdiv.f32	s15, s10, s13
 810f418:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810f41c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 810f420:	4770      	bx	lr
 810f422:	4b30      	ldr	r3, [pc, #192]	; (810f4e4 <__ieee754_expf+0x184>)
 810f424:	ed9f 7a30 	vldr	s14, [pc, #192]	; 810f4e8 <__ieee754_expf+0x188>
 810f428:	eddf 6a30 	vldr	s13, [pc, #192]	; 810f4ec <__ieee754_expf+0x18c>
 810f42c:	4413      	add	r3, r2
 810f42e:	edd3 7a00 	vldr	s15, [r3]
 810f432:	eee0 7a07 	vfma.f32	s15, s0, s14
 810f436:	eeb0 7a40 	vmov.f32	s14, s0
 810f43a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810f43e:	ee17 2a90 	vmov	r2, s15
 810f442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f446:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810f44a:	eddf 6a29 	vldr	s13, [pc, #164]	; 810f4f0 <__ieee754_expf+0x190>
 810f44e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810f452:	e7be      	b.n	810f3d2 <__ieee754_expf+0x72>
 810f454:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 810f458:	d20b      	bcs.n	810f472 <__ieee754_expf+0x112>
 810f45a:	eddf 6a26 	vldr	s13, [pc, #152]	; 810f4f4 <__ieee754_expf+0x194>
 810f45e:	ee70 6a26 	vadd.f32	s13, s0, s13
 810f462:	eef4 6ae5 	vcmpe.f32	s13, s11
 810f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f46a:	dd02      	ble.n	810f472 <__ieee754_expf+0x112>
 810f46c:	ee30 0a25 	vadd.f32	s0, s0, s11
 810f470:	4770      	bx	lr
 810f472:	2200      	movs	r2, #0
 810f474:	e7af      	b.n	810f3d6 <__ieee754_expf+0x76>
 810f476:	ee36 6a66 	vsub.f32	s12, s12, s13
 810f47a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 810f47e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 810f482:	bfb8      	it	lt
 810f484:	3264      	addlt	r2, #100	; 0x64
 810f486:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810f48a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810f48e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810f492:	ee17 3a90 	vmov	r3, s15
 810f496:	bfab      	itete	ge
 810f498:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 810f49c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 810f4a0:	ee00 3a10 	vmovge	s0, r3
 810f4a4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 810f4f8 <__ieee754_expf+0x198>
 810f4a8:	bfbc      	itt	lt
 810f4aa:	ee00 3a10 	vmovlt	s0, r3
 810f4ae:	ee20 0a27 	vmullt.f32	s0, s0, s15
 810f4b2:	4770      	bx	lr
 810f4b4:	00000000 	.word	0x00000000
 810f4b8:	42b17217 	.word	0x42b17217
 810f4bc:	42cff1b5 	.word	0x42cff1b5
 810f4c0:	3eb17218 	.word	0x3eb17218
 810f4c4:	3f851591 	.word	0x3f851591
 810f4c8:	081ec6f0 	.word	0x081ec6f0
 810f4cc:	081ec6f8 	.word	0x081ec6f8
 810f4d0:	3331bb4c 	.word	0x3331bb4c
 810f4d4:	b5ddea0e 	.word	0xb5ddea0e
 810f4d8:	388ab355 	.word	0x388ab355
 810f4dc:	bb360b61 	.word	0xbb360b61
 810f4e0:	3e2aaaab 	.word	0x3e2aaaab
 810f4e4:	081ec6e8 	.word	0x081ec6e8
 810f4e8:	3fb8aa3b 	.word	0x3fb8aa3b
 810f4ec:	3f317180 	.word	0x3f317180
 810f4f0:	3717f7d1 	.word	0x3717f7d1
 810f4f4:	7149f2ca 	.word	0x7149f2ca
 810f4f8:	0d800000 	.word	0x0d800000

0810f4fc <__ieee754_logf>:
 810f4fc:	ee10 3a10 	vmov	r3, s0
 810f500:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810f504:	d106      	bne.n	810f514 <__ieee754_logf+0x18>
 810f506:	ed9f 7a66 	vldr	s14, [pc, #408]	; 810f6a0 <__ieee754_logf+0x1a4>
 810f50a:	eddf 7a66 	vldr	s15, [pc, #408]	; 810f6a4 <__ieee754_logf+0x1a8>
 810f50e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810f512:	4770      	bx	lr
 810f514:	2b00      	cmp	r3, #0
 810f516:	da02      	bge.n	810f51e <__ieee754_logf+0x22>
 810f518:	ee30 7a40 	vsub.f32	s14, s0, s0
 810f51c:	e7f5      	b.n	810f50a <__ieee754_logf+0xe>
 810f51e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810f522:	db02      	blt.n	810f52a <__ieee754_logf+0x2e>
 810f524:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f528:	4770      	bx	lr
 810f52a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810f52e:	bfb8      	it	lt
 810f530:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 810f6a8 <__ieee754_logf+0x1ac>
 810f534:	485d      	ldr	r0, [pc, #372]	; (810f6ac <__ieee754_logf+0x1b0>)
 810f536:	bfbe      	ittt	lt
 810f538:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810f53c:	f06f 0118 	mvnlt.w	r1, #24
 810f540:	ee17 3a90 	vmovlt	r3, s15
 810f544:	ea4f 52e3 	mov.w	r2, r3, asr #23
 810f548:	f3c3 0316 	ubfx	r3, r3, #0, #23
 810f54c:	4418      	add	r0, r3
 810f54e:	bfa8      	it	ge
 810f550:	2100      	movge	r1, #0
 810f552:	3a7f      	subs	r2, #127	; 0x7f
 810f554:	440a      	add	r2, r1
 810f556:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 810f55a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 810f55e:	4319      	orrs	r1, r3
 810f560:	ee00 1a10 	vmov	s0, r1
 810f564:	4952      	ldr	r1, [pc, #328]	; (810f6b0 <__ieee754_logf+0x1b4>)
 810f566:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 810f56a:	f103 000f 	add.w	r0, r3, #15
 810f56e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f572:	4001      	ands	r1, r0
 810f574:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f578:	bb89      	cbnz	r1, 810f5de <__ieee754_logf+0xe2>
 810f57a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 810f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f582:	d10f      	bne.n	810f5a4 <__ieee754_logf+0xa8>
 810f584:	2a00      	cmp	r2, #0
 810f586:	f000 8087 	beq.w	810f698 <__ieee754_logf+0x19c>
 810f58a:	ee07 2a90 	vmov	s15, r2
 810f58e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 810f6b4 <__ieee754_logf+0x1b8>
 810f592:	ed9f 7a49 	vldr	s14, [pc, #292]	; 810f6b8 <__ieee754_logf+0x1bc>
 810f596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f59a:	ee27 0a80 	vmul.f32	s0, s15, s0
 810f59e:	eea7 0a87 	vfma.f32	s0, s15, s14
 810f5a2:	4770      	bx	lr
 810f5a4:	eddf 6a45 	vldr	s13, [pc, #276]	; 810f6bc <__ieee754_logf+0x1c0>
 810f5a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810f5ac:	eee0 7a66 	vfms.f32	s15, s0, s13
 810f5b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f5b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 810f5b8:	b912      	cbnz	r2, 810f5c0 <__ieee754_logf+0xc4>
 810f5ba:	ee30 0a47 	vsub.f32	s0, s0, s14
 810f5be:	4770      	bx	lr
 810f5c0:	ee07 2a90 	vmov	s15, r2
 810f5c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810f6b4 <__ieee754_logf+0x1b8>
 810f5c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810f5cc:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810f5d0:	ee37 0a40 	vsub.f32	s0, s14, s0
 810f5d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 810f6b8 <__ieee754_logf+0x1bc>
 810f5d8:	ee97 0a87 	vfnms.f32	s0, s15, s14
 810f5dc:	4770      	bx	lr
 810f5de:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 810f5e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 810f5e6:	eddf 5a36 	vldr	s11, [pc, #216]	; 810f6c0 <__ieee754_logf+0x1c4>
 810f5ea:	eddf 4a36 	vldr	s9, [pc, #216]	; 810f6c4 <__ieee754_logf+0x1c8>
 810f5ee:	4936      	ldr	r1, [pc, #216]	; (810f6c8 <__ieee754_logf+0x1cc>)
 810f5f0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 810f5f4:	4419      	add	r1, r3
 810f5f6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 810f5fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 810f5fe:	430b      	orrs	r3, r1
 810f600:	2b00      	cmp	r3, #0
 810f602:	ee07 2a90 	vmov	s15, r2
 810f606:	ee26 5a06 	vmul.f32	s10, s12, s12
 810f60a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810f60e:	ee25 7a05 	vmul.f32	s14, s10, s10
 810f612:	eddf 7a2e 	vldr	s15, [pc, #184]	; 810f6cc <__ieee754_logf+0x1d0>
 810f616:	eee7 7a25 	vfma.f32	s15, s14, s11
 810f61a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 810f6d0 <__ieee754_logf+0x1d4>
 810f61e:	eee7 5a87 	vfma.f32	s11, s15, s14
 810f622:	eddf 7a2c 	vldr	s15, [pc, #176]	; 810f6d4 <__ieee754_logf+0x1d8>
 810f626:	eee7 7a24 	vfma.f32	s15, s14, s9
 810f62a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 810f6d8 <__ieee754_logf+0x1dc>
 810f62e:	eee7 4a87 	vfma.f32	s9, s15, s14
 810f632:	eddf 7a2a 	vldr	s15, [pc, #168]	; 810f6dc <__ieee754_logf+0x1e0>
 810f636:	eee4 7a87 	vfma.f32	s15, s9, s14
 810f63a:	ee67 7a85 	vmul.f32	s15, s15, s10
 810f63e:	eee5 7a87 	vfma.f32	s15, s11, s14
 810f642:	dd1a      	ble.n	810f67a <__ieee754_logf+0x17e>
 810f644:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810f648:	ee20 7a07 	vmul.f32	s14, s0, s14
 810f64c:	ee27 7a00 	vmul.f32	s14, s14, s0
 810f650:	ee77 7a87 	vadd.f32	s15, s15, s14
 810f654:	ee67 7a86 	vmul.f32	s15, s15, s12
 810f658:	b912      	cbnz	r2, 810f660 <__ieee754_logf+0x164>
 810f65a:	ee37 7a67 	vsub.f32	s14, s14, s15
 810f65e:	e7ac      	b.n	810f5ba <__ieee754_logf+0xbe>
 810f660:	ed9f 6a14 	vldr	s12, [pc, #80]	; 810f6b4 <__ieee754_logf+0x1b8>
 810f664:	eee6 7a86 	vfma.f32	s15, s13, s12
 810f668:	ee37 7a67 	vsub.f32	s14, s14, s15
 810f66c:	ee37 0a40 	vsub.f32	s0, s14, s0
 810f670:	eddf 7a11 	vldr	s15, [pc, #68]	; 810f6b8 <__ieee754_logf+0x1bc>
 810f674:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 810f678:	4770      	bx	lr
 810f67a:	ee70 7a67 	vsub.f32	s15, s0, s15
 810f67e:	ee67 7a86 	vmul.f32	s15, s15, s12
 810f682:	b912      	cbnz	r2, 810f68a <__ieee754_logf+0x18e>
 810f684:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f688:	4770      	bx	lr
 810f68a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 810f6b4 <__ieee754_logf+0x1b8>
 810f68e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 810f692:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810f696:	e7eb      	b.n	810f670 <__ieee754_logf+0x174>
 810f698:	ed9f 0a02 	vldr	s0, [pc, #8]	; 810f6a4 <__ieee754_logf+0x1a8>
 810f69c:	4770      	bx	lr
 810f69e:	bf00      	nop
 810f6a0:	cc000000 	.word	0xcc000000
 810f6a4:	00000000 	.word	0x00000000
 810f6a8:	4c000000 	.word	0x4c000000
 810f6ac:	004afb20 	.word	0x004afb20
 810f6b0:	007ffff0 	.word	0x007ffff0
 810f6b4:	3717f7d1 	.word	0x3717f7d1
 810f6b8:	3f317180 	.word	0x3f317180
 810f6bc:	3eaaaaab 	.word	0x3eaaaaab
 810f6c0:	3e1cd04f 	.word	0x3e1cd04f
 810f6c4:	3e178897 	.word	0x3e178897
 810f6c8:	ffcf5c30 	.word	0xffcf5c30
 810f6cc:	3e638e29 	.word	0x3e638e29
 810f6d0:	3ecccccd 	.word	0x3ecccccd
 810f6d4:	3e3a3325 	.word	0x3e3a3325
 810f6d8:	3e924925 	.word	0x3e924925
 810f6dc:	3f2aaaab 	.word	0x3f2aaaab

0810f6e0 <__ieee754_log10f>:
 810f6e0:	b508      	push	{r3, lr}
 810f6e2:	ee10 2a10 	vmov	r2, s0
 810f6e6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 810f6ea:	ed2d 8b02 	vpush	{d8}
 810f6ee:	d108      	bne.n	810f702 <__ieee754_log10f+0x22>
 810f6f0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 810f778 <__ieee754_log10f+0x98>
 810f6f4:	eddf 7a21 	vldr	s15, [pc, #132]	; 810f77c <__ieee754_log10f+0x9c>
 810f6f8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810f6fc:	ecbd 8b02 	vpop	{d8}
 810f700:	bd08      	pop	{r3, pc}
 810f702:	2a00      	cmp	r2, #0
 810f704:	da02      	bge.n	810f70c <__ieee754_log10f+0x2c>
 810f706:	ee30 7a40 	vsub.f32	s14, s0, s0
 810f70a:	e7f3      	b.n	810f6f4 <__ieee754_log10f+0x14>
 810f70c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810f710:	db02      	blt.n	810f718 <__ieee754_log10f+0x38>
 810f712:	ee30 0a00 	vadd.f32	s0, s0, s0
 810f716:	e7f1      	b.n	810f6fc <__ieee754_log10f+0x1c>
 810f718:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 810f71c:	bfbf      	itttt	lt
 810f71e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 810f780 <__ieee754_log10f+0xa0>
 810f722:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810f726:	f06f 0118 	mvnlt.w	r1, #24
 810f72a:	ee17 2a90 	vmovlt	r2, s15
 810f72e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 810f732:	bfa8      	it	ge
 810f734:	2100      	movge	r1, #0
 810f736:	3b7f      	subs	r3, #127	; 0x7f
 810f738:	440b      	add	r3, r1
 810f73a:	0fd9      	lsrs	r1, r3, #31
 810f73c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 810f740:	ee07 3a90 	vmov	s15, r3
 810f744:	f3c2 0216 	ubfx	r2, r2, #0, #23
 810f748:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 810f74c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 810f750:	ee00 3a10 	vmov	s0, r3
 810f754:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810f758:	f7ff fed0 	bl	810f4fc <__ieee754_logf>
 810f75c:	eddf 7a09 	vldr	s15, [pc, #36]	; 810f784 <__ieee754_log10f+0xa4>
 810f760:	ee20 0a27 	vmul.f32	s0, s0, s15
 810f764:	eddf 7a08 	vldr	s15, [pc, #32]	; 810f788 <__ieee754_log10f+0xa8>
 810f768:	eea8 0a27 	vfma.f32	s0, s16, s15
 810f76c:	eddf 7a07 	vldr	s15, [pc, #28]	; 810f78c <__ieee754_log10f+0xac>
 810f770:	eea8 0a27 	vfma.f32	s0, s16, s15
 810f774:	e7c2      	b.n	810f6fc <__ieee754_log10f+0x1c>
 810f776:	bf00      	nop
 810f778:	cc000000 	.word	0xcc000000
 810f77c:	00000000 	.word	0x00000000
 810f780:	4c000000 	.word	0x4c000000
 810f784:	3ede5bd9 	.word	0x3ede5bd9
 810f788:	355427db 	.word	0x355427db
 810f78c:	3e9a2080 	.word	0x3e9a2080

0810f790 <__ieee754_powf>:
 810f790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810f794:	ee10 4a90 	vmov	r4, s1
 810f798:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 810f79c:	ed2d 8b02 	vpush	{d8}
 810f7a0:	ee10 7a10 	vmov	r7, s0
 810f7a4:	eeb0 8a40 	vmov.f32	s16, s0
 810f7a8:	eef0 8a60 	vmov.f32	s17, s1
 810f7ac:	d10c      	bne.n	810f7c8 <__ieee754_powf+0x38>
 810f7ae:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 810f7b2:	007f      	lsls	r7, r7, #1
 810f7b4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 810f7b8:	f240 8292 	bls.w	810fce0 <__ieee754_powf+0x550>
 810f7bc:	ee38 0a28 	vadd.f32	s0, s16, s17
 810f7c0:	ecbd 8b02 	vpop	{d8}
 810f7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810f7c8:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 810f7cc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 810f7d0:	dcf4      	bgt.n	810f7bc <__ieee754_powf+0x2c>
 810f7d2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810f7d6:	dd08      	ble.n	810f7ea <__ieee754_powf+0x5a>
 810f7d8:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 810f7dc:	d1ee      	bne.n	810f7bc <__ieee754_powf+0x2c>
 810f7de:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 810f7e2:	0064      	lsls	r4, r4, #1
 810f7e4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 810f7e8:	e7e6      	b.n	810f7b8 <__ieee754_powf+0x28>
 810f7ea:	2f00      	cmp	r7, #0
 810f7ec:	da20      	bge.n	810f830 <__ieee754_powf+0xa0>
 810f7ee:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 810f7f2:	da2d      	bge.n	810f850 <__ieee754_powf+0xc0>
 810f7f4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810f7f8:	f2c0 827b 	blt.w	810fcf2 <__ieee754_powf+0x562>
 810f7fc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 810f800:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 810f804:	fa48 f603 	asr.w	r6, r8, r3
 810f808:	fa06 f303 	lsl.w	r3, r6, r3
 810f80c:	4543      	cmp	r3, r8
 810f80e:	f040 8270 	bne.w	810fcf2 <__ieee754_powf+0x562>
 810f812:	f006 0601 	and.w	r6, r6, #1
 810f816:	f1c6 0602 	rsb	r6, r6, #2
 810f81a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810f81e:	d11f      	bne.n	810f860 <__ieee754_powf+0xd0>
 810f820:	2c00      	cmp	r4, #0
 810f822:	f280 8263 	bge.w	810fcec <__ieee754_powf+0x55c>
 810f826:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f82a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 810f82e:	e7c7      	b.n	810f7c0 <__ieee754_powf+0x30>
 810f830:	2600      	movs	r6, #0
 810f832:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810f836:	d1f0      	bne.n	810f81a <__ieee754_powf+0x8a>
 810f838:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 810f83c:	f000 8250 	beq.w	810fce0 <__ieee754_powf+0x550>
 810f840:	dd08      	ble.n	810f854 <__ieee754_powf+0xc4>
 810f842:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 810fb48 <__ieee754_powf+0x3b8>
 810f846:	2c00      	cmp	r4, #0
 810f848:	bfa8      	it	ge
 810f84a:	eeb0 0a68 	vmovge.f32	s0, s17
 810f84e:	e7b7      	b.n	810f7c0 <__ieee754_powf+0x30>
 810f850:	2602      	movs	r6, #2
 810f852:	e7ee      	b.n	810f832 <__ieee754_powf+0xa2>
 810f854:	2c00      	cmp	r4, #0
 810f856:	f280 8246 	bge.w	810fce6 <__ieee754_powf+0x556>
 810f85a:	eeb1 0a68 	vneg.f32	s0, s17
 810f85e:	e7af      	b.n	810f7c0 <__ieee754_powf+0x30>
 810f860:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 810f864:	d102      	bne.n	810f86c <__ieee754_powf+0xdc>
 810f866:	ee28 0a08 	vmul.f32	s0, s16, s16
 810f86a:	e7a9      	b.n	810f7c0 <__ieee754_powf+0x30>
 810f86c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 810f870:	eeb0 0a48 	vmov.f32	s0, s16
 810f874:	d107      	bne.n	810f886 <__ieee754_powf+0xf6>
 810f876:	2f00      	cmp	r7, #0
 810f878:	db05      	blt.n	810f886 <__ieee754_powf+0xf6>
 810f87a:	ecbd 8b02 	vpop	{d8}
 810f87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f882:	f7ff bc81 	b.w	810f188 <__ieee754_sqrtf>
 810f886:	f7ff fc01 	bl	810f08c <fabsf>
 810f88a:	b125      	cbz	r5, 810f896 <__ieee754_powf+0x106>
 810f88c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 810f890:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 810f894:	d115      	bne.n	810f8c2 <__ieee754_powf+0x132>
 810f896:	2c00      	cmp	r4, #0
 810f898:	bfbc      	itt	lt
 810f89a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 810f89e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 810f8a2:	2f00      	cmp	r7, #0
 810f8a4:	da8c      	bge.n	810f7c0 <__ieee754_powf+0x30>
 810f8a6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 810f8aa:	4335      	orrs	r5, r6
 810f8ac:	d104      	bne.n	810f8b8 <__ieee754_powf+0x128>
 810f8ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 810f8b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 810f8b6:	e783      	b.n	810f7c0 <__ieee754_powf+0x30>
 810f8b8:	2e01      	cmp	r6, #1
 810f8ba:	d181      	bne.n	810f7c0 <__ieee754_powf+0x30>
 810f8bc:	eeb1 0a40 	vneg.f32	s0, s0
 810f8c0:	e77e      	b.n	810f7c0 <__ieee754_powf+0x30>
 810f8c2:	0ff8      	lsrs	r0, r7, #31
 810f8c4:	3801      	subs	r0, #1
 810f8c6:	ea56 0300 	orrs.w	r3, r6, r0
 810f8ca:	d104      	bne.n	810f8d6 <__ieee754_powf+0x146>
 810f8cc:	ee38 8a48 	vsub.f32	s16, s16, s16
 810f8d0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 810f8d4:	e774      	b.n	810f7c0 <__ieee754_powf+0x30>
 810f8d6:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 810f8da:	dd73      	ble.n	810f9c4 <__ieee754_powf+0x234>
 810f8dc:	4b9b      	ldr	r3, [pc, #620]	; (810fb4c <__ieee754_powf+0x3bc>)
 810f8de:	429d      	cmp	r5, r3
 810f8e0:	dc08      	bgt.n	810f8f4 <__ieee754_powf+0x164>
 810f8e2:	2c00      	cmp	r4, #0
 810f8e4:	da0b      	bge.n	810f8fe <__ieee754_powf+0x16e>
 810f8e6:	2000      	movs	r0, #0
 810f8e8:	ecbd 8b02 	vpop	{d8}
 810f8ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f8f0:	f7ff bc44 	b.w	810f17c <__math_oflowf>
 810f8f4:	4b96      	ldr	r3, [pc, #600]	; (810fb50 <__ieee754_powf+0x3c0>)
 810f8f6:	429d      	cmp	r5, r3
 810f8f8:	dd08      	ble.n	810f90c <__ieee754_powf+0x17c>
 810f8fa:	2c00      	cmp	r4, #0
 810f8fc:	dcf3      	bgt.n	810f8e6 <__ieee754_powf+0x156>
 810f8fe:	2000      	movs	r0, #0
 810f900:	ecbd 8b02 	vpop	{d8}
 810f904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810f908:	f7ff bc32 	b.w	810f170 <__math_uflowf>
 810f90c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810f910:	ee30 0a67 	vsub.f32	s0, s0, s15
 810f914:	eddf 6a8f 	vldr	s13, [pc, #572]	; 810fb54 <__ieee754_powf+0x3c4>
 810f918:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 810f91c:	eee0 6a67 	vfms.f32	s13, s0, s15
 810f920:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810f924:	eee6 7ac0 	vfms.f32	s15, s13, s0
 810f928:	ee20 7a00 	vmul.f32	s14, s0, s0
 810f92c:	ee27 7a27 	vmul.f32	s14, s14, s15
 810f930:	eddf 7a89 	vldr	s15, [pc, #548]	; 810fb58 <__ieee754_powf+0x3c8>
 810f934:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 810f938:	ed9f 7a88 	vldr	s14, [pc, #544]	; 810fb5c <__ieee754_powf+0x3cc>
 810f93c:	eee0 7a07 	vfma.f32	s15, s0, s14
 810f940:	ed9f 7a87 	vldr	s14, [pc, #540]	; 810fb60 <__ieee754_powf+0x3d0>
 810f944:	eef0 6a67 	vmov.f32	s13, s15
 810f948:	eee0 6a07 	vfma.f32	s13, s0, s14
 810f94c:	ee16 3a90 	vmov	r3, s13
 810f950:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810f954:	f023 030f 	bic.w	r3, r3, #15
 810f958:	ee06 3a90 	vmov	s13, r3
 810f95c:	eee0 6a47 	vfms.f32	s13, s0, s14
 810f960:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810f964:	3e01      	subs	r6, #1
 810f966:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 810f96a:	4306      	orrs	r6, r0
 810f96c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 810f970:	f024 040f 	bic.w	r4, r4, #15
 810f974:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 810f978:	bf08      	it	eq
 810f97a:	eeb0 8a47 	vmoveq.f32	s16, s14
 810f97e:	ee07 4a10 	vmov	s14, r4
 810f982:	ee67 0aa8 	vmul.f32	s1, s15, s17
 810f986:	ee38 7ac7 	vsub.f32	s14, s17, s14
 810f98a:	ee07 3a90 	vmov	s15, r3
 810f98e:	eee7 0a27 	vfma.f32	s1, s14, s15
 810f992:	ee07 4a10 	vmov	s14, r4
 810f996:	ee67 7a87 	vmul.f32	s15, s15, s14
 810f99a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 810f99e:	ee17 1a10 	vmov	r1, s14
 810f9a2:	2900      	cmp	r1, #0
 810f9a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810f9a8:	f340 817c 	ble.w	810fca4 <__ieee754_powf+0x514>
 810f9ac:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 810f9b0:	f340 80f8 	ble.w	810fba4 <__ieee754_powf+0x414>
 810f9b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810f9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810f9bc:	bf4c      	ite	mi
 810f9be:	2001      	movmi	r0, #1
 810f9c0:	2000      	movpl	r0, #0
 810f9c2:	e791      	b.n	810f8e8 <__ieee754_powf+0x158>
 810f9c4:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 810f9c8:	bf01      	itttt	eq
 810f9ca:	eddf 7a66 	vldreq	s15, [pc, #408]	; 810fb64 <__ieee754_powf+0x3d4>
 810f9ce:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 810f9d2:	f06f 0317 	mvneq.w	r3, #23
 810f9d6:	ee17 5a90 	vmoveq	r5, s15
 810f9da:	ea4f 52e5 	mov.w	r2, r5, asr #23
 810f9de:	bf18      	it	ne
 810f9e0:	2300      	movne	r3, #0
 810f9e2:	3a7f      	subs	r2, #127	; 0x7f
 810f9e4:	441a      	add	r2, r3
 810f9e6:	4b60      	ldr	r3, [pc, #384]	; (810fb68 <__ieee754_powf+0x3d8>)
 810f9e8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 810f9ec:	429d      	cmp	r5, r3
 810f9ee:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 810f9f2:	dd06      	ble.n	810fa02 <__ieee754_powf+0x272>
 810f9f4:	4b5d      	ldr	r3, [pc, #372]	; (810fb6c <__ieee754_powf+0x3dc>)
 810f9f6:	429d      	cmp	r5, r3
 810f9f8:	f340 80a4 	ble.w	810fb44 <__ieee754_powf+0x3b4>
 810f9fc:	3201      	adds	r2, #1
 810f9fe:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 810fa02:	2500      	movs	r5, #0
 810fa04:	4b5a      	ldr	r3, [pc, #360]	; (810fb70 <__ieee754_powf+0x3e0>)
 810fa06:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 810fa0a:	ee07 1a10 	vmov	s14, r1
 810fa0e:	edd3 5a00 	vldr	s11, [r3]
 810fa12:	4b58      	ldr	r3, [pc, #352]	; (810fb74 <__ieee754_powf+0x3e4>)
 810fa14:	ee75 7a87 	vadd.f32	s15, s11, s14
 810fa18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810fa1c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 810fa20:	1049      	asrs	r1, r1, #1
 810fa22:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 810fa26:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 810fa2a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 810fa2e:	ee37 6a65 	vsub.f32	s12, s14, s11
 810fa32:	ee07 1a90 	vmov	s15, r1
 810fa36:	ee26 5a24 	vmul.f32	s10, s12, s9
 810fa3a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 810fa3e:	ee15 7a10 	vmov	r7, s10
 810fa42:	401f      	ands	r7, r3
 810fa44:	ee06 7a90 	vmov	s13, r7
 810fa48:	eea6 6ae7 	vfms.f32	s12, s13, s15
 810fa4c:	ee37 7a65 	vsub.f32	s14, s14, s11
 810fa50:	ee65 7a05 	vmul.f32	s15, s10, s10
 810fa54:	eea6 6ac7 	vfms.f32	s12, s13, s14
 810fa58:	eddf 5a47 	vldr	s11, [pc, #284]	; 810fb78 <__ieee754_powf+0x3e8>
 810fa5c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 810fb7c <__ieee754_powf+0x3ec>
 810fa60:	eee7 5a87 	vfma.f32	s11, s15, s14
 810fa64:	ed9f 7a46 	vldr	s14, [pc, #280]	; 810fb80 <__ieee754_powf+0x3f0>
 810fa68:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810fa6c:	eddf 5a39 	vldr	s11, [pc, #228]	; 810fb54 <__ieee754_powf+0x3c4>
 810fa70:	eee7 5a27 	vfma.f32	s11, s14, s15
 810fa74:	ed9f 7a43 	vldr	s14, [pc, #268]	; 810fb84 <__ieee754_powf+0x3f4>
 810fa78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810fa7c:	eddf 5a42 	vldr	s11, [pc, #264]	; 810fb88 <__ieee754_powf+0x3f8>
 810fa80:	ee26 6a24 	vmul.f32	s12, s12, s9
 810fa84:	eee7 5a27 	vfma.f32	s11, s14, s15
 810fa88:	ee35 7a26 	vadd.f32	s14, s10, s13
 810fa8c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 810fa90:	ee27 7a06 	vmul.f32	s14, s14, s12
 810fa94:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 810fa98:	eea4 7aa5 	vfma.f32	s14, s9, s11
 810fa9c:	eef0 5a67 	vmov.f32	s11, s15
 810faa0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 810faa4:	ee75 5a87 	vadd.f32	s11, s11, s14
 810faa8:	ee15 1a90 	vmov	r1, s11
 810faac:	4019      	ands	r1, r3
 810faae:	ee05 1a90 	vmov	s11, r1
 810fab2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810fab6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 810faba:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fabe:	ee67 7a85 	vmul.f32	s15, s15, s10
 810fac2:	eee6 7a25 	vfma.f32	s15, s12, s11
 810fac6:	eeb0 6a67 	vmov.f32	s12, s15
 810faca:	eea6 6aa5 	vfma.f32	s12, s13, s11
 810face:	ee16 1a10 	vmov	r1, s12
 810fad2:	4019      	ands	r1, r3
 810fad4:	ee07 1a10 	vmov	s14, r1
 810fad8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 810fadc:	ee06 1a10 	vmov	s12, r1
 810fae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fae4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810fb8c <__ieee754_powf+0x3fc>
 810fae8:	4929      	ldr	r1, [pc, #164]	; (810fb90 <__ieee754_powf+0x400>)
 810faea:	eddf 5a2a 	vldr	s11, [pc, #168]	; 810fb94 <__ieee754_powf+0x404>
 810faee:	ee67 7a87 	vmul.f32	s15, s15, s14
 810faf2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810fb98 <__ieee754_powf+0x408>
 810faf6:	eee6 7a07 	vfma.f32	s15, s12, s14
 810fafa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 810fafe:	ed91 7a00 	vldr	s14, [r1]
 810fb02:	ee77 7a87 	vadd.f32	s15, s15, s14
 810fb06:	ee07 2a10 	vmov	s14, r2
 810fb0a:	eef0 6a67 	vmov.f32	s13, s15
 810fb0e:	4a23      	ldr	r2, [pc, #140]	; (810fb9c <__ieee754_powf+0x40c>)
 810fb10:	eee6 6a25 	vfma.f32	s13, s12, s11
 810fb14:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 810fb18:	ed92 5a00 	vldr	s10, [r2]
 810fb1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810fb20:	ee76 6a85 	vadd.f32	s13, s13, s10
 810fb24:	ee76 6a87 	vadd.f32	s13, s13, s14
 810fb28:	ee16 2a90 	vmov	r2, s13
 810fb2c:	4013      	ands	r3, r2
 810fb2e:	ee06 3a90 	vmov	s13, r3
 810fb32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 810fb36:	ee37 7a45 	vsub.f32	s14, s14, s10
 810fb3a:	eea6 7a65 	vfms.f32	s14, s12, s11
 810fb3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fb42:	e70f      	b.n	810f964 <__ieee754_powf+0x1d4>
 810fb44:	2501      	movs	r5, #1
 810fb46:	e75d      	b.n	810fa04 <__ieee754_powf+0x274>
 810fb48:	00000000 	.word	0x00000000
 810fb4c:	3f7ffff3 	.word	0x3f7ffff3
 810fb50:	3f800007 	.word	0x3f800007
 810fb54:	3eaaaaab 	.word	0x3eaaaaab
 810fb58:	3fb8aa3b 	.word	0x3fb8aa3b
 810fb5c:	36eca570 	.word	0x36eca570
 810fb60:	3fb8aa00 	.word	0x3fb8aa00
 810fb64:	4b800000 	.word	0x4b800000
 810fb68:	001cc471 	.word	0x001cc471
 810fb6c:	005db3d6 	.word	0x005db3d6
 810fb70:	081ec700 	.word	0x081ec700
 810fb74:	fffff000 	.word	0xfffff000
 810fb78:	3e6c3255 	.word	0x3e6c3255
 810fb7c:	3e53f142 	.word	0x3e53f142
 810fb80:	3e8ba305 	.word	0x3e8ba305
 810fb84:	3edb6db7 	.word	0x3edb6db7
 810fb88:	3f19999a 	.word	0x3f19999a
 810fb8c:	3f76384f 	.word	0x3f76384f
 810fb90:	081ec710 	.word	0x081ec710
 810fb94:	3f763800 	.word	0x3f763800
 810fb98:	369dc3a0 	.word	0x369dc3a0
 810fb9c:	081ec708 	.word	0x081ec708
 810fba0:	3338aa3c 	.word	0x3338aa3c
 810fba4:	f040 8093 	bne.w	810fcce <__ieee754_powf+0x53e>
 810fba8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 810fba0 <__ieee754_powf+0x410>
 810fbac:	ee37 7a67 	vsub.f32	s14, s14, s15
 810fbb0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 810fbb4:	eef4 6ac7 	vcmpe.f32	s13, s14
 810fbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fbbc:	f73f aefa 	bgt.w	810f9b4 <__ieee754_powf+0x224>
 810fbc0:	15db      	asrs	r3, r3, #23
 810fbc2:	3b7e      	subs	r3, #126	; 0x7e
 810fbc4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 810fbc8:	4118      	asrs	r0, r3
 810fbca:	4408      	add	r0, r1
 810fbcc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 810fbd0:	4a49      	ldr	r2, [pc, #292]	; (810fcf8 <__ieee754_powf+0x568>)
 810fbd2:	3b7f      	subs	r3, #127	; 0x7f
 810fbd4:	411a      	asrs	r2, r3
 810fbd6:	4002      	ands	r2, r0
 810fbd8:	ee07 2a10 	vmov	s14, r2
 810fbdc:	f3c0 0016 	ubfx	r0, r0, #0, #23
 810fbe0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 810fbe4:	f1c3 0317 	rsb	r3, r3, #23
 810fbe8:	4118      	asrs	r0, r3
 810fbea:	2900      	cmp	r1, #0
 810fbec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fbf0:	bfb8      	it	lt
 810fbf2:	4240      	neglt	r0, r0
 810fbf4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 810fbf8:	eddf 6a40 	vldr	s13, [pc, #256]	; 810fcfc <__ieee754_powf+0x56c>
 810fbfc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 810fd00 <__ieee754_powf+0x570>
 810fc00:	ee17 3a10 	vmov	r3, s14
 810fc04:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810fc08:	f023 030f 	bic.w	r3, r3, #15
 810fc0c:	ee07 3a10 	vmov	s14, r3
 810fc10:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fc14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810fc18:	ee70 0ae7 	vsub.f32	s1, s1, s15
 810fc1c:	eddf 7a39 	vldr	s15, [pc, #228]	; 810fd04 <__ieee754_powf+0x574>
 810fc20:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fc24:	eee0 7aa6 	vfma.f32	s15, s1, s13
 810fc28:	eef0 6a67 	vmov.f32	s13, s15
 810fc2c:	eee7 6a06 	vfma.f32	s13, s14, s12
 810fc30:	eef0 5a66 	vmov.f32	s11, s13
 810fc34:	eee7 5a46 	vfms.f32	s11, s14, s12
 810fc38:	ee26 7aa6 	vmul.f32	s14, s13, s13
 810fc3c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 810fc40:	ed9f 6a31 	vldr	s12, [pc, #196]	; 810fd08 <__ieee754_powf+0x578>
 810fc44:	eddf 5a31 	vldr	s11, [pc, #196]	; 810fd0c <__ieee754_powf+0x57c>
 810fc48:	eea7 6a25 	vfma.f32	s12, s14, s11
 810fc4c:	eddf 5a30 	vldr	s11, [pc, #192]	; 810fd10 <__ieee754_powf+0x580>
 810fc50:	eee6 5a07 	vfma.f32	s11, s12, s14
 810fc54:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 810fd14 <__ieee754_powf+0x584>
 810fc58:	eea5 6a87 	vfma.f32	s12, s11, s14
 810fc5c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810fd18 <__ieee754_powf+0x588>
 810fc60:	eee6 5a07 	vfma.f32	s11, s12, s14
 810fc64:	eeb0 6a66 	vmov.f32	s12, s13
 810fc68:	eea5 6ac7 	vfms.f32	s12, s11, s14
 810fc6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 810fc70:	ee66 5a86 	vmul.f32	s11, s13, s12
 810fc74:	ee36 6a47 	vsub.f32	s12, s12, s14
 810fc78:	eee6 7aa7 	vfma.f32	s15, s13, s15
 810fc7c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 810fc80:	ee77 7a67 	vsub.f32	s15, s14, s15
 810fc84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810fc88:	ee30 0a67 	vsub.f32	s0, s0, s15
 810fc8c:	ee10 3a10 	vmov	r3, s0
 810fc90:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 810fc94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810fc98:	da1f      	bge.n	810fcda <__ieee754_powf+0x54a>
 810fc9a:	f000 f96f 	bl	810ff7c <scalbnf>
 810fc9e:	ee20 0a08 	vmul.f32	s0, s0, s16
 810fca2:	e58d      	b.n	810f7c0 <__ieee754_powf+0x30>
 810fca4:	4a1d      	ldr	r2, [pc, #116]	; (810fd1c <__ieee754_powf+0x58c>)
 810fca6:	4293      	cmp	r3, r2
 810fca8:	dd07      	ble.n	810fcba <__ieee754_powf+0x52a>
 810fcaa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810fcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fcb2:	bf4c      	ite	mi
 810fcb4:	2001      	movmi	r0, #1
 810fcb6:	2000      	movpl	r0, #0
 810fcb8:	e622      	b.n	810f900 <__ieee754_powf+0x170>
 810fcba:	d108      	bne.n	810fcce <__ieee754_powf+0x53e>
 810fcbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 810fcc0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 810fcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fcc8:	f6ff af7a 	blt.w	810fbc0 <__ieee754_powf+0x430>
 810fccc:	e7ed      	b.n	810fcaa <__ieee754_powf+0x51a>
 810fcce:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 810fcd2:	f73f af75 	bgt.w	810fbc0 <__ieee754_powf+0x430>
 810fcd6:	2000      	movs	r0, #0
 810fcd8:	e78c      	b.n	810fbf4 <__ieee754_powf+0x464>
 810fcda:	ee00 3a10 	vmov	s0, r3
 810fcde:	e7de      	b.n	810fc9e <__ieee754_powf+0x50e>
 810fce0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810fce4:	e56c      	b.n	810f7c0 <__ieee754_powf+0x30>
 810fce6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 810fd20 <__ieee754_powf+0x590>
 810fcea:	e569      	b.n	810f7c0 <__ieee754_powf+0x30>
 810fcec:	eeb0 0a48 	vmov.f32	s0, s16
 810fcf0:	e566      	b.n	810f7c0 <__ieee754_powf+0x30>
 810fcf2:	2600      	movs	r6, #0
 810fcf4:	e591      	b.n	810f81a <__ieee754_powf+0x8a>
 810fcf6:	bf00      	nop
 810fcf8:	ff800000 	.word	0xff800000
 810fcfc:	3f317218 	.word	0x3f317218
 810fd00:	3f317200 	.word	0x3f317200
 810fd04:	35bfbe8c 	.word	0x35bfbe8c
 810fd08:	b5ddea0e 	.word	0xb5ddea0e
 810fd0c:	3331bb4c 	.word	0x3331bb4c
 810fd10:	388ab355 	.word	0x388ab355
 810fd14:	bb360b61 	.word	0xbb360b61
 810fd18:	3e2aaaab 	.word	0x3e2aaaab
 810fd1c:	43160000 	.word	0x43160000
 810fd20:	00000000 	.word	0x00000000

0810fd24 <__ieee754_rem_pio2f>:
 810fd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 810fd26:	ee10 6a10 	vmov	r6, s0
 810fd2a:	4b86      	ldr	r3, [pc, #536]	; (810ff44 <__ieee754_rem_pio2f+0x220>)
 810fd2c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 810fd30:	429d      	cmp	r5, r3
 810fd32:	b087      	sub	sp, #28
 810fd34:	4604      	mov	r4, r0
 810fd36:	dc05      	bgt.n	810fd44 <__ieee754_rem_pio2f+0x20>
 810fd38:	2300      	movs	r3, #0
 810fd3a:	ed80 0a00 	vstr	s0, [r0]
 810fd3e:	6043      	str	r3, [r0, #4]
 810fd40:	2000      	movs	r0, #0
 810fd42:	e020      	b.n	810fd86 <__ieee754_rem_pio2f+0x62>
 810fd44:	4b80      	ldr	r3, [pc, #512]	; (810ff48 <__ieee754_rem_pio2f+0x224>)
 810fd46:	429d      	cmp	r5, r3
 810fd48:	dc38      	bgt.n	810fdbc <__ieee754_rem_pio2f+0x98>
 810fd4a:	2e00      	cmp	r6, #0
 810fd4c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 810ff4c <__ieee754_rem_pio2f+0x228>
 810fd50:	4b7f      	ldr	r3, [pc, #508]	; (810ff50 <__ieee754_rem_pio2f+0x22c>)
 810fd52:	f025 050f 	bic.w	r5, r5, #15
 810fd56:	dd18      	ble.n	810fd8a <__ieee754_rem_pio2f+0x66>
 810fd58:	429d      	cmp	r5, r3
 810fd5a:	ee70 7a47 	vsub.f32	s15, s0, s14
 810fd5e:	bf09      	itett	eq
 810fd60:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 810ff54 <__ieee754_rem_pio2f+0x230>
 810fd64:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 810ff58 <__ieee754_rem_pio2f+0x234>
 810fd68:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 810fd6c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 810ff5c <__ieee754_rem_pio2f+0x238>
 810fd70:	ee77 6ac7 	vsub.f32	s13, s15, s14
 810fd74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810fd78:	edc0 6a00 	vstr	s13, [r0]
 810fd7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fd80:	edc0 7a01 	vstr	s15, [r0, #4]
 810fd84:	2001      	movs	r0, #1
 810fd86:	b007      	add	sp, #28
 810fd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810fd8a:	429d      	cmp	r5, r3
 810fd8c:	ee70 7a07 	vadd.f32	s15, s0, s14
 810fd90:	bf09      	itett	eq
 810fd92:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 810ff54 <__ieee754_rem_pio2f+0x230>
 810fd96:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 810ff58 <__ieee754_rem_pio2f+0x234>
 810fd9a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 810fd9e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 810ff5c <__ieee754_rem_pio2f+0x238>
 810fda2:	ee77 6a87 	vadd.f32	s13, s15, s14
 810fda6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810fdaa:	edc0 6a00 	vstr	s13, [r0]
 810fdae:	ee77 7a87 	vadd.f32	s15, s15, s14
 810fdb2:	edc0 7a01 	vstr	s15, [r0, #4]
 810fdb6:	f04f 30ff 	mov.w	r0, #4294967295
 810fdba:	e7e4      	b.n	810fd86 <__ieee754_rem_pio2f+0x62>
 810fdbc:	4b68      	ldr	r3, [pc, #416]	; (810ff60 <__ieee754_rem_pio2f+0x23c>)
 810fdbe:	429d      	cmp	r5, r3
 810fdc0:	dc71      	bgt.n	810fea6 <__ieee754_rem_pio2f+0x182>
 810fdc2:	f7ff f963 	bl	810f08c <fabsf>
 810fdc6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 810ff64 <__ieee754_rem_pio2f+0x240>
 810fdca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810fdce:	eee0 7a07 	vfma.f32	s15, s0, s14
 810fdd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810fdd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810fdda:	ee17 0a90 	vmov	r0, s15
 810fdde:	eddf 7a5b 	vldr	s15, [pc, #364]	; 810ff4c <__ieee754_rem_pio2f+0x228>
 810fde2:	eea7 0a67 	vfms.f32	s0, s14, s15
 810fde6:	281f      	cmp	r0, #31
 810fde8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 810ff58 <__ieee754_rem_pio2f+0x234>
 810fdec:	ee67 7a27 	vmul.f32	s15, s14, s15
 810fdf0:	eeb1 6a47 	vneg.f32	s12, s14
 810fdf4:	ee70 6a67 	vsub.f32	s13, s0, s15
 810fdf8:	ee16 2a90 	vmov	r2, s13
 810fdfc:	dc1c      	bgt.n	810fe38 <__ieee754_rem_pio2f+0x114>
 810fdfe:	495a      	ldr	r1, [pc, #360]	; (810ff68 <__ieee754_rem_pio2f+0x244>)
 810fe00:	1e47      	subs	r7, r0, #1
 810fe02:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 810fe06:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 810fe0a:	428b      	cmp	r3, r1
 810fe0c:	d014      	beq.n	810fe38 <__ieee754_rem_pio2f+0x114>
 810fe0e:	6022      	str	r2, [r4, #0]
 810fe10:	ed94 7a00 	vldr	s14, [r4]
 810fe14:	ee30 0a47 	vsub.f32	s0, s0, s14
 810fe18:	2e00      	cmp	r6, #0
 810fe1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 810fe1e:	ed84 0a01 	vstr	s0, [r4, #4]
 810fe22:	dab0      	bge.n	810fd86 <__ieee754_rem_pio2f+0x62>
 810fe24:	eeb1 7a47 	vneg.f32	s14, s14
 810fe28:	eeb1 0a40 	vneg.f32	s0, s0
 810fe2c:	ed84 7a00 	vstr	s14, [r4]
 810fe30:	ed84 0a01 	vstr	s0, [r4, #4]
 810fe34:	4240      	negs	r0, r0
 810fe36:	e7a6      	b.n	810fd86 <__ieee754_rem_pio2f+0x62>
 810fe38:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 810fe3c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 810fe40:	2908      	cmp	r1, #8
 810fe42:	ea4f 53e5 	mov.w	r3, r5, asr #23
 810fe46:	dde2      	ble.n	810fe0e <__ieee754_rem_pio2f+0xea>
 810fe48:	eddf 5a42 	vldr	s11, [pc, #264]	; 810ff54 <__ieee754_rem_pio2f+0x230>
 810fe4c:	eef0 6a40 	vmov.f32	s13, s0
 810fe50:	eee6 6a25 	vfma.f32	s13, s12, s11
 810fe54:	ee70 7a66 	vsub.f32	s15, s0, s13
 810fe58:	eee6 7a25 	vfma.f32	s15, s12, s11
 810fe5c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810ff5c <__ieee754_rem_pio2f+0x238>
 810fe60:	eed7 7a25 	vfnms.f32	s15, s14, s11
 810fe64:	ee76 5ae7 	vsub.f32	s11, s13, s15
 810fe68:	ee15 2a90 	vmov	r2, s11
 810fe6c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 810fe70:	1a5b      	subs	r3, r3, r1
 810fe72:	2b19      	cmp	r3, #25
 810fe74:	dc04      	bgt.n	810fe80 <__ieee754_rem_pio2f+0x15c>
 810fe76:	edc4 5a00 	vstr	s11, [r4]
 810fe7a:	eeb0 0a66 	vmov.f32	s0, s13
 810fe7e:	e7c7      	b.n	810fe10 <__ieee754_rem_pio2f+0xec>
 810fe80:	eddf 5a3a 	vldr	s11, [pc, #232]	; 810ff6c <__ieee754_rem_pio2f+0x248>
 810fe84:	eeb0 0a66 	vmov.f32	s0, s13
 810fe88:	eea6 0a25 	vfma.f32	s0, s12, s11
 810fe8c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 810fe90:	eddf 6a37 	vldr	s13, [pc, #220]	; 810ff70 <__ieee754_rem_pio2f+0x24c>
 810fe94:	eee6 7a25 	vfma.f32	s15, s12, s11
 810fe98:	eed7 7a26 	vfnms.f32	s15, s14, s13
 810fe9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 810fea0:	ed84 7a00 	vstr	s14, [r4]
 810fea4:	e7b4      	b.n	810fe10 <__ieee754_rem_pio2f+0xec>
 810fea6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 810feaa:	db06      	blt.n	810feba <__ieee754_rem_pio2f+0x196>
 810feac:	ee70 7a40 	vsub.f32	s15, s0, s0
 810feb0:	edc0 7a01 	vstr	s15, [r0, #4]
 810feb4:	edc0 7a00 	vstr	s15, [r0]
 810feb8:	e742      	b.n	810fd40 <__ieee754_rem_pio2f+0x1c>
 810feba:	15ea      	asrs	r2, r5, #23
 810febc:	3a86      	subs	r2, #134	; 0x86
 810febe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 810fec2:	ee07 3a90 	vmov	s15, r3
 810fec6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 810feca:	eddf 6a2a 	vldr	s13, [pc, #168]	; 810ff74 <__ieee754_rem_pio2f+0x250>
 810fece:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810fed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810fed6:	ed8d 7a03 	vstr	s14, [sp, #12]
 810feda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810fede:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 810fee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810fee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810feea:	ed8d 7a04 	vstr	s14, [sp, #16]
 810feee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810fef2:	eef5 7a40 	vcmp.f32	s15, #0.0
 810fef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810fefa:	edcd 7a05 	vstr	s15, [sp, #20]
 810fefe:	d11e      	bne.n	810ff3e <__ieee754_rem_pio2f+0x21a>
 810ff00:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810ff04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ff08:	bf14      	ite	ne
 810ff0a:	2302      	movne	r3, #2
 810ff0c:	2301      	moveq	r3, #1
 810ff0e:	491a      	ldr	r1, [pc, #104]	; (810ff78 <__ieee754_rem_pio2f+0x254>)
 810ff10:	9101      	str	r1, [sp, #4]
 810ff12:	2102      	movs	r1, #2
 810ff14:	9100      	str	r1, [sp, #0]
 810ff16:	a803      	add	r0, sp, #12
 810ff18:	4621      	mov	r1, r4
 810ff1a:	f000 f895 	bl	8110048 <__kernel_rem_pio2f>
 810ff1e:	2e00      	cmp	r6, #0
 810ff20:	f6bf af31 	bge.w	810fd86 <__ieee754_rem_pio2f+0x62>
 810ff24:	edd4 7a00 	vldr	s15, [r4]
 810ff28:	eef1 7a67 	vneg.f32	s15, s15
 810ff2c:	edc4 7a00 	vstr	s15, [r4]
 810ff30:	edd4 7a01 	vldr	s15, [r4, #4]
 810ff34:	eef1 7a67 	vneg.f32	s15, s15
 810ff38:	edc4 7a01 	vstr	s15, [r4, #4]
 810ff3c:	e77a      	b.n	810fe34 <__ieee754_rem_pio2f+0x110>
 810ff3e:	2303      	movs	r3, #3
 810ff40:	e7e5      	b.n	810ff0e <__ieee754_rem_pio2f+0x1ea>
 810ff42:	bf00      	nop
 810ff44:	3f490fd8 	.word	0x3f490fd8
 810ff48:	4016cbe3 	.word	0x4016cbe3
 810ff4c:	3fc90f80 	.word	0x3fc90f80
 810ff50:	3fc90fd0 	.word	0x3fc90fd0
 810ff54:	37354400 	.word	0x37354400
 810ff58:	37354443 	.word	0x37354443
 810ff5c:	2e85a308 	.word	0x2e85a308
 810ff60:	43490f80 	.word	0x43490f80
 810ff64:	3f22f984 	.word	0x3f22f984
 810ff68:	081ec718 	.word	0x081ec718
 810ff6c:	2e85a300 	.word	0x2e85a300
 810ff70:	248d3132 	.word	0x248d3132
 810ff74:	43800000 	.word	0x43800000
 810ff78:	081ec798 	.word	0x081ec798

0810ff7c <scalbnf>:
 810ff7c:	ee10 3a10 	vmov	r3, s0
 810ff80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810ff84:	d02b      	beq.n	810ffde <scalbnf+0x62>
 810ff86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810ff8a:	d302      	bcc.n	810ff92 <scalbnf+0x16>
 810ff8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 810ff90:	4770      	bx	lr
 810ff92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 810ff96:	d123      	bne.n	810ffe0 <scalbnf+0x64>
 810ff98:	4b24      	ldr	r3, [pc, #144]	; (811002c <scalbnf+0xb0>)
 810ff9a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8110030 <scalbnf+0xb4>
 810ff9e:	4298      	cmp	r0, r3
 810ffa0:	ee20 0a27 	vmul.f32	s0, s0, s15
 810ffa4:	db17      	blt.n	810ffd6 <scalbnf+0x5a>
 810ffa6:	ee10 3a10 	vmov	r3, s0
 810ffaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810ffae:	3a19      	subs	r2, #25
 810ffb0:	f24c 3150 	movw	r1, #50000	; 0xc350
 810ffb4:	4288      	cmp	r0, r1
 810ffb6:	dd15      	ble.n	810ffe4 <scalbnf+0x68>
 810ffb8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8110034 <scalbnf+0xb8>
 810ffbc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8110038 <scalbnf+0xbc>
 810ffc0:	ee10 3a10 	vmov	r3, s0
 810ffc4:	eeb0 7a67 	vmov.f32	s14, s15
 810ffc8:	2b00      	cmp	r3, #0
 810ffca:	bfb8      	it	lt
 810ffcc:	eef0 7a66 	vmovlt.f32	s15, s13
 810ffd0:	ee27 0a87 	vmul.f32	s0, s15, s14
 810ffd4:	4770      	bx	lr
 810ffd6:	eddf 7a19 	vldr	s15, [pc, #100]	; 811003c <scalbnf+0xc0>
 810ffda:	ee27 0a80 	vmul.f32	s0, s15, s0
 810ffde:	4770      	bx	lr
 810ffe0:	0dd2      	lsrs	r2, r2, #23
 810ffe2:	e7e5      	b.n	810ffb0 <scalbnf+0x34>
 810ffe4:	4410      	add	r0, r2
 810ffe6:	28fe      	cmp	r0, #254	; 0xfe
 810ffe8:	dce6      	bgt.n	810ffb8 <scalbnf+0x3c>
 810ffea:	2800      	cmp	r0, #0
 810ffec:	dd06      	ble.n	810fffc <scalbnf+0x80>
 810ffee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810fff2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810fff6:	ee00 3a10 	vmov	s0, r3
 810fffa:	4770      	bx	lr
 810fffc:	f110 0f16 	cmn.w	r0, #22
 8110000:	da09      	bge.n	8110016 <scalbnf+0x9a>
 8110002:	eddf 7a0e 	vldr	s15, [pc, #56]	; 811003c <scalbnf+0xc0>
 8110006:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8110040 <scalbnf+0xc4>
 811000a:	ee10 3a10 	vmov	r3, s0
 811000e:	eeb0 7a67 	vmov.f32	s14, s15
 8110012:	2b00      	cmp	r3, #0
 8110014:	e7d9      	b.n	810ffca <scalbnf+0x4e>
 8110016:	3019      	adds	r0, #25
 8110018:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 811001c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8110020:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8110044 <scalbnf+0xc8>
 8110024:	ee07 3a90 	vmov	s15, r3
 8110028:	e7d7      	b.n	810ffda <scalbnf+0x5e>
 811002a:	bf00      	nop
 811002c:	ffff3cb0 	.word	0xffff3cb0
 8110030:	4c000000 	.word	0x4c000000
 8110034:	7149f2ca 	.word	0x7149f2ca
 8110038:	f149f2ca 	.word	0xf149f2ca
 811003c:	0da24260 	.word	0x0da24260
 8110040:	8da24260 	.word	0x8da24260
 8110044:	33000000 	.word	0x33000000

08110048 <__kernel_rem_pio2f>:
 8110048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811004c:	ed2d 8b04 	vpush	{d8-d9}
 8110050:	b0d9      	sub	sp, #356	; 0x164
 8110052:	4688      	mov	r8, r1
 8110054:	9002      	str	r0, [sp, #8]
 8110056:	49b8      	ldr	r1, [pc, #736]	; (8110338 <__kernel_rem_pio2f+0x2f0>)
 8110058:	9866      	ldr	r0, [sp, #408]	; 0x198
 811005a:	9301      	str	r3, [sp, #4]
 811005c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8110060:	9901      	ldr	r1, [sp, #4]
 8110062:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8110064:	f101 3bff 	add.w	fp, r1, #4294967295
 8110068:	1d11      	adds	r1, r2, #4
 811006a:	db25      	blt.n	81100b8 <__kernel_rem_pio2f+0x70>
 811006c:	1ed0      	subs	r0, r2, #3
 811006e:	bf48      	it	mi
 8110070:	1d10      	addmi	r0, r2, #4
 8110072:	10c0      	asrs	r0, r0, #3
 8110074:	1c45      	adds	r5, r0, #1
 8110076:	00e9      	lsls	r1, r5, #3
 8110078:	eba0 070b 	sub.w	r7, r0, fp
 811007c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8110348 <__kernel_rem_pio2f+0x300>
 8110080:	9103      	str	r1, [sp, #12]
 8110082:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8110086:	eb0a 0c0b 	add.w	ip, sl, fp
 811008a:	ae1c      	add	r6, sp, #112	; 0x70
 811008c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8110090:	2400      	movs	r4, #0
 8110092:	4564      	cmp	r4, ip
 8110094:	dd12      	ble.n	81100bc <__kernel_rem_pio2f+0x74>
 8110096:	9901      	ldr	r1, [sp, #4]
 8110098:	ac1c      	add	r4, sp, #112	; 0x70
 811009a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 811009e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 81100a2:	f04f 0c00 	mov.w	ip, #0
 81100a6:	45d4      	cmp	ip, sl
 81100a8:	dc27      	bgt.n	81100fa <__kernel_rem_pio2f+0xb2>
 81100aa:	f8dd e008 	ldr.w	lr, [sp, #8]
 81100ae:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8110348 <__kernel_rem_pio2f+0x300>
 81100b2:	4627      	mov	r7, r4
 81100b4:	2600      	movs	r6, #0
 81100b6:	e016      	b.n	81100e6 <__kernel_rem_pio2f+0x9e>
 81100b8:	2000      	movs	r0, #0
 81100ba:	e7db      	b.n	8110074 <__kernel_rem_pio2f+0x2c>
 81100bc:	42e7      	cmn	r7, r4
 81100be:	bf5d      	ittte	pl
 81100c0:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 81100c4:	ee07 1a90 	vmovpl	s15, r1
 81100c8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 81100cc:	eef0 7a47 	vmovmi.f32	s15, s14
 81100d0:	ece6 7a01 	vstmia	r6!, {s15}
 81100d4:	3401      	adds	r4, #1
 81100d6:	e7dc      	b.n	8110092 <__kernel_rem_pio2f+0x4a>
 81100d8:	ecfe 6a01 	vldmia	lr!, {s13}
 81100dc:	ed97 7a00 	vldr	s14, [r7]
 81100e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 81100e4:	3601      	adds	r6, #1
 81100e6:	455e      	cmp	r6, fp
 81100e8:	f1a7 0704 	sub.w	r7, r7, #4
 81100ec:	ddf4      	ble.n	81100d8 <__kernel_rem_pio2f+0x90>
 81100ee:	ece9 7a01 	vstmia	r9!, {s15}
 81100f2:	f10c 0c01 	add.w	ip, ip, #1
 81100f6:	3404      	adds	r4, #4
 81100f8:	e7d5      	b.n	81100a6 <__kernel_rem_pio2f+0x5e>
 81100fa:	a908      	add	r1, sp, #32
 81100fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8110100:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8110104:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8110344 <__kernel_rem_pio2f+0x2fc>
 8110108:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8110340 <__kernel_rem_pio2f+0x2f8>
 811010c:	9105      	str	r1, [sp, #20]
 811010e:	9304      	str	r3, [sp, #16]
 8110110:	4656      	mov	r6, sl
 8110112:	00b3      	lsls	r3, r6, #2
 8110114:	9306      	str	r3, [sp, #24]
 8110116:	ab58      	add	r3, sp, #352	; 0x160
 8110118:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 811011c:	ac08      	add	r4, sp, #32
 811011e:	ab44      	add	r3, sp, #272	; 0x110
 8110120:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8110124:	46a4      	mov	ip, r4
 8110126:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 811012a:	4637      	mov	r7, r6
 811012c:	2f00      	cmp	r7, #0
 811012e:	f1a0 0004 	sub.w	r0, r0, #4
 8110132:	dc4a      	bgt.n	81101ca <__kernel_rem_pio2f+0x182>
 8110134:	4628      	mov	r0, r5
 8110136:	9207      	str	r2, [sp, #28]
 8110138:	f7ff ff20 	bl	810ff7c <scalbnf>
 811013c:	eeb0 8a40 	vmov.f32	s16, s0
 8110140:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8110144:	ee28 0a00 	vmul.f32	s0, s16, s0
 8110148:	f7ff f822 	bl	810f190 <floorf>
 811014c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8110150:	eea0 8a67 	vfms.f32	s16, s0, s15
 8110154:	2d00      	cmp	r5, #0
 8110156:	9a07      	ldr	r2, [sp, #28]
 8110158:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 811015c:	ee17 9a90 	vmov	r9, s15
 8110160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8110164:	ee38 8a67 	vsub.f32	s16, s16, s15
 8110168:	dd41      	ble.n	81101ee <__kernel_rem_pio2f+0x1a6>
 811016a:	f106 3cff 	add.w	ip, r6, #4294967295
 811016e:	ab08      	add	r3, sp, #32
 8110170:	f1c5 0e08 	rsb	lr, r5, #8
 8110174:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8110178:	fa47 f00e 	asr.w	r0, r7, lr
 811017c:	4481      	add	r9, r0
 811017e:	fa00 f00e 	lsl.w	r0, r0, lr
 8110182:	1a3f      	subs	r7, r7, r0
 8110184:	f1c5 0007 	rsb	r0, r5, #7
 8110188:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 811018c:	4107      	asrs	r7, r0
 811018e:	2f00      	cmp	r7, #0
 8110190:	dd3c      	ble.n	811020c <__kernel_rem_pio2f+0x1c4>
 8110192:	f04f 0e00 	mov.w	lr, #0
 8110196:	f109 0901 	add.w	r9, r9, #1
 811019a:	4671      	mov	r1, lr
 811019c:	4576      	cmp	r6, lr
 811019e:	dc67      	bgt.n	8110270 <__kernel_rem_pio2f+0x228>
 81101a0:	2d00      	cmp	r5, #0
 81101a2:	dd03      	ble.n	81101ac <__kernel_rem_pio2f+0x164>
 81101a4:	2d01      	cmp	r5, #1
 81101a6:	d074      	beq.n	8110292 <__kernel_rem_pio2f+0x24a>
 81101a8:	2d02      	cmp	r5, #2
 81101aa:	d07b      	beq.n	81102a4 <__kernel_rem_pio2f+0x25c>
 81101ac:	2f02      	cmp	r7, #2
 81101ae:	d12d      	bne.n	811020c <__kernel_rem_pio2f+0x1c4>
 81101b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 81101b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 81101b8:	b341      	cbz	r1, 811020c <__kernel_rem_pio2f+0x1c4>
 81101ba:	4628      	mov	r0, r5
 81101bc:	9207      	str	r2, [sp, #28]
 81101be:	f7ff fedd 	bl	810ff7c <scalbnf>
 81101c2:	9a07      	ldr	r2, [sp, #28]
 81101c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 81101c8:	e020      	b.n	811020c <__kernel_rem_pio2f+0x1c4>
 81101ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 81101ce:	3f01      	subs	r7, #1
 81101d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 81101d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81101d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 81101dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 81101e0:	ecac 0a01 	vstmia	ip!, {s0}
 81101e4:	ed90 0a00 	vldr	s0, [r0]
 81101e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 81101ec:	e79e      	b.n	811012c <__kernel_rem_pio2f+0xe4>
 81101ee:	d105      	bne.n	81101fc <__kernel_rem_pio2f+0x1b4>
 81101f0:	1e70      	subs	r0, r6, #1
 81101f2:	ab08      	add	r3, sp, #32
 81101f4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 81101f8:	11ff      	asrs	r7, r7, #7
 81101fa:	e7c8      	b.n	811018e <__kernel_rem_pio2f+0x146>
 81101fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8110200:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8110204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8110208:	da30      	bge.n	811026c <__kernel_rem_pio2f+0x224>
 811020a:	2700      	movs	r7, #0
 811020c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8110210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8110214:	f040 809a 	bne.w	811034c <__kernel_rem_pio2f+0x304>
 8110218:	1e74      	subs	r4, r6, #1
 811021a:	46a4      	mov	ip, r4
 811021c:	2100      	movs	r1, #0
 811021e:	45d4      	cmp	ip, sl
 8110220:	da47      	bge.n	81102b2 <__kernel_rem_pio2f+0x26a>
 8110222:	2900      	cmp	r1, #0
 8110224:	d063      	beq.n	81102ee <__kernel_rem_pio2f+0x2a6>
 8110226:	ab08      	add	r3, sp, #32
 8110228:	3d08      	subs	r5, #8
 811022a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 811022e:	2b00      	cmp	r3, #0
 8110230:	d07f      	beq.n	8110332 <__kernel_rem_pio2f+0x2ea>
 8110232:	4628      	mov	r0, r5
 8110234:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8110238:	f7ff fea0 	bl	810ff7c <scalbnf>
 811023c:	1c63      	adds	r3, r4, #1
 811023e:	aa44      	add	r2, sp, #272	; 0x110
 8110240:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8110344 <__kernel_rem_pio2f+0x2fc>
 8110244:	0099      	lsls	r1, r3, #2
 8110246:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 811024a:	4623      	mov	r3, r4
 811024c:	2b00      	cmp	r3, #0
 811024e:	f280 80ad 	bge.w	81103ac <__kernel_rem_pio2f+0x364>
 8110252:	4623      	mov	r3, r4
 8110254:	2b00      	cmp	r3, #0
 8110256:	f2c0 80cb 	blt.w	81103f0 <__kernel_rem_pio2f+0x3a8>
 811025a:	aa44      	add	r2, sp, #272	; 0x110
 811025c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8110260:	4e36      	ldr	r6, [pc, #216]	; (811033c <__kernel_rem_pio2f+0x2f4>)
 8110262:	eddf 7a39 	vldr	s15, [pc, #228]	; 8110348 <__kernel_rem_pio2f+0x300>
 8110266:	2000      	movs	r0, #0
 8110268:	1ae2      	subs	r2, r4, r3
 811026a:	e0b6      	b.n	81103da <__kernel_rem_pio2f+0x392>
 811026c:	2702      	movs	r7, #2
 811026e:	e790      	b.n	8110192 <__kernel_rem_pio2f+0x14a>
 8110270:	6820      	ldr	r0, [r4, #0]
 8110272:	b949      	cbnz	r1, 8110288 <__kernel_rem_pio2f+0x240>
 8110274:	b118      	cbz	r0, 811027e <__kernel_rem_pio2f+0x236>
 8110276:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 811027a:	6020      	str	r0, [r4, #0]
 811027c:	2001      	movs	r0, #1
 811027e:	f10e 0e01 	add.w	lr, lr, #1
 8110282:	3404      	adds	r4, #4
 8110284:	4601      	mov	r1, r0
 8110286:	e789      	b.n	811019c <__kernel_rem_pio2f+0x154>
 8110288:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 811028c:	6020      	str	r0, [r4, #0]
 811028e:	4608      	mov	r0, r1
 8110290:	e7f5      	b.n	811027e <__kernel_rem_pio2f+0x236>
 8110292:	1e74      	subs	r4, r6, #1
 8110294:	ab08      	add	r3, sp, #32
 8110296:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 811029a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 811029e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 81102a2:	e783      	b.n	81101ac <__kernel_rem_pio2f+0x164>
 81102a4:	1e74      	subs	r4, r6, #1
 81102a6:	ab08      	add	r3, sp, #32
 81102a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 81102ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 81102b0:	e7f5      	b.n	811029e <__kernel_rem_pio2f+0x256>
 81102b2:	ab08      	add	r3, sp, #32
 81102b4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 81102b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 81102bc:	4301      	orrs	r1, r0
 81102be:	e7ae      	b.n	811021e <__kernel_rem_pio2f+0x1d6>
 81102c0:	3001      	adds	r0, #1
 81102c2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 81102c6:	2f00      	cmp	r7, #0
 81102c8:	d0fa      	beq.n	81102c0 <__kernel_rem_pio2f+0x278>
 81102ca:	9b06      	ldr	r3, [sp, #24]
 81102cc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 81102d0:	eb0d 0403 	add.w	r4, sp, r3
 81102d4:	9b01      	ldr	r3, [sp, #4]
 81102d6:	18f7      	adds	r7, r6, r3
 81102d8:	ab1c      	add	r3, sp, #112	; 0x70
 81102da:	f106 0c01 	add.w	ip, r6, #1
 81102de:	3c4c      	subs	r4, #76	; 0x4c
 81102e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 81102e4:	4430      	add	r0, r6
 81102e6:	4560      	cmp	r0, ip
 81102e8:	da04      	bge.n	81102f4 <__kernel_rem_pio2f+0x2ac>
 81102ea:	4606      	mov	r6, r0
 81102ec:	e711      	b.n	8110112 <__kernel_rem_pio2f+0xca>
 81102ee:	9c05      	ldr	r4, [sp, #20]
 81102f0:	2001      	movs	r0, #1
 81102f2:	e7e6      	b.n	81102c2 <__kernel_rem_pio2f+0x27a>
 81102f4:	9b04      	ldr	r3, [sp, #16]
 81102f6:	f8dd e008 	ldr.w	lr, [sp, #8]
 81102fa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 81102fe:	9306      	str	r3, [sp, #24]
 8110300:	ee07 3a90 	vmov	s15, r3
 8110304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8110308:	2600      	movs	r6, #0
 811030a:	ece7 7a01 	vstmia	r7!, {s15}
 811030e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8110348 <__kernel_rem_pio2f+0x300>
 8110312:	46b9      	mov	r9, r7
 8110314:	455e      	cmp	r6, fp
 8110316:	dd04      	ble.n	8110322 <__kernel_rem_pio2f+0x2da>
 8110318:	ece4 7a01 	vstmia	r4!, {s15}
 811031c:	f10c 0c01 	add.w	ip, ip, #1
 8110320:	e7e1      	b.n	81102e6 <__kernel_rem_pio2f+0x29e>
 8110322:	ecfe 6a01 	vldmia	lr!, {s13}
 8110326:	ed39 7a01 	vldmdb	r9!, {s14}
 811032a:	3601      	adds	r6, #1
 811032c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8110330:	e7f0      	b.n	8110314 <__kernel_rem_pio2f+0x2cc>
 8110332:	3c01      	subs	r4, #1
 8110334:	e777      	b.n	8110226 <__kernel_rem_pio2f+0x1de>
 8110336:	bf00      	nop
 8110338:	081ecadc 	.word	0x081ecadc
 811033c:	081ecab0 	.word	0x081ecab0
 8110340:	43800000 	.word	0x43800000
 8110344:	3b800000 	.word	0x3b800000
 8110348:	00000000 	.word	0x00000000
 811034c:	9b03      	ldr	r3, [sp, #12]
 811034e:	eeb0 0a48 	vmov.f32	s0, s16
 8110352:	1a98      	subs	r0, r3, r2
 8110354:	f7ff fe12 	bl	810ff7c <scalbnf>
 8110358:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8110340 <__kernel_rem_pio2f+0x2f8>
 811035c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8110360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8110364:	db19      	blt.n	811039a <__kernel_rem_pio2f+0x352>
 8110366:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8110344 <__kernel_rem_pio2f+0x2fc>
 811036a:	ee60 7a27 	vmul.f32	s15, s0, s15
 811036e:	aa08      	add	r2, sp, #32
 8110370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8110374:	1c74      	adds	r4, r6, #1
 8110376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 811037a:	3508      	adds	r5, #8
 811037c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8110380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8110384:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8110388:	ee10 3a10 	vmov	r3, s0
 811038c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8110390:	ee17 3a90 	vmov	r3, s15
 8110394:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8110398:	e74b      	b.n	8110232 <__kernel_rem_pio2f+0x1ea>
 811039a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 811039e:	aa08      	add	r2, sp, #32
 81103a0:	ee10 3a10 	vmov	r3, s0
 81103a4:	4634      	mov	r4, r6
 81103a6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 81103aa:	e742      	b.n	8110232 <__kernel_rem_pio2f+0x1ea>
 81103ac:	a808      	add	r0, sp, #32
 81103ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 81103b2:	9001      	str	r0, [sp, #4]
 81103b4:	ee07 0a90 	vmov	s15, r0
 81103b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81103bc:	3b01      	subs	r3, #1
 81103be:	ee67 7a80 	vmul.f32	s15, s15, s0
 81103c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 81103c6:	ed62 7a01 	vstmdb	r2!, {s15}
 81103ca:	e73f      	b.n	811024c <__kernel_rem_pio2f+0x204>
 81103cc:	ecf6 6a01 	vldmia	r6!, {s13}
 81103d0:	ecb5 7a01 	vldmia	r5!, {s14}
 81103d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 81103d8:	3001      	adds	r0, #1
 81103da:	4550      	cmp	r0, sl
 81103dc:	dc01      	bgt.n	81103e2 <__kernel_rem_pio2f+0x39a>
 81103de:	4290      	cmp	r0, r2
 81103e0:	ddf4      	ble.n	81103cc <__kernel_rem_pio2f+0x384>
 81103e2:	a858      	add	r0, sp, #352	; 0x160
 81103e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 81103e8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 81103ec:	3b01      	subs	r3, #1
 81103ee:	e731      	b.n	8110254 <__kernel_rem_pio2f+0x20c>
 81103f0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 81103f2:	2b02      	cmp	r3, #2
 81103f4:	dc09      	bgt.n	811040a <__kernel_rem_pio2f+0x3c2>
 81103f6:	2b00      	cmp	r3, #0
 81103f8:	dc2b      	bgt.n	8110452 <__kernel_rem_pio2f+0x40a>
 81103fa:	d044      	beq.n	8110486 <__kernel_rem_pio2f+0x43e>
 81103fc:	f009 0007 	and.w	r0, r9, #7
 8110400:	b059      	add	sp, #356	; 0x164
 8110402:	ecbd 8b04 	vpop	{d8-d9}
 8110406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811040a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 811040c:	2b03      	cmp	r3, #3
 811040e:	d1f5      	bne.n	81103fc <__kernel_rem_pio2f+0x3b4>
 8110410:	aa30      	add	r2, sp, #192	; 0xc0
 8110412:	1f0b      	subs	r3, r1, #4
 8110414:	4413      	add	r3, r2
 8110416:	461a      	mov	r2, r3
 8110418:	4620      	mov	r0, r4
 811041a:	2800      	cmp	r0, #0
 811041c:	f1a2 0204 	sub.w	r2, r2, #4
 8110420:	dc52      	bgt.n	81104c8 <__kernel_rem_pio2f+0x480>
 8110422:	4622      	mov	r2, r4
 8110424:	2a01      	cmp	r2, #1
 8110426:	f1a3 0304 	sub.w	r3, r3, #4
 811042a:	dc5d      	bgt.n	81104e8 <__kernel_rem_pio2f+0x4a0>
 811042c:	ab30      	add	r3, sp, #192	; 0xc0
 811042e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8110348 <__kernel_rem_pio2f+0x300>
 8110432:	440b      	add	r3, r1
 8110434:	2c01      	cmp	r4, #1
 8110436:	dc67      	bgt.n	8110508 <__kernel_rem_pio2f+0x4c0>
 8110438:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 811043c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8110440:	2f00      	cmp	r7, #0
 8110442:	d167      	bne.n	8110514 <__kernel_rem_pio2f+0x4cc>
 8110444:	edc8 6a00 	vstr	s13, [r8]
 8110448:	ed88 7a01 	vstr	s14, [r8, #4]
 811044c:	edc8 7a02 	vstr	s15, [r8, #8]
 8110450:	e7d4      	b.n	81103fc <__kernel_rem_pio2f+0x3b4>
 8110452:	ab30      	add	r3, sp, #192	; 0xc0
 8110454:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8110348 <__kernel_rem_pio2f+0x300>
 8110458:	440b      	add	r3, r1
 811045a:	4622      	mov	r2, r4
 811045c:	2a00      	cmp	r2, #0
 811045e:	da24      	bge.n	81104aa <__kernel_rem_pio2f+0x462>
 8110460:	b34f      	cbz	r7, 81104b6 <__kernel_rem_pio2f+0x46e>
 8110462:	eef1 7a47 	vneg.f32	s15, s14
 8110466:	edc8 7a00 	vstr	s15, [r8]
 811046a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 811046e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8110472:	aa31      	add	r2, sp, #196	; 0xc4
 8110474:	2301      	movs	r3, #1
 8110476:	429c      	cmp	r4, r3
 8110478:	da20      	bge.n	81104bc <__kernel_rem_pio2f+0x474>
 811047a:	b10f      	cbz	r7, 8110480 <__kernel_rem_pio2f+0x438>
 811047c:	eef1 7a67 	vneg.f32	s15, s15
 8110480:	edc8 7a01 	vstr	s15, [r8, #4]
 8110484:	e7ba      	b.n	81103fc <__kernel_rem_pio2f+0x3b4>
 8110486:	ab30      	add	r3, sp, #192	; 0xc0
 8110488:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8110348 <__kernel_rem_pio2f+0x300>
 811048c:	440b      	add	r3, r1
 811048e:	2c00      	cmp	r4, #0
 8110490:	da05      	bge.n	811049e <__kernel_rem_pio2f+0x456>
 8110492:	b10f      	cbz	r7, 8110498 <__kernel_rem_pio2f+0x450>
 8110494:	eef1 7a67 	vneg.f32	s15, s15
 8110498:	edc8 7a00 	vstr	s15, [r8]
 811049c:	e7ae      	b.n	81103fc <__kernel_rem_pio2f+0x3b4>
 811049e:	ed33 7a01 	vldmdb	r3!, {s14}
 81104a2:	3c01      	subs	r4, #1
 81104a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 81104a8:	e7f1      	b.n	811048e <__kernel_rem_pio2f+0x446>
 81104aa:	ed73 7a01 	vldmdb	r3!, {s15}
 81104ae:	3a01      	subs	r2, #1
 81104b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 81104b4:	e7d2      	b.n	811045c <__kernel_rem_pio2f+0x414>
 81104b6:	eef0 7a47 	vmov.f32	s15, s14
 81104ba:	e7d4      	b.n	8110466 <__kernel_rem_pio2f+0x41e>
 81104bc:	ecb2 7a01 	vldmia	r2!, {s14}
 81104c0:	3301      	adds	r3, #1
 81104c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 81104c6:	e7d6      	b.n	8110476 <__kernel_rem_pio2f+0x42e>
 81104c8:	edd2 7a00 	vldr	s15, [r2]
 81104cc:	edd2 6a01 	vldr	s13, [r2, #4]
 81104d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 81104d4:	3801      	subs	r0, #1
 81104d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81104da:	ed82 7a00 	vstr	s14, [r2]
 81104de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81104e2:	edc2 7a01 	vstr	s15, [r2, #4]
 81104e6:	e798      	b.n	811041a <__kernel_rem_pio2f+0x3d2>
 81104e8:	edd3 7a00 	vldr	s15, [r3]
 81104ec:	edd3 6a01 	vldr	s13, [r3, #4]
 81104f0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 81104f4:	3a01      	subs	r2, #1
 81104f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 81104fa:	ed83 7a00 	vstr	s14, [r3]
 81104fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8110502:	edc3 7a01 	vstr	s15, [r3, #4]
 8110506:	e78d      	b.n	8110424 <__kernel_rem_pio2f+0x3dc>
 8110508:	ed33 7a01 	vldmdb	r3!, {s14}
 811050c:	3c01      	subs	r4, #1
 811050e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8110512:	e78f      	b.n	8110434 <__kernel_rem_pio2f+0x3ec>
 8110514:	eef1 6a66 	vneg.f32	s13, s13
 8110518:	eeb1 7a47 	vneg.f32	s14, s14
 811051c:	edc8 6a00 	vstr	s13, [r8]
 8110520:	ed88 7a01 	vstr	s14, [r8, #4]
 8110524:	eef1 7a67 	vneg.f32	s15, s15
 8110528:	e790      	b.n	811044c <__kernel_rem_pio2f+0x404>
 811052a:	bf00      	nop

0811052c <_close>:
 811052c:	4b02      	ldr	r3, [pc, #8]	; (8110538 <_close+0xc>)
 811052e:	2258      	movs	r2, #88	; 0x58
 8110530:	601a      	str	r2, [r3, #0]
 8110532:	f04f 30ff 	mov.w	r0, #4294967295
 8110536:	4770      	bx	lr
 8110538:	1001ac74 	.word	0x1001ac74

0811053c <_fstat>:
 811053c:	4b02      	ldr	r3, [pc, #8]	; (8110548 <_fstat+0xc>)
 811053e:	2258      	movs	r2, #88	; 0x58
 8110540:	601a      	str	r2, [r3, #0]
 8110542:	f04f 30ff 	mov.w	r0, #4294967295
 8110546:	4770      	bx	lr
 8110548:	1001ac74 	.word	0x1001ac74

0811054c <_getpid>:
 811054c:	4b02      	ldr	r3, [pc, #8]	; (8110558 <_getpid+0xc>)
 811054e:	2258      	movs	r2, #88	; 0x58
 8110550:	601a      	str	r2, [r3, #0]
 8110552:	f04f 30ff 	mov.w	r0, #4294967295
 8110556:	4770      	bx	lr
 8110558:	1001ac74 	.word	0x1001ac74

0811055c <_isatty>:
 811055c:	4b02      	ldr	r3, [pc, #8]	; (8110568 <_isatty+0xc>)
 811055e:	2258      	movs	r2, #88	; 0x58
 8110560:	601a      	str	r2, [r3, #0]
 8110562:	2000      	movs	r0, #0
 8110564:	4770      	bx	lr
 8110566:	bf00      	nop
 8110568:	1001ac74 	.word	0x1001ac74

0811056c <_kill>:
 811056c:	4b02      	ldr	r3, [pc, #8]	; (8110578 <_kill+0xc>)
 811056e:	2258      	movs	r2, #88	; 0x58
 8110570:	601a      	str	r2, [r3, #0]
 8110572:	f04f 30ff 	mov.w	r0, #4294967295
 8110576:	4770      	bx	lr
 8110578:	1001ac74 	.word	0x1001ac74

0811057c <_lseek>:
 811057c:	4b02      	ldr	r3, [pc, #8]	; (8110588 <_lseek+0xc>)
 811057e:	2258      	movs	r2, #88	; 0x58
 8110580:	601a      	str	r2, [r3, #0]
 8110582:	f04f 30ff 	mov.w	r0, #4294967295
 8110586:	4770      	bx	lr
 8110588:	1001ac74 	.word	0x1001ac74

0811058c <_read>:
 811058c:	4b02      	ldr	r3, [pc, #8]	; (8110598 <_read+0xc>)
 811058e:	2258      	movs	r2, #88	; 0x58
 8110590:	601a      	str	r2, [r3, #0]
 8110592:	f04f 30ff 	mov.w	r0, #4294967295
 8110596:	4770      	bx	lr
 8110598:	1001ac74 	.word	0x1001ac74

0811059c <_write>:
 811059c:	4b02      	ldr	r3, [pc, #8]	; (81105a8 <_write+0xc>)
 811059e:	2258      	movs	r2, #88	; 0x58
 81105a0:	601a      	str	r2, [r3, #0]
 81105a2:	f04f 30ff 	mov.w	r0, #4294967295
 81105a6:	4770      	bx	lr
 81105a8:	1001ac74 	.word	0x1001ac74

081105ac <_exit>:
 81105ac:	e7fe      	b.n	81105ac <_exit>
	...

081105b0 <_init>:
 81105b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81105b2:	bf00      	nop
 81105b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81105b6:	bc08      	pop	{r3}
 81105b8:	469e      	mov	lr, r3
 81105ba:	4770      	bx	lr

081105bc <_fini>:
 81105bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81105be:	bf00      	nop
 81105c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81105c2:	bc08      	pop	{r3}
 81105c4:	469e      	mov	lr, r3
 81105c6:	4770      	bx	lr
