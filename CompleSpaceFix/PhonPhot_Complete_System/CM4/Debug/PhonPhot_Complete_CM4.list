
PhonPhot_Complete_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb1c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000d7df8  0810edc0  0810edc0  0001edc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081e6bb8  081e6bb8  000f6bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081e6bc0  081e6bc0  000f6bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081e6bc4  081e6bc4  000f6bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000afc  10000050  081e6bc8  00100050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001a2ac  10000b60  081e76c4  00100b60  2**5
                  ALLOC
  8 ._user_heap_stack 00002004  1001ae0c  081e76c4  0010ae0c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00110050  2**0
                  CONTENTS, READONLY
 10 .comment      000000e6  00000000  00000000  00110080  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028755  00000000  00000000  00110166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005026  00000000  00000000  001388bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0000d8c3  00000000  00000000  0013d8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0014b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014e5  00000000  00000000  0014c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040a14  00000000  00000000  0014da85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a75f  00000000  00000000  0018e499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a86c2  00000000  00000000  001b8bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000050f0  00000000  00000000  003612bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .ipc_data     00000050  10000000  10000000  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .debug_line_str 00000081  00000000  00000000  003663ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000b60 	.word	0x10000b60
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810eda4 	.word	0x0810eda4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000b64 	.word	0x10000b64
 81002dc:	0810eda4 	.word	0x0810eda4

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b07      	ldr	r3, [pc, #28]	; (8101120 <SystemInit+0x20>)
 8101102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8101106:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 810110a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810110e:	691a      	ldr	r2, [r3, #16]
 8101110:	f042 0210 	orr.w	r2, r2, #16
 8101114:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101116:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810111a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101124:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101126:	2400      	movs	r4, #0
{
 8101128:	b08a      	sub	sp, #40	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 810112a:	221c      	movs	r2, #28
 810112c:	4621      	mov	r1, r4
 810112e:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8101130:	e9cd 4400 	strd	r4, r4, [sp]
 8101134:	9402      	str	r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101136:	f00a f8a5 	bl	810b284 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810113a:	482d      	ldr	r0, [pc, #180]	; (81011f0 <MX_ADC1_Init+0xcc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 810113c:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 81011fc <MX_ADC1_Init+0xd8>
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101140:	8284      	strh	r4, [r0, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8101142:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101146:	2201      	movs	r2, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8101148:	e9c0 e300 	strd	lr, r3, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810114c:	2304      	movs	r3, #4
 810114e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 3;
 8101152:	2303      	movs	r3, #3
 8101154:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101156:	f44f 6190 	mov.w	r1, #1152	; 0x480
 810115a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 810115e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8101160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101164:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101168:	e9c0 340c 	strd	r3, r4, [r0, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810116c:	6084      	str	r4, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810116e:	7704      	strb	r4, [r0, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8101170:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101174:	f001 fcb6 	bl	8102ae4 <HAL_ADC_Init>
 8101178:	b108      	cbz	r0, 810117e <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 810117a:	f000 ff59 	bl	8102030 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810117e:	481c      	ldr	r0, [pc, #112]	; (81011f0 <MX_ADC1_Init+0xcc>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101180:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101182:	4669      	mov	r1, sp
 8101184:	f001 fdc2 	bl	8102d0c <HAL_ADCEx_MultiModeConfigChannel>
 8101188:	b108      	cbz	r0, 810118e <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 810118a:	f000 ff51 	bl	8102030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810118e:	4819      	ldr	r0, [pc, #100]	; (81011f4 <MX_ADC1_Init+0xd0>)
 8101190:	2306      	movs	r3, #6
 8101192:	e9cd 0303 	strd	r0, r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101196:	2403      	movs	r4, #3
 8101198:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810119c:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 81011a0:	f04f 0c04 	mov.w	ip, #4
 81011a4:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011a6:	4812      	ldr	r0, [pc, #72]	; (81011f0 <MX_ADC1_Init+0xcc>)
  sConfig.OffsetSignedSaturation = DISABLE;
 81011a8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011ac:	a903      	add	r1, sp, #12
  sConfig.Offset = 0;
 81011ae:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011b2:	f001 f9d5 	bl	8102560 <HAL_ADC_ConfigChannel>
 81011b6:	b108      	cbz	r0, 81011bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 81011b8:	f000 ff3a 	bl	8102030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81011bc:	2101      	movs	r1, #1
 81011be:	230c      	movs	r3, #12
 81011c0:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011c4:	480a      	ldr	r0, [pc, #40]	; (81011f0 <MX_ADC1_Init+0xcc>)
 81011c6:	eb0d 0103 	add.w	r1, sp, r3
 81011ca:	f001 f9c9 	bl	8102560 <HAL_ADC_ConfigChannel>
 81011ce:	b108      	cbz	r0, 81011d4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81011d0:	f000 ff2e 	bl	8102030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011d4:	4a08      	ldr	r2, [pc, #32]	; (81011f8 <MX_ADC1_Init+0xd4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011d6:	4806      	ldr	r0, [pc, #24]	; (81011f0 <MX_ADC1_Init+0xcc>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011d8:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011da:	a903      	add	r1, sp, #12
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011dc:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011e0:	f001 f9be 	bl	8102560 <HAL_ADC_ConfigChannel>
 81011e4:	b108      	cbz	r0, 81011ea <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 81011e6:	f000 ff23 	bl	8102030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81011ea:	b00a      	add	sp, #40	; 0x28
 81011ec:	bd10      	pop	{r4, pc}
 81011ee:	bf00      	nop
 81011f0:	10000b7c 	.word	0x10000b7c
 81011f4:	2a000400 	.word	0x2a000400
 81011f8:	04300002 	.word	0x04300002
 81011fc:	40022000 	.word	0x40022000

08101200 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8101200:	b500      	push	{lr}
 8101202:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8101204:	221c      	movs	r2, #28
 8101206:	2100      	movs	r1, #0
 8101208:	a801      	add	r0, sp, #4
 810120a:	f00a f83b 	bl	810b284 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 810120e:	4828      	ldr	r0, [pc, #160]	; (81012b0 <MX_ADC3_Init+0xb0>)
 8101210:	4b28      	ldr	r3, [pc, #160]	; (81012b4 <MX_ADC3_Init+0xb4>)
 8101212:	6003      	str	r3, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8101214:	2201      	movs	r2, #1
 8101216:	2300      	movs	r3, #0
 8101218:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810121c:	2204      	movs	r2, #4
 810121e:	6102      	str	r2, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 3;
 8101220:	2203      	movs	r2, #3
 8101222:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101224:	f44f 6c90 	mov.w	ip, #1152	; 0x480
 8101228:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 810122c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc3.Init.LowPowerAutoWait = DISABLE;
 810122e:	8283      	strh	r3, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8101230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101234:	e9c0 c109 	strd	ip, r1, [r0, #36]	; 0x24
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101238:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 810123c:	7703      	strb	r3, [r0, #28]
  hadc3.Init.OversamplingMode = DISABLE;
 810123e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8101242:	f001 fc4f 	bl	8102ae4 <HAL_ADC_Init>
 8101246:	b108      	cbz	r0, 810124c <MX_ADC3_Init+0x4c>
  {
    Error_Handler();
 8101248:	f000 fef2 	bl	8102030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810124c:	481a      	ldr	r0, [pc, #104]	; (81012b8 <MX_ADC3_Init+0xb8>)
 810124e:	2306      	movs	r3, #6
 8101250:	e9cd 0301 	strd	r0, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101254:	f04f 0c03 	mov.w	ip, #3
 8101258:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810125c:	e9cd c303 	strd	ip, r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 8101260:	f04f 0e04 	mov.w	lr, #4
 8101264:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101266:	4812      	ldr	r0, [pc, #72]	; (81012b0 <MX_ADC3_Init+0xb0>)
  sConfig.OffsetSignedSaturation = DISABLE;
 8101268:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810126c:	a901      	add	r1, sp, #4
  sConfig.Offset = 0;
 810126e:	e9cd e305 	strd	lr, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101272:	f001 f975 	bl	8102560 <HAL_ADC_ConfigChannel>
 8101276:	b108      	cbz	r0, 810127c <MX_ADC3_Init+0x7c>
  {
    Error_Handler();
 8101278:	f000 feda 	bl	8102030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 810127c:	2101      	movs	r1, #1
 810127e:	230c      	movs	r3, #12
 8101280:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101284:	480a      	ldr	r0, [pc, #40]	; (81012b0 <MX_ADC3_Init+0xb0>)
 8101286:	a901      	add	r1, sp, #4
 8101288:	f001 f96a 	bl	8102560 <HAL_ADC_ConfigChannel>
 810128c:	b108      	cbz	r0, 8101292 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 810128e:	f000 fecf 	bl	8102030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8101292:	4a0a      	ldr	r2, [pc, #40]	; (81012bc <MX_ADC3_Init+0xbc>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101294:	4806      	ldr	r0, [pc, #24]	; (81012b0 <MX_ADC3_Init+0xb0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8101296:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101298:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 810129a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810129e:	f001 f95f 	bl	8102560 <HAL_ADC_ConfigChannel>
 81012a2:	b108      	cbz	r0, 81012a8 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 81012a4:	f000 fec4 	bl	8102030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81012a8:	b009      	add	sp, #36	; 0x24
 81012aa:	f85d fb04 	ldr.w	pc, [sp], #4
 81012ae:	bf00      	nop
 81012b0:	10000be0 	.word	0x10000be0
 81012b4:	58026000 	.word	0x58026000
 81012b8:	1d500080 	.word	0x1d500080
 81012bc:	04300002 	.word	0x04300002

081012c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81012c0:	b570      	push	{r4, r5, r6, lr}
 81012c2:	4605      	mov	r5, r0
 81012c4:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012c6:	2214      	movs	r2, #20
 81012c8:	2100      	movs	r1, #0
 81012ca:	a807      	add	r0, sp, #28
 81012cc:	f009 ffda 	bl	810b284 <memset>
  if(adcHandle->Instance==ADC1)
 81012d0:	682b      	ldr	r3, [r5, #0]
 81012d2:	4a55      	ldr	r2, [pc, #340]	; (8101428 <HAL_ADC_MspInit+0x168>)
 81012d4:	4293      	cmp	r3, r2
 81012d6:	d158      	bne.n	810138a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012d8:	4b54      	ldr	r3, [pc, #336]	; (810142c <HAL_ADC_MspInit+0x16c>)

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 81012da:	4c55      	ldr	r4, [pc, #340]	; (8101430 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012dc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 81012e0:	4e54      	ldr	r6, [pc, #336]	; (8101434 <HAL_ADC_MspInit+0x174>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012e2:	f042 0220 	orr.w	r2, r2, #32
 81012e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 81012ea:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 81012ee:	f002 0220 	and.w	r2, r2, #32
 81012f2:	9201      	str	r2, [sp, #4]
 81012f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81012f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81012fa:	f042 0204 	orr.w	r2, r2, #4
 81012fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101302:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101306:	f002 0204 	and.w	r2, r2, #4
 810130a:	9202      	str	r2, [sp, #8]
 810130c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810130e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101312:	f042 0201 	orr.w	r2, r2, #1
 8101316:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810131e:	f003 0301 	and.w	r3, r3, #1
 8101322:	9303      	str	r3, [sp, #12]
 8101324:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101326:	2001      	movs	r0, #1
 8101328:	2303      	movs	r3, #3
 810132a:	e9cd 0307 	strd	r0, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 810132e:	a907      	add	r1, sp, #28
 8101330:	4841      	ldr	r0, [pc, #260]	; (8101438 <HAL_ADC_MspInit+0x178>)
 8101332:	f002 fe39 	bl	8103fa8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101336:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 810133a:	4608      	mov	r0, r1
 810133c:	f001 f8ee 	bl	810251c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8101340:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8101344:	4608      	mov	r0, r1
 8101346:	f001 f8e9 	bl	810251c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810134a:	2309      	movs	r3, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 810134c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101350:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8101354:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101358:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810135c:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 810135e:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
 8101362:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8101366:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 810136a:	e9c4 e206 	strd	lr, r2, [r4, #24]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 810136e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101372:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8101376:	4620      	mov	r0, r4
 8101378:	f001 ff2e 	bl	81031d8 <HAL_DMA_Init>
 810137c:	b108      	cbz	r0, 8101382 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 810137e:	f000 fe57 	bl	8102030 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8101382:	64ec      	str	r4, [r5, #76]	; 0x4c
 8101384:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8101386:	b00c      	add	sp, #48	; 0x30
 8101388:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC3)
 810138a:	4a2c      	ldr	r2, [pc, #176]	; (810143c <HAL_ADC_MspInit+0x17c>)
 810138c:	4293      	cmp	r3, r2
 810138e:	d1fa      	bne.n	8101386 <HAL_ADC_MspInit+0xc6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101390:	4b26      	ldr	r3, [pc, #152]	; (810142c <HAL_ADC_MspInit+0x16c>)
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 8101392:	482b      	ldr	r0, [pc, #172]	; (8101440 <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc3.Instance = DMA1_Stream1;
 8101398:	4c2a      	ldr	r4, [pc, #168]	; (8101444 <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 810139a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 810139e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013a6:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 81013aa:	9204      	str	r2, [sp, #16]
 81013ac:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81013ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013b2:	f042 0220 	orr.w	r2, r2, #32
 81013b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013be:	f002 0220 	and.w	r2, r2, #32
 81013c2:	9205      	str	r2, [sp, #20]
 81013c4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81013c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013ca:	f042 0204 	orr.w	r2, r2, #4
 81013ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013d6:	f003 0304 	and.w	r3, r3, #4
 81013da:	9306      	str	r3, [sp, #24]
 81013dc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013de:	f44f 7680 	mov.w	r6, #256	; 0x100
 81013e2:	2303      	movs	r3, #3
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013e4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013e6:	e9cd 6307 	strd	r6, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013ea:	f002 fddd 	bl	8103fa8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81013ee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 81013f2:	4608      	mov	r0, r1
 81013f4:	f001 f892 	bl	810251c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 81013fc:	4608      	mov	r0, r1
 81013fe:	f001 f88d 	bl	810251c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8101402:	4a11      	ldr	r2, [pc, #68]	; (8101448 <HAL_ADC_MspInit+0x188>)
 8101404:	2373      	movs	r3, #115	; 0x73
 8101406:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 810140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 810140e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101412:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101416:	2300      	movs	r3, #0
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8101418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 810141c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8101420:	e9c4 2606 	strd	r2, r6, [r4, #24]
 8101424:	e7a3      	b.n	810136e <HAL_ADC_MspInit+0xae>
 8101426:	bf00      	nop
 8101428:	40022000 	.word	0x40022000
 810142c:	58024400 	.word	0x58024400
 8101430:	10000c44 	.word	0x10000c44
 8101434:	40020010 	.word	0x40020010
 8101438:	58020800 	.word	0x58020800
 810143c:	58026000 	.word	0x58026000
 8101440:	58021400 	.word	0x58021400
 8101444:	10000cbc 	.word	0x10000cbc
 8101448:	40020028 	.word	0x40020028

0810144c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810144c:	4b14      	ldr	r3, [pc, #80]	; (81014a0 <MX_DMA_Init+0x54>)
{
 810144e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101450:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8101454:	f042 0201 	orr.w	r2, r2, #1
 8101458:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 810145c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101460:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101462:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101466:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101468:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810146a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 810146c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810146e:	f001 fcc3 	bl	8102df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101472:	200b      	movs	r0, #11
 8101474:	f001 fcf2 	bl	8102e5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101478:	2200      	movs	r2, #0
 810147a:	4611      	mov	r1, r2
 810147c:	200c      	movs	r0, #12
 810147e:	f001 fcbb 	bl	8102df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101482:	200c      	movs	r0, #12
 8101484:	f001 fcea 	bl	8102e5c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101488:	2200      	movs	r2, #0
 810148a:	4611      	mov	r1, r2
 810148c:	202f      	movs	r0, #47	; 0x2f
 810148e:	f001 fcb3 	bl	8102df8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101492:	202f      	movs	r0, #47	; 0x2f

}
 8101494:	b003      	add	sp, #12
 8101496:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 810149a:	f001 bcdf 	b.w	8102e5c <HAL_NVIC_EnableIRQ>
 810149e:	bf00      	nop
 81014a0:	58024400 	.word	0x58024400

081014a4 <copySamplesForFFT>:

  //setUserLED1State( FALSE );
}*/

static void copySamplesForFFT( volatile uint16_t *_source1, volatile uint16_t *_source2 )
{
 81014a4:	b530      	push	{r4, r5, lr}
    // ADC3 packed microphone 1,4,5

    // convert to voltage
    // apply HANN_WINDOW_COEFF
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014a6:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8101590 <copySamplesForFFT+0xec>
 81014aa:	4d3a      	ldr	r5, [pc, #232]	; (8101594 <copySamplesForFFT+0xf0>)
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014ac:	4c3a      	ldr	r4, [pc, #232]	; (8101598 <copySamplesForFFT+0xf4>)
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014ae:	2300      	movs	r3, #0
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014b0:	8802      	ldrh	r2, [r0, #0]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014b2:	ecb5 7a01 	vldmia	r5!, {s14}
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014b6:	b292      	uxth	r2, r2
 81014b8:	ee07 2a90 	vmov	s15, r2
 81014bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014c0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014c8:	3006      	adds	r0, #6
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014ca:	ee67 7a87 	vmul.f32	s15, s15, s14
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014ce:	3106      	adds	r1, #6
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014d0:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 81014d4:	f831 2c06 	ldrh.w	r2, [r1, #-6]
 81014d8:	b292      	uxth	r2, r2
 81014da:	ee07 2a90 	vmov	s15, r2
 81014de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014e2:	f503 7200 	add.w	r2, r3, #512	; 0x200
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 81014ea:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 81014f2:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 81014f6:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 81014fa:	b292      	uxth	r2, r2
 81014fc:	ee07 2a90 	vmov	s15, r2
 8101500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101504:	f503 6280 	add.w	r2, r3, #1024	; 0x400
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101508:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 810150c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101510:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101514:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101518:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 810151c:	b292      	uxth	r2, r2
 810151e:	ee07 2a90 	vmov	s15, r2
 8101522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101526:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810152a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 810152e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101532:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101536:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 810153a:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 810153e:	b292      	uxth	r2, r2
 8101540:	ee07 2a90 	vmov	s15, r2
 8101544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101548:	f503 6200 	add.w	r2, r3, #2048	; 0x800
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810154c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101550:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101554:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101558:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 810155c:	f831 2c02 	ldrh.w	r2, [r1, #-2]
 8101560:	b292      	uxth	r2, r2
 8101562:	ee07 2a90 	vmov	s15, r2
 8101566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810156a:	f503 6220 	add.w	r2, r3, #2560	; 0xa00
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810156e:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 8101572:	3301      	adds	r3, #1
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101574:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101578:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 810157c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101580:	edc2 7a00 	vstr	s15, [r2]
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 8101584:	d194      	bne.n	81014b0 <copySamplesForFFT+0xc>
  }
  //if (!RUN_ONCE) printf("Out of copySamplesforFFT\r\n");
  // set ready for FFT flag so base loop or an RTOS task can perform the op without blocking interrupts
  fft_samples_ready = TRUE;
 8101586:	4b05      	ldr	r3, [pc, #20]	; (810159c <copySamplesForFFT+0xf8>)
 8101588:	2201      	movs	r2, #1
 810158a:	701a      	strb	r2, [r3, #0]
}
 810158c:	bd30      	pop	{r4, r5, pc}
 810158e:	bf00      	nop
 8101590:	38533406 	.word	0x38533406
 8101594:	0810ede0 	.word	0x0810ede0
 8101598:	100156f0 	.word	0x100156f0
 810159c:	100186f0 	.word	0x100186f0

081015a0 <ADC3DMATransferCompleteIRQCallback>:
{
 81015a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ( debug_output_enable )
 81015a4:	4c48      	ldr	r4, [pc, #288]	; (81016c8 <ADC3DMATransferCompleteIRQCallback+0x128>)
 81015a6:	7823      	ldrb	r3, [r4, #0]
{
 81015a8:	b086      	sub	sp, #24
  if ( debug_output_enable )
 81015aa:	b123      	cbz	r3, 81015b6 <ADC3DMATransferCompleteIRQCallback+0x16>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 81015ac:	4847      	ldr	r0, [pc, #284]	; (81016cc <ADC3DMATransferCompleteIRQCallback+0x12c>)
 81015ae:	2201      	movs	r2, #1
 81015b0:	2104      	movs	r1, #4
 81015b2:	f002 fde7 	bl	8104184 <HAL_GPIO_WritePin>
  setUserLED1State(TRUE);
 81015b6:	2001      	movs	r0, #1
 81015b8:	f000 fd26 	bl	8102008 <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 81015bc:	4a44      	ldr	r2, [pc, #272]	; (81016d0 <ADC3DMATransferCompleteIRQCallback+0x130>)
 81015be:	8813      	ldrh	r3, [r2, #0]
 81015c0:	3301      	adds	r3, #1
 81015c2:	b29b      	uxth	r3, r3
 81015c4:	2b14      	cmp	r3, #20
 81015c6:	8013      	strh	r3, [r2, #0]
 81015c8:	d105      	bne.n	81015d6 <ADC3DMATransferCompleteIRQCallback+0x36>
    fft_op_skip_counter = 0;
 81015ca:	2300      	movs	r3, #0
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 81015cc:	4941      	ldr	r1, [pc, #260]	; (81016d4 <ADC3DMATransferCompleteIRQCallback+0x134>)
 81015ce:	4842      	ldr	r0, [pc, #264]	; (81016d8 <ADC3DMATransferCompleteIRQCallback+0x138>)
    fft_op_skip_counter = 0;
 81015d0:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 81015d2:	f7ff ff67 	bl	81014a4 <copySamplesForFFT>
{
 81015d6:	2300      	movs	r3, #0
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 81015d8:	f8df e108 	ldr.w	lr, [pc, #264]	; 81016e4 <ADC3DMATransferCompleteIRQCallback+0x144>
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 81015dc:	f8df c108 	ldr.w	ip, [pc, #264]	; 81016e8 <ADC3DMATransferCompleteIRQCallback+0x148>
{
 81015e0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 81015e4:	4619      	mov	r1, r3
 81015e6:	4618      	mov	r0, r3
 81015e8:	461d      	mov	r5, r3
 81015ea:	461e      	mov	r6, r3
 81015ec:	461f      	mov	r7, r3
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 81015ee:	f83e 8012 	ldrh.w	r8, [lr, r2, lsl #1]
 81015f2:	f102 0901 	add.w	r9, r2, #1
 81015f6:	fa17 f788 	uxtah	r7, r7, r8
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 81015fa:	f83c 8012 	ldrh.w	r8, [ip, r2, lsl #1]
 81015fe:	fa16 f688 	uxtah	r6, r6, r8
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101602:	f83e 8019 	ldrh.w	r8, [lr, r9, lsl #1]
 8101606:	fa15 f588 	uxtah	r5, r5, r8
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 810160a:	f102 0802 	add.w	r8, r2, #2
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810160e:	3203      	adds	r2, #3
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101610:	f83e a018 	ldrh.w	sl, [lr, r8, lsl #1]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101614:	f83c 9019 	ldrh.w	r9, [ip, r9, lsl #1]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101618:	f83c 8018 	ldrh.w	r8, [ip, r8, lsl #1]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810161c:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101620:	fa10 f08a 	uxtah	r0, r0, sl
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101624:	fa11 f189 	uxtah	r1, r1, r9
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101628:	fa13 f388 	uxtah	r3, r3, r8
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810162c:	d1df      	bne.n	81015ee <ADC3DMATransferCompleteIRQCallback+0x4e>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810162e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8101632:	fbb7 f7f2 	udiv	r7, r7, r2
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101636:	fbb6 f6f2 	udiv	r6, r6, r2
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810163a:	fbb5 f5f2 	udiv	r5, r5, r2
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810163e:	fbb0 f0f2 	udiv	r0, r0, r2
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101642:	fbb3 f3f2 	udiv	r3, r3, r2
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101646:	fbb1 f1f2 	udiv	r1, r1, r2
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810164a:	9502      	str	r5, [sp, #8]
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810164c:	9305      	str	r3, [sp, #20]
 810164e:	4d23      	ldr	r5, [pc, #140]	; (81016dc <ADC3DMATransferCompleteIRQCallback+0x13c>)
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101650:	4a23      	ldr	r2, [pc, #140]	; (81016e0 <ADC3DMATransferCompleteIRQCallback+0x140>)
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101652:	9700      	str	r7, [sp, #0]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101654:	2300      	movs	r3, #0
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101656:	9601      	str	r6, [sp, #4]
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101658:	9003      	str	r0, [sp, #12]
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810165a:	9104      	str	r1, [sp, #16]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 810165c:	4668      	mov	r0, sp
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 810165e:	f644 661e 	movw	r6, #19998	; 0x4e1e
      channel_is_valid[_channel] = FALSE;
 8101662:	461f      	mov	r7, r3
      channel_is_valid[_channel] = TRUE;
 8101664:	f04f 0c01 	mov.w	ip, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101668:	f850 eb04 	ldr.w	lr, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 810166c:	f5ae 41b1 	sub.w	r1, lr, #22656	; 0x5880
 8101670:	3970      	subs	r1, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101672:	42b1      	cmp	r1, r6
 8101674:	d823      	bhi.n	81016be <ADC3DMATransferCompleteIRQCallback+0x11e>
      channel_is_valid[_channel] = TRUE;
 8101676:	f805 c003 	strb.w	ip, [r5, r3]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 810167a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 810167e:	b289      	uxth	r1, r1
 8101680:	458e      	cmp	lr, r1
        adc_channel_dynamic_offsets[_channel]++;
 8101682:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101686:	d913      	bls.n	81016b0 <ADC3DMATransferCompleteIRQCallback+0x110>
        adc_channel_dynamic_offsets[_channel]++;
 8101688:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 810168a:	b289      	uxth	r1, r1
 810168c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101690:	3301      	adds	r3, #1
 8101692:	2b06      	cmp	r3, #6
 8101694:	d1e8      	bne.n	8101668 <ADC3DMATransferCompleteIRQCallback+0xc8>
  setUserLED1State(FALSE);
 8101696:	2000      	movs	r0, #0
 8101698:	f000 fcb6 	bl	8102008 <setUserLED1State>
  if ( debug_output_enable )
 810169c:	7823      	ldrb	r3, [r4, #0]
 810169e:	b183      	cbz	r3, 81016c2 <ADC3DMATransferCompleteIRQCallback+0x122>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81016a0:	480a      	ldr	r0, [pc, #40]	; (81016cc <ADC3DMATransferCompleteIRQCallback+0x12c>)
 81016a2:	2200      	movs	r2, #0
 81016a4:	2104      	movs	r1, #4
}
 81016a6:	b006      	add	sp, #24
 81016a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81016ac:	f002 bd6a 	b.w	8104184 <HAL_GPIO_WritePin>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 81016b0:	b289      	uxth	r1, r1
 81016b2:	458e      	cmp	lr, r1
 81016b4:	d2ec      	bcs.n	8101690 <ADC3DMATransferCompleteIRQCallback+0xf0>
        adc_channel_dynamic_offsets[_channel]--;
 81016b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 81016ba:	3901      	subs	r1, #1
 81016bc:	e7e5      	b.n	810168a <ADC3DMATransferCompleteIRQCallback+0xea>
      channel_is_valid[_channel] = FALSE;
 81016be:	54ef      	strb	r7, [r5, r3]
 81016c0:	e7e6      	b.n	8101690 <ADC3DMATransferCompleteIRQCallback+0xf0>
}
 81016c2:	b006      	add	sp, #24
 81016c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81016c8:	10004594 	.word	0x10004594
 81016cc:	58022000 	.word	0x58022000
 81016d0:	100126e8 	.word	0x100126e8
 81016d4:	10003768 	.word	0x10003768
 81016d8:	10001b48 	.word	0x10001b48
 81016dc:	1000458e 	.word	0x1000458e
 81016e0:	10000058 	.word	0x10000058
 81016e4:	10000d38 	.word	0x10000d38
 81016e8:	10002958 	.word	0x10002958

081016ec <ADC3DMAHalfTransferIRQCallback>:
{
 81016ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ( debug_output_enable )
 81016f0:	4c48      	ldr	r4, [pc, #288]	; (8101814 <ADC3DMAHalfTransferIRQCallback+0x128>)
 81016f2:	7823      	ldrb	r3, [r4, #0]
{
 81016f4:	b086      	sub	sp, #24
  if ( debug_output_enable )
 81016f6:	b123      	cbz	r3, 8101702 <ADC3DMAHalfTransferIRQCallback+0x16>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 81016f8:	4847      	ldr	r0, [pc, #284]	; (8101818 <ADC3DMAHalfTransferIRQCallback+0x12c>)
 81016fa:	2201      	movs	r2, #1
 81016fc:	2104      	movs	r1, #4
 81016fe:	f002 fd41 	bl	8104184 <HAL_GPIO_WritePin>
  setUserLED1State(TRUE);
 8101702:	2001      	movs	r0, #1
 8101704:	f000 fc80 	bl	8102008 <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 8101708:	4a44      	ldr	r2, [pc, #272]	; (810181c <ADC3DMAHalfTransferIRQCallback+0x130>)
 810170a:	8813      	ldrh	r3, [r2, #0]
 810170c:	3301      	adds	r3, #1
 810170e:	b29b      	uxth	r3, r3
 8101710:	2b14      	cmp	r3, #20
 8101712:	8013      	strh	r3, [r2, #0]
 8101714:	d105      	bne.n	8101722 <ADC3DMAHalfTransferIRQCallback+0x36>
    fft_op_skip_counter = 0;
 8101716:	2300      	movs	r3, #0
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 8101718:	4941      	ldr	r1, [pc, #260]	; (8101820 <ADC3DMAHalfTransferIRQCallback+0x134>)
 810171a:	4842      	ldr	r0, [pc, #264]	; (8101824 <ADC3DMAHalfTransferIRQCallback+0x138>)
    fft_op_skip_counter = 0;
 810171c:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 810171e:	f7ff fec1 	bl	81014a4 <copySamplesForFFT>
{
 8101722:	2300      	movs	r3, #0
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101724:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 8101824 <ADC3DMAHalfTransferIRQCallback+0x138>
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101728:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8101820 <ADC3DMAHalfTransferIRQCallback+0x134>
{
 810172c:	461a      	mov	r2, r3
 810172e:	4619      	mov	r1, r3
 8101730:	4618      	mov	r0, r3
 8101732:	461d      	mov	r5, r3
 8101734:	461e      	mov	r6, r3
 8101736:	461f      	mov	r7, r3
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101738:	f83e 8013 	ldrh.w	r8, [lr, r3, lsl #1]
 810173c:	f103 0901 	add.w	r9, r3, #1
 8101740:	fa17 f788 	uxtah	r7, r7, r8
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101744:	f83c 8013 	ldrh.w	r8, [ip, r3, lsl #1]
 8101748:	fa16 f688 	uxtah	r6, r6, r8
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 810174c:	f83e 8019 	ldrh.w	r8, [lr, r9, lsl #1]
 8101750:	fa15 f588 	uxtah	r5, r5, r8
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101754:	f103 0802 	add.w	r8, r3, #2
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101758:	3303      	adds	r3, #3
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 810175a:	f83e a018 	ldrh.w	sl, [lr, r8, lsl #1]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 810175e:	f83c 9019 	ldrh.w	r9, [ip, r9, lsl #1]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101762:	f83c 8018 	ldrh.w	r8, [ip, r8, lsl #1]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101766:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 810176a:	fa10 f08a 	uxtah	r0, r0, sl
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 810176e:	fa11 f189 	uxtah	r1, r1, r9
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101772:	fa12 f288 	uxtah	r2, r2, r8
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101776:	d1df      	bne.n	8101738 <ADC3DMAHalfTransferIRQCallback+0x4c>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101778:	f44f 7316 	mov.w	r3, #600	; 0x258
 810177c:	fbb7 f7f3 	udiv	r7, r7, r3
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101780:	fbb6 f6f3 	udiv	r6, r6, r3
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101784:	fbb5 f5f3 	udiv	r5, r5, r3
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101788:	fbb0 f0f3 	udiv	r0, r0, r3
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810178c:	fbb2 f2f3 	udiv	r2, r2, r3
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101790:	fbb1 f1f3 	udiv	r1, r1, r3
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101794:	9502      	str	r5, [sp, #8]
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101796:	9205      	str	r2, [sp, #20]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101798:	2300      	movs	r3, #0
 810179a:	4d23      	ldr	r5, [pc, #140]	; (8101828 <ADC3DMAHalfTransferIRQCallback+0x13c>)
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 810179c:	4a23      	ldr	r2, [pc, #140]	; (810182c <ADC3DMAHalfTransferIRQCallback+0x140>)
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810179e:	9700      	str	r7, [sp, #0]
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81017a0:	9601      	str	r6, [sp, #4]
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81017a2:	9003      	str	r0, [sp, #12]
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81017a4:	9104      	str	r1, [sp, #16]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81017a6:	4668      	mov	r0, sp
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81017a8:	f644 661e 	movw	r6, #19998	; 0x4e1e
      channel_is_valid[_channel] = FALSE;
 81017ac:	461f      	mov	r7, r3
      channel_is_valid[_channel] = TRUE;
 81017ae:	f04f 0c01 	mov.w	ip, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81017b2:	f850 eb04 	ldr.w	lr, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 81017b6:	f5ae 41b1 	sub.w	r1, lr, #22656	; 0x5880
 81017ba:	3970      	subs	r1, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81017bc:	42b1      	cmp	r1, r6
 81017be:	d823      	bhi.n	8101808 <ADC3DMAHalfTransferIRQCallback+0x11c>
      channel_is_valid[_channel] = TRUE;
 81017c0:	f805 c003 	strb.w	ip, [r5, r3]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81017c4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 81017c8:	b289      	uxth	r1, r1
 81017ca:	458e      	cmp	lr, r1
        adc_channel_dynamic_offsets[_channel]++;
 81017cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81017d0:	d913      	bls.n	81017fa <ADC3DMAHalfTransferIRQCallback+0x10e>
        adc_channel_dynamic_offsets[_channel]++;
 81017d2:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 81017d4:	b289      	uxth	r1, r1
 81017d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81017da:	3301      	adds	r3, #1
 81017dc:	2b06      	cmp	r3, #6
 81017de:	d1e8      	bne.n	81017b2 <ADC3DMAHalfTransferIRQCallback+0xc6>
  setUserLED1State(FALSE);
 81017e0:	2000      	movs	r0, #0
 81017e2:	f000 fc11 	bl	8102008 <setUserLED1State>
  if ( debug_output_enable )
 81017e6:	7823      	ldrb	r3, [r4, #0]
 81017e8:	b183      	cbz	r3, 810180c <ADC3DMAHalfTransferIRQCallback+0x120>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81017ea:	480b      	ldr	r0, [pc, #44]	; (8101818 <ADC3DMAHalfTransferIRQCallback+0x12c>)
 81017ec:	2200      	movs	r2, #0
 81017ee:	2104      	movs	r1, #4
}
 81017f0:	b006      	add	sp, #24
 81017f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 81017f6:	f002 bcc5 	b.w	8104184 <HAL_GPIO_WritePin>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 81017fa:	b289      	uxth	r1, r1
 81017fc:	458e      	cmp	lr, r1
 81017fe:	d2ec      	bcs.n	81017da <ADC3DMAHalfTransferIRQCallback+0xee>
        adc_channel_dynamic_offsets[_channel]--;
 8101800:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8101804:	3901      	subs	r1, #1
 8101806:	e7e5      	b.n	81017d4 <ADC3DMAHalfTransferIRQCallback+0xe8>
      channel_is_valid[_channel] = FALSE;
 8101808:	54ef      	strb	r7, [r5, r3]
 810180a:	e7e6      	b.n	81017da <ADC3DMAHalfTransferIRQCallback+0xee>
}
 810180c:	b006      	add	sp, #24
 810180e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101812:	bf00      	nop
 8101814:	10004594 	.word	0x10004594
 8101818:	58022000 	.word	0x58022000
 810181c:	100126e8 	.word	0x100126e8
 8101820:	10002958 	.word	0x10002958
 8101824:	10000d38 	.word	0x10000d38
 8101828:	1000458e 	.word	0x1000458e
 810182c:	10000058 	.word	0x10000058

08101830 <dspEntry>:
{
 8101830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101834:	ed2d 8b02 	vpush	{d8}
 8101838:	b083      	sub	sp, #12
  IPCInitialize( );
 810183a:	f000 fb45 	bl	8101ec8 <IPCInitialize>
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 810183e:	2108      	movs	r1, #8
 8101840:	48cb      	ldr	r0, [pc, #812]	; (8101b70 <dspEntry+0x340>)
  ADC1->CR |= ADC_CR_BOOST;
 8101842:	4dcc      	ldr	r5, [pc, #816]	; (8101b74 <dspEntry+0x344>)
  ADC3->CR |= ADC_CR_BOOST;
 8101844:	4ccc      	ldr	r4, [pc, #816]	; (8101b78 <dspEntry+0x348>)
    if ( fft_samples_ready )
 8101846:	f8df b39c 	ldr.w	fp, [pc, #924]	; 8101be4 <dspEntry+0x3b4>
{
  //if (!RUN_ONCE) printf("In perform FFT\r\n");
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
  {
	//if (!RUN_ONCE) printf("In arm_rfft\r\n");
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 810184a:	4ecc      	ldr	r6, [pc, #816]	; (8101b7c <dspEntry+0x34c>)
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 810184c:	f002 fc94 	bl	8104178 <HAL_GPIO_ReadPin>
 8101850:	4bcb      	ldr	r3, [pc, #812]	; (8101b80 <dspEntry+0x350>)
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101852:	4acc      	ldr	r2, [pc, #816]	; (8101b84 <dspEntry+0x354>)
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101854:	fab0 f080 	clz	r0, r0
 8101858:	0940      	lsrs	r0, r0, #5
 810185a:	7018      	strb	r0, [r3, #0]
  ADC1->CR |= ADC_CR_BOOST;
 810185c:	68ab      	ldr	r3, [r5, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 810185e:	48ca      	ldr	r0, [pc, #808]	; (8101b88 <dspEntry+0x358>)
  ADC1->CR |= ADC_CR_BOOST;
 8101860:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101864:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_BOOST;
 8101866:	68a3      	ldr	r3, [r4, #8]
 8101868:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 810186c:	60a3      	str	r3, [r4, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 810186e:	2101      	movs	r1, #1
 8101870:	f002 fb70 	bl	8103f54 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_CPLT_CB_ID, ADC3DMATransferCompleteIRQCallback);
 8101874:	4ac5      	ldr	r2, [pc, #788]	; (8101b8c <dspEntry+0x35c>)
 8101876:	48c4      	ldr	r0, [pc, #784]	; (8101b88 <dspEntry+0x358>)
 8101878:	2100      	movs	r1, #0
 810187a:	f002 fb6b 	bl	8103f54 <HAL_DMA_RegisterCallback>
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 810187e:	4bc4      	ldr	r3, [pc, #784]	; (8101b90 <dspEntry+0x360>)
  ADC_Enable( &hadc1 );
 8101880:	48c4      	ldr	r0, [pc, #784]	; (8101b94 <dspEntry+0x364>)
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101882:	691a      	ldr	r2, [r3, #16]
 8101884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101888:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 810188a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 810188e:	4ac2      	ldr	r2, [pc, #776]	; (8101b98 <dspEntry+0x368>)
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101890:	6159      	str	r1, [r3, #20]
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101892:	619a      	str	r2, [r3, #24]
  DMA1_Stream0->M0AR = (uint32_t)adc1_read_buffer;
 8101894:	4ac1      	ldr	r2, [pc, #772]	; (8101b9c <dspEntry+0x36c>)
 8101896:	61da      	str	r2, [r3, #28]
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 8101898:	691a      	ldr	r2, [r3, #16]
 810189a:	f042 0201 	orr.w	r2, r2, #1
 810189e:	611a      	str	r2, [r3, #16]
  DMA1->LIFCR = DMA_LIFCR_CTCIF1;
 81018a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81018a4:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE | DMA_SxCR_CIRC;
 81018a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81018a8:	f442 728c 	orr.w	r2, r2, #280	; 0x118
 81018ac:	629a      	str	r2, [r3, #40]	; 0x28
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 81018ae:	4abc      	ldr	r2, [pc, #752]	; (8101ba0 <dspEntry+0x370>)
  DMA1_Stream1->NDTR = ADC3_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 81018b0:	62d9      	str	r1, [r3, #44]	; 0x2c
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 81018b2:	631a      	str	r2, [r3, #48]	; 0x30
  DMA1_Stream1->M0AR = (uint32_t)adc3_read_buffer;
 81018b4:	4abb      	ldr	r2, [pc, #748]	; (8101ba4 <dspEntry+0x374>)
 81018b6:	635a      	str	r2, [r3, #52]	; 0x34
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 81018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81018ba:	f042 0201 	orr.w	r2, r2, #1
 81018be:	629a      	str	r2, [r3, #40]	; 0x28
  ADC_Enable( &hadc1 );
 81018c0:	f001 f820 	bl	8102904 <ADC_Enable>
  ADC_Enable( &hadc3 );
 81018c4:	48b8      	ldr	r0, [pc, #736]	; (8101ba8 <dspEntry+0x378>)
 81018c6:	f001 f81d 	bl	8102904 <ADC_Enable>
  while(!(ADC1->ISR | ADC_ISR_ADRDY) || !(ADC3->ISR | ADC_ISR_ADRDY));
 81018ca:	682b      	ldr	r3, [r5, #0]
 81018cc:	6823      	ldr	r3, [r4, #0]
  ADC1->CR |= ADC_CR_ADSTART;
 81018ce:	68ab      	ldr	r3, [r5, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 81018d0:	4ab6      	ldr	r2, [pc, #728]	; (8101bac <dspEntry+0x37c>)
  HAL_TIM_Base_Start( &htim3 );
 81018d2:	48b7      	ldr	r0, [pc, #732]	; (8101bb0 <dspEntry+0x380>)
  ADC1->CR |= ADC_CR_ADSTART;
 81018d4:	f043 0304 	orr.w	r3, r3, #4
 81018d8:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_ADSTART;
 81018da:	68a3      	ldr	r3, [r4, #8]
 81018dc:	f043 0304 	orr.w	r3, r3, #4
 81018e0:	60a3      	str	r3, [r4, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 81018e2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 81018e4:	f043 0302 	orr.w	r3, r3, #2
 81018e8:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM3->ARR = 750;
 81018ea:	4bb2      	ldr	r3, [pc, #712]	; (8101bb4 <dspEntry+0x384>)
 81018ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 81018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CCR1 = 375;
 81018f2:	f240 1277 	movw	r2, #375	; 0x177
 81018f6:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCER |= TIM_CCER_CC1E;
 81018f8:	6a1a      	ldr	r2, [r3, #32]
 81018fa:	f042 0201 	orr.w	r2, r2, #1
 81018fe:	621a      	str	r2, [r3, #32]
  HAL_TIM_Base_Start( &htim3 );
 8101900:	f004 f83c 	bl	810597c <HAL_TIM_Base_Start>
  arm_rfft_fast_init_f32( &fft_handler, FFT_BATCH_SIZE );
 8101904:	48ac      	ldr	r0, [pc, #688]	; (8101bb8 <dspEntry+0x388>)
 8101906:	f44f 7100 	mov.w	r1, #512	; 0x200
 810190a:	f006 fb79 	bl	8108000 <arm_rfft_fast_init_f32>
  float_union.valueu8[0] = 0x55;
 810190e:	4bab      	ldr	r3, [pc, #684]	; (8101bbc <dspEntry+0x38c>)
 8101910:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8101914:	601a      	str	r2, [r3, #0]
    if ( fft_samples_ready )
 8101916:	f89b 3000 	ldrb.w	r3, [fp]
 810191a:	2b00      	cmp	r3, #0
 810191c:	d0fb      	beq.n	8101916 <dspEntry+0xe6>
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 810191e:	4da8      	ldr	r5, [pc, #672]	; (8101bc0 <dspEntry+0x390>)
 8101920:	2400      	movs	r4, #0
 8101922:	1932      	adds	r2, r6, r4
 8101924:	1929      	adds	r1, r5, r4
 8101926:	48a4      	ldr	r0, [pc, #656]	; (8101bb8 <dspEntry+0x388>)
 8101928:	2300      	movs	r3, #0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 810192a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 810192e:	f006 fafd 	bl	8107f2c <arm_rfft_fast_f32>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101932:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
 8101936:	d1f4      	bne.n	8101922 <dspEntry+0xf2>
    {
#ifdef FFT_AVERAGING
      // compute magnitude, correct for dc offset, save value to current magnitude buffer

      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101938:	ed9f 8aa2 	vldr	s16, [pc, #648]	; 8101bc4 <dspEntry+0x394>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 810193c:	4fa2      	ldr	r7, [pc, #648]	; (8101bc8 <dspEntry+0x398>)
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 810193e:	2500      	movs	r5, #0
	  for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101940:	2400      	movs	r4, #0
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101942:	026b      	lsls	r3, r5, #9
 8101944:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8101948:	eb03 0344 	add.w	r3, r3, r4, lsl #1
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 810194c:	3301      	adds	r3, #1
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 810194e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101952:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101956:	edd2 7a00 	vldr	s15, [r2]
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 810195a:	ed93 0a00 	vldr	s0, [r3]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 810195e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8101962:	ee67 7a88 	vmul.f32	s15, s15, s16
  return sqrtf(_real * _real + _compl * _compl);
 8101966:	ee20 0a00 	vmul.f32	s0, s0, s0
 810196a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 810196e:	f00c ffaf 	bl	810e8d0 <sqrtf>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101972:	f00c ff7f 	bl	810e874 <log10f>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101976:	883b      	ldrh	r3, [r7, #0]

      // sampling for noise floor at startup
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101978:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8101be8 <dspEntry+0x3b8>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 810197c:	4993      	ldr	r1, [pc, #588]	; (8101bcc <dspEntry+0x39c>)
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 810197e:	f8bc 2000 	ldrh.w	r2, [ip]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101982:	00e8      	lsls	r0, r5, #3
 8101984:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8101988:	fa10 f383 	uxtah	r3, r0, r3
 810198c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8101990:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101994:	eb01 0383 	add.w	r3, r1, r3, lsl #2
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101998:	2a27      	cmp	r2, #39	; 0x27
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 810199a:	ed83 0a00 	vstr	s0, [r3]
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 810199e:	d821      	bhi.n	81019e4 <dspEntry+0x1b4>
      {
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 81019a0:	883b      	ldrh	r3, [r7, #0]
              > fft_noise_floor[_i] )
 81019a2:	f8df e234 	ldr.w	lr, [pc, #564]	; 8101bd8 <dspEntry+0x3a8>
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 81019a6:	fa10 f383 	uxtah	r3, r0, r3
 81019aa:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 81019ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 81019b2:	ed93 7a00 	vldr	s14, [r3]
              > fft_noise_floor[_i] )
 81019b6:	eb0e 0384 	add.w	r3, lr, r4, lsl #2
 81019ba:	edd3 7a00 	vldr	s15, [r3]
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 81019be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              > fft_noise_floor[_i] )
 81019c6:	ea4f 0884 	mov.w	r8, r4, lsl #2
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 81019ca:	dc00      	bgt.n	81019ce <dspEntry+0x19e>
            || ( noise_floor_samples == 0 ))
 81019cc:	b952      	cbnz	r2, 81019e4 <dspEntry+0x1b4>
        {
          fft_noise_floor[_i] = fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i];
 81019ce:	883b      	ldrh	r3, [r7, #0]
 81019d0:	fa10 f383 	uxtah	r3, r0, r3
 81019d4:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 81019d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 81019dc:	44c6      	add	lr, r8
 81019de:	681b      	ldr	r3, [r3, #0]
 81019e0:	f8ce 3000 	str.w	r3, [lr]
        }
      }

      // perform average calculation for this channel and magnitude index
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 81019e4:	eb04 23c5 	add.w	r3, r4, r5, lsl #11
 81019e8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 81019ec:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8101bec <dspEntry+0x3bc>
 81019f0:	f8d3 8000 	ldr.w	r8, [r3]
 81019f4:	eb04 2305 	add.w	r3, r4, r5, lsl #8
 81019f8:	eb0e 0383 	add.w	r3, lr, r3, lsl #2

      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 81019fc:	f04f 0901 	mov.w	r9, #1
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 8101a00:	f8c3 8000 	str.w	r8, [r3]
      {

        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101a04:	eb00 0809 	add.w	r8, r0, r9
 8101a08:	eb04 2808 	add.w	r8, r4, r8, lsl #8
 8101a0c:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 8101a10:	edd8 7a00 	vldr	s15, [r8]
 8101a14:	ed93 7a00 	vldr	s14, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101a18:	f109 0901 	add.w	r9, r9, #1
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101a20:	f1b9 0f08 	cmp.w	r9, #8
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101a24:	edc3 7a00 	vstr	s15, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101a28:	d1ec      	bne.n	8101a04 <dspEntry+0x1d4>
      }

      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101a2a:	edd3 7a00 	vldr	s15, [r3]
 8101a2e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8101a32:	ee67 7a87 	vmul.f32	s15, s15, s14
	  for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101a36:	3401      	adds	r4, #1
 8101a38:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101a3c:	edc3 7a00 	vstr	s15, [r3]
	  for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101a40:	f47f af7f 	bne.w	8101942 <dspEntry+0x112>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101a44:	3501      	adds	r5, #1
 8101a46:	2d06      	cmp	r5, #6
 8101a48:	f47f af7a 	bne.w	8101940 <dspEntry+0x110>
    noise_floor_samples++;
  }

  // increment fft buffer index for next iteration

  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a4c:	883b      	ldrh	r3, [r7, #0]
  boolean_t _anomaly_detected = FALSE;

  // for each channel
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
  {
    _largest_magnitude_db = -200.0f;
 8101a4e:	eddf 5a60 	vldr	s11, [pc, #384]	; 8101bd0 <dspEntry+0x3a0>
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
    {
      // save bin and magnitude of bin with largest magnitude relative to the
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
                  + fft_trigger_threshold_offset_db))
 8101a52:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8101bf0 <dspEntry+0x3c0>
  if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101a56:	2a27      	cmp	r2, #39	; 0x27
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a58:	f103 0301 	add.w	r3, r3, #1
  boolean_t _anomaly_detected = FALSE;
 8101a5c:	f04f 0000 	mov.w	r0, #0
    noise_floor_samples++;
 8101a60:	bf98      	it	ls
 8101a62:	3201      	addls	r2, #1
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a64:	f003 0307 	and.w	r3, r3, #7
    noise_floor_samples++;
 8101a68:	bf98      	it	ls
 8101a6a:	f8ac 2000 	strhls.w	r2, [ip]
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a6e:	803b      	strh	r3, [r7, #0]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101a70:	f8df c180 	ldr.w	ip, [pc, #384]	; 8101bf4 <dspEntry+0x3c4>
        _anomaly_detected = TRUE;
      }
    }

    // update ultrasonic POIs for this channel
    channel_is_active_anomaly[channel] = _channel_active;
 8101a74:	4f57      	ldr	r7, [pc, #348]	; (8101bd4 <dspEntry+0x3a4>)
  uint16_t _largest_magnitude_bin = 0;
 8101a76:	ee06 0a10 	vmov	s12, r0
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101a7a:	4601      	mov	r1, r0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101a7c:	4664      	mov	r4, ip
    _channel_active = FALSE;
 8101a7e:	f04f 0900 	mov.w	r9, #0
    _largest_magnitude_db = -200.0f;
 8101a82:	eef0 7a65 	vmov.f32	s15, s11
 8101a86:	222a      	movs	r2, #42	; 0x2a
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a88:	ea4f 2a01 	mov.w	sl, r1, lsl #8
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a8c:	4d52      	ldr	r5, [pc, #328]	; (8101bd8 <dspEntry+0x3a8>)
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a8e:	eb0a 0302 	add.w	r3, sl, r2
 8101a92:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a96:	eb05 0582 	add.w	r5, r5, r2, lsl #2
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a9a:	ed93 7a00 	vldr	s14, [r3]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a9e:	edd5 6a00 	vldr	s13, [r5]
                  + fft_trigger_threshold_offset_db))
 8101aa2:	ed98 5a00 	vldr	s10, [r8]
 8101aa6:	ee76 6a85 	vadd.f32	s13, s13, s10
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101aaa:	ee37 7a66 	vsub.f32	s14, s14, s13
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101ab6:	d50c      	bpl.n	8101ad2 <dspEntry+0x2a2>
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101ab8:	edd3 7a00 	vldr	s15, [r3]
                             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101abc:	ed95 7a00 	vldr	s14, [r5]
                                    + fft_trigger_threshold_offset_db);
 8101ac0:	edd8 6a00 	vldr	s13, [r8]
 8101ac4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8101ac8:	b293      	uxth	r3, r2
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
        _largest_magnitude_bin = bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW;
 8101ace:	ee06 3a10 	vmov	s12, r3
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101ad2:	eb0a 0302 	add.w	r3, sl, r2
 8101ad6:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8101ada:	edd3 6a00 	vldr	s13, [r3]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101ade:	4b3e      	ldr	r3, [pc, #248]	; (8101bd8 <dspEntry+0x3a8>)
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101ae0:	7825      	ldrb	r5, [r4, #0]
 8101ae2:	9401      	str	r4, [sp, #4]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101ae4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8101ae8:	ed93 7a00 	vldr	s14, [r3]
                         + fft_trigger_threshold_offset_db ))
 8101aec:	ed98 5a00 	vldr	s10, [r8]
 8101af0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8101af4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101af8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8101afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101b00:	f2c0 810d 	blt.w	8101d1e <dspEntry+0x4ee>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101b04:	2b18      	cmp	r3, #24
 8101b06:	d001      	beq.n	8101b0c <dspEntry+0x2dc>
 8101b08:	1c6b      	adds	r3, r5, #1
 8101b0a:	b2db      	uxtb	r3, r3
      if ( fft_magnitude_trigger_counter[channel][bin_index] >= FFT_DETECT_THRESHOLD_RISING_COUNT )
 8101b0c:	2b0d      	cmp	r3, #13
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101b0e:	7023      	strb	r3, [r4, #0]
        fft_magnitude_trigger_counter[channel][bin_index] |= FFT_DETECT_BIN_ACTIVE_FLAG;
 8101b10:	bf84      	itt	hi
 8101b12:	f063 037f 	ornhi	r3, r3, #127	; 0x7f
 8101b16:	7023      	strbhi	r3, [r4, #0]
      if ( fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_BIN_ACTIVE_FLAG )
 8101b18:	9b01      	ldr	r3, [sp, #4]
 8101b1a:	f993 3000 	ldrsb.w	r3, [r3]
 8101b1e:	2b00      	cmp	r3, #0
        _anomaly_detected = TRUE;
 8101b20:	bfb8      	it	lt
 8101b22:	2001      	movlt	r0, #1
 8101b24:	f102 0201 	add.w	r2, r2, #1
        _channel_active = TRUE;
 8101b28:	bfb8      	it	lt
 8101b2a:	4681      	movlt	r9, r0
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101b2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8101b30:	f104 0401 	add.w	r4, r4, #1
 8101b34:	d1aa      	bne.n	8101a8c <dspEntry+0x25c>
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101b36:	4c29      	ldr	r4, [pc, #164]	; (8101bdc <dspEntry+0x3ac>)
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101b38:	4d29      	ldr	r5, [pc, #164]	; (8101be0 <dspEntry+0x3b0>)
    channel_is_active_anomaly[channel] = _channel_active;
 8101b3a:	f807 9001 	strb.w	r9, [r7, r1]
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101b3e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8101b42:	edc3 7a00 	vstr	s15, [r3]
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101b46:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8101b4a:	eef8 7a46 	vcvt.f32.u32	s15, s12
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101b4e:	3101      	adds	r1, #1
 8101b50:	2906      	cmp	r1, #6
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101b52:	edc3 7a00 	vstr	s15, [r3]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101b56:	f10c 0cd6 	add.w	ip, ip, #214	; 0xd6
 8101b5a:	d18f      	bne.n	8101a7c <dspEntry+0x24c>
  }

  // increment previous/current detect state
  anomaly_detect_state_previous = anomaly_detect_state_current;
  anomaly_detect_state_current = _anomaly_detected;
 8101b5c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8101bf8 <dspEntry+0x3c8>
      fft_results_ready = TRUE;
 8101b60:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8101bfc <dspEntry+0x3cc>
  anomaly_detect_state_current = _anomaly_detected;
 8101b64:	f889 0000 	strb.w	r0, [r9]

  setUserLED2State( anomaly_detect_state_current );
 8101b68:	f000 fa58 	bl	810201c <setUserLED2State>
      fft_results_ready = TRUE;
 8101b6c:	2301      	movs	r3, #1
 8101b6e:	e04d      	b.n	8101c0c <dspEntry+0x3dc>
 8101b70:	58020c00 	.word	0x58020c00
 8101b74:	40022000 	.word	0x40022000
 8101b78:	58026000 	.word	0x58026000
 8101b7c:	100126ec 	.word	0x100126ec
 8101b80:	10004594 	.word	0x10004594
 8101b84:	081016ed 	.word	0x081016ed
 8101b88:	10000cbc 	.word	0x10000cbc
 8101b8c:	081015a1 	.word	0x081015a1
 8101b90:	40020000 	.word	0x40020000
 8101b94:	10000b7c 	.word	0x10000b7c
 8101b98:	40022040 	.word	0x40022040
 8101b9c:	10000d38 	.word	0x10000d38
 8101ba0:	58026040 	.word	0x58026040
 8101ba4:	10002958 	.word	0x10002958
 8101ba8:	10000be0 	.word	0x10000be0
 8101bac:	5c001000 	.word	0x5c001000
 8101bb0:	10018704 	.word	0x10018704
 8101bb4:	40000400 	.word	0x40000400
 8101bb8:	10011dcc 	.word	0x10011dcc
 8101bbc:	100186f4 	.word	0x100186f4
 8101bc0:	100156f0 	.word	0x100156f0
 8101bc4:	3c800000 	.word	0x3c800000
 8101bc8:	10011dc8 	.word	0x10011dc8
 8101bcc:	100045c8 	.word	0x100045c8
 8101bd0:	c3480000 	.word	0xc3480000
 8101bd4:	10004588 	.word	0x10004588
 8101bd8:	100122e8 	.word	0x100122e8
 8101bdc:	100045b0 	.word	0x100045b0
 8101be0:	10004598 	.word	0x10004598
 8101be4:	100186f0 	.word	0x100186f0
 8101be8:	100186f8 	.word	0x100186f8
 8101bec:	100105c8 	.word	0x100105c8
 8101bf0:	10000064 	.word	0x10000064
 8101bf4:	10011de4 	.word	0x10011de4
 8101bf8:	10004578 	.word	0x10004578
 8101bfc:	100156ec 	.word	0x100156ec
 8101c00:	00000000 	.word	0x00000000
 8101c04:	486a6000 	.word	0x486a6000
 8101c08:	3b000000 	.word	0x3b000000
 8101c0c:	f888 3000 	strb.w	r3, [r8]
// Only capable of generating one set of values, does not handle multiple anomalies
static void anomalyUpdateCharacteristics( void )
{
  // Anomaly frequency, ** just potato averaging of active microphone frequencies **
  //if(!RUN_ONCE) printf("In perform anomalyUpdateCharacteristics\r\n");
  float _sum = 0.0f;
 8101c10:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 8101c00 <dspEntry+0x3d0>
  // sum of frequencies of active channels
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
  {
    if ( channel_is_active_anomaly[_channel] )
    {
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101c14:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8101c04 <dspEntry+0x3d4>
 8101c18:	ed1f 6a05 	vldr	s12, [pc, #-20]	; 8101c08 <dspEntry+0x3d8>
      fft_samples_ready = FALSE;
 8101c1c:	2300      	movs	r3, #0
 8101c1e:	f88b 3000 	strb.w	r3, [fp]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101c22:	461a      	mov	r2, r3
    if ( channel_is_active_anomaly[_channel] )
 8101c24:	5cb9      	ldrb	r1, [r7, r2]
 8101c26:	b149      	cbz	r1, 8101c3c <dspEntry+0x40c>
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101c28:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8101c2c:	edd1 7a00 	vldr	s15, [r1]
 8101c30:	ee67 7a87 	vmul.f32	s15, s15, s14
      _active_channels++;
 8101c34:	3301      	adds	r3, #1
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101c36:	eee7 6a86 	vfma.f32	s13, s15, s12
      _active_channels++;
 8101c3a:	b2db      	uxtb	r3, r3
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101c3c:	3201      	adds	r2, #1
 8101c3e:	2a06      	cmp	r2, #6
 8101c40:	d1f0      	bne.n	8101c24 <dspEntry+0x3f4>
  if ( _active_channels == 0 )
  {
    anomaly_frequency = 20000.0f;
  }

  anomaly_frequency = _sum / _active_channels;
 8101c42:	ee07 3a90 	vmov	s15, r3
 8101c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101c4a:	4d43      	ldr	r5, [pc, #268]	; (8101d58 <dspEntry+0x528>)

  // normalized frequency
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101c4c:	4b43      	ldr	r3, [pc, #268]	; (8101d5c <dspEntry+0x52c>)
  anomaly_frequency = _sum / _active_channels;
 8101c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101c52:	eddf 7a43 	vldr	s15, [pc, #268]	; 8101d60 <dspEntry+0x530>
 8101c56:	eddf 6a43 	vldr	s13, [pc, #268]	; 8101d64 <dspEntry+0x534>
  anomaly_frequency = _sum / _active_channels;
 8101c5a:	ed85 7a00 	vstr	s14, [r5]
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101c5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101c66:	edc3 7a00 	vstr	s15, [r3]

  // magnitude, ** also potato but functional **
  float _largest = -200.0f;
 8101c6a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8101d68 <dspEntry+0x538>

  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101c6e:	2300      	movs	r3, #0
  {
    if (( fft_channel_magnitude_db[_channel] > _largest )
 8101c70:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8101c74:	ed92 7a00 	vldr	s14, [r2]
 8101c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101c80:	dd03      	ble.n	8101c8a <dspEntry+0x45a>
        && ( channel_is_active_anomaly[_channel] ))
 8101c82:	5cf9      	ldrb	r1, [r7, r3]
 8101c84:	b109      	cbz	r1, 8101c8a <dspEntry+0x45a>
    {
      _largest = fft_channel_magnitude_db[_channel];
 8101c86:	edd2 7a00 	vldr	s15, [r2]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101c8a:	3301      	adds	r3, #1
 8101c8c:	2b06      	cmp	r3, #6
 8101c8e:	d1ef      	bne.n	8101c70 <dspEntry+0x440>
    }
  }

  anomaly_magnitude = _largest;
 8101c90:	4c36      	ldr	r4, [pc, #216]	; (8101d6c <dspEntry+0x53c>)

  // update inter-processor communication (shared RAM region)
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101c92:	f899 0000 	ldrb.w	r0, [r9]
  anomaly_magnitude = _largest;
 8101c96:	edc4 7a00 	vstr	s15, [r4]
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101c9a:	f000 f92b 	bl	8101ef4 <IPCSetAnomalyDetectState>
  IPCSetAnomalyFrequency( anomaly_frequency );
 8101c9e:	ed95 0a00 	vldr	s0, [r5]
 8101ca2:	f000 f92d 	bl	8101f00 <IPCSetAnomalyFrequency>
  IPCSetAnomalyMagnitudedB( anomaly_magnitude );
 8101ca6:	ed94 0a00 	vldr	s0, [r4]
      if(anomaly_detect_state_current & (((SKIP_N_SAMPLES_READY % 40) == 0) || (SKIP_N_SAMPLES_READY == 0)))
 8101caa:	4c31      	ldr	r4, [pc, #196]	; (8101d70 <dspEntry+0x540>)
  IPCSetAnomalyMagnitudedB( anomaly_magnitude );
 8101cac:	f000 f92e 	bl	8101f0c <IPCSetAnomalyMagnitudedB>
      if(anomaly_detect_state_current & (((SKIP_N_SAMPLES_READY % 40) == 0) || (SKIP_N_SAMPLES_READY == 0)))
 8101cb0:	6823      	ldr	r3, [r4, #0]
 8101cb2:	f899 1000 	ldrb.w	r1, [r9]
 8101cb6:	2028      	movs	r0, #40	; 0x28
 8101cb8:	fb93 f2f0 	sdiv	r2, r3, r0
 8101cbc:	fb00 3212 	mls	r2, r0, r2, r3
 8101cc0:	b10a      	cbz	r2, 8101cc6 <dspEntry+0x496>
 8101cc2:	2b00      	cmp	r3, #0
 8101cc4:	d131      	bne.n	8101d2a <dspEntry+0x4fa>
 8101cc6:	07ca      	lsls	r2, r1, #31
 8101cc8:	d52f      	bpl.n	8101d2a <dspEntry+0x4fa>
    	    MX_X_CUBE_AI_Process(fft_frequency_magnitude_db_average);
 8101cca:	482a      	ldr	r0, [pc, #168]	; (8101d74 <dspEntry+0x544>)
 8101ccc:	f005 f8e8 	bl	8106ea0 <MX_X_CUBE_AI_Process>
      	    SKIP_N_SAMPLES_READY = 1;
 8101cd0:	2301      	movs	r3, #1
      else if (anomaly_detect_state_current) SKIP_N_SAMPLES_READY++;
 8101cd2:	6023      	str	r3, [r4, #0]
      user_button_state_previous = user_button_state_current;
 8101cd4:	4d28      	ldr	r5, [pc, #160]	; (8101d78 <dspEntry+0x548>)
 8101cd6:	4c29      	ldr	r4, [pc, #164]	; (8101d7c <dspEntry+0x54c>)
 8101cd8:	782b      	ldrb	r3, [r5, #0]
 8101cda:	7023      	strb	r3, [r4, #0]
      user_button_state_current = getUserButtonState( );
 8101cdc:	f000 f988 	bl	8101ff0 <getUserButtonState>
 8101ce0:	7028      	strb	r0, [r5, #0]
      if ( user_button_state_current && !user_button_state_previous )
 8101ce2:	b138      	cbz	r0, 8101cf4 <dspEntry+0x4c4>
 8101ce4:	7823      	ldrb	r3, [r4, #0]
 8101ce6:	b92b      	cbnz	r3, 8101cf4 <dspEntry+0x4c4>
        uart_data_flag = (uart_data_flag ? FALSE : TRUE);
 8101ce8:	4a25      	ldr	r2, [pc, #148]	; (8101d80 <dspEntry+0x550>)
 8101cea:	7813      	ldrb	r3, [r2, #0]
 8101cec:	fab3 f383 	clz	r3, r3
 8101cf0:	095b      	lsrs	r3, r3, #5
 8101cf2:	7013      	strb	r3, [r2, #0]
      if ( fft_results_ready && uart_data_flag )
 8101cf4:	f898 3000 	ldrb.w	r3, [r8]
 8101cf8:	2b00      	cmp	r3, #0
 8101cfa:	f43f ae0c 	beq.w	8101916 <dspEntry+0xe6>
 8101cfe:	4b20      	ldr	r3, [pc, #128]	; (8101d80 <dspEntry+0x550>)
 8101d00:	781b      	ldrb	r3, [r3, #0]
 8101d02:	2b00      	cmp	r3, #0
 8101d04:	f43f ae07 	beq.w	8101916 <dspEntry+0xe6>
        usart_data_skip_counter++;
 8101d08:	4a1e      	ldr	r2, [pc, #120]	; (8101d84 <dspEntry+0x554>)
 8101d0a:	8813      	ldrh	r3, [r2, #0]
 8101d0c:	3301      	adds	r3, #1
 8101d0e:	b29b      	uxth	r3, r3
        if ( usart_data_skip_counter >= USART_SKIP_N_DATA_SETS )
 8101d10:	2b04      	cmp	r3, #4
 8101d12:	d80e      	bhi.n	8101d32 <dspEntry+0x502>
        usart_data_skip_counter++;
 8101d14:	8013      	strh	r3, [r2, #0]
        fft_results_ready = FALSE;
 8101d16:	2300      	movs	r3, #0
 8101d18:	f888 3000 	strb.w	r3, [r8]
 8101d1c:	e5fb      	b.n	8101916 <dspEntry+0xe6>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101d1e:	2b00      	cmp	r3, #0
 8101d20:	f43f aef4 	beq.w	8101b0c <dspEntry+0x2dc>
 8101d24:	3d01      	subs	r5, #1
 8101d26:	b2eb      	uxtb	r3, r5
 8101d28:	e6f0      	b.n	8101b0c <dspEntry+0x2dc>
      else if (anomaly_detect_state_current) SKIP_N_SAMPLES_READY++;
 8101d2a:	2900      	cmp	r1, #0
 8101d2c:	d0d2      	beq.n	8101cd4 <dspEntry+0x4a4>
 8101d2e:	3301      	adds	r3, #1
 8101d30:	e7cf      	b.n	8101cd2 <dspEntry+0x4a2>
          usart_data_skip_counter = 0;
 8101d32:	2300      	movs	r3, #0
 8101d34:	8013      	strh	r3, [r2, #0]
          status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 8101d36:	4914      	ldr	r1, [pc, #80]	; (8101d88 <dspEntry+0x558>)
 8101d38:	4814      	ldr	r0, [pc, #80]	; (8101d8c <dspEntry+0x55c>)
          while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8101d3a:	4c0e      	ldr	r4, [pc, #56]	; (8101d74 <dspEntry+0x544>)
 8101d3c:	4d13      	ldr	r5, [pc, #76]	; (8101d8c <dspEntry+0x55c>)
          status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 8101d3e:	2204      	movs	r2, #4
 8101d40:	f004 f938 	bl	8105fb4 <HAL_UART_Transmit_DMA>
          while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8101d44:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8101d48:	4621      	mov	r1, r4
 8101d4a:	4628      	mov	r0, r5
 8101d4c:	f004 f932 	bl	8105fb4 <HAL_UART_Transmit_DMA>
                == HAL_BUSY );
 8101d50:	2802      	cmp	r0, #2
 8101d52:	d1e0      	bne.n	8101d16 <dspEntry+0x4e6>
 8101d54:	e7f6      	b.n	8101d44 <dspEntry+0x514>
 8101d56:	bf00      	nop
 8101d58:	1000457c 	.word	0x1000457c
 8101d5c:	10004580 	.word	0x10004580
 8101d60:	469c4000 	.word	0x469c4000
 8101d64:	47c35000 	.word	0x47c35000
 8101d68:	c3480000 	.word	0xc3480000
 8101d6c:	10004584 	.word	0x10004584
 8101d70:	10000d34 	.word	0x10000d34
 8101d74:	100105c8 	.word	0x100105c8
 8101d78:	100186fe 	.word	0x100186fe
 8101d7c:	100186ff 	.word	0x100186ff
 8101d80:	100186fa 	.word	0x100186fa
 8101d84:	100186fc 	.word	0x100186fc
 8101d88:	100186f4 	.word	0x100186f4
 8101d8c:	100187c8 	.word	0x100187c8

08101d90 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101d92:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d94:	2214      	movs	r2, #20
 8101d96:	2100      	movs	r1, #0
 8101d98:	a807      	add	r0, sp, #28
 8101d9a:	f009 fa73 	bl	810b284 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d9e:	4b45      	ldr	r3, [pc, #276]	; (8101eb4 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101da0:	4f45      	ldr	r7, [pc, #276]	; (8101eb8 <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101da2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8101da6:	4e45      	ldr	r6, [pc, #276]	; (8101ebc <MX_GPIO_Init+0x12c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101da8:	f042 0202 	orr.w	r2, r2, #2
 8101dac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101db4:	f002 0202 	and.w	r2, r2, #2
 8101db8:	9200      	str	r2, [sp, #0]
 8101dba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101dbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101dc0:	f042 0208 	orr.w	r2, r2, #8
 8101dc4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101dc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101dcc:	f002 0208 	and.w	r2, r2, #8
 8101dd0:	9201      	str	r2, [sp, #4]
 8101dd2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8101dd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101ddc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101de0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101de4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8101de8:	9202      	str	r2, [sp, #8]
 8101dea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101dec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101df0:	f042 0204 	orr.w	r2, r2, #4
 8101df4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101df8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101dfc:	f002 0204 	and.w	r2, r2, #4
 8101e00:	9203      	str	r2, [sp, #12]
 8101e02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101e04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101e08:	f042 0220 	orr.w	r2, r2, #32
 8101e0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101e14:	f002 0220 	and.w	r2, r2, #32
 8101e18:	9204      	str	r2, [sp, #16]
 8101e1a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101e20:	f042 0201 	orr.w	r2, r2, #1
 8101e24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101e2c:	f002 0201 	and.w	r2, r2, #1
 8101e30:	9205      	str	r2, [sp, #20]
 8101e32:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8101e3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101e48:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101e4a:	4638      	mov	r0, r7
 8101e4c:	2200      	movs	r2, #0
 8101e4e:	f242 0104 	movw	r1, #8196	; 0x2004
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e52:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101e54:	f002 f996 	bl	8104184 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8101e58:	2200      	movs	r2, #0
 8101e5a:	4630      	mov	r0, r6
 8101e5c:	2104      	movs	r1, #4
 8101e5e:	f002 f991 	bl	8104184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e62:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8101e64:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e66:	2308      	movs	r3, #8
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 8101e68:	a907      	add	r1, sp, #28
 8101e6a:	4815      	ldr	r0, [pc, #84]	; (8101ec0 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8101e6c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e6e:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 8101e72:	f002 f899 	bl	8103fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = DEBUG_GPIO_0_Pin|LD2_Pin;
 8101e76:	f242 0304 	movw	r3, #8196	; 0x2004
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101e7a:	a907      	add	r1, sp, #28
 8101e7c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101e7e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e82:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101e86:	f002 f88f 	bl	8103fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8101e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101e8e:	a907      	add	r1, sp, #28
 8101e90:	480c      	ldr	r0, [pc, #48]	; (8101ec4 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e92:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e94:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101e98:	f002 f886 	bl	8103fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8101e9c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101e9e:	a907      	add	r1, sp, #28
 8101ea0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101ea2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ea6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101eaa:	f002 f87d 	bl	8103fa8 <HAL_GPIO_Init>

}
 8101eae:	b00d      	add	sp, #52	; 0x34
 8101eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8101eb2:	bf00      	nop
 8101eb4:	58024400 	.word	0x58024400
 8101eb8:	58022000 	.word	0x58022000
 8101ebc:	58022400 	.word	0x58022400
 8101ec0:	58020c00 	.word	0x58020c00
 8101ec4:	58020800 	.word	0x58020800

08101ec8 <IPCInitialize>:
} shared_memory __attribute__((section(".ipc_data")));

void IPCInitialize( void )
{
  // only initialize a few, the others are constantly updated by DSP or others
  shared_memory.voice_volume_normalized = 0.5f;
 8101ec8:	4b09      	ldr	r3, [pc, #36]	; (8101ef0 <IPCInitialize+0x28>)
 8101eca:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8101ece:	601a      	str	r2, [r3, #0]
  shared_memory.voice_mute_active = FALSE;
 8101ed0:	2200      	movs	r2, #0
 8101ed2:	711a      	strb	r2, [r3, #4]
  shared_memory.anomaly_detection_active = FALSE;
 8101ed4:	715a      	strb	r2, [r3, #5]
  shared_memory.lock = FALSE;
 8101ed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  shared_memory.alarm_mute = FALSE;
 8101eda:	719a      	strb	r2, [r3, #6]
  shared_memory.anomaly_vector[0] = 0;
 8101edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  shared_memory.anomaly_vector[1] = 0;
 8101ee0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  shared_memory.anomaly_vector[2] = 0;
 8101ee4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  shared_memory.predicted_region  = -1;
 8101ee8:	22ff      	movs	r2, #255	; 0xff
 8101eea:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
 8101eee:	4770      	bx	lr
 8101ef0:	10000000 	.word	0x10000000

08101ef4 <IPCSetAnomalyDetectState>:
  return shared_memory.anomaly_detection_active;
}

void IPCSetAnomalyDetectState( boolean_t new_state )
{
  shared_memory.anomaly_detection_active = new_state;
 8101ef4:	4b01      	ldr	r3, [pc, #4]	; (8101efc <IPCSetAnomalyDetectState+0x8>)
 8101ef6:	7158      	strb	r0, [r3, #5]
}
 8101ef8:	4770      	bx	lr
 8101efa:	bf00      	nop
 8101efc:	10000000 	.word	0x10000000

08101f00 <IPCSetAnomalyFrequency>:
  return shared_memory.anomaly_frequency;
}

void IPCSetAnomalyFrequency( float new_freq )
{
  shared_memory.anomaly_frequency = new_freq;
 8101f00:	4b01      	ldr	r3, [pc, #4]	; (8101f08 <IPCSetAnomalyFrequency+0x8>)
 8101f02:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8101f06:	4770      	bx	lr
 8101f08:	10000000 	.word	0x10000000

08101f0c <IPCSetAnomalyMagnitudedB>:
  return shared_memory.anomaly_magnitude_db;
}

void IPCSetAnomalyMagnitudedB( float new_mag )
{
  shared_memory.anomaly_magnitude_db = new_mag;
 8101f0c:	4b01      	ldr	r3, [pc, #4]	; (8101f14 <IPCSetAnomalyMagnitudedB+0x8>)
 8101f0e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8101f12:	4770      	bx	lr
 8101f14:	10000000 	.word	0x10000000

08101f18 <IPCGetPredictedRegion>:
  shared_memory.alarm_mute = new_state;
}

int8_t IPCGetPredictedRegion( void )
{
	return shared_memory.predicted_region;
 8101f18:	4b02      	ldr	r3, [pc, #8]	; (8101f24 <IPCGetPredictedRegion+0xc>)
 8101f1a:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
}
 8101f1e:	b240      	sxtb	r0, r0
 8101f20:	4770      	bx	lr
 8101f22:	bf00      	nop
 8101f24:	10000000 	.word	0x10000000

08101f28 <IPCSetPredictedRegion>:

void IPCSetPredictedRegion( int8_t region)
{
	shared_memory.predicted_region = region;
 8101f28:	4b01      	ldr	r3, [pc, #4]	; (8101f30 <IPCSetPredictedRegion+0x8>)
 8101f2a:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
}
 8101f2e:	4770      	bx	lr
 8101f30:	10000000 	.word	0x10000000

08101f34 <_write>:
  * @brief  The application entry point.
  * @retval int
  */
int _write(int file, char *ptr, int len)

{
 8101f34:	b530      	push	{r4, r5, lr}
 8101f36:	4610      	mov	r0, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f38:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8101f3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8101f3e:	4283      	cmp	r3, r0
 8101f40:	db00      	blt.n	8101f44 <_write+0x10>
		ITM_SendChar(*ptr++);

	}

	return len;
}
 8101f42:	bd30      	pop	{r4, r5, pc}
 8101f44:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	; 0xe80
 8101f48:	07e5      	lsls	r5, r4, #31
 8101f4a:	d507      	bpl.n	8101f5c <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8101f4c:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8101f50:	07e4      	lsls	r4, r4, #31
 8101f52:	d503      	bpl.n	8101f5c <_write+0x28>
		ITM_SendChar(*ptr++);
 8101f54:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8101f56:	6815      	ldr	r5, [r2, #0]
 8101f58:	b115      	cbz	r5, 8101f60 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8101f5a:	7014      	strb	r4, [r2, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f5c:	3301      	adds	r3, #1
 8101f5e:	e7ee      	b.n	8101f3e <_write+0xa>
      __NOP();
 8101f60:	bf00      	nop
 8101f62:	e7f8      	b.n	8101f56 <_write+0x22>

08101f64 <main>:

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101f64:	4b1f      	ldr	r3, [pc, #124]	; (8101fe4 <main+0x80>)
{
 8101f66:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101f68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101f6c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8101f70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f7c:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101f7e:	9301      	str	r3, [sp, #4]
 8101f80:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f82:	f002 f905 	bl	8104190 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */

  HAL_PWREx_ClearPendingEvent();
 8101f86:	f002 f94d 	bl	8104224 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101f8a:	2201      	movs	r2, #1
 8101f8c:	2102      	movs	r1, #2
 8101f8e:	2000      	movs	r0, #0
 8101f90:	f002 f906 	bl	81041a0 <HAL_PWREx_EnterSTOPMode>

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f94:	4b14      	ldr	r3, [pc, #80]	; (8101fe8 <main+0x84>)
 8101f96:	681b      	ldr	r3, [r3, #0]
 8101f98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8101f9c:	2b07      	cmp	r3, #7
 8101f9e:	4b13      	ldr	r3, [pc, #76]	; (8101fec <main+0x88>)
 8101fa0:	bf0b      	itete	eq
 8101fa2:	f8d3 2104 	ldreq.w	r2, [r3, #260]	; 0x104
 8101fa6:	f8d3 2114 	ldrne.w	r2, [r3, #276]	; 0x114
 8101faa:	f042 0201 	orreq.w	r2, r2, #1
 8101fae:	f042 0201 	orrne.w	r2, r2, #1
 8101fb2:	bf0c      	ite	eq
 8101fb4:	f8c3 2104 	streq.w	r2, [r3, #260]	; 0x104
 8101fb8:	f8c3 2114 	strne.w	r2, [r3, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101fbc:	f000 fa48 	bl	8102450 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101fc0:	f7ff fee6 	bl	8101d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8101fc4:	f7ff fa42 	bl	810144c <MX_DMA_Init>
  MX_TIM3_Init();
 8101fc8:	f000 f8f4 	bl	81021b4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8101fcc:	f000 f94e 	bl	810226c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8101fd0:	f7ff f916 	bl	8101200 <MX_ADC3_Init>
  MX_ADC1_Init();
 8101fd4:	f7ff f8a6 	bl	8101124 <MX_ADC1_Init>
  MX_X_CUBE_AI_Init();
 8101fd8:	f004 ff1e 	bl	8106e18 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  dspEntry( );
 8101fdc:	f7ff fc28 	bl	8101830 <dspEntry>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101fe0:	e7fe      	b.n	8101fe0 <main+0x7c>
 8101fe2:	bf00      	nop
 8101fe4:	58024400 	.word	0x58024400
 8101fe8:	e000ed00 	.word	0xe000ed00
 8101fec:	58026400 	.word	0x58026400

08101ff0 <getUserButtonState>:
}

/* USER CODE BEGIN 4 */

boolean_t getUserButtonState ( void )
{
 8101ff0:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin) ? TRUE : FALSE);
 8101ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8101ff6:	4803      	ldr	r0, [pc, #12]	; (8102004 <getUserButtonState+0x14>)
 8101ff8:	f002 f8be 	bl	8104178 <HAL_GPIO_ReadPin>
}
 8101ffc:	3800      	subs	r0, #0
 8101ffe:	bf18      	it	ne
 8102000:	2001      	movne	r0, #1
 8102002:	bd08      	pop	{r3, pc}
 8102004:	58020800 	.word	0x58020800

08102008 <setUserLED1State>:

void setUserLED1State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 8102008:	fab0 f280 	clz	r2, r0
 810200c:	0952      	lsrs	r2, r2, #5
 810200e:	4802      	ldr	r0, [pc, #8]	; (8102018 <setUserLED1State+0x10>)
 8102010:	2104      	movs	r1, #4
 8102012:	f002 b8b7 	b.w	8104184 <HAL_GPIO_WritePin>
 8102016:	bf00      	nop
 8102018:	58022400 	.word	0x58022400

0810201c <setUserLED2State>:
}

void setUserLED2State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 810201c:	fab0 f280 	clz	r2, r0
 8102020:	0952      	lsrs	r2, r2, #5
 8102022:	4802      	ldr	r0, [pc, #8]	; (810202c <setUserLED2State+0x10>)
 8102024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8102028:	f002 b8ac 	b.w	8104184 <HAL_GPIO_WritePin>
 810202c:	58022000 	.word	0x58022000

08102030 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102030:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102032:	e7fe      	b.n	8102032 <Error_Handler+0x2>

08102034 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102034:	4b07      	ldr	r3, [pc, #28]	; (8102054 <HAL_MspInit+0x20>)
 8102036:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 810203a:	f042 0202 	orr.w	r2, r2, #2
 810203e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8102042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
{
 8102046:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102048:	f003 0302 	and.w	r3, r3, #2
 810204c:	9301      	str	r3, [sp, #4]
 810204e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102050:	b002      	add	sp, #8
 8102052:	4770      	bx	lr
 8102054:	58024400 	.word	0x58024400

08102058 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102058:	e7fe      	b.n	8102058 <NMI_Handler>

0810205a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810205a:	e7fe      	b.n	810205a <HardFault_Handler>

0810205c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810205c:	e7fe      	b.n	810205c <MemManage_Handler>

0810205e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810205e:	e7fe      	b.n	810205e <BusFault_Handler>

08102060 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102060:	e7fe      	b.n	8102060 <UsageFault_Handler>

08102062 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102062:	4770      	bx	lr

08102064 <DebugMon_Handler>:
 8102064:	4770      	bx	lr

08102066 <PendSV_Handler>:
 8102066:	4770      	bx	lr

08102068 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102068:	f000 ba40 	b.w	81024ec <HAL_IncTick>

0810206c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 810206c:	4801      	ldr	r0, [pc, #4]	; (8102074 <DMA1_Stream0_IRQHandler+0x8>)
 810206e:	f001 bda3 	b.w	8103bb8 <HAL_DMA_IRQHandler>
 8102072:	bf00      	nop
 8102074:	10000c44 	.word	0x10000c44

08102078 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8102078:	4801      	ldr	r0, [pc, #4]	; (8102080 <DMA1_Stream1_IRQHandler+0x8>)
 810207a:	f001 bd9d 	b.w	8103bb8 <HAL_DMA_IRQHandler>
 810207e:	bf00      	nop
 8102080:	10000cbc 	.word	0x10000cbc

08102084 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102084:	4801      	ldr	r0, [pc, #4]	; (810208c <USART3_IRQHandler+0x8>)
 8102086:	f004 b831 	b.w	81060ec <HAL_UART_IRQHandler>
 810208a:	bf00      	nop
 810208c:	100187c8 	.word	0x100187c8

08102090 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102090:	4801      	ldr	r0, [pc, #4]	; (8102098 <DMA1_Stream7_IRQHandler+0x8>)
 8102092:	f001 bd91 	b.w	8103bb8 <HAL_DMA_IRQHandler>
 8102096:	bf00      	nop
 8102098:	10018750 	.word	0x10018750

0810209c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 810209c:	2001      	movs	r0, #1
 810209e:	4770      	bx	lr

081020a0 <_kill>:

int _kill(int pid, int sig)
{
 81020a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 81020a2:	f009 f951 	bl	810b348 <__errno>
 81020a6:	2316      	movs	r3, #22
 81020a8:	6003      	str	r3, [r0, #0]
	return -1;
}
 81020aa:	f04f 30ff 	mov.w	r0, #4294967295
 81020ae:	bd08      	pop	{r3, pc}

081020b0 <_exit>:

void _exit (int status)
{
 81020b0:	b508      	push	{r3, lr}
	errno = EINVAL;
 81020b2:	f009 f949 	bl	810b348 <__errno>
 81020b6:	2316      	movs	r3, #22
 81020b8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 81020ba:	e7fe      	b.n	81020ba <_exit+0xa>

081020bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81020bc:	b570      	push	{r4, r5, r6, lr}
 81020be:	460d      	mov	r5, r1
 81020c0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81020c2:	460e      	mov	r6, r1
 81020c4:	1b73      	subs	r3, r6, r5
 81020c6:	429c      	cmp	r4, r3
 81020c8:	dc01      	bgt.n	81020ce <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 81020ca:	4620      	mov	r0, r4
 81020cc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 81020ce:	f3af 8000 	nop.w
 81020d2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81020d6:	e7f5      	b.n	81020c4 <_read+0x8>

081020d8 <_close>:
}

int _close(int file)
{
	return -1;
}
 81020d8:	f04f 30ff 	mov.w	r0, #4294967295
 81020dc:	4770      	bx	lr

081020de <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 81020de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81020e2:	604b      	str	r3, [r1, #4]
	return 0;
}
 81020e4:	2000      	movs	r0, #0
 81020e6:	4770      	bx	lr

081020e8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 81020e8:	2001      	movs	r0, #1
 81020ea:	4770      	bx	lr

081020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 81020ec:	2000      	movs	r0, #0
 81020ee:	4770      	bx	lr

081020f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81020f0:	4a0b      	ldr	r2, [pc, #44]	; (8102120 <_sbrk+0x30>)
 81020f2:	6811      	ldr	r1, [r2, #0]
{
 81020f4:	b510      	push	{r4, lr}
 81020f6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 81020f8:	b909      	cbnz	r1, 81020fe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 81020fa:	490a      	ldr	r1, [pc, #40]	; (8102124 <_sbrk+0x34>)
 81020fc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81020fe:	6810      	ldr	r0, [r2, #0]
 8102100:	4909      	ldr	r1, [pc, #36]	; (8102128 <_sbrk+0x38>)
 8102102:	4c0a      	ldr	r4, [pc, #40]	; (810212c <_sbrk+0x3c>)
 8102104:	4403      	add	r3, r0
 8102106:	1b09      	subs	r1, r1, r4
 8102108:	428b      	cmp	r3, r1
 810210a:	d906      	bls.n	810211a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 810210c:	f009 f91c 	bl	810b348 <__errno>
 8102110:	230c      	movs	r3, #12
 8102112:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8102114:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8102118:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 810211a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 810211c:	e7fc      	b.n	8102118 <_sbrk+0x28>
 810211e:	bf00      	nop
 8102120:	10018700 	.word	0x10018700
 8102124:	1001ae10 	.word	0x1001ae10
 8102128:	10048000 	.word	0x10048000
 810212c:	00001000 	.word	0x00001000

08102130 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8102130:	6802      	ldr	r2, [r0, #0]
 8102132:	4b09      	ldr	r3, [pc, #36]	; (8102158 <HAL_TIM_Base_MspInit+0x28>)
 8102134:	429a      	cmp	r2, r3
{
 8102136:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 8102138:	d10c      	bne.n	8102154 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 810213a:	4b08      	ldr	r3, [pc, #32]	; (810215c <HAL_TIM_Base_MspInit+0x2c>)
 810213c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8102140:	f042 0202 	orr.w	r2, r2, #2
 8102144:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8102148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810214c:	f003 0302 	and.w	r3, r3, #2
 8102150:	9301      	str	r3, [sp, #4]
 8102152:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8102154:	b002      	add	sp, #8
 8102156:	4770      	bx	lr
 8102158:	40000400 	.word	0x40000400
 810215c:	58024400 	.word	0x58024400

08102160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102160:	b510      	push	{r4, lr}
 8102162:	4604      	mov	r4, r0
 8102164:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102166:	2214      	movs	r2, #20
 8102168:	2100      	movs	r1, #0
 810216a:	a801      	add	r0, sp, #4
 810216c:	f009 f88a 	bl	810b284 <memset>
  if(timHandle->Instance==TIM3)
 8102170:	6822      	ldr	r2, [r4, #0]
 8102172:	4b0d      	ldr	r3, [pc, #52]	; (81021a8 <HAL_TIM_MspPostInit+0x48>)
 8102174:	429a      	cmp	r2, r3
 8102176:	d115      	bne.n	81021a4 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102178:	4b0c      	ldr	r3, [pc, #48]	; (81021ac <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810217a:	480d      	ldr	r0, [pc, #52]	; (81021b0 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810217c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102180:	f042 0202 	orr.w	r2, r2, #2
 8102184:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810218c:	f003 0302 	and.w	r3, r3, #2
 8102190:	9300      	str	r3, [sp, #0]
 8102192:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102194:	2210      	movs	r2, #16
 8102196:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102198:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810219a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 810219e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81021a0:	f001 ff02 	bl	8103fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81021a4:	b006      	add	sp, #24
 81021a6:	bd10      	pop	{r4, pc}
 81021a8:	40000400 	.word	0x40000400
 81021ac:	58024400 	.word	0x58024400
 81021b0:	58020400 	.word	0x58020400

081021b4 <MX_TIM3_Init>:
{
 81021b4:	b510      	push	{r4, lr}
 81021b6:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81021b8:	2210      	movs	r2, #16
 81021ba:	2100      	movs	r1, #0
 81021bc:	a803      	add	r0, sp, #12
 81021be:	f009 f861 	bl	810b284 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81021c2:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 81021c4:	221c      	movs	r2, #28
 81021c6:	4621      	mov	r1, r4
 81021c8:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81021cc:	e9cd 4400 	strd	r4, r4, [sp]
 81021d0:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81021d2:	f009 f857 	bl	810b284 <memset>
  htim3.Instance = TIM3;
 81021d6:	4823      	ldr	r0, [pc, #140]	; (8102264 <MX_TIM3_Init+0xb0>)
 81021d8:	4b23      	ldr	r3, [pc, #140]	; (8102268 <MX_TIM3_Init+0xb4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81021da:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 81021dc:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 750;
 81021e0:	f240 23ee 	movw	r3, #750	; 0x2ee
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81021e4:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81021e8:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81021ea:	f003 fc69 	bl	8105ac0 <HAL_TIM_Base_Init>
 81021ee:	b108      	cbz	r0, 81021f4 <MX_TIM3_Init+0x40>
    Error_Handler();
 81021f0:	f7ff ff1e 	bl	8102030 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81021f8:	481a      	ldr	r0, [pc, #104]	; (8102264 <MX_TIM3_Init+0xb0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81021fa:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81021fc:	a903      	add	r1, sp, #12
 81021fe:	f003 fd8d 	bl	8105d1c <HAL_TIM_ConfigClockSource>
 8102202:	b108      	cbz	r0, 8102208 <MX_TIM3_Init+0x54>
    Error_Handler();
 8102204:	f7ff ff14 	bl	8102030 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102208:	4816      	ldr	r0, [pc, #88]	; (8102264 <MX_TIM3_Init+0xb0>)
 810220a:	f003 fc89 	bl	8105b20 <HAL_TIM_PWM_Init>
 810220e:	b108      	cbz	r0, 8102214 <MX_TIM3_Init+0x60>
    Error_Handler();
 8102210:	f7ff ff0e 	bl	8102030 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8102214:	2320      	movs	r3, #32
 8102216:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102218:	4812      	ldr	r0, [pc, #72]	; (8102264 <MX_TIM3_Init+0xb0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810221a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810221c:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810221e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102220:	f003 fe38 	bl	8105e94 <HAL_TIMEx_MasterConfigSynchronization>
 8102224:	b108      	cbz	r0, 810222a <MX_TIM3_Init+0x76>
    Error_Handler();
 8102226:	f7ff ff03 	bl	8102030 <Error_Handler>
  sConfigOC.Pulse = 400;
 810222a:	2270      	movs	r2, #112	; 0x70
 810222c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8102230:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102234:	480b      	ldr	r0, [pc, #44]	; (8102264 <MX_TIM3_Init+0xb0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102236:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102238:	a907      	add	r1, sp, #28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810223a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810223c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810223e:	f003 fce5 	bl	8105c0c <HAL_TIM_PWM_ConfigChannel>
 8102242:	b108      	cbz	r0, 8102248 <MX_TIM3_Init+0x94>
    Error_Handler();
 8102244:	f7ff fef4 	bl	8102030 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102248:	4806      	ldr	r0, [pc, #24]	; (8102264 <MX_TIM3_Init+0xb0>)
 810224a:	220c      	movs	r2, #12
 810224c:	a907      	add	r1, sp, #28
 810224e:	f003 fcdd 	bl	8105c0c <HAL_TIM_PWM_ConfigChannel>
 8102252:	b108      	cbz	r0, 8102258 <MX_TIM3_Init+0xa4>
    Error_Handler();
 8102254:	f7ff feec 	bl	8102030 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8102258:	4802      	ldr	r0, [pc, #8]	; (8102264 <MX_TIM3_Init+0xb0>)
 810225a:	f7ff ff81 	bl	8102160 <HAL_TIM_MspPostInit>
}
 810225e:	b00e      	add	sp, #56	; 0x38
 8102260:	bd10      	pop	{r4, pc}
 8102262:	bf00      	nop
 8102264:	10018704 	.word	0x10018704
 8102268:	40000400 	.word	0x40000400

0810226c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 810226c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810226e:	4816      	ldr	r0, [pc, #88]	; (81022c8 <MX_USART3_UART_Init+0x5c>)
  huart3.Init.BaudRate = 1800000;
 8102270:	4a16      	ldr	r2, [pc, #88]	; (81022cc <MX_USART3_UART_Init+0x60>)
 8102272:	4b17      	ldr	r3, [pc, #92]	; (81022d0 <MX_USART3_UART_Init+0x64>)
 8102274:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102278:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 810227a:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 810227c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102280:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102284:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102288:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart3.Init.Parity = UART_PARITY_NONE;
 810228c:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810228e:	f004 fb8b 	bl	81069a8 <HAL_UART_Init>
 8102292:	b108      	cbz	r0, 8102298 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
 8102294:	f7ff fecc 	bl	8102030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102298:	480b      	ldr	r0, [pc, #44]	; (81022c8 <MX_USART3_UART_Init+0x5c>)
 810229a:	2100      	movs	r1, #0
 810229c:	f004 fbf4 	bl	8106a88 <HAL_UARTEx_SetTxFifoThreshold>
 81022a0:	b108      	cbz	r0, 81022a6 <MX_USART3_UART_Init+0x3a>
  {
    Error_Handler();
 81022a2:	f7ff fec5 	bl	8102030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81022a6:	4808      	ldr	r0, [pc, #32]	; (81022c8 <MX_USART3_UART_Init+0x5c>)
 81022a8:	2100      	movs	r1, #0
 81022aa:	f004 fc0d 	bl	8106ac8 <HAL_UARTEx_SetRxFifoThreshold>
 81022ae:	b108      	cbz	r0, 81022b4 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 81022b0:	f7ff febe 	bl	8102030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81022b4:	4804      	ldr	r0, [pc, #16]	; (81022c8 <MX_USART3_UART_Init+0x5c>)
 81022b6:	f004 fbcc 	bl	8106a52 <HAL_UARTEx_DisableFifoMode>
 81022ba:	b118      	cbz	r0, 81022c4 <MX_USART3_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81022bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 81022c0:	f7ff beb6 	b.w	8102030 <Error_Handler>
}
 81022c4:	bd08      	pop	{r3, pc}
 81022c6:	bf00      	nop
 81022c8:	100187c8 	.word	0x100187c8
 81022cc:	40004800 	.word	0x40004800
 81022d0:	001b7740 	.word	0x001b7740

081022d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81022d4:	b570      	push	{r4, r5, r6, lr}
 81022d6:	b0b8      	sub	sp, #224	; 0xe0
 81022d8:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81022da:	2214      	movs	r2, #20
 81022dc:	2100      	movs	r1, #0
 81022de:	a803      	add	r0, sp, #12
 81022e0:	f008 ffd0 	bl	810b284 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81022e4:	22c0      	movs	r2, #192	; 0xc0
 81022e6:	2100      	movs	r1, #0
 81022e8:	a808      	add	r0, sp, #32
 81022ea:	f008 ffcb 	bl	810b284 <memset>
  if(uartHandle->Instance==USART3)
 81022ee:	6832      	ldr	r2, [r6, #0]
 81022f0:	4b2a      	ldr	r3, [pc, #168]	; (810239c <HAL_UART_MspInit+0xc8>)
 81022f2:	429a      	cmp	r2, r3
 81022f4:	d150      	bne.n	8102398 <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81022f6:	2202      	movs	r2, #2
 81022f8:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81022fa:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81022fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102300:	f002 f970 	bl	81045e4 <HAL_RCCEx_PeriphCLKConfig>
 8102304:	b108      	cbz	r0, 810230a <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8102306:	f7ff fe93 	bl	8102030 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810230a:	4b25      	ldr	r3, [pc, #148]	; (81023a0 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810230c:	4825      	ldr	r0, [pc, #148]	; (81023a4 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 810230e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream7;
 8102312:	4c25      	ldr	r4, [pc, #148]	; (81023a8 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8102314:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8102318:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 810231c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8102320:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8102324:	9201      	str	r2, [sp, #4]
 8102326:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102328:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810232c:	f042 0202 	orr.w	r2, r2, #2
 8102330:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102338:	f003 0302 	and.w	r3, r3, #2
 810233c:	9302      	str	r3, [sp, #8]
 810233e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102340:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8102344:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102346:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102348:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810234c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810234e:	2307      	movs	r3, #7
 8102350:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102352:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102356:	f001 fe27 	bl	8103fa8 <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 810235a:	4914      	ldr	r1, [pc, #80]	; (81023ac <HAL_UART_MspInit+0xd8>)
 810235c:	232e      	movs	r3, #46	; 0x2e
 810235e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102362:	2340      	movs	r3, #64	; 0x40
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102364:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102368:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 810236a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810236e:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8102372:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102376:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 810237a:	f000 ff2d 	bl	81031d8 <HAL_DMA_Init>
 810237e:	b108      	cbz	r0, 8102384 <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 8102380:	f7ff fe56 	bl	8102030 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102384:	2200      	movs	r2, #0
 8102386:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102388:	67f4      	str	r4, [r6, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 810238a:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 810238c:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 810238e:	f000 fd33 	bl	8102df8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102392:	2027      	movs	r0, #39	; 0x27
 8102394:	f000 fd62 	bl	8102e5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102398:	b038      	add	sp, #224	; 0xe0
 810239a:	bd70      	pop	{r4, r5, r6, pc}
 810239c:	40004800 	.word	0x40004800
 81023a0:	58024400 	.word	0x58024400
 81023a4:	58020400 	.word	0x58020400
 81023a8:	10018750 	.word	0x10018750
 81023ac:	400200b8 	.word	0x400200b8

081023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81023e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81023b4:	f7fe fea4 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81023b8:	480c      	ldr	r0, [pc, #48]	; (81023ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81023ba:	490d      	ldr	r1, [pc, #52]	; (81023f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81023bc:	4a0d      	ldr	r2, [pc, #52]	; (81023f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81023c0:	e002      	b.n	81023c8 <LoopCopyDataInit>

081023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81023c6:	3304      	adds	r3, #4

081023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81023cc:	d3f9      	bcc.n	81023c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81023ce:	4a0a      	ldr	r2, [pc, #40]	; (81023f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81023d0:	4c0a      	ldr	r4, [pc, #40]	; (81023fc <LoopFillZerobss+0x22>)
  movs r3, #0
 81023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81023d4:	e001      	b.n	81023da <LoopFillZerobss>

081023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81023d8:	3204      	adds	r2, #4

081023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81023dc:	d3fb      	bcc.n	81023d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81023de:	f008 ffb9 	bl	810b354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81023e2:	f7ff fdbf 	bl	8101f64 <main>
  bx  lr
 81023e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81023e8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81023ec:	10000050 	.word	0x10000050
  ldr r1, =_edata
 81023f0:	10000b4c 	.word	0x10000b4c
  ldr r2, =_sidata
 81023f4:	081e6bc8 	.word	0x081e6bc8
  ldr r2, =_sbss
 81023f8:	10000b60 	.word	0x10000b60
  ldr r4, =_ebss
 81023fc:	1001ae0c 	.word	0x1001ae0c

08102400 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102400:	e7fe      	b.n	8102400 <ADC3_IRQHandler>
	...

08102404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102404:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102406:	4b0f      	ldr	r3, [pc, #60]	; (8102444 <HAL_InitTick+0x40>)
 8102408:	781a      	ldrb	r2, [r3, #0]
{
 810240a:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 810240c:	b90a      	cbnz	r2, 8102412 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 810240e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8102410:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102416:	fbb3 f3f2 	udiv	r3, r3, r2
 810241a:	4a0b      	ldr	r2, [pc, #44]	; (8102448 <HAL_InitTick+0x44>)
 810241c:	6810      	ldr	r0, [r2, #0]
 810241e:	fbb0 f0f3 	udiv	r0, r0, r3
 8102422:	f000 fd29 	bl	8102e78 <HAL_SYSTICK_Config>
 8102426:	4604      	mov	r4, r0
 8102428:	2800      	cmp	r0, #0
 810242a:	d1f0      	bne.n	810240e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810242c:	2d0f      	cmp	r5, #15
 810242e:	d8ee      	bhi.n	810240e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102430:	4602      	mov	r2, r0
 8102432:	4629      	mov	r1, r5
 8102434:	f04f 30ff 	mov.w	r0, #4294967295
 8102438:	f000 fcde 	bl	8102df8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810243c:	4b03      	ldr	r3, [pc, #12]	; (810244c <HAL_InitTick+0x48>)
 810243e:	4620      	mov	r0, r4
 8102440:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8102442:	e7e5      	b.n	8102410 <HAL_InitTick+0xc>
 8102444:	10000068 	.word	0x10000068
 8102448:	10000050 	.word	0x10000050
 810244c:	1000006c 	.word	0x1000006c

08102450 <HAL_Init>:
{
 8102450:	b513      	push	{r0, r1, r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102452:	4c21      	ldr	r4, [pc, #132]	; (81024d8 <HAL_Init+0x88>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102454:	4a21      	ldr	r2, [pc, #132]	; (81024dc <HAL_Init+0x8c>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102456:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 810245a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810245e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8102462:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8102466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810246a:	9301      	str	r3, [sp, #4]
 810246c:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810246e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102472:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810247a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810247e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102482:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102486:	f043 0301 	orr.w	r3, r3, #1
 810248a:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810248e:	2003      	movs	r0, #3
 8102490:	f000 fca0 	bl	8102dd4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102494:	f001 fed0 	bl	8104238 <HAL_RCC_GetSysClockFreq>
 8102498:	69a2      	ldr	r2, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810249a:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810249c:	4910      	ldr	r1, [pc, #64]	; (81024e0 <HAL_Init+0x90>)
 810249e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81024a2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81024a6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81024a8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81024aa:	f002 021f 	and.w	r2, r2, #31
 81024ae:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81024b0:	f003 031f 	and.w	r3, r3, #31
 81024b4:	40d8      	lsrs	r0, r3
 81024b6:	4b0b      	ldr	r3, [pc, #44]	; (81024e4 <HAL_Init+0x94>)
 81024b8:	6018      	str	r0, [r3, #0]
  SystemCoreClock = SystemD2Clock;
 81024ba:	4b0b      	ldr	r3, [pc, #44]	; (81024e8 <HAL_Init+0x98>)
 81024bc:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81024be:	200f      	movs	r0, #15
 81024c0:	f7ff ffa0 	bl	8102404 <HAL_InitTick>
 81024c4:	4604      	mov	r4, r0
 81024c6:	b920      	cbnz	r0, 81024d2 <HAL_Init+0x82>
  HAL_MspInit();
 81024c8:	f7ff fdb4 	bl	8102034 <HAL_MspInit>
}
 81024cc:	4620      	mov	r0, r4
 81024ce:	b002      	add	sp, #8
 81024d0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 81024d2:	2401      	movs	r4, #1
 81024d4:	e7fa      	b.n	81024cc <HAL_Init+0x7c>
 81024d6:	bf00      	nop
 81024d8:	58024400 	.word	0x58024400
 81024dc:	40024000 	.word	0x40024000
 81024e0:	0810edd0 	.word	0x0810edd0
 81024e4:	10000054 	.word	0x10000054
 81024e8:	10000050 	.word	0x10000050

081024ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 81024ec:	4a03      	ldr	r2, [pc, #12]	; (81024fc <HAL_IncTick+0x10>)
 81024ee:	4b04      	ldr	r3, [pc, #16]	; (8102500 <HAL_IncTick+0x14>)
 81024f0:	6811      	ldr	r1, [r2, #0]
 81024f2:	781b      	ldrb	r3, [r3, #0]
 81024f4:	440b      	add	r3, r1
 81024f6:	6013      	str	r3, [r2, #0]
}
 81024f8:	4770      	bx	lr
 81024fa:	bf00      	nop
 81024fc:	1001885c 	.word	0x1001885c
 8102500:	10000068 	.word	0x10000068

08102504 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8102504:	4b01      	ldr	r3, [pc, #4]	; (810250c <HAL_GetTick+0x8>)
 8102506:	6818      	ldr	r0, [r3, #0]
}
 8102508:	4770      	bx	lr
 810250a:	bf00      	nop
 810250c:	1001885c 	.word	0x1001885c

08102510 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8102510:	4b01      	ldr	r3, [pc, #4]	; (8102518 <HAL_GetREVID+0x8>)
 8102512:	6818      	ldr	r0, [r3, #0]
}
 8102514:	0c00      	lsrs	r0, r0, #16
 8102516:	4770      	bx	lr
 8102518:	5c001000 	.word	0x5c001000

0810251c <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810251c:	4a03      	ldr	r2, [pc, #12]	; (810252c <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 810251e:	6853      	ldr	r3, [r2, #4]
 8102520:	ea23 0000 	bic.w	r0, r3, r0
 8102524:	4301      	orrs	r1, r0
 8102526:	6051      	str	r1, [r2, #4]
}
 8102528:	4770      	bx	lr
 810252a:	bf00      	nop
 810252c:	58000400 	.word	0x58000400

08102530 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102530:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102532:	0dcc      	lsrs	r4, r1, #23
 8102534:	f004 0404 	and.w	r4, r4, #4
 8102538:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 810253a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 810253e:	5903      	ldr	r3, [r0, r4]
 8102540:	2507      	movs	r5, #7
 8102542:	408d      	lsls	r5, r1
 8102544:	ea23 0305 	bic.w	r3, r3, r5
 8102548:	408a      	lsls	r2, r1
 810254a:	4313      	orrs	r3, r2
 810254c:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810254e:	bd30      	pop	{r4, r5, pc}

08102550 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102550:	6880      	ldr	r0, [r0, #8]
}
 8102552:	f000 0001 	and.w	r0, r0, #1
 8102556:	4770      	bx	lr

08102558 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102558:	6880      	ldr	r0, [r0, #8]
}
 810255a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 810255e:	4770      	bx	lr

08102560 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102562:	2300      	movs	r3, #0
 8102564:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102566:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 810256a:	2b01      	cmp	r3, #1
{
 810256c:	4605      	mov	r5, r0
 810256e:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8102570:	f000 81c5 	beq.w	81028fe <HAL_ADC_ConfigChannel+0x39e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102574:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8102576:	2301      	movs	r3, #1
 8102578:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810257c:	4620      	mov	r0, r4
 810257e:	f7ff ffeb 	bl	8102558 <LL_ADC_REG_IsConversionOngoing>
 8102582:	2800      	cmp	r0, #0
 8102584:	f040 81b6 	bne.w	81028f4 <HAL_ADC_ConfigChannel+0x394>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102588:	680a      	ldr	r2, [r1, #0]
 810258a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 810258e:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8102592:	2800      	cmp	r0, #0
 8102594:	d16a      	bne.n	810266c <HAL_ADC_ConfigChannel+0x10c>
 8102596:	408b      	lsls	r3, r1
 8102598:	69e2      	ldr	r2, [r4, #28]
 810259a:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810259c:	6872      	ldr	r2, [r6, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810259e:	61e3      	str	r3, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81025a0:	0990      	lsrs	r0, r2, #6
 81025a2:	f000 000c 	and.w	r0, r0, #12
 81025a6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 81025aa:	f002 021f 	and.w	r2, r2, #31
 81025ae:	f85c 3000 	ldr.w	r3, [ip, r0]
 81025b2:	271f      	movs	r7, #31
 81025b4:	4097      	lsls	r7, r2
 81025b6:	ea23 0307 	bic.w	r3, r3, r7
 81025ba:	4091      	lsls	r1, r2
 81025bc:	430b      	orrs	r3, r1
 81025be:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81025c2:	4620      	mov	r0, r4
 81025c4:	f7ff ffc8 	bl	8102558 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81025c8:	68a3      	ldr	r3, [r4, #8]
 81025ca:	f003 0308 	and.w	r3, r3, #8
 81025ce:	4318      	orrs	r0, r3
 81025d0:	d140      	bne.n	8102654 <HAL_ADC_ConfigChannel+0xf4>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81025d2:	68b2      	ldr	r2, [r6, #8]
 81025d4:	6831      	ldr	r1, [r6, #0]
 81025d6:	4620      	mov	r0, r4
 81025d8:	f7ff ffaa 	bl	8102530 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81025dc:	4bb8      	ldr	r3, [pc, #736]	; (81028c0 <HAL_ADC_ConfigChannel+0x360>)
 81025de:	6972      	ldr	r2, [r6, #20]
 81025e0:	681b      	ldr	r3, [r3, #0]
 81025e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81025e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81025ea:	68e3      	ldr	r3, [r4, #12]
 81025ec:	d147      	bne.n	810267e <HAL_ADC_ConfigChannel+0x11e>
 81025ee:	f3c3 0382 	ubfx	r3, r3, #2, #3
 81025f2:	005b      	lsls	r3, r3, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81025f4:	6937      	ldr	r7, [r6, #16]
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81025f6:	6831      	ldr	r1, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81025f8:	2f04      	cmp	r7, #4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81025fa:	fa02 f203 	lsl.w	r2, r2, r3
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81025fe:	d046      	beq.n	810268e <HAL_ADC_ConfigChannel+0x12e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102600:	f104 0060 	add.w	r0, r4, #96	; 0x60
    MODIFY_REG(*preg,
 8102604:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
 8102608:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 810260c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8102610:	430b      	orrs	r3, r1
 8102612:	4313      	orrs	r3, r2
 8102614:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102618:	6931      	ldr	r1, [r6, #16]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 810261a:	7e72      	ldrb	r2, [r6, #25]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 810261c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8102620:	1e57      	subs	r7, r2, #1
 8102622:	427a      	negs	r2, r7
 8102624:	417a      	adcs	r2, r7
 8102626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810262a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 810262e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102632:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102634:	6931      	ldr	r1, [r6, #16]
 8102636:	6922      	ldr	r2, [r4, #16]
 8102638:	f103 3cff 	add.w	ip, r3, #4294967295
 810263c:	f1dc 0300 	rsbs	r3, ip, #0
 8102640:	eb43 030c 	adc.w	r3, r3, ip
 8102644:	02db      	lsls	r3, r3, #11
 8102646:	f001 011f 	and.w	r1, r1, #31
 810264a:	408b      	lsls	r3, r1
 810264c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8102650:	4313      	orrs	r3, r2
 8102652:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102654:	4620      	mov	r0, r4
 8102656:	f7ff ff7b 	bl	8102550 <LL_ADC_IsEnabled>
 810265a:	2800      	cmp	r0, #0
 810265c:	d03e      	beq.n	81026dc <HAL_ADC_ConfigChannel+0x17c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810265e:	2300      	movs	r3, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102660:	2200      	movs	r2, #0
 8102662:	f885 2050 	strb.w	r2, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8102666:	4618      	mov	r0, r3
 8102668:	b003      	add	sp, #12
 810266a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810266c:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8102670:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102674:	f002 021f 	and.w	r2, r2, #31
 8102678:	2301      	movs	r3, #1
 810267a:	4093      	lsls	r3, r2
 810267c:	e78c      	b.n	8102598 <HAL_ADC_ConfigChannel+0x38>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810267e:	f013 0f10 	tst.w	r3, #16
 8102682:	68e3      	ldr	r3, [r4, #12]
 8102684:	d0b3      	beq.n	81025ee <HAL_ADC_ConfigChannel+0x8e>
 8102686:	085b      	lsrs	r3, r3, #1
 8102688:	f003 0308 	and.w	r3, r3, #8
 810268c:	e7b2      	b.n	81025f4 <HAL_ADC_ConfigChannel+0x94>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810268e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8102690:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8102694:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102698:	bf02      	ittt	eq
 810269a:	6e23      	ldreq	r3, [r4, #96]	; 0x60
 810269c:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 81026a0:	6623      	streq	r3, [r4, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81026a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81026a4:	068a      	lsls	r2, r1, #26
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81026a6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 81026aa:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81026ac:	bf02      	ittt	eq
 81026ae:	6e63      	ldreq	r3, [r4, #100]	; 0x64
 81026b0:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 81026b4:	6663      	streq	r3, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81026b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 81026b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 81026bc:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81026be:	bf02      	ittt	eq
 81026c0:	6ea3      	ldreq	r3, [r4, #104]	; 0x68
 81026c2:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 81026c6:	66a3      	streq	r3, [r4, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81026c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 81026ca:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 81026ce:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81026d0:	bf02      	ittt	eq
 81026d2:	6ee3      	ldreq	r3, [r4, #108]	; 0x6c
 81026d4:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 81026d8:	66e3      	streq	r3, [r4, #108]	; 0x6c
 81026da:	e7bb      	b.n	8102654 <HAL_ADC_ConfigChannel+0xf4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81026dc:	68f7      	ldr	r7, [r6, #12]
 81026de:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 81026e0:	4a78      	ldr	r2, [pc, #480]	; (81028c4 <HAL_ADC_ConfigChannel+0x364>)
 81026e2:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 81026e6:	f007 0c18 	and.w	ip, r7, #24
 81026ea:	f3c3 0013 	ubfx	r0, r3, #0, #20
 81026ee:	fa22 f20c 	lsr.w	r2, r2, ip
 81026f2:	401a      	ands	r2, r3
 81026f4:	ea21 0100 	bic.w	r1, r1, r0
 81026f8:	430a      	orrs	r2, r1
 81026fa:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81026fe:	4a72      	ldr	r2, [pc, #456]	; (81028c8 <HAL_ADC_ConfigChannel+0x368>)
 8102700:	4297      	cmp	r7, r2
 8102702:	d145      	bne.n	8102790 <HAL_ADC_ConfigChannel+0x230>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102704:	b9d0      	cbnz	r0, 810273c <HAL_ADC_ConfigChannel+0x1dc>
 8102706:	0e9a      	lsrs	r2, r3, #26
 8102708:	3201      	adds	r2, #1
 810270a:	f002 071f 	and.w	r7, r2, #31
 810270e:	2101      	movs	r1, #1
 8102710:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102712:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102714:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8102718:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810271c:	d929      	bls.n	8102772 <HAL_ADC_ConfigChannel+0x212>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810271e:	4311      	orrs	r1, r2
 8102720:	2800      	cmp	r0, #0
 8102722:	f040 808b 	bne.w	810283c <HAL_ADC_ConfigChannel+0x2dc>
 8102726:	0e9b      	lsrs	r3, r3, #26
 8102728:	3301      	adds	r3, #1
 810272a:	f003 031f 	and.w	r3, r3, #31
 810272e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102732:	3b1e      	subs	r3, #30
 8102734:	051b      	lsls	r3, r3, #20
 8102736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810273a:	e024      	b.n	8102786 <HAL_ADC_ConfigChannel+0x226>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810273c:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8102740:	b132      	cbz	r2, 8102750 <HAL_ADC_ConfigChannel+0x1f0>
  return __builtin_clz(value);
 8102742:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102746:	3201      	adds	r2, #1
 8102748:	f002 021f 	and.w	r2, r2, #31
 810274c:	2a09      	cmp	r2, #9
 810274e:	d863      	bhi.n	8102818 <HAL_ADC_ConfigChannel+0x2b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102750:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102754:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102758:	3201      	adds	r2, #1
 810275a:	0692      	lsls	r2, r2, #26
 810275c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102760:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8102764:	fab7 f787 	clz	r7, r7
 8102768:	3701      	adds	r7, #1
 810276a:	f007 071f 	and.w	r7, r7, #31
 810276e:	2101      	movs	r1, #1
 8102770:	40b9      	lsls	r1, r7
 8102772:	4311      	orrs	r1, r2
 8102774:	2800      	cmp	r0, #0
 8102776:	d14a      	bne.n	810280e <HAL_ADC_ConfigChannel+0x2ae>
 8102778:	0e9b      	lsrs	r3, r3, #26
 810277a:	3301      	adds	r3, #1
 810277c:	f003 031f 	and.w	r3, r3, #31
 8102780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102784:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102786:	68b2      	ldr	r2, [r6, #8]
 8102788:	4319      	orrs	r1, r3
 810278a:	4620      	mov	r0, r4
 810278c:	f7ff fed0 	bl	8102530 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102790:	6832      	ldr	r2, [r6, #0]
 8102792:	2a00      	cmp	r2, #0
 8102794:	f6bf af63 	bge.w	810265e <HAL_ADC_ConfigChannel+0xfe>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102798:	494c      	ldr	r1, [pc, #304]	; (81028cc <HAL_ADC_ConfigChannel+0x36c>)
 810279a:	428c      	cmp	r4, r1
 810279c:	d05b      	beq.n	8102856 <HAL_ADC_ConfigChannel+0x2f6>
 810279e:	4e4c      	ldr	r6, [pc, #304]	; (81028d0 <HAL_ADC_ConfigChannel+0x370>)
 81027a0:	4b4c      	ldr	r3, [pc, #304]	; (81028d4 <HAL_ADC_ConfigChannel+0x374>)
 81027a2:	484d      	ldr	r0, [pc, #308]	; (81028d8 <HAL_ADC_ConfigChannel+0x378>)
 81027a4:	42b4      	cmp	r4, r6
 81027a6:	bf18      	it	ne
 81027a8:	4603      	movne	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81027aa:	428c      	cmp	r4, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81027ac:	689b      	ldr	r3, [r3, #8]
 81027ae:	d002      	beq.n	81027b6 <HAL_ADC_ConfigChannel+0x256>
 81027b0:	4947      	ldr	r1, [pc, #284]	; (81028d0 <HAL_ADC_ConfigChannel+0x370>)
 81027b2:	428c      	cmp	r4, r1
 81027b4:	d151      	bne.n	810285a <HAL_ADC_ConfigChannel+0x2fa>
 81027b6:	4845      	ldr	r0, [pc, #276]	; (81028cc <HAL_ADC_ConfigChannel+0x36c>)
 81027b8:	f7ff feca 	bl	8102550 <LL_ADC_IsEnabled>
 81027bc:	4601      	mov	r1, r0
 81027be:	4844      	ldr	r0, [pc, #272]	; (81028d0 <HAL_ADC_ConfigChannel+0x370>)
 81027c0:	f7ff fec6 	bl	8102550 <LL_ADC_IsEnabled>
 81027c4:	4308      	orrs	r0, r1
 81027c6:	d14d      	bne.n	8102864 <HAL_ADC_ConfigChannel+0x304>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81027c8:	4844      	ldr	r0, [pc, #272]	; (81028dc <HAL_ADC_ConfigChannel+0x37c>)
 81027ca:	4282      	cmp	r2, r0
 81027cc:	f003 71e0 	and.w	r1, r3, #29360128	; 0x1c00000
 81027d0:	d14e      	bne.n	8102870 <HAL_ADC_ConfigChannel+0x310>
 81027d2:	021b      	lsls	r3, r3, #8
 81027d4:	f53f af43 	bmi.w	810265e <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81027d8:	4b41      	ldr	r3, [pc, #260]	; (81028e0 <HAL_ADC_ConfigChannel+0x380>)
 81027da:	429c      	cmp	r4, r3
 81027dc:	f47f af3f 	bne.w	810265e <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81027e0:	4a3d      	ldr	r2, [pc, #244]	; (81028d8 <HAL_ADC_ConfigChannel+0x378>)
 81027e2:	6893      	ldr	r3, [r2, #8]
 81027e4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 81027e8:	430b      	orrs	r3, r1
 81027ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81027ee:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81027f0:	4b3c      	ldr	r3, [pc, #240]	; (81028e4 <HAL_ADC_ConfigChannel+0x384>)
 81027f2:	4a3d      	ldr	r2, [pc, #244]	; (81028e8 <HAL_ADC_ConfigChannel+0x388>)
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	fbb3 f3f2 	udiv	r3, r3, r2
 81027fa:	3301      	adds	r3, #1
 81027fc:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 81027fe:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 8102800:	9b01      	ldr	r3, [sp, #4]
 8102802:	2b00      	cmp	r3, #0
 8102804:	f43f af2b 	beq.w	810265e <HAL_ADC_ConfigChannel+0xfe>
                wait_loop_index--;
 8102808:	9b01      	ldr	r3, [sp, #4]
 810280a:	3b01      	subs	r3, #1
 810280c:	e7f7      	b.n	81027fe <HAL_ADC_ConfigChannel+0x29e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810280e:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8102812:	fab3 f383 	clz	r3, r3
 8102816:	e7b0      	b.n	810277a <HAL_ADC_ConfigChannel+0x21a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102818:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 810281c:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102820:	3201      	adds	r2, #1
 8102822:	0692      	lsls	r2, r2, #26
 8102824:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102828:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 810282c:	fab7 f787 	clz	r7, r7
 8102830:	3701      	adds	r7, #1
 8102832:	f007 071f 	and.w	r7, r7, #31
 8102836:	2101      	movs	r1, #1
 8102838:	40b9      	lsls	r1, r7
 810283a:	e770      	b.n	810271e <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810283c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102840:	fab2 f282 	clz	r2, r2
 8102844:	3201      	adds	r2, #1
 8102846:	f002 021f 	and.w	r2, r2, #31
 810284a:	2303      	movs	r3, #3
 810284c:	f06f 001d 	mvn.w	r0, #29
 8102850:	fb13 0302 	smlabb	r3, r3, r2, r0
 8102854:	e76e      	b.n	8102734 <HAL_ADC_ConfigChannel+0x1d4>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102856:	4b1f      	ldr	r3, [pc, #124]	; (81028d4 <HAL_ADC_ConfigChannel+0x374>)
 8102858:	e7a7      	b.n	81027aa <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810285a:	4821      	ldr	r0, [pc, #132]	; (81028e0 <HAL_ADC_ConfigChannel+0x380>)
 810285c:	f7ff fe78 	bl	8102550 <LL_ADC_IsEnabled>
 8102860:	2800      	cmp	r0, #0
 8102862:	d0b1      	beq.n	81027c8 <HAL_ADC_ConfigChannel+0x268>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102864:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8102866:	f043 0320 	orr.w	r3, r3, #32
 810286a:	656b      	str	r3, [r5, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 810286c:	2301      	movs	r3, #1
 810286e:	e6f7      	b.n	8102660 <HAL_ADC_ConfigChannel+0x100>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102870:	481e      	ldr	r0, [pc, #120]	; (81028ec <HAL_ADC_ConfigChannel+0x38c>)
 8102872:	4282      	cmp	r2, r0
 8102874:	d110      	bne.n	8102898 <HAL_ADC_ConfigChannel+0x338>
 8102876:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 810287a:	f47f aef0 	bne.w	810265e <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810287e:	4a18      	ldr	r2, [pc, #96]	; (81028e0 <HAL_ADC_ConfigChannel+0x380>)
 8102880:	4294      	cmp	r4, r2
 8102882:	f47f aeec 	bne.w	810265e <HAL_ADC_ConfigChannel+0xfe>
 8102886:	4814      	ldr	r0, [pc, #80]	; (81028d8 <HAL_ADC_ConfigChannel+0x378>)
 8102888:	6882      	ldr	r2, [r0, #8]
 810288a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 810288e:	430a      	orrs	r2, r1
 8102890:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8102894:	6082      	str	r2, [r0, #8]
}
 8102896:	e6e3      	b.n	8102660 <HAL_ADC_ConfigChannel+0x100>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102898:	4815      	ldr	r0, [pc, #84]	; (81028f0 <HAL_ADC_ConfigChannel+0x390>)
 810289a:	4282      	cmp	r2, r0
 810289c:	f47f aedf 	bne.w	810265e <HAL_ADC_ConfigChannel+0xfe>
 81028a0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 81028a4:	f47f aedb 	bne.w	810265e <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_VREFINT_INSTANCE(hadc))
 81028a8:	4a0d      	ldr	r2, [pc, #52]	; (81028e0 <HAL_ADC_ConfigChannel+0x380>)
 81028aa:	4294      	cmp	r4, r2
 81028ac:	f47f aed7 	bne.w	810265e <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81028b0:	4809      	ldr	r0, [pc, #36]	; (81028d8 <HAL_ADC_ConfigChannel+0x378>)
 81028b2:	6882      	ldr	r2, [r0, #8]
 81028b4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 81028b8:	430a      	orrs	r2, r1
 81028ba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 81028be:	e7e9      	b.n	8102894 <HAL_ADC_ConfigChannel+0x334>
 81028c0:	5c001000 	.word	0x5c001000
 81028c4:	000fffff 	.word	0x000fffff
 81028c8:	47ff0000 	.word	0x47ff0000
 81028cc:	40022000 	.word	0x40022000
 81028d0:	40022100 	.word	0x40022100
 81028d4:	40022300 	.word	0x40022300
 81028d8:	58026300 	.word	0x58026300
 81028dc:	cb840000 	.word	0xcb840000
 81028e0:	58026000 	.word	0x58026000
 81028e4:	10000050 	.word	0x10000050
 81028e8:	00030d40 	.word	0x00030d40
 81028ec:	c7520000 	.word	0xc7520000
 81028f0:	cfb80000 	.word	0xcfb80000
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81028f4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 81028f6:	f042 0220 	orr.w	r2, r2, #32
 81028fa:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 81028fc:	e6b0      	b.n	8102660 <HAL_ADC_ConfigChannel+0x100>
  __HAL_LOCK(hadc);
 81028fe:	2302      	movs	r3, #2
 8102900:	e6b1      	b.n	8102666 <HAL_ADC_ConfigChannel+0x106>
 8102902:	bf00      	nop

08102904 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102904:	6802      	ldr	r2, [r0, #0]
{
 8102906:	b570      	push	{r4, r5, r6, lr}
 8102908:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810290a:	4610      	mov	r0, r2
 810290c:	f7ff fe20 	bl	8102550 <LL_ADC_IsEnabled>
 8102910:	b108      	cbz	r0, 8102916 <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102912:	2000      	movs	r0, #0
}
 8102914:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8102916:	6891      	ldr	r1, [r2, #8]
 8102918:	4b22      	ldr	r3, [pc, #136]	; (81029a4 <ADC_Enable+0xa0>)
 810291a:	4219      	tst	r1, r3
 810291c:	d009      	beq.n	8102932 <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810291e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102920:	f043 0310 	orr.w	r3, r3, #16
 8102924:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8102928:	f043 0301 	orr.w	r3, r3, #1
 810292c:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 810292e:	2001      	movs	r0, #1
 8102930:	e7f0      	b.n	8102914 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 8102932:	6893      	ldr	r3, [r2, #8]
 8102934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8102938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810293c:	f043 0301 	orr.w	r3, r3, #1
 8102940:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8102942:	f7ff fddf 	bl	8102504 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102946:	6822      	ldr	r2, [r4, #0]
 8102948:	4b17      	ldr	r3, [pc, #92]	; (81029a8 <ADC_Enable+0xa4>)
 810294a:	4918      	ldr	r1, [pc, #96]	; (81029ac <ADC_Enable+0xa8>)
 810294c:	429a      	cmp	r2, r3
    tickstart = HAL_GetTick();
 810294e:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102950:	d00e      	beq.n	8102970 <ADC_Enable+0x6c>
 8102952:	4817      	ldr	r0, [pc, #92]	; (81029b0 <ADC_Enable+0xac>)
 8102954:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8102958:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
 810295c:	428a      	cmp	r2, r1
 810295e:	bf08      	it	eq
 8102960:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102962:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102964:	689b      	ldr	r3, [r3, #8]
 8102966:	d101      	bne.n	810296c <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102968:	06db      	lsls	r3, r3, #27
 810296a:	d1d2      	bne.n	8102912 <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 810296c:	4e11      	ldr	r6, [pc, #68]	; (81029b4 <ADC_Enable+0xb0>)
 810296e:	e013      	b.n	8102998 <ADC_Enable+0x94>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102970:	4b0f      	ldr	r3, [pc, #60]	; (81029b0 <ADC_Enable+0xac>)
 8102972:	e7f6      	b.n	8102962 <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102974:	4610      	mov	r0, r2
 8102976:	f7ff fdeb 	bl	8102550 <LL_ADC_IsEnabled>
 810297a:	b920      	cbnz	r0, 8102986 <ADC_Enable+0x82>
 810297c:	6893      	ldr	r3, [r2, #8]
 810297e:	4033      	ands	r3, r6
 8102980:	f043 0301 	orr.w	r3, r3, #1
 8102984:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8102986:	f7ff fdbd 	bl	8102504 <HAL_GetTick>
 810298a:	1b40      	subs	r0, r0, r5
 810298c:	2802      	cmp	r0, #2
 810298e:	d903      	bls.n	8102998 <ADC_Enable+0x94>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102990:	6823      	ldr	r3, [r4, #0]
 8102992:	681b      	ldr	r3, [r3, #0]
 8102994:	07d8      	lsls	r0, r3, #31
 8102996:	d5c2      	bpl.n	810291e <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102998:	6822      	ldr	r2, [r4, #0]
 810299a:	6813      	ldr	r3, [r2, #0]
 810299c:	07d9      	lsls	r1, r3, #31
 810299e:	d5e9      	bpl.n	8102974 <ADC_Enable+0x70>
 81029a0:	e7b7      	b.n	8102912 <ADC_Enable+0xe>
 81029a2:	bf00      	nop
 81029a4:	8000003f 	.word	0x8000003f
 81029a8:	40022000 	.word	0x40022000
 81029ac:	40022100 	.word	0x40022100
 81029b0:	40022300 	.word	0x40022300
 81029b4:	7fffffc0 	.word	0x7fffffc0

081029b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81029b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81029ba:	4a43      	ldr	r2, [pc, #268]	; (8102ac8 <ADC_ConfigureBoostMode+0x110>)
 81029bc:	6803      	ldr	r3, [r0, #0]
 81029be:	4293      	cmp	r3, r2
{
 81029c0:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81029c2:	d003      	beq.n	81029cc <ADC_ConfigureBoostMode+0x14>
 81029c4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 81029c8:	4293      	cmp	r3, r2
 81029ca:	d125      	bne.n	8102a18 <ADC_ConfigureBoostMode+0x60>
 81029cc:	4b3f      	ldr	r3, [pc, #252]	; (8102acc <ADC_ConfigureBoostMode+0x114>)
 81029ce:	689b      	ldr	r3, [r3, #8]
 81029d0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 81029d4:	bf14      	ite	ne
 81029d6:	2301      	movne	r3, #1
 81029d8:	2300      	moveq	r3, #0
 81029da:	b9fb      	cbnz	r3, 8102a1c <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81029dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 81029e0:	2100      	movs	r1, #0
 81029e2:	f002 fd23 	bl	810542c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 81029e6:	686b      	ldr	r3, [r5, #4]
 81029e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81029ec:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 81029ee:	d04a      	beq.n	8102a86 <ADC_ConfigureBoostMode+0xce>
 81029f0:	d83f      	bhi.n	8102a72 <ADC_ConfigureBoostMode+0xba>
 81029f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81029f6:	d044      	beq.n	8102a82 <ADC_ConfigureBoostMode+0xca>
 81029f8:	d836      	bhi.n	8102a68 <ADC_ConfigureBoostMode+0xb0>
 81029fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81029fe:	d008      	beq.n	8102a12 <ADC_ConfigureBoostMode+0x5a>
 8102a00:	d82c      	bhi.n	8102a5c <ADC_ConfigureBoostMode+0xa4>
 8102a02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8102a06:	d004      	beq.n	8102a12 <ADC_ConfigureBoostMode+0x5a>
 8102a08:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8102a0c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8102a10:	d116      	bne.n	8102a40 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102a12:	0c9b      	lsrs	r3, r3, #18
 8102a14:	005b      	lsls	r3, r3, #1
 8102a16:	e00f      	b.n	8102a38 <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102a18:	4b2d      	ldr	r3, [pc, #180]	; (8102ad0 <ADC_ConfigureBoostMode+0x118>)
 8102a1a:	e7d8      	b.n	81029ce <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8102a1c:	f001 fcae 	bl	810437c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8102a20:	686b      	ldr	r3, [r5, #4]
 8102a22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    freq = HAL_RCC_GetHCLKFreq();
 8102a26:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8102a28:	d005      	beq.n	8102a36 <ADC_ConfigureBoostMode+0x7e>
 8102a2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102a2e:	d006      	beq.n	8102a3e <ADC_ConfigureBoostMode+0x86>
 8102a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102a34:	d104      	bne.n	8102a40 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8102a36:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102a38:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8102a3c:	e000      	b.n	8102a40 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8102a3e:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8102a40:	f7ff fd66 	bl	8102510 <HAL_GetREVID>
 8102a44:	f241 0303 	movw	r3, #4099	; 0x1003
 8102a48:	4298      	cmp	r0, r3
 8102a4a:	682b      	ldr	r3, [r5, #0]
 8102a4c:	d823      	bhi.n	8102a96 <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8102a4e:	4a21      	ldr	r2, [pc, #132]	; (8102ad4 <ADC_ConfigureBoostMode+0x11c>)
 8102a50:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102a52:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8102a54:	d91b      	bls.n	8102a8e <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102a5a:	e01a      	b.n	8102a92 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8102a5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102a60:	d0d7      	beq.n	8102a12 <ADC_ConfigureBoostMode+0x5a>
 8102a62:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102a66:	e7d3      	b.n	8102a10 <ADC_ConfigureBoostMode+0x58>
 8102a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102a6c:	d1e8      	bne.n	8102a40 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8102a6e:	0944      	lsrs	r4, r0, #5
        break;
 8102a70:	e7e6      	b.n	8102a40 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8102a72:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102a76:	d008      	beq.n	8102a8a <ADC_ConfigureBoostMode+0xd2>
 8102a78:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102a7c:	d1e0      	bne.n	8102a40 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8102a7e:	0a04      	lsrs	r4, r0, #8
        break;
 8102a80:	e7de      	b.n	8102a40 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8102a82:	0904      	lsrs	r4, r0, #4
        break;
 8102a84:	e7dc      	b.n	8102a40 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 8102a86:	0984      	lsrs	r4, r0, #6
        break;
 8102a88:	e7da      	b.n	8102a40 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 8102a8a:	09c4      	lsrs	r4, r0, #7
        break;
 8102a8c:	e7d8      	b.n	8102a40 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102a92:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102a94:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8102a96:	4a10      	ldr	r2, [pc, #64]	; (8102ad8 <ADC_ConfigureBoostMode+0x120>)
 8102a98:	4294      	cmp	r4, r2
 8102a9a:	d803      	bhi.n	8102aa4 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8102a9c:	689a      	ldr	r2, [r3, #8]
 8102a9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102aa2:	e7f6      	b.n	8102a92 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8102aa4:	4a0d      	ldr	r2, [pc, #52]	; (8102adc <ADC_ConfigureBoostMode+0x124>)
 8102aa6:	4294      	cmp	r4, r2
 8102aa8:	d803      	bhi.n	8102ab2 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102aaa:	689a      	ldr	r2, [r3, #8]
 8102aac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102ab0:	e7d1      	b.n	8102a56 <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8102ab2:	4a0b      	ldr	r2, [pc, #44]	; (8102ae0 <ADC_ConfigureBoostMode+0x128>)
 8102ab4:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102ab6:	689a      	ldr	r2, [r3, #8]
 8102ab8:	bf9a      	itte	ls
 8102aba:	f422 7240 	bicls.w	r2, r2, #768	; 0x300
 8102abe:	f442 7200 	orrls.w	r2, r2, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102ac2:	f442 7240 	orrhi.w	r2, r2, #768	; 0x300
 8102ac6:	e7e4      	b.n	8102a92 <ADC_ConfigureBoostMode+0xda>
 8102ac8:	40022000 	.word	0x40022000
 8102acc:	40022300 	.word	0x40022300
 8102ad0:	58026300 	.word	0x58026300
 8102ad4:	01312d00 	.word	0x01312d00
 8102ad8:	00bebc21 	.word	0x00bebc21
 8102adc:	017d7841 	.word	0x017d7841
 8102ae0:	02faf081 	.word	0x02faf081

08102ae4 <HAL_ADC_Init>:
{
 8102ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8102ae6:	2300      	movs	r3, #0
 8102ae8:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8102aea:	4604      	mov	r4, r0
 8102aec:	2800      	cmp	r0, #0
 8102aee:	f000 80f1 	beq.w	8102cd4 <HAL_ADC_Init+0x1f0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102af2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8102af4:	b925      	cbnz	r5, 8102b00 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8102af6:	f7fe fbe3 	bl	81012c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8102afa:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8102afc:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102b00:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102b02:	689a      	ldr	r2, [r3, #8]
 8102b04:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102b06:	bf41      	itttt	mi
 8102b08:	689a      	ldrmi	r2, [r3, #8]
 8102b0a:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8102b0e:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8102b12:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102b14:	689a      	ldr	r2, [r3, #8]
 8102b16:	00d1      	lsls	r1, r2, #3
 8102b18:	f140 80a2 	bpl.w	8102c60 <HAL_ADC_Init+0x17c>
 8102b1c:	689a      	ldr	r2, [r3, #8]
 8102b1e:	00d2      	lsls	r2, r2, #3
 8102b20:	f100 80b4 	bmi.w	8102c8c <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102b24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102b26:	f042 0210 	orr.w	r2, r2, #16
 8102b2a:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102b2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8102b2e:	f042 0201 	orr.w	r2, r2, #1
 8102b32:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8102b34:	2501      	movs	r5, #1
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102b36:	4618      	mov	r0, r3
 8102b38:	f7ff fd0e 	bl	8102558 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102b3c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102b3e:	f002 0210 	and.w	r2, r2, #16
 8102b42:	4310      	orrs	r0, r2
 8102b44:	f040 80c2 	bne.w	8102ccc <HAL_ADC_Init+0x1e8>
    ADC_STATE_CLR_SET(hadc->State,
 8102b48:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102b4a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8102b4e:	f042 0202 	orr.w	r2, r2, #2
 8102b52:	6562      	str	r2, [r4, #84]	; 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102b54:	4618      	mov	r0, r3
 8102b56:	f7ff fcfb 	bl	8102550 <LL_ADC_IsEnabled>
 8102b5a:	b980      	cbnz	r0, 8102b7e <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102b5c:	4e5e      	ldr	r6, [pc, #376]	; (8102cd8 <HAL_ADC_Init+0x1f4>)
 8102b5e:	495f      	ldr	r1, [pc, #380]	; (8102cdc <HAL_ADC_Init+0x1f8>)
 8102b60:	42b3      	cmp	r3, r6
 8102b62:	d002      	beq.n	8102b6a <HAL_ADC_Init+0x86>
 8102b64:	428b      	cmp	r3, r1
 8102b66:	f040 8093 	bne.w	8102c90 <HAL_ADC_Init+0x1ac>
 8102b6a:	485b      	ldr	r0, [pc, #364]	; (8102cd8 <HAL_ADC_Init+0x1f4>)
 8102b6c:	f7ff fcf0 	bl	8102550 <LL_ADC_IsEnabled>
 8102b70:	4602      	mov	r2, r0
 8102b72:	485a      	ldr	r0, [pc, #360]	; (8102cdc <HAL_ADC_Init+0x1f8>)
 8102b74:	f7ff fcec 	bl	8102550 <LL_ADC_IsEnabled>
 8102b78:	4310      	orrs	r0, r2
 8102b7a:	f000 8097 	beq.w	8102cac <HAL_ADC_Init+0x1c8>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102b7e:	f7ff fcc7 	bl	8102510 <HAL_GetREVID>
 8102b82:	f241 0303 	movw	r3, #4099	; 0x1003
 8102b86:	4298      	cmp	r0, r3
 8102b88:	7f21      	ldrb	r1, [r4, #28]
 8102b8a:	68a0      	ldr	r0, [r4, #8]
 8102b8c:	7d62      	ldrb	r2, [r4, #21]
 8102b8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8102b90:	f240 8092 	bls.w	8102cb8 <HAL_ADC_Init+0x1d4>
 8102b94:	2810      	cmp	r0, #16
 8102b96:	f040 808f 	bne.w	8102cb8 <HAL_ADC_Init+0x1d4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102b9a:	0352      	lsls	r2, r2, #13
 8102b9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8102ba0:	431a      	orrs	r2, r3
 8102ba2:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102ba6:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102ba8:	bf02      	ittt	eq
 8102baa:	6a22      	ldreq	r2, [r4, #32]
 8102bac:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8102bb0:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102bb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8102bb6:	b122      	cbz	r2, 8102bc2 <HAL_ADC_Init+0xde>
                  | hadc->Init.ExternalTrigConvEdge
 8102bb8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102bba:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102bbe:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102bc0:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102bc2:	6822      	ldr	r2, [r4, #0]
 8102bc4:	4946      	ldr	r1, [pc, #280]	; (8102ce0 <HAL_ADC_Init+0x1fc>)
 8102bc6:	68d0      	ldr	r0, [r2, #12]
 8102bc8:	4001      	ands	r1, r0
 8102bca:	4319      	orrs	r1, r3
 8102bcc:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102bce:	4610      	mov	r0, r2
 8102bd0:	f7ff fcc2 	bl	8102558 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102bd4:	6893      	ldr	r3, [r2, #8]
 8102bd6:	f003 0308 	and.w	r3, r3, #8
 8102bda:	4318      	orrs	r0, r3
 8102bdc:	d127      	bne.n	8102c2e <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102bde:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102be0:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8102be6:	f023 0303 	bic.w	r3, r3, #3
 8102bea:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8102bee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8102bf0:	430b      	orrs	r3, r1
 8102bf2:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8102bf4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8102bf8:	2b01      	cmp	r3, #1
 8102bfa:	d163      	bne.n	8102cc4 <HAL_ADC_Init+0x1e0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102bfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8102bfe:	6910      	ldr	r0, [r2, #16]
 8102c00:	1e59      	subs	r1, r3, #1
 8102c02:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	; 0x40
 8102c06:	4333      	orrs	r3, r6
 8102c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8102c0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8102c0e:	430b      	orrs	r3, r1
 8102c10:	4934      	ldr	r1, [pc, #208]	; (8102ce4 <HAL_ADC_Init+0x200>)
 8102c12:	4001      	ands	r1, r0
 8102c14:	430b      	orrs	r3, r1
 8102c16:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102c1a:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102c1c:	6913      	ldr	r3, [r2, #16]
 8102c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8102c20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8102c24:	430b      	orrs	r3, r1
 8102c26:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8102c28:	4620      	mov	r0, r4
 8102c2a:	f7ff fec5 	bl	81029b8 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102c2e:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102c30:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102c32:	2b01      	cmp	r3, #1
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102c34:	bf05      	ittet	eq
 8102c36:	6b11      	ldreq	r1, [r2, #48]	; 0x30
 8102c38:	69a3      	ldreq	r3, [r4, #24]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102c3a:	6b13      	ldrne	r3, [r2, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102c3c:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8102c40:	bf06      	itte	eq
 8102c42:	f021 010f 	biceq.w	r1, r1, #15
 8102c46:	430b      	orreq	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102c48:	f023 030f 	bicne.w	r3, r3, #15
 8102c4c:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102c4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102c50:	f023 0303 	bic.w	r3, r3, #3
 8102c54:	f043 0301 	orr.w	r3, r3, #1
 8102c58:	6563      	str	r3, [r4, #84]	; 0x54
}
 8102c5a:	4628      	mov	r0, r5
 8102c5c:	b002      	add	sp, #8
 8102c5e:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8102c60:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102c62:	4921      	ldr	r1, [pc, #132]	; (8102ce8 <HAL_ADC_Init+0x204>)
 8102c64:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8102c68:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8102c6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8102c70:	609a      	str	r2, [r3, #8]
 8102c72:	4a1e      	ldr	r2, [pc, #120]	; (8102cec <HAL_ADC_Init+0x208>)
 8102c74:	6812      	ldr	r2, [r2, #0]
 8102c76:	fbb2 f2f1 	udiv	r2, r2, r1
 8102c7a:	3201      	adds	r2, #1
      wait_loop_index--;
 8102c7c:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8102c7e:	9a01      	ldr	r2, [sp, #4]
 8102c80:	2a00      	cmp	r2, #0
 8102c82:	f43f af4b 	beq.w	8102b1c <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8102c86:	9a01      	ldr	r2, [sp, #4]
 8102c88:	3a01      	subs	r2, #1
 8102c8a:	e7f7      	b.n	8102c7c <HAL_ADC_Init+0x198>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102c8c:	2500      	movs	r5, #0
 8102c8e:	e752      	b.n	8102b36 <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102c90:	4817      	ldr	r0, [pc, #92]	; (8102cf0 <HAL_ADC_Init+0x20c>)
 8102c92:	f7ff fc5d 	bl	8102550 <LL_ADC_IsEnabled>
 8102c96:	2800      	cmp	r0, #0
 8102c98:	f47f af71 	bne.w	8102b7e <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102c9c:	4a15      	ldr	r2, [pc, #84]	; (8102cf4 <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102c9e:	6893      	ldr	r3, [r2, #8]
 8102ca0:	6861      	ldr	r1, [r4, #4]
 8102ca2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8102ca6:	430b      	orrs	r3, r1
 8102ca8:	6093      	str	r3, [r2, #8]
}
 8102caa:	e768      	b.n	8102b7e <HAL_ADC_Init+0x9a>
 8102cac:	42b3      	cmp	r3, r6
 8102cae:	d001      	beq.n	8102cb4 <HAL_ADC_Init+0x1d0>
 8102cb0:	428b      	cmp	r3, r1
 8102cb2:	d1f3      	bne.n	8102c9c <HAL_ADC_Init+0x1b8>
 8102cb4:	4a10      	ldr	r2, [pc, #64]	; (8102cf8 <HAL_ADC_Init+0x214>)
 8102cb6:	e7f2      	b.n	8102c9e <HAL_ADC_Init+0x1ba>
                  hadc->Init.Overrun                                                    |
 8102cb8:	4303      	orrs	r3, r0
 8102cba:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102cbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8102cc2:	e770      	b.n	8102ba6 <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102cc4:	6913      	ldr	r3, [r2, #16]
 8102cc6:	f023 0301 	bic.w	r3, r3, #1
 8102cca:	e7a6      	b.n	8102c1a <HAL_ADC_Init+0x136>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102cce:	f043 0310 	orr.w	r3, r3, #16
 8102cd2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8102cd4:	2501      	movs	r5, #1
 8102cd6:	e7c0      	b.n	8102c5a <HAL_ADC_Init+0x176>
 8102cd8:	40022000 	.word	0x40022000
 8102cdc:	40022100 	.word	0x40022100
 8102ce0:	fff0c003 	.word	0xfff0c003
 8102ce4:	fc00f81e 	.word	0xfc00f81e
 8102ce8:	00030d40 	.word	0x00030d40
 8102cec:	10000050 	.word	0x10000050
 8102cf0:	58026000 	.word	0x58026000
 8102cf4:	58026300 	.word	0x58026300
 8102cf8:	40022300 	.word	0x40022300

08102cfc <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102cfc:	6880      	ldr	r0, [r0, #8]
}
 8102cfe:	f000 0001 	and.w	r0, r0, #1
 8102d02:	4770      	bx	lr

08102d04 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102d04:	6880      	ldr	r0, [r0, #8]
}
 8102d06:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8102d0a:	4770      	bx	lr

08102d0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8102d0c:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102d0e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102d12:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8102d14:	2b01      	cmp	r3, #1
{
 8102d16:	b09a      	sub	sp, #104	; 0x68
 8102d18:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8102d1a:	d052      	beq.n	8102dc2 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 8102d1c:	2301      	movs	r3, #1
 8102d1e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102d22:	6816      	ldr	r6, [r2, #0]
 8102d24:	4c28      	ldr	r4, [pc, #160]	; (8102dc8 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102d26:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102d28:	42a6      	cmp	r6, r4
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102d2a:	9016      	str	r0, [sp, #88]	; 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8102d2c:	9017      	str	r0, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102d2e:	d10d      	bne.n	8102d4c <HAL_ADCEx_MultiModeConfigChannel+0x40>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102d30:	4826      	ldr	r0, [pc, #152]	; (8102dcc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8102d32:	f7ff ffe7 	bl	8102d04 <LL_ADC_REG_IsConversionOngoing>
 8102d36:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102d38:	4630      	mov	r0, r6
 8102d3a:	f7ff ffe3 	bl	8102d04 <LL_ADC_REG_IsConversionOngoing>
 8102d3e:	4320      	orrs	r0, r4
 8102d40:	d00d      	beq.n	8102d5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102d42:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8102d44:	f041 0120 	orr.w	r1, r1, #32
 8102d48:	6551      	str	r1, [r2, #84]	; 0x54
 8102d4a:	e027      	b.n	8102d9c <HAL_ADCEx_MultiModeConfigChannel+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102d4c:	6d51      	ldr	r1, [r2, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8102d4e:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102d52:	f041 0120 	orr.w	r1, r1, #32
 8102d56:	6551      	str	r1, [r2, #84]	; 0x54
    return HAL_ERROR;
 8102d58:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8102d5a:	b01a      	add	sp, #104	; 0x68
 8102d5c:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102d5e:	4c1c      	ldr	r4, [pc, #112]	; (8102dd0 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102d60:	68a3      	ldr	r3, [r4, #8]
 8102d62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102d66:	b1dd      	cbz	r5, 8102da0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102d68:	6848      	ldr	r0, [r1, #4]
 8102d6a:	4303      	orrs	r3, r0
 8102d6c:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102d6e:	4630      	mov	r0, r6
 8102d70:	f7ff ffc4 	bl	8102cfc <LL_ADC_IsEnabled>
 8102d74:	4603      	mov	r3, r0
 8102d76:	4815      	ldr	r0, [pc, #84]	; (8102dcc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8102d78:	f7ff ffc0 	bl	8102cfc <LL_ADC_IsEnabled>
 8102d7c:	4303      	orrs	r3, r0
 8102d7e:	d004      	beq.n	8102d8a <HAL_ADCEx_MultiModeConfigChannel+0x7e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102d80:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8102d82:	2300      	movs	r3, #0
 8102d84:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8102d88:	e7e7      	b.n	8102d5a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 8102d8a:	6889      	ldr	r1, [r1, #8]
 8102d8c:	68a0      	ldr	r0, [r4, #8]
 8102d8e:	430d      	orrs	r5, r1
 8102d90:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8102d94:	f021 010f 	bic.w	r1, r1, #15
 8102d98:	430d      	orrs	r5, r1
 8102d9a:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 8102d9c:	4618      	mov	r0, r3
 8102d9e:	e7f0      	b.n	8102d82 <HAL_ADCEx_MultiModeConfigChannel+0x76>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102da0:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102da2:	4630      	mov	r0, r6
 8102da4:	f7ff ffaa 	bl	8102cfc <LL_ADC_IsEnabled>
 8102da8:	4603      	mov	r3, r0
 8102daa:	4808      	ldr	r0, [pc, #32]	; (8102dcc <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8102dac:	f7ff ffa6 	bl	8102cfc <LL_ADC_IsEnabled>
 8102db0:	4303      	orrs	r3, r0
 8102db2:	d1e5      	bne.n	8102d80 <HAL_ADCEx_MultiModeConfigChannel+0x74>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102db4:	68a1      	ldr	r1, [r4, #8]
 8102db6:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8102dba:	f021 010f 	bic.w	r1, r1, #15
 8102dbe:	60a1      	str	r1, [r4, #8]
 8102dc0:	e7ec      	b.n	8102d9c <HAL_ADCEx_MultiModeConfigChannel+0x90>
  __HAL_LOCK(hadc);
 8102dc2:	2002      	movs	r0, #2
 8102dc4:	e7c9      	b.n	8102d5a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8102dc6:	bf00      	nop
 8102dc8:	40022000 	.word	0x40022000
 8102dcc:	40022100 	.word	0x40022100
 8102dd0:	40022300 	.word	0x40022300

08102dd4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102dd4:	4907      	ldr	r1, [pc, #28]	; (8102df4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8102dd6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102dd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102ddc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102dde:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102de4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8102df0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8102df2:	4770      	bx	lr
 8102df4:	e000ed00 	.word	0xe000ed00

08102df8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102df8:	4b16      	ldr	r3, [pc, #88]	; (8102e54 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102dfa:	b530      	push	{r4, r5, lr}
 8102dfc:	68dc      	ldr	r4, [r3, #12]
 8102dfe:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102e02:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102e06:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102e08:	2b04      	cmp	r3, #4
 8102e0a:	bf28      	it	cs
 8102e0c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102e0e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e10:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102e14:	bf8c      	ite	hi
 8102e16:	3c03      	subhi	r4, #3
 8102e18:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e1a:	fa05 f303 	lsl.w	r3, r5, r3
 8102e1e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102e22:	40a5      	lsls	r5, r4
 8102e24:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e28:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8102e2a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e2c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e30:	bfac      	ite	ge
 8102e32:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e36:	4a08      	ldrlt	r2, [pc, #32]	; (8102e58 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e38:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e3c:	bfb8      	it	lt
 8102e3e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e42:	b2db      	uxtb	r3, r3
 8102e44:	bfaa      	itet	ge
 8102e46:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e4a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e4c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8102e50:	bd30      	pop	{r4, r5, pc}
 8102e52:	bf00      	nop
 8102e54:	e000ed00 	.word	0xe000ed00
 8102e58:	e000ed14 	.word	0xe000ed14

08102e5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8102e5c:	2800      	cmp	r0, #0
 8102e5e:	db07      	blt.n	8102e70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102e60:	4a04      	ldr	r2, [pc, #16]	; (8102e74 <HAL_NVIC_EnableIRQ+0x18>)
 8102e62:	0941      	lsrs	r1, r0, #5
 8102e64:	2301      	movs	r3, #1
 8102e66:	f000 001f 	and.w	r0, r0, #31
 8102e6a:	4083      	lsls	r3, r0
 8102e6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8102e70:	4770      	bx	lr
 8102e72:	bf00      	nop
 8102e74:	e000e100 	.word	0xe000e100

08102e78 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102e78:	3801      	subs	r0, #1
 8102e7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8102e7e:	d20b      	bcs.n	8102e98 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102e80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e84:	4a05      	ldr	r2, [pc, #20]	; (8102e9c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102e86:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e88:	21f0      	movs	r1, #240	; 0xf0
 8102e8a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102e8e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102e90:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102e92:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102e94:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8102e96:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8102e98:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8102e9a:	4770      	bx	lr
 8102e9c:	e000ed00 	.word	0xe000ed00

08102ea0 <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102ea0:	4b04      	ldr	r3, [pc, #16]	; (8102eb4 <HAL_GetCurrentCPUID+0x14>)
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 8102ea8:	2b07      	cmp	r3, #7
  }
}
 8102eaa:	bf0c      	ite	eq
 8102eac:	2003      	moveq	r0, #3
 8102eae:	2001      	movne	r0, #1
 8102eb0:	4770      	bx	lr
 8102eb2:	bf00      	nop
 8102eb4:	e000ed00 	.word	0xe000ed00

08102eb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102eba:	f8df c178 	ldr.w	ip, [pc, #376]	; 8103034 <DMA_SetConfig+0x17c>
 8102ebe:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102ec0:	6d87      	ldr	r7, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102ec2:	4564      	cmp	r4, ip
 8102ec4:	d045      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ec6:	4d58      	ldr	r5, [pc, #352]	; (8103028 <DMA_SetConfig+0x170>)
 8102ec8:	42ac      	cmp	r4, r5
 8102eca:	d042      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ecc:	3518      	adds	r5, #24
 8102ece:	42ac      	cmp	r4, r5
 8102ed0:	d03f      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ed2:	3518      	adds	r5, #24
 8102ed4:	42ac      	cmp	r4, r5
 8102ed6:	d03c      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ed8:	3518      	adds	r5, #24
 8102eda:	42ac      	cmp	r4, r5
 8102edc:	d039      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ede:	3518      	adds	r5, #24
 8102ee0:	42ac      	cmp	r4, r5
 8102ee2:	d036      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ee4:	3518      	adds	r5, #24
 8102ee6:	42ac      	cmp	r4, r5
 8102ee8:	d033      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102eea:	3518      	adds	r5, #24
 8102eec:	42ac      	cmp	r4, r5
 8102eee:	d030      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ef0:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8102ef4:	42ac      	cmp	r4, r5
 8102ef6:	d02c      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102ef8:	3518      	adds	r5, #24
 8102efa:	42ac      	cmp	r4, r5
 8102efc:	d029      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102efe:	3518      	adds	r5, #24
 8102f00:	42ac      	cmp	r4, r5
 8102f02:	d026      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f04:	3518      	adds	r5, #24
 8102f06:	42ac      	cmp	r4, r5
 8102f08:	d023      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f0a:	3518      	adds	r5, #24
 8102f0c:	42ac      	cmp	r4, r5
 8102f0e:	d020      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f10:	3518      	adds	r5, #24
 8102f12:	42ac      	cmp	r4, r5
 8102f14:	d01d      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f16:	3518      	adds	r5, #24
 8102f18:	42ac      	cmp	r4, r5
 8102f1a:	d01a      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f1c:	3518      	adds	r5, #24
 8102f1e:	42ac      	cmp	r4, r5
 8102f20:	d017      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f22:	4d42      	ldr	r5, [pc, #264]	; (810302c <DMA_SetConfig+0x174>)
 8102f24:	42ac      	cmp	r4, r5
 8102f26:	d014      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f28:	3514      	adds	r5, #20
 8102f2a:	42ac      	cmp	r4, r5
 8102f2c:	d011      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f2e:	3514      	adds	r5, #20
 8102f30:	42ac      	cmp	r4, r5
 8102f32:	d00e      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f34:	3514      	adds	r5, #20
 8102f36:	42ac      	cmp	r4, r5
 8102f38:	d00b      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f3a:	3514      	adds	r5, #20
 8102f3c:	42ac      	cmp	r4, r5
 8102f3e:	d008      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f40:	3514      	adds	r5, #20
 8102f42:	42ac      	cmp	r4, r5
 8102f44:	d005      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f46:	3514      	adds	r5, #20
 8102f48:	42ac      	cmp	r4, r5
 8102f4a:	d002      	beq.n	8102f52 <DMA_SetConfig+0x9a>
 8102f4c:	3514      	adds	r5, #20
 8102f4e:	42ac      	cmp	r4, r5
 8102f50:	d169      	bne.n	8103026 <DMA_SetConfig+0x16e>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102f52:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	; 0x64
 8102f56:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8102f58:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8102f5a:	b115      	cbz	r5, 8102f62 <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102f5c:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	; 0x70
 8102f60:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102f62:	4564      	cmp	r4, ip
 8102f64:	d037      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f66:	4d30      	ldr	r5, [pc, #192]	; (8103028 <DMA_SetConfig+0x170>)
 8102f68:	42ac      	cmp	r4, r5
 8102f6a:	d034      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f6c:	3518      	adds	r5, #24
 8102f6e:	42ac      	cmp	r4, r5
 8102f70:	d031      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f72:	3518      	adds	r5, #24
 8102f74:	42ac      	cmp	r4, r5
 8102f76:	d02e      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f78:	3518      	adds	r5, #24
 8102f7a:	42ac      	cmp	r4, r5
 8102f7c:	d02b      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f7e:	3518      	adds	r5, #24
 8102f80:	42ac      	cmp	r4, r5
 8102f82:	d028      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f84:	3518      	adds	r5, #24
 8102f86:	42ac      	cmp	r4, r5
 8102f88:	d025      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f8a:	3518      	adds	r5, #24
 8102f8c:	42ac      	cmp	r4, r5
 8102f8e:	d022      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f90:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8102f94:	42ac      	cmp	r4, r5
 8102f96:	d01e      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f98:	3518      	adds	r5, #24
 8102f9a:	42ac      	cmp	r4, r5
 8102f9c:	d01b      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102f9e:	3518      	adds	r5, #24
 8102fa0:	42ac      	cmp	r4, r5
 8102fa2:	d018      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102fa4:	3518      	adds	r5, #24
 8102fa6:	42ac      	cmp	r4, r5
 8102fa8:	d015      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102faa:	3518      	adds	r5, #24
 8102fac:	42ac      	cmp	r4, r5
 8102fae:	d012      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102fb0:	3518      	adds	r5, #24
 8102fb2:	42ac      	cmp	r4, r5
 8102fb4:	d00f      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102fb6:	3518      	adds	r5, #24
 8102fb8:	42ac      	cmp	r4, r5
 8102fba:	d00c      	beq.n	8102fd6 <DMA_SetConfig+0x11e>
 8102fbc:	3518      	adds	r5, #24
 8102fbe:	42ac      	cmp	r4, r5
 8102fc0:	d009      	beq.n	8102fd6 <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102fc2:	4d1a      	ldr	r5, [pc, #104]	; (810302c <DMA_SetConfig+0x174>)
 8102fc4:	42ac      	cmp	r4, r5
 8102fc6:	d119      	bne.n	8102ffc <DMA_SetConfig+0x144>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8102fc8:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8102fca:	f005 061f 	and.w	r6, r5, #31
 8102fce:	2501      	movs	r5, #1
 8102fd0:	40b5      	lsls	r5, r6
 8102fd2:	607d      	str	r5, [r7, #4]
 8102fd4:	e009      	b.n	8102fea <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102fd6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8102fd8:	f005 061f 	and.w	r6, r5, #31
 8102fdc:	253f      	movs	r5, #63	; 0x3f
 8102fde:	40b5      	lsls	r5, r6
 8102fe0:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8102fe2:	6825      	ldr	r5, [r4, #0]
 8102fe4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8102fe8:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8102fea:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8102fec:	6883      	ldr	r3, [r0, #8]
 8102fee:	2b40      	cmp	r3, #64	; 0x40
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8102ff0:	bf0b      	itete	eq
 8102ff2:	60a2      	streq	r2, [r4, #8]
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8102ff4:	60a1      	strne	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8102ff6:	60e1      	streq	r1, [r4, #12]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8102ff8:	60e2      	strne	r2, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8102ffa:	e014      	b.n	8103026 <DMA_SetConfig+0x16e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102ffc:	4d0c      	ldr	r5, [pc, #48]	; (8103030 <DMA_SetConfig+0x178>)
 8102ffe:	42ac      	cmp	r4, r5
 8103000:	d0e2      	beq.n	8102fc8 <DMA_SetConfig+0x110>
 8103002:	3514      	adds	r5, #20
 8103004:	42ac      	cmp	r4, r5
 8103006:	d0df      	beq.n	8102fc8 <DMA_SetConfig+0x110>
 8103008:	3514      	adds	r5, #20
 810300a:	42ac      	cmp	r4, r5
 810300c:	d0dc      	beq.n	8102fc8 <DMA_SetConfig+0x110>
 810300e:	3514      	adds	r5, #20
 8103010:	42ac      	cmp	r4, r5
 8103012:	d0d9      	beq.n	8102fc8 <DMA_SetConfig+0x110>
 8103014:	3514      	adds	r5, #20
 8103016:	42ac      	cmp	r4, r5
 8103018:	d0d6      	beq.n	8102fc8 <DMA_SetConfig+0x110>
 810301a:	3514      	adds	r5, #20
 810301c:	42ac      	cmp	r4, r5
 810301e:	d0d3      	beq.n	8102fc8 <DMA_SetConfig+0x110>
 8103020:	3514      	adds	r5, #20
 8103022:	42ac      	cmp	r4, r5
 8103024:	d0d0      	beq.n	8102fc8 <DMA_SetConfig+0x110>
}
 8103026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103028:	40020028 	.word	0x40020028
 810302c:	58025408 	.word	0x58025408
 8103030:	5802541c 	.word	0x5802541c
 8103034:	40020010 	.word	0x40020010

08103038 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103038:	6803      	ldr	r3, [r0, #0]
 810303a:	4a23      	ldr	r2, [pc, #140]	; (81030c8 <DMA_CalcBaseAndBitshift+0x90>)
 810303c:	4293      	cmp	r3, r2
{
 810303e:	b510      	push	{r4, lr}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103040:	d032      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103042:	3218      	adds	r2, #24
 8103044:	4293      	cmp	r3, r2
 8103046:	d02f      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103048:	3218      	adds	r2, #24
 810304a:	4293      	cmp	r3, r2
 810304c:	d02c      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 810304e:	3218      	adds	r2, #24
 8103050:	4293      	cmp	r3, r2
 8103052:	d029      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103054:	3218      	adds	r2, #24
 8103056:	4293      	cmp	r3, r2
 8103058:	d026      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 810305a:	3218      	adds	r2, #24
 810305c:	4293      	cmp	r3, r2
 810305e:	d023      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103060:	3218      	adds	r2, #24
 8103062:	4293      	cmp	r3, r2
 8103064:	d020      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103066:	3218      	adds	r2, #24
 8103068:	4293      	cmp	r3, r2
 810306a:	d01d      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 810306c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103070:	4293      	cmp	r3, r2
 8103072:	d019      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103074:	3218      	adds	r2, #24
 8103076:	4293      	cmp	r3, r2
 8103078:	d016      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 810307a:	3218      	adds	r2, #24
 810307c:	4293      	cmp	r3, r2
 810307e:	d013      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103080:	3218      	adds	r2, #24
 8103082:	4293      	cmp	r3, r2
 8103084:	d010      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103086:	3218      	adds	r2, #24
 8103088:	4293      	cmp	r3, r2
 810308a:	d00d      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 810308c:	3218      	adds	r2, #24
 810308e:	4293      	cmp	r3, r2
 8103090:	d00a      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103092:	3218      	adds	r2, #24
 8103094:	4293      	cmp	r3, r2
 8103096:	d007      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
 8103098:	3218      	adds	r2, #24
 810309a:	4293      	cmp	r3, r2
 810309c:	d004      	beq.n	81030a8 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 810309e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81030a2:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 81030a4:	4618      	mov	r0, r3
 81030a6:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81030a8:	b2da      	uxtb	r2, r3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81030aa:	4c08      	ldr	r4, [pc, #32]	; (81030cc <DMA_CalcBaseAndBitshift+0x94>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81030ac:	3a10      	subs	r2, #16
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81030ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81030b2:	2118      	movs	r1, #24
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81030b4:	f023 0303 	bic.w	r3, r3, #3
    if (stream_number > 3U)
 81030b8:	2a5f      	cmp	r2, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81030ba:	fbb2 f1f1 	udiv	r1, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81030be:	5c61      	ldrb	r1, [r4, r1]
 81030c0:	65c1      	str	r1, [r0, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81030c2:	bf88      	it	hi
 81030c4:	3304      	addhi	r3, #4
 81030c6:	e7ec      	b.n	81030a2 <DMA_CalcBaseAndBitshift+0x6a>
 81030c8:	40020010 	.word	0x40020010
 81030cc:	0810f5e0 	.word	0x0810f5e0

081030d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81030d0:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81030d2:	4921      	ldr	r1, [pc, #132]	; (8103158 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 81030d4:	428a      	cmp	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81030d6:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81030d8:	d028      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81030da:	3114      	adds	r1, #20
 81030dc:	428a      	cmp	r2, r1
 81030de:	d025      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81030e0:	3114      	adds	r1, #20
 81030e2:	428a      	cmp	r2, r1
 81030e4:	d022      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81030e6:	3114      	adds	r1, #20
 81030e8:	428a      	cmp	r2, r1
 81030ea:	d01f      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81030ec:	3114      	adds	r1, #20
 81030ee:	428a      	cmp	r2, r1
 81030f0:	d01c      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81030f2:	3114      	adds	r1, #20
 81030f4:	428a      	cmp	r2, r1
 81030f6:	d019      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81030f8:	3114      	adds	r1, #20
 81030fa:	428a      	cmp	r2, r1
 81030fc:	d016      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81030fe:	3114      	adds	r1, #20
 8103100:	428a      	cmp	r2, r1
 8103102:	d013      	beq.n	810312c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103104:	2118      	movs	r1, #24
 8103106:	3b10      	subs	r3, #16
 8103108:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 810310c:	4913      	ldr	r1, [pc, #76]	; (810315c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 810310e:	4411      	add	r1, r2
 8103110:	29a8      	cmp	r1, #168	; 0xa8
 8103112:	d91e      	bls.n	8103152 <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103114:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103118:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810311a:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810311e:	f003 031f 	and.w	r3, r3, #31
 8103122:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103126:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103128:	490d      	ldr	r1, [pc, #52]	; (8103160 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 810312a:	e00e      	b.n	810314a <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810312c:	2214      	movs	r2, #20
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810312e:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103130:	3b08      	subs	r3, #8
 8103132:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103136:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810313a:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810313e:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103142:	fa01 f303 	lsl.w	r3, r1, r3
 8103146:	4907      	ldr	r1, [pc, #28]	; (8103164 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103148:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 810314a:	e9c0 2118 	strd	r2, r1, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810314e:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8103150:	4770      	bx	lr
      stream_number += 8U;
 8103152:	3308      	adds	r3, #8
 8103154:	e7de      	b.n	8103114 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8103156:	bf00      	nop
 8103158:	58025408 	.word	0x58025408
 810315c:	bffdfbf0 	.word	0xbffdfbf0
 8103160:	40020880 	.word	0x40020880
 8103164:	58025880 	.word	0x58025880

08103168 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103168:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810316a:	1e51      	subs	r1, r2, #1
 810316c:	2907      	cmp	r1, #7
{
 810316e:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103170:	d821      	bhi.n	81031b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103172:	6803      	ldr	r3, [r0, #0]
 8103174:	4c13      	ldr	r4, [pc, #76]	; (81031c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8103176:	42a3      	cmp	r3, r4
 8103178:	d01e      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 810317a:	3414      	adds	r4, #20
 810317c:	42a3      	cmp	r3, r4
 810317e:	d01b      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103180:	3414      	adds	r4, #20
 8103182:	42a3      	cmp	r3, r4
 8103184:	d018      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103186:	3414      	adds	r4, #20
 8103188:	42a3      	cmp	r3, r4
 810318a:	d015      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 810318c:	3414      	adds	r4, #20
 810318e:	42a3      	cmp	r3, r4
 8103190:	d012      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103192:	3414      	adds	r4, #20
 8103194:	42a3      	cmp	r3, r4
 8103196:	d00f      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103198:	3414      	adds	r4, #20
 810319a:	42a3      	cmp	r3, r4
 810319c:	d00c      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 810319e:	3414      	adds	r4, #20
 81031a0:	42a3      	cmp	r3, r4
 81031a2:	d009      	beq.n	81031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81031a4:	4b08      	ldr	r3, [pc, #32]	; (81031c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 81031a6:	4413      	add	r3, r2
 81031a8:	4a08      	ldr	r2, [pc, #32]	; (81031cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 81031aa:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81031ac:	e9c0 321b 	strd	r3, r2, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81031b0:	2301      	movs	r3, #1
 81031b2:	408b      	lsls	r3, r1
 81031b4:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 81031b6:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81031b8:	4b05      	ldr	r3, [pc, #20]	; (81031d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 81031ba:	4413      	add	r3, r2
 81031bc:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81031be:	4a05      	ldr	r2, [pc, #20]	; (81031d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 81031c0:	e7f4      	b.n	81031ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 81031c2:	bf00      	nop
 81031c4:	58025408 	.word	0x58025408
 81031c8:	1000823f 	.word	0x1000823f
 81031cc:	40020940 	.word	0x40020940
 81031d0:	1600963f 	.word	0x1600963f
 81031d4:	58025940 	.word	0x58025940

081031d8 <HAL_DMA_Init>:
{
 81031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81031da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 81031dc:	f7ff f992 	bl	8102504 <HAL_GetTick>
 81031e0:	4606      	mov	r6, r0
  if(hdma == NULL)
 81031e2:	2c00      	cmp	r4, #0
 81031e4:	f000 80cc 	beq.w	8103380 <HAL_DMA_Init+0x1a8>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81031e8:	6823      	ldr	r3, [r4, #0]
 81031ea:	4d73      	ldr	r5, [pc, #460]	; (81033b8 <HAL_DMA_Init+0x1e0>)
 81031ec:	42ab      	cmp	r3, r5
 81031ee:	d06a      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 81031f0:	4a72      	ldr	r2, [pc, #456]	; (81033bc <HAL_DMA_Init+0x1e4>)
 81031f2:	4293      	cmp	r3, r2
 81031f4:	d067      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 81031f6:	3218      	adds	r2, #24
 81031f8:	4293      	cmp	r3, r2
 81031fa:	d064      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 81031fc:	3218      	adds	r2, #24
 81031fe:	4293      	cmp	r3, r2
 8103200:	d061      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103202:	3218      	adds	r2, #24
 8103204:	4293      	cmp	r3, r2
 8103206:	d05e      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103208:	3218      	adds	r2, #24
 810320a:	4293      	cmp	r3, r2
 810320c:	d05b      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 810320e:	3218      	adds	r2, #24
 8103210:	4293      	cmp	r3, r2
 8103212:	d058      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103214:	3218      	adds	r2, #24
 8103216:	4293      	cmp	r3, r2
 8103218:	d055      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 810321a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810321e:	4293      	cmp	r3, r2
 8103220:	d051      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103222:	3218      	adds	r2, #24
 8103224:	4293      	cmp	r3, r2
 8103226:	d04e      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103228:	3218      	adds	r2, #24
 810322a:	4293      	cmp	r3, r2
 810322c:	d04b      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 810322e:	3218      	adds	r2, #24
 8103230:	4293      	cmp	r3, r2
 8103232:	d048      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103234:	3218      	adds	r2, #24
 8103236:	4293      	cmp	r3, r2
 8103238:	d045      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 810323a:	3218      	adds	r2, #24
 810323c:	4293      	cmp	r3, r2
 810323e:	d042      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103240:	3218      	adds	r2, #24
 8103242:	4293      	cmp	r3, r2
 8103244:	d03f      	beq.n	81032c6 <HAL_DMA_Init+0xee>
 8103246:	3218      	adds	r2, #24
 8103248:	4293      	cmp	r3, r2
 810324a:	d03c      	beq.n	81032c6 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810324c:	4a5c      	ldr	r2, [pc, #368]	; (81033c0 <HAL_DMA_Init+0x1e8>)
 810324e:	4293      	cmp	r3, r2
 8103250:	f040 8138 	bne.w	81034c4 <HAL_DMA_Init+0x2ec>
    hdma->State = HAL_DMA_STATE_BUSY;
 8103254:	2202      	movs	r2, #2
 8103256:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 810325a:	2200      	movs	r2, #0
 810325c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103260:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103262:	68a1      	ldr	r1, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103264:	f420 30ff 	bic.w	r0, r0, #130560	; 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103268:	2940      	cmp	r1, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810326a:	f420 70f8 	bic.w	r0, r0, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810326e:	f000 8147 	beq.w	8103500 <HAL_DMA_Init+0x328>
 8103272:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
 8103276:	4251      	negs	r1, r2
 8103278:	4151      	adcs	r1, r2
 810327a:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810327c:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 8103280:	08d2      	lsrs	r2, r2, #3
 8103282:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103286:	6966      	ldr	r6, [r4, #20]
 8103288:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810328c:	69a6      	ldr	r6, [r4, #24]
 810328e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103292:	69e6      	ldr	r6, [r4, #28]
 8103294:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103298:	6a26      	ldr	r6, [r4, #32]
 810329a:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 810329e:	4302      	orrs	r2, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81032a0:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81032a2:	4a48      	ldr	r2, [pc, #288]	; (81033c4 <HAL_DMA_Init+0x1ec>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81032a4:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81032a6:	441a      	add	r2, r3
 81032a8:	2314      	movs	r3, #20
 81032aa:	fbb2 f2f3 	udiv	r2, r2, r3
 81032ae:	0092      	lsls	r2, r2, #2
 81032b0:	65e2      	str	r2, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81032b2:	4620      	mov	r0, r4
 81032b4:	f7ff fec0 	bl	8103038 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81032b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81032ba:	f003 021f 	and.w	r2, r3, #31
 81032be:	2301      	movs	r3, #1
 81032c0:	4093      	lsls	r3, r2
 81032c2:	6043      	str	r3, [r0, #4]
 81032c4:	e094      	b.n	81033f0 <HAL_DMA_Init+0x218>
    hdma->State = HAL_DMA_STATE_BUSY;
 81032c6:	2202      	movs	r2, #2
 81032c8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 81032cc:	2200      	movs	r2, #0
 81032ce:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 81032d2:	681a      	ldr	r2, [r3, #0]
 81032d4:	f022 0201 	bic.w	r2, r2, #1
 81032d8:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81032da:	6822      	ldr	r2, [r4, #0]
 81032dc:	6813      	ldr	r3, [r2, #0]
 81032de:	07df      	lsls	r7, r3, #31
 81032e0:	d444      	bmi.n	810336c <HAL_DMA_Init+0x194>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81032e2:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81032e4:	4838      	ldr	r0, [pc, #224]	; (81033c8 <HAL_DMA_Init+0x1f0>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81032e6:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81032e8:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 81032ea:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 81032ee:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81032f0:	6926      	ldr	r6, [r4, #16]
 81032f2:	4333      	orrs	r3, r6
 81032f4:	6966      	ldr	r6, [r4, #20]
 81032f6:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81032f8:	69e6      	ldr	r6, [r4, #28]
 81032fa:	430b      	orrs	r3, r1
 81032fc:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 81032fe:	6a26      	ldr	r6, [r4, #32]
 8103300:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103302:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8103304:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8103306:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 810330a:	bf02      	ittt	eq
 810330c:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	; 0x2c
 8103310:	4338      	orreq	r0, r7
 8103312:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103314:	482d      	ldr	r0, [pc, #180]	; (81033cc <HAL_DMA_Init+0x1f4>)
 8103316:	6800      	ldr	r0, [r0, #0]
 8103318:	0c00      	lsrs	r0, r0, #16
 810331a:	0400      	lsls	r0, r0, #16
 810331c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8103320:	d30e      	bcc.n	8103340 <HAL_DMA_Init+0x168>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103322:	6860      	ldr	r0, [r4, #4]
 8103324:	f1a0 0729 	sub.w	r7, r0, #41	; 0x29
 8103328:	2f05      	cmp	r7, #5
 810332a:	d907      	bls.n	810333c <HAL_DMA_Init+0x164>
 810332c:	383f      	subs	r0, #63	; 0x3f
 810332e:	2813      	cmp	r0, #19
 8103330:	d806      	bhi.n	8103340 <HAL_DMA_Init+0x168>
 8103332:	4f27      	ldr	r7, [pc, #156]	; (81033d0 <HAL_DMA_Init+0x1f8>)
 8103334:	fa27 f000 	lsr.w	r0, r7, r0
 8103338:	07c0      	lsls	r0, r0, #31
 810333a:	d501      	bpl.n	8103340 <HAL_DMA_Init+0x168>
        registerValue |= DMA_SxCR_TRBUFF;
 810333c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103340:	6013      	str	r3, [r2, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103342:	6953      	ldr	r3, [r2, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103344:	2e04      	cmp	r6, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103346:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 810334a:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810334e:	d145      	bne.n	81033dc <HAL_DMA_Init+0x204>
      registerValue |= hdma->Init.FIFOThreshold;
 8103350:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8103354:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103356:	2e00      	cmp	r6, #0
 8103358:	d040      	beq.n	81033dc <HAL_DMA_Init+0x204>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810335a:	b999      	cbnz	r1, 8103384 <HAL_DMA_Init+0x1ac>
    switch (hdma->Init.FIFOThreshold)
 810335c:	2801      	cmp	r0, #1
 810335e:	d021      	beq.n	81033a4 <HAL_DMA_Init+0x1cc>
 8103360:	f030 0102 	bics.w	r1, r0, #2
 8103364:	d13a      	bne.n	81033dc <HAL_DMA_Init+0x204>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103366:	01f1      	lsls	r1, r6, #7
 8103368:	d538      	bpl.n	81033dc <HAL_DMA_Init+0x204>
 810336a:	e01e      	b.n	81033aa <HAL_DMA_Init+0x1d2>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810336c:	f7ff f8ca 	bl	8102504 <HAL_GetTick>
 8103370:	1b80      	subs	r0, r0, r6
 8103372:	2805      	cmp	r0, #5
 8103374:	d9b1      	bls.n	81032da <HAL_DMA_Init+0x102>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103376:	2320      	movs	r3, #32
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103378:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810337a:	2303      	movs	r3, #3
 810337c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8103380:	2001      	movs	r0, #1
 8103382:	e017      	b.n	81033b4 <HAL_DMA_Init+0x1dc>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103384:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8103388:	d124      	bne.n	81033d4 <HAL_DMA_Init+0x1fc>
    switch (hdma->Init.FIFOThreshold)
 810338a:	2803      	cmp	r0, #3
 810338c:	d826      	bhi.n	81033dc <HAL_DMA_Init+0x204>
 810338e:	a101      	add	r1, pc, #4	; (adr r1, 8103394 <HAL_DMA_Init+0x1bc>)
 8103390:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8103394:	081033ab 	.word	0x081033ab
 8103398:	08103367 	.word	0x08103367
 810339c:	081033ab 	.word	0x081033ab
 81033a0:	081033a5 	.word	0x081033a5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81033a4:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 81033a8:	d118      	bne.n	81033dc <HAL_DMA_Init+0x204>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81033aa:	2340      	movs	r3, #64	; 0x40
          hdma->State = HAL_DMA_STATE_READY;
 81033ac:	2001      	movs	r0, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81033ae:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 81033b0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 81033b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81033b6:	bf00      	nop
 81033b8:	40020010 	.word	0x40020010
 81033bc:	40020028 	.word	0x40020028
 81033c0:	58025408 	.word	0x58025408
 81033c4:	a7fdabf8 	.word	0xa7fdabf8
 81033c8:	fe10803f 	.word	0xfe10803f
 81033cc:	5c001000 	.word	0x5c001000
 81033d0:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 81033d4:	2802      	cmp	r0, #2
 81033d6:	d9e8      	bls.n	81033aa <HAL_DMA_Init+0x1d2>
 81033d8:	2803      	cmp	r0, #3
 81033da:	d0c4      	beq.n	8103366 <HAL_DMA_Init+0x18e>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81033dc:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81033de:	4620      	mov	r0, r4
 81033e0:	f7ff fe2a 	bl	8103038 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81033e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81033e6:	f003 021f 	and.w	r2, r3, #31
 81033ea:	233f      	movs	r3, #63	; 0x3f
 81033ec:	4093      	lsls	r3, r2
 81033ee:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81033f0:	6823      	ldr	r3, [r4, #0]
 81033f2:	42ab      	cmp	r3, r5
 81033f4:	d045      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 81033f6:	4a45      	ldr	r2, [pc, #276]	; (810350c <HAL_DMA_Init+0x334>)
 81033f8:	4293      	cmp	r3, r2
 81033fa:	d042      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 81033fc:	3218      	adds	r2, #24
 81033fe:	4293      	cmp	r3, r2
 8103400:	d03f      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103402:	3218      	adds	r2, #24
 8103404:	4293      	cmp	r3, r2
 8103406:	d03c      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103408:	3218      	adds	r2, #24
 810340a:	4293      	cmp	r3, r2
 810340c:	d039      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810340e:	3218      	adds	r2, #24
 8103410:	4293      	cmp	r3, r2
 8103412:	d036      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103414:	3218      	adds	r2, #24
 8103416:	4293      	cmp	r3, r2
 8103418:	d033      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810341a:	3218      	adds	r2, #24
 810341c:	4293      	cmp	r3, r2
 810341e:	d030      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103420:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103424:	4293      	cmp	r3, r2
 8103426:	d02c      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103428:	3218      	adds	r2, #24
 810342a:	4293      	cmp	r3, r2
 810342c:	d029      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810342e:	3218      	adds	r2, #24
 8103430:	4293      	cmp	r3, r2
 8103432:	d026      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103434:	3218      	adds	r2, #24
 8103436:	4293      	cmp	r3, r2
 8103438:	d023      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810343a:	3218      	adds	r2, #24
 810343c:	4293      	cmp	r3, r2
 810343e:	d020      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103440:	3218      	adds	r2, #24
 8103442:	4293      	cmp	r3, r2
 8103444:	d01d      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103446:	3218      	adds	r2, #24
 8103448:	4293      	cmp	r3, r2
 810344a:	d01a      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810344c:	3218      	adds	r2, #24
 810344e:	4293      	cmp	r3, r2
 8103450:	d017      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103452:	4a2f      	ldr	r2, [pc, #188]	; (8103510 <HAL_DMA_Init+0x338>)
 8103454:	4293      	cmp	r3, r2
 8103456:	d014      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103458:	3214      	adds	r2, #20
 810345a:	4293      	cmp	r3, r2
 810345c:	d011      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810345e:	3214      	adds	r2, #20
 8103460:	4293      	cmp	r3, r2
 8103462:	d00e      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103464:	3214      	adds	r2, #20
 8103466:	4293      	cmp	r3, r2
 8103468:	d00b      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810346a:	3214      	adds	r2, #20
 810346c:	4293      	cmp	r3, r2
 810346e:	d008      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103470:	3214      	adds	r2, #20
 8103472:	4293      	cmp	r3, r2
 8103474:	d005      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 8103476:	3214      	adds	r2, #20
 8103478:	4293      	cmp	r3, r2
 810347a:	d002      	beq.n	8103482 <HAL_DMA_Init+0x2aa>
 810347c:	3214      	adds	r2, #20
 810347e:	4293      	cmp	r3, r2
 8103480:	d11a      	bne.n	81034b8 <HAL_DMA_Init+0x2e0>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103482:	4620      	mov	r0, r4
 8103484:	f7ff fe24 	bl	81030d0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103488:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810348a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810348c:	2b80      	cmp	r3, #128	; 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 810348e:	bf04      	itt	eq
 8103490:	2300      	moveq	r3, #0
 8103492:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103494:	6863      	ldr	r3, [r4, #4]
 8103496:	b2d9      	uxtb	r1, r3
 8103498:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810349a:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810349e:	3b01      	subs	r3, #1
 81034a0:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81034a2:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81034a4:	f04f 0500 	mov.w	r5, #0
 81034a8:	d82c      	bhi.n	8103504 <HAL_DMA_Init+0x32c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81034aa:	f7ff fe5d 	bl	8103168 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81034ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 81034b0:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81034b2:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 81034b6:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81034b8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 81034ba:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81034bc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 81034be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 81034c2:	e777      	b.n	81033b4 <HAL_DMA_Init+0x1dc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81034c4:	4a13      	ldr	r2, [pc, #76]	; (8103514 <HAL_DMA_Init+0x33c>)
 81034c6:	4293      	cmp	r3, r2
 81034c8:	f43f aec4 	beq.w	8103254 <HAL_DMA_Init+0x7c>
 81034cc:	3214      	adds	r2, #20
 81034ce:	4293      	cmp	r3, r2
 81034d0:	f43f aec0 	beq.w	8103254 <HAL_DMA_Init+0x7c>
 81034d4:	3214      	adds	r2, #20
 81034d6:	4293      	cmp	r3, r2
 81034d8:	f43f aebc 	beq.w	8103254 <HAL_DMA_Init+0x7c>
 81034dc:	3214      	adds	r2, #20
 81034de:	4293      	cmp	r3, r2
 81034e0:	f43f aeb8 	beq.w	8103254 <HAL_DMA_Init+0x7c>
 81034e4:	3214      	adds	r2, #20
 81034e6:	4293      	cmp	r3, r2
 81034e8:	f43f aeb4 	beq.w	8103254 <HAL_DMA_Init+0x7c>
 81034ec:	3214      	adds	r2, #20
 81034ee:	4293      	cmp	r3, r2
 81034f0:	f43f aeb0 	beq.w	8103254 <HAL_DMA_Init+0x7c>
 81034f4:	3214      	adds	r2, #20
 81034f6:	4293      	cmp	r3, r2
 81034f8:	f43f aeac 	beq.w	8103254 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81034fc:	2340      	movs	r3, #64	; 0x40
 81034fe:	e73b      	b.n	8103378 <HAL_DMA_Init+0x1a0>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103500:	2110      	movs	r1, #16
 8103502:	e6bb      	b.n	810327c <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8103504:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103508:	6765      	str	r5, [r4, #116]	; 0x74
 810350a:	e7d5      	b.n	81034b8 <HAL_DMA_Init+0x2e0>
 810350c:	40020028 	.word	0x40020028
 8103510:	58025408 	.word	0x58025408
 8103514:	5802541c 	.word	0x5802541c

08103518 <HAL_DMA_Start_IT>:
{
 8103518:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 810351a:	2800      	cmp	r0, #0
 810351c:	f000 810a 	beq.w	8103734 <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 8103520:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8103524:	2c01      	cmp	r4, #1
 8103526:	f000 8107 	beq.w	8103738 <HAL_DMA_Start_IT+0x220>
  if(HAL_DMA_STATE_READY == hdma->State)
 810352a:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 810352e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8103530:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8103532:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8103536:	f04f 0500 	mov.w	r5, #0
 810353a:	f040 80f6 	bne.w	810372a <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 810353e:	2402      	movs	r4, #2
 8103540:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8103544:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103546:	6545      	str	r5, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8103548:	4d7c      	ldr	r5, [pc, #496]	; (810373c <HAL_DMA_Start_IT+0x224>)
 810354a:	42ac      	cmp	r4, r5
 810354c:	d01e      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 810354e:	4e7c      	ldr	r6, [pc, #496]	; (8103740 <HAL_DMA_Start_IT+0x228>)
 8103550:	42b4      	cmp	r4, r6
 8103552:	d01b      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 8103554:	3618      	adds	r6, #24
 8103556:	42b4      	cmp	r4, r6
 8103558:	d018      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 810355a:	3618      	adds	r6, #24
 810355c:	42b4      	cmp	r4, r6
 810355e:	d015      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 8103560:	3618      	adds	r6, #24
 8103562:	42b4      	cmp	r4, r6
 8103564:	d012      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 8103566:	3618      	adds	r6, #24
 8103568:	42b4      	cmp	r4, r6
 810356a:	d00f      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 810356c:	3618      	adds	r6, #24
 810356e:	42b4      	cmp	r4, r6
 8103570:	d00c      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 8103572:	3618      	adds	r6, #24
 8103574:	42b4      	cmp	r4, r6
 8103576:	d009      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 8103578:	f506 7656 	add.w	r6, r6, #856	; 0x358
 810357c:	42b4      	cmp	r4, r6
 810357e:	d005      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 8103580:	3618      	adds	r6, #24
 8103582:	42b4      	cmp	r4, r6
 8103584:	d002      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 8103586:	3618      	adds	r6, #24
 8103588:	42b4      	cmp	r4, r6
 810358a:	d0ff      	beq.n	810358c <HAL_DMA_Start_IT+0x74>
 810358c:	6826      	ldr	r6, [r4, #0]
 810358e:	f026 0601 	bic.w	r6, r6, #1
 8103592:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8103594:	f7ff fc90 	bl	8102eb8 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103598:	42ac      	cmp	r4, r5
 810359a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 810359c:	d053      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 810359e:	4b68      	ldr	r3, [pc, #416]	; (8103740 <HAL_DMA_Start_IT+0x228>)
 81035a0:	429c      	cmp	r4, r3
 81035a2:	d050      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035a4:	3318      	adds	r3, #24
 81035a6:	429c      	cmp	r4, r3
 81035a8:	d04d      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035aa:	3318      	adds	r3, #24
 81035ac:	429c      	cmp	r4, r3
 81035ae:	d04a      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035b0:	3318      	adds	r3, #24
 81035b2:	429c      	cmp	r4, r3
 81035b4:	d047      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035b6:	3318      	adds	r3, #24
 81035b8:	429c      	cmp	r4, r3
 81035ba:	d044      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035bc:	3318      	adds	r3, #24
 81035be:	429c      	cmp	r4, r3
 81035c0:	d041      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035c2:	3318      	adds	r3, #24
 81035c4:	429c      	cmp	r4, r3
 81035c6:	d03e      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81035cc:	429c      	cmp	r4, r3
 81035ce:	d03a      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035d0:	3318      	adds	r3, #24
 81035d2:	429c      	cmp	r4, r3
 81035d4:	d037      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035d6:	3318      	adds	r3, #24
 81035d8:	429c      	cmp	r4, r3
 81035da:	d034      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035dc:	3318      	adds	r3, #24
 81035de:	429c      	cmp	r4, r3
 81035e0:	d031      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035e2:	3318      	adds	r3, #24
 81035e4:	429c      	cmp	r4, r3
 81035e6:	d02e      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035e8:	3318      	adds	r3, #24
 81035ea:	429c      	cmp	r4, r3
 81035ec:	d02b      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035ee:	3318      	adds	r3, #24
 81035f0:	429c      	cmp	r4, r3
 81035f2:	d028      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
 81035f4:	3318      	adds	r3, #24
 81035f6:	429c      	cmp	r4, r3
 81035f8:	d025      	beq.n	8103646 <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81035fa:	6823      	ldr	r3, [r4, #0]
 81035fc:	f023 030e 	bic.w	r3, r3, #14
 8103600:	f043 030a 	orr.w	r3, r3, #10
 8103604:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103606:	2a00      	cmp	r2, #0
 8103608:	d156      	bne.n	81036b8 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810360a:	4b4e      	ldr	r3, [pc, #312]	; (8103744 <HAL_DMA_Start_IT+0x22c>)
 810360c:	429c      	cmp	r4, r3
 810360e:	d027      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103610:	4b4d      	ldr	r3, [pc, #308]	; (8103748 <HAL_DMA_Start_IT+0x230>)
 8103612:	429c      	cmp	r4, r3
 8103614:	d024      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103616:	3314      	adds	r3, #20
 8103618:	429c      	cmp	r4, r3
 810361a:	d021      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 810361c:	3314      	adds	r3, #20
 810361e:	429c      	cmp	r4, r3
 8103620:	d01e      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103622:	3314      	adds	r3, #20
 8103624:	429c      	cmp	r4, r3
 8103626:	d01b      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103628:	3314      	adds	r3, #20
 810362a:	429c      	cmp	r4, r3
 810362c:	d018      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 810362e:	3314      	adds	r3, #20
 8103630:	429c      	cmp	r4, r3
 8103632:	d015      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103634:	3314      	adds	r3, #20
 8103636:	429c      	cmp	r4, r3
 8103638:	d012      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 810363a:	6823      	ldr	r3, [r4, #0]
 810363c:	f043 0301 	orr.w	r3, r3, #1
 8103640:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103642:	2000      	movs	r0, #0
}
 8103644:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103646:	6823      	ldr	r3, [r4, #0]
 8103648:	f023 031e 	bic.w	r3, r3, #30
 810364c:	f043 0316 	orr.w	r3, r3, #22
 8103650:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103652:	b11a      	cbz	r2, 810365c <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103654:	6823      	ldr	r3, [r4, #0]
 8103656:	f043 0308 	orr.w	r3, r3, #8
 810365a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810365c:	42ac      	cmp	r4, r5
 810365e:	d130      	bne.n	81036c2 <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8103660:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8103662:	681a      	ldr	r2, [r3, #0]
 8103664:	03d2      	lsls	r2, r2, #15
 8103666:	d45b      	bmi.n	8103720 <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 8103668:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 810366a:	b11b      	cbz	r3, 8103674 <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 810366c:	681a      	ldr	r2, [r3, #0]
 810366e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103672:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8103674:	42ac      	cmp	r4, r5
 8103676:	d0e0      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 8103678:	4b31      	ldr	r3, [pc, #196]	; (8103740 <HAL_DMA_Start_IT+0x228>)
 810367a:	429c      	cmp	r4, r3
 810367c:	d0dd      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 810367e:	3318      	adds	r3, #24
 8103680:	429c      	cmp	r4, r3
 8103682:	d0da      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 8103684:	3318      	adds	r3, #24
 8103686:	429c      	cmp	r4, r3
 8103688:	d0d7      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 810368a:	3318      	adds	r3, #24
 810368c:	429c      	cmp	r4, r3
 810368e:	d0d4      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 8103690:	3318      	adds	r3, #24
 8103692:	429c      	cmp	r4, r3
 8103694:	d0d1      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 8103696:	3318      	adds	r3, #24
 8103698:	429c      	cmp	r4, r3
 810369a:	d0ce      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 810369c:	3318      	adds	r3, #24
 810369e:	429c      	cmp	r4, r3
 81036a0:	d0cb      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 81036a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81036a6:	429c      	cmp	r4, r3
 81036a8:	d0c7      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 81036aa:	3318      	adds	r3, #24
 81036ac:	429c      	cmp	r4, r3
 81036ae:	d0c4      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 81036b0:	3318      	adds	r3, #24
 81036b2:	429c      	cmp	r4, r3
 81036b4:	d0c1      	beq.n	810363a <HAL_DMA_Start_IT+0x122>
 81036b6:	e7c0      	b.n	810363a <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 81036b8:	6823      	ldr	r3, [r4, #0]
 81036ba:	f043 0304 	orr.w	r3, r3, #4
 81036be:	6023      	str	r3, [r4, #0]
 81036c0:	e7a3      	b.n	810360a <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81036c2:	4b1f      	ldr	r3, [pc, #124]	; (8103740 <HAL_DMA_Start_IT+0x228>)
 81036c4:	429c      	cmp	r4, r3
 81036c6:	d0cb      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036c8:	3318      	adds	r3, #24
 81036ca:	429c      	cmp	r4, r3
 81036cc:	d0c8      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036ce:	3318      	adds	r3, #24
 81036d0:	429c      	cmp	r4, r3
 81036d2:	d0c5      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036d4:	3318      	adds	r3, #24
 81036d6:	429c      	cmp	r4, r3
 81036d8:	d0c2      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036da:	3318      	adds	r3, #24
 81036dc:	429c      	cmp	r4, r3
 81036de:	d0bf      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036e0:	3318      	adds	r3, #24
 81036e2:	429c      	cmp	r4, r3
 81036e4:	d0bc      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036e6:	3318      	adds	r3, #24
 81036e8:	429c      	cmp	r4, r3
 81036ea:	d0b9      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81036f0:	429c      	cmp	r4, r3
 81036f2:	d0b5      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036f4:	3318      	adds	r3, #24
 81036f6:	429c      	cmp	r4, r3
 81036f8:	d0b2      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 81036fa:	3318      	adds	r3, #24
 81036fc:	429c      	cmp	r4, r3
 81036fe:	d0af      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103700:	3318      	adds	r3, #24
 8103702:	429c      	cmp	r4, r3
 8103704:	d0ac      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103706:	3318      	adds	r3, #24
 8103708:	429c      	cmp	r4, r3
 810370a:	d0a9      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 810370c:	3318      	adds	r3, #24
 810370e:	429c      	cmp	r4, r3
 8103710:	d0a6      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103712:	3318      	adds	r3, #24
 8103714:	429c      	cmp	r4, r3
 8103716:	d0a3      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 8103718:	3318      	adds	r3, #24
 810371a:	429c      	cmp	r4, r3
 810371c:	d0a0      	beq.n	8103660 <HAL_DMA_Start_IT+0x148>
 810371e:	e774      	b.n	810360a <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8103720:	681a      	ldr	r2, [r3, #0]
 8103722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103726:	601a      	str	r2, [r3, #0]
 8103728:	e79e      	b.n	8103668 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810372a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810372e:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8103730:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    return HAL_ERROR;
 8103734:	2001      	movs	r0, #1
 8103736:	e785      	b.n	8103644 <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 8103738:	2002      	movs	r0, #2
 810373a:	e783      	b.n	8103644 <HAL_DMA_Start_IT+0x12c>
 810373c:	40020010 	.word	0x40020010
 8103740:	40020028 	.word	0x40020028
 8103744:	58025408 	.word	0x58025408
 8103748:	5802541c 	.word	0x5802541c

0810374c <HAL_DMA_Abort>:
{
 810374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810374e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8103750:	f7fe fed8 	bl	8102504 <HAL_GetTick>
 8103754:	4607      	mov	r7, r0
  if(hdma == NULL)
 8103756:	b145      	cbz	r5, 810376a <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103758:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 810375c:	2b02      	cmp	r3, #2
 810375e:	d006      	beq.n	810376e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103760:	2380      	movs	r3, #128	; 0x80
 8103762:	656b      	str	r3, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8103764:	2300      	movs	r3, #0
 8103766:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 810376a:	2001      	movs	r0, #1
 810376c:	e153      	b.n	8103a16 <HAL_DMA_Abort+0x2ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810376e:	682c      	ldr	r4, [r5, #0]
 8103770:	4ea9      	ldr	r6, [pc, #676]	; (8103a18 <HAL_DMA_Abort+0x2cc>)
 8103772:	42b4      	cmp	r4, r6
 8103774:	d04a      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 8103776:	4ba9      	ldr	r3, [pc, #676]	; (8103a1c <HAL_DMA_Abort+0x2d0>)
 8103778:	429c      	cmp	r4, r3
 810377a:	d047      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 810377c:	3318      	adds	r3, #24
 810377e:	429c      	cmp	r4, r3
 8103780:	d044      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 8103782:	3318      	adds	r3, #24
 8103784:	429c      	cmp	r4, r3
 8103786:	d041      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 8103788:	3318      	adds	r3, #24
 810378a:	429c      	cmp	r4, r3
 810378c:	d03e      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 810378e:	3318      	adds	r3, #24
 8103790:	429c      	cmp	r4, r3
 8103792:	d03b      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 8103794:	3318      	adds	r3, #24
 8103796:	429c      	cmp	r4, r3
 8103798:	d038      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 810379a:	3318      	adds	r3, #24
 810379c:	429c      	cmp	r4, r3
 810379e:	d035      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81037a4:	429c      	cmp	r4, r3
 81037a6:	d031      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037a8:	3318      	adds	r3, #24
 81037aa:	429c      	cmp	r4, r3
 81037ac:	d02e      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037ae:	3318      	adds	r3, #24
 81037b0:	429c      	cmp	r4, r3
 81037b2:	d02b      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037b4:	3318      	adds	r3, #24
 81037b6:	429c      	cmp	r4, r3
 81037b8:	d028      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037ba:	3318      	adds	r3, #24
 81037bc:	429c      	cmp	r4, r3
 81037be:	d025      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037c0:	3318      	adds	r3, #24
 81037c2:	429c      	cmp	r4, r3
 81037c4:	d022      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037c6:	3318      	adds	r3, #24
 81037c8:	429c      	cmp	r4, r3
 81037ca:	d01f      	beq.n	810380c <HAL_DMA_Abort+0xc0>
 81037cc:	3318      	adds	r3, #24
 81037ce:	429c      	cmp	r4, r3
 81037d0:	d01c      	beq.n	810380c <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81037d2:	6823      	ldr	r3, [r4, #0]
 81037d4:	f023 030e 	bic.w	r3, r3, #14
 81037d8:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81037da:	4b91      	ldr	r3, [pc, #580]	; (8103a20 <HAL_DMA_Abort+0x2d4>)
 81037dc:	429c      	cmp	r4, r3
 81037de:	d01f      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 81037e0:	3314      	adds	r3, #20
 81037e2:	429c      	cmp	r4, r3
 81037e4:	d01c      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 81037e6:	3314      	adds	r3, #20
 81037e8:	429c      	cmp	r4, r3
 81037ea:	d019      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 81037ec:	3314      	adds	r3, #20
 81037ee:	429c      	cmp	r4, r3
 81037f0:	d016      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 81037f2:	3314      	adds	r3, #20
 81037f4:	429c      	cmp	r4, r3
 81037f6:	d013      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 81037f8:	3314      	adds	r3, #20
 81037fa:	429c      	cmp	r4, r3
 81037fc:	d010      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 81037fe:	3314      	adds	r3, #20
 8103800:	429c      	cmp	r4, r3
 8103802:	d00d      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 8103804:	3314      	adds	r3, #20
 8103806:	429c      	cmp	r4, r3
 8103808:	d112      	bne.n	8103830 <HAL_DMA_Abort+0xe4>
 810380a:	e009      	b.n	8103820 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810380c:	6823      	ldr	r3, [r4, #0]
 810380e:	f023 031e 	bic.w	r3, r3, #30
 8103812:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103814:	6963      	ldr	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103816:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810381c:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810381e:	d176      	bne.n	810390e <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103820:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8103822:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8103824:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810382a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 810382c:	f040 80ab 	bne.w	8103986 <HAL_DMA_Abort+0x23a>
 8103830:	6823      	ldr	r3, [r4, #0]
 8103832:	f023 0301 	bic.w	r3, r3, #1
 8103836:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103838:	6823      	ldr	r3, [r4, #0]
 810383a:	07db      	lsls	r3, r3, #31
 810383c:	f100 80cd 	bmi.w	81039da <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103840:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103842:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103844:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103846:	42b3      	cmp	r3, r6
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103848:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810384c:	f000 80d1 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103850:	4972      	ldr	r1, [pc, #456]	; (8103a1c <HAL_DMA_Abort+0x2d0>)
 8103852:	428b      	cmp	r3, r1
 8103854:	f000 80cd 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103858:	3118      	adds	r1, #24
 810385a:	428b      	cmp	r3, r1
 810385c:	f000 80c9 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103860:	3118      	adds	r1, #24
 8103862:	428b      	cmp	r3, r1
 8103864:	f000 80c5 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103868:	3118      	adds	r1, #24
 810386a:	428b      	cmp	r3, r1
 810386c:	f000 80c1 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103870:	3118      	adds	r1, #24
 8103872:	428b      	cmp	r3, r1
 8103874:	f000 80bd 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103878:	3118      	adds	r1, #24
 810387a:	428b      	cmp	r3, r1
 810387c:	f000 80b9 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103880:	3118      	adds	r1, #24
 8103882:	428b      	cmp	r3, r1
 8103884:	f000 80b5 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103888:	f501 7156 	add.w	r1, r1, #856	; 0x358
 810388c:	428b      	cmp	r3, r1
 810388e:	f000 80b0 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 8103892:	3118      	adds	r1, #24
 8103894:	428b      	cmp	r3, r1
 8103896:	f000 80ac 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 810389a:	3118      	adds	r1, #24
 810389c:	428b      	cmp	r3, r1
 810389e:	f000 80a8 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 81038a2:	3118      	adds	r1, #24
 81038a4:	428b      	cmp	r3, r1
 81038a6:	f000 80a4 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 81038aa:	3118      	adds	r1, #24
 81038ac:	428b      	cmp	r3, r1
 81038ae:	f000 80a0 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 81038b2:	3118      	adds	r1, #24
 81038b4:	428b      	cmp	r3, r1
 81038b6:	f000 809c 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 81038ba:	3118      	adds	r1, #24
 81038bc:	428b      	cmp	r3, r1
 81038be:	f000 8098 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
 81038c2:	3118      	adds	r1, #24
 81038c4:	428b      	cmp	r3, r1
 81038c6:	f000 8094 	beq.w	81039f2 <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81038ca:	2101      	movs	r1, #1
 81038cc:	fa01 f202 	lsl.w	r2, r1, r2
 81038d0:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81038d2:	4a53      	ldr	r2, [pc, #332]	; (8103a20 <HAL_DMA_Abort+0x2d4>)
 81038d4:	4293      	cmp	r3, r2
 81038d6:	f000 8092 	beq.w	81039fe <HAL_DMA_Abort+0x2b2>
 81038da:	3214      	adds	r2, #20
 81038dc:	4293      	cmp	r3, r2
 81038de:	f000 808e 	beq.w	81039fe <HAL_DMA_Abort+0x2b2>
 81038e2:	3214      	adds	r2, #20
 81038e4:	4293      	cmp	r3, r2
 81038e6:	f000 808a 	beq.w	81039fe <HAL_DMA_Abort+0x2b2>
 81038ea:	3214      	adds	r2, #20
 81038ec:	4293      	cmp	r3, r2
 81038ee:	f000 8086 	beq.w	81039fe <HAL_DMA_Abort+0x2b2>
 81038f2:	3214      	adds	r2, #20
 81038f4:	4293      	cmp	r3, r2
 81038f6:	f000 8082 	beq.w	81039fe <HAL_DMA_Abort+0x2b2>
 81038fa:	3214      	adds	r2, #20
 81038fc:	4293      	cmp	r3, r2
 81038fe:	d07e      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103900:	3214      	adds	r2, #20
 8103902:	4293      	cmp	r3, r2
 8103904:	d07b      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103906:	3214      	adds	r2, #20
 8103908:	4293      	cmp	r3, r2
 810390a:	d17e      	bne.n	8103a0a <HAL_DMA_Abort+0x2be>
 810390c:	e077      	b.n	81039fe <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810390e:	4b43      	ldr	r3, [pc, #268]	; (8103a1c <HAL_DMA_Abort+0x2d0>)
 8103910:	429c      	cmp	r4, r3
 8103912:	d085      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 8103914:	3318      	adds	r3, #24
 8103916:	429c      	cmp	r4, r3
 8103918:	d082      	beq.n	8103820 <HAL_DMA_Abort+0xd4>
 810391a:	3318      	adds	r3, #24
 810391c:	429c      	cmp	r4, r3
 810391e:	f43f af7f 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 8103922:	3318      	adds	r3, #24
 8103924:	429c      	cmp	r4, r3
 8103926:	f43f af7b 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 810392a:	3318      	adds	r3, #24
 810392c:	429c      	cmp	r4, r3
 810392e:	f43f af77 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 8103932:	3318      	adds	r3, #24
 8103934:	429c      	cmp	r4, r3
 8103936:	f43f af73 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 810393a:	3318      	adds	r3, #24
 810393c:	429c      	cmp	r4, r3
 810393e:	f43f af6f 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 8103942:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103946:	429c      	cmp	r4, r3
 8103948:	f43f af6a 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 810394c:	3318      	adds	r3, #24
 810394e:	429c      	cmp	r4, r3
 8103950:	f43f af66 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 8103954:	3318      	adds	r3, #24
 8103956:	429c      	cmp	r4, r3
 8103958:	f43f af62 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 810395c:	3318      	adds	r3, #24
 810395e:	429c      	cmp	r4, r3
 8103960:	f43f af5e 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 8103964:	3318      	adds	r3, #24
 8103966:	429c      	cmp	r4, r3
 8103968:	f43f af5a 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 810396c:	3318      	adds	r3, #24
 810396e:	429c      	cmp	r4, r3
 8103970:	f43f af56 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 8103974:	3318      	adds	r3, #24
 8103976:	429c      	cmp	r4, r3
 8103978:	f43f af52 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 810397c:	3318      	adds	r3, #24
 810397e:	429c      	cmp	r4, r3
 8103980:	f43f af4e 	beq.w	8103820 <HAL_DMA_Abort+0xd4>
 8103984:	e729      	b.n	81037da <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8103986:	4b25      	ldr	r3, [pc, #148]	; (8103a1c <HAL_DMA_Abort+0x2d0>)
 8103988:	429c      	cmp	r4, r3
 810398a:	f43f af51 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 810398e:	3318      	adds	r3, #24
 8103990:	429c      	cmp	r4, r3
 8103992:	f43f af4d 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 8103996:	3318      	adds	r3, #24
 8103998:	429c      	cmp	r4, r3
 810399a:	f43f af49 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 810399e:	3318      	adds	r3, #24
 81039a0:	429c      	cmp	r4, r3
 81039a2:	f43f af45 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 81039a6:	3318      	adds	r3, #24
 81039a8:	429c      	cmp	r4, r3
 81039aa:	f43f af41 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 81039ae:	3318      	adds	r3, #24
 81039b0:	429c      	cmp	r4, r3
 81039b2:	f43f af3d 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 81039b6:	3318      	adds	r3, #24
 81039b8:	429c      	cmp	r4, r3
 81039ba:	f43f af39 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 81039be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81039c2:	429c      	cmp	r4, r3
 81039c4:	f43f af34 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 81039c8:	3318      	adds	r3, #24
 81039ca:	429c      	cmp	r4, r3
 81039cc:	f43f af30 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 81039d0:	3318      	adds	r3, #24
 81039d2:	429c      	cmp	r4, r3
 81039d4:	f43f af2c 	beq.w	8103830 <HAL_DMA_Abort+0xe4>
 81039d8:	e72a      	b.n	8103830 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81039da:	f7fe fd93 	bl	8102504 <HAL_GetTick>
 81039de:	1bc0      	subs	r0, r0, r7
 81039e0:	2805      	cmp	r0, #5
 81039e2:	f67f af29 	bls.w	8103838 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81039e6:	2320      	movs	r3, #32
 81039e8:	656b      	str	r3, [r5, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 81039ea:	2303      	movs	r3, #3
 81039ec:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 81039f0:	e6b8      	b.n	8103764 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81039f2:	213f      	movs	r1, #63	; 0x3f
 81039f4:	fa01 f202 	lsl.w	r2, r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81039f8:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81039fa:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81039fc:	d112      	bne.n	8103a24 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81039fe:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	; 0x64
 8103a02:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8103a04:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	d13b      	bne.n	8103a82 <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8103a0a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8103a0c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8103a0e:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8103a12:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
}
 8103a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8103a18:	40020010 	.word	0x40020010
 8103a1c:	40020028 	.word	0x40020028
 8103a20:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103a24:	4a1b      	ldr	r2, [pc, #108]	; (8103a94 <HAL_DMA_Abort+0x348>)
 8103a26:	4293      	cmp	r3, r2
 8103a28:	d0e9      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a2a:	3218      	adds	r2, #24
 8103a2c:	4293      	cmp	r3, r2
 8103a2e:	d0e6      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a30:	3218      	adds	r2, #24
 8103a32:	4293      	cmp	r3, r2
 8103a34:	d0e3      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a36:	3218      	adds	r2, #24
 8103a38:	4293      	cmp	r3, r2
 8103a3a:	d0e0      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a3c:	3218      	adds	r2, #24
 8103a3e:	4293      	cmp	r3, r2
 8103a40:	d0dd      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a42:	3218      	adds	r2, #24
 8103a44:	4293      	cmp	r3, r2
 8103a46:	d0da      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a48:	3218      	adds	r2, #24
 8103a4a:	4293      	cmp	r3, r2
 8103a4c:	d0d7      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a4e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103a52:	4293      	cmp	r3, r2
 8103a54:	d0d3      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a56:	3218      	adds	r2, #24
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	d0d0      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a5c:	3218      	adds	r2, #24
 8103a5e:	4293      	cmp	r3, r2
 8103a60:	d0cd      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a62:	3218      	adds	r2, #24
 8103a64:	4293      	cmp	r3, r2
 8103a66:	d0ca      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a68:	3218      	adds	r2, #24
 8103a6a:	4293      	cmp	r3, r2
 8103a6c:	d0c7      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a6e:	3218      	adds	r2, #24
 8103a70:	4293      	cmp	r3, r2
 8103a72:	d0c4      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a74:	3218      	adds	r2, #24
 8103a76:	4293      	cmp	r3, r2
 8103a78:	d0c1      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a7a:	3218      	adds	r2, #24
 8103a7c:	4293      	cmp	r3, r2
 8103a7e:	d0be      	beq.n	81039fe <HAL_DMA_Abort+0x2b2>
 8103a80:	e727      	b.n	81038d2 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103a82:	681a      	ldr	r2, [r3, #0]
 8103a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103a88:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103a8a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8103a8e:	605a      	str	r2, [r3, #4]
 8103a90:	e7bb      	b.n	8103a0a <HAL_DMA_Abort+0x2be>
 8103a92:	bf00      	nop
 8103a94:	40020028 	.word	0x40020028

08103a98 <HAL_DMA_Abort_IT>:
{
 8103a98:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8103a9a:	b128      	cbz	r0, 8103aa8 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103a9c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8103aa0:	2b02      	cmp	r3, #2
 8103aa2:	d003      	beq.n	8103aac <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103aa4:	2380      	movs	r3, #128	; 0x80
 8103aa6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8103aa8:	2001      	movs	r0, #1
 8103aaa:	e05d      	b.n	8103b68 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103aac:	6803      	ldr	r3, [r0, #0]
 8103aae:	4a3f      	ldr	r2, [pc, #252]	; (8103bac <HAL_DMA_Abort_IT+0x114>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d051      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103ab4:	3218      	adds	r2, #24
 8103ab6:	4293      	cmp	r3, r2
 8103ab8:	d04e      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103aba:	3218      	adds	r2, #24
 8103abc:	4293      	cmp	r3, r2
 8103abe:	d04b      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103ac0:	3218      	adds	r2, #24
 8103ac2:	4293      	cmp	r3, r2
 8103ac4:	d048      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103ac6:	3218      	adds	r2, #24
 8103ac8:	4293      	cmp	r3, r2
 8103aca:	d045      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103acc:	3218      	adds	r2, #24
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d042      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103ad2:	3218      	adds	r2, #24
 8103ad4:	4293      	cmp	r3, r2
 8103ad6:	d03f      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103ad8:	3218      	adds	r2, #24
 8103ada:	4293      	cmp	r3, r2
 8103adc:	d03c      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103ade:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d038      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103ae6:	3218      	adds	r2, #24
 8103ae8:	4293      	cmp	r3, r2
 8103aea:	d035      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103aec:	3218      	adds	r2, #24
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d032      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103af2:	3218      	adds	r2, #24
 8103af4:	4293      	cmp	r3, r2
 8103af6:	d02f      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103af8:	3218      	adds	r2, #24
 8103afa:	4293      	cmp	r3, r2
 8103afc:	d02c      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103afe:	3218      	adds	r2, #24
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d029      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103b04:	3218      	adds	r2, #24
 8103b06:	4293      	cmp	r3, r2
 8103b08:	d026      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
 8103b0a:	3218      	adds	r2, #24
 8103b0c:	4293      	cmp	r3, r2
 8103b0e:	d023      	beq.n	8103b58 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103b10:	681a      	ldr	r2, [r3, #0]
 8103b12:	f022 020e 	bic.w	r2, r2, #14
 8103b16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8103b18:	681a      	ldr	r2, [r3, #0]
 8103b1a:	f022 0201 	bic.w	r2, r2, #1
 8103b1e:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103b20:	4a23      	ldr	r2, [pc, #140]	; (8103bb0 <HAL_DMA_Abort_IT+0x118>)
 8103b22:	4293      	cmp	r3, r2
 8103b24:	d121      	bne.n	8103b6a <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103b26:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8103b28:	6813      	ldr	r3, [r2, #0]
 8103b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103b2e:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103b30:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	; 0x58
 8103b34:	f003 021f 	and.w	r2, r3, #31
 8103b38:	2301      	movs	r3, #1
 8103b3a:	4093      	lsls	r3, r2
 8103b3c:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103b3e:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
 8103b42:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8103b44:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8103b46:	b32b      	cbz	r3, 8103b94 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103b48:	681a      	ldr	r2, [r3, #0]
 8103b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103b4e:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103b50:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	; 0x70
 8103b54:	605a      	str	r2, [r3, #4]
 8103b56:	e01d      	b.n	8103b94 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8103b58:	2204      	movs	r2, #4
 8103b5a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8103b5e:	681a      	ldr	r2, [r3, #0]
 8103b60:	f022 0201 	bic.w	r2, r2, #1
 8103b64:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8103b66:	2000      	movs	r0, #0
}
 8103b68:	bd10      	pop	{r4, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103b6a:	4a12      	ldr	r2, [pc, #72]	; (8103bb4 <HAL_DMA_Abort_IT+0x11c>)
 8103b6c:	4293      	cmp	r3, r2
 8103b6e:	d0da      	beq.n	8103b26 <HAL_DMA_Abort_IT+0x8e>
 8103b70:	3214      	adds	r2, #20
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d0d7      	beq.n	8103b26 <HAL_DMA_Abort_IT+0x8e>
 8103b76:	3214      	adds	r2, #20
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d0d4      	beq.n	8103b26 <HAL_DMA_Abort_IT+0x8e>
 8103b7c:	3214      	adds	r2, #20
 8103b7e:	4293      	cmp	r3, r2
 8103b80:	d0d1      	beq.n	8103b26 <HAL_DMA_Abort_IT+0x8e>
 8103b82:	3214      	adds	r2, #20
 8103b84:	4293      	cmp	r3, r2
 8103b86:	d0ce      	beq.n	8103b26 <HAL_DMA_Abort_IT+0x8e>
 8103b88:	3214      	adds	r2, #20
 8103b8a:	4293      	cmp	r3, r2
 8103b8c:	d0cb      	beq.n	8103b26 <HAL_DMA_Abort_IT+0x8e>
 8103b8e:	3214      	adds	r2, #20
 8103b90:	4293      	cmp	r3, r2
 8103b92:	d0c8      	beq.n	8103b26 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8103b94:	2301      	movs	r3, #1
 8103b96:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8103b9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8103b9c:	2400      	movs	r4, #0
 8103b9e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8103ba2:	b10b      	cbz	r3, 8103ba8 <HAL_DMA_Abort_IT+0x110>
        hdma->XferAbortCallback(hdma);
 8103ba4:	4798      	blx	r3
 8103ba6:	e7de      	b.n	8103b66 <HAL_DMA_Abort_IT+0xce>
  return HAL_OK;
 8103ba8:	4618      	mov	r0, r3
 8103baa:	e7dd      	b.n	8103b68 <HAL_DMA_Abort_IT+0xd0>
 8103bac:	40020010 	.word	0x40020010
 8103bb0:	58025408 	.word	0x58025408
 8103bb4:	5802541c 	.word	0x5802541c

08103bb8 <HAL_DMA_IRQHandler>:
{
 8103bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8103bbc:	2300      	movs	r3, #0
 8103bbe:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103bc0:	4b84      	ldr	r3, [pc, #528]	; (8103dd4 <HAL_DMA_IRQHandler+0x21c>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103bc2:	4f85      	ldr	r7, [pc, #532]	; (8103dd8 <HAL_DMA_IRQHandler+0x220>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8103bc4:	681e      	ldr	r6, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103bc6:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103bc8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103bca:	42bb      	cmp	r3, r7
  tmpisr_dma  = regs_dma->ISR;
 8103bcc:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8103bd0:	f8d5 c000 	ldr.w	ip, [r5]
{
 8103bd4:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103bd6:	d047      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103bd8:	4a80      	ldr	r2, [pc, #512]	; (8103ddc <HAL_DMA_IRQHandler+0x224>)
 8103bda:	4293      	cmp	r3, r2
 8103bdc:	d044      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103bde:	3218      	adds	r2, #24
 8103be0:	4293      	cmp	r3, r2
 8103be2:	d041      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103be4:	3218      	adds	r2, #24
 8103be6:	4293      	cmp	r3, r2
 8103be8:	d03e      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103bea:	3218      	adds	r2, #24
 8103bec:	4293      	cmp	r3, r2
 8103bee:	d03b      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103bf0:	3218      	adds	r2, #24
 8103bf2:	4293      	cmp	r3, r2
 8103bf4:	d038      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103bf6:	3218      	adds	r2, #24
 8103bf8:	4293      	cmp	r3, r2
 8103bfa:	d035      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103bfc:	3218      	adds	r2, #24
 8103bfe:	4293      	cmp	r3, r2
 8103c00:	d032      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c02:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103c06:	4293      	cmp	r3, r2
 8103c08:	d02e      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c0a:	3218      	adds	r2, #24
 8103c0c:	4293      	cmp	r3, r2
 8103c0e:	d02b      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c10:	3218      	adds	r2, #24
 8103c12:	4293      	cmp	r3, r2
 8103c14:	d028      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c16:	3218      	adds	r2, #24
 8103c18:	4293      	cmp	r3, r2
 8103c1a:	d025      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c1c:	3218      	adds	r2, #24
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d022      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c22:	3218      	adds	r2, #24
 8103c24:	4293      	cmp	r3, r2
 8103c26:	d01f      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c28:	3218      	adds	r2, #24
 8103c2a:	4293      	cmp	r3, r2
 8103c2c:	d01c      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
 8103c2e:	3218      	adds	r2, #24
 8103c30:	4293      	cmp	r3, r2
 8103c32:	d019      	beq.n	8103c68 <HAL_DMA_IRQHandler+0xb0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103c34:	4a6a      	ldr	r2, [pc, #424]	; (8103de0 <HAL_DMA_IRQHandler+0x228>)
 8103c36:	4293      	cmp	r3, r2
 8103c38:	f040 8134 	bne.w	8103ea4 <HAL_DMA_IRQHandler+0x2ec>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103c3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103c3e:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103c40:	f001 011f 	and.w	r1, r1, #31
 8103c44:	2004      	movs	r0, #4
 8103c46:	4088      	lsls	r0, r1
 8103c48:	ea10 0f0c 	tst.w	r0, ip
 8103c4c:	f000 8151 	beq.w	8103ef2 <HAL_DMA_IRQHandler+0x33a>
 8103c50:	0756      	lsls	r6, r2, #29
 8103c52:	f140 814e 	bpl.w	8103ef2 <HAL_DMA_IRQHandler+0x33a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c56:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103c58:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c5a:	f140 8142 	bpl.w	8103ee2 <HAL_DMA_IRQHandler+0x32a>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103c5e:	03d3      	lsls	r3, r2, #15
 8103c60:	f100 8145 	bmi.w	8103eee <HAL_DMA_IRQHandler+0x336>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103c64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8103c66:	e0a0      	b.n	8103daa <HAL_DMA_IRQHandler+0x1f2>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103c68:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8103c6a:	2108      	movs	r1, #8
 8103c6c:	f002 021f 	and.w	r2, r2, #31
 8103c70:	4091      	lsls	r1, r2
 8103c72:	ea11 0f08 	tst.w	r1, r8
 8103c76:	d00b      	beq.n	8103c90 <HAL_DMA_IRQHandler+0xd8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103c78:	6818      	ldr	r0, [r3, #0]
 8103c7a:	0740      	lsls	r0, r0, #29
 8103c7c:	d508      	bpl.n	8103c90 <HAL_DMA_IRQHandler+0xd8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103c7e:	6818      	ldr	r0, [r3, #0]
 8103c80:	f020 0004 	bic.w	r0, r0, #4
 8103c84:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103c86:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103c88:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8103c8a:	f041 0101 	orr.w	r1, r1, #1
 8103c8e:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103c90:	fa28 f102 	lsr.w	r1, r8, r2
 8103c94:	07c8      	lsls	r0, r1, #31
 8103c96:	d509      	bpl.n	8103cac <HAL_DMA_IRQHandler+0xf4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103c98:	6959      	ldr	r1, [r3, #20]
 8103c9a:	0609      	lsls	r1, r1, #24
 8103c9c:	d506      	bpl.n	8103cac <HAL_DMA_IRQHandler+0xf4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103c9e:	2101      	movs	r1, #1
 8103ca0:	4091      	lsls	r1, r2
 8103ca2:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103ca4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8103ca6:	f041 0102 	orr.w	r1, r1, #2
 8103caa:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103cac:	2104      	movs	r1, #4
 8103cae:	4091      	lsls	r1, r2
 8103cb0:	ea11 0f08 	tst.w	r1, r8
 8103cb4:	d007      	beq.n	8103cc6 <HAL_DMA_IRQHandler+0x10e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103cb6:	6818      	ldr	r0, [r3, #0]
 8103cb8:	0780      	lsls	r0, r0, #30
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103cba:	bf41      	itttt	mi
 8103cbc:	60a9      	strmi	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103cbe:	6d61      	ldrmi	r1, [r4, #84]	; 0x54
 8103cc0:	f041 0104 	orrmi.w	r1, r1, #4
 8103cc4:	6561      	strmi	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103cc6:	2110      	movs	r1, #16
 8103cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8103ccc:	ea12 0f08 	tst.w	r2, r8
 8103cd0:	d00f      	beq.n	8103cf2 <HAL_DMA_IRQHandler+0x13a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103cd2:	6819      	ldr	r1, [r3, #0]
 8103cd4:	0709      	lsls	r1, r1, #28
 8103cd6:	d50c      	bpl.n	8103cf2 <HAL_DMA_IRQHandler+0x13a>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103cd8:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103cda:	681a      	ldr	r2, [r3, #0]
 8103cdc:	0350      	lsls	r0, r2, #13
 8103cde:	d56c      	bpl.n	8103dba <HAL_DMA_IRQHandler+0x202>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	0319      	lsls	r1, r3, #12
 8103ce4:	d401      	bmi.n	8103cea <HAL_DMA_IRQHandler+0x132>
          if(hdma->XferHalfCpltCallback != NULL)
 8103ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8103ce8:	e000      	b.n	8103cec <HAL_DMA_IRQHandler+0x134>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103cea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8103cec:	b10b      	cbz	r3, 8103cf2 <HAL_DMA_IRQHandler+0x13a>
            hdma->XferHalfCpltCallback(hdma);
 8103cee:	4620      	mov	r0, r4
 8103cf0:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103cf2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8103cf4:	2120      	movs	r1, #32
 8103cf6:	f002 021f 	and.w	r2, r2, #31
 8103cfa:	4091      	lsls	r1, r2
 8103cfc:	ea11 0f08 	tst.w	r1, r8
 8103d00:	d07a      	beq.n	8103df8 <HAL_DMA_IRQHandler+0x240>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103d02:	6823      	ldr	r3, [r4, #0]
 8103d04:	42bb      	cmp	r3, r7
 8103d06:	d02d      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d08:	4834      	ldr	r0, [pc, #208]	; (8103ddc <HAL_DMA_IRQHandler+0x224>)
 8103d0a:	4283      	cmp	r3, r0
 8103d0c:	d02a      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d0e:	3018      	adds	r0, #24
 8103d10:	4283      	cmp	r3, r0
 8103d12:	d027      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d14:	3018      	adds	r0, #24
 8103d16:	4283      	cmp	r3, r0
 8103d18:	d024      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d1a:	3018      	adds	r0, #24
 8103d1c:	4283      	cmp	r3, r0
 8103d1e:	d021      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d20:	3018      	adds	r0, #24
 8103d22:	4283      	cmp	r3, r0
 8103d24:	d01e      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d26:	3018      	adds	r0, #24
 8103d28:	4283      	cmp	r3, r0
 8103d2a:	d01b      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d2c:	3018      	adds	r0, #24
 8103d2e:	4283      	cmp	r3, r0
 8103d30:	d018      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d32:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8103d36:	4283      	cmp	r3, r0
 8103d38:	d014      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d3a:	3018      	adds	r0, #24
 8103d3c:	4283      	cmp	r3, r0
 8103d3e:	d011      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d40:	3018      	adds	r0, #24
 8103d42:	4283      	cmp	r3, r0
 8103d44:	d00e      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d46:	3018      	adds	r0, #24
 8103d48:	4283      	cmp	r3, r0
 8103d4a:	d00b      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d4c:	3018      	adds	r0, #24
 8103d4e:	4283      	cmp	r3, r0
 8103d50:	d008      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d52:	3018      	adds	r0, #24
 8103d54:	4283      	cmp	r3, r0
 8103d56:	d005      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d58:	3018      	adds	r0, #24
 8103d5a:	4283      	cmp	r3, r0
 8103d5c:	d002      	beq.n	8103d64 <HAL_DMA_IRQHandler+0x1ac>
 8103d5e:	3018      	adds	r0, #24
 8103d60:	4283      	cmp	r3, r0
 8103d62:	d132      	bne.n	8103dca <HAL_DMA_IRQHandler+0x212>
 8103d64:	6818      	ldr	r0, [r3, #0]
 8103d66:	f010 0f10 	tst.w	r0, #16
 8103d6a:	d045      	beq.n	8103df8 <HAL_DMA_IRQHandler+0x240>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103d6c:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103d6e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8103d72:	2904      	cmp	r1, #4
 8103d74:	d136      	bne.n	8103de4 <HAL_DMA_IRQHandler+0x22c>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103d76:	6819      	ldr	r1, [r3, #0]
 8103d78:	f021 0116 	bic.w	r1, r1, #22
 8103d7c:	6019      	str	r1, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103d7e:	6959      	ldr	r1, [r3, #20]
 8103d80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103d84:	6159      	str	r1, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103d86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8103d88:	b909      	cbnz	r1, 8103d8e <HAL_DMA_IRQHandler+0x1d6>
 8103d8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8103d8c:	b119      	cbz	r1, 8103d96 <HAL_DMA_IRQHandler+0x1de>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103d8e:	6819      	ldr	r1, [r3, #0]
 8103d90:	f021 0108 	bic.w	r1, r1, #8
 8103d94:	6019      	str	r1, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103d96:	233f      	movs	r3, #63	; 0x3f
 8103d98:	4093      	lsls	r3, r2
 8103d9a:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8103d9c:	2301      	movs	r3, #1
 8103d9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8103da2:	2300      	movs	r3, #0
 8103da4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8103da8:	6d23      	ldr	r3, [r4, #80]	; 0x50
      if (hdma->XferErrorCallback != NULL)
 8103daa:	2b00      	cmp	r3, #0
 8103dac:	f000 8096 	beq.w	8103edc <HAL_DMA_IRQHandler+0x324>
        hdma->XferErrorCallback(hdma);
 8103db0:	4620      	mov	r0, r4
}
 8103db2:	b002      	add	sp, #8
 8103db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8103db8:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103dba:	681a      	ldr	r2, [r3, #0]
 8103dbc:	05d2      	lsls	r2, r2, #23
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103dbe:	bf5e      	ittt	pl
 8103dc0:	681a      	ldrpl	r2, [r3, #0]
 8103dc2:	f022 0208 	bicpl.w	r2, r2, #8
 8103dc6:	601a      	strpl	r2, [r3, #0]
 8103dc8:	e78d      	b.n	8103ce6 <HAL_DMA_IRQHandler+0x12e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103dca:	6818      	ldr	r0, [r3, #0]
 8103dcc:	f010 0f02 	tst.w	r0, #2
 8103dd0:	e7cb      	b.n	8103d6a <HAL_DMA_IRQHandler+0x1b2>
 8103dd2:	bf00      	nop
 8103dd4:	10000050 	.word	0x10000050
 8103dd8:	40020010 	.word	0x40020010
 8103ddc:	40020028 	.word	0x40020028
 8103de0:	58025408 	.word	0x58025408
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103de4:	681a      	ldr	r2, [r3, #0]
 8103de6:	0355      	lsls	r5, r2, #13
 8103de8:	d54d      	bpl.n	8103e86 <HAL_DMA_IRQHandler+0x2ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	0318      	lsls	r0, r3, #12
 8103dee:	d457      	bmi.n	8103ea0 <HAL_DMA_IRQHandler+0x2e8>
            if(hdma->XferM1CpltCallback != NULL)
 8103df0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if(hdma->XferCpltCallback != NULL)
 8103df2:	b10b      	cbz	r3, 8103df8 <HAL_DMA_IRQHandler+0x240>
            hdma->XferCpltCallback(hdma);
 8103df4:	4620      	mov	r0, r4
 8103df6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103df8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8103dfa:	2b00      	cmp	r3, #0
 8103dfc:	d06e      	beq.n	8103edc <HAL_DMA_IRQHandler+0x324>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8103dfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8103e00:	07d9      	lsls	r1, r3, #31
 8103e02:	d53e      	bpl.n	8103e82 <HAL_DMA_IRQHandler+0x2ca>
        hdma->State = HAL_DMA_STATE_ABORT;
 8103e04:	2304      	movs	r3, #4
 8103e06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8103e0a:	6823      	ldr	r3, [r4, #0]
 8103e0c:	42bb      	cmp	r3, r7
 8103e0e:	d01e      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e10:	4a4e      	ldr	r2, [pc, #312]	; (8103f4c <HAL_DMA_IRQHandler+0x394>)
 8103e12:	4293      	cmp	r3, r2
 8103e14:	d01b      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e16:	3218      	adds	r2, #24
 8103e18:	4293      	cmp	r3, r2
 8103e1a:	d018      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e1c:	3218      	adds	r2, #24
 8103e1e:	4293      	cmp	r3, r2
 8103e20:	d015      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e22:	3218      	adds	r2, #24
 8103e24:	4293      	cmp	r3, r2
 8103e26:	d012      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e28:	3218      	adds	r2, #24
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d00f      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e2e:	3218      	adds	r2, #24
 8103e30:	4293      	cmp	r3, r2
 8103e32:	d00c      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e34:	3218      	adds	r2, #24
 8103e36:	4293      	cmp	r3, r2
 8103e38:	d009      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e3a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103e3e:	4293      	cmp	r3, r2
 8103e40:	d005      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e42:	3218      	adds	r2, #24
 8103e44:	4293      	cmp	r3, r2
 8103e46:	d002      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e48:	3218      	adds	r2, #24
 8103e4a:	4293      	cmp	r3, r2
 8103e4c:	d0ff      	beq.n	8103e4e <HAL_DMA_IRQHandler+0x296>
 8103e4e:	681a      	ldr	r2, [r3, #0]
 8103e50:	f022 0201 	bic.w	r2, r2, #1
 8103e54:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103e56:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8103e5a:	fbb6 f6f2 	udiv	r6, r6, r2
          if (++count > timeout)
 8103e5e:	9a01      	ldr	r2, [sp, #4]
 8103e60:	3201      	adds	r2, #1
 8103e62:	42b2      	cmp	r2, r6
 8103e64:	9201      	str	r2, [sp, #4]
 8103e66:	d802      	bhi.n	8103e6e <HAL_DMA_IRQHandler+0x2b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103e68:	681a      	ldr	r2, [r3, #0]
 8103e6a:	07d2      	lsls	r2, r2, #31
 8103e6c:	d4f7      	bmi.n	8103e5e <HAL_DMA_IRQHandler+0x2a6>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8103e72:	bf4c      	ite	mi
 8103e74:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8103e76:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 8103e78:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8103e7c:	2300      	movs	r3, #0
 8103e7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 8103e82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8103e84:	e791      	b.n	8103daa <HAL_DMA_IRQHandler+0x1f2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103e86:	681a      	ldr	r2, [r3, #0]
 8103e88:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8103e8c:	d108      	bne.n	8103ea0 <HAL_DMA_IRQHandler+0x2e8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103e8e:	6819      	ldr	r1, [r3, #0]
 8103e90:	f021 0110 	bic.w	r1, r1, #16
 8103e94:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8103e96:	2301      	movs	r3, #1
 8103e98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8103e9c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8103ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8103ea2:	e7a6      	b.n	8103df2 <HAL_DMA_IRQHandler+0x23a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103ea4:	4a2a      	ldr	r2, [pc, #168]	; (8103f50 <HAL_DMA_IRQHandler+0x398>)
 8103ea6:	4293      	cmp	r3, r2
 8103ea8:	f43f aec8 	beq.w	8103c3c <HAL_DMA_IRQHandler+0x84>
 8103eac:	3214      	adds	r2, #20
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	f43f aec4 	beq.w	8103c3c <HAL_DMA_IRQHandler+0x84>
 8103eb4:	3214      	adds	r2, #20
 8103eb6:	4293      	cmp	r3, r2
 8103eb8:	f43f aec0 	beq.w	8103c3c <HAL_DMA_IRQHandler+0x84>
 8103ebc:	3214      	adds	r2, #20
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	f43f aebc 	beq.w	8103c3c <HAL_DMA_IRQHandler+0x84>
 8103ec4:	3214      	adds	r2, #20
 8103ec6:	4293      	cmp	r3, r2
 8103ec8:	f43f aeb8 	beq.w	8103c3c <HAL_DMA_IRQHandler+0x84>
 8103ecc:	3214      	adds	r2, #20
 8103ece:	4293      	cmp	r3, r2
 8103ed0:	f43f aeb4 	beq.w	8103c3c <HAL_DMA_IRQHandler+0x84>
 8103ed4:	3214      	adds	r2, #20
 8103ed6:	4293      	cmp	r3, r2
 8103ed8:	f43f aeb0 	beq.w	8103c3c <HAL_DMA_IRQHandler+0x84>
}
 8103edc:	b002      	add	sp, #8
 8103ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103ee2:	0697      	lsls	r7, r2, #26
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103ee4:	bf5e      	ittt	pl
 8103ee6:	681a      	ldrpl	r2, [r3, #0]
 8103ee8:	f022 0204 	bicpl.w	r2, r2, #4
 8103eec:	601a      	strpl	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8103eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8103ef0:	e75b      	b.n	8103daa <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103ef2:	2002      	movs	r0, #2
 8103ef4:	4088      	lsls	r0, r1
 8103ef6:	ea10 0f0c 	tst.w	r0, ip
 8103efa:	d016      	beq.n	8103f2a <HAL_DMA_IRQHandler+0x372>
 8103efc:	0796      	lsls	r6, r2, #30
 8103efe:	d514      	bpl.n	8103f2a <HAL_DMA_IRQHandler+0x372>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103f00:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f02:	0410      	lsls	r0, r2, #16
 8103f04:	d503      	bpl.n	8103f0e <HAL_DMA_IRQHandler+0x356>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103f06:	03d1      	lsls	r1, r2, #15
 8103f08:	d40d      	bmi.n	8103f26 <HAL_DMA_IRQHandler+0x36e>
          if(hdma->XferM1CpltCallback != NULL)
 8103f0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8103f0c:	e74d      	b.n	8103daa <HAL_DMA_IRQHandler+0x1f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103f0e:	f012 0220 	ands.w	r2, r2, #32
 8103f12:	d108      	bne.n	8103f26 <HAL_DMA_IRQHandler+0x36e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103f14:	6819      	ldr	r1, [r3, #0]
 8103f16:	f021 010a 	bic.w	r1, r1, #10
 8103f1a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8103f1c:	2301      	movs	r3, #1
 8103f1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8103f22:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8103f26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8103f28:	e73f      	b.n	8103daa <HAL_DMA_IRQHandler+0x1f2>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103f2a:	2008      	movs	r0, #8
 8103f2c:	4088      	lsls	r0, r1
 8103f2e:	ea10 0f0c 	tst.w	r0, ip
 8103f32:	d0d3      	beq.n	8103edc <HAL_DMA_IRQHandler+0x324>
 8103f34:	0712      	lsls	r2, r2, #28
 8103f36:	d5d1      	bpl.n	8103edc <HAL_DMA_IRQHandler+0x324>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103f38:	681a      	ldr	r2, [r3, #0]
 8103f3a:	f022 020e 	bic.w	r2, r2, #14
 8103f3e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103f40:	2301      	movs	r3, #1
 8103f42:	fa03 f101 	lsl.w	r1, r3, r1
 8103f46:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103f48:	6563      	str	r3, [r4, #84]	; 0x54
 8103f4a:	e795      	b.n	8103e78 <HAL_DMA_IRQHandler+0x2c0>
 8103f4c:	40020028 	.word	0x40020028
 8103f50:	5802541c 	.word	0x5802541c

08103f54 <HAL_DMA_RegisterCallback>:
{
 8103f54:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8103f56:	b318      	cbz	r0, 8103fa0 <HAL_DMA_RegisterCallback+0x4c>
  __HAL_LOCK(hdma);
 8103f58:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8103f5c:	2b01      	cmp	r3, #1
 8103f5e:	d021      	beq.n	8103fa4 <HAL_DMA_RegisterCallback+0x50>
  if(HAL_DMA_STATE_READY == hdma->State)
 8103f60:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8103f64:	2c01      	cmp	r4, #1
 8103f66:	b2e3      	uxtb	r3, r4
 8103f68:	d118      	bne.n	8103f9c <HAL_DMA_RegisterCallback+0x48>
    switch (CallbackID)
 8103f6a:	2905      	cmp	r1, #5
 8103f6c:	d806      	bhi.n	8103f7c <HAL_DMA_RegisterCallback+0x28>
 8103f6e:	e8df f001 	tbb	[pc, r1]
 8103f72:	0a03      	.short	0x0a03
 8103f74:	13110f0d 	.word	0x13110f0d
      hdma->XferCpltCallback = pCallback;
 8103f78:	63c2      	str	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8103f7a:	460b      	mov	r3, r1
  __HAL_UNLOCK(hdma);
 8103f7c:	2200      	movs	r2, #0
 8103f7e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8103f82:	4618      	mov	r0, r3
 8103f84:	bd10      	pop	{r4, pc}
      hdma->XferHalfCpltCallback = pCallback;
 8103f86:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8103f88:	2300      	movs	r3, #0
      break;
 8103f8a:	e7f7      	b.n	8103f7c <HAL_DMA_RegisterCallback+0x28>
      hdma->XferM1CpltCallback = pCallback;
 8103f8c:	6442      	str	r2, [r0, #68]	; 0x44
      break;
 8103f8e:	e7fb      	b.n	8103f88 <HAL_DMA_RegisterCallback+0x34>
      hdma->XferM1HalfCpltCallback = pCallback;
 8103f90:	6482      	str	r2, [r0, #72]	; 0x48
      break;
 8103f92:	e7f9      	b.n	8103f88 <HAL_DMA_RegisterCallback+0x34>
      hdma->XferErrorCallback = pCallback;
 8103f94:	64c2      	str	r2, [r0, #76]	; 0x4c
      break;
 8103f96:	e7f7      	b.n	8103f88 <HAL_DMA_RegisterCallback+0x34>
      hdma->XferAbortCallback = pCallback;
 8103f98:	6502      	str	r2, [r0, #80]	; 0x50
 8103f9a:	e7f5      	b.n	8103f88 <HAL_DMA_RegisterCallback+0x34>
    status =  HAL_ERROR;
 8103f9c:	2301      	movs	r3, #1
 8103f9e:	e7ed      	b.n	8103f7c <HAL_DMA_RegisterCallback+0x28>
    return HAL_ERROR;
 8103fa0:	2301      	movs	r3, #1
 8103fa2:	e7ee      	b.n	8103f82 <HAL_DMA_RegisterCallback+0x2e>
  __HAL_LOCK(hdma);
 8103fa4:	2302      	movs	r3, #2
 8103fa6:	e7ec      	b.n	8103f82 <HAL_DMA_RegisterCallback+0x2e>

08103fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103fac:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8104174 <HAL_GPIO_Init+0x1cc>
  uint32_t position = 0x00U;
 8103fb0:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103fb2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103fb6:	680a      	ldr	r2, [r1, #0]
 8103fb8:	fa32 f503 	lsrs.w	r5, r2, r3
 8103fbc:	d102      	bne.n	8103fc4 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8103fbe:	b003      	add	sp, #12
 8103fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103fc4:	f04f 0e01 	mov.w	lr, #1
 8103fc8:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8103fcc:	ea1e 0202 	ands.w	r2, lr, r2
 8103fd0:	f000 80ba 	beq.w	8104148 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103fd4:	684e      	ldr	r6, [r1, #4]
 8103fd6:	f006 0503 	and.w	r5, r6, #3
 8103fda:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103fde:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103fe2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103fe4:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103fe8:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103fea:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103fee:	d834      	bhi.n	810405a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8103ff0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103ff2:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103ff6:	68cf      	ldr	r7, [r1, #12]
 8103ff8:	fa07 f708 	lsl.w	r7, r7, r8
 8103ffc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8104000:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8104002:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104004:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104008:	f3c6 1700 	ubfx	r7, r6, #4, #1
 810400c:	409f      	lsls	r7, r3
 810400e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8104012:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8104014:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104016:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810401a:	688f      	ldr	r7, [r1, #8]
 810401c:	fa07 f708 	lsl.w	r7, r7, r8
 8104020:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104024:	2d02      	cmp	r5, #2
      GPIOx->PUPDR = temp;
 8104026:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104028:	d119      	bne.n	810405e <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 810402a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 810402e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104032:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8104036:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810403a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 810403e:	f04f 0e0f 	mov.w	lr, #15
 8104042:	fa0e fe0b 	lsl.w	lr, lr, fp
 8104046:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810404a:	690f      	ldr	r7, [r1, #16]
 810404c:	fa07 f70b 	lsl.w	r7, r7, fp
 8104050:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8104054:	f8ca 7020 	str.w	r7, [sl, #32]
 8104058:	e001      	b.n	810405e <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810405a:	2d03      	cmp	r5, #3
 810405c:	d1da      	bne.n	8104014 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 810405e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104060:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104064:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104068:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810406a:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 810406e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104070:	d06a      	beq.n	8104148 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104072:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8104076:	f045 0502 	orr.w	r5, r5, #2
 810407a:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 810407e:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8104082:	f023 0703 	bic.w	r7, r3, #3
 8104086:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
 810408a:	f005 0502 	and.w	r5, r5, #2
 810408e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8104092:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104094:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104098:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 810409a:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810409e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 81040a2:	250f      	movs	r5, #15
 81040a4:	fa05 f50c 	lsl.w	r5, r5, ip
 81040a8:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81040ac:	4d30      	ldr	r5, [pc, #192]	; (8104170 <HAL_GPIO_Init+0x1c8>)
 81040ae:	42a8      	cmp	r0, r5
 81040b0:	d04c      	beq.n	810414c <HAL_GPIO_Init+0x1a4>
 81040b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040b6:	42a8      	cmp	r0, r5
 81040b8:	d04a      	beq.n	8104150 <HAL_GPIO_Init+0x1a8>
 81040ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040be:	42a8      	cmp	r0, r5
 81040c0:	d048      	beq.n	8104154 <HAL_GPIO_Init+0x1ac>
 81040c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040c6:	42a8      	cmp	r0, r5
 81040c8:	d046      	beq.n	8104158 <HAL_GPIO_Init+0x1b0>
 81040ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040ce:	42a8      	cmp	r0, r5
 81040d0:	d044      	beq.n	810415c <HAL_GPIO_Init+0x1b4>
 81040d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040d6:	42a8      	cmp	r0, r5
 81040d8:	d042      	beq.n	8104160 <HAL_GPIO_Init+0x1b8>
 81040da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040de:	42a8      	cmp	r0, r5
 81040e0:	d040      	beq.n	8104164 <HAL_GPIO_Init+0x1bc>
 81040e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040e6:	42a8      	cmp	r0, r5
 81040e8:	d03e      	beq.n	8104168 <HAL_GPIO_Init+0x1c0>
 81040ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040ee:	42a8      	cmp	r0, r5
 81040f0:	d03c      	beq.n	810416c <HAL_GPIO_Init+0x1c4>
 81040f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81040f6:	42a8      	cmp	r0, r5
 81040f8:	bf0c      	ite	eq
 81040fa:	2509      	moveq	r5, #9
 81040fc:	250a      	movne	r5, #10
 81040fe:	fa05 f50c 	lsl.w	r5, r5, ip
 8104102:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104106:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8104108:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 810410a:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810410c:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8104110:	bf0c      	ite	eq
 8104112:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104114:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8104116:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8104118:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810411a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 810411e:	bf0c      	ite	eq
 8104120:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104122:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8104124:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8104126:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810412a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 810412e:	bf0c      	ite	eq
 8104130:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104132:	4315      	orrne	r5, r2
        EXTI_CurrentCPU->EMR1 = temp;
 8104134:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
        temp = EXTI_CurrentCPU->IMR1;
 8104138:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810413c:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 810413e:	bf54      	ite	pl
 8104140:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8104142:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8104144:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    position++;
 8104148:	3301      	adds	r3, #1
 810414a:	e734      	b.n	8103fb6 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810414c:	2500      	movs	r5, #0
 810414e:	e7d6      	b.n	81040fe <HAL_GPIO_Init+0x156>
 8104150:	2501      	movs	r5, #1
 8104152:	e7d4      	b.n	81040fe <HAL_GPIO_Init+0x156>
 8104154:	2502      	movs	r5, #2
 8104156:	e7d2      	b.n	81040fe <HAL_GPIO_Init+0x156>
 8104158:	2503      	movs	r5, #3
 810415a:	e7d0      	b.n	81040fe <HAL_GPIO_Init+0x156>
 810415c:	2504      	movs	r5, #4
 810415e:	e7ce      	b.n	81040fe <HAL_GPIO_Init+0x156>
 8104160:	2505      	movs	r5, #5
 8104162:	e7cc      	b.n	81040fe <HAL_GPIO_Init+0x156>
 8104164:	2506      	movs	r5, #6
 8104166:	e7ca      	b.n	81040fe <HAL_GPIO_Init+0x156>
 8104168:	2507      	movs	r5, #7
 810416a:	e7c8      	b.n	81040fe <HAL_GPIO_Init+0x156>
 810416c:	2508      	movs	r5, #8
 810416e:	e7c6      	b.n	81040fe <HAL_GPIO_Init+0x156>
 8104170:	58020000 	.word	0x58020000
 8104174:	58024400 	.word	0x58024400

08104178 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104178:	6903      	ldr	r3, [r0, #16]
 810417a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 810417c:	bf14      	ite	ne
 810417e:	2001      	movne	r0, #1
 8104180:	2000      	moveq	r0, #0
 8104182:	4770      	bx	lr

08104184 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104184:	b10a      	cbz	r2, 810418a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104186:	6181      	str	r1, [r0, #24]
  }
}
 8104188:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810418a:	0409      	lsls	r1, r1, #16
 810418c:	e7fb      	b.n	8104186 <HAL_GPIO_WritePin+0x2>
	...

08104190 <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104190:	4a02      	ldr	r2, [pc, #8]	; (810419c <HAL_HSEM_ActivateNotification+0xc>)
 8104192:	6913      	ldr	r3, [r2, #16]
 8104194:	4318      	orrs	r0, r3
 8104196:	6110      	str	r0, [r2, #16]
#endif
}
 8104198:	4770      	bx	lr
 810419a:	bf00      	nop
 810419c:	58026500 	.word	0x58026500

081041a0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81041a0:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81041a2:	4c1e      	ldr	r4, [pc, #120]	; (810421c <HAL_PWREx_EnterSTOPMode+0x7c>)
 81041a4:	6823      	ldr	r3, [r4, #0]
 81041a6:	f023 0301 	bic.w	r3, r3, #1
 81041aa:	4318      	orrs	r0, r3
{
 81041ac:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81041ae:	6020      	str	r0, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81041b0:	b9c2      	cbnz	r2, 81041e4 <HAL_PWREx_EnterSTOPMode+0x44>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81041b2:	f7fe fe75 	bl	8102ea0 <HAL_GetCurrentCPUID>
 81041b6:	2803      	cmp	r0, #3
 81041b8:	d113      	bne.n	81041e2 <HAL_PWREx_EnterSTOPMode+0x42>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81041ba:	6923      	ldr	r3, [r4, #16]
 81041bc:	f023 0301 	bic.w	r3, r3, #1
 81041c0:	6123      	str	r3, [r4, #16]

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81041c2:	4b17      	ldr	r3, [pc, #92]	; (8104220 <HAL_PWREx_EnterSTOPMode+0x80>)
 81041c4:	691a      	ldr	r2, [r3, #16]
 81041c6:	f042 0204 	orr.w	r2, r2, #4
 81041ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81041cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81041d0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81041d4:	2d01      	cmp	r5, #1
 81041d6:	d110      	bne.n	81041fa <HAL_PWREx_EnterSTOPMode+0x5a>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81041d8:	bf30      	wfi
      /* Request Wait For Event */
      __WFE ();
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81041da:	691a      	ldr	r2, [r3, #16]
 81041dc:	f022 0204 	bic.w	r2, r2, #4
 81041e0:	611a      	str	r2, [r3, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81041e2:	bd38      	pop	{r3, r4, r5, pc}
  else if (Domain == PWR_D2_DOMAIN)
 81041e4:	2a01      	cmp	r2, #1
 81041e6:	d10a      	bne.n	81041fe <HAL_PWREx_EnterSTOPMode+0x5e>
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81041e8:	f7fe fe5a 	bl	8102ea0 <HAL_GetCurrentCPUID>
 81041ec:	2801      	cmp	r0, #1
 81041ee:	d1f8      	bne.n	81041e2 <HAL_PWREx_EnterSTOPMode+0x42>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81041f0:	6963      	ldr	r3, [r4, #20]
 81041f2:	f023 0302 	bic.w	r3, r3, #2
 81041f6:	6163      	str	r3, [r4, #20]
 81041f8:	e7e3      	b.n	81041c2 <HAL_PWREx_EnterSTOPMode+0x22>
      __WFE ();
 81041fa:	bf20      	wfe
 81041fc:	e7ed      	b.n	81041da <HAL_PWREx_EnterSTOPMode+0x3a>
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81041fe:	f7fe fe4f 	bl	8102ea0 <HAL_GetCurrentCPUID>
 8104202:	2803      	cmp	r0, #3
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104204:	bf0b      	itete	eq
 8104206:	6923      	ldreq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104208:	6963      	ldrne	r3, [r4, #20]
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810420a:	f023 0304 	biceq.w	r3, r3, #4
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810420e:	f023 0304 	bicne.w	r3, r3, #4
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104212:	bf0c      	ite	eq
 8104214:	6123      	streq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104216:	6163      	strne	r3, [r4, #20]
 8104218:	e7e3      	b.n	81041e2 <HAL_PWREx_EnterSTOPMode+0x42>
 810421a:	bf00      	nop
 810421c:	58024800 	.word	0x58024800
 8104220:	e000ed00 	.word	0xe000ed00

08104224 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104224:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104226:	f7fe fe3b 	bl	8102ea0 <HAL_GetCurrentCPUID>
 810422a:	2803      	cmp	r0, #3
 810422c:	d101      	bne.n	8104232 <HAL_PWREx_ClearPendingEvent+0xe>
    __WFE ();
  }
  else
  {
    __SEV ();
    __WFE ();
 810422e:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104230:	bd08      	pop	{r3, pc}
    __SEV ();
 8104232:	bf40      	sev
 8104234:	e7fb      	b.n	810422e <HAL_PWREx_ClearPendingEvent+0xa>
	...

08104238 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104238:	4b49      	ldr	r3, [pc, #292]	; (8104360 <HAL_RCC_GetSysClockFreq+0x128>)
 810423a:	691a      	ldr	r2, [r3, #16]
 810423c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8104240:	2a10      	cmp	r2, #16
{
 8104242:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104244:	f000 8088 	beq.w	8104358 <HAL_RCC_GetSysClockFreq+0x120>
 8104248:	2a18      	cmp	r2, #24
 810424a:	d00c      	beq.n	8104266 <HAL_RCC_GetSysClockFreq+0x2e>
 810424c:	2a00      	cmp	r2, #0
 810424e:	f040 8085 	bne.w	810435c <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104252:	681a      	ldr	r2, [r3, #0]
 8104254:	4843      	ldr	r0, [pc, #268]	; (8104364 <HAL_RCC_GetSysClockFreq+0x12c>)
 8104256:	f012 0f20 	tst.w	r2, #32
 810425a:	d003      	beq.n	8104264 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8104262:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8104264:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104266:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104268:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810426a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810426c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 810426e:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104272:	f3c5 1005 	ubfx	r0, r5, #4, #6
      if (pllm != 0U)
 8104276:	d0f5      	beq.n	8104264 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104278:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810427c:	f004 0401 	and.w	r4, r4, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104280:	4362      	muls	r2, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104282:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104286:	ee06 2a90 	vmov	s13, r2
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810428a:	f001 0103 	and.w	r1, r1, #3
 810428e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104294:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8104298:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 810429c:	d04e      	beq.n	810433c <HAL_RCC_GetSysClockFreq+0x104>
 810429e:	2902      	cmp	r1, #2
 81042a0:	d03e      	beq.n	8104320 <HAL_RCC_GetSysClockFreq+0xe8>
 81042a2:	2900      	cmp	r1, #0
 81042a4:	d14a      	bne.n	810433c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81042a6:	681a      	ldr	r2, [r3, #0]
 81042a8:	0692      	lsls	r2, r2, #26
 81042aa:	d527      	bpl.n	81042fc <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81042ac:	6819      	ldr	r1, [r3, #0]
 81042ae:	4a2d      	ldr	r2, [pc, #180]	; (8104364 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81042b2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 81042b6:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81042b8:	ee07 2a90 	vmov	s15, r2
 81042bc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 81042c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81042c4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 81042c8:	ee07 3a10 	vmov	s14, r3
 81042cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81042d0:	ee37 7a26 	vadd.f32	s14, s14, s13
 81042d4:	ee37 7a06 	vadd.f32	s14, s14, s12
 81042d8:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81042dc:	4b20      	ldr	r3, [pc, #128]	; (8104360 <HAL_RCC_GetSysClockFreq+0x128>)
 81042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81042e0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 81042e4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81042e6:	ee07 3a10 	vmov	s14, r3
 81042ea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81042ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81042f2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 81042f6:	ee17 0a90 	vmov	r0, s15
 81042fa:	e7b3      	b.n	8104264 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104302:	ee07 3a90 	vmov	s15, r3
 8104306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810430a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810430e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104312:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8104368 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104316:	eec6 6a07 	vdiv.f32	s13, s12, s14
 810431a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 810431e:	e7dd      	b.n	81042dc <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104326:	ee07 3a90 	vmov	s15, r3
 810432a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810432e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104332:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104336:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 810436c <HAL_RCC_GetSysClockFreq+0x134>
 810433a:	e7ec      	b.n	8104316 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810433e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104342:	ee07 3a90 	vmov	s15, r3
 8104346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810434a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810434e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104352:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8104370 <HAL_RCC_GetSysClockFreq+0x138>
 8104356:	e7de      	b.n	8104316 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104358:	4806      	ldr	r0, [pc, #24]	; (8104374 <HAL_RCC_GetSysClockFreq+0x13c>)
 810435a:	e783      	b.n	8104264 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 810435c:	4806      	ldr	r0, [pc, #24]	; (8104378 <HAL_RCC_GetSysClockFreq+0x140>)
 810435e:	e781      	b.n	8104264 <HAL_RCC_GetSysClockFreq+0x2c>
 8104360:	58024400 	.word	0x58024400
 8104364:	03d09000 	.word	0x03d09000
 8104368:	4c742400 	.word	0x4c742400
 810436c:	4af42400 	.word	0x4af42400
 8104370:	4a742400 	.word	0x4a742400
 8104374:	007a1200 	.word	0x007a1200
 8104378:	003d0900 	.word	0x003d0900

0810437c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810437c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810437e:	f7ff ff5b 	bl	8104238 <HAL_RCC_GetSysClockFreq>
 8104382:	4b0a      	ldr	r3, [pc, #40]	; (81043ac <HAL_RCC_GetHCLKFreq+0x30>)
 8104384:	490a      	ldr	r1, [pc, #40]	; (81043b0 <HAL_RCC_GetHCLKFreq+0x34>)
 8104386:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104388:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810438a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810438e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104392:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104394:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104396:	f002 021f 	and.w	r2, r2, #31
 810439a:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810439c:	f003 031f 	and.w	r3, r3, #31
 81043a0:	40d8      	lsrs	r0, r3
 81043a2:	4b04      	ldr	r3, [pc, #16]	; (81043b4 <HAL_RCC_GetHCLKFreq+0x38>)
 81043a4:	6018      	str	r0, [r3, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81043a6:	4b04      	ldr	r3, [pc, #16]	; (81043b8 <HAL_RCC_GetHCLKFreq+0x3c>)
 81043a8:	6018      	str	r0, [r3, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 81043aa:	bd08      	pop	{r3, pc}
 81043ac:	58024400 	.word	0x58024400
 81043b0:	0810edd0 	.word	0x0810edd0
 81043b4:	10000054 	.word	0x10000054
 81043b8:	10000050 	.word	0x10000050

081043bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81043bc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81043be:	f7ff ffdd 	bl	810437c <HAL_RCC_GetHCLKFreq>
 81043c2:	4b05      	ldr	r3, [pc, #20]	; (81043d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 81043c4:	4a05      	ldr	r2, [pc, #20]	; (81043dc <HAL_RCC_GetPCLK1Freq+0x20>)
 81043c6:	69db      	ldr	r3, [r3, #28]
 81043c8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 81043cc:	5cd3      	ldrb	r3, [r2, r3]
 81043ce:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81043d2:	40d8      	lsrs	r0, r3
 81043d4:	bd08      	pop	{r3, pc}
 81043d6:	bf00      	nop
 81043d8:	58024400 	.word	0x58024400
 81043dc:	0810edd0 	.word	0x0810edd0

081043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81043e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81043e2:	f7ff ffcb 	bl	810437c <HAL_RCC_GetHCLKFreq>
 81043e6:	4b05      	ldr	r3, [pc, #20]	; (81043fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 81043e8:	4a05      	ldr	r2, [pc, #20]	; (8104400 <HAL_RCC_GetPCLK2Freq+0x20>)
 81043ea:	69db      	ldr	r3, [r3, #28]
 81043ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
 81043f0:	5cd3      	ldrb	r3, [r2, r3]
 81043f2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81043f6:	40d8      	lsrs	r0, r3
 81043f8:	bd08      	pop	{r3, pc}
 81043fa:	bf00      	nop
 81043fc:	58024400 	.word	0x58024400
 8104400:	0810edd0 	.word	0x0810edd0

08104404 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104406:	4c3a      	ldr	r4, [pc, #232]	; (81044f0 <RCCEx_PLL2_Config+0xec>)
 8104408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810440a:	f003 0303 	and.w	r3, r3, #3
 810440e:	2b03      	cmp	r3, #3
{
 8104410:	4606      	mov	r6, r0
 8104412:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104414:	d069      	beq.n	81044ea <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104416:	6823      	ldr	r3, [r4, #0]
 8104418:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810441c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810441e:	f7fe f871 	bl	8102504 <HAL_GetTick>
 8104422:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104424:	6823      	ldr	r3, [r4, #0]
 8104426:	011a      	lsls	r2, r3, #4
 8104428:	d44b      	bmi.n	81044c2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810442a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810442c:	6832      	ldr	r2, [r6, #0]
 810442e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8104432:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8104436:	62a3      	str	r3, [r4, #40]	; 0x28
 8104438:	68b3      	ldr	r3, [r6, #8]
 810443a:	68f2      	ldr	r2, [r6, #12]
 810443c:	3b01      	subs	r3, #1
 810443e:	3a01      	subs	r2, #1
 8104440:	025b      	lsls	r3, r3, #9
 8104442:	0412      	lsls	r2, r2, #16
 8104444:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8104448:	b29b      	uxth	r3, r3
 810444a:	4313      	orrs	r3, r2
 810444c:	6872      	ldr	r2, [r6, #4]
 810444e:	3a01      	subs	r2, #1
 8104450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104454:	4313      	orrs	r3, r2
 8104456:	6932      	ldr	r2, [r6, #16]
 8104458:	3a01      	subs	r2, #1
 810445a:	0612      	lsls	r2, r2, #24
 810445c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8104460:	4313      	orrs	r3, r2
 8104462:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104466:	6972      	ldr	r2, [r6, #20]
 8104468:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 810446c:	4313      	orrs	r3, r2
 810446e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104472:	69b2      	ldr	r2, [r6, #24]
 8104474:	f023 0320 	bic.w	r3, r3, #32
 8104478:	4313      	orrs	r3, r2
 810447a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810447c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810447e:	f023 0310 	bic.w	r3, r3, #16
 8104482:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8104486:	69f2      	ldr	r2, [r6, #28]
 8104488:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810448c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104490:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8104494:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104498:	f043 0310 	orr.w	r3, r3, #16
 810449c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810449e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 81044a0:	b9b5      	cbnz	r5, 81044d0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81044a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81044a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81044a8:	4c11      	ldr	r4, [pc, #68]	; (81044f0 <RCCEx_PLL2_Config+0xec>)
 81044aa:	6823      	ldr	r3, [r4, #0]
 81044ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81044b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81044b2:	f7fe f827 	bl	8102504 <HAL_GetTick>
 81044b6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81044b8:	6823      	ldr	r3, [r4, #0]
 81044ba:	011b      	lsls	r3, r3, #4
 81044bc:	d50f      	bpl.n	81044de <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 81044be:	2000      	movs	r0, #0
 81044c0:	e005      	b.n	81044ce <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81044c2:	f7fe f81f 	bl	8102504 <HAL_GetTick>
 81044c6:	1bc0      	subs	r0, r0, r7
 81044c8:	2802      	cmp	r0, #2
 81044ca:	d9ab      	bls.n	8104424 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 81044cc:	2003      	movs	r0, #3
}
 81044ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 81044d0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81044d2:	bf0c      	ite	eq
 81044d4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81044d8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 81044dc:	e7e3      	b.n	81044a6 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81044de:	f7fe f811 	bl	8102504 <HAL_GetTick>
 81044e2:	1b40      	subs	r0, r0, r5
 81044e4:	2802      	cmp	r0, #2
 81044e6:	d9e7      	bls.n	81044b8 <RCCEx_PLL2_Config+0xb4>
 81044e8:	e7f0      	b.n	81044cc <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 81044ea:	2001      	movs	r0, #1
 81044ec:	e7ef      	b.n	81044ce <RCCEx_PLL2_Config+0xca>
 81044ee:	bf00      	nop
 81044f0:	58024400 	.word	0x58024400

081044f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81044f6:	4c3a      	ldr	r4, [pc, #232]	; (81045e0 <RCCEx_PLL3_Config+0xec>)
 81044f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81044fa:	f003 0303 	and.w	r3, r3, #3
 81044fe:	2b03      	cmp	r3, #3
{
 8104500:	4606      	mov	r6, r0
 8104502:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104504:	d069      	beq.n	81045da <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104506:	6823      	ldr	r3, [r4, #0]
 8104508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810450c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810450e:	f7fd fff9 	bl	8102504 <HAL_GetTick>
 8104512:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104514:	6823      	ldr	r3, [r4, #0]
 8104516:	009a      	lsls	r2, r3, #2
 8104518:	d44b      	bmi.n	81045b2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810451a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810451c:	6832      	ldr	r2, [r6, #0]
 810451e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8104522:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8104526:	62a3      	str	r3, [r4, #40]	; 0x28
 8104528:	68b3      	ldr	r3, [r6, #8]
 810452a:	68f2      	ldr	r2, [r6, #12]
 810452c:	3b01      	subs	r3, #1
 810452e:	3a01      	subs	r2, #1
 8104530:	025b      	lsls	r3, r3, #9
 8104532:	0412      	lsls	r2, r2, #16
 8104534:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8104538:	b29b      	uxth	r3, r3
 810453a:	4313      	orrs	r3, r2
 810453c:	6872      	ldr	r2, [r6, #4]
 810453e:	3a01      	subs	r2, #1
 8104540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104544:	4313      	orrs	r3, r2
 8104546:	6932      	ldr	r2, [r6, #16]
 8104548:	3a01      	subs	r2, #1
 810454a:	0612      	lsls	r2, r2, #24
 810454c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8104550:	4313      	orrs	r3, r2
 8104552:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104554:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104556:	6972      	ldr	r2, [r6, #20]
 8104558:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 810455c:	4313      	orrs	r3, r2
 810455e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104562:	69b2      	ldr	r2, [r6, #24]
 8104564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104568:	4313      	orrs	r3, r2
 810456a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810456c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810456e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104572:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104574:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8104576:	69f2      	ldr	r2, [r6, #28]
 8104578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810457c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104580:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8104584:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8104588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810458c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810458e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8104590:	b9b5      	cbnz	r5, 81045c0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104592:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104596:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104598:	4c11      	ldr	r4, [pc, #68]	; (81045e0 <RCCEx_PLL3_Config+0xec>)
 810459a:	6823      	ldr	r3, [r4, #0]
 810459c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81045a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81045a2:	f7fd ffaf 	bl	8102504 <HAL_GetTick>
 81045a6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81045a8:	6823      	ldr	r3, [r4, #0]
 81045aa:	009b      	lsls	r3, r3, #2
 81045ac:	d50f      	bpl.n	81045ce <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 81045ae:	2000      	movs	r0, #0
 81045b0:	e005      	b.n	81045be <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81045b2:	f7fd ffa7 	bl	8102504 <HAL_GetTick>
 81045b6:	1bc0      	subs	r0, r0, r7
 81045b8:	2802      	cmp	r0, #2
 81045ba:	d9ab      	bls.n	8104514 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 81045bc:	2003      	movs	r0, #3
}
 81045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 81045c0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81045c2:	bf0c      	ite	eq
 81045c4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81045c8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 81045cc:	e7e3      	b.n	8104596 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81045ce:	f7fd ff99 	bl	8102504 <HAL_GetTick>
 81045d2:	1b40      	subs	r0, r0, r5
 81045d4:	2802      	cmp	r0, #2
 81045d6:	d9e7      	bls.n	81045a8 <RCCEx_PLL3_Config+0xb4>
 81045d8:	e7f0      	b.n	81045bc <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 81045da:	2001      	movs	r0, #1
 81045dc:	e7ef      	b.n	81045be <RCCEx_PLL3_Config+0xca>
 81045de:	bf00      	nop
 81045e0:	58024400 	.word	0x58024400

081045e4 <HAL_RCCEx_PeriphCLKConfig>:
{
 81045e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81045e8:	6803      	ldr	r3, [r0, #0]
{
 81045ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81045ec:	0118      	lsls	r0, r3, #4
 81045ee:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 81045f2:	d509      	bpl.n	8104608 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 81045f4:	6eab      	ldr	r3, [r5, #104]	; 0x68
 81045f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81045fa:	d02f      	beq.n	810465c <HAL_RCCEx_PeriphCLKConfig+0x78>
 81045fc:	d813      	bhi.n	8104626 <HAL_RCCEx_PeriphCLKConfig+0x42>
 81045fe:	b1f3      	cbz	r3, 810463e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8104600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104604:	d021      	beq.n	810464a <HAL_RCCEx_PeriphCLKConfig+0x66>
 8104606:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104608:	682b      	ldr	r3, [r5, #0]
 810460a:	05d9      	lsls	r1, r3, #23
 810460c:	f140 80ed 	bpl.w	81047ea <HAL_RCCEx_PeriphCLKConfig+0x206>
    switch (PeriphClkInit->Sai1ClockSelection)
 8104610:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8104612:	2b04      	cmp	r3, #4
 8104614:	f200 80e8 	bhi.w	81047e8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8104618:	e8df f013 	tbh	[pc, r3, lsl #1]
 810461c:	002d0026 	.word	0x002d0026
 8104620:	002b00e0 	.word	0x002b00e0
 8104624:	002b      	.short	0x002b
    switch (PeriphClkInit->SpdifrxClockSelection)
 8104626:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810462a:	d1ec      	bne.n	8104606 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810462c:	4aa9      	ldr	r2, [pc, #676]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 810462e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8104630:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104632:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8104636:	430b      	orrs	r3, r1
 8104638:	6513      	str	r3, [r2, #80]	; 0x50
 810463a:	2600      	movs	r6, #0
 810463c:	e7e4      	b.n	8104608 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810463e:	4aa5      	ldr	r2, [pc, #660]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104640:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104646:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8104648:	e7f0      	b.n	810462c <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810464a:	2102      	movs	r1, #2
 810464c:	f105 0008 	add.w	r0, r5, #8
 8104650:	f7ff fed8 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104654:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8104656:	2800      	cmp	r0, #0
 8104658:	d1d6      	bne.n	8104608 <HAL_RCCEx_PeriphCLKConfig+0x24>
 810465a:	e7e7      	b.n	810462c <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810465c:	2102      	movs	r1, #2
 810465e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104662:	f7ff ff47 	bl	81044f4 <RCCEx_PLL3_Config>
 8104666:	e7f5      	b.n	8104654 <HAL_RCCEx_PeriphCLKConfig+0x70>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104668:	4a9a      	ldr	r2, [pc, #616]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 810466a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 810466c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104670:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 8104672:	4634      	mov	r4, r6
 8104674:	e005      	b.n	8104682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104676:	2100      	movs	r1, #0
 8104678:	f105 0008 	add.w	r0, r5, #8
 810467c:	f7ff fec2 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104680:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104682:	2c00      	cmp	r4, #0
 8104684:	f040 80b3 	bne.w	81047ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104688:	4a92      	ldr	r2, [pc, #584]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 810468a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 810468c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 810468e:	f023 0307 	bic.w	r3, r3, #7
 8104692:	430b      	orrs	r3, r1
 8104694:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104696:	682b      	ldr	r3, [r5, #0]
 8104698:	059a      	lsls	r2, r3, #22
 810469a:	d50d      	bpl.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai23ClockSelection)
 810469c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 810469e:	2b80      	cmp	r3, #128	; 0x80
 81046a0:	f000 80c3 	beq.w	810482a <HAL_RCCEx_PeriphCLKConfig+0x246>
 81046a4:	f200 80a5 	bhi.w	81047f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
 81046a8:	2b00      	cmp	r3, #0
 81046aa:	f000 80b1 	beq.w	8104810 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 81046ae:	2b40      	cmp	r3, #64	; 0x40
 81046b0:	f000 80b4 	beq.w	810481c <HAL_RCCEx_PeriphCLKConfig+0x238>
 81046b4:	2601      	movs	r6, #1
 81046b6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81046b8:	682b      	ldr	r3, [r5, #0]
 81046ba:	055b      	lsls	r3, r3, #21
 81046bc:	d510      	bpl.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4AClockSelection)
 81046be:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 81046c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81046c6:	f000 80d6 	beq.w	8104876 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81046ca:	f200 80b6 	bhi.w	810483a <HAL_RCCEx_PeriphCLKConfig+0x256>
 81046ce:	2b00      	cmp	r3, #0
 81046d0:	f000 80c4 	beq.w	810485c <HAL_RCCEx_PeriphCLKConfig+0x278>
 81046d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81046d8:	f000 80c6 	beq.w	8104868 <HAL_RCCEx_PeriphCLKConfig+0x284>
 81046dc:	2601      	movs	r6, #1
 81046de:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81046e0:	682b      	ldr	r3, [r5, #0]
 81046e2:	051f      	lsls	r7, r3, #20
 81046e4:	d510      	bpl.n	8104708 <HAL_RCCEx_PeriphCLKConfig+0x124>
    switch (PeriphClkInit->Sai4BClockSelection)
 81046e6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 81046ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81046ee:	f000 80e8 	beq.w	81048c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 81046f2:	f200 80c8 	bhi.w	8104886 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 81046f6:	2b00      	cmp	r3, #0
 81046f8:	f000 80d6 	beq.w	81048a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 81046fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104700:	f000 80d8 	beq.w	81048b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8104704:	2601      	movs	r6, #1
 8104706:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104708:	682b      	ldr	r3, [r5, #0]
 810470a:	0198      	lsls	r0, r3, #6
 810470c:	d50d      	bpl.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 810470e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8104710:	2b20      	cmp	r3, #32
 8104712:	f000 80f3 	beq.w	81048fc <HAL_RCCEx_PeriphCLKConfig+0x318>
 8104716:	f200 80df 	bhi.w	81048d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 810471a:	2b00      	cmp	r3, #0
 810471c:	f000 80df 	beq.w	81048de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8104720:	2b10      	cmp	r3, #16
 8104722:	f000 80e5 	beq.w	81048f0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8104726:	2601      	movs	r6, #1
 8104728:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810472a:	682b      	ldr	r3, [r5, #0]
 810472c:	04d9      	lsls	r1, r3, #19
 810472e:	d50f      	bpl.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8104730:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8104732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104736:	f000 8107 	beq.w	8104948 <HAL_RCCEx_PeriphCLKConfig+0x364>
 810473a:	f200 80e8 	bhi.w	810490e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 810473e:	2b00      	cmp	r3, #0
 8104740:	f000 80f5 	beq.w	810492e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104748:	f000 80f7 	beq.w	810493a <HAL_RCCEx_PeriphCLKConfig+0x356>
 810474c:	2601      	movs	r6, #1
 810474e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104750:	682b      	ldr	r3, [r5, #0]
 8104752:	049a      	lsls	r2, r3, #18
 8104754:	d50f      	bpl.n	8104776 <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi45ClockSelection)
 8104756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8104758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810475c:	f000 8115 	beq.w	810498a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8104760:	f200 80fa 	bhi.w	8104958 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8104764:	2b00      	cmp	r3, #0
 8104766:	f000 8100 	beq.w	810496a <HAL_RCCEx_PeriphCLKConfig+0x386>
 810476a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810476e:	f000 8105 	beq.w	810497c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8104772:	2601      	movs	r6, #1
 8104774:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104776:	682b      	ldr	r3, [r5, #0]
 8104778:	045b      	lsls	r3, r3, #17
 810477a:	d510      	bpl.n	810479e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Spi6ClockSelection)
 810477c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8104780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104784:	f000 8123 	beq.w	81049ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8104788:	f200 8107 	bhi.w	810499a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 810478c:	2b00      	cmp	r3, #0
 810478e:	f000 810d 	beq.w	81049ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8104792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104796:	f000 8113 	beq.w	81049c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 810479a:	2601      	movs	r6, #1
 810479c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810479e:	682b      	ldr	r3, [r5, #0]
 81047a0:	041f      	lsls	r7, r3, #16
 81047a2:	d50d      	bpl.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    switch (PeriphClkInit->FdcanClockSelection)
 81047a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 81047a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81047aa:	f000 8118 	beq.w	81049de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 81047ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81047b2:	f000 8122 	beq.w	81049fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 81047b6:	2b00      	cmp	r3, #0
 81047b8:	f000 8116 	beq.w	81049e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 81047bc:	2601      	movs	r6, #1
 81047be:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81047c0:	682b      	ldr	r3, [r5, #0]
 81047c2:	01d8      	lsls	r0, r3, #7
 81047c4:	f140 8130 	bpl.w	8104a28 <HAL_RCCEx_PeriphCLKConfig+0x444>
    switch (PeriphClkInit->FmcClockSelection)
 81047c8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 81047ca:	2b03      	cmp	r3, #3
 81047cc:	f200 8171 	bhi.w	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 81047d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 81047d4:	011c0121 	.word	0x011c0121
 81047d8:	01210168 	.word	0x01210168
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81047dc:	2100      	movs	r1, #0
 81047de:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81047e2:	f7ff fe87 	bl	81044f4 <RCCEx_PLL3_Config>
 81047e6:	e74b      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch (PeriphClkInit->Sai1ClockSelection)
 81047e8:	2601      	movs	r6, #1
 81047ea:	4634      	mov	r4, r6
 81047ec:	e753      	b.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 81047ee:	4626      	mov	r6, r4
 81047f0:	e751      	b.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    switch (PeriphClkInit->Sai23ClockSelection)
 81047f2:	2bc0      	cmp	r3, #192	; 0xc0
 81047f4:	d003      	beq.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
 81047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047fa:	f47f af5b 	bne.w	81046b4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    if (ret == HAL_OK)
 81047fe:	b9d4      	cbnz	r4, 8104836 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104800:	4a34      	ldr	r2, [pc, #208]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104802:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8104804:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104806:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 810480a:	430b      	orrs	r3, r1
 810480c:	6513      	str	r3, [r2, #80]	; 0x50
 810480e:	e753      	b.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104810:	4a30      	ldr	r2, [pc, #192]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104812:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104818:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 810481a:	e7f0      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810481c:	2100      	movs	r1, #0
 810481e:	f105 0008 	add.w	r0, r5, #8
 8104822:	f7ff fdef 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104826:	4604      	mov	r4, r0
        break;
 8104828:	e7e9      	b.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810482a:	2100      	movs	r1, #0
 810482c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104830:	f7ff fe60 	bl	81044f4 <RCCEx_PLL3_Config>
 8104834:	e7f7      	b.n	8104826 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8104836:	4626      	mov	r6, r4
 8104838:	e73e      	b.n	81046b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    switch (PeriphClkInit->Sai4AClockSelection)
 810483a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810483e:	d003      	beq.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8104840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104844:	f47f af4a 	bne.w	81046dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    if (ret == HAL_OK)
 8104848:	b9dc      	cbnz	r4, 8104882 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810484a:	4a22      	ldr	r2, [pc, #136]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 810484c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8104850:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104852:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8104856:	430b      	orrs	r3, r1
 8104858:	6593      	str	r3, [r2, #88]	; 0x58
 810485a:	e741      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810485c:	4a1d      	ldr	r2, [pc, #116]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 810485e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104864:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8104866:	e7ef      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104868:	2100      	movs	r1, #0
 810486a:	f105 0008 	add.w	r0, r5, #8
 810486e:	f7ff fdc9 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104872:	4604      	mov	r4, r0
        break;
 8104874:	e7e8      	b.n	8104848 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104876:	2100      	movs	r1, #0
 8104878:	f105 0028 	add.w	r0, r5, #40	; 0x28
 810487c:	f7ff fe3a 	bl	81044f4 <RCCEx_PLL3_Config>
 8104880:	e7f7      	b.n	8104872 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8104882:	4626      	mov	r6, r4
 8104884:	e72c      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    switch (PeriphClkInit->Sai4BClockSelection)
 8104886:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810488a:	d003      	beq.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810488c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104890:	f47f af38 	bne.w	8104704 <HAL_RCCEx_PeriphCLKConfig+0x120>
    if (ret == HAL_OK)
 8104894:	b9dc      	cbnz	r4, 81048ce <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104896:	4a0f      	ldr	r2, [pc, #60]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8104898:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 810489c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810489e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 81048a2:	430b      	orrs	r3, r1
 81048a4:	6593      	str	r3, [r2, #88]	; 0x58
 81048a6:	e72f      	b.n	8104708 <HAL_RCCEx_PeriphCLKConfig+0x124>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81048a8:	4a0a      	ldr	r2, [pc, #40]	; (81048d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 81048aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 81048ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81048b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 81048b2:	e7ef      	b.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81048b4:	2100      	movs	r1, #0
 81048b6:	f105 0008 	add.w	r0, r5, #8
 81048ba:	f7ff fda3 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81048be:	4604      	mov	r4, r0
        break;
 81048c0:	e7e8      	b.n	8104894 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81048c2:	2100      	movs	r1, #0
 81048c4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81048c8:	f7ff fe14 	bl	81044f4 <RCCEx_PLL3_Config>
 81048cc:	e7f7      	b.n	81048be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81048ce:	4626      	mov	r6, r4
 81048d0:	e71a      	b.n	8104708 <HAL_RCCEx_PeriphCLKConfig+0x124>
 81048d2:	bf00      	nop
 81048d4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->QspiClockSelection)
 81048d8:	2b30      	cmp	r3, #48	; 0x30
 81048da:	f47f af24 	bne.w	8104726 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if (ret == HAL_OK)
 81048de:	b9a4      	cbnz	r4, 810490a <HAL_RCCEx_PeriphCLKConfig+0x326>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81048e0:	4aa0      	ldr	r2, [pc, #640]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81048e2:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 81048e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 81048e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81048ea:	430b      	orrs	r3, r1
 81048ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 81048ee:	e71c      	b.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81048f0:	4a9c      	ldr	r2, [pc, #624]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81048f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 81048f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81048f8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 81048fa:	e7f0      	b.n	81048de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81048fc:	2102      	movs	r1, #2
 81048fe:	f105 0008 	add.w	r0, r5, #8
 8104902:	f7ff fd7f 	bl	8104404 <RCCEx_PLL2_Config>
 8104906:	4604      	mov	r4, r0
        break;
 8104908:	e7e9      	b.n	81048de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 810490a:	4626      	mov	r6, r4
 810490c:	e70d      	b.n	810472a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Spi123ClockSelection)
 810490e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104912:	d003      	beq.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8104914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104918:	f47f af18 	bne.w	810474c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if (ret == HAL_OK)
 810491c:	b9d4      	cbnz	r4, 8104954 <HAL_RCCEx_PeriphCLKConfig+0x370>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810491e:	4a91      	ldr	r2, [pc, #580]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104920:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8104922:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104928:	430b      	orrs	r3, r1
 810492a:	6513      	str	r3, [r2, #80]	; 0x50
 810492c:	e710      	b.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810492e:	4a8d      	ldr	r2, [pc, #564]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104930:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104936:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8104938:	e7f0      	b.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810493a:	2100      	movs	r1, #0
 810493c:	f105 0008 	add.w	r0, r5, #8
 8104940:	f7ff fd60 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104944:	4604      	mov	r4, r0
        break;
 8104946:	e7e9      	b.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x338>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104948:	2100      	movs	r1, #0
 810494a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 810494e:	f7ff fdd1 	bl	81044f4 <RCCEx_PLL3_Config>
 8104952:	e7f7      	b.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104954:	4626      	mov	r6, r4
 8104956:	e6fb      	b.n	8104750 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8104958:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810495c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8104960:	d003      	beq.n	810496a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8104962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104966:	f47f af04 	bne.w	8104772 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    if (ret == HAL_OK)
 810496a:	b9a4      	cbnz	r4, 8104996 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810496c:	4a7d      	ldr	r2, [pc, #500]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 810496e:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8104970:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8104972:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8104976:	430b      	orrs	r3, r1
 8104978:	6513      	str	r3, [r2, #80]	; 0x50
 810497a:	e6fc      	b.n	8104776 <HAL_RCCEx_PeriphCLKConfig+0x192>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810497c:	2101      	movs	r1, #1
 810497e:	f105 0008 	add.w	r0, r5, #8
 8104982:	f7ff fd3f 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104986:	4604      	mov	r4, r0
        break;
 8104988:	e7ef      	b.n	810496a <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810498a:	2101      	movs	r1, #1
 810498c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104990:	f7ff fdb0 	bl	81044f4 <RCCEx_PLL3_Config>
 8104994:	e7f7      	b.n	8104986 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8104996:	4626      	mov	r6, r4
 8104998:	e6ed      	b.n	8104776 <HAL_RCCEx_PeriphCLKConfig+0x192>
    switch (PeriphClkInit->Spi6ClockSelection)
 810499a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 810499e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 81049a2:	d003      	beq.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 81049a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81049a8:	f47f aef7 	bne.w	810479a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    if (ret == HAL_OK)
 81049ac:	b9ac      	cbnz	r4, 81049da <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81049ae:	4a6d      	ldr	r2, [pc, #436]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81049b0:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 81049b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81049b6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 81049ba:	430b      	orrs	r3, r1
 81049bc:	6593      	str	r3, [r2, #88]	; 0x58
 81049be:	e6ee      	b.n	810479e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81049c0:	2101      	movs	r1, #1
 81049c2:	f105 0008 	add.w	r0, r5, #8
 81049c6:	f7ff fd1d 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81049ca:	4604      	mov	r4, r0
        break;
 81049cc:	e7ee      	b.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81049ce:	2101      	movs	r1, #1
 81049d0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 81049d4:	f7ff fd8e 	bl	81044f4 <RCCEx_PLL3_Config>
 81049d8:	e7f7      	b.n	81049ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81049da:	4626      	mov	r6, r4
 81049dc:	e6df      	b.n	810479e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81049de:	4a61      	ldr	r2, [pc, #388]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81049e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 81049e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81049e6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 81049e8:	b974      	cbnz	r4, 8104a08 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81049ea:	4a5e      	ldr	r2, [pc, #376]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 81049ec:	6f29      	ldr	r1, [r5, #112]	; 0x70
 81049ee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 81049f0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 81049f4:	430b      	orrs	r3, r1
 81049f6:	6513      	str	r3, [r2, #80]	; 0x50
 81049f8:	e6e2      	b.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81049fa:	2101      	movs	r1, #1
 81049fc:	f105 0008 	add.w	r0, r5, #8
 8104a00:	f7ff fd00 	bl	8104404 <RCCEx_PLL2_Config>
 8104a04:	4604      	mov	r4, r0
        break;
 8104a06:	e7ef      	b.n	81049e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8104a08:	4626      	mov	r6, r4
 8104a0a:	e6d9      	b.n	81047c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a0c:	4a55      	ldr	r2, [pc, #340]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104a0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104a14:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8104a16:	2c00      	cmp	r4, #0
 8104a18:	d14e      	bne.n	8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104a1a:	4a52      	ldr	r2, [pc, #328]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104a1c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8104a1e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8104a20:	f023 0303 	bic.w	r3, r3, #3
 8104a24:	430b      	orrs	r3, r1
 8104a26:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104a28:	682b      	ldr	r3, [r5, #0]
 8104a2a:	0259      	lsls	r1, r3, #9
 8104a2c:	d54e      	bpl.n	8104acc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104a2e:	4f4e      	ldr	r7, [pc, #312]	; (8104b68 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8104a30:	683b      	ldr	r3, [r7, #0]
 8104a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104a36:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8104a38:	f7fd fd64 	bl	8102504 <HAL_GetTick>
 8104a3c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104a3e:	683b      	ldr	r3, [r7, #0]
 8104a40:	05da      	lsls	r2, r3, #23
 8104a42:	d53b      	bpl.n	8104abc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if (ret == HAL_OK)
 8104a44:	2c00      	cmp	r4, #0
 8104a46:	d16d      	bne.n	8104b24 <HAL_RCCEx_PeriphCLKConfig+0x540>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104a48:	4b46      	ldr	r3, [pc, #280]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104a4a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8104a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104a50:	4042      	eors	r2, r0
 8104a52:	f412 7f40 	tst.w	r2, #768	; 0x300
 8104a56:	d00b      	beq.n	8104a70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8104a5a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8104a5c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8104a60:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104a62:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104a64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104a68:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8104a6c:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8104a6e:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104a70:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8104a74:	d041      	beq.n	8104afa <HAL_RCCEx_PeriphCLKConfig+0x516>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104a76:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8104a7a:	493a      	ldr	r1, [pc, #232]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104a7c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8104a80:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8104a84:	d14a      	bne.n	8104b1c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8104a86:	6908      	ldr	r0, [r1, #16]
 8104a88:	4a38      	ldr	r2, [pc, #224]	; (8104b6c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8104a8a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8104a8e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8104a92:	4302      	orrs	r2, r0
 8104a94:	610a      	str	r2, [r1, #16]
 8104a96:	4a33      	ldr	r2, [pc, #204]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104a98:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8104a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104a9e:	430b      	orrs	r3, r1
 8104aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8104aa2:	e013      	b.n	8104acc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104aa4:	2102      	movs	r1, #2
 8104aa6:	f105 0008 	add.w	r0, r5, #8
 8104aaa:	f7ff fcab 	bl	8104404 <RCCEx_PLL2_Config>
 8104aae:	4604      	mov	r4, r0
        break;
 8104ab0:	e7b1      	b.n	8104a16 <HAL_RCCEx_PeriphCLKConfig+0x432>
    switch (PeriphClkInit->FmcClockSelection)
 8104ab2:	2601      	movs	r6, #1
 8104ab4:	4634      	mov	r4, r6
 8104ab6:	e7b7      	b.n	8104a28 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8104ab8:	4626      	mov	r6, r4
 8104aba:	e7b5      	b.n	8104a28 <HAL_RCCEx_PeriphCLKConfig+0x444>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104abc:	f7fd fd22 	bl	8102504 <HAL_GetTick>
 8104ac0:	eba0 0008 	sub.w	r0, r0, r8
 8104ac4:	2864      	cmp	r0, #100	; 0x64
 8104ac6:	d9ba      	bls.n	8104a3e <HAL_RCCEx_PeriphCLKConfig+0x45a>
        ret = HAL_TIMEOUT;
 8104ac8:	2603      	movs	r6, #3
 8104aca:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104acc:	682b      	ldr	r3, [r5, #0]
 8104ace:	07d8      	lsls	r0, r3, #31
 8104ad0:	d508      	bpl.n	8104ae4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch (PeriphClkInit->Usart16ClockSelection)
 8104ad2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8104ad4:	2b10      	cmp	r3, #16
 8104ad6:	d03d      	beq.n	8104b54 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8104ad8:	d826      	bhi.n	8104b28 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8104ada:	b35b      	cbz	r3, 8104b34 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8104adc:	2b08      	cmp	r3, #8
 8104ade:	d032      	beq.n	8104b46 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8104ae0:	2601      	movs	r6, #1
 8104ae2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104ae4:	682b      	ldr	r3, [r5, #0]
 8104ae6:	0799      	lsls	r1, r3, #30
 8104ae8:	d550      	bpl.n	8104b8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104aea:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8104aec:	2b05      	cmp	r3, #5
 8104aee:	d863      	bhi.n	8104bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8104af0:	e8df f003 	tbb	[pc, r3]
 8104af4:	445c3e44 	.word	0x445c3e44
 8104af8:	4444      	.short	0x4444
        tickstart = HAL_GetTick();
 8104afa:	f7fd fd03 	bl	8102504 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104afe:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 8104b02:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104b04:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104b08:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8104b0c:	079b      	lsls	r3, r3, #30
 8104b0e:	d4b2      	bmi.n	8104a76 <HAL_RCCEx_PeriphCLKConfig+0x492>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104b10:	f7fd fcf8 	bl	8102504 <HAL_GetTick>
 8104b14:	1bc0      	subs	r0, r0, r7
 8104b16:	4548      	cmp	r0, r9
 8104b18:	d9f6      	bls.n	8104b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8104b1a:	e7d5      	b.n	8104ac8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104b1c:	690a      	ldr	r2, [r1, #16]
 8104b1e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8104b22:	e7b7      	b.n	8104a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8104b24:	4626      	mov	r6, r4
 8104b26:	e7d1      	b.n	8104acc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    switch (PeriphClkInit->Usart16ClockSelection)
 8104b28:	f023 0208 	bic.w	r2, r3, #8
 8104b2c:	2a20      	cmp	r2, #32
 8104b2e:	d001      	beq.n	8104b34 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8104b30:	2b18      	cmp	r3, #24
 8104b32:	d1d5      	bne.n	8104ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if (ret == HAL_OK)
 8104b34:	b9a4      	cbnz	r4, 8104b60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104b36:	4a0b      	ldr	r2, [pc, #44]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8104b38:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8104b3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8104b3c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8104b40:	430b      	orrs	r3, r1
 8104b42:	6553      	str	r3, [r2, #84]	; 0x54
 8104b44:	e7ce      	b.n	8104ae4 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104b46:	2101      	movs	r1, #1
 8104b48:	f105 0008 	add.w	r0, r5, #8
 8104b4c:	f7ff fc5a 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104b50:	4604      	mov	r4, r0
        break;
 8104b52:	e7ef      	b.n	8104b34 <HAL_RCCEx_PeriphCLKConfig+0x550>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104b54:	2101      	movs	r1, #1
 8104b56:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104b5a:	f7ff fccb 	bl	81044f4 <RCCEx_PLL3_Config>
 8104b5e:	e7f7      	b.n	8104b50 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8104b60:	4626      	mov	r6, r4
 8104b62:	e7bf      	b.n	8104ae4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8104b64:	58024400 	.word	0x58024400
 8104b68:	58024800 	.word	0x58024800
 8104b6c:	00ffffcf 	.word	0x00ffffcf
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104b70:	2101      	movs	r1, #1
 8104b72:	f105 0008 	add.w	r0, r5, #8
 8104b76:	f7ff fc45 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104b7a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104b7c:	b9fc      	cbnz	r4, 8104bbe <HAL_RCCEx_PeriphCLKConfig+0x5da>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104b7e:	4a11      	ldr	r2, [pc, #68]	; (8104bc4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8104b80:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8104b82:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8104b84:	f023 0307 	bic.w	r3, r3, #7
 8104b88:	430b      	orrs	r3, r1
 8104b8a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104b8c:	682b      	ldr	r3, [r5, #0]
 8104b8e:	075a      	lsls	r2, r3, #29
 8104b90:	d52b      	bpl.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104b92:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8104b96:	2b05      	cmp	r3, #5
 8104b98:	f200 817c 	bhi.w	8104e94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8104b9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8104ba0:	0014001a 	.word	0x0014001a
 8104ba4:	001a0174 	.word	0x001a0174
 8104ba8:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104bac:	2101      	movs	r1, #1
 8104bae:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104bb2:	f7ff fc9f 	bl	81044f4 <RCCEx_PLL3_Config>
 8104bb6:	e7e0      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x596>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104bb8:	2601      	movs	r6, #1
 8104bba:	4634      	mov	r4, r6
 8104bbc:	e7e6      	b.n	8104b8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8104bbe:	4626      	mov	r6, r4
 8104bc0:	e7e4      	b.n	8104b8c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8104bc2:	bf00      	nop
 8104bc4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104bc8:	2101      	movs	r1, #1
 8104bca:	f105 0008 	add.w	r0, r5, #8
 8104bce:	f7ff fc19 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104bd2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104bd4:	2c00      	cmp	r4, #0
 8104bd6:	f040 8160 	bne.w	8104e9a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104bda:	4aaa      	ldr	r2, [pc, #680]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104bdc:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8104be0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104be2:	f023 0307 	bic.w	r3, r3, #7
 8104be6:	430b      	orrs	r3, r1
 8104be8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104bea:	682b      	ldr	r3, [r5, #0]
 8104bec:	069b      	lsls	r3, r3, #26
 8104bee:	d510      	bpl.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104bf0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8104bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104bf8:	f000 816b 	beq.w	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8104bfc:	f200 814f 	bhi.w	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 8104c00:	2b00      	cmp	r3, #0
 8104c02:	f000 8155 	beq.w	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8104c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104c0a:	f000 815b 	beq.w	8104ec4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 8104c0e:	2601      	movs	r6, #1
 8104c10:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104c12:	682b      	ldr	r3, [r5, #0]
 8104c14:	065f      	lsls	r7, r3, #25
 8104c16:	d510      	bpl.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104c18:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8104c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104c20:	f000 8179 	beq.w	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8104c24:	f200 815d 	bhi.w	8104ee2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8104c28:	2b00      	cmp	r3, #0
 8104c2a:	f000 8163 	beq.w	8104ef4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8104c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104c32:	f000 8169 	beq.w	8104f08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8104c36:	2601      	movs	r6, #1
 8104c38:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104c3a:	682b      	ldr	r3, [r5, #0]
 8104c3c:	0618      	lsls	r0, r3, #24
 8104c3e:	d510      	bpl.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104c40:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8104c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104c48:	f000 8187 	beq.w	8104f5a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8104c4c:	f200 816b 	bhi.w	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x942>
 8104c50:	2b00      	cmp	r3, #0
 8104c52:	f000 8171 	beq.w	8104f38 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8104c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c5a:	f000 8177 	beq.w	8104f4c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8104c5e:	2601      	movs	r6, #1
 8104c60:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104c62:	682b      	ldr	r3, [r5, #0]
 8104c64:	0719      	lsls	r1, r3, #28
 8104c66:	d514      	bpl.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104c68:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8104c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104c70:	d107      	bne.n	8104c82 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104c72:	2102      	movs	r1, #2
 8104c74:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104c78:	f7ff fc3c 	bl	81044f4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8104c7c:	2800      	cmp	r0, #0
 8104c7e:	bf18      	it	ne
 8104c80:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104c82:	4a80      	ldr	r2, [pc, #512]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104c84:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8104c88:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8104c8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8104c8e:	430b      	orrs	r3, r1
 8104c90:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104c92:	682b      	ldr	r3, [r5, #0]
 8104c94:	06da      	lsls	r2, r3, #27
 8104c96:	d514      	bpl.n	8104cc2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104c98:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8104c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104ca0:	d107      	bne.n	8104cb2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104ca2:	2102      	movs	r1, #2
 8104ca4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104ca8:	f7ff fc24 	bl	81044f4 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8104cac:	2800      	cmp	r0, #0
 8104cae:	bf18      	it	ne
 8104cb0:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104cb2:	4a74      	ldr	r2, [pc, #464]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104cb4:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8104cb8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104cbe:	430b      	orrs	r3, r1
 8104cc0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104cc2:	682b      	ldr	r3, [r5, #0]
 8104cc4:	031b      	lsls	r3, r3, #12
 8104cc6:	d51b      	bpl.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch (PeriphClkInit->AdcClockSelection)
 8104cc8:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8104ccc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8104cd0:	f000 814b 	beq.w	8104f6a <HAL_RCCEx_PeriphCLKConfig+0x986>
 8104cd4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8104cd8:	d007      	beq.n	8104cea <HAL_RCCEx_PeriphCLKConfig+0x706>
 8104cda:	2900      	cmp	r1, #0
 8104cdc:	f040 814b 	bne.w	8104f76 <HAL_RCCEx_PeriphCLKConfig+0x992>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104ce0:	f105 0008 	add.w	r0, r5, #8
 8104ce4:	f7ff fb8e 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104ce8:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104cea:	2c00      	cmp	r4, #0
 8104cec:	f040 8146 	bne.w	8104f7c <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104cf0:	4a64      	ldr	r2, [pc, #400]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104cf2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8104cf6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104cf8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8104cfc:	430b      	orrs	r3, r1
 8104cfe:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104d00:	682b      	ldr	r3, [r5, #0]
 8104d02:	035f      	lsls	r7, r3, #13
 8104d04:	d51c      	bpl.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    switch (PeriphClkInit->UsbClockSelection)
 8104d06:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8104d0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d0e:	f000 8137 	beq.w	8104f80 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 8104d12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d16:	d008      	beq.n	8104d2a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8104d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104d1c:	f040 8137 	bne.w	8104f8e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d20:	4a58      	ldr	r2, [pc, #352]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104d22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d28:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8104d2a:	2c00      	cmp	r4, #0
 8104d2c:	f040 8132 	bne.w	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104d30:	4a54      	ldr	r2, [pc, #336]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104d32:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8104d36:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8104d38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8104d3c:	430b      	orrs	r3, r1
 8104d3e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104d40:	682b      	ldr	r3, [r5, #0]
 8104d42:	03d8      	lsls	r0, r3, #15
 8104d44:	d509      	bpl.n	8104d5a <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->SdmmcClockSelection)
 8104d46:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8104d48:	2b00      	cmp	r3, #0
 8104d4a:	f000 8125 	beq.w	8104f98 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8104d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104d52:	f000 812f 	beq.w	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104d56:	2601      	movs	r6, #1
 8104d58:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104d5a:	682b      	ldr	r3, [r5, #0]
 8104d5c:	0099      	lsls	r1, r3, #2
 8104d5e:	d507      	bpl.n	8104d70 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104d60:	2102      	movs	r1, #2
 8104d62:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104d66:	f7ff fbc5 	bl	81044f4 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8104d6a:	2800      	cmp	r0, #0
 8104d6c:	bf18      	it	ne
 8104d6e:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104d70:	e9d5 3100 	ldrd	r3, r1, [r5]
 8104d74:	039a      	lsls	r2, r3, #14
 8104d76:	d50b      	bpl.n	8104d90 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    switch (PeriphClkInit->RngClockSelection)
 8104d78:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8104d7c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8104d80:	f000 812f 	beq.w	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8104d84:	f200 811f 	bhi.w	8104fc6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8104d88:	2800      	cmp	r0, #0
 8104d8a:	f000 8122 	beq.w	8104fd2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8104d8e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104d90:	02df      	lsls	r7, r3, #11
 8104d92:	d506      	bpl.n	8104da2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104d94:	483b      	ldr	r0, [pc, #236]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104d96:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8104d98:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8104d9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8104d9e:	4322      	orrs	r2, r4
 8104da0:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104da2:	00dc      	lsls	r4, r3, #3
 8104da4:	d507      	bpl.n	8104db6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104da6:	4837      	ldr	r0, [pc, #220]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104da8:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
 8104dac:	6902      	ldr	r2, [r0, #16]
 8104dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8104db2:	4322      	orrs	r2, r4
 8104db4:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104db6:	0298      	lsls	r0, r3, #10
 8104db8:	d506      	bpl.n	8104dc8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104dba:	4832      	ldr	r0, [pc, #200]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104dbc:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8104dbe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8104dc0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8104dc4:	4322      	orrs	r2, r4
 8104dc6:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104dc8:	005a      	lsls	r2, r3, #1
 8104dca:	d509      	bpl.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104dcc:	4a2d      	ldr	r2, [pc, #180]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104dce:	6910      	ldr	r0, [r2, #16]
 8104dd0:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8104dd4:	6110      	str	r0, [r2, #16]
 8104dd6:	6910      	ldr	r0, [r2, #16]
 8104dd8:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8104ddc:	4320      	orrs	r0, r4
 8104dde:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104de0:	2b00      	cmp	r3, #0
 8104de2:	da06      	bge.n	8104df2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104de4:	4827      	ldr	r0, [pc, #156]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104de6:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 8104de8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8104dea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8104dee:	4322      	orrs	r2, r4
 8104df0:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104df2:	021b      	lsls	r3, r3, #8
 8104df4:	d507      	bpl.n	8104e06 <HAL_RCCEx_PeriphCLKConfig+0x822>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104df6:	4a23      	ldr	r2, [pc, #140]	; (8104e84 <HAL_RCCEx_PeriphCLKConfig+0x8a0>)
 8104df8:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 8104dfc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8104dfe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8104e02:	4303      	orrs	r3, r0
 8104e04:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104e06:	07cf      	lsls	r7, r1, #31
 8104e08:	d507      	bpl.n	8104e1a <HAL_RCCEx_PeriphCLKConfig+0x836>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104e0a:	2100      	movs	r1, #0
 8104e0c:	f105 0008 	add.w	r0, r5, #8
 8104e10:	f7ff faf8 	bl	8104404 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8104e14:	2800      	cmp	r0, #0
 8104e16:	bf18      	it	ne
 8104e18:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104e1a:	686b      	ldr	r3, [r5, #4]
 8104e1c:	079c      	lsls	r4, r3, #30
 8104e1e:	d507      	bpl.n	8104e30 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e20:	2101      	movs	r1, #1
 8104e22:	f105 0008 	add.w	r0, r5, #8
 8104e26:	f7ff faed 	bl	8104404 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8104e2a:	2800      	cmp	r0, #0
 8104e2c:	bf18      	it	ne
 8104e2e:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104e30:	686b      	ldr	r3, [r5, #4]
 8104e32:	0758      	lsls	r0, r3, #29
 8104e34:	d507      	bpl.n	8104e46 <HAL_RCCEx_PeriphCLKConfig+0x862>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104e36:	2102      	movs	r1, #2
 8104e38:	f105 0008 	add.w	r0, r5, #8
 8104e3c:	f7ff fae2 	bl	8104404 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8104e40:	2800      	cmp	r0, #0
 8104e42:	bf18      	it	ne
 8104e44:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104e46:	686b      	ldr	r3, [r5, #4]
 8104e48:	0719      	lsls	r1, r3, #28
 8104e4a:	d507      	bpl.n	8104e5c <HAL_RCCEx_PeriphCLKConfig+0x878>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104e4c:	2100      	movs	r1, #0
 8104e4e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104e52:	f7ff fb4f 	bl	81044f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8104e56:	2800      	cmp	r0, #0
 8104e58:	bf18      	it	ne
 8104e5a:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104e5c:	686b      	ldr	r3, [r5, #4]
 8104e5e:	06da      	lsls	r2, r3, #27
 8104e60:	d507      	bpl.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e62:	2101      	movs	r1, #1
 8104e64:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104e68:	f7ff fb44 	bl	81044f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8104e6c:	2800      	cmp	r0, #0
 8104e6e:	bf18      	it	ne
 8104e70:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104e72:	686b      	ldr	r3, [r5, #4]
 8104e74:	069b      	lsls	r3, r3, #26
 8104e76:	f100 80bc 	bmi.w	8104ff2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    return HAL_OK;
 8104e7a:	1e30      	subs	r0, r6, #0
 8104e7c:	bf18      	it	ne
 8104e7e:	2001      	movne	r0, #1
}
 8104e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8104e84:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e88:	2101      	movs	r1, #1
 8104e8a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104e8e:	f7ff fb31 	bl	81044f4 <RCCEx_PLL3_Config>
 8104e92:	e69e      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104e94:	2601      	movs	r6, #1
 8104e96:	4634      	mov	r4, r6
 8104e98:	e6a7      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x606>
 8104e9a:	4626      	mov	r6, r4
 8104e9c:	e6a5      	b.n	8104bea <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104e9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8104ea2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8104ea6:	d003      	beq.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8104ea8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104eac:	f47f aeaf 	bne.w	8104c0e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    if (ret == HAL_OK)
 8104eb0:	b9ac      	cbnz	r4, 8104ede <HAL_RCCEx_PeriphCLKConfig+0x8fa>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104eb2:	4a55      	ldr	r2, [pc, #340]	; (8105008 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8104eb4:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8104eb8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8104eba:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8104ebe:	430b      	orrs	r3, r1
 8104ec0:	6553      	str	r3, [r2, #84]	; 0x54
 8104ec2:	e6a6      	b.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104ec4:	2100      	movs	r1, #0
 8104ec6:	f105 0008 	add.w	r0, r5, #8
 8104eca:	f7ff fa9b 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104ece:	4604      	mov	r4, r0
        break;
 8104ed0:	e7ee      	b.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104ed2:	2102      	movs	r1, #2
 8104ed4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104ed8:	f7ff fb0c 	bl	81044f4 <RCCEx_PLL3_Config>
 8104edc:	e7f7      	b.n	8104ece <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8104ede:	4626      	mov	r6, r4
 8104ee0:	e697      	b.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104ee2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8104ee6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8104eea:	d003      	beq.n	8104ef4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8104eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104ef0:	f47f aea1 	bne.w	8104c36 <HAL_RCCEx_PeriphCLKConfig+0x652>
    if (ret == HAL_OK)
 8104ef4:	b9ac      	cbnz	r4, 8104f22 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104ef6:	4a44      	ldr	r2, [pc, #272]	; (8105008 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8104ef8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8104efc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104efe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8104f02:	430b      	orrs	r3, r1
 8104f04:	6593      	str	r3, [r2, #88]	; 0x58
 8104f06:	e698      	b.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x656>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f08:	2100      	movs	r1, #0
 8104f0a:	f105 0008 	add.w	r0, r5, #8
 8104f0e:	f7ff fa79 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f12:	4604      	mov	r4, r0
        break;
 8104f14:	e7ee      	b.n	8104ef4 <HAL_RCCEx_PeriphCLKConfig+0x910>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f16:	2102      	movs	r1, #2
 8104f18:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104f1c:	f7ff faea 	bl	81044f4 <RCCEx_PLL3_Config>
 8104f20:	e7f7      	b.n	8104f12 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8104f22:	4626      	mov	r6, r4
 8104f24:	e689      	b.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x656>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104f26:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8104f2a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8104f2e:	d003      	beq.n	8104f38 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8104f30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104f34:	f47f ae93 	bne.w	8104c5e <HAL_RCCEx_PeriphCLKConfig+0x67a>
    if (ret == HAL_OK)
 8104f38:	b9ac      	cbnz	r4, 8104f66 <HAL_RCCEx_PeriphCLKConfig+0x982>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104f3a:	4a33      	ldr	r2, [pc, #204]	; (8105008 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8104f3c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8104f40:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8104f42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8104f46:	430b      	orrs	r3, r1
 8104f48:	6593      	str	r3, [r2, #88]	; 0x58
 8104f4a:	e68a      	b.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f4c:	2100      	movs	r1, #0
 8104f4e:	f105 0008 	add.w	r0, r5, #8
 8104f52:	f7ff fa57 	bl	8104404 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f56:	4604      	mov	r4, r0
        break;
 8104f58:	e7ee      	b.n	8104f38 <HAL_RCCEx_PeriphCLKConfig+0x954>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f5a:	2102      	movs	r1, #2
 8104f5c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104f60:	f7ff fac8 	bl	81044f4 <RCCEx_PLL3_Config>
 8104f64:	e7f7      	b.n	8104f56 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8104f66:	4626      	mov	r6, r4
 8104f68:	e67b      	b.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f6a:	2102      	movs	r1, #2
 8104f6c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104f70:	f7ff fac0 	bl	81044f4 <RCCEx_PLL3_Config>
 8104f74:	e6b8      	b.n	8104ce8 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 8104f76:	2601      	movs	r6, #1
 8104f78:	4634      	mov	r4, r6
 8104f7a:	e6c1      	b.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8104f7c:	4626      	mov	r6, r4
 8104f7e:	e6bf      	b.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104f80:	2101      	movs	r1, #1
 8104f82:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104f86:	f7ff fab5 	bl	81044f4 <RCCEx_PLL3_Config>
 8104f8a:	4604      	mov	r4, r0
        break;
 8104f8c:	e6cd      	b.n	8104d2a <HAL_RCCEx_PeriphCLKConfig+0x746>
    switch (PeriphClkInit->UsbClockSelection)
 8104f8e:	2601      	movs	r6, #1
 8104f90:	4634      	mov	r4, r6
 8104f92:	e6d5      	b.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8104f94:	4626      	mov	r6, r4
 8104f96:	e6d3      	b.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0x75c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f98:	4a1b      	ldr	r2, [pc, #108]	; (8105008 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8104f9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8104f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104fa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8104fa2:	b974      	cbnz	r4, 8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104fa4:	4a18      	ldr	r2, [pc, #96]	; (8105008 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8104fa6:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8104fa8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8104faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104fae:	430b      	orrs	r3, r1
 8104fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104fb2:	e6d2      	b.n	8104d5a <HAL_RCCEx_PeriphCLKConfig+0x776>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104fb4:	2102      	movs	r1, #2
 8104fb6:	f105 0008 	add.w	r0, r5, #8
 8104fba:	f7ff fa23 	bl	8104404 <RCCEx_PLL2_Config>
 8104fbe:	4604      	mov	r4, r0
        break;
 8104fc0:	e7ef      	b.n	8104fa2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8104fc2:	4626      	mov	r6, r4
 8104fc4:	e6c9      	b.n	8104d5a <HAL_RCCEx_PeriphCLKConfig+0x776>
    switch (PeriphClkInit->RngClockSelection)
 8104fc6:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 8104fca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8104fce:	f47f aede 	bne.w	8104d8e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    if (ret == HAL_OK)
 8104fd2:	b964      	cbnz	r4, 8104fee <HAL_RCCEx_PeriphCLKConfig+0xa0a>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104fd4:	4c0c      	ldr	r4, [pc, #48]	; (8105008 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8104fd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8104fd8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8104fdc:	4302      	orrs	r2, r0
 8104fde:	6562      	str	r2, [r4, #84]	; 0x54
 8104fe0:	e6d6      	b.n	8104d90 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fe2:	4f09      	ldr	r7, [pc, #36]	; (8105008 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8104fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8104fe6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8104fea:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 8104fec:	e7f1      	b.n	8104fd2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8104fee:	4626      	mov	r6, r4
 8104ff0:	e6ce      	b.n	8104d90 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104ff2:	2102      	movs	r1, #2
 8104ff4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8104ff8:	f7ff fa7c 	bl	81044f4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8104ffc:	2800      	cmp	r0, #0
 8104ffe:	f43f af3c 	beq.w	8104e7a <HAL_RCCEx_PeriphCLKConfig+0x896>
  return HAL_ERROR;
 8105002:	2001      	movs	r0, #1
 8105004:	e73c      	b.n	8104e80 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8105006:	bf00      	nop
 8105008:	58024400 	.word	0x58024400

0810500c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 810500c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810500e:	f7ff f9b5 	bl	810437c <HAL_RCC_GetHCLKFreq>
 8105012:	4b05      	ldr	r3, [pc, #20]	; (8105028 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8105014:	4a05      	ldr	r2, [pc, #20]	; (810502c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8105016:	6a1b      	ldr	r3, [r3, #32]
 8105018:	f3c3 1302 	ubfx	r3, r3, #4, #3
 810501c:	5cd3      	ldrb	r3, [r2, r3]
 810501e:	f003 031f 	and.w	r3, r3, #31
}
 8105022:	40d8      	lsrs	r0, r3
 8105024:	bd08      	pop	{r3, pc}
 8105026:	bf00      	nop
 8105028:	58024400 	.word	0x58024400
 810502c:	0810edd0 	.word	0x0810edd0

08105030 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105030:	494f      	ldr	r1, [pc, #316]	; (8105170 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8105032:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105034:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105036:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105038:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810503a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  if (pll2m != 0U)
 810503c:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105040:	f3c6 3305 	ubfx	r3, r6, #12, #6
  if (pll2m != 0U)
 8105044:	f000 8090 	beq.w	8105168 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105048:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810504c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105050:	f3c5 1200 	ubfx	r2, r5, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105054:	4353      	muls	r3, r2
 8105056:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810505a:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 810505e:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105064:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105068:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 810506c:	d06e      	beq.n	810514c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 810506e:	2c02      	cmp	r4, #2
 8105070:	d05e      	beq.n	8105130 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8105072:	2c00      	cmp	r4, #0
 8105074:	d16a      	bne.n	810514c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105076:	680b      	ldr	r3, [r1, #0]
 8105078:	069b      	lsls	r3, r3, #26
 810507a:	d547      	bpl.n	810510c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810507c:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810507e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105080:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8105084:	4a3b      	ldr	r2, [pc, #236]	; (8105174 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8105086:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105088:	ee07 2a90 	vmov	s15, r2
 810508c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105094:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105098:	ee07 3a10 	vmov	s14, r3
 810509c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81050a0:	ee37 7a26 	vadd.f32	s14, s14, s13
 81050a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 81050a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81050ac:	4a30      	ldr	r2, [pc, #192]	; (8105170 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 81050ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 81050b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 81050b4:	ee07 3a10 	vmov	s14, r3
 81050b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81050bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 81050c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81050c4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 81050c8:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81050cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 81050ce:	f3c3 4306 	ubfx	r3, r3, #16, #7
 81050d2:	ee07 3a10 	vmov	s14, r3
 81050d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81050da:	ee37 7a06 	vadd.f32	s14, s14, s12
 81050de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81050e2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 81050e6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81050ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 81050ec:	f3c3 6306 	ubfx	r3, r3, #24, #7
 81050f0:	ee06 3a90 	vmov	s13, r3
 81050f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81050f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 81050fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8105100:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105104:	ee17 3a90 	vmov	r3, s15
 8105108:	6083      	str	r3, [r0, #8]
}
 810510a:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810510c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 810510e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8105178 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8105112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105116:	ee07 3a90 	vmov	s15, r3
 810511a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105122:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105126:	eec5 6a87 	vdiv.f32	s13, s11, s14
 810512a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 810512e:	e7bd      	b.n	81050ac <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105130:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8105132:	eddf 5a12 	vldr	s11, [pc, #72]	; 810517c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8105136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810513a:	ee07 3a90 	vmov	s15, r3
 810513e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105146:	ee77 7a86 	vadd.f32	s15, s15, s12
 810514a:	e7ec      	b.n	8105126 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810514c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 810514e:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8105180 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8105152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105156:	ee07 3a90 	vmov	s15, r3
 810515a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105162:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105166:	e7de      	b.n	8105126 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105168:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810516c:	e7cc      	b.n	8105108 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 810516e:	bf00      	nop
 8105170:	58024400 	.word	0x58024400
 8105174:	03d09000 	.word	0x03d09000
 8105178:	4c742400 	.word	0x4c742400
 810517c:	4af42400 	.word	0x4af42400
 8105180:	4a742400 	.word	0x4a742400

08105184 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105184:	494f      	ldr	r1, [pc, #316]	; (81052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8105186:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105188:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810518a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810518c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810518e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
  if (pll3m != 0U)
 8105190:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105194:	f3c6 5305 	ubfx	r3, r6, #20, #6
  if (pll3m != 0U)
 8105198:	f000 8090 	beq.w	81052bc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810519c:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81051a0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81051a4:	f3c5 2200 	ubfx	r2, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81051a8:	4353      	muls	r3, r2
 81051aa:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051ae:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 81051b2:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81051b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81051b8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 81051bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 81051c0:	d06e      	beq.n	81052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 81051c2:	2c02      	cmp	r4, #2
 81051c4:	d05e      	beq.n	8105284 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 81051c6:	2c00      	cmp	r4, #0
 81051c8:	d16a      	bne.n	81052a0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81051ca:	680b      	ldr	r3, [r1, #0]
 81051cc:	069b      	lsls	r3, r3, #26
 81051ce:	d547      	bpl.n	8105260 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81051d0:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81051d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81051d4:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 81051d8:	4a3b      	ldr	r2, [pc, #236]	; (81052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 81051da:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81051dc:	ee07 2a90 	vmov	s15, r2
 81051e0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 81051e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051e8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 81051ec:	ee07 3a10 	vmov	s14, r3
 81051f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81051f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 81051f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 81051fc:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105200:	4a30      	ldr	r2, [pc, #192]	; (81052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8105202:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8105204:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105208:	ee07 3a10 	vmov	s14, r3
 810520c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105210:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105214:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105218:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 810521c:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105220:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8105222:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8105226:	ee07 3a10 	vmov	s14, r3
 810522a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810522e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105232:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105236:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 810523a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810523e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8105240:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8105244:	ee06 3a90 	vmov	s13, r3
 8105248:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 810524c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8105250:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8105254:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105258:	ee17 3a90 	vmov	r3, s15
 810525c:	6083      	str	r3, [r0, #8]
}
 810525e:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105262:	eddf 5a1a 	vldr	s11, [pc, #104]	; 81052cc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8105266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810526a:	ee07 3a90 	vmov	s15, r3
 810526e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105276:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810527a:	eec5 6a87 	vdiv.f32	s13, s11, s14
 810527e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8105282:	e7bd      	b.n	8105200 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105286:	eddf 5a12 	vldr	s11, [pc, #72]	; 81052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 810528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810528e:	ee07 3a90 	vmov	s15, r3
 8105292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810529a:	ee77 7a86 	vadd.f32	s15, s15, s12
 810529e:	e7ec      	b.n	810527a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81052a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81052a2:	eddf 5a0c 	vldr	s11, [pc, #48]	; 81052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 81052a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052aa:	ee07 3a90 	vmov	s15, r3
 81052ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81052b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 81052ba:	e7de      	b.n	810527a <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81052bc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81052c0:	e7cc      	b.n	810525c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 81052c2:	bf00      	nop
 81052c4:	58024400 	.word	0x58024400
 81052c8:	03d09000 	.word	0x03d09000
 81052cc:	4c742400 	.word	0x4c742400
 81052d0:	4af42400 	.word	0x4af42400
 81052d4:	4a742400 	.word	0x4a742400

081052d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81052d8:	494f      	ldr	r1, [pc, #316]	; (8105418 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 81052da:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81052dc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81052de:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81052e0:	6acd      	ldr	r5, [r1, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81052e2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  if (pll1m != 0U)
 81052e4:	f416 7f7c 	tst.w	r6, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81052e8:	f3c6 1305 	ubfx	r3, r6, #4, #6
  if (pll1m != 0U)
 81052ec:	f000 8090 	beq.w	8105410 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81052f0:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81052f4:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81052f8:	f005 0201 	and.w	r2, r5, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81052fc:	4353      	muls	r3, r2
 81052fe:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105302:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8105306:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810530c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105310:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    switch (pllsource)
 8105314:	d04e      	beq.n	81053b4 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8105316:	2c02      	cmp	r4, #2
 8105318:	d05e      	beq.n	81053d8 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 810531a:	2c00      	cmp	r4, #0
 810531c:	d16a      	bne.n	81053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810531e:	680b      	ldr	r3, [r1, #0]
 8105320:	069b      	lsls	r3, r3, #26
 8105322:	d567      	bpl.n	81053f4 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105324:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105326:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105328:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 810532c:	4a3b      	ldr	r2, [pc, #236]	; (810541c <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 810532e:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105330:	ee07 2a90 	vmov	s15, r2
 8105334:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810533c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105340:	ee07 3a10 	vmov	s14, r3
 8105344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105348:	ee37 7a26 	vadd.f32	s14, s14, s13
 810534c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105350:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105354:	4a30      	ldr	r2, [pc, #192]	; (8105418 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8105356:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105358:	f3c3 2346 	ubfx	r3, r3, #9, #7
 810535c:	ee07 3a10 	vmov	s14, r3
 8105360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105364:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105368:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810536c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105370:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105374:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105376:	f3c3 4306 	ubfx	r3, r3, #16, #7
 810537a:	ee07 3a10 	vmov	s14, r3
 810537e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105382:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105386:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810538a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 810538e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105392:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8105394:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8105398:	ee06 3a90 	vmov	s13, r3
 810539c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81053a0:	ee76 6a86 	vadd.f32	s13, s13, s12
 81053a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81053a8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 81053ac:	ee17 3a90 	vmov	r3, s15
 81053b0:	6083      	str	r3, [r0, #8]
}
 81053b2:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81053b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 81053b6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8105420 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 81053ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053be:	ee07 3a90 	vmov	s15, r3
 81053c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81053c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053ca:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81053ce:	eec5 6a87 	vdiv.f32	s13, s11, s14
 81053d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 81053d6:	e7bd      	b.n	8105354 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81053d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 81053da:	eddf 5a12 	vldr	s11, [pc, #72]	; 8105424 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 81053de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053e2:	ee07 3a90 	vmov	s15, r3
 81053e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 81053f2:	e7ec      	b.n	81053ce <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81053f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 81053f6:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8105428 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 81053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053fe:	ee07 3a90 	vmov	s15, r3
 8105402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810540a:	ee77 7a86 	vadd.f32	s15, s15, s12
 810540e:	e7de      	b.n	81053ce <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105410:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105414:	e7cc      	b.n	81053b0 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8105416:	bf00      	nop
 8105418:	58024400 	.word	0x58024400
 810541c:	03d09000 	.word	0x03d09000
 8105420:	4a742400 	.word	0x4a742400
 8105424:	4af42400 	.word	0x4af42400
 8105428:	4c742400 	.word	0x4c742400

0810542c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 810542c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810542e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8105432:	430b      	orrs	r3, r1
 8105434:	d114      	bne.n	8105460 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8105436:	4b9e      	ldr	r3, [pc, #632]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810543a:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 810543e:	2a04      	cmp	r2, #4
 8105440:	d82f      	bhi.n	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105442:	e8df f012 	tbh	[pc, r2, lsl #1]
 8105446:	0108      	.short	0x0108
 8105448:	0005001d 	.word	0x0005001d
 810544c:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105450:	6818      	ldr	r0, [r3, #0]
 8105452:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105456:	d01b      	beq.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105458:	a801      	add	r0, sp, #4
 810545a:	f7ff fe93 	bl	8105184 <HAL_RCCEx_GetPLL3ClockFreq>
 810545e:	e016      	b.n	810548e <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105460:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8105464:	430b      	orrs	r3, r1
 8105466:	d11e      	bne.n	81054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105468:	4b91      	ldr	r3, [pc, #580]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 810546a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810546c:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
    switch (saiclocksource)
 8105470:	2a80      	cmp	r2, #128	; 0x80
 8105472:	d0ed      	beq.n	8105450 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105474:	d80f      	bhi.n	8105496 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8105476:	2a00      	cmp	r2, #0
 8105478:	f000 80ed 	beq.w	8105656 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 810547c:	2a40      	cmp	r2, #64	; 0x40
    switch (srcclk)
 810547e:	d110      	bne.n	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105480:	6818      	ldr	r0, [r3, #0]
 8105482:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105486:	d003      	beq.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105488:	a801      	add	r0, sp, #4
 810548a:	f7ff fdd1 	bl	8105030 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810548e:	9801      	ldr	r0, [sp, #4]
}
 8105490:	b005      	add	sp, #20
 8105492:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8105496:	2ac0      	cmp	r2, #192	; 0xc0
 8105498:	f000 813a 	beq.w	8105710 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 810549c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    switch (saiclocksource)
 81054a0:	d01a      	beq.n	81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    switch (srcclk)
 81054a2:	2000      	movs	r0, #0
  return frequency;
 81054a4:	e7f4      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81054a6:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 81054aa:	430b      	orrs	r3, r1
 81054ac:	d133      	bne.n	8105516 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81054ae:	4b80      	ldr	r3, [pc, #512]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 81054b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81054b2:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
    switch (saiclocksource)
 81054b6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 81054ba:	d0c9      	beq.n	8105450 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 81054bc:	d805      	bhi.n	81054ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 81054be:	2a00      	cmp	r2, #0
 81054c0:	f000 80c9 	beq.w	8105656 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 81054c4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 81054c8:	e7d9      	b.n	810547e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 81054ca:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 81054ce:	f000 811f 	beq.w	8105710 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 81054d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 81054d6:	e7e3      	b.n	81054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81054d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81054da:	6819      	ldr	r1, [r3, #0]
 81054dc:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81054de:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81054e2:	d506      	bpl.n	81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 81054e4:	b92a      	cbnz	r2, 81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054e6:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054e8:	4872      	ldr	r0, [pc, #456]	; (81056b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 81054ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81054ee:	40d8      	lsrs	r0, r3
 81054f0:	e7ce      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81054f2:	4b6f      	ldr	r3, [pc, #444]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 81054f4:	6819      	ldr	r1, [r3, #0]
 81054f6:	05c9      	lsls	r1, r1, #23
 81054f8:	d503      	bpl.n	8105502 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 81054fa:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 81054fe:	f000 8109 	beq.w	8105714 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105502:	6818      	ldr	r0, [r3, #0]
 8105504:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8105508:	d0c2      	beq.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 810550a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 810550e:	486a      	ldr	r0, [pc, #424]	; (81056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8105510:	bf18      	it	ne
 8105512:	2000      	movne	r0, #0
 8105514:	e7bc      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105516:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 810551a:	430b      	orrs	r3, r1
 810551c:	d125      	bne.n	810556a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810551e:	4b64      	ldr	r3, [pc, #400]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105522:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
    switch (saiclocksource)
 8105526:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 810552a:	d091      	beq.n	8105450 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 810552c:	d805      	bhi.n	810553a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 810552e:	2a00      	cmp	r2, #0
 8105530:	f000 8091 	beq.w	8105656 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105534:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8105538:	e7a1      	b.n	810547e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 810553a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 810553e:	f000 80e7 	beq.w	8105710 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105542:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
    switch (srcclk)
 8105546:	d1ac      	bne.n	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105548:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810554a:	6819      	ldr	r1, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810554c:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810554e:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105550:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105554:	d501      	bpl.n	810555a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8105556:	2a00      	cmp	r2, #0
 8105558:	d0c6      	beq.n	81054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810555a:	05d9      	lsls	r1, r3, #23
 810555c:	d503      	bpl.n	8105566 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 810555e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8105562:	f000 80d7 	beq.w	8105714 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105566:	4b52      	ldr	r3, [pc, #328]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105568:	e7cb      	b.n	8105502 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810556a:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 810556e:	430b      	orrs	r3, r1
 8105570:	d114      	bne.n	810559c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105572:	4b4f      	ldr	r3, [pc, #316]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105576:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    switch (srcclk)
 810557a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 810557e:	f43f af67 	beq.w	8105450 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105582:	d804      	bhi.n	810558e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8105584:	2a00      	cmp	r2, #0
 8105586:	d066      	beq.n	8105656 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105588:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 810558c:	e777      	b.n	810547e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 810558e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8105592:	f000 80bd 	beq.w	8105710 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105596:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 810559a:	e7d4      	b.n	8105546 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810559c:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 81055a0:	430b      	orrs	r3, r1
 81055a2:	d134      	bne.n	810560e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81055a4:	4a42      	ldr	r2, [pc, #264]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 81055a6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 81055a8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 81055ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81055b0:	f000 808a 	beq.w	81056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 81055b4:	d80d      	bhi.n	81055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 81055b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055ba:	d016      	beq.n	81055ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81055bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81055c0:	d01c      	beq.n	81055fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 81055c2:	2b00      	cmp	r3, #0
 81055c4:	f47f af6d 	bne.w	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 81055c8:	b005      	add	sp, #20
 81055ca:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 81055ce:	f7fe bef5 	b.w	81043bc <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 81055d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81055d6:	d07e      	beq.n	81056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 81055d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    switch (srcclk)
 81055dc:	f47f af61 	bne.w	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81055e0:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 81055e2:	4b35      	ldr	r3, [pc, #212]	; (81056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 81055e4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 81055e8:	e079      	b.n	81056de <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81055ea:	6810      	ldr	r0, [r2, #0]
 81055ec:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 81055f0:	f43f af4e 	beq.w	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81055f4:	a801      	add	r0, sp, #4
 81055f6:	f7ff fd1b 	bl	8105030 <HAL_RCCEx_GetPLL2ClockFreq>
 81055fa:	e034      	b.n	8105666 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81055fc:	6810      	ldr	r0, [r2, #0]
 81055fe:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105602:	f43f af45 	beq.w	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105606:	a801      	add	r0, sp, #4
 8105608:	f7ff fdbc 	bl	8105184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810560c:	e02b      	b.n	8105666 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810560e:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8105612:	430b      	orrs	r3, r1
 8105614:	d117      	bne.n	8105646 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105616:	4b26      	ldr	r3, [pc, #152]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810561a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    switch (srcclk)
 810561e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8105622:	d006      	beq.n	8105632 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8105624:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8105628:	d08e      	beq.n	8105548 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 810562a:	2a00      	cmp	r2, #0
 810562c:	f47f af39 	bne.w	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8105630:	e726      	b.n	8105480 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105632:	6818      	ldr	r0, [r3, #0]
 8105634:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8105638:	f43f af2a 	beq.w	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810563c:	a801      	add	r0, sp, #4
 810563e:	f7ff fda1 	bl	8105184 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105642:	9803      	ldr	r0, [sp, #12]
 8105644:	e724      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105646:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 810564a:	430b      	orrs	r3, r1
 810564c:	d116      	bne.n	810567c <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810564e:	4b18      	ldr	r3, [pc, #96]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8105652:	03d2      	lsls	r2, r2, #15
 8105654:	d409      	bmi.n	810566a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105656:	6818      	ldr	r0, [r3, #0]
 8105658:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 810565c:	f43f af18 	beq.w	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105660:	a801      	add	r0, sp, #4
 8105662:	f7ff fe39 	bl	81052d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105666:	9802      	ldr	r0, [sp, #8]
 8105668:	e712      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810566a:	6818      	ldr	r0, [r3, #0]
 810566c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8105670:	f43f af0e 	beq.w	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105674:	a801      	add	r0, sp, #4
 8105676:	f7ff fcdb 	bl	8105030 <HAL_RCCEx_GetPLL2ClockFreq>
 810567a:	e7e2      	b.n	8105642 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810567c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8105680:	430b      	orrs	r3, r1
 8105682:	d12f      	bne.n	81056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8105684:	4a0a      	ldr	r2, [pc, #40]	; (81056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105686:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8105688:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 810568c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105690:	d01a      	beq.n	81056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8105692:	d813      	bhi.n	81056bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 8105694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105698:	d0a7      	beq.n	81055ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810569a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810569e:	d0ad      	beq.n	81055fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 81056a0:	2b00      	cmp	r3, #0
 81056a2:	f47f aefe 	bne.w	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 81056a6:	b005      	add	sp, #20
 81056a8:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81056ac:	f7ff bcae 	b.w	810500c <HAL_RCCEx_GetD3PCLK1Freq>
 81056b0:	58024400 	.word	0x58024400
 81056b4:	03d09000 	.word	0x03d09000
 81056b8:	007a1200 	.word	0x007a1200
    switch (srcclk)
 81056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81056c0:	d009      	beq.n	81056d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 81056c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81056c6:	e789      	b.n	81055dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81056c8:	6810      	ldr	r0, [r2, #0]
 81056ca:	f010 0004 	ands.w	r0, r0, #4
 81056ce:	f43f aedf 	beq.w	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81056d2:	6813      	ldr	r3, [r2, #0]
 81056d4:	e708      	b.n	81054e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81056d6:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 81056d8:	4b0f      	ldr	r3, [pc, #60]	; (8105718 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 81056da:	f410 7080 	ands.w	r0, r0, #256	; 0x100
          frequency = HSE_VALUE;
 81056de:	bf18      	it	ne
 81056e0:	4618      	movne	r0, r3
 81056e2:	e6d5      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81056e4:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 81056e8:	4301      	orrs	r1, r0
 81056ea:	f47f aeda 	bne.w	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81056ee:	4a0b      	ldr	r2, [pc, #44]	; (810571c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 81056f0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 81056f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 81056f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81056fa:	d007      	beq.n	810570c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 81056fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105700:	f43f af73 	beq.w	81055ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105704:	2b00      	cmp	r3, #0
 8105706:	f47f aecc 	bne.w	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 810570a:	e769      	b.n	81055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810570c:	6810      	ldr	r0, [r2, #0]
 810570e:	e7a3      	b.n	8105658 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8105710:	4803      	ldr	r0, [pc, #12]	; (8105720 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8105712:	e6bd      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 8105714:	4800      	ldr	r0, [pc, #0]	; (8105718 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8105716:	e6bb      	b.n	8105490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8105718:	003d0900 	.word	0x003d0900
 810571c:	58024400 	.word	0x58024400
 8105720:	00bb8000 	.word	0x00bb8000

08105724 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105724:	6a03      	ldr	r3, [r0, #32]
 8105726:	f023 0301 	bic.w	r3, r3, #1
 810572a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810572c:	6a03      	ldr	r3, [r0, #32]
{
 810572e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105730:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8105732:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105734:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8105736:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 810573a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 810573e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8105740:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8105742:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8105746:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105748:	4d1b      	ldr	r5, [pc, #108]	; (81057b8 <TIM_OC1_SetConfig+0x94>)
 810574a:	42a8      	cmp	r0, r5
 810574c:	d00f      	beq.n	810576e <TIM_OC1_SetConfig+0x4a>
 810574e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105752:	42a8      	cmp	r0, r5
 8105754:	d00b      	beq.n	810576e <TIM_OC1_SetConfig+0x4a>
 8105756:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 810575a:	42a8      	cmp	r0, r5
 810575c:	d007      	beq.n	810576e <TIM_OC1_SetConfig+0x4a>
 810575e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105762:	42a8      	cmp	r0, r5
 8105764:	d003      	beq.n	810576e <TIM_OC1_SetConfig+0x4a>
 8105766:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810576a:	42a8      	cmp	r0, r5
 810576c:	d11e      	bne.n	81057ac <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810576e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8105770:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8105774:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105776:	4d10      	ldr	r5, [pc, #64]	; (81057b8 <TIM_OC1_SetConfig+0x94>)
 8105778:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 810577a:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810577e:	d00f      	beq.n	81057a0 <TIM_OC1_SetConfig+0x7c>
 8105780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105784:	42a8      	cmp	r0, r5
 8105786:	d00b      	beq.n	81057a0 <TIM_OC1_SetConfig+0x7c>
 8105788:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 810578c:	42a8      	cmp	r0, r5
 810578e:	d007      	beq.n	81057a0 <TIM_OC1_SetConfig+0x7c>
 8105790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105794:	42a8      	cmp	r0, r5
 8105796:	d003      	beq.n	81057a0 <TIM_OC1_SetConfig+0x7c>
 8105798:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810579c:	42a8      	cmp	r0, r5
 810579e:	d105      	bne.n	81057ac <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81057a0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81057a4:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 81057a8:	4334      	orrs	r4, r6
 81057aa:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81057ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81057ae:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81057b0:	684a      	ldr	r2, [r1, #4]
 81057b2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81057b4:	6203      	str	r3, [r0, #32]
}
 81057b6:	bd70      	pop	{r4, r5, r6, pc}
 81057b8:	40010000 	.word	0x40010000

081057bc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81057bc:	6a03      	ldr	r3, [r0, #32]
 81057be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81057c2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81057c4:	6a03      	ldr	r3, [r0, #32]
{
 81057c6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81057c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81057ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81057cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81057ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81057d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 81057d6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81057d8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 81057da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81057de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 81057e2:	4d16      	ldr	r5, [pc, #88]	; (810583c <TIM_OC3_SetConfig+0x80>)
 81057e4:	42a8      	cmp	r0, r5
 81057e6:	d003      	beq.n	81057f0 <TIM_OC3_SetConfig+0x34>
 81057e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81057ec:	42a8      	cmp	r0, r5
 81057ee:	d10d      	bne.n	810580c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81057f0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 81057f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 81057f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81057fa:	4d10      	ldr	r5, [pc, #64]	; (810583c <TIM_OC3_SetConfig+0x80>)
 81057fc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 81057fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105802:	d00e      	beq.n	8105822 <TIM_OC3_SetConfig+0x66>
 8105804:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105808:	42a8      	cmp	r0, r5
 810580a:	d00a      	beq.n	8105822 <TIM_OC3_SetConfig+0x66>
 810580c:	4d0c      	ldr	r5, [pc, #48]	; (8105840 <TIM_OC3_SetConfig+0x84>)
 810580e:	42a8      	cmp	r0, r5
 8105810:	d007      	beq.n	8105822 <TIM_OC3_SetConfig+0x66>
 8105812:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105816:	42a8      	cmp	r0, r5
 8105818:	d003      	beq.n	8105822 <TIM_OC3_SetConfig+0x66>
 810581a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810581e:	42a8      	cmp	r0, r5
 8105820:	d106      	bne.n	8105830 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105822:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8105826:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 810582a:	4334      	orrs	r4, r6
 810582c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105830:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105832:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8105834:	684a      	ldr	r2, [r1, #4]
 8105836:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105838:	6203      	str	r3, [r0, #32]
}
 810583a:	bd70      	pop	{r4, r5, r6, pc}
 810583c:	40010000 	.word	0x40010000
 8105840:	40014000 	.word	0x40014000

08105844 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8105844:	6a03      	ldr	r3, [r0, #32]
 8105846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810584a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810584c:	6a03      	ldr	r3, [r0, #32]
{
 810584e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105850:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105852:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105854:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105856:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 810585a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810585e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105862:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8105864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105868:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810586c:	4d0e      	ldr	r5, [pc, #56]	; (81058a8 <TIM_OC4_SetConfig+0x64>)
 810586e:	42a8      	cmp	r0, r5
 8105870:	d00f      	beq.n	8105892 <TIM_OC4_SetConfig+0x4e>
 8105872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105876:	42a8      	cmp	r0, r5
 8105878:	d00b      	beq.n	8105892 <TIM_OC4_SetConfig+0x4e>
 810587a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 810587e:	42a8      	cmp	r0, r5
 8105880:	d007      	beq.n	8105892 <TIM_OC4_SetConfig+0x4e>
 8105882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105886:	42a8      	cmp	r0, r5
 8105888:	d003      	beq.n	8105892 <TIM_OC4_SetConfig+0x4e>
 810588a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810588e:	42a8      	cmp	r0, r5
 8105890:	d104      	bne.n	810589c <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105892:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8105894:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105898:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810589c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810589e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81058a0:	684a      	ldr	r2, [r1, #4]
 81058a2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81058a4:	6203      	str	r3, [r0, #32]
}
 81058a6:	bd30      	pop	{r4, r5, pc}
 81058a8:	40010000 	.word	0x40010000

081058ac <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81058ac:	6a03      	ldr	r3, [r0, #32]
 81058ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81058b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81058b4:	6a03      	ldr	r3, [r0, #32]
{
 81058b6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81058b8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81058ba:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81058bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81058be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81058c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 81058c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81058c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 81058ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81058ce:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81058d2:	4d0f      	ldr	r5, [pc, #60]	; (8105910 <TIM_OC5_SetConfig+0x64>)
 81058d4:	42a8      	cmp	r0, r5
 81058d6:	d00f      	beq.n	81058f8 <TIM_OC5_SetConfig+0x4c>
 81058d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81058dc:	42a8      	cmp	r0, r5
 81058de:	d00b      	beq.n	81058f8 <TIM_OC5_SetConfig+0x4c>
 81058e0:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 81058e4:	42a8      	cmp	r0, r5
 81058e6:	d007      	beq.n	81058f8 <TIM_OC5_SetConfig+0x4c>
 81058e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81058ec:	42a8      	cmp	r0, r5
 81058ee:	d003      	beq.n	81058f8 <TIM_OC5_SetConfig+0x4c>
 81058f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81058f4:	42a8      	cmp	r0, r5
 81058f6:	d104      	bne.n	8105902 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81058f8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 81058fa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81058fe:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105902:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105904:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8105906:	684a      	ldr	r2, [r1, #4]
 8105908:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810590a:	6203      	str	r3, [r0, #32]
}
 810590c:	bd30      	pop	{r4, r5, pc}
 810590e:	bf00      	nop
 8105910:	40010000 	.word	0x40010000

08105914 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8105914:	6a03      	ldr	r3, [r0, #32]
 8105916:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810591a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810591c:	6a03      	ldr	r3, [r0, #32]
{
 810591e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105920:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105922:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105924:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8105926:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 810592a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810592e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8105932:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8105934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8105938:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810593c:	4d0e      	ldr	r5, [pc, #56]	; (8105978 <TIM_OC6_SetConfig+0x64>)
 810593e:	42a8      	cmp	r0, r5
 8105940:	d00f      	beq.n	8105962 <TIM_OC6_SetConfig+0x4e>
 8105942:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105946:	42a8      	cmp	r0, r5
 8105948:	d00b      	beq.n	8105962 <TIM_OC6_SetConfig+0x4e>
 810594a:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 810594e:	42a8      	cmp	r0, r5
 8105950:	d007      	beq.n	8105962 <TIM_OC6_SetConfig+0x4e>
 8105952:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105956:	42a8      	cmp	r0, r5
 8105958:	d003      	beq.n	8105962 <TIM_OC6_SetConfig+0x4e>
 810595a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810595e:	42a8      	cmp	r0, r5
 8105960:	d104      	bne.n	810596c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8105962:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8105964:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8105968:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810596c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810596e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8105970:	684a      	ldr	r2, [r1, #4]
 8105972:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105974:	6203      	str	r3, [r0, #32]
}
 8105976:	bd30      	pop	{r4, r5, pc}
 8105978:	40010000 	.word	0x40010000

0810597c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 810597c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8105980:	2b01      	cmp	r3, #1
 8105982:	d12f      	bne.n	81059e4 <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8105984:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105986:	4a18      	ldr	r2, [pc, #96]	; (81059e8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8105988:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810598c:	6803      	ldr	r3, [r0, #0]
 810598e:	4293      	cmp	r3, r2
 8105990:	d01a      	beq.n	81059c8 <HAL_TIM_Base_Start+0x4c>
 8105992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105996:	d017      	beq.n	81059c8 <HAL_TIM_Base_Start+0x4c>
 8105998:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 810599c:	4293      	cmp	r3, r2
 810599e:	d013      	beq.n	81059c8 <HAL_TIM_Base_Start+0x4c>
 81059a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81059a4:	4293      	cmp	r3, r2
 81059a6:	d00f      	beq.n	81059c8 <HAL_TIM_Base_Start+0x4c>
 81059a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 81059ac:	4293      	cmp	r3, r2
 81059ae:	d00b      	beq.n	81059c8 <HAL_TIM_Base_Start+0x4c>
 81059b0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 81059b4:	4293      	cmp	r3, r2
 81059b6:	d007      	beq.n	81059c8 <HAL_TIM_Base_Start+0x4c>
 81059b8:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 81059bc:	4293      	cmp	r3, r2
 81059be:	d003      	beq.n	81059c8 <HAL_TIM_Base_Start+0x4c>
 81059c0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 81059c4:	4293      	cmp	r3, r2
 81059c6:	d107      	bne.n	81059d8 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81059c8:	6899      	ldr	r1, [r3, #8]
 81059ca:	4a08      	ldr	r2, [pc, #32]	; (81059ec <HAL_TIM_Base_Start+0x70>)
 81059cc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81059ce:	2a06      	cmp	r2, #6
 81059d0:	d006      	beq.n	81059e0 <HAL_TIM_Base_Start+0x64>
 81059d2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 81059d6:	d003      	beq.n	81059e0 <HAL_TIM_Base_Start+0x64>
    __HAL_TIM_ENABLE(htim);
 81059d8:	681a      	ldr	r2, [r3, #0]
 81059da:	f042 0201 	orr.w	r2, r2, #1
 81059de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 81059e0:	2000      	movs	r0, #0
}
 81059e2:	4770      	bx	lr
    return HAL_ERROR;
 81059e4:	2001      	movs	r0, #1
 81059e6:	4770      	bx	lr
 81059e8:	40010000 	.word	0x40010000
 81059ec:	00010007 	.word	0x00010007

081059f0 <HAL_TIM_PWM_MspInit>:
 81059f0:	4770      	bx	lr
	...

081059f4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81059f4:	4a30      	ldr	r2, [pc, #192]	; (8105ab8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 81059f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81059f8:	4290      	cmp	r0, r2
 81059fa:	d012      	beq.n	8105a22 <TIM_Base_SetConfig+0x2e>
 81059fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8105a00:	d00f      	beq.n	8105a22 <TIM_Base_SetConfig+0x2e>
 8105a02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8105a06:	4290      	cmp	r0, r2
 8105a08:	d00b      	beq.n	8105a22 <TIM_Base_SetConfig+0x2e>
 8105a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105a0e:	4290      	cmp	r0, r2
 8105a10:	d007      	beq.n	8105a22 <TIM_Base_SetConfig+0x2e>
 8105a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105a16:	4290      	cmp	r0, r2
 8105a18:	d003      	beq.n	8105a22 <TIM_Base_SetConfig+0x2e>
 8105a1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8105a1e:	4290      	cmp	r0, r2
 8105a20:	d119      	bne.n	8105a56 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8105a22:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8105a28:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105a2a:	4a23      	ldr	r2, [pc, #140]	; (8105ab8 <TIM_Base_SetConfig+0xc4>)
 8105a2c:	4290      	cmp	r0, r2
 8105a2e:	d01d      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8105a34:	d01a      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a36:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8105a3a:	4290      	cmp	r0, r2
 8105a3c:	d016      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105a42:	4290      	cmp	r0, r2
 8105a44:	d012      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105a4a:	4290      	cmp	r0, r2
 8105a4c:	d00e      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a4e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8105a52:	4290      	cmp	r0, r2
 8105a54:	d00a      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a56:	4a19      	ldr	r2, [pc, #100]	; (8105abc <TIM_Base_SetConfig+0xc8>)
 8105a58:	4290      	cmp	r0, r2
 8105a5a:	d007      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105a60:	4290      	cmp	r0, r2
 8105a62:	d003      	beq.n	8105a6c <TIM_Base_SetConfig+0x78>
 8105a64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105a68:	4290      	cmp	r0, r2
 8105a6a:	d103      	bne.n	8105a74 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105a6c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8105a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105a72:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105a74:	694a      	ldr	r2, [r1, #20]
 8105a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105a7a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8105a7c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105a7e:	688b      	ldr	r3, [r1, #8]
 8105a80:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8105a82:	680b      	ldr	r3, [r1, #0]
 8105a84:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105a86:	4b0c      	ldr	r3, [pc, #48]	; (8105ab8 <TIM_Base_SetConfig+0xc4>)
 8105a88:	4298      	cmp	r0, r3
 8105a8a:	d00f      	beq.n	8105aac <TIM_Base_SetConfig+0xb8>
 8105a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8105a90:	4298      	cmp	r0, r3
 8105a92:	d00b      	beq.n	8105aac <TIM_Base_SetConfig+0xb8>
 8105a94:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8105a98:	4298      	cmp	r0, r3
 8105a9a:	d007      	beq.n	8105aac <TIM_Base_SetConfig+0xb8>
 8105a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8105aa0:	4298      	cmp	r0, r3
 8105aa2:	d003      	beq.n	8105aac <TIM_Base_SetConfig+0xb8>
 8105aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8105aa8:	4298      	cmp	r0, r3
 8105aaa:	d101      	bne.n	8105ab0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8105aac:	690b      	ldr	r3, [r1, #16]
 8105aae:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8105ab0:	2301      	movs	r3, #1
 8105ab2:	6143      	str	r3, [r0, #20]
}
 8105ab4:	4770      	bx	lr
 8105ab6:	bf00      	nop
 8105ab8:	40010000 	.word	0x40010000
 8105abc:	40014000 	.word	0x40014000

08105ac0 <HAL_TIM_Base_Init>:
{
 8105ac0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8105ac2:	4604      	mov	r4, r0
 8105ac4:	b350      	cbz	r0, 8105b1c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8105ac6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8105aca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8105ace:	b91b      	cbnz	r3, 8105ad8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8105ad0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8105ad4:	f7fc fb2c 	bl	8102130 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8105ad8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105ada:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8105adc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105ae0:	1d21      	adds	r1, r4, #4
 8105ae2:	f7ff ff87 	bl	81059f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105ae6:	2301      	movs	r3, #1
 8105ae8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8105aec:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105aee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8105af2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8105af6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8105afa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8105afe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8105b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105b06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8105b0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8105b0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8105b12:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8105b16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8105b1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8105b1c:	2001      	movs	r0, #1
 8105b1e:	e7fc      	b.n	8105b1a <HAL_TIM_Base_Init+0x5a>

08105b20 <HAL_TIM_PWM_Init>:
{
 8105b20:	b510      	push	{r4, lr}
  if (htim == NULL)
 8105b22:	4604      	mov	r4, r0
 8105b24:	b350      	cbz	r0, 8105b7c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8105b26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8105b2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8105b2e:	b91b      	cbnz	r3, 8105b38 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8105b30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8105b34:	f7ff ff5c 	bl	81059f0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8105b38:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105b3a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8105b3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105b40:	1d21      	adds	r1, r4, #4
 8105b42:	f7ff ff57 	bl	81059f4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105b46:	2301      	movs	r3, #1
 8105b48:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8105b4c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105b4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8105b52:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8105b56:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8105b5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8105b5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8105b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105b66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8105b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8105b6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8105b72:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8105b76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8105b7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8105b7c:	2001      	movs	r0, #1
 8105b7e:	e7fc      	b.n	8105b7a <HAL_TIM_PWM_Init+0x5a>

08105b80 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105b80:	6a03      	ldr	r3, [r0, #32]
 8105b82:	f023 0310 	bic.w	r3, r3, #16
 8105b86:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8105b88:	6a03      	ldr	r3, [r0, #32]
{
 8105b8a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8105b8c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8105b8e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105b90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105b92:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8105b96:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105b9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105b9e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8105ba0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105ba4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105ba8:	4d16      	ldr	r5, [pc, #88]	; (8105c04 <TIM_OC2_SetConfig+0x84>)
 8105baa:	42a8      	cmp	r0, r5
 8105bac:	d003      	beq.n	8105bb6 <TIM_OC2_SetConfig+0x36>
 8105bae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105bb2:	42a8      	cmp	r0, r5
 8105bb4:	d10d      	bne.n	8105bd2 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105bb6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8105bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105bbc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105bc0:	4d10      	ldr	r5, [pc, #64]	; (8105c04 <TIM_OC2_SetConfig+0x84>)
 8105bc2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8105bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105bc8:	d00e      	beq.n	8105be8 <TIM_OC2_SetConfig+0x68>
 8105bca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105bce:	42a8      	cmp	r0, r5
 8105bd0:	d00a      	beq.n	8105be8 <TIM_OC2_SetConfig+0x68>
 8105bd2:	4d0d      	ldr	r5, [pc, #52]	; (8105c08 <TIM_OC2_SetConfig+0x88>)
 8105bd4:	42a8      	cmp	r0, r5
 8105bd6:	d007      	beq.n	8105be8 <TIM_OC2_SetConfig+0x68>
 8105bd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105bdc:	42a8      	cmp	r0, r5
 8105bde:	d003      	beq.n	8105be8 <TIM_OC2_SetConfig+0x68>
 8105be0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8105be4:	42a8      	cmp	r0, r5
 8105be6:	d106      	bne.n	8105bf6 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105be8:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8105bec:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105bf0:	4334      	orrs	r4, r6
 8105bf2:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8105bf6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8105bf8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8105bfa:	684a      	ldr	r2, [r1, #4]
 8105bfc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8105bfe:	6203      	str	r3, [r0, #32]
}
 8105c00:	bd70      	pop	{r4, r5, r6, pc}
 8105c02:	bf00      	nop
 8105c04:	40010000 	.word	0x40010000
 8105c08:	40014000 	.word	0x40014000

08105c0c <HAL_TIM_PWM_ConfigChannel>:
{
 8105c0c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8105c0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8105c12:	2b01      	cmp	r3, #1
{
 8105c14:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8105c16:	d074      	beq.n	8105d02 <HAL_TIM_PWM_ConfigChannel+0xf6>
 8105c18:	2301      	movs	r3, #1
  switch (Channel)
 8105c1a:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8105c1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8105c20:	d04f      	beq.n	8105cc2 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8105c22:	d809      	bhi.n	8105c38 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8105c24:	2a04      	cmp	r2, #4
 8105c26:	d02c      	beq.n	8105c82 <HAL_TIM_PWM_ConfigChannel+0x76>
 8105c28:	2a08      	cmp	r2, #8
 8105c2a:	d03a      	beq.n	8105ca2 <HAL_TIM_PWM_ConfigChannel+0x96>
 8105c2c:	b1c2      	cbz	r2, 8105c60 <HAL_TIM_PWM_ConfigChannel+0x54>
 8105c2e:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8105c30:	2300      	movs	r3, #0
 8105c32:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8105c36:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8105c38:	2a10      	cmp	r2, #16
 8105c3a:	d052      	beq.n	8105ce2 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8105c3c:	2a14      	cmp	r2, #20
 8105c3e:	d1f6      	bne.n	8105c2e <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8105c40:	6800      	ldr	r0, [r0, #0]
 8105c42:	f7ff fe67 	bl	8105914 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105c46:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105c48:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8105c4e:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105c50:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8105c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105c56:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105c58:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8105c5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8105c5e:	e04e      	b.n	8105cfe <HAL_TIM_PWM_ConfigChannel+0xf2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8105c60:	6800      	ldr	r0, [r0, #0]
 8105c62:	f7ff fd5f 	bl	8105724 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105c66:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105c68:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105c6a:	f043 0308 	orr.w	r3, r3, #8
 8105c6e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105c70:	6983      	ldr	r3, [r0, #24]
 8105c72:	f023 0304 	bic.w	r3, r3, #4
 8105c76:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105c78:	6983      	ldr	r3, [r0, #24]
 8105c7a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105c7c:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8105c7e:	2000      	movs	r0, #0
      break;
 8105c80:	e7d6      	b.n	8105c30 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105c82:	6800      	ldr	r0, [r0, #0]
 8105c84:	f7ff ff7c 	bl	8105b80 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105c88:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105c8a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8105c90:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105c92:	6983      	ldr	r3, [r0, #24]
 8105c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105c98:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105c9a:	6983      	ldr	r3, [r0, #24]
 8105c9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8105ca0:	e7ec      	b.n	8105c7c <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8105ca2:	6800      	ldr	r0, [r0, #0]
 8105ca4:	f7ff fd8a 	bl	81057bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105ca8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105caa:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105cac:	f043 0308 	orr.w	r3, r3, #8
 8105cb0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8105cb2:	69c3      	ldr	r3, [r0, #28]
 8105cb4:	f023 0304 	bic.w	r3, r3, #4
 8105cb8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105cba:	69c3      	ldr	r3, [r0, #28]
 8105cbc:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105cbe:	61c3      	str	r3, [r0, #28]
      break;
 8105cc0:	e7dd      	b.n	8105c7e <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8105cc2:	6800      	ldr	r0, [r0, #0]
 8105cc4:	f7ff fdbe 	bl	8105844 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105cc8:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105cca:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8105cd0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105cd2:	69c3      	ldr	r3, [r0, #28]
 8105cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8105cd8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105cda:	69c3      	ldr	r3, [r0, #28]
 8105cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8105ce0:	e7ed      	b.n	8105cbe <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8105ce2:	6800      	ldr	r0, [r0, #0]
 8105ce4:	f7ff fde2 	bl	81058ac <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105ce8:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105cea:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105cec:	f043 0308 	orr.w	r3, r3, #8
 8105cf0:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105cf2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8105cf4:	f023 0304 	bic.w	r3, r3, #4
 8105cf8:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105cfa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8105cfc:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105cfe:	6543      	str	r3, [r0, #84]	; 0x54
 8105d00:	e7bd      	b.n	8105c7e <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 8105d02:	2002      	movs	r0, #2
 8105d04:	e797      	b.n	8105c36 <HAL_TIM_PWM_ConfigChannel+0x2a>

08105d06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105d06:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8105d08:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105d0a:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105d0c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105d10:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8105d14:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105d16:	6083      	str	r3, [r0, #8]
}
 8105d18:	bd10      	pop	{r4, pc}
	...

08105d1c <HAL_TIM_ConfigClockSource>:
{
 8105d1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8105d1e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8105d22:	2b01      	cmp	r3, #1
{
 8105d24:	4604      	mov	r4, r0
 8105d26:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8105d2a:	f000 80aa 	beq.w	8105e82 <HAL_TIM_ConfigClockSource+0x166>
 8105d2e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8105d30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8105d34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8105d38:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105d3a:	4b53      	ldr	r3, [pc, #332]	; (8105e88 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 8105d3c:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105d3e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8105d40:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8105d42:	680b      	ldr	r3, [r1, #0]
 8105d44:	2b70      	cmp	r3, #112	; 0x70
 8105d46:	d056      	beq.n	8105df6 <HAL_TIM_ConfigClockSource+0xda>
 8105d48:	d83c      	bhi.n	8105dc4 <HAL_TIM_ConfigClockSource+0xa8>
 8105d4a:	2b50      	cmp	r3, #80	; 0x50
 8105d4c:	d067      	beq.n	8105e1e <HAL_TIM_ConfigClockSource+0x102>
 8105d4e:	d81d      	bhi.n	8105d8c <HAL_TIM_ConfigClockSource+0x70>
 8105d50:	2b40      	cmp	r3, #64	; 0x40
 8105d52:	d07d      	beq.n	8105e50 <HAL_TIM_ConfigClockSource+0x134>
 8105d54:	d806      	bhi.n	8105d64 <HAL_TIM_ConfigClockSource+0x48>
 8105d56:	2b20      	cmp	r3, #32
 8105d58:	d00e      	beq.n	8105d78 <HAL_TIM_ConfigClockSource+0x5c>
 8105d5a:	d80b      	bhi.n	8105d74 <HAL_TIM_ConfigClockSource+0x58>
 8105d5c:	f033 0210 	bics.w	r2, r3, #16
 8105d60:	d00a      	beq.n	8105d78 <HAL_TIM_ConfigClockSource+0x5c>
 8105d62:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 8105d64:	2301      	movs	r3, #1
 8105d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8105d6a:	2300      	movs	r3, #0
 8105d6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8105d70:	4610      	mov	r0, r2
 8105d72:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8105d74:	2b30      	cmp	r3, #48	; 0x30
 8105d76:	d1f4      	bne.n	8105d62 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8105d78:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8105d7a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8105d7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105d82:	431a      	orrs	r2, r3
 8105d84:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8105d88:	6082      	str	r2, [r0, #8]
 8105d8a:	e03d      	b.n	8105e08 <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
 8105d8c:	2b60      	cmp	r3, #96	; 0x60
 8105d8e:	d1e9      	bne.n	8105d64 <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105d90:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8105d92:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8105d94:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105d96:	f023 0310 	bic.w	r3, r3, #16
 8105d9a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105d9c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8105d9e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8105da0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8105da4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8105da8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8105dac:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8105db0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8105db2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8105db4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8105db6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8105dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105dbe:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8105dc2:	e020      	b.n	8105e06 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8105dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105dc8:	d020      	beq.n	8105e0c <HAL_TIM_ConfigClockSource+0xf0>
 8105dca:	d804      	bhi.n	8105dd6 <HAL_TIM_ConfigClockSource+0xba>
  HAL_StatusTypeDef status = HAL_OK;
 8105dcc:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8105dd0:	bf18      	it	ne
 8105dd2:	2201      	movne	r2, #1
 8105dd4:	e7c6      	b.n	8105d64 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8105dd6:	492d      	ldr	r1, [pc, #180]	; (8105e8c <HAL_TIM_ConfigClockSource+0x170>)
 8105dd8:	428b      	cmp	r3, r1
 8105dda:	d0cd      	beq.n	8105d78 <HAL_TIM_ConfigClockSource+0x5c>
 8105ddc:	d805      	bhi.n	8105dea <HAL_TIM_ConfigClockSource+0xce>
 8105dde:	f023 0110 	bic.w	r1, r3, #16
 8105de2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8105de6:	d0c7      	beq.n	8105d78 <HAL_TIM_ConfigClockSource+0x5c>
 8105de8:	e7bc      	b.n	8105d64 <HAL_TIM_ConfigClockSource+0x48>
 8105dea:	4929      	ldr	r1, [pc, #164]	; (8105e90 <HAL_TIM_ConfigClockSource+0x174>)
 8105dec:	428b      	cmp	r3, r1
 8105dee:	d0c3      	beq.n	8105d78 <HAL_TIM_ConfigClockSource+0x5c>
 8105df0:	3110      	adds	r1, #16
 8105df2:	428b      	cmp	r3, r1
 8105df4:	e7f7      	b.n	8105de6 <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 8105df6:	68cb      	ldr	r3, [r1, #12]
 8105df8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8105dfc:	f7ff ff83 	bl	8105d06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8105e00:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8105e02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105e06:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8105e08:	2200      	movs	r2, #0
}
 8105e0a:	e7ab      	b.n	8105d64 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
 8105e0c:	68cb      	ldr	r3, [r1, #12]
 8105e0e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8105e12:	f7ff ff78 	bl	8105d06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8105e16:	6883      	ldr	r3, [r0, #8]
 8105e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8105e1c:	e7f3      	b.n	8105e06 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 8105e1e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8105e20:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8105e22:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105e24:	6a03      	ldr	r3, [r0, #32]
 8105e26:	f023 0301 	bic.w	r3, r3, #1
 8105e2a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105e2c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8105e2e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8105e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8105e36:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8105e3a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8105e3c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8105e3e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8105e40:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8105e42:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8105e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105e4a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8105e4e:	e7da      	b.n	8105e06 <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 8105e50:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8105e52:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8105e54:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8105e56:	6a03      	ldr	r3, [r0, #32]
 8105e58:	f023 0301 	bic.w	r3, r3, #1
 8105e5c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8105e5e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8105e60:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8105e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8105e68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8105e6c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8105e6e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8105e70:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8105e72:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8105e74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8105e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8105e7c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8105e80:	e7c1      	b.n	8105e06 <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 8105e82:	461a      	mov	r2, r3
 8105e84:	e774      	b.n	8105d70 <HAL_TIM_ConfigClockSource+0x54>
 8105e86:	bf00      	nop
 8105e88:	ffce0088 	.word	0xffce0088
 8105e8c:	00100020 	.word	0x00100020
 8105e90:	00100030 	.word	0x00100030

08105e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8105e94:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8105e96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8105e9a:	2b01      	cmp	r3, #1
 8105e9c:	f04f 0302 	mov.w	r3, #2
 8105ea0:	d03a      	beq.n	8105f18 <HAL_TIMEx_MasterConfigSynchronization+0x84>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105ea2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105ea6:	4d1d      	ldr	r5, [pc, #116]	; (8105f1c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 8105ea8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105eaa:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8105eac:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8105eae:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8105eb0:	d002      	beq.n	8105eb8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8105eb2:	4e1b      	ldr	r6, [pc, #108]	; (8105f20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8105eb4:	42b3      	cmp	r3, r6
 8105eb6:	d103      	bne.n	8105ec0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105eb8:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8105eba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8105ebe:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105ec0:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8105ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8105ec6:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105ec8:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8105eca:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105ecc:	d019      	beq.n	8105f02 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8105ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105ed2:	d016      	beq.n	8105f02 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8105ed4:	4a13      	ldr	r2, [pc, #76]	; (8105f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8105ed6:	4293      	cmp	r3, r2
 8105ed8:	d013      	beq.n	8105f02 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8105eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105ede:	4293      	cmp	r3, r2
 8105ee0:	d00f      	beq.n	8105f02 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8105ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d00b      	beq.n	8105f02 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8105eea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8105eee:	4293      	cmp	r3, r2
 8105ef0:	d007      	beq.n	8105f02 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8105ef2:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8105ef6:	4293      	cmp	r3, r2
 8105ef8:	d003      	beq.n	8105f02 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8105efa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8105efe:	4293      	cmp	r3, r2
 8105f00:	d104      	bne.n	8105f0c <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8105f02:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8105f04:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8105f08:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8105f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8105f0c:	2301      	movs	r3, #1
 8105f0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8105f12:	2300      	movs	r3, #0
 8105f14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8105f18:	4618      	mov	r0, r3

  return HAL_OK;
}
 8105f1a:	bd70      	pop	{r4, r5, r6, pc}
 8105f1c:	40010000 	.word	0x40010000
 8105f20:	40010400 	.word	0x40010400
 8105f24:	40000400 	.word	0x40000400

08105f28 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8105f28:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105f2a:	e852 3f00 	ldrex	r3, [r2]
 8105f2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105f32:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8105f36:	6802      	ldr	r2, [r0, #0]
 8105f38:	2900      	cmp	r1, #0
 8105f3a:	d1f5      	bne.n	8105f28 <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105f3c:	f102 0308 	add.w	r3, r2, #8
 8105f40:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8105f44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105f48:	f102 0c08 	add.w	ip, r2, #8
 8105f4c:	e84c 3100 	strex	r1, r3, [ip]
 8105f50:	2900      	cmp	r1, #0
 8105f52:	d1f3      	bne.n	8105f3c <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8105f54:	2320      	movs	r3, #32
 8105f56:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8105f5a:	4770      	bx	lr

08105f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8105f5c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105f5e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105f60:	e852 3f00 	ldrex	r3, [r2]
 8105f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105f68:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8105f6c:	6802      	ldr	r2, [r0, #0]
 8105f6e:	2900      	cmp	r1, #0
 8105f70:	d1f5      	bne.n	8105f5e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105f72:	4c0f      	ldr	r4, [pc, #60]	; (8105fb0 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105f74:	f102 0308 	add.w	r3, r2, #8
 8105f78:	e853 3f00 	ldrex	r3, [r3]
 8105f7c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105f7e:	f102 0c08 	add.w	ip, r2, #8
 8105f82:	e84c 3100 	strex	r1, r3, [ip]
 8105f86:	2900      	cmp	r1, #0
 8105f88:	d1f4      	bne.n	8105f74 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105f8a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8105f8c:	2b01      	cmp	r3, #1
 8105f8e:	d107      	bne.n	8105fa0 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105f90:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105f94:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105f98:	e842 3100 	strex	r1, r3, [r2]
 8105f9c:	2900      	cmp	r1, #0
 8105f9e:	d1f7      	bne.n	8105f90 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8105fa0:	2320      	movs	r3, #32
 8105fa2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105fa6:	2300      	movs	r3, #0
 8105fa8:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8105faa:	6743      	str	r3, [r0, #116]	; 0x74
}
 8105fac:	bd10      	pop	{r4, pc}
 8105fae:	bf00      	nop
 8105fb0:	effffffe 	.word	0xeffffffe

08105fb4 <HAL_UART_Transmit_DMA>:
{
 8105fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105fb6:	4604      	mov	r4, r0
 8105fb8:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8105fba:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8105fbe:	2d20      	cmp	r5, #32
 8105fc0:	d132      	bne.n	8106028 <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 8105fc2:	b1f1      	cbz	r1, 8106002 <HAL_UART_Transmit_DMA+0x4e>
 8105fc4:	b1ea      	cbz	r2, 8106002 <HAL_UART_Transmit_DMA+0x4e>
    if (huart->hdmatx != NULL)
 8105fc6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    huart->TxXferCount = Size;
 8105fc8:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->TxXferSize  = Size;
 8105fcc:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105fd0:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105fd2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105fd4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    huart->pTxBuffPtr  = pData;
 8105fd8:	6521      	str	r1, [r4, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105fda:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8105fde:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 8105fe0:	b188      	cbz	r0, 8106006 <HAL_UART_Transmit_DMA+0x52>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8105fe2:	4f12      	ldr	r7, [pc, #72]	; (810602c <HAL_UART_Transmit_DMA+0x78>)
 8105fe4:	63c7      	str	r7, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8105fe6:	4f12      	ldr	r7, [pc, #72]	; (8106030 <HAL_UART_Transmit_DMA+0x7c>)
 8105fe8:	6407      	str	r7, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8105fea:	4f12      	ldr	r7, [pc, #72]	; (8106034 <HAL_UART_Transmit_DMA+0x80>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8105fec:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8105fee:	e9c0 7613 	strd	r7, r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8105ff2:	f7fd fa91 	bl	8103518 <HAL_DMA_Start_IT>
 8105ff6:	b130      	cbz	r0, 8106006 <HAL_UART_Transmit_DMA+0x52>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8105ff8:	2310      	movs	r3, #16
 8105ffa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8105ffe:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
      return HAL_ERROR;
 8106002:	2001      	movs	r0, #1
 8106004:	e00f      	b.n	8106026 <HAL_UART_Transmit_DMA+0x72>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8106006:	6823      	ldr	r3, [r4, #0]
 8106008:	2240      	movs	r2, #64	; 0x40
 810600a:	621a      	str	r2, [r3, #32]
 810600c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810600e:	f102 0308 	add.w	r3, r2, #8
 8106012:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8106016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810601a:	f102 0108 	add.w	r1, r2, #8
 810601e:	e841 3000 	strex	r0, r3, [r1]
 8106022:	2800      	cmp	r0, #0
 8106024:	d1f3      	bne.n	810600e <HAL_UART_Transmit_DMA+0x5a>
}
 8106026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8106028:	2002      	movs	r0, #2
 810602a:	e7fc      	b.n	8106026 <HAL_UART_Transmit_DMA+0x72>
 810602c:	0810603b 	.word	0x0810603b
 8106030:	08106083 	.word	0x08106083
 8106034:	0810608f 	.word	0x0810608f

08106038 <HAL_UART_TxCpltCallback>:
 8106038:	4770      	bx	lr

0810603a <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810603a:	69c2      	ldr	r2, [r0, #28]
 810603c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8106040:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8106042:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8106044:	d018      	beq.n	8106078 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8106046:	2200      	movs	r2, #0
 8106048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810604c:	6819      	ldr	r1, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810604e:	f101 0208 	add.w	r2, r1, #8
 8106052:	e852 2f00 	ldrex	r2, [r2]
 8106056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810605a:	3108      	adds	r1, #8
 810605c:	e841 2000 	strex	r0, r2, [r1]
   return(result);
 8106060:	681a      	ldr	r2, [r3, #0]
 8106062:	2800      	cmp	r0, #0
 8106064:	d1f2      	bne.n	810604c <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106066:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810606a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810606e:	e842 3100 	strex	r1, r3, [r2]
 8106072:	2900      	cmp	r1, #0
 8106074:	d1f7      	bne.n	8106066 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8106076:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8106078:	4618      	mov	r0, r3
 810607a:	f7ff ffdd 	bl	8106038 <HAL_UART_TxCpltCallback>
}
 810607e:	e7fa      	b.n	8106076 <UART_DMATransmitCplt+0x3c>

08106080 <HAL_UART_TxHalfCpltCallback>:
 8106080:	4770      	bx	lr

08106082 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8106082:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8106084:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8106086:	f7ff fffb 	bl	8106080 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810608a:	bd08      	pop	{r3, pc}

0810608c <HAL_UART_ErrorCallback>:
 810608c:	4770      	bx	lr

0810608e <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810608e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8106090:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8106092:	6804      	ldr	r4, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8106094:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8106098:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810609c:	68a2      	ldr	r2, [r4, #8]
 810609e:	0612      	lsls	r2, r2, #24
 81060a0:	d506      	bpl.n	81060b0 <UART_DMAError+0x22>
 81060a2:	2b21      	cmp	r3, #33	; 0x21
 81060a4:	d104      	bne.n	81060b0 <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 81060a6:	2300      	movs	r3, #0
 81060a8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    UART_EndTxTransfer(huart);
 81060ac:	f7ff ff3c 	bl	8105f28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 81060b0:	68a3      	ldr	r3, [r4, #8]
 81060b2:	065b      	lsls	r3, r3, #25
 81060b4:	d506      	bpl.n	81060c4 <UART_DMAError+0x36>
 81060b6:	2d22      	cmp	r5, #34	; 0x22
 81060b8:	d104      	bne.n	81060c4 <UART_DMAError+0x36>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 81060ba:	2300      	movs	r3, #0
 81060bc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 81060c0:	f7ff ff4c 	bl	8105f5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 81060c4:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 81060c8:	f043 0310 	orr.w	r3, r3, #16
 81060cc:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 81060d0:	f7ff ffdc 	bl	810608c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81060d4:	bd38      	pop	{r3, r4, r5, pc}

081060d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81060d6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81060d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 81060da:	2300      	movs	r3, #0
 81060dc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 81060e0:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 81060e4:	f7ff ffd2 	bl	810608c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81060e8:	bd08      	pop	{r3, pc}

081060ea <HAL_UARTEx_RxEventCallback>:
}
 81060ea:	4770      	bx	lr

081060ec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81060ec:	6803      	ldr	r3, [r0, #0]
 81060ee:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81060f0:	681a      	ldr	r2, [r3, #0]
{
 81060f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 81060f6:	f640 060f 	movw	r6, #2063	; 0x80f
 81060fa:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81060fc:	689d      	ldr	r5, [r3, #8]
{
 81060fe:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8106100:	d110      	bne.n	8106124 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8106102:	068e      	lsls	r6, r1, #26
 8106104:	f140 8097 	bpl.w	8106236 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106108:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810610c:	f005 5780 	and.w	r7, r5, #268435456	; 0x10000000
 8106110:	433e      	orrs	r6, r7
 8106112:	f000 8090 	beq.w	8106236 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 8106116:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8106118:	2b00      	cmp	r3, #0
 810611a:	f000 8085 	beq.w	8106228 <HAL_UART_IRQHandler+0x13c>
}
 810611e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8106122:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8106124:	4eaa      	ldr	r6, [pc, #680]	; (81063d0 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8106126:	48ab      	ldr	r0, [pc, #684]	; (81063d4 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8106128:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810612a:	4010      	ands	r0, r2
 810612c:	4330      	orrs	r0, r6
 810612e:	f000 8082 	beq.w	8106236 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8106132:	07cf      	lsls	r7, r1, #31
 8106134:	d509      	bpl.n	810614a <HAL_UART_IRQHandler+0x5e>
 8106136:	05d0      	lsls	r0, r2, #23
 8106138:	d507      	bpl.n	810614a <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810613a:	2001      	movs	r0, #1
 810613c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810613e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8106142:	f040 0001 	orr.w	r0, r0, #1
 8106146:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810614a:	078f      	lsls	r7, r1, #30
 810614c:	d509      	bpl.n	8106162 <HAL_UART_IRQHandler+0x76>
 810614e:	07e8      	lsls	r0, r5, #31
 8106150:	d507      	bpl.n	8106162 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8106152:	2002      	movs	r0, #2
 8106154:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8106156:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 810615a:	f040 0004 	orr.w	r0, r0, #4
 810615e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106162:	074f      	lsls	r7, r1, #29
 8106164:	d509      	bpl.n	810617a <HAL_UART_IRQHandler+0x8e>
 8106166:	07e8      	lsls	r0, r5, #31
 8106168:	d507      	bpl.n	810617a <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810616a:	2004      	movs	r0, #4
 810616c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810616e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8106172:	f040 0002 	orr.w	r0, r0, #2
 8106176:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 810617a:	070f      	lsls	r7, r1, #28
 810617c:	d50b      	bpl.n	8106196 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810617e:	f002 0020 	and.w	r0, r2, #32
 8106182:	4330      	orrs	r0, r6
 8106184:	d007      	beq.n	8106196 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106186:	2008      	movs	r0, #8
 8106188:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810618a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 810618e:	f040 0008 	orr.w	r0, r0, #8
 8106192:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8106196:	050e      	lsls	r6, r1, #20
 8106198:	d50a      	bpl.n	81061b0 <HAL_UART_IRQHandler+0xc4>
 810619a:	0150      	lsls	r0, r2, #5
 810619c:	d508      	bpl.n	81061b0 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810619e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 81061a2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 81061a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 81061a8:	f043 0320 	orr.w	r3, r3, #32
 81061ac:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 81061b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	d037      	beq.n	8106228 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81061b8:	068b      	lsls	r3, r1, #26
 81061ba:	d509      	bpl.n	81061d0 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81061bc:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81061c0:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 81061c4:	432a      	orrs	r2, r5
 81061c6:	d003      	beq.n	81061d0 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 81061c8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 81061ca:	b10b      	cbz	r3, 81061d0 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 81061cc:	4620      	mov	r0, r4
 81061ce:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81061d0:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 81061d2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81061d6:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 81061d8:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81061dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81061e0:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 81061e4:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81061e6:	d021      	beq.n	810622c <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 81061e8:	f7ff feb8 	bl	8105f5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81061ec:	68b3      	ldr	r3, [r6, #8]
 81061ee:	065f      	lsls	r7, r3, #25
 81061f0:	d517      	bpl.n	8106222 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81061f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061f4:	f102 0308 	add.w	r3, r2, #8
 81061f8:	e853 3f00 	ldrex	r3, [r3]
 81061fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106200:	3208      	adds	r2, #8
 8106202:	e842 3100 	strex	r1, r3, [r2]
 8106206:	2900      	cmp	r1, #0
 8106208:	d1f3      	bne.n	81061f2 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 810620a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 810620e:	b140      	cbz	r0, 8106222 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8106210:	4b71      	ldr	r3, [pc, #452]	; (81063d8 <HAL_UART_IRQHandler+0x2ec>)
 8106212:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8106214:	f7fd fc40 	bl	8103a98 <HAL_DMA_Abort_IT>
 8106218:	b130      	cbz	r0, 8106228 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810621a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 810621e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8106220:	e77d      	b.n	810611e <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 8106222:	4620      	mov	r0, r4
 8106224:	f7ff ff32 	bl	810608c <HAL_UART_ErrorCallback>
}
 8106228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 810622c:	f7ff ff2e 	bl	810608c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106230:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8106234:	e7f8      	b.n	8106228 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106236:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8106238:	2801      	cmp	r0, #1
 810623a:	f040 80ae 	bne.w	810639a <HAL_UART_IRQHandler+0x2ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810623e:	06ce      	lsls	r6, r1, #27
 8106240:	f140 80ab 	bpl.w	810639a <HAL_UART_IRQHandler+0x2ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8106244:	06d0      	lsls	r0, r2, #27
 8106246:	f140 80a8 	bpl.w	810639a <HAL_UART_IRQHandler+0x2ae>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810624a:	2210      	movs	r2, #16
 810624c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810624e:	689a      	ldr	r2, [r3, #8]
 8106250:	0652      	lsls	r2, r2, #25
 8106252:	d56e      	bpl.n	8106332 <HAL_UART_IRQHandler+0x246>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8106254:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8106258:	4860      	ldr	r0, [pc, #384]	; (81063dc <HAL_UART_IRQHandler+0x2f0>)
 810625a:	680a      	ldr	r2, [r1, #0]
 810625c:	4282      	cmp	r2, r0
 810625e:	d01e      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 8106260:	3018      	adds	r0, #24
 8106262:	4282      	cmp	r2, r0
 8106264:	d01b      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 8106266:	3018      	adds	r0, #24
 8106268:	4282      	cmp	r2, r0
 810626a:	d018      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 810626c:	3018      	adds	r0, #24
 810626e:	4282      	cmp	r2, r0
 8106270:	d015      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 8106272:	3018      	adds	r0, #24
 8106274:	4282      	cmp	r2, r0
 8106276:	d012      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 8106278:	3018      	adds	r0, #24
 810627a:	4282      	cmp	r2, r0
 810627c:	d00f      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 810627e:	3018      	adds	r0, #24
 8106280:	4282      	cmp	r2, r0
 8106282:	d00c      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 8106284:	3018      	adds	r0, #24
 8106286:	4282      	cmp	r2, r0
 8106288:	d009      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 810628a:	f500 7056 	add.w	r0, r0, #856	; 0x358
 810628e:	4282      	cmp	r2, r0
 8106290:	d005      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 8106292:	3018      	adds	r0, #24
 8106294:	4282      	cmp	r2, r0
 8106296:	d002      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 8106298:	3018      	adds	r0, #24
 810629a:	4282      	cmp	r2, r0
 810629c:	d0ff      	beq.n	810629e <HAL_UART_IRQHandler+0x1b2>
 810629e:	6852      	ldr	r2, [r2, #4]
 81062a0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 81062a2:	2a00      	cmp	r2, #0
 81062a4:	d0c0      	beq.n	8106228 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 81062a6:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 81062aa:	4290      	cmp	r0, r2
 81062ac:	d9bc      	bls.n	8106228 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 81062ae:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 81062b2:	69ca      	ldr	r2, [r1, #28]
 81062b4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 81062b8:	d02f      	beq.n	810631a <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81062ba:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81062be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81062c2:	e843 2100 	strex	r1, r2, [r3]
 81062c6:	2900      	cmp	r1, #0
 81062c8:	d1f7      	bne.n	81062ba <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81062ca:	f103 0208 	add.w	r2, r3, #8
 81062ce:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81062d2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81062d6:	f103 0008 	add.w	r0, r3, #8
 81062da:	e840 2100 	strex	r1, r2, [r0]
 81062de:	2900      	cmp	r1, #0
 81062e0:	d1f3      	bne.n	81062ca <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81062e2:	f103 0208 	add.w	r2, r3, #8
 81062e6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81062ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81062ee:	f103 0008 	add.w	r0, r3, #8
 81062f2:	e840 2100 	strex	r1, r2, [r0]
 81062f6:	2900      	cmp	r1, #0
 81062f8:	d1f3      	bne.n	81062e2 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 81062fa:	2220      	movs	r2, #32
 81062fc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106300:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106302:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106306:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810630a:	e843 2100 	strex	r1, r2, [r3]
 810630e:	2900      	cmp	r1, #0
 8106310:	d1f7      	bne.n	8106302 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8106312:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8106316:	f7fd fa19 	bl	810374c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810631a:	2302      	movs	r3, #2
 810631c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810631e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8106322:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8106326:	1ac9      	subs	r1, r1, r3
 8106328:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810632a:	4620      	mov	r0, r4
 810632c:	f7ff fedd 	bl	81060ea <HAL_UARTEx_RxEventCallback>
 8106330:	e77a      	b.n	8106228 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106332:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8106336:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810633a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 810633e:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106340:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8106342:	2800      	cmp	r0, #0
 8106344:	f43f af70 	beq.w	8106228 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8106348:	1a89      	subs	r1, r1, r2
 810634a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 810634c:	2900      	cmp	r1, #0
 810634e:	f43f af6b 	beq.w	8106228 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106352:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106356:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810635a:	e843 2000 	strex	r0, r2, [r3]
 810635e:	2800      	cmp	r0, #0
 8106360:	d1f7      	bne.n	8106352 <HAL_UART_IRQHandler+0x266>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106362:	4d1f      	ldr	r5, [pc, #124]	; (81063e0 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106364:	f103 0208 	add.w	r2, r3, #8
 8106368:	e852 2f00 	ldrex	r2, [r2]
 810636c:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810636e:	f103 0608 	add.w	r6, r3, #8
 8106372:	e846 2000 	strex	r0, r2, [r6]
 8106376:	2800      	cmp	r0, #0
 8106378:	d1f4      	bne.n	8106364 <HAL_UART_IRQHandler+0x278>
        huart->RxState = HAL_UART_STATE_READY;
 810637a:	2220      	movs	r2, #32
 810637c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8106380:	6760      	str	r0, [r4, #116]	; 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106382:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106384:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106388:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810638c:	e843 2000 	strex	r0, r2, [r3]
 8106390:	2800      	cmp	r0, #0
 8106392:	d1f7      	bne.n	8106384 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8106394:	2302      	movs	r3, #2
 8106396:	6723      	str	r3, [r4, #112]	; 0x70
 8106398:	e7c7      	b.n	810632a <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810639a:	02cf      	lsls	r7, r1, #11
 810639c:	d509      	bpl.n	81063b2 <HAL_UART_IRQHandler+0x2c6>
 810639e:	026e      	lsls	r6, r5, #9
 81063a0:	d507      	bpl.n	81063b2 <HAL_UART_IRQHandler+0x2c6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81063a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 81063a6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81063a8:	621a      	str	r2, [r3, #32]
}
 81063aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 81063ae:	f000 bb4d 	b.w	8106a4c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81063b2:	0608      	lsls	r0, r1, #24
 81063b4:	d516      	bpl.n	81063e4 <HAL_UART_IRQHandler+0x2f8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81063b6:	f002 0080 	and.w	r0, r2, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81063ba:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
 81063be:	4328      	orrs	r0, r5
 81063c0:	d010      	beq.n	81063e4 <HAL_UART_IRQHandler+0x2f8>
    if (huart->TxISR != NULL)
 81063c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 81063c4:	2b00      	cmp	r3, #0
 81063c6:	f43f af2f 	beq.w	8106228 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 81063ca:	4620      	mov	r0, r4
 81063cc:	e6a7      	b.n	810611e <HAL_UART_IRQHandler+0x32>
 81063ce:	bf00      	nop
 81063d0:	10000001 	.word	0x10000001
 81063d4:	04000120 	.word	0x04000120
 81063d8:	081060d7 	.word	0x081060d7
 81063dc:	40020010 	.word	0x40020010
 81063e0:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 81063e4:	064f      	lsls	r7, r1, #25
 81063e6:	d511      	bpl.n	810640c <HAL_UART_IRQHandler+0x320>
 81063e8:	0656      	lsls	r6, r2, #25
 81063ea:	d50f      	bpl.n	810640c <HAL_UART_IRQHandler+0x320>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81063ec:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81063f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81063f4:	e843 2100 	strex	r1, r2, [r3]
 81063f8:	2900      	cmp	r1, #0
 81063fa:	d1f7      	bne.n	81063ec <HAL_UART_IRQHandler+0x300>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81063fc:	2320      	movs	r3, #32
 81063fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8106402:	67a1      	str	r1, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8106404:	4620      	mov	r0, r4
 8106406:	f7ff fe17 	bl	8106038 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810640a:	e70d      	b.n	8106228 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810640c:	020d      	lsls	r5, r1, #8
 810640e:	d506      	bpl.n	810641e <HAL_UART_IRQHandler+0x332>
 8106410:	0050      	lsls	r0, r2, #1
 8106412:	d504      	bpl.n	810641e <HAL_UART_IRQHandler+0x332>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8106414:	4620      	mov	r0, r4
}
 8106416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810641a:	f000 bb19 	b.w	8106a50 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810641e:	01cb      	lsls	r3, r1, #7
 8106420:	f57f af02 	bpl.w	8106228 <HAL_UART_IRQHandler+0x13c>
 8106424:	2a00      	cmp	r2, #0
 8106426:	f6bf aeff 	bge.w	8106228 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 810642a:	4620      	mov	r0, r4
}
 810642c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8106430:	f000 bb0d 	b.w	8106a4e <HAL_UARTEx_RxFifoFullCallback>

08106434 <UART_SetConfig>:
{
 8106434:	b530      	push	{r4, r5, lr}
 8106436:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8106438:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810643a:	6921      	ldr	r1, [r4, #16]
 810643c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810643e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106440:	69c0      	ldr	r0, [r0, #28]
 8106442:	430a      	orrs	r2, r1
 8106444:	6961      	ldr	r1, [r4, #20]
 8106446:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106448:	4997      	ldr	r1, [pc, #604]	; (81066a8 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810644a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810644c:	4029      	ands	r1, r5
 810644e:	430a      	orrs	r2, r1
 8106450:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106452:	685a      	ldr	r2, [r3, #4]
 8106454:	68e1      	ldr	r1, [r4, #12]
 8106456:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 810645a:	430a      	orrs	r2, r1
 810645c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810645e:	4a93      	ldr	r2, [pc, #588]	; (81066ac <UART_SetConfig+0x278>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106460:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106462:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8106464:	bf1c      	itt	ne
 8106466:	6a22      	ldrne	r2, [r4, #32]
 8106468:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810646a:	689a      	ldr	r2, [r3, #8]
 810646c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8106470:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8106474:	430a      	orrs	r2, r1
 8106476:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810647a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 810647c:	f022 020f 	bic.w	r2, r2, #15
 8106480:	430a      	orrs	r2, r1
 8106482:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106484:	4a8a      	ldr	r2, [pc, #552]	; (81066b0 <UART_SetConfig+0x27c>)
 8106486:	4293      	cmp	r3, r2
{
 8106488:	b087      	sub	sp, #28
  UART_GETCLOCKSOURCE(huart, clocksource);
 810648a:	d11b      	bne.n	81064c4 <UART_SetConfig+0x90>
 810648c:	4b89      	ldr	r3, [pc, #548]	; (81066b4 <UART_SetConfig+0x280>)
 810648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106494:	2b28      	cmp	r3, #40	; 0x28
 8106496:	d86c      	bhi.n	8106572 <UART_SetConfig+0x13e>
 8106498:	4a87      	ldr	r2, [pc, #540]	; (81066b8 <UART_SetConfig+0x284>)
 810649a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810649c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 81064a0:	f040 8132 	bne.w	8106708 <UART_SetConfig+0x2d4>
    switch (clocksource)
 81064a4:	2b08      	cmp	r3, #8
 81064a6:	f200 80c0 	bhi.w	810662a <UART_SetConfig+0x1f6>
 81064aa:	2b08      	cmp	r3, #8
 81064ac:	d861      	bhi.n	8106572 <UART_SetConfig+0x13e>
 81064ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 81064b2:	00e7      	.short	0x00e7
 81064b4:	006000ec 	.word	0x006000ec
 81064b8:	00ef0060 	.word	0x00ef0060
 81064bc:	00600060 	.word	0x00600060
 81064c0:	00f40060 	.word	0x00f40060
  UART_GETCLOCKSOURCE(huart, clocksource);
 81064c4:	4a7d      	ldr	r2, [pc, #500]	; (81066bc <UART_SetConfig+0x288>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d107      	bne.n	81064da <UART_SetConfig+0xa6>
 81064ca:	4b7a      	ldr	r3, [pc, #488]	; (81066b4 <UART_SetConfig+0x280>)
 81064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064ce:	f003 0307 	and.w	r3, r3, #7
 81064d2:	2b05      	cmp	r3, #5
 81064d4:	d84d      	bhi.n	8106572 <UART_SetConfig+0x13e>
 81064d6:	4a7a      	ldr	r2, [pc, #488]	; (81066c0 <UART_SetConfig+0x28c>)
 81064d8:	e7df      	b.n	810649a <UART_SetConfig+0x66>
 81064da:	4a7a      	ldr	r2, [pc, #488]	; (81066c4 <UART_SetConfig+0x290>)
 81064dc:	4293      	cmp	r3, r2
 81064de:	d107      	bne.n	81064f0 <UART_SetConfig+0xbc>
 81064e0:	4b74      	ldr	r3, [pc, #464]	; (81066b4 <UART_SetConfig+0x280>)
 81064e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064e4:	f003 0307 	and.w	r3, r3, #7
 81064e8:	2b05      	cmp	r3, #5
 81064ea:	d842      	bhi.n	8106572 <UART_SetConfig+0x13e>
 81064ec:	4a76      	ldr	r2, [pc, #472]	; (81066c8 <UART_SetConfig+0x294>)
 81064ee:	e7d4      	b.n	810649a <UART_SetConfig+0x66>
 81064f0:	4a76      	ldr	r2, [pc, #472]	; (81066cc <UART_SetConfig+0x298>)
 81064f2:	4293      	cmp	r3, r2
 81064f4:	d107      	bne.n	8106506 <UART_SetConfig+0xd2>
 81064f6:	4b6f      	ldr	r3, [pc, #444]	; (81066b4 <UART_SetConfig+0x280>)
 81064f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064fa:	f003 0307 	and.w	r3, r3, #7
 81064fe:	2b05      	cmp	r3, #5
 8106500:	d837      	bhi.n	8106572 <UART_SetConfig+0x13e>
 8106502:	4a73      	ldr	r2, [pc, #460]	; (81066d0 <UART_SetConfig+0x29c>)
 8106504:	e7c9      	b.n	810649a <UART_SetConfig+0x66>
 8106506:	4a73      	ldr	r2, [pc, #460]	; (81066d4 <UART_SetConfig+0x2a0>)
 8106508:	4293      	cmp	r3, r2
 810650a:	d107      	bne.n	810651c <UART_SetConfig+0xe8>
 810650c:	4b69      	ldr	r3, [pc, #420]	; (81066b4 <UART_SetConfig+0x280>)
 810650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106510:	f003 0307 	and.w	r3, r3, #7
 8106514:	2b05      	cmp	r3, #5
 8106516:	d82c      	bhi.n	8106572 <UART_SetConfig+0x13e>
 8106518:	4a6f      	ldr	r2, [pc, #444]	; (81066d8 <UART_SetConfig+0x2a4>)
 810651a:	e7be      	b.n	810649a <UART_SetConfig+0x66>
 810651c:	4a6f      	ldr	r2, [pc, #444]	; (81066dc <UART_SetConfig+0x2a8>)
 810651e:	4293      	cmp	r3, r2
 8106520:	d107      	bne.n	8106532 <UART_SetConfig+0xfe>
 8106522:	4b64      	ldr	r3, [pc, #400]	; (81066b4 <UART_SetConfig+0x280>)
 8106524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810652a:	2b28      	cmp	r3, #40	; 0x28
 810652c:	d821      	bhi.n	8106572 <UART_SetConfig+0x13e>
 810652e:	4a6c      	ldr	r2, [pc, #432]	; (81066e0 <UART_SetConfig+0x2ac>)
 8106530:	e7b3      	b.n	810649a <UART_SetConfig+0x66>
 8106532:	4a6c      	ldr	r2, [pc, #432]	; (81066e4 <UART_SetConfig+0x2b0>)
 8106534:	4293      	cmp	r3, r2
 8106536:	d107      	bne.n	8106548 <UART_SetConfig+0x114>
 8106538:	4b5e      	ldr	r3, [pc, #376]	; (81066b4 <UART_SetConfig+0x280>)
 810653a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810653c:	f003 0307 	and.w	r3, r3, #7
 8106540:	2b05      	cmp	r3, #5
 8106542:	d816      	bhi.n	8106572 <UART_SetConfig+0x13e>
 8106544:	4a68      	ldr	r2, [pc, #416]	; (81066e8 <UART_SetConfig+0x2b4>)
 8106546:	e7a8      	b.n	810649a <UART_SetConfig+0x66>
 8106548:	4a68      	ldr	r2, [pc, #416]	; (81066ec <UART_SetConfig+0x2b8>)
 810654a:	4293      	cmp	r3, r2
 810654c:	d107      	bne.n	810655e <UART_SetConfig+0x12a>
 810654e:	4b59      	ldr	r3, [pc, #356]	; (81066b4 <UART_SetConfig+0x280>)
 8106550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106552:	f003 0307 	and.w	r3, r3, #7
 8106556:	2b05      	cmp	r3, #5
 8106558:	d80b      	bhi.n	8106572 <UART_SetConfig+0x13e>
 810655a:	4a65      	ldr	r2, [pc, #404]	; (81066f0 <UART_SetConfig+0x2bc>)
 810655c:	e79d      	b.n	810649a <UART_SetConfig+0x66>
 810655e:	4a53      	ldr	r2, [pc, #332]	; (81066ac <UART_SetConfig+0x278>)
 8106560:	4293      	cmp	r3, r2
 8106562:	d106      	bne.n	8106572 <UART_SetConfig+0x13e>
 8106564:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8106568:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810656a:	f003 0307 	and.w	r3, r3, #7
 810656e:	2b05      	cmp	r3, #5
 8106570:	d901      	bls.n	8106576 <UART_SetConfig+0x142>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106572:	2001      	movs	r0, #1
 8106574:	e00e      	b.n	8106594 <UART_SetConfig+0x160>
 8106576:	495f      	ldr	r1, [pc, #380]	; (81066f4 <UART_SetConfig+0x2c0>)
 8106578:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 810657a:	2b10      	cmp	r3, #16
 810657c:	d023      	beq.n	81065c6 <UART_SetConfig+0x192>
 810657e:	d811      	bhi.n	81065a4 <UART_SetConfig+0x170>
 8106580:	2b04      	cmp	r3, #4
 8106582:	d016      	beq.n	81065b2 <UART_SetConfig+0x17e>
 8106584:	2b08      	cmp	r3, #8
 8106586:	d019      	beq.n	81065bc <UART_SetConfig+0x188>
 8106588:	2b02      	cmp	r3, #2
 810658a:	d1f2      	bne.n	8106572 <UART_SetConfig+0x13e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810658c:	f7fe fd3e 	bl	810500c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8106590:	bb10      	cbnz	r0, 81065d8 <UART_SetConfig+0x1a4>
 8106592:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8106594:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8106598:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 810659a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 810659c:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
}
 81065a0:	b007      	add	sp, #28
 81065a2:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 81065a4:	2b20      	cmp	r3, #32
 81065a6:	d03e      	beq.n	8106626 <UART_SetConfig+0x1f2>
 81065a8:	2b40      	cmp	r3, #64	; 0x40
 81065aa:	d1e2      	bne.n	8106572 <UART_SetConfig+0x13e>
 81065ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 81065b0:	e012      	b.n	81065d8 <UART_SetConfig+0x1a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81065b2:	4668      	mov	r0, sp
 81065b4:	f7fe fd3c 	bl	8105030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81065b8:	9801      	ldr	r0, [sp, #4]
        break;
 81065ba:	e7e9      	b.n	8106590 <UART_SetConfig+0x15c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81065bc:	a803      	add	r0, sp, #12
 81065be:	f7fe fde1 	bl	8105184 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81065c2:	9804      	ldr	r0, [sp, #16]
        break;
 81065c4:	e7e4      	b.n	8106590 <UART_SetConfig+0x15c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81065c6:	6813      	ldr	r3, [r2, #0]
 81065c8:	484b      	ldr	r0, [pc, #300]	; (81066f8 <UART_SetConfig+0x2c4>)
 81065ca:	f013 0f20 	tst.w	r3, #32
 81065ce:	d003      	beq.n	81065d8 <UART_SetConfig+0x1a4>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81065d0:	6813      	ldr	r3, [r2, #0]
 81065d2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81065d6:	40d8      	lsrs	r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81065d8:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81065da:	4b48      	ldr	r3, [pc, #288]	; (81066fc <UART_SetConfig+0x2c8>)
 81065dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81065de:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81065e2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 81065e6:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81065ea:	4299      	cmp	r1, r3
 81065ec:	d8c1      	bhi.n	8106572 <UART_SetConfig+0x13e>
 81065ee:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 81065f2:	d8be      	bhi.n	8106572 <UART_SetConfig+0x13e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81065f4:	2300      	movs	r3, #0
 81065f6:	4619      	mov	r1, r3
 81065f8:	f7fa fbce 	bl	8100d98 <__aeabi_uldivmod>
 81065fc:	0209      	lsls	r1, r1, #8
 81065fe:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8106602:	086b      	lsrs	r3, r5, #1
 8106604:	0200      	lsls	r0, r0, #8
 8106606:	18c0      	adds	r0, r0, r3
 8106608:	462a      	mov	r2, r5
 810660a:	f04f 0300 	mov.w	r3, #0
 810660e:	f141 0100 	adc.w	r1, r1, #0
 8106612:	f7fa fbc1 	bl	8100d98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106616:	4b3a      	ldr	r3, [pc, #232]	; (8106700 <UART_SetConfig+0x2cc>)
 8106618:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810661c:	429a      	cmp	r2, r3
 810661e:	d8a8      	bhi.n	8106572 <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106620:	6823      	ldr	r3, [r4, #0]
 8106622:	60d8      	str	r0, [r3, #12]
 8106624:	e7b5      	b.n	8106592 <UART_SetConfig+0x15e>
        pclk = (uint32_t) CSI_VALUE;
 8106626:	4837      	ldr	r0, [pc, #220]	; (8106704 <UART_SetConfig+0x2d0>)
 8106628:	e7d6      	b.n	81065d8 <UART_SetConfig+0x1a4>
    switch (clocksource)
 810662a:	2b20      	cmp	r3, #32
 810662c:	d03a      	beq.n	81066a4 <UART_SetConfig+0x270>
 810662e:	2b40      	cmp	r3, #64	; 0x40
 8106630:	d00b      	beq.n	810664a <UART_SetConfig+0x216>
 8106632:	2b10      	cmp	r3, #16
 8106634:	d19d      	bne.n	8106572 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106636:	4b1f      	ldr	r3, [pc, #124]	; (81066b4 <UART_SetConfig+0x280>)
 8106638:	482f      	ldr	r0, [pc, #188]	; (81066f8 <UART_SetConfig+0x2c4>)
 810663a:	681a      	ldr	r2, [r3, #0]
 810663c:	f012 0f20 	tst.w	r2, #32
 8106640:	d003      	beq.n	810664a <UART_SetConfig+0x216>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106648:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810664a:	6861      	ldr	r1, [r4, #4]
 810664c:	4b2b      	ldr	r3, [pc, #172]	; (81066fc <UART_SetConfig+0x2c8>)
 810664e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8106650:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8106654:	fbb0 f2f2 	udiv	r2, r0, r2
 8106658:	084b      	lsrs	r3, r1, #1
 810665a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810665e:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106662:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106666:	f1a3 0110 	sub.w	r1, r3, #16
 810666a:	4291      	cmp	r1, r2
 810666c:	d881      	bhi.n	8106572 <UART_SetConfig+0x13e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810666e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8106672:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106674:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106676:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 810667a:	4313      	orrs	r3, r2
 810667c:	60cb      	str	r3, [r1, #12]
 810667e:	e788      	b.n	8106592 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8106680:	f7fd fe9c 	bl	81043bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8106684:	2800      	cmp	r0, #0
 8106686:	d084      	beq.n	8106592 <UART_SetConfig+0x15e>
 8106688:	e7df      	b.n	810664a <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 810668a:	f7fd fea9 	bl	81043e0 <HAL_RCC_GetPCLK2Freq>
        break;
 810668e:	e7f9      	b.n	8106684 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106690:	4668      	mov	r0, sp
 8106692:	f7fe fccd 	bl	8105030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106696:	9801      	ldr	r0, [sp, #4]
        break;
 8106698:	e7f4      	b.n	8106684 <UART_SetConfig+0x250>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810669a:	a803      	add	r0, sp, #12
 810669c:	f7fe fd72 	bl	8105184 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81066a0:	9804      	ldr	r0, [sp, #16]
        break;
 81066a2:	e7ef      	b.n	8106684 <UART_SetConfig+0x250>
        pclk = (uint32_t) CSI_VALUE;
 81066a4:	4817      	ldr	r0, [pc, #92]	; (8106704 <UART_SetConfig+0x2d0>)
 81066a6:	e7d0      	b.n	810664a <UART_SetConfig+0x216>
 81066a8:	cfff69f3 	.word	0xcfff69f3
 81066ac:	58000c00 	.word	0x58000c00
 81066b0:	40011000 	.word	0x40011000
 81066b4:	58024400 	.word	0x58024400
 81066b8:	0810f5e8 	.word	0x0810f5e8
 81066bc:	40004400 	.word	0x40004400
 81066c0:	0810f611 	.word	0x0810f611
 81066c4:	40004800 	.word	0x40004800
 81066c8:	0810f611 	.word	0x0810f611
 81066cc:	40004c00 	.word	0x40004c00
 81066d0:	0810f611 	.word	0x0810f611
 81066d4:	40005000 	.word	0x40005000
 81066d8:	0810f611 	.word	0x0810f611
 81066dc:	40011400 	.word	0x40011400
 81066e0:	0810f5e8 	.word	0x0810f5e8
 81066e4:	40007800 	.word	0x40007800
 81066e8:	0810f611 	.word	0x0810f611
 81066ec:	40007c00 	.word	0x40007c00
 81066f0:	0810f611 	.word	0x0810f611
 81066f4:	0810f617 	.word	0x0810f617
 81066f8:	03d09000 	.word	0x03d09000
 81066fc:	0810f61e 	.word	0x0810f61e
 8106700:	000ffcff 	.word	0x000ffcff
 8106704:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8106708:	2b08      	cmp	r3, #8
 810670a:	d817      	bhi.n	810673c <UART_SetConfig+0x308>
 810670c:	2b08      	cmp	r3, #8
 810670e:	f63f af30 	bhi.w	8106572 <UART_SetConfig+0x13e>
 8106712:	a201      	add	r2, pc, #4	; (adr r2, 8106718 <UART_SetConfig+0x2e4>)
 8106714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106718:	0810677f 	.word	0x0810677f
 810671c:	0810678b 	.word	0x0810678b
 8106720:	08106573 	.word	0x08106573
 8106724:	08106573 	.word	0x08106573
 8106728:	08106791 	.word	0x08106791
 810672c:	08106573 	.word	0x08106573
 8106730:	08106573 	.word	0x08106573
 8106734:	08106573 	.word	0x08106573
 8106738:	0810679b 	.word	0x0810679b
 810673c:	2b20      	cmp	r3, #32
 810673e:	d031      	beq.n	81067a4 <UART_SetConfig+0x370>
 8106740:	2b40      	cmp	r3, #64	; 0x40
 8106742:	d031      	beq.n	81067a8 <UART_SetConfig+0x374>
 8106744:	2b10      	cmp	r3, #16
 8106746:	f47f af14 	bne.w	8106572 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810674a:	4b19      	ldr	r3, [pc, #100]	; (81067b0 <UART_SetConfig+0x37c>)
 810674c:	4819      	ldr	r0, [pc, #100]	; (81067b4 <UART_SetConfig+0x380>)
 810674e:	681a      	ldr	r2, [r3, #0]
 8106750:	f012 0f20 	tst.w	r2, #32
 8106754:	d003      	beq.n	810675e <UART_SetConfig+0x32a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106756:	681b      	ldr	r3, [r3, #0]
 8106758:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 810675c:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810675e:	6863      	ldr	r3, [r4, #4]
 8106760:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8106762:	4a15      	ldr	r2, [pc, #84]	; (81067b8 <UART_SetConfig+0x384>)
 8106764:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8106768:	fbb0 f0f2 	udiv	r0, r0, r2
 810676c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8106770:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106774:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8106778:	f1a0 0210 	sub.w	r2, r0, #16
 810677c:	e74e      	b.n	810661c <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 810677e:	f7fd fe1d 	bl	81043bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8106782:	2800      	cmp	r0, #0
 8106784:	f43f af05 	beq.w	8106592 <UART_SetConfig+0x15e>
 8106788:	e7e9      	b.n	810675e <UART_SetConfig+0x32a>
        pclk = HAL_RCC_GetPCLK2Freq();
 810678a:	f7fd fe29 	bl	81043e0 <HAL_RCC_GetPCLK2Freq>
        break;
 810678e:	e7f8      	b.n	8106782 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106790:	4668      	mov	r0, sp
 8106792:	f7fe fc4d 	bl	8105030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106796:	9801      	ldr	r0, [sp, #4]
        break;
 8106798:	e7f3      	b.n	8106782 <UART_SetConfig+0x34e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810679a:	a803      	add	r0, sp, #12
 810679c:	f7fe fcf2 	bl	8105184 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81067a0:	9804      	ldr	r0, [sp, #16]
        break;
 81067a2:	e7ee      	b.n	8106782 <UART_SetConfig+0x34e>
        pclk = (uint32_t) CSI_VALUE;
 81067a4:	4805      	ldr	r0, [pc, #20]	; (81067bc <UART_SetConfig+0x388>)
 81067a6:	e7da      	b.n	810675e <UART_SetConfig+0x32a>
    switch (clocksource)
 81067a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 81067ac:	e7d7      	b.n	810675e <UART_SetConfig+0x32a>
 81067ae:	bf00      	nop
 81067b0:	58024400 	.word	0x58024400
 81067b4:	03d09000 	.word	0x03d09000
 81067b8:	0810f61e 	.word	0x0810f61e
 81067bc:	003d0900 	.word	0x003d0900

081067c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81067c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 81067c2:	07da      	lsls	r2, r3, #31
{
 81067c4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81067c6:	d506      	bpl.n	81067d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81067c8:	6801      	ldr	r1, [r0, #0]
 81067ca:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 81067cc:	684a      	ldr	r2, [r1, #4]
 81067ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 81067d2:	4322      	orrs	r2, r4
 81067d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81067d6:	079c      	lsls	r4, r3, #30
 81067d8:	d506      	bpl.n	81067e8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81067da:	6801      	ldr	r1, [r0, #0]
 81067dc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 81067de:	684a      	ldr	r2, [r1, #4]
 81067e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81067e4:	4322      	orrs	r2, r4
 81067e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81067e8:	0759      	lsls	r1, r3, #29
 81067ea:	d506      	bpl.n	81067fa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81067ec:	6801      	ldr	r1, [r0, #0]
 81067ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 81067f0:	684a      	ldr	r2, [r1, #4]
 81067f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81067f6:	4322      	orrs	r2, r4
 81067f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81067fa:	071a      	lsls	r2, r3, #28
 81067fc:	d506      	bpl.n	810680c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81067fe:	6801      	ldr	r1, [r0, #0]
 8106800:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8106802:	684a      	ldr	r2, [r1, #4]
 8106804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106808:	4322      	orrs	r2, r4
 810680a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810680c:	06dc      	lsls	r4, r3, #27
 810680e:	d506      	bpl.n	810681e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106810:	6801      	ldr	r1, [r0, #0]
 8106812:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8106814:	688a      	ldr	r2, [r1, #8]
 8106816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810681a:	4322      	orrs	r2, r4
 810681c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810681e:	0699      	lsls	r1, r3, #26
 8106820:	d506      	bpl.n	8106830 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106822:	6801      	ldr	r1, [r0, #0]
 8106824:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8106826:	688a      	ldr	r2, [r1, #8]
 8106828:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 810682c:	4322      	orrs	r2, r4
 810682e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106830:	065a      	lsls	r2, r3, #25
 8106832:	d50f      	bpl.n	8106854 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106834:	6801      	ldr	r1, [r0, #0]
 8106836:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8106838:	684a      	ldr	r2, [r1, #4]
 810683a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 810683e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106840:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106844:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106846:	d105      	bne.n	8106854 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106848:	684a      	ldr	r2, [r1, #4]
 810684a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 810684c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8106850:	4322      	orrs	r2, r4
 8106852:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106854:	061b      	lsls	r3, r3, #24
 8106856:	d506      	bpl.n	8106866 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106858:	6802      	ldr	r2, [r0, #0]
 810685a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 810685c:	6853      	ldr	r3, [r2, #4]
 810685e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8106862:	430b      	orrs	r3, r1
 8106864:	6053      	str	r3, [r2, #4]
}
 8106866:	bd10      	pop	{r4, pc}

08106868 <UART_WaitOnFlagUntilTimeout>:
{
 8106868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810686c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8106870:	4604      	mov	r4, r0
 8106872:	460f      	mov	r7, r1
 8106874:	4616      	mov	r6, r2
 8106876:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106878:	6822      	ldr	r2, [r4, #0]
 810687a:	69d3      	ldr	r3, [r2, #28]
 810687c:	ea37 0303 	bics.w	r3, r7, r3
 8106880:	bf0c      	ite	eq
 8106882:	2301      	moveq	r3, #1
 8106884:	2300      	movne	r3, #0
 8106886:	42b3      	cmp	r3, r6
 8106888:	d001      	beq.n	810688e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 810688a:	2000      	movs	r0, #0
 810688c:	e01e      	b.n	81068cc <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 810688e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8106892:	d0f2      	beq.n	810687a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106894:	f7fb fe36 	bl	8102504 <HAL_GetTick>
 8106898:	eba0 0008 	sub.w	r0, r0, r8
 810689c:	4548      	cmp	r0, r9
 810689e:	d825      	bhi.n	81068ec <UART_WaitOnFlagUntilTimeout+0x84>
 81068a0:	f1b9 0f00 	cmp.w	r9, #0
 81068a4:	d022      	beq.n	81068ec <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81068a6:	6820      	ldr	r0, [r4, #0]
 81068a8:	6803      	ldr	r3, [r0, #0]
 81068aa:	075a      	lsls	r2, r3, #29
 81068ac:	d5e4      	bpl.n	8106878 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 81068ae:	69c5      	ldr	r5, [r0, #28]
 81068b0:	f015 0508 	ands.w	r5, r5, #8
 81068b4:	d00c      	beq.n	81068d0 <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81068b6:	2508      	movs	r5, #8
 81068b8:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 81068ba:	4620      	mov	r0, r4
 81068bc:	f7ff fb4e 	bl	8105f5c <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 81068c0:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 81068c2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
           __HAL_UNLOCK(huart);
 81068c6:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
           return HAL_ERROR;
 81068ca:	2001      	movs	r0, #1
}
 81068cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81068d0:	69c3      	ldr	r3, [r0, #28]
 81068d2:	051b      	lsls	r3, r3, #20
 81068d4:	d5d0      	bpl.n	8106878 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81068d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81068da:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 81068dc:	4620      	mov	r0, r4
 81068de:	f7ff fb3d 	bl	8105f5c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81068e2:	2320      	movs	r3, #32
 81068e4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 81068e8:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 81068ec:	2003      	movs	r0, #3
 81068ee:	e7ed      	b.n	81068cc <UART_WaitOnFlagUntilTimeout+0x64>

081068f0 <UART_CheckIdleState>:
{
 81068f0:	b530      	push	{r4, r5, lr}
 81068f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81068f4:	2500      	movs	r5, #0
{
 81068f6:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81068f8:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 81068fc:	f7fb fe02 	bl	8102504 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106900:	6822      	ldr	r2, [r4, #0]
 8106902:	6812      	ldr	r2, [r2, #0]
 8106904:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8106906:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106908:	d51d      	bpl.n	8106946 <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810690a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 810690e:	9200      	str	r2, [sp, #0]
 8106910:	9003      	str	r0, [sp, #12]
 8106912:	462a      	mov	r2, r5
 8106914:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8106918:	4620      	mov	r0, r4
 810691a:	f7ff ffa5 	bl	8106868 <UART_WaitOnFlagUntilTimeout>
 810691e:	9b03      	ldr	r3, [sp, #12]
 8106920:	b188      	cbz	r0, 8106946 <UART_CheckIdleState+0x56>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8106922:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106924:	e852 3f00 	ldrex	r3, [r2]
 8106928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810692c:	e842 3100 	strex	r1, r3, [r2]
 8106930:	2900      	cmp	r1, #0
 8106932:	d1f6      	bne.n	8106922 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8106934:	2320      	movs	r3, #32
 8106936:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 810693a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 810693c:	2300      	movs	r3, #0
 810693e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8106942:	b005      	add	sp, #20
 8106944:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106946:	6822      	ldr	r2, [r4, #0]
 8106948:	6812      	ldr	r2, [r2, #0]
 810694a:	0752      	lsls	r2, r2, #29
 810694c:	d523      	bpl.n	8106996 <UART_CheckIdleState+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810694e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8106952:	9200      	str	r2, [sp, #0]
 8106954:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106958:	2200      	movs	r2, #0
 810695a:	4620      	mov	r0, r4
 810695c:	f7ff ff84 	bl	8106868 <UART_WaitOnFlagUntilTimeout>
 8106960:	b1c8      	cbz	r0, 8106996 <UART_CheckIdleState+0xa6>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106962:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106964:	e852 3f00 	ldrex	r3, [r2]
 8106968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810696c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8106970:	6822      	ldr	r2, [r4, #0]
 8106972:	2900      	cmp	r1, #0
 8106974:	d1f5      	bne.n	8106962 <UART_CheckIdleState+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106976:	f102 0308 	add.w	r3, r2, #8
 810697a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810697e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106982:	f102 0008 	add.w	r0, r2, #8
 8106986:	e840 3100 	strex	r1, r3, [r0]
 810698a:	2900      	cmp	r1, #0
 810698c:	d1f3      	bne.n	8106976 <UART_CheckIdleState+0x86>
      huart->RxState = HAL_UART_STATE_READY;
 810698e:	2320      	movs	r3, #32
 8106990:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8106994:	e7d1      	b.n	810693a <UART_CheckIdleState+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8106996:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106998:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 810699a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810699e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81069a2:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81069a4:	6720      	str	r0, [r4, #112]	; 0x70
  return HAL_OK;
 81069a6:	e7c9      	b.n	810693c <UART_CheckIdleState+0x4c>

081069a8 <HAL_UART_Init>:
{
 81069a8:	b510      	push	{r4, lr}
  if (huart == NULL)
 81069aa:	4604      	mov	r4, r0
 81069ac:	b350      	cbz	r0, 8106a04 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 81069ae:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 81069b2:	b91b      	cbnz	r3, 81069bc <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 81069b4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 81069b8:	f7fb fc8c 	bl	81022d4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 81069bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 81069be:	2324      	movs	r3, #36	; 0x24
 81069c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 81069c4:	6813      	ldr	r3, [r2, #0]
 81069c6:	f023 0301 	bic.w	r3, r3, #1
 81069ca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 81069cc:	4620      	mov	r0, r4
 81069ce:	f7ff fd31 	bl	8106434 <UART_SetConfig>
 81069d2:	2801      	cmp	r0, #1
 81069d4:	d016      	beq.n	8106a04 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81069d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81069d8:	b113      	cbz	r3, 81069e0 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 81069da:	4620      	mov	r0, r4
 81069dc:	f7ff fef0 	bl	81067c0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81069e0:	6823      	ldr	r3, [r4, #0]
 81069e2:	685a      	ldr	r2, [r3, #4]
 81069e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81069e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81069ea:	689a      	ldr	r2, [r3, #8]
 81069ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81069f0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 81069f2:	681a      	ldr	r2, [r3, #0]
 81069f4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 81069f8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 81069fa:	601a      	str	r2, [r3, #0]
}
 81069fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8106a00:	f7ff bf76 	b.w	81068f0 <UART_CheckIdleState>
}
 8106a04:	2001      	movs	r0, #1
 8106a06:	bd10      	pop	{r4, pc}

08106a08 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106a08:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8106a0a:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106a0c:	b92b      	cbnz	r3, 8106a1a <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8106a0e:	2301      	movs	r3, #1
 8106a10:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8106a14:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106a18:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106a1a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106a1c:	4d09      	ldr	r5, [pc, #36]	; (8106a44 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106a1e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106a20:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8106a22:	4c09      	ldr	r4, [pc, #36]	; (8106a48 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106a24:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106a26:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106a2a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8106a2c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106a2e:	011b      	lsls	r3, r3, #4
 8106a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8106a34:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106a38:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8106a3a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106a3c:	011b      	lsls	r3, r3, #4
 8106a3e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8106a42:	e7e7      	b.n	8106a14 <UARTEx_SetNbDataToProcess+0xc>
 8106a44:	0810f63e 	.word	0x0810f63e
 8106a48:	0810f636 	.word	0x0810f636

08106a4c <HAL_UARTEx_WakeupCallback>:
}
 8106a4c:	4770      	bx	lr

08106a4e <HAL_UARTEx_RxFifoFullCallback>:
 8106a4e:	4770      	bx	lr

08106a50 <HAL_UARTEx_TxFifoEmptyCallback>:
 8106a50:	4770      	bx	lr

08106a52 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8106a52:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8106a56:	2b01      	cmp	r3, #1
 8106a58:	d014      	beq.n	8106a84 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106a5a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8106a5c:	2324      	movs	r3, #36	; 0x24
 8106a5e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106a62:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8106a64:	6813      	ldr	r3, [r2, #0]
 8106a66:	f023 0301 	bic.w	r3, r3, #1
 8106a6a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106a6c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106a70:	2300      	movs	r3, #0
 8106a72:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106a74:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8106a76:	2220      	movs	r2, #32
 8106a78:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8106a7c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8106a80:	4618      	mov	r0, r3
 8106a82:	4770      	bx	lr
  __HAL_LOCK(huart);
 8106a84:	2002      	movs	r0, #2
}
 8106a86:	4770      	bx	lr

08106a88 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8106a88:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8106a8a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8106a8e:	2b01      	cmp	r3, #1
{
 8106a90:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8106a92:	d017      	beq.n	8106ac4 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106a94:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8106a96:	2324      	movs	r3, #36	; 0x24
 8106a98:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106a9c:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8106a9e:	682b      	ldr	r3, [r5, #0]
 8106aa0:	f023 0301 	bic.w	r3, r3, #1
 8106aa4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106aa6:	68ab      	ldr	r3, [r5, #8]
 8106aa8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8106aac:	4319      	orrs	r1, r3
 8106aae:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8106ab0:	f7ff ffaa 	bl	8106a08 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8106ab4:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106ab6:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8106ab8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8106abc:	2000      	movs	r0, #0
 8106abe:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8106ac2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8106ac4:	2002      	movs	r0, #2
 8106ac6:	e7fc      	b.n	8106ac2 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08106ac8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8106ac8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8106aca:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8106ace:	2b01      	cmp	r3, #1
{
 8106ad0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8106ad2:	d017      	beq.n	8106b04 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106ad4:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8106ad6:	2324      	movs	r3, #36	; 0x24
 8106ad8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106adc:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8106ade:	682b      	ldr	r3, [r5, #0]
 8106ae0:	f023 0301 	bic.w	r3, r3, #1
 8106ae4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106ae6:	68ab      	ldr	r3, [r5, #8]
 8106ae8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8106aec:	4319      	orrs	r1, r3
 8106aee:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8106af0:	f7ff ff8a 	bl	8106a08 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8106af4:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106af6:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8106af8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8106afc:	2000      	movs	r0, #0
 8106afe:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8106b02:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8106b04:	2002      	movs	r0, #2
 8106b06:	e7fc      	b.n	8106b02 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08106b08 <ai_ann_1524_trimmed_get_error>:
}

AI_API_ENTRY
ai_error ai_ann_1524_trimmed_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8106b08:	f001 bbd0 	b.w	81082ac <ai_platform_network_get_error>

08106b0c <ai_ann_1524_trimmed_create>:
}

AI_API_ENTRY
ai_error ai_ann_1524_trimmed_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8106b0c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8106b0e:	2305      	movs	r3, #5
 8106b10:	2200      	movs	r2, #0
 8106b12:	e9cd 3200 	strd	r3, r2, [sp]
 8106b16:	4a03      	ldr	r2, [pc, #12]	; (8106b24 <ai_ann_1524_trimmed_create+0x18>)
 8106b18:	2301      	movs	r3, #1
 8106b1a:	f001 fde1 	bl	81086e0 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8106b1e:	b003      	add	sp, #12
 8106b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8106b24:	10000500 	.word	0x10000500

08106b28 <ai_ann_1524_trimmed_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_1524_trimmed_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8106b28:	b910      	cbnz	r0, 8106b30 <ai_ann_1524_trimmed_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8106b2a:	4802      	ldr	r0, [pc, #8]	; (8106b34 <ai_ann_1524_trimmed_inputs_get+0xc>)
 8106b2c:	4b02      	ldr	r3, [pc, #8]	; (8106b38 <ai_ann_1524_trimmed_inputs_get+0x10>)
 8106b2e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8106b30:	f001 bc30 	b.w	8108394 <ai_platform_inputs_get>
 8106b34:	10000500 	.word	0x10000500
 8106b38:	a1c00100 	.word	0xa1c00100

08106b3c <ai_ann_1524_trimmed_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_1524_trimmed_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8106b3c:	b910      	cbnz	r0, 8106b44 <ai_ann_1524_trimmed_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8106b3e:	4802      	ldr	r0, [pc, #8]	; (8106b48 <ai_ann_1524_trimmed_outputs_get+0xc>)
 8106b40:	4b02      	ldr	r3, [pc, #8]	; (8106b4c <ai_ann_1524_trimmed_outputs_get+0x10>)
 8106b42:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8106b44:	f001 bcfc 	b.w	8108540 <ai_platform_outputs_get>
 8106b48:	10000500 	.word	0x10000500
 8106b4c:	a1c00100 	.word	0xa1c00100

08106b50 <ai_ann_1524_trimmed_init>:
}

AI_API_ENTRY
ai_bool ai_ann_1524_trimmed_init(
  ai_handle network, const ai_network_params* params)
{
 8106b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106b54:	4607      	mov	r7, r0
 8106b56:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8106b58:	f001 fe98 	bl	810888c <ai_platform_network_init>
  if (!net_ctx) return false;
 8106b5c:	4604      	mov	r4, r0
 8106b5e:	2800      	cmp	r0, #0
 8106b60:	f000 8094 	beq.w	8106c8c <ai_ann_1524_trimmed_init+0x13c>
  if (ai_platform_get_weights_map(g_ann_1524_trimmed_weights_map, 1, params)) {
 8106b64:	4e50      	ldr	r6, [pc, #320]	; (8106ca8 <ai_ann_1524_trimmed_init+0x158>)
 8106b66:	4642      	mov	r2, r8
 8106b68:	2101      	movs	r1, #1
 8106b6a:	4630      	mov	r0, r6
 8106b6c:	f001 fad4 	bl	8108118 <ai_platform_get_weights_map>
 8106b70:	4605      	mov	r5, r0
 8106b72:	2800      	cmp	r0, #0
 8106b74:	f000 808c 	beq.w	8106c90 <ai_ann_1524_trimmed_init+0x140>
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8106b78:	4a4c      	ldr	r2, [pc, #304]	; (8106cac <ai_ann_1524_trimmed_init+0x15c>)
 8106b7a:	6813      	ldr	r3, [r2, #0]
 8106b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8106b80:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 0);
 8106b82:	6833      	ldr	r3, [r6, #0]
    gemm_3_bias_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 0);
 8106b84:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8106b88:	4a49      	ldr	r2, [pc, #292]	; (8106cb0 <ai_ann_1524_trimmed_init+0x160>)
 8106b8a:	6811      	ldr	r1, [r2, #0]
 8106b8c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8106b90:	6011      	str	r1, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 112);
 8106b92:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8106b96:	6091      	str	r1, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 48);
 8106b98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8106b9c:	60d1      	str	r1, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8106b9e:	4a45      	ldr	r2, [pc, #276]	; (8106cb4 <ai_ann_1524_trimmed_init+0x164>)
 8106ba0:	6811      	ldr	r1, [r2, #0]
 8106ba2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8106ba6:	6011      	str	r1, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 576184);
 8106ba8:	f503 210c 	add.w	r1, r3, #573440	; 0x8c000
 8106bac:	f601 21b8 	addw	r1, r1, #2744	; 0xab8
    gemm_0_bias_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 576184);
 8106bb0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8106bb4:	4a40      	ldr	r2, [pc, #256]	; (8106cb8 <ai_ann_1524_trimmed_init+0x168>)
 8106bb6:	6811      	ldr	r1, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 582280);
 8106bb8:	f503 260e 	add.w	r6, r3, #581632	; 0x8e000
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8106bbc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8106bc0:	6011      	str	r1, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 582280);
 8106bc2:	f506 7122 	add.w	r1, r6, #648	; 0x288
    gemm_2_bias_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 582280);
 8106bc6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8106bca:	4a3c      	ldr	r2, [pc, #240]	; (8106cbc <ai_ann_1524_trimmed_init+0x16c>)
 8106bcc:	6811      	ldr	r1, [r2, #0]
 8106bce:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8106bd2:	6011      	str	r1, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 582856);
 8106bd4:	f506 6199 	add.w	r1, r6, #1224	; 0x4c8
    gemm_1_weights_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 582792);
 8106bd8:	f506 6691 	add.w	r6, r6, #1160	; 0x488
    gemm_1_weights_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 582856);
 8106bdc:	6091      	str	r1, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 582792);
 8106bde:	60d6      	str	r6, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8106be0:	4a37      	ldr	r2, [pc, #220]	; (8106cc0 <ai_ann_1524_trimmed_init+0x170>)
 8106be2:	6811      	ldr	r1, [r2, #0]
 8106be4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8106be8:	6011      	str	r1, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 777928);
 8106bea:	f503 213d 	add.w	r1, r3, #774144	; 0xbd000
 8106bee:	f601 61c8 	addw	r1, r1, #3784	; 0xec8
    gemm_1_bias_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 777928);
 8106bf2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8106bf6:	4a33      	ldr	r2, [pc, #204]	; (8106cc4 <ai_ann_1524_trimmed_init+0x174>)
 8106bf8:	6811      	ldr	r1, [r2, #0]
 8106bfa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8106bfe:	6011      	str	r1, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 779016);
 8106c00:	f503 213e 	add.w	r1, r3, #778240	; 0xbe000
 8106c04:	f501 7042 	add.w	r0, r1, #776	; 0x308
    gemm_2_weights_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 778952);
 8106c08:	f501 7132 	add.w	r1, r1, #712	; 0x2c8
 8106c0c:	60d1      	str	r1, [r2, #12]
    gemm_2_weights_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 779016);
 8106c0e:	6090      	str	r0, [r2, #8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8106c10:	4a2d      	ldr	r2, [pc, #180]	; (8106cc8 <ai_ann_1524_trimmed_init+0x178>)
 8106c12:	6811      	ldr	r1, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 795400);
 8106c14:	f503 2342 	add.w	r3, r3, #794624	; 0xc2000
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8106c18:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_3_weights_array.data = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 795400);
 8106c1c:	f503 7342 	add.w	r3, r3, #776	; 0x308
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8106c20:	6011      	str	r1, [r2, #0]
    gemm_3_weights_array.data_start = AI_PTR(g_ann_1524_trimmed_weights_map[0] + 795400);
 8106c22:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_ann_1524_trimmed_activations_map, 1, params)) {
 8106c26:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8106cf0 <ai_ann_1524_trimmed_init+0x1a0>
 8106c2a:	4642      	mov	r2, r8
 8106c2c:	2101      	movs	r1, #1
 8106c2e:	4648      	mov	r0, r9
 8106c30:	f001 fac6 	bl	81081c0 <ai_platform_get_activations_map>
 8106c34:	4606      	mov	r6, r0
 8106c36:	b388      	cbz	r0, 8106c9c <ai_ann_1524_trimmed_init+0x14c>
    serving_default_prune_low_magnitude_pruning_sparsity_0_5_input0_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c38:	f8d9 3000 	ldr.w	r3, [r9]
 8106c3c:	4a23      	ldr	r2, [pc, #140]	; (8106ccc <ai_ann_1524_trimmed_init+0x17c>)
    gemm_0_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 3024);
 8106c3e:	4924      	ldr	r1, [pc, #144]	; (8106cd0 <ai_ann_1524_trimmed_init+0x180>)
    serving_default_prune_low_magnitude_pruning_sparsity_0_5_input0_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c40:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 3024);
 8106c44:	f503 623d 	add.w	r2, r3, #3024	; 0xbd0
    gemm_0_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 3024);
 8106c48:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 3024);
 8106c4c:	4921      	ldr	r1, [pc, #132]	; (8106cd4 <ai_ann_1524_trimmed_init+0x184>)
    nl_0_nl_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 3024);
 8106c4e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c52:	4a21      	ldr	r2, [pc, #132]	; (8106cd8 <ai_ann_1524_trimmed_init+0x188>)
    gemm_1_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c54:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_1_nl_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 1024);
 8106c58:	4a20      	ldr	r2, [pc, #128]	; (8106cdc <ai_ann_1524_trimmed_init+0x18c>)
 8106c5a:	f503 6180 	add.w	r1, r3, #1024	; 0x400
    nl_1_nl_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 1024);
 8106c5e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c62:	4a1f      	ldr	r2, [pc, #124]	; (8106ce0 <ai_ann_1524_trimmed_init+0x190>)
    gemm_2_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c64:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_2_nl_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 512);
 8106c68:	4a1e      	ldr	r2, [pc, #120]	; (8106ce4 <ai_ann_1524_trimmed_init+0x194>)
 8106c6a:	f503 7100 	add.w	r1, r3, #512	; 0x200
    nl_2_nl_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 512);
 8106c6e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_3_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c72:	4a1d      	ldr	r2, [pc, #116]	; (8106ce8 <ai_ann_1524_trimmed_init+0x198>)
    gemm_3_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 0);
 8106c74:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_4_output_array.data = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 48);
 8106c78:	4a1c      	ldr	r2, [pc, #112]	; (8106cec <ai_ann_1524_trimmed_init+0x19c>)
 8106c7a:	3330      	adds	r3, #48	; 0x30
    nl_4_output_array.data_start = AI_PTR(g_ann_1524_trimmed_activations_map[0] + 48);
 8106c7c:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= ann_1524_trimmed_configure_weights(net_ctx, params);
  ok &= ann_1524_trimmed_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8106c80:	4638      	mov	r0, r7
 8106c82:	f001 fef1 	bl	8108a68 <ai_platform_network_post_init>
 8106c86:	4030      	ands	r0, r6
 8106c88:	4005      	ands	r5, r0
 8106c8a:	b2e8      	uxtb	r0, r5

  return ok;
}
 8106c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8106c90:	2212      	movs	r2, #18
 8106c92:	2130      	movs	r1, #48	; 0x30
 8106c94:	4620      	mov	r0, r4
 8106c96:	f001 fb77 	bl	8108388 <ai_platform_network_set_error>
  return false;
 8106c9a:	e7c4      	b.n	8106c26 <ai_ann_1524_trimmed_init+0xd6>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8106c9c:	2213      	movs	r2, #19
 8106c9e:	2130      	movs	r1, #48	; 0x30
 8106ca0:	4620      	mov	r0, r4
 8106ca2:	f001 fb71 	bl	8108388 <ai_platform_network_set_error>
  return false;
 8106ca6:	e7eb      	b.n	8106c80 <ai_ann_1524_trimmed_init+0x130>
 8106ca8:	100188fc 	.word	0x100188fc
 8106cac:	10000748 	.word	0x10000748
 8106cb0:	100005dc 	.word	0x100005dc
 8106cb4:	10000568 	.word	0x10000568
 8106cb8:	100006a8 	.word	0x100006a8
 8106cbc:	1000067c 	.word	0x1000067c
 8106cc0:	10000608 	.word	0x10000608
 8106cc4:	1000071c 	.word	0x1000071c
 8106cc8:	100007bc 	.word	0x100007bc
 8106ccc:	10000918 	.word	0x10000918
 8106cd0:	100005b0 	.word	0x100005b0
 8106cd4:	10000808 	.word	0x10000808
 8106cd8:	10000650 	.word	0x10000650
 8106cdc:	10000854 	.word	0x10000854
 8106ce0:	100006f0 	.word	0x100006f0
 8106ce4:	100008a0 	.word	0x100008a0
 8106ce8:	10000790 	.word	0x10000790
 8106cec:	100008ec 	.word	0x100008ec
 8106cf0:	100188f8 	.word	0x100188f8

08106cf4 <ai_ann_1524_trimmed_create_and_init>:
{
 8106cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8106cf8:	4688      	mov	r8, r1
 8106cfa:	b08f      	sub	sp, #60	; 0x3c
    err = ai_ann_1524_trimmed_create(network, AI_ANN_1524_TRIMMED_DATA_CONFIG);
 8106cfc:	2100      	movs	r1, #0
{
 8106cfe:	4606      	mov	r6, r0
 8106d00:	4617      	mov	r7, r2
    err = ai_ann_1524_trimmed_create(network, AI_ANN_1524_TRIMMED_DATA_CONFIG);
 8106d02:	f7ff ff03 	bl	8106b0c <ai_ann_1524_trimmed_create>
    if (err.type != AI_ERROR_NONE)
 8106d06:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_ann_1524_trimmed_create(network, AI_ANN_1524_TRIMMED_DATA_CONFIG);
 8106d0a:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8106d0c:	d107      	bne.n	8106d1e <ai_ann_1524_trimmed_create_and_init+0x2a>
    if (ai_ann_1524_trimmed_data_params_get(&params) != true) {
 8106d0e:	4668      	mov	r0, sp
 8106d10:	f000 f83a 	bl	8106d88 <ai_ann_1524_trimmed_data_params_get>
 8106d14:	b938      	cbnz	r0, 8106d26 <ai_ann_1524_trimmed_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8106d16:	6830      	ldr	r0, [r6, #0]
 8106d18:	f001 fac8 	bl	81082ac <ai_platform_network_get_error>
 8106d1c:	4604      	mov	r4, r0
}
 8106d1e:	4620      	mov	r0, r4
 8106d20:	b00f      	add	sp, #60	; 0x3c
 8106d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 8106d26:	f1b8 0f00 	cmp.w	r8, #0
 8106d2a:	d11a      	bne.n	8106d62 <ai_ann_1524_trimmed_create_and_init+0x6e>
    if (weights) {
 8106d2c:	bb3f      	cbnz	r7, 8106d7e <ai_ann_1524_trimmed_create_and_init+0x8a>
    if (ai_ann_1524_trimmed_init(*network, &params) != true) {
 8106d2e:	6830      	ldr	r0, [r6, #0]
 8106d30:	4669      	mov	r1, sp
 8106d32:	f7ff ff0d 	bl	8106b50 <ai_ann_1524_trimmed_init>
 8106d36:	b928      	cbnz	r0, 8106d44 <ai_ann_1524_trimmed_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8106d38:	6830      	ldr	r0, [r6, #0]
 8106d3a:	f001 fab7 	bl	81082ac <ai_platform_network_get_error>
 8106d3e:	fa5f f980 	uxtb.w	r9, r0
 8106d42:	4604      	mov	r4, r0
    return err;
 8106d44:	f369 0407 	bfi	r4, r9, #0, #8
 8106d48:	e7e9      	b.n	8106d1e <ai_ann_1524_trimmed_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8106d4a:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8106d4e:	4629      	mov	r1, r5
 8106d50:	a803      	add	r0, sp, #12
 8106d52:	f001 f9cd 	bl	81080f0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8106d56:	3501      	adds	r5, #1
 8106d58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8106d5c:	42ab      	cmp	r3, r5
 8106d5e:	dcf4      	bgt.n	8106d4a <ai_ann_1524_trimmed_create_and_init+0x56>
 8106d60:	e7e4      	b.n	8106d2c <ai_ann_1524_trimmed_create_and_init+0x38>
 8106d62:	464d      	mov	r5, r9
 8106d64:	e7f8      	b.n	8106d58 <ai_ann_1524_trimmed_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8106d66:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8106d6a:	4629      	mov	r1, r5
 8106d6c:	a801      	add	r0, sp, #4
 8106d6e:	f001 f9bf 	bl	81080f0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8106d72:	3501      	adds	r5, #1
 8106d74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8106d78:	42ab      	cmp	r3, r5
 8106d7a:	dcf4      	bgt.n	8106d66 <ai_ann_1524_trimmed_create_and_init+0x72>
 8106d7c:	e7d7      	b.n	8106d2e <ai_ann_1524_trimmed_create_and_init+0x3a>
 8106d7e:	2500      	movs	r5, #0
 8106d80:	e7f8      	b.n	8106d74 <ai_ann_1524_trimmed_create_and_init+0x80>

08106d82 <ai_ann_1524_trimmed_run>:

AI_API_ENTRY
ai_i32 ai_ann_1524_trimmed_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8106d82:	f001 bef9 	b.w	8108b78 <ai_platform_network_process>
	...

08106d88 <ai_ann_1524_trimmed_data_params_get>:
 * @ingroup ann_1524_trimmed_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_ann_1524_trimmed_data_params_get(ai_network_params* params)
{
 8106d88:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8106d8a:	4603      	mov	r3, r0
{
 8106d8c:	b085      	sub	sp, #20
  if (!params) return false;
 8106d8e:	b170      	cbz	r0, 8106dae <ai_ann_1524_trimmed_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8106d90:	4c08      	ldr	r4, [pc, #32]	; (8106db4 <ai_ann_1524_trimmed_data_params_get+0x2c>)
 8106d92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8106d96:	466a      	mov	r2, sp
 8106d98:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_1524_TRIMMED_DATA_ACTIVATIONS_COUNT, g_ann_1524_trimmed_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8106d9c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8106da0:	ad02      	add	r5, sp, #8
 8106da2:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_1524_TRIMMED_DATA_WEIGHTS_COUNT, g_ann_1524_trimmed_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8106da6:	4629      	mov	r1, r5
 8106da8:	4618      	mov	r0, r3
 8106daa:	f001 fa5d 	bl	8108268 <ai_platform_bind_network_params>
}
 8106dae:	b005      	add	sp, #20
 8106db0:	bd30      	pop	{r4, r5, pc}
 8106db2:	bf00      	nop
 8106db4:	0810edc0 	.word	0x0810edc0

08106db8 <acquire_and_process_data>:
  return 0;
}

int acquire_and_process_data(ai_float* data[], float mag_buffer[6][256]) {

    for (int idx = 0; idx < 6; idx++) {
 8106db8:	f501 73fe 	add.w	r3, r1, #508	; 0x1fc
 8106dbc:	f501 51cf 	add.w	r1, r1, #6624	; 0x19e0
 8106dc0:	3804      	subs	r0, #4
 8106dc2:	311c      	adds	r1, #28

    	// Skip first value in FFT data
        for (int j = 0; j < 127; j++) {
 8106dc4:	f840 3f04 	str.w	r3, [r0, #4]!
    for (int idx = 0; idx < 6; idx++) {
 8106dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8106dcc:	428b      	cmp	r3, r1
 8106dce:	d1f9      	bne.n	8106dc4 <acquire_and_process_data+0xc>
        }

    }

    return 0; // Return success
}
 8106dd0:	2000      	movs	r0, #0
 8106dd2:	4770      	bx	lr

08106dd4 <post_process>:

int post_process(ai_i8* data[])
{
 8106dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ai_i8* predicted_region[3];

    // process the predictions
    for (int idx = 0; idx < 3; idx++) {
        predicted_region[idx] = data[idx];
        printf("predicted_region[%d] = %d\r\n\n", idx, *predicted_region[idx]);
 8106dd6:	4f0f      	ldr	r7, [pc, #60]	; (8106e14 <post_process+0x40>)
{
 8106dd8:	b085      	sub	sp, #20
 8106dda:	4605      	mov	r5, r0
 8106ddc:	ae01      	add	r6, sp, #4
    for (int idx = 0; idx < 3; idx++) {
 8106dde:	2400      	movs	r4, #0
        predicted_region[idx] = data[idx];
 8106de0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8106de4:	f846 3b04 	str.w	r3, [r6], #4
        printf("predicted_region[%d] = %d\r\n\n", idx, *predicted_region[idx]);
 8106de8:	4621      	mov	r1, r4
 8106dea:	f993 2000 	ldrsb.w	r2, [r3]
 8106dee:	4638      	mov	r0, r7
    for (int idx = 0; idx < 3; idx++) {
 8106df0:	3401      	adds	r4, #1
        printf("predicted_region[%d] = %d\r\n\n", idx, *predicted_region[idx]);
 8106df2:	f004 f8e1 	bl	810afb8 <iprintf>
    for (int idx = 0; idx < 3; idx++) {
 8106df6:	2c03      	cmp	r4, #3
 8106df8:	d1f2      	bne.n	8106de0 <post_process+0xc>


  int8_t prev_region,curr_region;

  //printf("Reading predicted region from IPC before write\r\n");
  prev_region = IPCGetPredictedRegion();
 8106dfa:	f7fb f88d 	bl	8101f18 <IPCGetPredictedRegion>
  //printf("Predicted region Previous = %d\r\n\n", prev_region);

  //printf("Setting predicted region to IPC\r\n\n");
  IPCSetPredictedRegion((uint8_t)(*predicted_region[0]));
 8106dfe:	9b01      	ldr	r3, [sp, #4]
 8106e00:	f993 0000 	ldrsb.w	r0, [r3]
 8106e04:	f7fb f890 	bl	8101f28 <IPCSetPredictedRegion>

  //printf("Reading predicted region from IPC after write\r\n");
  curr_region = IPCGetPredictedRegion();
 8106e08:	f7fb f886 	bl	8101f18 <IPCGetPredictedRegion>
  //printf("Predicted region New = %d\r\n\n", curr_region);

  return 0;
}
 8106e0c:	2000      	movs	r0, #0
 8106e0e:	b005      	add	sp, #20
 8106e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8106e12:	bf00      	nop
 8106e14:	081d31a8 	.word	0x081d31a8

08106e18 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8106e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  err = ai_ann_1524_trimmed_create_and_init(&ann_1524_trimmed, act_addr, NULL);
 8106e1a:	4c17      	ldr	r4, [pc, #92]	; (8106e78 <MX_X_CUBE_AI_Init+0x60>)
    /* USER CODE BEGIN 5 */
  printf("\r\nMX_X_CUBE_AI_Init\r\n");
 8106e1c:	4817      	ldr	r0, [pc, #92]	; (8106e7c <MX_X_CUBE_AI_Init+0x64>)
 8106e1e:	f004 f931 	bl	810b084 <puts>
  err = ai_ann_1524_trimmed_create_and_init(&ann_1524_trimmed, act_addr, NULL);
 8106e22:	4917      	ldr	r1, [pc, #92]	; (8106e80 <MX_X_CUBE_AI_Init+0x68>)
 8106e24:	2200      	movs	r2, #0
 8106e26:	4620      	mov	r0, r4
 8106e28:	f7ff ff64 	bl	8106cf4 <ai_ann_1524_trimmed_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8106e2c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8106e30:	d00d      	beq.n	8106e4e <MX_X_CUBE_AI_Init+0x36>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8106e32:	0a03      	lsrs	r3, r0, #8
 8106e34:	460a      	mov	r2, r1
 8106e36:	4813      	ldr	r0, [pc, #76]	; (8106e84 <MX_X_CUBE_AI_Init+0x6c>)
 8106e38:	4913      	ldr	r1, [pc, #76]	; (8106e88 <MX_X_CUBE_AI_Init+0x70>)
 8106e3a:	f004 f8bd 	bl	810afb8 <iprintf>

  ai_boostrap(data_activations0);
  printf("ann_1524_trimmed returns  %d\r\n\n", ((uint8_t*) ann_1524_trimmed)[0]);
 8106e3e:	6823      	ldr	r3, [r4, #0]
 8106e40:	4812      	ldr	r0, [pc, #72]	; (8106e8c <MX_X_CUBE_AI_Init+0x74>)
 8106e42:	7819      	ldrb	r1, [r3, #0]
    /* USER CODE END 5 */
}
 8106e44:	b003      	add	sp, #12
 8106e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  printf("ann_1524_trimmed returns  %d\r\n\n", ((uint8_t*) ann_1524_trimmed)[0]);
 8106e4a:	f004 b8b5 	b.w	810afb8 <iprintf>
  ai_input = ai_ann_1524_trimmed_inputs_get(ann_1524_trimmed, NULL);
 8106e4e:	6820      	ldr	r0, [r4, #0]
 8106e50:	9101      	str	r1, [sp, #4]
 8106e52:	f7ff fe69 	bl	8106b28 <ai_ann_1524_trimmed_inputs_get>
 8106e56:	4d0e      	ldr	r5, [pc, #56]	; (8106e90 <MX_X_CUBE_AI_Init+0x78>)
  ai_output = ai_ann_1524_trimmed_outputs_get(ann_1524_trimmed, NULL);
 8106e58:	9901      	ldr	r1, [sp, #4]
  ai_input = ai_ann_1524_trimmed_inputs_get(ann_1524_trimmed, NULL);
 8106e5a:	6028      	str	r0, [r5, #0]
  ai_output = ai_ann_1524_trimmed_outputs_get(ann_1524_trimmed, NULL);
 8106e5c:	6820      	ldr	r0, [r4, #0]
 8106e5e:	f7ff fe6d 	bl	8106b3c <ai_ann_1524_trimmed_outputs_get>
 8106e62:	4b0c      	ldr	r3, [pc, #48]	; (8106e94 <MX_X_CUBE_AI_Init+0x7c>)
 8106e64:	6018      	str	r0, [r3, #0]
	data_ins[idx] = ai_input[idx].data;
 8106e66:	682b      	ldr	r3, [r5, #0]
 8106e68:	685a      	ldr	r2, [r3, #4]
 8106e6a:	4b0b      	ldr	r3, [pc, #44]	; (8106e98 <MX_X_CUBE_AI_Init+0x80>)
 8106e6c:	601a      	str	r2, [r3, #0]
	data_outs[idx] = ai_output[idx].data;
 8106e6e:	4b0b      	ldr	r3, [pc, #44]	; (8106e9c <MX_X_CUBE_AI_Init+0x84>)
 8106e70:	6842      	ldr	r2, [r0, #4]
 8106e72:	601a      	str	r2, [r3, #0]
  for (int idx=0; idx < AI_ANN_1524_TRIMMED_OUT_NUM; idx++) {
 8106e74:	e7e3      	b.n	8106e3e <MX_X_CUBE_AI_Init+0x26>
 8106e76:	bf00      	nop
 8106e78:	10018908 	.word	0x10018908
 8106e7c:	081d31c5 	.word	0x081d31c5
 8106e80:	10000980 	.word	0x10000980
 8106e84:	081d31fe 	.word	0x081d31fe
 8106e88:	081d31da 	.word	0x081d31da
 8106e8c:	081d3230 	.word	0x081d3230
 8106e90:	10018900 	.word	0x10018900
 8106e94:	10018904 	.word	0x10018904
 8106e98:	1001890c 	.word	0x1001890c
 8106e9c:	10018910 	.word	0x10018910

08106ea0 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(float mag_buffer[6][256])
{
 8106ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int res = -1;

  printf("\nMX_X_CUBE_AI_Process\r\n\n");

  //printf("ann_1524_trimmed %d\r\n", ((uint8_t*) ann_1524_trimmed)[0]);
  if (ann_1524_trimmed) {
 8106ea2:	4d19      	ldr	r5, [pc, #100]	; (8106f08 <MX_X_CUBE_AI_Process+0x68>)
{
 8106ea4:	9001      	str	r0, [sp, #4]
  printf("\nMX_X_CUBE_AI_Process\r\n\n");
 8106ea6:	4819      	ldr	r0, [pc, #100]	; (8106f0c <MX_X_CUBE_AI_Process+0x6c>)
 8106ea8:	f004 f8ec 	bl	810b084 <puts>
  if (ann_1524_trimmed) {
 8106eac:	682b      	ldr	r3, [r5, #0]
 8106eae:	b1db      	cbz	r3, 8106ee8 <MX_X_CUBE_AI_Process+0x48>

	//AI_RUNNING = TRUE;
    /* 1 - acquire and pre-process input data */
    res = acquire_and_process_data(data_ins,mag_buffer);
 8106eb0:	9901      	ldr	r1, [sp, #4]
 8106eb2:	4817      	ldr	r0, [pc, #92]	; (8106f10 <MX_X_CUBE_AI_Process+0x70>)
 8106eb4:	f7ff ff80 	bl	8106db8 <acquire_and_process_data>
    //printf("acquire_and_process returns %d", res);
    /* 2 - process the data - call inference engine */
    if (res == 0 ) res = ai_run();
 8106eb8:	b9b0      	cbnz	r0, 8106ee8 <MX_X_CUBE_AI_Process+0x48>
  batch = ai_ann_1524_trimmed_run(ann_1524_trimmed, ai_input, ai_output);
 8106eba:	4b16      	ldr	r3, [pc, #88]	; (8106f14 <MX_X_CUBE_AI_Process+0x74>)
 8106ebc:	6828      	ldr	r0, [r5, #0]
 8106ebe:	681a      	ldr	r2, [r3, #0]
 8106ec0:	4b15      	ldr	r3, [pc, #84]	; (8106f18 <MX_X_CUBE_AI_Process+0x78>)
 8106ec2:	6819      	ldr	r1, [r3, #0]
 8106ec4:	f7ff ff5d 	bl	8106d82 <ai_ann_1524_trimmed_run>
  if (batch != 1) {
 8106ec8:	2801      	cmp	r0, #1
  batch = ai_ann_1524_trimmed_run(ann_1524_trimmed, ai_input, ai_output);
 8106eca:	4604      	mov	r4, r0
  if (batch != 1) {
 8106ecc:	d015      	beq.n	8106efa <MX_X_CUBE_AI_Process+0x5a>
    ai_log_err(ai_ann_1524_trimmed_get_error(ann_1524_trimmed),
 8106ece:	6828      	ldr	r0, [r5, #0]
 8106ed0:	f7ff fe1a 	bl	8106b08 <ai_ann_1524_trimmed_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8106ed4:	4911      	ldr	r1, [pc, #68]	; (8106f1c <MX_X_CUBE_AI_Process+0x7c>)
 8106ed6:	0a03      	lsrs	r3, r0, #8
 8106ed8:	b2c2      	uxtb	r2, r0
 8106eda:	4811      	ldr	r0, [pc, #68]	; (8106f20 <MX_X_CUBE_AI_Process+0x80>)
 8106edc:	f004 f86c 	bl	810afb8 <iprintf>
    printf("batch = %f\r\n",batch);
 8106ee0:	4810      	ldr	r0, [pc, #64]	; (8106f24 <MX_X_CUBE_AI_Process+0x84>)
 8106ee2:	4621      	mov	r1, r4
 8106ee4:	f004 f868 	bl	810afb8 <iprintf>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8106ee8:	490f      	ldr	r1, [pc, #60]	; (8106f28 <MX_X_CUBE_AI_Process+0x88>)
 8106eea:	480d      	ldr	r0, [pc, #52]	; (8106f20 <MX_X_CUBE_AI_Process+0x80>)
 8106eec:	2310      	movs	r3, #16
 8106eee:	2211      	movs	r2, #17
  if (res) {
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
    ai_log_err(err, "Process has FAILED");
  }
    /* USER CODE END 6 */
}
 8106ef0:	b003      	add	sp, #12
 8106ef2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8106ef6:	f004 b85f 	b.w	810afb8 <iprintf>
    if (res == 0) res = post_process(data_outs);
 8106efa:	480c      	ldr	r0, [pc, #48]	; (8106f2c <MX_X_CUBE_AI_Process+0x8c>)
 8106efc:	f7ff ff6a 	bl	8106dd4 <post_process>
  if (res) {
 8106f00:	2800      	cmp	r0, #0
 8106f02:	d1f1      	bne.n	8106ee8 <MX_X_CUBE_AI_Process+0x48>
}
 8106f04:	b003      	add	sp, #12
 8106f06:	bd30      	pop	{r4, r5, pc}
 8106f08:	10018908 	.word	0x10018908
 8106f0c:	081d3250 	.word	0x081d3250
 8106f10:	1001890c 	.word	0x1001890c
 8106f14:	10018904 	.word	0x10018904
 8106f18:	10018900 	.word	0x10018900
 8106f1c:	081d3268 	.word	0x081d3268
 8106f20:	081d31fe 	.word	0x081d31fe
 8106f24:	081d3280 	.word	0x081d3280
 8106f28:	081d328d 	.word	0x081d328d
 8106f2c:	10018910 	.word	0x10018910

08106f30 <arm_rfft_32_fast_init_f32>:
 8106f30:	b180      	cbz	r0, 8106f54 <arm_rfft_32_fast_init_f32+0x24>
 8106f32:	4b0a      	ldr	r3, [pc, #40]	; (8106f5c <arm_rfft_32_fast_init_f32+0x2c>)
 8106f34:	4a0a      	ldr	r2, [pc, #40]	; (8106f60 <arm_rfft_32_fast_init_f32+0x30>)
 8106f36:	8999      	ldrh	r1, [r3, #12]
 8106f38:	b430      	push	{r4, r5}
 8106f3a:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8106f3e:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8106f42:	8181      	strh	r1, [r0, #12]
 8106f44:	2320      	movs	r3, #32
 8106f46:	2110      	movs	r1, #16
 8106f48:	8001      	strh	r1, [r0, #0]
 8106f4a:	8203      	strh	r3, [r0, #16]
 8106f4c:	6142      	str	r2, [r0, #20]
 8106f4e:	bc30      	pop	{r4, r5}
 8106f50:	2000      	movs	r0, #0
 8106f52:	4770      	bx	lr
 8106f54:	f04f 30ff 	mov.w	r0, #4294967295
 8106f58:	4770      	bx	lr
 8106f5a:	bf00      	nop
 8106f5c:	081d6818 	.word	0x081d6818
 8106f60:	081e1df8 	.word	0x081e1df8

08106f64 <arm_rfft_64_fast_init_f32>:
 8106f64:	b180      	cbz	r0, 8106f88 <arm_rfft_64_fast_init_f32+0x24>
 8106f66:	4b0a      	ldr	r3, [pc, #40]	; (8106f90 <arm_rfft_64_fast_init_f32+0x2c>)
 8106f68:	4a0a      	ldr	r2, [pc, #40]	; (8106f94 <arm_rfft_64_fast_init_f32+0x30>)
 8106f6a:	8999      	ldrh	r1, [r3, #12]
 8106f6c:	b430      	push	{r4, r5}
 8106f6e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8106f72:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8106f76:	8181      	strh	r1, [r0, #12]
 8106f78:	2340      	movs	r3, #64	; 0x40
 8106f7a:	2120      	movs	r1, #32
 8106f7c:	8001      	strh	r1, [r0, #0]
 8106f7e:	8203      	strh	r3, [r0, #16]
 8106f80:	6142      	str	r2, [r0, #20]
 8106f82:	bc30      	pop	{r4, r5}
 8106f84:	2000      	movs	r0, #0
 8106f86:	4770      	bx	lr
 8106f88:	f04f 30ff 	mov.w	r0, #4294967295
 8106f8c:	4770      	bx	lr
 8106f8e:	bf00      	nop
 8106f90:	081d6848 	.word	0x081d6848
 8106f94:	081e6678 	.word	0x081e6678

08106f98 <arm_rfft_128_fast_init_f32>:
 8106f98:	b180      	cbz	r0, 8106fbc <arm_rfft_128_fast_init_f32+0x24>
 8106f9a:	4b0a      	ldr	r3, [pc, #40]	; (8106fc4 <arm_rfft_128_fast_init_f32+0x2c>)
 8106f9c:	4a0a      	ldr	r2, [pc, #40]	; (8106fc8 <arm_rfft_128_fast_init_f32+0x30>)
 8106f9e:	8999      	ldrh	r1, [r3, #12]
 8106fa0:	b430      	push	{r4, r5}
 8106fa2:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8106fa6:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8106faa:	8181      	strh	r1, [r0, #12]
 8106fac:	2380      	movs	r3, #128	; 0x80
 8106fae:	2140      	movs	r1, #64	; 0x40
 8106fb0:	8001      	strh	r1, [r0, #0]
 8106fb2:	8203      	strh	r3, [r0, #16]
 8106fb4:	6142      	str	r2, [r0, #20]
 8106fb6:	bc30      	pop	{r4, r5}
 8106fb8:	2000      	movs	r0, #0
 8106fba:	4770      	bx	lr
 8106fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8106fc0:	4770      	bx	lr
 8106fc2:	bf00      	nop
 8106fc4:	081d6868 	.word	0x081d6868
 8106fc8:	081df7f8 	.word	0x081df7f8

08106fcc <arm_rfft_256_fast_init_f32>:
 8106fcc:	b188      	cbz	r0, 8106ff2 <arm_rfft_256_fast_init_f32+0x26>
 8106fce:	4b0a      	ldr	r3, [pc, #40]	; (8106ff8 <arm_rfft_256_fast_init_f32+0x2c>)
 8106fd0:	4a0a      	ldr	r2, [pc, #40]	; (8106ffc <arm_rfft_256_fast_init_f32+0x30>)
 8106fd2:	8999      	ldrh	r1, [r3, #12]
 8106fd4:	b430      	push	{r4, r5}
 8106fd6:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8106fda:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8106fde:	8181      	strh	r1, [r0, #12]
 8106fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106fe4:	2180      	movs	r1, #128	; 0x80
 8106fe6:	8001      	strh	r1, [r0, #0]
 8106fe8:	8203      	strh	r3, [r0, #16]
 8106fea:	6142      	str	r2, [r0, #20]
 8106fec:	bc30      	pop	{r4, r5}
 8106fee:	2000      	movs	r0, #0
 8106ff0:	4770      	bx	lr
 8106ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8106ff6:	4770      	bx	lr
 8106ff8:	081d6808 	.word	0x081d6808
 8106ffc:	081e19f8 	.word	0x081e19f8

08107000 <arm_rfft_512_fast_init_f32>:
 8107000:	b190      	cbz	r0, 8107028 <arm_rfft_512_fast_init_f32+0x28>
 8107002:	4b0b      	ldr	r3, [pc, #44]	; (8107030 <arm_rfft_512_fast_init_f32+0x30>)
 8107004:	4a0b      	ldr	r2, [pc, #44]	; (8107034 <arm_rfft_512_fast_init_f32+0x34>)
 8107006:	8999      	ldrh	r1, [r3, #12]
 8107008:	b430      	push	{r4, r5}
 810700a:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810700e:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107012:	8181      	strh	r1, [r0, #12]
 8107014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8107018:	f44f 7180 	mov.w	r1, #256	; 0x100
 810701c:	8001      	strh	r1, [r0, #0]
 810701e:	8203      	strh	r3, [r0, #16]
 8107020:	6142      	str	r2, [r0, #20]
 8107022:	bc30      	pop	{r4, r5}
 8107024:	2000      	movs	r0, #0
 8107026:	4770      	bx	lr
 8107028:	f04f 30ff 	mov.w	r0, #4294967295
 810702c:	4770      	bx	lr
 810702e:	bf00      	nop
 8107030:	081d6838 	.word	0x081d6838
 8107034:	081e5e78 	.word	0x081e5e78

08107038 <arm_rfft_1024_fast_init_f32>:
 8107038:	b190      	cbz	r0, 8107060 <arm_rfft_1024_fast_init_f32+0x28>
 810703a:	4b0b      	ldr	r3, [pc, #44]	; (8107068 <arm_rfft_1024_fast_init_f32+0x30>)
 810703c:	4a0b      	ldr	r2, [pc, #44]	; (810706c <arm_rfft_1024_fast_init_f32+0x34>)
 810703e:	8999      	ldrh	r1, [r3, #12]
 8107040:	b430      	push	{r4, r5}
 8107042:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107046:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810704a:	8181      	strh	r1, [r0, #12]
 810704c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8107050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8107054:	8001      	strh	r1, [r0, #0]
 8107056:	8203      	strh	r3, [r0, #16]
 8107058:	6142      	str	r2, [r0, #20]
 810705a:	bc30      	pop	{r4, r5}
 810705c:	2000      	movs	r0, #0
 810705e:	4770      	bx	lr
 8107060:	f04f 30ff 	mov.w	r0, #4294967295
 8107064:	4770      	bx	lr
 8107066:	bf00      	nop
 8107068:	081d6858 	.word	0x081d6858
 810706c:	081de7f8 	.word	0x081de7f8

08107070 <arm_rfft_2048_fast_init_f32>:
 8107070:	b190      	cbz	r0, 8107098 <arm_rfft_2048_fast_init_f32+0x28>
 8107072:	4b0b      	ldr	r3, [pc, #44]	; (81070a0 <arm_rfft_2048_fast_init_f32+0x30>)
 8107074:	4a0b      	ldr	r2, [pc, #44]	; (81070a4 <arm_rfft_2048_fast_init_f32+0x34>)
 8107076:	8999      	ldrh	r1, [r3, #12]
 8107078:	b430      	push	{r4, r5}
 810707a:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810707e:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107082:	8181      	strh	r1, [r0, #12]
 8107084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 810708c:	8001      	strh	r1, [r0, #0]
 810708e:	8203      	strh	r3, [r0, #16]
 8107090:	6142      	str	r2, [r0, #20]
 8107092:	bc30      	pop	{r4, r5}
 8107094:	2000      	movs	r0, #0
 8107096:	4770      	bx	lr
 8107098:	f04f 30ff 	mov.w	r0, #4294967295
 810709c:	4770      	bx	lr
 810709e:	bf00      	nop
 81070a0:	081d67f8 	.word	0x081d67f8
 81070a4:	081df9f8 	.word	0x081df9f8

081070a8 <arm_rfft_4096_fast_init_f32>:
 81070a8:	b190      	cbz	r0, 81070d0 <arm_rfft_4096_fast_init_f32+0x28>
 81070aa:	4b0b      	ldr	r3, [pc, #44]	; (81070d8 <arm_rfft_4096_fast_init_f32+0x30>)
 81070ac:	4a0b      	ldr	r2, [pc, #44]	; (81070dc <arm_rfft_4096_fast_init_f32+0x34>)
 81070ae:	8999      	ldrh	r1, [r3, #12]
 81070b0:	b430      	push	{r4, r5}
 81070b2:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81070b6:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81070ba:	8181      	strh	r1, [r0, #12]
 81070bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81070c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81070c4:	8001      	strh	r1, [r0, #0]
 81070c6:	8203      	strh	r3, [r0, #16]
 81070c8:	6142      	str	r2, [r0, #20]
 81070ca:	bc30      	pop	{r4, r5}
 81070cc:	2000      	movs	r0, #0
 81070ce:	4770      	bx	lr
 81070d0:	f04f 30ff 	mov.w	r0, #4294967295
 81070d4:	4770      	bx	lr
 81070d6:	bf00      	nop
 81070d8:	081d6828 	.word	0x081d6828
 81070dc:	081e1e78 	.word	0x081e1e78

081070e0 <arm_radix8_butterfly_f32>:
 81070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81070e4:	ed2d 8b10 	vpush	{d8-d15}
 81070e8:	b097      	sub	sp, #92	; 0x5c
 81070ea:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 81070ee:	4603      	mov	r3, r0
 81070f0:	3304      	adds	r3, #4
 81070f2:	eddf cacb 	vldr	s25, [pc, #812]	; 8107420 <arm_radix8_butterfly_f32+0x340>
 81070f6:	9014      	str	r0, [sp, #80]	; 0x50
 81070f8:	468a      	mov	sl, r1
 81070fa:	468b      	mov	fp, r1
 81070fc:	9315      	str	r3, [sp, #84]	; 0x54
 81070fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8107100:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8107104:	eb04 1246 	add.w	r2, r4, r6, lsl #5
 8107108:	eb02 1006 	add.w	r0, r2, r6, lsl #4
 810710c:	0131      	lsls	r1, r6, #4
 810710e:	eba6 0386 	sub.w	r3, r6, r6, lsl #2
 8107112:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8107116:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 810711a:	e9cd 0100 	strd	r0, r1, [sp]
 810711e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8107122:	3104      	adds	r1, #4
 8107124:	f108 0004 	add.w	r0, r8, #4
 8107128:	9611      	str	r6, [sp, #68]	; 0x44
 810712a:	4420      	add	r0, r4
 810712c:	4421      	add	r1, r4
 810712e:	012c      	lsls	r4, r5, #4
 8107130:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8107134:	9403      	str	r4, [sp, #12]
 8107136:	00ec      	lsls	r4, r5, #3
 8107138:	9d11      	ldr	r5, [sp, #68]	; 0x44
 810713a:	9404      	str	r4, [sp, #16]
 810713c:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8107140:	9405      	str	r4, [sp, #20]
 8107142:	016c      	lsls	r4, r5, #5
 8107144:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
 8107148:	9402      	str	r4, [sp, #8]
 810714a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810714c:	9c00      	ldr	r4, [sp, #0]
 810714e:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 8107152:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8107156:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810715a:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 810715e:	f04f 0c00 	mov.w	ip, #0
 8107162:	ed51 aa01 	vldr	s21, [r1, #-4]
 8107166:	edd3 1a00 	vldr	s3, [r3]
 810716a:	ed92 7a00 	vldr	s14, [r2]
 810716e:	ed94 5a00 	vldr	s10, [r4]
 8107172:	ed96 4a00 	vldr	s8, [r6]
 8107176:	edd7 7a00 	vldr	s15, [r7]
 810717a:	ed15 2a01 	vldr	s4, [r5, #-4]
 810717e:	ed50 6a01 	vldr	s13, [r0, #-4]
 8107182:	ee32 ba07 	vadd.f32	s22, s4, s14
 8107186:	ee76 0a84 	vadd.f32	s1, s13, s8
 810718a:	ee7a 5a85 	vadd.f32	s11, s21, s10
 810718e:	ee31 0aa7 	vadd.f32	s0, s3, s15
 8107192:	ee3b 6a25 	vadd.f32	s12, s22, s11
 8107196:	ee70 4a80 	vadd.f32	s9, s1, s0
 810719a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 810719e:	ee36 4a24 	vadd.f32	s8, s12, s9
 81071a2:	ee36 6a64 	vsub.f32	s12, s12, s9
 81071a6:	ed05 4a01 	vstr	s8, [r5, #-4]
 81071aa:	ed82 6a00 	vstr	s12, [r2]
 81071ae:	edd0 ba00 	vldr	s23, [r0]
 81071b2:	edd6 2a01 	vldr	s5, [r6, #4]
 81071b6:	edd3 9a01 	vldr	s19, [r3, #4]
 81071ba:	ed95 aa00 	vldr	s20, [r5]
 81071be:	ed92 6a01 	vldr	s12, [r2, #4]
 81071c2:	ed97 3a01 	vldr	s6, [r7, #4]
 81071c6:	ed91 ca00 	vldr	s24, [r1]
 81071ca:	edd4 4a01 	vldr	s9, [r4, #4]
 81071ce:	ee7b 3ae2 	vsub.f32	s7, s23, s5
 81071d2:	ee36 9ae1 	vsub.f32	s18, s13, s3
 81071d6:	ee32 2a47 	vsub.f32	s4, s4, s14
 81071da:	ee73 8ae9 	vsub.f32	s17, s7, s19
 81071de:	ee3a 4a46 	vsub.f32	s8, s20, s12
 81071e2:	ee39 9a27 	vadd.f32	s18, s18, s15
 81071e6:	ee78 8a83 	vadd.f32	s17, s17, s6
 81071ea:	eeb0 8a42 	vmov.f32	s16, s4
 81071ee:	eea9 8a6c 	vfms.f32	s16, s18, s25
 81071f2:	44dc      	add	ip, fp
 81071f4:	45e2      	cmp	sl, ip
 81071f6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 81071fa:	eeb0 1a44 	vmov.f32	s2, s8
 81071fe:	eea8 1aec 	vfms.f32	s2, s17, s25
 8107202:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8107206:	ee33 7aa9 	vadd.f32	s14, s7, s19
 810720a:	ee7c 3a64 	vsub.f32	s7, s24, s9
 810720e:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8107212:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8107216:	ee7a 1ac5 	vsub.f32	s3, s21, s10
 810721a:	ee3c aa24 	vadd.f32	s20, s24, s9
 810721e:	ee74 4acc 	vsub.f32	s9, s9, s24
 8107222:	ee39 3a83 	vadd.f32	s6, s19, s6
 8107226:	ee35 5a6a 	vsub.f32	s10, s10, s21
 810722a:	eef0 9a63 	vmov.f32	s19, s7
 810722e:	eef0 aa48 	vmov.f32	s21, s16
 8107232:	eee7 9a2c 	vfma.f32	s19, s14, s25
 8107236:	eea8 4aac 	vfma.f32	s8, s17, s25
 810723a:	eee7 4a2c 	vfma.f32	s9, s14, s25
 810723e:	eee7 aa6c 	vfms.f32	s21, s14, s25
 8107242:	eef0 8a41 	vmov.f32	s17, s2
 8107246:	eeb0 7a42 	vmov.f32	s14, s4
 810724a:	eeb0 2a61 	vmov.f32	s4, s3
 810724e:	ee7b 6a65 	vsub.f32	s13, s22, s11
 8107252:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 8107256:	ee76 5a4a 	vsub.f32	s11, s12, s20
 810725a:	eea9 7a2c 	vfma.f32	s14, s18, s25
 810725e:	eea7 2aac 	vfma.f32	s4, s15, s25
 8107262:	eea7 5aac 	vfma.f32	s10, s15, s25
 8107266:	eee7 8aec 	vfms.f32	s17, s15, s25
 810726a:	ee32 ba83 	vadd.f32	s22, s5, s6
 810726e:	ee76 bac3 	vsub.f32	s23, s13, s6
 8107272:	ee35 9ae0 	vsub.f32	s18, s11, s1
 8107276:	ee75 7ac0 	vsub.f32	s15, s11, s0
 810727a:	ee36 6a0a 	vadd.f32	s12, s12, s20
 810727e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8107282:	ee36 aa0b 	vadd.f32	s20, s12, s22
 8107286:	ee76 6a83 	vadd.f32	s13, s13, s6
 810728a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 810728e:	ee34 3a42 	vsub.f32	s6, s8, s4
 8107292:	ee77 0a29 	vadd.f32	s1, s14, s19
 8107296:	ee36 6a4b 	vsub.f32	s12, s12, s22
 810729a:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 810729e:	ee39 0a00 	vadd.f32	s0, s18, s0
 81072a2:	ee73 3aaa 	vadd.f32	s7, s7, s21
 81072a6:	ee78 4a24 	vadd.f32	s9, s16, s9
 81072aa:	ee37 7a69 	vsub.f32	s14, s14, s19
 81072ae:	ee31 5a05 	vadd.f32	s10, s2, s10
 81072b2:	ee71 5aa8 	vadd.f32	s11, s3, s17
 81072b6:	ee32 4a04 	vadd.f32	s8, s4, s8
 81072ba:	ed85 aa00 	vstr	s20, [r5]
 81072be:	ed82 6a01 	vstr	s12, [r2, #4]
 81072c2:	444d      	add	r5, r9
 81072c4:	ed41 2a01 	vstr	s5, [r1, #-4]
 81072c8:	444a      	add	r2, r9
 81072ca:	edc4 6a00 	vstr	s13, [r4]
 81072ce:	ed81 0a00 	vstr	s0, [r1]
 81072d2:	edc4 7a01 	vstr	s15, [r4, #4]
 81072d6:	4449      	add	r1, r9
 81072d8:	ed40 0a01 	vstr	s1, [r0, #-4]
 81072dc:	444c      	add	r4, r9
 81072de:	ed87 7a00 	vstr	s14, [r7]
 81072e2:	edc6 3a00 	vstr	s7, [r6]
 81072e6:	edc3 4a00 	vstr	s9, [r3]
 81072ea:	ed80 3a00 	vstr	s6, [r0]
 81072ee:	ed87 4a01 	vstr	s8, [r7, #4]
 81072f2:	4448      	add	r0, r9
 81072f4:	ed86 5a01 	vstr	s10, [r6, #4]
 81072f8:	444f      	add	r7, r9
 81072fa:	edc3 5a01 	vstr	s11, [r3, #4]
 81072fe:	444e      	add	r6, r9
 8107300:	444b      	add	r3, r9
 8107302:	f63f af2e 	bhi.w	8107162 <arm_radix8_butterfly_f32+0x82>
 8107306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8107308:	2b07      	cmp	r3, #7
 810730a:	f240 81c9 	bls.w	81076a0 <arm_radix8_butterfly_f32+0x5c0>
 810730e:	9d02      	ldr	r5, [sp, #8]
 8107310:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8107312:	9b01      	ldr	r3, [sp, #4]
 8107314:	9803      	ldr	r0, [sp, #12]
 8107316:	9904      	ldr	r1, [sp, #16]
 8107318:	9a05      	ldr	r2, [sp, #20]
 810731a:	3508      	adds	r5, #8
 810731c:	1975      	adds	r5, r6, r5
 810731e:	330c      	adds	r3, #12
 8107320:	950e      	str	r5, [sp, #56]	; 0x38
 8107322:	4635      	mov	r5, r6
 8107324:	18eb      	adds	r3, r5, r3
 8107326:	f108 0808 	add.w	r8, r8, #8
 810732a:	f10e 0408 	add.w	r4, lr, #8
 810732e:	3008      	adds	r0, #8
 8107330:	3108      	adds	r1, #8
 8107332:	3208      	adds	r2, #8
 8107334:	9307      	str	r3, [sp, #28]
 8107336:	f105 030c 	add.w	r3, r5, #12
 810733a:	4446      	add	r6, r8
 810733c:	f04f 0e00 	mov.w	lr, #0
 8107340:	192c      	adds	r4, r5, r4
 8107342:	1828      	adds	r0, r5, r0
 8107344:	1869      	adds	r1, r5, r1
 8107346:	18aa      	adds	r2, r5, r2
 8107348:	9308      	str	r3, [sp, #32]
 810734a:	465b      	mov	r3, fp
 810734c:	960d      	str	r6, [sp, #52]	; 0x34
 810734e:	46f3      	mov	fp, lr
 8107350:	940c      	str	r4, [sp, #48]	; 0x30
 8107352:	900b      	str	r0, [sp, #44]	; 0x2c
 8107354:	910a      	str	r1, [sp, #40]	; 0x28
 8107356:	9209      	str	r2, [sp, #36]	; 0x24
 8107358:	f04f 0801 	mov.w	r8, #1
 810735c:	469e      	mov	lr, r3
 810735e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8107360:	449b      	add	fp, r3
 8107362:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8107364:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8107368:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 810736c:	9310      	str	r3, [sp, #64]	; 0x40
 810736e:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 8107372:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8107376:	9102      	str	r1, [sp, #8]
 8107378:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 810737c:	eb01 05cb 	add.w	r5, r1, fp, lsl #3
 8107380:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8107384:	edd6 7a00 	vldr	s15, [r6]
 8107388:	930f      	str	r3, [sp, #60]	; 0x3c
 810738a:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 810738e:	9101      	str	r1, [sp, #4]
 8107390:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8107394:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
 8107398:	edd3 aa01 	vldr	s21, [r3, #4]
 810739c:	edcd 7a06 	vstr	s15, [sp, #24]
 81073a0:	9b01      	ldr	r3, [sp, #4]
 81073a2:	edd5 7a00 	vldr	s15, [r5]
 81073a6:	ed97 ba01 	vldr	s22, [r7, #4]
 81073aa:	edcd 7a05 	vstr	s15, [sp, #20]
 81073ae:	edd3 7a00 	vldr	s15, [r3]
 81073b2:	9b02      	ldr	r3, [sp, #8]
 81073b4:	edcd 7a04 	vstr	s15, [sp, #16]
 81073b8:	edd3 7a00 	vldr	s15, [r3]
 81073bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81073be:	edcd 7a03 	vstr	s15, [sp, #12]
 81073c2:	eb07 0ccb 	add.w	ip, r7, fp, lsl #3
 81073c6:	edd3 7a00 	vldr	s15, [r3]
 81073ca:	eddc ba01 	vldr	s23, [ip, #4]
 81073ce:	edcd 7a02 	vstr	s15, [sp, #8]
 81073d2:	eb0c 01cb 	add.w	r1, ip, fp, lsl #3
 81073d6:	edd2 7a00 	vldr	s15, [r2]
 81073da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 81073dc:	9100      	str	r1, [sp, #0]
 81073de:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
 81073e2:	4601      	mov	r1, r0
 81073e4:	ed91 da01 	vldr	s26, [r1, #4]
 81073e8:	edcd 7a01 	vstr	s15, [sp, #4]
 81073ec:	9900      	ldr	r1, [sp, #0]
 81073ee:	edd2 7a00 	vldr	s15, [r2]
 81073f2:	ed91 ca01 	vldr	s24, [r1, #4]
 81073f6:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 81073fa:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 81073fe:	ed94 ea01 	vldr	s28, [r4, #4]
 8107402:	edd0 da01 	vldr	s27, [r0, #4]
 8107406:	edcd 7a00 	vstr	s15, [sp]
 810740a:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 810740e:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
 8107412:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 8107416:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 810741a:	46c4      	mov	ip, r8
 810741c:	e002      	b.n	8107424 <arm_radix8_butterfly_f32+0x344>
 810741e:	bf00      	nop
 8107420:	3f3504f3 	.word	0x3f3504f3
 8107424:	ed94 9a00 	vldr	s18, [r4]
 8107428:	ed90 fa00 	vldr	s30, [r0]
 810742c:	ed91 6a00 	vldr	s12, [r1]
 8107430:	edd5 7a00 	vldr	s15, [r5]
 8107434:	edd3 6a00 	vldr	s13, [r3]
 8107438:	ed57 4a01 	vldr	s9, [r7, #-4]
 810743c:	ed92 5a00 	vldr	s10, [r2]
 8107440:	ed56 3a01 	vldr	s7, [r6, #-4]
 8107444:	ed96 aa00 	vldr	s20, [r6]
 8107448:	ee35 0a06 	vadd.f32	s0, s10, s12
 810744c:	ee73 5aa6 	vadd.f32	s11, s7, s13
 8107450:	ee39 8a27 	vadd.f32	s16, s18, s15
 8107454:	ee34 7a8f 	vadd.f32	s14, s9, s30
 8107458:	ee70 2a08 	vadd.f32	s5, s0, s16
 810745c:	ee75 ea87 	vadd.f32	s29, s11, s14
 8107460:	ee35 5a46 	vsub.f32	s10, s10, s12
 8107464:	ee3e 6aa2 	vadd.f32	s12, s29, s5
 8107468:	ee73 3ae6 	vsub.f32	s7, s7, s13
 810746c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8107470:	edd1 9a01 	vldr	s19, [r1, #4]
 8107474:	edd2 fa01 	vldr	s31, [r2, #4]
 8107478:	edd4 6a01 	vldr	s13, [r4, #4]
 810747c:	edd3 1a01 	vldr	s3, [r3, #4]
 8107480:	ed95 3a01 	vldr	s6, [r5, #4]
 8107484:	edd0 8a01 	vldr	s17, [r0, #4]
 8107488:	ed97 4a00 	vldr	s8, [r7]
 810748c:	ee3f 6ae9 	vsub.f32	s12, s31, s19
 8107490:	ee35 1a49 	vsub.f32	s2, s10, s18
 8107494:	ee76 0a66 	vsub.f32	s1, s12, s13
 8107498:	ee31 1a27 	vadd.f32	s2, s2, s15
 810749c:	ee3a 2a61 	vsub.f32	s4, s20, s3
 81074a0:	ee75 7a67 	vsub.f32	s15, s10, s15
 81074a4:	ee70 0a83 	vadd.f32	s1, s1, s6
 81074a8:	ee3f 5aa9 	vadd.f32	s10, s31, s19
 81074ac:	ee74 9acf 	vsub.f32	s19, s9, s30
 81074b0:	ee77 7a89 	vadd.f32	s15, s15, s18
 81074b4:	ee7a 1a21 	vadd.f32	s3, s20, s3
 81074b8:	eeb0 aa42 	vmov.f32	s20, s4
 81074bc:	ee74 fa68 	vsub.f32	s31, s8, s17
 81074c0:	eea0 aaec 	vfms.f32	s20, s1, s25
 81074c4:	44f4      	add	ip, lr
 81074c6:	45e2      	cmp	sl, ip
 81074c8:	ee35 7ac7 	vsub.f32	s14, s11, s14
 81074cc:	eeb0 9a63 	vmov.f32	s18, s7
 81074d0:	ee74 5a28 	vadd.f32	s11, s8, s17
 81074d4:	ee38 4ac4 	vsub.f32	s8, s17, s8
 81074d8:	eef0 8a69 	vmov.f32	s17, s19
 81074dc:	eea1 9a6c 	vfms.f32	s18, s2, s25
 81074e0:	eee7 8aac 	vfma.f32	s17, s15, s25
 81074e4:	ee36 6a43 	vsub.f32	s12, s12, s6
 81074e8:	ee7f 4a64 	vsub.f32	s9, s30, s9
 81074ec:	ee36 6a26 	vadd.f32	s12, s12, s13
 81074f0:	eea0 2aac 	vfma.f32	s4, s1, s25
 81074f4:	eef0 0a4a 	vmov.f32	s1, s20
 81074f8:	eee7 0aec 	vfms.f32	s1, s15, s25
 81074fc:	eee7 4aac 	vfma.f32	s9, s15, s25
 8107500:	eef0 7a68 	vmov.f32	s15, s17
 8107504:	eef0 8a49 	vmov.f32	s17, s18
 8107508:	ee36 3a83 	vadd.f32	s6, s13, s6
 810750c:	eee6 8a6c 	vfms.f32	s17, s12, s25
 8107510:	eee1 3a2c 	vfma.f32	s7, s2, s25
 8107514:	eeb0 1a6f 	vmov.f32	s2, s31
 8107518:	eea6 1a2c 	vfma.f32	s2, s12, s25
 810751c:	ee71 6ae5 	vsub.f32	s13, s3, s11
 8107520:	eea6 4a2c 	vfma.f32	s8, s12, s25
 8107524:	ee71 5aa5 	vadd.f32	s11, s3, s11
 8107528:	ee75 1a03 	vadd.f32	s3, s10, s6
 810752c:	ee7e 2ae2 	vsub.f32	s5, s29, s5
 8107530:	ee37 fa43 	vsub.f32	s30, s14, s6
 8107534:	ee75 eae1 	vsub.f32	s29, s11, s3
 8107538:	eeb0 6a68 	vmov.f32	s12, s17
 810753c:	ee76 8ac0 	vsub.f32	s17, s13, s0
 8107540:	ee34 4a09 	vadd.f32	s8, s8, s18
 8107544:	ee76 fa2f 	vadd.f32	s31, s12, s31
 8107548:	ee76 6ac8 	vsub.f32	s13, s13, s16
 810754c:	ee33 6a81 	vadd.f32	s12, s7, s2
 8107550:	ee38 8a88 	vadd.f32	s16, s17, s16
 8107554:	ee73 3ac1 	vsub.f32	s7, s7, s2
 8107558:	ee37 7a45 	vsub.f32	s14, s14, s10
 810755c:	ee2c 1a2e 	vmul.f32	s2, s24, s29
 8107560:	ee3f 5a05 	vadd.f32	s10, s30, s10
 8107564:	ee22 9acc 	vnmul.f32	s18, s5, s24
 8107568:	ed9d fa03 	vldr	s30, [sp, #12]
 810756c:	ee70 6a26 	vadd.f32	s13, s0, s13
 8107570:	ee33 7a07 	vadd.f32	s14, s6, s14
 8107574:	eeaf 1a22 	vfma.f32	s2, s30, s5
 8107578:	eeaf 9a2e 	vfma.f32	s18, s30, s29
 810757c:	ee7a 4a24 	vadd.f32	s9, s20, s9
 8107580:	ed9d fa01 	vldr	s30, [sp, #4]
 8107584:	ee79 9aa0 	vadd.f32	s19, s19, s1
 8107588:	ee25 aa4b 	vnmul.f32	s20, s10, s22
 810758c:	ee72 0a67 	vsub.f32	s1, s4, s15
 8107590:	ee37 2a82 	vadd.f32	s4, s15, s4
 8107594:	ee6b 7a08 	vmul.f32	s15, s22, s16
 8107598:	eeaf aa08 	vfma.f32	s20, s30, s16
 810759c:	eeef 7a05 	vfma.f32	s15, s30, s10
 81075a0:	ee2d 3aa6 	vmul.f32	s6, s27, s13
 81075a4:	ed9d fa05 	vldr	s30, [sp, #20]
 81075a8:	ee67 8a6d 	vnmul.f32	s17, s14, s27
 81075ac:	eeaf 3a07 	vfma.f32	s6, s30, s14
 81075b0:	eeef 8a26 	vfma.f32	s17, s30, s13
 81075b4:	ee66 2a6a 	vnmul.f32	s5, s12, s21
 81075b8:	ed9d fa00 	vldr	s30, [sp]
 81075bc:	ee2a 0aa0 	vmul.f32	s0, s21, s1
 81075c0:	eeef 2a20 	vfma.f32	s5, s30, s1
 81075c4:	ee6e ea02 	vmul.f32	s29, s28, s4
 81075c8:	eddd 0a06 	vldr	s1, [sp, #24]
 81075cc:	ee23 5ace 	vnmul.f32	s10, s7, s28
 81075d0:	eee0 eaa3 	vfma.f32	s29, s1, s7
 81075d4:	ee2b 8aa9 	vmul.f32	s16, s23, s19
 81075d8:	eddd 3a02 	vldr	s7, [sp, #8]
 81075dc:	eeaf 0a06 	vfma.f32	s0, s30, s12
 81075e0:	eea3 8a84 	vfma.f32	s16, s7, s8
 81075e4:	ee24 7a6b 	vnmul.f32	s14, s8, s23
 81075e8:	ee6d 6a24 	vmul.f32	s13, s26, s9
 81075ec:	ed9d 4a04 	vldr	s8, [sp, #16]
 81075f0:	ee2f 6acd 	vnmul.f32	s12, s31, s26
 81075f4:	eea0 5a82 	vfma.f32	s10, s1, s4
 81075f8:	eea3 7aa9 	vfma.f32	s14, s7, s19
 81075fc:	eee4 6a2f 	vfma.f32	s13, s8, s31
 8107600:	eea4 6a24 	vfma.f32	s12, s8, s9
 8107604:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8107608:	edc6 5a00 	vstr	s11, [r6]
 810760c:	ed83 1a00 	vstr	s2, [r3]
 8107610:	ed83 9a01 	vstr	s18, [r3, #4]
 8107614:	444e      	add	r6, r9
 8107616:	ed47 7a01 	vstr	s15, [r7, #-4]
 810761a:	ed87 aa00 	vstr	s20, [r7]
 810761e:	444b      	add	r3, r9
 8107620:	ed80 3a00 	vstr	s6, [r0]
 8107624:	edc0 8a01 	vstr	s17, [r0, #4]
 8107628:	444f      	add	r7, r9
 810762a:	ed82 0a00 	vstr	s0, [r2]
 810762e:	4448      	add	r0, r9
 8107630:	edc2 2a01 	vstr	s5, [r2, #4]
 8107634:	edc5 ea00 	vstr	s29, [r5]
 8107638:	ed85 5a01 	vstr	s10, [r5, #4]
 810763c:	444a      	add	r2, r9
 810763e:	edc1 6a00 	vstr	s13, [r1]
 8107642:	ed81 6a01 	vstr	s12, [r1, #4]
 8107646:	444d      	add	r5, r9
 8107648:	ed84 8a00 	vstr	s16, [r4]
 810764c:	ed84 7a01 	vstr	s14, [r4, #4]
 8107650:	4449      	add	r1, r9
 8107652:	444c      	add	r4, r9
 8107654:	f63f aee6 	bhi.w	8107424 <arm_radix8_butterfly_f32+0x344>
 8107658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810765a:	3308      	adds	r3, #8
 810765c:	930e      	str	r3, [sp, #56]	; 0x38
 810765e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107660:	3308      	adds	r3, #8
 8107662:	930d      	str	r3, [sp, #52]	; 0x34
 8107664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8107666:	3308      	adds	r3, #8
 8107668:	930c      	str	r3, [sp, #48]	; 0x30
 810766a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810766c:	3308      	adds	r3, #8
 810766e:	930b      	str	r3, [sp, #44]	; 0x2c
 8107670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107672:	3308      	adds	r3, #8
 8107674:	930a      	str	r3, [sp, #40]	; 0x28
 8107676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107678:	3308      	adds	r3, #8
 810767a:	9309      	str	r3, [sp, #36]	; 0x24
 810767c:	9b08      	ldr	r3, [sp, #32]
 810767e:	3308      	adds	r3, #8
 8107680:	9308      	str	r3, [sp, #32]
 8107682:	9b07      	ldr	r3, [sp, #28]
 8107684:	3308      	adds	r3, #8
 8107686:	9307      	str	r3, [sp, #28]
 8107688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810768a:	f108 0801 	add.w	r8, r8, #1
 810768e:	4543      	cmp	r3, r8
 8107690:	f47f ae65 	bne.w	810735e <arm_radix8_butterfly_f32+0x27e>
 8107694:	469b      	mov	fp, r3
 8107696:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8107698:	00db      	lsls	r3, r3, #3
 810769a:	b29b      	uxth	r3, r3
 810769c:	9312      	str	r3, [sp, #72]	; 0x48
 810769e:	e52e      	b.n	81070fe <arm_radix8_butterfly_f32+0x1e>
 81076a0:	b017      	add	sp, #92	; 0x5c
 81076a2:	ecbd 8b10 	vpop	{d8-d15}
 81076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81076aa:	bf00      	nop

081076ac <arm_cfft_radix8by2_f32>:
 81076ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81076b0:	f8b0 e000 	ldrh.w	lr, [r0]
 81076b4:	6842      	ldr	r2, [r0, #4]
 81076b6:	ed2d 8b08 	vpush	{d8-d11}
 81076ba:	4607      	mov	r7, r0
 81076bc:	4608      	mov	r0, r1
 81076be:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 81076c2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 81076c6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 81076ca:	b082      	sub	sp, #8
 81076cc:	f000 80a0 	beq.w	8107810 <arm_cfft_radix8by2_f32+0x164>
 81076d0:	008c      	lsls	r4, r1, #2
 81076d2:	3410      	adds	r4, #16
 81076d4:	f100 0310 	add.w	r3, r0, #16
 81076d8:	1906      	adds	r6, r0, r4
 81076da:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 81076de:	4444      	add	r4, r8
 81076e0:	f102 0c10 	add.w	ip, r2, #16
 81076e4:	f108 0510 	add.w	r5, r8, #16
 81076e8:	ed15 2a04 	vldr	s4, [r5, #-16]
 81076ec:	ed55 2a03 	vldr	s5, [r5, #-12]
 81076f0:	ed14 5a04 	vldr	s10, [r4, #-16]
 81076f4:	ed54 5a03 	vldr	s11, [r4, #-12]
 81076f8:	ed53 4a04 	vldr	s9, [r3, #-16]
 81076fc:	ed55 8a02 	vldr	s17, [r5, #-8]
 8107700:	ed15 8a01 	vldr	s16, [r5, #-4]
 8107704:	ed16 3a04 	vldr	s6, [r6, #-16]
 8107708:	ed56 3a03 	vldr	s7, [r6, #-12]
 810770c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8107710:	ed14 7a01 	vldr	s14, [r4, #-4]
 8107714:	ed13 4a03 	vldr	s8, [r3, #-12]
 8107718:	ed53 6a02 	vldr	s13, [r3, #-8]
 810771c:	ed13 6a01 	vldr	s12, [r3, #-4]
 8107720:	ed16 0a02 	vldr	s0, [r6, #-8]
 8107724:	ed56 0a01 	vldr	s1, [r6, #-4]
 8107728:	ee74 ba82 	vadd.f32	s23, s9, s4
 810772c:	ee34 ba22 	vadd.f32	s22, s8, s5
 8107730:	ee73 9a05 	vadd.f32	s19, s6, s10
 8107734:	ee33 9aa5 	vadd.f32	s18, s7, s11
 8107738:	ee30 1a27 	vadd.f32	s2, s0, s15
 810773c:	ee70 1a87 	vadd.f32	s3, s1, s14
 8107740:	ee76 aaa8 	vadd.f32	s21, s13, s17
 8107744:	ee36 aa08 	vadd.f32	s20, s12, s16
 8107748:	ed43 ba04 	vstr	s23, [r3, #-16]
 810774c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8107750:	ed43 aa02 	vstr	s21, [r3, #-8]
 8107754:	ed03 aa01 	vstr	s20, [r3, #-4]
 8107758:	ed06 1a02 	vstr	s2, [r6, #-8]
 810775c:	ed46 1a01 	vstr	s3, [r6, #-4]
 8107760:	ed46 9a04 	vstr	s19, [r6, #-16]
 8107764:	ed06 9a03 	vstr	s18, [r6, #-12]
 8107768:	ee74 4ac2 	vsub.f32	s9, s9, s4
 810776c:	ee34 4a62 	vsub.f32	s8, s8, s5
 8107770:	ee35 5a43 	vsub.f32	s10, s10, s6
 8107774:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8107778:	ed1c 3a04 	vldr	s6, [ip, #-16]
 810777c:	ed5c 3a03 	vldr	s7, [ip, #-12]
 8107780:	ee23 2a65 	vnmul.f32	s4, s6, s11
 8107784:	ee64 1a23 	vmul.f32	s3, s8, s7
 8107788:	ee23 1ae4 	vnmul.f32	s2, s7, s9
 810778c:	ee65 2a03 	vmul.f32	s5, s10, s6
 8107790:	eea4 1a03 	vfma.f32	s2, s8, s6
 8107794:	3310      	adds	r3, #16
 8107796:	4573      	cmp	r3, lr
 8107798:	eee4 1a83 	vfma.f32	s3, s9, s6
 810779c:	f106 0610 	add.w	r6, r6, #16
 81077a0:	f10c 0c10 	add.w	ip, ip, #16
 81077a4:	eea5 2a23 	vfma.f32	s4, s10, s7
 81077a8:	f105 0510 	add.w	r5, r5, #16
 81077ac:	f104 0410 	add.w	r4, r4, #16
 81077b0:	eee5 2aa3 	vfma.f32	s5, s11, s7
 81077b4:	ed05 1a07 	vstr	s2, [r5, #-28]	; 0xffffffe4
 81077b8:	ed45 1a08 	vstr	s3, [r5, #-32]	; 0xffffffe0
 81077bc:	ed04 2a08 	vstr	s4, [r4, #-32]	; 0xffffffe0
 81077c0:	ed44 2a07 	vstr	s5, [r4, #-28]	; 0xffffffe4
 81077c4:	ed5c 5a05 	vldr	s11, [ip, #-20]	; 0xffffffec
 81077c8:	ed1c 5a06 	vldr	s10, [ip, #-24]	; 0xffffffe8
 81077cc:	ee76 6ae8 	vsub.f32	s13, s13, s17
 81077d0:	ee36 6a48 	vsub.f32	s12, s12, s16
 81077d4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 81077d8:	ee37 7a60 	vsub.f32	s14, s14, s1
 81077dc:	ee26 3a25 	vmul.f32	s6, s12, s11
 81077e0:	ee65 3ae6 	vnmul.f32	s7, s11, s13
 81077e4:	ee27 4a85 	vmul.f32	s8, s15, s10
 81077e8:	ee65 4a47 	vnmul.f32	s9, s10, s14
 81077ec:	eee6 3a05 	vfma.f32	s7, s12, s10
 81077f0:	eea6 3a85 	vfma.f32	s6, s13, s10
 81077f4:	eea7 4a25 	vfma.f32	s8, s14, s11
 81077f8:	eee7 4aa5 	vfma.f32	s9, s15, s11
 81077fc:	ed05 3a06 	vstr	s6, [r5, #-24]	; 0xffffffe8
 8107800:	ed45 3a05 	vstr	s7, [r5, #-20]	; 0xffffffec
 8107804:	ed04 4a05 	vstr	s8, [r4, #-20]	; 0xffffffec
 8107808:	ed44 4a06 	vstr	s9, [r4, #-24]	; 0xffffffe8
 810780c:	f47f af6c 	bne.w	81076e8 <arm_cfft_radix8by2_f32+0x3c>
 8107810:	b289      	uxth	r1, r1
 8107812:	2302      	movs	r3, #2
 8107814:	9101      	str	r1, [sp, #4]
 8107816:	f7ff fc63 	bl	81070e0 <arm_radix8_butterfly_f32>
 810781a:	9901      	ldr	r1, [sp, #4]
 810781c:	687a      	ldr	r2, [r7, #4]
 810781e:	4640      	mov	r0, r8
 8107820:	2302      	movs	r3, #2
 8107822:	b002      	add	sp, #8
 8107824:	ecbd 8b08 	vpop	{d8-d11}
 8107828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810782c:	f7ff bc58 	b.w	81070e0 <arm_radix8_butterfly_f32>

08107830 <arm_cfft_radix8by4_f32>:
 8107830:	8803      	ldrh	r3, [r0, #0]
 8107832:	ed91 7a00 	vldr	s14, [r1]
 8107836:	edd1 7a01 	vldr	s15, [r1, #4]
 810783a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810783e:	085b      	lsrs	r3, r3, #1
 8107840:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8107844:	edd2 5a00 	vldr	s11, [r2]
 8107848:	6847      	ldr	r7, [r0, #4]
 810784a:	ed92 4a01 	vldr	s8, [r2, #4]
 810784e:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8107852:	ed2d 8b0e 	vpush	{d8-d14}
 8107856:	ed98 5a00 	vldr	s10, [r8]
 810785a:	edd8 2a01 	vldr	s5, [r8, #4]
 810785e:	ee37 6a25 	vadd.f32	s12, s14, s11
 8107862:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 8107866:	edd5 4a00 	vldr	s9, [r5]
 810786a:	ed95 3a01 	vldr	s6, [r5, #4]
 810786e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8107872:	b08f      	sub	sp, #60	; 0x3c
 8107874:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8107878:	900d      	str	r0, [sp, #52]	; 0x34
 810787a:	4608      	mov	r0, r1
 810787c:	edc0 6a00 	vstr	s13, [r0]
 8107880:	ee37 7a65 	vsub.f32	s14, s14, s11
 8107884:	ee77 6a84 	vadd.f32	s13, s15, s8
 8107888:	edd8 5a01 	vldr	s11, [r8, #4]
 810788c:	ed95 2a01 	vldr	s4, [r5, #4]
 8107890:	920a      	str	r2, [sp, #40]	; 0x28
 8107892:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8107896:	ee36 6a64 	vsub.f32	s12, s12, s9
 810789a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 810789e:	ee73 3a07 	vadd.f32	s7, s6, s14
 81078a2:	ee35 4a27 	vadd.f32	s8, s10, s15
 81078a6:	4614      	mov	r4, r2
 81078a8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 81078ac:	3408      	adds	r4, #8
 81078ae:	462e      	mov	r6, r5
 81078b0:	ee74 7aa7 	vadd.f32	s15, s9, s15
 81078b4:	3108      	adds	r1, #8
 81078b6:	3608      	adds	r6, #8
 81078b8:	9406      	str	r4, [sp, #24]
 81078ba:	ee32 7a87 	vadd.f32	s14, s5, s14
 81078be:	ee36 6a45 	vsub.f32	s12, s12, s10
 81078c2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 81078c6:	ee75 5a82 	vadd.f32	s11, s11, s4
 81078ca:	ee73 3ae2 	vsub.f32	s7, s7, s5
 81078ce:	ee74 4a64 	vsub.f32	s9, s8, s9
 81078d2:	463c      	mov	r4, r7
 81078d4:	9103      	str	r1, [sp, #12]
 81078d6:	9607      	str	r6, [sp, #28]
 81078d8:	4611      	mov	r1, r2
 81078da:	f107 0608 	add.w	r6, r7, #8
 81078de:	085a      	lsrs	r2, r3, #1
 81078e0:	3418      	adds	r4, #24
 81078e2:	edc0 5a01 	vstr	s11, [r0, #4]
 81078e6:	920c      	str	r2, [sp, #48]	; 0x30
 81078e8:	edc5 3a00 	vstr	s7, [r5]
 81078ec:	edc5 4a01 	vstr	s9, [r5, #4]
 81078f0:	9602      	str	r6, [sp, #8]
 81078f2:	ed81 6a00 	vstr	s12, [r1]
 81078f6:	edc1 6a01 	vstr	s13, [r1, #4]
 81078fa:	9401      	str	r4, [sp, #4]
 81078fc:	ee37 7a43 	vsub.f32	s14, s14, s6
 8107900:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8107904:	3a02      	subs	r2, #2
 8107906:	463e      	mov	r6, r7
 8107908:	460c      	mov	r4, r1
 810790a:	4641      	mov	r1, r8
 810790c:	3610      	adds	r6, #16
 810790e:	3108      	adds	r1, #8
 8107910:	0852      	lsrs	r2, r2, #1
 8107912:	970b      	str	r7, [sp, #44]	; 0x2c
 8107914:	9509      	str	r5, [sp, #36]	; 0x24
 8107916:	9604      	str	r6, [sp, #16]
 8107918:	ed88 7a00 	vstr	s14, [r8]
 810791c:	9105      	str	r1, [sp, #20]
 810791e:	edc8 7a01 	vstr	s15, [r8, #4]
 8107922:	9208      	str	r2, [sp, #32]
 8107924:	f000 812f 	beq.w	8107b86 <arm_cfft_radix8by4_f32+0x356>
 8107928:	4639      	mov	r1, r7
 810792a:	009b      	lsls	r3, r3, #2
 810792c:	4622      	mov	r2, r4
 810792e:	3b0c      	subs	r3, #12
 8107930:	f101 0930 	add.w	r9, r1, #48	; 0x30
 8107934:	9908      	ldr	r1, [sp, #32]
 8107936:	f1a5 0c0c 	sub.w	ip, r5, #12
 810793a:	46b3      	mov	fp, r6
 810793c:	f107 0a20 	add.w	sl, r7, #32
 8107940:	4443      	add	r3, r8
 8107942:	f102 0710 	add.w	r7, r2, #16
 8107946:	f100 0e10 	add.w	lr, r0, #16
 810794a:	3510      	adds	r5, #16
 810794c:	3c0c      	subs	r4, #12
 810794e:	f1a8 060c 	sub.w	r6, r8, #12
 8107952:	f108 0210 	add.w	r2, r8, #16
 8107956:	ed12 5a02 	vldr	s10, [r2, #-8]
 810795a:	ed57 6a02 	vldr	s13, [r7, #-8]
 810795e:	ed15 0a02 	vldr	s0, [r5, #-8]
 8107962:	ed5e 5a02 	vldr	s11, [lr, #-8]
 8107966:	ed17 7a01 	vldr	s14, [r7, #-4]
 810796a:	ed52 0a01 	vldr	s1, [r2, #-4]
 810796e:	ed15 9a01 	vldr	s18, [r5, #-4]
 8107972:	ed5e 4a01 	vldr	s9, [lr, #-4]
 8107976:	ee75 3aa6 	vadd.f32	s7, s11, s13
 810797a:	ee70 7a05 	vadd.f32	s15, s0, s10
 810797e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8107982:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8107986:	ee34 4a87 	vadd.f32	s8, s9, s14
 810798a:	ed4e 7a02 	vstr	s15, [lr, #-8]
 810798e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8107992:	ed55 7a01 	vldr	s15, [r5, #-4]
 8107996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810799a:	ee74 4ac7 	vsub.f32	s9, s9, s14
 810799e:	ee77 7a84 	vadd.f32	s15, s15, s8
 81079a2:	ee75 dae0 	vsub.f32	s27, s11, s1
 81079a6:	ed4e 7a01 	vstr	s15, [lr, #-4]
 81079aa:	ed96 7a02 	vldr	s14, [r6, #8]
 81079ae:	ed93 ba02 	vldr	s22, [r3, #8]
 81079b2:	ed9c 1a02 	vldr	s2, [ip, #8]
 81079b6:	edd4 7a02 	vldr	s15, [r4, #8]
 81079ba:	edd6 1a01 	vldr	s3, [r6, #4]
 81079be:	edd3 9a01 	vldr	s19, [r3, #4]
 81079c2:	edd4 8a01 	vldr	s17, [r4, #4]
 81079c6:	ed9c 8a01 	vldr	s16, [ip, #4]
 81079ca:	ee71 aa07 	vadd.f32	s21, s2, s14
 81079ce:	ee37 aa8b 	vadd.f32	s20, s15, s22
 81079d2:	ee38 3a21 	vadd.f32	s6, s16, s3
 81079d6:	ee7a 2a8a 	vadd.f32	s5, s21, s20
 81079da:	ee37 6acb 	vsub.f32	s12, s15, s22
 81079de:	edcc 2a02 	vstr	s5, [ip, #8]
 81079e2:	edd3 2a01 	vldr	s5, [r3, #4]
 81079e6:	ed94 2a01 	vldr	s4, [r4, #4]
 81079ea:	ee32 2a22 	vadd.f32	s4, s4, s5
 81079ee:	ee71 2a29 	vadd.f32	s5, s2, s19
 81079f2:	ee32 2a03 	vadd.f32	s4, s4, s6
 81079f6:	ee72 2ac7 	vsub.f32	s5, s5, s14
 81079fa:	ed8c 2a01 	vstr	s4, [ip, #4]
 81079fe:	ee74 6ac0 	vsub.f32	s13, s9, s0
 8107a02:	ee36 ca61 	vsub.f32	s24, s12, s3
 8107a06:	ed5b ba01 	vldr	s23, [fp, #-4]
 8107a0a:	ed5b ca02 	vldr	s25, [fp, #-8]
 8107a0e:	ee72 2ae8 	vsub.f32	s5, s5, s17
 8107a12:	ee7d da89 	vadd.f32	s27, s27, s18
 8107a16:	ee76 6a85 	vadd.f32	s13, s13, s10
 8107a1a:	ee3c ca08 	vadd.f32	s24, s24, s16
 8107a1e:	ee22 eaac 	vmul.f32	s28, s5, s25
 8107a22:	ee2b daed 	vnmul.f32	s26, s23, s27
 8107a26:	ee66 eaab 	vmul.f32	s29, s13, s23
 8107a2a:	ee2c 2acc 	vnmul.f32	s4, s25, s24
 8107a2e:	eea6 daac 	vfma.f32	s26, s13, s25
 8107a32:	3901      	subs	r1, #1
 8107a34:	f10e 0e08 	add.w	lr, lr, #8
 8107a38:	eef0 6a4e 	vmov.f32	s13, s28
 8107a3c:	eea2 2aab 	vfma.f32	s4, s5, s23
 8107a40:	f1ac 0c08 	sub.w	ip, ip, #8
 8107a44:	f10b 0b08 	add.w	fp, fp, #8
 8107a48:	eeec 6a2b 	vfma.f32	s13, s24, s23
 8107a4c:	f105 0508 	add.w	r5, r5, #8
 8107a50:	f1a4 0408 	sub.w	r4, r4, #8
 8107a54:	eeed eaac 	vfma.f32	s29, s27, s25
 8107a58:	f10a 0a10 	add.w	sl, sl, #16
 8107a5c:	f107 0708 	add.w	r7, r7, #8
 8107a60:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8107a64:	ee33 3a68 	vsub.f32	s6, s6, s17
 8107a68:	ed05 da03 	vstr	s26, [r5, #-12]
 8107a6c:	ed45 ea04 	vstr	s29, [r5, #-16]
 8107a70:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8107a74:	ed84 2a04 	vstr	s4, [r4, #16]
 8107a78:	edc4 6a03 	vstr	s13, [r4, #12]
 8107a7c:	ee34 4a49 	vsub.f32	s8, s8, s18
 8107a80:	ed5a 6a07 	vldr	s13, [sl, #-28]	; 0xffffffe4
 8107a84:	ed5a 2a08 	vldr	s5, [sl, #-32]	; 0xffffffe0
 8107a88:	ee33 3a69 	vsub.f32	s6, s6, s19
 8107a8c:	ee77 7acb 	vsub.f32	s15, s15, s22
 8107a90:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8107a94:	ee34 4a60 	vsub.f32	s8, s8, s1
 8107a98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8107a9c:	ee26 2ac3 	vnmul.f32	s4, s13, s6
 8107aa0:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8107aa4:	ee64 aa26 	vmul.f32	s21, s8, s13
 8107aa8:	ee66 6ae3 	vnmul.f32	s13, s13, s7
 8107aac:	eee3 7a62 	vfms.f32	s15, s6, s5
 8107ab0:	f1a6 0608 	sub.w	r6, r6, #8
 8107ab4:	f109 0918 	add.w	r9, r9, #24
 8107ab8:	eeb0 3a42 	vmov.f32	s6, s4
 8107abc:	eee4 6a22 	vfma.f32	s13, s8, s5
 8107ac0:	f102 0208 	add.w	r2, r2, #8
 8107ac4:	f1a3 0308 	sub.w	r3, r3, #8
 8107ac8:	eeaa 3a22 	vfma.f32	s6, s20, s5
 8107acc:	eee3 aaa2 	vfma.f32	s21, s7, s5
 8107ad0:	ee37 7a29 	vadd.f32	s14, s14, s19
 8107ad4:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8107ad8:	ee75 5ac9 	vsub.f32	s11, s11, s18
 8107adc:	ee36 6a48 	vsub.f32	s12, s12, s16
 8107ae0:	ee37 7a68 	vsub.f32	s14, s14, s17
 8107ae4:	ed47 aa04 	vstr	s21, [r7, #-16]
 8107ae8:	ed47 6a03 	vstr	s13, [r7, #-12]
 8107aec:	ed86 3a04 	vstr	s6, [r6, #16]
 8107af0:	edc6 7a03 	vstr	s15, [r6, #12]
 8107af4:	ee75 6aa0 	vadd.f32	s13, s11, s1
 8107af8:	ee76 7a21 	vadd.f32	s15, s12, s3
 8107afc:	ed59 5a0c 	vldr	s11, [r9, #-48]	; 0xffffffd0
 8107b00:	ed19 6a0b 	vldr	s12, [r9, #-44]	; 0xffffffd4
 8107b04:	ee35 5a00 	vadd.f32	s10, s10, s0
 8107b08:	ee37 7a41 	vsub.f32	s14, s14, s2
 8107b0c:	ee65 3a06 	vmul.f32	s7, s10, s12
 8107b10:	ee27 4a25 	vmul.f32	s8, s14, s11
 8107b14:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 8107b18:	eee6 3aa5 	vfma.f32	s7, s13, s11
 8107b1c:	ee26 3a66 	vnmul.f32	s6, s12, s13
 8107b20:	eef0 6a44 	vmov.f32	s13, s8
 8107b24:	eee7 6a86 	vfma.f32	s13, s15, s12
 8107b28:	eef0 7a64 	vmov.f32	s15, s9
 8107b2c:	eea5 3a25 	vfma.f32	s6, s10, s11
 8107b30:	eee7 7a06 	vfma.f32	s15, s14, s12
 8107b34:	ed02 3a03 	vstr	s6, [r2, #-12]
 8107b38:	ed42 3a04 	vstr	s7, [r2, #-16]
 8107b3c:	edc3 6a03 	vstr	s13, [r3, #12]
 8107b40:	edc3 7a04 	vstr	s15, [r3, #16]
 8107b44:	f47f af07 	bne.w	8107956 <arm_cfft_radix8by4_f32+0x126>
 8107b48:	9a08      	ldr	r2, [sp, #32]
 8107b4a:	9903      	ldr	r1, [sp, #12]
 8107b4c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107b50:	9103      	str	r1, [sp, #12]
 8107b52:	9902      	ldr	r1, [sp, #8]
 8107b54:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107b58:	9102      	str	r1, [sp, #8]
 8107b5a:	9907      	ldr	r1, [sp, #28]
 8107b5c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107b60:	9107      	str	r1, [sp, #28]
 8107b62:	9904      	ldr	r1, [sp, #16]
 8107b64:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8107b68:	9104      	str	r1, [sp, #16]
 8107b6a:	9906      	ldr	r1, [sp, #24]
 8107b6c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107b70:	9106      	str	r1, [sp, #24]
 8107b72:	9905      	ldr	r1, [sp, #20]
 8107b74:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8107b78:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8107b7c:	9205      	str	r2, [sp, #20]
 8107b7e:	9a01      	ldr	r2, [sp, #4]
 8107b80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8107b84:	9301      	str	r3, [sp, #4]
 8107b86:	9b07      	ldr	r3, [sp, #28]
 8107b88:	9903      	ldr	r1, [sp, #12]
 8107b8a:	9e06      	ldr	r6, [sp, #24]
 8107b8c:	9d05      	ldr	r5, [sp, #20]
 8107b8e:	edd3 4a00 	vldr	s9, [r3]
 8107b92:	edd5 7a00 	vldr	s15, [r5]
 8107b96:	edd1 3a00 	vldr	s7, [r1]
 8107b9a:	edd6 6a00 	vldr	s13, [r6]
 8107b9e:	edd3 2a01 	vldr	s5, [r3, #4]
 8107ba2:	ed95 3a01 	vldr	s6, [r5, #4]
 8107ba6:	ed96 4a01 	vldr	s8, [r6, #4]
 8107baa:	ed91 7a01 	vldr	s14, [r1, #4]
 8107bae:	9a02      	ldr	r2, [sp, #8]
 8107bb0:	9c01      	ldr	r4, [sp, #4]
 8107bb2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8107bb6:	ee73 5aa6 	vadd.f32	s11, s7, s13
 8107bba:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8107bbe:	ee35 5a25 	vadd.f32	s10, s10, s11
 8107bc2:	ee37 6a04 	vadd.f32	s12, s14, s8
 8107bc6:	ed81 5a00 	vstr	s10, [r1]
 8107bca:	edd5 3a01 	vldr	s7, [r5, #4]
 8107bce:	ed93 5a01 	vldr	s10, [r3, #4]
 8107bd2:	ee35 5a23 	vadd.f32	s10, s10, s7
 8107bd6:	ee37 7a44 	vsub.f32	s14, s14, s8
 8107bda:	ee35 5a06 	vadd.f32	s10, s10, s12
 8107bde:	ee37 4a64 	vsub.f32	s8, s14, s9
 8107be2:	ee76 3ac3 	vsub.f32	s7, s13, s6
 8107be6:	ed81 5a01 	vstr	s10, [r1, #4]
 8107bea:	ed92 5a01 	vldr	s10, [r2, #4]
 8107bee:	edd2 1a00 	vldr	s3, [r2]
 8107bf2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8107bf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8107bf8:	9102      	str	r1, [sp, #8]
 8107bfa:	ee73 3aa2 	vadd.f32	s7, s7, s5
 8107bfe:	ee34 4a27 	vadd.f32	s8, s8, s15
 8107c02:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8107c06:	ee24 2a05 	vmul.f32	s4, s8, s10
 8107c0a:	ee25 5a63 	vnmul.f32	s10, s10, s7
 8107c0e:	eea3 2aa1 	vfma.f32	s4, s7, s3
 8107c12:	eea4 5a21 	vfma.f32	s10, s8, s3
 8107c16:	ed83 2a00 	vstr	s4, [r3]
 8107c1a:	ed83 5a01 	vstr	s10, [r3, #4]
 8107c1e:	ee36 6a62 	vsub.f32	s12, s12, s5
 8107c22:	9b04      	ldr	r3, [sp, #16]
 8107c24:	ee36 6a43 	vsub.f32	s12, s12, s6
 8107c28:	ed93 5a01 	vldr	s10, [r3, #4]
 8107c2c:	edd3 3a00 	vldr	s7, [r3]
 8107c30:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107c34:	ee26 4a05 	vmul.f32	s8, s12, s10
 8107c38:	ee25 5a65 	vnmul.f32	s10, s10, s11
 8107c3c:	eea5 4aa3 	vfma.f32	s8, s11, s7
 8107c40:	2304      	movs	r3, #4
 8107c42:	eea6 5a23 	vfma.f32	s10, s12, s7
 8107c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107c4a:	ee36 7ae2 	vsub.f32	s14, s13, s5
 8107c4e:	ed86 4a00 	vstr	s8, [r6]
 8107c52:	ed86 5a01 	vstr	s10, [r6, #4]
 8107c56:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8107c5a:	ee37 7a03 	vadd.f32	s14, s14, s6
 8107c5e:	edd4 6a01 	vldr	s13, [r4, #4]
 8107c62:	edd4 5a00 	vldr	s11, [r4]
 8107c66:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8107c6a:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 8107c6e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8107c72:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8107c76:	ed85 6a00 	vstr	s12, [r5]
 8107c7a:	edc5 6a01 	vstr	s13, [r5, #4]
 8107c7e:	f7ff fa2f 	bl	81070e0 <arm_radix8_butterfly_f32>
 8107c82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8107c84:	9902      	ldr	r1, [sp, #8]
 8107c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8107c88:	6862      	ldr	r2, [r4, #4]
 8107c8a:	9101      	str	r1, [sp, #4]
 8107c8c:	2304      	movs	r3, #4
 8107c8e:	f7ff fa27 	bl	81070e0 <arm_radix8_butterfly_f32>
 8107c92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8107c94:	9901      	ldr	r1, [sp, #4]
 8107c96:	6862      	ldr	r2, [r4, #4]
 8107c98:	2304      	movs	r3, #4
 8107c9a:	f7ff fa21 	bl	81070e0 <arm_radix8_butterfly_f32>
 8107c9e:	9901      	ldr	r1, [sp, #4]
 8107ca0:	6862      	ldr	r2, [r4, #4]
 8107ca2:	4640      	mov	r0, r8
 8107ca4:	2304      	movs	r3, #4
 8107ca6:	b00f      	add	sp, #60	; 0x3c
 8107ca8:	ecbd 8b0e 	vpop	{d8-d14}
 8107cac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107cb0:	f7ff ba16 	b.w	81070e0 <arm_radix8_butterfly_f32>

08107cb4 <arm_cfft_f32>:
 8107cb4:	2a01      	cmp	r2, #1
 8107cb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107cba:	8805      	ldrh	r5, [r0, #0]
 8107cbc:	4680      	mov	r8, r0
 8107cbe:	4691      	mov	r9, r2
 8107cc0:	460c      	mov	r4, r1
 8107cc2:	461f      	mov	r7, r3
 8107cc4:	d076      	beq.n	8107db4 <arm_cfft_f32+0x100>
 8107cc6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8107cca:	d06e      	beq.n	8107daa <arm_cfft_f32+0xf6>
 8107ccc:	d80e      	bhi.n	8107cec <arm_cfft_f32+0x38>
 8107cce:	2d40      	cmp	r5, #64	; 0x40
 8107cd0:	d013      	beq.n	8107cfa <arm_cfft_f32+0x46>
 8107cd2:	d966      	bls.n	8107da2 <arm_cfft_f32+0xee>
 8107cd4:	2d80      	cmp	r5, #128	; 0x80
 8107cd6:	d103      	bne.n	8107ce0 <arm_cfft_f32+0x2c>
 8107cd8:	4621      	mov	r1, r4
 8107cda:	4640      	mov	r0, r8
 8107cdc:	f7ff fce6 	bl	81076ac <arm_cfft_radix8by2_f32>
 8107ce0:	b9a7      	cbnz	r7, 8107d0c <arm_cfft_f32+0x58>
 8107ce2:	f1b9 0f01 	cmp.w	r9, #1
 8107ce6:	d036      	beq.n	8107d56 <arm_cfft_f32+0xa2>
 8107ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107cec:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8107cf0:	d05b      	beq.n	8107daa <arm_cfft_f32+0xf6>
 8107cf2:	d94f      	bls.n	8107d94 <arm_cfft_f32+0xe0>
 8107cf4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8107cf8:	d1f2      	bne.n	8107ce0 <arm_cfft_f32+0x2c>
 8107cfa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8107cfe:	2301      	movs	r3, #1
 8107d00:	4629      	mov	r1, r5
 8107d02:	4620      	mov	r0, r4
 8107d04:	f7ff f9ec 	bl	81070e0 <arm_radix8_butterfly_f32>
 8107d08:	2f00      	cmp	r7, #0
 8107d0a:	d0ea      	beq.n	8107ce2 <arm_cfft_f32+0x2e>
 8107d0c:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8107d10:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8107d14:	2f00      	cmp	r7, #0
 8107d16:	d0e4      	beq.n	8107ce2 <arm_cfft_f32+0x2e>
 8107d18:	2200      	movs	r2, #0
 8107d1a:	f10c 0e02 	add.w	lr, ip, #2
 8107d1e:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 8107d22:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 8107d26:	0889      	lsrs	r1, r1, #2
 8107d28:	089b      	lsrs	r3, r3, #2
 8107d2a:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8107d2e:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8107d32:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8107d36:	0088      	lsls	r0, r1, #2
 8107d38:	009b      	lsls	r3, r3, #2
 8107d3a:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8107d3e:	3304      	adds	r3, #4
 8107d40:	3004      	adds	r0, #4
 8107d42:	3202      	adds	r2, #2
 8107d44:	58e1      	ldr	r1, [r4, r3]
 8107d46:	5826      	ldr	r6, [r4, r0]
 8107d48:	50e6      	str	r6, [r4, r3]
 8107d4a:	42ba      	cmp	r2, r7
 8107d4c:	5021      	str	r1, [r4, r0]
 8107d4e:	d3e6      	bcc.n	8107d1e <arm_cfft_f32+0x6a>
 8107d50:	f1b9 0f01 	cmp.w	r9, #1
 8107d54:	d1c8      	bne.n	8107ce8 <arm_cfft_f32+0x34>
 8107d56:	ee07 5a90 	vmov	s15, r5
 8107d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107d62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8107d66:	2d00      	cmp	r5, #0
 8107d68:	d0be      	beq.n	8107ce8 <arm_cfft_f32+0x34>
 8107d6a:	3408      	adds	r4, #8
 8107d6c:	2300      	movs	r3, #0
 8107d6e:	3301      	adds	r3, #1
 8107d70:	429d      	cmp	r5, r3
 8107d72:	f104 0408 	add.w	r4, r4, #8
 8107d76:	ed14 7a04 	vldr	s14, [r4, #-16]
 8107d7a:	ed54 7a03 	vldr	s15, [r4, #-12]
 8107d7e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8107d82:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8107d86:	ed04 7a04 	vstr	s14, [r4, #-16]
 8107d8a:	ed44 7a03 	vstr	s15, [r4, #-12]
 8107d8e:	d1ee      	bne.n	8107d6e <arm_cfft_f32+0xba>
 8107d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107d94:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8107d98:	d0af      	beq.n	8107cfa <arm_cfft_f32+0x46>
 8107d9a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8107d9e:	d09b      	beq.n	8107cd8 <arm_cfft_f32+0x24>
 8107da0:	e79e      	b.n	8107ce0 <arm_cfft_f32+0x2c>
 8107da2:	2d10      	cmp	r5, #16
 8107da4:	d098      	beq.n	8107cd8 <arm_cfft_f32+0x24>
 8107da6:	2d20      	cmp	r5, #32
 8107da8:	d19a      	bne.n	8107ce0 <arm_cfft_f32+0x2c>
 8107daa:	4621      	mov	r1, r4
 8107dac:	4640      	mov	r0, r8
 8107dae:	f7ff fd3f 	bl	8107830 <arm_cfft_radix8by4_f32>
 8107db2:	e795      	b.n	8107ce0 <arm_cfft_f32+0x2c>
 8107db4:	b175      	cbz	r5, 8107dd4 <arm_cfft_f32+0x120>
 8107db6:	f101 020c 	add.w	r2, r1, #12
 8107dba:	2100      	movs	r1, #0
 8107dbc:	ed52 7a02 	vldr	s15, [r2, #-8]
 8107dc0:	3101      	adds	r1, #1
 8107dc2:	eef1 7a67 	vneg.f32	s15, s15
 8107dc6:	428d      	cmp	r5, r1
 8107dc8:	ed42 7a02 	vstr	s15, [r2, #-8]
 8107dcc:	f102 0208 	add.w	r2, r2, #8
 8107dd0:	d1f4      	bne.n	8107dbc <arm_cfft_f32+0x108>
 8107dd2:	e778      	b.n	8107cc6 <arm_cfft_f32+0x12>
 8107dd4:	2b00      	cmp	r3, #0
 8107dd6:	d087      	beq.n	8107ce8 <arm_cfft_f32+0x34>
 8107dd8:	8987      	ldrh	r7, [r0, #12]
 8107dda:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8107dde:	2f00      	cmp	r7, #0
 8107de0:	d19a      	bne.n	8107d18 <arm_cfft_f32+0x64>
 8107de2:	e7b8      	b.n	8107d56 <arm_cfft_f32+0xa2>

08107de4 <stage_rfft_f32>:
 8107de4:	edd1 7a01 	vldr	s15, [r1, #4]
 8107de8:	ed91 6a00 	vldr	s12, [r1]
 8107dec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8107df0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8107df4:	eeb0 7a67 	vmov.f32	s14, s15
 8107df8:	eea6 7a26 	vfma.f32	s14, s12, s13
 8107dfc:	b410      	push	{r4}
 8107dfe:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8107e02:	8804      	ldrh	r4, [r0, #0]
 8107e04:	6940      	ldr	r0, [r0, #20]
 8107e06:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8107e0a:	ee27 7a23 	vmul.f32	s14, s14, s7
 8107e0e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8107e12:	3c01      	subs	r4, #1
 8107e14:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8107e18:	ed82 7a00 	vstr	s14, [r2]
 8107e1c:	edc2 7a01 	vstr	s15, [r2, #4]
 8107e20:	3010      	adds	r0, #16
 8107e22:	3210      	adds	r2, #16
 8107e24:	3b08      	subs	r3, #8
 8107e26:	3110      	adds	r1, #16
 8107e28:	edd3 6a03 	vldr	s13, [r3, #12]
 8107e2c:	ed11 5a01 	vldr	s10, [r1, #-4]
 8107e30:	edd3 7a02 	vldr	s15, [r3, #8]
 8107e34:	ed11 4a02 	vldr	s8, [r1, #-8]
 8107e38:	ed50 5a01 	vldr	s11, [r0, #-4]
 8107e3c:	ed10 6a02 	vldr	s12, [r0, #-8]
 8107e40:	ee77 4ac4 	vsub.f32	s9, s15, s8
 8107e44:	ee35 7a66 	vsub.f32	s14, s10, s13
 8107e48:	ee77 7a84 	vadd.f32	s15, s15, s8
 8107e4c:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8107e50:	3c01      	subs	r4, #1
 8107e52:	2c00      	cmp	r4, #0
 8107e54:	eee6 7a24 	vfma.f32	s15, s12, s9
 8107e58:	f1a3 0308 	sub.w	r3, r3, #8
 8107e5c:	f101 0108 	add.w	r1, r1, #8
 8107e60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8107e64:	f100 0008 	add.w	r0, r0, #8
 8107e68:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8107e6c:	f102 0208 	add.w	r2, r2, #8
 8107e70:	eea6 7a66 	vfms.f32	s14, s12, s13
 8107e74:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8107e78:	ee27 7a23 	vmul.f32	s14, s14, s7
 8107e7c:	ed42 7a04 	vstr	s15, [r2, #-16]
 8107e80:	ed02 7a03 	vstr	s14, [r2, #-12]
 8107e84:	dcd0      	bgt.n	8107e28 <stage_rfft_f32+0x44>
 8107e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107e8a:	4770      	bx	lr

08107e8c <merge_rfft_f32>:
 8107e8c:	edd1 7a00 	vldr	s15, [r1]
 8107e90:	edd1 6a01 	vldr	s13, [r1, #4]
 8107e94:	b430      	push	{r4, r5}
 8107e96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8107e9a:	8804      	ldrh	r4, [r0, #0]
 8107e9c:	6940      	ldr	r0, [r0, #20]
 8107e9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8107ea2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8107ea6:	1e65      	subs	r5, r4, #1
 8107ea8:	ee27 7a23 	vmul.f32	s14, s14, s7
 8107eac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8107eb0:	2d00      	cmp	r5, #0
 8107eb2:	ed82 7a00 	vstr	s14, [r2]
 8107eb6:	edc2 7a01 	vstr	s15, [r2, #4]
 8107eba:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8107ebe:	dd32      	ble.n	8107f26 <merge_rfft_f32+0x9a>
 8107ec0:	eba3 04c4 	sub.w	r4, r3, r4, lsl #3
 8107ec4:	3010      	adds	r0, #16
 8107ec6:	3210      	adds	r2, #16
 8107ec8:	3110      	adds	r1, #16
 8107eca:	3b08      	subs	r3, #8
 8107ecc:	edd3 6a03 	vldr	s13, [r3, #12]
 8107ed0:	edd3 7a02 	vldr	s15, [r3, #8]
 8107ed4:	ed11 5a01 	vldr	s10, [r1, #-4]
 8107ed8:	ed11 4a02 	vldr	s8, [r1, #-8]
 8107edc:	ed50 5a01 	vldr	s11, [r0, #-4]
 8107ee0:	ed10 6a02 	vldr	s12, [r0, #-8]
 8107ee4:	ee74 4a67 	vsub.f32	s9, s8, s15
 8107ee8:	ee35 7a66 	vsub.f32	s14, s10, s13
 8107eec:	ee77 7a84 	vadd.f32	s15, s15, s8
 8107ef0:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8107ef4:	3b08      	subs	r3, #8
 8107ef6:	429c      	cmp	r4, r3
 8107ef8:	eee6 7a64 	vfms.f32	s15, s12, s9
 8107efc:	f101 0108 	add.w	r1, r1, #8
 8107f00:	f100 0008 	add.w	r0, r0, #8
 8107f04:	ee76 6a85 	vadd.f32	s13, s13, s10
 8107f08:	f102 0208 	add.w	r2, r2, #8
 8107f0c:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8107f10:	eea6 7a66 	vfms.f32	s14, s12, s13
 8107f14:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8107f18:	ee27 7a23 	vmul.f32	s14, s14, s7
 8107f1c:	ed42 7a04 	vstr	s15, [r2, #-16]
 8107f20:	ed02 7a03 	vstr	s14, [r2, #-12]
 8107f24:	d1d2      	bne.n	8107ecc <merge_rfft_f32+0x40>
 8107f26:	bc30      	pop	{r4, r5}
 8107f28:	4770      	bx	lr
 8107f2a:	bf00      	nop

08107f2c <arm_rfft_fast_f32>:
 8107f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107f30:	4605      	mov	r5, r0
 8107f32:	4616      	mov	r6, r2
 8107f34:	b153      	cbz	r3, 8107f4c <arm_rfft_fast_f32+0x20>
 8107f36:	461f      	mov	r7, r3
 8107f38:	f7ff ffa8 	bl	8107e8c <merge_rfft_f32>
 8107f3c:	463a      	mov	r2, r7
 8107f3e:	4631      	mov	r1, r6
 8107f40:	4628      	mov	r0, r5
 8107f42:	2301      	movs	r3, #1
 8107f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107f48:	f7ff beb4 	b.w	8107cb4 <arm_cfft_f32>
 8107f4c:	460c      	mov	r4, r1
 8107f4e:	8801      	ldrh	r1, [r0, #0]
 8107f50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8107f54:	d03f      	beq.n	8107fd6 <arm_rfft_fast_f32+0xaa>
 8107f56:	d82d      	bhi.n	8107fb4 <arm_rfft_fast_f32+0x88>
 8107f58:	2940      	cmp	r1, #64	; 0x40
 8107f5a:	d032      	beq.n	8107fc2 <arm_rfft_fast_f32+0x96>
 8107f5c:	d937      	bls.n	8107fce <arm_rfft_fast_f32+0xa2>
 8107f5e:	2980      	cmp	r1, #128	; 0x80
 8107f60:	d049      	beq.n	8107ff6 <arm_rfft_fast_f32+0xca>
 8107f62:	89a8      	ldrh	r0, [r5, #12]
 8107f64:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8107f68:	b1e8      	cbz	r0, 8107fa6 <arm_rfft_fast_f32+0x7a>
 8107f6a:	2200      	movs	r2, #0
 8107f6c:	f10c 0e02 	add.w	lr, ip, #2
 8107f70:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 8107f74:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 8107f78:	0889      	lsrs	r1, r1, #2
 8107f7a:	089b      	lsrs	r3, r3, #2
 8107f7c:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
 8107f80:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8107f84:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8107f88:	008f      	lsls	r7, r1, #2
 8107f8a:	009b      	lsls	r3, r3, #2
 8107f8c:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8107f90:	3304      	adds	r3, #4
 8107f92:	3704      	adds	r7, #4
 8107f94:	3202      	adds	r2, #2
 8107f96:	f854 8003 	ldr.w	r8, [r4, r3]
 8107f9a:	59e1      	ldr	r1, [r4, r7]
 8107f9c:	50e1      	str	r1, [r4, r3]
 8107f9e:	4290      	cmp	r0, r2
 8107fa0:	f844 8007 	str.w	r8, [r4, r7]
 8107fa4:	d8e4      	bhi.n	8107f70 <arm_rfft_fast_f32+0x44>
 8107fa6:	4632      	mov	r2, r6
 8107fa8:	4621      	mov	r1, r4
 8107faa:	4628      	mov	r0, r5
 8107fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107fb0:	f7ff bf18 	b.w	8107de4 <stage_rfft_f32>
 8107fb4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8107fb8:	d00d      	beq.n	8107fd6 <arm_rfft_fast_f32+0xaa>
 8107fba:	d916      	bls.n	8107fea <arm_rfft_fast_f32+0xbe>
 8107fbc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8107fc0:	d10d      	bne.n	8107fde <arm_rfft_fast_f32+0xb2>
 8107fc2:	686a      	ldr	r2, [r5, #4]
 8107fc4:	2301      	movs	r3, #1
 8107fc6:	4620      	mov	r0, r4
 8107fc8:	f7ff f88a 	bl	81070e0 <arm_radix8_butterfly_f32>
 8107fcc:	e007      	b.n	8107fde <arm_rfft_fast_f32+0xb2>
 8107fce:	2910      	cmp	r1, #16
 8107fd0:	d011      	beq.n	8107ff6 <arm_rfft_fast_f32+0xca>
 8107fd2:	2920      	cmp	r1, #32
 8107fd4:	d103      	bne.n	8107fde <arm_rfft_fast_f32+0xb2>
 8107fd6:	4621      	mov	r1, r4
 8107fd8:	4628      	mov	r0, r5
 8107fda:	f7ff fc29 	bl	8107830 <arm_cfft_radix8by4_f32>
 8107fde:	89a8      	ldrh	r0, [r5, #12]
 8107fe0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8107fe4:	2800      	cmp	r0, #0
 8107fe6:	d1c0      	bne.n	8107f6a <arm_rfft_fast_f32+0x3e>
 8107fe8:	e7dd      	b.n	8107fa6 <arm_rfft_fast_f32+0x7a>
 8107fea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8107fee:	d0e8      	beq.n	8107fc2 <arm_rfft_fast_f32+0x96>
 8107ff0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8107ff4:	d1f3      	bne.n	8107fde <arm_rfft_fast_f32+0xb2>
 8107ff6:	4621      	mov	r1, r4
 8107ff8:	4628      	mov	r0, r5
 8107ffa:	f7ff fb57 	bl	81076ac <arm_cfft_radix8by2_f32>
 8107ffe:	e7ee      	b.n	8107fde <arm_rfft_fast_f32+0xb2>

08108000 <arm_rfft_fast_init_f32>:
 8108000:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8108004:	d024      	beq.n	8108050 <arm_rfft_fast_init_f32+0x50>
 8108006:	d807      	bhi.n	8108018 <arm_rfft_fast_init_f32+0x18>
 8108008:	2980      	cmp	r1, #128	; 0x80
 810800a:	d01c      	beq.n	8108046 <arm_rfft_fast_init_f32+0x46>
 810800c:	d90c      	bls.n	8108028 <arm_rfft_fast_init_f32+0x28>
 810800e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8108012:	d11a      	bne.n	810804a <arm_rfft_fast_init_f32+0x4a>
 8108014:	4b0f      	ldr	r3, [pc, #60]	; (8108054 <arm_rfft_fast_init_f32+0x54>)
 8108016:	4718      	bx	r3
 8108018:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 810801c:	d011      	beq.n	8108042 <arm_rfft_fast_init_f32+0x42>
 810801e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8108022:	d107      	bne.n	8108034 <arm_rfft_fast_init_f32+0x34>
 8108024:	4b0c      	ldr	r3, [pc, #48]	; (8108058 <arm_rfft_fast_init_f32+0x58>)
 8108026:	4718      	bx	r3
 8108028:	2920      	cmp	r1, #32
 810802a:	d008      	beq.n	810803e <arm_rfft_fast_init_f32+0x3e>
 810802c:	2940      	cmp	r1, #64	; 0x40
 810802e:	d10c      	bne.n	810804a <arm_rfft_fast_init_f32+0x4a>
 8108030:	4b0a      	ldr	r3, [pc, #40]	; (810805c <arm_rfft_fast_init_f32+0x5c>)
 8108032:	e7f0      	b.n	8108016 <arm_rfft_fast_init_f32+0x16>
 8108034:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108038:	d107      	bne.n	810804a <arm_rfft_fast_init_f32+0x4a>
 810803a:	4b09      	ldr	r3, [pc, #36]	; (8108060 <arm_rfft_fast_init_f32+0x60>)
 810803c:	e7eb      	b.n	8108016 <arm_rfft_fast_init_f32+0x16>
 810803e:	4b09      	ldr	r3, [pc, #36]	; (8108064 <arm_rfft_fast_init_f32+0x64>)
 8108040:	e7e9      	b.n	8108016 <arm_rfft_fast_init_f32+0x16>
 8108042:	4b09      	ldr	r3, [pc, #36]	; (8108068 <arm_rfft_fast_init_f32+0x68>)
 8108044:	e7e7      	b.n	8108016 <arm_rfft_fast_init_f32+0x16>
 8108046:	4b09      	ldr	r3, [pc, #36]	; (810806c <arm_rfft_fast_init_f32+0x6c>)
 8108048:	e7e5      	b.n	8108016 <arm_rfft_fast_init_f32+0x16>
 810804a:	f04f 30ff 	mov.w	r0, #4294967295
 810804e:	4770      	bx	lr
 8108050:	4b07      	ldr	r3, [pc, #28]	; (8108070 <arm_rfft_fast_init_f32+0x70>)
 8108052:	e7e0      	b.n	8108016 <arm_rfft_fast_init_f32+0x16>
 8108054:	08106fcd 	.word	0x08106fcd
 8108058:	081070a9 	.word	0x081070a9
 810805c:	08106f65 	.word	0x08106f65
 8108060:	08107039 	.word	0x08107039
 8108064:	08106f31 	.word	0x08106f31
 8108068:	08107071 	.word	0x08107071
 810806c:	08106f99 	.word	0x08106f99
 8108070:	08107001 	.word	0x08107001

08108074 <ai_buffer_get_size>:
 8108074:	b378      	cbz	r0, 81080d6 <ai_buffer_get_size+0x62>
 8108076:	b410      	push	{r4}
 8108078:	6803      	ldr	r3, [r0, #0]
 810807a:	4a17      	ldr	r2, [pc, #92]	; (81080d8 <ai_buffer_get_size+0x64>)
 810807c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8108080:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8108084:	4293      	cmp	r3, r2
 8108086:	d01e      	beq.n	81080c6 <ai_buffer_get_size+0x52>
 8108088:	6984      	ldr	r4, [r0, #24]
 810808a:	6862      	ldr	r2, [r4, #4]
 810808c:	7d03      	ldrb	r3, [r0, #20]
 810808e:	6941      	ldr	r1, [r0, #20]
 8108090:	f1a3 0301 	sub.w	r3, r3, #1
 8108094:	fab3 f383 	clz	r3, r3
 8108098:	095b      	lsrs	r3, r3, #5
 810809a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 810809e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 81080a2:	da0b      	bge.n	81080bc <ai_buffer_get_size+0x48>
 81080a4:	2b01      	cmp	r3, #1
 81080a6:	d102      	bne.n	81080ae <ai_buffer_get_size+0x3a>
 81080a8:	2802      	cmp	r0, #2
 81080aa:	d007      	beq.n	81080bc <ai_buffer_get_size+0x48>
 81080ac:	2302      	movs	r3, #2
 81080ae:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 81080b2:	3301      	adds	r3, #1
 81080b4:	4298      	cmp	r0, r3
 81080b6:	fb01 f202 	mul.w	r2, r1, r2
 81080ba:	d1f3      	bne.n	81080a4 <ai_buffer_get_size+0x30>
 81080bc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 81080c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 81080c4:	4770      	bx	lr
 81080c6:	2900      	cmp	r1, #0
 81080c8:	d0de      	beq.n	8108088 <ai_buffer_get_size+0x14>
 81080ca:	6984      	ldr	r4, [r0, #24]
 81080cc:	6863      	ldr	r3, [r4, #4]
 81080ce:	331f      	adds	r3, #31
 81080d0:	f023 021f 	bic.w	r2, r3, #31
 81080d4:	e7da      	b.n	810808c <ai_buffer_get_size+0x18>
 81080d6:	4770      	bx	lr
 81080d8:	000400c0 	.word	0x000400c0

081080dc <ai_buffer_array_sane>:
 81080dc:	b138      	cbz	r0, 81080ee <ai_buffer_array_sane+0x12>
 81080de:	6843      	ldr	r3, [r0, #4]
 81080e0:	b123      	cbz	r3, 81080ec <ai_buffer_array_sane+0x10>
 81080e2:	8840      	ldrh	r0, [r0, #2]
 81080e4:	3800      	subs	r0, #0
 81080e6:	bf18      	it	ne
 81080e8:	2001      	movne	r0, #1
 81080ea:	4770      	bx	lr
 81080ec:	4618      	mov	r0, r3
 81080ee:	4770      	bx	lr

081080f0 <ai_buffer_array_item_set_address>:
 81080f0:	b150      	cbz	r0, 8108108 <ai_buffer_array_item_set_address+0x18>
 81080f2:	6843      	ldr	r3, [r0, #4]
 81080f4:	b14b      	cbz	r3, 810810a <ai_buffer_array_item_set_address+0x1a>
 81080f6:	8840      	ldrh	r0, [r0, #2]
 81080f8:	b900      	cbnz	r0, 81080fc <ai_buffer_array_item_set_address+0xc>
 81080fa:	4770      	bx	lr
 81080fc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8108100:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8108104:	2001      	movs	r0, #1
 8108106:	604a      	str	r2, [r1, #4]
 8108108:	4770      	bx	lr
 810810a:	4618      	mov	r0, r3
 810810c:	4770      	bx	lr
 810810e:	bf00      	nop

08108110 <_ai_platform_acquire_crc>:
 8108110:	2001      	movs	r0, #1
 8108112:	4770      	bx	lr

08108114 <_ai_platform_release_crc>:
 8108114:	4770      	bx	lr
 8108116:	bf00      	nop

08108118 <ai_platform_get_weights_map>:
 8108118:	2a00      	cmp	r2, #0
 810811a:	d037      	beq.n	810818c <ai_platform_get_weights_map+0x74>
 810811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810811e:	4604      	mov	r4, r0
 8108120:	b1a0      	cbz	r0, 810814c <ai_platform_get_weights_map+0x34>
 8108122:	460f      	mov	r7, r1
 8108124:	b191      	cbz	r1, 810814c <ai_platform_get_weights_map+0x34>
 8108126:	4b25      	ldr	r3, [pc, #148]	; (81081bc <ai_platform_get_weights_map+0xa4>)
 8108128:	6810      	ldr	r0, [r2, #0]
 810812a:	4298      	cmp	r0, r3
 810812c:	4615      	mov	r5, r2
 810812e:	d00f      	beq.n	8108150 <ai_platform_get_weights_map+0x38>
 8108130:	6855      	ldr	r5, [r2, #4]
 8108132:	b15d      	cbz	r5, 810814c <ai_platform_get_weights_map+0x34>
 8108134:	682e      	ldr	r6, [r5, #0]
 8108136:	429e      	cmp	r6, r3
 8108138:	d02a      	beq.n	8108190 <ai_platform_get_weights_map+0x78>
 810813a:	f1a1 0001 	sub.w	r0, r1, #1
 810813e:	6025      	str	r5, [r4, #0]
 8108140:	fab0 f080 	clz	r0, r0
 8108144:	0940      	lsrs	r0, r0, #5
 8108146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108148:	42a7      	cmp	r7, r4
 810814a:	d034      	beq.n	81081b6 <ai_platform_get_weights_map+0x9e>
 810814c:	2000      	movs	r0, #0
 810814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108150:	1d10      	adds	r0, r2, #4
 8108152:	f7ff ffc3 	bl	81080dc <ai_buffer_array_sane>
 8108156:	2800      	cmp	r0, #0
 8108158:	d0f8      	beq.n	810814c <ai_platform_get_weights_map+0x34>
 810815a:	88eb      	ldrh	r3, [r5, #6]
 810815c:	429f      	cmp	r7, r3
 810815e:	d1f5      	bne.n	810814c <ai_platform_get_weights_map+0x34>
 8108160:	f04f 0e00 	mov.w	lr, #0
 8108164:	1f23      	subs	r3, r4, #4
 8108166:	4670      	mov	r0, lr
 8108168:	68aa      	ldr	r2, [r5, #8]
 810816a:	eb02 0c0e 	add.w	ip, r2, lr
 810816e:	f10e 0e1c 	add.w	lr, lr, #28
 8108172:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8108176:	b124      	cbz	r4, 8108182 <ai_platform_get_weights_map+0x6a>
 8108178:	3001      	adds	r0, #1
 810817a:	4287      	cmp	r7, r0
 810817c:	f843 4f04 	str.w	r4, [r3, #4]!
 8108180:	d1f2      	bne.n	8108168 <ai_platform_get_weights_map+0x50>
 8108182:	1a38      	subs	r0, r7, r0
 8108184:	fab0 f080 	clz	r0, r0
 8108188:	0940      	lsrs	r0, r0, #5
 810818a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810818c:	2000      	movs	r0, #0
 810818e:	4770      	bx	lr
 8108190:	1f23      	subs	r3, r4, #4
 8108192:	4628      	mov	r0, r5
 8108194:	2400      	movs	r4, #0
 8108196:	e000      	b.n	810819a <ai_platform_get_weights_map+0x82>
 8108198:	4614      	mov	r4, r2
 810819a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 810819e:	42b2      	cmp	r2, r6
 81081a0:	d0d2      	beq.n	8108148 <ai_platform_get_weights_map+0x30>
 81081a2:	f843 2f04 	str.w	r2, [r3, #4]!
 81081a6:	1c62      	adds	r2, r4, #1
 81081a8:	4297      	cmp	r7, r2
 81081aa:	d1f5      	bne.n	8108198 <ai_platform_get_weights_map+0x80>
 81081ac:	3402      	adds	r4, #2
 81081ae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 81081b2:	42b3      	cmp	r3, r6
 81081b4:	d1ca      	bne.n	810814c <ai_platform_get_weights_map+0x34>
 81081b6:	2001      	movs	r0, #1
 81081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81081ba:	bf00      	nop
 81081bc:	a1facade 	.word	0xa1facade

081081c0 <ai_platform_get_activations_map>:
 81081c0:	2a00      	cmp	r2, #0
 81081c2:	d038      	beq.n	8108236 <ai_platform_get_activations_map+0x76>
 81081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81081c6:	4604      	mov	r4, r0
 81081c8:	b1a0      	cbz	r0, 81081f4 <ai_platform_get_activations_map+0x34>
 81081ca:	460f      	mov	r7, r1
 81081cc:	b191      	cbz	r1, 81081f4 <ai_platform_get_activations_map+0x34>
 81081ce:	4b25      	ldr	r3, [pc, #148]	; (8108264 <ai_platform_get_activations_map+0xa4>)
 81081d0:	6810      	ldr	r0, [r2, #0]
 81081d2:	4298      	cmp	r0, r3
 81081d4:	4615      	mov	r5, r2
 81081d6:	d00f      	beq.n	81081f8 <ai_platform_get_activations_map+0x38>
 81081d8:	6a15      	ldr	r5, [r2, #32]
 81081da:	b15d      	cbz	r5, 81081f4 <ai_platform_get_activations_map+0x34>
 81081dc:	682e      	ldr	r6, [r5, #0]
 81081de:	429e      	cmp	r6, r3
 81081e0:	d02b      	beq.n	810823a <ai_platform_get_activations_map+0x7a>
 81081e2:	f1a1 0001 	sub.w	r0, r1, #1
 81081e6:	6025      	str	r5, [r4, #0]
 81081e8:	fab0 f080 	clz	r0, r0
 81081ec:	0940      	lsrs	r0, r0, #5
 81081ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81081f0:	42a7      	cmp	r7, r4
 81081f2:	d035      	beq.n	8108260 <ai_platform_get_activations_map+0xa0>
 81081f4:	2000      	movs	r0, #0
 81081f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81081f8:	f102 000c 	add.w	r0, r2, #12
 81081fc:	f7ff ff6e 	bl	81080dc <ai_buffer_array_sane>
 8108200:	2800      	cmp	r0, #0
 8108202:	d0f7      	beq.n	81081f4 <ai_platform_get_activations_map+0x34>
 8108204:	89eb      	ldrh	r3, [r5, #14]
 8108206:	429f      	cmp	r7, r3
 8108208:	d1f4      	bne.n	81081f4 <ai_platform_get_activations_map+0x34>
 810820a:	f04f 0e00 	mov.w	lr, #0
 810820e:	1f23      	subs	r3, r4, #4
 8108210:	4670      	mov	r0, lr
 8108212:	692a      	ldr	r2, [r5, #16]
 8108214:	eb02 0c0e 	add.w	ip, r2, lr
 8108218:	f10e 0e1c 	add.w	lr, lr, #28
 810821c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8108220:	b124      	cbz	r4, 810822c <ai_platform_get_activations_map+0x6c>
 8108222:	3001      	adds	r0, #1
 8108224:	4287      	cmp	r7, r0
 8108226:	f843 4f04 	str.w	r4, [r3, #4]!
 810822a:	d1f2      	bne.n	8108212 <ai_platform_get_activations_map+0x52>
 810822c:	1a38      	subs	r0, r7, r0
 810822e:	fab0 f080 	clz	r0, r0
 8108232:	0940      	lsrs	r0, r0, #5
 8108234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108236:	2000      	movs	r0, #0
 8108238:	4770      	bx	lr
 810823a:	1f23      	subs	r3, r4, #4
 810823c:	4628      	mov	r0, r5
 810823e:	2400      	movs	r4, #0
 8108240:	e000      	b.n	8108244 <ai_platform_get_activations_map+0x84>
 8108242:	4614      	mov	r4, r2
 8108244:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8108248:	42b2      	cmp	r2, r6
 810824a:	d0d1      	beq.n	81081f0 <ai_platform_get_activations_map+0x30>
 810824c:	f843 2f04 	str.w	r2, [r3, #4]!
 8108250:	1c62      	adds	r2, r4, #1
 8108252:	4297      	cmp	r7, r2
 8108254:	d1f5      	bne.n	8108242 <ai_platform_get_activations_map+0x82>
 8108256:	3402      	adds	r4, #2
 8108258:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 810825c:	42b3      	cmp	r3, r6
 810825e:	d1c9      	bne.n	81081f4 <ai_platform_get_activations_map+0x34>
 8108260:	2001      	movs	r0, #1
 8108262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108264:	a1facade 	.word	0xa1facade

08108268 <ai_platform_bind_network_params>:
 8108268:	b1a0      	cbz	r0, 8108294 <ai_platform_bind_network_params+0x2c>
 810826a:	b1b1      	cbz	r1, 810829a <ai_platform_bind_network_params+0x32>
 810826c:	b1c2      	cbz	r2, 81082a0 <ai_platform_bind_network_params+0x38>
 810826e:	b410      	push	{r4}
 8108270:	4603      	mov	r3, r0
 8108272:	4c0d      	ldr	r4, [pc, #52]	; (81082a8 <ai_platform_bind_network_params+0x40>)
 8108274:	f843 4b04 	str.w	r4, [r3], #4
 8108278:	f100 0c0c 	add.w	ip, r0, #12
 810827c:	c903      	ldmia	r1, {r0, r1}
 810827e:	e883 0003 	stmia.w	r3, {r0, r1}
 8108282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108286:	e88c 0003 	stmia.w	ip, {r0, r1}
 810828a:	2301      	movs	r3, #1
 810828c:	4618      	mov	r0, r3
 810828e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108292:	4770      	bx	lr
 8108294:	4603      	mov	r3, r0
 8108296:	4618      	mov	r0, r3
 8108298:	4770      	bx	lr
 810829a:	460b      	mov	r3, r1
 810829c:	4618      	mov	r0, r3
 810829e:	4770      	bx	lr
 81082a0:	4613      	mov	r3, r2
 81082a2:	4618      	mov	r0, r3
 81082a4:	4770      	bx	lr
 81082a6:	bf00      	nop
 81082a8:	a1facade 	.word	0xa1facade

081082ac <ai_platform_network_get_error>:
 81082ac:	b510      	push	{r4, lr}
 81082ae:	b1f0      	cbz	r0, 81082ee <ai_platform_network_get_error+0x42>
 81082b0:	4b2f      	ldr	r3, [pc, #188]	; (8108370 <ai_platform_network_get_error+0xc4>)
 81082b2:	6802      	ldr	r2, [r0, #0]
 81082b4:	429a      	cmp	r2, r3
 81082b6:	4604      	mov	r4, r0
 81082b8:	d119      	bne.n	81082ee <ai_platform_network_get_error+0x42>
 81082ba:	f7ff ff29 	bl	8108110 <_ai_platform_acquire_crc>
 81082be:	4b2d      	ldr	r3, [pc, #180]	; (8108374 <ai_platform_network_get_error+0xc8>)
 81082c0:	681b      	ldr	r3, [r3, #0]
 81082c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81082c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81082ca:	d03c      	beq.n	8108346 <ai_platform_network_get_error+0x9a>
 81082cc:	4a2a      	ldr	r2, [pc, #168]	; (8108378 <ai_platform_network_get_error+0xcc>)
 81082ce:	2301      	movs	r3, #1
 81082d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81082d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81082d8:	2b00      	cmp	r3, #0
 81082da:	d1fb      	bne.n	81082d4 <ai_platform_network_get_error+0x28>
 81082dc:	4b27      	ldr	r3, [pc, #156]	; (810837c <ai_platform_network_get_error+0xd0>)
 81082de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81082e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81082e6:	4b26      	ldr	r3, [pc, #152]	; (8108380 <ai_platform_network_get_error+0xd4>)
 81082e8:	429a      	cmp	r2, r3
 81082ea:	d038      	beq.n	810835e <ai_platform_network_get_error+0xb2>
 81082ec:	e7fe      	b.n	81082ec <ai_platform_network_get_error+0x40>
 81082ee:	f7ff ff0f 	bl	8108110 <_ai_platform_acquire_crc>
 81082f2:	4b20      	ldr	r3, [pc, #128]	; (8108374 <ai_platform_network_get_error+0xc8>)
 81082f4:	681b      	ldr	r3, [r3, #0]
 81082f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81082fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81082fe:	d010      	beq.n	8108322 <ai_platform_network_get_error+0x76>
 8108300:	4a1d      	ldr	r2, [pc, #116]	; (8108378 <ai_platform_network_get_error+0xcc>)
 8108302:	2301      	movs	r3, #1
 8108304:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108308:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 810830c:	2b00      	cmp	r3, #0
 810830e:	d1fb      	bne.n	8108308 <ai_platform_network_get_error+0x5c>
 8108310:	4b1a      	ldr	r3, [pc, #104]	; (810837c <ai_platform_network_get_error+0xd0>)
 8108312:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108316:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 810831a:	4b19      	ldr	r3, [pc, #100]	; (8108380 <ai_platform_network_get_error+0xd4>)
 810831c:	429a      	cmp	r2, r3
 810831e:	d00d      	beq.n	810833c <ai_platform_network_get_error+0x90>
 8108320:	e7fe      	b.n	8108320 <ai_platform_network_get_error+0x74>
 8108322:	4a18      	ldr	r2, [pc, #96]	; (8108384 <ai_platform_network_get_error+0xd8>)
 8108324:	2301      	movs	r3, #1
 8108326:	6093      	str	r3, [r2, #8]
 8108328:	6893      	ldr	r3, [r2, #8]
 810832a:	2b00      	cmp	r3, #0
 810832c:	d1fc      	bne.n	8108328 <ai_platform_network_get_error+0x7c>
 810832e:	4b13      	ldr	r3, [pc, #76]	; (810837c <ai_platform_network_get_error+0xd0>)
 8108330:	6013      	str	r3, [r2, #0]
 8108332:	6812      	ldr	r2, [r2, #0]
 8108334:	4b12      	ldr	r3, [pc, #72]	; (8108380 <ai_platform_network_get_error+0xd4>)
 8108336:	429a      	cmp	r2, r3
 8108338:	d000      	beq.n	810833c <ai_platform_network_get_error+0x90>
 810833a:	e7fe      	b.n	810833a <ai_platform_network_get_error+0x8e>
 810833c:	f7ff feea 	bl	8108114 <_ai_platform_release_crc>
 8108340:	f241 0010 	movw	r0, #4112	; 0x1010
 8108344:	bd10      	pop	{r4, pc}
 8108346:	4a0f      	ldr	r2, [pc, #60]	; (8108384 <ai_platform_network_get_error+0xd8>)
 8108348:	2301      	movs	r3, #1
 810834a:	6093      	str	r3, [r2, #8]
 810834c:	6893      	ldr	r3, [r2, #8]
 810834e:	2b00      	cmp	r3, #0
 8108350:	d1fc      	bne.n	810834c <ai_platform_network_get_error+0xa0>
 8108352:	4b0a      	ldr	r3, [pc, #40]	; (810837c <ai_platform_network_get_error+0xd0>)
 8108354:	6013      	str	r3, [r2, #0]
 8108356:	6812      	ldr	r2, [r2, #0]
 8108358:	4b09      	ldr	r3, [pc, #36]	; (8108380 <ai_platform_network_get_error+0xd4>)
 810835a:	429a      	cmp	r2, r3
 810835c:	d107      	bne.n	810836e <ai_platform_network_get_error+0xc2>
 810835e:	f7ff fed9 	bl	8108114 <_ai_platform_release_crc>
 8108362:	f104 0010 	add.w	r0, r4, #16
 8108366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810836a:	f000 be8b 	b.w	8109084 <core_get_error>
 810836e:	e7fe      	b.n	810836e <ai_platform_network_get_error+0xc2>
 8108370:	a1c00100 	.word	0xa1c00100
 8108374:	e0042000 	.word	0xe0042000
 8108378:	58024000 	.word	0x58024000
 810837c:	f407a5c2 	.word	0xf407a5c2
 8108380:	b5e8b5cd 	.word	0xb5e8b5cd
 8108384:	40023000 	.word	0x40023000

08108388 <ai_platform_network_set_error>:
 8108388:	b110      	cbz	r0, 8108390 <ai_platform_network_set_error+0x8>
 810838a:	3010      	adds	r0, #16
 810838c:	f000 be80 	b.w	8109090 <core_set_error>
 8108390:	4770      	bx	lr
 8108392:	bf00      	nop

08108394 <ai_platform_inputs_get>:
 8108394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108398:	b085      	sub	sp, #20
 810839a:	9102      	str	r1, [sp, #8]
 810839c:	b1f0      	cbz	r0, 81083dc <ai_platform_inputs_get+0x48>
 810839e:	4b62      	ldr	r3, [pc, #392]	; (8108528 <ai_platform_inputs_get+0x194>)
 81083a0:	6802      	ldr	r2, [r0, #0]
 81083a2:	429a      	cmp	r2, r3
 81083a4:	4607      	mov	r7, r0
 81083a6:	d119      	bne.n	81083dc <ai_platform_inputs_get+0x48>
 81083a8:	f7ff feb2 	bl	8108110 <_ai_platform_acquire_crc>
 81083ac:	4b5f      	ldr	r3, [pc, #380]	; (810852c <ai_platform_inputs_get+0x198>)
 81083ae:	681b      	ldr	r3, [r3, #0]
 81083b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81083b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81083b8:	d03d      	beq.n	8108436 <ai_platform_inputs_get+0xa2>
 81083ba:	4a5d      	ldr	r2, [pc, #372]	; (8108530 <ai_platform_inputs_get+0x19c>)
 81083bc:	2301      	movs	r3, #1
 81083be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81083c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81083c6:	2b00      	cmp	r3, #0
 81083c8:	d1fb      	bne.n	81083c2 <ai_platform_inputs_get+0x2e>
 81083ca:	4b5a      	ldr	r3, [pc, #360]	; (8108534 <ai_platform_inputs_get+0x1a0>)
 81083cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81083d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81083d4:	4b58      	ldr	r3, [pc, #352]	; (8108538 <ai_platform_inputs_get+0x1a4>)
 81083d6:	429a      	cmp	r2, r3
 81083d8:	d039      	beq.n	810844e <ai_platform_inputs_get+0xba>
 81083da:	e7fe      	b.n	81083da <ai_platform_inputs_get+0x46>
 81083dc:	f7ff fe98 	bl	8108110 <_ai_platform_acquire_crc>
 81083e0:	4b52      	ldr	r3, [pc, #328]	; (810852c <ai_platform_inputs_get+0x198>)
 81083e2:	681b      	ldr	r3, [r3, #0]
 81083e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81083e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81083ec:	d010      	beq.n	8108410 <ai_platform_inputs_get+0x7c>
 81083ee:	4a50      	ldr	r2, [pc, #320]	; (8108530 <ai_platform_inputs_get+0x19c>)
 81083f0:	2301      	movs	r3, #1
 81083f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81083f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81083fa:	2b00      	cmp	r3, #0
 81083fc:	d1fb      	bne.n	81083f6 <ai_platform_inputs_get+0x62>
 81083fe:	4b4d      	ldr	r3, [pc, #308]	; (8108534 <ai_platform_inputs_get+0x1a0>)
 8108400:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108404:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108408:	4b4b      	ldr	r3, [pc, #300]	; (8108538 <ai_platform_inputs_get+0x1a4>)
 810840a:	429a      	cmp	r2, r3
 810840c:	d00d      	beq.n	810842a <ai_platform_inputs_get+0x96>
 810840e:	e7fe      	b.n	810840e <ai_platform_inputs_get+0x7a>
 8108410:	4a4a      	ldr	r2, [pc, #296]	; (810853c <ai_platform_inputs_get+0x1a8>)
 8108412:	2301      	movs	r3, #1
 8108414:	6093      	str	r3, [r2, #8]
 8108416:	6893      	ldr	r3, [r2, #8]
 8108418:	2b00      	cmp	r3, #0
 810841a:	d1fc      	bne.n	8108416 <ai_platform_inputs_get+0x82>
 810841c:	4b45      	ldr	r3, [pc, #276]	; (8108534 <ai_platform_inputs_get+0x1a0>)
 810841e:	6013      	str	r3, [r2, #0]
 8108420:	6812      	ldr	r2, [r2, #0]
 8108422:	4b45      	ldr	r3, [pc, #276]	; (8108538 <ai_platform_inputs_get+0x1a4>)
 8108424:	429a      	cmp	r2, r3
 8108426:	d000      	beq.n	810842a <ai_platform_inputs_get+0x96>
 8108428:	e7fe      	b.n	8108428 <ai_platform_inputs_get+0x94>
 810842a:	f7ff fe73 	bl	8108114 <_ai_platform_release_crc>
 810842e:	2000      	movs	r0, #0
 8108430:	b005      	add	sp, #20
 8108432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108436:	4a41      	ldr	r2, [pc, #260]	; (810853c <ai_platform_inputs_get+0x1a8>)
 8108438:	2301      	movs	r3, #1
 810843a:	6093      	str	r3, [r2, #8]
 810843c:	6893      	ldr	r3, [r2, #8]
 810843e:	2b00      	cmp	r3, #0
 8108440:	d1fc      	bne.n	810843c <ai_platform_inputs_get+0xa8>
 8108442:	4b3c      	ldr	r3, [pc, #240]	; (8108534 <ai_platform_inputs_get+0x1a0>)
 8108444:	6013      	str	r3, [r2, #0]
 8108446:	6812      	ldr	r2, [r2, #0]
 8108448:	4b3b      	ldr	r3, [pc, #236]	; (8108538 <ai_platform_inputs_get+0x1a4>)
 810844a:	429a      	cmp	r2, r3
 810844c:	d155      	bne.n	81084fa <ai_platform_inputs_get+0x166>
 810844e:	f7ff fe61 	bl	8108114 <_ai_platform_release_crc>
 8108452:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8108454:	2b00      	cmp	r3, #0
 8108456:	d051      	beq.n	81084fc <ai_platform_inputs_get+0x168>
 8108458:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 810845c:	f1ba 0f00 	cmp.w	sl, #0
 8108460:	d04c      	beq.n	81084fc <ai_platform_inputs_get+0x168>
 8108462:	f04f 0b00 	mov.w	fp, #0
 8108466:	465d      	mov	r5, fp
 8108468:	9703      	str	r7, [sp, #12]
 810846a:	e016      	b.n	810849a <ai_platform_inputs_get+0x106>
 810846c:	9901      	ldr	r1, [sp, #4]
 810846e:	2301      	movs	r3, #1
 8108470:	507b      	str	r3, [r7, r1]
 8108472:	69b1      	ldr	r1, [r6, #24]
 8108474:	6849      	ldr	r1, [r1, #4]
 8108476:	6121      	str	r1, [r4, #16]
 8108478:	f04f 0301 	mov.w	r3, #1
 810847c:	7523      	strb	r3, [r4, #20]
 810847e:	e9c4 c200 	strd	ip, r2, [r4]
 8108482:	6962      	ldr	r2, [r4, #20]
 8108484:	60a0      	str	r0, [r4, #8]
 8108486:	2300      	movs	r3, #0
 8108488:	f369 221f 	bfi	r2, r9, #8, #24
 810848c:	f8c4 8018 	str.w	r8, [r4, #24]
 8108490:	60e3      	str	r3, [r4, #12]
 8108492:	3501      	adds	r5, #1
 8108494:	f10b 0b1c 	add.w	fp, fp, #28
 8108498:	6162      	str	r2, [r4, #20]
 810849a:	f8ba 3000 	ldrh.w	r3, [sl]
 810849e:	42ab      	cmp	r3, r5
 81084a0:	b2aa      	uxth	r2, r5
 81084a2:	d93a      	bls.n	810851a <ai_platform_inputs_get+0x186>
 81084a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 81084a8:	00e9      	lsls	r1, r5, #3
 81084aa:	9101      	str	r1, [sp, #4]
 81084ac:	2b00      	cmp	r3, #0
 81084ae:	d034      	beq.n	810851a <ai_platform_inputs_get+0x186>
 81084b0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 81084b4:	2e00      	cmp	r6, #0
 81084b6:	d030      	beq.n	810851a <ai_platform_inputs_get+0x186>
 81084b8:	f8da 3008 	ldr.w	r3, [sl, #8]
 81084bc:	69b2      	ldr	r2, [r6, #24]
 81084be:	f8d6 800c 	ldr.w	r8, [r6, #12]
 81084c2:	6810      	ldr	r0, [r2, #0]
 81084c4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 81084c8:	68b3      	ldr	r3, [r6, #8]
 81084ca:	f3c3 2917 	ubfx	r9, r3, #8, #24
 81084ce:	f001 fc93 	bl	8109df8 <ai_array_to_buffer_fmt>
 81084d2:	69b1      	ldr	r1, [r6, #24]
 81084d4:	4684      	mov	ip, r0
 81084d6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 81084da:	688a      	ldr	r2, [r1, #8]
 81084dc:	445c      	add	r4, fp
 81084de:	2800      	cmp	r0, #0
 81084e0:	d0c8      	beq.n	8108474 <ai_platform_inputs_get+0xe0>
 81084e2:	2100      	movs	r1, #0
 81084e4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 81084e8:	6831      	ldr	r1, [r6, #0]
 81084ea:	6041      	str	r1, [r0, #4]
 81084ec:	b111      	cbz	r1, 81084f4 <ai_platform_inputs_get+0x160>
 81084ee:	8849      	ldrh	r1, [r1, #2]
 81084f0:	2900      	cmp	r1, #0
 81084f2:	d1bb      	bne.n	810846c <ai_platform_inputs_get+0xd8>
 81084f4:	69b1      	ldr	r1, [r6, #24]
 81084f6:	2000      	movs	r0, #0
 81084f8:	e7bc      	b.n	8108474 <ai_platform_inputs_get+0xe0>
 81084fa:	e7fe      	b.n	81084fa <ai_platform_inputs_get+0x166>
 81084fc:	2218      	movs	r2, #24
 81084fe:	2111      	movs	r1, #17
 8108500:	f107 0010 	add.w	r0, r7, #16
 8108504:	f000 fdc4 	bl	8109090 <core_set_error>
 8108508:	2200      	movs	r2, #0
 810850a:	4610      	mov	r0, r2
 810850c:	9b02      	ldr	r3, [sp, #8]
 810850e:	2b00      	cmp	r3, #0
 8108510:	d08e      	beq.n	8108430 <ai_platform_inputs_get+0x9c>
 8108512:	801a      	strh	r2, [r3, #0]
 8108514:	b005      	add	sp, #20
 8108516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810851a:	9f03      	ldr	r7, [sp, #12]
 810851c:	2a00      	cmp	r2, #0
 810851e:	d0ed      	beq.n	81084fc <ai_platform_inputs_get+0x168>
 8108520:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108524:	6858      	ldr	r0, [r3, #4]
 8108526:	e7f1      	b.n	810850c <ai_platform_inputs_get+0x178>
 8108528:	a1c00100 	.word	0xa1c00100
 810852c:	e0042000 	.word	0xe0042000
 8108530:	58024000 	.word	0x58024000
 8108534:	f407a5c2 	.word	0xf407a5c2
 8108538:	b5e8b5cd 	.word	0xb5e8b5cd
 810853c:	40023000 	.word	0x40023000

08108540 <ai_platform_outputs_get>:
 8108540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108544:	b085      	sub	sp, #20
 8108546:	9102      	str	r1, [sp, #8]
 8108548:	b1f0      	cbz	r0, 8108588 <ai_platform_outputs_get+0x48>
 810854a:	4b5f      	ldr	r3, [pc, #380]	; (81086c8 <ai_platform_outputs_get+0x188>)
 810854c:	6802      	ldr	r2, [r0, #0]
 810854e:	429a      	cmp	r2, r3
 8108550:	4607      	mov	r7, r0
 8108552:	d119      	bne.n	8108588 <ai_platform_outputs_get+0x48>
 8108554:	f7ff fddc 	bl	8108110 <_ai_platform_acquire_crc>
 8108558:	4b5c      	ldr	r3, [pc, #368]	; (81086cc <ai_platform_outputs_get+0x18c>)
 810855a:	681b      	ldr	r3, [r3, #0]
 810855c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108564:	d03d      	beq.n	81085e2 <ai_platform_outputs_get+0xa2>
 8108566:	4a5a      	ldr	r2, [pc, #360]	; (81086d0 <ai_platform_outputs_get+0x190>)
 8108568:	2301      	movs	r3, #1
 810856a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 810856e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108572:	2b00      	cmp	r3, #0
 8108574:	d1fb      	bne.n	810856e <ai_platform_outputs_get+0x2e>
 8108576:	4b57      	ldr	r3, [pc, #348]	; (81086d4 <ai_platform_outputs_get+0x194>)
 8108578:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 810857c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108580:	4b55      	ldr	r3, [pc, #340]	; (81086d8 <ai_platform_outputs_get+0x198>)
 8108582:	429a      	cmp	r2, r3
 8108584:	d039      	beq.n	81085fa <ai_platform_outputs_get+0xba>
 8108586:	e7fe      	b.n	8108586 <ai_platform_outputs_get+0x46>
 8108588:	f7ff fdc2 	bl	8108110 <_ai_platform_acquire_crc>
 810858c:	4b4f      	ldr	r3, [pc, #316]	; (81086cc <ai_platform_outputs_get+0x18c>)
 810858e:	681b      	ldr	r3, [r3, #0]
 8108590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108598:	d010      	beq.n	81085bc <ai_platform_outputs_get+0x7c>
 810859a:	4a4d      	ldr	r2, [pc, #308]	; (81086d0 <ai_platform_outputs_get+0x190>)
 810859c:	2301      	movs	r3, #1
 810859e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81085a2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81085a6:	2b00      	cmp	r3, #0
 81085a8:	d1fb      	bne.n	81085a2 <ai_platform_outputs_get+0x62>
 81085aa:	4b4a      	ldr	r3, [pc, #296]	; (81086d4 <ai_platform_outputs_get+0x194>)
 81085ac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81085b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81085b4:	4b48      	ldr	r3, [pc, #288]	; (81086d8 <ai_platform_outputs_get+0x198>)
 81085b6:	429a      	cmp	r2, r3
 81085b8:	d00d      	beq.n	81085d6 <ai_platform_outputs_get+0x96>
 81085ba:	e7fe      	b.n	81085ba <ai_platform_outputs_get+0x7a>
 81085bc:	4a47      	ldr	r2, [pc, #284]	; (81086dc <ai_platform_outputs_get+0x19c>)
 81085be:	2301      	movs	r3, #1
 81085c0:	6093      	str	r3, [r2, #8]
 81085c2:	6893      	ldr	r3, [r2, #8]
 81085c4:	2b00      	cmp	r3, #0
 81085c6:	d1fc      	bne.n	81085c2 <ai_platform_outputs_get+0x82>
 81085c8:	4b42      	ldr	r3, [pc, #264]	; (81086d4 <ai_platform_outputs_get+0x194>)
 81085ca:	6013      	str	r3, [r2, #0]
 81085cc:	6812      	ldr	r2, [r2, #0]
 81085ce:	4b42      	ldr	r3, [pc, #264]	; (81086d8 <ai_platform_outputs_get+0x198>)
 81085d0:	429a      	cmp	r2, r3
 81085d2:	d000      	beq.n	81085d6 <ai_platform_outputs_get+0x96>
 81085d4:	e7fe      	b.n	81085d4 <ai_platform_outputs_get+0x94>
 81085d6:	f7ff fd9d 	bl	8108114 <_ai_platform_release_crc>
 81085da:	2000      	movs	r0, #0
 81085dc:	b005      	add	sp, #20
 81085de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81085e2:	4a3e      	ldr	r2, [pc, #248]	; (81086dc <ai_platform_outputs_get+0x19c>)
 81085e4:	2301      	movs	r3, #1
 81085e6:	6093      	str	r3, [r2, #8]
 81085e8:	6893      	ldr	r3, [r2, #8]
 81085ea:	2b00      	cmp	r3, #0
 81085ec:	d1fc      	bne.n	81085e8 <ai_platform_outputs_get+0xa8>
 81085ee:	4b39      	ldr	r3, [pc, #228]	; (81086d4 <ai_platform_outputs_get+0x194>)
 81085f0:	6013      	str	r3, [r2, #0]
 81085f2:	6812      	ldr	r2, [r2, #0]
 81085f4:	4b38      	ldr	r3, [pc, #224]	; (81086d8 <ai_platform_outputs_get+0x198>)
 81085f6:	429a      	cmp	r2, r3
 81085f8:	d150      	bne.n	810869c <ai_platform_outputs_get+0x15c>
 81085fa:	f7ff fd8b 	bl	8108114 <_ai_platform_release_crc>
 81085fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8108600:	2b01      	cmp	r3, #1
 8108602:	d958      	bls.n	81086b6 <ai_platform_outputs_get+0x176>
 8108604:	f04f 0b00 	mov.w	fp, #0
 8108608:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 810860c:	9703      	str	r7, [sp, #12]
 810860e:	465d      	mov	r5, fp
 8108610:	e016      	b.n	8108640 <ai_platform_outputs_get+0x100>
 8108612:	9901      	ldr	r1, [sp, #4]
 8108614:	2301      	movs	r3, #1
 8108616:	507b      	str	r3, [r7, r1]
 8108618:	69b1      	ldr	r1, [r6, #24]
 810861a:	6849      	ldr	r1, [r1, #4]
 810861c:	6121      	str	r1, [r4, #16]
 810861e:	f04f 0301 	mov.w	r3, #1
 8108622:	7523      	strb	r3, [r4, #20]
 8108624:	e9c4 c200 	strd	ip, r2, [r4]
 8108628:	6962      	ldr	r2, [r4, #20]
 810862a:	60a0      	str	r0, [r4, #8]
 810862c:	2300      	movs	r3, #0
 810862e:	f369 221f 	bfi	r2, r9, #8, #24
 8108632:	f8c4 8018 	str.w	r8, [r4, #24]
 8108636:	60e3      	str	r3, [r4, #12]
 8108638:	3501      	adds	r5, #1
 810863a:	f10b 0b1c 	add.w	fp, fp, #28
 810863e:	6162      	str	r2, [r4, #20]
 8108640:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8108644:	42ab      	cmp	r3, r5
 8108646:	b2aa      	uxth	r2, r5
 8108648:	d929      	bls.n	810869e <ai_platform_outputs_get+0x15e>
 810864a:	f8da 3010 	ldr.w	r3, [sl, #16]
 810864e:	00e9      	lsls	r1, r5, #3
 8108650:	9101      	str	r1, [sp, #4]
 8108652:	b323      	cbz	r3, 810869e <ai_platform_outputs_get+0x15e>
 8108654:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8108658:	b30e      	cbz	r6, 810869e <ai_platform_outputs_get+0x15e>
 810865a:	f8da 3014 	ldr.w	r3, [sl, #20]
 810865e:	69b2      	ldr	r2, [r6, #24]
 8108660:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8108664:	6810      	ldr	r0, [r2, #0]
 8108666:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 810866a:	68b3      	ldr	r3, [r6, #8]
 810866c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8108670:	f001 fbc2 	bl	8109df8 <ai_array_to_buffer_fmt>
 8108674:	69b1      	ldr	r1, [r6, #24]
 8108676:	4684      	mov	ip, r0
 8108678:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 810867c:	688a      	ldr	r2, [r1, #8]
 810867e:	445c      	add	r4, fp
 8108680:	2800      	cmp	r0, #0
 8108682:	d0ca      	beq.n	810861a <ai_platform_outputs_get+0xda>
 8108684:	2100      	movs	r1, #0
 8108686:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 810868a:	6831      	ldr	r1, [r6, #0]
 810868c:	6041      	str	r1, [r0, #4]
 810868e:	b111      	cbz	r1, 8108696 <ai_platform_outputs_get+0x156>
 8108690:	8849      	ldrh	r1, [r1, #2]
 8108692:	2900      	cmp	r1, #0
 8108694:	d1bd      	bne.n	8108612 <ai_platform_outputs_get+0xd2>
 8108696:	69b1      	ldr	r1, [r6, #24]
 8108698:	2000      	movs	r0, #0
 810869a:	e7be      	b.n	810861a <ai_platform_outputs_get+0xda>
 810869c:	e7fe      	b.n	810869c <ai_platform_outputs_get+0x15c>
 810869e:	9f03      	ldr	r7, [sp, #12]
 81086a0:	b14a      	cbz	r2, 81086b6 <ai_platform_outputs_get+0x176>
 81086a2:	f8da 3014 	ldr.w	r3, [sl, #20]
 81086a6:	6858      	ldr	r0, [r3, #4]
 81086a8:	9b02      	ldr	r3, [sp, #8]
 81086aa:	2b00      	cmp	r3, #0
 81086ac:	d096      	beq.n	81085dc <ai_platform_outputs_get+0x9c>
 81086ae:	801a      	strh	r2, [r3, #0]
 81086b0:	b005      	add	sp, #20
 81086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81086b6:	2218      	movs	r2, #24
 81086b8:	2111      	movs	r1, #17
 81086ba:	f107 0010 	add.w	r0, r7, #16
 81086be:	f000 fce7 	bl	8109090 <core_set_error>
 81086c2:	2200      	movs	r2, #0
 81086c4:	4610      	mov	r0, r2
 81086c6:	e7ef      	b.n	81086a8 <ai_platform_outputs_get+0x168>
 81086c8:	a1c00100 	.word	0xa1c00100
 81086cc:	e0042000 	.word	0xe0042000
 81086d0:	58024000 	.word	0x58024000
 81086d4:	f407a5c2 	.word	0xf407a5c2
 81086d8:	b5e8b5cd 	.word	0xb5e8b5cd
 81086dc:	40023000 	.word	0x40023000

081086e0 <ai_platform_network_create>:
 81086e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81086e4:	b083      	sub	sp, #12
 81086e6:	4606      	mov	r6, r0
 81086e8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 81086ec:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 81086f0:	4615      	mov	r5, r2
 81086f2:	461f      	mov	r7, r3
 81086f4:	f7ff fd0c 	bl	8108110 <_ai_platform_acquire_crc>
 81086f8:	b188      	cbz	r0, 810871e <ai_platform_network_create+0x3e>
 81086fa:	4a5d      	ldr	r2, [pc, #372]	; (8108870 <ai_platform_network_create+0x190>)
 81086fc:	6812      	ldr	r2, [r2, #0]
 81086fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8108702:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8108706:	4603      	mov	r3, r0
 8108708:	d00e      	beq.n	8108728 <ai_platform_network_create+0x48>
 810870a:	4a5a      	ldr	r2, [pc, #360]	; (8108874 <ai_platform_network_create+0x194>)
 810870c:	2118      	movs	r1, #24
 810870e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8108712:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8108716:	2918      	cmp	r1, #24
 8108718:	d018      	beq.n	810874c <ai_platform_network_create+0x6c>
 810871a:	f7ff fcfb 	bl	8108114 <_ai_platform_release_crc>
 810871e:	f244 1033 	movw	r0, #16691	; 0x4133
 8108722:	b003      	add	sp, #12
 8108724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108728:	4a53      	ldr	r2, [pc, #332]	; (8108878 <ai_platform_network_create+0x198>)
 810872a:	2101      	movs	r1, #1
 810872c:	6091      	str	r1, [r2, #8]
 810872e:	2114      	movs	r1, #20
 8108730:	e001      	b.n	8108736 <ai_platform_network_create+0x56>
 8108732:	3901      	subs	r1, #1
 8108734:	d002      	beq.n	810873c <ai_platform_network_create+0x5c>
 8108736:	6894      	ldr	r4, [r2, #8]
 8108738:	2c00      	cmp	r4, #0
 810873a:	d1fa      	bne.n	8108732 <ai_platform_network_create+0x52>
 810873c:	4a4e      	ldr	r2, [pc, #312]	; (8108878 <ai_platform_network_create+0x198>)
 810873e:	6891      	ldr	r1, [r2, #8]
 8108740:	b911      	cbnz	r1, 8108748 <ai_platform_network_create+0x68>
 8108742:	6812      	ldr	r2, [r2, #0]
 8108744:	3201      	adds	r2, #1
 8108746:	d008      	beq.n	810875a <ai_platform_network_create+0x7a>
 8108748:	4618      	mov	r0, r3
 810874a:	e7e6      	b.n	810871a <ai_platform_network_create+0x3a>
 810874c:	2101      	movs	r1, #1
 810874e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8108752:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8108756:	2900      	cmp	r1, #0
 8108758:	d1fb      	bne.n	8108752 <ai_platform_network_create+0x72>
 810875a:	4618      	mov	r0, r3
 810875c:	f7ff fcda 	bl	8108114 <_ai_platform_release_crc>
 8108760:	f7ff fcd6 	bl	8108110 <_ai_platform_acquire_crc>
 8108764:	4b42      	ldr	r3, [pc, #264]	; (8108870 <ai_platform_network_create+0x190>)
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810876c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108770:	d010      	beq.n	8108794 <ai_platform_network_create+0xb4>
 8108772:	4b40      	ldr	r3, [pc, #256]	; (8108874 <ai_platform_network_create+0x194>)
 8108774:	2201      	movs	r2, #1
 8108776:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 810877a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 810877e:	2900      	cmp	r1, #0
 8108780:	d1fb      	bne.n	810877a <ai_platform_network_create+0x9a>
 8108782:	4a3e      	ldr	r2, [pc, #248]	; (810887c <ai_platform_network_create+0x19c>)
 8108784:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8108788:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 810878c:	4b3c      	ldr	r3, [pc, #240]	; (8108880 <ai_platform_network_create+0x1a0>)
 810878e:	429a      	cmp	r2, r3
 8108790:	d00c      	beq.n	81087ac <ai_platform_network_create+0xcc>
 8108792:	e7fe      	b.n	8108792 <ai_platform_network_create+0xb2>
 8108794:	4a38      	ldr	r2, [pc, #224]	; (8108878 <ai_platform_network_create+0x198>)
 8108796:	2301      	movs	r3, #1
 8108798:	6093      	str	r3, [r2, #8]
 810879a:	6893      	ldr	r3, [r2, #8]
 810879c:	2b00      	cmp	r3, #0
 810879e:	d1fc      	bne.n	810879a <ai_platform_network_create+0xba>
 81087a0:	4b36      	ldr	r3, [pc, #216]	; (810887c <ai_platform_network_create+0x19c>)
 81087a2:	6013      	str	r3, [r2, #0]
 81087a4:	6812      	ldr	r2, [r2, #0]
 81087a6:	4b36      	ldr	r3, [pc, #216]	; (8108880 <ai_platform_network_create+0x1a0>)
 81087a8:	429a      	cmp	r2, r3
 81087aa:	d122      	bne.n	81087f2 <ai_platform_network_create+0x112>
 81087ac:	f7ff fcb2 	bl	8108114 <_ai_platform_release_crc>
 81087b0:	b38e      	cbz	r6, 8108816 <ai_platform_network_create+0x136>
 81087b2:	4b34      	ldr	r3, [pc, #208]	; (8108884 <ai_platform_network_create+0x1a4>)
 81087b4:	602b      	str	r3, [r5, #0]
 81087b6:	6035      	str	r5, [r6, #0]
 81087b8:	f000 fc62 	bl	8109080 <core_init>
 81087bc:	b1d0      	cbz	r0, 81087f4 <ai_platform_network_create+0x114>
 81087be:	f7ff fca7 	bl	8108110 <_ai_platform_acquire_crc>
 81087c2:	4b2b      	ldr	r3, [pc, #172]	; (8108870 <ai_platform_network_create+0x190>)
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81087ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81087ce:	d025      	beq.n	810881c <ai_platform_network_create+0x13c>
 81087d0:	4a28      	ldr	r2, [pc, #160]	; (8108874 <ai_platform_network_create+0x194>)
 81087d2:	2301      	movs	r3, #1
 81087d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81087d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81087dc:	2b00      	cmp	r3, #0
 81087de:	d1fb      	bne.n	81087d8 <ai_platform_network_create+0xf8>
 81087e0:	4b26      	ldr	r3, [pc, #152]	; (810887c <ai_platform_network_create+0x19c>)
 81087e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81087e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81087ea:	4b25      	ldr	r3, [pc, #148]	; (8108880 <ai_platform_network_create+0x1a0>)
 81087ec:	429a      	cmp	r2, r3
 81087ee:	d022      	beq.n	8108836 <ai_platform_network_create+0x156>
 81087f0:	e7fe      	b.n	81087f0 <ai_platform_network_create+0x110>
 81087f2:	e7fe      	b.n	81087f2 <ai_platform_network_create+0x112>
 81087f4:	2430      	movs	r4, #48	; 0x30
 81087f6:	2300      	movs	r3, #0
 81087f8:	6033      	str	r3, [r6, #0]
 81087fa:	2610      	movs	r6, #16
 81087fc:	464a      	mov	r2, r9
 81087fe:	4641      	mov	r1, r8
 8108800:	4638      	mov	r0, r7
 8108802:	f001 fb9f 	bl	8109f44 <ai_version_get>
 8108806:	4603      	mov	r3, r0
 8108808:	2000      	movs	r0, #0
 810880a:	f364 0007 	bfi	r0, r4, #0, #8
 810880e:	64ab      	str	r3, [r5, #72]	; 0x48
 8108810:	f366 201f 	bfi	r0, r6, #8, #24
 8108814:	e785      	b.n	8108722 <ai_platform_network_create+0x42>
 8108816:	f241 0010 	movw	r0, #4112	; 0x1010
 810881a:	e782      	b.n	8108722 <ai_platform_network_create+0x42>
 810881c:	4a16      	ldr	r2, [pc, #88]	; (8108878 <ai_platform_network_create+0x198>)
 810881e:	2301      	movs	r3, #1
 8108820:	6093      	str	r3, [r2, #8]
 8108822:	6893      	ldr	r3, [r2, #8]
 8108824:	2b00      	cmp	r3, #0
 8108826:	d1fc      	bne.n	8108822 <ai_platform_network_create+0x142>
 8108828:	4b14      	ldr	r3, [pc, #80]	; (810887c <ai_platform_network_create+0x19c>)
 810882a:	6013      	str	r3, [r2, #0]
 810882c:	6812      	ldr	r2, [r2, #0]
 810882e:	4b14      	ldr	r3, [pc, #80]	; (8108880 <ai_platform_network_create+0x1a0>)
 8108830:	429a      	cmp	r2, r3
 8108832:	d000      	beq.n	8108836 <ai_platform_network_create+0x156>
 8108834:	e7fe      	b.n	8108834 <ai_platform_network_create+0x154>
 8108836:	f7ff fc6d 	bl	8108114 <_ai_platform_release_crc>
 810883a:	2200      	movs	r2, #0
 810883c:	4641      	mov	r1, r8
 810883e:	4638      	mov	r0, r7
 8108840:	f001 fb80 	bl	8109f44 <ai_version_get>
 8108844:	2200      	movs	r2, #0
 8108846:	4604      	mov	r4, r0
 8108848:	2105      	movs	r1, #5
 810884a:	2001      	movs	r0, #1
 810884c:	f001 fb7a 	bl	8109f44 <ai_version_get>
 8108850:	4284      	cmp	r4, r0
 8108852:	d001      	beq.n	8108858 <ai_platform_network_create+0x178>
 8108854:	2401      	movs	r4, #1
 8108856:	e7ce      	b.n	81087f6 <ai_platform_network_create+0x116>
 8108858:	4b0b      	ldr	r3, [pc, #44]	; (8108888 <ai_platform_network_create+0x1a8>)
 810885a:	9301      	str	r3, [sp, #4]
 810885c:	a801      	add	r0, sp, #4
 810885e:	f000 fc23 	bl	81090a8 <ai_check_custom_types>
 8108862:	b110      	cbz	r0, 810886a <ai_platform_network_create+0x18a>
 8108864:	2600      	movs	r6, #0
 8108866:	4634      	mov	r4, r6
 8108868:	e7c8      	b.n	81087fc <ai_platform_network_create+0x11c>
 810886a:	2402      	movs	r4, #2
 810886c:	e7c3      	b.n	81087f6 <ai_platform_network_create+0x116>
 810886e:	bf00      	nop
 8108870:	e0042000 	.word	0xe0042000
 8108874:	58024000 	.word	0x58024000
 8108878:	40023000 	.word	0x40023000
 810887c:	f407a5c2 	.word	0xf407a5c2
 8108880:	b5e8b5cd 	.word	0xb5e8b5cd
 8108884:	a1c00100 	.word	0xa1c00100
 8108888:	84048403 	.word	0x84048403

0810888c <ai_platform_network_init>:
 810888c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108890:	b1f8      	cbz	r0, 81088d2 <ai_platform_network_init+0x46>
 8108892:	4b6e      	ldr	r3, [pc, #440]	; (8108a4c <ai_platform_network_init+0x1c0>)
 8108894:	6802      	ldr	r2, [r0, #0]
 8108896:	429a      	cmp	r2, r3
 8108898:	4604      	mov	r4, r0
 810889a:	d11a      	bne.n	81088d2 <ai_platform_network_init+0x46>
 810889c:	460e      	mov	r6, r1
 810889e:	f7ff fc37 	bl	8108110 <_ai_platform_acquire_crc>
 81088a2:	4b6b      	ldr	r3, [pc, #428]	; (8108a50 <ai_platform_network_init+0x1c4>)
 81088a4:	681b      	ldr	r3, [r3, #0]
 81088a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81088aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81088ae:	d03d      	beq.n	810892c <ai_platform_network_init+0xa0>
 81088b0:	4a68      	ldr	r2, [pc, #416]	; (8108a54 <ai_platform_network_init+0x1c8>)
 81088b2:	2301      	movs	r3, #1
 81088b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81088b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81088bc:	2b00      	cmp	r3, #0
 81088be:	d1fb      	bne.n	81088b8 <ai_platform_network_init+0x2c>
 81088c0:	4b65      	ldr	r3, [pc, #404]	; (8108a58 <ai_platform_network_init+0x1cc>)
 81088c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81088c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81088ca:	4b64      	ldr	r3, [pc, #400]	; (8108a5c <ai_platform_network_init+0x1d0>)
 81088cc:	429a      	cmp	r2, r3
 81088ce:	d039      	beq.n	8108944 <ai_platform_network_init+0xb8>
 81088d0:	e7fe      	b.n	81088d0 <ai_platform_network_init+0x44>
 81088d2:	f7ff fc1d 	bl	8108110 <_ai_platform_acquire_crc>
 81088d6:	4b5e      	ldr	r3, [pc, #376]	; (8108a50 <ai_platform_network_init+0x1c4>)
 81088d8:	681b      	ldr	r3, [r3, #0]
 81088da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 81088de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81088e2:	d010      	beq.n	8108906 <ai_platform_network_init+0x7a>
 81088e4:	4a5b      	ldr	r2, [pc, #364]	; (8108a54 <ai_platform_network_init+0x1c8>)
 81088e6:	2301      	movs	r3, #1
 81088e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 81088ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	d1fb      	bne.n	81088ec <ai_platform_network_init+0x60>
 81088f4:	4b58      	ldr	r3, [pc, #352]	; (8108a58 <ai_platform_network_init+0x1cc>)
 81088f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 81088fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 81088fe:	4b57      	ldr	r3, [pc, #348]	; (8108a5c <ai_platform_network_init+0x1d0>)
 8108900:	429a      	cmp	r2, r3
 8108902:	d00d      	beq.n	8108920 <ai_platform_network_init+0x94>
 8108904:	e7fe      	b.n	8108904 <ai_platform_network_init+0x78>
 8108906:	4a56      	ldr	r2, [pc, #344]	; (8108a60 <ai_platform_network_init+0x1d4>)
 8108908:	2301      	movs	r3, #1
 810890a:	6093      	str	r3, [r2, #8]
 810890c:	6893      	ldr	r3, [r2, #8]
 810890e:	2b00      	cmp	r3, #0
 8108910:	d1fc      	bne.n	810890c <ai_platform_network_init+0x80>
 8108912:	4b51      	ldr	r3, [pc, #324]	; (8108a58 <ai_platform_network_init+0x1cc>)
 8108914:	6013      	str	r3, [r2, #0]
 8108916:	6812      	ldr	r2, [r2, #0]
 8108918:	4b50      	ldr	r3, [pc, #320]	; (8108a5c <ai_platform_network_init+0x1d0>)
 810891a:	429a      	cmp	r2, r3
 810891c:	d000      	beq.n	8108920 <ai_platform_network_init+0x94>
 810891e:	e7fe      	b.n	810891e <ai_platform_network_init+0x92>
 8108920:	f7ff fbf8 	bl	8108114 <_ai_platform_release_crc>
 8108924:	2600      	movs	r6, #0
 8108926:	4630      	mov	r0, r6
 8108928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810892c:	4a4c      	ldr	r2, [pc, #304]	; (8108a60 <ai_platform_network_init+0x1d4>)
 810892e:	2301      	movs	r3, #1
 8108930:	6093      	str	r3, [r2, #8]
 8108932:	6893      	ldr	r3, [r2, #8]
 8108934:	2b00      	cmp	r3, #0
 8108936:	d1fc      	bne.n	8108932 <ai_platform_network_init+0xa6>
 8108938:	4b47      	ldr	r3, [pc, #284]	; (8108a58 <ai_platform_network_init+0x1cc>)
 810893a:	6013      	str	r3, [r2, #0]
 810893c:	6812      	ldr	r2, [r2, #0]
 810893e:	4b47      	ldr	r3, [pc, #284]	; (8108a5c <ai_platform_network_init+0x1d0>)
 8108940:	429a      	cmp	r2, r3
 8108942:	d11c      	bne.n	810897e <ai_platform_network_init+0xf2>
 8108944:	f7ff fbe6 	bl	8108114 <_ai_platform_release_crc>
 8108948:	2e00      	cmp	r6, #0
 810894a:	d06f      	beq.n	8108a2c <ai_platform_network_init+0x1a0>
 810894c:	4b45      	ldr	r3, [pc, #276]	; (8108a64 <ai_platform_network_init+0x1d8>)
 810894e:	6832      	ldr	r2, [r6, #0]
 8108950:	429a      	cmp	r2, r3
 8108952:	d115      	bne.n	8108980 <ai_platform_network_init+0xf4>
 8108954:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8108958:	6933      	ldr	r3, [r6, #16]
 810895a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 810895e:	89f7      	ldrh	r7, [r6, #14]
 8108960:	62a3      	str	r3, [r4, #40]	; 0x28
 8108962:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8108966:	2303      	movs	r3, #3
 8108968:	84e7      	strh	r7, [r4, #38]	; 0x26
 810896a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 810896e:	60e3      	str	r3, [r4, #12]
 8108970:	4620      	mov	r0, r4
 8108972:	4626      	mov	r6, r4
 8108974:	f000 fbc2 	bl	81090fc <ai_layers_init_all>
 8108978:	4630      	mov	r0, r6
 810897a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810897e:	e7fe      	b.n	810897e <ai_platform_network_init+0xf2>
 8108980:	2101      	movs	r1, #1
 8108982:	4630      	mov	r0, r6
 8108984:	4635      	mov	r5, r6
 8108986:	6876      	ldr	r6, [r6, #4]
 8108988:	f7ff fb74 	bl	8108074 <ai_buffer_get_size>
 810898c:	f105 081c 	add.w	r8, r5, #28
 8108990:	4681      	mov	r9, r0
 8108992:	2101      	movs	r1, #1
 8108994:	4640      	mov	r0, r8
 8108996:	6a2f      	ldr	r7, [r5, #32]
 8108998:	f7ff fb6c 	bl	8108074 <ai_buffer_get_size>
 810899c:	f1b9 0f00 	cmp.w	r9, #0
 81089a0:	d025      	beq.n	81089ee <ai_platform_network_init+0x162>
 81089a2:	2201      	movs	r2, #1
 81089a4:	4696      	mov	lr, r2
 81089a6:	bb30      	cbnz	r0, 81089f6 <ai_platform_network_init+0x16a>
 81089a8:	4680      	mov	r8, r0
 81089aa:	4607      	mov	r7, r0
 81089ac:	b376      	cbz	r6, 8108a0c <ai_platform_network_init+0x180>
 81089ae:	8be3      	ldrh	r3, [r4, #30]
 81089b0:	4573      	cmp	r3, lr
 81089b2:	d323      	bcc.n	81089fc <ai_platform_network_init+0x170>
 81089b4:	b142      	cbz	r2, 81089c8 <ai_platform_network_init+0x13c>
 81089b6:	46ac      	mov	ip, r5
 81089b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 81089bc:	6a25      	ldr	r5, [r4, #32]
 81089be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81089c0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 81089c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 81089c8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 81089ca:	f8a4 e01e 	strh.w	lr, [r4, #30]
 81089ce:	2600      	movs	r6, #0
 81089d0:	42bb      	cmp	r3, r7
 81089d2:	83a6      	strh	r6, [r4, #28]
 81089d4:	d323      	bcc.n	8108a1e <ai_platform_network_init+0x192>
 81089d6:	b37f      	cbz	r7, 8108a38 <ai_platform_network_init+0x1ac>
 81089d8:	46c4      	mov	ip, r8
 81089da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 81089de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 81089e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81089e2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 81089e6:	46b6      	mov	lr, r6
 81089e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 81089ec:	e7bb      	b.n	8108966 <ai_platform_network_init+0xda>
 81089ee:	464a      	mov	r2, r9
 81089f0:	46ce      	mov	lr, r9
 81089f2:	464d      	mov	r5, r9
 81089f4:	e7d7      	b.n	81089a6 <ai_platform_network_init+0x11a>
 81089f6:	b30f      	cbz	r7, 8108a3c <ai_platform_network_init+0x1b0>
 81089f8:	2701      	movs	r7, #1
 81089fa:	e7d7      	b.n	81089ac <ai_platform_network_init+0x120>
 81089fc:	2212      	movs	r2, #18
 81089fe:	2116      	movs	r1, #22
 8108a00:	f104 0010 	add.w	r0, r4, #16
 8108a04:	f000 fb44 	bl	8109090 <core_set_error>
 8108a08:	2600      	movs	r6, #0
 8108a0a:	e78c      	b.n	8108926 <ai_platform_network_init+0x9a>
 8108a0c:	f1b9 0f00 	cmp.w	r9, #0
 8108a10:	d0cd      	beq.n	81089ae <ai_platform_network_init+0x122>
 8108a12:	2110      	movs	r1, #16
 8108a14:	2212      	movs	r2, #18
 8108a16:	1860      	adds	r0, r4, r1
 8108a18:	f000 fb3a 	bl	8109090 <core_set_error>
 8108a1c:	e783      	b.n	8108926 <ai_platform_network_init+0x9a>
 8108a1e:	2213      	movs	r2, #19
 8108a20:	2116      	movs	r1, #22
 8108a22:	f104 0010 	add.w	r0, r4, #16
 8108a26:	f000 fb33 	bl	8109090 <core_set_error>
 8108a2a:	e77c      	b.n	8108926 <ai_platform_network_init+0x9a>
 8108a2c:	2110      	movs	r1, #16
 8108a2e:	2211      	movs	r2, #17
 8108a30:	1860      	adds	r0, r4, r1
 8108a32:	f000 fb2d 	bl	8109090 <core_set_error>
 8108a36:	e776      	b.n	8108926 <ai_platform_network_init+0x9a>
 8108a38:	46be      	mov	lr, r7
 8108a3a:	e794      	b.n	8108966 <ai_platform_network_init+0xda>
 8108a3c:	2110      	movs	r1, #16
 8108a3e:	2213      	movs	r2, #19
 8108a40:	1860      	adds	r0, r4, r1
 8108a42:	f000 fb25 	bl	8109090 <core_set_error>
 8108a46:	463e      	mov	r6, r7
 8108a48:	e76d      	b.n	8108926 <ai_platform_network_init+0x9a>
 8108a4a:	bf00      	nop
 8108a4c:	a1c00100 	.word	0xa1c00100
 8108a50:	e0042000 	.word	0xe0042000
 8108a54:	58024000 	.word	0x58024000
 8108a58:	f407a5c2 	.word	0xf407a5c2
 8108a5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8108a60:	40023000 	.word	0x40023000
 8108a64:	a1facade 	.word	0xa1facade

08108a68 <ai_platform_network_post_init>:
 8108a68:	b538      	push	{r3, r4, r5, lr}
 8108a6a:	b1f0      	cbz	r0, 8108aaa <ai_platform_network_post_init+0x42>
 8108a6c:	4b3c      	ldr	r3, [pc, #240]	; (8108b60 <ai_platform_network_post_init+0xf8>)
 8108a6e:	6802      	ldr	r2, [r0, #0]
 8108a70:	429a      	cmp	r2, r3
 8108a72:	4604      	mov	r4, r0
 8108a74:	d119      	bne.n	8108aaa <ai_platform_network_post_init+0x42>
 8108a76:	f7ff fb4b 	bl	8108110 <_ai_platform_acquire_crc>
 8108a7a:	4b3a      	ldr	r3, [pc, #232]	; (8108b64 <ai_platform_network_post_init+0xfc>)
 8108a7c:	681b      	ldr	r3, [r3, #0]
 8108a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108a86:	d03b      	beq.n	8108b00 <ai_platform_network_post_init+0x98>
 8108a88:	4a37      	ldr	r2, [pc, #220]	; (8108b68 <ai_platform_network_post_init+0x100>)
 8108a8a:	2301      	movs	r3, #1
 8108a8c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108a90:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108a94:	2b00      	cmp	r3, #0
 8108a96:	d1fb      	bne.n	8108a90 <ai_platform_network_post_init+0x28>
 8108a98:	4b34      	ldr	r3, [pc, #208]	; (8108b6c <ai_platform_network_post_init+0x104>)
 8108a9a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108a9e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108aa2:	4b33      	ldr	r3, [pc, #204]	; (8108b70 <ai_platform_network_post_init+0x108>)
 8108aa4:	429a      	cmp	r2, r3
 8108aa6:	d037      	beq.n	8108b18 <ai_platform_network_post_init+0xb0>
 8108aa8:	e7fe      	b.n	8108aa8 <ai_platform_network_post_init+0x40>
 8108aaa:	f7ff fb31 	bl	8108110 <_ai_platform_acquire_crc>
 8108aae:	4b2d      	ldr	r3, [pc, #180]	; (8108b64 <ai_platform_network_post_init+0xfc>)
 8108ab0:	681b      	ldr	r3, [r3, #0]
 8108ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108aba:	d010      	beq.n	8108ade <ai_platform_network_post_init+0x76>
 8108abc:	4a2a      	ldr	r2, [pc, #168]	; (8108b68 <ai_platform_network_post_init+0x100>)
 8108abe:	2301      	movs	r3, #1
 8108ac0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108ac4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108ac8:	2b00      	cmp	r3, #0
 8108aca:	d1fb      	bne.n	8108ac4 <ai_platform_network_post_init+0x5c>
 8108acc:	4b27      	ldr	r3, [pc, #156]	; (8108b6c <ai_platform_network_post_init+0x104>)
 8108ace:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108ad2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108ad6:	4b26      	ldr	r3, [pc, #152]	; (8108b70 <ai_platform_network_post_init+0x108>)
 8108ad8:	429a      	cmp	r2, r3
 8108ada:	d00d      	beq.n	8108af8 <ai_platform_network_post_init+0x90>
 8108adc:	e7fe      	b.n	8108adc <ai_platform_network_post_init+0x74>
 8108ade:	4a25      	ldr	r2, [pc, #148]	; (8108b74 <ai_platform_network_post_init+0x10c>)
 8108ae0:	2301      	movs	r3, #1
 8108ae2:	6093      	str	r3, [r2, #8]
 8108ae4:	6893      	ldr	r3, [r2, #8]
 8108ae6:	2b00      	cmp	r3, #0
 8108ae8:	d1fc      	bne.n	8108ae4 <ai_platform_network_post_init+0x7c>
 8108aea:	4b20      	ldr	r3, [pc, #128]	; (8108b6c <ai_platform_network_post_init+0x104>)
 8108aec:	6013      	str	r3, [r2, #0]
 8108aee:	6812      	ldr	r2, [r2, #0]
 8108af0:	4b1f      	ldr	r3, [pc, #124]	; (8108b70 <ai_platform_network_post_init+0x108>)
 8108af2:	429a      	cmp	r2, r3
 8108af4:	d000      	beq.n	8108af8 <ai_platform_network_post_init+0x90>
 8108af6:	e7fe      	b.n	8108af6 <ai_platform_network_post_init+0x8e>
 8108af8:	f7ff fb0c 	bl	8108114 <_ai_platform_release_crc>
 8108afc:	2000      	movs	r0, #0
 8108afe:	bd38      	pop	{r3, r4, r5, pc}
 8108b00:	4a1c      	ldr	r2, [pc, #112]	; (8108b74 <ai_platform_network_post_init+0x10c>)
 8108b02:	2301      	movs	r3, #1
 8108b04:	6093      	str	r3, [r2, #8]
 8108b06:	6893      	ldr	r3, [r2, #8]
 8108b08:	2b00      	cmp	r3, #0
 8108b0a:	d1fc      	bne.n	8108b06 <ai_platform_network_post_init+0x9e>
 8108b0c:	4b17      	ldr	r3, [pc, #92]	; (8108b6c <ai_platform_network_post_init+0x104>)
 8108b0e:	6013      	str	r3, [r2, #0]
 8108b10:	6812      	ldr	r2, [r2, #0]
 8108b12:	4b17      	ldr	r3, [pc, #92]	; (8108b70 <ai_platform_network_post_init+0x108>)
 8108b14:	429a      	cmp	r2, r3
 8108b16:	d11a      	bne.n	8108b4e <ai_platform_network_post_init+0xe6>
 8108b18:	f7ff fafc 	bl	8108114 <_ai_platform_release_crc>
 8108b1c:	68e3      	ldr	r3, [r4, #12]
 8108b1e:	f013 0502 	ands.w	r5, r3, #2
 8108b22:	d015      	beq.n	8108b50 <ai_platform_network_post_init+0xe8>
 8108b24:	4620      	mov	r0, r4
 8108b26:	f000 faf7 	bl	8109118 <ai_layers_post_init_all>
 8108b2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8108b2c:	b16b      	cbz	r3, 8108b4a <ai_platform_network_post_init+0xe2>
 8108b2e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8108b30:	e007      	b.n	8108b42 <ai_platform_network_post_init+0xda>
 8108b32:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8108b36:	4798      	blx	r3
 8108b38:	692b      	ldr	r3, [r5, #16]
 8108b3a:	42ab      	cmp	r3, r5
 8108b3c:	d005      	beq.n	8108b4a <ai_platform_network_post_init+0xe2>
 8108b3e:	b123      	cbz	r3, 8108b4a <ai_platform_network_post_init+0xe2>
 8108b40:	461d      	mov	r5, r3
 8108b42:	4629      	mov	r1, r5
 8108b44:	2000      	movs	r0, #0
 8108b46:	2d00      	cmp	r5, #0
 8108b48:	d1f3      	bne.n	8108b32 <ai_platform_network_post_init+0xca>
 8108b4a:	2001      	movs	r0, #1
 8108b4c:	bd38      	pop	{r3, r4, r5, pc}
 8108b4e:	e7fe      	b.n	8108b4e <ai_platform_network_post_init+0xe6>
 8108b50:	2210      	movs	r2, #16
 8108b52:	2111      	movs	r1, #17
 8108b54:	18a0      	adds	r0, r4, r2
 8108b56:	f000 fa9b 	bl	8109090 <core_set_error>
 8108b5a:	4628      	mov	r0, r5
 8108b5c:	bd38      	pop	{r3, r4, r5, pc}
 8108b5e:	bf00      	nop
 8108b60:	a1c00100 	.word	0xa1c00100
 8108b64:	e0042000 	.word	0xe0042000
 8108b68:	58024000 	.word	0x58024000
 8108b6c:	f407a5c2 	.word	0xf407a5c2
 8108b70:	b5e8b5cd 	.word	0xb5e8b5cd
 8108b74:	40023000 	.word	0x40023000

08108b78 <ai_platform_network_process>:
 8108b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108b7c:	460e      	mov	r6, r1
 8108b7e:	b085      	sub	sp, #20
 8108b80:	4693      	mov	fp, r2
 8108b82:	4605      	mov	r5, r0
 8108b84:	b120      	cbz	r0, 8108b90 <ai_platform_network_process+0x18>
 8108b86:	4bb8      	ldr	r3, [pc, #736]	; (8108e68 <ai_platform_network_process+0x2f0>)
 8108b88:	6802      	ldr	r2, [r0, #0]
 8108b8a:	429a      	cmp	r2, r3
 8108b8c:	bf18      	it	ne
 8108b8e:	2500      	movne	r5, #0
 8108b90:	f7ff fabe 	bl	8108110 <_ai_platform_acquire_crc>
 8108b94:	4bb5      	ldr	r3, [pc, #724]	; (8108e6c <ai_platform_network_process+0x2f4>)
 8108b96:	681b      	ldr	r3, [r3, #0]
 8108b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108ba0:	d010      	beq.n	8108bc4 <ai_platform_network_process+0x4c>
 8108ba2:	4ab3      	ldr	r2, [pc, #716]	; (8108e70 <ai_platform_network_process+0x2f8>)
 8108ba4:	2301      	movs	r3, #1
 8108ba6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8108baa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8108bae:	2b00      	cmp	r3, #0
 8108bb0:	d1fb      	bne.n	8108baa <ai_platform_network_process+0x32>
 8108bb2:	4bb0      	ldr	r3, [pc, #704]	; (8108e74 <ai_platform_network_process+0x2fc>)
 8108bb4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8108bb8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8108bbc:	4bae      	ldr	r3, [pc, #696]	; (8108e78 <ai_platform_network_process+0x300>)
 8108bbe:	429a      	cmp	r2, r3
 8108bc0:	d00d      	beq.n	8108bde <ai_platform_network_process+0x66>
 8108bc2:	e7fe      	b.n	8108bc2 <ai_platform_network_process+0x4a>
 8108bc4:	4aad      	ldr	r2, [pc, #692]	; (8108e7c <ai_platform_network_process+0x304>)
 8108bc6:	2301      	movs	r3, #1
 8108bc8:	6093      	str	r3, [r2, #8]
 8108bca:	6893      	ldr	r3, [r2, #8]
 8108bcc:	2b00      	cmp	r3, #0
 8108bce:	d1fc      	bne.n	8108bca <ai_platform_network_process+0x52>
 8108bd0:	4ba8      	ldr	r3, [pc, #672]	; (8108e74 <ai_platform_network_process+0x2fc>)
 8108bd2:	6013      	str	r3, [r2, #0]
 8108bd4:	6812      	ldr	r2, [r2, #0]
 8108bd6:	4ba8      	ldr	r3, [pc, #672]	; (8108e78 <ai_platform_network_process+0x300>)
 8108bd8:	429a      	cmp	r2, r3
 8108bda:	f040 812c 	bne.w	8108e36 <ai_platform_network_process+0x2be>
 8108bde:	f7ff fa99 	bl	8108114 <_ai_platform_release_crc>
 8108be2:	2d00      	cmp	r5, #0
 8108be4:	f000 8154 	beq.w	8108e90 <ai_platform_network_process+0x318>
 8108be8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8108bea:	2b00      	cmp	r3, #0
 8108bec:	f000 8124 	beq.w	8108e38 <ai_platform_network_process+0x2c0>
 8108bf0:	68eb      	ldr	r3, [r5, #12]
 8108bf2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8108bf6:	f003 0303 	and.w	r3, r3, #3
 8108bfa:	2700      	movs	r7, #0
 8108bfc:	2b03      	cmp	r3, #3
 8108bfe:	616f      	str	r7, [r5, #20]
 8108c00:	f040 813e 	bne.w	8108e80 <ai_platform_network_process+0x308>
 8108c04:	2e00      	cmp	r6, #0
 8108c06:	f000 811d 	beq.w	8108e44 <ai_platform_network_process+0x2cc>
 8108c0a:	f1ba 0f00 	cmp.w	sl, #0
 8108c0e:	f000 8119 	beq.w	8108e44 <ai_platform_network_process+0x2cc>
 8108c12:	f8ba 3000 	ldrh.w	r3, [sl]
 8108c16:	2b00      	cmp	r3, #0
 8108c18:	f000 8114 	beq.w	8108e44 <ai_platform_network_process+0x2cc>
 8108c1c:	69b3      	ldr	r3, [r6, #24]
 8108c1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8108c22:	681b      	ldr	r3, [r3, #0]
 8108c24:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8108c28:	f8da 3004 	ldr.w	r3, [sl, #4]
 8108c2c:	2b00      	cmp	r3, #0
 8108c2e:	d072      	beq.n	8108d16 <ai_platform_network_process+0x19e>
 8108c30:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8108c34:	2c00      	cmp	r4, #0
 8108c36:	d06e      	beq.n	8108d16 <ai_platform_network_process+0x19e>
 8108c38:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108c3c:	f8d3 9000 	ldr.w	r9, [r3]
 8108c40:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8108c44:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8108c48:	f000 81de 	beq.w	8109008 <ai_platform_network_process+0x490>
 8108c4c:	69a3      	ldr	r3, [r4, #24]
 8108c4e:	2101      	movs	r1, #1
 8108c50:	4630      	mov	r0, r6
 8108c52:	685d      	ldr	r5, [r3, #4]
 8108c54:	f7ff fa0e 	bl	8108074 <ai_buffer_get_size>
 8108c58:	4285      	cmp	r5, r0
 8108c5a:	f0c0 811b 	bcc.w	8108e94 <ai_platform_network_process+0x31c>
 8108c5e:	68e0      	ldr	r0, [r4, #12]
 8108c60:	69b1      	ldr	r1, [r6, #24]
 8108c62:	68c2      	ldr	r2, [r0, #12]
 8108c64:	68cb      	ldr	r3, [r1, #12]
 8108c66:	429a      	cmp	r2, r3
 8108c68:	f040 8114 	bne.w	8108e94 <ai_platform_network_process+0x31c>
 8108c6c:	6882      	ldr	r2, [r0, #8]
 8108c6e:	688b      	ldr	r3, [r1, #8]
 8108c70:	429a      	cmp	r2, r3
 8108c72:	f040 810f 	bne.w	8108e94 <ai_platform_network_process+0x31c>
 8108c76:	6842      	ldr	r2, [r0, #4]
 8108c78:	684b      	ldr	r3, [r1, #4]
 8108c7a:	429a      	cmp	r2, r3
 8108c7c:	f040 810a 	bne.w	8108e94 <ai_platform_network_process+0x31c>
 8108c80:	69a3      	ldr	r3, [r4, #24]
 8108c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8108c86:	f001 f94b 	bl	8109f20 <ai_array_get_data_byte_size>
 8108c8a:	4605      	mov	r5, r0
 8108c8c:	4620      	mov	r0, r4
 8108c8e:	f001 f95f 	bl	8109f50 <get_tensor_byte_size>
 8108c92:	4285      	cmp	r5, r0
 8108c94:	f0c0 80fe 	bcc.w	8108e94 <ai_platform_network_process+0x31c>
 8108c98:	69a3      	ldr	r3, [r4, #24]
 8108c9a:	6818      	ldr	r0, [r3, #0]
 8108c9c:	f001 f8ac 	bl	8109df8 <ai_array_to_buffer_fmt>
 8108ca0:	6833      	ldr	r3, [r6, #0]
 8108ca2:	4058      	eors	r0, r3
 8108ca4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8108ca8:	f040 81b9 	bne.w	810901e <ai_platform_network_process+0x4a6>
 8108cac:	6873      	ldr	r3, [r6, #4]
 8108cae:	2b00      	cmp	r3, #0
 8108cb0:	f000 81ac 	beq.w	810900c <ai_platform_network_process+0x494>
 8108cb4:	69b3      	ldr	r3, [r6, #24]
 8108cb6:	681b      	ldr	r3, [r3, #0]
 8108cb8:	2b00      	cmp	r3, #0
 8108cba:	f000 819c 	beq.w	8108ff6 <ai_platform_network_process+0x47e>
 8108cbe:	9a01      	ldr	r2, [sp, #4]
 8108cc0:	429a      	cmp	r2, r3
 8108cc2:	bf38      	it	cc
 8108cc4:	461a      	movcc	r2, r3
 8108cc6:	4620      	mov	r0, r4
 8108cc8:	9201      	str	r2, [sp, #4]
 8108cca:	f001 f941 	bl	8109f50 <get_tensor_byte_size>
 8108cce:	f8c8 0008 	str.w	r0, [r8, #8]
 8108cd2:	69b3      	ldr	r3, [r6, #24]
 8108cd4:	681b      	ldr	r3, [r3, #0]
 8108cd6:	fb00 f303 	mul.w	r3, r0, r3
 8108cda:	f8c8 300c 	str.w	r3, [r8, #12]
 8108cde:	6871      	ldr	r1, [r6, #4]
 8108ce0:	f8c8 1004 	str.w	r1, [r8, #4]
 8108ce4:	440b      	add	r3, r1
 8108ce6:	f849 300b 	str.w	r3, [r9, fp]
 8108cea:	69a0      	ldr	r0, [r4, #24]
 8108cec:	6803      	ldr	r3, [r0, #0]
 8108cee:	009a      	lsls	r2, r3, #2
 8108cf0:	f107 0701 	add.w	r7, r7, #1
 8108cf4:	f106 061c 	add.w	r6, r6, #28
 8108cf8:	f100 80af 	bmi.w	8108e5a <ai_platform_network_process+0x2e2>
 8108cfc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8108d00:	1a9b      	subs	r3, r3, r2
 8108d02:	4419      	add	r1, r3
 8108d04:	6081      	str	r1, [r0, #8]
 8108d06:	69a3      	ldr	r3, [r4, #24]
 8108d08:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8108d0c:	60da      	str	r2, [r3, #12]
 8108d0e:	f8ba 3000 	ldrh.w	r3, [sl]
 8108d12:	42bb      	cmp	r3, r7
 8108d14:	d888      	bhi.n	8108c28 <ai_platform_network_process+0xb0>
 8108d16:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8108d1a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8108d1c:	f1bb 0f00 	cmp.w	fp, #0
 8108d20:	f000 8186 	beq.w	8109030 <ai_platform_network_process+0x4b8>
 8108d24:	2a01      	cmp	r2, #1
 8108d26:	f240 815e 	bls.w	8108fe6 <ai_platform_network_process+0x46e>
 8108d2a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8108d2e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8108d32:	2b00      	cmp	r3, #0
 8108d34:	f000 8157 	beq.w	8108fe6 <ai_platform_network_process+0x46e>
 8108d38:	465e      	mov	r6, fp
 8108d3a:	2700      	movs	r7, #0
 8108d3c:	462c      	mov	r4, r5
 8108d3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8108d42:	2b00      	cmp	r3, #0
 8108d44:	f000 80b4 	beq.w	8108eb0 <ai_platform_network_process+0x338>
 8108d48:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8108d4c:	2d00      	cmp	r5, #0
 8108d4e:	f000 80af 	beq.w	8108eb0 <ai_platform_network_process+0x338>
 8108d52:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8108d56:	f8d3 8000 	ldr.w	r8, [r3]
 8108d5a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8108d5e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8108d62:	f000 8171 	beq.w	8109048 <ai_platform_network_process+0x4d0>
 8108d66:	69ab      	ldr	r3, [r5, #24]
 8108d68:	2101      	movs	r1, #1
 8108d6a:	685b      	ldr	r3, [r3, #4]
 8108d6c:	9302      	str	r3, [sp, #8]
 8108d6e:	4630      	mov	r0, r6
 8108d70:	f7ff f980 	bl	8108074 <ai_buffer_get_size>
 8108d74:	9b02      	ldr	r3, [sp, #8]
 8108d76:	4283      	cmp	r3, r0
 8108d78:	f0c0 8134 	bcc.w	8108fe4 <ai_platform_network_process+0x46c>
 8108d7c:	68e8      	ldr	r0, [r5, #12]
 8108d7e:	69b1      	ldr	r1, [r6, #24]
 8108d80:	68c2      	ldr	r2, [r0, #12]
 8108d82:	68cb      	ldr	r3, [r1, #12]
 8108d84:	429a      	cmp	r2, r3
 8108d86:	f040 812d 	bne.w	8108fe4 <ai_platform_network_process+0x46c>
 8108d8a:	6882      	ldr	r2, [r0, #8]
 8108d8c:	688b      	ldr	r3, [r1, #8]
 8108d8e:	429a      	cmp	r2, r3
 8108d90:	f040 8128 	bne.w	8108fe4 <ai_platform_network_process+0x46c>
 8108d94:	6842      	ldr	r2, [r0, #4]
 8108d96:	684b      	ldr	r3, [r1, #4]
 8108d98:	429a      	cmp	r2, r3
 8108d9a:	f040 8123 	bne.w	8108fe4 <ai_platform_network_process+0x46c>
 8108d9e:	69ab      	ldr	r3, [r5, #24]
 8108da0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8108da4:	f001 f8bc 	bl	8109f20 <ai_array_get_data_byte_size>
 8108da8:	9002      	str	r0, [sp, #8]
 8108daa:	4628      	mov	r0, r5
 8108dac:	f001 f8d0 	bl	8109f50 <get_tensor_byte_size>
 8108db0:	9b02      	ldr	r3, [sp, #8]
 8108db2:	4283      	cmp	r3, r0
 8108db4:	f0c0 8116 	bcc.w	8108fe4 <ai_platform_network_process+0x46c>
 8108db8:	69ab      	ldr	r3, [r5, #24]
 8108dba:	6818      	ldr	r0, [r3, #0]
 8108dbc:	f001 f81c 	bl	8109df8 <ai_array_to_buffer_fmt>
 8108dc0:	6833      	ldr	r3, [r6, #0]
 8108dc2:	4058      	eors	r0, r3
 8108dc4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8108dc8:	f040 8136 	bne.w	8109038 <ai_platform_network_process+0x4c0>
 8108dcc:	6873      	ldr	r3, [r6, #4]
 8108dce:	2b00      	cmp	r3, #0
 8108dd0:	f000 814d 	beq.w	810906e <ai_platform_network_process+0x4f6>
 8108dd4:	69b3      	ldr	r3, [r6, #24]
 8108dd6:	681b      	ldr	r3, [r3, #0]
 8108dd8:	2b00      	cmp	r3, #0
 8108dda:	f000 813f 	beq.w	810905c <ai_platform_network_process+0x4e4>
 8108dde:	9a01      	ldr	r2, [sp, #4]
 8108de0:	429a      	cmp	r2, r3
 8108de2:	bf38      	it	cc
 8108de4:	461a      	movcc	r2, r3
 8108de6:	4628      	mov	r0, r5
 8108de8:	9201      	str	r2, [sp, #4]
 8108dea:	f001 f8b1 	bl	8109f50 <get_tensor_byte_size>
 8108dee:	f8ca 0008 	str.w	r0, [sl, #8]
 8108df2:	69b3      	ldr	r3, [r6, #24]
 8108df4:	681b      	ldr	r3, [r3, #0]
 8108df6:	fb00 f303 	mul.w	r3, r0, r3
 8108dfa:	f8ca 300c 	str.w	r3, [sl, #12]
 8108dfe:	6871      	ldr	r1, [r6, #4]
 8108e00:	f8ca 1004 	str.w	r1, [sl, #4]
 8108e04:	440b      	add	r3, r1
 8108e06:	f848 300b 	str.w	r3, [r8, fp]
 8108e0a:	69a8      	ldr	r0, [r5, #24]
 8108e0c:	6803      	ldr	r3, [r0, #0]
 8108e0e:	009b      	lsls	r3, r3, #2
 8108e10:	f107 0701 	add.w	r7, r7, #1
 8108e14:	f106 061c 	add.w	r6, r6, #28
 8108e18:	d445      	bmi.n	8108ea6 <ai_platform_network_process+0x32e>
 8108e1a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8108e1e:	1a9b      	subs	r3, r3, r2
 8108e20:	4419      	add	r1, r3
 8108e22:	6081      	str	r1, [r0, #8]
 8108e24:	69ab      	ldr	r3, [r5, #24]
 8108e26:	f8da 2004 	ldr.w	r2, [sl, #4]
 8108e2a:	60da      	str	r2, [r3, #12]
 8108e2c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8108e30:	429f      	cmp	r7, r3
 8108e32:	d384      	bcc.n	8108d3e <ai_platform_network_process+0x1c6>
 8108e34:	e03c      	b.n	8108eb0 <ai_platform_network_process+0x338>
 8108e36:	e7fe      	b.n	8108e36 <ai_platform_network_process+0x2be>
 8108e38:	68ea      	ldr	r2, [r5, #12]
 8108e3a:	616b      	str	r3, [r5, #20]
 8108e3c:	f002 0203 	and.w	r2, r2, #3
 8108e40:	2a03      	cmp	r2, #3
 8108e42:	d11d      	bne.n	8108e80 <ai_platform_network_process+0x308>
 8108e44:	2217      	movs	r2, #23
 8108e46:	2112      	movs	r1, #18
 8108e48:	f105 0010 	add.w	r0, r5, #16
 8108e4c:	f000 f920 	bl	8109090 <core_set_error>
 8108e50:	2400      	movs	r4, #0
 8108e52:	4620      	mov	r0, r4
 8108e54:	b005      	add	sp, #20
 8108e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108e5a:	f8ba 3000 	ldrh.w	r3, [sl]
 8108e5e:	429f      	cmp	r7, r3
 8108e60:	f4ff aee2 	bcc.w	8108c28 <ai_platform_network_process+0xb0>
 8108e64:	e757      	b.n	8108d16 <ai_platform_network_process+0x19e>
 8108e66:	bf00      	nop
 8108e68:	a1c00100 	.word	0xa1c00100
 8108e6c:	e0042000 	.word	0xe0042000
 8108e70:	58024000 	.word	0x58024000
 8108e74:	f407a5c2 	.word	0xf407a5c2
 8108e78:	b5e8b5cd 	.word	0xb5e8b5cd
 8108e7c:	40023000 	.word	0x40023000
 8108e80:	2230      	movs	r2, #48	; 0x30
 8108e82:	2111      	movs	r1, #17
 8108e84:	f105 0010 	add.w	r0, r5, #16
 8108e88:	f000 f902 	bl	8109090 <core_set_error>
 8108e8c:	2400      	movs	r4, #0
 8108e8e:	e7e0      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8108e90:	462c      	mov	r4, r5
 8108e92:	e7de      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8108e94:	9d02      	ldr	r5, [sp, #8]
 8108e96:	2218      	movs	r2, #24
 8108e98:	2112      	movs	r1, #18
 8108e9a:	f105 0010 	add.w	r0, r5, #16
 8108e9e:	f000 f8f7 	bl	8109090 <core_set_error>
 8108ea2:	2400      	movs	r4, #0
 8108ea4:	e7d5      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8108ea6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8108eaa:	429f      	cmp	r7, r3
 8108eac:	f4ff af47 	bcc.w	8108d3e <ai_platform_network_process+0x1c6>
 8108eb0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8108eb4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8108eb6:	82a3      	strh	r3, [r4, #20]
 8108eb8:	4625      	mov	r5, r4
 8108eba:	2a00      	cmp	r2, #0
 8108ebc:	f040 808c 	bne.w	8108fd8 <ai_platform_network_process+0x460>
 8108ec0:	4616      	mov	r6, r2
 8108ec2:	4617      	mov	r7, r2
 8108ec4:	8aec      	ldrh	r4, [r5, #22]
 8108ec6:	429c      	cmp	r4, r3
 8108ec8:	bf38      	it	cc
 8108eca:	46ab      	movcc	fp, r5
 8108ecc:	d2c1      	bcs.n	8108e52 <ai_platform_network_process+0x2da>
 8108ece:	2e00      	cmp	r6, #0
 8108ed0:	d030      	beq.n	8108f34 <ai_platform_network_process+0x3bc>
 8108ed2:	f04f 0800 	mov.w	r8, #0
 8108ed6:	e014      	b.n	8108f02 <ai_platform_network_process+0x38a>
 8108ed8:	6882      	ldr	r2, [r0, #8]
 8108eda:	68c5      	ldr	r5, [r0, #12]
 8108edc:	6863      	ldr	r3, [r4, #4]
 8108ede:	1b52      	subs	r2, r2, r5
 8108ee0:	4413      	add	r3, r2
 8108ee2:	6083      	str	r3, [r0, #8]
 8108ee4:	698b      	ldr	r3, [r1, #24]
 8108ee6:	6862      	ldr	r2, [r4, #4]
 8108ee8:	60da      	str	r2, [r3, #12]
 8108eea:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8108eee:	f859 200a 	ldr.w	r2, [r9, sl]
 8108ef2:	440b      	add	r3, r1
 8108ef4:	4293      	cmp	r3, r2
 8108ef6:	bf24      	itt	cs
 8108ef8:	68e3      	ldrcs	r3, [r4, #12]
 8108efa:	1ad3      	subcs	r3, r2, r3
 8108efc:	6063      	str	r3, [r4, #4]
 8108efe:	f108 0801 	add.w	r8, r8, #1
 8108f02:	8833      	ldrh	r3, [r6, #0]
 8108f04:	4543      	cmp	r3, r8
 8108f06:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8108f0a:	d913      	bls.n	8108f34 <ai_platform_network_process+0x3bc>
 8108f0c:	6873      	ldr	r3, [r6, #4]
 8108f0e:	b18b      	cbz	r3, 8108f34 <ai_platform_network_process+0x3bc>
 8108f10:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8108f14:	b171      	cbz	r1, 8108f34 <ai_platform_network_process+0x3bc>
 8108f16:	6988      	ldr	r0, [r1, #24]
 8108f18:	68b2      	ldr	r2, [r6, #8]
 8108f1a:	6803      	ldr	r3, [r0, #0]
 8108f1c:	f8d2 9000 	ldr.w	r9, [r2]
 8108f20:	009d      	lsls	r5, r3, #2
 8108f22:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8108f26:	d5d7      	bpl.n	8108ed8 <ai_platform_network_process+0x360>
 8108f28:	6881      	ldr	r1, [r0, #8]
 8108f2a:	68a2      	ldr	r2, [r4, #8]
 8108f2c:	6860      	ldr	r0, [r4, #4]
 8108f2e:	f000 fedd 	bl	8109cec <st_int8_copy>
 8108f32:	e7da      	b.n	8108eea <ai_platform_network_process+0x372>
 8108f34:	4658      	mov	r0, fp
 8108f36:	f000 f903 	bl	8109140 <ai_layers_forward_all>
 8108f3a:	2f00      	cmp	r7, #0
 8108f3c:	d03d      	beq.n	8108fba <ai_platform_network_process+0x442>
 8108f3e:	2400      	movs	r4, #0
 8108f40:	e016      	b.n	8108f70 <ai_platform_network_process+0x3f8>
 8108f42:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8108f46:	f859 100a 	ldr.w	r1, [r9, sl]
 8108f4a:	4413      	add	r3, r2
 8108f4c:	428b      	cmp	r3, r1
 8108f4e:	bf24      	itt	cs
 8108f50:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8108f54:	1acb      	subcs	r3, r1, r3
 8108f56:	f8c8 3004 	str.w	r3, [r8, #4]
 8108f5a:	6981      	ldr	r1, [r0, #24]
 8108f5c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8108f60:	1b52      	subs	r2, r2, r5
 8108f62:	4413      	add	r3, r2
 8108f64:	608b      	str	r3, [r1, #8]
 8108f66:	6983      	ldr	r3, [r0, #24]
 8108f68:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8108f6c:	60da      	str	r2, [r3, #12]
 8108f6e:	3401      	adds	r4, #1
 8108f70:	883b      	ldrh	r3, [r7, #0]
 8108f72:	42a3      	cmp	r3, r4
 8108f74:	d921      	bls.n	8108fba <ai_platform_network_process+0x442>
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	b1fb      	cbz	r3, 8108fba <ai_platform_network_process+0x442>
 8108f7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8108f7e:	b1e0      	cbz	r0, 8108fba <ai_platform_network_process+0x442>
 8108f80:	68ba      	ldr	r2, [r7, #8]
 8108f82:	6983      	ldr	r3, [r0, #24]
 8108f84:	f8d2 9000 	ldr.w	r9, [r2]
 8108f88:	681a      	ldr	r2, [r3, #0]
 8108f8a:	0092      	lsls	r2, r2, #2
 8108f8c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8108f90:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8108f94:	d5d5      	bpl.n	8108f42 <ai_platform_network_process+0x3ca>
 8108f96:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8108f9a:	6898      	ldr	r0, [r3, #8]
 8108f9c:	f000 fea6 	bl	8109cec <st_int8_copy>
 8108fa0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8108fa4:	f859 200a 	ldr.w	r2, [r9, sl]
 8108fa8:	440b      	add	r3, r1
 8108faa:	4293      	cmp	r3, r2
 8108fac:	bf24      	itt	cs
 8108fae:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8108fb2:	1ad3      	subcs	r3, r2, r3
 8108fb4:	f8c8 3004 	str.w	r3, [r8, #4]
 8108fb8:	e7d9      	b.n	8108f6e <ai_platform_network_process+0x3f6>
 8108fba:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8108fbe:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8108fc2:	3401      	adds	r4, #1
 8108fc4:	b2a4      	uxth	r4, r4
 8108fc6:	42a3      	cmp	r3, r4
 8108fc8:	f8ab 4016 	strh.w	r4, [fp, #22]
 8108fcc:	f63f af7f 	bhi.w	8108ece <ai_platform_network_process+0x356>
 8108fd0:	4620      	mov	r0, r4
 8108fd2:	b005      	add	sp, #20
 8108fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108fd8:	2a01      	cmp	r2, #1
 8108fda:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8108fdc:	d03c      	beq.n	8109058 <ai_platform_network_process+0x4e0>
 8108fde:	f106 070c 	add.w	r7, r6, #12
 8108fe2:	e76f      	b.n	8108ec4 <ai_platform_network_process+0x34c>
 8108fe4:	4625      	mov	r5, r4
 8108fe6:	2218      	movs	r2, #24
 8108fe8:	2113      	movs	r1, #19
 8108fea:	f105 0010 	add.w	r0, r5, #16
 8108fee:	f000 f84f 	bl	8109090 <core_set_error>
 8108ff2:	2400      	movs	r4, #0
 8108ff4:	e72d      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8108ff6:	9d02      	ldr	r5, [sp, #8]
 8108ff8:	4604      	mov	r4, r0
 8108ffa:	2221      	movs	r2, #33	; 0x21
 8108ffc:	2112      	movs	r1, #18
 8108ffe:	f105 0010 	add.w	r0, r5, #16
 8109002:	f000 f845 	bl	8109090 <core_set_error>
 8109006:	e724      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8109008:	9d02      	ldr	r5, [sp, #8]
 810900a:	e71b      	b.n	8108e44 <ai_platform_network_process+0x2cc>
 810900c:	9d02      	ldr	r5, [sp, #8]
 810900e:	4604      	mov	r4, r0
 8109010:	2217      	movs	r2, #23
 8109012:	2112      	movs	r1, #18
 8109014:	f105 0010 	add.w	r0, r5, #16
 8109018:	f000 f83a 	bl	8109090 <core_set_error>
 810901c:	e719      	b.n	8108e52 <ai_platform_network_process+0x2da>
 810901e:	9d02      	ldr	r5, [sp, #8]
 8109020:	2219      	movs	r2, #25
 8109022:	2112      	movs	r1, #18
 8109024:	f105 0010 	add.w	r0, r5, #16
 8109028:	f000 f832 	bl	8109090 <core_set_error>
 810902c:	2400      	movs	r4, #0
 810902e:	e710      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8109030:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8109034:	82ab      	strh	r3, [r5, #20]
 8109036:	e740      	b.n	8108eba <ai_platform_network_process+0x342>
 8109038:	f104 0010 	add.w	r0, r4, #16
 810903c:	2219      	movs	r2, #25
 810903e:	2113      	movs	r1, #19
 8109040:	f000 f826 	bl	8109090 <core_set_error>
 8109044:	2400      	movs	r4, #0
 8109046:	e704      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8109048:	f104 0010 	add.w	r0, r4, #16
 810904c:	2217      	movs	r2, #23
 810904e:	2113      	movs	r1, #19
 8109050:	f000 f81e 	bl	8109090 <core_set_error>
 8109054:	4654      	mov	r4, sl
 8109056:	e6fc      	b.n	8108e52 <ai_platform_network_process+0x2da>
 8109058:	2700      	movs	r7, #0
 810905a:	e733      	b.n	8108ec4 <ai_platform_network_process+0x34c>
 810905c:	4625      	mov	r5, r4
 810905e:	2221      	movs	r2, #33	; 0x21
 8109060:	4604      	mov	r4, r0
 8109062:	2113      	movs	r1, #19
 8109064:	f105 0010 	add.w	r0, r5, #16
 8109068:	f000 f812 	bl	8109090 <core_set_error>
 810906c:	e6f1      	b.n	8108e52 <ai_platform_network_process+0x2da>
 810906e:	4625      	mov	r5, r4
 8109070:	2217      	movs	r2, #23
 8109072:	4604      	mov	r4, r0
 8109074:	2113      	movs	r1, #19
 8109076:	f105 0010 	add.w	r0, r5, #16
 810907a:	f000 f809 	bl	8109090 <core_set_error>
 810907e:	e6e8      	b.n	8108e52 <ai_platform_network_process+0x2da>

08109080 <core_init>:
 8109080:	2001      	movs	r0, #1
 8109082:	4770      	bx	lr

08109084 <core_get_error>:
 8109084:	4603      	mov	r3, r0
 8109086:	2200      	movs	r2, #0
 8109088:	6800      	ldr	r0, [r0, #0]
 810908a:	601a      	str	r2, [r3, #0]
 810908c:	4770      	bx	lr
 810908e:	bf00      	nop

08109090 <core_set_error>:
 8109090:	4603      	mov	r3, r0
 8109092:	7800      	ldrb	r0, [r0, #0]
 8109094:	b108      	cbz	r0, 810909a <core_set_error+0xa>
 8109096:	2000      	movs	r0, #0
 8109098:	4770      	bx	lr
 810909a:	7019      	strb	r1, [r3, #0]
 810909c:	6819      	ldr	r1, [r3, #0]
 810909e:	f362 211f 	bfi	r1, r2, #8, #24
 81090a2:	2001      	movs	r0, #1
 81090a4:	6019      	str	r1, [r3, #0]
 81090a6:	4770      	bx	lr

081090a8 <ai_check_custom_types>:
 81090a8:	b082      	sub	sp, #8
 81090aa:	4b13      	ldr	r3, [pc, #76]	; (81090f8 <ai_check_custom_types+0x50>)
 81090ac:	9301      	str	r3, [sp, #4]
 81090ae:	b118      	cbz	r0, 81090b8 <ai_check_custom_types+0x10>
 81090b0:	7803      	ldrb	r3, [r0, #0]
 81090b2:	2b03      	cmp	r3, #3
 81090b4:	d002      	beq.n	81090bc <ai_check_custom_types+0x14>
 81090b6:	2000      	movs	r0, #0
 81090b8:	b002      	add	sp, #8
 81090ba:	4770      	bx	lr
 81090bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 81090c0:	4293      	cmp	r3, r2
 81090c2:	d004      	beq.n	81090ce <ai_check_custom_types+0x26>
 81090c4:	2001      	movs	r0, #1
 81090c6:	f080 0001 	eor.w	r0, r0, #1
 81090ca:	b002      	add	sp, #8
 81090cc:	4770      	bx	lr
 81090ce:	7842      	ldrb	r2, [r0, #1]
 81090d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 81090d4:	429a      	cmp	r2, r3
 81090d6:	f100 0001 	add.w	r0, r0, #1
 81090da:	d1f3      	bne.n	81090c4 <ai_check_custom_types+0x1c>
 81090dc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 81090e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 81090e4:	429a      	cmp	r2, r3
 81090e6:	d1ed      	bne.n	81090c4 <ai_check_custom_types+0x1c>
 81090e8:	7842      	ldrb	r2, [r0, #1]
 81090ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 81090ee:	429a      	cmp	r2, r3
 81090f0:	d1e8      	bne.n	81090c4 <ai_check_custom_types+0x1c>
 81090f2:	2000      	movs	r0, #0
 81090f4:	e7e7      	b.n	81090c6 <ai_check_custom_types+0x1e>
 81090f6:	bf00      	nop
 81090f8:	84048403 	.word	0x84048403

081090fc <ai_layers_init_all>:
 81090fc:	4601      	mov	r1, r0
 81090fe:	2000      	movs	r0, #0
 8109100:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8109102:	b143      	cbz	r3, 8109116 <ai_layers_init_all+0x1a>
 8109104:	691a      	ldr	r2, [r3, #16]
 8109106:	60d9      	str	r1, [r3, #12]
 8109108:	429a      	cmp	r2, r3
 810910a:	f100 0001 	add.w	r0, r0, #1
 810910e:	d002      	beq.n	8109116 <ai_layers_init_all+0x1a>
 8109110:	b10a      	cbz	r2, 8109116 <ai_layers_init_all+0x1a>
 8109112:	4613      	mov	r3, r2
 8109114:	e7f5      	b.n	8109102 <ai_layers_init_all+0x6>
 8109116:	4770      	bx	lr

08109118 <ai_layers_post_init_all>:
 8109118:	b538      	push	{r3, r4, r5, lr}
 810911a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 810911c:	2500      	movs	r5, #0
 810911e:	b16c      	cbz	r4, 810913c <ai_layers_post_init_all+0x24>
 8109120:	6863      	ldr	r3, [r4, #4]
 8109122:	07db      	lsls	r3, r3, #31
 8109124:	d504      	bpl.n	8109130 <ai_layers_post_init_all+0x18>
 8109126:	6a23      	ldr	r3, [r4, #32]
 8109128:	4620      	mov	r0, r4
 810912a:	b10b      	cbz	r3, 8109130 <ai_layers_post_init_all+0x18>
 810912c:	4798      	blx	r3
 810912e:	3501      	adds	r5, #1
 8109130:	6923      	ldr	r3, [r4, #16]
 8109132:	42a3      	cmp	r3, r4
 8109134:	d002      	beq.n	810913c <ai_layers_post_init_all+0x24>
 8109136:	b10b      	cbz	r3, 810913c <ai_layers_post_init_all+0x24>
 8109138:	461c      	mov	r4, r3
 810913a:	e7f0      	b.n	810911e <ai_layers_post_init_all+0x6>
 810913c:	4628      	mov	r0, r5
 810913e:	bd38      	pop	{r3, r4, r5, pc}

08109140 <ai_layers_forward_all>:
 8109140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109144:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8109148:	4604      	mov	r4, r0
 810914a:	f1b8 0f00 	cmp.w	r8, #0
 810914e:	d02b      	beq.n	81091a8 <ai_layers_forward_all+0x68>
 8109150:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8109152:	6381      	str	r1, [r0, #56]	; 0x38
 8109154:	b321      	cbz	r1, 81091a0 <ai_layers_forward_all+0x60>
 8109156:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8109158:	2001      	movs	r0, #1
 810915a:	47c0      	blx	r8
 810915c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 810915e:	b1fe      	cbz	r6, 81091a0 <ai_layers_forward_all+0x60>
 8109160:	2700      	movs	r7, #0
 8109162:	4631      	mov	r1, r6
 8109164:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8109166:	2002      	movs	r0, #2
 8109168:	47c0      	blx	r8
 810916a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 810916c:	4628      	mov	r0, r5
 810916e:	696b      	ldr	r3, [r5, #20]
 8109170:	4798      	blx	r3
 8109172:	692e      	ldr	r6, [r5, #16]
 8109174:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8109176:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8109178:	42b5      	cmp	r5, r6
 810917a:	f04f 0003 	mov.w	r0, #3
 810917e:	d007      	beq.n	8109190 <ai_layers_forward_all+0x50>
 8109180:	47c0      	blx	r8
 8109182:	3701      	adds	r7, #1
 8109184:	63a6      	str	r6, [r4, #56]	; 0x38
 8109186:	2e00      	cmp	r6, #0
 8109188:	d1eb      	bne.n	8109162 <ai_layers_forward_all+0x22>
 810918a:	4638      	mov	r0, r7
 810918c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109190:	2003      	movs	r0, #3
 8109192:	47c0      	blx	r8
 8109194:	2300      	movs	r3, #0
 8109196:	3701      	adds	r7, #1
 8109198:	63a3      	str	r3, [r4, #56]	; 0x38
 810919a:	4638      	mov	r0, r7
 810919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81091a0:	2700      	movs	r7, #0
 81091a2:	4638      	mov	r0, r7
 81091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81091a8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 81091aa:	6385      	str	r5, [r0, #56]	; 0x38
 81091ac:	2d00      	cmp	r5, #0
 81091ae:	d0f7      	beq.n	81091a0 <ai_layers_forward_all+0x60>
 81091b0:	4647      	mov	r7, r8
 81091b2:	696b      	ldr	r3, [r5, #20]
 81091b4:	4628      	mov	r0, r5
 81091b6:	4798      	blx	r3
 81091b8:	462b      	mov	r3, r5
 81091ba:	692d      	ldr	r5, [r5, #16]
 81091bc:	429d      	cmp	r5, r3
 81091be:	d004      	beq.n	81091ca <ai_layers_forward_all+0x8a>
 81091c0:	63a5      	str	r5, [r4, #56]	; 0x38
 81091c2:	3701      	adds	r7, #1
 81091c4:	2d00      	cmp	r5, #0
 81091c6:	d1f4      	bne.n	81091b2 <ai_layers_forward_all+0x72>
 81091c8:	e7df      	b.n	810918a <ai_layers_forward_all+0x4a>
 81091ca:	2300      	movs	r3, #0
 81091cc:	63a3      	str	r3, [r4, #56]	; 0x38
 81091ce:	3701      	adds	r7, #1
 81091d0:	e7db      	b.n	810918a <ai_layers_forward_all+0x4a>
 81091d2:	bf00      	nop

081091d4 <forward_dense>:
 81091d4:	6983      	ldr	r3, [r0, #24]
 81091d6:	881a      	ldrh	r2, [r3, #0]
 81091d8:	2a00      	cmp	r2, #0
 81091da:	f000 8181 	beq.w	81094e0 <forward_dense+0x30c>
 81091de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81091e2:	ed2d 8b02 	vpush	{d8}
 81091e6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 81091ea:	f8dc 5004 	ldr.w	r5, [ip, #4]
 81091ee:	b095      	sub	sp, #84	; 0x54
 81091f0:	b105      	cbz	r5, 81091f4 <forward_dense+0x20>
 81091f2:	682d      	ldr	r5, [r5, #0]
 81091f4:	2a01      	cmp	r2, #1
 81091f6:	f000 828f 	beq.w	8109718 <forward_dense+0x544>
 81091fa:	f8dc 6010 	ldr.w	r6, [ip, #16]
 81091fe:	b106      	cbz	r6, 8109202 <forward_dense+0x2e>
 8109200:	6836      	ldr	r6, [r6, #0]
 8109202:	2a02      	cmp	r2, #2
 8109204:	f000 816e 	beq.w	81094e4 <forward_dense+0x310>
 8109208:	f8dc 301c 	ldr.w	r3, [ip, #28]
 810920c:	930b      	str	r3, [sp, #44]	; 0x2c
 810920e:	2b00      	cmp	r3, #0
 8109210:	f000 8274 	beq.w	81096fc <forward_dense+0x528>
 8109214:	4619      	mov	r1, r3
 8109216:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 810921a:	6809      	ldr	r1, [r1, #0]
 810921c:	910d      	str	r1, [sp, #52]	; 0x34
 810921e:	2b01      	cmp	r3, #1
 8109220:	f240 826e 	bls.w	8109700 <forward_dense+0x52c>
 8109224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109226:	685b      	ldr	r3, [r3, #4]
 8109228:	930b      	str	r3, [sp, #44]	; 0x2c
 810922a:	460b      	mov	r3, r1
 810922c:	68e8      	ldr	r0, [r5, #12]
 810922e:	68f7      	ldr	r7, [r6, #12]
 8109230:	6840      	ldr	r0, [r0, #4]
 8109232:	6999      	ldr	r1, [r3, #24]
 8109234:	9013      	str	r0, [sp, #76]	; 0x4c
 8109236:	6878      	ldr	r0, [r7, #4]
 8109238:	680b      	ldr	r3, [r1, #0]
 810923a:	9012      	str	r0, [sp, #72]	; 0x48
 810923c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8109240:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8109244:	fb00 f404 	mul.w	r4, r0, r4
 8109248:	f3c3 5041 	ubfx	r0, r3, #21, #2
 810924c:	fa4e f000 	asr.w	r0, lr, r0
 8109250:	2a03      	cmp	r2, #3
 8109252:	9010      	str	r0, [sp, #64]	; 0x40
 8109254:	f000 825d 	beq.w	8109712 <forward_dense+0x53e>
 8109258:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 810925c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8109260:	2a00      	cmp	r2, #0
 8109262:	f000 8246 	beq.w	81096f2 <forward_dense+0x51e>
 8109266:	6812      	ldr	r2, [r2, #0]
 8109268:	2a00      	cmp	r2, #0
 810926a:	f000 8242 	beq.w	81096f2 <forward_dense+0x51e>
 810926e:	2b04      	cmp	r3, #4
 8109270:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8109274:	f000 822c 	beq.w	81096d0 <forward_dense+0x4fc>
 8109278:	2b08      	cmp	r3, #8
 810927a:	f000 8229 	beq.w	81096d0 <forward_dense+0x4fc>
 810927e:	f04f 0b00 	mov.w	fp, #0
 8109282:	69b2      	ldr	r2, [r6, #24]
 8109284:	69ab      	ldr	r3, [r5, #24]
 8109286:	6891      	ldr	r1, [r2, #8]
 8109288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810928a:	689b      	ldr	r3, [r3, #8]
 810928c:	6952      	ldr	r2, [r2, #20]
 810928e:	9106      	str	r1, [sp, #24]
 8109290:	fb07 f404 	mul.w	r4, r7, r4
 8109294:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8109298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810929a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 810929e:	4281      	cmp	r1, r0
 81092a0:	ea4f 0482 	mov.w	r4, r2, lsl #2
 81092a4:	900e      	str	r0, [sp, #56]	; 0x38
 81092a6:	940c      	str	r4, [sp, #48]	; 0x30
 81092a8:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 81092ac:	f080 8113 	bcs.w	81094d6 <forward_dense+0x302>
 81092b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 81092b2:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8109500 <forward_dense+0x32c>
 81092b6:	f021 0201 	bic.w	r2, r1, #1
 81092ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 81092be:	9204      	str	r2, [sp, #16]
 81092c0:	f001 0201 	and.w	r2, r1, #1
 81092c4:	08c8      	lsrs	r0, r1, #3
 81092c6:	9208      	str	r2, [sp, #32]
 81092c8:	008a      	lsls	r2, r1, #2
 81092ca:	f001 0a07 	and.w	sl, r1, #7
 81092ce:	920f      	str	r2, [sp, #60]	; 0x3c
 81092d0:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 81092d4:	3320      	adds	r3, #32
 81092d6:	465c      	mov	r4, fp
 81092d8:	9007      	str	r0, [sp, #28]
 81092da:	46cb      	mov	fp, r9
 81092dc:	9205      	str	r2, [sp, #20]
 81092de:	9302      	str	r3, [sp, #8]
 81092e0:	46c1      	mov	r9, r8
 81092e2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 81092e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81092e8:	699b      	ldr	r3, [r3, #24]
 81092ea:	689a      	ldr	r2, [r3, #8]
 81092ec:	9b02      	ldr	r3, [sp, #8]
 81092ee:	3b20      	subs	r3, #32
 81092f0:	930a      	str	r3, [sp, #40]	; 0x28
 81092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81092f4:	b10b      	cbz	r3, 81092fa <forward_dense+0x126>
 81092f6:	699b      	ldr	r3, [r3, #24]
 81092f8:	689b      	ldr	r3, [r3, #8]
 81092fa:	2c00      	cmp	r4, #0
 81092fc:	f000 81da 	beq.w	81096b4 <forward_dense+0x4e0>
 8109300:	9910      	ldr	r1, [sp, #64]	; 0x40
 8109302:	2904      	cmp	r1, #4
 8109304:	9906      	ldr	r1, [sp, #24]
 8109306:	f000 80fd 	beq.w	8109504 <forward_dense+0x330>
 810930a:	4549      	cmp	r1, r9
 810930c:	f080 80d2 	bcs.w	81094b4 <forward_dense+0x2e0>
 8109310:	460f      	mov	r7, r1
 8109312:	9907      	ldr	r1, [sp, #28]
 8109314:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8109318:	f8dd a014 	ldr.w	sl, [sp, #20]
 810931c:	1c4e      	adds	r6, r1, #1
 810931e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8109322:	4694      	mov	ip, r2
 8109324:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8109326:	468e      	mov	lr, r1
 8109328:	2b00      	cmp	r3, #0
 810932a:	f000 80de 	beq.w	81094ea <forward_dense+0x316>
 810932e:	ecf3 2a01 	vldmia	r3!, {s5}
 8109332:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8109500 <forward_dense+0x32c>
 8109336:	f1be 0f00 	cmp.w	lr, #0
 810933a:	f000 80de 	beq.w	81094fa <forward_dense+0x326>
 810933e:	f10c 0108 	add.w	r1, ip, #8
 8109342:	4640      	mov	r0, r8
 8109344:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8109348:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 810934c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8109350:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8109354:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8109358:	ed10 5a04 	vldr	s10, [r0, #-16]
 810935c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8109360:	ed10 6a02 	vldr	s12, [r0, #-8]
 8109364:	ed50 6a01 	vldr	s13, [r0, #-4]
 8109368:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 810936c:	edd5 7a00 	vldr	s15, [r5]
 8109370:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8109374:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109378:	ee67 7a83 	vmul.f32	s15, s15, s6
 810937c:	ed95 3a00 	vldr	s6, [r5]
 8109380:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8109384:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109388:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 810938c:	3108      	adds	r1, #8
 810938e:	edd5 3a00 	vldr	s7, [r5]
 8109392:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8109396:	eee3 7a84 	vfma.f32	s15, s7, s8
 810939a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 810939e:	3020      	adds	r0, #32
 81093a0:	ed95 4a00 	vldr	s8, [r5]
 81093a4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 81093a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 81093ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81093b0:	edd5 4a00 	vldr	s9, [r5]
 81093b4:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 81093b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 81093bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81093c0:	ed95 5a00 	vldr	s10, [r5]
 81093c4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 81093c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 81093cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81093d0:	edd5 5a00 	vldr	s11, [r5]
 81093d4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 81093d8:	eee5 7a86 	vfma.f32	s15, s11, s12
 81093dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81093e0:	428e      	cmp	r6, r1
 81093e2:	ed95 6a00 	vldr	s12, [r5]
 81093e6:	eee6 7a26 	vfma.f32	s15, s12, s13
 81093ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 81093ee:	d1a9      	bne.n	8109344 <forward_dense+0x170>
 81093f0:	f1a6 0108 	sub.w	r1, r6, #8
 81093f4:	4650      	mov	r0, sl
 81093f6:	2a00      	cmp	r2, #0
 81093f8:	d04a      	beq.n	8109490 <forward_dense+0x2bc>
 81093fa:	780d      	ldrb	r5, [r1, #0]
 81093fc:	edd0 6a00 	vldr	s13, [r0]
 8109400:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109404:	edd5 7a00 	vldr	s15, [r5]
 8109408:	2a01      	cmp	r2, #1
 810940a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810940e:	d03f      	beq.n	8109490 <forward_dense+0x2bc>
 8109410:	784d      	ldrb	r5, [r1, #1]
 8109412:	edd0 6a01 	vldr	s13, [r0, #4]
 8109416:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 810941a:	edd5 7a00 	vldr	s15, [r5]
 810941e:	2a02      	cmp	r2, #2
 8109420:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109424:	d034      	beq.n	8109490 <forward_dense+0x2bc>
 8109426:	788d      	ldrb	r5, [r1, #2]
 8109428:	edd0 6a02 	vldr	s13, [r0, #8]
 810942c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109430:	edd5 7a00 	vldr	s15, [r5]
 8109434:	2a03      	cmp	r2, #3
 8109436:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810943a:	d029      	beq.n	8109490 <forward_dense+0x2bc>
 810943c:	78cd      	ldrb	r5, [r1, #3]
 810943e:	edd0 6a03 	vldr	s13, [r0, #12]
 8109442:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109446:	edd5 7a00 	vldr	s15, [r5]
 810944a:	2a04      	cmp	r2, #4
 810944c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109450:	d01e      	beq.n	8109490 <forward_dense+0x2bc>
 8109452:	790d      	ldrb	r5, [r1, #4]
 8109454:	edd0 6a04 	vldr	s13, [r0, #16]
 8109458:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 810945c:	edd5 7a00 	vldr	s15, [r5]
 8109460:	2a05      	cmp	r2, #5
 8109462:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109466:	d013      	beq.n	8109490 <forward_dense+0x2bc>
 8109468:	794d      	ldrb	r5, [r1, #5]
 810946a:	edd0 6a05 	vldr	s13, [r0, #20]
 810946e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109472:	edd5 7a00 	vldr	s15, [r5]
 8109476:	2a06      	cmp	r2, #6
 8109478:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810947c:	d008      	beq.n	8109490 <forward_dense+0x2bc>
 810947e:	7989      	ldrb	r1, [r1, #6]
 8109480:	edd0 7a06 	vldr	s15, [r0, #24]
 8109484:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109488:	edd1 6a00 	vldr	s13, [r1]
 810948c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109490:	44dc      	add	ip, fp
 8109492:	445e      	add	r6, fp
 8109494:	ee32 7a87 	vadd.f32	s14, s5, s14
 8109498:	eca7 7a01 	vstmia	r7!, {s14}
 810949c:	454f      	cmp	r7, r9
 810949e:	f4ff af43 	bcc.w	8109328 <forward_dense+0x154>
 81094a2:	9a06      	ldr	r2, [sp, #24]
 81094a4:	eba9 0302 	sub.w	r3, r9, r2
 81094a8:	3b01      	subs	r3, #1
 81094aa:	f023 0303 	bic.w	r3, r3, #3
 81094ae:	3304      	adds	r3, #4
 81094b0:	18d3      	adds	r3, r2, r3
 81094b2:	9306      	str	r3, [sp, #24]
 81094b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81094b6:	9a05      	ldr	r2, [sp, #20]
 81094b8:	4499      	add	r9, r3
 81094ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81094bc:	441a      	add	r2, r3
 81094be:	9205      	str	r2, [sp, #20]
 81094c0:	9a02      	ldr	r2, [sp, #8]
 81094c2:	441a      	add	r2, r3
 81094c4:	9202      	str	r2, [sp, #8]
 81094c6:	9a04      	ldr	r2, [sp, #16]
 81094c8:	441a      	add	r2, r3
 81094ca:	9204      	str	r2, [sp, #16]
 81094cc:	9b06      	ldr	r3, [sp, #24]
 81094ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81094d0:	4293      	cmp	r3, r2
 81094d2:	f4ff af08 	bcc.w	81092e6 <forward_dense+0x112>
 81094d6:	b015      	add	sp, #84	; 0x54
 81094d8:	ecbd 8b02 	vpop	{d8}
 81094dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81094e0:	6853      	ldr	r3, [r2, #4]
 81094e2:	deff      	udf	#255	; 0xff
 81094e4:	2300      	movs	r3, #0
 81094e6:	685b      	ldr	r3, [r3, #4]
 81094e8:	deff      	udf	#255	; 0xff
 81094ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8109500 <forward_dense+0x32c>
 81094ee:	eef0 2a48 	vmov.f32	s5, s16
 81094f2:	f1be 0f00 	cmp.w	lr, #0
 81094f6:	f47f af22 	bne.w	810933e <forward_dense+0x16a>
 81094fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 81094fc:	4661      	mov	r1, ip
 81094fe:	e77a      	b.n	81093f6 <forward_dense+0x222>
 8109500:	00000000 	.word	0x00000000
 8109504:	4549      	cmp	r1, r9
 8109506:	d2d5      	bcs.n	81094b4 <forward_dense+0x2e0>
 8109508:	9807      	ldr	r0, [sp, #28]
 810950a:	9103      	str	r1, [sp, #12]
 810950c:	9904      	ldr	r1, [sp, #16]
 810950e:	f100 0c01 	add.w	ip, r0, #1
 8109512:	3901      	subs	r1, #1
 8109514:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8109518:	9109      	str	r1, [sp, #36]	; 0x24
 810951a:	2b00      	cmp	r3, #0
 810951c:	f000 80b2 	beq.w	8109684 <forward_dense+0x4b0>
 8109520:	9907      	ldr	r1, [sp, #28]
 8109522:	ecf3 2a01 	vldmia	r3!, {s5}
 8109526:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8109500 <forward_dense+0x32c>
 810952a:	2900      	cmp	r1, #0
 810952c:	f000 80b2 	beq.w	8109694 <forward_dense+0x4c0>
 8109530:	9902      	ldr	r1, [sp, #8]
 8109532:	1d10      	adds	r0, r2, #4
 8109534:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8109538:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 810953c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8109540:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8109544:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8109548:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 810954c:	ed11 5a04 	vldr	s10, [r1, #-16]
 8109550:	ed51 5a03 	vldr	s11, [r1, #-12]
 8109554:	ed11 6a02 	vldr	s12, [r1, #-8]
 8109558:	ed51 6a01 	vldr	s13, [r1, #-4]
 810955c:	f006 070f 	and.w	r7, r6, #15
 8109560:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8109564:	edd7 7a00 	vldr	s15, [r7]
 8109568:	0936      	lsrs	r6, r6, #4
 810956a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 810956e:	ed96 3a00 	vldr	s6, [r6]
 8109572:	ee67 7a82 	vmul.f32	s15, s15, s4
 8109576:	092e      	lsrs	r6, r5, #4
 8109578:	eee3 7a23 	vfma.f32	s15, s6, s7
 810957c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8109580:	f005 050f 	and.w	r5, r5, #15
 8109584:	edd6 3a00 	vldr	s7, [r6]
 8109588:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 810958c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8109590:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109594:	0937      	lsrs	r7, r6, #4
 8109596:	ed95 4a00 	vldr	s8, [r5]
 810959a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 810959e:	eee4 7a24 	vfma.f32	s15, s8, s9
 81095a2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 81095a6:	f006 060f 	and.w	r6, r6, #15
 81095aa:	edd7 4a00 	vldr	s9, [r7]
 81095ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 81095b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 81095b6:	3004      	adds	r0, #4
 81095b8:	ed96 5a00 	vldr	s10, [r6]
 81095bc:	092e      	lsrs	r6, r5, #4
 81095be:	eee5 7a25 	vfma.f32	s15, s10, s11
 81095c2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 81095c6:	f005 050f 	and.w	r5, r5, #15
 81095ca:	edd6 5a00 	vldr	s11, [r6]
 81095ce:	eee5 7a86 	vfma.f32	s15, s11, s12
 81095d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81095d6:	4584      	cmp	ip, r0
 81095d8:	ed95 6a00 	vldr	s12, [r5]
 81095dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 81095e0:	f101 0120 	add.w	r1, r1, #32
 81095e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 81095e8:	d1a4      	bne.n	8109534 <forward_dense+0x360>
 81095ea:	f8dd e014 	ldr.w	lr, [sp, #20]
 81095ee:	f1ac 0804 	sub.w	r8, ip, #4
 81095f2:	9904      	ldr	r1, [sp, #16]
 81095f4:	458e      	cmp	lr, r1
 81095f6:	d22a      	bcs.n	810964e <forward_dense+0x47a>
 81095f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 81095fa:	eba1 070e 	sub.w	r7, r1, lr
 81095fe:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8109602:	f10e 0008 	add.w	r0, lr, #8
 8109606:	f108 36ff 	add.w	r6, r8, #4294967295
 810960a:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 810960e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109612:	ed50 5a01 	vldr	s11, [r0, #-4]
 8109616:	ed50 6a02 	vldr	s13, [r0, #-8]
 810961a:	f001 050f 	and.w	r5, r1, #15
 810961e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109622:	edd5 7a00 	vldr	s15, [r5]
 8109626:	0909      	lsrs	r1, r1, #4
 8109628:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 810962c:	ed91 6a00 	vldr	s12, [r1]
 8109630:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8109634:	42b7      	cmp	r7, r6
 8109636:	eee6 7a26 	vfma.f32	s15, s12, s13
 810963a:	f100 0008 	add.w	r0, r0, #8
 810963e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109642:	d1e4      	bne.n	810960e <forward_dense+0x43a>
 8109644:	f10a 0a01 	add.w	sl, sl, #1
 8109648:	44d0      	add	r8, sl
 810964a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 810964e:	9908      	ldr	r1, [sp, #32]
 8109650:	b321      	cbz	r1, 810969c <forward_dense+0x4c8>
 8109652:	f898 1000 	ldrb.w	r1, [r8]
 8109656:	edde 7a00 	vldr	s15, [lr]
 810965a:	0909      	lsrs	r1, r1, #4
 810965c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8109660:	edd1 6a00 	vldr	s13, [r1]
 8109664:	9903      	ldr	r1, [sp, #12]
 8109666:	eea6 7aa7 	vfma.f32	s14, s13, s15
 810966a:	445a      	add	r2, fp
 810966c:	44dc      	add	ip, fp
 810966e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8109672:	ece1 2a01 	vstmia	r1!, {s5}
 8109676:	4589      	cmp	r9, r1
 8109678:	9103      	str	r1, [sp, #12]
 810967a:	f67f af12 	bls.w	81094a2 <forward_dense+0x2ce>
 810967e:	2b00      	cmp	r3, #0
 8109680:	f47f af4e 	bne.w	8109520 <forward_dense+0x34c>
 8109684:	9907      	ldr	r1, [sp, #28]
 8109686:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8109500 <forward_dense+0x32c>
 810968a:	eef0 2a48 	vmov.f32	s5, s16
 810968e:	2900      	cmp	r1, #0
 8109690:	f47f af4e 	bne.w	8109530 <forward_dense+0x35c>
 8109694:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8109698:	4690      	mov	r8, r2
 810969a:	e7aa      	b.n	81095f2 <forward_dense+0x41e>
 810969c:	9903      	ldr	r1, [sp, #12]
 810969e:	ee32 7a87 	vadd.f32	s14, s5, s14
 81096a2:	445a      	add	r2, fp
 81096a4:	eca1 7a01 	vstmia	r1!, {s14}
 81096a8:	4549      	cmp	r1, r9
 81096aa:	9103      	str	r1, [sp, #12]
 81096ac:	44dc      	add	ip, fp
 81096ae:	f4ff af34 	bcc.w	810951a <forward_dense+0x346>
 81096b2:	e6f6      	b.n	81094a2 <forward_dense+0x2ce>
 81096b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 81096b6:	9d06      	ldr	r5, [sp, #24]
 81096b8:	9101      	str	r1, [sp, #4]
 81096ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 81096bc:	9100      	str	r1, [sp, #0]
 81096be:	4628      	mov	r0, r5
 81096c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 81096c2:	f000 f9ef 	bl	8109aa4 <forward_lite_dense_if32of32wf32>
 81096c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81096c8:	462b      	mov	r3, r5
 81096ca:	4413      	add	r3, r2
 81096cc:	9306      	str	r3, [sp, #24]
 81096ce:	e6f1      	b.n	81094b4 <forward_dense+0x2e0>
 81096d0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 81096d4:	f1b9 0f00 	cmp.w	r9, #0
 81096d8:	d016      	beq.n	8109708 <forward_dense+0x534>
 81096da:	e9d9 0100 	ldrd	r0, r1, [r9]
 81096de:	f000 fbf7 	bl	8109ed0 <ai_array_get_byte_size>
 81096e2:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 81096e6:	4602      	mov	r2, r0
 81096e8:	4659      	mov	r1, fp
 81096ea:	4640      	mov	r0, r8
 81096ec:	f000 fafe 	bl	8109cec <st_int8_copy>
 81096f0:	e5c7      	b.n	8109282 <forward_dense+0xae>
 81096f2:	2b04      	cmp	r3, #4
 81096f4:	d00a      	beq.n	810970c <forward_dense+0x538>
 81096f6:	f04f 0900 	mov.w	r9, #0
 81096fa:	e5bd      	b.n	8109278 <forward_dense+0xa4>
 81096fc:	930d      	str	r3, [sp, #52]	; 0x34
 81096fe:	e595      	b.n	810922c <forward_dense+0x58>
 8109700:	2300      	movs	r3, #0
 8109702:	930b      	str	r3, [sp, #44]	; 0x2c
 8109704:	460b      	mov	r3, r1
 8109706:	e591      	b.n	810922c <forward_dense+0x58>
 8109708:	46c3      	mov	fp, r8
 810970a:	e5ba      	b.n	8109282 <forward_dense+0xae>
 810970c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8109710:	e5b7      	b.n	8109282 <forward_dense+0xae>
 8109712:	2300      	movs	r3, #0
 8109714:	685b      	ldr	r3, [r3, #4]
 8109716:	deff      	udf	#255	; 0xff
 8109718:	2300      	movs	r3, #0
 810971a:	685b      	ldr	r3, [r3, #4]
 810971c:	deff      	udf	#255	; 0xff
 810971e:	bf00      	nop

08109720 <forward_relu>:
 8109720:	6982      	ldr	r2, [r0, #24]
 8109722:	8813      	ldrh	r3, [r2, #0]
 8109724:	2b00      	cmp	r3, #0
 8109726:	d05b      	beq.n	81097e0 <forward_relu+0xc0>
 8109728:	6851      	ldr	r1, [r2, #4]
 810972a:	684a      	ldr	r2, [r1, #4]
 810972c:	b102      	cbz	r2, 8109730 <forward_relu+0x10>
 810972e:	6812      	ldr	r2, [r2, #0]
 8109730:	2b01      	cmp	r3, #1
 8109732:	f000 8123 	beq.w	810997c <forward_relu+0x25c>
 8109736:	b470      	push	{r4, r5, r6}
 8109738:	6909      	ldr	r1, [r1, #16]
 810973a:	b101      	cbz	r1, 810973e <forward_relu+0x1e>
 810973c:	6809      	ldr	r1, [r1, #0]
 810973e:	69c6      	ldr	r6, [r0, #28]
 8109740:	2e00      	cmp	r6, #0
 8109742:	f000 8097 	beq.w	8109874 <forward_relu+0x154>
 8109746:	6873      	ldr	r3, [r6, #4]
 8109748:	6988      	ldr	r0, [r1, #24]
 810974a:	6991      	ldr	r1, [r2, #24]
 810974c:	2b01      	cmp	r3, #1
 810974e:	f000 80c1 	beq.w	81098d4 <forward_relu+0x1b4>
 8109752:	6893      	ldr	r3, [r2, #8]
 8109754:	6880      	ldr	r0, [r0, #8]
 8109756:	688c      	ldr	r4, [r1, #8]
 8109758:	0a1b      	lsrs	r3, r3, #8
 810975a:	f000 80f2 	beq.w	8109942 <forward_relu+0x222>
 810975e:	68d5      	ldr	r5, [r2, #12]
 8109760:	2201      	movs	r2, #1
 8109762:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8109766:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810976a:	42ab      	cmp	r3, r5
 810976c:	fb01 f202 	mul.w	r2, r1, r2
 8109770:	d1f9      	bne.n	8109766 <forward_relu+0x46>
 8109772:	68b3      	ldr	r3, [r6, #8]
 8109774:	ed93 7a02 	vldr	s14, [r3, #8]
 8109778:	edd3 6a00 	vldr	s13, [r3]
 810977c:	ed93 6a01 	vldr	s12, [r3, #4]
 8109780:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8109784:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8109788:	3a01      	subs	r2, #1
 810978a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810978e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109792:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109796:	d425      	bmi.n	81097e4 <forward_relu+0xc4>
 8109798:	429c      	cmp	r4, r3
 810979a:	d81f      	bhi.n	81097dc <forward_relu+0xbc>
 810979c:	1d1a      	adds	r2, r3, #4
 810979e:	1d01      	adds	r1, r0, #4
 81097a0:	e00d      	b.n	81097be <forward_relu+0x9e>
 81097a2:	eef4 6ae7 	vcmpe.f32	s13, s15
 81097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81097aa:	db03      	blt.n	81097b4 <forward_relu+0x94>
 81097ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 81097b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 81097b4:	3b08      	subs	r3, #8
 81097b6:	429c      	cmp	r4, r3
 81097b8:	ed61 7a01 	vstmdb	r1!, {s15}
 81097bc:	d80e      	bhi.n	81097dc <forward_relu+0xbc>
 81097be:	4613      	mov	r3, r2
 81097c0:	ed72 7a01 	vldmdb	r2!, {s15}
 81097c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 81097c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81097cc:	d9e9      	bls.n	81097a2 <forward_relu+0x82>
 81097ce:	3b08      	subs	r3, #8
 81097d0:	eef0 7a47 	vmov.f32	s15, s14
 81097d4:	429c      	cmp	r4, r3
 81097d6:	ed61 7a01 	vstmdb	r1!, {s15}
 81097da:	d9f0      	bls.n	81097be <forward_relu+0x9e>
 81097dc:	bc70      	pop	{r4, r5, r6}
 81097de:	4770      	bx	lr
 81097e0:	685b      	ldr	r3, [r3, #4]
 81097e2:	deff      	udf	#255	; 0xff
 81097e4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 81097e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81097ec:	d11f      	bne.n	810982e <forward_relu+0x10e>
 81097ee:	429c      	cmp	r4, r3
 81097f0:	d8f4      	bhi.n	81097dc <forward_relu+0xbc>
 81097f2:	1b1c      	subs	r4, r3, r4
 81097f4:	f024 0403 	bic.w	r4, r4, #3
 81097f8:	1d1a      	adds	r2, r3, #4
 81097fa:	2500      	movs	r5, #0
 81097fc:	1b1b      	subs	r3, r3, r4
 81097fe:	1d01      	adds	r1, r0, #4
 8109800:	ed72 7a01 	vldmdb	r2!, {s15}
 8109804:	eef4 7ae6 	vcmpe.f32	s15, s13
 8109808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810980c:	dc0a      	bgt.n	8109824 <forward_relu+0x104>
 810980e:	429a      	cmp	r2, r3
 8109810:	f841 5d04 	str.w	r5, [r1, #-4]!
 8109814:	d0e2      	beq.n	81097dc <forward_relu+0xbc>
 8109816:	ed72 7a01 	vldmdb	r2!, {s15}
 810981a:	eef4 7ae6 	vcmpe.f32	s15, s13
 810981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109822:	ddf4      	ble.n	810980e <forward_relu+0xee>
 8109824:	429a      	cmp	r2, r3
 8109826:	ed61 7a01 	vstmdb	r1!, {s15}
 810982a:	d1e9      	bne.n	8109800 <forward_relu+0xe0>
 810982c:	e7d6      	b.n	81097dc <forward_relu+0xbc>
 810982e:	429c      	cmp	r4, r3
 8109830:	d8d4      	bhi.n	81097dc <forward_relu+0xbc>
 8109832:	1b1c      	subs	r4, r3, r4
 8109834:	f024 0403 	bic.w	r4, r4, #3
 8109838:	1d1a      	adds	r2, r3, #4
 810983a:	1d01      	adds	r1, r0, #4
 810983c:	1b1b      	subs	r3, r3, r4
 810983e:	ed72 7a01 	vldmdb	r2!, {s15}
 8109842:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810984a:	db0e      	blt.n	810986a <forward_relu+0x14a>
 810984c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8109850:	4293      	cmp	r3, r2
 8109852:	ee67 7a86 	vmul.f32	s15, s15, s12
 8109856:	ed61 7a01 	vstmdb	r1!, {s15}
 810985a:	d0bf      	beq.n	81097dc <forward_relu+0xbc>
 810985c:	ed72 7a01 	vldmdb	r2!, {s15}
 8109860:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109868:	daf0      	bge.n	810984c <forward_relu+0x12c>
 810986a:	4293      	cmp	r3, r2
 810986c:	ed61 7a01 	vstmdb	r1!, {s15}
 8109870:	d1e5      	bne.n	810983e <forward_relu+0x11e>
 8109872:	e7b3      	b.n	81097dc <forward_relu+0xbc>
 8109874:	6893      	ldr	r3, [r2, #8]
 8109876:	6989      	ldr	r1, [r1, #24]
 8109878:	6990      	ldr	r0, [r2, #24]
 810987a:	6889      	ldr	r1, [r1, #8]
 810987c:	6884      	ldr	r4, [r0, #8]
 810987e:	0a1b      	lsrs	r3, r3, #8
 8109880:	d075      	beq.n	810996e <forward_relu+0x24e>
 8109882:	68d5      	ldr	r5, [r2, #12]
 8109884:	2201      	movs	r2, #1
 8109886:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 810988a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 810988e:	429d      	cmp	r5, r3
 8109890:	fb00 f202 	mul.w	r2, r0, r2
 8109894:	d1f9      	bne.n	810988a <forward_relu+0x16a>
 8109896:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 810989a:	3b01      	subs	r3, #1
 810989c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 81098a0:	4294      	cmp	r4, r2
 81098a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 81098a6:	d899      	bhi.n	81097dc <forward_relu+0xbc>
 81098a8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8109984 <forward_relu+0x264>
 81098ac:	3204      	adds	r2, #4
 81098ae:	3104      	adds	r1, #4
 81098b0:	4613      	mov	r3, r2
 81098b2:	ed72 7a01 	vldmdb	r2!, {s15}
 81098b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81098ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81098be:	f1a3 0308 	sub.w	r3, r3, #8
 81098c2:	bfb8      	it	lt
 81098c4:	eef0 7a47 	vmovlt.f32	s15, s14
 81098c8:	429c      	cmp	r4, r3
 81098ca:	ed61 7a01 	vstmdb	r1!, {s15}
 81098ce:	d9ef      	bls.n	81098b0 <forward_relu+0x190>
 81098d0:	bc70      	pop	{r4, r5, r6}
 81098d2:	4770      	bx	lr
 81098d4:	688c      	ldr	r4, [r1, #8]
 81098d6:	6891      	ldr	r1, [r2, #8]
 81098d8:	6880      	ldr	r0, [r0, #8]
 81098da:	0a09      	lsrs	r1, r1, #8
 81098dc:	d049      	beq.n	8109972 <forward_relu+0x252>
 81098de:	68d5      	ldr	r5, [r2, #12]
 81098e0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 81098e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 81098e8:	42aa      	cmp	r2, r5
 81098ea:	fb01 f303 	mul.w	r3, r1, r3
 81098ee:	d1f9      	bne.n	81098e4 <forward_relu+0x1c4>
 81098f0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 81098f4:	3a01      	subs	r2, #1
 81098f6:	68b1      	ldr	r1, [r6, #8]
 81098f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 81098fc:	429c      	cmp	r4, r3
 81098fe:	ed91 7a00 	vldr	s14, [r1]
 8109902:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109906:	f63f af69 	bhi.w	81097dc <forward_relu+0xbc>
 810990a:	2500      	movs	r5, #0
 810990c:	3304      	adds	r3, #4
 810990e:	1d02      	adds	r2, r0, #4
 8109910:	ed53 7a01 	vldr	s15, [r3, #-4]
 8109914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8109918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810991c:	f1a3 0104 	sub.w	r1, r3, #4
 8109920:	f1a3 0308 	sub.w	r3, r3, #8
 8109924:	d406      	bmi.n	8109934 <forward_relu+0x214>
 8109926:	429c      	cmp	r4, r3
 8109928:	f842 5d04 	str.w	r5, [r2, #-4]!
 810992c:	f63f af56 	bhi.w	81097dc <forward_relu+0xbc>
 8109930:	460b      	mov	r3, r1
 8109932:	e7ed      	b.n	8109910 <forward_relu+0x1f0>
 8109934:	429c      	cmp	r4, r3
 8109936:	ed62 7a01 	vstmdb	r2!, {s15}
 810993a:	f63f af4f 	bhi.w	81097dc <forward_relu+0xbc>
 810993e:	460b      	mov	r3, r1
 8109940:	e7e6      	b.n	8109910 <forward_relu+0x1f0>
 8109942:	68b3      	ldr	r3, [r6, #8]
 8109944:	ed93 7a02 	vldr	s14, [r3, #8]
 8109948:	edd3 6a00 	vldr	s13, [r3]
 810994c:	ed93 6a01 	vldr	s12, [r3, #4]
 8109950:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8109954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109958:	d401      	bmi.n	810995e <forward_relu+0x23e>
 810995a:	4623      	mov	r3, r4
 810995c:	e71e      	b.n	810979c <forward_relu+0x7c>
 810995e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8109962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109966:	4623      	mov	r3, r4
 8109968:	f47f af63 	bne.w	8109832 <forward_relu+0x112>
 810996c:	e741      	b.n	81097f2 <forward_relu+0xd2>
 810996e:	4622      	mov	r2, r4
 8109970:	e79a      	b.n	81098a8 <forward_relu+0x188>
 8109972:	68b2      	ldr	r2, [r6, #8]
 8109974:	4623      	mov	r3, r4
 8109976:	ed92 7a00 	vldr	s14, [r2]
 810997a:	e7c6      	b.n	810990a <forward_relu+0x1ea>
 810997c:	2300      	movs	r3, #0
 810997e:	685b      	ldr	r3, [r3, #4]
 8109980:	deff      	udf	#255	; 0xff
 8109982:	bf00      	nop
 8109984:	00000000 	.word	0x00000000

08109988 <forward_sm>:
 8109988:	6982      	ldr	r2, [r0, #24]
 810998a:	8813      	ldrh	r3, [r2, #0]
 810998c:	2b00      	cmp	r3, #0
 810998e:	d07c      	beq.n	8109a8a <forward_sm+0x102>
 8109990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109994:	ed2d 8b04 	vpush	{d8-d9}
 8109998:	6852      	ldr	r2, [r2, #4]
 810999a:	6854      	ldr	r4, [r2, #4]
 810999c:	b085      	sub	sp, #20
 810999e:	b104      	cbz	r4, 81099a2 <forward_sm+0x1a>
 81099a0:	6824      	ldr	r4, [r4, #0]
 81099a2:	2b01      	cmp	r3, #1
 81099a4:	d076      	beq.n	8109a94 <forward_sm+0x10c>
 81099a6:	6913      	ldr	r3, [r2, #16]
 81099a8:	2b00      	cmp	r3, #0
 81099aa:	d076      	beq.n	8109a9a <forward_sm+0x112>
 81099ac:	681e      	ldr	r6, [r3, #0]
 81099ae:	68a3      	ldr	r3, [r4, #8]
 81099b0:	68e0      	ldr	r0, [r4, #12]
 81099b2:	68f2      	ldr	r2, [r6, #12]
 81099b4:	6845      	ldr	r5, [r0, #4]
 81099b6:	6857      	ldr	r7, [r2, #4]
 81099b8:	0a1b      	lsrs	r3, r3, #8
 81099ba:	d068      	beq.n	8109a8e <forward_sm+0x106>
 81099bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 81099c0:	2201      	movs	r2, #1
 81099c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81099c6:	4298      	cmp	r0, r3
 81099c8:	fb01 f202 	mul.w	r2, r1, r2
 81099cc:	d1f9      	bne.n	81099c2 <forward_sm+0x3a>
 81099ce:	ea4f 0982 	mov.w	r9, r2, lsl #2
 81099d2:	69a2      	ldr	r2, [r4, #24]
 81099d4:	69b3      	ldr	r3, [r6, #24]
 81099d6:	6892      	ldr	r2, [r2, #8]
 81099d8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 81099dc:	eb02 0309 	add.w	r3, r2, r9
 81099e0:	429a      	cmp	r2, r3
 81099e2:	9301      	str	r3, [sp, #4]
 81099e4:	d24c      	bcs.n	8109a80 <forward_sm+0xf8>
 81099e6:	00bb      	lsls	r3, r7, #2
 81099e8:	9303      	str	r3, [sp, #12]
 81099ea:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 81099ee:	00ab      	lsls	r3, r5, #2
 81099f0:	2d01      	cmp	r5, #1
 81099f2:	ed92 8a00 	vldr	s16, [r2]
 81099f6:	9302      	str	r3, [sp, #8]
 81099f8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 81099fc:	463e      	mov	r6, r7
 81099fe:	d93c      	bls.n	8109a7a <forward_sm+0xf2>
 8109a00:	1d13      	adds	r3, r2, #4
 8109a02:	ecf3 7a01 	vldmia	r3!, {s15}
 8109a06:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8109a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a0e:	bfb8      	it	lt
 8109a10:	eeb0 8a67 	vmovlt.f32	s16, s15
 8109a14:	429e      	cmp	r6, r3
 8109a16:	d1f4      	bne.n	8109a02 <forward_sm+0x7a>
 8109a18:	eddf 8a21 	vldr	s17, [pc, #132]	; 8109aa0 <forward_sm+0x118>
 8109a1c:	4692      	mov	sl, r2
 8109a1e:	46c3      	mov	fp, r8
 8109a20:	46c1      	mov	r9, r8
 8109a22:	2400      	movs	r4, #0
 8109a24:	ecba 0a01 	vldmia	sl!, {s0}
 8109a28:	ee30 0a48 	vsub.f32	s0, s0, s16
 8109a2c:	f004 feec 	bl	810e808 <expf>
 8109a30:	3401      	adds	r4, #1
 8109a32:	42a5      	cmp	r5, r4
 8109a34:	ee78 8a80 	vadd.f32	s17, s17, s0
 8109a38:	eca9 0a01 	vstmia	r9!, {s0}
 8109a3c:	d8f2      	bhi.n	8109a24 <forward_sm+0x9c>
 8109a3e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8109a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a46:	d00b      	beq.n	8109a60 <forward_sm+0xd8>
 8109a48:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8109a4c:	2300      	movs	r3, #0
 8109a4e:	3301      	adds	r3, #1
 8109a50:	429d      	cmp	r5, r3
 8109a52:	eddb 7a00 	vldr	s15, [fp]
 8109a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109a5a:	eceb 7a01 	vstmia	fp!, {s15}
 8109a5e:	d8f6      	bhi.n	8109a4e <forward_sm+0xc6>
 8109a60:	9b03      	ldr	r3, [sp, #12]
 8109a62:	9901      	ldr	r1, [sp, #4]
 8109a64:	4498      	add	r8, r3
 8109a66:	9b02      	ldr	r3, [sp, #8]
 8109a68:	42b9      	cmp	r1, r7
 8109a6a:	463a      	mov	r2, r7
 8109a6c:	441e      	add	r6, r3
 8109a6e:	d907      	bls.n	8109a80 <forward_sm+0xf8>
 8109a70:	2d01      	cmp	r5, #1
 8109a72:	ed92 8a00 	vldr	s16, [r2]
 8109a76:	441f      	add	r7, r3
 8109a78:	d8c2      	bhi.n	8109a00 <forward_sm+0x78>
 8109a7a:	2d00      	cmp	r5, #0
 8109a7c:	d0f0      	beq.n	8109a60 <forward_sm+0xd8>
 8109a7e:	e7cb      	b.n	8109a18 <forward_sm+0x90>
 8109a80:	b005      	add	sp, #20
 8109a82:	ecbd 8b04 	vpop	{d8-d9}
 8109a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109a8a:	685b      	ldr	r3, [r3, #4]
 8109a8c:	deff      	udf	#255	; 0xff
 8109a8e:	f04f 0904 	mov.w	r9, #4
 8109a92:	e79e      	b.n	81099d2 <forward_sm+0x4a>
 8109a94:	2300      	movs	r3, #0
 8109a96:	685b      	ldr	r3, [r3, #4]
 8109a98:	deff      	udf	#255	; 0xff
 8109a9a:	68db      	ldr	r3, [r3, #12]
 8109a9c:	deff      	udf	#255	; 0xff
 8109a9e:	bf00      	nop
 8109aa0:	00000000 	.word	0x00000000

08109aa4 <forward_lite_dense_if32of32wf32>:
 8109aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109aa8:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8109aac:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8109ab0:	4287      	cmp	r7, r0
 8109ab2:	f240 8106 	bls.w	8109cc2 <forward_lite_dense_if32of32wf32+0x21e>
 8109ab6:	f1a6 0810 	sub.w	r8, r6, #16
 8109aba:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8109abe:	f108 0801 	add.w	r8, r8, #1
 8109ac2:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8109ac6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8109aca:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8109ace:	4605      	mov	r5, r0
 8109ad0:	f006 0a0f 	and.w	sl, r6, #15
 8109ad4:	2e0f      	cmp	r6, #15
 8109ad6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8109ce8 <forward_lite_dense_if32of32wf32+0x244>
 8109ada:	f240 8101 	bls.w	8109ce0 <forward_lite_dense_if32of32wf32+0x23c>
 8109ade:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8109ae2:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8109ae6:	46b6      	mov	lr, r6
 8109ae8:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8109aec:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8109af0:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8109af4:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8109af8:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8109afc:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8109b00:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8109b04:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8109b08:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8109b0c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8109b10:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8109b14:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8109b18:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8109b1c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8109b20:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8109b24:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109b28:	f1ae 0e10 	sub.w	lr, lr, #16
 8109b2c:	f1be 0f0f 	cmp.w	lr, #15
 8109b30:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8109b34:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8109b38:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109b3c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8109b40:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8109b44:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8109b48:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8109b4c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8109b50:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8109b54:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8109b58:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109b5c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8109b60:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8109b64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109b68:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8109b6c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8109b70:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109b74:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8109b78:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8109b7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109b80:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8109b84:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8109b88:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109b8c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8109b90:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8109b94:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109b98:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8109b9c:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8109ba0:	eee1 7a21 	vfma.f32	s15, s2, s3
 8109ba4:	eee2 7a22 	vfma.f32	s15, s4, s5
 8109ba8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109bac:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109bb0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109bb4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109bbc:	d894      	bhi.n	8109ae8 <forward_lite_dense_if32of32wf32+0x44>
 8109bbe:	eb02 0e0b 	add.w	lr, r2, fp
 8109bc2:	4654      	mov	r4, sl
 8109bc4:	46c4      	mov	ip, r8
 8109bc6:	2c00      	cmp	r4, #0
 8109bc8:	d075      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109bca:	eddc 6a00 	vldr	s13, [ip]
 8109bce:	edde 7a00 	vldr	s15, [lr]
 8109bd2:	2c01      	cmp	r4, #1
 8109bd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109bd8:	d06d      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109bda:	eddc 6a01 	vldr	s13, [ip, #4]
 8109bde:	edde 7a01 	vldr	s15, [lr, #4]
 8109be2:	2c02      	cmp	r4, #2
 8109be4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109be8:	d065      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109bea:	eddc 6a02 	vldr	s13, [ip, #8]
 8109bee:	edde 7a02 	vldr	s15, [lr, #8]
 8109bf2:	2c03      	cmp	r4, #3
 8109bf4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109bf8:	d05d      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109bfa:	eddc 6a03 	vldr	s13, [ip, #12]
 8109bfe:	edde 7a03 	vldr	s15, [lr, #12]
 8109c02:	2c04      	cmp	r4, #4
 8109c04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c08:	d055      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c0a:	eddc 6a04 	vldr	s13, [ip, #16]
 8109c0e:	edde 7a04 	vldr	s15, [lr, #16]
 8109c12:	2c05      	cmp	r4, #5
 8109c14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c18:	d04d      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c1a:	eddc 6a05 	vldr	s13, [ip, #20]
 8109c1e:	edde 7a05 	vldr	s15, [lr, #20]
 8109c22:	2c06      	cmp	r4, #6
 8109c24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c28:	d045      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c2a:	eddc 6a06 	vldr	s13, [ip, #24]
 8109c2e:	edde 7a06 	vldr	s15, [lr, #24]
 8109c32:	2c07      	cmp	r4, #7
 8109c34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c38:	d03d      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c3a:	eddc 6a07 	vldr	s13, [ip, #28]
 8109c3e:	edde 7a07 	vldr	s15, [lr, #28]
 8109c42:	2c08      	cmp	r4, #8
 8109c44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c48:	d035      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c4a:	eddc 6a08 	vldr	s13, [ip, #32]
 8109c4e:	edde 7a08 	vldr	s15, [lr, #32]
 8109c52:	2c09      	cmp	r4, #9
 8109c54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c58:	d02d      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c5a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8109c5e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8109c62:	2c0a      	cmp	r4, #10
 8109c64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c68:	d025      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c6a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8109c6e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8109c72:	2c0b      	cmp	r4, #11
 8109c74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c78:	d01d      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c7a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8109c7e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8109c82:	2c0c      	cmp	r4, #12
 8109c84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c88:	d015      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c8a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8109c8e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8109c92:	3c0d      	subs	r4, #13
 8109c94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109c98:	d00d      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109c9a:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8109c9e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8109ca2:	2c01      	cmp	r4, #1
 8109ca4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109ca8:	d005      	beq.n	8109cb6 <forward_lite_dense_if32of32wf32+0x212>
 8109caa:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8109cae:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8109cb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109cb6:	444a      	add	r2, r9
 8109cb8:	eca5 7a01 	vstmia	r5!, {s14}
 8109cbc:	42af      	cmp	r7, r5
 8109cbe:	f63f af09 	bhi.w	8109ad4 <forward_lite_dense_if32of32wf32+0x30>
 8109cc2:	b15b      	cbz	r3, 8109cdc <forward_lite_dense_if32of32wf32+0x238>
 8109cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109cc6:	b14a      	cbz	r2, 8109cdc <forward_lite_dense_if32of32wf32+0x238>
 8109cc8:	edd0 7a00 	vldr	s15, [r0]
 8109ccc:	ecb3 7a01 	vldmia	r3!, {s14}
 8109cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8109cd4:	ece0 7a01 	vstmia	r0!, {s15}
 8109cd8:	4287      	cmp	r7, r0
 8109cda:	d1f5      	bne.n	8109cc8 <forward_lite_dense_if32of32wf32+0x224>
 8109cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109ce0:	4634      	mov	r4, r6
 8109ce2:	4696      	mov	lr, r2
 8109ce4:	468c      	mov	ip, r1
 8109ce6:	e76e      	b.n	8109bc6 <forward_lite_dense_if32of32wf32+0x122>
 8109ce8:	00000000 	.word	0x00000000

08109cec <st_int8_copy>:
 8109cec:	4288      	cmp	r0, r1
 8109cee:	d057      	beq.n	8109da0 <st_int8_copy+0xb4>
 8109cf0:	2a00      	cmp	r2, #0
 8109cf2:	d055      	beq.n	8109da0 <st_int8_copy+0xb4>
 8109cf4:	4288      	cmp	r0, r1
 8109cf6:	d354      	bcc.n	8109da2 <st_int8_copy+0xb6>
 8109cf8:	078b      	lsls	r3, r1, #30
 8109cfa:	d102      	bne.n	8109d02 <st_int8_copy+0x16>
 8109cfc:	e009      	b.n	8109d12 <st_int8_copy+0x26>
 8109cfe:	2a00      	cmp	r2, #0
 8109d00:	d05c      	beq.n	8109dbc <st_int8_copy+0xd0>
 8109d02:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8109d06:	f801 3b01 	strb.w	r3, [r1], #1
 8109d0a:	078b      	lsls	r3, r1, #30
 8109d0c:	f102 32ff 	add.w	r2, r2, #4294967295
 8109d10:	d1f5      	bne.n	8109cfe <st_int8_copy+0x12>
 8109d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109d16:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8109d1a:	d069      	beq.n	8109df0 <st_int8_copy+0x104>
 8109d1c:	ea41 0300 	orr.w	r3, r1, r0
 8109d20:	075b      	lsls	r3, r3, #29
 8109d22:	d14c      	bne.n	8109dbe <st_int8_copy+0xd2>
 8109d24:	f10e 33ff 	add.w	r3, lr, #4294967295
 8109d28:	2b01      	cmp	r3, #1
 8109d2a:	d948      	bls.n	8109dbe <st_int8_copy+0xd2>
 8109d2c:	f100 0310 	add.w	r3, r0, #16
 8109d30:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8109d34:	f101 0c10 	add.w	ip, r1, #16
 8109d38:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8109d3c:	ed13 6b04 	vldr	d6, [r3, #-16]
 8109d40:	ed13 7b02 	vldr	d7, [r3, #-8]
 8109d44:	3310      	adds	r3, #16
 8109d46:	4573      	cmp	r3, lr
 8109d48:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8109d4c:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8109d50:	f10c 0c10 	add.w	ip, ip, #16
 8109d54:	d1f2      	bne.n	8109d3c <st_int8_copy+0x50>
 8109d56:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8109d5a:	4421      	add	r1, r4
 8109d5c:	4420      	add	r0, r4
 8109d5e:	f002 0203 	and.w	r2, r2, #3
 8109d62:	b16b      	cbz	r3, 8109d80 <st_int8_copy+0x94>
 8109d64:	6804      	ldr	r4, [r0, #0]
 8109d66:	600c      	str	r4, [r1, #0]
 8109d68:	1e5c      	subs	r4, r3, #1
 8109d6a:	d005      	beq.n	8109d78 <st_int8_copy+0x8c>
 8109d6c:	6845      	ldr	r5, [r0, #4]
 8109d6e:	604d      	str	r5, [r1, #4]
 8109d70:	2c01      	cmp	r4, #1
 8109d72:	bf1c      	itt	ne
 8109d74:	6884      	ldrne	r4, [r0, #8]
 8109d76:	608c      	strne	r4, [r1, #8]
 8109d78:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8109d7c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8109d80:	b162      	cbz	r2, 8109d9c <st_int8_copy+0xb0>
 8109d82:	f990 3000 	ldrsb.w	r3, [r0]
 8109d86:	700b      	strb	r3, [r1, #0]
 8109d88:	3a01      	subs	r2, #1
 8109d8a:	d007      	beq.n	8109d9c <st_int8_copy+0xb0>
 8109d8c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8109d90:	704b      	strb	r3, [r1, #1]
 8109d92:	2a01      	cmp	r2, #1
 8109d94:	bf1c      	itt	ne
 8109d96:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8109d9a:	708b      	strbne	r3, [r1, #2]
 8109d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109da0:	4770      	bx	lr
 8109da2:	1883      	adds	r3, r0, r2
 8109da4:	428b      	cmp	r3, r1
 8109da6:	d9a7      	bls.n	8109cf8 <st_int8_copy+0xc>
 8109da8:	4283      	cmp	r3, r0
 8109daa:	440a      	add	r2, r1
 8109dac:	d9f8      	bls.n	8109da0 <st_int8_copy+0xb4>
 8109dae:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8109db2:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8109db6:	4283      	cmp	r3, r0
 8109db8:	d1f9      	bne.n	8109dae <st_int8_copy+0xc2>
 8109dba:	4770      	bx	lr
 8109dbc:	4770      	bx	lr
 8109dbe:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8109dc2:	460b      	mov	r3, r1
 8109dc4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8109dc8:	4684      	mov	ip, r0
 8109dca:	f8dc 7000 	ldr.w	r7, [ip]
 8109dce:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8109dd2:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8109dd6:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8109dda:	f8c3 800c 	str.w	r8, [r3, #12]
 8109dde:	601f      	str	r7, [r3, #0]
 8109de0:	605e      	str	r6, [r3, #4]
 8109de2:	609d      	str	r5, [r3, #8]
 8109de4:	3310      	adds	r3, #16
 8109de6:	459e      	cmp	lr, r3
 8109de8:	f10c 0c10 	add.w	ip, ip, #16
 8109dec:	d1ed      	bne.n	8109dca <st_int8_copy+0xde>
 8109dee:	e7b2      	b.n	8109d56 <st_int8_copy+0x6a>
 8109df0:	0893      	lsrs	r3, r2, #2
 8109df2:	f002 0203 	and.w	r2, r2, #3
 8109df6:	e7b4      	b.n	8109d62 <st_int8_copy+0x76>

08109df8 <ai_array_to_buffer_fmt>:
 8109df8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8109dfc:	2b02      	cmp	r3, #2
 8109dfe:	d050      	beq.n	8109ea2 <ai_array_to_buffer_fmt+0xaa>
 8109e00:	4b2a      	ldr	r3, [pc, #168]	; (8109eac <ai_array_to_buffer_fmt+0xb4>)
 8109e02:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8109e06:	429a      	cmp	r2, r3
 8109e08:	d00b      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e0a:	dc1c      	bgt.n	8109e46 <ai_array_to_buffer_fmt+0x4e>
 8109e0c:	4b28      	ldr	r3, [pc, #160]	; (8109eb0 <ai_array_to_buffer_fmt+0xb8>)
 8109e0e:	429a      	cmp	r2, r3
 8109e10:	d007      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e12:	dd0b      	ble.n	8109e2c <ai_array_to_buffer_fmt+0x34>
 8109e14:	4b27      	ldr	r3, [pc, #156]	; (8109eb4 <ai_array_to_buffer_fmt+0xbc>)
 8109e16:	429a      	cmp	r2, r3
 8109e18:	d003      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e1a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8109e1e:	429a      	cmp	r2, r3
 8109e20:	d131      	bne.n	8109e86 <ai_array_to_buffer_fmt+0x8e>
 8109e22:	4613      	mov	r3, r2
 8109e24:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8109e28:	4318      	orrs	r0, r3
 8109e2a:	4770      	bx	lr
 8109e2c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8109e30:	429a      	cmp	r2, r3
 8109e32:	d0f6      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e34:	dd2c      	ble.n	8109e90 <ai_array_to_buffer_fmt+0x98>
 8109e36:	4b20      	ldr	r3, [pc, #128]	; (8109eb8 <ai_array_to_buffer_fmt+0xc0>)
 8109e38:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8109e3c:	429a      	cmp	r2, r3
 8109e3e:	bf18      	it	ne
 8109e40:	2340      	movne	r3, #64	; 0x40
 8109e42:	4318      	orrs	r0, r3
 8109e44:	4770      	bx	lr
 8109e46:	4b1d      	ldr	r3, [pc, #116]	; (8109ebc <ai_array_to_buffer_fmt+0xc4>)
 8109e48:	429a      	cmp	r2, r3
 8109e4a:	d0ea      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e4c:	dd0e      	ble.n	8109e6c <ai_array_to_buffer_fmt+0x74>
 8109e4e:	4b1c      	ldr	r3, [pc, #112]	; (8109ec0 <ai_array_to_buffer_fmt+0xc8>)
 8109e50:	429a      	cmp	r2, r3
 8109e52:	d0e6      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e54:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8109e58:	429a      	cmp	r2, r3
 8109e5a:	d0e2      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e5c:	4b19      	ldr	r3, [pc, #100]	; (8109ec4 <ai_array_to_buffer_fmt+0xcc>)
 8109e5e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8109e62:	429a      	cmp	r2, r3
 8109e64:	bf18      	it	ne
 8109e66:	2340      	movne	r3, #64	; 0x40
 8109e68:	4318      	orrs	r0, r3
 8109e6a:	4770      	bx	lr
 8109e6c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8109e70:	429a      	cmp	r2, r3
 8109e72:	d0d6      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e74:	3307      	adds	r3, #7
 8109e76:	429a      	cmp	r2, r3
 8109e78:	d0d3      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e7a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8109e7e:	429a      	cmp	r2, r3
 8109e80:	bf18      	it	ne
 8109e82:	2340      	movne	r3, #64	; 0x40
 8109e84:	e7ce      	b.n	8109e24 <ai_array_to_buffer_fmt+0x2c>
 8109e86:	4b10      	ldr	r3, [pc, #64]	; (8109ec8 <ai_array_to_buffer_fmt+0xd0>)
 8109e88:	429a      	cmp	r2, r3
 8109e8a:	bf18      	it	ne
 8109e8c:	2340      	movne	r3, #64	; 0x40
 8109e8e:	e7c9      	b.n	8109e24 <ai_array_to_buffer_fmt+0x2c>
 8109e90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8109e94:	429a      	cmp	r2, r3
 8109e96:	d0c4      	beq.n	8109e22 <ai_array_to_buffer_fmt+0x2a>
 8109e98:	3380      	adds	r3, #128	; 0x80
 8109e9a:	429a      	cmp	r2, r3
 8109e9c:	bf18      	it	ne
 8109e9e:	2340      	movne	r3, #64	; 0x40
 8109ea0:	e7c0      	b.n	8109e24 <ai_array_to_buffer_fmt+0x2c>
 8109ea2:	4b0a      	ldr	r3, [pc, #40]	; (8109ecc <ai_array_to_buffer_fmt+0xd4>)
 8109ea4:	4003      	ands	r3, r0
 8109ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8109eaa:	e7bb      	b.n	8109e24 <ai_array_to_buffer_fmt+0x2c>
 8109eac:	00840040 	.word	0x00840040
 8109eb0:	00040840 	.word	0x00040840
 8109eb4:	00041040 	.word	0x00041040
 8109eb8:	00040447 	.word	0x00040447
 8109ebc:	00840840 	.word	0x00840840
 8109ec0:	00841040 	.word	0x00841040
 8109ec4:	0084084f 	.word	0x0084084f
 8109ec8:	0004084f 	.word	0x0004084f
 8109ecc:	00803fff 	.word	0x00803fff

08109ed0 <ai_array_get_byte_size>:
 8109ed0:	b319      	cbz	r1, 8109f1a <ai_array_get_byte_size+0x4a>
 8109ed2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8109ed6:	fb03 f101 	mul.w	r1, r3, r1
 8109eda:	3107      	adds	r1, #7
 8109edc:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8109ee0:	f021 0307 	bic.w	r3, r1, #7
 8109ee4:	2a04      	cmp	r2, #4
 8109ee6:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8109eea:	fa23 f101 	lsr.w	r1, r3, r1
 8109eee:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8109ef2:	d00b      	beq.n	8109f0c <ai_array_get_byte_size+0x3c>
 8109ef4:	2a08      	cmp	r2, #8
 8109ef6:	d002      	beq.n	8109efe <ai_array_get_byte_size+0x2e>
 8109ef8:	3107      	adds	r1, #7
 8109efa:	08c8      	lsrs	r0, r1, #3
 8109efc:	4770      	bx	lr
 8109efe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8109f02:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8109f06:	3107      	adds	r1, #7
 8109f08:	08c8      	lsrs	r0, r1, #3
 8109f0a:	4770      	bx	lr
 8109f0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8109f10:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8109f14:	3107      	adds	r1, #7
 8109f16:	08c8      	lsrs	r0, r1, #3
 8109f18:	4770      	bx	lr
 8109f1a:	4608      	mov	r0, r1
 8109f1c:	4770      	bx	lr
 8109f1e:	bf00      	nop

08109f20 <ai_array_get_data_byte_size>:
 8109f20:	b169      	cbz	r1, 8109f3e <ai_array_get_data_byte_size+0x1e>
 8109f22:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8109f26:	fb02 f101 	mul.w	r1, r2, r1
 8109f2a:	1dcb      	adds	r3, r1, #7
 8109f2c:	f023 0307 	bic.w	r3, r3, #7
 8109f30:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8109f34:	fa23 f000 	lsr.w	r0, r3, r0
 8109f38:	3007      	adds	r0, #7
 8109f3a:	08c0      	lsrs	r0, r0, #3
 8109f3c:	4770      	bx	lr
 8109f3e:	4608      	mov	r0, r1
 8109f40:	4770      	bx	lr
 8109f42:	bf00      	nop

08109f44 <ai_version_get>:
 8109f44:	0212      	lsls	r2, r2, #8
 8109f46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8109f4a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8109f4e:	4770      	bx	lr

08109f50 <get_tensor_byte_size>:
 8109f50:	b410      	push	{r4}
 8109f52:	6983      	ldr	r3, [r0, #24]
 8109f54:	68c4      	ldr	r4, [r0, #12]
 8109f56:	6941      	ldr	r1, [r0, #20]
 8109f58:	681b      	ldr	r3, [r3, #0]
 8109f5a:	68e0      	ldr	r0, [r4, #12]
 8109f5c:	4a07      	ldr	r2, [pc, #28]	; (8109f7c <get_tensor_byte_size+0x2c>)
 8109f5e:	68c9      	ldr	r1, [r1, #12]
 8109f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109f64:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8109f68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8109f6c:	fb01 f000 	mul.w	r0, r1, r0
 8109f70:	4293      	cmp	r3, r2
 8109f72:	bf04      	itt	eq
 8109f74:	3007      	addeq	r0, #7
 8109f76:	08c0      	lsreq	r0, r0, #3
 8109f78:	4770      	bx	lr
 8109f7a:	bf00      	nop
 8109f7c:	000400c0 	.word	0x000400c0

08109f80 <malloc>:
 8109f80:	4b02      	ldr	r3, [pc, #8]	; (8109f8c <malloc+0xc>)
 8109f82:	4601      	mov	r1, r0
 8109f84:	6818      	ldr	r0, [r3, #0]
 8109f86:	f000 b823 	b.w	8109fd0 <_malloc_r>
 8109f8a:	bf00      	nop
 8109f8c:	100009dc 	.word	0x100009dc

08109f90 <sbrk_aligned>:
 8109f90:	b570      	push	{r4, r5, r6, lr}
 8109f92:	4e0e      	ldr	r6, [pc, #56]	; (8109fcc <sbrk_aligned+0x3c>)
 8109f94:	460c      	mov	r4, r1
 8109f96:	6831      	ldr	r1, [r6, #0]
 8109f98:	4605      	mov	r5, r0
 8109f9a:	b911      	cbnz	r1, 8109fa2 <sbrk_aligned+0x12>
 8109f9c:	f001 f9b2 	bl	810b304 <_sbrk_r>
 8109fa0:	6030      	str	r0, [r6, #0]
 8109fa2:	4621      	mov	r1, r4
 8109fa4:	4628      	mov	r0, r5
 8109fa6:	f001 f9ad 	bl	810b304 <_sbrk_r>
 8109faa:	1c43      	adds	r3, r0, #1
 8109fac:	d00a      	beq.n	8109fc4 <sbrk_aligned+0x34>
 8109fae:	1cc4      	adds	r4, r0, #3
 8109fb0:	f024 0403 	bic.w	r4, r4, #3
 8109fb4:	42a0      	cmp	r0, r4
 8109fb6:	d007      	beq.n	8109fc8 <sbrk_aligned+0x38>
 8109fb8:	1a21      	subs	r1, r4, r0
 8109fba:	4628      	mov	r0, r5
 8109fbc:	f001 f9a2 	bl	810b304 <_sbrk_r>
 8109fc0:	3001      	adds	r0, #1
 8109fc2:	d101      	bne.n	8109fc8 <sbrk_aligned+0x38>
 8109fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8109fc8:	4620      	mov	r0, r4
 8109fca:	bd70      	pop	{r4, r5, r6, pc}
 8109fcc:	1001acc4 	.word	0x1001acc4

08109fd0 <_malloc_r>:
 8109fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109fd4:	1ccd      	adds	r5, r1, #3
 8109fd6:	f025 0503 	bic.w	r5, r5, #3
 8109fda:	3508      	adds	r5, #8
 8109fdc:	2d0c      	cmp	r5, #12
 8109fde:	bf38      	it	cc
 8109fe0:	250c      	movcc	r5, #12
 8109fe2:	2d00      	cmp	r5, #0
 8109fe4:	4607      	mov	r7, r0
 8109fe6:	db01      	blt.n	8109fec <_malloc_r+0x1c>
 8109fe8:	42a9      	cmp	r1, r5
 8109fea:	d905      	bls.n	8109ff8 <_malloc_r+0x28>
 8109fec:	230c      	movs	r3, #12
 8109fee:	603b      	str	r3, [r7, #0]
 8109ff0:	2600      	movs	r6, #0
 8109ff2:	4630      	mov	r0, r6
 8109ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109ff8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810a0cc <_malloc_r+0xfc>
 8109ffc:	f000 f868 	bl	810a0d0 <__malloc_lock>
 810a000:	f8d8 3000 	ldr.w	r3, [r8]
 810a004:	461c      	mov	r4, r3
 810a006:	bb5c      	cbnz	r4, 810a060 <_malloc_r+0x90>
 810a008:	4629      	mov	r1, r5
 810a00a:	4638      	mov	r0, r7
 810a00c:	f7ff ffc0 	bl	8109f90 <sbrk_aligned>
 810a010:	1c43      	adds	r3, r0, #1
 810a012:	4604      	mov	r4, r0
 810a014:	d155      	bne.n	810a0c2 <_malloc_r+0xf2>
 810a016:	f8d8 4000 	ldr.w	r4, [r8]
 810a01a:	4626      	mov	r6, r4
 810a01c:	2e00      	cmp	r6, #0
 810a01e:	d145      	bne.n	810a0ac <_malloc_r+0xdc>
 810a020:	2c00      	cmp	r4, #0
 810a022:	d048      	beq.n	810a0b6 <_malloc_r+0xe6>
 810a024:	6823      	ldr	r3, [r4, #0]
 810a026:	4631      	mov	r1, r6
 810a028:	4638      	mov	r0, r7
 810a02a:	eb04 0903 	add.w	r9, r4, r3
 810a02e:	f001 f969 	bl	810b304 <_sbrk_r>
 810a032:	4581      	cmp	r9, r0
 810a034:	d13f      	bne.n	810a0b6 <_malloc_r+0xe6>
 810a036:	6821      	ldr	r1, [r4, #0]
 810a038:	1a6d      	subs	r5, r5, r1
 810a03a:	4629      	mov	r1, r5
 810a03c:	4638      	mov	r0, r7
 810a03e:	f7ff ffa7 	bl	8109f90 <sbrk_aligned>
 810a042:	3001      	adds	r0, #1
 810a044:	d037      	beq.n	810a0b6 <_malloc_r+0xe6>
 810a046:	6823      	ldr	r3, [r4, #0]
 810a048:	442b      	add	r3, r5
 810a04a:	6023      	str	r3, [r4, #0]
 810a04c:	f8d8 3000 	ldr.w	r3, [r8]
 810a050:	2b00      	cmp	r3, #0
 810a052:	d038      	beq.n	810a0c6 <_malloc_r+0xf6>
 810a054:	685a      	ldr	r2, [r3, #4]
 810a056:	42a2      	cmp	r2, r4
 810a058:	d12b      	bne.n	810a0b2 <_malloc_r+0xe2>
 810a05a:	2200      	movs	r2, #0
 810a05c:	605a      	str	r2, [r3, #4]
 810a05e:	e00f      	b.n	810a080 <_malloc_r+0xb0>
 810a060:	6822      	ldr	r2, [r4, #0]
 810a062:	1b52      	subs	r2, r2, r5
 810a064:	d41f      	bmi.n	810a0a6 <_malloc_r+0xd6>
 810a066:	2a0b      	cmp	r2, #11
 810a068:	d917      	bls.n	810a09a <_malloc_r+0xca>
 810a06a:	1961      	adds	r1, r4, r5
 810a06c:	42a3      	cmp	r3, r4
 810a06e:	6025      	str	r5, [r4, #0]
 810a070:	bf18      	it	ne
 810a072:	6059      	strne	r1, [r3, #4]
 810a074:	6863      	ldr	r3, [r4, #4]
 810a076:	bf08      	it	eq
 810a078:	f8c8 1000 	streq.w	r1, [r8]
 810a07c:	5162      	str	r2, [r4, r5]
 810a07e:	604b      	str	r3, [r1, #4]
 810a080:	4638      	mov	r0, r7
 810a082:	f104 060b 	add.w	r6, r4, #11
 810a086:	f000 f829 	bl	810a0dc <__malloc_unlock>
 810a08a:	f026 0607 	bic.w	r6, r6, #7
 810a08e:	1d23      	adds	r3, r4, #4
 810a090:	1af2      	subs	r2, r6, r3
 810a092:	d0ae      	beq.n	8109ff2 <_malloc_r+0x22>
 810a094:	1b9b      	subs	r3, r3, r6
 810a096:	50a3      	str	r3, [r4, r2]
 810a098:	e7ab      	b.n	8109ff2 <_malloc_r+0x22>
 810a09a:	42a3      	cmp	r3, r4
 810a09c:	6862      	ldr	r2, [r4, #4]
 810a09e:	d1dd      	bne.n	810a05c <_malloc_r+0x8c>
 810a0a0:	f8c8 2000 	str.w	r2, [r8]
 810a0a4:	e7ec      	b.n	810a080 <_malloc_r+0xb0>
 810a0a6:	4623      	mov	r3, r4
 810a0a8:	6864      	ldr	r4, [r4, #4]
 810a0aa:	e7ac      	b.n	810a006 <_malloc_r+0x36>
 810a0ac:	4634      	mov	r4, r6
 810a0ae:	6876      	ldr	r6, [r6, #4]
 810a0b0:	e7b4      	b.n	810a01c <_malloc_r+0x4c>
 810a0b2:	4613      	mov	r3, r2
 810a0b4:	e7cc      	b.n	810a050 <_malloc_r+0x80>
 810a0b6:	230c      	movs	r3, #12
 810a0b8:	603b      	str	r3, [r7, #0]
 810a0ba:	4638      	mov	r0, r7
 810a0bc:	f000 f80e 	bl	810a0dc <__malloc_unlock>
 810a0c0:	e797      	b.n	8109ff2 <_malloc_r+0x22>
 810a0c2:	6025      	str	r5, [r4, #0]
 810a0c4:	e7dc      	b.n	810a080 <_malloc_r+0xb0>
 810a0c6:	605b      	str	r3, [r3, #4]
 810a0c8:	deff      	udf	#255	; 0xff
 810a0ca:	bf00      	nop
 810a0cc:	1001acc0 	.word	0x1001acc0

0810a0d0 <__malloc_lock>:
 810a0d0:	4801      	ldr	r0, [pc, #4]	; (810a0d8 <__malloc_lock+0x8>)
 810a0d2:	f001 b964 	b.w	810b39e <__retarget_lock_acquire_recursive>
 810a0d6:	bf00      	nop
 810a0d8:	1001ae08 	.word	0x1001ae08

0810a0dc <__malloc_unlock>:
 810a0dc:	4801      	ldr	r0, [pc, #4]	; (810a0e4 <__malloc_unlock+0x8>)
 810a0de:	f001 b95f 	b.w	810b3a0 <__retarget_lock_release_recursive>
 810a0e2:	bf00      	nop
 810a0e4:	1001ae08 	.word	0x1001ae08

0810a0e8 <_realloc_r>:
 810a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a0ec:	4680      	mov	r8, r0
 810a0ee:	4614      	mov	r4, r2
 810a0f0:	460e      	mov	r6, r1
 810a0f2:	b921      	cbnz	r1, 810a0fe <_realloc_r+0x16>
 810a0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a0f8:	4611      	mov	r1, r2
 810a0fa:	f7ff bf69 	b.w	8109fd0 <_malloc_r>
 810a0fe:	b92a      	cbnz	r2, 810a10c <_realloc_r+0x24>
 810a100:	f001 ffe0 	bl	810c0c4 <_free_r>
 810a104:	4625      	mov	r5, r4
 810a106:	4628      	mov	r0, r5
 810a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a10c:	f002 fcd3 	bl	810cab6 <_malloc_usable_size_r>
 810a110:	4284      	cmp	r4, r0
 810a112:	4607      	mov	r7, r0
 810a114:	d802      	bhi.n	810a11c <_realloc_r+0x34>
 810a116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810a11a:	d812      	bhi.n	810a142 <_realloc_r+0x5a>
 810a11c:	4621      	mov	r1, r4
 810a11e:	4640      	mov	r0, r8
 810a120:	f7ff ff56 	bl	8109fd0 <_malloc_r>
 810a124:	4605      	mov	r5, r0
 810a126:	2800      	cmp	r0, #0
 810a128:	d0ed      	beq.n	810a106 <_realloc_r+0x1e>
 810a12a:	42bc      	cmp	r4, r7
 810a12c:	4622      	mov	r2, r4
 810a12e:	4631      	mov	r1, r6
 810a130:	bf28      	it	cs
 810a132:	463a      	movcs	r2, r7
 810a134:	f001 f935 	bl	810b3a2 <memcpy>
 810a138:	4631      	mov	r1, r6
 810a13a:	4640      	mov	r0, r8
 810a13c:	f001 ffc2 	bl	810c0c4 <_free_r>
 810a140:	e7e1      	b.n	810a106 <_realloc_r+0x1e>
 810a142:	4635      	mov	r5, r6
 810a144:	e7df      	b.n	810a106 <_realloc_r+0x1e>

0810a146 <__cvt>:
 810a146:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a14a:	ec55 4b10 	vmov	r4, r5, d0
 810a14e:	2d00      	cmp	r5, #0
 810a150:	460e      	mov	r6, r1
 810a152:	4619      	mov	r1, r3
 810a154:	462b      	mov	r3, r5
 810a156:	bfbb      	ittet	lt
 810a158:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810a15c:	461d      	movlt	r5, r3
 810a15e:	2300      	movge	r3, #0
 810a160:	232d      	movlt	r3, #45	; 0x2d
 810a162:	700b      	strb	r3, [r1, #0]
 810a164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a166:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810a16a:	4691      	mov	r9, r2
 810a16c:	f023 0820 	bic.w	r8, r3, #32
 810a170:	bfbc      	itt	lt
 810a172:	4622      	movlt	r2, r4
 810a174:	4614      	movlt	r4, r2
 810a176:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a17a:	d005      	beq.n	810a188 <__cvt+0x42>
 810a17c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810a180:	d100      	bne.n	810a184 <__cvt+0x3e>
 810a182:	3601      	adds	r6, #1
 810a184:	2102      	movs	r1, #2
 810a186:	e000      	b.n	810a18a <__cvt+0x44>
 810a188:	2103      	movs	r1, #3
 810a18a:	ab03      	add	r3, sp, #12
 810a18c:	9301      	str	r3, [sp, #4]
 810a18e:	ab02      	add	r3, sp, #8
 810a190:	9300      	str	r3, [sp, #0]
 810a192:	ec45 4b10 	vmov	d0, r4, r5
 810a196:	4653      	mov	r3, sl
 810a198:	4632      	mov	r2, r6
 810a19a:	f001 f9a1 	bl	810b4e0 <_dtoa_r>
 810a19e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810a1a2:	4607      	mov	r7, r0
 810a1a4:	d102      	bne.n	810a1ac <__cvt+0x66>
 810a1a6:	f019 0f01 	tst.w	r9, #1
 810a1aa:	d022      	beq.n	810a1f2 <__cvt+0xac>
 810a1ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810a1b0:	eb07 0906 	add.w	r9, r7, r6
 810a1b4:	d110      	bne.n	810a1d8 <__cvt+0x92>
 810a1b6:	783b      	ldrb	r3, [r7, #0]
 810a1b8:	2b30      	cmp	r3, #48	; 0x30
 810a1ba:	d10a      	bne.n	810a1d2 <__cvt+0x8c>
 810a1bc:	2200      	movs	r2, #0
 810a1be:	2300      	movs	r3, #0
 810a1c0:	4620      	mov	r0, r4
 810a1c2:	4629      	mov	r1, r5
 810a1c4:	f7f6 fd08 	bl	8100bd8 <__aeabi_dcmpeq>
 810a1c8:	b918      	cbnz	r0, 810a1d2 <__cvt+0x8c>
 810a1ca:	f1c6 0601 	rsb	r6, r6, #1
 810a1ce:	f8ca 6000 	str.w	r6, [sl]
 810a1d2:	f8da 3000 	ldr.w	r3, [sl]
 810a1d6:	4499      	add	r9, r3
 810a1d8:	2200      	movs	r2, #0
 810a1da:	2300      	movs	r3, #0
 810a1dc:	4620      	mov	r0, r4
 810a1de:	4629      	mov	r1, r5
 810a1e0:	f7f6 fcfa 	bl	8100bd8 <__aeabi_dcmpeq>
 810a1e4:	b108      	cbz	r0, 810a1ea <__cvt+0xa4>
 810a1e6:	f8cd 900c 	str.w	r9, [sp, #12]
 810a1ea:	2230      	movs	r2, #48	; 0x30
 810a1ec:	9b03      	ldr	r3, [sp, #12]
 810a1ee:	454b      	cmp	r3, r9
 810a1f0:	d307      	bcc.n	810a202 <__cvt+0xbc>
 810a1f2:	9b03      	ldr	r3, [sp, #12]
 810a1f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a1f6:	1bdb      	subs	r3, r3, r7
 810a1f8:	4638      	mov	r0, r7
 810a1fa:	6013      	str	r3, [r2, #0]
 810a1fc:	b004      	add	sp, #16
 810a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a202:	1c59      	adds	r1, r3, #1
 810a204:	9103      	str	r1, [sp, #12]
 810a206:	701a      	strb	r2, [r3, #0]
 810a208:	e7f0      	b.n	810a1ec <__cvt+0xa6>

0810a20a <__exponent>:
 810a20a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810a20c:	4603      	mov	r3, r0
 810a20e:	2900      	cmp	r1, #0
 810a210:	bfb8      	it	lt
 810a212:	4249      	neglt	r1, r1
 810a214:	f803 2b02 	strb.w	r2, [r3], #2
 810a218:	bfb4      	ite	lt
 810a21a:	222d      	movlt	r2, #45	; 0x2d
 810a21c:	222b      	movge	r2, #43	; 0x2b
 810a21e:	2909      	cmp	r1, #9
 810a220:	7042      	strb	r2, [r0, #1]
 810a222:	dd2a      	ble.n	810a27a <__exponent+0x70>
 810a224:	f10d 0207 	add.w	r2, sp, #7
 810a228:	4617      	mov	r7, r2
 810a22a:	260a      	movs	r6, #10
 810a22c:	4694      	mov	ip, r2
 810a22e:	fb91 f5f6 	sdiv	r5, r1, r6
 810a232:	fb06 1415 	mls	r4, r6, r5, r1
 810a236:	3430      	adds	r4, #48	; 0x30
 810a238:	f80c 4c01 	strb.w	r4, [ip, #-1]
 810a23c:	460c      	mov	r4, r1
 810a23e:	2c63      	cmp	r4, #99	; 0x63
 810a240:	f102 32ff 	add.w	r2, r2, #4294967295
 810a244:	4629      	mov	r1, r5
 810a246:	dcf1      	bgt.n	810a22c <__exponent+0x22>
 810a248:	3130      	adds	r1, #48	; 0x30
 810a24a:	f1ac 0402 	sub.w	r4, ip, #2
 810a24e:	f802 1c01 	strb.w	r1, [r2, #-1]
 810a252:	1c41      	adds	r1, r0, #1
 810a254:	4622      	mov	r2, r4
 810a256:	42ba      	cmp	r2, r7
 810a258:	d30a      	bcc.n	810a270 <__exponent+0x66>
 810a25a:	f10d 0209 	add.w	r2, sp, #9
 810a25e:	eba2 020c 	sub.w	r2, r2, ip
 810a262:	42bc      	cmp	r4, r7
 810a264:	bf88      	it	hi
 810a266:	2200      	movhi	r2, #0
 810a268:	4413      	add	r3, r2
 810a26a:	1a18      	subs	r0, r3, r0
 810a26c:	b003      	add	sp, #12
 810a26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a270:	f812 5b01 	ldrb.w	r5, [r2], #1
 810a274:	f801 5f01 	strb.w	r5, [r1, #1]!
 810a278:	e7ed      	b.n	810a256 <__exponent+0x4c>
 810a27a:	2330      	movs	r3, #48	; 0x30
 810a27c:	3130      	adds	r1, #48	; 0x30
 810a27e:	7083      	strb	r3, [r0, #2]
 810a280:	70c1      	strb	r1, [r0, #3]
 810a282:	1d03      	adds	r3, r0, #4
 810a284:	e7f1      	b.n	810a26a <__exponent+0x60>
	...

0810a288 <_printf_float>:
 810a288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a28c:	ed2d 8b02 	vpush	{d8}
 810a290:	b08d      	sub	sp, #52	; 0x34
 810a292:	460c      	mov	r4, r1
 810a294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810a298:	4616      	mov	r6, r2
 810a29a:	461f      	mov	r7, r3
 810a29c:	4605      	mov	r5, r0
 810a29e:	f000 fff9 	bl	810b294 <_localeconv_r>
 810a2a2:	f8d0 a000 	ldr.w	sl, [r0]
 810a2a6:	4650      	mov	r0, sl
 810a2a8:	f7f6 f86a 	bl	8100380 <strlen>
 810a2ac:	2300      	movs	r3, #0
 810a2ae:	930a      	str	r3, [sp, #40]	; 0x28
 810a2b0:	6823      	ldr	r3, [r4, #0]
 810a2b2:	9305      	str	r3, [sp, #20]
 810a2b4:	f8d8 3000 	ldr.w	r3, [r8]
 810a2b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 810a2bc:	3307      	adds	r3, #7
 810a2be:	f023 0307 	bic.w	r3, r3, #7
 810a2c2:	f103 0208 	add.w	r2, r3, #8
 810a2c6:	f8c8 2000 	str.w	r2, [r8]
 810a2ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a2ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810a2d2:	9307      	str	r3, [sp, #28]
 810a2d4:	f8cd 8018 	str.w	r8, [sp, #24]
 810a2d8:	ee08 0a10 	vmov	s16, r0
 810a2dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 810a2e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a2e4:	4b9e      	ldr	r3, [pc, #632]	; (810a560 <_printf_float+0x2d8>)
 810a2e6:	f04f 32ff 	mov.w	r2, #4294967295
 810a2ea:	f7f6 fca7 	bl	8100c3c <__aeabi_dcmpun>
 810a2ee:	bb88      	cbnz	r0, 810a354 <_printf_float+0xcc>
 810a2f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a2f4:	4b9a      	ldr	r3, [pc, #616]	; (810a560 <_printf_float+0x2d8>)
 810a2f6:	f04f 32ff 	mov.w	r2, #4294967295
 810a2fa:	f7f6 fc81 	bl	8100c00 <__aeabi_dcmple>
 810a2fe:	bb48      	cbnz	r0, 810a354 <_printf_float+0xcc>
 810a300:	2200      	movs	r2, #0
 810a302:	2300      	movs	r3, #0
 810a304:	4640      	mov	r0, r8
 810a306:	4649      	mov	r1, r9
 810a308:	f7f6 fc70 	bl	8100bec <__aeabi_dcmplt>
 810a30c:	b110      	cbz	r0, 810a314 <_printf_float+0x8c>
 810a30e:	232d      	movs	r3, #45	; 0x2d
 810a310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a314:	4a93      	ldr	r2, [pc, #588]	; (810a564 <_printf_float+0x2dc>)
 810a316:	4b94      	ldr	r3, [pc, #592]	; (810a568 <_printf_float+0x2e0>)
 810a318:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810a31c:	bf94      	ite	ls
 810a31e:	4690      	movls	r8, r2
 810a320:	4698      	movhi	r8, r3
 810a322:	2303      	movs	r3, #3
 810a324:	6123      	str	r3, [r4, #16]
 810a326:	9b05      	ldr	r3, [sp, #20]
 810a328:	f023 0304 	bic.w	r3, r3, #4
 810a32c:	6023      	str	r3, [r4, #0]
 810a32e:	f04f 0900 	mov.w	r9, #0
 810a332:	9700      	str	r7, [sp, #0]
 810a334:	4633      	mov	r3, r6
 810a336:	aa0b      	add	r2, sp, #44	; 0x2c
 810a338:	4621      	mov	r1, r4
 810a33a:	4628      	mov	r0, r5
 810a33c:	f000 f9da 	bl	810a6f4 <_printf_common>
 810a340:	3001      	adds	r0, #1
 810a342:	f040 8090 	bne.w	810a466 <_printf_float+0x1de>
 810a346:	f04f 30ff 	mov.w	r0, #4294967295
 810a34a:	b00d      	add	sp, #52	; 0x34
 810a34c:	ecbd 8b02 	vpop	{d8}
 810a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a354:	4642      	mov	r2, r8
 810a356:	464b      	mov	r3, r9
 810a358:	4640      	mov	r0, r8
 810a35a:	4649      	mov	r1, r9
 810a35c:	f7f6 fc6e 	bl	8100c3c <__aeabi_dcmpun>
 810a360:	b140      	cbz	r0, 810a374 <_printf_float+0xec>
 810a362:	464b      	mov	r3, r9
 810a364:	2b00      	cmp	r3, #0
 810a366:	bfbc      	itt	lt
 810a368:	232d      	movlt	r3, #45	; 0x2d
 810a36a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810a36e:	4a7f      	ldr	r2, [pc, #508]	; (810a56c <_printf_float+0x2e4>)
 810a370:	4b7f      	ldr	r3, [pc, #508]	; (810a570 <_printf_float+0x2e8>)
 810a372:	e7d1      	b.n	810a318 <_printf_float+0x90>
 810a374:	6863      	ldr	r3, [r4, #4]
 810a376:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810a37a:	9206      	str	r2, [sp, #24]
 810a37c:	1c5a      	adds	r2, r3, #1
 810a37e:	d13f      	bne.n	810a400 <_printf_float+0x178>
 810a380:	2306      	movs	r3, #6
 810a382:	6063      	str	r3, [r4, #4]
 810a384:	9b05      	ldr	r3, [sp, #20]
 810a386:	6861      	ldr	r1, [r4, #4]
 810a388:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 810a38c:	2300      	movs	r3, #0
 810a38e:	9303      	str	r3, [sp, #12]
 810a390:	ab0a      	add	r3, sp, #40	; 0x28
 810a392:	e9cd b301 	strd	fp, r3, [sp, #4]
 810a396:	ab09      	add	r3, sp, #36	; 0x24
 810a398:	ec49 8b10 	vmov	d0, r8, r9
 810a39c:	9300      	str	r3, [sp, #0]
 810a39e:	6022      	str	r2, [r4, #0]
 810a3a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810a3a4:	4628      	mov	r0, r5
 810a3a6:	f7ff fece 	bl	810a146 <__cvt>
 810a3aa:	9b06      	ldr	r3, [sp, #24]
 810a3ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a3ae:	2b47      	cmp	r3, #71	; 0x47
 810a3b0:	4680      	mov	r8, r0
 810a3b2:	d108      	bne.n	810a3c6 <_printf_float+0x13e>
 810a3b4:	1cc8      	adds	r0, r1, #3
 810a3b6:	db02      	blt.n	810a3be <_printf_float+0x136>
 810a3b8:	6863      	ldr	r3, [r4, #4]
 810a3ba:	4299      	cmp	r1, r3
 810a3bc:	dd41      	ble.n	810a442 <_printf_float+0x1ba>
 810a3be:	f1ab 0302 	sub.w	r3, fp, #2
 810a3c2:	fa5f fb83 	uxtb.w	fp, r3
 810a3c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810a3ca:	d820      	bhi.n	810a40e <_printf_float+0x186>
 810a3cc:	3901      	subs	r1, #1
 810a3ce:	465a      	mov	r2, fp
 810a3d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810a3d4:	9109      	str	r1, [sp, #36]	; 0x24
 810a3d6:	f7ff ff18 	bl	810a20a <__exponent>
 810a3da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a3dc:	1813      	adds	r3, r2, r0
 810a3de:	2a01      	cmp	r2, #1
 810a3e0:	4681      	mov	r9, r0
 810a3e2:	6123      	str	r3, [r4, #16]
 810a3e4:	dc02      	bgt.n	810a3ec <_printf_float+0x164>
 810a3e6:	6822      	ldr	r2, [r4, #0]
 810a3e8:	07d2      	lsls	r2, r2, #31
 810a3ea:	d501      	bpl.n	810a3f0 <_printf_float+0x168>
 810a3ec:	3301      	adds	r3, #1
 810a3ee:	6123      	str	r3, [r4, #16]
 810a3f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810a3f4:	2b00      	cmp	r3, #0
 810a3f6:	d09c      	beq.n	810a332 <_printf_float+0xaa>
 810a3f8:	232d      	movs	r3, #45	; 0x2d
 810a3fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a3fe:	e798      	b.n	810a332 <_printf_float+0xaa>
 810a400:	9a06      	ldr	r2, [sp, #24]
 810a402:	2a47      	cmp	r2, #71	; 0x47
 810a404:	d1be      	bne.n	810a384 <_printf_float+0xfc>
 810a406:	2b00      	cmp	r3, #0
 810a408:	d1bc      	bne.n	810a384 <_printf_float+0xfc>
 810a40a:	2301      	movs	r3, #1
 810a40c:	e7b9      	b.n	810a382 <_printf_float+0xfa>
 810a40e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810a412:	d118      	bne.n	810a446 <_printf_float+0x1be>
 810a414:	2900      	cmp	r1, #0
 810a416:	6863      	ldr	r3, [r4, #4]
 810a418:	dd0b      	ble.n	810a432 <_printf_float+0x1aa>
 810a41a:	6121      	str	r1, [r4, #16]
 810a41c:	b913      	cbnz	r3, 810a424 <_printf_float+0x19c>
 810a41e:	6822      	ldr	r2, [r4, #0]
 810a420:	07d0      	lsls	r0, r2, #31
 810a422:	d502      	bpl.n	810a42a <_printf_float+0x1a2>
 810a424:	3301      	adds	r3, #1
 810a426:	440b      	add	r3, r1
 810a428:	6123      	str	r3, [r4, #16]
 810a42a:	65a1      	str	r1, [r4, #88]	; 0x58
 810a42c:	f04f 0900 	mov.w	r9, #0
 810a430:	e7de      	b.n	810a3f0 <_printf_float+0x168>
 810a432:	b913      	cbnz	r3, 810a43a <_printf_float+0x1b2>
 810a434:	6822      	ldr	r2, [r4, #0]
 810a436:	07d2      	lsls	r2, r2, #31
 810a438:	d501      	bpl.n	810a43e <_printf_float+0x1b6>
 810a43a:	3302      	adds	r3, #2
 810a43c:	e7f4      	b.n	810a428 <_printf_float+0x1a0>
 810a43e:	2301      	movs	r3, #1
 810a440:	e7f2      	b.n	810a428 <_printf_float+0x1a0>
 810a442:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810a446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a448:	4299      	cmp	r1, r3
 810a44a:	db05      	blt.n	810a458 <_printf_float+0x1d0>
 810a44c:	6823      	ldr	r3, [r4, #0]
 810a44e:	6121      	str	r1, [r4, #16]
 810a450:	07d8      	lsls	r0, r3, #31
 810a452:	d5ea      	bpl.n	810a42a <_printf_float+0x1a2>
 810a454:	1c4b      	adds	r3, r1, #1
 810a456:	e7e7      	b.n	810a428 <_printf_float+0x1a0>
 810a458:	2900      	cmp	r1, #0
 810a45a:	bfd4      	ite	le
 810a45c:	f1c1 0202 	rsble	r2, r1, #2
 810a460:	2201      	movgt	r2, #1
 810a462:	4413      	add	r3, r2
 810a464:	e7e0      	b.n	810a428 <_printf_float+0x1a0>
 810a466:	6823      	ldr	r3, [r4, #0]
 810a468:	055a      	lsls	r2, r3, #21
 810a46a:	d407      	bmi.n	810a47c <_printf_float+0x1f4>
 810a46c:	6923      	ldr	r3, [r4, #16]
 810a46e:	4642      	mov	r2, r8
 810a470:	4631      	mov	r1, r6
 810a472:	4628      	mov	r0, r5
 810a474:	47b8      	blx	r7
 810a476:	3001      	adds	r0, #1
 810a478:	d12c      	bne.n	810a4d4 <_printf_float+0x24c>
 810a47a:	e764      	b.n	810a346 <_printf_float+0xbe>
 810a47c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810a480:	f240 80e0 	bls.w	810a644 <_printf_float+0x3bc>
 810a484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810a488:	2200      	movs	r2, #0
 810a48a:	2300      	movs	r3, #0
 810a48c:	f7f6 fba4 	bl	8100bd8 <__aeabi_dcmpeq>
 810a490:	2800      	cmp	r0, #0
 810a492:	d034      	beq.n	810a4fe <_printf_float+0x276>
 810a494:	4a37      	ldr	r2, [pc, #220]	; (810a574 <_printf_float+0x2ec>)
 810a496:	2301      	movs	r3, #1
 810a498:	4631      	mov	r1, r6
 810a49a:	4628      	mov	r0, r5
 810a49c:	47b8      	blx	r7
 810a49e:	3001      	adds	r0, #1
 810a4a0:	f43f af51 	beq.w	810a346 <_printf_float+0xbe>
 810a4a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a4a8:	429a      	cmp	r2, r3
 810a4aa:	db02      	blt.n	810a4b2 <_printf_float+0x22a>
 810a4ac:	6823      	ldr	r3, [r4, #0]
 810a4ae:	07d8      	lsls	r0, r3, #31
 810a4b0:	d510      	bpl.n	810a4d4 <_printf_float+0x24c>
 810a4b2:	ee18 3a10 	vmov	r3, s16
 810a4b6:	4652      	mov	r2, sl
 810a4b8:	4631      	mov	r1, r6
 810a4ba:	4628      	mov	r0, r5
 810a4bc:	47b8      	blx	r7
 810a4be:	3001      	adds	r0, #1
 810a4c0:	f43f af41 	beq.w	810a346 <_printf_float+0xbe>
 810a4c4:	f04f 0800 	mov.w	r8, #0
 810a4c8:	f104 091a 	add.w	r9, r4, #26
 810a4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a4ce:	3b01      	subs	r3, #1
 810a4d0:	4543      	cmp	r3, r8
 810a4d2:	dc09      	bgt.n	810a4e8 <_printf_float+0x260>
 810a4d4:	6823      	ldr	r3, [r4, #0]
 810a4d6:	079b      	lsls	r3, r3, #30
 810a4d8:	f100 8107 	bmi.w	810a6ea <_printf_float+0x462>
 810a4dc:	68e0      	ldr	r0, [r4, #12]
 810a4de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a4e0:	4298      	cmp	r0, r3
 810a4e2:	bfb8      	it	lt
 810a4e4:	4618      	movlt	r0, r3
 810a4e6:	e730      	b.n	810a34a <_printf_float+0xc2>
 810a4e8:	2301      	movs	r3, #1
 810a4ea:	464a      	mov	r2, r9
 810a4ec:	4631      	mov	r1, r6
 810a4ee:	4628      	mov	r0, r5
 810a4f0:	47b8      	blx	r7
 810a4f2:	3001      	adds	r0, #1
 810a4f4:	f43f af27 	beq.w	810a346 <_printf_float+0xbe>
 810a4f8:	f108 0801 	add.w	r8, r8, #1
 810a4fc:	e7e6      	b.n	810a4cc <_printf_float+0x244>
 810a4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a500:	2b00      	cmp	r3, #0
 810a502:	dc39      	bgt.n	810a578 <_printf_float+0x2f0>
 810a504:	4a1b      	ldr	r2, [pc, #108]	; (810a574 <_printf_float+0x2ec>)
 810a506:	2301      	movs	r3, #1
 810a508:	4631      	mov	r1, r6
 810a50a:	4628      	mov	r0, r5
 810a50c:	47b8      	blx	r7
 810a50e:	3001      	adds	r0, #1
 810a510:	f43f af19 	beq.w	810a346 <_printf_float+0xbe>
 810a514:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810a518:	4313      	orrs	r3, r2
 810a51a:	d102      	bne.n	810a522 <_printf_float+0x29a>
 810a51c:	6823      	ldr	r3, [r4, #0]
 810a51e:	07d9      	lsls	r1, r3, #31
 810a520:	d5d8      	bpl.n	810a4d4 <_printf_float+0x24c>
 810a522:	ee18 3a10 	vmov	r3, s16
 810a526:	4652      	mov	r2, sl
 810a528:	4631      	mov	r1, r6
 810a52a:	4628      	mov	r0, r5
 810a52c:	47b8      	blx	r7
 810a52e:	3001      	adds	r0, #1
 810a530:	f43f af09 	beq.w	810a346 <_printf_float+0xbe>
 810a534:	f04f 0900 	mov.w	r9, #0
 810a538:	f104 0a1a 	add.w	sl, r4, #26
 810a53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a53e:	425b      	negs	r3, r3
 810a540:	454b      	cmp	r3, r9
 810a542:	dc01      	bgt.n	810a548 <_printf_float+0x2c0>
 810a544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a546:	e792      	b.n	810a46e <_printf_float+0x1e6>
 810a548:	2301      	movs	r3, #1
 810a54a:	4652      	mov	r2, sl
 810a54c:	4631      	mov	r1, r6
 810a54e:	4628      	mov	r0, r5
 810a550:	47b8      	blx	r7
 810a552:	3001      	adds	r0, #1
 810a554:	f43f aef7 	beq.w	810a346 <_printf_float+0xbe>
 810a558:	f109 0901 	add.w	r9, r9, #1
 810a55c:	e7ee      	b.n	810a53c <_printf_float+0x2b4>
 810a55e:	bf00      	nop
 810a560:	7fefffff 	.word	0x7fefffff
 810a564:	081e6778 	.word	0x081e6778
 810a568:	081e677c 	.word	0x081e677c
 810a56c:	081e6780 	.word	0x081e6780
 810a570:	081e6784 	.word	0x081e6784
 810a574:	081e6788 	.word	0x081e6788
 810a578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a57a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810a57c:	429a      	cmp	r2, r3
 810a57e:	bfa8      	it	ge
 810a580:	461a      	movge	r2, r3
 810a582:	2a00      	cmp	r2, #0
 810a584:	4691      	mov	r9, r2
 810a586:	dc37      	bgt.n	810a5f8 <_printf_float+0x370>
 810a588:	f04f 0b00 	mov.w	fp, #0
 810a58c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a590:	f104 021a 	add.w	r2, r4, #26
 810a594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810a596:	9305      	str	r3, [sp, #20]
 810a598:	eba3 0309 	sub.w	r3, r3, r9
 810a59c:	455b      	cmp	r3, fp
 810a59e:	dc33      	bgt.n	810a608 <_printf_float+0x380>
 810a5a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a5a4:	429a      	cmp	r2, r3
 810a5a6:	db3b      	blt.n	810a620 <_printf_float+0x398>
 810a5a8:	6823      	ldr	r3, [r4, #0]
 810a5aa:	07da      	lsls	r2, r3, #31
 810a5ac:	d438      	bmi.n	810a620 <_printf_float+0x398>
 810a5ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810a5b2:	eba2 0903 	sub.w	r9, r2, r3
 810a5b6:	9b05      	ldr	r3, [sp, #20]
 810a5b8:	1ad2      	subs	r2, r2, r3
 810a5ba:	4591      	cmp	r9, r2
 810a5bc:	bfa8      	it	ge
 810a5be:	4691      	movge	r9, r2
 810a5c0:	f1b9 0f00 	cmp.w	r9, #0
 810a5c4:	dc35      	bgt.n	810a632 <_printf_float+0x3aa>
 810a5c6:	f04f 0800 	mov.w	r8, #0
 810a5ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a5ce:	f104 0a1a 	add.w	sl, r4, #26
 810a5d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a5d6:	1a9b      	subs	r3, r3, r2
 810a5d8:	eba3 0309 	sub.w	r3, r3, r9
 810a5dc:	4543      	cmp	r3, r8
 810a5de:	f77f af79 	ble.w	810a4d4 <_printf_float+0x24c>
 810a5e2:	2301      	movs	r3, #1
 810a5e4:	4652      	mov	r2, sl
 810a5e6:	4631      	mov	r1, r6
 810a5e8:	4628      	mov	r0, r5
 810a5ea:	47b8      	blx	r7
 810a5ec:	3001      	adds	r0, #1
 810a5ee:	f43f aeaa 	beq.w	810a346 <_printf_float+0xbe>
 810a5f2:	f108 0801 	add.w	r8, r8, #1
 810a5f6:	e7ec      	b.n	810a5d2 <_printf_float+0x34a>
 810a5f8:	4613      	mov	r3, r2
 810a5fa:	4631      	mov	r1, r6
 810a5fc:	4642      	mov	r2, r8
 810a5fe:	4628      	mov	r0, r5
 810a600:	47b8      	blx	r7
 810a602:	3001      	adds	r0, #1
 810a604:	d1c0      	bne.n	810a588 <_printf_float+0x300>
 810a606:	e69e      	b.n	810a346 <_printf_float+0xbe>
 810a608:	2301      	movs	r3, #1
 810a60a:	4631      	mov	r1, r6
 810a60c:	4628      	mov	r0, r5
 810a60e:	9205      	str	r2, [sp, #20]
 810a610:	47b8      	blx	r7
 810a612:	3001      	adds	r0, #1
 810a614:	f43f ae97 	beq.w	810a346 <_printf_float+0xbe>
 810a618:	9a05      	ldr	r2, [sp, #20]
 810a61a:	f10b 0b01 	add.w	fp, fp, #1
 810a61e:	e7b9      	b.n	810a594 <_printf_float+0x30c>
 810a620:	ee18 3a10 	vmov	r3, s16
 810a624:	4652      	mov	r2, sl
 810a626:	4631      	mov	r1, r6
 810a628:	4628      	mov	r0, r5
 810a62a:	47b8      	blx	r7
 810a62c:	3001      	adds	r0, #1
 810a62e:	d1be      	bne.n	810a5ae <_printf_float+0x326>
 810a630:	e689      	b.n	810a346 <_printf_float+0xbe>
 810a632:	9a05      	ldr	r2, [sp, #20]
 810a634:	464b      	mov	r3, r9
 810a636:	4442      	add	r2, r8
 810a638:	4631      	mov	r1, r6
 810a63a:	4628      	mov	r0, r5
 810a63c:	47b8      	blx	r7
 810a63e:	3001      	adds	r0, #1
 810a640:	d1c1      	bne.n	810a5c6 <_printf_float+0x33e>
 810a642:	e680      	b.n	810a346 <_printf_float+0xbe>
 810a644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a646:	2a01      	cmp	r2, #1
 810a648:	dc01      	bgt.n	810a64e <_printf_float+0x3c6>
 810a64a:	07db      	lsls	r3, r3, #31
 810a64c:	d53a      	bpl.n	810a6c4 <_printf_float+0x43c>
 810a64e:	2301      	movs	r3, #1
 810a650:	4642      	mov	r2, r8
 810a652:	4631      	mov	r1, r6
 810a654:	4628      	mov	r0, r5
 810a656:	47b8      	blx	r7
 810a658:	3001      	adds	r0, #1
 810a65a:	f43f ae74 	beq.w	810a346 <_printf_float+0xbe>
 810a65e:	ee18 3a10 	vmov	r3, s16
 810a662:	4652      	mov	r2, sl
 810a664:	4631      	mov	r1, r6
 810a666:	4628      	mov	r0, r5
 810a668:	47b8      	blx	r7
 810a66a:	3001      	adds	r0, #1
 810a66c:	f43f ae6b 	beq.w	810a346 <_printf_float+0xbe>
 810a670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810a674:	2200      	movs	r2, #0
 810a676:	2300      	movs	r3, #0
 810a678:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 810a67c:	f7f6 faac 	bl	8100bd8 <__aeabi_dcmpeq>
 810a680:	b9d8      	cbnz	r0, 810a6ba <_printf_float+0x432>
 810a682:	f10a 33ff 	add.w	r3, sl, #4294967295
 810a686:	f108 0201 	add.w	r2, r8, #1
 810a68a:	4631      	mov	r1, r6
 810a68c:	4628      	mov	r0, r5
 810a68e:	47b8      	blx	r7
 810a690:	3001      	adds	r0, #1
 810a692:	d10e      	bne.n	810a6b2 <_printf_float+0x42a>
 810a694:	e657      	b.n	810a346 <_printf_float+0xbe>
 810a696:	2301      	movs	r3, #1
 810a698:	4652      	mov	r2, sl
 810a69a:	4631      	mov	r1, r6
 810a69c:	4628      	mov	r0, r5
 810a69e:	47b8      	blx	r7
 810a6a0:	3001      	adds	r0, #1
 810a6a2:	f43f ae50 	beq.w	810a346 <_printf_float+0xbe>
 810a6a6:	f108 0801 	add.w	r8, r8, #1
 810a6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a6ac:	3b01      	subs	r3, #1
 810a6ae:	4543      	cmp	r3, r8
 810a6b0:	dcf1      	bgt.n	810a696 <_printf_float+0x40e>
 810a6b2:	464b      	mov	r3, r9
 810a6b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810a6b8:	e6da      	b.n	810a470 <_printf_float+0x1e8>
 810a6ba:	f04f 0800 	mov.w	r8, #0
 810a6be:	f104 0a1a 	add.w	sl, r4, #26
 810a6c2:	e7f2      	b.n	810a6aa <_printf_float+0x422>
 810a6c4:	2301      	movs	r3, #1
 810a6c6:	4642      	mov	r2, r8
 810a6c8:	e7df      	b.n	810a68a <_printf_float+0x402>
 810a6ca:	2301      	movs	r3, #1
 810a6cc:	464a      	mov	r2, r9
 810a6ce:	4631      	mov	r1, r6
 810a6d0:	4628      	mov	r0, r5
 810a6d2:	47b8      	blx	r7
 810a6d4:	3001      	adds	r0, #1
 810a6d6:	f43f ae36 	beq.w	810a346 <_printf_float+0xbe>
 810a6da:	f108 0801 	add.w	r8, r8, #1
 810a6de:	68e3      	ldr	r3, [r4, #12]
 810a6e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810a6e2:	1a5b      	subs	r3, r3, r1
 810a6e4:	4543      	cmp	r3, r8
 810a6e6:	dcf0      	bgt.n	810a6ca <_printf_float+0x442>
 810a6e8:	e6f8      	b.n	810a4dc <_printf_float+0x254>
 810a6ea:	f04f 0800 	mov.w	r8, #0
 810a6ee:	f104 0919 	add.w	r9, r4, #25
 810a6f2:	e7f4      	b.n	810a6de <_printf_float+0x456>

0810a6f4 <_printf_common>:
 810a6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a6f8:	4616      	mov	r6, r2
 810a6fa:	4699      	mov	r9, r3
 810a6fc:	688a      	ldr	r2, [r1, #8]
 810a6fe:	690b      	ldr	r3, [r1, #16]
 810a700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a704:	4293      	cmp	r3, r2
 810a706:	bfb8      	it	lt
 810a708:	4613      	movlt	r3, r2
 810a70a:	6033      	str	r3, [r6, #0]
 810a70c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a710:	4607      	mov	r7, r0
 810a712:	460c      	mov	r4, r1
 810a714:	b10a      	cbz	r2, 810a71a <_printf_common+0x26>
 810a716:	3301      	adds	r3, #1
 810a718:	6033      	str	r3, [r6, #0]
 810a71a:	6823      	ldr	r3, [r4, #0]
 810a71c:	0699      	lsls	r1, r3, #26
 810a71e:	bf42      	ittt	mi
 810a720:	6833      	ldrmi	r3, [r6, #0]
 810a722:	3302      	addmi	r3, #2
 810a724:	6033      	strmi	r3, [r6, #0]
 810a726:	6825      	ldr	r5, [r4, #0]
 810a728:	f015 0506 	ands.w	r5, r5, #6
 810a72c:	d106      	bne.n	810a73c <_printf_common+0x48>
 810a72e:	f104 0a19 	add.w	sl, r4, #25
 810a732:	68e3      	ldr	r3, [r4, #12]
 810a734:	6832      	ldr	r2, [r6, #0]
 810a736:	1a9b      	subs	r3, r3, r2
 810a738:	42ab      	cmp	r3, r5
 810a73a:	dc26      	bgt.n	810a78a <_printf_common+0x96>
 810a73c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810a740:	1e13      	subs	r3, r2, #0
 810a742:	6822      	ldr	r2, [r4, #0]
 810a744:	bf18      	it	ne
 810a746:	2301      	movne	r3, #1
 810a748:	0692      	lsls	r2, r2, #26
 810a74a:	d42b      	bmi.n	810a7a4 <_printf_common+0xb0>
 810a74c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a750:	4649      	mov	r1, r9
 810a752:	4638      	mov	r0, r7
 810a754:	47c0      	blx	r8
 810a756:	3001      	adds	r0, #1
 810a758:	d01e      	beq.n	810a798 <_printf_common+0xa4>
 810a75a:	6823      	ldr	r3, [r4, #0]
 810a75c:	6922      	ldr	r2, [r4, #16]
 810a75e:	f003 0306 	and.w	r3, r3, #6
 810a762:	2b04      	cmp	r3, #4
 810a764:	bf02      	ittt	eq
 810a766:	68e5      	ldreq	r5, [r4, #12]
 810a768:	6833      	ldreq	r3, [r6, #0]
 810a76a:	1aed      	subeq	r5, r5, r3
 810a76c:	68a3      	ldr	r3, [r4, #8]
 810a76e:	bf0c      	ite	eq
 810a770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a774:	2500      	movne	r5, #0
 810a776:	4293      	cmp	r3, r2
 810a778:	bfc4      	itt	gt
 810a77a:	1a9b      	subgt	r3, r3, r2
 810a77c:	18ed      	addgt	r5, r5, r3
 810a77e:	2600      	movs	r6, #0
 810a780:	341a      	adds	r4, #26
 810a782:	42b5      	cmp	r5, r6
 810a784:	d11a      	bne.n	810a7bc <_printf_common+0xc8>
 810a786:	2000      	movs	r0, #0
 810a788:	e008      	b.n	810a79c <_printf_common+0xa8>
 810a78a:	2301      	movs	r3, #1
 810a78c:	4652      	mov	r2, sl
 810a78e:	4649      	mov	r1, r9
 810a790:	4638      	mov	r0, r7
 810a792:	47c0      	blx	r8
 810a794:	3001      	adds	r0, #1
 810a796:	d103      	bne.n	810a7a0 <_printf_common+0xac>
 810a798:	f04f 30ff 	mov.w	r0, #4294967295
 810a79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a7a0:	3501      	adds	r5, #1
 810a7a2:	e7c6      	b.n	810a732 <_printf_common+0x3e>
 810a7a4:	18e1      	adds	r1, r4, r3
 810a7a6:	1c5a      	adds	r2, r3, #1
 810a7a8:	2030      	movs	r0, #48	; 0x30
 810a7aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a7ae:	4422      	add	r2, r4
 810a7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a7b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a7b8:	3302      	adds	r3, #2
 810a7ba:	e7c7      	b.n	810a74c <_printf_common+0x58>
 810a7bc:	2301      	movs	r3, #1
 810a7be:	4622      	mov	r2, r4
 810a7c0:	4649      	mov	r1, r9
 810a7c2:	4638      	mov	r0, r7
 810a7c4:	47c0      	blx	r8
 810a7c6:	3001      	adds	r0, #1
 810a7c8:	d0e6      	beq.n	810a798 <_printf_common+0xa4>
 810a7ca:	3601      	adds	r6, #1
 810a7cc:	e7d9      	b.n	810a782 <_printf_common+0x8e>
	...

0810a7d0 <_printf_i>:
 810a7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a7d4:	7e0f      	ldrb	r7, [r1, #24]
 810a7d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a7d8:	2f78      	cmp	r7, #120	; 0x78
 810a7da:	4691      	mov	r9, r2
 810a7dc:	4680      	mov	r8, r0
 810a7de:	460c      	mov	r4, r1
 810a7e0:	469a      	mov	sl, r3
 810a7e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810a7e6:	d807      	bhi.n	810a7f8 <_printf_i+0x28>
 810a7e8:	2f62      	cmp	r7, #98	; 0x62
 810a7ea:	d80a      	bhi.n	810a802 <_printf_i+0x32>
 810a7ec:	2f00      	cmp	r7, #0
 810a7ee:	f000 80d4 	beq.w	810a99a <_printf_i+0x1ca>
 810a7f2:	2f58      	cmp	r7, #88	; 0x58
 810a7f4:	f000 80c0 	beq.w	810a978 <_printf_i+0x1a8>
 810a7f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a7fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810a800:	e03a      	b.n	810a878 <_printf_i+0xa8>
 810a802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810a806:	2b15      	cmp	r3, #21
 810a808:	d8f6      	bhi.n	810a7f8 <_printf_i+0x28>
 810a80a:	a101      	add	r1, pc, #4	; (adr r1, 810a810 <_printf_i+0x40>)
 810a80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a810:	0810a869 	.word	0x0810a869
 810a814:	0810a87d 	.word	0x0810a87d
 810a818:	0810a7f9 	.word	0x0810a7f9
 810a81c:	0810a7f9 	.word	0x0810a7f9
 810a820:	0810a7f9 	.word	0x0810a7f9
 810a824:	0810a7f9 	.word	0x0810a7f9
 810a828:	0810a87d 	.word	0x0810a87d
 810a82c:	0810a7f9 	.word	0x0810a7f9
 810a830:	0810a7f9 	.word	0x0810a7f9
 810a834:	0810a7f9 	.word	0x0810a7f9
 810a838:	0810a7f9 	.word	0x0810a7f9
 810a83c:	0810a981 	.word	0x0810a981
 810a840:	0810a8a9 	.word	0x0810a8a9
 810a844:	0810a93b 	.word	0x0810a93b
 810a848:	0810a7f9 	.word	0x0810a7f9
 810a84c:	0810a7f9 	.word	0x0810a7f9
 810a850:	0810a9a3 	.word	0x0810a9a3
 810a854:	0810a7f9 	.word	0x0810a7f9
 810a858:	0810a8a9 	.word	0x0810a8a9
 810a85c:	0810a7f9 	.word	0x0810a7f9
 810a860:	0810a7f9 	.word	0x0810a7f9
 810a864:	0810a943 	.word	0x0810a943
 810a868:	682b      	ldr	r3, [r5, #0]
 810a86a:	1d1a      	adds	r2, r3, #4
 810a86c:	681b      	ldr	r3, [r3, #0]
 810a86e:	602a      	str	r2, [r5, #0]
 810a870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810a878:	2301      	movs	r3, #1
 810a87a:	e09f      	b.n	810a9bc <_printf_i+0x1ec>
 810a87c:	6820      	ldr	r0, [r4, #0]
 810a87e:	682b      	ldr	r3, [r5, #0]
 810a880:	0607      	lsls	r7, r0, #24
 810a882:	f103 0104 	add.w	r1, r3, #4
 810a886:	6029      	str	r1, [r5, #0]
 810a888:	d501      	bpl.n	810a88e <_printf_i+0xbe>
 810a88a:	681e      	ldr	r6, [r3, #0]
 810a88c:	e003      	b.n	810a896 <_printf_i+0xc6>
 810a88e:	0646      	lsls	r6, r0, #25
 810a890:	d5fb      	bpl.n	810a88a <_printf_i+0xba>
 810a892:	f9b3 6000 	ldrsh.w	r6, [r3]
 810a896:	2e00      	cmp	r6, #0
 810a898:	da03      	bge.n	810a8a2 <_printf_i+0xd2>
 810a89a:	232d      	movs	r3, #45	; 0x2d
 810a89c:	4276      	negs	r6, r6
 810a89e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a8a2:	485a      	ldr	r0, [pc, #360]	; (810aa0c <_printf_i+0x23c>)
 810a8a4:	230a      	movs	r3, #10
 810a8a6:	e012      	b.n	810a8ce <_printf_i+0xfe>
 810a8a8:	682b      	ldr	r3, [r5, #0]
 810a8aa:	6820      	ldr	r0, [r4, #0]
 810a8ac:	1d19      	adds	r1, r3, #4
 810a8ae:	6029      	str	r1, [r5, #0]
 810a8b0:	0605      	lsls	r5, r0, #24
 810a8b2:	d501      	bpl.n	810a8b8 <_printf_i+0xe8>
 810a8b4:	681e      	ldr	r6, [r3, #0]
 810a8b6:	e002      	b.n	810a8be <_printf_i+0xee>
 810a8b8:	0641      	lsls	r1, r0, #25
 810a8ba:	d5fb      	bpl.n	810a8b4 <_printf_i+0xe4>
 810a8bc:	881e      	ldrh	r6, [r3, #0]
 810a8be:	4853      	ldr	r0, [pc, #332]	; (810aa0c <_printf_i+0x23c>)
 810a8c0:	2f6f      	cmp	r7, #111	; 0x6f
 810a8c2:	bf0c      	ite	eq
 810a8c4:	2308      	moveq	r3, #8
 810a8c6:	230a      	movne	r3, #10
 810a8c8:	2100      	movs	r1, #0
 810a8ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810a8ce:	6865      	ldr	r5, [r4, #4]
 810a8d0:	60a5      	str	r5, [r4, #8]
 810a8d2:	2d00      	cmp	r5, #0
 810a8d4:	bfa2      	ittt	ge
 810a8d6:	6821      	ldrge	r1, [r4, #0]
 810a8d8:	f021 0104 	bicge.w	r1, r1, #4
 810a8dc:	6021      	strge	r1, [r4, #0]
 810a8de:	b90e      	cbnz	r6, 810a8e4 <_printf_i+0x114>
 810a8e0:	2d00      	cmp	r5, #0
 810a8e2:	d04b      	beq.n	810a97c <_printf_i+0x1ac>
 810a8e4:	4615      	mov	r5, r2
 810a8e6:	fbb6 f1f3 	udiv	r1, r6, r3
 810a8ea:	fb03 6711 	mls	r7, r3, r1, r6
 810a8ee:	5dc7      	ldrb	r7, [r0, r7]
 810a8f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810a8f4:	4637      	mov	r7, r6
 810a8f6:	42bb      	cmp	r3, r7
 810a8f8:	460e      	mov	r6, r1
 810a8fa:	d9f4      	bls.n	810a8e6 <_printf_i+0x116>
 810a8fc:	2b08      	cmp	r3, #8
 810a8fe:	d10b      	bne.n	810a918 <_printf_i+0x148>
 810a900:	6823      	ldr	r3, [r4, #0]
 810a902:	07de      	lsls	r6, r3, #31
 810a904:	d508      	bpl.n	810a918 <_printf_i+0x148>
 810a906:	6923      	ldr	r3, [r4, #16]
 810a908:	6861      	ldr	r1, [r4, #4]
 810a90a:	4299      	cmp	r1, r3
 810a90c:	bfde      	ittt	le
 810a90e:	2330      	movle	r3, #48	; 0x30
 810a910:	f805 3c01 	strble.w	r3, [r5, #-1]
 810a914:	f105 35ff 	addle.w	r5, r5, #4294967295
 810a918:	1b52      	subs	r2, r2, r5
 810a91a:	6122      	str	r2, [r4, #16]
 810a91c:	f8cd a000 	str.w	sl, [sp]
 810a920:	464b      	mov	r3, r9
 810a922:	aa03      	add	r2, sp, #12
 810a924:	4621      	mov	r1, r4
 810a926:	4640      	mov	r0, r8
 810a928:	f7ff fee4 	bl	810a6f4 <_printf_common>
 810a92c:	3001      	adds	r0, #1
 810a92e:	d14a      	bne.n	810a9c6 <_printf_i+0x1f6>
 810a930:	f04f 30ff 	mov.w	r0, #4294967295
 810a934:	b004      	add	sp, #16
 810a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a93a:	6823      	ldr	r3, [r4, #0]
 810a93c:	f043 0320 	orr.w	r3, r3, #32
 810a940:	6023      	str	r3, [r4, #0]
 810a942:	4833      	ldr	r0, [pc, #204]	; (810aa10 <_printf_i+0x240>)
 810a944:	2778      	movs	r7, #120	; 0x78
 810a946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810a94a:	6823      	ldr	r3, [r4, #0]
 810a94c:	6829      	ldr	r1, [r5, #0]
 810a94e:	061f      	lsls	r7, r3, #24
 810a950:	f851 6b04 	ldr.w	r6, [r1], #4
 810a954:	d402      	bmi.n	810a95c <_printf_i+0x18c>
 810a956:	065f      	lsls	r7, r3, #25
 810a958:	bf48      	it	mi
 810a95a:	b2b6      	uxthmi	r6, r6
 810a95c:	07df      	lsls	r7, r3, #31
 810a95e:	bf48      	it	mi
 810a960:	f043 0320 	orrmi.w	r3, r3, #32
 810a964:	6029      	str	r1, [r5, #0]
 810a966:	bf48      	it	mi
 810a968:	6023      	strmi	r3, [r4, #0]
 810a96a:	b91e      	cbnz	r6, 810a974 <_printf_i+0x1a4>
 810a96c:	6823      	ldr	r3, [r4, #0]
 810a96e:	f023 0320 	bic.w	r3, r3, #32
 810a972:	6023      	str	r3, [r4, #0]
 810a974:	2310      	movs	r3, #16
 810a976:	e7a7      	b.n	810a8c8 <_printf_i+0xf8>
 810a978:	4824      	ldr	r0, [pc, #144]	; (810aa0c <_printf_i+0x23c>)
 810a97a:	e7e4      	b.n	810a946 <_printf_i+0x176>
 810a97c:	4615      	mov	r5, r2
 810a97e:	e7bd      	b.n	810a8fc <_printf_i+0x12c>
 810a980:	682b      	ldr	r3, [r5, #0]
 810a982:	6826      	ldr	r6, [r4, #0]
 810a984:	6961      	ldr	r1, [r4, #20]
 810a986:	1d18      	adds	r0, r3, #4
 810a988:	6028      	str	r0, [r5, #0]
 810a98a:	0635      	lsls	r5, r6, #24
 810a98c:	681b      	ldr	r3, [r3, #0]
 810a98e:	d501      	bpl.n	810a994 <_printf_i+0x1c4>
 810a990:	6019      	str	r1, [r3, #0]
 810a992:	e002      	b.n	810a99a <_printf_i+0x1ca>
 810a994:	0670      	lsls	r0, r6, #25
 810a996:	d5fb      	bpl.n	810a990 <_printf_i+0x1c0>
 810a998:	8019      	strh	r1, [r3, #0]
 810a99a:	2300      	movs	r3, #0
 810a99c:	6123      	str	r3, [r4, #16]
 810a99e:	4615      	mov	r5, r2
 810a9a0:	e7bc      	b.n	810a91c <_printf_i+0x14c>
 810a9a2:	682b      	ldr	r3, [r5, #0]
 810a9a4:	1d1a      	adds	r2, r3, #4
 810a9a6:	602a      	str	r2, [r5, #0]
 810a9a8:	681d      	ldr	r5, [r3, #0]
 810a9aa:	6862      	ldr	r2, [r4, #4]
 810a9ac:	2100      	movs	r1, #0
 810a9ae:	4628      	mov	r0, r5
 810a9b0:	f7f5 fc96 	bl	81002e0 <memchr>
 810a9b4:	b108      	cbz	r0, 810a9ba <_printf_i+0x1ea>
 810a9b6:	1b40      	subs	r0, r0, r5
 810a9b8:	6060      	str	r0, [r4, #4]
 810a9ba:	6863      	ldr	r3, [r4, #4]
 810a9bc:	6123      	str	r3, [r4, #16]
 810a9be:	2300      	movs	r3, #0
 810a9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a9c4:	e7aa      	b.n	810a91c <_printf_i+0x14c>
 810a9c6:	6923      	ldr	r3, [r4, #16]
 810a9c8:	462a      	mov	r2, r5
 810a9ca:	4649      	mov	r1, r9
 810a9cc:	4640      	mov	r0, r8
 810a9ce:	47d0      	blx	sl
 810a9d0:	3001      	adds	r0, #1
 810a9d2:	d0ad      	beq.n	810a930 <_printf_i+0x160>
 810a9d4:	6823      	ldr	r3, [r4, #0]
 810a9d6:	079b      	lsls	r3, r3, #30
 810a9d8:	d413      	bmi.n	810aa02 <_printf_i+0x232>
 810a9da:	68e0      	ldr	r0, [r4, #12]
 810a9dc:	9b03      	ldr	r3, [sp, #12]
 810a9de:	4298      	cmp	r0, r3
 810a9e0:	bfb8      	it	lt
 810a9e2:	4618      	movlt	r0, r3
 810a9e4:	e7a6      	b.n	810a934 <_printf_i+0x164>
 810a9e6:	2301      	movs	r3, #1
 810a9e8:	4632      	mov	r2, r6
 810a9ea:	4649      	mov	r1, r9
 810a9ec:	4640      	mov	r0, r8
 810a9ee:	47d0      	blx	sl
 810a9f0:	3001      	adds	r0, #1
 810a9f2:	d09d      	beq.n	810a930 <_printf_i+0x160>
 810a9f4:	3501      	adds	r5, #1
 810a9f6:	68e3      	ldr	r3, [r4, #12]
 810a9f8:	9903      	ldr	r1, [sp, #12]
 810a9fa:	1a5b      	subs	r3, r3, r1
 810a9fc:	42ab      	cmp	r3, r5
 810a9fe:	dcf2      	bgt.n	810a9e6 <_printf_i+0x216>
 810aa00:	e7eb      	b.n	810a9da <_printf_i+0x20a>
 810aa02:	2500      	movs	r5, #0
 810aa04:	f104 0619 	add.w	r6, r4, #25
 810aa08:	e7f5      	b.n	810a9f6 <_printf_i+0x226>
 810aa0a:	bf00      	nop
 810aa0c:	081e678a 	.word	0x081e678a
 810aa10:	081e679b 	.word	0x081e679b

0810aa14 <_scanf_float>:
 810aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa18:	b087      	sub	sp, #28
 810aa1a:	4617      	mov	r7, r2
 810aa1c:	9303      	str	r3, [sp, #12]
 810aa1e:	688b      	ldr	r3, [r1, #8]
 810aa20:	1e5a      	subs	r2, r3, #1
 810aa22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810aa26:	bf83      	ittte	hi
 810aa28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810aa2c:	195b      	addhi	r3, r3, r5
 810aa2e:	9302      	strhi	r3, [sp, #8]
 810aa30:	2300      	movls	r3, #0
 810aa32:	bf86      	itte	hi
 810aa34:	f240 135d 	movwhi	r3, #349	; 0x15d
 810aa38:	608b      	strhi	r3, [r1, #8]
 810aa3a:	9302      	strls	r3, [sp, #8]
 810aa3c:	680b      	ldr	r3, [r1, #0]
 810aa3e:	468b      	mov	fp, r1
 810aa40:	2500      	movs	r5, #0
 810aa42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810aa46:	f84b 3b1c 	str.w	r3, [fp], #28
 810aa4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810aa4e:	4680      	mov	r8, r0
 810aa50:	460c      	mov	r4, r1
 810aa52:	465e      	mov	r6, fp
 810aa54:	46aa      	mov	sl, r5
 810aa56:	46a9      	mov	r9, r5
 810aa58:	9501      	str	r5, [sp, #4]
 810aa5a:	68a2      	ldr	r2, [r4, #8]
 810aa5c:	b152      	cbz	r2, 810aa74 <_scanf_float+0x60>
 810aa5e:	683b      	ldr	r3, [r7, #0]
 810aa60:	781b      	ldrb	r3, [r3, #0]
 810aa62:	2b4e      	cmp	r3, #78	; 0x4e
 810aa64:	d864      	bhi.n	810ab30 <_scanf_float+0x11c>
 810aa66:	2b40      	cmp	r3, #64	; 0x40
 810aa68:	d83c      	bhi.n	810aae4 <_scanf_float+0xd0>
 810aa6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810aa6e:	b2c8      	uxtb	r0, r1
 810aa70:	280e      	cmp	r0, #14
 810aa72:	d93a      	bls.n	810aaea <_scanf_float+0xd6>
 810aa74:	f1b9 0f00 	cmp.w	r9, #0
 810aa78:	d003      	beq.n	810aa82 <_scanf_float+0x6e>
 810aa7a:	6823      	ldr	r3, [r4, #0]
 810aa7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810aa80:	6023      	str	r3, [r4, #0]
 810aa82:	f10a 3aff 	add.w	sl, sl, #4294967295
 810aa86:	f1ba 0f01 	cmp.w	sl, #1
 810aa8a:	f200 8113 	bhi.w	810acb4 <_scanf_float+0x2a0>
 810aa8e:	455e      	cmp	r6, fp
 810aa90:	f200 8105 	bhi.w	810ac9e <_scanf_float+0x28a>
 810aa94:	2501      	movs	r5, #1
 810aa96:	4628      	mov	r0, r5
 810aa98:	b007      	add	sp, #28
 810aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aa9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810aaa2:	2a0d      	cmp	r2, #13
 810aaa4:	d8e6      	bhi.n	810aa74 <_scanf_float+0x60>
 810aaa6:	a101      	add	r1, pc, #4	; (adr r1, 810aaac <_scanf_float+0x98>)
 810aaa8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810aaac:	0810abeb 	.word	0x0810abeb
 810aab0:	0810aa75 	.word	0x0810aa75
 810aab4:	0810aa75 	.word	0x0810aa75
 810aab8:	0810aa75 	.word	0x0810aa75
 810aabc:	0810ac4b 	.word	0x0810ac4b
 810aac0:	0810ac23 	.word	0x0810ac23
 810aac4:	0810aa75 	.word	0x0810aa75
 810aac8:	0810aa75 	.word	0x0810aa75
 810aacc:	0810abf9 	.word	0x0810abf9
 810aad0:	0810aa75 	.word	0x0810aa75
 810aad4:	0810aa75 	.word	0x0810aa75
 810aad8:	0810aa75 	.word	0x0810aa75
 810aadc:	0810aa75 	.word	0x0810aa75
 810aae0:	0810abb1 	.word	0x0810abb1
 810aae4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810aae8:	e7db      	b.n	810aaa2 <_scanf_float+0x8e>
 810aaea:	290e      	cmp	r1, #14
 810aaec:	d8c2      	bhi.n	810aa74 <_scanf_float+0x60>
 810aaee:	a001      	add	r0, pc, #4	; (adr r0, 810aaf4 <_scanf_float+0xe0>)
 810aaf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810aaf4:	0810aba3 	.word	0x0810aba3
 810aaf8:	0810aa75 	.word	0x0810aa75
 810aafc:	0810aba3 	.word	0x0810aba3
 810ab00:	0810ac37 	.word	0x0810ac37
 810ab04:	0810aa75 	.word	0x0810aa75
 810ab08:	0810ab51 	.word	0x0810ab51
 810ab0c:	0810ab8d 	.word	0x0810ab8d
 810ab10:	0810ab8d 	.word	0x0810ab8d
 810ab14:	0810ab8d 	.word	0x0810ab8d
 810ab18:	0810ab8d 	.word	0x0810ab8d
 810ab1c:	0810ab8d 	.word	0x0810ab8d
 810ab20:	0810ab8d 	.word	0x0810ab8d
 810ab24:	0810ab8d 	.word	0x0810ab8d
 810ab28:	0810ab8d 	.word	0x0810ab8d
 810ab2c:	0810ab8d 	.word	0x0810ab8d
 810ab30:	2b6e      	cmp	r3, #110	; 0x6e
 810ab32:	d809      	bhi.n	810ab48 <_scanf_float+0x134>
 810ab34:	2b60      	cmp	r3, #96	; 0x60
 810ab36:	d8b2      	bhi.n	810aa9e <_scanf_float+0x8a>
 810ab38:	2b54      	cmp	r3, #84	; 0x54
 810ab3a:	d077      	beq.n	810ac2c <_scanf_float+0x218>
 810ab3c:	2b59      	cmp	r3, #89	; 0x59
 810ab3e:	d199      	bne.n	810aa74 <_scanf_float+0x60>
 810ab40:	2d07      	cmp	r5, #7
 810ab42:	d197      	bne.n	810aa74 <_scanf_float+0x60>
 810ab44:	2508      	movs	r5, #8
 810ab46:	e029      	b.n	810ab9c <_scanf_float+0x188>
 810ab48:	2b74      	cmp	r3, #116	; 0x74
 810ab4a:	d06f      	beq.n	810ac2c <_scanf_float+0x218>
 810ab4c:	2b79      	cmp	r3, #121	; 0x79
 810ab4e:	e7f6      	b.n	810ab3e <_scanf_float+0x12a>
 810ab50:	6821      	ldr	r1, [r4, #0]
 810ab52:	05c8      	lsls	r0, r1, #23
 810ab54:	d51a      	bpl.n	810ab8c <_scanf_float+0x178>
 810ab56:	9b02      	ldr	r3, [sp, #8]
 810ab58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810ab5c:	6021      	str	r1, [r4, #0]
 810ab5e:	f109 0901 	add.w	r9, r9, #1
 810ab62:	b11b      	cbz	r3, 810ab6c <_scanf_float+0x158>
 810ab64:	3b01      	subs	r3, #1
 810ab66:	3201      	adds	r2, #1
 810ab68:	9302      	str	r3, [sp, #8]
 810ab6a:	60a2      	str	r2, [r4, #8]
 810ab6c:	68a3      	ldr	r3, [r4, #8]
 810ab6e:	3b01      	subs	r3, #1
 810ab70:	60a3      	str	r3, [r4, #8]
 810ab72:	6923      	ldr	r3, [r4, #16]
 810ab74:	3301      	adds	r3, #1
 810ab76:	6123      	str	r3, [r4, #16]
 810ab78:	687b      	ldr	r3, [r7, #4]
 810ab7a:	3b01      	subs	r3, #1
 810ab7c:	2b00      	cmp	r3, #0
 810ab7e:	607b      	str	r3, [r7, #4]
 810ab80:	f340 8084 	ble.w	810ac8c <_scanf_float+0x278>
 810ab84:	683b      	ldr	r3, [r7, #0]
 810ab86:	3301      	adds	r3, #1
 810ab88:	603b      	str	r3, [r7, #0]
 810ab8a:	e766      	b.n	810aa5a <_scanf_float+0x46>
 810ab8c:	eb1a 0f05 	cmn.w	sl, r5
 810ab90:	f47f af70 	bne.w	810aa74 <_scanf_float+0x60>
 810ab94:	6822      	ldr	r2, [r4, #0]
 810ab96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810ab9a:	6022      	str	r2, [r4, #0]
 810ab9c:	f806 3b01 	strb.w	r3, [r6], #1
 810aba0:	e7e4      	b.n	810ab6c <_scanf_float+0x158>
 810aba2:	6822      	ldr	r2, [r4, #0]
 810aba4:	0610      	lsls	r0, r2, #24
 810aba6:	f57f af65 	bpl.w	810aa74 <_scanf_float+0x60>
 810abaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810abae:	e7f4      	b.n	810ab9a <_scanf_float+0x186>
 810abb0:	f1ba 0f00 	cmp.w	sl, #0
 810abb4:	d10e      	bne.n	810abd4 <_scanf_float+0x1c0>
 810abb6:	f1b9 0f00 	cmp.w	r9, #0
 810abba:	d10e      	bne.n	810abda <_scanf_float+0x1c6>
 810abbc:	6822      	ldr	r2, [r4, #0]
 810abbe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810abc2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810abc6:	d108      	bne.n	810abda <_scanf_float+0x1c6>
 810abc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810abcc:	6022      	str	r2, [r4, #0]
 810abce:	f04f 0a01 	mov.w	sl, #1
 810abd2:	e7e3      	b.n	810ab9c <_scanf_float+0x188>
 810abd4:	f1ba 0f02 	cmp.w	sl, #2
 810abd8:	d055      	beq.n	810ac86 <_scanf_float+0x272>
 810abda:	2d01      	cmp	r5, #1
 810abdc:	d002      	beq.n	810abe4 <_scanf_float+0x1d0>
 810abde:	2d04      	cmp	r5, #4
 810abe0:	f47f af48 	bne.w	810aa74 <_scanf_float+0x60>
 810abe4:	3501      	adds	r5, #1
 810abe6:	b2ed      	uxtb	r5, r5
 810abe8:	e7d8      	b.n	810ab9c <_scanf_float+0x188>
 810abea:	f1ba 0f01 	cmp.w	sl, #1
 810abee:	f47f af41 	bne.w	810aa74 <_scanf_float+0x60>
 810abf2:	f04f 0a02 	mov.w	sl, #2
 810abf6:	e7d1      	b.n	810ab9c <_scanf_float+0x188>
 810abf8:	b97d      	cbnz	r5, 810ac1a <_scanf_float+0x206>
 810abfa:	f1b9 0f00 	cmp.w	r9, #0
 810abfe:	f47f af3c 	bne.w	810aa7a <_scanf_float+0x66>
 810ac02:	6822      	ldr	r2, [r4, #0]
 810ac04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810ac08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810ac0c:	f47f af39 	bne.w	810aa82 <_scanf_float+0x6e>
 810ac10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810ac14:	6022      	str	r2, [r4, #0]
 810ac16:	2501      	movs	r5, #1
 810ac18:	e7c0      	b.n	810ab9c <_scanf_float+0x188>
 810ac1a:	2d03      	cmp	r5, #3
 810ac1c:	d0e2      	beq.n	810abe4 <_scanf_float+0x1d0>
 810ac1e:	2d05      	cmp	r5, #5
 810ac20:	e7de      	b.n	810abe0 <_scanf_float+0x1cc>
 810ac22:	2d02      	cmp	r5, #2
 810ac24:	f47f af26 	bne.w	810aa74 <_scanf_float+0x60>
 810ac28:	2503      	movs	r5, #3
 810ac2a:	e7b7      	b.n	810ab9c <_scanf_float+0x188>
 810ac2c:	2d06      	cmp	r5, #6
 810ac2e:	f47f af21 	bne.w	810aa74 <_scanf_float+0x60>
 810ac32:	2507      	movs	r5, #7
 810ac34:	e7b2      	b.n	810ab9c <_scanf_float+0x188>
 810ac36:	6822      	ldr	r2, [r4, #0]
 810ac38:	0591      	lsls	r1, r2, #22
 810ac3a:	f57f af1b 	bpl.w	810aa74 <_scanf_float+0x60>
 810ac3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810ac42:	6022      	str	r2, [r4, #0]
 810ac44:	f8cd 9004 	str.w	r9, [sp, #4]
 810ac48:	e7a8      	b.n	810ab9c <_scanf_float+0x188>
 810ac4a:	6822      	ldr	r2, [r4, #0]
 810ac4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810ac50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810ac54:	d006      	beq.n	810ac64 <_scanf_float+0x250>
 810ac56:	0550      	lsls	r0, r2, #21
 810ac58:	f57f af0c 	bpl.w	810aa74 <_scanf_float+0x60>
 810ac5c:	f1b9 0f00 	cmp.w	r9, #0
 810ac60:	f43f af0f 	beq.w	810aa82 <_scanf_float+0x6e>
 810ac64:	0591      	lsls	r1, r2, #22
 810ac66:	bf58      	it	pl
 810ac68:	9901      	ldrpl	r1, [sp, #4]
 810ac6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810ac6e:	bf58      	it	pl
 810ac70:	eba9 0101 	subpl.w	r1, r9, r1
 810ac74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810ac78:	bf58      	it	pl
 810ac7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810ac7e:	6022      	str	r2, [r4, #0]
 810ac80:	f04f 0900 	mov.w	r9, #0
 810ac84:	e78a      	b.n	810ab9c <_scanf_float+0x188>
 810ac86:	f04f 0a03 	mov.w	sl, #3
 810ac8a:	e787      	b.n	810ab9c <_scanf_float+0x188>
 810ac8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810ac90:	4639      	mov	r1, r7
 810ac92:	4640      	mov	r0, r8
 810ac94:	4798      	blx	r3
 810ac96:	2800      	cmp	r0, #0
 810ac98:	f43f aedf 	beq.w	810aa5a <_scanf_float+0x46>
 810ac9c:	e6ea      	b.n	810aa74 <_scanf_float+0x60>
 810ac9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810aca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810aca6:	463a      	mov	r2, r7
 810aca8:	4640      	mov	r0, r8
 810acaa:	4798      	blx	r3
 810acac:	6923      	ldr	r3, [r4, #16]
 810acae:	3b01      	subs	r3, #1
 810acb0:	6123      	str	r3, [r4, #16]
 810acb2:	e6ec      	b.n	810aa8e <_scanf_float+0x7a>
 810acb4:	1e6b      	subs	r3, r5, #1
 810acb6:	2b06      	cmp	r3, #6
 810acb8:	d825      	bhi.n	810ad06 <_scanf_float+0x2f2>
 810acba:	2d02      	cmp	r5, #2
 810acbc:	d836      	bhi.n	810ad2c <_scanf_float+0x318>
 810acbe:	455e      	cmp	r6, fp
 810acc0:	f67f aee8 	bls.w	810aa94 <_scanf_float+0x80>
 810acc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810acc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810accc:	463a      	mov	r2, r7
 810acce:	4640      	mov	r0, r8
 810acd0:	4798      	blx	r3
 810acd2:	6923      	ldr	r3, [r4, #16]
 810acd4:	3b01      	subs	r3, #1
 810acd6:	6123      	str	r3, [r4, #16]
 810acd8:	e7f1      	b.n	810acbe <_scanf_float+0x2aa>
 810acda:	9802      	ldr	r0, [sp, #8]
 810acdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810ace0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810ace4:	9002      	str	r0, [sp, #8]
 810ace6:	463a      	mov	r2, r7
 810ace8:	4640      	mov	r0, r8
 810acea:	4798      	blx	r3
 810acec:	6923      	ldr	r3, [r4, #16]
 810acee:	3b01      	subs	r3, #1
 810acf0:	6123      	str	r3, [r4, #16]
 810acf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810acf6:	fa5f fa8a 	uxtb.w	sl, sl
 810acfa:	f1ba 0f02 	cmp.w	sl, #2
 810acfe:	d1ec      	bne.n	810acda <_scanf_float+0x2c6>
 810ad00:	3d03      	subs	r5, #3
 810ad02:	b2ed      	uxtb	r5, r5
 810ad04:	1b76      	subs	r6, r6, r5
 810ad06:	6823      	ldr	r3, [r4, #0]
 810ad08:	05da      	lsls	r2, r3, #23
 810ad0a:	d52f      	bpl.n	810ad6c <_scanf_float+0x358>
 810ad0c:	055b      	lsls	r3, r3, #21
 810ad0e:	d510      	bpl.n	810ad32 <_scanf_float+0x31e>
 810ad10:	455e      	cmp	r6, fp
 810ad12:	f67f aebf 	bls.w	810aa94 <_scanf_float+0x80>
 810ad16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810ad1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810ad1e:	463a      	mov	r2, r7
 810ad20:	4640      	mov	r0, r8
 810ad22:	4798      	blx	r3
 810ad24:	6923      	ldr	r3, [r4, #16]
 810ad26:	3b01      	subs	r3, #1
 810ad28:	6123      	str	r3, [r4, #16]
 810ad2a:	e7f1      	b.n	810ad10 <_scanf_float+0x2fc>
 810ad2c:	46aa      	mov	sl, r5
 810ad2e:	9602      	str	r6, [sp, #8]
 810ad30:	e7df      	b.n	810acf2 <_scanf_float+0x2de>
 810ad32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810ad36:	6923      	ldr	r3, [r4, #16]
 810ad38:	2965      	cmp	r1, #101	; 0x65
 810ad3a:	f103 33ff 	add.w	r3, r3, #4294967295
 810ad3e:	f106 35ff 	add.w	r5, r6, #4294967295
 810ad42:	6123      	str	r3, [r4, #16]
 810ad44:	d00c      	beq.n	810ad60 <_scanf_float+0x34c>
 810ad46:	2945      	cmp	r1, #69	; 0x45
 810ad48:	d00a      	beq.n	810ad60 <_scanf_float+0x34c>
 810ad4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810ad4e:	463a      	mov	r2, r7
 810ad50:	4640      	mov	r0, r8
 810ad52:	4798      	blx	r3
 810ad54:	6923      	ldr	r3, [r4, #16]
 810ad56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810ad5a:	3b01      	subs	r3, #1
 810ad5c:	1eb5      	subs	r5, r6, #2
 810ad5e:	6123      	str	r3, [r4, #16]
 810ad60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810ad64:	463a      	mov	r2, r7
 810ad66:	4640      	mov	r0, r8
 810ad68:	4798      	blx	r3
 810ad6a:	462e      	mov	r6, r5
 810ad6c:	6825      	ldr	r5, [r4, #0]
 810ad6e:	f015 0510 	ands.w	r5, r5, #16
 810ad72:	d158      	bne.n	810ae26 <_scanf_float+0x412>
 810ad74:	7035      	strb	r5, [r6, #0]
 810ad76:	6823      	ldr	r3, [r4, #0]
 810ad78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810ad7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810ad80:	d11c      	bne.n	810adbc <_scanf_float+0x3a8>
 810ad82:	9b01      	ldr	r3, [sp, #4]
 810ad84:	454b      	cmp	r3, r9
 810ad86:	eba3 0209 	sub.w	r2, r3, r9
 810ad8a:	d124      	bne.n	810add6 <_scanf_float+0x3c2>
 810ad8c:	2200      	movs	r2, #0
 810ad8e:	4659      	mov	r1, fp
 810ad90:	4640      	mov	r0, r8
 810ad92:	f002 fca5 	bl	810d6e0 <_strtod_r>
 810ad96:	9b03      	ldr	r3, [sp, #12]
 810ad98:	6821      	ldr	r1, [r4, #0]
 810ad9a:	681b      	ldr	r3, [r3, #0]
 810ad9c:	f011 0f02 	tst.w	r1, #2
 810ada0:	ec57 6b10 	vmov	r6, r7, d0
 810ada4:	f103 0204 	add.w	r2, r3, #4
 810ada8:	d020      	beq.n	810adec <_scanf_float+0x3d8>
 810adaa:	9903      	ldr	r1, [sp, #12]
 810adac:	600a      	str	r2, [r1, #0]
 810adae:	681b      	ldr	r3, [r3, #0]
 810adb0:	e9c3 6700 	strd	r6, r7, [r3]
 810adb4:	68e3      	ldr	r3, [r4, #12]
 810adb6:	3301      	adds	r3, #1
 810adb8:	60e3      	str	r3, [r4, #12]
 810adba:	e66c      	b.n	810aa96 <_scanf_float+0x82>
 810adbc:	9b04      	ldr	r3, [sp, #16]
 810adbe:	2b00      	cmp	r3, #0
 810adc0:	d0e4      	beq.n	810ad8c <_scanf_float+0x378>
 810adc2:	9905      	ldr	r1, [sp, #20]
 810adc4:	230a      	movs	r3, #10
 810adc6:	462a      	mov	r2, r5
 810adc8:	3101      	adds	r1, #1
 810adca:	4640      	mov	r0, r8
 810adcc:	f002 fd10 	bl	810d7f0 <_strtol_r>
 810add0:	9b04      	ldr	r3, [sp, #16]
 810add2:	9e05      	ldr	r6, [sp, #20]
 810add4:	1ac2      	subs	r2, r0, r3
 810add6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810adda:	429e      	cmp	r6, r3
 810addc:	bf28      	it	cs
 810adde:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810ade2:	4912      	ldr	r1, [pc, #72]	; (810ae2c <_scanf_float+0x418>)
 810ade4:	4630      	mov	r0, r6
 810ade6:	f000 f955 	bl	810b094 <siprintf>
 810adea:	e7cf      	b.n	810ad8c <_scanf_float+0x378>
 810adec:	f011 0f04 	tst.w	r1, #4
 810adf0:	9903      	ldr	r1, [sp, #12]
 810adf2:	600a      	str	r2, [r1, #0]
 810adf4:	d1db      	bne.n	810adae <_scanf_float+0x39a>
 810adf6:	f8d3 8000 	ldr.w	r8, [r3]
 810adfa:	ee10 2a10 	vmov	r2, s0
 810adfe:	ee10 0a10 	vmov	r0, s0
 810ae02:	463b      	mov	r3, r7
 810ae04:	4639      	mov	r1, r7
 810ae06:	f7f5 ff19 	bl	8100c3c <__aeabi_dcmpun>
 810ae0a:	b128      	cbz	r0, 810ae18 <_scanf_float+0x404>
 810ae0c:	4808      	ldr	r0, [pc, #32]	; (810ae30 <_scanf_float+0x41c>)
 810ae0e:	f000 fad7 	bl	810b3c0 <nanf>
 810ae12:	ed88 0a00 	vstr	s0, [r8]
 810ae16:	e7cd      	b.n	810adb4 <_scanf_float+0x3a0>
 810ae18:	4630      	mov	r0, r6
 810ae1a:	4639      	mov	r1, r7
 810ae1c:	f7f5 ff6c 	bl	8100cf8 <__aeabi_d2f>
 810ae20:	f8c8 0000 	str.w	r0, [r8]
 810ae24:	e7c6      	b.n	810adb4 <_scanf_float+0x3a0>
 810ae26:	2500      	movs	r5, #0
 810ae28:	e635      	b.n	810aa96 <_scanf_float+0x82>
 810ae2a:	bf00      	nop
 810ae2c:	081e67ac 	.word	0x081e67ac
 810ae30:	081d324f 	.word	0x081d324f

0810ae34 <std>:
 810ae34:	2300      	movs	r3, #0
 810ae36:	b510      	push	{r4, lr}
 810ae38:	4604      	mov	r4, r0
 810ae3a:	e9c0 3300 	strd	r3, r3, [r0]
 810ae3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810ae42:	6083      	str	r3, [r0, #8]
 810ae44:	8181      	strh	r1, [r0, #12]
 810ae46:	6643      	str	r3, [r0, #100]	; 0x64
 810ae48:	81c2      	strh	r2, [r0, #14]
 810ae4a:	6183      	str	r3, [r0, #24]
 810ae4c:	4619      	mov	r1, r3
 810ae4e:	2208      	movs	r2, #8
 810ae50:	305c      	adds	r0, #92	; 0x5c
 810ae52:	f000 fa17 	bl	810b284 <memset>
 810ae56:	4b0d      	ldr	r3, [pc, #52]	; (810ae8c <std+0x58>)
 810ae58:	6263      	str	r3, [r4, #36]	; 0x24
 810ae5a:	4b0d      	ldr	r3, [pc, #52]	; (810ae90 <std+0x5c>)
 810ae5c:	62a3      	str	r3, [r4, #40]	; 0x28
 810ae5e:	4b0d      	ldr	r3, [pc, #52]	; (810ae94 <std+0x60>)
 810ae60:	62e3      	str	r3, [r4, #44]	; 0x2c
 810ae62:	4b0d      	ldr	r3, [pc, #52]	; (810ae98 <std+0x64>)
 810ae64:	6323      	str	r3, [r4, #48]	; 0x30
 810ae66:	4b0d      	ldr	r3, [pc, #52]	; (810ae9c <std+0x68>)
 810ae68:	6224      	str	r4, [r4, #32]
 810ae6a:	429c      	cmp	r4, r3
 810ae6c:	d006      	beq.n	810ae7c <std+0x48>
 810ae6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 810ae72:	4294      	cmp	r4, r2
 810ae74:	d002      	beq.n	810ae7c <std+0x48>
 810ae76:	33d0      	adds	r3, #208	; 0xd0
 810ae78:	429c      	cmp	r4, r3
 810ae7a:	d105      	bne.n	810ae88 <std+0x54>
 810ae7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810ae80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ae84:	f000 ba8a 	b.w	810b39c <__retarget_lock_init_recursive>
 810ae88:	bd10      	pop	{r4, pc}
 810ae8a:	bf00      	nop
 810ae8c:	0810b0d5 	.word	0x0810b0d5
 810ae90:	0810b0f7 	.word	0x0810b0f7
 810ae94:	0810b12f 	.word	0x0810b12f
 810ae98:	0810b153 	.word	0x0810b153
 810ae9c:	1001acc8 	.word	0x1001acc8

0810aea0 <stdio_exit_handler>:
 810aea0:	4a02      	ldr	r2, [pc, #8]	; (810aeac <stdio_exit_handler+0xc>)
 810aea2:	4903      	ldr	r1, [pc, #12]	; (810aeb0 <stdio_exit_handler+0x10>)
 810aea4:	4803      	ldr	r0, [pc, #12]	; (810aeb4 <stdio_exit_handler+0x14>)
 810aea6:	f000 b869 	b.w	810af7c <_fwalk_sglue>
 810aeaa:	bf00      	nop
 810aeac:	10000984 	.word	0x10000984
 810aeb0:	0810de39 	.word	0x0810de39
 810aeb4:	10000990 	.word	0x10000990

0810aeb8 <cleanup_stdio>:
 810aeb8:	6841      	ldr	r1, [r0, #4]
 810aeba:	4b0c      	ldr	r3, [pc, #48]	; (810aeec <cleanup_stdio+0x34>)
 810aebc:	4299      	cmp	r1, r3
 810aebe:	b510      	push	{r4, lr}
 810aec0:	4604      	mov	r4, r0
 810aec2:	d001      	beq.n	810aec8 <cleanup_stdio+0x10>
 810aec4:	f002 ffb8 	bl	810de38 <_fflush_r>
 810aec8:	68a1      	ldr	r1, [r4, #8]
 810aeca:	4b09      	ldr	r3, [pc, #36]	; (810aef0 <cleanup_stdio+0x38>)
 810aecc:	4299      	cmp	r1, r3
 810aece:	d002      	beq.n	810aed6 <cleanup_stdio+0x1e>
 810aed0:	4620      	mov	r0, r4
 810aed2:	f002 ffb1 	bl	810de38 <_fflush_r>
 810aed6:	68e1      	ldr	r1, [r4, #12]
 810aed8:	4b06      	ldr	r3, [pc, #24]	; (810aef4 <cleanup_stdio+0x3c>)
 810aeda:	4299      	cmp	r1, r3
 810aedc:	d004      	beq.n	810aee8 <cleanup_stdio+0x30>
 810aede:	4620      	mov	r0, r4
 810aee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aee4:	f002 bfa8 	b.w	810de38 <_fflush_r>
 810aee8:	bd10      	pop	{r4, pc}
 810aeea:	bf00      	nop
 810aeec:	1001acc8 	.word	0x1001acc8
 810aef0:	1001ad30 	.word	0x1001ad30
 810aef4:	1001ad98 	.word	0x1001ad98

0810aef8 <global_stdio_init.part.0>:
 810aef8:	b510      	push	{r4, lr}
 810aefa:	4b0b      	ldr	r3, [pc, #44]	; (810af28 <global_stdio_init.part.0+0x30>)
 810aefc:	4c0b      	ldr	r4, [pc, #44]	; (810af2c <global_stdio_init.part.0+0x34>)
 810aefe:	4a0c      	ldr	r2, [pc, #48]	; (810af30 <global_stdio_init.part.0+0x38>)
 810af00:	601a      	str	r2, [r3, #0]
 810af02:	4620      	mov	r0, r4
 810af04:	2200      	movs	r2, #0
 810af06:	2104      	movs	r1, #4
 810af08:	f7ff ff94 	bl	810ae34 <std>
 810af0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810af10:	2201      	movs	r2, #1
 810af12:	2109      	movs	r1, #9
 810af14:	f7ff ff8e 	bl	810ae34 <std>
 810af18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 810af1c:	2202      	movs	r2, #2
 810af1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810af22:	2112      	movs	r1, #18
 810af24:	f7ff bf86 	b.w	810ae34 <std>
 810af28:	1001ae00 	.word	0x1001ae00
 810af2c:	1001acc8 	.word	0x1001acc8
 810af30:	0810aea1 	.word	0x0810aea1

0810af34 <__sfp_lock_acquire>:
 810af34:	4801      	ldr	r0, [pc, #4]	; (810af3c <__sfp_lock_acquire+0x8>)
 810af36:	f000 ba32 	b.w	810b39e <__retarget_lock_acquire_recursive>
 810af3a:	bf00      	nop
 810af3c:	1001ae09 	.word	0x1001ae09

0810af40 <__sfp_lock_release>:
 810af40:	4801      	ldr	r0, [pc, #4]	; (810af48 <__sfp_lock_release+0x8>)
 810af42:	f000 ba2d 	b.w	810b3a0 <__retarget_lock_release_recursive>
 810af46:	bf00      	nop
 810af48:	1001ae09 	.word	0x1001ae09

0810af4c <__sinit>:
 810af4c:	b510      	push	{r4, lr}
 810af4e:	4604      	mov	r4, r0
 810af50:	f7ff fff0 	bl	810af34 <__sfp_lock_acquire>
 810af54:	6a23      	ldr	r3, [r4, #32]
 810af56:	b11b      	cbz	r3, 810af60 <__sinit+0x14>
 810af58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810af5c:	f7ff bff0 	b.w	810af40 <__sfp_lock_release>
 810af60:	4b04      	ldr	r3, [pc, #16]	; (810af74 <__sinit+0x28>)
 810af62:	6223      	str	r3, [r4, #32]
 810af64:	4b04      	ldr	r3, [pc, #16]	; (810af78 <__sinit+0x2c>)
 810af66:	681b      	ldr	r3, [r3, #0]
 810af68:	2b00      	cmp	r3, #0
 810af6a:	d1f5      	bne.n	810af58 <__sinit+0xc>
 810af6c:	f7ff ffc4 	bl	810aef8 <global_stdio_init.part.0>
 810af70:	e7f2      	b.n	810af58 <__sinit+0xc>
 810af72:	bf00      	nop
 810af74:	0810aeb9 	.word	0x0810aeb9
 810af78:	1001ae00 	.word	0x1001ae00

0810af7c <_fwalk_sglue>:
 810af7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810af80:	4607      	mov	r7, r0
 810af82:	4688      	mov	r8, r1
 810af84:	4614      	mov	r4, r2
 810af86:	2600      	movs	r6, #0
 810af88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810af8c:	f1b9 0901 	subs.w	r9, r9, #1
 810af90:	d505      	bpl.n	810af9e <_fwalk_sglue+0x22>
 810af92:	6824      	ldr	r4, [r4, #0]
 810af94:	2c00      	cmp	r4, #0
 810af96:	d1f7      	bne.n	810af88 <_fwalk_sglue+0xc>
 810af98:	4630      	mov	r0, r6
 810af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810af9e:	89ab      	ldrh	r3, [r5, #12]
 810afa0:	2b01      	cmp	r3, #1
 810afa2:	d907      	bls.n	810afb4 <_fwalk_sglue+0x38>
 810afa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810afa8:	3301      	adds	r3, #1
 810afaa:	d003      	beq.n	810afb4 <_fwalk_sglue+0x38>
 810afac:	4629      	mov	r1, r5
 810afae:	4638      	mov	r0, r7
 810afb0:	47c0      	blx	r8
 810afb2:	4306      	orrs	r6, r0
 810afb4:	3568      	adds	r5, #104	; 0x68
 810afb6:	e7e9      	b.n	810af8c <_fwalk_sglue+0x10>

0810afb8 <iprintf>:
 810afb8:	b40f      	push	{r0, r1, r2, r3}
 810afba:	b507      	push	{r0, r1, r2, lr}
 810afbc:	4906      	ldr	r1, [pc, #24]	; (810afd8 <iprintf+0x20>)
 810afbe:	ab04      	add	r3, sp, #16
 810afc0:	6808      	ldr	r0, [r1, #0]
 810afc2:	f853 2b04 	ldr.w	r2, [r3], #4
 810afc6:	6881      	ldr	r1, [r0, #8]
 810afc8:	9301      	str	r3, [sp, #4]
 810afca:	f002 fd95 	bl	810daf8 <_vfiprintf_r>
 810afce:	b003      	add	sp, #12
 810afd0:	f85d eb04 	ldr.w	lr, [sp], #4
 810afd4:	b004      	add	sp, #16
 810afd6:	4770      	bx	lr
 810afd8:	100009dc 	.word	0x100009dc

0810afdc <_puts_r>:
 810afdc:	6a03      	ldr	r3, [r0, #32]
 810afde:	b570      	push	{r4, r5, r6, lr}
 810afe0:	6884      	ldr	r4, [r0, #8]
 810afe2:	4605      	mov	r5, r0
 810afe4:	460e      	mov	r6, r1
 810afe6:	b90b      	cbnz	r3, 810afec <_puts_r+0x10>
 810afe8:	f7ff ffb0 	bl	810af4c <__sinit>
 810afec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810afee:	07db      	lsls	r3, r3, #31
 810aff0:	d405      	bmi.n	810affe <_puts_r+0x22>
 810aff2:	89a3      	ldrh	r3, [r4, #12]
 810aff4:	0598      	lsls	r0, r3, #22
 810aff6:	d402      	bmi.n	810affe <_puts_r+0x22>
 810aff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810affa:	f000 f9d0 	bl	810b39e <__retarget_lock_acquire_recursive>
 810affe:	89a3      	ldrh	r3, [r4, #12]
 810b000:	0719      	lsls	r1, r3, #28
 810b002:	d513      	bpl.n	810b02c <_puts_r+0x50>
 810b004:	6923      	ldr	r3, [r4, #16]
 810b006:	b18b      	cbz	r3, 810b02c <_puts_r+0x50>
 810b008:	3e01      	subs	r6, #1
 810b00a:	68a3      	ldr	r3, [r4, #8]
 810b00c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810b010:	3b01      	subs	r3, #1
 810b012:	60a3      	str	r3, [r4, #8]
 810b014:	b9e9      	cbnz	r1, 810b052 <_puts_r+0x76>
 810b016:	2b00      	cmp	r3, #0
 810b018:	da2e      	bge.n	810b078 <_puts_r+0x9c>
 810b01a:	4622      	mov	r2, r4
 810b01c:	210a      	movs	r1, #10
 810b01e:	4628      	mov	r0, r5
 810b020:	f000 f89b 	bl	810b15a <__swbuf_r>
 810b024:	3001      	adds	r0, #1
 810b026:	d007      	beq.n	810b038 <_puts_r+0x5c>
 810b028:	250a      	movs	r5, #10
 810b02a:	e007      	b.n	810b03c <_puts_r+0x60>
 810b02c:	4621      	mov	r1, r4
 810b02e:	4628      	mov	r0, r5
 810b030:	f000 f8d0 	bl	810b1d4 <__swsetup_r>
 810b034:	2800      	cmp	r0, #0
 810b036:	d0e7      	beq.n	810b008 <_puts_r+0x2c>
 810b038:	f04f 35ff 	mov.w	r5, #4294967295
 810b03c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b03e:	07da      	lsls	r2, r3, #31
 810b040:	d405      	bmi.n	810b04e <_puts_r+0x72>
 810b042:	89a3      	ldrh	r3, [r4, #12]
 810b044:	059b      	lsls	r3, r3, #22
 810b046:	d402      	bmi.n	810b04e <_puts_r+0x72>
 810b048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b04a:	f000 f9a9 	bl	810b3a0 <__retarget_lock_release_recursive>
 810b04e:	4628      	mov	r0, r5
 810b050:	bd70      	pop	{r4, r5, r6, pc}
 810b052:	2b00      	cmp	r3, #0
 810b054:	da04      	bge.n	810b060 <_puts_r+0x84>
 810b056:	69a2      	ldr	r2, [r4, #24]
 810b058:	429a      	cmp	r2, r3
 810b05a:	dc06      	bgt.n	810b06a <_puts_r+0x8e>
 810b05c:	290a      	cmp	r1, #10
 810b05e:	d004      	beq.n	810b06a <_puts_r+0x8e>
 810b060:	6823      	ldr	r3, [r4, #0]
 810b062:	1c5a      	adds	r2, r3, #1
 810b064:	6022      	str	r2, [r4, #0]
 810b066:	7019      	strb	r1, [r3, #0]
 810b068:	e7cf      	b.n	810b00a <_puts_r+0x2e>
 810b06a:	4622      	mov	r2, r4
 810b06c:	4628      	mov	r0, r5
 810b06e:	f000 f874 	bl	810b15a <__swbuf_r>
 810b072:	3001      	adds	r0, #1
 810b074:	d1c9      	bne.n	810b00a <_puts_r+0x2e>
 810b076:	e7df      	b.n	810b038 <_puts_r+0x5c>
 810b078:	6823      	ldr	r3, [r4, #0]
 810b07a:	250a      	movs	r5, #10
 810b07c:	1c5a      	adds	r2, r3, #1
 810b07e:	6022      	str	r2, [r4, #0]
 810b080:	701d      	strb	r5, [r3, #0]
 810b082:	e7db      	b.n	810b03c <_puts_r+0x60>

0810b084 <puts>:
 810b084:	4b02      	ldr	r3, [pc, #8]	; (810b090 <puts+0xc>)
 810b086:	4601      	mov	r1, r0
 810b088:	6818      	ldr	r0, [r3, #0]
 810b08a:	f7ff bfa7 	b.w	810afdc <_puts_r>
 810b08e:	bf00      	nop
 810b090:	100009dc 	.word	0x100009dc

0810b094 <siprintf>:
 810b094:	b40e      	push	{r1, r2, r3}
 810b096:	b500      	push	{lr}
 810b098:	b09c      	sub	sp, #112	; 0x70
 810b09a:	ab1d      	add	r3, sp, #116	; 0x74
 810b09c:	9002      	str	r0, [sp, #8]
 810b09e:	9006      	str	r0, [sp, #24]
 810b0a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810b0a4:	4809      	ldr	r0, [pc, #36]	; (810b0cc <siprintf+0x38>)
 810b0a6:	9107      	str	r1, [sp, #28]
 810b0a8:	9104      	str	r1, [sp, #16]
 810b0aa:	4909      	ldr	r1, [pc, #36]	; (810b0d0 <siprintf+0x3c>)
 810b0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 810b0b0:	9105      	str	r1, [sp, #20]
 810b0b2:	6800      	ldr	r0, [r0, #0]
 810b0b4:	9301      	str	r3, [sp, #4]
 810b0b6:	a902      	add	r1, sp, #8
 810b0b8:	f002 fbf6 	bl	810d8a8 <_svfiprintf_r>
 810b0bc:	9b02      	ldr	r3, [sp, #8]
 810b0be:	2200      	movs	r2, #0
 810b0c0:	701a      	strb	r2, [r3, #0]
 810b0c2:	b01c      	add	sp, #112	; 0x70
 810b0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 810b0c8:	b003      	add	sp, #12
 810b0ca:	4770      	bx	lr
 810b0cc:	100009dc 	.word	0x100009dc
 810b0d0:	ffff0208 	.word	0xffff0208

0810b0d4 <__sread>:
 810b0d4:	b510      	push	{r4, lr}
 810b0d6:	460c      	mov	r4, r1
 810b0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b0dc:	f000 f900 	bl	810b2e0 <_read_r>
 810b0e0:	2800      	cmp	r0, #0
 810b0e2:	bfab      	itete	ge
 810b0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b0e6:	89a3      	ldrhlt	r3, [r4, #12]
 810b0e8:	181b      	addge	r3, r3, r0
 810b0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b0ee:	bfac      	ite	ge
 810b0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 810b0f2:	81a3      	strhlt	r3, [r4, #12]
 810b0f4:	bd10      	pop	{r4, pc}

0810b0f6 <__swrite>:
 810b0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b0fa:	461f      	mov	r7, r3
 810b0fc:	898b      	ldrh	r3, [r1, #12]
 810b0fe:	05db      	lsls	r3, r3, #23
 810b100:	4605      	mov	r5, r0
 810b102:	460c      	mov	r4, r1
 810b104:	4616      	mov	r6, r2
 810b106:	d505      	bpl.n	810b114 <__swrite+0x1e>
 810b108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b10c:	2302      	movs	r3, #2
 810b10e:	2200      	movs	r2, #0
 810b110:	f000 f8d4 	bl	810b2bc <_lseek_r>
 810b114:	89a3      	ldrh	r3, [r4, #12]
 810b116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b11e:	81a3      	strh	r3, [r4, #12]
 810b120:	4632      	mov	r2, r6
 810b122:	463b      	mov	r3, r7
 810b124:	4628      	mov	r0, r5
 810b126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b12a:	f000 b8fb 	b.w	810b324 <_write_r>

0810b12e <__sseek>:
 810b12e:	b510      	push	{r4, lr}
 810b130:	460c      	mov	r4, r1
 810b132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b136:	f000 f8c1 	bl	810b2bc <_lseek_r>
 810b13a:	1c43      	adds	r3, r0, #1
 810b13c:	89a3      	ldrh	r3, [r4, #12]
 810b13e:	bf15      	itete	ne
 810b140:	6560      	strne	r0, [r4, #84]	; 0x54
 810b142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810b146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810b14a:	81a3      	strheq	r3, [r4, #12]
 810b14c:	bf18      	it	ne
 810b14e:	81a3      	strhne	r3, [r4, #12]
 810b150:	bd10      	pop	{r4, pc}

0810b152 <__sclose>:
 810b152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b156:	f000 b8a1 	b.w	810b29c <_close_r>

0810b15a <__swbuf_r>:
 810b15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b15c:	460e      	mov	r6, r1
 810b15e:	4614      	mov	r4, r2
 810b160:	4605      	mov	r5, r0
 810b162:	b118      	cbz	r0, 810b16c <__swbuf_r+0x12>
 810b164:	6a03      	ldr	r3, [r0, #32]
 810b166:	b90b      	cbnz	r3, 810b16c <__swbuf_r+0x12>
 810b168:	f7ff fef0 	bl	810af4c <__sinit>
 810b16c:	69a3      	ldr	r3, [r4, #24]
 810b16e:	60a3      	str	r3, [r4, #8]
 810b170:	89a3      	ldrh	r3, [r4, #12]
 810b172:	071a      	lsls	r2, r3, #28
 810b174:	d525      	bpl.n	810b1c2 <__swbuf_r+0x68>
 810b176:	6923      	ldr	r3, [r4, #16]
 810b178:	b31b      	cbz	r3, 810b1c2 <__swbuf_r+0x68>
 810b17a:	6823      	ldr	r3, [r4, #0]
 810b17c:	6922      	ldr	r2, [r4, #16]
 810b17e:	1a98      	subs	r0, r3, r2
 810b180:	6963      	ldr	r3, [r4, #20]
 810b182:	b2f6      	uxtb	r6, r6
 810b184:	4283      	cmp	r3, r0
 810b186:	4637      	mov	r7, r6
 810b188:	dc04      	bgt.n	810b194 <__swbuf_r+0x3a>
 810b18a:	4621      	mov	r1, r4
 810b18c:	4628      	mov	r0, r5
 810b18e:	f002 fe53 	bl	810de38 <_fflush_r>
 810b192:	b9e0      	cbnz	r0, 810b1ce <__swbuf_r+0x74>
 810b194:	68a3      	ldr	r3, [r4, #8]
 810b196:	3b01      	subs	r3, #1
 810b198:	60a3      	str	r3, [r4, #8]
 810b19a:	6823      	ldr	r3, [r4, #0]
 810b19c:	1c5a      	adds	r2, r3, #1
 810b19e:	6022      	str	r2, [r4, #0]
 810b1a0:	701e      	strb	r6, [r3, #0]
 810b1a2:	6962      	ldr	r2, [r4, #20]
 810b1a4:	1c43      	adds	r3, r0, #1
 810b1a6:	429a      	cmp	r2, r3
 810b1a8:	d004      	beq.n	810b1b4 <__swbuf_r+0x5a>
 810b1aa:	89a3      	ldrh	r3, [r4, #12]
 810b1ac:	07db      	lsls	r3, r3, #31
 810b1ae:	d506      	bpl.n	810b1be <__swbuf_r+0x64>
 810b1b0:	2e0a      	cmp	r6, #10
 810b1b2:	d104      	bne.n	810b1be <__swbuf_r+0x64>
 810b1b4:	4621      	mov	r1, r4
 810b1b6:	4628      	mov	r0, r5
 810b1b8:	f002 fe3e 	bl	810de38 <_fflush_r>
 810b1bc:	b938      	cbnz	r0, 810b1ce <__swbuf_r+0x74>
 810b1be:	4638      	mov	r0, r7
 810b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b1c2:	4621      	mov	r1, r4
 810b1c4:	4628      	mov	r0, r5
 810b1c6:	f000 f805 	bl	810b1d4 <__swsetup_r>
 810b1ca:	2800      	cmp	r0, #0
 810b1cc:	d0d5      	beq.n	810b17a <__swbuf_r+0x20>
 810b1ce:	f04f 37ff 	mov.w	r7, #4294967295
 810b1d2:	e7f4      	b.n	810b1be <__swbuf_r+0x64>

0810b1d4 <__swsetup_r>:
 810b1d4:	b538      	push	{r3, r4, r5, lr}
 810b1d6:	4b2a      	ldr	r3, [pc, #168]	; (810b280 <__swsetup_r+0xac>)
 810b1d8:	4605      	mov	r5, r0
 810b1da:	6818      	ldr	r0, [r3, #0]
 810b1dc:	460c      	mov	r4, r1
 810b1de:	b118      	cbz	r0, 810b1e8 <__swsetup_r+0x14>
 810b1e0:	6a03      	ldr	r3, [r0, #32]
 810b1e2:	b90b      	cbnz	r3, 810b1e8 <__swsetup_r+0x14>
 810b1e4:	f7ff feb2 	bl	810af4c <__sinit>
 810b1e8:	89a3      	ldrh	r3, [r4, #12]
 810b1ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b1ee:	0718      	lsls	r0, r3, #28
 810b1f0:	d422      	bmi.n	810b238 <__swsetup_r+0x64>
 810b1f2:	06d9      	lsls	r1, r3, #27
 810b1f4:	d407      	bmi.n	810b206 <__swsetup_r+0x32>
 810b1f6:	2309      	movs	r3, #9
 810b1f8:	602b      	str	r3, [r5, #0]
 810b1fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b1fe:	81a3      	strh	r3, [r4, #12]
 810b200:	f04f 30ff 	mov.w	r0, #4294967295
 810b204:	e034      	b.n	810b270 <__swsetup_r+0x9c>
 810b206:	0758      	lsls	r0, r3, #29
 810b208:	d512      	bpl.n	810b230 <__swsetup_r+0x5c>
 810b20a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b20c:	b141      	cbz	r1, 810b220 <__swsetup_r+0x4c>
 810b20e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b212:	4299      	cmp	r1, r3
 810b214:	d002      	beq.n	810b21c <__swsetup_r+0x48>
 810b216:	4628      	mov	r0, r5
 810b218:	f000 ff54 	bl	810c0c4 <_free_r>
 810b21c:	2300      	movs	r3, #0
 810b21e:	6363      	str	r3, [r4, #52]	; 0x34
 810b220:	89a3      	ldrh	r3, [r4, #12]
 810b222:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b226:	81a3      	strh	r3, [r4, #12]
 810b228:	2300      	movs	r3, #0
 810b22a:	6063      	str	r3, [r4, #4]
 810b22c:	6923      	ldr	r3, [r4, #16]
 810b22e:	6023      	str	r3, [r4, #0]
 810b230:	89a3      	ldrh	r3, [r4, #12]
 810b232:	f043 0308 	orr.w	r3, r3, #8
 810b236:	81a3      	strh	r3, [r4, #12]
 810b238:	6923      	ldr	r3, [r4, #16]
 810b23a:	b94b      	cbnz	r3, 810b250 <__swsetup_r+0x7c>
 810b23c:	89a3      	ldrh	r3, [r4, #12]
 810b23e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b246:	d003      	beq.n	810b250 <__swsetup_r+0x7c>
 810b248:	4621      	mov	r1, r4
 810b24a:	4628      	mov	r0, r5
 810b24c:	f002 fe42 	bl	810ded4 <__smakebuf_r>
 810b250:	89a0      	ldrh	r0, [r4, #12]
 810b252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b256:	f010 0301 	ands.w	r3, r0, #1
 810b25a:	d00a      	beq.n	810b272 <__swsetup_r+0x9e>
 810b25c:	2300      	movs	r3, #0
 810b25e:	60a3      	str	r3, [r4, #8]
 810b260:	6963      	ldr	r3, [r4, #20]
 810b262:	425b      	negs	r3, r3
 810b264:	61a3      	str	r3, [r4, #24]
 810b266:	6923      	ldr	r3, [r4, #16]
 810b268:	b943      	cbnz	r3, 810b27c <__swsetup_r+0xa8>
 810b26a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b26e:	d1c4      	bne.n	810b1fa <__swsetup_r+0x26>
 810b270:	bd38      	pop	{r3, r4, r5, pc}
 810b272:	0781      	lsls	r1, r0, #30
 810b274:	bf58      	it	pl
 810b276:	6963      	ldrpl	r3, [r4, #20]
 810b278:	60a3      	str	r3, [r4, #8]
 810b27a:	e7f4      	b.n	810b266 <__swsetup_r+0x92>
 810b27c:	2000      	movs	r0, #0
 810b27e:	e7f7      	b.n	810b270 <__swsetup_r+0x9c>
 810b280:	100009dc 	.word	0x100009dc

0810b284 <memset>:
 810b284:	4402      	add	r2, r0
 810b286:	4603      	mov	r3, r0
 810b288:	4293      	cmp	r3, r2
 810b28a:	d100      	bne.n	810b28e <memset+0xa>
 810b28c:	4770      	bx	lr
 810b28e:	f803 1b01 	strb.w	r1, [r3], #1
 810b292:	e7f9      	b.n	810b288 <memset+0x4>

0810b294 <_localeconv_r>:
 810b294:	4800      	ldr	r0, [pc, #0]	; (810b298 <_localeconv_r+0x4>)
 810b296:	4770      	bx	lr
 810b298:	10000ad0 	.word	0x10000ad0

0810b29c <_close_r>:
 810b29c:	b538      	push	{r3, r4, r5, lr}
 810b29e:	4d06      	ldr	r5, [pc, #24]	; (810b2b8 <_close_r+0x1c>)
 810b2a0:	2300      	movs	r3, #0
 810b2a2:	4604      	mov	r4, r0
 810b2a4:	4608      	mov	r0, r1
 810b2a6:	602b      	str	r3, [r5, #0]
 810b2a8:	f7f6 ff16 	bl	81020d8 <_close>
 810b2ac:	1c43      	adds	r3, r0, #1
 810b2ae:	d102      	bne.n	810b2b6 <_close_r+0x1a>
 810b2b0:	682b      	ldr	r3, [r5, #0]
 810b2b2:	b103      	cbz	r3, 810b2b6 <_close_r+0x1a>
 810b2b4:	6023      	str	r3, [r4, #0]
 810b2b6:	bd38      	pop	{r3, r4, r5, pc}
 810b2b8:	1001ae04 	.word	0x1001ae04

0810b2bc <_lseek_r>:
 810b2bc:	b538      	push	{r3, r4, r5, lr}
 810b2be:	4d07      	ldr	r5, [pc, #28]	; (810b2dc <_lseek_r+0x20>)
 810b2c0:	4604      	mov	r4, r0
 810b2c2:	4608      	mov	r0, r1
 810b2c4:	4611      	mov	r1, r2
 810b2c6:	2200      	movs	r2, #0
 810b2c8:	602a      	str	r2, [r5, #0]
 810b2ca:	461a      	mov	r2, r3
 810b2cc:	f7f6 ff0e 	bl	81020ec <_lseek>
 810b2d0:	1c43      	adds	r3, r0, #1
 810b2d2:	d102      	bne.n	810b2da <_lseek_r+0x1e>
 810b2d4:	682b      	ldr	r3, [r5, #0]
 810b2d6:	b103      	cbz	r3, 810b2da <_lseek_r+0x1e>
 810b2d8:	6023      	str	r3, [r4, #0]
 810b2da:	bd38      	pop	{r3, r4, r5, pc}
 810b2dc:	1001ae04 	.word	0x1001ae04

0810b2e0 <_read_r>:
 810b2e0:	b538      	push	{r3, r4, r5, lr}
 810b2e2:	4d07      	ldr	r5, [pc, #28]	; (810b300 <_read_r+0x20>)
 810b2e4:	4604      	mov	r4, r0
 810b2e6:	4608      	mov	r0, r1
 810b2e8:	4611      	mov	r1, r2
 810b2ea:	2200      	movs	r2, #0
 810b2ec:	602a      	str	r2, [r5, #0]
 810b2ee:	461a      	mov	r2, r3
 810b2f0:	f7f6 fee4 	bl	81020bc <_read>
 810b2f4:	1c43      	adds	r3, r0, #1
 810b2f6:	d102      	bne.n	810b2fe <_read_r+0x1e>
 810b2f8:	682b      	ldr	r3, [r5, #0]
 810b2fa:	b103      	cbz	r3, 810b2fe <_read_r+0x1e>
 810b2fc:	6023      	str	r3, [r4, #0]
 810b2fe:	bd38      	pop	{r3, r4, r5, pc}
 810b300:	1001ae04 	.word	0x1001ae04

0810b304 <_sbrk_r>:
 810b304:	b538      	push	{r3, r4, r5, lr}
 810b306:	4d06      	ldr	r5, [pc, #24]	; (810b320 <_sbrk_r+0x1c>)
 810b308:	2300      	movs	r3, #0
 810b30a:	4604      	mov	r4, r0
 810b30c:	4608      	mov	r0, r1
 810b30e:	602b      	str	r3, [r5, #0]
 810b310:	f7f6 feee 	bl	81020f0 <_sbrk>
 810b314:	1c43      	adds	r3, r0, #1
 810b316:	d102      	bne.n	810b31e <_sbrk_r+0x1a>
 810b318:	682b      	ldr	r3, [r5, #0]
 810b31a:	b103      	cbz	r3, 810b31e <_sbrk_r+0x1a>
 810b31c:	6023      	str	r3, [r4, #0]
 810b31e:	bd38      	pop	{r3, r4, r5, pc}
 810b320:	1001ae04 	.word	0x1001ae04

0810b324 <_write_r>:
 810b324:	b538      	push	{r3, r4, r5, lr}
 810b326:	4d07      	ldr	r5, [pc, #28]	; (810b344 <_write_r+0x20>)
 810b328:	4604      	mov	r4, r0
 810b32a:	4608      	mov	r0, r1
 810b32c:	4611      	mov	r1, r2
 810b32e:	2200      	movs	r2, #0
 810b330:	602a      	str	r2, [r5, #0]
 810b332:	461a      	mov	r2, r3
 810b334:	f7f6 fdfe 	bl	8101f34 <_write>
 810b338:	1c43      	adds	r3, r0, #1
 810b33a:	d102      	bne.n	810b342 <_write_r+0x1e>
 810b33c:	682b      	ldr	r3, [r5, #0]
 810b33e:	b103      	cbz	r3, 810b342 <_write_r+0x1e>
 810b340:	6023      	str	r3, [r4, #0]
 810b342:	bd38      	pop	{r3, r4, r5, pc}
 810b344:	1001ae04 	.word	0x1001ae04

0810b348 <__errno>:
 810b348:	4b01      	ldr	r3, [pc, #4]	; (810b350 <__errno+0x8>)
 810b34a:	6818      	ldr	r0, [r3, #0]
 810b34c:	4770      	bx	lr
 810b34e:	bf00      	nop
 810b350:	100009dc 	.word	0x100009dc

0810b354 <__libc_init_array>:
 810b354:	b570      	push	{r4, r5, r6, lr}
 810b356:	4d0d      	ldr	r5, [pc, #52]	; (810b38c <__libc_init_array+0x38>)
 810b358:	4c0d      	ldr	r4, [pc, #52]	; (810b390 <__libc_init_array+0x3c>)
 810b35a:	1b64      	subs	r4, r4, r5
 810b35c:	10a4      	asrs	r4, r4, #2
 810b35e:	2600      	movs	r6, #0
 810b360:	42a6      	cmp	r6, r4
 810b362:	d109      	bne.n	810b378 <__libc_init_array+0x24>
 810b364:	4d0b      	ldr	r5, [pc, #44]	; (810b394 <__libc_init_array+0x40>)
 810b366:	4c0c      	ldr	r4, [pc, #48]	; (810b398 <__libc_init_array+0x44>)
 810b368:	f003 fd1c 	bl	810eda4 <_init>
 810b36c:	1b64      	subs	r4, r4, r5
 810b36e:	10a4      	asrs	r4, r4, #2
 810b370:	2600      	movs	r6, #0
 810b372:	42a6      	cmp	r6, r4
 810b374:	d105      	bne.n	810b382 <__libc_init_array+0x2e>
 810b376:	bd70      	pop	{r4, r5, r6, pc}
 810b378:	f855 3b04 	ldr.w	r3, [r5], #4
 810b37c:	4798      	blx	r3
 810b37e:	3601      	adds	r6, #1
 810b380:	e7ee      	b.n	810b360 <__libc_init_array+0xc>
 810b382:	f855 3b04 	ldr.w	r3, [r5], #4
 810b386:	4798      	blx	r3
 810b388:	3601      	adds	r6, #1
 810b38a:	e7f2      	b.n	810b372 <__libc_init_array+0x1e>
 810b38c:	081e6bc0 	.word	0x081e6bc0
 810b390:	081e6bc0 	.word	0x081e6bc0
 810b394:	081e6bc0 	.word	0x081e6bc0
 810b398:	081e6bc4 	.word	0x081e6bc4

0810b39c <__retarget_lock_init_recursive>:
 810b39c:	4770      	bx	lr

0810b39e <__retarget_lock_acquire_recursive>:
 810b39e:	4770      	bx	lr

0810b3a0 <__retarget_lock_release_recursive>:
 810b3a0:	4770      	bx	lr

0810b3a2 <memcpy>:
 810b3a2:	440a      	add	r2, r1
 810b3a4:	4291      	cmp	r1, r2
 810b3a6:	f100 33ff 	add.w	r3, r0, #4294967295
 810b3aa:	d100      	bne.n	810b3ae <memcpy+0xc>
 810b3ac:	4770      	bx	lr
 810b3ae:	b510      	push	{r4, lr}
 810b3b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b3b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b3b8:	4291      	cmp	r1, r2
 810b3ba:	d1f9      	bne.n	810b3b0 <memcpy+0xe>
 810b3bc:	bd10      	pop	{r4, pc}
	...

0810b3c0 <nanf>:
 810b3c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810b3c8 <nanf+0x8>
 810b3c4:	4770      	bx	lr
 810b3c6:	bf00      	nop
 810b3c8:	7fc00000 	.word	0x7fc00000

0810b3cc <quorem>:
 810b3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b3d0:	6903      	ldr	r3, [r0, #16]
 810b3d2:	690c      	ldr	r4, [r1, #16]
 810b3d4:	42a3      	cmp	r3, r4
 810b3d6:	4607      	mov	r7, r0
 810b3d8:	db7e      	blt.n	810b4d8 <quorem+0x10c>
 810b3da:	3c01      	subs	r4, #1
 810b3dc:	f101 0814 	add.w	r8, r1, #20
 810b3e0:	f100 0514 	add.w	r5, r0, #20
 810b3e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b3e8:	9301      	str	r3, [sp, #4]
 810b3ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810b3ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b3f2:	3301      	adds	r3, #1
 810b3f4:	429a      	cmp	r2, r3
 810b3f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810b3fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810b3fe:	fbb2 f6f3 	udiv	r6, r2, r3
 810b402:	d331      	bcc.n	810b468 <quorem+0x9c>
 810b404:	f04f 0e00 	mov.w	lr, #0
 810b408:	4640      	mov	r0, r8
 810b40a:	46ac      	mov	ip, r5
 810b40c:	46f2      	mov	sl, lr
 810b40e:	f850 2b04 	ldr.w	r2, [r0], #4
 810b412:	b293      	uxth	r3, r2
 810b414:	fb06 e303 	mla	r3, r6, r3, lr
 810b418:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810b41c:	0c1a      	lsrs	r2, r3, #16
 810b41e:	b29b      	uxth	r3, r3
 810b420:	ebaa 0303 	sub.w	r3, sl, r3
 810b424:	f8dc a000 	ldr.w	sl, [ip]
 810b428:	fa13 f38a 	uxtah	r3, r3, sl
 810b42c:	fb06 220e 	mla	r2, r6, lr, r2
 810b430:	9300      	str	r3, [sp, #0]
 810b432:	9b00      	ldr	r3, [sp, #0]
 810b434:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810b438:	b292      	uxth	r2, r2
 810b43a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810b43e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b442:	f8bd 3000 	ldrh.w	r3, [sp]
 810b446:	4581      	cmp	r9, r0
 810b448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b44c:	f84c 3b04 	str.w	r3, [ip], #4
 810b450:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810b454:	d2db      	bcs.n	810b40e <quorem+0x42>
 810b456:	f855 300b 	ldr.w	r3, [r5, fp]
 810b45a:	b92b      	cbnz	r3, 810b468 <quorem+0x9c>
 810b45c:	9b01      	ldr	r3, [sp, #4]
 810b45e:	3b04      	subs	r3, #4
 810b460:	429d      	cmp	r5, r3
 810b462:	461a      	mov	r2, r3
 810b464:	d32c      	bcc.n	810b4c0 <quorem+0xf4>
 810b466:	613c      	str	r4, [r7, #16]
 810b468:	4638      	mov	r0, r7
 810b46a:	f001 f93d 	bl	810c6e8 <__mcmp>
 810b46e:	2800      	cmp	r0, #0
 810b470:	db22      	blt.n	810b4b8 <quorem+0xec>
 810b472:	3601      	adds	r6, #1
 810b474:	4629      	mov	r1, r5
 810b476:	2000      	movs	r0, #0
 810b478:	f858 2b04 	ldr.w	r2, [r8], #4
 810b47c:	f8d1 c000 	ldr.w	ip, [r1]
 810b480:	b293      	uxth	r3, r2
 810b482:	1ac3      	subs	r3, r0, r3
 810b484:	0c12      	lsrs	r2, r2, #16
 810b486:	fa13 f38c 	uxtah	r3, r3, ip
 810b48a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810b48e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b492:	b29b      	uxth	r3, r3
 810b494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b498:	45c1      	cmp	r9, r8
 810b49a:	f841 3b04 	str.w	r3, [r1], #4
 810b49e:	ea4f 4022 	mov.w	r0, r2, asr #16
 810b4a2:	d2e9      	bcs.n	810b478 <quorem+0xac>
 810b4a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b4a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b4ac:	b922      	cbnz	r2, 810b4b8 <quorem+0xec>
 810b4ae:	3b04      	subs	r3, #4
 810b4b0:	429d      	cmp	r5, r3
 810b4b2:	461a      	mov	r2, r3
 810b4b4:	d30a      	bcc.n	810b4cc <quorem+0x100>
 810b4b6:	613c      	str	r4, [r7, #16]
 810b4b8:	4630      	mov	r0, r6
 810b4ba:	b003      	add	sp, #12
 810b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b4c0:	6812      	ldr	r2, [r2, #0]
 810b4c2:	3b04      	subs	r3, #4
 810b4c4:	2a00      	cmp	r2, #0
 810b4c6:	d1ce      	bne.n	810b466 <quorem+0x9a>
 810b4c8:	3c01      	subs	r4, #1
 810b4ca:	e7c9      	b.n	810b460 <quorem+0x94>
 810b4cc:	6812      	ldr	r2, [r2, #0]
 810b4ce:	3b04      	subs	r3, #4
 810b4d0:	2a00      	cmp	r2, #0
 810b4d2:	d1f0      	bne.n	810b4b6 <quorem+0xea>
 810b4d4:	3c01      	subs	r4, #1
 810b4d6:	e7eb      	b.n	810b4b0 <quorem+0xe4>
 810b4d8:	2000      	movs	r0, #0
 810b4da:	e7ee      	b.n	810b4ba <quorem+0xee>
 810b4dc:	0000      	movs	r0, r0
	...

0810b4e0 <_dtoa_r>:
 810b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b4e4:	ed2d 8b04 	vpush	{d8-d9}
 810b4e8:	69c5      	ldr	r5, [r0, #28]
 810b4ea:	b093      	sub	sp, #76	; 0x4c
 810b4ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 810b4f0:	ec57 6b10 	vmov	r6, r7, d0
 810b4f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810b4f8:	9107      	str	r1, [sp, #28]
 810b4fa:	4604      	mov	r4, r0
 810b4fc:	920a      	str	r2, [sp, #40]	; 0x28
 810b4fe:	930d      	str	r3, [sp, #52]	; 0x34
 810b500:	b975      	cbnz	r5, 810b520 <_dtoa_r+0x40>
 810b502:	2010      	movs	r0, #16
 810b504:	f7fe fd3c 	bl	8109f80 <malloc>
 810b508:	4602      	mov	r2, r0
 810b50a:	61e0      	str	r0, [r4, #28]
 810b50c:	b920      	cbnz	r0, 810b518 <_dtoa_r+0x38>
 810b50e:	4bae      	ldr	r3, [pc, #696]	; (810b7c8 <_dtoa_r+0x2e8>)
 810b510:	21ef      	movs	r1, #239	; 0xef
 810b512:	48ae      	ldr	r0, [pc, #696]	; (810b7cc <_dtoa_r+0x2ec>)
 810b514:	f002 fd70 	bl	810dff8 <__assert_func>
 810b518:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810b51c:	6005      	str	r5, [r0, #0]
 810b51e:	60c5      	str	r5, [r0, #12]
 810b520:	69e3      	ldr	r3, [r4, #28]
 810b522:	6819      	ldr	r1, [r3, #0]
 810b524:	b151      	cbz	r1, 810b53c <_dtoa_r+0x5c>
 810b526:	685a      	ldr	r2, [r3, #4]
 810b528:	604a      	str	r2, [r1, #4]
 810b52a:	2301      	movs	r3, #1
 810b52c:	4093      	lsls	r3, r2
 810b52e:	608b      	str	r3, [r1, #8]
 810b530:	4620      	mov	r0, r4
 810b532:	f000 fe53 	bl	810c1dc <_Bfree>
 810b536:	69e3      	ldr	r3, [r4, #28]
 810b538:	2200      	movs	r2, #0
 810b53a:	601a      	str	r2, [r3, #0]
 810b53c:	1e3b      	subs	r3, r7, #0
 810b53e:	bfbb      	ittet	lt
 810b540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810b544:	9303      	strlt	r3, [sp, #12]
 810b546:	2300      	movge	r3, #0
 810b548:	2201      	movlt	r2, #1
 810b54a:	bfac      	ite	ge
 810b54c:	f8c8 3000 	strge.w	r3, [r8]
 810b550:	f8c8 2000 	strlt.w	r2, [r8]
 810b554:	4b9e      	ldr	r3, [pc, #632]	; (810b7d0 <_dtoa_r+0x2f0>)
 810b556:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810b55a:	ea33 0308 	bics.w	r3, r3, r8
 810b55e:	d11b      	bne.n	810b598 <_dtoa_r+0xb8>
 810b560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b562:	f242 730f 	movw	r3, #9999	; 0x270f
 810b566:	6013      	str	r3, [r2, #0]
 810b568:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810b56c:	4333      	orrs	r3, r6
 810b56e:	f000 8593 	beq.w	810c098 <_dtoa_r+0xbb8>
 810b572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b574:	b963      	cbnz	r3, 810b590 <_dtoa_r+0xb0>
 810b576:	4b97      	ldr	r3, [pc, #604]	; (810b7d4 <_dtoa_r+0x2f4>)
 810b578:	e027      	b.n	810b5ca <_dtoa_r+0xea>
 810b57a:	4b97      	ldr	r3, [pc, #604]	; (810b7d8 <_dtoa_r+0x2f8>)
 810b57c:	9300      	str	r3, [sp, #0]
 810b57e:	3308      	adds	r3, #8
 810b580:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810b582:	6013      	str	r3, [r2, #0]
 810b584:	9800      	ldr	r0, [sp, #0]
 810b586:	b013      	add	sp, #76	; 0x4c
 810b588:	ecbd 8b04 	vpop	{d8-d9}
 810b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b590:	4b90      	ldr	r3, [pc, #576]	; (810b7d4 <_dtoa_r+0x2f4>)
 810b592:	9300      	str	r3, [sp, #0]
 810b594:	3303      	adds	r3, #3
 810b596:	e7f3      	b.n	810b580 <_dtoa_r+0xa0>
 810b598:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b59c:	2200      	movs	r2, #0
 810b59e:	ec51 0b17 	vmov	r0, r1, d7
 810b5a2:	eeb0 8a47 	vmov.f32	s16, s14
 810b5a6:	eef0 8a67 	vmov.f32	s17, s15
 810b5aa:	2300      	movs	r3, #0
 810b5ac:	f7f5 fb14 	bl	8100bd8 <__aeabi_dcmpeq>
 810b5b0:	4681      	mov	r9, r0
 810b5b2:	b160      	cbz	r0, 810b5ce <_dtoa_r+0xee>
 810b5b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b5b6:	2301      	movs	r3, #1
 810b5b8:	6013      	str	r3, [r2, #0]
 810b5ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b5bc:	2b00      	cmp	r3, #0
 810b5be:	f000 8568 	beq.w	810c092 <_dtoa_r+0xbb2>
 810b5c2:	4b86      	ldr	r3, [pc, #536]	; (810b7dc <_dtoa_r+0x2fc>)
 810b5c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810b5c6:	6013      	str	r3, [r2, #0]
 810b5c8:	3b01      	subs	r3, #1
 810b5ca:	9300      	str	r3, [sp, #0]
 810b5cc:	e7da      	b.n	810b584 <_dtoa_r+0xa4>
 810b5ce:	aa10      	add	r2, sp, #64	; 0x40
 810b5d0:	a911      	add	r1, sp, #68	; 0x44
 810b5d2:	4620      	mov	r0, r4
 810b5d4:	eeb0 0a48 	vmov.f32	s0, s16
 810b5d8:	eef0 0a68 	vmov.f32	s1, s17
 810b5dc:	f001 f99a 	bl	810c914 <__d2b>
 810b5e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810b5e4:	4682      	mov	sl, r0
 810b5e6:	2d00      	cmp	r5, #0
 810b5e8:	d07f      	beq.n	810b6ea <_dtoa_r+0x20a>
 810b5ea:	ee18 3a90 	vmov	r3, s17
 810b5ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b5f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810b5f6:	ec51 0b18 	vmov	r0, r1, d8
 810b5fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b5fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810b602:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810b606:	4619      	mov	r1, r3
 810b608:	2200      	movs	r2, #0
 810b60a:	4b75      	ldr	r3, [pc, #468]	; (810b7e0 <_dtoa_r+0x300>)
 810b60c:	f7f4 fec4 	bl	8100398 <__aeabi_dsub>
 810b610:	a367      	add	r3, pc, #412	; (adr r3, 810b7b0 <_dtoa_r+0x2d0>)
 810b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b616:	f7f5 f877 	bl	8100708 <__aeabi_dmul>
 810b61a:	a367      	add	r3, pc, #412	; (adr r3, 810b7b8 <_dtoa_r+0x2d8>)
 810b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b620:	f7f4 febc 	bl	810039c <__adddf3>
 810b624:	4606      	mov	r6, r0
 810b626:	4628      	mov	r0, r5
 810b628:	460f      	mov	r7, r1
 810b62a:	f7f5 f803 	bl	8100634 <__aeabi_i2d>
 810b62e:	a364      	add	r3, pc, #400	; (adr r3, 810b7c0 <_dtoa_r+0x2e0>)
 810b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b634:	f7f5 f868 	bl	8100708 <__aeabi_dmul>
 810b638:	4602      	mov	r2, r0
 810b63a:	460b      	mov	r3, r1
 810b63c:	4630      	mov	r0, r6
 810b63e:	4639      	mov	r1, r7
 810b640:	f7f4 feac 	bl	810039c <__adddf3>
 810b644:	4606      	mov	r6, r0
 810b646:	460f      	mov	r7, r1
 810b648:	f7f5 fb0e 	bl	8100c68 <__aeabi_d2iz>
 810b64c:	2200      	movs	r2, #0
 810b64e:	4683      	mov	fp, r0
 810b650:	2300      	movs	r3, #0
 810b652:	4630      	mov	r0, r6
 810b654:	4639      	mov	r1, r7
 810b656:	f7f5 fac9 	bl	8100bec <__aeabi_dcmplt>
 810b65a:	b148      	cbz	r0, 810b670 <_dtoa_r+0x190>
 810b65c:	4658      	mov	r0, fp
 810b65e:	f7f4 ffe9 	bl	8100634 <__aeabi_i2d>
 810b662:	4632      	mov	r2, r6
 810b664:	463b      	mov	r3, r7
 810b666:	f7f5 fab7 	bl	8100bd8 <__aeabi_dcmpeq>
 810b66a:	b908      	cbnz	r0, 810b670 <_dtoa_r+0x190>
 810b66c:	f10b 3bff 	add.w	fp, fp, #4294967295
 810b670:	f1bb 0f16 	cmp.w	fp, #22
 810b674:	d857      	bhi.n	810b726 <_dtoa_r+0x246>
 810b676:	4b5b      	ldr	r3, [pc, #364]	; (810b7e4 <_dtoa_r+0x304>)
 810b678:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b680:	ec51 0b18 	vmov	r0, r1, d8
 810b684:	f7f5 fab2 	bl	8100bec <__aeabi_dcmplt>
 810b688:	2800      	cmp	r0, #0
 810b68a:	d04e      	beq.n	810b72a <_dtoa_r+0x24a>
 810b68c:	f10b 3bff 	add.w	fp, fp, #4294967295
 810b690:	2300      	movs	r3, #0
 810b692:	930c      	str	r3, [sp, #48]	; 0x30
 810b694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b696:	1b5b      	subs	r3, r3, r5
 810b698:	1e5a      	subs	r2, r3, #1
 810b69a:	bf45      	ittet	mi
 810b69c:	f1c3 0301 	rsbmi	r3, r3, #1
 810b6a0:	9305      	strmi	r3, [sp, #20]
 810b6a2:	2300      	movpl	r3, #0
 810b6a4:	2300      	movmi	r3, #0
 810b6a6:	9206      	str	r2, [sp, #24]
 810b6a8:	bf54      	ite	pl
 810b6aa:	9305      	strpl	r3, [sp, #20]
 810b6ac:	9306      	strmi	r3, [sp, #24]
 810b6ae:	f1bb 0f00 	cmp.w	fp, #0
 810b6b2:	db3c      	blt.n	810b72e <_dtoa_r+0x24e>
 810b6b4:	9b06      	ldr	r3, [sp, #24]
 810b6b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810b6ba:	445b      	add	r3, fp
 810b6bc:	9306      	str	r3, [sp, #24]
 810b6be:	2300      	movs	r3, #0
 810b6c0:	9308      	str	r3, [sp, #32]
 810b6c2:	9b07      	ldr	r3, [sp, #28]
 810b6c4:	2b09      	cmp	r3, #9
 810b6c6:	d868      	bhi.n	810b79a <_dtoa_r+0x2ba>
 810b6c8:	2b05      	cmp	r3, #5
 810b6ca:	bfc4      	itt	gt
 810b6cc:	3b04      	subgt	r3, #4
 810b6ce:	9307      	strgt	r3, [sp, #28]
 810b6d0:	9b07      	ldr	r3, [sp, #28]
 810b6d2:	f1a3 0302 	sub.w	r3, r3, #2
 810b6d6:	bfcc      	ite	gt
 810b6d8:	2500      	movgt	r5, #0
 810b6da:	2501      	movle	r5, #1
 810b6dc:	2b03      	cmp	r3, #3
 810b6de:	f200 8085 	bhi.w	810b7ec <_dtoa_r+0x30c>
 810b6e2:	e8df f003 	tbb	[pc, r3]
 810b6e6:	3b2e      	.short	0x3b2e
 810b6e8:	5839      	.short	0x5839
 810b6ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b6ee:	441d      	add	r5, r3
 810b6f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b6f4:	2b20      	cmp	r3, #32
 810b6f6:	bfc1      	itttt	gt
 810b6f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b6fc:	fa08 f803 	lslgt.w	r8, r8, r3
 810b700:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810b704:	fa26 f303 	lsrgt.w	r3, r6, r3
 810b708:	bfd6      	itet	le
 810b70a:	f1c3 0320 	rsble	r3, r3, #32
 810b70e:	ea48 0003 	orrgt.w	r0, r8, r3
 810b712:	fa06 f003 	lslle.w	r0, r6, r3
 810b716:	f7f4 ff7d 	bl	8100614 <__aeabi_ui2d>
 810b71a:	2201      	movs	r2, #1
 810b71c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810b720:	3d01      	subs	r5, #1
 810b722:	920e      	str	r2, [sp, #56]	; 0x38
 810b724:	e76f      	b.n	810b606 <_dtoa_r+0x126>
 810b726:	2301      	movs	r3, #1
 810b728:	e7b3      	b.n	810b692 <_dtoa_r+0x1b2>
 810b72a:	900c      	str	r0, [sp, #48]	; 0x30
 810b72c:	e7b2      	b.n	810b694 <_dtoa_r+0x1b4>
 810b72e:	9b05      	ldr	r3, [sp, #20]
 810b730:	eba3 030b 	sub.w	r3, r3, fp
 810b734:	9305      	str	r3, [sp, #20]
 810b736:	f1cb 0300 	rsb	r3, fp, #0
 810b73a:	9308      	str	r3, [sp, #32]
 810b73c:	2300      	movs	r3, #0
 810b73e:	930b      	str	r3, [sp, #44]	; 0x2c
 810b740:	e7bf      	b.n	810b6c2 <_dtoa_r+0x1e2>
 810b742:	2300      	movs	r3, #0
 810b744:	9309      	str	r3, [sp, #36]	; 0x24
 810b746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b748:	2b00      	cmp	r3, #0
 810b74a:	dc52      	bgt.n	810b7f2 <_dtoa_r+0x312>
 810b74c:	2301      	movs	r3, #1
 810b74e:	9301      	str	r3, [sp, #4]
 810b750:	9304      	str	r3, [sp, #16]
 810b752:	461a      	mov	r2, r3
 810b754:	920a      	str	r2, [sp, #40]	; 0x28
 810b756:	e00b      	b.n	810b770 <_dtoa_r+0x290>
 810b758:	2301      	movs	r3, #1
 810b75a:	e7f3      	b.n	810b744 <_dtoa_r+0x264>
 810b75c:	2300      	movs	r3, #0
 810b75e:	9309      	str	r3, [sp, #36]	; 0x24
 810b760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b762:	445b      	add	r3, fp
 810b764:	9301      	str	r3, [sp, #4]
 810b766:	3301      	adds	r3, #1
 810b768:	2b01      	cmp	r3, #1
 810b76a:	9304      	str	r3, [sp, #16]
 810b76c:	bfb8      	it	lt
 810b76e:	2301      	movlt	r3, #1
 810b770:	69e0      	ldr	r0, [r4, #28]
 810b772:	2100      	movs	r1, #0
 810b774:	2204      	movs	r2, #4
 810b776:	f102 0614 	add.w	r6, r2, #20
 810b77a:	429e      	cmp	r6, r3
 810b77c:	d93d      	bls.n	810b7fa <_dtoa_r+0x31a>
 810b77e:	6041      	str	r1, [r0, #4]
 810b780:	4620      	mov	r0, r4
 810b782:	f000 fceb 	bl	810c15c <_Balloc>
 810b786:	9000      	str	r0, [sp, #0]
 810b788:	2800      	cmp	r0, #0
 810b78a:	d139      	bne.n	810b800 <_dtoa_r+0x320>
 810b78c:	4b16      	ldr	r3, [pc, #88]	; (810b7e8 <_dtoa_r+0x308>)
 810b78e:	4602      	mov	r2, r0
 810b790:	f240 11af 	movw	r1, #431	; 0x1af
 810b794:	e6bd      	b.n	810b512 <_dtoa_r+0x32>
 810b796:	2301      	movs	r3, #1
 810b798:	e7e1      	b.n	810b75e <_dtoa_r+0x27e>
 810b79a:	2501      	movs	r5, #1
 810b79c:	2300      	movs	r3, #0
 810b79e:	9307      	str	r3, [sp, #28]
 810b7a0:	9509      	str	r5, [sp, #36]	; 0x24
 810b7a2:	f04f 33ff 	mov.w	r3, #4294967295
 810b7a6:	9301      	str	r3, [sp, #4]
 810b7a8:	9304      	str	r3, [sp, #16]
 810b7aa:	2200      	movs	r2, #0
 810b7ac:	2312      	movs	r3, #18
 810b7ae:	e7d1      	b.n	810b754 <_dtoa_r+0x274>
 810b7b0:	636f4361 	.word	0x636f4361
 810b7b4:	3fd287a7 	.word	0x3fd287a7
 810b7b8:	8b60c8b3 	.word	0x8b60c8b3
 810b7bc:	3fc68a28 	.word	0x3fc68a28
 810b7c0:	509f79fb 	.word	0x509f79fb
 810b7c4:	3fd34413 	.word	0x3fd34413
 810b7c8:	081e67be 	.word	0x081e67be
 810b7cc:	081e67d5 	.word	0x081e67d5
 810b7d0:	7ff00000 	.word	0x7ff00000
 810b7d4:	081e67ba 	.word	0x081e67ba
 810b7d8:	081e67b1 	.word	0x081e67b1
 810b7dc:	081e6789 	.word	0x081e6789
 810b7e0:	3ff80000 	.word	0x3ff80000
 810b7e4:	081e68c0 	.word	0x081e68c0
 810b7e8:	081e682d 	.word	0x081e682d
 810b7ec:	2301      	movs	r3, #1
 810b7ee:	9309      	str	r3, [sp, #36]	; 0x24
 810b7f0:	e7d7      	b.n	810b7a2 <_dtoa_r+0x2c2>
 810b7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b7f4:	9301      	str	r3, [sp, #4]
 810b7f6:	9304      	str	r3, [sp, #16]
 810b7f8:	e7ba      	b.n	810b770 <_dtoa_r+0x290>
 810b7fa:	3101      	adds	r1, #1
 810b7fc:	0052      	lsls	r2, r2, #1
 810b7fe:	e7ba      	b.n	810b776 <_dtoa_r+0x296>
 810b800:	69e3      	ldr	r3, [r4, #28]
 810b802:	9a00      	ldr	r2, [sp, #0]
 810b804:	601a      	str	r2, [r3, #0]
 810b806:	9b04      	ldr	r3, [sp, #16]
 810b808:	2b0e      	cmp	r3, #14
 810b80a:	f200 80a8 	bhi.w	810b95e <_dtoa_r+0x47e>
 810b80e:	2d00      	cmp	r5, #0
 810b810:	f000 80a5 	beq.w	810b95e <_dtoa_r+0x47e>
 810b814:	f1bb 0f00 	cmp.w	fp, #0
 810b818:	dd38      	ble.n	810b88c <_dtoa_r+0x3ac>
 810b81a:	4bc0      	ldr	r3, [pc, #768]	; (810bb1c <_dtoa_r+0x63c>)
 810b81c:	f00b 020f 	and.w	r2, fp, #15
 810b820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b824:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810b828:	e9d3 6700 	ldrd	r6, r7, [r3]
 810b82c:	ea4f 182b 	mov.w	r8, fp, asr #4
 810b830:	d019      	beq.n	810b866 <_dtoa_r+0x386>
 810b832:	4bbb      	ldr	r3, [pc, #748]	; (810bb20 <_dtoa_r+0x640>)
 810b834:	ec51 0b18 	vmov	r0, r1, d8
 810b838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b83c:	f7f5 f88e 	bl	810095c <__aeabi_ddiv>
 810b840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b844:	f008 080f 	and.w	r8, r8, #15
 810b848:	2503      	movs	r5, #3
 810b84a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810bb20 <_dtoa_r+0x640>
 810b84e:	f1b8 0f00 	cmp.w	r8, #0
 810b852:	d10a      	bne.n	810b86a <_dtoa_r+0x38a>
 810b854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b858:	4632      	mov	r2, r6
 810b85a:	463b      	mov	r3, r7
 810b85c:	f7f5 f87e 	bl	810095c <__aeabi_ddiv>
 810b860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b864:	e02b      	b.n	810b8be <_dtoa_r+0x3de>
 810b866:	2502      	movs	r5, #2
 810b868:	e7ef      	b.n	810b84a <_dtoa_r+0x36a>
 810b86a:	f018 0f01 	tst.w	r8, #1
 810b86e:	d008      	beq.n	810b882 <_dtoa_r+0x3a2>
 810b870:	4630      	mov	r0, r6
 810b872:	4639      	mov	r1, r7
 810b874:	e9d9 2300 	ldrd	r2, r3, [r9]
 810b878:	f7f4 ff46 	bl	8100708 <__aeabi_dmul>
 810b87c:	3501      	adds	r5, #1
 810b87e:	4606      	mov	r6, r0
 810b880:	460f      	mov	r7, r1
 810b882:	ea4f 0868 	mov.w	r8, r8, asr #1
 810b886:	f109 0908 	add.w	r9, r9, #8
 810b88a:	e7e0      	b.n	810b84e <_dtoa_r+0x36e>
 810b88c:	f000 809f 	beq.w	810b9ce <_dtoa_r+0x4ee>
 810b890:	f1cb 0600 	rsb	r6, fp, #0
 810b894:	4ba1      	ldr	r3, [pc, #644]	; (810bb1c <_dtoa_r+0x63c>)
 810b896:	4fa2      	ldr	r7, [pc, #648]	; (810bb20 <_dtoa_r+0x640>)
 810b898:	f006 020f 	and.w	r2, r6, #15
 810b89c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b8a4:	ec51 0b18 	vmov	r0, r1, d8
 810b8a8:	f7f4 ff2e 	bl	8100708 <__aeabi_dmul>
 810b8ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b8b0:	1136      	asrs	r6, r6, #4
 810b8b2:	2300      	movs	r3, #0
 810b8b4:	2502      	movs	r5, #2
 810b8b6:	2e00      	cmp	r6, #0
 810b8b8:	d17e      	bne.n	810b9b8 <_dtoa_r+0x4d8>
 810b8ba:	2b00      	cmp	r3, #0
 810b8bc:	d1d0      	bne.n	810b860 <_dtoa_r+0x380>
 810b8be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b8c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b8c4:	2b00      	cmp	r3, #0
 810b8c6:	f000 8084 	beq.w	810b9d2 <_dtoa_r+0x4f2>
 810b8ca:	4b96      	ldr	r3, [pc, #600]	; (810bb24 <_dtoa_r+0x644>)
 810b8cc:	2200      	movs	r2, #0
 810b8ce:	4640      	mov	r0, r8
 810b8d0:	4649      	mov	r1, r9
 810b8d2:	f7f5 f98b 	bl	8100bec <__aeabi_dcmplt>
 810b8d6:	2800      	cmp	r0, #0
 810b8d8:	d07b      	beq.n	810b9d2 <_dtoa_r+0x4f2>
 810b8da:	9b04      	ldr	r3, [sp, #16]
 810b8dc:	2b00      	cmp	r3, #0
 810b8de:	d078      	beq.n	810b9d2 <_dtoa_r+0x4f2>
 810b8e0:	9b01      	ldr	r3, [sp, #4]
 810b8e2:	2b00      	cmp	r3, #0
 810b8e4:	dd39      	ble.n	810b95a <_dtoa_r+0x47a>
 810b8e6:	4b90      	ldr	r3, [pc, #576]	; (810bb28 <_dtoa_r+0x648>)
 810b8e8:	2200      	movs	r2, #0
 810b8ea:	4640      	mov	r0, r8
 810b8ec:	4649      	mov	r1, r9
 810b8ee:	f7f4 ff0b 	bl	8100708 <__aeabi_dmul>
 810b8f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b8f6:	9e01      	ldr	r6, [sp, #4]
 810b8f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 810b8fc:	3501      	adds	r5, #1
 810b8fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b902:	4628      	mov	r0, r5
 810b904:	f7f4 fe96 	bl	8100634 <__aeabi_i2d>
 810b908:	4642      	mov	r2, r8
 810b90a:	464b      	mov	r3, r9
 810b90c:	f7f4 fefc 	bl	8100708 <__aeabi_dmul>
 810b910:	4b86      	ldr	r3, [pc, #536]	; (810bb2c <_dtoa_r+0x64c>)
 810b912:	2200      	movs	r2, #0
 810b914:	f7f4 fd42 	bl	810039c <__adddf3>
 810b918:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810b91c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b920:	9303      	str	r3, [sp, #12]
 810b922:	2e00      	cmp	r6, #0
 810b924:	d158      	bne.n	810b9d8 <_dtoa_r+0x4f8>
 810b926:	4b82      	ldr	r3, [pc, #520]	; (810bb30 <_dtoa_r+0x650>)
 810b928:	2200      	movs	r2, #0
 810b92a:	4640      	mov	r0, r8
 810b92c:	4649      	mov	r1, r9
 810b92e:	f7f4 fd33 	bl	8100398 <__aeabi_dsub>
 810b932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b936:	4680      	mov	r8, r0
 810b938:	4689      	mov	r9, r1
 810b93a:	f7f5 f975 	bl	8100c28 <__aeabi_dcmpgt>
 810b93e:	2800      	cmp	r0, #0
 810b940:	f040 8296 	bne.w	810be70 <_dtoa_r+0x990>
 810b944:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810b948:	4640      	mov	r0, r8
 810b94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b94e:	4649      	mov	r1, r9
 810b950:	f7f5 f94c 	bl	8100bec <__aeabi_dcmplt>
 810b954:	2800      	cmp	r0, #0
 810b956:	f040 8289 	bne.w	810be6c <_dtoa_r+0x98c>
 810b95a:	ed8d 8b02 	vstr	d8, [sp, #8]
 810b95e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b960:	2b00      	cmp	r3, #0
 810b962:	f2c0 814e 	blt.w	810bc02 <_dtoa_r+0x722>
 810b966:	f1bb 0f0e 	cmp.w	fp, #14
 810b96a:	f300 814a 	bgt.w	810bc02 <_dtoa_r+0x722>
 810b96e:	4b6b      	ldr	r3, [pc, #428]	; (810bb1c <_dtoa_r+0x63c>)
 810b970:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b974:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b97a:	2b00      	cmp	r3, #0
 810b97c:	f280 80dc 	bge.w	810bb38 <_dtoa_r+0x658>
 810b980:	9b04      	ldr	r3, [sp, #16]
 810b982:	2b00      	cmp	r3, #0
 810b984:	f300 80d8 	bgt.w	810bb38 <_dtoa_r+0x658>
 810b988:	f040 826f 	bne.w	810be6a <_dtoa_r+0x98a>
 810b98c:	4b68      	ldr	r3, [pc, #416]	; (810bb30 <_dtoa_r+0x650>)
 810b98e:	2200      	movs	r2, #0
 810b990:	4640      	mov	r0, r8
 810b992:	4649      	mov	r1, r9
 810b994:	f7f4 feb8 	bl	8100708 <__aeabi_dmul>
 810b998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b99c:	f7f5 f93a 	bl	8100c14 <__aeabi_dcmpge>
 810b9a0:	9e04      	ldr	r6, [sp, #16]
 810b9a2:	4637      	mov	r7, r6
 810b9a4:	2800      	cmp	r0, #0
 810b9a6:	f040 8245 	bne.w	810be34 <_dtoa_r+0x954>
 810b9aa:	9d00      	ldr	r5, [sp, #0]
 810b9ac:	2331      	movs	r3, #49	; 0x31
 810b9ae:	f805 3b01 	strb.w	r3, [r5], #1
 810b9b2:	f10b 0b01 	add.w	fp, fp, #1
 810b9b6:	e241      	b.n	810be3c <_dtoa_r+0x95c>
 810b9b8:	07f2      	lsls	r2, r6, #31
 810b9ba:	d505      	bpl.n	810b9c8 <_dtoa_r+0x4e8>
 810b9bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b9c0:	f7f4 fea2 	bl	8100708 <__aeabi_dmul>
 810b9c4:	3501      	adds	r5, #1
 810b9c6:	2301      	movs	r3, #1
 810b9c8:	1076      	asrs	r6, r6, #1
 810b9ca:	3708      	adds	r7, #8
 810b9cc:	e773      	b.n	810b8b6 <_dtoa_r+0x3d6>
 810b9ce:	2502      	movs	r5, #2
 810b9d0:	e775      	b.n	810b8be <_dtoa_r+0x3de>
 810b9d2:	9e04      	ldr	r6, [sp, #16]
 810b9d4:	465f      	mov	r7, fp
 810b9d6:	e792      	b.n	810b8fe <_dtoa_r+0x41e>
 810b9d8:	9900      	ldr	r1, [sp, #0]
 810b9da:	4b50      	ldr	r3, [pc, #320]	; (810bb1c <_dtoa_r+0x63c>)
 810b9dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b9e0:	4431      	add	r1, r6
 810b9e2:	9102      	str	r1, [sp, #8]
 810b9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b9e6:	eeb0 9a47 	vmov.f32	s18, s14
 810b9ea:	eef0 9a67 	vmov.f32	s19, s15
 810b9ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b9f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b9f6:	2900      	cmp	r1, #0
 810b9f8:	d044      	beq.n	810ba84 <_dtoa_r+0x5a4>
 810b9fa:	494e      	ldr	r1, [pc, #312]	; (810bb34 <_dtoa_r+0x654>)
 810b9fc:	2000      	movs	r0, #0
 810b9fe:	f7f4 ffad 	bl	810095c <__aeabi_ddiv>
 810ba02:	ec53 2b19 	vmov	r2, r3, d9
 810ba06:	f7f4 fcc7 	bl	8100398 <__aeabi_dsub>
 810ba0a:	9d00      	ldr	r5, [sp, #0]
 810ba0c:	ec41 0b19 	vmov	d9, r0, r1
 810ba10:	4649      	mov	r1, r9
 810ba12:	4640      	mov	r0, r8
 810ba14:	f7f5 f928 	bl	8100c68 <__aeabi_d2iz>
 810ba18:	4606      	mov	r6, r0
 810ba1a:	f7f4 fe0b 	bl	8100634 <__aeabi_i2d>
 810ba1e:	4602      	mov	r2, r0
 810ba20:	460b      	mov	r3, r1
 810ba22:	4640      	mov	r0, r8
 810ba24:	4649      	mov	r1, r9
 810ba26:	f7f4 fcb7 	bl	8100398 <__aeabi_dsub>
 810ba2a:	3630      	adds	r6, #48	; 0x30
 810ba2c:	f805 6b01 	strb.w	r6, [r5], #1
 810ba30:	ec53 2b19 	vmov	r2, r3, d9
 810ba34:	4680      	mov	r8, r0
 810ba36:	4689      	mov	r9, r1
 810ba38:	f7f5 f8d8 	bl	8100bec <__aeabi_dcmplt>
 810ba3c:	2800      	cmp	r0, #0
 810ba3e:	d164      	bne.n	810bb0a <_dtoa_r+0x62a>
 810ba40:	4642      	mov	r2, r8
 810ba42:	464b      	mov	r3, r9
 810ba44:	4937      	ldr	r1, [pc, #220]	; (810bb24 <_dtoa_r+0x644>)
 810ba46:	2000      	movs	r0, #0
 810ba48:	f7f4 fca6 	bl	8100398 <__aeabi_dsub>
 810ba4c:	ec53 2b19 	vmov	r2, r3, d9
 810ba50:	f7f5 f8cc 	bl	8100bec <__aeabi_dcmplt>
 810ba54:	2800      	cmp	r0, #0
 810ba56:	f040 80b6 	bne.w	810bbc6 <_dtoa_r+0x6e6>
 810ba5a:	9b02      	ldr	r3, [sp, #8]
 810ba5c:	429d      	cmp	r5, r3
 810ba5e:	f43f af7c 	beq.w	810b95a <_dtoa_r+0x47a>
 810ba62:	4b31      	ldr	r3, [pc, #196]	; (810bb28 <_dtoa_r+0x648>)
 810ba64:	ec51 0b19 	vmov	r0, r1, d9
 810ba68:	2200      	movs	r2, #0
 810ba6a:	f7f4 fe4d 	bl	8100708 <__aeabi_dmul>
 810ba6e:	4b2e      	ldr	r3, [pc, #184]	; (810bb28 <_dtoa_r+0x648>)
 810ba70:	ec41 0b19 	vmov	d9, r0, r1
 810ba74:	2200      	movs	r2, #0
 810ba76:	4640      	mov	r0, r8
 810ba78:	4649      	mov	r1, r9
 810ba7a:	f7f4 fe45 	bl	8100708 <__aeabi_dmul>
 810ba7e:	4680      	mov	r8, r0
 810ba80:	4689      	mov	r9, r1
 810ba82:	e7c5      	b.n	810ba10 <_dtoa_r+0x530>
 810ba84:	ec51 0b17 	vmov	r0, r1, d7
 810ba88:	f7f4 fe3e 	bl	8100708 <__aeabi_dmul>
 810ba8c:	9b02      	ldr	r3, [sp, #8]
 810ba8e:	9d00      	ldr	r5, [sp, #0]
 810ba90:	930f      	str	r3, [sp, #60]	; 0x3c
 810ba92:	ec41 0b19 	vmov	d9, r0, r1
 810ba96:	4649      	mov	r1, r9
 810ba98:	4640      	mov	r0, r8
 810ba9a:	f7f5 f8e5 	bl	8100c68 <__aeabi_d2iz>
 810ba9e:	4606      	mov	r6, r0
 810baa0:	f7f4 fdc8 	bl	8100634 <__aeabi_i2d>
 810baa4:	3630      	adds	r6, #48	; 0x30
 810baa6:	4602      	mov	r2, r0
 810baa8:	460b      	mov	r3, r1
 810baaa:	4640      	mov	r0, r8
 810baac:	4649      	mov	r1, r9
 810baae:	f7f4 fc73 	bl	8100398 <__aeabi_dsub>
 810bab2:	f805 6b01 	strb.w	r6, [r5], #1
 810bab6:	9b02      	ldr	r3, [sp, #8]
 810bab8:	429d      	cmp	r5, r3
 810baba:	4680      	mov	r8, r0
 810babc:	4689      	mov	r9, r1
 810babe:	f04f 0200 	mov.w	r2, #0
 810bac2:	d124      	bne.n	810bb0e <_dtoa_r+0x62e>
 810bac4:	4b1b      	ldr	r3, [pc, #108]	; (810bb34 <_dtoa_r+0x654>)
 810bac6:	ec51 0b19 	vmov	r0, r1, d9
 810baca:	f7f4 fc67 	bl	810039c <__adddf3>
 810bace:	4602      	mov	r2, r0
 810bad0:	460b      	mov	r3, r1
 810bad2:	4640      	mov	r0, r8
 810bad4:	4649      	mov	r1, r9
 810bad6:	f7f5 f8a7 	bl	8100c28 <__aeabi_dcmpgt>
 810bada:	2800      	cmp	r0, #0
 810badc:	d173      	bne.n	810bbc6 <_dtoa_r+0x6e6>
 810bade:	ec53 2b19 	vmov	r2, r3, d9
 810bae2:	4914      	ldr	r1, [pc, #80]	; (810bb34 <_dtoa_r+0x654>)
 810bae4:	2000      	movs	r0, #0
 810bae6:	f7f4 fc57 	bl	8100398 <__aeabi_dsub>
 810baea:	4602      	mov	r2, r0
 810baec:	460b      	mov	r3, r1
 810baee:	4640      	mov	r0, r8
 810baf0:	4649      	mov	r1, r9
 810baf2:	f7f5 f87b 	bl	8100bec <__aeabi_dcmplt>
 810baf6:	2800      	cmp	r0, #0
 810baf8:	f43f af2f 	beq.w	810b95a <_dtoa_r+0x47a>
 810bafc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810bafe:	1e6b      	subs	r3, r5, #1
 810bb00:	930f      	str	r3, [sp, #60]	; 0x3c
 810bb02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810bb06:	2b30      	cmp	r3, #48	; 0x30
 810bb08:	d0f8      	beq.n	810bafc <_dtoa_r+0x61c>
 810bb0a:	46bb      	mov	fp, r7
 810bb0c:	e04a      	b.n	810bba4 <_dtoa_r+0x6c4>
 810bb0e:	4b06      	ldr	r3, [pc, #24]	; (810bb28 <_dtoa_r+0x648>)
 810bb10:	f7f4 fdfa 	bl	8100708 <__aeabi_dmul>
 810bb14:	4680      	mov	r8, r0
 810bb16:	4689      	mov	r9, r1
 810bb18:	e7bd      	b.n	810ba96 <_dtoa_r+0x5b6>
 810bb1a:	bf00      	nop
 810bb1c:	081e68c0 	.word	0x081e68c0
 810bb20:	081e6898 	.word	0x081e6898
 810bb24:	3ff00000 	.word	0x3ff00000
 810bb28:	40240000 	.word	0x40240000
 810bb2c:	401c0000 	.word	0x401c0000
 810bb30:	40140000 	.word	0x40140000
 810bb34:	3fe00000 	.word	0x3fe00000
 810bb38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810bb3c:	9d00      	ldr	r5, [sp, #0]
 810bb3e:	4642      	mov	r2, r8
 810bb40:	464b      	mov	r3, r9
 810bb42:	4630      	mov	r0, r6
 810bb44:	4639      	mov	r1, r7
 810bb46:	f7f4 ff09 	bl	810095c <__aeabi_ddiv>
 810bb4a:	f7f5 f88d 	bl	8100c68 <__aeabi_d2iz>
 810bb4e:	9001      	str	r0, [sp, #4]
 810bb50:	f7f4 fd70 	bl	8100634 <__aeabi_i2d>
 810bb54:	4642      	mov	r2, r8
 810bb56:	464b      	mov	r3, r9
 810bb58:	f7f4 fdd6 	bl	8100708 <__aeabi_dmul>
 810bb5c:	4602      	mov	r2, r0
 810bb5e:	460b      	mov	r3, r1
 810bb60:	4630      	mov	r0, r6
 810bb62:	4639      	mov	r1, r7
 810bb64:	f7f4 fc18 	bl	8100398 <__aeabi_dsub>
 810bb68:	9e01      	ldr	r6, [sp, #4]
 810bb6a:	9f04      	ldr	r7, [sp, #16]
 810bb6c:	3630      	adds	r6, #48	; 0x30
 810bb6e:	f805 6b01 	strb.w	r6, [r5], #1
 810bb72:	9e00      	ldr	r6, [sp, #0]
 810bb74:	1bae      	subs	r6, r5, r6
 810bb76:	42b7      	cmp	r7, r6
 810bb78:	4602      	mov	r2, r0
 810bb7a:	460b      	mov	r3, r1
 810bb7c:	d134      	bne.n	810bbe8 <_dtoa_r+0x708>
 810bb7e:	f7f4 fc0d 	bl	810039c <__adddf3>
 810bb82:	4642      	mov	r2, r8
 810bb84:	464b      	mov	r3, r9
 810bb86:	4606      	mov	r6, r0
 810bb88:	460f      	mov	r7, r1
 810bb8a:	f7f5 f84d 	bl	8100c28 <__aeabi_dcmpgt>
 810bb8e:	b9c8      	cbnz	r0, 810bbc4 <_dtoa_r+0x6e4>
 810bb90:	4642      	mov	r2, r8
 810bb92:	464b      	mov	r3, r9
 810bb94:	4630      	mov	r0, r6
 810bb96:	4639      	mov	r1, r7
 810bb98:	f7f5 f81e 	bl	8100bd8 <__aeabi_dcmpeq>
 810bb9c:	b110      	cbz	r0, 810bba4 <_dtoa_r+0x6c4>
 810bb9e:	9b01      	ldr	r3, [sp, #4]
 810bba0:	07db      	lsls	r3, r3, #31
 810bba2:	d40f      	bmi.n	810bbc4 <_dtoa_r+0x6e4>
 810bba4:	4651      	mov	r1, sl
 810bba6:	4620      	mov	r0, r4
 810bba8:	f000 fb18 	bl	810c1dc <_Bfree>
 810bbac:	2300      	movs	r3, #0
 810bbae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810bbb0:	702b      	strb	r3, [r5, #0]
 810bbb2:	f10b 0301 	add.w	r3, fp, #1
 810bbb6:	6013      	str	r3, [r2, #0]
 810bbb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bbba:	2b00      	cmp	r3, #0
 810bbbc:	f43f ace2 	beq.w	810b584 <_dtoa_r+0xa4>
 810bbc0:	601d      	str	r5, [r3, #0]
 810bbc2:	e4df      	b.n	810b584 <_dtoa_r+0xa4>
 810bbc4:	465f      	mov	r7, fp
 810bbc6:	462b      	mov	r3, r5
 810bbc8:	461d      	mov	r5, r3
 810bbca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810bbce:	2a39      	cmp	r2, #57	; 0x39
 810bbd0:	d106      	bne.n	810bbe0 <_dtoa_r+0x700>
 810bbd2:	9a00      	ldr	r2, [sp, #0]
 810bbd4:	429a      	cmp	r2, r3
 810bbd6:	d1f7      	bne.n	810bbc8 <_dtoa_r+0x6e8>
 810bbd8:	9900      	ldr	r1, [sp, #0]
 810bbda:	2230      	movs	r2, #48	; 0x30
 810bbdc:	3701      	adds	r7, #1
 810bbde:	700a      	strb	r2, [r1, #0]
 810bbe0:	781a      	ldrb	r2, [r3, #0]
 810bbe2:	3201      	adds	r2, #1
 810bbe4:	701a      	strb	r2, [r3, #0]
 810bbe6:	e790      	b.n	810bb0a <_dtoa_r+0x62a>
 810bbe8:	4ba3      	ldr	r3, [pc, #652]	; (810be78 <_dtoa_r+0x998>)
 810bbea:	2200      	movs	r2, #0
 810bbec:	f7f4 fd8c 	bl	8100708 <__aeabi_dmul>
 810bbf0:	2200      	movs	r2, #0
 810bbf2:	2300      	movs	r3, #0
 810bbf4:	4606      	mov	r6, r0
 810bbf6:	460f      	mov	r7, r1
 810bbf8:	f7f4 ffee 	bl	8100bd8 <__aeabi_dcmpeq>
 810bbfc:	2800      	cmp	r0, #0
 810bbfe:	d09e      	beq.n	810bb3e <_dtoa_r+0x65e>
 810bc00:	e7d0      	b.n	810bba4 <_dtoa_r+0x6c4>
 810bc02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810bc04:	2a00      	cmp	r2, #0
 810bc06:	f000 80ca 	beq.w	810bd9e <_dtoa_r+0x8be>
 810bc0a:	9a07      	ldr	r2, [sp, #28]
 810bc0c:	2a01      	cmp	r2, #1
 810bc0e:	f300 80ad 	bgt.w	810bd6c <_dtoa_r+0x88c>
 810bc12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810bc14:	2a00      	cmp	r2, #0
 810bc16:	f000 80a5 	beq.w	810bd64 <_dtoa_r+0x884>
 810bc1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810bc1e:	9e08      	ldr	r6, [sp, #32]
 810bc20:	9d05      	ldr	r5, [sp, #20]
 810bc22:	9a05      	ldr	r2, [sp, #20]
 810bc24:	441a      	add	r2, r3
 810bc26:	9205      	str	r2, [sp, #20]
 810bc28:	9a06      	ldr	r2, [sp, #24]
 810bc2a:	2101      	movs	r1, #1
 810bc2c:	441a      	add	r2, r3
 810bc2e:	4620      	mov	r0, r4
 810bc30:	9206      	str	r2, [sp, #24]
 810bc32:	f000 fbd3 	bl	810c3dc <__i2b>
 810bc36:	4607      	mov	r7, r0
 810bc38:	b165      	cbz	r5, 810bc54 <_dtoa_r+0x774>
 810bc3a:	9b06      	ldr	r3, [sp, #24]
 810bc3c:	2b00      	cmp	r3, #0
 810bc3e:	dd09      	ble.n	810bc54 <_dtoa_r+0x774>
 810bc40:	42ab      	cmp	r3, r5
 810bc42:	9a05      	ldr	r2, [sp, #20]
 810bc44:	bfa8      	it	ge
 810bc46:	462b      	movge	r3, r5
 810bc48:	1ad2      	subs	r2, r2, r3
 810bc4a:	9205      	str	r2, [sp, #20]
 810bc4c:	9a06      	ldr	r2, [sp, #24]
 810bc4e:	1aed      	subs	r5, r5, r3
 810bc50:	1ad3      	subs	r3, r2, r3
 810bc52:	9306      	str	r3, [sp, #24]
 810bc54:	9b08      	ldr	r3, [sp, #32]
 810bc56:	b1f3      	cbz	r3, 810bc96 <_dtoa_r+0x7b6>
 810bc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bc5a:	2b00      	cmp	r3, #0
 810bc5c:	f000 80a3 	beq.w	810bda6 <_dtoa_r+0x8c6>
 810bc60:	2e00      	cmp	r6, #0
 810bc62:	dd10      	ble.n	810bc86 <_dtoa_r+0x7a6>
 810bc64:	4639      	mov	r1, r7
 810bc66:	4632      	mov	r2, r6
 810bc68:	4620      	mov	r0, r4
 810bc6a:	f000 fc77 	bl	810c55c <__pow5mult>
 810bc6e:	4652      	mov	r2, sl
 810bc70:	4601      	mov	r1, r0
 810bc72:	4607      	mov	r7, r0
 810bc74:	4620      	mov	r0, r4
 810bc76:	f000 fbc7 	bl	810c408 <__multiply>
 810bc7a:	4651      	mov	r1, sl
 810bc7c:	4680      	mov	r8, r0
 810bc7e:	4620      	mov	r0, r4
 810bc80:	f000 faac 	bl	810c1dc <_Bfree>
 810bc84:	46c2      	mov	sl, r8
 810bc86:	9b08      	ldr	r3, [sp, #32]
 810bc88:	1b9a      	subs	r2, r3, r6
 810bc8a:	d004      	beq.n	810bc96 <_dtoa_r+0x7b6>
 810bc8c:	4651      	mov	r1, sl
 810bc8e:	4620      	mov	r0, r4
 810bc90:	f000 fc64 	bl	810c55c <__pow5mult>
 810bc94:	4682      	mov	sl, r0
 810bc96:	2101      	movs	r1, #1
 810bc98:	4620      	mov	r0, r4
 810bc9a:	f000 fb9f 	bl	810c3dc <__i2b>
 810bc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bca0:	2b00      	cmp	r3, #0
 810bca2:	4606      	mov	r6, r0
 810bca4:	f340 8081 	ble.w	810bdaa <_dtoa_r+0x8ca>
 810bca8:	461a      	mov	r2, r3
 810bcaa:	4601      	mov	r1, r0
 810bcac:	4620      	mov	r0, r4
 810bcae:	f000 fc55 	bl	810c55c <__pow5mult>
 810bcb2:	9b07      	ldr	r3, [sp, #28]
 810bcb4:	2b01      	cmp	r3, #1
 810bcb6:	4606      	mov	r6, r0
 810bcb8:	dd7a      	ble.n	810bdb0 <_dtoa_r+0x8d0>
 810bcba:	f04f 0800 	mov.w	r8, #0
 810bcbe:	6933      	ldr	r3, [r6, #16]
 810bcc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810bcc4:	6918      	ldr	r0, [r3, #16]
 810bcc6:	f000 fb3b 	bl	810c340 <__hi0bits>
 810bcca:	f1c0 0020 	rsb	r0, r0, #32
 810bcce:	9b06      	ldr	r3, [sp, #24]
 810bcd0:	4418      	add	r0, r3
 810bcd2:	f010 001f 	ands.w	r0, r0, #31
 810bcd6:	f000 8094 	beq.w	810be02 <_dtoa_r+0x922>
 810bcda:	f1c0 0320 	rsb	r3, r0, #32
 810bcde:	2b04      	cmp	r3, #4
 810bce0:	f340 8085 	ble.w	810bdee <_dtoa_r+0x90e>
 810bce4:	9b05      	ldr	r3, [sp, #20]
 810bce6:	f1c0 001c 	rsb	r0, r0, #28
 810bcea:	4403      	add	r3, r0
 810bcec:	9305      	str	r3, [sp, #20]
 810bcee:	9b06      	ldr	r3, [sp, #24]
 810bcf0:	4403      	add	r3, r0
 810bcf2:	4405      	add	r5, r0
 810bcf4:	9306      	str	r3, [sp, #24]
 810bcf6:	9b05      	ldr	r3, [sp, #20]
 810bcf8:	2b00      	cmp	r3, #0
 810bcfa:	dd05      	ble.n	810bd08 <_dtoa_r+0x828>
 810bcfc:	4651      	mov	r1, sl
 810bcfe:	461a      	mov	r2, r3
 810bd00:	4620      	mov	r0, r4
 810bd02:	f000 fc85 	bl	810c610 <__lshift>
 810bd06:	4682      	mov	sl, r0
 810bd08:	9b06      	ldr	r3, [sp, #24]
 810bd0a:	2b00      	cmp	r3, #0
 810bd0c:	dd05      	ble.n	810bd1a <_dtoa_r+0x83a>
 810bd0e:	4631      	mov	r1, r6
 810bd10:	461a      	mov	r2, r3
 810bd12:	4620      	mov	r0, r4
 810bd14:	f000 fc7c 	bl	810c610 <__lshift>
 810bd18:	4606      	mov	r6, r0
 810bd1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bd1c:	2b00      	cmp	r3, #0
 810bd1e:	d072      	beq.n	810be06 <_dtoa_r+0x926>
 810bd20:	4631      	mov	r1, r6
 810bd22:	4650      	mov	r0, sl
 810bd24:	f000 fce0 	bl	810c6e8 <__mcmp>
 810bd28:	2800      	cmp	r0, #0
 810bd2a:	da6c      	bge.n	810be06 <_dtoa_r+0x926>
 810bd2c:	2300      	movs	r3, #0
 810bd2e:	4651      	mov	r1, sl
 810bd30:	220a      	movs	r2, #10
 810bd32:	4620      	mov	r0, r4
 810bd34:	f000 fa74 	bl	810c220 <__multadd>
 810bd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bd3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 810bd3e:	4682      	mov	sl, r0
 810bd40:	2b00      	cmp	r3, #0
 810bd42:	f000 81b0 	beq.w	810c0a6 <_dtoa_r+0xbc6>
 810bd46:	2300      	movs	r3, #0
 810bd48:	4639      	mov	r1, r7
 810bd4a:	220a      	movs	r2, #10
 810bd4c:	4620      	mov	r0, r4
 810bd4e:	f000 fa67 	bl	810c220 <__multadd>
 810bd52:	9b01      	ldr	r3, [sp, #4]
 810bd54:	2b00      	cmp	r3, #0
 810bd56:	4607      	mov	r7, r0
 810bd58:	f300 8096 	bgt.w	810be88 <_dtoa_r+0x9a8>
 810bd5c:	9b07      	ldr	r3, [sp, #28]
 810bd5e:	2b02      	cmp	r3, #2
 810bd60:	dc59      	bgt.n	810be16 <_dtoa_r+0x936>
 810bd62:	e091      	b.n	810be88 <_dtoa_r+0x9a8>
 810bd64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810bd66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810bd6a:	e758      	b.n	810bc1e <_dtoa_r+0x73e>
 810bd6c:	9b04      	ldr	r3, [sp, #16]
 810bd6e:	1e5e      	subs	r6, r3, #1
 810bd70:	9b08      	ldr	r3, [sp, #32]
 810bd72:	42b3      	cmp	r3, r6
 810bd74:	bfbf      	itttt	lt
 810bd76:	9b08      	ldrlt	r3, [sp, #32]
 810bd78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810bd7a:	9608      	strlt	r6, [sp, #32]
 810bd7c:	1af3      	sublt	r3, r6, r3
 810bd7e:	bfb4      	ite	lt
 810bd80:	18d2      	addlt	r2, r2, r3
 810bd82:	1b9e      	subge	r6, r3, r6
 810bd84:	9b04      	ldr	r3, [sp, #16]
 810bd86:	bfbc      	itt	lt
 810bd88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810bd8a:	2600      	movlt	r6, #0
 810bd8c:	2b00      	cmp	r3, #0
 810bd8e:	bfb7      	itett	lt
 810bd90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810bd94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810bd98:	1a9d      	sublt	r5, r3, r2
 810bd9a:	2300      	movlt	r3, #0
 810bd9c:	e741      	b.n	810bc22 <_dtoa_r+0x742>
 810bd9e:	9e08      	ldr	r6, [sp, #32]
 810bda0:	9d05      	ldr	r5, [sp, #20]
 810bda2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810bda4:	e748      	b.n	810bc38 <_dtoa_r+0x758>
 810bda6:	9a08      	ldr	r2, [sp, #32]
 810bda8:	e770      	b.n	810bc8c <_dtoa_r+0x7ac>
 810bdaa:	9b07      	ldr	r3, [sp, #28]
 810bdac:	2b01      	cmp	r3, #1
 810bdae:	dc19      	bgt.n	810bde4 <_dtoa_r+0x904>
 810bdb0:	9b02      	ldr	r3, [sp, #8]
 810bdb2:	b9bb      	cbnz	r3, 810bde4 <_dtoa_r+0x904>
 810bdb4:	9b03      	ldr	r3, [sp, #12]
 810bdb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810bdba:	b99b      	cbnz	r3, 810bde4 <_dtoa_r+0x904>
 810bdbc:	9b03      	ldr	r3, [sp, #12]
 810bdbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810bdc2:	0d1b      	lsrs	r3, r3, #20
 810bdc4:	051b      	lsls	r3, r3, #20
 810bdc6:	b183      	cbz	r3, 810bdea <_dtoa_r+0x90a>
 810bdc8:	9b05      	ldr	r3, [sp, #20]
 810bdca:	3301      	adds	r3, #1
 810bdcc:	9305      	str	r3, [sp, #20]
 810bdce:	9b06      	ldr	r3, [sp, #24]
 810bdd0:	3301      	adds	r3, #1
 810bdd2:	9306      	str	r3, [sp, #24]
 810bdd4:	f04f 0801 	mov.w	r8, #1
 810bdd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bdda:	2b00      	cmp	r3, #0
 810bddc:	f47f af6f 	bne.w	810bcbe <_dtoa_r+0x7de>
 810bde0:	2001      	movs	r0, #1
 810bde2:	e774      	b.n	810bcce <_dtoa_r+0x7ee>
 810bde4:	f04f 0800 	mov.w	r8, #0
 810bde8:	e7f6      	b.n	810bdd8 <_dtoa_r+0x8f8>
 810bdea:	4698      	mov	r8, r3
 810bdec:	e7f4      	b.n	810bdd8 <_dtoa_r+0x8f8>
 810bdee:	d082      	beq.n	810bcf6 <_dtoa_r+0x816>
 810bdf0:	9a05      	ldr	r2, [sp, #20]
 810bdf2:	331c      	adds	r3, #28
 810bdf4:	441a      	add	r2, r3
 810bdf6:	9205      	str	r2, [sp, #20]
 810bdf8:	9a06      	ldr	r2, [sp, #24]
 810bdfa:	441a      	add	r2, r3
 810bdfc:	441d      	add	r5, r3
 810bdfe:	9206      	str	r2, [sp, #24]
 810be00:	e779      	b.n	810bcf6 <_dtoa_r+0x816>
 810be02:	4603      	mov	r3, r0
 810be04:	e7f4      	b.n	810bdf0 <_dtoa_r+0x910>
 810be06:	9b04      	ldr	r3, [sp, #16]
 810be08:	2b00      	cmp	r3, #0
 810be0a:	dc37      	bgt.n	810be7c <_dtoa_r+0x99c>
 810be0c:	9b07      	ldr	r3, [sp, #28]
 810be0e:	2b02      	cmp	r3, #2
 810be10:	dd34      	ble.n	810be7c <_dtoa_r+0x99c>
 810be12:	9b04      	ldr	r3, [sp, #16]
 810be14:	9301      	str	r3, [sp, #4]
 810be16:	9b01      	ldr	r3, [sp, #4]
 810be18:	b963      	cbnz	r3, 810be34 <_dtoa_r+0x954>
 810be1a:	4631      	mov	r1, r6
 810be1c:	2205      	movs	r2, #5
 810be1e:	4620      	mov	r0, r4
 810be20:	f000 f9fe 	bl	810c220 <__multadd>
 810be24:	4601      	mov	r1, r0
 810be26:	4606      	mov	r6, r0
 810be28:	4650      	mov	r0, sl
 810be2a:	f000 fc5d 	bl	810c6e8 <__mcmp>
 810be2e:	2800      	cmp	r0, #0
 810be30:	f73f adbb 	bgt.w	810b9aa <_dtoa_r+0x4ca>
 810be34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810be36:	9d00      	ldr	r5, [sp, #0]
 810be38:	ea6f 0b03 	mvn.w	fp, r3
 810be3c:	f04f 0800 	mov.w	r8, #0
 810be40:	4631      	mov	r1, r6
 810be42:	4620      	mov	r0, r4
 810be44:	f000 f9ca 	bl	810c1dc <_Bfree>
 810be48:	2f00      	cmp	r7, #0
 810be4a:	f43f aeab 	beq.w	810bba4 <_dtoa_r+0x6c4>
 810be4e:	f1b8 0f00 	cmp.w	r8, #0
 810be52:	d005      	beq.n	810be60 <_dtoa_r+0x980>
 810be54:	45b8      	cmp	r8, r7
 810be56:	d003      	beq.n	810be60 <_dtoa_r+0x980>
 810be58:	4641      	mov	r1, r8
 810be5a:	4620      	mov	r0, r4
 810be5c:	f000 f9be 	bl	810c1dc <_Bfree>
 810be60:	4639      	mov	r1, r7
 810be62:	4620      	mov	r0, r4
 810be64:	f000 f9ba 	bl	810c1dc <_Bfree>
 810be68:	e69c      	b.n	810bba4 <_dtoa_r+0x6c4>
 810be6a:	2600      	movs	r6, #0
 810be6c:	4637      	mov	r7, r6
 810be6e:	e7e1      	b.n	810be34 <_dtoa_r+0x954>
 810be70:	46bb      	mov	fp, r7
 810be72:	4637      	mov	r7, r6
 810be74:	e599      	b.n	810b9aa <_dtoa_r+0x4ca>
 810be76:	bf00      	nop
 810be78:	40240000 	.word	0x40240000
 810be7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be7e:	2b00      	cmp	r3, #0
 810be80:	f000 80c8 	beq.w	810c014 <_dtoa_r+0xb34>
 810be84:	9b04      	ldr	r3, [sp, #16]
 810be86:	9301      	str	r3, [sp, #4]
 810be88:	2d00      	cmp	r5, #0
 810be8a:	dd05      	ble.n	810be98 <_dtoa_r+0x9b8>
 810be8c:	4639      	mov	r1, r7
 810be8e:	462a      	mov	r2, r5
 810be90:	4620      	mov	r0, r4
 810be92:	f000 fbbd 	bl	810c610 <__lshift>
 810be96:	4607      	mov	r7, r0
 810be98:	f1b8 0f00 	cmp.w	r8, #0
 810be9c:	d05b      	beq.n	810bf56 <_dtoa_r+0xa76>
 810be9e:	6879      	ldr	r1, [r7, #4]
 810bea0:	4620      	mov	r0, r4
 810bea2:	f000 f95b 	bl	810c15c <_Balloc>
 810bea6:	4605      	mov	r5, r0
 810bea8:	b928      	cbnz	r0, 810beb6 <_dtoa_r+0x9d6>
 810beaa:	4b83      	ldr	r3, [pc, #524]	; (810c0b8 <_dtoa_r+0xbd8>)
 810beac:	4602      	mov	r2, r0
 810beae:	f240 21ef 	movw	r1, #751	; 0x2ef
 810beb2:	f7ff bb2e 	b.w	810b512 <_dtoa_r+0x32>
 810beb6:	693a      	ldr	r2, [r7, #16]
 810beb8:	3202      	adds	r2, #2
 810beba:	0092      	lsls	r2, r2, #2
 810bebc:	f107 010c 	add.w	r1, r7, #12
 810bec0:	300c      	adds	r0, #12
 810bec2:	f7ff fa6e 	bl	810b3a2 <memcpy>
 810bec6:	2201      	movs	r2, #1
 810bec8:	4629      	mov	r1, r5
 810beca:	4620      	mov	r0, r4
 810becc:	f000 fba0 	bl	810c610 <__lshift>
 810bed0:	9b00      	ldr	r3, [sp, #0]
 810bed2:	3301      	adds	r3, #1
 810bed4:	9304      	str	r3, [sp, #16]
 810bed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 810beda:	4413      	add	r3, r2
 810bedc:	9308      	str	r3, [sp, #32]
 810bede:	9b02      	ldr	r3, [sp, #8]
 810bee0:	f003 0301 	and.w	r3, r3, #1
 810bee4:	46b8      	mov	r8, r7
 810bee6:	9306      	str	r3, [sp, #24]
 810bee8:	4607      	mov	r7, r0
 810beea:	9b04      	ldr	r3, [sp, #16]
 810beec:	4631      	mov	r1, r6
 810beee:	3b01      	subs	r3, #1
 810bef0:	4650      	mov	r0, sl
 810bef2:	9301      	str	r3, [sp, #4]
 810bef4:	f7ff fa6a 	bl	810b3cc <quorem>
 810bef8:	4641      	mov	r1, r8
 810befa:	9002      	str	r0, [sp, #8]
 810befc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810bf00:	4650      	mov	r0, sl
 810bf02:	f000 fbf1 	bl	810c6e8 <__mcmp>
 810bf06:	463a      	mov	r2, r7
 810bf08:	9005      	str	r0, [sp, #20]
 810bf0a:	4631      	mov	r1, r6
 810bf0c:	4620      	mov	r0, r4
 810bf0e:	f000 fc07 	bl	810c720 <__mdiff>
 810bf12:	68c2      	ldr	r2, [r0, #12]
 810bf14:	4605      	mov	r5, r0
 810bf16:	bb02      	cbnz	r2, 810bf5a <_dtoa_r+0xa7a>
 810bf18:	4601      	mov	r1, r0
 810bf1a:	4650      	mov	r0, sl
 810bf1c:	f000 fbe4 	bl	810c6e8 <__mcmp>
 810bf20:	4602      	mov	r2, r0
 810bf22:	4629      	mov	r1, r5
 810bf24:	4620      	mov	r0, r4
 810bf26:	9209      	str	r2, [sp, #36]	; 0x24
 810bf28:	f000 f958 	bl	810c1dc <_Bfree>
 810bf2c:	9b07      	ldr	r3, [sp, #28]
 810bf2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810bf30:	9d04      	ldr	r5, [sp, #16]
 810bf32:	ea43 0102 	orr.w	r1, r3, r2
 810bf36:	9b06      	ldr	r3, [sp, #24]
 810bf38:	4319      	orrs	r1, r3
 810bf3a:	d110      	bne.n	810bf5e <_dtoa_r+0xa7e>
 810bf3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810bf40:	d029      	beq.n	810bf96 <_dtoa_r+0xab6>
 810bf42:	9b05      	ldr	r3, [sp, #20]
 810bf44:	2b00      	cmp	r3, #0
 810bf46:	dd02      	ble.n	810bf4e <_dtoa_r+0xa6e>
 810bf48:	9b02      	ldr	r3, [sp, #8]
 810bf4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810bf4e:	9b01      	ldr	r3, [sp, #4]
 810bf50:	f883 9000 	strb.w	r9, [r3]
 810bf54:	e774      	b.n	810be40 <_dtoa_r+0x960>
 810bf56:	4638      	mov	r0, r7
 810bf58:	e7ba      	b.n	810bed0 <_dtoa_r+0x9f0>
 810bf5a:	2201      	movs	r2, #1
 810bf5c:	e7e1      	b.n	810bf22 <_dtoa_r+0xa42>
 810bf5e:	9b05      	ldr	r3, [sp, #20]
 810bf60:	2b00      	cmp	r3, #0
 810bf62:	db04      	blt.n	810bf6e <_dtoa_r+0xa8e>
 810bf64:	9907      	ldr	r1, [sp, #28]
 810bf66:	430b      	orrs	r3, r1
 810bf68:	9906      	ldr	r1, [sp, #24]
 810bf6a:	430b      	orrs	r3, r1
 810bf6c:	d120      	bne.n	810bfb0 <_dtoa_r+0xad0>
 810bf6e:	2a00      	cmp	r2, #0
 810bf70:	dded      	ble.n	810bf4e <_dtoa_r+0xa6e>
 810bf72:	4651      	mov	r1, sl
 810bf74:	2201      	movs	r2, #1
 810bf76:	4620      	mov	r0, r4
 810bf78:	f000 fb4a 	bl	810c610 <__lshift>
 810bf7c:	4631      	mov	r1, r6
 810bf7e:	4682      	mov	sl, r0
 810bf80:	f000 fbb2 	bl	810c6e8 <__mcmp>
 810bf84:	2800      	cmp	r0, #0
 810bf86:	dc03      	bgt.n	810bf90 <_dtoa_r+0xab0>
 810bf88:	d1e1      	bne.n	810bf4e <_dtoa_r+0xa6e>
 810bf8a:	f019 0f01 	tst.w	r9, #1
 810bf8e:	d0de      	beq.n	810bf4e <_dtoa_r+0xa6e>
 810bf90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810bf94:	d1d8      	bne.n	810bf48 <_dtoa_r+0xa68>
 810bf96:	9a01      	ldr	r2, [sp, #4]
 810bf98:	2339      	movs	r3, #57	; 0x39
 810bf9a:	7013      	strb	r3, [r2, #0]
 810bf9c:	462b      	mov	r3, r5
 810bf9e:	461d      	mov	r5, r3
 810bfa0:	3b01      	subs	r3, #1
 810bfa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810bfa6:	2a39      	cmp	r2, #57	; 0x39
 810bfa8:	d06c      	beq.n	810c084 <_dtoa_r+0xba4>
 810bfaa:	3201      	adds	r2, #1
 810bfac:	701a      	strb	r2, [r3, #0]
 810bfae:	e747      	b.n	810be40 <_dtoa_r+0x960>
 810bfb0:	2a00      	cmp	r2, #0
 810bfb2:	dd07      	ble.n	810bfc4 <_dtoa_r+0xae4>
 810bfb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810bfb8:	d0ed      	beq.n	810bf96 <_dtoa_r+0xab6>
 810bfba:	9a01      	ldr	r2, [sp, #4]
 810bfbc:	f109 0301 	add.w	r3, r9, #1
 810bfc0:	7013      	strb	r3, [r2, #0]
 810bfc2:	e73d      	b.n	810be40 <_dtoa_r+0x960>
 810bfc4:	9b04      	ldr	r3, [sp, #16]
 810bfc6:	9a08      	ldr	r2, [sp, #32]
 810bfc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 810bfcc:	4293      	cmp	r3, r2
 810bfce:	d043      	beq.n	810c058 <_dtoa_r+0xb78>
 810bfd0:	4651      	mov	r1, sl
 810bfd2:	2300      	movs	r3, #0
 810bfd4:	220a      	movs	r2, #10
 810bfd6:	4620      	mov	r0, r4
 810bfd8:	f000 f922 	bl	810c220 <__multadd>
 810bfdc:	45b8      	cmp	r8, r7
 810bfde:	4682      	mov	sl, r0
 810bfe0:	f04f 0300 	mov.w	r3, #0
 810bfe4:	f04f 020a 	mov.w	r2, #10
 810bfe8:	4641      	mov	r1, r8
 810bfea:	4620      	mov	r0, r4
 810bfec:	d107      	bne.n	810bffe <_dtoa_r+0xb1e>
 810bfee:	f000 f917 	bl	810c220 <__multadd>
 810bff2:	4680      	mov	r8, r0
 810bff4:	4607      	mov	r7, r0
 810bff6:	9b04      	ldr	r3, [sp, #16]
 810bff8:	3301      	adds	r3, #1
 810bffa:	9304      	str	r3, [sp, #16]
 810bffc:	e775      	b.n	810beea <_dtoa_r+0xa0a>
 810bffe:	f000 f90f 	bl	810c220 <__multadd>
 810c002:	4639      	mov	r1, r7
 810c004:	4680      	mov	r8, r0
 810c006:	2300      	movs	r3, #0
 810c008:	220a      	movs	r2, #10
 810c00a:	4620      	mov	r0, r4
 810c00c:	f000 f908 	bl	810c220 <__multadd>
 810c010:	4607      	mov	r7, r0
 810c012:	e7f0      	b.n	810bff6 <_dtoa_r+0xb16>
 810c014:	9b04      	ldr	r3, [sp, #16]
 810c016:	9301      	str	r3, [sp, #4]
 810c018:	9d00      	ldr	r5, [sp, #0]
 810c01a:	4631      	mov	r1, r6
 810c01c:	4650      	mov	r0, sl
 810c01e:	f7ff f9d5 	bl	810b3cc <quorem>
 810c022:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810c026:	9b00      	ldr	r3, [sp, #0]
 810c028:	f805 9b01 	strb.w	r9, [r5], #1
 810c02c:	1aea      	subs	r2, r5, r3
 810c02e:	9b01      	ldr	r3, [sp, #4]
 810c030:	4293      	cmp	r3, r2
 810c032:	dd07      	ble.n	810c044 <_dtoa_r+0xb64>
 810c034:	4651      	mov	r1, sl
 810c036:	2300      	movs	r3, #0
 810c038:	220a      	movs	r2, #10
 810c03a:	4620      	mov	r0, r4
 810c03c:	f000 f8f0 	bl	810c220 <__multadd>
 810c040:	4682      	mov	sl, r0
 810c042:	e7ea      	b.n	810c01a <_dtoa_r+0xb3a>
 810c044:	9b01      	ldr	r3, [sp, #4]
 810c046:	2b00      	cmp	r3, #0
 810c048:	bfc8      	it	gt
 810c04a:	461d      	movgt	r5, r3
 810c04c:	9b00      	ldr	r3, [sp, #0]
 810c04e:	bfd8      	it	le
 810c050:	2501      	movle	r5, #1
 810c052:	441d      	add	r5, r3
 810c054:	f04f 0800 	mov.w	r8, #0
 810c058:	4651      	mov	r1, sl
 810c05a:	2201      	movs	r2, #1
 810c05c:	4620      	mov	r0, r4
 810c05e:	f000 fad7 	bl	810c610 <__lshift>
 810c062:	4631      	mov	r1, r6
 810c064:	4682      	mov	sl, r0
 810c066:	f000 fb3f 	bl	810c6e8 <__mcmp>
 810c06a:	2800      	cmp	r0, #0
 810c06c:	dc96      	bgt.n	810bf9c <_dtoa_r+0xabc>
 810c06e:	d102      	bne.n	810c076 <_dtoa_r+0xb96>
 810c070:	f019 0f01 	tst.w	r9, #1
 810c074:	d192      	bne.n	810bf9c <_dtoa_r+0xabc>
 810c076:	462b      	mov	r3, r5
 810c078:	461d      	mov	r5, r3
 810c07a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c07e:	2a30      	cmp	r2, #48	; 0x30
 810c080:	d0fa      	beq.n	810c078 <_dtoa_r+0xb98>
 810c082:	e6dd      	b.n	810be40 <_dtoa_r+0x960>
 810c084:	9a00      	ldr	r2, [sp, #0]
 810c086:	429a      	cmp	r2, r3
 810c088:	d189      	bne.n	810bf9e <_dtoa_r+0xabe>
 810c08a:	f10b 0b01 	add.w	fp, fp, #1
 810c08e:	2331      	movs	r3, #49	; 0x31
 810c090:	e796      	b.n	810bfc0 <_dtoa_r+0xae0>
 810c092:	4b0a      	ldr	r3, [pc, #40]	; (810c0bc <_dtoa_r+0xbdc>)
 810c094:	f7ff ba99 	b.w	810b5ca <_dtoa_r+0xea>
 810c098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c09a:	2b00      	cmp	r3, #0
 810c09c:	f47f aa6d 	bne.w	810b57a <_dtoa_r+0x9a>
 810c0a0:	4b07      	ldr	r3, [pc, #28]	; (810c0c0 <_dtoa_r+0xbe0>)
 810c0a2:	f7ff ba92 	b.w	810b5ca <_dtoa_r+0xea>
 810c0a6:	9b01      	ldr	r3, [sp, #4]
 810c0a8:	2b00      	cmp	r3, #0
 810c0aa:	dcb5      	bgt.n	810c018 <_dtoa_r+0xb38>
 810c0ac:	9b07      	ldr	r3, [sp, #28]
 810c0ae:	2b02      	cmp	r3, #2
 810c0b0:	f73f aeb1 	bgt.w	810be16 <_dtoa_r+0x936>
 810c0b4:	e7b0      	b.n	810c018 <_dtoa_r+0xb38>
 810c0b6:	bf00      	nop
 810c0b8:	081e682d 	.word	0x081e682d
 810c0bc:	081e6788 	.word	0x081e6788
 810c0c0:	081e67b1 	.word	0x081e67b1

0810c0c4 <_free_r>:
 810c0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c0c6:	2900      	cmp	r1, #0
 810c0c8:	d044      	beq.n	810c154 <_free_r+0x90>
 810c0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c0ce:	9001      	str	r0, [sp, #4]
 810c0d0:	2b00      	cmp	r3, #0
 810c0d2:	f1a1 0404 	sub.w	r4, r1, #4
 810c0d6:	bfb8      	it	lt
 810c0d8:	18e4      	addlt	r4, r4, r3
 810c0da:	f7fd fff9 	bl	810a0d0 <__malloc_lock>
 810c0de:	4a1e      	ldr	r2, [pc, #120]	; (810c158 <_free_r+0x94>)
 810c0e0:	9801      	ldr	r0, [sp, #4]
 810c0e2:	6813      	ldr	r3, [r2, #0]
 810c0e4:	b933      	cbnz	r3, 810c0f4 <_free_r+0x30>
 810c0e6:	6063      	str	r3, [r4, #4]
 810c0e8:	6014      	str	r4, [r2, #0]
 810c0ea:	b003      	add	sp, #12
 810c0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810c0f0:	f7fd bff4 	b.w	810a0dc <__malloc_unlock>
 810c0f4:	42a3      	cmp	r3, r4
 810c0f6:	d908      	bls.n	810c10a <_free_r+0x46>
 810c0f8:	6825      	ldr	r5, [r4, #0]
 810c0fa:	1961      	adds	r1, r4, r5
 810c0fc:	428b      	cmp	r3, r1
 810c0fe:	bf01      	itttt	eq
 810c100:	6819      	ldreq	r1, [r3, #0]
 810c102:	685b      	ldreq	r3, [r3, #4]
 810c104:	1949      	addeq	r1, r1, r5
 810c106:	6021      	streq	r1, [r4, #0]
 810c108:	e7ed      	b.n	810c0e6 <_free_r+0x22>
 810c10a:	461a      	mov	r2, r3
 810c10c:	685b      	ldr	r3, [r3, #4]
 810c10e:	b10b      	cbz	r3, 810c114 <_free_r+0x50>
 810c110:	42a3      	cmp	r3, r4
 810c112:	d9fa      	bls.n	810c10a <_free_r+0x46>
 810c114:	6811      	ldr	r1, [r2, #0]
 810c116:	1855      	adds	r5, r2, r1
 810c118:	42a5      	cmp	r5, r4
 810c11a:	d10b      	bne.n	810c134 <_free_r+0x70>
 810c11c:	6824      	ldr	r4, [r4, #0]
 810c11e:	4421      	add	r1, r4
 810c120:	1854      	adds	r4, r2, r1
 810c122:	42a3      	cmp	r3, r4
 810c124:	6011      	str	r1, [r2, #0]
 810c126:	d1e0      	bne.n	810c0ea <_free_r+0x26>
 810c128:	681c      	ldr	r4, [r3, #0]
 810c12a:	685b      	ldr	r3, [r3, #4]
 810c12c:	6053      	str	r3, [r2, #4]
 810c12e:	440c      	add	r4, r1
 810c130:	6014      	str	r4, [r2, #0]
 810c132:	e7da      	b.n	810c0ea <_free_r+0x26>
 810c134:	d902      	bls.n	810c13c <_free_r+0x78>
 810c136:	230c      	movs	r3, #12
 810c138:	6003      	str	r3, [r0, #0]
 810c13a:	e7d6      	b.n	810c0ea <_free_r+0x26>
 810c13c:	6825      	ldr	r5, [r4, #0]
 810c13e:	1961      	adds	r1, r4, r5
 810c140:	428b      	cmp	r3, r1
 810c142:	bf04      	itt	eq
 810c144:	6819      	ldreq	r1, [r3, #0]
 810c146:	685b      	ldreq	r3, [r3, #4]
 810c148:	6063      	str	r3, [r4, #4]
 810c14a:	bf04      	itt	eq
 810c14c:	1949      	addeq	r1, r1, r5
 810c14e:	6021      	streq	r1, [r4, #0]
 810c150:	6054      	str	r4, [r2, #4]
 810c152:	e7ca      	b.n	810c0ea <_free_r+0x26>
 810c154:	b003      	add	sp, #12
 810c156:	bd30      	pop	{r4, r5, pc}
 810c158:	1001acc0 	.word	0x1001acc0

0810c15c <_Balloc>:
 810c15c:	b570      	push	{r4, r5, r6, lr}
 810c15e:	69c6      	ldr	r6, [r0, #28]
 810c160:	4604      	mov	r4, r0
 810c162:	460d      	mov	r5, r1
 810c164:	b976      	cbnz	r6, 810c184 <_Balloc+0x28>
 810c166:	2010      	movs	r0, #16
 810c168:	f7fd ff0a 	bl	8109f80 <malloc>
 810c16c:	4602      	mov	r2, r0
 810c16e:	61e0      	str	r0, [r4, #28]
 810c170:	b920      	cbnz	r0, 810c17c <_Balloc+0x20>
 810c172:	4b18      	ldr	r3, [pc, #96]	; (810c1d4 <_Balloc+0x78>)
 810c174:	4818      	ldr	r0, [pc, #96]	; (810c1d8 <_Balloc+0x7c>)
 810c176:	216b      	movs	r1, #107	; 0x6b
 810c178:	f001 ff3e 	bl	810dff8 <__assert_func>
 810c17c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c180:	6006      	str	r6, [r0, #0]
 810c182:	60c6      	str	r6, [r0, #12]
 810c184:	69e6      	ldr	r6, [r4, #28]
 810c186:	68f3      	ldr	r3, [r6, #12]
 810c188:	b183      	cbz	r3, 810c1ac <_Balloc+0x50>
 810c18a:	69e3      	ldr	r3, [r4, #28]
 810c18c:	68db      	ldr	r3, [r3, #12]
 810c18e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c192:	b9b8      	cbnz	r0, 810c1c4 <_Balloc+0x68>
 810c194:	2101      	movs	r1, #1
 810c196:	fa01 f605 	lsl.w	r6, r1, r5
 810c19a:	1d72      	adds	r2, r6, #5
 810c19c:	0092      	lsls	r2, r2, #2
 810c19e:	4620      	mov	r0, r4
 810c1a0:	f001 ff48 	bl	810e034 <_calloc_r>
 810c1a4:	b160      	cbz	r0, 810c1c0 <_Balloc+0x64>
 810c1a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c1aa:	e00e      	b.n	810c1ca <_Balloc+0x6e>
 810c1ac:	2221      	movs	r2, #33	; 0x21
 810c1ae:	2104      	movs	r1, #4
 810c1b0:	4620      	mov	r0, r4
 810c1b2:	f001 ff3f 	bl	810e034 <_calloc_r>
 810c1b6:	69e3      	ldr	r3, [r4, #28]
 810c1b8:	60f0      	str	r0, [r6, #12]
 810c1ba:	68db      	ldr	r3, [r3, #12]
 810c1bc:	2b00      	cmp	r3, #0
 810c1be:	d1e4      	bne.n	810c18a <_Balloc+0x2e>
 810c1c0:	2000      	movs	r0, #0
 810c1c2:	bd70      	pop	{r4, r5, r6, pc}
 810c1c4:	6802      	ldr	r2, [r0, #0]
 810c1c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c1ca:	2300      	movs	r3, #0
 810c1cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c1d0:	e7f7      	b.n	810c1c2 <_Balloc+0x66>
 810c1d2:	bf00      	nop
 810c1d4:	081e67be 	.word	0x081e67be
 810c1d8:	081e683e 	.word	0x081e683e

0810c1dc <_Bfree>:
 810c1dc:	b570      	push	{r4, r5, r6, lr}
 810c1de:	69c6      	ldr	r6, [r0, #28]
 810c1e0:	4605      	mov	r5, r0
 810c1e2:	460c      	mov	r4, r1
 810c1e4:	b976      	cbnz	r6, 810c204 <_Bfree+0x28>
 810c1e6:	2010      	movs	r0, #16
 810c1e8:	f7fd feca 	bl	8109f80 <malloc>
 810c1ec:	4602      	mov	r2, r0
 810c1ee:	61e8      	str	r0, [r5, #28]
 810c1f0:	b920      	cbnz	r0, 810c1fc <_Bfree+0x20>
 810c1f2:	4b09      	ldr	r3, [pc, #36]	; (810c218 <_Bfree+0x3c>)
 810c1f4:	4809      	ldr	r0, [pc, #36]	; (810c21c <_Bfree+0x40>)
 810c1f6:	218f      	movs	r1, #143	; 0x8f
 810c1f8:	f001 fefe 	bl	810dff8 <__assert_func>
 810c1fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c200:	6006      	str	r6, [r0, #0]
 810c202:	60c6      	str	r6, [r0, #12]
 810c204:	b13c      	cbz	r4, 810c216 <_Bfree+0x3a>
 810c206:	69eb      	ldr	r3, [r5, #28]
 810c208:	6862      	ldr	r2, [r4, #4]
 810c20a:	68db      	ldr	r3, [r3, #12]
 810c20c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c210:	6021      	str	r1, [r4, #0]
 810c212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c216:	bd70      	pop	{r4, r5, r6, pc}
 810c218:	081e67be 	.word	0x081e67be
 810c21c:	081e683e 	.word	0x081e683e

0810c220 <__multadd>:
 810c220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c224:	690d      	ldr	r5, [r1, #16]
 810c226:	4607      	mov	r7, r0
 810c228:	460c      	mov	r4, r1
 810c22a:	461e      	mov	r6, r3
 810c22c:	f101 0c14 	add.w	ip, r1, #20
 810c230:	2000      	movs	r0, #0
 810c232:	f8dc 3000 	ldr.w	r3, [ip]
 810c236:	b299      	uxth	r1, r3
 810c238:	fb02 6101 	mla	r1, r2, r1, r6
 810c23c:	0c1e      	lsrs	r6, r3, #16
 810c23e:	0c0b      	lsrs	r3, r1, #16
 810c240:	fb02 3306 	mla	r3, r2, r6, r3
 810c244:	b289      	uxth	r1, r1
 810c246:	3001      	adds	r0, #1
 810c248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c24c:	4285      	cmp	r5, r0
 810c24e:	f84c 1b04 	str.w	r1, [ip], #4
 810c252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c256:	dcec      	bgt.n	810c232 <__multadd+0x12>
 810c258:	b30e      	cbz	r6, 810c29e <__multadd+0x7e>
 810c25a:	68a3      	ldr	r3, [r4, #8]
 810c25c:	42ab      	cmp	r3, r5
 810c25e:	dc19      	bgt.n	810c294 <__multadd+0x74>
 810c260:	6861      	ldr	r1, [r4, #4]
 810c262:	4638      	mov	r0, r7
 810c264:	3101      	adds	r1, #1
 810c266:	f7ff ff79 	bl	810c15c <_Balloc>
 810c26a:	4680      	mov	r8, r0
 810c26c:	b928      	cbnz	r0, 810c27a <__multadd+0x5a>
 810c26e:	4602      	mov	r2, r0
 810c270:	4b0c      	ldr	r3, [pc, #48]	; (810c2a4 <__multadd+0x84>)
 810c272:	480d      	ldr	r0, [pc, #52]	; (810c2a8 <__multadd+0x88>)
 810c274:	21ba      	movs	r1, #186	; 0xba
 810c276:	f001 febf 	bl	810dff8 <__assert_func>
 810c27a:	6922      	ldr	r2, [r4, #16]
 810c27c:	3202      	adds	r2, #2
 810c27e:	f104 010c 	add.w	r1, r4, #12
 810c282:	0092      	lsls	r2, r2, #2
 810c284:	300c      	adds	r0, #12
 810c286:	f7ff f88c 	bl	810b3a2 <memcpy>
 810c28a:	4621      	mov	r1, r4
 810c28c:	4638      	mov	r0, r7
 810c28e:	f7ff ffa5 	bl	810c1dc <_Bfree>
 810c292:	4644      	mov	r4, r8
 810c294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c298:	3501      	adds	r5, #1
 810c29a:	615e      	str	r6, [r3, #20]
 810c29c:	6125      	str	r5, [r4, #16]
 810c29e:	4620      	mov	r0, r4
 810c2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c2a4:	081e682d 	.word	0x081e682d
 810c2a8:	081e683e 	.word	0x081e683e

0810c2ac <__s2b>:
 810c2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c2b0:	460c      	mov	r4, r1
 810c2b2:	4615      	mov	r5, r2
 810c2b4:	461f      	mov	r7, r3
 810c2b6:	2209      	movs	r2, #9
 810c2b8:	3308      	adds	r3, #8
 810c2ba:	4606      	mov	r6, r0
 810c2bc:	fb93 f3f2 	sdiv	r3, r3, r2
 810c2c0:	2100      	movs	r1, #0
 810c2c2:	2201      	movs	r2, #1
 810c2c4:	429a      	cmp	r2, r3
 810c2c6:	db09      	blt.n	810c2dc <__s2b+0x30>
 810c2c8:	4630      	mov	r0, r6
 810c2ca:	f7ff ff47 	bl	810c15c <_Balloc>
 810c2ce:	b940      	cbnz	r0, 810c2e2 <__s2b+0x36>
 810c2d0:	4602      	mov	r2, r0
 810c2d2:	4b19      	ldr	r3, [pc, #100]	; (810c338 <__s2b+0x8c>)
 810c2d4:	4819      	ldr	r0, [pc, #100]	; (810c33c <__s2b+0x90>)
 810c2d6:	21d3      	movs	r1, #211	; 0xd3
 810c2d8:	f001 fe8e 	bl	810dff8 <__assert_func>
 810c2dc:	0052      	lsls	r2, r2, #1
 810c2de:	3101      	adds	r1, #1
 810c2e0:	e7f0      	b.n	810c2c4 <__s2b+0x18>
 810c2e2:	9b08      	ldr	r3, [sp, #32]
 810c2e4:	6143      	str	r3, [r0, #20]
 810c2e6:	2d09      	cmp	r5, #9
 810c2e8:	f04f 0301 	mov.w	r3, #1
 810c2ec:	6103      	str	r3, [r0, #16]
 810c2ee:	dd16      	ble.n	810c31e <__s2b+0x72>
 810c2f0:	f104 0909 	add.w	r9, r4, #9
 810c2f4:	46c8      	mov	r8, r9
 810c2f6:	442c      	add	r4, r5
 810c2f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c2fc:	4601      	mov	r1, r0
 810c2fe:	3b30      	subs	r3, #48	; 0x30
 810c300:	220a      	movs	r2, #10
 810c302:	4630      	mov	r0, r6
 810c304:	f7ff ff8c 	bl	810c220 <__multadd>
 810c308:	45a0      	cmp	r8, r4
 810c30a:	d1f5      	bne.n	810c2f8 <__s2b+0x4c>
 810c30c:	f1a5 0408 	sub.w	r4, r5, #8
 810c310:	444c      	add	r4, r9
 810c312:	1b2d      	subs	r5, r5, r4
 810c314:	1963      	adds	r3, r4, r5
 810c316:	42bb      	cmp	r3, r7
 810c318:	db04      	blt.n	810c324 <__s2b+0x78>
 810c31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c31e:	340a      	adds	r4, #10
 810c320:	2509      	movs	r5, #9
 810c322:	e7f6      	b.n	810c312 <__s2b+0x66>
 810c324:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c328:	4601      	mov	r1, r0
 810c32a:	3b30      	subs	r3, #48	; 0x30
 810c32c:	220a      	movs	r2, #10
 810c32e:	4630      	mov	r0, r6
 810c330:	f7ff ff76 	bl	810c220 <__multadd>
 810c334:	e7ee      	b.n	810c314 <__s2b+0x68>
 810c336:	bf00      	nop
 810c338:	081e682d 	.word	0x081e682d
 810c33c:	081e683e 	.word	0x081e683e

0810c340 <__hi0bits>:
 810c340:	0c03      	lsrs	r3, r0, #16
 810c342:	041b      	lsls	r3, r3, #16
 810c344:	b9d3      	cbnz	r3, 810c37c <__hi0bits+0x3c>
 810c346:	0400      	lsls	r0, r0, #16
 810c348:	2310      	movs	r3, #16
 810c34a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810c34e:	bf04      	itt	eq
 810c350:	0200      	lsleq	r0, r0, #8
 810c352:	3308      	addeq	r3, #8
 810c354:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810c358:	bf04      	itt	eq
 810c35a:	0100      	lsleq	r0, r0, #4
 810c35c:	3304      	addeq	r3, #4
 810c35e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810c362:	bf04      	itt	eq
 810c364:	0080      	lsleq	r0, r0, #2
 810c366:	3302      	addeq	r3, #2
 810c368:	2800      	cmp	r0, #0
 810c36a:	db05      	blt.n	810c378 <__hi0bits+0x38>
 810c36c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810c370:	f103 0301 	add.w	r3, r3, #1
 810c374:	bf08      	it	eq
 810c376:	2320      	moveq	r3, #32
 810c378:	4618      	mov	r0, r3
 810c37a:	4770      	bx	lr
 810c37c:	2300      	movs	r3, #0
 810c37e:	e7e4      	b.n	810c34a <__hi0bits+0xa>

0810c380 <__lo0bits>:
 810c380:	6803      	ldr	r3, [r0, #0]
 810c382:	f013 0207 	ands.w	r2, r3, #7
 810c386:	d00c      	beq.n	810c3a2 <__lo0bits+0x22>
 810c388:	07d9      	lsls	r1, r3, #31
 810c38a:	d422      	bmi.n	810c3d2 <__lo0bits+0x52>
 810c38c:	079a      	lsls	r2, r3, #30
 810c38e:	bf49      	itett	mi
 810c390:	085b      	lsrmi	r3, r3, #1
 810c392:	089b      	lsrpl	r3, r3, #2
 810c394:	6003      	strmi	r3, [r0, #0]
 810c396:	2201      	movmi	r2, #1
 810c398:	bf5c      	itt	pl
 810c39a:	6003      	strpl	r3, [r0, #0]
 810c39c:	2202      	movpl	r2, #2
 810c39e:	4610      	mov	r0, r2
 810c3a0:	4770      	bx	lr
 810c3a2:	b299      	uxth	r1, r3
 810c3a4:	b909      	cbnz	r1, 810c3aa <__lo0bits+0x2a>
 810c3a6:	0c1b      	lsrs	r3, r3, #16
 810c3a8:	2210      	movs	r2, #16
 810c3aa:	b2d9      	uxtb	r1, r3
 810c3ac:	b909      	cbnz	r1, 810c3b2 <__lo0bits+0x32>
 810c3ae:	3208      	adds	r2, #8
 810c3b0:	0a1b      	lsrs	r3, r3, #8
 810c3b2:	0719      	lsls	r1, r3, #28
 810c3b4:	bf04      	itt	eq
 810c3b6:	091b      	lsreq	r3, r3, #4
 810c3b8:	3204      	addeq	r2, #4
 810c3ba:	0799      	lsls	r1, r3, #30
 810c3bc:	bf04      	itt	eq
 810c3be:	089b      	lsreq	r3, r3, #2
 810c3c0:	3202      	addeq	r2, #2
 810c3c2:	07d9      	lsls	r1, r3, #31
 810c3c4:	d403      	bmi.n	810c3ce <__lo0bits+0x4e>
 810c3c6:	085b      	lsrs	r3, r3, #1
 810c3c8:	f102 0201 	add.w	r2, r2, #1
 810c3cc:	d003      	beq.n	810c3d6 <__lo0bits+0x56>
 810c3ce:	6003      	str	r3, [r0, #0]
 810c3d0:	e7e5      	b.n	810c39e <__lo0bits+0x1e>
 810c3d2:	2200      	movs	r2, #0
 810c3d4:	e7e3      	b.n	810c39e <__lo0bits+0x1e>
 810c3d6:	2220      	movs	r2, #32
 810c3d8:	e7e1      	b.n	810c39e <__lo0bits+0x1e>
	...

0810c3dc <__i2b>:
 810c3dc:	b510      	push	{r4, lr}
 810c3de:	460c      	mov	r4, r1
 810c3e0:	2101      	movs	r1, #1
 810c3e2:	f7ff febb 	bl	810c15c <_Balloc>
 810c3e6:	4602      	mov	r2, r0
 810c3e8:	b928      	cbnz	r0, 810c3f6 <__i2b+0x1a>
 810c3ea:	4b05      	ldr	r3, [pc, #20]	; (810c400 <__i2b+0x24>)
 810c3ec:	4805      	ldr	r0, [pc, #20]	; (810c404 <__i2b+0x28>)
 810c3ee:	f240 1145 	movw	r1, #325	; 0x145
 810c3f2:	f001 fe01 	bl	810dff8 <__assert_func>
 810c3f6:	2301      	movs	r3, #1
 810c3f8:	6144      	str	r4, [r0, #20]
 810c3fa:	6103      	str	r3, [r0, #16]
 810c3fc:	bd10      	pop	{r4, pc}
 810c3fe:	bf00      	nop
 810c400:	081e682d 	.word	0x081e682d
 810c404:	081e683e 	.word	0x081e683e

0810c408 <__multiply>:
 810c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c40c:	4691      	mov	r9, r2
 810c40e:	690a      	ldr	r2, [r1, #16]
 810c410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c414:	429a      	cmp	r2, r3
 810c416:	bfb8      	it	lt
 810c418:	460b      	movlt	r3, r1
 810c41a:	460c      	mov	r4, r1
 810c41c:	bfbc      	itt	lt
 810c41e:	464c      	movlt	r4, r9
 810c420:	4699      	movlt	r9, r3
 810c422:	6927      	ldr	r7, [r4, #16]
 810c424:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810c428:	68a3      	ldr	r3, [r4, #8]
 810c42a:	6861      	ldr	r1, [r4, #4]
 810c42c:	eb07 060a 	add.w	r6, r7, sl
 810c430:	42b3      	cmp	r3, r6
 810c432:	b085      	sub	sp, #20
 810c434:	bfb8      	it	lt
 810c436:	3101      	addlt	r1, #1
 810c438:	f7ff fe90 	bl	810c15c <_Balloc>
 810c43c:	b930      	cbnz	r0, 810c44c <__multiply+0x44>
 810c43e:	4602      	mov	r2, r0
 810c440:	4b44      	ldr	r3, [pc, #272]	; (810c554 <__multiply+0x14c>)
 810c442:	4845      	ldr	r0, [pc, #276]	; (810c558 <__multiply+0x150>)
 810c444:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810c448:	f001 fdd6 	bl	810dff8 <__assert_func>
 810c44c:	f100 0514 	add.w	r5, r0, #20
 810c450:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810c454:	462b      	mov	r3, r5
 810c456:	2200      	movs	r2, #0
 810c458:	4543      	cmp	r3, r8
 810c45a:	d321      	bcc.n	810c4a0 <__multiply+0x98>
 810c45c:	f104 0314 	add.w	r3, r4, #20
 810c460:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810c464:	f109 0314 	add.w	r3, r9, #20
 810c468:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810c46c:	9202      	str	r2, [sp, #8]
 810c46e:	1b3a      	subs	r2, r7, r4
 810c470:	3a15      	subs	r2, #21
 810c472:	f022 0203 	bic.w	r2, r2, #3
 810c476:	3204      	adds	r2, #4
 810c478:	f104 0115 	add.w	r1, r4, #21
 810c47c:	428f      	cmp	r7, r1
 810c47e:	bf38      	it	cc
 810c480:	2204      	movcc	r2, #4
 810c482:	9201      	str	r2, [sp, #4]
 810c484:	9a02      	ldr	r2, [sp, #8]
 810c486:	9303      	str	r3, [sp, #12]
 810c488:	429a      	cmp	r2, r3
 810c48a:	d80c      	bhi.n	810c4a6 <__multiply+0x9e>
 810c48c:	2e00      	cmp	r6, #0
 810c48e:	dd03      	ble.n	810c498 <__multiply+0x90>
 810c490:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810c494:	2b00      	cmp	r3, #0
 810c496:	d05b      	beq.n	810c550 <__multiply+0x148>
 810c498:	6106      	str	r6, [r0, #16]
 810c49a:	b005      	add	sp, #20
 810c49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c4a0:	f843 2b04 	str.w	r2, [r3], #4
 810c4a4:	e7d8      	b.n	810c458 <__multiply+0x50>
 810c4a6:	f8b3 a000 	ldrh.w	sl, [r3]
 810c4aa:	f1ba 0f00 	cmp.w	sl, #0
 810c4ae:	d024      	beq.n	810c4fa <__multiply+0xf2>
 810c4b0:	f104 0e14 	add.w	lr, r4, #20
 810c4b4:	46a9      	mov	r9, r5
 810c4b6:	f04f 0c00 	mov.w	ip, #0
 810c4ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 810c4be:	f8d9 1000 	ldr.w	r1, [r9]
 810c4c2:	fa1f fb82 	uxth.w	fp, r2
 810c4c6:	b289      	uxth	r1, r1
 810c4c8:	fb0a 110b 	mla	r1, sl, fp, r1
 810c4cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810c4d0:	f8d9 2000 	ldr.w	r2, [r9]
 810c4d4:	4461      	add	r1, ip
 810c4d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c4da:	fb0a c20b 	mla	r2, sl, fp, ip
 810c4de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810c4e2:	b289      	uxth	r1, r1
 810c4e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810c4e8:	4577      	cmp	r7, lr
 810c4ea:	f849 1b04 	str.w	r1, [r9], #4
 810c4ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810c4f2:	d8e2      	bhi.n	810c4ba <__multiply+0xb2>
 810c4f4:	9a01      	ldr	r2, [sp, #4]
 810c4f6:	f845 c002 	str.w	ip, [r5, r2]
 810c4fa:	9a03      	ldr	r2, [sp, #12]
 810c4fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810c500:	3304      	adds	r3, #4
 810c502:	f1b9 0f00 	cmp.w	r9, #0
 810c506:	d021      	beq.n	810c54c <__multiply+0x144>
 810c508:	6829      	ldr	r1, [r5, #0]
 810c50a:	f104 0c14 	add.w	ip, r4, #20
 810c50e:	46ae      	mov	lr, r5
 810c510:	f04f 0a00 	mov.w	sl, #0
 810c514:	f8bc b000 	ldrh.w	fp, [ip]
 810c518:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810c51c:	fb09 220b 	mla	r2, r9, fp, r2
 810c520:	4452      	add	r2, sl
 810c522:	b289      	uxth	r1, r1
 810c524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810c528:	f84e 1b04 	str.w	r1, [lr], #4
 810c52c:	f85c 1b04 	ldr.w	r1, [ip], #4
 810c530:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810c534:	f8be 1000 	ldrh.w	r1, [lr]
 810c538:	fb09 110a 	mla	r1, r9, sl, r1
 810c53c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810c540:	4567      	cmp	r7, ip
 810c542:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810c546:	d8e5      	bhi.n	810c514 <__multiply+0x10c>
 810c548:	9a01      	ldr	r2, [sp, #4]
 810c54a:	50a9      	str	r1, [r5, r2]
 810c54c:	3504      	adds	r5, #4
 810c54e:	e799      	b.n	810c484 <__multiply+0x7c>
 810c550:	3e01      	subs	r6, #1
 810c552:	e79b      	b.n	810c48c <__multiply+0x84>
 810c554:	081e682d 	.word	0x081e682d
 810c558:	081e683e 	.word	0x081e683e

0810c55c <__pow5mult>:
 810c55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c560:	4615      	mov	r5, r2
 810c562:	f012 0203 	ands.w	r2, r2, #3
 810c566:	4606      	mov	r6, r0
 810c568:	460f      	mov	r7, r1
 810c56a:	d007      	beq.n	810c57c <__pow5mult+0x20>
 810c56c:	4c25      	ldr	r4, [pc, #148]	; (810c604 <__pow5mult+0xa8>)
 810c56e:	3a01      	subs	r2, #1
 810c570:	2300      	movs	r3, #0
 810c572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c576:	f7ff fe53 	bl	810c220 <__multadd>
 810c57a:	4607      	mov	r7, r0
 810c57c:	10ad      	asrs	r5, r5, #2
 810c57e:	d03d      	beq.n	810c5fc <__pow5mult+0xa0>
 810c580:	69f4      	ldr	r4, [r6, #28]
 810c582:	b97c      	cbnz	r4, 810c5a4 <__pow5mult+0x48>
 810c584:	2010      	movs	r0, #16
 810c586:	f7fd fcfb 	bl	8109f80 <malloc>
 810c58a:	4602      	mov	r2, r0
 810c58c:	61f0      	str	r0, [r6, #28]
 810c58e:	b928      	cbnz	r0, 810c59c <__pow5mult+0x40>
 810c590:	4b1d      	ldr	r3, [pc, #116]	; (810c608 <__pow5mult+0xac>)
 810c592:	481e      	ldr	r0, [pc, #120]	; (810c60c <__pow5mult+0xb0>)
 810c594:	f240 11b3 	movw	r1, #435	; 0x1b3
 810c598:	f001 fd2e 	bl	810dff8 <__assert_func>
 810c59c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c5a0:	6004      	str	r4, [r0, #0]
 810c5a2:	60c4      	str	r4, [r0, #12]
 810c5a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810c5a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c5ac:	b94c      	cbnz	r4, 810c5c2 <__pow5mult+0x66>
 810c5ae:	f240 2171 	movw	r1, #625	; 0x271
 810c5b2:	4630      	mov	r0, r6
 810c5b4:	f7ff ff12 	bl	810c3dc <__i2b>
 810c5b8:	2300      	movs	r3, #0
 810c5ba:	f8c8 0008 	str.w	r0, [r8, #8]
 810c5be:	4604      	mov	r4, r0
 810c5c0:	6003      	str	r3, [r0, #0]
 810c5c2:	f04f 0900 	mov.w	r9, #0
 810c5c6:	07eb      	lsls	r3, r5, #31
 810c5c8:	d50a      	bpl.n	810c5e0 <__pow5mult+0x84>
 810c5ca:	4639      	mov	r1, r7
 810c5cc:	4622      	mov	r2, r4
 810c5ce:	4630      	mov	r0, r6
 810c5d0:	f7ff ff1a 	bl	810c408 <__multiply>
 810c5d4:	4639      	mov	r1, r7
 810c5d6:	4680      	mov	r8, r0
 810c5d8:	4630      	mov	r0, r6
 810c5da:	f7ff fdff 	bl	810c1dc <_Bfree>
 810c5de:	4647      	mov	r7, r8
 810c5e0:	106d      	asrs	r5, r5, #1
 810c5e2:	d00b      	beq.n	810c5fc <__pow5mult+0xa0>
 810c5e4:	6820      	ldr	r0, [r4, #0]
 810c5e6:	b938      	cbnz	r0, 810c5f8 <__pow5mult+0x9c>
 810c5e8:	4622      	mov	r2, r4
 810c5ea:	4621      	mov	r1, r4
 810c5ec:	4630      	mov	r0, r6
 810c5ee:	f7ff ff0b 	bl	810c408 <__multiply>
 810c5f2:	6020      	str	r0, [r4, #0]
 810c5f4:	f8c0 9000 	str.w	r9, [r0]
 810c5f8:	4604      	mov	r4, r0
 810c5fa:	e7e4      	b.n	810c5c6 <__pow5mult+0x6a>
 810c5fc:	4638      	mov	r0, r7
 810c5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c602:	bf00      	nop
 810c604:	081e6988 	.word	0x081e6988
 810c608:	081e67be 	.word	0x081e67be
 810c60c:	081e683e 	.word	0x081e683e

0810c610 <__lshift>:
 810c610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c614:	460c      	mov	r4, r1
 810c616:	6849      	ldr	r1, [r1, #4]
 810c618:	6923      	ldr	r3, [r4, #16]
 810c61a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810c61e:	68a3      	ldr	r3, [r4, #8]
 810c620:	4607      	mov	r7, r0
 810c622:	4691      	mov	r9, r2
 810c624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c628:	f108 0601 	add.w	r6, r8, #1
 810c62c:	42b3      	cmp	r3, r6
 810c62e:	db0b      	blt.n	810c648 <__lshift+0x38>
 810c630:	4638      	mov	r0, r7
 810c632:	f7ff fd93 	bl	810c15c <_Balloc>
 810c636:	4605      	mov	r5, r0
 810c638:	b948      	cbnz	r0, 810c64e <__lshift+0x3e>
 810c63a:	4602      	mov	r2, r0
 810c63c:	4b28      	ldr	r3, [pc, #160]	; (810c6e0 <__lshift+0xd0>)
 810c63e:	4829      	ldr	r0, [pc, #164]	; (810c6e4 <__lshift+0xd4>)
 810c640:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810c644:	f001 fcd8 	bl	810dff8 <__assert_func>
 810c648:	3101      	adds	r1, #1
 810c64a:	005b      	lsls	r3, r3, #1
 810c64c:	e7ee      	b.n	810c62c <__lshift+0x1c>
 810c64e:	2300      	movs	r3, #0
 810c650:	f100 0114 	add.w	r1, r0, #20
 810c654:	f100 0210 	add.w	r2, r0, #16
 810c658:	4618      	mov	r0, r3
 810c65a:	4553      	cmp	r3, sl
 810c65c:	db33      	blt.n	810c6c6 <__lshift+0xb6>
 810c65e:	6920      	ldr	r0, [r4, #16]
 810c660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c664:	f104 0314 	add.w	r3, r4, #20
 810c668:	f019 091f 	ands.w	r9, r9, #31
 810c66c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c670:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810c674:	d02b      	beq.n	810c6ce <__lshift+0xbe>
 810c676:	f1c9 0e20 	rsb	lr, r9, #32
 810c67a:	468a      	mov	sl, r1
 810c67c:	2200      	movs	r2, #0
 810c67e:	6818      	ldr	r0, [r3, #0]
 810c680:	fa00 f009 	lsl.w	r0, r0, r9
 810c684:	4310      	orrs	r0, r2
 810c686:	f84a 0b04 	str.w	r0, [sl], #4
 810c68a:	f853 2b04 	ldr.w	r2, [r3], #4
 810c68e:	459c      	cmp	ip, r3
 810c690:	fa22 f20e 	lsr.w	r2, r2, lr
 810c694:	d8f3      	bhi.n	810c67e <__lshift+0x6e>
 810c696:	ebac 0304 	sub.w	r3, ip, r4
 810c69a:	3b15      	subs	r3, #21
 810c69c:	f023 0303 	bic.w	r3, r3, #3
 810c6a0:	3304      	adds	r3, #4
 810c6a2:	f104 0015 	add.w	r0, r4, #21
 810c6a6:	4584      	cmp	ip, r0
 810c6a8:	bf38      	it	cc
 810c6aa:	2304      	movcc	r3, #4
 810c6ac:	50ca      	str	r2, [r1, r3]
 810c6ae:	b10a      	cbz	r2, 810c6b4 <__lshift+0xa4>
 810c6b0:	f108 0602 	add.w	r6, r8, #2
 810c6b4:	3e01      	subs	r6, #1
 810c6b6:	4638      	mov	r0, r7
 810c6b8:	612e      	str	r6, [r5, #16]
 810c6ba:	4621      	mov	r1, r4
 810c6bc:	f7ff fd8e 	bl	810c1dc <_Bfree>
 810c6c0:	4628      	mov	r0, r5
 810c6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c6c6:	f842 0f04 	str.w	r0, [r2, #4]!
 810c6ca:	3301      	adds	r3, #1
 810c6cc:	e7c5      	b.n	810c65a <__lshift+0x4a>
 810c6ce:	3904      	subs	r1, #4
 810c6d0:	f853 2b04 	ldr.w	r2, [r3], #4
 810c6d4:	f841 2f04 	str.w	r2, [r1, #4]!
 810c6d8:	459c      	cmp	ip, r3
 810c6da:	d8f9      	bhi.n	810c6d0 <__lshift+0xc0>
 810c6dc:	e7ea      	b.n	810c6b4 <__lshift+0xa4>
 810c6de:	bf00      	nop
 810c6e0:	081e682d 	.word	0x081e682d
 810c6e4:	081e683e 	.word	0x081e683e

0810c6e8 <__mcmp>:
 810c6e8:	b530      	push	{r4, r5, lr}
 810c6ea:	6902      	ldr	r2, [r0, #16]
 810c6ec:	690c      	ldr	r4, [r1, #16]
 810c6ee:	1b12      	subs	r2, r2, r4
 810c6f0:	d10e      	bne.n	810c710 <__mcmp+0x28>
 810c6f2:	f100 0314 	add.w	r3, r0, #20
 810c6f6:	3114      	adds	r1, #20
 810c6f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c6fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c700:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c704:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c708:	42a5      	cmp	r5, r4
 810c70a:	d003      	beq.n	810c714 <__mcmp+0x2c>
 810c70c:	d305      	bcc.n	810c71a <__mcmp+0x32>
 810c70e:	2201      	movs	r2, #1
 810c710:	4610      	mov	r0, r2
 810c712:	bd30      	pop	{r4, r5, pc}
 810c714:	4283      	cmp	r3, r0
 810c716:	d3f3      	bcc.n	810c700 <__mcmp+0x18>
 810c718:	e7fa      	b.n	810c710 <__mcmp+0x28>
 810c71a:	f04f 32ff 	mov.w	r2, #4294967295
 810c71e:	e7f7      	b.n	810c710 <__mcmp+0x28>

0810c720 <__mdiff>:
 810c720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c724:	460c      	mov	r4, r1
 810c726:	4606      	mov	r6, r0
 810c728:	4611      	mov	r1, r2
 810c72a:	4620      	mov	r0, r4
 810c72c:	4690      	mov	r8, r2
 810c72e:	f7ff ffdb 	bl	810c6e8 <__mcmp>
 810c732:	1e05      	subs	r5, r0, #0
 810c734:	d110      	bne.n	810c758 <__mdiff+0x38>
 810c736:	4629      	mov	r1, r5
 810c738:	4630      	mov	r0, r6
 810c73a:	f7ff fd0f 	bl	810c15c <_Balloc>
 810c73e:	b930      	cbnz	r0, 810c74e <__mdiff+0x2e>
 810c740:	4b3a      	ldr	r3, [pc, #232]	; (810c82c <__mdiff+0x10c>)
 810c742:	4602      	mov	r2, r0
 810c744:	f240 2137 	movw	r1, #567	; 0x237
 810c748:	4839      	ldr	r0, [pc, #228]	; (810c830 <__mdiff+0x110>)
 810c74a:	f001 fc55 	bl	810dff8 <__assert_func>
 810c74e:	2301      	movs	r3, #1
 810c750:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c758:	bfa4      	itt	ge
 810c75a:	4643      	movge	r3, r8
 810c75c:	46a0      	movge	r8, r4
 810c75e:	4630      	mov	r0, r6
 810c760:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c764:	bfa6      	itte	ge
 810c766:	461c      	movge	r4, r3
 810c768:	2500      	movge	r5, #0
 810c76a:	2501      	movlt	r5, #1
 810c76c:	f7ff fcf6 	bl	810c15c <_Balloc>
 810c770:	b920      	cbnz	r0, 810c77c <__mdiff+0x5c>
 810c772:	4b2e      	ldr	r3, [pc, #184]	; (810c82c <__mdiff+0x10c>)
 810c774:	4602      	mov	r2, r0
 810c776:	f240 2145 	movw	r1, #581	; 0x245
 810c77a:	e7e5      	b.n	810c748 <__mdiff+0x28>
 810c77c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c780:	6926      	ldr	r6, [r4, #16]
 810c782:	60c5      	str	r5, [r0, #12]
 810c784:	f104 0914 	add.w	r9, r4, #20
 810c788:	f108 0514 	add.w	r5, r8, #20
 810c78c:	f100 0e14 	add.w	lr, r0, #20
 810c790:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810c794:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810c798:	f108 0210 	add.w	r2, r8, #16
 810c79c:	46f2      	mov	sl, lr
 810c79e:	2100      	movs	r1, #0
 810c7a0:	f859 3b04 	ldr.w	r3, [r9], #4
 810c7a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c7a8:	fa11 f88b 	uxtah	r8, r1, fp
 810c7ac:	b299      	uxth	r1, r3
 810c7ae:	0c1b      	lsrs	r3, r3, #16
 810c7b0:	eba8 0801 	sub.w	r8, r8, r1
 810c7b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c7b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c7bc:	fa1f f888 	uxth.w	r8, r8
 810c7c0:	1419      	asrs	r1, r3, #16
 810c7c2:	454e      	cmp	r6, r9
 810c7c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c7c8:	f84a 3b04 	str.w	r3, [sl], #4
 810c7cc:	d8e8      	bhi.n	810c7a0 <__mdiff+0x80>
 810c7ce:	1b33      	subs	r3, r6, r4
 810c7d0:	3b15      	subs	r3, #21
 810c7d2:	f023 0303 	bic.w	r3, r3, #3
 810c7d6:	3304      	adds	r3, #4
 810c7d8:	3415      	adds	r4, #21
 810c7da:	42a6      	cmp	r6, r4
 810c7dc:	bf38      	it	cc
 810c7de:	2304      	movcc	r3, #4
 810c7e0:	441d      	add	r5, r3
 810c7e2:	4473      	add	r3, lr
 810c7e4:	469e      	mov	lr, r3
 810c7e6:	462e      	mov	r6, r5
 810c7e8:	4566      	cmp	r6, ip
 810c7ea:	d30e      	bcc.n	810c80a <__mdiff+0xea>
 810c7ec:	f10c 0203 	add.w	r2, ip, #3
 810c7f0:	1b52      	subs	r2, r2, r5
 810c7f2:	f022 0203 	bic.w	r2, r2, #3
 810c7f6:	3d03      	subs	r5, #3
 810c7f8:	45ac      	cmp	ip, r5
 810c7fa:	bf38      	it	cc
 810c7fc:	2200      	movcc	r2, #0
 810c7fe:	4413      	add	r3, r2
 810c800:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810c804:	b17a      	cbz	r2, 810c826 <__mdiff+0x106>
 810c806:	6107      	str	r7, [r0, #16]
 810c808:	e7a4      	b.n	810c754 <__mdiff+0x34>
 810c80a:	f856 8b04 	ldr.w	r8, [r6], #4
 810c80e:	fa11 f288 	uxtah	r2, r1, r8
 810c812:	1414      	asrs	r4, r2, #16
 810c814:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810c818:	b292      	uxth	r2, r2
 810c81a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810c81e:	f84e 2b04 	str.w	r2, [lr], #4
 810c822:	1421      	asrs	r1, r4, #16
 810c824:	e7e0      	b.n	810c7e8 <__mdiff+0xc8>
 810c826:	3f01      	subs	r7, #1
 810c828:	e7ea      	b.n	810c800 <__mdiff+0xe0>
 810c82a:	bf00      	nop
 810c82c:	081e682d 	.word	0x081e682d
 810c830:	081e683e 	.word	0x081e683e

0810c834 <__ulp>:
 810c834:	b082      	sub	sp, #8
 810c836:	ed8d 0b00 	vstr	d0, [sp]
 810c83a:	9a01      	ldr	r2, [sp, #4]
 810c83c:	4b0f      	ldr	r3, [pc, #60]	; (810c87c <__ulp+0x48>)
 810c83e:	4013      	ands	r3, r2
 810c840:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810c844:	2b00      	cmp	r3, #0
 810c846:	dc08      	bgt.n	810c85a <__ulp+0x26>
 810c848:	425b      	negs	r3, r3
 810c84a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810c84e:	ea4f 5223 	mov.w	r2, r3, asr #20
 810c852:	da04      	bge.n	810c85e <__ulp+0x2a>
 810c854:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810c858:	4113      	asrs	r3, r2
 810c85a:	2200      	movs	r2, #0
 810c85c:	e008      	b.n	810c870 <__ulp+0x3c>
 810c85e:	f1a2 0314 	sub.w	r3, r2, #20
 810c862:	2b1e      	cmp	r3, #30
 810c864:	bfda      	itte	le
 810c866:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810c86a:	40da      	lsrle	r2, r3
 810c86c:	2201      	movgt	r2, #1
 810c86e:	2300      	movs	r3, #0
 810c870:	4619      	mov	r1, r3
 810c872:	4610      	mov	r0, r2
 810c874:	ec41 0b10 	vmov	d0, r0, r1
 810c878:	b002      	add	sp, #8
 810c87a:	4770      	bx	lr
 810c87c:	7ff00000 	.word	0x7ff00000

0810c880 <__b2d>:
 810c880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c884:	6906      	ldr	r6, [r0, #16]
 810c886:	f100 0814 	add.w	r8, r0, #20
 810c88a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810c88e:	1f37      	subs	r7, r6, #4
 810c890:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c894:	4610      	mov	r0, r2
 810c896:	f7ff fd53 	bl	810c340 <__hi0bits>
 810c89a:	f1c0 0320 	rsb	r3, r0, #32
 810c89e:	280a      	cmp	r0, #10
 810c8a0:	600b      	str	r3, [r1, #0]
 810c8a2:	491b      	ldr	r1, [pc, #108]	; (810c910 <__b2d+0x90>)
 810c8a4:	dc15      	bgt.n	810c8d2 <__b2d+0x52>
 810c8a6:	f1c0 0c0b 	rsb	ip, r0, #11
 810c8aa:	fa22 f30c 	lsr.w	r3, r2, ip
 810c8ae:	45b8      	cmp	r8, r7
 810c8b0:	ea43 0501 	orr.w	r5, r3, r1
 810c8b4:	bf34      	ite	cc
 810c8b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c8ba:	2300      	movcs	r3, #0
 810c8bc:	3015      	adds	r0, #21
 810c8be:	fa02 f000 	lsl.w	r0, r2, r0
 810c8c2:	fa23 f30c 	lsr.w	r3, r3, ip
 810c8c6:	4303      	orrs	r3, r0
 810c8c8:	461c      	mov	r4, r3
 810c8ca:	ec45 4b10 	vmov	d0, r4, r5
 810c8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c8d2:	45b8      	cmp	r8, r7
 810c8d4:	bf3a      	itte	cc
 810c8d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c8da:	f1a6 0708 	subcc.w	r7, r6, #8
 810c8de:	2300      	movcs	r3, #0
 810c8e0:	380b      	subs	r0, #11
 810c8e2:	d012      	beq.n	810c90a <__b2d+0x8a>
 810c8e4:	f1c0 0120 	rsb	r1, r0, #32
 810c8e8:	fa23 f401 	lsr.w	r4, r3, r1
 810c8ec:	4082      	lsls	r2, r0
 810c8ee:	4322      	orrs	r2, r4
 810c8f0:	4547      	cmp	r7, r8
 810c8f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810c8f6:	bf8c      	ite	hi
 810c8f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810c8fc:	2200      	movls	r2, #0
 810c8fe:	4083      	lsls	r3, r0
 810c900:	40ca      	lsrs	r2, r1
 810c902:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810c906:	4313      	orrs	r3, r2
 810c908:	e7de      	b.n	810c8c8 <__b2d+0x48>
 810c90a:	ea42 0501 	orr.w	r5, r2, r1
 810c90e:	e7db      	b.n	810c8c8 <__b2d+0x48>
 810c910:	3ff00000 	.word	0x3ff00000

0810c914 <__d2b>:
 810c914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c918:	460f      	mov	r7, r1
 810c91a:	2101      	movs	r1, #1
 810c91c:	ec59 8b10 	vmov	r8, r9, d0
 810c920:	4616      	mov	r6, r2
 810c922:	f7ff fc1b 	bl	810c15c <_Balloc>
 810c926:	4604      	mov	r4, r0
 810c928:	b930      	cbnz	r0, 810c938 <__d2b+0x24>
 810c92a:	4602      	mov	r2, r0
 810c92c:	4b24      	ldr	r3, [pc, #144]	; (810c9c0 <__d2b+0xac>)
 810c92e:	4825      	ldr	r0, [pc, #148]	; (810c9c4 <__d2b+0xb0>)
 810c930:	f240 310f 	movw	r1, #783	; 0x30f
 810c934:	f001 fb60 	bl	810dff8 <__assert_func>
 810c938:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c93c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c940:	bb2d      	cbnz	r5, 810c98e <__d2b+0x7a>
 810c942:	9301      	str	r3, [sp, #4]
 810c944:	f1b8 0300 	subs.w	r3, r8, #0
 810c948:	d026      	beq.n	810c998 <__d2b+0x84>
 810c94a:	4668      	mov	r0, sp
 810c94c:	9300      	str	r3, [sp, #0]
 810c94e:	f7ff fd17 	bl	810c380 <__lo0bits>
 810c952:	e9dd 1200 	ldrd	r1, r2, [sp]
 810c956:	b1e8      	cbz	r0, 810c994 <__d2b+0x80>
 810c958:	f1c0 0320 	rsb	r3, r0, #32
 810c95c:	fa02 f303 	lsl.w	r3, r2, r3
 810c960:	430b      	orrs	r3, r1
 810c962:	40c2      	lsrs	r2, r0
 810c964:	6163      	str	r3, [r4, #20]
 810c966:	9201      	str	r2, [sp, #4]
 810c968:	9b01      	ldr	r3, [sp, #4]
 810c96a:	61a3      	str	r3, [r4, #24]
 810c96c:	2b00      	cmp	r3, #0
 810c96e:	bf14      	ite	ne
 810c970:	2202      	movne	r2, #2
 810c972:	2201      	moveq	r2, #1
 810c974:	6122      	str	r2, [r4, #16]
 810c976:	b1bd      	cbz	r5, 810c9a8 <__d2b+0x94>
 810c978:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c97c:	4405      	add	r5, r0
 810c97e:	603d      	str	r5, [r7, #0]
 810c980:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c984:	6030      	str	r0, [r6, #0]
 810c986:	4620      	mov	r0, r4
 810c988:	b003      	add	sp, #12
 810c98a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c98e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c992:	e7d6      	b.n	810c942 <__d2b+0x2e>
 810c994:	6161      	str	r1, [r4, #20]
 810c996:	e7e7      	b.n	810c968 <__d2b+0x54>
 810c998:	a801      	add	r0, sp, #4
 810c99a:	f7ff fcf1 	bl	810c380 <__lo0bits>
 810c99e:	9b01      	ldr	r3, [sp, #4]
 810c9a0:	6163      	str	r3, [r4, #20]
 810c9a2:	3020      	adds	r0, #32
 810c9a4:	2201      	movs	r2, #1
 810c9a6:	e7e5      	b.n	810c974 <__d2b+0x60>
 810c9a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c9ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c9b0:	6038      	str	r0, [r7, #0]
 810c9b2:	6918      	ldr	r0, [r3, #16]
 810c9b4:	f7ff fcc4 	bl	810c340 <__hi0bits>
 810c9b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c9bc:	e7e2      	b.n	810c984 <__d2b+0x70>
 810c9be:	bf00      	nop
 810c9c0:	081e682d 	.word	0x081e682d
 810c9c4:	081e683e 	.word	0x081e683e

0810c9c8 <__ratio>:
 810c9c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c9cc:	4688      	mov	r8, r1
 810c9ce:	4669      	mov	r1, sp
 810c9d0:	4681      	mov	r9, r0
 810c9d2:	f7ff ff55 	bl	810c880 <__b2d>
 810c9d6:	a901      	add	r1, sp, #4
 810c9d8:	4640      	mov	r0, r8
 810c9da:	ec55 4b10 	vmov	r4, r5, d0
 810c9de:	f7ff ff4f 	bl	810c880 <__b2d>
 810c9e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c9e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c9ea:	eba3 0c02 	sub.w	ip, r3, r2
 810c9ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c9f2:	1a9b      	subs	r3, r3, r2
 810c9f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c9f8:	ec51 0b10 	vmov	r0, r1, d0
 810c9fc:	2b00      	cmp	r3, #0
 810c9fe:	bfd6      	itet	le
 810ca00:	460a      	movle	r2, r1
 810ca02:	462a      	movgt	r2, r5
 810ca04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ca08:	468b      	mov	fp, r1
 810ca0a:	462f      	mov	r7, r5
 810ca0c:	bfd4      	ite	le
 810ca0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ca12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ca16:	4620      	mov	r0, r4
 810ca18:	ee10 2a10 	vmov	r2, s0
 810ca1c:	465b      	mov	r3, fp
 810ca1e:	4639      	mov	r1, r7
 810ca20:	f7f3 ff9c 	bl	810095c <__aeabi_ddiv>
 810ca24:	ec41 0b10 	vmov	d0, r0, r1
 810ca28:	b003      	add	sp, #12
 810ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ca2e <__copybits>:
 810ca2e:	3901      	subs	r1, #1
 810ca30:	b570      	push	{r4, r5, r6, lr}
 810ca32:	1149      	asrs	r1, r1, #5
 810ca34:	6914      	ldr	r4, [r2, #16]
 810ca36:	3101      	adds	r1, #1
 810ca38:	f102 0314 	add.w	r3, r2, #20
 810ca3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ca40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ca44:	1f05      	subs	r5, r0, #4
 810ca46:	42a3      	cmp	r3, r4
 810ca48:	d30c      	bcc.n	810ca64 <__copybits+0x36>
 810ca4a:	1aa3      	subs	r3, r4, r2
 810ca4c:	3b11      	subs	r3, #17
 810ca4e:	f023 0303 	bic.w	r3, r3, #3
 810ca52:	3211      	adds	r2, #17
 810ca54:	42a2      	cmp	r2, r4
 810ca56:	bf88      	it	hi
 810ca58:	2300      	movhi	r3, #0
 810ca5a:	4418      	add	r0, r3
 810ca5c:	2300      	movs	r3, #0
 810ca5e:	4288      	cmp	r0, r1
 810ca60:	d305      	bcc.n	810ca6e <__copybits+0x40>
 810ca62:	bd70      	pop	{r4, r5, r6, pc}
 810ca64:	f853 6b04 	ldr.w	r6, [r3], #4
 810ca68:	f845 6f04 	str.w	r6, [r5, #4]!
 810ca6c:	e7eb      	b.n	810ca46 <__copybits+0x18>
 810ca6e:	f840 3b04 	str.w	r3, [r0], #4
 810ca72:	e7f4      	b.n	810ca5e <__copybits+0x30>

0810ca74 <__any_on>:
 810ca74:	f100 0214 	add.w	r2, r0, #20
 810ca78:	6900      	ldr	r0, [r0, #16]
 810ca7a:	114b      	asrs	r3, r1, #5
 810ca7c:	4298      	cmp	r0, r3
 810ca7e:	b510      	push	{r4, lr}
 810ca80:	db11      	blt.n	810caa6 <__any_on+0x32>
 810ca82:	dd0a      	ble.n	810ca9a <__any_on+0x26>
 810ca84:	f011 011f 	ands.w	r1, r1, #31
 810ca88:	d007      	beq.n	810ca9a <__any_on+0x26>
 810ca8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ca8e:	fa24 f001 	lsr.w	r0, r4, r1
 810ca92:	fa00 f101 	lsl.w	r1, r0, r1
 810ca96:	428c      	cmp	r4, r1
 810ca98:	d10b      	bne.n	810cab2 <__any_on+0x3e>
 810ca9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ca9e:	4293      	cmp	r3, r2
 810caa0:	d803      	bhi.n	810caaa <__any_on+0x36>
 810caa2:	2000      	movs	r0, #0
 810caa4:	bd10      	pop	{r4, pc}
 810caa6:	4603      	mov	r3, r0
 810caa8:	e7f7      	b.n	810ca9a <__any_on+0x26>
 810caaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810caae:	2900      	cmp	r1, #0
 810cab0:	d0f5      	beq.n	810ca9e <__any_on+0x2a>
 810cab2:	2001      	movs	r0, #1
 810cab4:	e7f6      	b.n	810caa4 <__any_on+0x30>

0810cab6 <_malloc_usable_size_r>:
 810cab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810caba:	1f18      	subs	r0, r3, #4
 810cabc:	2b00      	cmp	r3, #0
 810cabe:	bfbc      	itt	lt
 810cac0:	580b      	ldrlt	r3, [r1, r0]
 810cac2:	18c0      	addlt	r0, r0, r3
 810cac4:	4770      	bx	lr

0810cac6 <sulp>:
 810cac6:	b570      	push	{r4, r5, r6, lr}
 810cac8:	4604      	mov	r4, r0
 810caca:	460d      	mov	r5, r1
 810cacc:	ec45 4b10 	vmov	d0, r4, r5
 810cad0:	4616      	mov	r6, r2
 810cad2:	f7ff feaf 	bl	810c834 <__ulp>
 810cad6:	ec51 0b10 	vmov	r0, r1, d0
 810cada:	b17e      	cbz	r6, 810cafc <sulp+0x36>
 810cadc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810cae0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810cae4:	2b00      	cmp	r3, #0
 810cae6:	dd09      	ble.n	810cafc <sulp+0x36>
 810cae8:	051b      	lsls	r3, r3, #20
 810caea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810caee:	2400      	movs	r4, #0
 810caf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810caf4:	4622      	mov	r2, r4
 810caf6:	462b      	mov	r3, r5
 810caf8:	f7f3 fe06 	bl	8100708 <__aeabi_dmul>
 810cafc:	bd70      	pop	{r4, r5, r6, pc}
	...

0810cb00 <_strtod_l>:
 810cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cb04:	ed2d 8b02 	vpush	{d8}
 810cb08:	b09b      	sub	sp, #108	; 0x6c
 810cb0a:	4604      	mov	r4, r0
 810cb0c:	9213      	str	r2, [sp, #76]	; 0x4c
 810cb0e:	2200      	movs	r2, #0
 810cb10:	9216      	str	r2, [sp, #88]	; 0x58
 810cb12:	460d      	mov	r5, r1
 810cb14:	f04f 0800 	mov.w	r8, #0
 810cb18:	f04f 0900 	mov.w	r9, #0
 810cb1c:	460a      	mov	r2, r1
 810cb1e:	9215      	str	r2, [sp, #84]	; 0x54
 810cb20:	7811      	ldrb	r1, [r2, #0]
 810cb22:	292b      	cmp	r1, #43	; 0x2b
 810cb24:	d04c      	beq.n	810cbc0 <_strtod_l+0xc0>
 810cb26:	d83a      	bhi.n	810cb9e <_strtod_l+0x9e>
 810cb28:	290d      	cmp	r1, #13
 810cb2a:	d834      	bhi.n	810cb96 <_strtod_l+0x96>
 810cb2c:	2908      	cmp	r1, #8
 810cb2e:	d834      	bhi.n	810cb9a <_strtod_l+0x9a>
 810cb30:	2900      	cmp	r1, #0
 810cb32:	d03d      	beq.n	810cbb0 <_strtod_l+0xb0>
 810cb34:	2200      	movs	r2, #0
 810cb36:	920a      	str	r2, [sp, #40]	; 0x28
 810cb38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 810cb3a:	7832      	ldrb	r2, [r6, #0]
 810cb3c:	2a30      	cmp	r2, #48	; 0x30
 810cb3e:	f040 80b4 	bne.w	810ccaa <_strtod_l+0x1aa>
 810cb42:	7872      	ldrb	r2, [r6, #1]
 810cb44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 810cb48:	2a58      	cmp	r2, #88	; 0x58
 810cb4a:	d170      	bne.n	810cc2e <_strtod_l+0x12e>
 810cb4c:	9302      	str	r3, [sp, #8]
 810cb4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cb50:	9301      	str	r3, [sp, #4]
 810cb52:	ab16      	add	r3, sp, #88	; 0x58
 810cb54:	9300      	str	r3, [sp, #0]
 810cb56:	4a8e      	ldr	r2, [pc, #568]	; (810cd90 <_strtod_l+0x290>)
 810cb58:	ab17      	add	r3, sp, #92	; 0x5c
 810cb5a:	a915      	add	r1, sp, #84	; 0x54
 810cb5c:	4620      	mov	r0, r4
 810cb5e:	f001 fae7 	bl	810e130 <__gethex>
 810cb62:	f010 070f 	ands.w	r7, r0, #15
 810cb66:	4605      	mov	r5, r0
 810cb68:	d005      	beq.n	810cb76 <_strtod_l+0x76>
 810cb6a:	2f06      	cmp	r7, #6
 810cb6c:	d12a      	bne.n	810cbc4 <_strtod_l+0xc4>
 810cb6e:	3601      	adds	r6, #1
 810cb70:	2300      	movs	r3, #0
 810cb72:	9615      	str	r6, [sp, #84]	; 0x54
 810cb74:	930a      	str	r3, [sp, #40]	; 0x28
 810cb76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810cb78:	2b00      	cmp	r3, #0
 810cb7a:	f040 857f 	bne.w	810d67c <_strtod_l+0xb7c>
 810cb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cb80:	b1db      	cbz	r3, 810cbba <_strtod_l+0xba>
 810cb82:	4642      	mov	r2, r8
 810cb84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810cb88:	ec43 2b10 	vmov	d0, r2, r3
 810cb8c:	b01b      	add	sp, #108	; 0x6c
 810cb8e:	ecbd 8b02 	vpop	{d8}
 810cb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cb96:	2920      	cmp	r1, #32
 810cb98:	d1cc      	bne.n	810cb34 <_strtod_l+0x34>
 810cb9a:	3201      	adds	r2, #1
 810cb9c:	e7bf      	b.n	810cb1e <_strtod_l+0x1e>
 810cb9e:	292d      	cmp	r1, #45	; 0x2d
 810cba0:	d1c8      	bne.n	810cb34 <_strtod_l+0x34>
 810cba2:	2101      	movs	r1, #1
 810cba4:	910a      	str	r1, [sp, #40]	; 0x28
 810cba6:	1c51      	adds	r1, r2, #1
 810cba8:	9115      	str	r1, [sp, #84]	; 0x54
 810cbaa:	7852      	ldrb	r2, [r2, #1]
 810cbac:	2a00      	cmp	r2, #0
 810cbae:	d1c3      	bne.n	810cb38 <_strtod_l+0x38>
 810cbb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810cbb2:	9515      	str	r5, [sp, #84]	; 0x54
 810cbb4:	2b00      	cmp	r3, #0
 810cbb6:	f040 855f 	bne.w	810d678 <_strtod_l+0xb78>
 810cbba:	4642      	mov	r2, r8
 810cbbc:	464b      	mov	r3, r9
 810cbbe:	e7e3      	b.n	810cb88 <_strtod_l+0x88>
 810cbc0:	2100      	movs	r1, #0
 810cbc2:	e7ef      	b.n	810cba4 <_strtod_l+0xa4>
 810cbc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810cbc6:	b13a      	cbz	r2, 810cbd8 <_strtod_l+0xd8>
 810cbc8:	2135      	movs	r1, #53	; 0x35
 810cbca:	a818      	add	r0, sp, #96	; 0x60
 810cbcc:	f7ff ff2f 	bl	810ca2e <__copybits>
 810cbd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cbd2:	4620      	mov	r0, r4
 810cbd4:	f7ff fb02 	bl	810c1dc <_Bfree>
 810cbd8:	3f01      	subs	r7, #1
 810cbda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810cbdc:	2f04      	cmp	r7, #4
 810cbde:	d806      	bhi.n	810cbee <_strtod_l+0xee>
 810cbe0:	e8df f007 	tbb	[pc, r7]
 810cbe4:	201d0314 	.word	0x201d0314
 810cbe8:	14          	.byte	0x14
 810cbe9:	00          	.byte	0x00
 810cbea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810cbee:	05e9      	lsls	r1, r5, #23
 810cbf0:	bf48      	it	mi
 810cbf2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810cbf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810cbfa:	0d1b      	lsrs	r3, r3, #20
 810cbfc:	051b      	lsls	r3, r3, #20
 810cbfe:	2b00      	cmp	r3, #0
 810cc00:	d1b9      	bne.n	810cb76 <_strtod_l+0x76>
 810cc02:	f7fe fba1 	bl	810b348 <__errno>
 810cc06:	2322      	movs	r3, #34	; 0x22
 810cc08:	6003      	str	r3, [r0, #0]
 810cc0a:	e7b4      	b.n	810cb76 <_strtod_l+0x76>
 810cc0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810cc10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810cc14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810cc18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810cc1c:	e7e7      	b.n	810cbee <_strtod_l+0xee>
 810cc1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810cd98 <_strtod_l+0x298>
 810cc22:	e7e4      	b.n	810cbee <_strtod_l+0xee>
 810cc24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810cc28:	f04f 38ff 	mov.w	r8, #4294967295
 810cc2c:	e7df      	b.n	810cbee <_strtod_l+0xee>
 810cc2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810cc30:	1c5a      	adds	r2, r3, #1
 810cc32:	9215      	str	r2, [sp, #84]	; 0x54
 810cc34:	785b      	ldrb	r3, [r3, #1]
 810cc36:	2b30      	cmp	r3, #48	; 0x30
 810cc38:	d0f9      	beq.n	810cc2e <_strtod_l+0x12e>
 810cc3a:	2b00      	cmp	r3, #0
 810cc3c:	d09b      	beq.n	810cb76 <_strtod_l+0x76>
 810cc3e:	2301      	movs	r3, #1
 810cc40:	f04f 0a00 	mov.w	sl, #0
 810cc44:	9304      	str	r3, [sp, #16]
 810cc46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810cc48:	930b      	str	r3, [sp, #44]	; 0x2c
 810cc4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810cc4e:	46d3      	mov	fp, sl
 810cc50:	220a      	movs	r2, #10
 810cc52:	9815      	ldr	r0, [sp, #84]	; 0x54
 810cc54:	7806      	ldrb	r6, [r0, #0]
 810cc56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810cc5a:	b2d9      	uxtb	r1, r3
 810cc5c:	2909      	cmp	r1, #9
 810cc5e:	d926      	bls.n	810ccae <_strtod_l+0x1ae>
 810cc60:	494c      	ldr	r1, [pc, #304]	; (810cd94 <_strtod_l+0x294>)
 810cc62:	2201      	movs	r2, #1
 810cc64:	f001 f98c 	bl	810df80 <strncmp>
 810cc68:	2800      	cmp	r0, #0
 810cc6a:	d030      	beq.n	810ccce <_strtod_l+0x1ce>
 810cc6c:	2000      	movs	r0, #0
 810cc6e:	4632      	mov	r2, r6
 810cc70:	9005      	str	r0, [sp, #20]
 810cc72:	465e      	mov	r6, fp
 810cc74:	4603      	mov	r3, r0
 810cc76:	2a65      	cmp	r2, #101	; 0x65
 810cc78:	d001      	beq.n	810cc7e <_strtod_l+0x17e>
 810cc7a:	2a45      	cmp	r2, #69	; 0x45
 810cc7c:	d113      	bne.n	810cca6 <_strtod_l+0x1a6>
 810cc7e:	b91e      	cbnz	r6, 810cc88 <_strtod_l+0x188>
 810cc80:	9a04      	ldr	r2, [sp, #16]
 810cc82:	4302      	orrs	r2, r0
 810cc84:	d094      	beq.n	810cbb0 <_strtod_l+0xb0>
 810cc86:	2600      	movs	r6, #0
 810cc88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810cc8a:	1c6a      	adds	r2, r5, #1
 810cc8c:	9215      	str	r2, [sp, #84]	; 0x54
 810cc8e:	786a      	ldrb	r2, [r5, #1]
 810cc90:	2a2b      	cmp	r2, #43	; 0x2b
 810cc92:	d074      	beq.n	810cd7e <_strtod_l+0x27e>
 810cc94:	2a2d      	cmp	r2, #45	; 0x2d
 810cc96:	d078      	beq.n	810cd8a <_strtod_l+0x28a>
 810cc98:	f04f 0c00 	mov.w	ip, #0
 810cc9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810cca0:	2909      	cmp	r1, #9
 810cca2:	d97f      	bls.n	810cda4 <_strtod_l+0x2a4>
 810cca4:	9515      	str	r5, [sp, #84]	; 0x54
 810cca6:	2700      	movs	r7, #0
 810cca8:	e09e      	b.n	810cde8 <_strtod_l+0x2e8>
 810ccaa:	2300      	movs	r3, #0
 810ccac:	e7c8      	b.n	810cc40 <_strtod_l+0x140>
 810ccae:	f1bb 0f08 	cmp.w	fp, #8
 810ccb2:	bfd8      	it	le
 810ccb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810ccb6:	f100 0001 	add.w	r0, r0, #1
 810ccba:	bfda      	itte	le
 810ccbc:	fb02 3301 	mlale	r3, r2, r1, r3
 810ccc0:	9309      	strle	r3, [sp, #36]	; 0x24
 810ccc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810ccc6:	f10b 0b01 	add.w	fp, fp, #1
 810ccca:	9015      	str	r0, [sp, #84]	; 0x54
 810cccc:	e7c1      	b.n	810cc52 <_strtod_l+0x152>
 810ccce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ccd0:	1c5a      	adds	r2, r3, #1
 810ccd2:	9215      	str	r2, [sp, #84]	; 0x54
 810ccd4:	785a      	ldrb	r2, [r3, #1]
 810ccd6:	f1bb 0f00 	cmp.w	fp, #0
 810ccda:	d037      	beq.n	810cd4c <_strtod_l+0x24c>
 810ccdc:	9005      	str	r0, [sp, #20]
 810ccde:	465e      	mov	r6, fp
 810cce0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810cce4:	2b09      	cmp	r3, #9
 810cce6:	d912      	bls.n	810cd0e <_strtod_l+0x20e>
 810cce8:	2301      	movs	r3, #1
 810ccea:	e7c4      	b.n	810cc76 <_strtod_l+0x176>
 810ccec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ccee:	1c5a      	adds	r2, r3, #1
 810ccf0:	9215      	str	r2, [sp, #84]	; 0x54
 810ccf2:	785a      	ldrb	r2, [r3, #1]
 810ccf4:	3001      	adds	r0, #1
 810ccf6:	2a30      	cmp	r2, #48	; 0x30
 810ccf8:	d0f8      	beq.n	810ccec <_strtod_l+0x1ec>
 810ccfa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810ccfe:	2b08      	cmp	r3, #8
 810cd00:	f200 84c1 	bhi.w	810d686 <_strtod_l+0xb86>
 810cd04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810cd06:	9005      	str	r0, [sp, #20]
 810cd08:	2000      	movs	r0, #0
 810cd0a:	930b      	str	r3, [sp, #44]	; 0x2c
 810cd0c:	4606      	mov	r6, r0
 810cd0e:	3a30      	subs	r2, #48	; 0x30
 810cd10:	f100 0301 	add.w	r3, r0, #1
 810cd14:	d014      	beq.n	810cd40 <_strtod_l+0x240>
 810cd16:	9905      	ldr	r1, [sp, #20]
 810cd18:	4419      	add	r1, r3
 810cd1a:	9105      	str	r1, [sp, #20]
 810cd1c:	4633      	mov	r3, r6
 810cd1e:	eb00 0c06 	add.w	ip, r0, r6
 810cd22:	210a      	movs	r1, #10
 810cd24:	4563      	cmp	r3, ip
 810cd26:	d113      	bne.n	810cd50 <_strtod_l+0x250>
 810cd28:	1833      	adds	r3, r6, r0
 810cd2a:	2b08      	cmp	r3, #8
 810cd2c:	f106 0601 	add.w	r6, r6, #1
 810cd30:	4406      	add	r6, r0
 810cd32:	dc1a      	bgt.n	810cd6a <_strtod_l+0x26a>
 810cd34:	9909      	ldr	r1, [sp, #36]	; 0x24
 810cd36:	230a      	movs	r3, #10
 810cd38:	fb03 2301 	mla	r3, r3, r1, r2
 810cd3c:	9309      	str	r3, [sp, #36]	; 0x24
 810cd3e:	2300      	movs	r3, #0
 810cd40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810cd42:	1c51      	adds	r1, r2, #1
 810cd44:	9115      	str	r1, [sp, #84]	; 0x54
 810cd46:	7852      	ldrb	r2, [r2, #1]
 810cd48:	4618      	mov	r0, r3
 810cd4a:	e7c9      	b.n	810cce0 <_strtod_l+0x1e0>
 810cd4c:	4658      	mov	r0, fp
 810cd4e:	e7d2      	b.n	810ccf6 <_strtod_l+0x1f6>
 810cd50:	2b08      	cmp	r3, #8
 810cd52:	f103 0301 	add.w	r3, r3, #1
 810cd56:	dc03      	bgt.n	810cd60 <_strtod_l+0x260>
 810cd58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810cd5a:	434f      	muls	r7, r1
 810cd5c:	9709      	str	r7, [sp, #36]	; 0x24
 810cd5e:	e7e1      	b.n	810cd24 <_strtod_l+0x224>
 810cd60:	2b10      	cmp	r3, #16
 810cd62:	bfd8      	it	le
 810cd64:	fb01 fa0a 	mulle.w	sl, r1, sl
 810cd68:	e7dc      	b.n	810cd24 <_strtod_l+0x224>
 810cd6a:	2e10      	cmp	r6, #16
 810cd6c:	bfdc      	itt	le
 810cd6e:	230a      	movle	r3, #10
 810cd70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810cd74:	e7e3      	b.n	810cd3e <_strtod_l+0x23e>
 810cd76:	2300      	movs	r3, #0
 810cd78:	9305      	str	r3, [sp, #20]
 810cd7a:	2301      	movs	r3, #1
 810cd7c:	e780      	b.n	810cc80 <_strtod_l+0x180>
 810cd7e:	f04f 0c00 	mov.w	ip, #0
 810cd82:	1caa      	adds	r2, r5, #2
 810cd84:	9215      	str	r2, [sp, #84]	; 0x54
 810cd86:	78aa      	ldrb	r2, [r5, #2]
 810cd88:	e788      	b.n	810cc9c <_strtod_l+0x19c>
 810cd8a:	f04f 0c01 	mov.w	ip, #1
 810cd8e:	e7f8      	b.n	810cd82 <_strtod_l+0x282>
 810cd90:	081e6998 	.word	0x081e6998
 810cd94:	081e6994 	.word	0x081e6994
 810cd98:	7ff00000 	.word	0x7ff00000
 810cd9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810cd9e:	1c51      	adds	r1, r2, #1
 810cda0:	9115      	str	r1, [sp, #84]	; 0x54
 810cda2:	7852      	ldrb	r2, [r2, #1]
 810cda4:	2a30      	cmp	r2, #48	; 0x30
 810cda6:	d0f9      	beq.n	810cd9c <_strtod_l+0x29c>
 810cda8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810cdac:	2908      	cmp	r1, #8
 810cdae:	f63f af7a 	bhi.w	810cca6 <_strtod_l+0x1a6>
 810cdb2:	3a30      	subs	r2, #48	; 0x30
 810cdb4:	9208      	str	r2, [sp, #32]
 810cdb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810cdb8:	920c      	str	r2, [sp, #48]	; 0x30
 810cdba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810cdbc:	1c57      	adds	r7, r2, #1
 810cdbe:	9715      	str	r7, [sp, #84]	; 0x54
 810cdc0:	7852      	ldrb	r2, [r2, #1]
 810cdc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810cdc6:	f1be 0f09 	cmp.w	lr, #9
 810cdca:	d938      	bls.n	810ce3e <_strtod_l+0x33e>
 810cdcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 810cdce:	1a7f      	subs	r7, r7, r1
 810cdd0:	2f08      	cmp	r7, #8
 810cdd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810cdd6:	dc03      	bgt.n	810cde0 <_strtod_l+0x2e0>
 810cdd8:	9908      	ldr	r1, [sp, #32]
 810cdda:	428f      	cmp	r7, r1
 810cddc:	bfa8      	it	ge
 810cdde:	460f      	movge	r7, r1
 810cde0:	f1bc 0f00 	cmp.w	ip, #0
 810cde4:	d000      	beq.n	810cde8 <_strtod_l+0x2e8>
 810cde6:	427f      	negs	r7, r7
 810cde8:	2e00      	cmp	r6, #0
 810cdea:	d14f      	bne.n	810ce8c <_strtod_l+0x38c>
 810cdec:	9904      	ldr	r1, [sp, #16]
 810cdee:	4301      	orrs	r1, r0
 810cdf0:	f47f aec1 	bne.w	810cb76 <_strtod_l+0x76>
 810cdf4:	2b00      	cmp	r3, #0
 810cdf6:	f47f aedb 	bne.w	810cbb0 <_strtod_l+0xb0>
 810cdfa:	2a69      	cmp	r2, #105	; 0x69
 810cdfc:	d029      	beq.n	810ce52 <_strtod_l+0x352>
 810cdfe:	dc26      	bgt.n	810ce4e <_strtod_l+0x34e>
 810ce00:	2a49      	cmp	r2, #73	; 0x49
 810ce02:	d026      	beq.n	810ce52 <_strtod_l+0x352>
 810ce04:	2a4e      	cmp	r2, #78	; 0x4e
 810ce06:	f47f aed3 	bne.w	810cbb0 <_strtod_l+0xb0>
 810ce0a:	499b      	ldr	r1, [pc, #620]	; (810d078 <_strtod_l+0x578>)
 810ce0c:	a815      	add	r0, sp, #84	; 0x54
 810ce0e:	f001 fbcf 	bl	810e5b0 <__match>
 810ce12:	2800      	cmp	r0, #0
 810ce14:	f43f aecc 	beq.w	810cbb0 <_strtod_l+0xb0>
 810ce18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ce1a:	781b      	ldrb	r3, [r3, #0]
 810ce1c:	2b28      	cmp	r3, #40	; 0x28
 810ce1e:	d12f      	bne.n	810ce80 <_strtod_l+0x380>
 810ce20:	4996      	ldr	r1, [pc, #600]	; (810d07c <_strtod_l+0x57c>)
 810ce22:	aa18      	add	r2, sp, #96	; 0x60
 810ce24:	a815      	add	r0, sp, #84	; 0x54
 810ce26:	f001 fbd7 	bl	810e5d8 <__hexnan>
 810ce2a:	2805      	cmp	r0, #5
 810ce2c:	d128      	bne.n	810ce80 <_strtod_l+0x380>
 810ce2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810ce30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810ce34:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810ce38:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810ce3c:	e69b      	b.n	810cb76 <_strtod_l+0x76>
 810ce3e:	9f08      	ldr	r7, [sp, #32]
 810ce40:	210a      	movs	r1, #10
 810ce42:	fb01 2107 	mla	r1, r1, r7, r2
 810ce46:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810ce4a:	9208      	str	r2, [sp, #32]
 810ce4c:	e7b5      	b.n	810cdba <_strtod_l+0x2ba>
 810ce4e:	2a6e      	cmp	r2, #110	; 0x6e
 810ce50:	e7d9      	b.n	810ce06 <_strtod_l+0x306>
 810ce52:	498b      	ldr	r1, [pc, #556]	; (810d080 <_strtod_l+0x580>)
 810ce54:	a815      	add	r0, sp, #84	; 0x54
 810ce56:	f001 fbab 	bl	810e5b0 <__match>
 810ce5a:	2800      	cmp	r0, #0
 810ce5c:	f43f aea8 	beq.w	810cbb0 <_strtod_l+0xb0>
 810ce60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ce62:	4988      	ldr	r1, [pc, #544]	; (810d084 <_strtod_l+0x584>)
 810ce64:	3b01      	subs	r3, #1
 810ce66:	a815      	add	r0, sp, #84	; 0x54
 810ce68:	9315      	str	r3, [sp, #84]	; 0x54
 810ce6a:	f001 fba1 	bl	810e5b0 <__match>
 810ce6e:	b910      	cbnz	r0, 810ce76 <_strtod_l+0x376>
 810ce70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ce72:	3301      	adds	r3, #1
 810ce74:	9315      	str	r3, [sp, #84]	; 0x54
 810ce76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810d094 <_strtod_l+0x594>
 810ce7a:	f04f 0800 	mov.w	r8, #0
 810ce7e:	e67a      	b.n	810cb76 <_strtod_l+0x76>
 810ce80:	4881      	ldr	r0, [pc, #516]	; (810d088 <_strtod_l+0x588>)
 810ce82:	f001 f8b1 	bl	810dfe8 <nan>
 810ce86:	ec59 8b10 	vmov	r8, r9, d0
 810ce8a:	e674      	b.n	810cb76 <_strtod_l+0x76>
 810ce8c:	9b05      	ldr	r3, [sp, #20]
 810ce8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810ce90:	1afb      	subs	r3, r7, r3
 810ce92:	f1bb 0f00 	cmp.w	fp, #0
 810ce96:	bf08      	it	eq
 810ce98:	46b3      	moveq	fp, r6
 810ce9a:	2e10      	cmp	r6, #16
 810ce9c:	9308      	str	r3, [sp, #32]
 810ce9e:	4635      	mov	r5, r6
 810cea0:	bfa8      	it	ge
 810cea2:	2510      	movge	r5, #16
 810cea4:	f7f3 fbb6 	bl	8100614 <__aeabi_ui2d>
 810cea8:	2e09      	cmp	r6, #9
 810ceaa:	4680      	mov	r8, r0
 810ceac:	4689      	mov	r9, r1
 810ceae:	dd13      	ble.n	810ced8 <_strtod_l+0x3d8>
 810ceb0:	4b76      	ldr	r3, [pc, #472]	; (810d08c <_strtod_l+0x58c>)
 810ceb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810ceb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810ceba:	f7f3 fc25 	bl	8100708 <__aeabi_dmul>
 810cebe:	4680      	mov	r8, r0
 810cec0:	4650      	mov	r0, sl
 810cec2:	4689      	mov	r9, r1
 810cec4:	f7f3 fba6 	bl	8100614 <__aeabi_ui2d>
 810cec8:	4602      	mov	r2, r0
 810ceca:	460b      	mov	r3, r1
 810cecc:	4640      	mov	r0, r8
 810cece:	4649      	mov	r1, r9
 810ced0:	f7f3 fa64 	bl	810039c <__adddf3>
 810ced4:	4680      	mov	r8, r0
 810ced6:	4689      	mov	r9, r1
 810ced8:	2e0f      	cmp	r6, #15
 810ceda:	dc38      	bgt.n	810cf4e <_strtod_l+0x44e>
 810cedc:	9b08      	ldr	r3, [sp, #32]
 810cede:	2b00      	cmp	r3, #0
 810cee0:	f43f ae49 	beq.w	810cb76 <_strtod_l+0x76>
 810cee4:	dd24      	ble.n	810cf30 <_strtod_l+0x430>
 810cee6:	2b16      	cmp	r3, #22
 810cee8:	dc0b      	bgt.n	810cf02 <_strtod_l+0x402>
 810ceea:	4968      	ldr	r1, [pc, #416]	; (810d08c <_strtod_l+0x58c>)
 810ceec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810cef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cef4:	4642      	mov	r2, r8
 810cef6:	464b      	mov	r3, r9
 810cef8:	f7f3 fc06 	bl	8100708 <__aeabi_dmul>
 810cefc:	4680      	mov	r8, r0
 810cefe:	4689      	mov	r9, r1
 810cf00:	e639      	b.n	810cb76 <_strtod_l+0x76>
 810cf02:	9a08      	ldr	r2, [sp, #32]
 810cf04:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810cf08:	4293      	cmp	r3, r2
 810cf0a:	db20      	blt.n	810cf4e <_strtod_l+0x44e>
 810cf0c:	4c5f      	ldr	r4, [pc, #380]	; (810d08c <_strtod_l+0x58c>)
 810cf0e:	f1c6 060f 	rsb	r6, r6, #15
 810cf12:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810cf16:	4642      	mov	r2, r8
 810cf18:	464b      	mov	r3, r9
 810cf1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cf1e:	f7f3 fbf3 	bl	8100708 <__aeabi_dmul>
 810cf22:	9b08      	ldr	r3, [sp, #32]
 810cf24:	1b9e      	subs	r6, r3, r6
 810cf26:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810cf2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 810cf2e:	e7e3      	b.n	810cef8 <_strtod_l+0x3f8>
 810cf30:	9b08      	ldr	r3, [sp, #32]
 810cf32:	3316      	adds	r3, #22
 810cf34:	db0b      	blt.n	810cf4e <_strtod_l+0x44e>
 810cf36:	9b05      	ldr	r3, [sp, #20]
 810cf38:	1bdf      	subs	r7, r3, r7
 810cf3a:	4b54      	ldr	r3, [pc, #336]	; (810d08c <_strtod_l+0x58c>)
 810cf3c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810cf40:	e9d7 2300 	ldrd	r2, r3, [r7]
 810cf44:	4640      	mov	r0, r8
 810cf46:	4649      	mov	r1, r9
 810cf48:	f7f3 fd08 	bl	810095c <__aeabi_ddiv>
 810cf4c:	e7d6      	b.n	810cefc <_strtod_l+0x3fc>
 810cf4e:	9b08      	ldr	r3, [sp, #32]
 810cf50:	1b75      	subs	r5, r6, r5
 810cf52:	441d      	add	r5, r3
 810cf54:	2d00      	cmp	r5, #0
 810cf56:	dd70      	ble.n	810d03a <_strtod_l+0x53a>
 810cf58:	f015 030f 	ands.w	r3, r5, #15
 810cf5c:	d00a      	beq.n	810cf74 <_strtod_l+0x474>
 810cf5e:	494b      	ldr	r1, [pc, #300]	; (810d08c <_strtod_l+0x58c>)
 810cf60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810cf64:	4642      	mov	r2, r8
 810cf66:	464b      	mov	r3, r9
 810cf68:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cf6c:	f7f3 fbcc 	bl	8100708 <__aeabi_dmul>
 810cf70:	4680      	mov	r8, r0
 810cf72:	4689      	mov	r9, r1
 810cf74:	f035 050f 	bics.w	r5, r5, #15
 810cf78:	d04d      	beq.n	810d016 <_strtod_l+0x516>
 810cf7a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810cf7e:	dd22      	ble.n	810cfc6 <_strtod_l+0x4c6>
 810cf80:	2500      	movs	r5, #0
 810cf82:	46ab      	mov	fp, r5
 810cf84:	9509      	str	r5, [sp, #36]	; 0x24
 810cf86:	9505      	str	r5, [sp, #20]
 810cf88:	2322      	movs	r3, #34	; 0x22
 810cf8a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810d094 <_strtod_l+0x594>
 810cf8e:	6023      	str	r3, [r4, #0]
 810cf90:	f04f 0800 	mov.w	r8, #0
 810cf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cf96:	2b00      	cmp	r3, #0
 810cf98:	f43f aded 	beq.w	810cb76 <_strtod_l+0x76>
 810cf9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cf9e:	4620      	mov	r0, r4
 810cfa0:	f7ff f91c 	bl	810c1dc <_Bfree>
 810cfa4:	9905      	ldr	r1, [sp, #20]
 810cfa6:	4620      	mov	r0, r4
 810cfa8:	f7ff f918 	bl	810c1dc <_Bfree>
 810cfac:	4659      	mov	r1, fp
 810cfae:	4620      	mov	r0, r4
 810cfb0:	f7ff f914 	bl	810c1dc <_Bfree>
 810cfb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810cfb6:	4620      	mov	r0, r4
 810cfb8:	f7ff f910 	bl	810c1dc <_Bfree>
 810cfbc:	4629      	mov	r1, r5
 810cfbe:	4620      	mov	r0, r4
 810cfc0:	f7ff f90c 	bl	810c1dc <_Bfree>
 810cfc4:	e5d7      	b.n	810cb76 <_strtod_l+0x76>
 810cfc6:	4b32      	ldr	r3, [pc, #200]	; (810d090 <_strtod_l+0x590>)
 810cfc8:	9304      	str	r3, [sp, #16]
 810cfca:	2300      	movs	r3, #0
 810cfcc:	112d      	asrs	r5, r5, #4
 810cfce:	4640      	mov	r0, r8
 810cfd0:	4649      	mov	r1, r9
 810cfd2:	469a      	mov	sl, r3
 810cfd4:	2d01      	cmp	r5, #1
 810cfd6:	dc21      	bgt.n	810d01c <_strtod_l+0x51c>
 810cfd8:	b10b      	cbz	r3, 810cfde <_strtod_l+0x4de>
 810cfda:	4680      	mov	r8, r0
 810cfdc:	4689      	mov	r9, r1
 810cfde:	492c      	ldr	r1, [pc, #176]	; (810d090 <_strtod_l+0x590>)
 810cfe0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810cfe4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810cfe8:	4642      	mov	r2, r8
 810cfea:	464b      	mov	r3, r9
 810cfec:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cff0:	f7f3 fb8a 	bl	8100708 <__aeabi_dmul>
 810cff4:	4b27      	ldr	r3, [pc, #156]	; (810d094 <_strtod_l+0x594>)
 810cff6:	460a      	mov	r2, r1
 810cff8:	400b      	ands	r3, r1
 810cffa:	4927      	ldr	r1, [pc, #156]	; (810d098 <_strtod_l+0x598>)
 810cffc:	428b      	cmp	r3, r1
 810cffe:	4680      	mov	r8, r0
 810d000:	d8be      	bhi.n	810cf80 <_strtod_l+0x480>
 810d002:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810d006:	428b      	cmp	r3, r1
 810d008:	bf86      	itte	hi
 810d00a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810d09c <_strtod_l+0x59c>
 810d00e:	f04f 38ff 	movhi.w	r8, #4294967295
 810d012:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810d016:	2300      	movs	r3, #0
 810d018:	9304      	str	r3, [sp, #16]
 810d01a:	e07b      	b.n	810d114 <_strtod_l+0x614>
 810d01c:	07ea      	lsls	r2, r5, #31
 810d01e:	d505      	bpl.n	810d02c <_strtod_l+0x52c>
 810d020:	9b04      	ldr	r3, [sp, #16]
 810d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d026:	f7f3 fb6f 	bl	8100708 <__aeabi_dmul>
 810d02a:	2301      	movs	r3, #1
 810d02c:	9a04      	ldr	r2, [sp, #16]
 810d02e:	3208      	adds	r2, #8
 810d030:	f10a 0a01 	add.w	sl, sl, #1
 810d034:	106d      	asrs	r5, r5, #1
 810d036:	9204      	str	r2, [sp, #16]
 810d038:	e7cc      	b.n	810cfd4 <_strtod_l+0x4d4>
 810d03a:	d0ec      	beq.n	810d016 <_strtod_l+0x516>
 810d03c:	426d      	negs	r5, r5
 810d03e:	f015 020f 	ands.w	r2, r5, #15
 810d042:	d00a      	beq.n	810d05a <_strtod_l+0x55a>
 810d044:	4b11      	ldr	r3, [pc, #68]	; (810d08c <_strtod_l+0x58c>)
 810d046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d04a:	4640      	mov	r0, r8
 810d04c:	4649      	mov	r1, r9
 810d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d052:	f7f3 fc83 	bl	810095c <__aeabi_ddiv>
 810d056:	4680      	mov	r8, r0
 810d058:	4689      	mov	r9, r1
 810d05a:	112d      	asrs	r5, r5, #4
 810d05c:	d0db      	beq.n	810d016 <_strtod_l+0x516>
 810d05e:	2d1f      	cmp	r5, #31
 810d060:	dd1e      	ble.n	810d0a0 <_strtod_l+0x5a0>
 810d062:	2500      	movs	r5, #0
 810d064:	46ab      	mov	fp, r5
 810d066:	9509      	str	r5, [sp, #36]	; 0x24
 810d068:	9505      	str	r5, [sp, #20]
 810d06a:	2322      	movs	r3, #34	; 0x22
 810d06c:	f04f 0800 	mov.w	r8, #0
 810d070:	f04f 0900 	mov.w	r9, #0
 810d074:	6023      	str	r3, [r4, #0]
 810d076:	e78d      	b.n	810cf94 <_strtod_l+0x494>
 810d078:	081e6785 	.word	0x081e6785
 810d07c:	081e69ac 	.word	0x081e69ac
 810d080:	081e677d 	.word	0x081e677d
 810d084:	081e67b4 	.word	0x081e67b4
 810d088:	081d324f 	.word	0x081d324f
 810d08c:	081e68c0 	.word	0x081e68c0
 810d090:	081e6898 	.word	0x081e6898
 810d094:	7ff00000 	.word	0x7ff00000
 810d098:	7ca00000 	.word	0x7ca00000
 810d09c:	7fefffff 	.word	0x7fefffff
 810d0a0:	f015 0310 	ands.w	r3, r5, #16
 810d0a4:	bf18      	it	ne
 810d0a6:	236a      	movne	r3, #106	; 0x6a
 810d0a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810d44c <_strtod_l+0x94c>
 810d0ac:	9304      	str	r3, [sp, #16]
 810d0ae:	4640      	mov	r0, r8
 810d0b0:	4649      	mov	r1, r9
 810d0b2:	2300      	movs	r3, #0
 810d0b4:	07ea      	lsls	r2, r5, #31
 810d0b6:	d504      	bpl.n	810d0c2 <_strtod_l+0x5c2>
 810d0b8:	e9da 2300 	ldrd	r2, r3, [sl]
 810d0bc:	f7f3 fb24 	bl	8100708 <__aeabi_dmul>
 810d0c0:	2301      	movs	r3, #1
 810d0c2:	106d      	asrs	r5, r5, #1
 810d0c4:	f10a 0a08 	add.w	sl, sl, #8
 810d0c8:	d1f4      	bne.n	810d0b4 <_strtod_l+0x5b4>
 810d0ca:	b10b      	cbz	r3, 810d0d0 <_strtod_l+0x5d0>
 810d0cc:	4680      	mov	r8, r0
 810d0ce:	4689      	mov	r9, r1
 810d0d0:	9b04      	ldr	r3, [sp, #16]
 810d0d2:	b1bb      	cbz	r3, 810d104 <_strtod_l+0x604>
 810d0d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810d0d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810d0dc:	2b00      	cmp	r3, #0
 810d0de:	4649      	mov	r1, r9
 810d0e0:	dd10      	ble.n	810d104 <_strtod_l+0x604>
 810d0e2:	2b1f      	cmp	r3, #31
 810d0e4:	f340 811e 	ble.w	810d324 <_strtod_l+0x824>
 810d0e8:	2b34      	cmp	r3, #52	; 0x34
 810d0ea:	bfde      	ittt	le
 810d0ec:	f04f 33ff 	movle.w	r3, #4294967295
 810d0f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810d0f4:	4093      	lslle	r3, r2
 810d0f6:	f04f 0800 	mov.w	r8, #0
 810d0fa:	bfcc      	ite	gt
 810d0fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810d100:	ea03 0901 	andle.w	r9, r3, r1
 810d104:	2200      	movs	r2, #0
 810d106:	2300      	movs	r3, #0
 810d108:	4640      	mov	r0, r8
 810d10a:	4649      	mov	r1, r9
 810d10c:	f7f3 fd64 	bl	8100bd8 <__aeabi_dcmpeq>
 810d110:	2800      	cmp	r0, #0
 810d112:	d1a6      	bne.n	810d062 <_strtod_l+0x562>
 810d114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d116:	9300      	str	r3, [sp, #0]
 810d118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810d11a:	4633      	mov	r3, r6
 810d11c:	465a      	mov	r2, fp
 810d11e:	4620      	mov	r0, r4
 810d120:	f7ff f8c4 	bl	810c2ac <__s2b>
 810d124:	9009      	str	r0, [sp, #36]	; 0x24
 810d126:	2800      	cmp	r0, #0
 810d128:	f43f af2a 	beq.w	810cf80 <_strtod_l+0x480>
 810d12c:	9a08      	ldr	r2, [sp, #32]
 810d12e:	9b05      	ldr	r3, [sp, #20]
 810d130:	2a00      	cmp	r2, #0
 810d132:	eba3 0307 	sub.w	r3, r3, r7
 810d136:	bfa8      	it	ge
 810d138:	2300      	movge	r3, #0
 810d13a:	930c      	str	r3, [sp, #48]	; 0x30
 810d13c:	2500      	movs	r5, #0
 810d13e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810d142:	9312      	str	r3, [sp, #72]	; 0x48
 810d144:	46ab      	mov	fp, r5
 810d146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d148:	4620      	mov	r0, r4
 810d14a:	6859      	ldr	r1, [r3, #4]
 810d14c:	f7ff f806 	bl	810c15c <_Balloc>
 810d150:	9005      	str	r0, [sp, #20]
 810d152:	2800      	cmp	r0, #0
 810d154:	f43f af18 	beq.w	810cf88 <_strtod_l+0x488>
 810d158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d15a:	691a      	ldr	r2, [r3, #16]
 810d15c:	3202      	adds	r2, #2
 810d15e:	f103 010c 	add.w	r1, r3, #12
 810d162:	0092      	lsls	r2, r2, #2
 810d164:	300c      	adds	r0, #12
 810d166:	f7fe f91c 	bl	810b3a2 <memcpy>
 810d16a:	ec49 8b10 	vmov	d0, r8, r9
 810d16e:	aa18      	add	r2, sp, #96	; 0x60
 810d170:	a917      	add	r1, sp, #92	; 0x5c
 810d172:	4620      	mov	r0, r4
 810d174:	f7ff fbce 	bl	810c914 <__d2b>
 810d178:	ec49 8b18 	vmov	d8, r8, r9
 810d17c:	9016      	str	r0, [sp, #88]	; 0x58
 810d17e:	2800      	cmp	r0, #0
 810d180:	f43f af02 	beq.w	810cf88 <_strtod_l+0x488>
 810d184:	2101      	movs	r1, #1
 810d186:	4620      	mov	r0, r4
 810d188:	f7ff f928 	bl	810c3dc <__i2b>
 810d18c:	4683      	mov	fp, r0
 810d18e:	2800      	cmp	r0, #0
 810d190:	f43f aefa 	beq.w	810cf88 <_strtod_l+0x488>
 810d194:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810d196:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810d198:	2e00      	cmp	r6, #0
 810d19a:	bfab      	itete	ge
 810d19c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810d19e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810d1a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810d1a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810d1a6:	bfac      	ite	ge
 810d1a8:	eb06 0a03 	addge.w	sl, r6, r3
 810d1ac:	1b9f      	sublt	r7, r3, r6
 810d1ae:	9b04      	ldr	r3, [sp, #16]
 810d1b0:	1af6      	subs	r6, r6, r3
 810d1b2:	4416      	add	r6, r2
 810d1b4:	4ba0      	ldr	r3, [pc, #640]	; (810d438 <_strtod_l+0x938>)
 810d1b6:	3e01      	subs	r6, #1
 810d1b8:	429e      	cmp	r6, r3
 810d1ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810d1be:	f280 80c4 	bge.w	810d34a <_strtod_l+0x84a>
 810d1c2:	1b9b      	subs	r3, r3, r6
 810d1c4:	2b1f      	cmp	r3, #31
 810d1c6:	eba2 0203 	sub.w	r2, r2, r3
 810d1ca:	f04f 0101 	mov.w	r1, #1
 810d1ce:	f300 80b0 	bgt.w	810d332 <_strtod_l+0x832>
 810d1d2:	fa01 f303 	lsl.w	r3, r1, r3
 810d1d6:	930e      	str	r3, [sp, #56]	; 0x38
 810d1d8:	2300      	movs	r3, #0
 810d1da:	930d      	str	r3, [sp, #52]	; 0x34
 810d1dc:	eb0a 0602 	add.w	r6, sl, r2
 810d1e0:	9b04      	ldr	r3, [sp, #16]
 810d1e2:	45b2      	cmp	sl, r6
 810d1e4:	4417      	add	r7, r2
 810d1e6:	441f      	add	r7, r3
 810d1e8:	4653      	mov	r3, sl
 810d1ea:	bfa8      	it	ge
 810d1ec:	4633      	movge	r3, r6
 810d1ee:	42bb      	cmp	r3, r7
 810d1f0:	bfa8      	it	ge
 810d1f2:	463b      	movge	r3, r7
 810d1f4:	2b00      	cmp	r3, #0
 810d1f6:	bfc2      	ittt	gt
 810d1f8:	1af6      	subgt	r6, r6, r3
 810d1fa:	1aff      	subgt	r7, r7, r3
 810d1fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 810d200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810d202:	2b00      	cmp	r3, #0
 810d204:	dd17      	ble.n	810d236 <_strtod_l+0x736>
 810d206:	4659      	mov	r1, fp
 810d208:	461a      	mov	r2, r3
 810d20a:	4620      	mov	r0, r4
 810d20c:	f7ff f9a6 	bl	810c55c <__pow5mult>
 810d210:	4683      	mov	fp, r0
 810d212:	2800      	cmp	r0, #0
 810d214:	f43f aeb8 	beq.w	810cf88 <_strtod_l+0x488>
 810d218:	4601      	mov	r1, r0
 810d21a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810d21c:	4620      	mov	r0, r4
 810d21e:	f7ff f8f3 	bl	810c408 <__multiply>
 810d222:	900b      	str	r0, [sp, #44]	; 0x2c
 810d224:	2800      	cmp	r0, #0
 810d226:	f43f aeaf 	beq.w	810cf88 <_strtod_l+0x488>
 810d22a:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d22c:	4620      	mov	r0, r4
 810d22e:	f7fe ffd5 	bl	810c1dc <_Bfree>
 810d232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d234:	9316      	str	r3, [sp, #88]	; 0x58
 810d236:	2e00      	cmp	r6, #0
 810d238:	f300 808c 	bgt.w	810d354 <_strtod_l+0x854>
 810d23c:	9b08      	ldr	r3, [sp, #32]
 810d23e:	2b00      	cmp	r3, #0
 810d240:	dd08      	ble.n	810d254 <_strtod_l+0x754>
 810d242:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810d244:	9905      	ldr	r1, [sp, #20]
 810d246:	4620      	mov	r0, r4
 810d248:	f7ff f988 	bl	810c55c <__pow5mult>
 810d24c:	9005      	str	r0, [sp, #20]
 810d24e:	2800      	cmp	r0, #0
 810d250:	f43f ae9a 	beq.w	810cf88 <_strtod_l+0x488>
 810d254:	2f00      	cmp	r7, #0
 810d256:	dd08      	ble.n	810d26a <_strtod_l+0x76a>
 810d258:	9905      	ldr	r1, [sp, #20]
 810d25a:	463a      	mov	r2, r7
 810d25c:	4620      	mov	r0, r4
 810d25e:	f7ff f9d7 	bl	810c610 <__lshift>
 810d262:	9005      	str	r0, [sp, #20]
 810d264:	2800      	cmp	r0, #0
 810d266:	f43f ae8f 	beq.w	810cf88 <_strtod_l+0x488>
 810d26a:	f1ba 0f00 	cmp.w	sl, #0
 810d26e:	dd08      	ble.n	810d282 <_strtod_l+0x782>
 810d270:	4659      	mov	r1, fp
 810d272:	4652      	mov	r2, sl
 810d274:	4620      	mov	r0, r4
 810d276:	f7ff f9cb 	bl	810c610 <__lshift>
 810d27a:	4683      	mov	fp, r0
 810d27c:	2800      	cmp	r0, #0
 810d27e:	f43f ae83 	beq.w	810cf88 <_strtod_l+0x488>
 810d282:	9a05      	ldr	r2, [sp, #20]
 810d284:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d286:	4620      	mov	r0, r4
 810d288:	f7ff fa4a 	bl	810c720 <__mdiff>
 810d28c:	4605      	mov	r5, r0
 810d28e:	2800      	cmp	r0, #0
 810d290:	f43f ae7a 	beq.w	810cf88 <_strtod_l+0x488>
 810d294:	68c3      	ldr	r3, [r0, #12]
 810d296:	930b      	str	r3, [sp, #44]	; 0x2c
 810d298:	2300      	movs	r3, #0
 810d29a:	60c3      	str	r3, [r0, #12]
 810d29c:	4659      	mov	r1, fp
 810d29e:	f7ff fa23 	bl	810c6e8 <__mcmp>
 810d2a2:	2800      	cmp	r0, #0
 810d2a4:	da60      	bge.n	810d368 <_strtod_l+0x868>
 810d2a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d2a8:	ea53 0308 	orrs.w	r3, r3, r8
 810d2ac:	f040 8084 	bne.w	810d3b8 <_strtod_l+0x8b8>
 810d2b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d2b4:	2b00      	cmp	r3, #0
 810d2b6:	d17f      	bne.n	810d3b8 <_strtod_l+0x8b8>
 810d2b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d2bc:	0d1b      	lsrs	r3, r3, #20
 810d2be:	051b      	lsls	r3, r3, #20
 810d2c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810d2c4:	d978      	bls.n	810d3b8 <_strtod_l+0x8b8>
 810d2c6:	696b      	ldr	r3, [r5, #20]
 810d2c8:	b913      	cbnz	r3, 810d2d0 <_strtod_l+0x7d0>
 810d2ca:	692b      	ldr	r3, [r5, #16]
 810d2cc:	2b01      	cmp	r3, #1
 810d2ce:	dd73      	ble.n	810d3b8 <_strtod_l+0x8b8>
 810d2d0:	4629      	mov	r1, r5
 810d2d2:	2201      	movs	r2, #1
 810d2d4:	4620      	mov	r0, r4
 810d2d6:	f7ff f99b 	bl	810c610 <__lshift>
 810d2da:	4659      	mov	r1, fp
 810d2dc:	4605      	mov	r5, r0
 810d2de:	f7ff fa03 	bl	810c6e8 <__mcmp>
 810d2e2:	2800      	cmp	r0, #0
 810d2e4:	dd68      	ble.n	810d3b8 <_strtod_l+0x8b8>
 810d2e6:	9904      	ldr	r1, [sp, #16]
 810d2e8:	4a54      	ldr	r2, [pc, #336]	; (810d43c <_strtod_l+0x93c>)
 810d2ea:	464b      	mov	r3, r9
 810d2ec:	2900      	cmp	r1, #0
 810d2ee:	f000 8084 	beq.w	810d3fa <_strtod_l+0x8fa>
 810d2f2:	ea02 0109 	and.w	r1, r2, r9
 810d2f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810d2fa:	dc7e      	bgt.n	810d3fa <_strtod_l+0x8fa>
 810d2fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810d300:	f77f aeb3 	ble.w	810d06a <_strtod_l+0x56a>
 810d304:	4b4e      	ldr	r3, [pc, #312]	; (810d440 <_strtod_l+0x940>)
 810d306:	4640      	mov	r0, r8
 810d308:	4649      	mov	r1, r9
 810d30a:	2200      	movs	r2, #0
 810d30c:	f7f3 f9fc 	bl	8100708 <__aeabi_dmul>
 810d310:	4b4a      	ldr	r3, [pc, #296]	; (810d43c <_strtod_l+0x93c>)
 810d312:	400b      	ands	r3, r1
 810d314:	4680      	mov	r8, r0
 810d316:	4689      	mov	r9, r1
 810d318:	2b00      	cmp	r3, #0
 810d31a:	f47f ae3f 	bne.w	810cf9c <_strtod_l+0x49c>
 810d31e:	2322      	movs	r3, #34	; 0x22
 810d320:	6023      	str	r3, [r4, #0]
 810d322:	e63b      	b.n	810cf9c <_strtod_l+0x49c>
 810d324:	f04f 32ff 	mov.w	r2, #4294967295
 810d328:	fa02 f303 	lsl.w	r3, r2, r3
 810d32c:	ea03 0808 	and.w	r8, r3, r8
 810d330:	e6e8      	b.n	810d104 <_strtod_l+0x604>
 810d332:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810d336:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810d33a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810d33e:	36e2      	adds	r6, #226	; 0xe2
 810d340:	fa01 f306 	lsl.w	r3, r1, r6
 810d344:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810d348:	e748      	b.n	810d1dc <_strtod_l+0x6dc>
 810d34a:	2100      	movs	r1, #0
 810d34c:	2301      	movs	r3, #1
 810d34e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810d352:	e743      	b.n	810d1dc <_strtod_l+0x6dc>
 810d354:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d356:	4632      	mov	r2, r6
 810d358:	4620      	mov	r0, r4
 810d35a:	f7ff f959 	bl	810c610 <__lshift>
 810d35e:	9016      	str	r0, [sp, #88]	; 0x58
 810d360:	2800      	cmp	r0, #0
 810d362:	f47f af6b 	bne.w	810d23c <_strtod_l+0x73c>
 810d366:	e60f      	b.n	810cf88 <_strtod_l+0x488>
 810d368:	46ca      	mov	sl, r9
 810d36a:	d171      	bne.n	810d450 <_strtod_l+0x950>
 810d36c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d36e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d372:	b352      	cbz	r2, 810d3ca <_strtod_l+0x8ca>
 810d374:	4a33      	ldr	r2, [pc, #204]	; (810d444 <_strtod_l+0x944>)
 810d376:	4293      	cmp	r3, r2
 810d378:	d12a      	bne.n	810d3d0 <_strtod_l+0x8d0>
 810d37a:	9b04      	ldr	r3, [sp, #16]
 810d37c:	4641      	mov	r1, r8
 810d37e:	b1fb      	cbz	r3, 810d3c0 <_strtod_l+0x8c0>
 810d380:	4b2e      	ldr	r3, [pc, #184]	; (810d43c <_strtod_l+0x93c>)
 810d382:	ea09 0303 	and.w	r3, r9, r3
 810d386:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810d38a:	f04f 32ff 	mov.w	r2, #4294967295
 810d38e:	d81a      	bhi.n	810d3c6 <_strtod_l+0x8c6>
 810d390:	0d1b      	lsrs	r3, r3, #20
 810d392:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810d396:	fa02 f303 	lsl.w	r3, r2, r3
 810d39a:	4299      	cmp	r1, r3
 810d39c:	d118      	bne.n	810d3d0 <_strtod_l+0x8d0>
 810d39e:	4b2a      	ldr	r3, [pc, #168]	; (810d448 <_strtod_l+0x948>)
 810d3a0:	459a      	cmp	sl, r3
 810d3a2:	d102      	bne.n	810d3aa <_strtod_l+0x8aa>
 810d3a4:	3101      	adds	r1, #1
 810d3a6:	f43f adef 	beq.w	810cf88 <_strtod_l+0x488>
 810d3aa:	4b24      	ldr	r3, [pc, #144]	; (810d43c <_strtod_l+0x93c>)
 810d3ac:	ea0a 0303 	and.w	r3, sl, r3
 810d3b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810d3b4:	f04f 0800 	mov.w	r8, #0
 810d3b8:	9b04      	ldr	r3, [sp, #16]
 810d3ba:	2b00      	cmp	r3, #0
 810d3bc:	d1a2      	bne.n	810d304 <_strtod_l+0x804>
 810d3be:	e5ed      	b.n	810cf9c <_strtod_l+0x49c>
 810d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 810d3c4:	e7e9      	b.n	810d39a <_strtod_l+0x89a>
 810d3c6:	4613      	mov	r3, r2
 810d3c8:	e7e7      	b.n	810d39a <_strtod_l+0x89a>
 810d3ca:	ea53 0308 	orrs.w	r3, r3, r8
 810d3ce:	d08a      	beq.n	810d2e6 <_strtod_l+0x7e6>
 810d3d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d3d2:	b1e3      	cbz	r3, 810d40e <_strtod_l+0x90e>
 810d3d4:	ea13 0f0a 	tst.w	r3, sl
 810d3d8:	d0ee      	beq.n	810d3b8 <_strtod_l+0x8b8>
 810d3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d3dc:	9a04      	ldr	r2, [sp, #16]
 810d3de:	4640      	mov	r0, r8
 810d3e0:	4649      	mov	r1, r9
 810d3e2:	b1c3      	cbz	r3, 810d416 <_strtod_l+0x916>
 810d3e4:	f7ff fb6f 	bl	810cac6 <sulp>
 810d3e8:	4602      	mov	r2, r0
 810d3ea:	460b      	mov	r3, r1
 810d3ec:	ec51 0b18 	vmov	r0, r1, d8
 810d3f0:	f7f2 ffd4 	bl	810039c <__adddf3>
 810d3f4:	4680      	mov	r8, r0
 810d3f6:	4689      	mov	r9, r1
 810d3f8:	e7de      	b.n	810d3b8 <_strtod_l+0x8b8>
 810d3fa:	4013      	ands	r3, r2
 810d3fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810d400:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810d404:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810d408:	f04f 38ff 	mov.w	r8, #4294967295
 810d40c:	e7d4      	b.n	810d3b8 <_strtod_l+0x8b8>
 810d40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810d410:	ea13 0f08 	tst.w	r3, r8
 810d414:	e7e0      	b.n	810d3d8 <_strtod_l+0x8d8>
 810d416:	f7ff fb56 	bl	810cac6 <sulp>
 810d41a:	4602      	mov	r2, r0
 810d41c:	460b      	mov	r3, r1
 810d41e:	ec51 0b18 	vmov	r0, r1, d8
 810d422:	f7f2 ffb9 	bl	8100398 <__aeabi_dsub>
 810d426:	2200      	movs	r2, #0
 810d428:	2300      	movs	r3, #0
 810d42a:	4680      	mov	r8, r0
 810d42c:	4689      	mov	r9, r1
 810d42e:	f7f3 fbd3 	bl	8100bd8 <__aeabi_dcmpeq>
 810d432:	2800      	cmp	r0, #0
 810d434:	d0c0      	beq.n	810d3b8 <_strtod_l+0x8b8>
 810d436:	e618      	b.n	810d06a <_strtod_l+0x56a>
 810d438:	fffffc02 	.word	0xfffffc02
 810d43c:	7ff00000 	.word	0x7ff00000
 810d440:	39500000 	.word	0x39500000
 810d444:	000fffff 	.word	0x000fffff
 810d448:	7fefffff 	.word	0x7fefffff
 810d44c:	081e69c0 	.word	0x081e69c0
 810d450:	4659      	mov	r1, fp
 810d452:	4628      	mov	r0, r5
 810d454:	f7ff fab8 	bl	810c9c8 <__ratio>
 810d458:	ec57 6b10 	vmov	r6, r7, d0
 810d45c:	ee10 0a10 	vmov	r0, s0
 810d460:	2200      	movs	r2, #0
 810d462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810d466:	4639      	mov	r1, r7
 810d468:	f7f3 fbca 	bl	8100c00 <__aeabi_dcmple>
 810d46c:	2800      	cmp	r0, #0
 810d46e:	d071      	beq.n	810d554 <_strtod_l+0xa54>
 810d470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d472:	2b00      	cmp	r3, #0
 810d474:	d17c      	bne.n	810d570 <_strtod_l+0xa70>
 810d476:	f1b8 0f00 	cmp.w	r8, #0
 810d47a:	d15a      	bne.n	810d532 <_strtod_l+0xa32>
 810d47c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d480:	2b00      	cmp	r3, #0
 810d482:	d15d      	bne.n	810d540 <_strtod_l+0xa40>
 810d484:	4b90      	ldr	r3, [pc, #576]	; (810d6c8 <_strtod_l+0xbc8>)
 810d486:	2200      	movs	r2, #0
 810d488:	4630      	mov	r0, r6
 810d48a:	4639      	mov	r1, r7
 810d48c:	f7f3 fbae 	bl	8100bec <__aeabi_dcmplt>
 810d490:	2800      	cmp	r0, #0
 810d492:	d15c      	bne.n	810d54e <_strtod_l+0xa4e>
 810d494:	4630      	mov	r0, r6
 810d496:	4639      	mov	r1, r7
 810d498:	4b8c      	ldr	r3, [pc, #560]	; (810d6cc <_strtod_l+0xbcc>)
 810d49a:	2200      	movs	r2, #0
 810d49c:	f7f3 f934 	bl	8100708 <__aeabi_dmul>
 810d4a0:	4606      	mov	r6, r0
 810d4a2:	460f      	mov	r7, r1
 810d4a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810d4a8:	9606      	str	r6, [sp, #24]
 810d4aa:	9307      	str	r3, [sp, #28]
 810d4ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d4b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810d4b4:	4b86      	ldr	r3, [pc, #536]	; (810d6d0 <_strtod_l+0xbd0>)
 810d4b6:	ea0a 0303 	and.w	r3, sl, r3
 810d4ba:	930d      	str	r3, [sp, #52]	; 0x34
 810d4bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d4be:	4b85      	ldr	r3, [pc, #532]	; (810d6d4 <_strtod_l+0xbd4>)
 810d4c0:	429a      	cmp	r2, r3
 810d4c2:	f040 8090 	bne.w	810d5e6 <_strtod_l+0xae6>
 810d4c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810d4ca:	ec49 8b10 	vmov	d0, r8, r9
 810d4ce:	f7ff f9b1 	bl	810c834 <__ulp>
 810d4d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d4d6:	ec51 0b10 	vmov	r0, r1, d0
 810d4da:	f7f3 f915 	bl	8100708 <__aeabi_dmul>
 810d4de:	4642      	mov	r2, r8
 810d4e0:	464b      	mov	r3, r9
 810d4e2:	f7f2 ff5b 	bl	810039c <__adddf3>
 810d4e6:	460b      	mov	r3, r1
 810d4e8:	4979      	ldr	r1, [pc, #484]	; (810d6d0 <_strtod_l+0xbd0>)
 810d4ea:	4a7b      	ldr	r2, [pc, #492]	; (810d6d8 <_strtod_l+0xbd8>)
 810d4ec:	4019      	ands	r1, r3
 810d4ee:	4291      	cmp	r1, r2
 810d4f0:	4680      	mov	r8, r0
 810d4f2:	d944      	bls.n	810d57e <_strtod_l+0xa7e>
 810d4f4:	ee18 2a90 	vmov	r2, s17
 810d4f8:	4b78      	ldr	r3, [pc, #480]	; (810d6dc <_strtod_l+0xbdc>)
 810d4fa:	429a      	cmp	r2, r3
 810d4fc:	d104      	bne.n	810d508 <_strtod_l+0xa08>
 810d4fe:	ee18 3a10 	vmov	r3, s16
 810d502:	3301      	adds	r3, #1
 810d504:	f43f ad40 	beq.w	810cf88 <_strtod_l+0x488>
 810d508:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810d6dc <_strtod_l+0xbdc>
 810d50c:	f04f 38ff 	mov.w	r8, #4294967295
 810d510:	9916      	ldr	r1, [sp, #88]	; 0x58
 810d512:	4620      	mov	r0, r4
 810d514:	f7fe fe62 	bl	810c1dc <_Bfree>
 810d518:	9905      	ldr	r1, [sp, #20]
 810d51a:	4620      	mov	r0, r4
 810d51c:	f7fe fe5e 	bl	810c1dc <_Bfree>
 810d520:	4659      	mov	r1, fp
 810d522:	4620      	mov	r0, r4
 810d524:	f7fe fe5a 	bl	810c1dc <_Bfree>
 810d528:	4629      	mov	r1, r5
 810d52a:	4620      	mov	r0, r4
 810d52c:	f7fe fe56 	bl	810c1dc <_Bfree>
 810d530:	e609      	b.n	810d146 <_strtod_l+0x646>
 810d532:	f1b8 0f01 	cmp.w	r8, #1
 810d536:	d103      	bne.n	810d540 <_strtod_l+0xa40>
 810d538:	f1b9 0f00 	cmp.w	r9, #0
 810d53c:	f43f ad95 	beq.w	810d06a <_strtod_l+0x56a>
 810d540:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810d698 <_strtod_l+0xb98>
 810d544:	4f60      	ldr	r7, [pc, #384]	; (810d6c8 <_strtod_l+0xbc8>)
 810d546:	ed8d 7b06 	vstr	d7, [sp, #24]
 810d54a:	2600      	movs	r6, #0
 810d54c:	e7ae      	b.n	810d4ac <_strtod_l+0x9ac>
 810d54e:	4f5f      	ldr	r7, [pc, #380]	; (810d6cc <_strtod_l+0xbcc>)
 810d550:	2600      	movs	r6, #0
 810d552:	e7a7      	b.n	810d4a4 <_strtod_l+0x9a4>
 810d554:	4b5d      	ldr	r3, [pc, #372]	; (810d6cc <_strtod_l+0xbcc>)
 810d556:	4630      	mov	r0, r6
 810d558:	4639      	mov	r1, r7
 810d55a:	2200      	movs	r2, #0
 810d55c:	f7f3 f8d4 	bl	8100708 <__aeabi_dmul>
 810d560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d562:	4606      	mov	r6, r0
 810d564:	460f      	mov	r7, r1
 810d566:	2b00      	cmp	r3, #0
 810d568:	d09c      	beq.n	810d4a4 <_strtod_l+0x9a4>
 810d56a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810d56e:	e79d      	b.n	810d4ac <_strtod_l+0x9ac>
 810d570:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810d6a0 <_strtod_l+0xba0>
 810d574:	ed8d 7b06 	vstr	d7, [sp, #24]
 810d578:	ec57 6b17 	vmov	r6, r7, d7
 810d57c:	e796      	b.n	810d4ac <_strtod_l+0x9ac>
 810d57e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810d582:	9b04      	ldr	r3, [sp, #16]
 810d584:	46ca      	mov	sl, r9
 810d586:	2b00      	cmp	r3, #0
 810d588:	d1c2      	bne.n	810d510 <_strtod_l+0xa10>
 810d58a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d58e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d590:	0d1b      	lsrs	r3, r3, #20
 810d592:	051b      	lsls	r3, r3, #20
 810d594:	429a      	cmp	r2, r3
 810d596:	d1bb      	bne.n	810d510 <_strtod_l+0xa10>
 810d598:	4630      	mov	r0, r6
 810d59a:	4639      	mov	r1, r7
 810d59c:	f7f3 fc14 	bl	8100dc8 <__aeabi_d2lz>
 810d5a0:	f7f3 f884 	bl	81006ac <__aeabi_l2d>
 810d5a4:	4602      	mov	r2, r0
 810d5a6:	460b      	mov	r3, r1
 810d5a8:	4630      	mov	r0, r6
 810d5aa:	4639      	mov	r1, r7
 810d5ac:	f7f2 fef4 	bl	8100398 <__aeabi_dsub>
 810d5b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d5b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d5b6:	ea43 0308 	orr.w	r3, r3, r8
 810d5ba:	4313      	orrs	r3, r2
 810d5bc:	4606      	mov	r6, r0
 810d5be:	460f      	mov	r7, r1
 810d5c0:	d054      	beq.n	810d66c <_strtod_l+0xb6c>
 810d5c2:	a339      	add	r3, pc, #228	; (adr r3, 810d6a8 <_strtod_l+0xba8>)
 810d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d5c8:	f7f3 fb10 	bl	8100bec <__aeabi_dcmplt>
 810d5cc:	2800      	cmp	r0, #0
 810d5ce:	f47f ace5 	bne.w	810cf9c <_strtod_l+0x49c>
 810d5d2:	a337      	add	r3, pc, #220	; (adr r3, 810d6b0 <_strtod_l+0xbb0>)
 810d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d5d8:	4630      	mov	r0, r6
 810d5da:	4639      	mov	r1, r7
 810d5dc:	f7f3 fb24 	bl	8100c28 <__aeabi_dcmpgt>
 810d5e0:	2800      	cmp	r0, #0
 810d5e2:	d095      	beq.n	810d510 <_strtod_l+0xa10>
 810d5e4:	e4da      	b.n	810cf9c <_strtod_l+0x49c>
 810d5e6:	9b04      	ldr	r3, [sp, #16]
 810d5e8:	b333      	cbz	r3, 810d638 <_strtod_l+0xb38>
 810d5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d5ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810d5f0:	d822      	bhi.n	810d638 <_strtod_l+0xb38>
 810d5f2:	a331      	add	r3, pc, #196	; (adr r3, 810d6b8 <_strtod_l+0xbb8>)
 810d5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d5f8:	4630      	mov	r0, r6
 810d5fa:	4639      	mov	r1, r7
 810d5fc:	f7f3 fb00 	bl	8100c00 <__aeabi_dcmple>
 810d600:	b1a0      	cbz	r0, 810d62c <_strtod_l+0xb2c>
 810d602:	4639      	mov	r1, r7
 810d604:	4630      	mov	r0, r6
 810d606:	f7f3 fb57 	bl	8100cb8 <__aeabi_d2uiz>
 810d60a:	2801      	cmp	r0, #1
 810d60c:	bf38      	it	cc
 810d60e:	2001      	movcc	r0, #1
 810d610:	f7f3 f800 	bl	8100614 <__aeabi_ui2d>
 810d614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d616:	4606      	mov	r6, r0
 810d618:	460f      	mov	r7, r1
 810d61a:	bb23      	cbnz	r3, 810d666 <_strtod_l+0xb66>
 810d61c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d620:	9010      	str	r0, [sp, #64]	; 0x40
 810d622:	9311      	str	r3, [sp, #68]	; 0x44
 810d624:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810d628:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810d62c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810d62e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d630:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810d634:	1a9b      	subs	r3, r3, r2
 810d636:	930f      	str	r3, [sp, #60]	; 0x3c
 810d638:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810d63c:	eeb0 0a48 	vmov.f32	s0, s16
 810d640:	eef0 0a68 	vmov.f32	s1, s17
 810d644:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810d648:	f7ff f8f4 	bl	810c834 <__ulp>
 810d64c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810d650:	ec53 2b10 	vmov	r2, r3, d0
 810d654:	f7f3 f858 	bl	8100708 <__aeabi_dmul>
 810d658:	ec53 2b18 	vmov	r2, r3, d8
 810d65c:	f7f2 fe9e 	bl	810039c <__adddf3>
 810d660:	4680      	mov	r8, r0
 810d662:	4689      	mov	r9, r1
 810d664:	e78d      	b.n	810d582 <_strtod_l+0xa82>
 810d666:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810d66a:	e7db      	b.n	810d624 <_strtod_l+0xb24>
 810d66c:	a314      	add	r3, pc, #80	; (adr r3, 810d6c0 <_strtod_l+0xbc0>)
 810d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d672:	f7f3 fabb 	bl	8100bec <__aeabi_dcmplt>
 810d676:	e7b3      	b.n	810d5e0 <_strtod_l+0xae0>
 810d678:	2300      	movs	r3, #0
 810d67a:	930a      	str	r3, [sp, #40]	; 0x28
 810d67c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810d67e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d680:	6013      	str	r3, [r2, #0]
 810d682:	f7ff ba7c 	b.w	810cb7e <_strtod_l+0x7e>
 810d686:	2a65      	cmp	r2, #101	; 0x65
 810d688:	f43f ab75 	beq.w	810cd76 <_strtod_l+0x276>
 810d68c:	2a45      	cmp	r2, #69	; 0x45
 810d68e:	f43f ab72 	beq.w	810cd76 <_strtod_l+0x276>
 810d692:	2301      	movs	r3, #1
 810d694:	f7ff bbaa 	b.w	810cdec <_strtod_l+0x2ec>
 810d698:	00000000 	.word	0x00000000
 810d69c:	bff00000 	.word	0xbff00000
 810d6a0:	00000000 	.word	0x00000000
 810d6a4:	3ff00000 	.word	0x3ff00000
 810d6a8:	94a03595 	.word	0x94a03595
 810d6ac:	3fdfffff 	.word	0x3fdfffff
 810d6b0:	35afe535 	.word	0x35afe535
 810d6b4:	3fe00000 	.word	0x3fe00000
 810d6b8:	ffc00000 	.word	0xffc00000
 810d6bc:	41dfffff 	.word	0x41dfffff
 810d6c0:	94a03595 	.word	0x94a03595
 810d6c4:	3fcfffff 	.word	0x3fcfffff
 810d6c8:	3ff00000 	.word	0x3ff00000
 810d6cc:	3fe00000 	.word	0x3fe00000
 810d6d0:	7ff00000 	.word	0x7ff00000
 810d6d4:	7fe00000 	.word	0x7fe00000
 810d6d8:	7c9fffff 	.word	0x7c9fffff
 810d6dc:	7fefffff 	.word	0x7fefffff

0810d6e0 <_strtod_r>:
 810d6e0:	4b01      	ldr	r3, [pc, #4]	; (810d6e8 <_strtod_r+0x8>)
 810d6e2:	f7ff ba0d 	b.w	810cb00 <_strtod_l>
 810d6e6:	bf00      	nop
 810d6e8:	100009e0 	.word	0x100009e0

0810d6ec <_strtol_l.constprop.0>:
 810d6ec:	2b01      	cmp	r3, #1
 810d6ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d6f2:	d001      	beq.n	810d6f8 <_strtol_l.constprop.0+0xc>
 810d6f4:	2b24      	cmp	r3, #36	; 0x24
 810d6f6:	d906      	bls.n	810d706 <_strtol_l.constprop.0+0x1a>
 810d6f8:	f7fd fe26 	bl	810b348 <__errno>
 810d6fc:	2316      	movs	r3, #22
 810d6fe:	6003      	str	r3, [r0, #0]
 810d700:	2000      	movs	r0, #0
 810d702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d706:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810d7ec <_strtol_l.constprop.0+0x100>
 810d70a:	460d      	mov	r5, r1
 810d70c:	462e      	mov	r6, r5
 810d70e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d712:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810d716:	f017 0708 	ands.w	r7, r7, #8
 810d71a:	d1f7      	bne.n	810d70c <_strtol_l.constprop.0+0x20>
 810d71c:	2c2d      	cmp	r4, #45	; 0x2d
 810d71e:	d132      	bne.n	810d786 <_strtol_l.constprop.0+0x9a>
 810d720:	782c      	ldrb	r4, [r5, #0]
 810d722:	2701      	movs	r7, #1
 810d724:	1cb5      	adds	r5, r6, #2
 810d726:	2b00      	cmp	r3, #0
 810d728:	d05b      	beq.n	810d7e2 <_strtol_l.constprop.0+0xf6>
 810d72a:	2b10      	cmp	r3, #16
 810d72c:	d109      	bne.n	810d742 <_strtol_l.constprop.0+0x56>
 810d72e:	2c30      	cmp	r4, #48	; 0x30
 810d730:	d107      	bne.n	810d742 <_strtol_l.constprop.0+0x56>
 810d732:	782c      	ldrb	r4, [r5, #0]
 810d734:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810d738:	2c58      	cmp	r4, #88	; 0x58
 810d73a:	d14d      	bne.n	810d7d8 <_strtol_l.constprop.0+0xec>
 810d73c:	786c      	ldrb	r4, [r5, #1]
 810d73e:	2310      	movs	r3, #16
 810d740:	3502      	adds	r5, #2
 810d742:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810d746:	f108 38ff 	add.w	r8, r8, #4294967295
 810d74a:	f04f 0e00 	mov.w	lr, #0
 810d74e:	fbb8 f9f3 	udiv	r9, r8, r3
 810d752:	4676      	mov	r6, lr
 810d754:	fb03 8a19 	mls	sl, r3, r9, r8
 810d758:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810d75c:	f1bc 0f09 	cmp.w	ip, #9
 810d760:	d816      	bhi.n	810d790 <_strtol_l.constprop.0+0xa4>
 810d762:	4664      	mov	r4, ip
 810d764:	42a3      	cmp	r3, r4
 810d766:	dd24      	ble.n	810d7b2 <_strtol_l.constprop.0+0xc6>
 810d768:	f1be 3fff 	cmp.w	lr, #4294967295
 810d76c:	d008      	beq.n	810d780 <_strtol_l.constprop.0+0x94>
 810d76e:	45b1      	cmp	r9, r6
 810d770:	d31c      	bcc.n	810d7ac <_strtol_l.constprop.0+0xc0>
 810d772:	d101      	bne.n	810d778 <_strtol_l.constprop.0+0x8c>
 810d774:	45a2      	cmp	sl, r4
 810d776:	db19      	blt.n	810d7ac <_strtol_l.constprop.0+0xc0>
 810d778:	fb06 4603 	mla	r6, r6, r3, r4
 810d77c:	f04f 0e01 	mov.w	lr, #1
 810d780:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d784:	e7e8      	b.n	810d758 <_strtol_l.constprop.0+0x6c>
 810d786:	2c2b      	cmp	r4, #43	; 0x2b
 810d788:	bf04      	itt	eq
 810d78a:	782c      	ldrbeq	r4, [r5, #0]
 810d78c:	1cb5      	addeq	r5, r6, #2
 810d78e:	e7ca      	b.n	810d726 <_strtol_l.constprop.0+0x3a>
 810d790:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810d794:	f1bc 0f19 	cmp.w	ip, #25
 810d798:	d801      	bhi.n	810d79e <_strtol_l.constprop.0+0xb2>
 810d79a:	3c37      	subs	r4, #55	; 0x37
 810d79c:	e7e2      	b.n	810d764 <_strtol_l.constprop.0+0x78>
 810d79e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810d7a2:	f1bc 0f19 	cmp.w	ip, #25
 810d7a6:	d804      	bhi.n	810d7b2 <_strtol_l.constprop.0+0xc6>
 810d7a8:	3c57      	subs	r4, #87	; 0x57
 810d7aa:	e7db      	b.n	810d764 <_strtol_l.constprop.0+0x78>
 810d7ac:	f04f 3eff 	mov.w	lr, #4294967295
 810d7b0:	e7e6      	b.n	810d780 <_strtol_l.constprop.0+0x94>
 810d7b2:	f1be 3fff 	cmp.w	lr, #4294967295
 810d7b6:	d105      	bne.n	810d7c4 <_strtol_l.constprop.0+0xd8>
 810d7b8:	2322      	movs	r3, #34	; 0x22
 810d7ba:	6003      	str	r3, [r0, #0]
 810d7bc:	4646      	mov	r6, r8
 810d7be:	b942      	cbnz	r2, 810d7d2 <_strtol_l.constprop.0+0xe6>
 810d7c0:	4630      	mov	r0, r6
 810d7c2:	e79e      	b.n	810d702 <_strtol_l.constprop.0+0x16>
 810d7c4:	b107      	cbz	r7, 810d7c8 <_strtol_l.constprop.0+0xdc>
 810d7c6:	4276      	negs	r6, r6
 810d7c8:	2a00      	cmp	r2, #0
 810d7ca:	d0f9      	beq.n	810d7c0 <_strtol_l.constprop.0+0xd4>
 810d7cc:	f1be 0f00 	cmp.w	lr, #0
 810d7d0:	d000      	beq.n	810d7d4 <_strtol_l.constprop.0+0xe8>
 810d7d2:	1e69      	subs	r1, r5, #1
 810d7d4:	6011      	str	r1, [r2, #0]
 810d7d6:	e7f3      	b.n	810d7c0 <_strtol_l.constprop.0+0xd4>
 810d7d8:	2430      	movs	r4, #48	; 0x30
 810d7da:	2b00      	cmp	r3, #0
 810d7dc:	d1b1      	bne.n	810d742 <_strtol_l.constprop.0+0x56>
 810d7de:	2308      	movs	r3, #8
 810d7e0:	e7af      	b.n	810d742 <_strtol_l.constprop.0+0x56>
 810d7e2:	2c30      	cmp	r4, #48	; 0x30
 810d7e4:	d0a5      	beq.n	810d732 <_strtol_l.constprop.0+0x46>
 810d7e6:	230a      	movs	r3, #10
 810d7e8:	e7ab      	b.n	810d742 <_strtol_l.constprop.0+0x56>
 810d7ea:	bf00      	nop
 810d7ec:	081e69e9 	.word	0x081e69e9

0810d7f0 <_strtol_r>:
 810d7f0:	f7ff bf7c 	b.w	810d6ec <_strtol_l.constprop.0>

0810d7f4 <__ssputs_r>:
 810d7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d7f8:	688e      	ldr	r6, [r1, #8]
 810d7fa:	461f      	mov	r7, r3
 810d7fc:	42be      	cmp	r6, r7
 810d7fe:	680b      	ldr	r3, [r1, #0]
 810d800:	4682      	mov	sl, r0
 810d802:	460c      	mov	r4, r1
 810d804:	4690      	mov	r8, r2
 810d806:	d82c      	bhi.n	810d862 <__ssputs_r+0x6e>
 810d808:	898a      	ldrh	r2, [r1, #12]
 810d80a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810d80e:	d026      	beq.n	810d85e <__ssputs_r+0x6a>
 810d810:	6965      	ldr	r5, [r4, #20]
 810d812:	6909      	ldr	r1, [r1, #16]
 810d814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d818:	eba3 0901 	sub.w	r9, r3, r1
 810d81c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d820:	1c7b      	adds	r3, r7, #1
 810d822:	444b      	add	r3, r9
 810d824:	106d      	asrs	r5, r5, #1
 810d826:	429d      	cmp	r5, r3
 810d828:	bf38      	it	cc
 810d82a:	461d      	movcc	r5, r3
 810d82c:	0553      	lsls	r3, r2, #21
 810d82e:	d527      	bpl.n	810d880 <__ssputs_r+0x8c>
 810d830:	4629      	mov	r1, r5
 810d832:	f7fc fbcd 	bl	8109fd0 <_malloc_r>
 810d836:	4606      	mov	r6, r0
 810d838:	b360      	cbz	r0, 810d894 <__ssputs_r+0xa0>
 810d83a:	6921      	ldr	r1, [r4, #16]
 810d83c:	464a      	mov	r2, r9
 810d83e:	f7fd fdb0 	bl	810b3a2 <memcpy>
 810d842:	89a3      	ldrh	r3, [r4, #12]
 810d844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810d848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d84c:	81a3      	strh	r3, [r4, #12]
 810d84e:	6126      	str	r6, [r4, #16]
 810d850:	6165      	str	r5, [r4, #20]
 810d852:	444e      	add	r6, r9
 810d854:	eba5 0509 	sub.w	r5, r5, r9
 810d858:	6026      	str	r6, [r4, #0]
 810d85a:	60a5      	str	r5, [r4, #8]
 810d85c:	463e      	mov	r6, r7
 810d85e:	42be      	cmp	r6, r7
 810d860:	d900      	bls.n	810d864 <__ssputs_r+0x70>
 810d862:	463e      	mov	r6, r7
 810d864:	6820      	ldr	r0, [r4, #0]
 810d866:	4632      	mov	r2, r6
 810d868:	4641      	mov	r1, r8
 810d86a:	f000 fb6f 	bl	810df4c <memmove>
 810d86e:	68a3      	ldr	r3, [r4, #8]
 810d870:	1b9b      	subs	r3, r3, r6
 810d872:	60a3      	str	r3, [r4, #8]
 810d874:	6823      	ldr	r3, [r4, #0]
 810d876:	4433      	add	r3, r6
 810d878:	6023      	str	r3, [r4, #0]
 810d87a:	2000      	movs	r0, #0
 810d87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d880:	462a      	mov	r2, r5
 810d882:	f7fc fc31 	bl	810a0e8 <_realloc_r>
 810d886:	4606      	mov	r6, r0
 810d888:	2800      	cmp	r0, #0
 810d88a:	d1e0      	bne.n	810d84e <__ssputs_r+0x5a>
 810d88c:	6921      	ldr	r1, [r4, #16]
 810d88e:	4650      	mov	r0, sl
 810d890:	f7fe fc18 	bl	810c0c4 <_free_r>
 810d894:	230c      	movs	r3, #12
 810d896:	f8ca 3000 	str.w	r3, [sl]
 810d89a:	89a3      	ldrh	r3, [r4, #12]
 810d89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d8a0:	81a3      	strh	r3, [r4, #12]
 810d8a2:	f04f 30ff 	mov.w	r0, #4294967295
 810d8a6:	e7e9      	b.n	810d87c <__ssputs_r+0x88>

0810d8a8 <_svfiprintf_r>:
 810d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d8ac:	4698      	mov	r8, r3
 810d8ae:	898b      	ldrh	r3, [r1, #12]
 810d8b0:	061b      	lsls	r3, r3, #24
 810d8b2:	b09d      	sub	sp, #116	; 0x74
 810d8b4:	4607      	mov	r7, r0
 810d8b6:	460d      	mov	r5, r1
 810d8b8:	4614      	mov	r4, r2
 810d8ba:	d50e      	bpl.n	810d8da <_svfiprintf_r+0x32>
 810d8bc:	690b      	ldr	r3, [r1, #16]
 810d8be:	b963      	cbnz	r3, 810d8da <_svfiprintf_r+0x32>
 810d8c0:	2140      	movs	r1, #64	; 0x40
 810d8c2:	f7fc fb85 	bl	8109fd0 <_malloc_r>
 810d8c6:	6028      	str	r0, [r5, #0]
 810d8c8:	6128      	str	r0, [r5, #16]
 810d8ca:	b920      	cbnz	r0, 810d8d6 <_svfiprintf_r+0x2e>
 810d8cc:	230c      	movs	r3, #12
 810d8ce:	603b      	str	r3, [r7, #0]
 810d8d0:	f04f 30ff 	mov.w	r0, #4294967295
 810d8d4:	e0d0      	b.n	810da78 <_svfiprintf_r+0x1d0>
 810d8d6:	2340      	movs	r3, #64	; 0x40
 810d8d8:	616b      	str	r3, [r5, #20]
 810d8da:	2300      	movs	r3, #0
 810d8dc:	9309      	str	r3, [sp, #36]	; 0x24
 810d8de:	2320      	movs	r3, #32
 810d8e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d8e4:	f8cd 800c 	str.w	r8, [sp, #12]
 810d8e8:	2330      	movs	r3, #48	; 0x30
 810d8ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810da90 <_svfiprintf_r+0x1e8>
 810d8ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d8f2:	f04f 0901 	mov.w	r9, #1
 810d8f6:	4623      	mov	r3, r4
 810d8f8:	469a      	mov	sl, r3
 810d8fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d8fe:	b10a      	cbz	r2, 810d904 <_svfiprintf_r+0x5c>
 810d900:	2a25      	cmp	r2, #37	; 0x25
 810d902:	d1f9      	bne.n	810d8f8 <_svfiprintf_r+0x50>
 810d904:	ebba 0b04 	subs.w	fp, sl, r4
 810d908:	d00b      	beq.n	810d922 <_svfiprintf_r+0x7a>
 810d90a:	465b      	mov	r3, fp
 810d90c:	4622      	mov	r2, r4
 810d90e:	4629      	mov	r1, r5
 810d910:	4638      	mov	r0, r7
 810d912:	f7ff ff6f 	bl	810d7f4 <__ssputs_r>
 810d916:	3001      	adds	r0, #1
 810d918:	f000 80a9 	beq.w	810da6e <_svfiprintf_r+0x1c6>
 810d91c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d91e:	445a      	add	r2, fp
 810d920:	9209      	str	r2, [sp, #36]	; 0x24
 810d922:	f89a 3000 	ldrb.w	r3, [sl]
 810d926:	2b00      	cmp	r3, #0
 810d928:	f000 80a1 	beq.w	810da6e <_svfiprintf_r+0x1c6>
 810d92c:	2300      	movs	r3, #0
 810d92e:	f04f 32ff 	mov.w	r2, #4294967295
 810d932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d936:	f10a 0a01 	add.w	sl, sl, #1
 810d93a:	9304      	str	r3, [sp, #16]
 810d93c:	9307      	str	r3, [sp, #28]
 810d93e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d942:	931a      	str	r3, [sp, #104]	; 0x68
 810d944:	4654      	mov	r4, sl
 810d946:	2205      	movs	r2, #5
 810d948:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d94c:	4850      	ldr	r0, [pc, #320]	; (810da90 <_svfiprintf_r+0x1e8>)
 810d94e:	f7f2 fcc7 	bl	81002e0 <memchr>
 810d952:	9a04      	ldr	r2, [sp, #16]
 810d954:	b9d8      	cbnz	r0, 810d98e <_svfiprintf_r+0xe6>
 810d956:	06d0      	lsls	r0, r2, #27
 810d958:	bf44      	itt	mi
 810d95a:	2320      	movmi	r3, #32
 810d95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d960:	0711      	lsls	r1, r2, #28
 810d962:	bf44      	itt	mi
 810d964:	232b      	movmi	r3, #43	; 0x2b
 810d966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d96a:	f89a 3000 	ldrb.w	r3, [sl]
 810d96e:	2b2a      	cmp	r3, #42	; 0x2a
 810d970:	d015      	beq.n	810d99e <_svfiprintf_r+0xf6>
 810d972:	9a07      	ldr	r2, [sp, #28]
 810d974:	4654      	mov	r4, sl
 810d976:	2000      	movs	r0, #0
 810d978:	f04f 0c0a 	mov.w	ip, #10
 810d97c:	4621      	mov	r1, r4
 810d97e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d982:	3b30      	subs	r3, #48	; 0x30
 810d984:	2b09      	cmp	r3, #9
 810d986:	d94d      	bls.n	810da24 <_svfiprintf_r+0x17c>
 810d988:	b1b0      	cbz	r0, 810d9b8 <_svfiprintf_r+0x110>
 810d98a:	9207      	str	r2, [sp, #28]
 810d98c:	e014      	b.n	810d9b8 <_svfiprintf_r+0x110>
 810d98e:	eba0 0308 	sub.w	r3, r0, r8
 810d992:	fa09 f303 	lsl.w	r3, r9, r3
 810d996:	4313      	orrs	r3, r2
 810d998:	9304      	str	r3, [sp, #16]
 810d99a:	46a2      	mov	sl, r4
 810d99c:	e7d2      	b.n	810d944 <_svfiprintf_r+0x9c>
 810d99e:	9b03      	ldr	r3, [sp, #12]
 810d9a0:	1d19      	adds	r1, r3, #4
 810d9a2:	681b      	ldr	r3, [r3, #0]
 810d9a4:	9103      	str	r1, [sp, #12]
 810d9a6:	2b00      	cmp	r3, #0
 810d9a8:	bfbb      	ittet	lt
 810d9aa:	425b      	neglt	r3, r3
 810d9ac:	f042 0202 	orrlt.w	r2, r2, #2
 810d9b0:	9307      	strge	r3, [sp, #28]
 810d9b2:	9307      	strlt	r3, [sp, #28]
 810d9b4:	bfb8      	it	lt
 810d9b6:	9204      	strlt	r2, [sp, #16]
 810d9b8:	7823      	ldrb	r3, [r4, #0]
 810d9ba:	2b2e      	cmp	r3, #46	; 0x2e
 810d9bc:	d10c      	bne.n	810d9d8 <_svfiprintf_r+0x130>
 810d9be:	7863      	ldrb	r3, [r4, #1]
 810d9c0:	2b2a      	cmp	r3, #42	; 0x2a
 810d9c2:	d134      	bne.n	810da2e <_svfiprintf_r+0x186>
 810d9c4:	9b03      	ldr	r3, [sp, #12]
 810d9c6:	1d1a      	adds	r2, r3, #4
 810d9c8:	681b      	ldr	r3, [r3, #0]
 810d9ca:	9203      	str	r2, [sp, #12]
 810d9cc:	2b00      	cmp	r3, #0
 810d9ce:	bfb8      	it	lt
 810d9d0:	f04f 33ff 	movlt.w	r3, #4294967295
 810d9d4:	3402      	adds	r4, #2
 810d9d6:	9305      	str	r3, [sp, #20]
 810d9d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810daa0 <_svfiprintf_r+0x1f8>
 810d9dc:	7821      	ldrb	r1, [r4, #0]
 810d9de:	2203      	movs	r2, #3
 810d9e0:	4650      	mov	r0, sl
 810d9e2:	f7f2 fc7d 	bl	81002e0 <memchr>
 810d9e6:	b138      	cbz	r0, 810d9f8 <_svfiprintf_r+0x150>
 810d9e8:	9b04      	ldr	r3, [sp, #16]
 810d9ea:	eba0 000a 	sub.w	r0, r0, sl
 810d9ee:	2240      	movs	r2, #64	; 0x40
 810d9f0:	4082      	lsls	r2, r0
 810d9f2:	4313      	orrs	r3, r2
 810d9f4:	3401      	adds	r4, #1
 810d9f6:	9304      	str	r3, [sp, #16]
 810d9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d9fc:	4825      	ldr	r0, [pc, #148]	; (810da94 <_svfiprintf_r+0x1ec>)
 810d9fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810da02:	2206      	movs	r2, #6
 810da04:	f7f2 fc6c 	bl	81002e0 <memchr>
 810da08:	2800      	cmp	r0, #0
 810da0a:	d038      	beq.n	810da7e <_svfiprintf_r+0x1d6>
 810da0c:	4b22      	ldr	r3, [pc, #136]	; (810da98 <_svfiprintf_r+0x1f0>)
 810da0e:	bb1b      	cbnz	r3, 810da58 <_svfiprintf_r+0x1b0>
 810da10:	9b03      	ldr	r3, [sp, #12]
 810da12:	3307      	adds	r3, #7
 810da14:	f023 0307 	bic.w	r3, r3, #7
 810da18:	3308      	adds	r3, #8
 810da1a:	9303      	str	r3, [sp, #12]
 810da1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810da1e:	4433      	add	r3, r6
 810da20:	9309      	str	r3, [sp, #36]	; 0x24
 810da22:	e768      	b.n	810d8f6 <_svfiprintf_r+0x4e>
 810da24:	fb0c 3202 	mla	r2, ip, r2, r3
 810da28:	460c      	mov	r4, r1
 810da2a:	2001      	movs	r0, #1
 810da2c:	e7a6      	b.n	810d97c <_svfiprintf_r+0xd4>
 810da2e:	2300      	movs	r3, #0
 810da30:	3401      	adds	r4, #1
 810da32:	9305      	str	r3, [sp, #20]
 810da34:	4619      	mov	r1, r3
 810da36:	f04f 0c0a 	mov.w	ip, #10
 810da3a:	4620      	mov	r0, r4
 810da3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810da40:	3a30      	subs	r2, #48	; 0x30
 810da42:	2a09      	cmp	r2, #9
 810da44:	d903      	bls.n	810da4e <_svfiprintf_r+0x1a6>
 810da46:	2b00      	cmp	r3, #0
 810da48:	d0c6      	beq.n	810d9d8 <_svfiprintf_r+0x130>
 810da4a:	9105      	str	r1, [sp, #20]
 810da4c:	e7c4      	b.n	810d9d8 <_svfiprintf_r+0x130>
 810da4e:	fb0c 2101 	mla	r1, ip, r1, r2
 810da52:	4604      	mov	r4, r0
 810da54:	2301      	movs	r3, #1
 810da56:	e7f0      	b.n	810da3a <_svfiprintf_r+0x192>
 810da58:	ab03      	add	r3, sp, #12
 810da5a:	9300      	str	r3, [sp, #0]
 810da5c:	462a      	mov	r2, r5
 810da5e:	4b0f      	ldr	r3, [pc, #60]	; (810da9c <_svfiprintf_r+0x1f4>)
 810da60:	a904      	add	r1, sp, #16
 810da62:	4638      	mov	r0, r7
 810da64:	f7fc fc10 	bl	810a288 <_printf_float>
 810da68:	1c42      	adds	r2, r0, #1
 810da6a:	4606      	mov	r6, r0
 810da6c:	d1d6      	bne.n	810da1c <_svfiprintf_r+0x174>
 810da6e:	89ab      	ldrh	r3, [r5, #12]
 810da70:	065b      	lsls	r3, r3, #25
 810da72:	f53f af2d 	bmi.w	810d8d0 <_svfiprintf_r+0x28>
 810da76:	9809      	ldr	r0, [sp, #36]	; 0x24
 810da78:	b01d      	add	sp, #116	; 0x74
 810da7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810da7e:	ab03      	add	r3, sp, #12
 810da80:	9300      	str	r3, [sp, #0]
 810da82:	462a      	mov	r2, r5
 810da84:	4b05      	ldr	r3, [pc, #20]	; (810da9c <_svfiprintf_r+0x1f4>)
 810da86:	a904      	add	r1, sp, #16
 810da88:	4638      	mov	r0, r7
 810da8a:	f7fc fea1 	bl	810a7d0 <_printf_i>
 810da8e:	e7eb      	b.n	810da68 <_svfiprintf_r+0x1c0>
 810da90:	081e6ae9 	.word	0x081e6ae9
 810da94:	081e6af3 	.word	0x081e6af3
 810da98:	0810a289 	.word	0x0810a289
 810da9c:	0810d7f5 	.word	0x0810d7f5
 810daa0:	081e6aef 	.word	0x081e6aef

0810daa4 <__sfputc_r>:
 810daa4:	6893      	ldr	r3, [r2, #8]
 810daa6:	3b01      	subs	r3, #1
 810daa8:	2b00      	cmp	r3, #0
 810daaa:	b410      	push	{r4}
 810daac:	6093      	str	r3, [r2, #8]
 810daae:	da08      	bge.n	810dac2 <__sfputc_r+0x1e>
 810dab0:	6994      	ldr	r4, [r2, #24]
 810dab2:	42a3      	cmp	r3, r4
 810dab4:	db01      	blt.n	810daba <__sfputc_r+0x16>
 810dab6:	290a      	cmp	r1, #10
 810dab8:	d103      	bne.n	810dac2 <__sfputc_r+0x1e>
 810daba:	f85d 4b04 	ldr.w	r4, [sp], #4
 810dabe:	f7fd bb4c 	b.w	810b15a <__swbuf_r>
 810dac2:	6813      	ldr	r3, [r2, #0]
 810dac4:	1c58      	adds	r0, r3, #1
 810dac6:	6010      	str	r0, [r2, #0]
 810dac8:	7019      	strb	r1, [r3, #0]
 810daca:	4608      	mov	r0, r1
 810dacc:	f85d 4b04 	ldr.w	r4, [sp], #4
 810dad0:	4770      	bx	lr

0810dad2 <__sfputs_r>:
 810dad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dad4:	4606      	mov	r6, r0
 810dad6:	460f      	mov	r7, r1
 810dad8:	4614      	mov	r4, r2
 810dada:	18d5      	adds	r5, r2, r3
 810dadc:	42ac      	cmp	r4, r5
 810dade:	d101      	bne.n	810dae4 <__sfputs_r+0x12>
 810dae0:	2000      	movs	r0, #0
 810dae2:	e007      	b.n	810daf4 <__sfputs_r+0x22>
 810dae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dae8:	463a      	mov	r2, r7
 810daea:	4630      	mov	r0, r6
 810daec:	f7ff ffda 	bl	810daa4 <__sfputc_r>
 810daf0:	1c43      	adds	r3, r0, #1
 810daf2:	d1f3      	bne.n	810dadc <__sfputs_r+0xa>
 810daf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810daf8 <_vfiprintf_r>:
 810daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dafc:	460d      	mov	r5, r1
 810dafe:	b09d      	sub	sp, #116	; 0x74
 810db00:	4614      	mov	r4, r2
 810db02:	4698      	mov	r8, r3
 810db04:	4606      	mov	r6, r0
 810db06:	b118      	cbz	r0, 810db10 <_vfiprintf_r+0x18>
 810db08:	6a03      	ldr	r3, [r0, #32]
 810db0a:	b90b      	cbnz	r3, 810db10 <_vfiprintf_r+0x18>
 810db0c:	f7fd fa1e 	bl	810af4c <__sinit>
 810db10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810db12:	07d9      	lsls	r1, r3, #31
 810db14:	d405      	bmi.n	810db22 <_vfiprintf_r+0x2a>
 810db16:	89ab      	ldrh	r3, [r5, #12]
 810db18:	059a      	lsls	r2, r3, #22
 810db1a:	d402      	bmi.n	810db22 <_vfiprintf_r+0x2a>
 810db1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810db1e:	f7fd fc3e 	bl	810b39e <__retarget_lock_acquire_recursive>
 810db22:	89ab      	ldrh	r3, [r5, #12]
 810db24:	071b      	lsls	r3, r3, #28
 810db26:	d501      	bpl.n	810db2c <_vfiprintf_r+0x34>
 810db28:	692b      	ldr	r3, [r5, #16]
 810db2a:	b99b      	cbnz	r3, 810db54 <_vfiprintf_r+0x5c>
 810db2c:	4629      	mov	r1, r5
 810db2e:	4630      	mov	r0, r6
 810db30:	f7fd fb50 	bl	810b1d4 <__swsetup_r>
 810db34:	b170      	cbz	r0, 810db54 <_vfiprintf_r+0x5c>
 810db36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810db38:	07dc      	lsls	r4, r3, #31
 810db3a:	d504      	bpl.n	810db46 <_vfiprintf_r+0x4e>
 810db3c:	f04f 30ff 	mov.w	r0, #4294967295
 810db40:	b01d      	add	sp, #116	; 0x74
 810db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810db46:	89ab      	ldrh	r3, [r5, #12]
 810db48:	0598      	lsls	r0, r3, #22
 810db4a:	d4f7      	bmi.n	810db3c <_vfiprintf_r+0x44>
 810db4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810db4e:	f7fd fc27 	bl	810b3a0 <__retarget_lock_release_recursive>
 810db52:	e7f3      	b.n	810db3c <_vfiprintf_r+0x44>
 810db54:	2300      	movs	r3, #0
 810db56:	9309      	str	r3, [sp, #36]	; 0x24
 810db58:	2320      	movs	r3, #32
 810db5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810db5e:	f8cd 800c 	str.w	r8, [sp, #12]
 810db62:	2330      	movs	r3, #48	; 0x30
 810db64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810dd18 <_vfiprintf_r+0x220>
 810db68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810db6c:	f04f 0901 	mov.w	r9, #1
 810db70:	4623      	mov	r3, r4
 810db72:	469a      	mov	sl, r3
 810db74:	f813 2b01 	ldrb.w	r2, [r3], #1
 810db78:	b10a      	cbz	r2, 810db7e <_vfiprintf_r+0x86>
 810db7a:	2a25      	cmp	r2, #37	; 0x25
 810db7c:	d1f9      	bne.n	810db72 <_vfiprintf_r+0x7a>
 810db7e:	ebba 0b04 	subs.w	fp, sl, r4
 810db82:	d00b      	beq.n	810db9c <_vfiprintf_r+0xa4>
 810db84:	465b      	mov	r3, fp
 810db86:	4622      	mov	r2, r4
 810db88:	4629      	mov	r1, r5
 810db8a:	4630      	mov	r0, r6
 810db8c:	f7ff ffa1 	bl	810dad2 <__sfputs_r>
 810db90:	3001      	adds	r0, #1
 810db92:	f000 80a9 	beq.w	810dce8 <_vfiprintf_r+0x1f0>
 810db96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810db98:	445a      	add	r2, fp
 810db9a:	9209      	str	r2, [sp, #36]	; 0x24
 810db9c:	f89a 3000 	ldrb.w	r3, [sl]
 810dba0:	2b00      	cmp	r3, #0
 810dba2:	f000 80a1 	beq.w	810dce8 <_vfiprintf_r+0x1f0>
 810dba6:	2300      	movs	r3, #0
 810dba8:	f04f 32ff 	mov.w	r2, #4294967295
 810dbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810dbb0:	f10a 0a01 	add.w	sl, sl, #1
 810dbb4:	9304      	str	r3, [sp, #16]
 810dbb6:	9307      	str	r3, [sp, #28]
 810dbb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810dbbc:	931a      	str	r3, [sp, #104]	; 0x68
 810dbbe:	4654      	mov	r4, sl
 810dbc0:	2205      	movs	r2, #5
 810dbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dbc6:	4854      	ldr	r0, [pc, #336]	; (810dd18 <_vfiprintf_r+0x220>)
 810dbc8:	f7f2 fb8a 	bl	81002e0 <memchr>
 810dbcc:	9a04      	ldr	r2, [sp, #16]
 810dbce:	b9d8      	cbnz	r0, 810dc08 <_vfiprintf_r+0x110>
 810dbd0:	06d1      	lsls	r1, r2, #27
 810dbd2:	bf44      	itt	mi
 810dbd4:	2320      	movmi	r3, #32
 810dbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810dbda:	0713      	lsls	r3, r2, #28
 810dbdc:	bf44      	itt	mi
 810dbde:	232b      	movmi	r3, #43	; 0x2b
 810dbe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810dbe4:	f89a 3000 	ldrb.w	r3, [sl]
 810dbe8:	2b2a      	cmp	r3, #42	; 0x2a
 810dbea:	d015      	beq.n	810dc18 <_vfiprintf_r+0x120>
 810dbec:	9a07      	ldr	r2, [sp, #28]
 810dbee:	4654      	mov	r4, sl
 810dbf0:	2000      	movs	r0, #0
 810dbf2:	f04f 0c0a 	mov.w	ip, #10
 810dbf6:	4621      	mov	r1, r4
 810dbf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 810dbfc:	3b30      	subs	r3, #48	; 0x30
 810dbfe:	2b09      	cmp	r3, #9
 810dc00:	d94d      	bls.n	810dc9e <_vfiprintf_r+0x1a6>
 810dc02:	b1b0      	cbz	r0, 810dc32 <_vfiprintf_r+0x13a>
 810dc04:	9207      	str	r2, [sp, #28]
 810dc06:	e014      	b.n	810dc32 <_vfiprintf_r+0x13a>
 810dc08:	eba0 0308 	sub.w	r3, r0, r8
 810dc0c:	fa09 f303 	lsl.w	r3, r9, r3
 810dc10:	4313      	orrs	r3, r2
 810dc12:	9304      	str	r3, [sp, #16]
 810dc14:	46a2      	mov	sl, r4
 810dc16:	e7d2      	b.n	810dbbe <_vfiprintf_r+0xc6>
 810dc18:	9b03      	ldr	r3, [sp, #12]
 810dc1a:	1d19      	adds	r1, r3, #4
 810dc1c:	681b      	ldr	r3, [r3, #0]
 810dc1e:	9103      	str	r1, [sp, #12]
 810dc20:	2b00      	cmp	r3, #0
 810dc22:	bfbb      	ittet	lt
 810dc24:	425b      	neglt	r3, r3
 810dc26:	f042 0202 	orrlt.w	r2, r2, #2
 810dc2a:	9307      	strge	r3, [sp, #28]
 810dc2c:	9307      	strlt	r3, [sp, #28]
 810dc2e:	bfb8      	it	lt
 810dc30:	9204      	strlt	r2, [sp, #16]
 810dc32:	7823      	ldrb	r3, [r4, #0]
 810dc34:	2b2e      	cmp	r3, #46	; 0x2e
 810dc36:	d10c      	bne.n	810dc52 <_vfiprintf_r+0x15a>
 810dc38:	7863      	ldrb	r3, [r4, #1]
 810dc3a:	2b2a      	cmp	r3, #42	; 0x2a
 810dc3c:	d134      	bne.n	810dca8 <_vfiprintf_r+0x1b0>
 810dc3e:	9b03      	ldr	r3, [sp, #12]
 810dc40:	1d1a      	adds	r2, r3, #4
 810dc42:	681b      	ldr	r3, [r3, #0]
 810dc44:	9203      	str	r2, [sp, #12]
 810dc46:	2b00      	cmp	r3, #0
 810dc48:	bfb8      	it	lt
 810dc4a:	f04f 33ff 	movlt.w	r3, #4294967295
 810dc4e:	3402      	adds	r4, #2
 810dc50:	9305      	str	r3, [sp, #20]
 810dc52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810dd28 <_vfiprintf_r+0x230>
 810dc56:	7821      	ldrb	r1, [r4, #0]
 810dc58:	2203      	movs	r2, #3
 810dc5a:	4650      	mov	r0, sl
 810dc5c:	f7f2 fb40 	bl	81002e0 <memchr>
 810dc60:	b138      	cbz	r0, 810dc72 <_vfiprintf_r+0x17a>
 810dc62:	9b04      	ldr	r3, [sp, #16]
 810dc64:	eba0 000a 	sub.w	r0, r0, sl
 810dc68:	2240      	movs	r2, #64	; 0x40
 810dc6a:	4082      	lsls	r2, r0
 810dc6c:	4313      	orrs	r3, r2
 810dc6e:	3401      	adds	r4, #1
 810dc70:	9304      	str	r3, [sp, #16]
 810dc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dc76:	4829      	ldr	r0, [pc, #164]	; (810dd1c <_vfiprintf_r+0x224>)
 810dc78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810dc7c:	2206      	movs	r2, #6
 810dc7e:	f7f2 fb2f 	bl	81002e0 <memchr>
 810dc82:	2800      	cmp	r0, #0
 810dc84:	d03f      	beq.n	810dd06 <_vfiprintf_r+0x20e>
 810dc86:	4b26      	ldr	r3, [pc, #152]	; (810dd20 <_vfiprintf_r+0x228>)
 810dc88:	bb1b      	cbnz	r3, 810dcd2 <_vfiprintf_r+0x1da>
 810dc8a:	9b03      	ldr	r3, [sp, #12]
 810dc8c:	3307      	adds	r3, #7
 810dc8e:	f023 0307 	bic.w	r3, r3, #7
 810dc92:	3308      	adds	r3, #8
 810dc94:	9303      	str	r3, [sp, #12]
 810dc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810dc98:	443b      	add	r3, r7
 810dc9a:	9309      	str	r3, [sp, #36]	; 0x24
 810dc9c:	e768      	b.n	810db70 <_vfiprintf_r+0x78>
 810dc9e:	fb0c 3202 	mla	r2, ip, r2, r3
 810dca2:	460c      	mov	r4, r1
 810dca4:	2001      	movs	r0, #1
 810dca6:	e7a6      	b.n	810dbf6 <_vfiprintf_r+0xfe>
 810dca8:	2300      	movs	r3, #0
 810dcaa:	3401      	adds	r4, #1
 810dcac:	9305      	str	r3, [sp, #20]
 810dcae:	4619      	mov	r1, r3
 810dcb0:	f04f 0c0a 	mov.w	ip, #10
 810dcb4:	4620      	mov	r0, r4
 810dcb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 810dcba:	3a30      	subs	r2, #48	; 0x30
 810dcbc:	2a09      	cmp	r2, #9
 810dcbe:	d903      	bls.n	810dcc8 <_vfiprintf_r+0x1d0>
 810dcc0:	2b00      	cmp	r3, #0
 810dcc2:	d0c6      	beq.n	810dc52 <_vfiprintf_r+0x15a>
 810dcc4:	9105      	str	r1, [sp, #20]
 810dcc6:	e7c4      	b.n	810dc52 <_vfiprintf_r+0x15a>
 810dcc8:	fb0c 2101 	mla	r1, ip, r1, r2
 810dccc:	4604      	mov	r4, r0
 810dcce:	2301      	movs	r3, #1
 810dcd0:	e7f0      	b.n	810dcb4 <_vfiprintf_r+0x1bc>
 810dcd2:	ab03      	add	r3, sp, #12
 810dcd4:	9300      	str	r3, [sp, #0]
 810dcd6:	462a      	mov	r2, r5
 810dcd8:	4b12      	ldr	r3, [pc, #72]	; (810dd24 <_vfiprintf_r+0x22c>)
 810dcda:	a904      	add	r1, sp, #16
 810dcdc:	4630      	mov	r0, r6
 810dcde:	f7fc fad3 	bl	810a288 <_printf_float>
 810dce2:	4607      	mov	r7, r0
 810dce4:	1c78      	adds	r0, r7, #1
 810dce6:	d1d6      	bne.n	810dc96 <_vfiprintf_r+0x19e>
 810dce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810dcea:	07d9      	lsls	r1, r3, #31
 810dcec:	d405      	bmi.n	810dcfa <_vfiprintf_r+0x202>
 810dcee:	89ab      	ldrh	r3, [r5, #12]
 810dcf0:	059a      	lsls	r2, r3, #22
 810dcf2:	d402      	bmi.n	810dcfa <_vfiprintf_r+0x202>
 810dcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810dcf6:	f7fd fb53 	bl	810b3a0 <__retarget_lock_release_recursive>
 810dcfa:	89ab      	ldrh	r3, [r5, #12]
 810dcfc:	065b      	lsls	r3, r3, #25
 810dcfe:	f53f af1d 	bmi.w	810db3c <_vfiprintf_r+0x44>
 810dd02:	9809      	ldr	r0, [sp, #36]	; 0x24
 810dd04:	e71c      	b.n	810db40 <_vfiprintf_r+0x48>
 810dd06:	ab03      	add	r3, sp, #12
 810dd08:	9300      	str	r3, [sp, #0]
 810dd0a:	462a      	mov	r2, r5
 810dd0c:	4b05      	ldr	r3, [pc, #20]	; (810dd24 <_vfiprintf_r+0x22c>)
 810dd0e:	a904      	add	r1, sp, #16
 810dd10:	4630      	mov	r0, r6
 810dd12:	f7fc fd5d 	bl	810a7d0 <_printf_i>
 810dd16:	e7e4      	b.n	810dce2 <_vfiprintf_r+0x1ea>
 810dd18:	081e6ae9 	.word	0x081e6ae9
 810dd1c:	081e6af3 	.word	0x081e6af3
 810dd20:	0810a289 	.word	0x0810a289
 810dd24:	0810dad3 	.word	0x0810dad3
 810dd28:	081e6aef 	.word	0x081e6aef

0810dd2c <__sflush_r>:
 810dd2c:	898a      	ldrh	r2, [r1, #12]
 810dd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dd32:	4605      	mov	r5, r0
 810dd34:	0710      	lsls	r0, r2, #28
 810dd36:	460c      	mov	r4, r1
 810dd38:	d458      	bmi.n	810ddec <__sflush_r+0xc0>
 810dd3a:	684b      	ldr	r3, [r1, #4]
 810dd3c:	2b00      	cmp	r3, #0
 810dd3e:	dc05      	bgt.n	810dd4c <__sflush_r+0x20>
 810dd40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810dd42:	2b00      	cmp	r3, #0
 810dd44:	dc02      	bgt.n	810dd4c <__sflush_r+0x20>
 810dd46:	2000      	movs	r0, #0
 810dd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810dd4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810dd4e:	2e00      	cmp	r6, #0
 810dd50:	d0f9      	beq.n	810dd46 <__sflush_r+0x1a>
 810dd52:	2300      	movs	r3, #0
 810dd54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810dd58:	682f      	ldr	r7, [r5, #0]
 810dd5a:	6a21      	ldr	r1, [r4, #32]
 810dd5c:	602b      	str	r3, [r5, #0]
 810dd5e:	d032      	beq.n	810ddc6 <__sflush_r+0x9a>
 810dd60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810dd62:	89a3      	ldrh	r3, [r4, #12]
 810dd64:	075a      	lsls	r2, r3, #29
 810dd66:	d505      	bpl.n	810dd74 <__sflush_r+0x48>
 810dd68:	6863      	ldr	r3, [r4, #4]
 810dd6a:	1ac0      	subs	r0, r0, r3
 810dd6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810dd6e:	b10b      	cbz	r3, 810dd74 <__sflush_r+0x48>
 810dd70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810dd72:	1ac0      	subs	r0, r0, r3
 810dd74:	2300      	movs	r3, #0
 810dd76:	4602      	mov	r2, r0
 810dd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810dd7a:	6a21      	ldr	r1, [r4, #32]
 810dd7c:	4628      	mov	r0, r5
 810dd7e:	47b0      	blx	r6
 810dd80:	1c43      	adds	r3, r0, #1
 810dd82:	89a3      	ldrh	r3, [r4, #12]
 810dd84:	d106      	bne.n	810dd94 <__sflush_r+0x68>
 810dd86:	6829      	ldr	r1, [r5, #0]
 810dd88:	291d      	cmp	r1, #29
 810dd8a:	d82b      	bhi.n	810dde4 <__sflush_r+0xb8>
 810dd8c:	4a29      	ldr	r2, [pc, #164]	; (810de34 <__sflush_r+0x108>)
 810dd8e:	410a      	asrs	r2, r1
 810dd90:	07d6      	lsls	r6, r2, #31
 810dd92:	d427      	bmi.n	810dde4 <__sflush_r+0xb8>
 810dd94:	2200      	movs	r2, #0
 810dd96:	6062      	str	r2, [r4, #4]
 810dd98:	04d9      	lsls	r1, r3, #19
 810dd9a:	6922      	ldr	r2, [r4, #16]
 810dd9c:	6022      	str	r2, [r4, #0]
 810dd9e:	d504      	bpl.n	810ddaa <__sflush_r+0x7e>
 810dda0:	1c42      	adds	r2, r0, #1
 810dda2:	d101      	bne.n	810dda8 <__sflush_r+0x7c>
 810dda4:	682b      	ldr	r3, [r5, #0]
 810dda6:	b903      	cbnz	r3, 810ddaa <__sflush_r+0x7e>
 810dda8:	6560      	str	r0, [r4, #84]	; 0x54
 810ddaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810ddac:	602f      	str	r7, [r5, #0]
 810ddae:	2900      	cmp	r1, #0
 810ddb0:	d0c9      	beq.n	810dd46 <__sflush_r+0x1a>
 810ddb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810ddb6:	4299      	cmp	r1, r3
 810ddb8:	d002      	beq.n	810ddc0 <__sflush_r+0x94>
 810ddba:	4628      	mov	r0, r5
 810ddbc:	f7fe f982 	bl	810c0c4 <_free_r>
 810ddc0:	2000      	movs	r0, #0
 810ddc2:	6360      	str	r0, [r4, #52]	; 0x34
 810ddc4:	e7c0      	b.n	810dd48 <__sflush_r+0x1c>
 810ddc6:	2301      	movs	r3, #1
 810ddc8:	4628      	mov	r0, r5
 810ddca:	47b0      	blx	r6
 810ddcc:	1c41      	adds	r1, r0, #1
 810ddce:	d1c8      	bne.n	810dd62 <__sflush_r+0x36>
 810ddd0:	682b      	ldr	r3, [r5, #0]
 810ddd2:	2b00      	cmp	r3, #0
 810ddd4:	d0c5      	beq.n	810dd62 <__sflush_r+0x36>
 810ddd6:	2b1d      	cmp	r3, #29
 810ddd8:	d001      	beq.n	810ddde <__sflush_r+0xb2>
 810ddda:	2b16      	cmp	r3, #22
 810dddc:	d101      	bne.n	810dde2 <__sflush_r+0xb6>
 810ddde:	602f      	str	r7, [r5, #0]
 810dde0:	e7b1      	b.n	810dd46 <__sflush_r+0x1a>
 810dde2:	89a3      	ldrh	r3, [r4, #12]
 810dde4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810dde8:	81a3      	strh	r3, [r4, #12]
 810ddea:	e7ad      	b.n	810dd48 <__sflush_r+0x1c>
 810ddec:	690f      	ldr	r7, [r1, #16]
 810ddee:	2f00      	cmp	r7, #0
 810ddf0:	d0a9      	beq.n	810dd46 <__sflush_r+0x1a>
 810ddf2:	0793      	lsls	r3, r2, #30
 810ddf4:	680e      	ldr	r6, [r1, #0]
 810ddf6:	bf08      	it	eq
 810ddf8:	694b      	ldreq	r3, [r1, #20]
 810ddfa:	600f      	str	r7, [r1, #0]
 810ddfc:	bf18      	it	ne
 810ddfe:	2300      	movne	r3, #0
 810de00:	eba6 0807 	sub.w	r8, r6, r7
 810de04:	608b      	str	r3, [r1, #8]
 810de06:	f1b8 0f00 	cmp.w	r8, #0
 810de0a:	dd9c      	ble.n	810dd46 <__sflush_r+0x1a>
 810de0c:	6a21      	ldr	r1, [r4, #32]
 810de0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810de10:	4643      	mov	r3, r8
 810de12:	463a      	mov	r2, r7
 810de14:	4628      	mov	r0, r5
 810de16:	47b0      	blx	r6
 810de18:	2800      	cmp	r0, #0
 810de1a:	dc06      	bgt.n	810de2a <__sflush_r+0xfe>
 810de1c:	89a3      	ldrh	r3, [r4, #12]
 810de1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810de22:	81a3      	strh	r3, [r4, #12]
 810de24:	f04f 30ff 	mov.w	r0, #4294967295
 810de28:	e78e      	b.n	810dd48 <__sflush_r+0x1c>
 810de2a:	4407      	add	r7, r0
 810de2c:	eba8 0800 	sub.w	r8, r8, r0
 810de30:	e7e9      	b.n	810de06 <__sflush_r+0xda>
 810de32:	bf00      	nop
 810de34:	dfbffffe 	.word	0xdfbffffe

0810de38 <_fflush_r>:
 810de38:	b538      	push	{r3, r4, r5, lr}
 810de3a:	690b      	ldr	r3, [r1, #16]
 810de3c:	4605      	mov	r5, r0
 810de3e:	460c      	mov	r4, r1
 810de40:	b913      	cbnz	r3, 810de48 <_fflush_r+0x10>
 810de42:	2500      	movs	r5, #0
 810de44:	4628      	mov	r0, r5
 810de46:	bd38      	pop	{r3, r4, r5, pc}
 810de48:	b118      	cbz	r0, 810de52 <_fflush_r+0x1a>
 810de4a:	6a03      	ldr	r3, [r0, #32]
 810de4c:	b90b      	cbnz	r3, 810de52 <_fflush_r+0x1a>
 810de4e:	f7fd f87d 	bl	810af4c <__sinit>
 810de52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810de56:	2b00      	cmp	r3, #0
 810de58:	d0f3      	beq.n	810de42 <_fflush_r+0xa>
 810de5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810de5c:	07d0      	lsls	r0, r2, #31
 810de5e:	d404      	bmi.n	810de6a <_fflush_r+0x32>
 810de60:	0599      	lsls	r1, r3, #22
 810de62:	d402      	bmi.n	810de6a <_fflush_r+0x32>
 810de64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810de66:	f7fd fa9a 	bl	810b39e <__retarget_lock_acquire_recursive>
 810de6a:	4628      	mov	r0, r5
 810de6c:	4621      	mov	r1, r4
 810de6e:	f7ff ff5d 	bl	810dd2c <__sflush_r>
 810de72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810de74:	07da      	lsls	r2, r3, #31
 810de76:	4605      	mov	r5, r0
 810de78:	d4e4      	bmi.n	810de44 <_fflush_r+0xc>
 810de7a:	89a3      	ldrh	r3, [r4, #12]
 810de7c:	059b      	lsls	r3, r3, #22
 810de7e:	d4e1      	bmi.n	810de44 <_fflush_r+0xc>
 810de80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810de82:	f7fd fa8d 	bl	810b3a0 <__retarget_lock_release_recursive>
 810de86:	e7dd      	b.n	810de44 <_fflush_r+0xc>

0810de88 <__swhatbuf_r>:
 810de88:	b570      	push	{r4, r5, r6, lr}
 810de8a:	460c      	mov	r4, r1
 810de8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810de90:	2900      	cmp	r1, #0
 810de92:	b096      	sub	sp, #88	; 0x58
 810de94:	4615      	mov	r5, r2
 810de96:	461e      	mov	r6, r3
 810de98:	da0d      	bge.n	810deb6 <__swhatbuf_r+0x2e>
 810de9a:	89a3      	ldrh	r3, [r4, #12]
 810de9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 810dea0:	f04f 0100 	mov.w	r1, #0
 810dea4:	bf0c      	ite	eq
 810dea6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810deaa:	2340      	movne	r3, #64	; 0x40
 810deac:	2000      	movs	r0, #0
 810deae:	6031      	str	r1, [r6, #0]
 810deb0:	602b      	str	r3, [r5, #0]
 810deb2:	b016      	add	sp, #88	; 0x58
 810deb4:	bd70      	pop	{r4, r5, r6, pc}
 810deb6:	466a      	mov	r2, sp
 810deb8:	f000 f874 	bl	810dfa4 <_fstat_r>
 810debc:	2800      	cmp	r0, #0
 810debe:	dbec      	blt.n	810de9a <__swhatbuf_r+0x12>
 810dec0:	9901      	ldr	r1, [sp, #4]
 810dec2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810dec6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810deca:	4259      	negs	r1, r3
 810decc:	4159      	adcs	r1, r3
 810dece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810ded2:	e7eb      	b.n	810deac <__swhatbuf_r+0x24>

0810ded4 <__smakebuf_r>:
 810ded4:	898b      	ldrh	r3, [r1, #12]
 810ded6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810ded8:	079d      	lsls	r5, r3, #30
 810deda:	4606      	mov	r6, r0
 810dedc:	460c      	mov	r4, r1
 810dede:	d507      	bpl.n	810def0 <__smakebuf_r+0x1c>
 810dee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810dee4:	6023      	str	r3, [r4, #0]
 810dee6:	6123      	str	r3, [r4, #16]
 810dee8:	2301      	movs	r3, #1
 810deea:	6163      	str	r3, [r4, #20]
 810deec:	b002      	add	sp, #8
 810deee:	bd70      	pop	{r4, r5, r6, pc}
 810def0:	ab01      	add	r3, sp, #4
 810def2:	466a      	mov	r2, sp
 810def4:	f7ff ffc8 	bl	810de88 <__swhatbuf_r>
 810def8:	9900      	ldr	r1, [sp, #0]
 810defa:	4605      	mov	r5, r0
 810defc:	4630      	mov	r0, r6
 810defe:	f7fc f867 	bl	8109fd0 <_malloc_r>
 810df02:	b948      	cbnz	r0, 810df18 <__smakebuf_r+0x44>
 810df04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810df08:	059a      	lsls	r2, r3, #22
 810df0a:	d4ef      	bmi.n	810deec <__smakebuf_r+0x18>
 810df0c:	f023 0303 	bic.w	r3, r3, #3
 810df10:	f043 0302 	orr.w	r3, r3, #2
 810df14:	81a3      	strh	r3, [r4, #12]
 810df16:	e7e3      	b.n	810dee0 <__smakebuf_r+0xc>
 810df18:	89a3      	ldrh	r3, [r4, #12]
 810df1a:	6020      	str	r0, [r4, #0]
 810df1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810df20:	81a3      	strh	r3, [r4, #12]
 810df22:	9b00      	ldr	r3, [sp, #0]
 810df24:	6163      	str	r3, [r4, #20]
 810df26:	9b01      	ldr	r3, [sp, #4]
 810df28:	6120      	str	r0, [r4, #16]
 810df2a:	b15b      	cbz	r3, 810df44 <__smakebuf_r+0x70>
 810df2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810df30:	4630      	mov	r0, r6
 810df32:	f000 f849 	bl	810dfc8 <_isatty_r>
 810df36:	b128      	cbz	r0, 810df44 <__smakebuf_r+0x70>
 810df38:	89a3      	ldrh	r3, [r4, #12]
 810df3a:	f023 0303 	bic.w	r3, r3, #3
 810df3e:	f043 0301 	orr.w	r3, r3, #1
 810df42:	81a3      	strh	r3, [r4, #12]
 810df44:	89a3      	ldrh	r3, [r4, #12]
 810df46:	431d      	orrs	r5, r3
 810df48:	81a5      	strh	r5, [r4, #12]
 810df4a:	e7cf      	b.n	810deec <__smakebuf_r+0x18>

0810df4c <memmove>:
 810df4c:	4288      	cmp	r0, r1
 810df4e:	b510      	push	{r4, lr}
 810df50:	eb01 0402 	add.w	r4, r1, r2
 810df54:	d902      	bls.n	810df5c <memmove+0x10>
 810df56:	4284      	cmp	r4, r0
 810df58:	4623      	mov	r3, r4
 810df5a:	d807      	bhi.n	810df6c <memmove+0x20>
 810df5c:	1e43      	subs	r3, r0, #1
 810df5e:	42a1      	cmp	r1, r4
 810df60:	d008      	beq.n	810df74 <memmove+0x28>
 810df62:	f811 2b01 	ldrb.w	r2, [r1], #1
 810df66:	f803 2f01 	strb.w	r2, [r3, #1]!
 810df6a:	e7f8      	b.n	810df5e <memmove+0x12>
 810df6c:	4402      	add	r2, r0
 810df6e:	4601      	mov	r1, r0
 810df70:	428a      	cmp	r2, r1
 810df72:	d100      	bne.n	810df76 <memmove+0x2a>
 810df74:	bd10      	pop	{r4, pc}
 810df76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810df7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810df7e:	e7f7      	b.n	810df70 <memmove+0x24>

0810df80 <strncmp>:
 810df80:	b510      	push	{r4, lr}
 810df82:	b16a      	cbz	r2, 810dfa0 <strncmp+0x20>
 810df84:	3901      	subs	r1, #1
 810df86:	1884      	adds	r4, r0, r2
 810df88:	f810 2b01 	ldrb.w	r2, [r0], #1
 810df8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810df90:	429a      	cmp	r2, r3
 810df92:	d103      	bne.n	810df9c <strncmp+0x1c>
 810df94:	42a0      	cmp	r0, r4
 810df96:	d001      	beq.n	810df9c <strncmp+0x1c>
 810df98:	2a00      	cmp	r2, #0
 810df9a:	d1f5      	bne.n	810df88 <strncmp+0x8>
 810df9c:	1ad0      	subs	r0, r2, r3
 810df9e:	bd10      	pop	{r4, pc}
 810dfa0:	4610      	mov	r0, r2
 810dfa2:	e7fc      	b.n	810df9e <strncmp+0x1e>

0810dfa4 <_fstat_r>:
 810dfa4:	b538      	push	{r3, r4, r5, lr}
 810dfa6:	4d07      	ldr	r5, [pc, #28]	; (810dfc4 <_fstat_r+0x20>)
 810dfa8:	2300      	movs	r3, #0
 810dfaa:	4604      	mov	r4, r0
 810dfac:	4608      	mov	r0, r1
 810dfae:	4611      	mov	r1, r2
 810dfb0:	602b      	str	r3, [r5, #0]
 810dfb2:	f7f4 f894 	bl	81020de <_fstat>
 810dfb6:	1c43      	adds	r3, r0, #1
 810dfb8:	d102      	bne.n	810dfc0 <_fstat_r+0x1c>
 810dfba:	682b      	ldr	r3, [r5, #0]
 810dfbc:	b103      	cbz	r3, 810dfc0 <_fstat_r+0x1c>
 810dfbe:	6023      	str	r3, [r4, #0]
 810dfc0:	bd38      	pop	{r3, r4, r5, pc}
 810dfc2:	bf00      	nop
 810dfc4:	1001ae04 	.word	0x1001ae04

0810dfc8 <_isatty_r>:
 810dfc8:	b538      	push	{r3, r4, r5, lr}
 810dfca:	4d06      	ldr	r5, [pc, #24]	; (810dfe4 <_isatty_r+0x1c>)
 810dfcc:	2300      	movs	r3, #0
 810dfce:	4604      	mov	r4, r0
 810dfd0:	4608      	mov	r0, r1
 810dfd2:	602b      	str	r3, [r5, #0]
 810dfd4:	f7f4 f888 	bl	81020e8 <_isatty>
 810dfd8:	1c43      	adds	r3, r0, #1
 810dfda:	d102      	bne.n	810dfe2 <_isatty_r+0x1a>
 810dfdc:	682b      	ldr	r3, [r5, #0]
 810dfde:	b103      	cbz	r3, 810dfe2 <_isatty_r+0x1a>
 810dfe0:	6023      	str	r3, [r4, #0]
 810dfe2:	bd38      	pop	{r3, r4, r5, pc}
 810dfe4:	1001ae04 	.word	0x1001ae04

0810dfe8 <nan>:
 810dfe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810dff0 <nan+0x8>
 810dfec:	4770      	bx	lr
 810dfee:	bf00      	nop
 810dff0:	00000000 	.word	0x00000000
 810dff4:	7ff80000 	.word	0x7ff80000

0810dff8 <__assert_func>:
 810dff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810dffa:	4614      	mov	r4, r2
 810dffc:	461a      	mov	r2, r3
 810dffe:	4b09      	ldr	r3, [pc, #36]	; (810e024 <__assert_func+0x2c>)
 810e000:	681b      	ldr	r3, [r3, #0]
 810e002:	4605      	mov	r5, r0
 810e004:	68d8      	ldr	r0, [r3, #12]
 810e006:	b14c      	cbz	r4, 810e01c <__assert_func+0x24>
 810e008:	4b07      	ldr	r3, [pc, #28]	; (810e028 <__assert_func+0x30>)
 810e00a:	9100      	str	r1, [sp, #0]
 810e00c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810e010:	4906      	ldr	r1, [pc, #24]	; (810e02c <__assert_func+0x34>)
 810e012:	462b      	mov	r3, r5
 810e014:	f000 fb9a 	bl	810e74c <fiprintf>
 810e018:	f000 fbaa 	bl	810e770 <abort>
 810e01c:	4b04      	ldr	r3, [pc, #16]	; (810e030 <__assert_func+0x38>)
 810e01e:	461c      	mov	r4, r3
 810e020:	e7f3      	b.n	810e00a <__assert_func+0x12>
 810e022:	bf00      	nop
 810e024:	100009dc 	.word	0x100009dc
 810e028:	081e6b02 	.word	0x081e6b02
 810e02c:	081e6b0f 	.word	0x081e6b0f
 810e030:	081d324f 	.word	0x081d324f

0810e034 <_calloc_r>:
 810e034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e036:	fba1 2402 	umull	r2, r4, r1, r2
 810e03a:	b94c      	cbnz	r4, 810e050 <_calloc_r+0x1c>
 810e03c:	4611      	mov	r1, r2
 810e03e:	9201      	str	r2, [sp, #4]
 810e040:	f7fb ffc6 	bl	8109fd0 <_malloc_r>
 810e044:	9a01      	ldr	r2, [sp, #4]
 810e046:	4605      	mov	r5, r0
 810e048:	b930      	cbnz	r0, 810e058 <_calloc_r+0x24>
 810e04a:	4628      	mov	r0, r5
 810e04c:	b003      	add	sp, #12
 810e04e:	bd30      	pop	{r4, r5, pc}
 810e050:	220c      	movs	r2, #12
 810e052:	6002      	str	r2, [r0, #0]
 810e054:	2500      	movs	r5, #0
 810e056:	e7f8      	b.n	810e04a <_calloc_r+0x16>
 810e058:	4621      	mov	r1, r4
 810e05a:	f7fd f913 	bl	810b284 <memset>
 810e05e:	e7f4      	b.n	810e04a <_calloc_r+0x16>

0810e060 <rshift>:
 810e060:	6903      	ldr	r3, [r0, #16]
 810e062:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810e066:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e06a:	ea4f 1261 	mov.w	r2, r1, asr #5
 810e06e:	f100 0414 	add.w	r4, r0, #20
 810e072:	dd45      	ble.n	810e100 <rshift+0xa0>
 810e074:	f011 011f 	ands.w	r1, r1, #31
 810e078:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810e07c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810e080:	d10c      	bne.n	810e09c <rshift+0x3c>
 810e082:	f100 0710 	add.w	r7, r0, #16
 810e086:	4629      	mov	r1, r5
 810e088:	42b1      	cmp	r1, r6
 810e08a:	d334      	bcc.n	810e0f6 <rshift+0x96>
 810e08c:	1a9b      	subs	r3, r3, r2
 810e08e:	009b      	lsls	r3, r3, #2
 810e090:	1eea      	subs	r2, r5, #3
 810e092:	4296      	cmp	r6, r2
 810e094:	bf38      	it	cc
 810e096:	2300      	movcc	r3, #0
 810e098:	4423      	add	r3, r4
 810e09a:	e015      	b.n	810e0c8 <rshift+0x68>
 810e09c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810e0a0:	f1c1 0820 	rsb	r8, r1, #32
 810e0a4:	40cf      	lsrs	r7, r1
 810e0a6:	f105 0e04 	add.w	lr, r5, #4
 810e0aa:	46a1      	mov	r9, r4
 810e0ac:	4576      	cmp	r6, lr
 810e0ae:	46f4      	mov	ip, lr
 810e0b0:	d815      	bhi.n	810e0de <rshift+0x7e>
 810e0b2:	1a9a      	subs	r2, r3, r2
 810e0b4:	0092      	lsls	r2, r2, #2
 810e0b6:	3a04      	subs	r2, #4
 810e0b8:	3501      	adds	r5, #1
 810e0ba:	42ae      	cmp	r6, r5
 810e0bc:	bf38      	it	cc
 810e0be:	2200      	movcc	r2, #0
 810e0c0:	18a3      	adds	r3, r4, r2
 810e0c2:	50a7      	str	r7, [r4, r2]
 810e0c4:	b107      	cbz	r7, 810e0c8 <rshift+0x68>
 810e0c6:	3304      	adds	r3, #4
 810e0c8:	1b1a      	subs	r2, r3, r4
 810e0ca:	42a3      	cmp	r3, r4
 810e0cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810e0d0:	bf08      	it	eq
 810e0d2:	2300      	moveq	r3, #0
 810e0d4:	6102      	str	r2, [r0, #16]
 810e0d6:	bf08      	it	eq
 810e0d8:	6143      	streq	r3, [r0, #20]
 810e0da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e0de:	f8dc c000 	ldr.w	ip, [ip]
 810e0e2:	fa0c fc08 	lsl.w	ip, ip, r8
 810e0e6:	ea4c 0707 	orr.w	r7, ip, r7
 810e0ea:	f849 7b04 	str.w	r7, [r9], #4
 810e0ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 810e0f2:	40cf      	lsrs	r7, r1
 810e0f4:	e7da      	b.n	810e0ac <rshift+0x4c>
 810e0f6:	f851 cb04 	ldr.w	ip, [r1], #4
 810e0fa:	f847 cf04 	str.w	ip, [r7, #4]!
 810e0fe:	e7c3      	b.n	810e088 <rshift+0x28>
 810e100:	4623      	mov	r3, r4
 810e102:	e7e1      	b.n	810e0c8 <rshift+0x68>

0810e104 <__hexdig_fun>:
 810e104:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810e108:	2b09      	cmp	r3, #9
 810e10a:	d802      	bhi.n	810e112 <__hexdig_fun+0xe>
 810e10c:	3820      	subs	r0, #32
 810e10e:	b2c0      	uxtb	r0, r0
 810e110:	4770      	bx	lr
 810e112:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810e116:	2b05      	cmp	r3, #5
 810e118:	d801      	bhi.n	810e11e <__hexdig_fun+0x1a>
 810e11a:	3847      	subs	r0, #71	; 0x47
 810e11c:	e7f7      	b.n	810e10e <__hexdig_fun+0xa>
 810e11e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810e122:	2b05      	cmp	r3, #5
 810e124:	d801      	bhi.n	810e12a <__hexdig_fun+0x26>
 810e126:	3827      	subs	r0, #39	; 0x27
 810e128:	e7f1      	b.n	810e10e <__hexdig_fun+0xa>
 810e12a:	2000      	movs	r0, #0
 810e12c:	4770      	bx	lr
	...

0810e130 <__gethex>:
 810e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e134:	4617      	mov	r7, r2
 810e136:	680a      	ldr	r2, [r1, #0]
 810e138:	b085      	sub	sp, #20
 810e13a:	f102 0b02 	add.w	fp, r2, #2
 810e13e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810e142:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810e146:	4681      	mov	r9, r0
 810e148:	468a      	mov	sl, r1
 810e14a:	9302      	str	r3, [sp, #8]
 810e14c:	32fe      	adds	r2, #254	; 0xfe
 810e14e:	eb02 030b 	add.w	r3, r2, fp
 810e152:	46d8      	mov	r8, fp
 810e154:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810e158:	9301      	str	r3, [sp, #4]
 810e15a:	2830      	cmp	r0, #48	; 0x30
 810e15c:	d0f7      	beq.n	810e14e <__gethex+0x1e>
 810e15e:	f7ff ffd1 	bl	810e104 <__hexdig_fun>
 810e162:	4604      	mov	r4, r0
 810e164:	2800      	cmp	r0, #0
 810e166:	d138      	bne.n	810e1da <__gethex+0xaa>
 810e168:	49a7      	ldr	r1, [pc, #668]	; (810e408 <__gethex+0x2d8>)
 810e16a:	2201      	movs	r2, #1
 810e16c:	4640      	mov	r0, r8
 810e16e:	f7ff ff07 	bl	810df80 <strncmp>
 810e172:	4606      	mov	r6, r0
 810e174:	2800      	cmp	r0, #0
 810e176:	d169      	bne.n	810e24c <__gethex+0x11c>
 810e178:	f898 0001 	ldrb.w	r0, [r8, #1]
 810e17c:	465d      	mov	r5, fp
 810e17e:	f7ff ffc1 	bl	810e104 <__hexdig_fun>
 810e182:	2800      	cmp	r0, #0
 810e184:	d064      	beq.n	810e250 <__gethex+0x120>
 810e186:	465a      	mov	r2, fp
 810e188:	7810      	ldrb	r0, [r2, #0]
 810e18a:	2830      	cmp	r0, #48	; 0x30
 810e18c:	4690      	mov	r8, r2
 810e18e:	f102 0201 	add.w	r2, r2, #1
 810e192:	d0f9      	beq.n	810e188 <__gethex+0x58>
 810e194:	f7ff ffb6 	bl	810e104 <__hexdig_fun>
 810e198:	2301      	movs	r3, #1
 810e19a:	fab0 f480 	clz	r4, r0
 810e19e:	0964      	lsrs	r4, r4, #5
 810e1a0:	465e      	mov	r6, fp
 810e1a2:	9301      	str	r3, [sp, #4]
 810e1a4:	4642      	mov	r2, r8
 810e1a6:	4615      	mov	r5, r2
 810e1a8:	3201      	adds	r2, #1
 810e1aa:	7828      	ldrb	r0, [r5, #0]
 810e1ac:	f7ff ffaa 	bl	810e104 <__hexdig_fun>
 810e1b0:	2800      	cmp	r0, #0
 810e1b2:	d1f8      	bne.n	810e1a6 <__gethex+0x76>
 810e1b4:	4994      	ldr	r1, [pc, #592]	; (810e408 <__gethex+0x2d8>)
 810e1b6:	2201      	movs	r2, #1
 810e1b8:	4628      	mov	r0, r5
 810e1ba:	f7ff fee1 	bl	810df80 <strncmp>
 810e1be:	b978      	cbnz	r0, 810e1e0 <__gethex+0xb0>
 810e1c0:	b946      	cbnz	r6, 810e1d4 <__gethex+0xa4>
 810e1c2:	1c6e      	adds	r6, r5, #1
 810e1c4:	4632      	mov	r2, r6
 810e1c6:	4615      	mov	r5, r2
 810e1c8:	3201      	adds	r2, #1
 810e1ca:	7828      	ldrb	r0, [r5, #0]
 810e1cc:	f7ff ff9a 	bl	810e104 <__hexdig_fun>
 810e1d0:	2800      	cmp	r0, #0
 810e1d2:	d1f8      	bne.n	810e1c6 <__gethex+0x96>
 810e1d4:	1b73      	subs	r3, r6, r5
 810e1d6:	009e      	lsls	r6, r3, #2
 810e1d8:	e004      	b.n	810e1e4 <__gethex+0xb4>
 810e1da:	2400      	movs	r4, #0
 810e1dc:	4626      	mov	r6, r4
 810e1de:	e7e1      	b.n	810e1a4 <__gethex+0x74>
 810e1e0:	2e00      	cmp	r6, #0
 810e1e2:	d1f7      	bne.n	810e1d4 <__gethex+0xa4>
 810e1e4:	782b      	ldrb	r3, [r5, #0]
 810e1e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810e1ea:	2b50      	cmp	r3, #80	; 0x50
 810e1ec:	d13d      	bne.n	810e26a <__gethex+0x13a>
 810e1ee:	786b      	ldrb	r3, [r5, #1]
 810e1f0:	2b2b      	cmp	r3, #43	; 0x2b
 810e1f2:	d02f      	beq.n	810e254 <__gethex+0x124>
 810e1f4:	2b2d      	cmp	r3, #45	; 0x2d
 810e1f6:	d031      	beq.n	810e25c <__gethex+0x12c>
 810e1f8:	1c69      	adds	r1, r5, #1
 810e1fa:	f04f 0b00 	mov.w	fp, #0
 810e1fe:	7808      	ldrb	r0, [r1, #0]
 810e200:	f7ff ff80 	bl	810e104 <__hexdig_fun>
 810e204:	1e42      	subs	r2, r0, #1
 810e206:	b2d2      	uxtb	r2, r2
 810e208:	2a18      	cmp	r2, #24
 810e20a:	d82e      	bhi.n	810e26a <__gethex+0x13a>
 810e20c:	f1a0 0210 	sub.w	r2, r0, #16
 810e210:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810e214:	f7ff ff76 	bl	810e104 <__hexdig_fun>
 810e218:	f100 3cff 	add.w	ip, r0, #4294967295
 810e21c:	fa5f fc8c 	uxtb.w	ip, ip
 810e220:	f1bc 0f18 	cmp.w	ip, #24
 810e224:	d91d      	bls.n	810e262 <__gethex+0x132>
 810e226:	f1bb 0f00 	cmp.w	fp, #0
 810e22a:	d000      	beq.n	810e22e <__gethex+0xfe>
 810e22c:	4252      	negs	r2, r2
 810e22e:	4416      	add	r6, r2
 810e230:	f8ca 1000 	str.w	r1, [sl]
 810e234:	b1dc      	cbz	r4, 810e26e <__gethex+0x13e>
 810e236:	9b01      	ldr	r3, [sp, #4]
 810e238:	2b00      	cmp	r3, #0
 810e23a:	bf14      	ite	ne
 810e23c:	f04f 0800 	movne.w	r8, #0
 810e240:	f04f 0806 	moveq.w	r8, #6
 810e244:	4640      	mov	r0, r8
 810e246:	b005      	add	sp, #20
 810e248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e24c:	4645      	mov	r5, r8
 810e24e:	4626      	mov	r6, r4
 810e250:	2401      	movs	r4, #1
 810e252:	e7c7      	b.n	810e1e4 <__gethex+0xb4>
 810e254:	f04f 0b00 	mov.w	fp, #0
 810e258:	1ca9      	adds	r1, r5, #2
 810e25a:	e7d0      	b.n	810e1fe <__gethex+0xce>
 810e25c:	f04f 0b01 	mov.w	fp, #1
 810e260:	e7fa      	b.n	810e258 <__gethex+0x128>
 810e262:	230a      	movs	r3, #10
 810e264:	fb03 0002 	mla	r0, r3, r2, r0
 810e268:	e7d0      	b.n	810e20c <__gethex+0xdc>
 810e26a:	4629      	mov	r1, r5
 810e26c:	e7e0      	b.n	810e230 <__gethex+0x100>
 810e26e:	eba5 0308 	sub.w	r3, r5, r8
 810e272:	3b01      	subs	r3, #1
 810e274:	4621      	mov	r1, r4
 810e276:	2b07      	cmp	r3, #7
 810e278:	dc0a      	bgt.n	810e290 <__gethex+0x160>
 810e27a:	4648      	mov	r0, r9
 810e27c:	f7fd ff6e 	bl	810c15c <_Balloc>
 810e280:	4604      	mov	r4, r0
 810e282:	b940      	cbnz	r0, 810e296 <__gethex+0x166>
 810e284:	4b61      	ldr	r3, [pc, #388]	; (810e40c <__gethex+0x2dc>)
 810e286:	4602      	mov	r2, r0
 810e288:	21e4      	movs	r1, #228	; 0xe4
 810e28a:	4861      	ldr	r0, [pc, #388]	; (810e410 <__gethex+0x2e0>)
 810e28c:	f7ff feb4 	bl	810dff8 <__assert_func>
 810e290:	3101      	adds	r1, #1
 810e292:	105b      	asrs	r3, r3, #1
 810e294:	e7ef      	b.n	810e276 <__gethex+0x146>
 810e296:	f100 0a14 	add.w	sl, r0, #20
 810e29a:	2300      	movs	r3, #0
 810e29c:	495a      	ldr	r1, [pc, #360]	; (810e408 <__gethex+0x2d8>)
 810e29e:	f8cd a004 	str.w	sl, [sp, #4]
 810e2a2:	469b      	mov	fp, r3
 810e2a4:	45a8      	cmp	r8, r5
 810e2a6:	d342      	bcc.n	810e32e <__gethex+0x1fe>
 810e2a8:	9801      	ldr	r0, [sp, #4]
 810e2aa:	f840 bb04 	str.w	fp, [r0], #4
 810e2ae:	eba0 000a 	sub.w	r0, r0, sl
 810e2b2:	1080      	asrs	r0, r0, #2
 810e2b4:	6120      	str	r0, [r4, #16]
 810e2b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810e2ba:	4658      	mov	r0, fp
 810e2bc:	f7fe f840 	bl	810c340 <__hi0bits>
 810e2c0:	683d      	ldr	r5, [r7, #0]
 810e2c2:	eba8 0000 	sub.w	r0, r8, r0
 810e2c6:	42a8      	cmp	r0, r5
 810e2c8:	dd59      	ble.n	810e37e <__gethex+0x24e>
 810e2ca:	eba0 0805 	sub.w	r8, r0, r5
 810e2ce:	4641      	mov	r1, r8
 810e2d0:	4620      	mov	r0, r4
 810e2d2:	f7fe fbcf 	bl	810ca74 <__any_on>
 810e2d6:	4683      	mov	fp, r0
 810e2d8:	b1b8      	cbz	r0, 810e30a <__gethex+0x1da>
 810e2da:	f108 33ff 	add.w	r3, r8, #4294967295
 810e2de:	1159      	asrs	r1, r3, #5
 810e2e0:	f003 021f 	and.w	r2, r3, #31
 810e2e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810e2e8:	f04f 0b01 	mov.w	fp, #1
 810e2ec:	fa0b f202 	lsl.w	r2, fp, r2
 810e2f0:	420a      	tst	r2, r1
 810e2f2:	d00a      	beq.n	810e30a <__gethex+0x1da>
 810e2f4:	455b      	cmp	r3, fp
 810e2f6:	dd06      	ble.n	810e306 <__gethex+0x1d6>
 810e2f8:	f1a8 0102 	sub.w	r1, r8, #2
 810e2fc:	4620      	mov	r0, r4
 810e2fe:	f7fe fbb9 	bl	810ca74 <__any_on>
 810e302:	2800      	cmp	r0, #0
 810e304:	d138      	bne.n	810e378 <__gethex+0x248>
 810e306:	f04f 0b02 	mov.w	fp, #2
 810e30a:	4641      	mov	r1, r8
 810e30c:	4620      	mov	r0, r4
 810e30e:	f7ff fea7 	bl	810e060 <rshift>
 810e312:	4446      	add	r6, r8
 810e314:	68bb      	ldr	r3, [r7, #8]
 810e316:	42b3      	cmp	r3, r6
 810e318:	da41      	bge.n	810e39e <__gethex+0x26e>
 810e31a:	4621      	mov	r1, r4
 810e31c:	4648      	mov	r0, r9
 810e31e:	f7fd ff5d 	bl	810c1dc <_Bfree>
 810e322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810e324:	2300      	movs	r3, #0
 810e326:	6013      	str	r3, [r2, #0]
 810e328:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810e32c:	e78a      	b.n	810e244 <__gethex+0x114>
 810e32e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810e332:	2a2e      	cmp	r2, #46	; 0x2e
 810e334:	d014      	beq.n	810e360 <__gethex+0x230>
 810e336:	2b20      	cmp	r3, #32
 810e338:	d106      	bne.n	810e348 <__gethex+0x218>
 810e33a:	9b01      	ldr	r3, [sp, #4]
 810e33c:	f843 bb04 	str.w	fp, [r3], #4
 810e340:	f04f 0b00 	mov.w	fp, #0
 810e344:	9301      	str	r3, [sp, #4]
 810e346:	465b      	mov	r3, fp
 810e348:	7828      	ldrb	r0, [r5, #0]
 810e34a:	9303      	str	r3, [sp, #12]
 810e34c:	f7ff feda 	bl	810e104 <__hexdig_fun>
 810e350:	9b03      	ldr	r3, [sp, #12]
 810e352:	f000 000f 	and.w	r0, r0, #15
 810e356:	4098      	lsls	r0, r3
 810e358:	ea4b 0b00 	orr.w	fp, fp, r0
 810e35c:	3304      	adds	r3, #4
 810e35e:	e7a1      	b.n	810e2a4 <__gethex+0x174>
 810e360:	45a8      	cmp	r8, r5
 810e362:	d8e8      	bhi.n	810e336 <__gethex+0x206>
 810e364:	2201      	movs	r2, #1
 810e366:	4628      	mov	r0, r5
 810e368:	9303      	str	r3, [sp, #12]
 810e36a:	f7ff fe09 	bl	810df80 <strncmp>
 810e36e:	4926      	ldr	r1, [pc, #152]	; (810e408 <__gethex+0x2d8>)
 810e370:	9b03      	ldr	r3, [sp, #12]
 810e372:	2800      	cmp	r0, #0
 810e374:	d1df      	bne.n	810e336 <__gethex+0x206>
 810e376:	e795      	b.n	810e2a4 <__gethex+0x174>
 810e378:	f04f 0b03 	mov.w	fp, #3
 810e37c:	e7c5      	b.n	810e30a <__gethex+0x1da>
 810e37e:	da0b      	bge.n	810e398 <__gethex+0x268>
 810e380:	eba5 0800 	sub.w	r8, r5, r0
 810e384:	4621      	mov	r1, r4
 810e386:	4642      	mov	r2, r8
 810e388:	4648      	mov	r0, r9
 810e38a:	f7fe f941 	bl	810c610 <__lshift>
 810e38e:	eba6 0608 	sub.w	r6, r6, r8
 810e392:	4604      	mov	r4, r0
 810e394:	f100 0a14 	add.w	sl, r0, #20
 810e398:	f04f 0b00 	mov.w	fp, #0
 810e39c:	e7ba      	b.n	810e314 <__gethex+0x1e4>
 810e39e:	687b      	ldr	r3, [r7, #4]
 810e3a0:	42b3      	cmp	r3, r6
 810e3a2:	dd73      	ble.n	810e48c <__gethex+0x35c>
 810e3a4:	1b9e      	subs	r6, r3, r6
 810e3a6:	42b5      	cmp	r5, r6
 810e3a8:	dc34      	bgt.n	810e414 <__gethex+0x2e4>
 810e3aa:	68fb      	ldr	r3, [r7, #12]
 810e3ac:	2b02      	cmp	r3, #2
 810e3ae:	d023      	beq.n	810e3f8 <__gethex+0x2c8>
 810e3b0:	2b03      	cmp	r3, #3
 810e3b2:	d025      	beq.n	810e400 <__gethex+0x2d0>
 810e3b4:	2b01      	cmp	r3, #1
 810e3b6:	d115      	bne.n	810e3e4 <__gethex+0x2b4>
 810e3b8:	42b5      	cmp	r5, r6
 810e3ba:	d113      	bne.n	810e3e4 <__gethex+0x2b4>
 810e3bc:	2d01      	cmp	r5, #1
 810e3be:	d10b      	bne.n	810e3d8 <__gethex+0x2a8>
 810e3c0:	9a02      	ldr	r2, [sp, #8]
 810e3c2:	687b      	ldr	r3, [r7, #4]
 810e3c4:	6013      	str	r3, [r2, #0]
 810e3c6:	2301      	movs	r3, #1
 810e3c8:	6123      	str	r3, [r4, #16]
 810e3ca:	f8ca 3000 	str.w	r3, [sl]
 810e3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810e3d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 810e3d4:	601c      	str	r4, [r3, #0]
 810e3d6:	e735      	b.n	810e244 <__gethex+0x114>
 810e3d8:	1e69      	subs	r1, r5, #1
 810e3da:	4620      	mov	r0, r4
 810e3dc:	f7fe fb4a 	bl	810ca74 <__any_on>
 810e3e0:	2800      	cmp	r0, #0
 810e3e2:	d1ed      	bne.n	810e3c0 <__gethex+0x290>
 810e3e4:	4621      	mov	r1, r4
 810e3e6:	4648      	mov	r0, r9
 810e3e8:	f7fd fef8 	bl	810c1dc <_Bfree>
 810e3ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810e3ee:	2300      	movs	r3, #0
 810e3f0:	6013      	str	r3, [r2, #0]
 810e3f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 810e3f6:	e725      	b.n	810e244 <__gethex+0x114>
 810e3f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810e3fa:	2b00      	cmp	r3, #0
 810e3fc:	d1f2      	bne.n	810e3e4 <__gethex+0x2b4>
 810e3fe:	e7df      	b.n	810e3c0 <__gethex+0x290>
 810e400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810e402:	2b00      	cmp	r3, #0
 810e404:	d1dc      	bne.n	810e3c0 <__gethex+0x290>
 810e406:	e7ed      	b.n	810e3e4 <__gethex+0x2b4>
 810e408:	081e6994 	.word	0x081e6994
 810e40c:	081e682d 	.word	0x081e682d
 810e410:	081e6b3e 	.word	0x081e6b3e
 810e414:	f106 38ff 	add.w	r8, r6, #4294967295
 810e418:	f1bb 0f00 	cmp.w	fp, #0
 810e41c:	d133      	bne.n	810e486 <__gethex+0x356>
 810e41e:	f1b8 0f00 	cmp.w	r8, #0
 810e422:	d004      	beq.n	810e42e <__gethex+0x2fe>
 810e424:	4641      	mov	r1, r8
 810e426:	4620      	mov	r0, r4
 810e428:	f7fe fb24 	bl	810ca74 <__any_on>
 810e42c:	4683      	mov	fp, r0
 810e42e:	ea4f 1268 	mov.w	r2, r8, asr #5
 810e432:	2301      	movs	r3, #1
 810e434:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810e438:	f008 081f 	and.w	r8, r8, #31
 810e43c:	fa03 f308 	lsl.w	r3, r3, r8
 810e440:	4213      	tst	r3, r2
 810e442:	4631      	mov	r1, r6
 810e444:	4620      	mov	r0, r4
 810e446:	bf18      	it	ne
 810e448:	f04b 0b02 	orrne.w	fp, fp, #2
 810e44c:	1bad      	subs	r5, r5, r6
 810e44e:	f7ff fe07 	bl	810e060 <rshift>
 810e452:	687e      	ldr	r6, [r7, #4]
 810e454:	f04f 0802 	mov.w	r8, #2
 810e458:	f1bb 0f00 	cmp.w	fp, #0
 810e45c:	d04a      	beq.n	810e4f4 <__gethex+0x3c4>
 810e45e:	68fb      	ldr	r3, [r7, #12]
 810e460:	2b02      	cmp	r3, #2
 810e462:	d016      	beq.n	810e492 <__gethex+0x362>
 810e464:	2b03      	cmp	r3, #3
 810e466:	d018      	beq.n	810e49a <__gethex+0x36a>
 810e468:	2b01      	cmp	r3, #1
 810e46a:	d109      	bne.n	810e480 <__gethex+0x350>
 810e46c:	f01b 0f02 	tst.w	fp, #2
 810e470:	d006      	beq.n	810e480 <__gethex+0x350>
 810e472:	f8da 3000 	ldr.w	r3, [sl]
 810e476:	ea4b 0b03 	orr.w	fp, fp, r3
 810e47a:	f01b 0f01 	tst.w	fp, #1
 810e47e:	d10f      	bne.n	810e4a0 <__gethex+0x370>
 810e480:	f048 0810 	orr.w	r8, r8, #16
 810e484:	e036      	b.n	810e4f4 <__gethex+0x3c4>
 810e486:	f04f 0b01 	mov.w	fp, #1
 810e48a:	e7d0      	b.n	810e42e <__gethex+0x2fe>
 810e48c:	f04f 0801 	mov.w	r8, #1
 810e490:	e7e2      	b.n	810e458 <__gethex+0x328>
 810e492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810e494:	f1c3 0301 	rsb	r3, r3, #1
 810e498:	930f      	str	r3, [sp, #60]	; 0x3c
 810e49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810e49c:	2b00      	cmp	r3, #0
 810e49e:	d0ef      	beq.n	810e480 <__gethex+0x350>
 810e4a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810e4a4:	f104 0214 	add.w	r2, r4, #20
 810e4a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810e4ac:	9301      	str	r3, [sp, #4]
 810e4ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810e4b2:	2300      	movs	r3, #0
 810e4b4:	4694      	mov	ip, r2
 810e4b6:	f852 1b04 	ldr.w	r1, [r2], #4
 810e4ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 810e4be:	d01e      	beq.n	810e4fe <__gethex+0x3ce>
 810e4c0:	3101      	adds	r1, #1
 810e4c2:	f8cc 1000 	str.w	r1, [ip]
 810e4c6:	f1b8 0f02 	cmp.w	r8, #2
 810e4ca:	f104 0214 	add.w	r2, r4, #20
 810e4ce:	d13d      	bne.n	810e54c <__gethex+0x41c>
 810e4d0:	683b      	ldr	r3, [r7, #0]
 810e4d2:	3b01      	subs	r3, #1
 810e4d4:	42ab      	cmp	r3, r5
 810e4d6:	d10b      	bne.n	810e4f0 <__gethex+0x3c0>
 810e4d8:	1169      	asrs	r1, r5, #5
 810e4da:	2301      	movs	r3, #1
 810e4dc:	f005 051f 	and.w	r5, r5, #31
 810e4e0:	fa03 f505 	lsl.w	r5, r3, r5
 810e4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e4e8:	421d      	tst	r5, r3
 810e4ea:	bf18      	it	ne
 810e4ec:	f04f 0801 	movne.w	r8, #1
 810e4f0:	f048 0820 	orr.w	r8, r8, #32
 810e4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810e4f6:	601c      	str	r4, [r3, #0]
 810e4f8:	9b02      	ldr	r3, [sp, #8]
 810e4fa:	601e      	str	r6, [r3, #0]
 810e4fc:	e6a2      	b.n	810e244 <__gethex+0x114>
 810e4fe:	4290      	cmp	r0, r2
 810e500:	f842 3c04 	str.w	r3, [r2, #-4]
 810e504:	d8d6      	bhi.n	810e4b4 <__gethex+0x384>
 810e506:	68a2      	ldr	r2, [r4, #8]
 810e508:	4593      	cmp	fp, r2
 810e50a:	db17      	blt.n	810e53c <__gethex+0x40c>
 810e50c:	6861      	ldr	r1, [r4, #4]
 810e50e:	4648      	mov	r0, r9
 810e510:	3101      	adds	r1, #1
 810e512:	f7fd fe23 	bl	810c15c <_Balloc>
 810e516:	4682      	mov	sl, r0
 810e518:	b918      	cbnz	r0, 810e522 <__gethex+0x3f2>
 810e51a:	4b1b      	ldr	r3, [pc, #108]	; (810e588 <__gethex+0x458>)
 810e51c:	4602      	mov	r2, r0
 810e51e:	2184      	movs	r1, #132	; 0x84
 810e520:	e6b3      	b.n	810e28a <__gethex+0x15a>
 810e522:	6922      	ldr	r2, [r4, #16]
 810e524:	3202      	adds	r2, #2
 810e526:	f104 010c 	add.w	r1, r4, #12
 810e52a:	0092      	lsls	r2, r2, #2
 810e52c:	300c      	adds	r0, #12
 810e52e:	f7fc ff38 	bl	810b3a2 <memcpy>
 810e532:	4621      	mov	r1, r4
 810e534:	4648      	mov	r0, r9
 810e536:	f7fd fe51 	bl	810c1dc <_Bfree>
 810e53a:	4654      	mov	r4, sl
 810e53c:	6922      	ldr	r2, [r4, #16]
 810e53e:	1c51      	adds	r1, r2, #1
 810e540:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810e544:	6121      	str	r1, [r4, #16]
 810e546:	2101      	movs	r1, #1
 810e548:	6151      	str	r1, [r2, #20]
 810e54a:	e7bc      	b.n	810e4c6 <__gethex+0x396>
 810e54c:	6921      	ldr	r1, [r4, #16]
 810e54e:	4559      	cmp	r1, fp
 810e550:	dd0b      	ble.n	810e56a <__gethex+0x43a>
 810e552:	2101      	movs	r1, #1
 810e554:	4620      	mov	r0, r4
 810e556:	f7ff fd83 	bl	810e060 <rshift>
 810e55a:	68bb      	ldr	r3, [r7, #8]
 810e55c:	3601      	adds	r6, #1
 810e55e:	42b3      	cmp	r3, r6
 810e560:	f6ff aedb 	blt.w	810e31a <__gethex+0x1ea>
 810e564:	f04f 0801 	mov.w	r8, #1
 810e568:	e7c2      	b.n	810e4f0 <__gethex+0x3c0>
 810e56a:	f015 051f 	ands.w	r5, r5, #31
 810e56e:	d0f9      	beq.n	810e564 <__gethex+0x434>
 810e570:	9b01      	ldr	r3, [sp, #4]
 810e572:	441a      	add	r2, r3
 810e574:	f1c5 0520 	rsb	r5, r5, #32
 810e578:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810e57c:	f7fd fee0 	bl	810c340 <__hi0bits>
 810e580:	42a8      	cmp	r0, r5
 810e582:	dbe6      	blt.n	810e552 <__gethex+0x422>
 810e584:	e7ee      	b.n	810e564 <__gethex+0x434>
 810e586:	bf00      	nop
 810e588:	081e682d 	.word	0x081e682d

0810e58c <L_shift>:
 810e58c:	f1c2 0208 	rsb	r2, r2, #8
 810e590:	0092      	lsls	r2, r2, #2
 810e592:	b570      	push	{r4, r5, r6, lr}
 810e594:	f1c2 0620 	rsb	r6, r2, #32
 810e598:	6843      	ldr	r3, [r0, #4]
 810e59a:	6804      	ldr	r4, [r0, #0]
 810e59c:	fa03 f506 	lsl.w	r5, r3, r6
 810e5a0:	432c      	orrs	r4, r5
 810e5a2:	40d3      	lsrs	r3, r2
 810e5a4:	6004      	str	r4, [r0, #0]
 810e5a6:	f840 3f04 	str.w	r3, [r0, #4]!
 810e5aa:	4288      	cmp	r0, r1
 810e5ac:	d3f4      	bcc.n	810e598 <L_shift+0xc>
 810e5ae:	bd70      	pop	{r4, r5, r6, pc}

0810e5b0 <__match>:
 810e5b0:	b530      	push	{r4, r5, lr}
 810e5b2:	6803      	ldr	r3, [r0, #0]
 810e5b4:	3301      	adds	r3, #1
 810e5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e5ba:	b914      	cbnz	r4, 810e5c2 <__match+0x12>
 810e5bc:	6003      	str	r3, [r0, #0]
 810e5be:	2001      	movs	r0, #1
 810e5c0:	bd30      	pop	{r4, r5, pc}
 810e5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e5c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810e5ca:	2d19      	cmp	r5, #25
 810e5cc:	bf98      	it	ls
 810e5ce:	3220      	addls	r2, #32
 810e5d0:	42a2      	cmp	r2, r4
 810e5d2:	d0f0      	beq.n	810e5b6 <__match+0x6>
 810e5d4:	2000      	movs	r0, #0
 810e5d6:	e7f3      	b.n	810e5c0 <__match+0x10>

0810e5d8 <__hexnan>:
 810e5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e5dc:	680b      	ldr	r3, [r1, #0]
 810e5de:	6801      	ldr	r1, [r0, #0]
 810e5e0:	115e      	asrs	r6, r3, #5
 810e5e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810e5e6:	f013 031f 	ands.w	r3, r3, #31
 810e5ea:	b087      	sub	sp, #28
 810e5ec:	bf18      	it	ne
 810e5ee:	3604      	addne	r6, #4
 810e5f0:	2500      	movs	r5, #0
 810e5f2:	1f37      	subs	r7, r6, #4
 810e5f4:	4682      	mov	sl, r0
 810e5f6:	4690      	mov	r8, r2
 810e5f8:	9301      	str	r3, [sp, #4]
 810e5fa:	f846 5c04 	str.w	r5, [r6, #-4]
 810e5fe:	46b9      	mov	r9, r7
 810e600:	463c      	mov	r4, r7
 810e602:	9502      	str	r5, [sp, #8]
 810e604:	46ab      	mov	fp, r5
 810e606:	784a      	ldrb	r2, [r1, #1]
 810e608:	1c4b      	adds	r3, r1, #1
 810e60a:	9303      	str	r3, [sp, #12]
 810e60c:	b342      	cbz	r2, 810e660 <__hexnan+0x88>
 810e60e:	4610      	mov	r0, r2
 810e610:	9105      	str	r1, [sp, #20]
 810e612:	9204      	str	r2, [sp, #16]
 810e614:	f7ff fd76 	bl	810e104 <__hexdig_fun>
 810e618:	2800      	cmp	r0, #0
 810e61a:	d14f      	bne.n	810e6bc <__hexnan+0xe4>
 810e61c:	9a04      	ldr	r2, [sp, #16]
 810e61e:	9905      	ldr	r1, [sp, #20]
 810e620:	2a20      	cmp	r2, #32
 810e622:	d818      	bhi.n	810e656 <__hexnan+0x7e>
 810e624:	9b02      	ldr	r3, [sp, #8]
 810e626:	459b      	cmp	fp, r3
 810e628:	dd13      	ble.n	810e652 <__hexnan+0x7a>
 810e62a:	454c      	cmp	r4, r9
 810e62c:	d206      	bcs.n	810e63c <__hexnan+0x64>
 810e62e:	2d07      	cmp	r5, #7
 810e630:	dc04      	bgt.n	810e63c <__hexnan+0x64>
 810e632:	462a      	mov	r2, r5
 810e634:	4649      	mov	r1, r9
 810e636:	4620      	mov	r0, r4
 810e638:	f7ff ffa8 	bl	810e58c <L_shift>
 810e63c:	4544      	cmp	r4, r8
 810e63e:	d950      	bls.n	810e6e2 <__hexnan+0x10a>
 810e640:	2300      	movs	r3, #0
 810e642:	f1a4 0904 	sub.w	r9, r4, #4
 810e646:	f844 3c04 	str.w	r3, [r4, #-4]
 810e64a:	f8cd b008 	str.w	fp, [sp, #8]
 810e64e:	464c      	mov	r4, r9
 810e650:	461d      	mov	r5, r3
 810e652:	9903      	ldr	r1, [sp, #12]
 810e654:	e7d7      	b.n	810e606 <__hexnan+0x2e>
 810e656:	2a29      	cmp	r2, #41	; 0x29
 810e658:	d155      	bne.n	810e706 <__hexnan+0x12e>
 810e65a:	3102      	adds	r1, #2
 810e65c:	f8ca 1000 	str.w	r1, [sl]
 810e660:	f1bb 0f00 	cmp.w	fp, #0
 810e664:	d04f      	beq.n	810e706 <__hexnan+0x12e>
 810e666:	454c      	cmp	r4, r9
 810e668:	d206      	bcs.n	810e678 <__hexnan+0xa0>
 810e66a:	2d07      	cmp	r5, #7
 810e66c:	dc04      	bgt.n	810e678 <__hexnan+0xa0>
 810e66e:	462a      	mov	r2, r5
 810e670:	4649      	mov	r1, r9
 810e672:	4620      	mov	r0, r4
 810e674:	f7ff ff8a 	bl	810e58c <L_shift>
 810e678:	4544      	cmp	r4, r8
 810e67a:	d934      	bls.n	810e6e6 <__hexnan+0x10e>
 810e67c:	f1a8 0204 	sub.w	r2, r8, #4
 810e680:	4623      	mov	r3, r4
 810e682:	f853 1b04 	ldr.w	r1, [r3], #4
 810e686:	f842 1f04 	str.w	r1, [r2, #4]!
 810e68a:	429f      	cmp	r7, r3
 810e68c:	d2f9      	bcs.n	810e682 <__hexnan+0xaa>
 810e68e:	1b3b      	subs	r3, r7, r4
 810e690:	f023 0303 	bic.w	r3, r3, #3
 810e694:	3304      	adds	r3, #4
 810e696:	3e03      	subs	r6, #3
 810e698:	3401      	adds	r4, #1
 810e69a:	42a6      	cmp	r6, r4
 810e69c:	bf38      	it	cc
 810e69e:	2304      	movcc	r3, #4
 810e6a0:	4443      	add	r3, r8
 810e6a2:	2200      	movs	r2, #0
 810e6a4:	f843 2b04 	str.w	r2, [r3], #4
 810e6a8:	429f      	cmp	r7, r3
 810e6aa:	d2fb      	bcs.n	810e6a4 <__hexnan+0xcc>
 810e6ac:	683b      	ldr	r3, [r7, #0]
 810e6ae:	b91b      	cbnz	r3, 810e6b8 <__hexnan+0xe0>
 810e6b0:	4547      	cmp	r7, r8
 810e6b2:	d126      	bne.n	810e702 <__hexnan+0x12a>
 810e6b4:	2301      	movs	r3, #1
 810e6b6:	603b      	str	r3, [r7, #0]
 810e6b8:	2005      	movs	r0, #5
 810e6ba:	e025      	b.n	810e708 <__hexnan+0x130>
 810e6bc:	3501      	adds	r5, #1
 810e6be:	2d08      	cmp	r5, #8
 810e6c0:	f10b 0b01 	add.w	fp, fp, #1
 810e6c4:	dd06      	ble.n	810e6d4 <__hexnan+0xfc>
 810e6c6:	4544      	cmp	r4, r8
 810e6c8:	d9c3      	bls.n	810e652 <__hexnan+0x7a>
 810e6ca:	2300      	movs	r3, #0
 810e6cc:	f844 3c04 	str.w	r3, [r4, #-4]
 810e6d0:	2501      	movs	r5, #1
 810e6d2:	3c04      	subs	r4, #4
 810e6d4:	6822      	ldr	r2, [r4, #0]
 810e6d6:	f000 000f 	and.w	r0, r0, #15
 810e6da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810e6de:	6020      	str	r0, [r4, #0]
 810e6e0:	e7b7      	b.n	810e652 <__hexnan+0x7a>
 810e6e2:	2508      	movs	r5, #8
 810e6e4:	e7b5      	b.n	810e652 <__hexnan+0x7a>
 810e6e6:	9b01      	ldr	r3, [sp, #4]
 810e6e8:	2b00      	cmp	r3, #0
 810e6ea:	d0df      	beq.n	810e6ac <__hexnan+0xd4>
 810e6ec:	f1c3 0320 	rsb	r3, r3, #32
 810e6f0:	f04f 32ff 	mov.w	r2, #4294967295
 810e6f4:	40da      	lsrs	r2, r3
 810e6f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810e6fa:	4013      	ands	r3, r2
 810e6fc:	f846 3c04 	str.w	r3, [r6, #-4]
 810e700:	e7d4      	b.n	810e6ac <__hexnan+0xd4>
 810e702:	3f04      	subs	r7, #4
 810e704:	e7d2      	b.n	810e6ac <__hexnan+0xd4>
 810e706:	2004      	movs	r0, #4
 810e708:	b007      	add	sp, #28
 810e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e70e <__ascii_mbtowc>:
 810e70e:	b082      	sub	sp, #8
 810e710:	b901      	cbnz	r1, 810e714 <__ascii_mbtowc+0x6>
 810e712:	a901      	add	r1, sp, #4
 810e714:	b142      	cbz	r2, 810e728 <__ascii_mbtowc+0x1a>
 810e716:	b14b      	cbz	r3, 810e72c <__ascii_mbtowc+0x1e>
 810e718:	7813      	ldrb	r3, [r2, #0]
 810e71a:	600b      	str	r3, [r1, #0]
 810e71c:	7812      	ldrb	r2, [r2, #0]
 810e71e:	1e10      	subs	r0, r2, #0
 810e720:	bf18      	it	ne
 810e722:	2001      	movne	r0, #1
 810e724:	b002      	add	sp, #8
 810e726:	4770      	bx	lr
 810e728:	4610      	mov	r0, r2
 810e72a:	e7fb      	b.n	810e724 <__ascii_mbtowc+0x16>
 810e72c:	f06f 0001 	mvn.w	r0, #1
 810e730:	e7f8      	b.n	810e724 <__ascii_mbtowc+0x16>

0810e732 <__ascii_wctomb>:
 810e732:	b149      	cbz	r1, 810e748 <__ascii_wctomb+0x16>
 810e734:	2aff      	cmp	r2, #255	; 0xff
 810e736:	bf85      	ittet	hi
 810e738:	238a      	movhi	r3, #138	; 0x8a
 810e73a:	6003      	strhi	r3, [r0, #0]
 810e73c:	700a      	strbls	r2, [r1, #0]
 810e73e:	f04f 30ff 	movhi.w	r0, #4294967295
 810e742:	bf98      	it	ls
 810e744:	2001      	movls	r0, #1
 810e746:	4770      	bx	lr
 810e748:	4608      	mov	r0, r1
 810e74a:	4770      	bx	lr

0810e74c <fiprintf>:
 810e74c:	b40e      	push	{r1, r2, r3}
 810e74e:	b503      	push	{r0, r1, lr}
 810e750:	4601      	mov	r1, r0
 810e752:	ab03      	add	r3, sp, #12
 810e754:	4805      	ldr	r0, [pc, #20]	; (810e76c <fiprintf+0x20>)
 810e756:	f853 2b04 	ldr.w	r2, [r3], #4
 810e75a:	6800      	ldr	r0, [r0, #0]
 810e75c:	9301      	str	r3, [sp, #4]
 810e75e:	f7ff f9cb 	bl	810daf8 <_vfiprintf_r>
 810e762:	b002      	add	sp, #8
 810e764:	f85d eb04 	ldr.w	lr, [sp], #4
 810e768:	b003      	add	sp, #12
 810e76a:	4770      	bx	lr
 810e76c:	100009dc 	.word	0x100009dc

0810e770 <abort>:
 810e770:	b508      	push	{r3, lr}
 810e772:	2006      	movs	r0, #6
 810e774:	f000 f82c 	bl	810e7d0 <raise>
 810e778:	2001      	movs	r0, #1
 810e77a:	f7f3 fc99 	bl	81020b0 <_exit>

0810e77e <_raise_r>:
 810e77e:	291f      	cmp	r1, #31
 810e780:	b538      	push	{r3, r4, r5, lr}
 810e782:	4604      	mov	r4, r0
 810e784:	460d      	mov	r5, r1
 810e786:	d904      	bls.n	810e792 <_raise_r+0x14>
 810e788:	2316      	movs	r3, #22
 810e78a:	6003      	str	r3, [r0, #0]
 810e78c:	f04f 30ff 	mov.w	r0, #4294967295
 810e790:	bd38      	pop	{r3, r4, r5, pc}
 810e792:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810e794:	b112      	cbz	r2, 810e79c <_raise_r+0x1e>
 810e796:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e79a:	b94b      	cbnz	r3, 810e7b0 <_raise_r+0x32>
 810e79c:	4620      	mov	r0, r4
 810e79e:	f000 f831 	bl	810e804 <_getpid_r>
 810e7a2:	462a      	mov	r2, r5
 810e7a4:	4601      	mov	r1, r0
 810e7a6:	4620      	mov	r0, r4
 810e7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e7ac:	f000 b818 	b.w	810e7e0 <_kill_r>
 810e7b0:	2b01      	cmp	r3, #1
 810e7b2:	d00a      	beq.n	810e7ca <_raise_r+0x4c>
 810e7b4:	1c59      	adds	r1, r3, #1
 810e7b6:	d103      	bne.n	810e7c0 <_raise_r+0x42>
 810e7b8:	2316      	movs	r3, #22
 810e7ba:	6003      	str	r3, [r0, #0]
 810e7bc:	2001      	movs	r0, #1
 810e7be:	e7e7      	b.n	810e790 <_raise_r+0x12>
 810e7c0:	2400      	movs	r4, #0
 810e7c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810e7c6:	4628      	mov	r0, r5
 810e7c8:	4798      	blx	r3
 810e7ca:	2000      	movs	r0, #0
 810e7cc:	e7e0      	b.n	810e790 <_raise_r+0x12>
	...

0810e7d0 <raise>:
 810e7d0:	4b02      	ldr	r3, [pc, #8]	; (810e7dc <raise+0xc>)
 810e7d2:	4601      	mov	r1, r0
 810e7d4:	6818      	ldr	r0, [r3, #0]
 810e7d6:	f7ff bfd2 	b.w	810e77e <_raise_r>
 810e7da:	bf00      	nop
 810e7dc:	100009dc 	.word	0x100009dc

0810e7e0 <_kill_r>:
 810e7e0:	b538      	push	{r3, r4, r5, lr}
 810e7e2:	4d07      	ldr	r5, [pc, #28]	; (810e800 <_kill_r+0x20>)
 810e7e4:	2300      	movs	r3, #0
 810e7e6:	4604      	mov	r4, r0
 810e7e8:	4608      	mov	r0, r1
 810e7ea:	4611      	mov	r1, r2
 810e7ec:	602b      	str	r3, [r5, #0]
 810e7ee:	f7f3 fc57 	bl	81020a0 <_kill>
 810e7f2:	1c43      	adds	r3, r0, #1
 810e7f4:	d102      	bne.n	810e7fc <_kill_r+0x1c>
 810e7f6:	682b      	ldr	r3, [r5, #0]
 810e7f8:	b103      	cbz	r3, 810e7fc <_kill_r+0x1c>
 810e7fa:	6023      	str	r3, [r4, #0]
 810e7fc:	bd38      	pop	{r3, r4, r5, pc}
 810e7fe:	bf00      	nop
 810e800:	1001ae04 	.word	0x1001ae04

0810e804 <_getpid_r>:
 810e804:	f7f3 bc4a 	b.w	810209c <_getpid>

0810e808 <expf>:
 810e808:	b508      	push	{r3, lr}
 810e80a:	ed2d 8b02 	vpush	{d8}
 810e80e:	eef0 8a40 	vmov.f32	s17, s0
 810e812:	f000 f8af 	bl	810e974 <__ieee754_expf>
 810e816:	eeb0 8a40 	vmov.f32	s16, s0
 810e81a:	eeb0 0a68 	vmov.f32	s0, s17
 810e81e:	f000 f875 	bl	810e90c <finitef>
 810e822:	b160      	cbz	r0, 810e83e <expf+0x36>
 810e824:	eddf 7a0f 	vldr	s15, [pc, #60]	; 810e864 <expf+0x5c>
 810e828:	eef4 8ae7 	vcmpe.f32	s17, s15
 810e82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e830:	dd0a      	ble.n	810e848 <expf+0x40>
 810e832:	f7fc fd89 	bl	810b348 <__errno>
 810e836:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 810e868 <expf+0x60>
 810e83a:	2322      	movs	r3, #34	; 0x22
 810e83c:	6003      	str	r3, [r0, #0]
 810e83e:	eeb0 0a48 	vmov.f32	s0, s16
 810e842:	ecbd 8b02 	vpop	{d8}
 810e846:	bd08      	pop	{r3, pc}
 810e848:	eddf 7a08 	vldr	s15, [pc, #32]	; 810e86c <expf+0x64>
 810e84c:	eef4 8ae7 	vcmpe.f32	s17, s15
 810e850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e854:	d5f3      	bpl.n	810e83e <expf+0x36>
 810e856:	f7fc fd77 	bl	810b348 <__errno>
 810e85a:	2322      	movs	r3, #34	; 0x22
 810e85c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 810e870 <expf+0x68>
 810e860:	6003      	str	r3, [r0, #0]
 810e862:	e7ec      	b.n	810e83e <expf+0x36>
 810e864:	42b17217 	.word	0x42b17217
 810e868:	7f800000 	.word	0x7f800000
 810e86c:	c2cff1b5 	.word	0xc2cff1b5
 810e870:	00000000 	.word	0x00000000

0810e874 <log10f>:
 810e874:	b508      	push	{r3, lr}
 810e876:	ed2d 8b02 	vpush	{d8}
 810e87a:	eeb0 8a40 	vmov.f32	s16, s0
 810e87e:	f000 fa39 	bl	810ecf4 <__ieee754_log10f>
 810e882:	eeb4 8a48 	vcmp.f32	s16, s16
 810e886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e88a:	d60f      	bvs.n	810e8ac <log10f+0x38>
 810e88c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810e890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e894:	d80a      	bhi.n	810e8ac <log10f+0x38>
 810e896:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810e89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e89e:	d108      	bne.n	810e8b2 <log10f+0x3e>
 810e8a0:	f7fc fd52 	bl	810b348 <__errno>
 810e8a4:	2322      	movs	r3, #34	; 0x22
 810e8a6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 810e8c8 <log10f+0x54>
 810e8aa:	6003      	str	r3, [r0, #0]
 810e8ac:	ecbd 8b02 	vpop	{d8}
 810e8b0:	bd08      	pop	{r3, pc}
 810e8b2:	f7fc fd49 	bl	810b348 <__errno>
 810e8b6:	ecbd 8b02 	vpop	{d8}
 810e8ba:	2321      	movs	r3, #33	; 0x21
 810e8bc:	6003      	str	r3, [r0, #0]
 810e8be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810e8c2:	4802      	ldr	r0, [pc, #8]	; (810e8cc <log10f+0x58>)
 810e8c4:	f7fc bd7c 	b.w	810b3c0 <nanf>
 810e8c8:	ff800000 	.word	0xff800000
 810e8cc:	081d324f 	.word	0x081d324f

0810e8d0 <sqrtf>:
 810e8d0:	b508      	push	{r3, lr}
 810e8d2:	ed2d 8b02 	vpush	{d8}
 810e8d6:	eeb0 8a40 	vmov.f32	s16, s0
 810e8da:	f000 f847 	bl	810e96c <__ieee754_sqrtf>
 810e8de:	eeb4 8a48 	vcmp.f32	s16, s16
 810e8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e8e6:	d60c      	bvs.n	810e902 <sqrtf+0x32>
 810e8e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 810e908 <sqrtf+0x38>
 810e8ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 810e8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e8f4:	d505      	bpl.n	810e902 <sqrtf+0x32>
 810e8f6:	f7fc fd27 	bl	810b348 <__errno>
 810e8fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 810e8fe:	2321      	movs	r3, #33	; 0x21
 810e900:	6003      	str	r3, [r0, #0]
 810e902:	ecbd 8b02 	vpop	{d8}
 810e906:	bd08      	pop	{r3, pc}
 810e908:	00000000 	.word	0x00000000

0810e90c <finitef>:
 810e90c:	b082      	sub	sp, #8
 810e90e:	ed8d 0a01 	vstr	s0, [sp, #4]
 810e912:	9801      	ldr	r0, [sp, #4]
 810e914:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 810e918:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 810e91c:	bfac      	ite	ge
 810e91e:	2000      	movge	r0, #0
 810e920:	2001      	movlt	r0, #1
 810e922:	b002      	add	sp, #8
 810e924:	4770      	bx	lr

0810e926 <with_errnof>:
 810e926:	b513      	push	{r0, r1, r4, lr}
 810e928:	4604      	mov	r4, r0
 810e92a:	ed8d 0a01 	vstr	s0, [sp, #4]
 810e92e:	f7fc fd0b 	bl	810b348 <__errno>
 810e932:	ed9d 0a01 	vldr	s0, [sp, #4]
 810e936:	6004      	str	r4, [r0, #0]
 810e938:	b002      	add	sp, #8
 810e93a:	bd10      	pop	{r4, pc}

0810e93c <xflowf>:
 810e93c:	b130      	cbz	r0, 810e94c <xflowf+0x10>
 810e93e:	eef1 7a40 	vneg.f32	s15, s0
 810e942:	ee27 0a80 	vmul.f32	s0, s15, s0
 810e946:	2022      	movs	r0, #34	; 0x22
 810e948:	f7ff bfed 	b.w	810e926 <with_errnof>
 810e94c:	eef0 7a40 	vmov.f32	s15, s0
 810e950:	e7f7      	b.n	810e942 <xflowf+0x6>
	...

0810e954 <__math_uflowf>:
 810e954:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810e95c <__math_uflowf+0x8>
 810e958:	f7ff bff0 	b.w	810e93c <xflowf>
 810e95c:	10000000 	.word	0x10000000

0810e960 <__math_oflowf>:
 810e960:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810e968 <__math_oflowf+0x8>
 810e964:	f7ff bfea 	b.w	810e93c <xflowf>
 810e968:	70000000 	.word	0x70000000

0810e96c <__ieee754_sqrtf>:
 810e96c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810e970:	4770      	bx	lr
	...

0810e974 <__ieee754_expf>:
 810e974:	ee10 2a10 	vmov	r2, s0
 810e978:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 810e97c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810e980:	d902      	bls.n	810e988 <__ieee754_expf+0x14>
 810e982:	ee30 0a00 	vadd.f32	s0, s0, s0
 810e986:	4770      	bx	lr
 810e988:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 810e98c:	d106      	bne.n	810e99c <__ieee754_expf+0x28>
 810e98e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 810eac8 <__ieee754_expf+0x154>
 810e992:	2900      	cmp	r1, #0
 810e994:	bf18      	it	ne
 810e996:	eeb0 0a67 	vmovne.f32	s0, s15
 810e99a:	4770      	bx	lr
 810e99c:	484b      	ldr	r0, [pc, #300]	; (810eacc <__ieee754_expf+0x158>)
 810e99e:	4282      	cmp	r2, r0
 810e9a0:	dd02      	ble.n	810e9a8 <__ieee754_expf+0x34>
 810e9a2:	2000      	movs	r0, #0
 810e9a4:	f7ff bfdc 	b.w	810e960 <__math_oflowf>
 810e9a8:	2a00      	cmp	r2, #0
 810e9aa:	da05      	bge.n	810e9b8 <__ieee754_expf+0x44>
 810e9ac:	4a48      	ldr	r2, [pc, #288]	; (810ead0 <__ieee754_expf+0x15c>)
 810e9ae:	4293      	cmp	r3, r2
 810e9b0:	d902      	bls.n	810e9b8 <__ieee754_expf+0x44>
 810e9b2:	2000      	movs	r0, #0
 810e9b4:	f7ff bfce 	b.w	810e954 <__math_uflowf>
 810e9b8:	4a46      	ldr	r2, [pc, #280]	; (810ead4 <__ieee754_expf+0x160>)
 810e9ba:	4293      	cmp	r3, r2
 810e9bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 810e9c0:	d952      	bls.n	810ea68 <__ieee754_expf+0xf4>
 810e9c2:	4a45      	ldr	r2, [pc, #276]	; (810ead8 <__ieee754_expf+0x164>)
 810e9c4:	4293      	cmp	r3, r2
 810e9c6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 810e9ca:	d834      	bhi.n	810ea36 <__ieee754_expf+0xc2>
 810e9cc:	4b43      	ldr	r3, [pc, #268]	; (810eadc <__ieee754_expf+0x168>)
 810e9ce:	4413      	add	r3, r2
 810e9d0:	ed93 7a00 	vldr	s14, [r3]
 810e9d4:	4b42      	ldr	r3, [pc, #264]	; (810eae0 <__ieee754_expf+0x16c>)
 810e9d6:	4413      	add	r3, r2
 810e9d8:	ee30 7a47 	vsub.f32	s14, s0, s14
 810e9dc:	f1c1 0201 	rsb	r2, r1, #1
 810e9e0:	edd3 7a00 	vldr	s15, [r3]
 810e9e4:	1a52      	subs	r2, r2, r1
 810e9e6:	ee37 0a67 	vsub.f32	s0, s14, s15
 810e9ea:	ee20 6a00 	vmul.f32	s12, s0, s0
 810e9ee:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 810eae4 <__ieee754_expf+0x170>
 810e9f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810eae8 <__ieee754_expf+0x174>
 810e9f6:	eee6 6a05 	vfma.f32	s13, s12, s10
 810e9fa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 810eaec <__ieee754_expf+0x178>
 810e9fe:	eea6 5a86 	vfma.f32	s10, s13, s12
 810ea02:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810eaf0 <__ieee754_expf+0x17c>
 810ea06:	eee5 6a06 	vfma.f32	s13, s10, s12
 810ea0a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 810eaf4 <__ieee754_expf+0x180>
 810ea0e:	eea6 5a86 	vfma.f32	s10, s13, s12
 810ea12:	eef0 6a40 	vmov.f32	s13, s0
 810ea16:	eee5 6a46 	vfms.f32	s13, s10, s12
 810ea1a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 810ea1e:	ee20 5a26 	vmul.f32	s10, s0, s13
 810ea22:	bb92      	cbnz	r2, 810ea8a <__ieee754_expf+0x116>
 810ea24:	ee76 6ac6 	vsub.f32	s13, s13, s12
 810ea28:	eec5 7a26 	vdiv.f32	s15, s10, s13
 810ea2c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810ea30:	ee35 0ac0 	vsub.f32	s0, s11, s0
 810ea34:	4770      	bx	lr
 810ea36:	4b30      	ldr	r3, [pc, #192]	; (810eaf8 <__ieee754_expf+0x184>)
 810ea38:	ed9f 7a30 	vldr	s14, [pc, #192]	; 810eafc <__ieee754_expf+0x188>
 810ea3c:	eddf 6a30 	vldr	s13, [pc, #192]	; 810eb00 <__ieee754_expf+0x18c>
 810ea40:	4413      	add	r3, r2
 810ea42:	edd3 7a00 	vldr	s15, [r3]
 810ea46:	eee0 7a07 	vfma.f32	s15, s0, s14
 810ea4a:	eeb0 7a40 	vmov.f32	s14, s0
 810ea4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ea52:	ee17 2a90 	vmov	r2, s15
 810ea56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ea5a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810ea5e:	eddf 6a29 	vldr	s13, [pc, #164]	; 810eb04 <__ieee754_expf+0x190>
 810ea62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810ea66:	e7be      	b.n	810e9e6 <__ieee754_expf+0x72>
 810ea68:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 810ea6c:	d20b      	bcs.n	810ea86 <__ieee754_expf+0x112>
 810ea6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 810eb08 <__ieee754_expf+0x194>
 810ea72:	ee70 6a26 	vadd.f32	s13, s0, s13
 810ea76:	eef4 6ae5 	vcmpe.f32	s13, s11
 810ea7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ea7e:	dd02      	ble.n	810ea86 <__ieee754_expf+0x112>
 810ea80:	ee30 0a25 	vadd.f32	s0, s0, s11
 810ea84:	4770      	bx	lr
 810ea86:	2200      	movs	r2, #0
 810ea88:	e7af      	b.n	810e9ea <__ieee754_expf+0x76>
 810ea8a:	ee36 6a66 	vsub.f32	s12, s12, s13
 810ea8e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 810ea92:	eec5 6a06 	vdiv.f32	s13, s10, s12
 810ea96:	bfb8      	it	lt
 810ea98:	3264      	addlt	r2, #100	; 0x64
 810ea9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810ea9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810eaa2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810eaa6:	ee17 3a90 	vmov	r3, s15
 810eaaa:	bfab      	itete	ge
 810eaac:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 810eab0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 810eab4:	ee00 3a10 	vmovge	s0, r3
 810eab8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 810eb0c <__ieee754_expf+0x198>
 810eabc:	bfbc      	itt	lt
 810eabe:	ee00 3a10 	vmovlt	s0, r3
 810eac2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 810eac6:	4770      	bx	lr
 810eac8:	00000000 	.word	0x00000000
 810eacc:	42b17217 	.word	0x42b17217
 810ead0:	42cff1b5 	.word	0x42cff1b5
 810ead4:	3eb17218 	.word	0x3eb17218
 810ead8:	3f851591 	.word	0x3f851591
 810eadc:	081e6ba8 	.word	0x081e6ba8
 810eae0:	081e6bb0 	.word	0x081e6bb0
 810eae4:	3331bb4c 	.word	0x3331bb4c
 810eae8:	b5ddea0e 	.word	0xb5ddea0e
 810eaec:	388ab355 	.word	0x388ab355
 810eaf0:	bb360b61 	.word	0xbb360b61
 810eaf4:	3e2aaaab 	.word	0x3e2aaaab
 810eaf8:	081e6ba0 	.word	0x081e6ba0
 810eafc:	3fb8aa3b 	.word	0x3fb8aa3b
 810eb00:	3f317180 	.word	0x3f317180
 810eb04:	3717f7d1 	.word	0x3717f7d1
 810eb08:	7149f2ca 	.word	0x7149f2ca
 810eb0c:	0d800000 	.word	0x0d800000

0810eb10 <__ieee754_logf>:
 810eb10:	ee10 3a10 	vmov	r3, s0
 810eb14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810eb18:	d106      	bne.n	810eb28 <__ieee754_logf+0x18>
 810eb1a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 810ecb4 <__ieee754_logf+0x1a4>
 810eb1e:	eddf 7a66 	vldr	s15, [pc, #408]	; 810ecb8 <__ieee754_logf+0x1a8>
 810eb22:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810eb26:	4770      	bx	lr
 810eb28:	2b00      	cmp	r3, #0
 810eb2a:	da02      	bge.n	810eb32 <__ieee754_logf+0x22>
 810eb2c:	ee30 7a40 	vsub.f32	s14, s0, s0
 810eb30:	e7f5      	b.n	810eb1e <__ieee754_logf+0xe>
 810eb32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810eb36:	db02      	blt.n	810eb3e <__ieee754_logf+0x2e>
 810eb38:	ee30 0a00 	vadd.f32	s0, s0, s0
 810eb3c:	4770      	bx	lr
 810eb3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810eb42:	bfb8      	it	lt
 810eb44:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 810ecbc <__ieee754_logf+0x1ac>
 810eb48:	485d      	ldr	r0, [pc, #372]	; (810ecc0 <__ieee754_logf+0x1b0>)
 810eb4a:	bfbe      	ittt	lt
 810eb4c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810eb50:	f06f 0118 	mvnlt.w	r1, #24
 810eb54:	ee17 3a90 	vmovlt	r3, s15
 810eb58:	ea4f 52e3 	mov.w	r2, r3, asr #23
 810eb5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 810eb60:	4418      	add	r0, r3
 810eb62:	bfa8      	it	ge
 810eb64:	2100      	movge	r1, #0
 810eb66:	3a7f      	subs	r2, #127	; 0x7f
 810eb68:	440a      	add	r2, r1
 810eb6a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 810eb6e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 810eb72:	4319      	orrs	r1, r3
 810eb74:	ee00 1a10 	vmov	s0, r1
 810eb78:	4952      	ldr	r1, [pc, #328]	; (810ecc4 <__ieee754_logf+0x1b4>)
 810eb7a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 810eb7e:	f103 000f 	add.w	r0, r3, #15
 810eb82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810eb86:	4001      	ands	r1, r0
 810eb88:	ee30 0a67 	vsub.f32	s0, s0, s15
 810eb8c:	bb89      	cbnz	r1, 810ebf2 <__ieee754_logf+0xe2>
 810eb8e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 810eb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eb96:	d10f      	bne.n	810ebb8 <__ieee754_logf+0xa8>
 810eb98:	2a00      	cmp	r2, #0
 810eb9a:	f000 8087 	beq.w	810ecac <__ieee754_logf+0x19c>
 810eb9e:	ee07 2a90 	vmov	s15, r2
 810eba2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 810ecc8 <__ieee754_logf+0x1b8>
 810eba6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 810eccc <__ieee754_logf+0x1bc>
 810ebaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ebae:	ee27 0a80 	vmul.f32	s0, s15, s0
 810ebb2:	eea7 0a87 	vfma.f32	s0, s15, s14
 810ebb6:	4770      	bx	lr
 810ebb8:	eddf 6a45 	vldr	s13, [pc, #276]	; 810ecd0 <__ieee754_logf+0x1c0>
 810ebbc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810ebc0:	eee0 7a66 	vfms.f32	s15, s0, s13
 810ebc4:	ee20 7a00 	vmul.f32	s14, s0, s0
 810ebc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 810ebcc:	b912      	cbnz	r2, 810ebd4 <__ieee754_logf+0xc4>
 810ebce:	ee30 0a47 	vsub.f32	s0, s0, s14
 810ebd2:	4770      	bx	lr
 810ebd4:	ee07 2a90 	vmov	s15, r2
 810ebd8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810ecc8 <__ieee754_logf+0x1b8>
 810ebdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ebe0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810ebe4:	ee37 0a40 	vsub.f32	s0, s14, s0
 810ebe8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 810eccc <__ieee754_logf+0x1bc>
 810ebec:	ee97 0a87 	vfnms.f32	s0, s15, s14
 810ebf0:	4770      	bx	lr
 810ebf2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 810ebf6:	ee70 7a27 	vadd.f32	s15, s0, s15
 810ebfa:	eddf 5a36 	vldr	s11, [pc, #216]	; 810ecd4 <__ieee754_logf+0x1c4>
 810ebfe:	eddf 4a36 	vldr	s9, [pc, #216]	; 810ecd8 <__ieee754_logf+0x1c8>
 810ec02:	4936      	ldr	r1, [pc, #216]	; (810ecdc <__ieee754_logf+0x1cc>)
 810ec04:	ee80 6a27 	vdiv.f32	s12, s0, s15
 810ec08:	4419      	add	r1, r3
 810ec0a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 810ec0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 810ec12:	430b      	orrs	r3, r1
 810ec14:	2b00      	cmp	r3, #0
 810ec16:	ee07 2a90 	vmov	s15, r2
 810ec1a:	ee26 5a06 	vmul.f32	s10, s12, s12
 810ec1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810ec22:	ee25 7a05 	vmul.f32	s14, s10, s10
 810ec26:	eddf 7a2e 	vldr	s15, [pc, #184]	; 810ece0 <__ieee754_logf+0x1d0>
 810ec2a:	eee7 7a25 	vfma.f32	s15, s14, s11
 810ec2e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 810ece4 <__ieee754_logf+0x1d4>
 810ec32:	eee7 5a87 	vfma.f32	s11, s15, s14
 810ec36:	eddf 7a2c 	vldr	s15, [pc, #176]	; 810ece8 <__ieee754_logf+0x1d8>
 810ec3a:	eee7 7a24 	vfma.f32	s15, s14, s9
 810ec3e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 810ecec <__ieee754_logf+0x1dc>
 810ec42:	eee7 4a87 	vfma.f32	s9, s15, s14
 810ec46:	eddf 7a2a 	vldr	s15, [pc, #168]	; 810ecf0 <__ieee754_logf+0x1e0>
 810ec4a:	eee4 7a87 	vfma.f32	s15, s9, s14
 810ec4e:	ee67 7a85 	vmul.f32	s15, s15, s10
 810ec52:	eee5 7a87 	vfma.f32	s15, s11, s14
 810ec56:	dd1a      	ble.n	810ec8e <__ieee754_logf+0x17e>
 810ec58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810ec5c:	ee20 7a07 	vmul.f32	s14, s0, s14
 810ec60:	ee27 7a00 	vmul.f32	s14, s14, s0
 810ec64:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ec68:	ee67 7a86 	vmul.f32	s15, s15, s12
 810ec6c:	b912      	cbnz	r2, 810ec74 <__ieee754_logf+0x164>
 810ec6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 810ec72:	e7ac      	b.n	810ebce <__ieee754_logf+0xbe>
 810ec74:	ed9f 6a14 	vldr	s12, [pc, #80]	; 810ecc8 <__ieee754_logf+0x1b8>
 810ec78:	eee6 7a86 	vfma.f32	s15, s13, s12
 810ec7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 810ec80:	ee37 0a40 	vsub.f32	s0, s14, s0
 810ec84:	eddf 7a11 	vldr	s15, [pc, #68]	; 810eccc <__ieee754_logf+0x1bc>
 810ec88:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 810ec8c:	4770      	bx	lr
 810ec8e:	ee70 7a67 	vsub.f32	s15, s0, s15
 810ec92:	ee67 7a86 	vmul.f32	s15, s15, s12
 810ec96:	b912      	cbnz	r2, 810ec9e <__ieee754_logf+0x18e>
 810ec98:	ee30 0a67 	vsub.f32	s0, s0, s15
 810ec9c:	4770      	bx	lr
 810ec9e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 810ecc8 <__ieee754_logf+0x1b8>
 810eca2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 810eca6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810ecaa:	e7eb      	b.n	810ec84 <__ieee754_logf+0x174>
 810ecac:	ed9f 0a02 	vldr	s0, [pc, #8]	; 810ecb8 <__ieee754_logf+0x1a8>
 810ecb0:	4770      	bx	lr
 810ecb2:	bf00      	nop
 810ecb4:	cc000000 	.word	0xcc000000
 810ecb8:	00000000 	.word	0x00000000
 810ecbc:	4c000000 	.word	0x4c000000
 810ecc0:	004afb20 	.word	0x004afb20
 810ecc4:	007ffff0 	.word	0x007ffff0
 810ecc8:	3717f7d1 	.word	0x3717f7d1
 810eccc:	3f317180 	.word	0x3f317180
 810ecd0:	3eaaaaab 	.word	0x3eaaaaab
 810ecd4:	3e1cd04f 	.word	0x3e1cd04f
 810ecd8:	3e178897 	.word	0x3e178897
 810ecdc:	ffcf5c30 	.word	0xffcf5c30
 810ece0:	3e638e29 	.word	0x3e638e29
 810ece4:	3ecccccd 	.word	0x3ecccccd
 810ece8:	3e3a3325 	.word	0x3e3a3325
 810ecec:	3e924925 	.word	0x3e924925
 810ecf0:	3f2aaaab 	.word	0x3f2aaaab

0810ecf4 <__ieee754_log10f>:
 810ecf4:	b508      	push	{r3, lr}
 810ecf6:	ee10 2a10 	vmov	r2, s0
 810ecfa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 810ecfe:	ed2d 8b02 	vpush	{d8}
 810ed02:	d108      	bne.n	810ed16 <__ieee754_log10f+0x22>
 810ed04:	ed9f 7a21 	vldr	s14, [pc, #132]	; 810ed8c <__ieee754_log10f+0x98>
 810ed08:	eddf 7a21 	vldr	s15, [pc, #132]	; 810ed90 <__ieee754_log10f+0x9c>
 810ed0c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810ed10:	ecbd 8b02 	vpop	{d8}
 810ed14:	bd08      	pop	{r3, pc}
 810ed16:	2a00      	cmp	r2, #0
 810ed18:	da02      	bge.n	810ed20 <__ieee754_log10f+0x2c>
 810ed1a:	ee30 7a40 	vsub.f32	s14, s0, s0
 810ed1e:	e7f3      	b.n	810ed08 <__ieee754_log10f+0x14>
 810ed20:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810ed24:	db02      	blt.n	810ed2c <__ieee754_log10f+0x38>
 810ed26:	ee30 0a00 	vadd.f32	s0, s0, s0
 810ed2a:	e7f1      	b.n	810ed10 <__ieee754_log10f+0x1c>
 810ed2c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 810ed30:	bfbf      	itttt	lt
 810ed32:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 810ed94 <__ieee754_log10f+0xa0>
 810ed36:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810ed3a:	f06f 0118 	mvnlt.w	r1, #24
 810ed3e:	ee17 2a90 	vmovlt	r2, s15
 810ed42:	ea4f 53e2 	mov.w	r3, r2, asr #23
 810ed46:	bfa8      	it	ge
 810ed48:	2100      	movge	r1, #0
 810ed4a:	3b7f      	subs	r3, #127	; 0x7f
 810ed4c:	440b      	add	r3, r1
 810ed4e:	0fd9      	lsrs	r1, r3, #31
 810ed50:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 810ed54:	ee07 3a90 	vmov	s15, r3
 810ed58:	f3c2 0216 	ubfx	r2, r2, #0, #23
 810ed5c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 810ed60:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 810ed64:	ee00 3a10 	vmov	s0, r3
 810ed68:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810ed6c:	f7ff fed0 	bl	810eb10 <__ieee754_logf>
 810ed70:	eddf 7a09 	vldr	s15, [pc, #36]	; 810ed98 <__ieee754_log10f+0xa4>
 810ed74:	ee20 0a27 	vmul.f32	s0, s0, s15
 810ed78:	eddf 7a08 	vldr	s15, [pc, #32]	; 810ed9c <__ieee754_log10f+0xa8>
 810ed7c:	eea8 0a27 	vfma.f32	s0, s16, s15
 810ed80:	eddf 7a07 	vldr	s15, [pc, #28]	; 810eda0 <__ieee754_log10f+0xac>
 810ed84:	eea8 0a27 	vfma.f32	s0, s16, s15
 810ed88:	e7c2      	b.n	810ed10 <__ieee754_log10f+0x1c>
 810ed8a:	bf00      	nop
 810ed8c:	cc000000 	.word	0xcc000000
 810ed90:	00000000 	.word	0x00000000
 810ed94:	4c000000 	.word	0x4c000000
 810ed98:	3ede5bd9 	.word	0x3ede5bd9
 810ed9c:	355427db 	.word	0x355427db
 810eda0:	3e9a2080 	.word	0x3e9a2080

0810eda4 <_init>:
 810eda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eda6:	bf00      	nop
 810eda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810edaa:	bc08      	pop	{r3}
 810edac:	469e      	mov	lr, r3
 810edae:	4770      	bx	lr

0810edb0 <_fini>:
 810edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810edb2:	bf00      	nop
 810edb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810edb6:	bc08      	pop	{r3}
 810edb8:	469e      	mov	lr, r3
 810edba:	4770      	bx	lr
