
PhonPhot_Complete_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ecbc  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000a05b8  0810ef60  0810ef60  0000ff60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081af518  081af518  000b0518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081af520  081af520  000b0520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081af524  081af524  000b0524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000cec  10000050  081af528  000b1050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00019fdc  10000d40  081b0214  000b1d40  2**5
                  ALLOC
  8 ._user_heap_stack 00002004  1001ad1c  081b0214  000b2d1c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000b2050  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028a9e  00000000  00000000  000b2080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005087  00000000  00000000  000dab1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000d41e  00000000  00000000  000dfba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001680  00000000  00000000  000ecfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000171a  00000000  00000000  000ee648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040c2a  00000000  00000000  000efd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002afd7  00000000  00000000  0013098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a8631  00000000  00000000  0015b963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000e6  00000000  00000000  00303f94  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005104  00000000  00000000  0030407c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .ipc_data     00000050  10000000  10000000  000b2000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .debug_line_str 00000099  00000000  00000000  00309180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000d40 	.word	0x10000d40
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810ef44 	.word	0x0810ef44

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000d44 	.word	0x10000d44
 81002dc:	0810ef44 	.word	0x0810ef44

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f4:	4b07      	ldr	r3, [pc, #28]	@ (8101114 <SystemInit+0x20>)
 81010f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 81010fa:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 81010fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101102:	691a      	ldr	r2, [r3, #16]
 8101104:	f042 0210 	orr.w	r2, r2, #16
 8101108:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810110a:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 810110e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101110:	4770      	bx	lr
 8101112:	bf00      	nop
 8101114:	e000ed00 	.word	0xe000ed00

08101118 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8101118:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810111a:	2400      	movs	r4, #0
{
 810111c:	b08a      	sub	sp, #40	@ 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 810111e:	221c      	movs	r2, #28
 8101120:	4621      	mov	r1, r4
 8101122:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8101124:	e9cd 4400 	strd	r4, r4, [sp]
 8101128:	9402      	str	r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810112a:	f00a f9dd 	bl	810b4e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810112e:	482c      	ldr	r0, [pc, #176]	@ (81011e0 <MX_ADC1_Init+0xc8>)
 8101130:	4b2c      	ldr	r3, [pc, #176]	@ (81011e4 <MX_ADC1_Init+0xcc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8101132:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101134:	e9c0 3400 	strd	r3, r4, [r0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101138:	f04f 0e01 	mov.w	lr, #1
 810113c:	2304      	movs	r3, #4
 810113e:	e9c0 e303 	strd	lr, r3, [r0, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 3;
 8101142:	2303      	movs	r3, #3
 8101144:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101146:	f44f 6190 	mov.w	r1, #1152	@ 0x480
 810114a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 810114e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8101150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101154:	e9c0 1209 	strd	r1, r2, [r0, #36]	@ 0x24
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101158:	e9c0 340c 	strd	r3, r4, [r0, #48]	@ 0x30
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810115c:	8284      	strh	r4, [r0, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810115e:	7704      	strb	r4, [r0, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8101160:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101164:	f001 fd48 	bl	8102bf8 <HAL_ADC_Init>
 8101168:	b108      	cbz	r0, 810116e <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 810116a:	f000 ff59 	bl	8102020 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810116e:	481c      	ldr	r0, [pc, #112]	@ (81011e0 <MX_ADC1_Init+0xc8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101170:	9400      	str	r4, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101172:	4669      	mov	r1, sp
 8101174:	f001 fe54 	bl	8102e20 <HAL_ADCEx_MultiModeConfigChannel>
 8101178:	b108      	cbz	r0, 810117e <MX_ADC1_Init+0x66>
  {
    Error_Handler();
 810117a:	f000 ff51 	bl	8102020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810117e:	481a      	ldr	r0, [pc, #104]	@ (81011e8 <MX_ADC1_Init+0xd0>)
 8101180:	2306      	movs	r3, #6
 8101182:	e9cd 0303 	strd	r0, r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101186:	2403      	movs	r4, #3
 8101188:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 810118c:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 8101190:	f04f 0c04 	mov.w	ip, #4
 8101194:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101196:	4812      	ldr	r0, [pc, #72]	@ (81011e0 <MX_ADC1_Init+0xc8>)
  sConfig.OffsetSignedSaturation = DISABLE;
 8101198:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810119c:	a903      	add	r1, sp, #12
  sConfig.Offset = 0;
 810119e:	e9cd c307 	strd	ip, r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011a2:	f001 fa6d 	bl	8102680 <HAL_ADC_ConfigChannel>
 81011a6:	b108      	cbz	r0, 81011ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 81011a8:	f000 ff3a 	bl	8102020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81011ac:	2101      	movs	r1, #1
 81011ae:	230c      	movs	r3, #12
 81011b0:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011b4:	480a      	ldr	r0, [pc, #40]	@ (81011e0 <MX_ADC1_Init+0xc8>)
 81011b6:	eb0d 0103 	add.w	r1, sp, r3
 81011ba:	f001 fa61 	bl	8102680 <HAL_ADC_ConfigChannel>
 81011be:	b108      	cbz	r0, 81011c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 81011c0:	f000 ff2e 	bl	8102020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011c4:	4a09      	ldr	r2, [pc, #36]	@ (81011ec <MX_ADC1_Init+0xd4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011c6:	4806      	ldr	r0, [pc, #24]	@ (81011e0 <MX_ADC1_Init+0xc8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011c8:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011ca:	a903      	add	r1, sp, #12
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011cc:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011d0:	f001 fa56 	bl	8102680 <HAL_ADC_ConfigChannel>
 81011d4:	b108      	cbz	r0, 81011da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 81011d6:	f000 ff23 	bl	8102020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81011da:	b00a      	add	sp, #40	@ 0x28
 81011dc:	bd10      	pop	{r4, pc}
 81011de:	bf00      	nop
 81011e0:	10000eb0 	.word	0x10000eb0
 81011e4:	40022000 	.word	0x40022000
 81011e8:	2a000400 	.word	0x2a000400
 81011ec:	04300002 	.word	0x04300002

081011f0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 81011f0:	b500      	push	{lr}
 81011f2:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81011f4:	221c      	movs	r2, #28
 81011f6:	2100      	movs	r1, #0
 81011f8:	a801      	add	r0, sp, #4
 81011fa:	f00a f975 	bl	810b4e8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 81011fe:	4828      	ldr	r0, [pc, #160]	@ (81012a0 <MX_ADC3_Init+0xb0>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101200:	4a28      	ldr	r2, [pc, #160]	@ (81012a4 <MX_ADC3_Init+0xb4>)
 8101202:	2300      	movs	r3, #0
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101204:	2101      	movs	r1, #1
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8101206:	e9c0 2300 	strd	r2, r3, [r0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810120a:	2204      	movs	r2, #4
 810120c:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 3;
 8101210:	2203      	movs	r2, #3
 8101212:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101214:	f44f 6c90 	mov.w	ip, #1152	@ 0x480
 8101218:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 810121c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 810121e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101222:	e9c0 c109 	strd	ip, r1, [r0, #36]	@ 0x24
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101226:	e9c0 230c 	strd	r2, r3, [r0, #48]	@ 0x30
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810122a:	6083      	str	r3, [r0, #8]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 810122c:	8283      	strh	r3, [r0, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 810122e:	7703      	strb	r3, [r0, #28]
  hadc3.Init.OversamplingMode = DISABLE;
 8101230:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8101234:	f001 fce0 	bl	8102bf8 <HAL_ADC_Init>
 8101238:	b108      	cbz	r0, 810123e <MX_ADC3_Init+0x4e>
  {
    Error_Handler();
 810123a:	f000 fef1 	bl	8102020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810123e:	481a      	ldr	r0, [pc, #104]	@ (81012a8 <MX_ADC3_Init+0xb8>)
 8101240:	2306      	movs	r3, #6
 8101242:	e9cd 0301 	strd	r0, r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101246:	f04f 0c03 	mov.w	ip, #3
 810124a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 810124e:	e9cd c303 	strd	ip, r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
 8101252:	f04f 0e04 	mov.w	lr, #4
 8101256:	2300      	movs	r3, #0
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101258:	4811      	ldr	r0, [pc, #68]	@ (81012a0 <MX_ADC3_Init+0xb0>)
  sConfig.OffsetSignedSaturation = DISABLE;
 810125a:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810125e:	a901      	add	r1, sp, #4
  sConfig.Offset = 0;
 8101260:	e9cd e305 	strd	lr, r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101264:	f001 fa0c 	bl	8102680 <HAL_ADC_ConfigChannel>
 8101268:	b108      	cbz	r0, 810126e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 810126a:	f000 fed9 	bl	8102020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 810126e:	2101      	movs	r1, #1
 8101270:	230c      	movs	r3, #12
 8101272:	e9cd 1301 	strd	r1, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101276:	480a      	ldr	r0, [pc, #40]	@ (81012a0 <MX_ADC3_Init+0xb0>)
 8101278:	a901      	add	r1, sp, #4
 810127a:	f001 fa01 	bl	8102680 <HAL_ADC_ConfigChannel>
 810127e:	b108      	cbz	r0, 8101284 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8101280:	f000 fece 	bl	8102020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8101284:	4a09      	ldr	r2, [pc, #36]	@ (81012ac <MX_ADC3_Init+0xbc>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101286:	4806      	ldr	r0, [pc, #24]	@ (81012a0 <MX_ADC3_Init+0xb0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8101288:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810128a:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 810128c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101290:	f001 f9f6 	bl	8102680 <HAL_ADC_ConfigChannel>
 8101294:	b108      	cbz	r0, 810129a <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8101296:	f000 fec3 	bl	8102020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 810129a:	b009      	add	sp, #36	@ 0x24
 810129c:	f85d fb04 	ldr.w	pc, [sp], #4
 81012a0:	10000e4c 	.word	0x10000e4c
 81012a4:	58026000 	.word	0x58026000
 81012a8:	1d500080 	.word	0x1d500080
 81012ac:	04300002 	.word	0x04300002

081012b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81012b0:	b570      	push	{r4, r5, r6, lr}
 81012b2:	4605      	mov	r5, r0
 81012b4:	b08c      	sub	sp, #48	@ 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012b6:	2214      	movs	r2, #20
 81012b8:	2100      	movs	r1, #0
 81012ba:	a807      	add	r0, sp, #28
 81012bc:	f00a f914 	bl	810b4e8 <memset>
  if(adcHandle->Instance==ADC1)
 81012c0:	682b      	ldr	r3, [r5, #0]
 81012c2:	4a55      	ldr	r2, [pc, #340]	@ (8101418 <HAL_ADC_MspInit+0x168>)
 81012c4:	4293      	cmp	r3, r2
 81012c6:	d158      	bne.n	810137a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012c8:	4b54      	ldr	r3, [pc, #336]	@ (810141c <HAL_ADC_MspInit+0x16c>)

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 81012ca:	4c55      	ldr	r4, [pc, #340]	@ (8101420 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012cc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 81012d0:	4e54      	ldr	r6, [pc, #336]	@ (8101424 <HAL_ADC_MspInit+0x174>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 81012d2:	f042 0220 	orr.w	r2, r2, #32
 81012d6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 81012da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 81012de:	f002 0220 	and.w	r2, r2, #32
 81012e2:	9201      	str	r2, [sp, #4]
 81012e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81012e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 81012ea:	f042 0204 	orr.w	r2, r2, #4
 81012ee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 81012f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 81012f6:	f002 0204 	and.w	r2, r2, #4
 81012fa:	9202      	str	r2, [sp, #8]
 81012fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81012fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101302:	f042 0201 	orr.w	r2, r2, #1
 8101306:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 810130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810130e:	f003 0301 	and.w	r3, r3, #1
 8101312:	9303      	str	r3, [sp, #12]
 8101314:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101316:	2001      	movs	r0, #1
 8101318:	2303      	movs	r3, #3
 810131a:	e9cd 0307 	strd	r0, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 810131e:	a907      	add	r1, sp, #28
 8101320:	4841      	ldr	r0, [pc, #260]	@ (8101428 <HAL_ADC_MspInit+0x178>)
 8101322:	f002 ffc3 	bl	81042ac <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101326:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 810132a:	4608      	mov	r0, r1
 810132c:	f001 f986 	bl	810263c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8101330:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8101334:	4608      	mov	r0, r1
 8101336:	f001 f981 	bl	810263c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810133a:	2309      	movs	r3, #9
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 810133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101340:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8101344:	e9c4 6300 	strd	r6, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101348:	e9c4 c204 	strd	ip, r2, [r4, #16]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810134c:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 810134e:	f44f 5e00 	mov.w	lr, #8192	@ 0x2000
 8101352:	f44f 7280 	mov.w	r2, #256	@ 0x100
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8101356:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 810135a:	e9c4 e206 	strd	lr, r2, [r4, #24]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 810135e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101362:	e9c4 2308 	strd	r2, r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8101366:	4620      	mov	r0, r4
 8101368:	f001 ffc4 	bl	81032f4 <HAL_DMA_Init>
 810136c:	b108      	cbz	r0, 8101372 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 810136e:	f000 fe57 	bl	8102020 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8101372:	64ec      	str	r4, [r5, #76]	@ 0x4c
 8101374:	63a5      	str	r5, [r4, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8101376:	b00c      	add	sp, #48	@ 0x30
 8101378:	bd70      	pop	{r4, r5, r6, pc}
  else if(adcHandle->Instance==ADC3)
 810137a:	4a2c      	ldr	r2, [pc, #176]	@ (810142c <HAL_ADC_MspInit+0x17c>)
 810137c:	4293      	cmp	r3, r2
 810137e:	d1fa      	bne.n	8101376 <HAL_ADC_MspInit+0xc6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101380:	4b26      	ldr	r3, [pc, #152]	@ (810141c <HAL_ADC_MspInit+0x16c>)
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 8101382:	482b      	ldr	r0, [pc, #172]	@ (8101430 <HAL_ADC_MspInit+0x180>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101384:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    hdma_adc3.Instance = DMA1_Stream1;
 8101388:	4c2a      	ldr	r4, [pc, #168]	@ (8101434 <HAL_ADC_MspInit+0x184>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 810138a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 810138e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101392:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101396:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 810139a:	9204      	str	r2, [sp, #16]
 810139c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 810139e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 81013a2:	f042 0220 	orr.w	r2, r2, #32
 81013a6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 81013aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 81013ae:	f002 0220 	and.w	r2, r2, #32
 81013b2:	9205      	str	r2, [sp, #20]
 81013b4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81013b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 81013ba:	f042 0204 	orr.w	r2, r2, #4
 81013be:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 81013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013c6:	f003 0304 	and.w	r3, r3, #4
 81013ca:	9306      	str	r3, [sp, #24]
 81013cc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013ce:	f44f 7680 	mov.w	r6, #256	@ 0x100
 81013d2:	2303      	movs	r3, #3
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013d4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81013d6:	e9cd 6307 	strd	r6, r3, [sp, #28]
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013da:	f002 ff67 	bl	81042ac <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81013de:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 81013e2:	4608      	mov	r0, r1
 81013e4:	f001 f92a 	bl	810263c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81013e8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 81013ec:	4608      	mov	r0, r1
 81013ee:	f001 f925 	bl	810263c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 81013f2:	4a11      	ldr	r2, [pc, #68]	@ (8101438 <HAL_ADC_MspInit+0x188>)
 81013f4:	2373      	movs	r3, #115	@ 0x73
 81013f6:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 81013fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 81013fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101402:	e9c4 1204 	strd	r1, r2, [r4, #16]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101406:	2300      	movs	r3, #0
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8101408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 810140c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8101410:	e9c4 2606 	strd	r2, r6, [r4, #24]
 8101414:	e7a3      	b.n	810135e <HAL_ADC_MspInit+0xae>
 8101416:	bf00      	nop
 8101418:	40022000 	.word	0x40022000
 810141c:	58024400 	.word	0x58024400
 8101420:	10000dd4 	.word	0x10000dd4
 8101424:	40020010 	.word	0x40020010
 8101428:	58020800 	.word	0x58020800
 810142c:	58026000 	.word	0x58026000
 8101430:	58021400 	.word	0x58021400
 8101434:	10000d5c 	.word	0x10000d5c
 8101438:	40020028 	.word	0x40020028

0810143c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810143c:	4b1e      	ldr	r3, [pc, #120]	@ (81014b8 <MX_DMA_Init+0x7c>)
{
 810143e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101440:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8101444:	f042 0201 	orr.w	r2, r2, #1
 8101448:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 810144c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8101450:	f002 0201 	and.w	r2, r2, #1
 8101454:	9200      	str	r2, [sp, #0]
 8101456:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101458:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 810145c:	f042 0202 	orr.w	r2, r2, #2
 8101460:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8101464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101468:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 810146a:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 810146e:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101470:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101472:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101474:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101476:	f001 fd4b 	bl	8102f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810147a:	200b      	movs	r0, #11
 810147c:	f001 fd7a 	bl	8102f74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101480:	2200      	movs	r2, #0
 8101482:	4611      	mov	r1, r2
 8101484:	200c      	movs	r0, #12
 8101486:	f001 fd43 	bl	8102f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 810148a:	200c      	movs	r0, #12
 810148c:	f001 fd72 	bl	8102f74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101490:	2200      	movs	r2, #0
 8101492:	4611      	mov	r1, r2
 8101494:	2038      	movs	r0, #56	@ 0x38
 8101496:	f001 fd3b 	bl	8102f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 810149a:	2038      	movs	r0, #56	@ 0x38
 810149c:	f001 fd6a 	bl	8102f74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 81014a0:	2200      	movs	r2, #0
 81014a2:	4611      	mov	r1, r2
 81014a4:	202f      	movs	r0, #47	@ 0x2f
 81014a6:	f001 fd33 	bl	8102f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014aa:	202f      	movs	r0, #47	@ 0x2f

}
 81014ac:	b003      	add	sp, #12
 81014ae:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014b2:	f001 bd5f 	b.w	8102f74 <HAL_NVIC_EnableIRQ>
 81014b6:	bf00      	nop
 81014b8:	58024400 	.word	0x58024400

081014bc <copySamplesForFFT>:

  //setUserLED1State( FALSE );
}*/

static void copySamplesForFFT( volatile uint16_t *_source1, volatile uint16_t *_source2 )
{
 81014bc:	b530      	push	{r4, r5, lr}
    // ADC3 packed microphone 1,4,5

    // convert to voltage
    // apply HANN_WINDOW_COEFF
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014be:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 81015a8 <copySamplesForFFT+0xec>
 81014c2:	4d3a      	ldr	r5, [pc, #232]	@ (81015ac <copySamplesForFFT+0xf0>)
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014c4:	4c3a      	ldr	r4, [pc, #232]	@ (81015b0 <copySamplesForFFT+0xf4>)
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014c6:	2300      	movs	r3, #0
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014c8:	8802      	ldrh	r2, [r0, #0]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014ca:	ecb5 7a01 	vldmia	r5!, {s14}
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014ce:	b292      	uxth	r2, r2
 81014d0:	ee07 2a90 	vmov	s15, r2
 81014d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014d8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014e0:	3006      	adds	r0, #6
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81014e6:	3106      	adds	r1, #6
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 81014e8:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 81014ec:	f831 2c06 	ldrh.w	r2, [r1, #-6]
 81014f0:	b292      	uxth	r2, r2
 81014f2:	ee07 2a90 	vmov	s15, r2
 81014f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014fa:	f503 7200 	add.w	r2, r3, #512	@ 0x200
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81014fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 8101502:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101506:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 810150a:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 810150e:	f830 2c04 	ldrh.w	r2, [r0, #-4]
 8101512:	b292      	uxth	r2, r2
 8101514:	ee07 2a90 	vmov	s15, r2
 8101518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810151c:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101520:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101524:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101528:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 810152c:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101530:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 8101534:	b292      	uxth	r2, r2
 8101536:	ee07 2a90 	vmov	s15, r2
 810153a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810153e:	f503 62c0 	add.w	r2, r3, #1536	@ 0x600
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101542:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101546:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810154a:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 810154e:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101552:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 8101556:	b292      	uxth	r2, r2
 8101558:	ee07 2a90 	vmov	s15, r2
 810155c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101560:	f503 6200 	add.w	r2, r3, #2048	@ 0x800
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101564:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101568:	eb04 0282 	add.w	r2, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810156c:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101570:	edc2 7a00 	vstr	s15, [r2]
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101574:	f831 2c02 	ldrh.w	r2, [r1, #-2]
 8101578:	b292      	uxth	r2, r2
 810157a:	ee07 2a90 	vmov	s15, r2
 810157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101582:	f503 6220 	add.w	r2, r3, #2560	@ 0xa00
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101586:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 810158a:	3301      	adds	r3, #1
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810158c:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101590:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 8101594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101598:	edc2 7a00 	vstr	s15, [r2]
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 810159c:	d194      	bne.n	81014c8 <copySamplesForFFT+0xc>
  }

  // set ready for FFT flag so base loop or an RTOS task can perform the op without blocking interrupts
  fft_samples_ready = TRUE;
 810159e:	4b05      	ldr	r3, [pc, #20]	@ (81015b4 <copySamplesForFFT+0xf8>)
 81015a0:	2201      	movs	r2, #1
 81015a2:	701a      	strb	r2, [r3, #0]
}
 81015a4:	bd30      	pop	{r4, r5, pc}
 81015a6:	bf00      	nop
 81015a8:	38533406 	.word	0x38533406
 81015ac:	0810ef80 	.word	0x0810ef80
 81015b0:	10012088 	.word	0x10012088
 81015b4:	1001508b 	.word	0x1001508b

081015b8 <ADC3DMATransferCompleteIRQCallback>:
{
 81015b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    HAL_GPIO_TogglePin(DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin);
 81015bc:	4840      	ldr	r0, [pc, #256]	@ (81016c0 <ADC3DMATransferCompleteIRQCallback+0x108>)
{
 81015be:	b087      	sub	sp, #28
    HAL_GPIO_TogglePin(DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin);
 81015c0:	2104      	movs	r1, #4
 81015c2:	f002 ff64 	bl	810448e <HAL_GPIO_TogglePin>
  setUserLED1State(TRUE);
 81015c6:	2001      	movs	r0, #1
 81015c8:	f000 fd16 	bl	8101ff8 <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 81015cc:	4a3d      	ldr	r2, [pc, #244]	@ (81016c4 <ADC3DMATransferCompleteIRQCallback+0x10c>)
 81015ce:	8813      	ldrh	r3, [r2, #0]
 81015d0:	3301      	adds	r3, #1
 81015d2:	b29b      	uxth	r3, r3
 81015d4:	2b14      	cmp	r3, #20
 81015d6:	8013      	strh	r3, [r2, #0]
 81015d8:	d105      	bne.n	81015e6 <ADC3DMATransferCompleteIRQCallback+0x2e>
    fft_op_skip_counter = 0;
 81015da:	2300      	movs	r3, #0
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 81015dc:	493a      	ldr	r1, [pc, #232]	@ (81016c8 <ADC3DMATransferCompleteIRQCallback+0x110>)
 81015de:	483b      	ldr	r0, [pc, #236]	@ (81016cc <ADC3DMATransferCompleteIRQCallback+0x114>)
    fft_op_skip_counter = 0;
 81015e0:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 81015e2:	f7ff ff6b 	bl	81014bc <copySamplesForFFT>
{
 81015e6:	2300      	movs	r3, #0
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 81015e8:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 81016dc <ADC3DMATransferCompleteIRQCallback+0x124>
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 81015ec:	4f38      	ldr	r7, [pc, #224]	@ (81016d0 <ADC3DMATransferCompleteIRQCallback+0x118>)
{
 81015ee:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 81015f2:	4619      	mov	r1, r3
 81015f4:	4618      	mov	r0, r3
 81015f6:	461c      	mov	r4, r3
 81015f8:	461d      	mov	r5, r3
 81015fa:	461e      	mov	r6, r3
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 81015fc:	f83c e012 	ldrh.w	lr, [ip, r2, lsl #1]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101600:	f102 0801 	add.w	r8, r2, #1
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101604:	fa16 f68e 	uxtah	r6, r6, lr
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101608:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 810160c:	fa15 f58e 	uxtah	r5, r5, lr
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101610:	f83c e018 	ldrh.w	lr, [ip, r8, lsl #1]
 8101614:	fa14 f48e 	uxtah	r4, r4, lr
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101618:	f102 0e02 	add.w	lr, r2, #2
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810161c:	3203      	adds	r2, #3
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 810161e:	f83c 901e 	ldrh.w	r9, [ip, lr, lsl #1]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101622:	f837 8018 	ldrh.w	r8, [r7, r8, lsl #1]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101626:	f837 e01e 	ldrh.w	lr, [r7, lr, lsl #1]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810162a:	f5b2 6f61 	cmp.w	r2, #3600	@ 0xe10
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 810162e:	fa10 f089 	uxtah	r0, r0, r9
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101632:	fa11 f188 	uxtah	r1, r1, r8
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101636:	fa13 f38e 	uxtah	r3, r3, lr
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810163a:	d1df      	bne.n	81015fc <ADC3DMATransferCompleteIRQCallback+0x44>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810163c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8101640:	fbb6 f6f2 	udiv	r6, r6, r2
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101644:	fbb5 f5f2 	udiv	r5, r5, r2
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101648:	fbb4 f4f2 	udiv	r4, r4, r2
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810164c:	fbb0 f0f2 	udiv	r0, r0, r2
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101650:	fbb3 f3f2 	udiv	r3, r3, r2
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101654:	fbb1 f1f2 	udiv	r1, r1, r2
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101658:	9402      	str	r4, [sp, #8]
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810165a:	9305      	str	r3, [sp, #20]
 810165c:	4c1d      	ldr	r4, [pc, #116]	@ (81016d4 <ADC3DMATransferCompleteIRQCallback+0x11c>)
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 810165e:	4a1e      	ldr	r2, [pc, #120]	@ (81016d8 <ADC3DMATransferCompleteIRQCallback+0x120>)
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101660:	9600      	str	r6, [sp, #0]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101662:	2300      	movs	r3, #0
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101664:	9501      	str	r5, [sp, #4]
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101666:	9003      	str	r0, [sp, #12]
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101668:	9104      	str	r1, [sp, #16]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 810166a:	4668      	mov	r0, sp
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 810166c:	f644 651e 	movw	r5, #19998	@ 0x4e1e
      channel_is_valid[_channel] = FALSE;
 8101670:	461e      	mov	r6, r3
      channel_is_valid[_channel] = TRUE;
 8101672:	2701      	movs	r7, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101674:	f850 cb04 	ldr.w	ip, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 8101678:	f5ac 41b1 	sub.w	r1, ip, #22656	@ 0x5880
 810167c:	3970      	subs	r1, #112	@ 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 810167e:	42a9      	cmp	r1, r5
 8101680:	d81b      	bhi.n	81016ba <ADC3DMATransferCompleteIRQCallback+0x102>
      channel_is_valid[_channel] = TRUE;
 8101682:	54e7      	strb	r7, [r4, r3]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101684:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8101688:	b289      	uxth	r1, r1
 810168a:	458c      	cmp	ip, r1
        adc_channel_dynamic_offsets[_channel]++;
 810168c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101690:	d90c      	bls.n	81016ac <ADC3DMATransferCompleteIRQCallback+0xf4>
        adc_channel_dynamic_offsets[_channel]++;
 8101692:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 8101694:	b289      	uxth	r1, r1
 8101696:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 810169a:	3301      	adds	r3, #1
 810169c:	2b06      	cmp	r3, #6
 810169e:	d1e9      	bne.n	8101674 <ADC3DMATransferCompleteIRQCallback+0xbc>
  setUserLED1State(FALSE);
 81016a0:	2000      	movs	r0, #0
}
 81016a2:	b007      	add	sp, #28
 81016a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  setUserLED1State(FALSE);
 81016a8:	f000 bca6 	b.w	8101ff8 <setUserLED1State>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 81016ac:	b289      	uxth	r1, r1
 81016ae:	458c      	cmp	ip, r1
 81016b0:	d2f3      	bcs.n	810169a <ADC3DMATransferCompleteIRQCallback+0xe2>
        adc_channel_dynamic_offsets[_channel]--;
 81016b2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 81016b6:	3901      	subs	r1, #1
 81016b8:	e7ec      	b.n	8101694 <ADC3DMATransferCompleteIRQCallback+0xdc>
      channel_is_valid[_channel] = FALSE;
 81016ba:	54e6      	strb	r6, [r4, r3]
 81016bc:	e7ed      	b.n	810169a <ADC3DMATransferCompleteIRQCallback+0xe2>
 81016be:	bf00      	nop
 81016c0:	58022000 	.word	0x58022000
 81016c4:	1001508c 	.word	0x1001508c
 81016c8:	10015e9e 	.word	0x10015e9e
 81016cc:	10017abe 	.word	0x10017abe
 81016d0:	1001508e 	.word	0x1001508e
 81016d4:	10000f40 	.word	0x10000f40
 81016d8:	1000005a 	.word	0x1000005a
 81016dc:	10016cae 	.word	0x10016cae

081016e0 <ADC3DMAHalfTransferIRQCallback>:
{
 81016e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    HAL_GPIO_TogglePin(DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin);
 81016e4:	483f      	ldr	r0, [pc, #252]	@ (81017e4 <ADC3DMAHalfTransferIRQCallback+0x104>)
{
 81016e6:	b087      	sub	sp, #28
    HAL_GPIO_TogglePin(DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin);
 81016e8:	2104      	movs	r1, #4
 81016ea:	f002 fed0 	bl	810448e <HAL_GPIO_TogglePin>
  setUserLED1State(TRUE);
 81016ee:	2001      	movs	r0, #1
 81016f0:	f000 fc82 	bl	8101ff8 <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 81016f4:	4a3c      	ldr	r2, [pc, #240]	@ (81017e8 <ADC3DMAHalfTransferIRQCallback+0x108>)
 81016f6:	8813      	ldrh	r3, [r2, #0]
 81016f8:	3301      	adds	r3, #1
 81016fa:	b29b      	uxth	r3, r3
 81016fc:	2b14      	cmp	r3, #20
 81016fe:	8013      	strh	r3, [r2, #0]
 8101700:	d105      	bne.n	810170e <ADC3DMAHalfTransferIRQCallback+0x2e>
    fft_op_skip_counter = 0;
 8101702:	2300      	movs	r3, #0
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 8101704:	4939      	ldr	r1, [pc, #228]	@ (81017ec <ADC3DMAHalfTransferIRQCallback+0x10c>)
 8101706:	483a      	ldr	r0, [pc, #232]	@ (81017f0 <ADC3DMAHalfTransferIRQCallback+0x110>)
    fft_op_skip_counter = 0;
 8101708:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 810170a:	f7ff fed7 	bl	81014bc <copySamplesForFFT>
{
 810170e:	2300      	movs	r3, #0
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101710:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 81017f0 <ADC3DMAHalfTransferIRQCallback+0x110>
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101714:	4f35      	ldr	r7, [pc, #212]	@ (81017ec <ADC3DMAHalfTransferIRQCallback+0x10c>)
{
 8101716:	461a      	mov	r2, r3
 8101718:	4619      	mov	r1, r3
 810171a:	4618      	mov	r0, r3
 810171c:	461c      	mov	r4, r3
 810171e:	461d      	mov	r5, r3
 8101720:	461e      	mov	r6, r3
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101722:	f83c e013 	ldrh.w	lr, [ip, r3, lsl #1]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101726:	f103 0801 	add.w	r8, r3, #1
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 810172a:	fa16 f68e 	uxtah	r6, r6, lr
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 810172e:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8101732:	fa15 f58e 	uxtah	r5, r5, lr
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101736:	f83c e018 	ldrh.w	lr, [ip, r8, lsl #1]
 810173a:	fa14 f48e 	uxtah	r4, r4, lr
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 810173e:	f103 0e02 	add.w	lr, r3, #2
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101742:	3303      	adds	r3, #3
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101744:	f83c 901e 	ldrh.w	r9, [ip, lr, lsl #1]
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101748:	f837 8018 	ldrh.w	r8, [r7, r8, lsl #1]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 810174c:	f837 e01e 	ldrh.w	lr, [r7, lr, lsl #1]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101750:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101754:	fa10 f089 	uxtah	r0, r0, r9
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101758:	fa11 f188 	uxtah	r1, r1, r8
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 810175c:	fa12 f28e 	uxtah	r2, r2, lr
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101760:	d1df      	bne.n	8101722 <ADC3DMAHalfTransferIRQCallback+0x42>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101762:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8101766:	fbb6 f6f3 	udiv	r6, r6, r3
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810176a:	fbb5 f5f3 	udiv	r5, r5, r3
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810176e:	fbb4 f4f3 	udiv	r4, r4, r3
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101772:	fbb0 f0f3 	udiv	r0, r0, r3
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101776:	fbb2 f2f3 	udiv	r2, r2, r3
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810177a:	fbb1 f1f3 	udiv	r1, r1, r3
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810177e:	9402      	str	r4, [sp, #8]
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101780:	9205      	str	r2, [sp, #20]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101782:	2300      	movs	r3, #0
 8101784:	4c1b      	ldr	r4, [pc, #108]	@ (81017f4 <ADC3DMAHalfTransferIRQCallback+0x114>)
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101786:	4a1c      	ldr	r2, [pc, #112]	@ (81017f8 <ADC3DMAHalfTransferIRQCallback+0x118>)
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101788:	9600      	str	r6, [sp, #0]
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810178a:	9501      	str	r5, [sp, #4]
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810178c:	9003      	str	r0, [sp, #12]
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810178e:	9104      	str	r1, [sp, #16]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101790:	4668      	mov	r0, sp
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101792:	f644 651e 	movw	r5, #19998	@ 0x4e1e
      channel_is_valid[_channel] = FALSE;
 8101796:	461e      	mov	r6, r3
      channel_is_valid[_channel] = TRUE;
 8101798:	2701      	movs	r7, #1
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 810179a:	f850 cb04 	ldr.w	ip, [r0], #4
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 810179e:	f5ac 41b1 	sub.w	r1, ip, #22656	@ 0x5880
 81017a2:	3970      	subs	r1, #112	@ 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81017a4:	42a9      	cmp	r1, r5
 81017a6:	d81b      	bhi.n	81017e0 <ADC3DMAHalfTransferIRQCallback+0x100>
      channel_is_valid[_channel] = TRUE;
 81017a8:	54e7      	strb	r7, [r4, r3]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81017aa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 81017ae:	b289      	uxth	r1, r1
 81017b0:	458c      	cmp	ip, r1
        adc_channel_dynamic_offsets[_channel]++;
 81017b2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81017b6:	d90c      	bls.n	81017d2 <ADC3DMAHalfTransferIRQCallback+0xf2>
        adc_channel_dynamic_offsets[_channel]++;
 81017b8:	3101      	adds	r1, #1
        adc_channel_dynamic_offsets[_channel]--;
 81017ba:	b289      	uxth	r1, r1
 81017bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81017c0:	3301      	adds	r3, #1
 81017c2:	2b06      	cmp	r3, #6
 81017c4:	d1e9      	bne.n	810179a <ADC3DMAHalfTransferIRQCallback+0xba>
  setUserLED1State(FALSE);
 81017c6:	2000      	movs	r0, #0
}
 81017c8:	b007      	add	sp, #28
 81017ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  setUserLED1State(FALSE);
 81017ce:	f000 bc13 	b.w	8101ff8 <setUserLED1State>
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 81017d2:	b289      	uxth	r1, r1
 81017d4:	458c      	cmp	ip, r1
 81017d6:	d2f3      	bcs.n	81017c0 <ADC3DMAHalfTransferIRQCallback+0xe0>
        adc_channel_dynamic_offsets[_channel]--;
 81017d8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 81017dc:	3901      	subs	r1, #1
 81017de:	e7ec      	b.n	81017ba <ADC3DMAHalfTransferIRQCallback+0xda>
      channel_is_valid[_channel] = FALSE;
 81017e0:	54e6      	strb	r6, [r4, r3]
 81017e2:	e7ed      	b.n	81017c0 <ADC3DMAHalfTransferIRQCallback+0xe0>
 81017e4:	58022000 	.word	0x58022000
 81017e8:	1001508c 	.word	0x1001508c
 81017ec:	1001508e 	.word	0x1001508e
 81017f0:	10016cae 	.word	0x10016cae
 81017f4:	10000f40 	.word	0x10000f40
 81017f8:	1000005a 	.word	0x1000005a

081017fc <HAL_UART_TxCpltCallback>:
  if(huart->Instance == USART1)
 81017fc:	6802      	ldr	r2, [r0, #0]
 81017fe:	4b03      	ldr	r3, [pc, #12]	@ (810180c <HAL_UART_TxCpltCallback+0x10>)
 8101800:	429a      	cmp	r2, r3
	  uart_tx_complete = 1; // Transmission completed, ready to send the next message
 8101802:	bf02      	ittt	eq
 8101804:	4b02      	ldreq	r3, [pc, #8]	@ (8101810 <HAL_UART_TxCpltCallback+0x14>)
 8101806:	2201      	moveq	r2, #1
 8101808:	701a      	strbeq	r2, [r3, #0]
}
 810180a:	4770      	bx	lr
 810180c:	40011000 	.word	0x40011000
 8101810:	10000058 	.word	0x10000058

08101814 <dspEntry>:
{
 8101814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101818:	ed2d 8b02 	vpush	{d8}
  ADC1->CR |= ADC_CR_BOOST;
 810181c:	4db2      	ldr	r5, [pc, #712]	@ (8101ae8 <dspEntry+0x2d4>)
  ADC3->CR |= ADC_CR_BOOST;
 810181e:	4cb3      	ldr	r4, [pc, #716]	@ (8101aec <dspEntry+0x2d8>)
    if ( fft_samples_ready )
 8101820:	f8df b328 	ldr.w	fp, [pc, #808]	@ 8101b4c <dspEntry+0x338>
{

  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
  {

    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101824:	4eb2      	ldr	r6, [pc, #712]	@ (8101af0 <dspEntry+0x2dc>)
{
 8101826:	b083      	sub	sp, #12
  IPCInitialize( );
 8101828:	f000 fb38 	bl	8101e9c <IPCInitialize>
  ADC1->CR |= ADC_CR_BOOST;
 810182c:	68ab      	ldr	r3, [r5, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 810182e:	4ab1      	ldr	r2, [pc, #708]	@ (8101af4 <dspEntry+0x2e0>)
 8101830:	48b1      	ldr	r0, [pc, #708]	@ (8101af8 <dspEntry+0x2e4>)
  ADC1->CR |= ADC_CR_BOOST;
 8101832:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8101836:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_BOOST;
 8101838:	68a3      	ldr	r3, [r4, #8]
 810183a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 810183e:	60a3      	str	r3, [r4, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101840:	2101      	movs	r1, #1
 8101842:	f002 fd09 	bl	8104258 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_CPLT_CB_ID, ADC3DMATransferCompleteIRQCallback);
 8101846:	4aad      	ldr	r2, [pc, #692]	@ (8101afc <dspEntry+0x2e8>)
 8101848:	48ab      	ldr	r0, [pc, #684]	@ (8101af8 <dspEntry+0x2e4>)
 810184a:	2100      	movs	r1, #0
 810184c:	f002 fd04 	bl	8104258 <HAL_DMA_RegisterCallback>
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101850:	4bab      	ldr	r3, [pc, #684]	@ (8101b00 <dspEntry+0x2ec>)
  ADC_Enable( &hadc1 );
 8101852:	48ac      	ldr	r0, [pc, #688]	@ (8101b04 <dspEntry+0x2f0>)
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101854:	691a      	ldr	r2, [r3, #16]
 8101856:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810185a:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 810185c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101860:	4aa9      	ldr	r2, [pc, #676]	@ (8101b08 <dspEntry+0x2f4>)
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101862:	6159      	str	r1, [r3, #20]
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101864:	619a      	str	r2, [r3, #24]
  DMA1_Stream0->M0AR = (uint32_t)adc1_read_buffer;
 8101866:	4aa9      	ldr	r2, [pc, #676]	@ (8101b0c <dspEntry+0x2f8>)
 8101868:	61da      	str	r2, [r3, #28]
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 810186a:	691a      	ldr	r2, [r3, #16]
 810186c:	f042 0201 	orr.w	r2, r2, #1
 8101870:	611a      	str	r2, [r3, #16]
  DMA1->LIFCR = DMA_LIFCR_CTCIF1;
 8101872:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8101876:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE | DMA_SxCR_CIRC;
 8101878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810187a:	f442 728c 	orr.w	r2, r2, #280	@ 0x118
 810187e:	629a      	str	r2, [r3, #40]	@ 0x28
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101880:	4aa3      	ldr	r2, [pc, #652]	@ (8101b10 <dspEntry+0x2fc>)
  DMA1_Stream1->NDTR = ADC3_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101882:	62d9      	str	r1, [r3, #44]	@ 0x2c
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101884:	631a      	str	r2, [r3, #48]	@ 0x30
  DMA1_Stream1->M0AR = (uint32_t)adc3_read_buffer;
 8101886:	4aa3      	ldr	r2, [pc, #652]	@ (8101b14 <dspEntry+0x300>)
 8101888:	635a      	str	r2, [r3, #52]	@ 0x34
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 810188a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810188c:	f042 0201 	orr.w	r2, r2, #1
 8101890:	629a      	str	r2, [r3, #40]	@ 0x28
  ADC_Enable( &hadc1 );
 8101892:	f001 f8c1 	bl	8102a18 <ADC_Enable>
  ADC_Enable( &hadc3 );
 8101896:	48a0      	ldr	r0, [pc, #640]	@ (8101b18 <dspEntry+0x304>)
 8101898:	f001 f8be 	bl	8102a18 <ADC_Enable>
  while(!(ADC1->ISR | ADC_ISR_ADRDY) || !(ADC3->ISR | ADC_ISR_ADRDY));
 810189c:	682b      	ldr	r3, [r5, #0]
 810189e:	6823      	ldr	r3, [r4, #0]
  ADC1->CR |= ADC_CR_ADSTART;
 81018a0:	68ab      	ldr	r3, [r5, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 81018a2:	4a9e      	ldr	r2, [pc, #632]	@ (8101b1c <dspEntry+0x308>)
  HAL_TIM_Base_Start( &htim3 );
 81018a4:	489e      	ldr	r0, [pc, #632]	@ (8101b20 <dspEntry+0x30c>)
  ADC1->CR |= ADC_CR_ADSTART;
 81018a6:	f043 0304 	orr.w	r3, r3, #4
 81018aa:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_ADSTART;
 81018ac:	68a3      	ldr	r3, [r4, #8]
 81018ae:	f043 0304 	orr.w	r3, r3, #4
 81018b2:	60a3      	str	r3, [r4, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 81018b4:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 81018b6:	f043 0302 	orr.w	r3, r3, #2
 81018ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
  TIM3->ARR = 750;
 81018bc:	4b99      	ldr	r3, [pc, #612]	@ (8101b24 <dspEntry+0x310>)
 81018be:	f240 22ee 	movw	r2, #750	@ 0x2ee
 81018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM3->CCR1 = 375;
 81018c4:	f240 1277 	movw	r2, #375	@ 0x177
 81018c8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCER |= TIM_CCER_CC1E;
 81018ca:	6a1a      	ldr	r2, [r3, #32]
 81018cc:	f042 0201 	orr.w	r2, r2, #1
 81018d0:	621a      	str	r2, [r3, #32]
  HAL_TIM_Base_Start( &htim3 );
 81018d2:	f004 f9af 	bl	8105c34 <HAL_TIM_Base_Start>
  arm_rfft_fast_init_f32( &fft_handler, FFT_BATCH_SIZE );
 81018d6:	4894      	ldr	r0, [pc, #592]	@ (8101b28 <dspEntry+0x314>)
 81018d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81018dc:	f006 fcca 	bl	8108274 <arm_rfft_fast_init_f32>
  float_union.valueu8[0] = 0x55;
 81018e0:	4b92      	ldr	r3, [pc, #584]	@ (8101b2c <dspEntry+0x318>)
 81018e2:	f04f 3255 	mov.w	r2, #1431655765	@ 0x55555555
 81018e6:	601a      	str	r2, [r3, #0]
    if ( fft_samples_ready )
 81018e8:	f89b 3000 	ldrb.w	r3, [fp]
 81018ec:	2b00      	cmp	r3, #0
 81018ee:	d0fb      	beq.n	81018e8 <dspEntry+0xd4>
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 81018f0:	4d8f      	ldr	r5, [pc, #572]	@ (8101b30 <dspEntry+0x31c>)
 81018f2:	2400      	movs	r4, #0
 81018f4:	1932      	adds	r2, r6, r4
 81018f6:	1929      	adds	r1, r5, r4
 81018f8:	488b      	ldr	r0, [pc, #556]	@ (8101b28 <dspEntry+0x314>)
 81018fa:	2300      	movs	r3, #0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 81018fc:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101900:	f006 fc4e 	bl	81081a0 <arm_rfft_fast_f32>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101904:	f5b4 5f40 	cmp.w	r4, #12288	@ 0x3000
 8101908:	d1f4      	bne.n	81018f4 <dspEntry+0xe0>
    {
#ifdef FFT_AVERAGING
      // compute magnitude, correct for dc offset, save value to current magnitude buffer

      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 810190a:	ed9f 8a8a 	vldr	s16, [pc, #552]	@ 8101b34 <dspEntry+0x320>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 810190e:	4f8a      	ldr	r7, [pc, #552]	@ (8101b38 <dspEntry+0x324>)
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101910:	2500      	movs	r5, #0
	  for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101912:	2400      	movs	r4, #0
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101914:	026b      	lsls	r3, r5, #9
 8101916:	eb03 0244 	add.w	r2, r3, r4, lsl #1
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 810191a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 810191e:	3301      	adds	r3, #1
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101920:	eb06 0282 	add.w	r2, r6, r2, lsl #2
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101928:	edd2 7a00 	vldr	s15, [r2]
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 810192c:	ed93 0a00 	vldr	s0, [r3]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101930:	ee20 0a08 	vmul.f32	s0, s0, s16
 8101934:	ee67 7a88 	vmul.f32	s15, s15, s16
  return sqrtf(_real * _real + _compl * _compl);
 8101938:	ee20 0a00 	vmul.f32	s0, s0, s0
 810193c:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8101940:	f00d f896 	bl	810ea70 <sqrtf>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101944:	f00d f866 	bl	810ea14 <log10f>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101948:	883b      	ldrh	r3, [r7, #0]

      // sampling for noise floor at startup
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 810194a:	f8df c204 	ldr.w	ip, [pc, #516]	@ 8101b50 <dspEntry+0x33c>
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 810194e:	497b      	ldr	r1, [pc, #492]	@ (8101b3c <dspEntry+0x328>)
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101950:	f8bc 2000 	ldrh.w	r2, [ip]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101954:	00e8      	lsls	r0, r5, #3
 8101956:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 810195a:	fa10 f383 	uxtah	r3, r0, r3
 810195e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8101962:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101966:	eb01 0383 	add.w	r3, r1, r3, lsl #2
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 810196a:	2a27      	cmp	r2, #39	@ 0x27
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 810196c:	ed83 0a00 	vstr	s0, [r3]
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101970:	d821      	bhi.n	81019b6 <dspEntry+0x1a2>
      {
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101972:	883b      	ldrh	r3, [r7, #0]
              > fft_noise_floor[_i] )
 8101974:	f8df e1d0 	ldr.w	lr, [pc, #464]	@ 8101b48 <dspEntry+0x334>
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101978:	fa10 f383 	uxtah	r3, r0, r3
 810197c:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 8101980:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8101984:	ed93 7a00 	vldr	s14, [r3]
              > fft_noise_floor[_i] )
 8101988:	eb0e 0384 	add.w	r3, lr, r4, lsl #2
 810198c:	edd3 7a00 	vldr	s15, [r3]
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              > fft_noise_floor[_i] )
 8101998:	ea4f 0884 	mov.w	r8, r4, lsl #2
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 810199c:	dc00      	bgt.n	81019a0 <dspEntry+0x18c>
            || ( noise_floor_samples == 0 ))
 810199e:	b952      	cbnz	r2, 81019b6 <dspEntry+0x1a2>
        {
          fft_noise_floor[_i] = fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i];
 81019a0:	883b      	ldrh	r3, [r7, #0]
 81019a2:	fa10 f383 	uxtah	r3, r0, r3
 81019a6:	eb04 2303 	add.w	r3, r4, r3, lsl #8
 81019aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 81019ae:	44c6      	add	lr, r8
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	f8ce 3000 	str.w	r3, [lr]
        }
      }

      // perform average calculation for this channel and magnitude index
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 81019b6:	eb04 23c5 	add.w	r3, r4, r5, lsl #11
 81019ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 81019be:	f8df e194 	ldr.w	lr, [pc, #404]	@ 8101b54 <dspEntry+0x340>
 81019c2:	f8d3 8000 	ldr.w	r8, [r3]
 81019c6:	eb04 2305 	add.w	r3, r4, r5, lsl #8
 81019ca:	eb0e 0383 	add.w	r3, lr, r3, lsl #2

      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 81019ce:	f04f 0901 	mov.w	r9, #1
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 81019d2:	f8c3 8000 	str.w	r8, [r3]
      {

        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 81019d6:	eb00 0809 	add.w	r8, r0, r9
 81019da:	eb04 2808 	add.w	r8, r4, r8, lsl #8
 81019de:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 81019e2:	edd8 7a00 	vldr	s15, [r8]
 81019e6:	ed93 7a00 	vldr	s14, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 81019ea:	f109 0901 	add.w	r9, r9, #1
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 81019ee:	ee77 7a87 	vadd.f32	s15, s15, s14
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 81019f2:	f1b9 0f08 	cmp.w	r9, #8
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 81019f6:	edc3 7a00 	vstr	s15, [r3]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 81019fa:	d1ec      	bne.n	81019d6 <dspEntry+0x1c2>
      }

      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 81019fc:	edd3 7a00 	vldr	s15, [r3]
 8101a00:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8101a04:	ee67 7a87 	vmul.f32	s15, s15, s14
	  for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101a08:	3401      	adds	r4, #1
 8101a0a:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101a0e:	edc3 7a00 	vstr	s15, [r3]
	  for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101a12:	f47f af7f 	bne.w	8101914 <dspEntry+0x100>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101a16:	3501      	adds	r5, #1
 8101a18:	2d06      	cmp	r5, #6
 8101a1a:	f47f af7a 	bne.w	8101912 <dspEntry+0xfe>
    noise_floor_samples++;
  }

  // increment fft buffer index for next iteration

  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a1e:	883b      	ldrh	r3, [r7, #0]
  boolean_t _anomaly_detected = FALSE;

  // for each channel
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
  {
    _largest_magnitude_db = -200.0f;
 8101a20:	eddf 5a47 	vldr	s11, [pc, #284]	@ 8101b40 <dspEntry+0x32c>
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
    {
      // save bin and magnitude of bin with largest magnitude relative to the
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
                  + fft_trigger_threshold_offset_db))
 8101a24:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8101b58 <dspEntry+0x344>
  if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101a28:	2a27      	cmp	r2, #39	@ 0x27
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a2a:	f103 0301 	add.w	r3, r3, #1
  boolean_t _anomaly_detected = FALSE;
 8101a2e:	f04f 0000 	mov.w	r0, #0
    noise_floor_samples++;
 8101a32:	bf98      	it	ls
 8101a34:	3201      	addls	r2, #1
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a36:	f003 0307 	and.w	r3, r3, #7
    noise_floor_samples++;
 8101a3a:	bf98      	it	ls
 8101a3c:	f8ac 2000 	strhls.w	r2, [ip]
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101a40:	803b      	strh	r3, [r7, #0]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101a42:	f8df c118 	ldr.w	ip, [pc, #280]	@ 8101b5c <dspEntry+0x348>
        _anomaly_detected = TRUE;
      }
    }

    // update ultrasonic POIs for this channel
    channel_is_active_anomaly[channel] = _channel_active;
 8101a46:	4f3f      	ldr	r7, [pc, #252]	@ (8101b44 <dspEntry+0x330>)
  uint16_t _largest_magnitude_bin = 0;
 8101a48:	ee06 0a10 	vmov	s12, r0
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101a4c:	4601      	mov	r1, r0
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101a4e:	4664      	mov	r4, ip
 8101a50:	222a      	movs	r2, #42	@ 0x2a
    _channel_active = FALSE;
 8101a52:	f04f 0900 	mov.w	r9, #0
    _largest_magnitude_db = -200.0f;
 8101a56:	eef0 7a65 	vmov.f32	s15, s11
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a5a:	ea4f 2a01 	mov.w	sl, r1, lsl #8
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a5e:	4d3a      	ldr	r5, [pc, #232]	@ (8101b48 <dspEntry+0x334>)
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a60:	eb0a 0302 	add.w	r3, sl, r2
 8101a64:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a68:	eb05 0582 	add.w	r5, r5, r2, lsl #2
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a6c:	ed93 7a00 	vldr	s14, [r3]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a70:	edd5 6a00 	vldr	s13, [r5]
                  + fft_trigger_threshold_offset_db))
 8101a74:	ed98 5a00 	vldr	s10, [r8]
 8101a78:	ee76 6a85 	vadd.f32	s13, s13, s10
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a7c:	ee37 7a66 	vsub.f32	s14, s14, s13
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101a88:	dd0c      	ble.n	8101aa4 <dspEntry+0x290>
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a8a:	edd3 7a00 	vldr	s15, [r3]
                             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a8e:	ed95 7a00 	vldr	s14, [r5]
                                    + fft_trigger_threshold_offset_db);
 8101a92:	edd8 6a00 	vldr	s13, [r8]
 8101a96:	ee37 7a26 	vadd.f32	s14, s14, s13
 8101a9a:	b293      	uxth	r3, r2
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
        _largest_magnitude_bin = bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW;
 8101aa0:	ee06 3a10 	vmov	s12, r3
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101aa4:	eb0a 0302 	add.w	r3, sl, r2
 8101aa8:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8101aac:	edd3 6a00 	vldr	s13, [r3]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101ab0:	4b25      	ldr	r3, [pc, #148]	@ (8101b48 <dspEntry+0x334>)
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101ab2:	7825      	ldrb	r5, [r4, #0]
 8101ab4:	9401      	str	r4, [sp, #4]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101ab6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8101aba:	ed93 7a00 	vldr	s14, [r3]
                         + fft_trigger_threshold_offset_db ))
 8101abe:	ed98 5a00 	vldr	s10, [r8]
 8101ac2:	ee37 7a05 	vadd.f32	s14, s14, s10
 8101ac6:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101aca:	eef4 6ac7 	vcmpe.f32	s13, s14
 8101ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101ad2:	db45      	blt.n	8101b60 <dspEntry+0x34c>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101ad4:	2b18      	cmp	r3, #24
 8101ad6:	d004      	beq.n	8101ae2 <dspEntry+0x2ce>
 8101ad8:	1c6b      	adds	r3, r5, #1
 8101ada:	b2db      	uxtb	r3, r3
      if ( fft_magnitude_trigger_counter[channel][bin_index] >= FFT_DETECT_THRESHOLD_RISING_COUNT )
 8101adc:	2b0d      	cmp	r3, #13
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101ade:	7023      	strb	r3, [r4, #0]
      if ( fft_magnitude_trigger_counter[channel][bin_index] >= FFT_DETECT_THRESHOLD_RISING_COUNT )
 8101ae0:	d942      	bls.n	8101b68 <dspEntry+0x354>
        fft_magnitude_trigger_counter[channel][bin_index] |= FFT_DETECT_BIN_ACTIVE_FLAG;
 8101ae2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8101ae6:	e03e      	b.n	8101b66 <dspEntry+0x352>
 8101ae8:	40022000 	.word	0x40022000
 8101aec:	58026000 	.word	0x58026000
 8101af0:	1000f088 	.word	0x1000f088
 8101af4:	081016e1 	.word	0x081016e1
 8101af8:	10000d5c 	.word	0x10000d5c
 8101afc:	081015b9 	.word	0x081015b9
 8101b00:	40020000 	.word	0x40020000
 8101b04:	10000eb0 	.word	0x10000eb0
 8101b08:	40022040 	.word	0x40022040
 8101b0c:	10016cae 	.word	0x10016cae
 8101b10:	58026040 	.word	0x58026040
 8101b14:	1001508e 	.word	0x1001508e
 8101b18:	10000e4c 	.word	0x10000e4c
 8101b1c:	5c001000 	.word	0x5c001000
 8101b20:	100188d8 	.word	0x100188d8
 8101b24:	40000400 	.word	0x40000400
 8101b28:	10000f1c 	.word	0x10000f1c
 8101b2c:	100188d0 	.word	0x100188d0
 8101b30:	10012088 	.word	0x10012088
 8101b34:	3c800000 	.word	0x3c800000
 8101b38:	10001480 	.word	0x10001480
 8101b3c:	10001484 	.word	0x10001484
 8101b40:	c3480000 	.word	0xc3480000
 8101b44:	10000f46 	.word	0x10000f46
 8101b48:	1000ec88 	.word	0x1000ec88
 8101b4c:	1001508b 	.word	0x1001508b
 8101b50:	1000ec84 	.word	0x1000ec84
 8101b54:	1000d484 	.word	0x1000d484
 8101b58:	10000068 	.word	0x10000068
 8101b5c:	10000f7c 	.word	0x10000f7c
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101b60:	2b00      	cmp	r3, #0
 8101b62:	f040 80b9 	bne.w	8101cd8 <dspEntry+0x4c4>
        fft_magnitude_trigger_counter[channel][bin_index] |= FFT_DETECT_BIN_ACTIVE_FLAG;
 8101b66:	7023      	strb	r3, [r4, #0]
      if ( fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_BIN_ACTIVE_FLAG )
 8101b68:	9b01      	ldr	r3, [sp, #4]
 8101b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8101b6e:	2b00      	cmp	r3, #0
        _anomaly_detected = TRUE;
 8101b70:	bfb8      	it	lt
 8101b72:	2001      	movlt	r0, #1
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101b74:	f102 0201 	add.w	r2, r2, #1
        _channel_active = TRUE;
 8101b78:	bfb8      	it	lt
 8101b7a:	4681      	movlt	r9, r0
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101b7c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8101b80:	f104 0401 	add.w	r4, r4, #1
 8101b84:	f47f af6b 	bne.w	8101a5e <dspEntry+0x24a>
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101b88:	4c61      	ldr	r4, [pc, #388]	@ (8101d10 <dspEntry+0x4fc>)
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101b8a:	4d62      	ldr	r5, [pc, #392]	@ (8101d14 <dspEntry+0x500>)
    channel_is_active_anomaly[channel] = _channel_active;
 8101b8c:	f807 9001 	strb.w	r9, [r7, r1]
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101b90:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8101b94:	edc3 7a00 	vstr	s15, [r3]
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101b98:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8101b9c:	eef8 7a46 	vcvt.f32.u32	s15, s12
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101ba0:	3101      	adds	r1, #1
 8101ba2:	2906      	cmp	r1, #6
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101ba4:	edc3 7a00 	vstr	s15, [r3]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101ba8:	f10c 0cd6 	add.w	ip, ip, #214	@ 0xd6
 8101bac:	f47f af4f 	bne.w	8101a4e <dspEntry+0x23a>
  }

  // increment previous/current detect state
  anomaly_detect_state_previous = anomaly_detect_state_current;
  anomaly_detect_state_current = _anomaly_detected;
 8101bb0:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 8101d5c <dspEntry+0x548>
      fft_results_ready = TRUE;
 8101bb4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8101d60 <dspEntry+0x54c>
  anomaly_detect_state_current = _anomaly_detected;
 8101bb8:	f889 0000 	strb.w	r0, [r9]

  setUserLED2State( anomaly_detect_state_current );
 8101bbc:	f000 fa26 	bl	810200c <setUserLED2State>
      fft_results_ready = TRUE;
 8101bc0:	2301      	movs	r3, #1
 8101bc2:	f888 3000 	strb.w	r3, [r8]
// Only capable of generating one set of values, does not handle multiple anomalies
static void anomalyUpdateCharacteristics( void )
{
  // Anomaly frequency, ** just potato averaging of active microphone frequencies **
  //if(!RUN_ONCE) printf("In perform anomalyUpdateCharacteristics\r\n");
  float _sum = 0.0f;
 8101bc6:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8101d18 <dspEntry+0x504>
  // sum of frequencies of active channels
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
  {
    if ( channel_is_active_anomaly[_channel] )
    {
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101bca:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8101d1c <dspEntry+0x508>
 8101bce:	ed9f 6a54 	vldr	s12, [pc, #336]	@ 8101d20 <dspEntry+0x50c>
      fft_samples_ready = FALSE;
 8101bd2:	2300      	movs	r3, #0
 8101bd4:	f88b 3000 	strb.w	r3, [fp]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101bd8:	461a      	mov	r2, r3
    if ( channel_is_active_anomaly[_channel] )
 8101bda:	5cb9      	ldrb	r1, [r7, r2]
 8101bdc:	b149      	cbz	r1, 8101bf2 <dspEntry+0x3de>
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101bde:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8101be2:	edd1 7a00 	vldr	s15, [r1]
 8101be6:	ee67 7a87 	vmul.f32	s15, s15, s14
      _active_channels++;
 8101bea:	3301      	adds	r3, #1
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101bec:	eee7 6a86 	vfma.f32	s13, s15, s12
      _active_channels++;
 8101bf0:	b2db      	uxtb	r3, r3
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101bf2:	3201      	adds	r2, #1
 8101bf4:	2a06      	cmp	r2, #6
 8101bf6:	d1f0      	bne.n	8101bda <dspEntry+0x3c6>
  if ( _active_channels == 0 )
  {
    anomaly_frequency = 20000.0f;
  }

  anomaly_frequency = _sum / _active_channels;
 8101bf8:	ee07 3a90 	vmov	s15, r3
 8101bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101c00:	4d48      	ldr	r5, [pc, #288]	@ (8101d24 <dspEntry+0x510>)

  // normalized frequency
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101c02:	4b49      	ldr	r3, [pc, #292]	@ (8101d28 <dspEntry+0x514>)
  anomaly_frequency = _sum / _active_channels;
 8101c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101c08:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8101d2c <dspEntry+0x518>
 8101c0c:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101d30 <dspEntry+0x51c>
  anomaly_frequency = _sum / _active_channels;
 8101c10:	ed85 7a00 	vstr	s14, [r5]
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8101c14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101c1c:	edc3 7a00 	vstr	s15, [r3]

  // magnitude, ** also potato but functional **
  float _largest = -200.0f;
 8101c20:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8101d34 <dspEntry+0x520>

  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101c24:	2300      	movs	r3, #0
  {
    if (( fft_channel_magnitude_db[_channel] > _largest )
 8101c26:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8101c2a:	ed92 7a00 	vldr	s14, [r2]
 8101c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101c36:	dd03      	ble.n	8101c40 <dspEntry+0x42c>
        && ( channel_is_active_anomaly[_channel] ))
 8101c38:	5cf9      	ldrb	r1, [r7, r3]
 8101c3a:	b109      	cbz	r1, 8101c40 <dspEntry+0x42c>
    {
      _largest = fft_channel_magnitude_db[_channel];
 8101c3c:	edd2 7a00 	vldr	s15, [r2]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101c40:	3301      	adds	r3, #1
 8101c42:	2b06      	cmp	r3, #6
 8101c44:	d1ef      	bne.n	8101c26 <dspEntry+0x412>
    }
  }

  anomaly_magnitude = _largest;
 8101c46:	4c3c      	ldr	r4, [pc, #240]	@ (8101d38 <dspEntry+0x524>)

  // update inter-processor communication (shared RAM region)
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101c48:	f899 0000 	ldrb.w	r0, [r9]
  anomaly_magnitude = _largest;
 8101c4c:	edc4 7a00 	vstr	s15, [r4]
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 8101c50:	f000 f93a 	bl	8101ec8 <IPCSetAnomalyDetectState>
  IPCSetAnomalyFrequency( anomaly_frequency );
 8101c54:	ed95 0a00 	vldr	s0, [r5]
 8101c58:	f000 f93c 	bl	8101ed4 <IPCSetAnomalyFrequency>
  IPCSetAnomalyMagnitudedB( anomaly_magnitude );
 8101c5c:	ed94 0a00 	vldr	s0, [r4]
      if(anomaly_detect_state_current & (((SKIP_N_SAMPLES_READY % 40) == 0) || (SKIP_N_SAMPLES_READY == 0)))
 8101c60:	4c36      	ldr	r4, [pc, #216]	@ (8101d3c <dspEntry+0x528>)
  IPCSetAnomalyMagnitudedB( anomaly_magnitude );
 8101c62:	f000 f93d 	bl	8101ee0 <IPCSetAnomalyMagnitudedB>
      if(anomaly_detect_state_current & (((SKIP_N_SAMPLES_READY % 40) == 0) || (SKIP_N_SAMPLES_READY == 0)))
 8101c66:	6823      	ldr	r3, [r4, #0]
 8101c68:	f899 1000 	ldrb.w	r1, [r9]
 8101c6c:	2028      	movs	r0, #40	@ 0x28
 8101c6e:	fb93 f2f0 	sdiv	r2, r3, r0
 8101c72:	fb00 3212 	mls	r2, r0, r2, r3
 8101c76:	2a00      	cmp	r2, #0
 8101c78:	d031      	beq.n	8101cde <dspEntry+0x4ca>
 8101c7a:	fab3 f283 	clz	r2, r3
 8101c7e:	0952      	lsrs	r2, r2, #5
 8101c80:	4211      	tst	r1, r2
 8101c82:	d02e      	beq.n	8101ce2 <dspEntry+0x4ce>
    	    MX_X_CUBE_AI_Process(fft_frequency_magnitude_db_average);
 8101c84:	482e      	ldr	r0, [pc, #184]	@ (8101d40 <dspEntry+0x52c>)
 8101c86:	f005 fa4d 	bl	8107124 <MX_X_CUBE_AI_Process>
      	    SKIP_N_SAMPLES_READY = 1;
 8101c8a:	2301      	movs	r3, #1
      else if (anomaly_detect_state_current) SKIP_N_SAMPLES_READY++;
 8101c8c:	6023      	str	r3, [r4, #0]
      user_button_state_previous = user_button_state_current;
 8101c8e:	4d2d      	ldr	r5, [pc, #180]	@ (8101d44 <dspEntry+0x530>)
 8101c90:	4c2d      	ldr	r4, [pc, #180]	@ (8101d48 <dspEntry+0x534>)
 8101c92:	782b      	ldrb	r3, [r5, #0]
 8101c94:	7023      	strb	r3, [r4, #0]
      user_button_state_current = getUserButtonState( );
 8101c96:	f000 f9a3 	bl	8101fe0 <getUserButtonState>
 8101c9a:	7028      	strb	r0, [r5, #0]
      if ( user_button_state_current && !user_button_state_previous )
 8101c9c:	b138      	cbz	r0, 8101cae <dspEntry+0x49a>
 8101c9e:	7823      	ldrb	r3, [r4, #0]
 8101ca0:	b92b      	cbnz	r3, 8101cae <dspEntry+0x49a>
        uart_data_flag = (uart_data_flag ? FALSE : TRUE);
 8101ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8101d4c <dspEntry+0x538>)
 8101ca4:	7813      	ldrb	r3, [r2, #0]
 8101ca6:	fab3 f383 	clz	r3, r3
 8101caa:	095b      	lsrs	r3, r3, #5
 8101cac:	7013      	strb	r3, [r2, #0]
      if ( fft_results_ready && uart_data_flag )
 8101cae:	f898 3000 	ldrb.w	r3, [r8]
 8101cb2:	2b00      	cmp	r3, #0
 8101cb4:	f43f ae18 	beq.w	81018e8 <dspEntry+0xd4>
 8101cb8:	4b24      	ldr	r3, [pc, #144]	@ (8101d4c <dspEntry+0x538>)
 8101cba:	781b      	ldrb	r3, [r3, #0]
 8101cbc:	2b00      	cmp	r3, #0
 8101cbe:	f43f ae13 	beq.w	81018e8 <dspEntry+0xd4>
        usart_data_skip_counter++;
 8101cc2:	4a23      	ldr	r2, [pc, #140]	@ (8101d50 <dspEntry+0x53c>)
 8101cc4:	8813      	ldrh	r3, [r2, #0]
 8101cc6:	3301      	adds	r3, #1
 8101cc8:	b29b      	uxth	r3, r3
        if ( usart_data_skip_counter >= USART_SKIP_N_DATA_SETS )
 8101cca:	2b04      	cmp	r3, #4
 8101ccc:	d80d      	bhi.n	8101cea <dspEntry+0x4d6>
        usart_data_skip_counter++;
 8101cce:	8013      	strh	r3, [r2, #0]
        fft_results_ready = FALSE;
 8101cd0:	2300      	movs	r3, #0
 8101cd2:	f888 3000 	strb.w	r3, [r8]
 8101cd6:	e607      	b.n	81018e8 <dspEntry+0xd4>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101cd8:	3d01      	subs	r5, #1
 8101cda:	b2eb      	uxtb	r3, r5
 8101cdc:	e6fe      	b.n	8101adc <dspEntry+0x2c8>
      if(anomaly_detect_state_current & (((SKIP_N_SAMPLES_READY % 40) == 0) || (SKIP_N_SAMPLES_READY == 0)))
 8101cde:	2201      	movs	r2, #1
 8101ce0:	e7ce      	b.n	8101c80 <dspEntry+0x46c>
      else if (anomaly_detect_state_current) SKIP_N_SAMPLES_READY++;
 8101ce2:	2900      	cmp	r1, #0
 8101ce4:	d0d3      	beq.n	8101c8e <dspEntry+0x47a>
 8101ce6:	3301      	adds	r3, #1
 8101ce8:	e7d0      	b.n	8101c8c <dspEntry+0x478>
          usart_data_skip_counter = 0;
 8101cea:	2300      	movs	r3, #0
 8101cec:	8013      	strh	r3, [r2, #0]
          status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 8101cee:	4919      	ldr	r1, [pc, #100]	@ (8101d54 <dspEntry+0x540>)
 8101cf0:	4819      	ldr	r0, [pc, #100]	@ (8101d58 <dspEntry+0x544>)
          while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8101cf2:	4c13      	ldr	r4, [pc, #76]	@ (8101d40 <dspEntry+0x52c>)
 8101cf4:	4d18      	ldr	r5, [pc, #96]	@ (8101d58 <dspEntry+0x544>)
          status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 8101cf6:	2204      	movs	r2, #4
 8101cf8:	f004 fab4 	bl	8106264 <HAL_UART_Transmit_DMA>
          while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8101cfc:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8101d00:	4621      	mov	r1, r4
 8101d02:	4628      	mov	r0, r5
 8101d04:	f004 faae 	bl	8106264 <HAL_UART_Transmit_DMA>
                == HAL_BUSY );
 8101d08:	2802      	cmp	r0, #2
 8101d0a:	d1e1      	bne.n	8101cd0 <dspEntry+0x4bc>
 8101d0c:	e7f6      	b.n	8101cfc <dspEntry+0x4e8>
 8101d0e:	bf00      	nop
 8101d10:	10000f64 	.word	0x10000f64
 8101d14:	10000f4c 	.word	0x10000f4c
 8101d18:	00000000 	.word	0x00000000
 8101d1c:	486a6000 	.word	0x486a6000
 8101d20:	3b000000 	.word	0x3b000000
 8101d24:	10000f3c 	.word	0x10000f3c
 8101d28:	10000f38 	.word	0x10000f38
 8101d2c:	469c4000 	.word	0x469c4000
 8101d30:	47c35000 	.word	0x47c35000
 8101d34:	c3480000 	.word	0xc3480000
 8101d38:	10000f34 	.word	0x10000f34
 8101d3c:	10000f14 	.word	0x10000f14
 8101d40:	1000d484 	.word	0x1000d484
 8101d44:	10000f19 	.word	0x10000f19
 8101d48:	10000f1a 	.word	0x10000f1a
 8101d4c:	10000f1b 	.word	0x10000f1b
 8101d50:	10015088 	.word	0x10015088
 8101d54:	100188d0 	.word	0x100188d0
 8101d58:	1001899c 	.word	0x1001899c
 8101d5c:	10000f18 	.word	0x10000f18
 8101d60:	1001508a 	.word	0x1001508a

08101d64 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101d66:	b08d      	sub	sp, #52	@ 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d68:	2214      	movs	r2, #20
 8101d6a:	2100      	movs	r1, #0
 8101d6c:	a807      	add	r0, sp, #28
 8101d6e:	f009 fbbb 	bl	810b4e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d72:	4b45      	ldr	r3, [pc, #276]	@ (8101e88 <MX_GPIO_Init+0x124>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101d74:	4f45      	ldr	r7, [pc, #276]	@ (8101e8c <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8101d7a:	4e45      	ldr	r6, [pc, #276]	@ (8101e90 <MX_GPIO_Init+0x12c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d7c:	f042 0202 	orr.w	r2, r2, #2
 8101d80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101d84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101d88:	f002 0202 	and.w	r2, r2, #2
 8101d8c:	9200      	str	r2, [sp, #0]
 8101d8e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101d94:	f042 0208 	orr.w	r2, r2, #8
 8101d98:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101d9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101da0:	f002 0208 	and.w	r2, r2, #8
 8101da4:	9201      	str	r2, [sp, #4]
 8101da6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8101da8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101db0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101db4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101db8:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8101dbc:	9202      	str	r2, [sp, #8]
 8101dbe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101dc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101dc4:	f042 0204 	orr.w	r2, r2, #4
 8101dc8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101dcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101dd0:	f002 0204 	and.w	r2, r2, #4
 8101dd4:	9203      	str	r2, [sp, #12]
 8101dd6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101dd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101ddc:	f042 0220 	orr.w	r2, r2, #32
 8101de0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101de4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101de8:	f002 0220 	and.w	r2, r2, #32
 8101dec:	9204      	str	r2, [sp, #16]
 8101dee:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101df0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101df4:	f042 0201 	orr.w	r2, r2, #1
 8101df8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101dfc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101e00:	f002 0201 	and.w	r2, r2, #1
 8101e04:	9205      	str	r2, [sp, #20]
 8101e06:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8101e10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8101e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101e1c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101e1e:	4638      	mov	r0, r7
 8101e20:	2200      	movs	r2, #0
 8101e22:	f242 0104 	movw	r1, #8196	@ 0x2004
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101e26:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8101e28:	f002 fb2c 	bl	8104484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8101e2c:	2200      	movs	r2, #0
 8101e2e:	4630      	mov	r0, r6
 8101e30:	2104      	movs	r1, #4
 8101e32:	f002 fb27 	bl	8104484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e36:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8101e38:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e3a:	2308      	movs	r3, #8
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 8101e3c:	a907      	add	r1, sp, #28
 8101e3e:	4815      	ldr	r0, [pc, #84]	@ (8101e94 <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8101e40:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e42:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 8101e46:	f002 fa31 	bl	81042ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = DEBUG_GPIO_0_Pin|LD2_Pin;
 8101e4a:	f242 0304 	movw	r3, #8196	@ 0x2004
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101e4e:	a907      	add	r1, sp, #28
 8101e50:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101e52:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e56:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101e5a:	f002 fa27 	bl	81042ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8101e5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101e62:	a907      	add	r1, sp, #28
 8101e64:	480c      	ldr	r0, [pc, #48]	@ (8101e98 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e66:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8101e68:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8101e6c:	f002 fa1e 	bl	81042ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8101e70:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101e72:	a907      	add	r1, sp, #28
 8101e74:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101e76:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e7a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101e7e:	f002 fa15 	bl	81042ac <HAL_GPIO_Init>

}
 8101e82:	b00d      	add	sp, #52	@ 0x34
 8101e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8101e86:	bf00      	nop
 8101e88:	58024400 	.word	0x58024400
 8101e8c:	58022000 	.word	0x58022000
 8101e90:	58022400 	.word	0x58022400
 8101e94:	58020c00 	.word	0x58020c00
 8101e98:	58020800 	.word	0x58020800

08101e9c <IPCInitialize>:
} shared_memory __attribute__((section(".ipc_data")));

void IPCInitialize( void )
{
  // only initialize a few, the others are constantly updated by DSP or others
  shared_memory.voice_volume_normalized = 0.5f;
 8101e9c:	4b09      	ldr	r3, [pc, #36]	@ (8101ec4 <IPCInitialize+0x28>)
 8101e9e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8101ea2:	601a      	str	r2, [r3, #0]
  shared_memory.voice_mute_active = FALSE;
 8101ea4:	2200      	movs	r2, #0
 8101ea6:	711a      	strb	r2, [r3, #4]
  shared_memory.anomaly_detection_active = FALSE;
 8101ea8:	715a      	strb	r2, [r3, #5]
  shared_memory.lock = FALSE;
 8101eaa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  shared_memory.alarm_mute = FALSE;
 8101eae:	719a      	strb	r2, [r3, #6]
  shared_memory.anomaly_vector[0] = 0;
 8101eb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  shared_memory.anomaly_vector[1] = 0;
 8101eb4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  shared_memory.anomaly_vector[2] = 0;
 8101eb8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
  shared_memory.predicted_region  = -1;
 8101ebc:	22ff      	movs	r2, #255	@ 0xff
 8101ebe:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
}
 8101ec2:	4770      	bx	lr
 8101ec4:	10000000 	.word	0x10000000

08101ec8 <IPCSetAnomalyDetectState>:
  return shared_memory.anomaly_detection_active;
}

void IPCSetAnomalyDetectState( boolean_t new_state )
{
  shared_memory.anomaly_detection_active = new_state;
 8101ec8:	4b01      	ldr	r3, [pc, #4]	@ (8101ed0 <IPCSetAnomalyDetectState+0x8>)
 8101eca:	7158      	strb	r0, [r3, #5]
}
 8101ecc:	4770      	bx	lr
 8101ece:	bf00      	nop
 8101ed0:	10000000 	.word	0x10000000

08101ed4 <IPCSetAnomalyFrequency>:
  return shared_memory.anomaly_frequency;
}

void IPCSetAnomalyFrequency( float new_freq )
{
  shared_memory.anomaly_frequency = new_freq;
 8101ed4:	4b01      	ldr	r3, [pc, #4]	@ (8101edc <IPCSetAnomalyFrequency+0x8>)
 8101ed6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8101eda:	4770      	bx	lr
 8101edc:	10000000 	.word	0x10000000

08101ee0 <IPCSetAnomalyMagnitudedB>:
  return shared_memory.anomaly_magnitude_db;
}

void IPCSetAnomalyMagnitudedB( float new_mag )
{
  shared_memory.anomaly_magnitude_db = new_mag;
 8101ee0:	4b01      	ldr	r3, [pc, #4]	@ (8101ee8 <IPCSetAnomalyMagnitudedB+0x8>)
 8101ee2:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8101ee6:	4770      	bx	lr
 8101ee8:	10000000 	.word	0x10000000

08101eec <IPCGetPredictedRegion>:
  shared_memory.alarm_mute = new_state;
}

int8_t IPCGetPredictedRegion( void )
{
	return shared_memory.predicted_region;
 8101eec:	4b02      	ldr	r3, [pc, #8]	@ (8101ef8 <IPCGetPredictedRegion+0xc>)
 8101eee:	f893 004b 	ldrb.w	r0, [r3, #75]	@ 0x4b
}
 8101ef2:	b240      	sxtb	r0, r0
 8101ef4:	4770      	bx	lr
 8101ef6:	bf00      	nop
 8101ef8:	10000000 	.word	0x10000000

08101efc <IPCSetPredictedRegion>:

void IPCSetPredictedRegion( int8_t region)
{
	shared_memory.predicted_region = region;
 8101efc:	4b01      	ldr	r3, [pc, #4]	@ (8101f04 <IPCSetPredictedRegion+0x8>)
 8101efe:	f883 004b 	strb.w	r0, [r3, #75]	@ 0x4b
}
 8101f02:	4770      	bx	lr
 8101f04:	10000000 	.word	0x10000000

08101f08 <_write>:
  * @brief  The application entry point.
  * @retval int
  */

int _write(int file, char *ptr, int len)
{
 8101f08:	b530      	push	{r4, r5, lr}
 8101f0a:	4610      	mov	r0, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f0c:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8101f0e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8101f12:	4283      	cmp	r3, r0
 8101f14:	db00      	blt.n	8101f18 <_write+0x10>
	{
		ITM_SendChar(*ptr++);
	}
	return len;
}
 8101f16:	bd30      	pop	{r4, r5, pc}
 8101f18:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	@ 0xe80
 8101f1c:	07e5      	lsls	r5, r4, #31
 8101f1e:	d507      	bpl.n	8101f30 <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8101f20:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8101f24:	07e4      	lsls	r4, r4, #31
 8101f26:	d503      	bpl.n	8101f30 <_write+0x28>
		ITM_SendChar(*ptr++);
 8101f28:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8101f2a:	6815      	ldr	r5, [r2, #0]
 8101f2c:	b115      	cbz	r5, 8101f34 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8101f2e:	7014      	strb	r4, [r2, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101f30:	3301      	adds	r3, #1
 8101f32:	e7ee      	b.n	8101f12 <_write+0xa>
      __NOP();
 8101f34:	bf00      	nop
 8101f36:	e7f8      	b.n	8101f2a <_write+0x22>

08101f38 <main>:

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101f38:	4c26      	ldr	r4, [pc, #152]	@ (8101fd4 <main+0x9c>)
 8101f3a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
{
 8101f3e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101f40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101f44:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8101f48:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8101f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f50:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101f52:	9300      	str	r3, [sp, #0]
 8101f54:	9b00      	ldr	r3, [sp, #0]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f56:	f002 faa3 	bl	81044a0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */

  HAL_PWREx_ClearPendingEvent();
 8101f5a:	f002 faeb 	bl	8104534 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101f5e:	2201      	movs	r2, #1
 8101f60:	2102      	movs	r1, #2
 8101f62:	2000      	movs	r0, #0
 8101f64:	f002 faa4 	bl	81044b0 <HAL_PWREx_EnterSTOPMode>

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101f68:	4b1b      	ldr	r3, [pc, #108]	@ (8101fd8 <main+0xa0>)
 8101f6a:	681b      	ldr	r3, [r3, #0]
 8101f6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8101f70:	2b07      	cmp	r3, #7
 8101f72:	4b1a      	ldr	r3, [pc, #104]	@ (8101fdc <main+0xa4>)
 8101f74:	bf0b      	itete	eq
 8101f76:	f8d3 2104 	ldreq.w	r2, [r3, #260]	@ 0x104
 8101f7a:	f8d3 2114 	ldrne.w	r2, [r3, #276]	@ 0x114
 8101f7e:	f042 0201 	orreq.w	r2, r2, #1
 8101f82:	f042 0201 	orrne.w	r2, r2, #1
 8101f86:	bf0c      	ite	eq
 8101f88:	f8c3 2104 	streq.w	r2, [r3, #260]	@ 0x104
 8101f8c:	f8c3 2114 	strne.w	r2, [r3, #276]	@ 0x114

  __HAL_RCC_CRC_CLK_ENABLE();
 8101f90:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8101f94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8101f98:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8101f9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8101fa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8101fa4:	9301      	str	r3, [sp, #4]
 8101fa6:	9b01      	ldr	r3, [sp, #4]

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101fa8:	f000 fae2 	bl	8102570 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101fac:	f7ff feda 	bl	8101d64 <MX_GPIO_Init>
  MX_DMA_Init();
 8101fb0:	f7ff fa44 	bl	810143c <MX_DMA_Init>
  MX_TIM3_Init();
 8101fb4:	f000 f902 	bl	81021bc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8101fb8:	f000 f98e 	bl	81022d8 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8101fbc:	f7ff f918 	bl	81011f0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8101fc0:	f7ff f8aa 	bl	8101118 <MX_ADC1_Init>
  MX_X_CUBE_AI_Init();
 8101fc4:	f005 f86c 	bl	81070a0 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  MX_USART1_UART_Init();
 8101fc8:	f000 f954 	bl	8102274 <MX_USART1_UART_Init>

  dspEntry( );
 8101fcc:	f7ff fc22 	bl	8101814 <dspEntry>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101fd0:	e7fe      	b.n	8101fd0 <main+0x98>
 8101fd2:	bf00      	nop
 8101fd4:	58024400 	.word	0x58024400
 8101fd8:	e000ed00 	.word	0xe000ed00
 8101fdc:	58026400 	.word	0x58026400

08101fe0 <getUserButtonState>:
}

/* USER CODE BEGIN 4 */

boolean_t getUserButtonState ( void )
{
 8101fe0:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin) ? TRUE : FALSE);
 8101fe2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8101fe6:	4803      	ldr	r0, [pc, #12]	@ (8101ff4 <getUserButtonState+0x14>)
 8101fe8:	f002 fa46 	bl	8104478 <HAL_GPIO_ReadPin>
}
 8101fec:	3800      	subs	r0, #0
 8101fee:	bf18      	it	ne
 8101ff0:	2001      	movne	r0, #1
 8101ff2:	bd08      	pop	{r3, pc}
 8101ff4:	58020800 	.word	0x58020800

08101ff8 <setUserLED1State>:

void setUserLED1State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 8101ff8:	fab0 f280 	clz	r2, r0
 8101ffc:	0952      	lsrs	r2, r2, #5
 8101ffe:	4802      	ldr	r0, [pc, #8]	@ (8102008 <setUserLED1State+0x10>)
 8102000:	2104      	movs	r1, #4
 8102002:	f002 ba3f 	b.w	8104484 <HAL_GPIO_WritePin>
 8102006:	bf00      	nop
 8102008:	58022400 	.word	0x58022400

0810200c <setUserLED2State>:
}

void setUserLED2State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 810200c:	fab0 f280 	clz	r2, r0
 8102010:	0952      	lsrs	r2, r2, #5
 8102012:	4802      	ldr	r0, [pc, #8]	@ (810201c <setUserLED2State+0x10>)
 8102014:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8102018:	f002 ba34 	b.w	8104484 <HAL_GPIO_WritePin>
 810201c:	58022000 	.word	0x58022000

08102020 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102020:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102022:	e7fe      	b.n	8102022 <Error_Handler+0x2>

08102024 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102024:	4b07      	ldr	r3, [pc, #28]	@ (8102044 <HAL_MspInit+0x20>)
 8102026:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 810202a:	f042 0202 	orr.w	r2, r2, #2
 810202e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8102032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
{
 8102036:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102038:	f003 0302 	and.w	r3, r3, #2
 810203c:	9301      	str	r3, [sp, #4]
 810203e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102040:	b002      	add	sp, #8
 8102042:	4770      	bx	lr
 8102044:	58024400 	.word	0x58024400

08102048 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102048:	e7fe      	b.n	8102048 <NMI_Handler>

0810204a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810204a:	e7fe      	b.n	810204a <HardFault_Handler>

0810204c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810204c:	e7fe      	b.n	810204c <MemManage_Handler>

0810204e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810204e:	e7fe      	b.n	810204e <BusFault_Handler>

08102050 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102050:	e7fe      	b.n	8102050 <UsageFault_Handler>

08102052 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102052:	4770      	bx	lr

08102054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8102054:	4770      	bx	lr

08102056 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8102056:	4770      	bx	lr

08102058 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102058:	f000 bad8 	b.w	810260c <HAL_IncTick>

0810205c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 810205c:	4801      	ldr	r0, [pc, #4]	@ (8102064 <DMA1_Stream0_IRQHandler+0x8>)
 810205e:	f001 be59 	b.w	8103d14 <HAL_DMA_IRQHandler>
 8102062:	bf00      	nop
 8102064:	10000dd4 	.word	0x10000dd4

08102068 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8102068:	4801      	ldr	r0, [pc, #4]	@ (8102070 <DMA1_Stream1_IRQHandler+0x8>)
 810206a:	f001 be53 	b.w	8103d14 <HAL_DMA_IRQHandler>
 810206e:	bf00      	nop
 8102070:	10000d5c 	.word	0x10000d5c

08102074 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8102074:	4801      	ldr	r0, [pc, #4]	@ (810207c <USART1_IRQHandler+0x8>)
 8102076:	f004 b991 	b.w	810639c <HAL_UART_IRQHandler>
 810207a:	bf00      	nop
 810207c:	10018aa8 	.word	0x10018aa8

08102080 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102080:	4801      	ldr	r0, [pc, #4]	@ (8102088 <USART3_IRQHandler+0x8>)
 8102082:	f004 b98b 	b.w	810639c <HAL_UART_IRQHandler>
 8102086:	bf00      	nop
 8102088:	1001899c 	.word	0x1001899c

0810208c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 810208c:	4801      	ldr	r0, [pc, #4]	@ (8102094 <DMA2_Stream0_IRQHandler+0x8>)
 810208e:	f001 be41 	b.w	8103d14 <HAL_DMA_IRQHandler>
 8102092:	bf00      	nop
 8102094:	10018a30 	.word	0x10018a30

08102098 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102098:	4801      	ldr	r0, [pc, #4]	@ (81020a0 <DMA1_Stream7_IRQHandler+0x8>)
 810209a:	f001 be3b 	b.w	8103d14 <HAL_DMA_IRQHandler>
 810209e:	bf00      	nop
 81020a0:	10018924 	.word	0x10018924

081020a4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 81020a4:	2001      	movs	r0, #1
 81020a6:	4770      	bx	lr

081020a8 <_kill>:

int _kill(int pid, int sig)
{
 81020a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 81020aa:	f009 fa7f 	bl	810b5ac <__errno>
 81020ae:	2316      	movs	r3, #22
 81020b0:	6003      	str	r3, [r0, #0]
	return -1;
}
 81020b2:	f04f 30ff 	mov.w	r0, #4294967295
 81020b6:	bd08      	pop	{r3, pc}

081020b8 <_exit>:

void _exit (int status)
{
 81020b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 81020ba:	f009 fa77 	bl	810b5ac <__errno>
 81020be:	2316      	movs	r3, #22
 81020c0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 81020c2:	e7fe      	b.n	81020c2 <_exit+0xa>

081020c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81020c4:	b570      	push	{r4, r5, r6, lr}
 81020c6:	460d      	mov	r5, r1
 81020c8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81020ca:	460e      	mov	r6, r1
 81020cc:	1b73      	subs	r3, r6, r5
 81020ce:	429c      	cmp	r4, r3
 81020d0:	dc01      	bgt.n	81020d6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 81020d2:	4620      	mov	r0, r4
 81020d4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 81020d6:	f3af 8000 	nop.w
 81020da:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81020de:	e7f5      	b.n	81020cc <_read+0x8>

081020e0 <_close>:
}

int _close(int file)
{
	return -1;
}
 81020e0:	f04f 30ff 	mov.w	r0, #4294967295
 81020e4:	4770      	bx	lr

081020e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 81020e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81020ea:	604b      	str	r3, [r1, #4]
	return 0;
}
 81020ec:	2000      	movs	r0, #0
 81020ee:	4770      	bx	lr

081020f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 81020f0:	2001      	movs	r0, #1
 81020f2:	4770      	bx	lr

081020f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 81020f4:	2000      	movs	r0, #0
 81020f6:	4770      	bx	lr

081020f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81020f8:	4a0b      	ldr	r2, [pc, #44]	@ (8102128 <_sbrk+0x30>)
 81020fa:	6811      	ldr	r1, [r2, #0]
{
 81020fc:	b510      	push	{r4, lr}
 81020fe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8102100:	b909      	cbnz	r1, 8102106 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8102102:	490a      	ldr	r1, [pc, #40]	@ (810212c <_sbrk+0x34>)
 8102104:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102106:	6810      	ldr	r0, [r2, #0]
 8102108:	4909      	ldr	r1, [pc, #36]	@ (8102130 <_sbrk+0x38>)
 810210a:	4c0a      	ldr	r4, [pc, #40]	@ (8102134 <_sbrk+0x3c>)
 810210c:	4403      	add	r3, r0
 810210e:	1b09      	subs	r1, r1, r4
 8102110:	428b      	cmp	r3, r1
 8102112:	d906      	bls.n	8102122 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8102114:	f009 fa4a 	bl	810b5ac <__errno>
 8102118:	230c      	movs	r3, #12
 810211a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 810211c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8102120:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8102122:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8102124:	e7fc      	b.n	8102120 <_sbrk+0x28>
 8102126:	bf00      	nop
 8102128:	100188d4 	.word	0x100188d4
 810212c:	1001ad20 	.word	0x1001ad20
 8102130:	10048000 	.word	0x10048000
 8102134:	00001000 	.word	0x00001000

08102138 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8102138:	6802      	ldr	r2, [r0, #0]
 810213a:	4b09      	ldr	r3, [pc, #36]	@ (8102160 <HAL_TIM_Base_MspInit+0x28>)
 810213c:	429a      	cmp	r2, r3
{
 810213e:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 8102140:	d10c      	bne.n	810215c <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102142:	4b08      	ldr	r3, [pc, #32]	@ (8102164 <HAL_TIM_Base_MspInit+0x2c>)
 8102144:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8102148:	f042 0202 	orr.w	r2, r2, #2
 810214c:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8102150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102154:	f003 0302 	and.w	r3, r3, #2
 8102158:	9301      	str	r3, [sp, #4]
 810215a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 810215c:	b002      	add	sp, #8
 810215e:	4770      	bx	lr
 8102160:	40000400 	.word	0x40000400
 8102164:	58024400 	.word	0x58024400

08102168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102168:	b510      	push	{r4, lr}
 810216a:	4604      	mov	r4, r0
 810216c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810216e:	2214      	movs	r2, #20
 8102170:	2100      	movs	r1, #0
 8102172:	a801      	add	r0, sp, #4
 8102174:	f009 f9b8 	bl	810b4e8 <memset>
  if(timHandle->Instance==TIM3)
 8102178:	6822      	ldr	r2, [r4, #0]
 810217a:	4b0d      	ldr	r3, [pc, #52]	@ (81021b0 <HAL_TIM_MspPostInit+0x48>)
 810217c:	429a      	cmp	r2, r3
 810217e:	d115      	bne.n	81021ac <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102180:	4b0c      	ldr	r3, [pc, #48]	@ (81021b4 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102182:	480d      	ldr	r0, [pc, #52]	@ (81021b8 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8102188:	f042 0202 	orr.w	r2, r2, #2
 810218c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8102190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102194:	f003 0302 	and.w	r3, r3, #2
 8102198:	9300      	str	r3, [sp, #0]
 810219a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810219c:	2210      	movs	r2, #16
 810219e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81021a0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021a2:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81021a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81021a8:	f002 f880 	bl	81042ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81021ac:	b006      	add	sp, #24
 81021ae:	bd10      	pop	{r4, pc}
 81021b0:	40000400 	.word	0x40000400
 81021b4:	58024400 	.word	0x58024400
 81021b8:	58020400 	.word	0x58020400

081021bc <MX_TIM3_Init>:
{
 81021bc:	b510      	push	{r4, lr}
 81021be:	b08e      	sub	sp, #56	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81021c0:	2210      	movs	r2, #16
 81021c2:	2100      	movs	r1, #0
 81021c4:	a803      	add	r0, sp, #12
 81021c6:	f009 f98f 	bl	810b4e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81021ca:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 81021cc:	221c      	movs	r2, #28
 81021ce:	4621      	mov	r1, r4
 81021d0:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81021d4:	e9cd 4400 	strd	r4, r4, [sp]
 81021d8:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81021da:	f009 f985 	bl	810b4e8 <memset>
  htim3.Instance = TIM3;
 81021de:	4823      	ldr	r0, [pc, #140]	@ (810226c <MX_TIM3_Init+0xb0>)
 81021e0:	4b23      	ldr	r3, [pc, #140]	@ (8102270 <MX_TIM3_Init+0xb4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81021e2:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 81021e4:	e9c0 3400 	strd	r3, r4, [r0]
  htim3.Init.Period = 750;
 81021e8:	f240 23ee 	movw	r3, #750	@ 0x2ee
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81021ec:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81021f0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81021f2:	f003 fdc1 	bl	8105d78 <HAL_TIM_Base_Init>
 81021f6:	b108      	cbz	r0, 81021fc <MX_TIM3_Init+0x40>
    Error_Handler();
 81021f8:	f7ff ff12 	bl	8102020 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81021fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102200:	481a      	ldr	r0, [pc, #104]	@ (810226c <MX_TIM3_Init+0xb0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102202:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102204:	a903      	add	r1, sp, #12
 8102206:	f003 fee3 	bl	8105fd0 <HAL_TIM_ConfigClockSource>
 810220a:	b108      	cbz	r0, 8102210 <MX_TIM3_Init+0x54>
    Error_Handler();
 810220c:	f7ff ff08 	bl	8102020 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102210:	4816      	ldr	r0, [pc, #88]	@ (810226c <MX_TIM3_Init+0xb0>)
 8102212:	f003 fde1 	bl	8105dd8 <HAL_TIM_PWM_Init>
 8102216:	b108      	cbz	r0, 810221c <MX_TIM3_Init+0x60>
    Error_Handler();
 8102218:	f7ff ff02 	bl	8102020 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 810221c:	2320      	movs	r3, #32
 810221e:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102220:	4812      	ldr	r0, [pc, #72]	@ (810226c <MX_TIM3_Init+0xb0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102222:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102224:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102226:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102228:	f003 ff8c 	bl	8106144 <HAL_TIMEx_MasterConfigSynchronization>
 810222c:	b108      	cbz	r0, 8102232 <MX_TIM3_Init+0x76>
    Error_Handler();
 810222e:	f7ff fef7 	bl	8102020 <Error_Handler>
  sConfigOC.Pulse = 400;
 8102232:	2270      	movs	r2, #112	@ 0x70
 8102234:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8102238:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810223c:	480b      	ldr	r0, [pc, #44]	@ (810226c <MX_TIM3_Init+0xb0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810223e:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102240:	a907      	add	r1, sp, #28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102242:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102244:	920b      	str	r2, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102246:	f003 fe3d 	bl	8105ec4 <HAL_TIM_PWM_ConfigChannel>
 810224a:	b108      	cbz	r0, 8102250 <MX_TIM3_Init+0x94>
    Error_Handler();
 810224c:	f7ff fee8 	bl	8102020 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102250:	4806      	ldr	r0, [pc, #24]	@ (810226c <MX_TIM3_Init+0xb0>)
 8102252:	220c      	movs	r2, #12
 8102254:	a907      	add	r1, sp, #28
 8102256:	f003 fe35 	bl	8105ec4 <HAL_TIM_PWM_ConfigChannel>
 810225a:	b108      	cbz	r0, 8102260 <MX_TIM3_Init+0xa4>
    Error_Handler();
 810225c:	f7ff fee0 	bl	8102020 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8102260:	4802      	ldr	r0, [pc, #8]	@ (810226c <MX_TIM3_Init+0xb0>)
 8102262:	f7ff ff81 	bl	8102168 <HAL_TIM_MspPostInit>
}
 8102266:	b00e      	add	sp, #56	@ 0x38
 8102268:	bd10      	pop	{r4, pc}
 810226a:	bf00      	nop
 810226c:	100188d8 	.word	0x100188d8
 8102270:	40000400 	.word	0x40000400

08102274 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8102274:	4816      	ldr	r0, [pc, #88]	@ (81022d0 <MX_USART1_UART_Init+0x5c>)
  huart1.Init.BaudRate = 115200;
 8102276:	4a17      	ldr	r2, [pc, #92]	@ (81022d4 <MX_USART1_UART_Init+0x60>)
{
 8102278:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 810227a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 810227e:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8102282:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8102284:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8102286:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810228a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810228e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102292:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart1.Init.Parity = UART_PARITY_NONE;
 8102296:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8102298:	f004 fcad 	bl	8106bf6 <HAL_UART_Init>
 810229c:	b108      	cbz	r0, 81022a2 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 810229e:	f7ff febf 	bl	8102020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81022a2:	480b      	ldr	r0, [pc, #44]	@ (81022d0 <MX_USART1_UART_Init+0x5c>)
 81022a4:	2100      	movs	r1, #0
 81022a6:	f004 fd17 	bl	8106cd8 <HAL_UARTEx_SetTxFifoThreshold>
 81022aa:	b108      	cbz	r0, 81022b0 <MX_USART1_UART_Init+0x3c>
  {
    Error_Handler();
 81022ac:	f7ff feb8 	bl	8102020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81022b0:	4807      	ldr	r0, [pc, #28]	@ (81022d0 <MX_USART1_UART_Init+0x5c>)
 81022b2:	2100      	movs	r1, #0
 81022b4:	f004 fd30 	bl	8106d18 <HAL_UARTEx_SetRxFifoThreshold>
 81022b8:	b108      	cbz	r0, 81022be <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 81022ba:	f7ff feb1 	bl	8102020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 81022be:	4804      	ldr	r0, [pc, #16]	@ (81022d0 <MX_USART1_UART_Init+0x5c>)
 81022c0:	f004 fcef 	bl	8106ca2 <HAL_UARTEx_DisableFifoMode>
 81022c4:	b118      	cbz	r0, 81022ce <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 81022c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 81022ca:	f7ff bea9 	b.w	8102020 <Error_Handler>
}
 81022ce:	bd08      	pop	{r3, pc}
 81022d0:	10018aa8 	.word	0x10018aa8
 81022d4:	40011000 	.word	0x40011000

081022d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 81022d8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81022da:	4816      	ldr	r0, [pc, #88]	@ (8102334 <MX_USART3_UART_Init+0x5c>)
  huart3.Init.BaudRate = 1800000;
 81022dc:	4a16      	ldr	r2, [pc, #88]	@ (8102338 <MX_USART3_UART_Init+0x60>)
 81022de:	4b17      	ldr	r3, [pc, #92]	@ (810233c <MX_USART3_UART_Init+0x64>)
 81022e0:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81022e4:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 81022e6:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 81022e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81022ec:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81022f0:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81022f4:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart3.Init.Parity = UART_PARITY_NONE;
 81022f8:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81022fa:	f004 fc7c 	bl	8106bf6 <HAL_UART_Init>
 81022fe:	b108      	cbz	r0, 8102304 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
 8102300:	f7ff fe8e 	bl	8102020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102304:	480b      	ldr	r0, [pc, #44]	@ (8102334 <MX_USART3_UART_Init+0x5c>)
 8102306:	2100      	movs	r1, #0
 8102308:	f004 fce6 	bl	8106cd8 <HAL_UARTEx_SetTxFifoThreshold>
 810230c:	b108      	cbz	r0, 8102312 <MX_USART3_UART_Init+0x3a>
  {
    Error_Handler();
 810230e:	f7ff fe87 	bl	8102020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102312:	4808      	ldr	r0, [pc, #32]	@ (8102334 <MX_USART3_UART_Init+0x5c>)
 8102314:	2100      	movs	r1, #0
 8102316:	f004 fcff 	bl	8106d18 <HAL_UARTEx_SetRxFifoThreshold>
 810231a:	b108      	cbz	r0, 8102320 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 810231c:	f7ff fe80 	bl	8102020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102320:	4804      	ldr	r0, [pc, #16]	@ (8102334 <MX_USART3_UART_Init+0x5c>)
 8102322:	f004 fcbe 	bl	8106ca2 <HAL_UARTEx_DisableFifoMode>
 8102326:	b118      	cbz	r0, 8102330 <MX_USART3_UART_Init+0x58>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 810232c:	f7ff be78 	b.w	8102020 <Error_Handler>
}
 8102330:	bd08      	pop	{r3, pc}
 8102332:	bf00      	nop
 8102334:	1001899c 	.word	0x1001899c
 8102338:	40004800 	.word	0x40004800
 810233c:	001b7740 	.word	0x001b7740

08102340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102340:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102342:	2214      	movs	r2, #20
{
 8102344:	b0ba      	sub	sp, #232	@ 0xe8
 8102346:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102348:	2100      	movs	r1, #0
 810234a:	eb0d 0002 	add.w	r0, sp, r2
 810234e:	f009 f8cb 	bl	810b4e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102352:	22c0      	movs	r2, #192	@ 0xc0
 8102354:	2100      	movs	r1, #0
 8102356:	a80a      	add	r0, sp, #40	@ 0x28
 8102358:	f009 f8c6 	bl	810b4e8 <memset>
  if(uartHandle->Instance==USART3)
 810235c:	6833      	ldr	r3, [r6, #0]
 810235e:	4a54      	ldr	r2, [pc, #336]	@ (81024b0 <HAL_UART_MspInit+0x170>)
 8102360:	4293      	cmp	r3, r2
 8102362:	d153      	bne.n	810240c <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102364:	2202      	movs	r2, #2
 8102366:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102368:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810236a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810236e:	f002 fac1 	bl	81048f4 <HAL_RCCEx_PeriphCLKConfig>
 8102372:	b108      	cbz	r0, 8102378 <HAL_UART_MspInit+0x38>
    {
      Error_Handler();
 8102374:	f7ff fe54 	bl	8102020 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102378:	4b4e      	ldr	r3, [pc, #312]	@ (81024b4 <HAL_UART_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream7;
 810237a:	4c4f      	ldr	r4, [pc, #316]	@ (81024b8 <HAL_UART_MspInit+0x178>)
    __HAL_RCC_USART3_CLK_ENABLE();
 810237c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8102380:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8102384:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8102388:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 810238c:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8102390:	9201      	str	r2, [sp, #4]
 8102392:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102394:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8102398:	f042 0202 	orr.w	r2, r2, #2
 810239c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 81023a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023a4:	f003 0302 	and.w	r3, r3, #2
 81023a8:	9302      	str	r3, [sp, #8]
 81023aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023ac:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 81023b0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023b2:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023b4:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023b8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81023ba:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023bc:	483f      	ldr	r0, [pc, #252]	@ (81024bc <HAL_UART_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81023be:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81023c0:	e9cd 5507 	strd	r5, r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023c4:	f001 ff72 	bl	81042ac <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 81023c8:	f8df c100 	ldr.w	ip, [pc, #256]	@ 81024cc <HAL_UART_MspInit+0x18c>
 81023cc:	232e      	movs	r3, #46	@ 0x2e
 81023ce:	e9c4 c300 	strd	ip, r3, [r4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81023d2:	2340      	movs	r3, #64	@ 0x40
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81023d4:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81023d8:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 81023da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81023de:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 81023e2:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81023e6:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81023ea:	f000 ff83 	bl	81032f4 <HAL_DMA_Init>
 81023ee:	b108      	cbz	r0, 81023f4 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 81023f0:	f7ff fe16 	bl	8102020 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 81023f4:	2200      	movs	r2, #0
 81023f6:	2027      	movs	r0, #39	@ 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 81023f8:	67f4      	str	r4, [r6, #124]	@ 0x7c
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 81023fa:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 81023fc:	63a6      	str	r6, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 81023fe:	f000 fd87 	bl	8102f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102402:	2027      	movs	r0, #39	@ 0x27

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8102404:	f000 fdb6 	bl	8102f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8102408:	b03a      	add	sp, #232	@ 0xe8
 810240a:	bd70      	pop	{r4, r5, r6, pc}
  else if(uartHandle->Instance==USART1)
 810240c:	4a2c      	ldr	r2, [pc, #176]	@ (81024c0 <HAL_UART_MspInit+0x180>)
 810240e:	4293      	cmp	r3, r2
 8102410:	d1fa      	bne.n	8102408 <HAL_UART_MspInit+0xc8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8102412:	2201      	movs	r2, #1
 8102414:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102416:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8102418:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810241c:	f002 fa6a 	bl	81048f4 <HAL_RCCEx_PeriphCLKConfig>
 8102420:	b108      	cbz	r0, 8102426 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8102422:	f7ff fdfd 	bl	8102020 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8102426:	4b23      	ldr	r3, [pc, #140]	@ (81024b4 <HAL_UART_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102428:	4824      	ldr	r0, [pc, #144]	@ (81024bc <HAL_UART_MspInit+0x17c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 810242a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    hdma_usart1_tx.Instance = DMA2_Stream0;
 810242e:	4c25      	ldr	r4, [pc, #148]	@ (81024c4 <HAL_UART_MspInit+0x184>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8102430:	f042 0210 	orr.w	r2, r2, #16
 8102434:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8102438:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 810243c:	f002 0210 	and.w	r2, r2, #16
 8102440:	9203      	str	r2, [sp, #12]
 8102442:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102444:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8102448:	f042 0202 	orr.w	r2, r2, #2
 810244c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8102450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102454:	f003 0302 	and.w	r3, r3, #2
 8102458:	9304      	str	r3, [sp, #16]
 810245a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810245c:	22c0      	movs	r2, #192	@ 0xc0
 810245e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102460:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102462:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102466:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8102468:	2307      	movs	r3, #7
 810246a:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810246c:	e9cd 5507 	strd	r5, r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102470:	f001 ff1c 	bl	81042ac <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8102474:	4914      	ldr	r1, [pc, #80]	@ (81024c8 <HAL_UART_MspInit+0x188>)
 8102476:	232a      	movs	r3, #42	@ 0x2a
 8102478:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810247c:	2340      	movs	r3, #64	@ 0x40
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810247e:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8102482:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102488:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 810248c:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102490:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8102494:	f000 ff2e 	bl	81032f4 <HAL_DMA_Init>
 8102498:	b108      	cbz	r0, 810249e <HAL_UART_MspInit+0x15e>
      Error_Handler();
 810249a:	f7ff fdc1 	bl	8102020 <Error_Handler>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 810249e:	2200      	movs	r2, #0
 81024a0:	2025      	movs	r0, #37	@ 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 81024a2:	67f4      	str	r4, [r6, #124]	@ 0x7c
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 81024a4:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 81024a6:	63a6      	str	r6, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 81024a8:	f000 fd32 	bl	8102f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 81024ac:	2025      	movs	r0, #37	@ 0x25
 81024ae:	e7a9      	b.n	8102404 <HAL_UART_MspInit+0xc4>
 81024b0:	40004800 	.word	0x40004800
 81024b4:	58024400 	.word	0x58024400
 81024b8:	10018924 	.word	0x10018924
 81024bc:	58020400 	.word	0x58020400
 81024c0:	40011000 	.word	0x40011000
 81024c4:	10018a30 	.word	0x10018a30
 81024c8:	40020410 	.word	0x40020410
 81024cc:	400200b8 	.word	0x400200b8

081024d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81024d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8102508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81024d4:	f7fe fe0e 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81024d8:	480c      	ldr	r0, [pc, #48]	@ (810250c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81024da:	490d      	ldr	r1, [pc, #52]	@ (8102510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81024dc:	4a0d      	ldr	r2, [pc, #52]	@ (8102514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81024e0:	e002      	b.n	81024e8 <LoopCopyDataInit>

081024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81024e6:	3304      	adds	r3, #4

081024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81024ec:	d3f9      	bcc.n	81024e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8102518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81024f0:	4c0a      	ldr	r4, [pc, #40]	@ (810251c <LoopFillZerobss+0x22>)
  movs r3, #0
 81024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81024f4:	e001      	b.n	81024fa <LoopFillZerobss>

081024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81024f8:	3204      	adds	r2, #4

081024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81024fc:	d3fb      	bcc.n	81024f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81024fe:	f009 f85b 	bl	810b5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102502:	f7ff fd19 	bl	8101f38 <main>
  bx  lr
 8102506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102508:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810250c:	10000050 	.word	0x10000050
  ldr r1, =_edata
 8102510:	10000d3c 	.word	0x10000d3c
  ldr r2, =_sidata
 8102514:	081af528 	.word	0x081af528
  ldr r2, =_sbss
 8102518:	10000d40 	.word	0x10000d40
  ldr r4, =_ebss
 810251c:	1001ad1c 	.word	0x1001ad1c

08102520 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102520:	e7fe      	b.n	8102520 <ADC3_IRQHandler>
	...

08102524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102524:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102526:	4b0f      	ldr	r3, [pc, #60]	@ (8102564 <HAL_InitTick+0x40>)
 8102528:	781a      	ldrb	r2, [r3, #0]
{
 810252a:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 810252c:	b90a      	cbnz	r2, 8102532 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 810252e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8102530:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8102536:	fbb3 f3f2 	udiv	r3, r3, r2
 810253a:	4a0b      	ldr	r2, [pc, #44]	@ (8102568 <HAL_InitTick+0x44>)
 810253c:	6810      	ldr	r0, [r2, #0]
 810253e:	fbb0 f0f3 	udiv	r0, r0, r3
 8102542:	f000 fd25 	bl	8102f90 <HAL_SYSTICK_Config>
 8102546:	4604      	mov	r4, r0
 8102548:	2800      	cmp	r0, #0
 810254a:	d1f0      	bne.n	810252e <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810254c:	2d0f      	cmp	r5, #15
 810254e:	d8ee      	bhi.n	810252e <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102550:	4602      	mov	r2, r0
 8102552:	4629      	mov	r1, r5
 8102554:	f04f 30ff 	mov.w	r0, #4294967295
 8102558:	f000 fcda 	bl	8102f10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810255c:	4b03      	ldr	r3, [pc, #12]	@ (810256c <HAL_InitTick+0x48>)
 810255e:	4620      	mov	r0, r4
 8102560:	601d      	str	r5, [r3, #0]
  return HAL_OK;
 8102562:	e7e5      	b.n	8102530 <HAL_InitTick+0xc>
 8102564:	1000006c 	.word	0x1000006c
 8102568:	10000054 	.word	0x10000054
 810256c:	10000070 	.word	0x10000070

08102570 <HAL_Init>:
{
 8102570:	b513      	push	{r0, r1, r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102572:	4c21      	ldr	r4, [pc, #132]	@ (81025f8 <HAL_Init+0x88>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102574:	4a21      	ldr	r2, [pc, #132]	@ (81025fc <HAL_Init+0x8c>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102576:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 810257a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810257e:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8102582:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 8102586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810258a:	9301      	str	r3, [sp, #4]
 810258c:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810258e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	@ 0x400
 8102592:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102596:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810259a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810259e:	f8c2 3400 	str.w	r3, [r2, #1024]	@ 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81025a2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	@ 0x400
 81025a6:	f043 0301 	orr.w	r3, r3, #1
 81025aa:	f8c2 3400 	str.w	r3, [r2, #1024]	@ 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81025ae:	2003      	movs	r0, #3
 81025b0:	f000 fc9c 	bl	8102eec <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81025b4:	f001 ffc8 	bl	8104548 <HAL_RCC_GetSysClockFreq>
 81025b8:	69a2      	ldr	r2, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81025ba:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81025bc:	4910      	ldr	r1, [pc, #64]	@ (8102600 <HAL_Init+0x90>)
 81025be:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81025c2:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81025c6:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81025c8:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81025ca:	f002 021f 	and.w	r2, r2, #31
 81025ce:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81025d0:	f003 031f 	and.w	r3, r3, #31
 81025d4:	40d8      	lsrs	r0, r3
 81025d6:	4b0b      	ldr	r3, [pc, #44]	@ (8102604 <HAL_Init+0x94>)
 81025d8:	6018      	str	r0, [r3, #0]
  SystemCoreClock = SystemD2Clock;
 81025da:	4b0b      	ldr	r3, [pc, #44]	@ (8102608 <HAL_Init+0x98>)
 81025dc:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81025de:	200f      	movs	r0, #15
 81025e0:	f7ff ffa0 	bl	8102524 <HAL_InitTick>
 81025e4:	4604      	mov	r4, r0
 81025e6:	b920      	cbnz	r0, 81025f2 <HAL_Init+0x82>
  HAL_MspInit();
 81025e8:	f7ff fd1c 	bl	8102024 <HAL_MspInit>
}
 81025ec:	4620      	mov	r0, r4
 81025ee:	b002      	add	sp, #8
 81025f0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 81025f2:	2401      	movs	r4, #1
 81025f4:	e7fa      	b.n	81025ec <HAL_Init+0x7c>
 81025f6:	bf00      	nop
 81025f8:	58024400 	.word	0x58024400
 81025fc:	40024000 	.word	0x40024000
 8102600:	0810ef70 	.word	0x0810ef70
 8102604:	10000050 	.word	0x10000050
 8102608:	10000054 	.word	0x10000054

0810260c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 810260c:	4a03      	ldr	r2, [pc, #12]	@ (810261c <HAL_IncTick+0x10>)
 810260e:	4b04      	ldr	r3, [pc, #16]	@ (8102620 <HAL_IncTick+0x14>)
 8102610:	6811      	ldr	r1, [r2, #0]
 8102612:	781b      	ldrb	r3, [r3, #0]
 8102614:	440b      	add	r3, r1
 8102616:	6013      	str	r3, [r2, #0]
}
 8102618:	4770      	bx	lr
 810261a:	bf00      	nop
 810261c:	10018b3c 	.word	0x10018b3c
 8102620:	1000006c 	.word	0x1000006c

08102624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8102624:	4b01      	ldr	r3, [pc, #4]	@ (810262c <HAL_GetTick+0x8>)
 8102626:	6818      	ldr	r0, [r3, #0]
}
 8102628:	4770      	bx	lr
 810262a:	bf00      	nop
 810262c:	10018b3c 	.word	0x10018b3c

08102630 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8102630:	4b01      	ldr	r3, [pc, #4]	@ (8102638 <HAL_GetREVID+0x8>)
 8102632:	6818      	ldr	r0, [r3, #0]
}
 8102634:	0c00      	lsrs	r0, r0, #16
 8102636:	4770      	bx	lr
 8102638:	5c001000 	.word	0x5c001000

0810263c <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810263c:	4a03      	ldr	r2, [pc, #12]	@ (810264c <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 810263e:	6853      	ldr	r3, [r2, #4]
 8102640:	ea23 0300 	bic.w	r3, r3, r0
 8102644:	430b      	orrs	r3, r1
 8102646:	6053      	str	r3, [r2, #4]
}
 8102648:	4770      	bx	lr
 810264a:	bf00      	nop
 810264c:	58000400 	.word	0x58000400

08102650 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102650:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102652:	0dcc      	lsrs	r4, r1, #23
 8102654:	f004 0404 	and.w	r4, r4, #4
 8102658:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 810265a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 810265e:	5903      	ldr	r3, [r0, r4]
 8102660:	2507      	movs	r5, #7
 8102662:	408d      	lsls	r5, r1
 8102664:	ea23 0305 	bic.w	r3, r3, r5
 8102668:	408a      	lsls	r2, r1
 810266a:	4313      	orrs	r3, r2
 810266c:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810266e:	bd30      	pop	{r4, r5, pc}

08102670 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102670:	6880      	ldr	r0, [r0, #8]
}
 8102672:	f000 0001 	and.w	r0, r0, #1
 8102676:	4770      	bx	lr

08102678 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102678:	6880      	ldr	r0, [r0, #8]
}
 810267a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 810267e:	4770      	bx	lr

08102680 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102682:	2300      	movs	r3, #0
 8102684:	9301      	str	r3, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102686:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 810268a:	2b01      	cmp	r3, #1
{
 810268c:	4605      	mov	r5, r0
 810268e:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8102690:	f000 81c0 	beq.w	8102a14 <HAL_ADC_ConfigChannel+0x394>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102694:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8102696:	2201      	movs	r2, #1
 8102698:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810269c:	4620      	mov	r0, r4
 810269e:	f7ff ffeb 	bl	8102678 <LL_ADC_REG_IsConversionOngoing>
 81026a2:	2800      	cmp	r0, #0
 81026a4:	f040 816f 	bne.w	8102986 <HAL_ADC_ConfigChannel+0x306>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81026a8:	680b      	ldr	r3, [r1, #0]
 81026aa:	f3c3 0013 	ubfx	r0, r3, #0, #20
 81026ae:	f3c3 6184 	ubfx	r1, r3, #26, #5
 81026b2:	2800      	cmp	r0, #0
 81026b4:	d169      	bne.n	810278a <HAL_ADC_ConfigChannel+0x10a>
 81026b6:	408a      	lsls	r2, r1
 81026b8:	69e3      	ldr	r3, [r4, #28]
 81026ba:	4313      	orrs	r3, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81026bc:	6872      	ldr	r2, [r6, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81026be:	61e3      	str	r3, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81026c0:	0990      	lsrs	r0, r2, #6
 81026c2:	f000 000c 	and.w	r0, r0, #12
 81026c6:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 81026ca:	f002 021f 	and.w	r2, r2, #31
 81026ce:	f85c 3000 	ldr.w	r3, [ip, r0]
 81026d2:	271f      	movs	r7, #31
 81026d4:	4097      	lsls	r7, r2
 81026d6:	ea23 0307 	bic.w	r3, r3, r7
 81026da:	4091      	lsls	r1, r2
 81026dc:	430b      	orrs	r3, r1
 81026de:	f84c 3000 	str.w	r3, [ip, r0]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81026e2:	4620      	mov	r0, r4
 81026e4:	f7ff ffc8 	bl	8102678 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81026e8:	68a3      	ldr	r3, [r4, #8]
 81026ea:	f003 0308 	and.w	r3, r3, #8
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81026ee:	4303      	orrs	r3, r0
 81026f0:	d140      	bne.n	8102774 <HAL_ADC_ConfigChannel+0xf4>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81026f2:	68b2      	ldr	r2, [r6, #8]
 81026f4:	6831      	ldr	r1, [r6, #0]
 81026f6:	4620      	mov	r0, r4
 81026f8:	f7ff ffaa 	bl	8102650 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81026fc:	4bb8      	ldr	r3, [pc, #736]	@ (81029e0 <HAL_ADC_ConfigChannel+0x360>)
 81026fe:	6972      	ldr	r2, [r6, #20]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8102706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810270a:	68e3      	ldr	r3, [r4, #12]
 810270c:	d146      	bne.n	810279c <HAL_ADC_ConfigChannel+0x11c>
 810270e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8102712:	005b      	lsls	r3, r3, #1
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102714:	6937      	ldr	r7, [r6, #16]
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102716:	6831      	ldr	r1, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102718:	2f04      	cmp	r7, #4
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810271a:	fa02 f203 	lsl.w	r2, r2, r3
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810271e:	d045      	beq.n	81027ac <HAL_ADC_ConfigChannel+0x12c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102720:	f104 0060 	add.w	r0, r4, #96	@ 0x60
    MODIFY_REG(*preg,
 8102724:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 8102728:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
 810272c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8102730:	430b      	orrs	r3, r1
 8102732:	4313      	orrs	r3, r2
 8102734:	f840 3027 	str.w	r3, [r0, r7, lsl #2]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102738:	6931      	ldr	r1, [r6, #16]
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 810273a:	7e72      	ldrb	r2, [r6, #25]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 810273c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8102740:	1e57      	subs	r7, r2, #1
 8102742:	427a      	negs	r2, r7
 8102744:	417a      	adcs	r2, r7
 8102746:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810274a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 810274e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102752:	7e33      	ldrb	r3, [r6, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102754:	6931      	ldr	r1, [r6, #16]
 8102756:	6922      	ldr	r2, [r4, #16]
 8102758:	f103 3cff 	add.w	ip, r3, #4294967295
 810275c:	f1dc 0300 	rsbs	r3, ip, #0
 8102760:	eb43 030c 	adc.w	r3, r3, ip
 8102764:	02db      	lsls	r3, r3, #11
 8102766:	f001 011f 	and.w	r1, r1, #31
 810276a:	408b      	lsls	r3, r1
 810276c:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8102770:	4313      	orrs	r3, r2
 8102772:	6123      	str	r3, [r4, #16]

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102774:	4620      	mov	r0, r4
 8102776:	f7ff ff7b 	bl	8102670 <LL_ADC_IsEnabled>
 810277a:	2800      	cmp	r0, #0
 810277c:	d03d      	beq.n	81027fa <HAL_ADC_ConfigChannel+0x17a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810277e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102780:	2300      	movs	r3, #0
 8102782:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8102786:	b003      	add	sp, #12
 8102788:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810278a:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 810278e:	fab3 f383 	clz	r3, r3
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102792:	f003 031f 	and.w	r3, r3, #31
 8102796:	2201      	movs	r2, #1
 8102798:	409a      	lsls	r2, r3
 810279a:	e78d      	b.n	81026b8 <HAL_ADC_ConfigChannel+0x38>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810279c:	f013 0f10 	tst.w	r3, #16
 81027a0:	68e3      	ldr	r3, [r4, #12]
 81027a2:	d0b4      	beq.n	810270e <HAL_ADC_ConfigChannel+0x8e>
 81027a4:	085b      	lsrs	r3, r3, #1
 81027a6:	f003 0308 	and.w	r3, r3, #8
 81027aa:	e7b3      	b.n	8102714 <HAL_ADC_ConfigChannel+0x94>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027ac:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 81027ae:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 81027b2:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81027b6:	bf02      	ittt	eq
 81027b8:	6e23      	ldreq	r3, [r4, #96]	@ 0x60
 81027ba:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 81027be:	6623      	streq	r3, [r4, #96]	@ 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027c2:	068a      	lsls	r2, r1, #26
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 81027c8:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81027ca:	bf02      	ittt	eq
 81027cc:	6e63      	ldreq	r3, [r4, #100]	@ 0x64
 81027ce:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 81027d2:	6663      	streq	r3, [r4, #100]	@ 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027d4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 81027d6:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 81027da:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81027dc:	bf02      	ittt	eq
 81027de:	6ea3      	ldreq	r3, [r4, #104]	@ 0x68
 81027e0:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 81027e4:	66a3      	streq	r3, [r4, #104]	@ 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027e6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 81027e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 81027ec:	429a      	cmp	r2, r3
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81027ee:	bf02      	ittt	eq
 81027f0:	6ee3      	ldreq	r3, [r4, #108]	@ 0x6c
 81027f2:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 81027f6:	66e3      	streq	r3, [r4, #108]	@ 0x6c
 81027f8:	e7bc      	b.n	8102774 <HAL_ADC_ConfigChannel+0xf4>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81027fa:	68f7      	ldr	r7, [r6, #12]
 81027fc:	6833      	ldr	r3, [r6, #0]
  MODIFY_REG(ADCx->DIFSEL,
 81027fe:	4a79      	ldr	r2, [pc, #484]	@ (81029e4 <HAL_ADC_ConfigChannel+0x364>)
 8102800:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8102804:	f007 0c18 	and.w	ip, r7, #24
 8102808:	f3c3 0013 	ubfx	r0, r3, #0, #20
 810280c:	fa22 f20c 	lsr.w	r2, r2, ip
 8102810:	401a      	ands	r2, r3
 8102812:	ea21 0100 	bic.w	r1, r1, r0
 8102816:	430a      	orrs	r2, r1
 8102818:	f8c4 20c0 	str.w	r2, [r4, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810281c:	4a72      	ldr	r2, [pc, #456]	@ (81029e8 <HAL_ADC_ConfigChannel+0x368>)
 810281e:	4297      	cmp	r7, r2
 8102820:	d11d      	bne.n	810285e <HAL_ADC_ConfigChannel+0x1de>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102822:	2800      	cmp	r0, #0
 8102824:	d15a      	bne.n	81028dc <HAL_ADC_ConfigChannel+0x25c>
 8102826:	0e9a      	lsrs	r2, r3, #26
 8102828:	3201      	adds	r2, #1
 810282a:	f002 071f 	and.w	r7, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810282e:	2f09      	cmp	r7, #9
 8102830:	f04f 0101 	mov.w	r1, #1
 8102834:	ea4f 6282 	mov.w	r2, r2, lsl #26
 8102838:	d870      	bhi.n	810291c <HAL_ADC_ConfigChannel+0x29c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810283a:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 810283e:	40b9      	lsls	r1, r7
 8102840:	4311      	orrs	r1, r2
 8102842:	2800      	cmp	r0, #0
 8102844:	d165      	bne.n	8102912 <HAL_ADC_ConfigChannel+0x292>
 8102846:	0e9b      	lsrs	r3, r3, #26
 8102848:	3301      	adds	r3, #1
 810284a:	f003 031f 	and.w	r3, r3, #31
 810284e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102852:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102854:	68b2      	ldr	r2, [r6, #8]
 8102856:	4319      	orrs	r1, r3
 8102858:	4620      	mov	r0, r4
 810285a:	f7ff fef9 	bl	8102650 <LL_ADC_SetChannelSamplingTime>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 810285e:	6832      	ldr	r2, [r6, #0]
 8102860:	2a00      	cmp	r2, #0
 8102862:	da8c      	bge.n	810277e <HAL_ADC_ConfigChannel+0xfe>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102864:	4961      	ldr	r1, [pc, #388]	@ (81029ec <HAL_ADC_ConfigChannel+0x36c>)
 8102866:	428c      	cmp	r4, r1
 8102868:	f000 8086 	beq.w	8102978 <HAL_ADC_ConfigChannel+0x2f8>
 810286c:	4e60      	ldr	r6, [pc, #384]	@ (81029f0 <HAL_ADC_ConfigChannel+0x370>)
 810286e:	4b61      	ldr	r3, [pc, #388]	@ (81029f4 <HAL_ADC_ConfigChannel+0x374>)
 8102870:	4861      	ldr	r0, [pc, #388]	@ (81029f8 <HAL_ADC_ConfigChannel+0x378>)
 8102872:	42b4      	cmp	r4, r6
 8102874:	bf08      	it	eq
 8102876:	4603      	moveq	r3, r0
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102878:	428c      	cmp	r4, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810287a:	689b      	ldr	r3, [r3, #8]
 810287c:	d002      	beq.n	8102884 <HAL_ADC_ConfigChannel+0x204>
 810287e:	495c      	ldr	r1, [pc, #368]	@ (81029f0 <HAL_ADC_ConfigChannel+0x370>)
 8102880:	428c      	cmp	r4, r1
 8102882:	d17b      	bne.n	810297c <HAL_ADC_ConfigChannel+0x2fc>
 8102884:	4859      	ldr	r0, [pc, #356]	@ (81029ec <HAL_ADC_ConfigChannel+0x36c>)
 8102886:	f7ff fef3 	bl	8102670 <LL_ADC_IsEnabled>
 810288a:	4601      	mov	r1, r0
 810288c:	4858      	ldr	r0, [pc, #352]	@ (81029f0 <HAL_ADC_ConfigChannel+0x370>)
 810288e:	f7ff feef 	bl	8102670 <LL_ADC_IsEnabled>
 8102892:	4301      	orrs	r1, r0
 8102894:	d177      	bne.n	8102986 <HAL_ADC_ConfigChannel+0x306>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102896:	4859      	ldr	r0, [pc, #356]	@ (81029fc <HAL_ADC_ConfigChannel+0x37c>)
 8102898:	4282      	cmp	r2, r0
 810289a:	f003 71e0 	and.w	r1, r3, #29360128	@ 0x1c00000
 810289e:	d178      	bne.n	8102992 <HAL_ADC_ConfigChannel+0x312>
 81028a0:	0218      	lsls	r0, r3, #8
 81028a2:	f53f af6c 	bmi.w	810277e <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81028a6:	4b56      	ldr	r3, [pc, #344]	@ (8102a00 <HAL_ADC_ConfigChannel+0x380>)
 81028a8:	429c      	cmp	r4, r3
 81028aa:	f47f af68 	bne.w	810277e <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81028ae:	4a51      	ldr	r2, [pc, #324]	@ (81029f4 <HAL_ADC_ConfigChannel+0x374>)
 81028b0:	6893      	ldr	r3, [r2, #8]
 81028b2:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 81028b6:	430b      	orrs	r3, r1
 81028b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81028bc:	6093      	str	r3, [r2, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81028be:	4b51      	ldr	r3, [pc, #324]	@ (8102a04 <HAL_ADC_ConfigChannel+0x384>)
 81028c0:	4a51      	ldr	r2, [pc, #324]	@ (8102a08 <HAL_ADC_ConfigChannel+0x388>)
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	fbb3 f3f2 	udiv	r3, r3, r2
 81028c8:	3301      	adds	r3, #1
 81028ca:	005b      	lsls	r3, r3, #1
                wait_loop_index--;
 81028cc:	9301      	str	r3, [sp, #4]
              while (wait_loop_index != 0UL)
 81028ce:	9b01      	ldr	r3, [sp, #4]
 81028d0:	2b00      	cmp	r3, #0
 81028d2:	f43f af54 	beq.w	810277e <HAL_ADC_ConfigChannel+0xfe>
                wait_loop_index--;
 81028d6:	9b01      	ldr	r3, [sp, #4]
 81028d8:	3b01      	subs	r3, #1
 81028da:	e7f7      	b.n	81028cc <HAL_ADC_ConfigChannel+0x24c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81028dc:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 81028e0:	b132      	cbz	r2, 81028f0 <HAL_ADC_ConfigChannel+0x270>
  return __builtin_clz(value);
 81028e2:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81028e6:	3201      	adds	r2, #1
 81028e8:	f002 021f 	and.w	r2, r2, #31
 81028ec:	2a09      	cmp	r2, #9
 81028ee:	d825      	bhi.n	810293c <HAL_ADC_ConfigChannel+0x2bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81028f0:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 81028f4:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81028f8:	3201      	adds	r2, #1
 81028fa:	0692      	lsls	r2, r2, #26
 81028fc:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102900:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8102904:	fab7 f787 	clz	r7, r7
 8102908:	3701      	adds	r7, #1
 810290a:	f007 071f 	and.w	r7, r7, #31
 810290e:	2101      	movs	r1, #1
 8102910:	e795      	b.n	810283e <HAL_ADC_ConfigChannel+0x1be>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102912:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8102916:	fab3 f383 	clz	r3, r3
 810291a:	e795      	b.n	8102848 <HAL_ADC_ConfigChannel+0x1c8>
 810291c:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8102920:	40b9      	lsls	r1, r7
 8102922:	4311      	orrs	r1, r2
 8102924:	b9d8      	cbnz	r0, 810295e <HAL_ADC_ConfigChannel+0x2de>
 8102926:	0e9b      	lsrs	r3, r3, #26
 8102928:	3301      	adds	r3, #1
 810292a:	f003 031f 	and.w	r3, r3, #31
 810292e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8102932:	3b1e      	subs	r3, #30
 8102934:	051b      	lsls	r3, r3, #20
 8102936:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810293a:	e78b      	b.n	8102854 <HAL_ADC_ConfigChannel+0x1d4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810293c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102940:	fab2 f282 	clz	r2, r2
 8102944:	3201      	adds	r2, #1
 8102946:	0692      	lsls	r2, r2, #26
 8102948:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810294c:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8102950:	fab7 f787 	clz	r7, r7
 8102954:	3701      	adds	r7, #1
 8102956:	f007 071f 	and.w	r7, r7, #31
 810295a:	2101      	movs	r1, #1
 810295c:	e7e0      	b.n	8102920 <HAL_ADC_ConfigChannel+0x2a0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810295e:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8102962:	fab2 f282 	clz	r2, r2
 8102966:	3201      	adds	r2, #1
 8102968:	f002 021f 	and.w	r2, r2, #31
 810296c:	2303      	movs	r3, #3
 810296e:	f06f 001d 	mvn.w	r0, #29
 8102972:	fb13 0302 	smlabb	r3, r3, r2, r0
 8102976:	e7dd      	b.n	8102934 <HAL_ADC_ConfigChannel+0x2b4>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102978:	4b1f      	ldr	r3, [pc, #124]	@ (81029f8 <HAL_ADC_ConfigChannel+0x378>)
 810297a:	e77d      	b.n	8102878 <HAL_ADC_ConfigChannel+0x1f8>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810297c:	4820      	ldr	r0, [pc, #128]	@ (8102a00 <HAL_ADC_ConfigChannel+0x380>)
 810297e:	f7ff fe77 	bl	8102670 <LL_ADC_IsEnabled>
 8102982:	2800      	cmp	r0, #0
 8102984:	d087      	beq.n	8102896 <HAL_ADC_ConfigChannel+0x216>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102986:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8102988:	f043 0320 	orr.w	r3, r3, #32
 810298c:	656b      	str	r3, [r5, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 810298e:	2001      	movs	r0, #1
 8102990:	e6f6      	b.n	8102780 <HAL_ADC_ConfigChannel+0x100>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102992:	481e      	ldr	r0, [pc, #120]	@ (8102a0c <HAL_ADC_ConfigChannel+0x38c>)
 8102994:	4282      	cmp	r2, r0
 8102996:	d10f      	bne.n	81029b8 <HAL_ADC_ConfigChannel+0x338>
 8102998:	01da      	lsls	r2, r3, #7
 810299a:	f53f aef0 	bmi.w	810277e <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810299e:	4b18      	ldr	r3, [pc, #96]	@ (8102a00 <HAL_ADC_ConfigChannel+0x380>)
 81029a0:	429c      	cmp	r4, r3
 81029a2:	f47f aeec 	bne.w	810277e <HAL_ADC_ConfigChannel+0xfe>
 81029a6:	4a13      	ldr	r2, [pc, #76]	@ (81029f4 <HAL_ADC_ConfigChannel+0x374>)
 81029a8:	6893      	ldr	r3, [r2, #8]
 81029aa:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 81029ae:	430b      	orrs	r3, r1
 81029b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81029b4:	6093      	str	r3, [r2, #8]
}
 81029b6:	e6e2      	b.n	810277e <HAL_ADC_ConfigChannel+0xfe>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81029b8:	4815      	ldr	r0, [pc, #84]	@ (8102a10 <HAL_ADC_ConfigChannel+0x390>)
 81029ba:	4282      	cmp	r2, r0
 81029bc:	f47f aedf 	bne.w	810277e <HAL_ADC_ConfigChannel+0xfe>
 81029c0:	025b      	lsls	r3, r3, #9
 81029c2:	f53f aedc 	bmi.w	810277e <HAL_ADC_ConfigChannel+0xfe>
            if (ADC_VREFINT_INSTANCE(hadc))
 81029c6:	4b0e      	ldr	r3, [pc, #56]	@ (8102a00 <HAL_ADC_ConfigChannel+0x380>)
 81029c8:	429c      	cmp	r4, r3
 81029ca:	f47f aed8 	bne.w	810277e <HAL_ADC_ConfigChannel+0xfe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81029ce:	4a09      	ldr	r2, [pc, #36]	@ (81029f4 <HAL_ADC_ConfigChannel+0x374>)
 81029d0:	6893      	ldr	r3, [r2, #8]
 81029d2:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 81029d6:	430b      	orrs	r3, r1
 81029d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81029dc:	e7ea      	b.n	81029b4 <HAL_ADC_ConfigChannel+0x334>
 81029de:	bf00      	nop
 81029e0:	5c001000 	.word	0x5c001000
 81029e4:	000fffff 	.word	0x000fffff
 81029e8:	47ff0000 	.word	0x47ff0000
 81029ec:	40022000 	.word	0x40022000
 81029f0:	40022100 	.word	0x40022100
 81029f4:	58026300 	.word	0x58026300
 81029f8:	40022300 	.word	0x40022300
 81029fc:	cb840000 	.word	0xcb840000
 8102a00:	58026000 	.word	0x58026000
 8102a04:	10000054 	.word	0x10000054
 8102a08:	00030d40 	.word	0x00030d40
 8102a0c:	c7520000 	.word	0xc7520000
 8102a10:	cfb80000 	.word	0xcfb80000
  __HAL_LOCK(hadc);
 8102a14:	2002      	movs	r0, #2
 8102a16:	e6b6      	b.n	8102786 <HAL_ADC_ConfigChannel+0x106>

08102a18 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102a18:	6802      	ldr	r2, [r0, #0]
{
 8102a1a:	b570      	push	{r4, r5, r6, lr}
 8102a1c:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102a1e:	4610      	mov	r0, r2
 8102a20:	f7ff fe26 	bl	8102670 <LL_ADC_IsEnabled>
 8102a24:	b108      	cbz	r0, 8102a2a <ADC_Enable+0x12>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102a26:	2000      	movs	r0, #0
}
 8102a28:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8102a2a:	6891      	ldr	r1, [r2, #8]
 8102a2c:	4b22      	ldr	r3, [pc, #136]	@ (8102ab8 <ADC_Enable+0xa0>)
 8102a2e:	4219      	tst	r1, r3
 8102a30:	d009      	beq.n	8102a46 <ADC_Enable+0x2e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102a32:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8102a34:	f043 0310 	orr.w	r3, r3, #16
 8102a38:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102a3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8102a3c:	f043 0301 	orr.w	r3, r3, #1
 8102a40:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8102a42:	2001      	movs	r0, #1
 8102a44:	e7f0      	b.n	8102a28 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 8102a46:	6893      	ldr	r3, [r2, #8]
 8102a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102a4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102a50:	f043 0301 	orr.w	r3, r3, #1
 8102a54:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8102a56:	f7ff fde5 	bl	8102624 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102a5a:	6822      	ldr	r2, [r4, #0]
 8102a5c:	4b17      	ldr	r3, [pc, #92]	@ (8102abc <ADC_Enable+0xa4>)
 8102a5e:	4918      	ldr	r1, [pc, #96]	@ (8102ac0 <ADC_Enable+0xa8>)
 8102a60:	429a      	cmp	r2, r3
    tickstart = HAL_GetTick();
 8102a62:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102a64:	d00e      	beq.n	8102a84 <ADC_Enable+0x6c>
 8102a66:	4817      	ldr	r0, [pc, #92]	@ (8102ac4 <ADC_Enable+0xac>)
 8102a68:	f103 53c0 	add.w	r3, r3, #402653184	@ 0x18000000
 8102a6c:	f503 4386 	add.w	r3, r3, #17152	@ 0x4300
 8102a70:	428a      	cmp	r2, r1
 8102a72:	bf08      	it	eq
 8102a74:	4603      	moveq	r3, r0
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102a76:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102a78:	689b      	ldr	r3, [r3, #8]
 8102a7a:	d101      	bne.n	8102a80 <ADC_Enable+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102a7c:	06d9      	lsls	r1, r3, #27
 8102a7e:	d1d2      	bne.n	8102a26 <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 8102a80:	4e11      	ldr	r6, [pc, #68]	@ (8102ac8 <ADC_Enable+0xb0>)
 8102a82:	e013      	b.n	8102aac <ADC_Enable+0x94>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102a84:	4b0f      	ldr	r3, [pc, #60]	@ (8102ac4 <ADC_Enable+0xac>)
 8102a86:	e7f6      	b.n	8102a76 <ADC_Enable+0x5e>
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102a88:	4610      	mov	r0, r2
 8102a8a:	f7ff fdf1 	bl	8102670 <LL_ADC_IsEnabled>
 8102a8e:	b920      	cbnz	r0, 8102a9a <ADC_Enable+0x82>
 8102a90:	6893      	ldr	r3, [r2, #8]
 8102a92:	4033      	ands	r3, r6
 8102a94:	f043 0301 	orr.w	r3, r3, #1
 8102a98:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8102a9a:	f7ff fdc3 	bl	8102624 <HAL_GetTick>
 8102a9e:	1b40      	subs	r0, r0, r5
 8102aa0:	2802      	cmp	r0, #2
 8102aa2:	d903      	bls.n	8102aac <ADC_Enable+0x94>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102aa4:	6823      	ldr	r3, [r4, #0]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	07da      	lsls	r2, r3, #31
 8102aaa:	d5c2      	bpl.n	8102a32 <ADC_Enable+0x1a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102aac:	6822      	ldr	r2, [r4, #0]
 8102aae:	6813      	ldr	r3, [r2, #0]
 8102ab0:	07db      	lsls	r3, r3, #31
 8102ab2:	d5e9      	bpl.n	8102a88 <ADC_Enable+0x70>
 8102ab4:	e7b7      	b.n	8102a26 <ADC_Enable+0xe>
 8102ab6:	bf00      	nop
 8102ab8:	8000003f 	.word	0x8000003f
 8102abc:	40022000 	.word	0x40022000
 8102ac0:	40022100 	.word	0x40022100
 8102ac4:	40022300 	.word	0x40022300
 8102ac8:	7fffffc0 	.word	0x7fffffc0

08102acc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8102acc:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102ace:	4a43      	ldr	r2, [pc, #268]	@ (8102bdc <ADC_ConfigureBoostMode+0x110>)
 8102ad0:	6803      	ldr	r3, [r0, #0]
 8102ad2:	4293      	cmp	r3, r2
{
 8102ad4:	4605      	mov	r5, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102ad6:	d003      	beq.n	8102ae0 <ADC_ConfigureBoostMode+0x14>
 8102ad8:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8102adc:	4293      	cmp	r3, r2
 8102ade:	d125      	bne.n	8102b2c <ADC_ConfigureBoostMode+0x60>
 8102ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8102be0 <ADC_ConfigureBoostMode+0x114>)
 8102ae2:	689b      	ldr	r3, [r3, #8]
 8102ae4:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8102ae8:	bf14      	ite	ne
 8102aea:	2301      	movne	r3, #1
 8102aec:	2300      	moveq	r3, #0
 8102aee:	b9fb      	cbnz	r3, 8102b30 <ADC_ConfigureBoostMode+0x64>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102af0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8102af4:	2100      	movs	r1, #0
 8102af6:	f002 fdf5 	bl	81056e4 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8102afa:	686b      	ldr	r3, [r5, #4]
 8102afc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102b00:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8102b02:	d04a      	beq.n	8102b9a <ADC_ConfigureBoostMode+0xce>
 8102b04:	d83f      	bhi.n	8102b86 <ADC_ConfigureBoostMode+0xba>
 8102b06:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8102b0a:	d044      	beq.n	8102b96 <ADC_ConfigureBoostMode+0xca>
 8102b0c:	d836      	bhi.n	8102b7c <ADC_ConfigureBoostMode+0xb0>
 8102b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102b12:	d008      	beq.n	8102b26 <ADC_ConfigureBoostMode+0x5a>
 8102b14:	d82c      	bhi.n	8102b70 <ADC_ConfigureBoostMode+0xa4>
 8102b16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8102b1a:	d004      	beq.n	8102b26 <ADC_ConfigureBoostMode+0x5a>
 8102b1c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8102b20:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8102b24:	d116      	bne.n	8102b54 <ADC_ConfigureBoostMode+0x88>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102b26:	0c9b      	lsrs	r3, r3, #18
 8102b28:	005b      	lsls	r3, r3, #1
 8102b2a:	e00f      	b.n	8102b4c <ADC_ConfigureBoostMode+0x80>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8102be4 <ADC_ConfigureBoostMode+0x118>)
 8102b2e:	e7d8      	b.n	8102ae2 <ADC_ConfigureBoostMode+0x16>
    freq = HAL_RCC_GetHCLKFreq();
 8102b30:	f001 fdac 	bl	810468c <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8102b34:	686b      	ldr	r3, [r5, #4]
 8102b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
    freq = HAL_RCC_GetHCLKFreq();
 8102b3a:	4604      	mov	r4, r0
    switch (hadc->Init.ClockPrescaler)
 8102b3c:	d005      	beq.n	8102b4a <ADC_ConfigureBoostMode+0x7e>
 8102b3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102b42:	d006      	beq.n	8102b52 <ADC_ConfigureBoostMode+0x86>
 8102b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102b48:	d104      	bne.n	8102b54 <ADC_ConfigureBoostMode+0x88>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8102b4a:	0c1b      	lsrs	r3, r3, #16
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102b4c:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8102b50:	e000      	b.n	8102b54 <ADC_ConfigureBoostMode+0x88>
        freq /= 4UL;
 8102b52:	0884      	lsrs	r4, r0, #2
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8102b54:	f7ff fd6c 	bl	8102630 <HAL_GetREVID>
 8102b58:	f241 0303 	movw	r3, #4099	@ 0x1003
 8102b5c:	4298      	cmp	r0, r3
 8102b5e:	682b      	ldr	r3, [r5, #0]
 8102b60:	d823      	bhi.n	8102baa <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8102b62:	4a21      	ldr	r2, [pc, #132]	@ (8102be8 <ADC_ConfigureBoostMode+0x11c>)
 8102b64:	4294      	cmp	r4, r2
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102b66:	689a      	ldr	r2, [r3, #8]
    if (freq > 20000000UL)
 8102b68:	d91b      	bls.n	8102ba2 <ADC_ConfigureBoostMode+0xd6>
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
    }
    else if (freq <= 12500000UL)
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102b6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8102b6e:	e01a      	b.n	8102ba6 <ADC_ConfigureBoostMode+0xda>
    switch (hadc->Init.ClockPrescaler)
 8102b70:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8102b74:	d0d7      	beq.n	8102b26 <ADC_ConfigureBoostMode+0x5a>
 8102b76:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8102b7a:	e7d3      	b.n	8102b24 <ADC_ConfigureBoostMode+0x58>
 8102b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102b80:	d1e8      	bne.n	8102b54 <ADC_ConfigureBoostMode+0x88>
        freq /= 32UL;
 8102b82:	0944      	lsrs	r4, r0, #5
        break;
 8102b84:	e7e6      	b.n	8102b54 <ADC_ConfigureBoostMode+0x88>
    switch (hadc->Init.ClockPrescaler)
 8102b86:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8102b8a:	d008      	beq.n	8102b9e <ADC_ConfigureBoostMode+0xd2>
 8102b8c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8102b90:	d1e0      	bne.n	8102b54 <ADC_ConfigureBoostMode+0x88>
        freq /= 256UL;
 8102b92:	0a04      	lsrs	r4, r0, #8
        break;
 8102b94:	e7de      	b.n	8102b54 <ADC_ConfigureBoostMode+0x88>
        freq /= 16UL;
 8102b96:	0904      	lsrs	r4, r0, #4
        break;
 8102b98:	e7dc      	b.n	8102b54 <ADC_ConfigureBoostMode+0x88>
        freq /= 64UL;
 8102b9a:	0984      	lsrs	r4, r0, #6
        break;
 8102b9c:	e7da      	b.n	8102b54 <ADC_ConfigureBoostMode+0x88>
        freq /= 128UL;
 8102b9e:	09c4      	lsrs	r4, r0, #7
        break;
 8102ba0:	e7d8      	b.n	8102b54 <ADC_ConfigureBoostMode+0x88>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102ba2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
    }
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102ba6:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102ba8:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8102baa:	4a10      	ldr	r2, [pc, #64]	@ (8102bec <ADC_ConfigureBoostMode+0x120>)
 8102bac:	4294      	cmp	r4, r2
 8102bae:	d803      	bhi.n	8102bb8 <ADC_ConfigureBoostMode+0xec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8102bb0:	689a      	ldr	r2, [r3, #8]
 8102bb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8102bb6:	e7f6      	b.n	8102ba6 <ADC_ConfigureBoostMode+0xda>
    else if (freq <= 12500000UL)
 8102bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8102bf0 <ADC_ConfigureBoostMode+0x124>)
 8102bba:	4294      	cmp	r4, r2
 8102bbc:	d803      	bhi.n	8102bc6 <ADC_ConfigureBoostMode+0xfa>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102bbe:	689a      	ldr	r2, [r3, #8]
 8102bc0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8102bc4:	e7d1      	b.n	8102b6a <ADC_ConfigureBoostMode+0x9e>
    else if (freq <= 25000000UL)
 8102bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8102bf4 <ADC_ConfigureBoostMode+0x128>)
 8102bc8:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102bca:	689a      	ldr	r2, [r3, #8]
 8102bcc:	bf9a      	itte	ls
 8102bce:	f422 7240 	bicls.w	r2, r2, #768	@ 0x300
 8102bd2:	f442 7200 	orrls.w	r2, r2, #512	@ 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102bd6:	f442 7240 	orrhi.w	r2, r2, #768	@ 0x300
 8102bda:	e7e4      	b.n	8102ba6 <ADC_ConfigureBoostMode+0xda>
 8102bdc:	40022000 	.word	0x40022000
 8102be0:	40022300 	.word	0x40022300
 8102be4:	58026300 	.word	0x58026300
 8102be8:	01312d00 	.word	0x01312d00
 8102bec:	00bebc21 	.word	0x00bebc21
 8102bf0:	017d7841 	.word	0x017d7841
 8102bf4:	02faf081 	.word	0x02faf081

08102bf8 <HAL_ADC_Init>:
{
 8102bf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8102bfa:	2300      	movs	r3, #0
 8102bfc:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8102bfe:	4604      	mov	r4, r0
 8102c00:	2800      	cmp	r0, #0
 8102c02:	f000 80f1 	beq.w	8102de8 <HAL_ADC_Init+0x1f0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102c06:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8102c08:	b925      	cbnz	r5, 8102c14 <HAL_ADC_Init+0x1c>
    HAL_ADC_MspInit(hadc);
 8102c0a:	f7fe fb51 	bl	81012b0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8102c0e:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8102c10:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102c14:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102c16:	689a      	ldr	r2, [r3, #8]
 8102c18:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102c1a:	bf41      	itttt	mi
 8102c1c:	689a      	ldrmi	r2, [r3, #8]
 8102c1e:	f022 4220 	bicmi.w	r2, r2, #2684354560	@ 0xa0000000
 8102c22:	f022 023f 	bicmi.w	r2, r2, #63	@ 0x3f
 8102c26:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102c28:	689a      	ldr	r2, [r3, #8]
 8102c2a:	00d1      	lsls	r1, r2, #3
 8102c2c:	f140 80a2 	bpl.w	8102d74 <HAL_ADC_Init+0x17c>
 8102c30:	689a      	ldr	r2, [r3, #8]
 8102c32:	00d2      	lsls	r2, r2, #3
 8102c34:	f100 80b4 	bmi.w	8102da0 <HAL_ADC_Init+0x1a8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8102c3a:	f042 0210 	orr.w	r2, r2, #16
 8102c3e:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102c40:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8102c42:	f042 0201 	orr.w	r2, r2, #1
 8102c46:	65a2      	str	r2, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8102c48:	2501      	movs	r5, #1
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102c4a:	4618      	mov	r0, r3
 8102c4c:	f7ff fd14 	bl	8102678 <LL_ADC_REG_IsConversionOngoing>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102c50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8102c52:	f002 0210 	and.w	r2, r2, #16
 8102c56:	4302      	orrs	r2, r0
 8102c58:	f040 80c2 	bne.w	8102de0 <HAL_ADC_Init+0x1e8>
    ADC_STATE_CLR_SET(hadc->State,
 8102c5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8102c5e:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8102c62:	f042 0202 	orr.w	r2, r2, #2
 8102c66:	6562      	str	r2, [r4, #84]	@ 0x54
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102c68:	4618      	mov	r0, r3
 8102c6a:	f7ff fd01 	bl	8102670 <LL_ADC_IsEnabled>
 8102c6e:	b980      	cbnz	r0, 8102c92 <HAL_ADC_Init+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102c70:	4e5e      	ldr	r6, [pc, #376]	@ (8102dec <HAL_ADC_Init+0x1f4>)
 8102c72:	495f      	ldr	r1, [pc, #380]	@ (8102df0 <HAL_ADC_Init+0x1f8>)
 8102c74:	42b3      	cmp	r3, r6
 8102c76:	d002      	beq.n	8102c7e <HAL_ADC_Init+0x86>
 8102c78:	428b      	cmp	r3, r1
 8102c7a:	f040 8093 	bne.w	8102da4 <HAL_ADC_Init+0x1ac>
 8102c7e:	485b      	ldr	r0, [pc, #364]	@ (8102dec <HAL_ADC_Init+0x1f4>)
 8102c80:	f7ff fcf6 	bl	8102670 <LL_ADC_IsEnabled>
 8102c84:	4602      	mov	r2, r0
 8102c86:	485a      	ldr	r0, [pc, #360]	@ (8102df0 <HAL_ADC_Init+0x1f8>)
 8102c88:	f7ff fcf2 	bl	8102670 <LL_ADC_IsEnabled>
 8102c8c:	4302      	orrs	r2, r0
 8102c8e:	f000 8097 	beq.w	8102dc0 <HAL_ADC_Init+0x1c8>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102c92:	f7ff fccd 	bl	8102630 <HAL_GetREVID>
 8102c96:	f241 0303 	movw	r3, #4099	@ 0x1003
 8102c9a:	4298      	cmp	r0, r3
 8102c9c:	7f21      	ldrb	r1, [r4, #28]
 8102c9e:	68a0      	ldr	r0, [r4, #8]
 8102ca0:	7d62      	ldrb	r2, [r4, #21]
 8102ca2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8102ca4:	f240 8092 	bls.w	8102dcc <HAL_ADC_Init+0x1d4>
 8102ca8:	2810      	cmp	r0, #16
 8102caa:	f040 808f 	bne.w	8102dcc <HAL_ADC_Init+0x1d4>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102cae:	0352      	lsls	r2, r2, #13
 8102cb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8102cb4:	431a      	orrs	r2, r3
 8102cb6:	f042 031c 	orr.w	r3, r2, #28
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102cba:	2901      	cmp	r1, #1
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102cbc:	bf02      	ittt	eq
 8102cbe:	6a22      	ldreq	r2, [r4, #32]
 8102cc0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8102cc4:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8102cc8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8102cca:	b122      	cbz	r2, 8102cd6 <HAL_ADC_Init+0xde>
                  | hadc->Init.ExternalTrigConvEdge
 8102ccc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102cce:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8102cd2:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102cd4:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8102cd6:	6822      	ldr	r2, [r4, #0]
 8102cd8:	4946      	ldr	r1, [pc, #280]	@ (8102df4 <HAL_ADC_Init+0x1fc>)
 8102cda:	68d0      	ldr	r0, [r2, #12]
 8102cdc:	4001      	ands	r1, r0
 8102cde:	4319      	orrs	r1, r3
 8102ce0:	60d1      	str	r1, [r2, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102ce2:	4610      	mov	r0, r2
 8102ce4:	f7ff fcc8 	bl	8102678 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102ce8:	6893      	ldr	r3, [r2, #8]
 8102cea:	f003 0308 	and.w	r3, r3, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102cee:	4303      	orrs	r3, r0
 8102cf0:	d127      	bne.n	8102d42 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102cf2:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102cf4:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102cf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8102cfa:	f023 0303 	bic.w	r3, r3, #3
 8102cfe:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 8102d02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8102d04:	430b      	orrs	r3, r1
 8102d06:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8102d08:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8102d0c:	2b01      	cmp	r3, #1
 8102d0e:	d163      	bne.n	8102dd8 <HAL_ADC_Init+0x1e0>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102d10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8102d12:	6910      	ldr	r0, [r2, #16]
 8102d14:	1e59      	subs	r1, r3, #1
 8102d16:	e9d4 3610 	ldrd	r3, r6, [r4, #64]	@ 0x40
 8102d1a:	4333      	orrs	r3, r6
 8102d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8102d20:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8102d22:	430b      	orrs	r3, r1
 8102d24:	4934      	ldr	r1, [pc, #208]	@ (8102df8 <HAL_ADC_Init+0x200>)
 8102d26:	4001      	ands	r1, r0
 8102d28:	430b      	orrs	r3, r1
 8102d2a:	f043 0301 	orr.w	r3, r3, #1
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102d2e:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102d30:	6913      	ldr	r3, [r2, #16]
 8102d32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8102d34:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8102d38:	430b      	orrs	r3, r1
 8102d3a:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 8102d3c:	4620      	mov	r0, r4
 8102d3e:	f7ff fec5 	bl	8102acc <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102d42:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102d44:	6822      	ldr	r2, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102d46:	2b01      	cmp	r3, #1
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102d48:	bf05      	ittet	eq
 8102d4a:	6b11      	ldreq	r1, [r2, #48]	@ 0x30
 8102d4c:	69a3      	ldreq	r3, [r4, #24]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102d4e:	6b13      	ldrne	r3, [r2, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102d50:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8102d54:	bf06      	itte	eq
 8102d56:	f021 010f 	biceq.w	r1, r1, #15
 8102d5a:	430b      	orreq	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8102d5c:	f023 030f 	bicne.w	r3, r3, #15
 8102d60:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8102d62:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8102d64:	f023 0303 	bic.w	r3, r3, #3
 8102d68:	f043 0301 	orr.w	r3, r3, #1
 8102d6c:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8102d6e:	4628      	mov	r0, r5
 8102d70:	b002      	add	sp, #8
 8102d72:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8102d74:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102d76:	4921      	ldr	r1, [pc, #132]	@ (8102dfc <HAL_ADC_Init+0x204>)
 8102d78:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8102d7c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8102d80:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8102d84:	609a      	str	r2, [r3, #8]
 8102d86:	4a1e      	ldr	r2, [pc, #120]	@ (8102e00 <HAL_ADC_Init+0x208>)
 8102d88:	6812      	ldr	r2, [r2, #0]
 8102d8a:	fbb2 f2f1 	udiv	r2, r2, r1
 8102d8e:	3201      	adds	r2, #1
      wait_loop_index--;
 8102d90:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8102d92:	9a01      	ldr	r2, [sp, #4]
 8102d94:	2a00      	cmp	r2, #0
 8102d96:	f43f af4b 	beq.w	8102c30 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8102d9a:	9a01      	ldr	r2, [sp, #4]
 8102d9c:	3a01      	subs	r2, #1
 8102d9e:	e7f7      	b.n	8102d90 <HAL_ADC_Init+0x198>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102da0:	2500      	movs	r5, #0
 8102da2:	e752      	b.n	8102c4a <HAL_ADC_Init+0x52>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102da4:	4817      	ldr	r0, [pc, #92]	@ (8102e04 <HAL_ADC_Init+0x20c>)
 8102da6:	f7ff fc63 	bl	8102670 <LL_ADC_IsEnabled>
 8102daa:	2800      	cmp	r0, #0
 8102dac:	f47f af71 	bne.w	8102c92 <HAL_ADC_Init+0x9a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8102db0:	4a15      	ldr	r2, [pc, #84]	@ (8102e08 <HAL_ADC_Init+0x210>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102db2:	6893      	ldr	r3, [r2, #8]
 8102db4:	6861      	ldr	r1, [r4, #4]
 8102db6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8102dba:	430b      	orrs	r3, r1
 8102dbc:	6093      	str	r3, [r2, #8]
}
 8102dbe:	e768      	b.n	8102c92 <HAL_ADC_Init+0x9a>
 8102dc0:	42b3      	cmp	r3, r6
 8102dc2:	d001      	beq.n	8102dc8 <HAL_ADC_Init+0x1d0>
 8102dc4:	428b      	cmp	r3, r1
 8102dc6:	d1f3      	bne.n	8102db0 <HAL_ADC_Init+0x1b8>
 8102dc8:	4a10      	ldr	r2, [pc, #64]	@ (8102e0c <HAL_ADC_Init+0x214>)
 8102dca:	e7f2      	b.n	8102db2 <HAL_ADC_Init+0x1ba>
                  hadc->Init.Overrun                                                    |
 8102dcc:	4303      	orrs	r3, r0
 8102dce:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8102dd6:	e770      	b.n	8102cba <HAL_ADC_Init+0xc2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102dd8:	6913      	ldr	r3, [r2, #16]
 8102dda:	f023 0301 	bic.w	r3, r3, #1
 8102dde:	e7a6      	b.n	8102d2e <HAL_ADC_Init+0x136>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102de0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8102de2:	f043 0310 	orr.w	r3, r3, #16
 8102de6:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8102de8:	2501      	movs	r5, #1
 8102dea:	e7c0      	b.n	8102d6e <HAL_ADC_Init+0x176>
 8102dec:	40022000 	.word	0x40022000
 8102df0:	40022100 	.word	0x40022100
 8102df4:	fff0c003 	.word	0xfff0c003
 8102df8:	fc00f81e 	.word	0xfc00f81e
 8102dfc:	00030d40 	.word	0x00030d40
 8102e00:	10000054 	.word	0x10000054
 8102e04:	58026000 	.word	0x58026000
 8102e08:	58026300 	.word	0x58026300
 8102e0c:	40022300 	.word	0x40022300

08102e10 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102e10:	6880      	ldr	r0, [r0, #8]
}
 8102e12:	f000 0001 	and.w	r0, r0, #1
 8102e16:	4770      	bx	lr

08102e18 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102e18:	6880      	ldr	r0, [r0, #8]
}
 8102e1a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8102e1e:	4770      	bx	lr

08102e20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8102e20:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102e22:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102e26:	680c      	ldr	r4, [r1, #0]
  __HAL_LOCK(hadc);
 8102e28:	2a01      	cmp	r2, #1
{
 8102e2a:	b09a      	sub	sp, #104	@ 0x68
 8102e2c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8102e2e:	d054      	beq.n	8102eda <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8102e30:	2201      	movs	r2, #1
 8102e32:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102e36:	681d      	ldr	r5, [r3, #0]
 8102e38:	4e29      	ldr	r6, [pc, #164]	@ (8102ee0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102e3a:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102e3c:	42b5      	cmp	r5, r6
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102e3e:	9016      	str	r0, [sp, #88]	@ 0x58
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8102e40:	9017      	str	r0, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102e42:	d10e      	bne.n	8102e62 <HAL_ADCEx_MultiModeConfigChannel+0x42>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102e44:	4827      	ldr	r0, [pc, #156]	@ (8102ee4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8102e46:	f7ff ffe7 	bl	8102e18 <LL_ADC_REG_IsConversionOngoing>
 8102e4a:	4606      	mov	r6, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102e4c:	4628      	mov	r0, r5
 8102e4e:	f7ff ffe3 	bl	8102e18 <LL_ADC_REG_IsConversionOngoing>
 8102e52:	4330      	orrs	r0, r6
 8102e54:	d00e      	beq.n	8102e74 <HAL_ADCEx_MultiModeConfigChannel+0x54>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102e56:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8102e58:	f041 0120 	orr.w	r1, r1, #32
 8102e5c:	6559      	str	r1, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8102e5e:	4610      	mov	r0, r2
 8102e60:	e023      	b.n	8102eaa <HAL_ADCEx_MultiModeConfigChannel+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102e62:	6d59      	ldr	r1, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8102e64:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102e68:	f041 0120 	orr.w	r1, r1, #32
 8102e6c:	6559      	str	r1, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8102e6e:	4610      	mov	r0, r2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8102e70:	b01a      	add	sp, #104	@ 0x68
 8102e72:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102e74:	4a1c      	ldr	r2, [pc, #112]	@ (8102ee8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8102e76:	b1e4      	cbz	r4, 8102eb2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102e78:	6890      	ldr	r0, [r2, #8]
 8102e7a:	684e      	ldr	r6, [r1, #4]
 8102e7c:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8102e80:	4330      	orrs	r0, r6
 8102e82:	6090      	str	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102e84:	4628      	mov	r0, r5
 8102e86:	f7ff ffc3 	bl	8102e10 <LL_ADC_IsEnabled>
 8102e8a:	4605      	mov	r5, r0
 8102e8c:	4815      	ldr	r0, [pc, #84]	@ (8102ee4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8102e8e:	f7ff ffbf 	bl	8102e10 <LL_ADC_IsEnabled>
 8102e92:	4305      	orrs	r5, r0
 8102e94:	d108      	bne.n	8102ea8 <HAL_ADCEx_MultiModeConfigChannel+0x88>
        MODIFY_REG(tmpADC_Common->CCR,
 8102e96:	6889      	ldr	r1, [r1, #8]
 8102e98:	6890      	ldr	r0, [r2, #8]
 8102e9a:	430c      	orrs	r4, r1
 8102e9c:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 8102ea0:	f021 010f 	bic.w	r1, r1, #15
 8102ea4:	430c      	orrs	r4, r1
 8102ea6:	6094      	str	r4, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102ea8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8102eaa:	2200      	movs	r2, #0
 8102eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return tmp_hal_status;
 8102eb0:	e7de      	b.n	8102e70 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102eb2:	6891      	ldr	r1, [r2, #8]
 8102eb4:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8102eb8:	6091      	str	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102eba:	4628      	mov	r0, r5
 8102ebc:	f7ff ffa8 	bl	8102e10 <LL_ADC_IsEnabled>
 8102ec0:	4601      	mov	r1, r0
 8102ec2:	4808      	ldr	r0, [pc, #32]	@ (8102ee4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8102ec4:	f7ff ffa4 	bl	8102e10 <LL_ADC_IsEnabled>
 8102ec8:	4301      	orrs	r1, r0
 8102eca:	d1ed      	bne.n	8102ea8 <HAL_ADCEx_MultiModeConfigChannel+0x88>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102ecc:	6891      	ldr	r1, [r2, #8]
 8102ece:	f421 6171 	bic.w	r1, r1, #3856	@ 0xf10
 8102ed2:	f021 010f 	bic.w	r1, r1, #15
 8102ed6:	6091      	str	r1, [r2, #8]
 8102ed8:	e7e6      	b.n	8102ea8 <HAL_ADCEx_MultiModeConfigChannel+0x88>
  __HAL_LOCK(hadc);
 8102eda:	2002      	movs	r0, #2
 8102edc:	e7c8      	b.n	8102e70 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8102ede:	bf00      	nop
 8102ee0:	40022000 	.word	0x40022000
 8102ee4:	40022100 	.word	0x40022100
 8102ee8:	40022300 	.word	0x40022300

08102eec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102eec:	4907      	ldr	r1, [pc, #28]	@ (8102f0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8102eee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102ef0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102ef4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102ef6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102ef8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102efc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8102f08:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8102f0a:	4770      	bx	lr
 8102f0c:	e000ed00 	.word	0xe000ed00

08102f10 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102f10:	4b16      	ldr	r3, [pc, #88]	@ (8102f6c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102f12:	b530      	push	{r4, r5, lr}
 8102f14:	68dc      	ldr	r4, [r3, #12]
 8102f16:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102f1a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102f1e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102f20:	2b04      	cmp	r3, #4
 8102f22:	bf28      	it	cs
 8102f24:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102f26:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f28:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102f2c:	bf8c      	ite	hi
 8102f2e:	3c03      	subhi	r4, #3
 8102f30:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f32:	fa05 f303 	lsl.w	r3, r5, r3
 8102f36:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102f3a:	40a5      	lsls	r5, r4
 8102f3c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f40:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8102f42:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f44:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f48:	bfac      	ite	ge
 8102f4a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f4e:	4a08      	ldrlt	r2, [pc, #32]	@ (8102f70 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f50:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f54:	bfb8      	it	lt
 8102f56:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f5a:	b2db      	uxtb	r3, r3
 8102f5c:	bfaa      	itet	ge
 8102f5e:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f62:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f64:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8102f68:	bd30      	pop	{r4, r5, pc}
 8102f6a:	bf00      	nop
 8102f6c:	e000ed00 	.word	0xe000ed00
 8102f70:	e000ed14 	.word	0xe000ed14

08102f74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8102f74:	2800      	cmp	r0, #0
 8102f76:	db07      	blt.n	8102f88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102f78:	4a04      	ldr	r2, [pc, #16]	@ (8102f8c <HAL_NVIC_EnableIRQ+0x18>)
 8102f7a:	0941      	lsrs	r1, r0, #5
 8102f7c:	2301      	movs	r3, #1
 8102f7e:	f000 001f 	and.w	r0, r0, #31
 8102f82:	4083      	lsls	r3, r0
 8102f84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8102f88:	4770      	bx	lr
 8102f8a:	bf00      	nop
 8102f8c:	e000e100 	.word	0xe000e100

08102f90 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102f90:	3801      	subs	r0, #1
 8102f92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8102f96:	d20b      	bcs.n	8102fb0 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102f98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f9c:	4a05      	ldr	r2, [pc, #20]	@ (8102fb4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102f9e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102fa0:	21f0      	movs	r1, #240	@ 0xf0
 8102fa2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102fa6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102fa8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102faa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102fac:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8102fae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8102fb0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8102fb2:	4770      	bx	lr
 8102fb4:	e000ed00 	.word	0xe000ed00

08102fb8 <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102fb8:	4b04      	ldr	r3, [pc, #16]	@ (8102fcc <HAL_GetCurrentCPUID+0x14>)
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
 8102fc0:	2b07      	cmp	r3, #7
  }
  else
  {
    return CM4_CPUID;
  }
}
 8102fc2:	bf14      	ite	ne
 8102fc4:	2001      	movne	r0, #1
 8102fc6:	2003      	moveq	r0, #3
 8102fc8:	4770      	bx	lr
 8102fca:	bf00      	nop
 8102fcc:	e000ed00 	.word	0xe000ed00

08102fd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102fd2:	f8df c178 	ldr.w	ip, [pc, #376]	@ 810314c <DMA_SetConfig+0x17c>
 8102fd6:	6804      	ldr	r4, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102fd8:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102fda:	4564      	cmp	r4, ip
 8102fdc:	d045      	beq.n	810306a <DMA_SetConfig+0x9a>
 8102fde:	4d58      	ldr	r5, [pc, #352]	@ (8103140 <DMA_SetConfig+0x170>)
 8102fe0:	42ac      	cmp	r4, r5
 8102fe2:	d042      	beq.n	810306a <DMA_SetConfig+0x9a>
 8102fe4:	3518      	adds	r5, #24
 8102fe6:	42ac      	cmp	r4, r5
 8102fe8:	d03f      	beq.n	810306a <DMA_SetConfig+0x9a>
 8102fea:	3518      	adds	r5, #24
 8102fec:	42ac      	cmp	r4, r5
 8102fee:	d03c      	beq.n	810306a <DMA_SetConfig+0x9a>
 8102ff0:	3518      	adds	r5, #24
 8102ff2:	42ac      	cmp	r4, r5
 8102ff4:	d039      	beq.n	810306a <DMA_SetConfig+0x9a>
 8102ff6:	3518      	adds	r5, #24
 8102ff8:	42ac      	cmp	r4, r5
 8102ffa:	d036      	beq.n	810306a <DMA_SetConfig+0x9a>
 8102ffc:	3518      	adds	r5, #24
 8102ffe:	42ac      	cmp	r4, r5
 8103000:	d033      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103002:	3518      	adds	r5, #24
 8103004:	42ac      	cmp	r4, r5
 8103006:	d030      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103008:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 810300c:	42ac      	cmp	r4, r5
 810300e:	d02c      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103010:	3518      	adds	r5, #24
 8103012:	42ac      	cmp	r4, r5
 8103014:	d029      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103016:	3518      	adds	r5, #24
 8103018:	42ac      	cmp	r4, r5
 810301a:	d026      	beq.n	810306a <DMA_SetConfig+0x9a>
 810301c:	3518      	adds	r5, #24
 810301e:	42ac      	cmp	r4, r5
 8103020:	d023      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103022:	3518      	adds	r5, #24
 8103024:	42ac      	cmp	r4, r5
 8103026:	d020      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103028:	3518      	adds	r5, #24
 810302a:	42ac      	cmp	r4, r5
 810302c:	d01d      	beq.n	810306a <DMA_SetConfig+0x9a>
 810302e:	3518      	adds	r5, #24
 8103030:	42ac      	cmp	r4, r5
 8103032:	d01a      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103034:	3518      	adds	r5, #24
 8103036:	42ac      	cmp	r4, r5
 8103038:	d017      	beq.n	810306a <DMA_SetConfig+0x9a>
 810303a:	4d42      	ldr	r5, [pc, #264]	@ (8103144 <DMA_SetConfig+0x174>)
 810303c:	42ac      	cmp	r4, r5
 810303e:	d014      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103040:	3514      	adds	r5, #20
 8103042:	42ac      	cmp	r4, r5
 8103044:	d011      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103046:	3514      	adds	r5, #20
 8103048:	42ac      	cmp	r4, r5
 810304a:	d00e      	beq.n	810306a <DMA_SetConfig+0x9a>
 810304c:	3514      	adds	r5, #20
 810304e:	42ac      	cmp	r4, r5
 8103050:	d00b      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103052:	3514      	adds	r5, #20
 8103054:	42ac      	cmp	r4, r5
 8103056:	d008      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103058:	3514      	adds	r5, #20
 810305a:	42ac      	cmp	r4, r5
 810305c:	d005      	beq.n	810306a <DMA_SetConfig+0x9a>
 810305e:	3514      	adds	r5, #20
 8103060:	42ac      	cmp	r4, r5
 8103062:	d002      	beq.n	810306a <DMA_SetConfig+0x9a>
 8103064:	3514      	adds	r5, #20
 8103066:	42ac      	cmp	r4, r5
 8103068:	d169      	bne.n	810313e <DMA_SetConfig+0x16e>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810306a:	e9d0 5619 	ldrd	r5, r6, [r0, #100]	@ 0x64
 810306e:	606e      	str	r6, [r5, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8103070:	6ec5      	ldr	r5, [r0, #108]	@ 0x6c
 8103072:	b115      	cbz	r5, 810307a <DMA_SetConfig+0xaa>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103074:	e9d0 561c 	ldrd	r5, r6, [r0, #112]	@ 0x70
 8103078:	606e      	str	r6, [r5, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810307a:	4564      	cmp	r4, ip
 810307c:	d037      	beq.n	81030ee <DMA_SetConfig+0x11e>
 810307e:	4d30      	ldr	r5, [pc, #192]	@ (8103140 <DMA_SetConfig+0x170>)
 8103080:	42ac      	cmp	r4, r5
 8103082:	d034      	beq.n	81030ee <DMA_SetConfig+0x11e>
 8103084:	3518      	adds	r5, #24
 8103086:	42ac      	cmp	r4, r5
 8103088:	d031      	beq.n	81030ee <DMA_SetConfig+0x11e>
 810308a:	3518      	adds	r5, #24
 810308c:	42ac      	cmp	r4, r5
 810308e:	d02e      	beq.n	81030ee <DMA_SetConfig+0x11e>
 8103090:	3518      	adds	r5, #24
 8103092:	42ac      	cmp	r4, r5
 8103094:	d02b      	beq.n	81030ee <DMA_SetConfig+0x11e>
 8103096:	3518      	adds	r5, #24
 8103098:	42ac      	cmp	r4, r5
 810309a:	d028      	beq.n	81030ee <DMA_SetConfig+0x11e>
 810309c:	3518      	adds	r5, #24
 810309e:	42ac      	cmp	r4, r5
 81030a0:	d025      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030a2:	3518      	adds	r5, #24
 81030a4:	42ac      	cmp	r4, r5
 81030a6:	d022      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030a8:	f505 7556 	add.w	r5, r5, #856	@ 0x358
 81030ac:	42ac      	cmp	r4, r5
 81030ae:	d01e      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030b0:	3518      	adds	r5, #24
 81030b2:	42ac      	cmp	r4, r5
 81030b4:	d01b      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030b6:	3518      	adds	r5, #24
 81030b8:	42ac      	cmp	r4, r5
 81030ba:	d018      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030bc:	3518      	adds	r5, #24
 81030be:	42ac      	cmp	r4, r5
 81030c0:	d015      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030c2:	3518      	adds	r5, #24
 81030c4:	42ac      	cmp	r4, r5
 81030c6:	d012      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030c8:	3518      	adds	r5, #24
 81030ca:	42ac      	cmp	r4, r5
 81030cc:	d00f      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030ce:	3518      	adds	r5, #24
 81030d0:	42ac      	cmp	r4, r5
 81030d2:	d00c      	beq.n	81030ee <DMA_SetConfig+0x11e>
 81030d4:	3518      	adds	r5, #24
 81030d6:	42ac      	cmp	r4, r5
 81030d8:	d009      	beq.n	81030ee <DMA_SetConfig+0x11e>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81030da:	4d1a      	ldr	r5, [pc, #104]	@ (8103144 <DMA_SetConfig+0x174>)
 81030dc:	42ac      	cmp	r4, r5
 81030de:	d119      	bne.n	8103114 <DMA_SetConfig+0x144>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81030e0:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 81030e2:	f005 061f 	and.w	r6, r5, #31
 81030e6:	2501      	movs	r5, #1
 81030e8:	40b5      	lsls	r5, r6
 81030ea:	607d      	str	r5, [r7, #4]
 81030ec:	e009      	b.n	8103102 <DMA_SetConfig+0x132>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81030ee:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 81030f0:	f005 061f 	and.w	r6, r5, #31
 81030f4:	253f      	movs	r5, #63	@ 0x3f
 81030f6:	40b5      	lsls	r5, r6
 81030f8:	60bd      	str	r5, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81030fa:	6825      	ldr	r5, [r4, #0]
 81030fc:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8103100:	6025      	str	r5, [r4, #0]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8103102:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103104:	6883      	ldr	r3, [r0, #8]
 8103106:	2b40      	cmp	r3, #64	@ 0x40
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8103108:	bf0b      	itete	eq
 810310a:	60a2      	streq	r2, [r4, #8]
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810310c:	60a1      	strne	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810310e:	60e1      	streq	r1, [r4, #12]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8103110:	60e2      	strne	r2, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103112:	e014      	b.n	810313e <DMA_SetConfig+0x16e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103114:	4d0c      	ldr	r5, [pc, #48]	@ (8103148 <DMA_SetConfig+0x178>)
 8103116:	42ac      	cmp	r4, r5
 8103118:	d0e2      	beq.n	81030e0 <DMA_SetConfig+0x110>
 810311a:	3514      	adds	r5, #20
 810311c:	42ac      	cmp	r4, r5
 810311e:	d0df      	beq.n	81030e0 <DMA_SetConfig+0x110>
 8103120:	3514      	adds	r5, #20
 8103122:	42ac      	cmp	r4, r5
 8103124:	d0dc      	beq.n	81030e0 <DMA_SetConfig+0x110>
 8103126:	3514      	adds	r5, #20
 8103128:	42ac      	cmp	r4, r5
 810312a:	d0d9      	beq.n	81030e0 <DMA_SetConfig+0x110>
 810312c:	3514      	adds	r5, #20
 810312e:	42ac      	cmp	r4, r5
 8103130:	d0d6      	beq.n	81030e0 <DMA_SetConfig+0x110>
 8103132:	3514      	adds	r5, #20
 8103134:	42ac      	cmp	r4, r5
 8103136:	d0d3      	beq.n	81030e0 <DMA_SetConfig+0x110>
 8103138:	3514      	adds	r5, #20
 810313a:	42ac      	cmp	r4, r5
 810313c:	d0d0      	beq.n	81030e0 <DMA_SetConfig+0x110>
}
 810313e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103140:	40020028 	.word	0x40020028
 8103144:	58025408 	.word	0x58025408
 8103148:	5802541c 	.word	0x5802541c
 810314c:	40020010 	.word	0x40020010

08103150 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103150:	6803      	ldr	r3, [r0, #0]
 8103152:	4924      	ldr	r1, [pc, #144]	@ (81031e4 <DMA_CalcBaseAndBitshift+0x94>)
 8103154:	428b      	cmp	r3, r1
{
 8103156:	b510      	push	{r4, lr}
 8103158:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810315a:	d031      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 810315c:	3118      	adds	r1, #24
 810315e:	428b      	cmp	r3, r1
 8103160:	d02e      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 8103162:	3118      	adds	r1, #24
 8103164:	428b      	cmp	r3, r1
 8103166:	d02b      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 8103168:	3118      	adds	r1, #24
 810316a:	428b      	cmp	r3, r1
 810316c:	d028      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 810316e:	3118      	adds	r1, #24
 8103170:	428b      	cmp	r3, r1
 8103172:	d025      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 8103174:	3118      	adds	r1, #24
 8103176:	428b      	cmp	r3, r1
 8103178:	d022      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 810317a:	3118      	adds	r1, #24
 810317c:	428b      	cmp	r3, r1
 810317e:	d01f      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 8103180:	3118      	adds	r1, #24
 8103182:	428b      	cmp	r3, r1
 8103184:	d01c      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 8103186:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 810318a:	428b      	cmp	r3, r1
 810318c:	d018      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 810318e:	3118      	adds	r1, #24
 8103190:	428b      	cmp	r3, r1
 8103192:	d015      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 8103194:	3118      	adds	r1, #24
 8103196:	428b      	cmp	r3, r1
 8103198:	d012      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 810319a:	3118      	adds	r1, #24
 810319c:	428b      	cmp	r3, r1
 810319e:	d00f      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 81031a0:	3118      	adds	r1, #24
 81031a2:	428b      	cmp	r3, r1
 81031a4:	d00c      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 81031a6:	3118      	adds	r1, #24
 81031a8:	428b      	cmp	r3, r1
 81031aa:	d009      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 81031ac:	3118      	adds	r1, #24
 81031ae:	428b      	cmp	r3, r1
 81031b0:	d006      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
 81031b2:	3118      	adds	r1, #24
 81031b4:	428b      	cmp	r3, r1
 81031b6:	d003      	beq.n	81031c0 <DMA_CalcBaseAndBitshift+0x70>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81031b8:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81031bc:	6590      	str	r0, [r2, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
}
 81031be:	bd10      	pop	{r4, pc}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81031c0:	b2dc      	uxtb	r4, r3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81031c2:	4809      	ldr	r0, [pc, #36]	@ (81031e8 <DMA_CalcBaseAndBitshift+0x98>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81031c4:	3c10      	subs	r4, #16
 81031c6:	2118      	movs	r1, #24
 81031c8:	fbb4 f1f1 	udiv	r1, r4, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81031cc:	f001 0107 	and.w	r1, r1, #7
    if (stream_number > 3U)
 81031d0:	2c5f      	cmp	r4, #95	@ 0x5f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 81031d2:	5c41      	ldrb	r1, [r0, r1]
 81031d4:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 81031d6:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 81031da:	f020 0003 	bic.w	r0, r0, #3
 81031de:	bf88      	it	hi
 81031e0:	3004      	addhi	r0, #4
 81031e2:	e7eb      	b.n	81031bc <DMA_CalcBaseAndBitshift+0x6c>
 81031e4:	40020010 	.word	0x40020010
 81031e8:	0810f780 	.word	0x0810f780

081031ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81031ec:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81031ee:	4921      	ldr	r1, [pc, #132]	@ (8103274 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 81031f0:	428a      	cmp	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81031f2:	b2d3      	uxtb	r3, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81031f4:	d028      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81031f6:	3114      	adds	r1, #20
 81031f8:	428a      	cmp	r2, r1
 81031fa:	d025      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 81031fc:	3114      	adds	r1, #20
 81031fe:	428a      	cmp	r2, r1
 8103200:	d022      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103202:	3114      	adds	r1, #20
 8103204:	428a      	cmp	r2, r1
 8103206:	d01f      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103208:	3114      	adds	r1, #20
 810320a:	428a      	cmp	r2, r1
 810320c:	d01c      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810320e:	3114      	adds	r1, #20
 8103210:	428a      	cmp	r2, r1
 8103212:	d019      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 8103214:	3114      	adds	r1, #20
 8103216:	428a      	cmp	r2, r1
 8103218:	d016      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
 810321a:	3114      	adds	r1, #20
 810321c:	428a      	cmp	r2, r1
 810321e:	d013      	beq.n	8103248 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103220:	2118      	movs	r1, #24
 8103222:	3b10      	subs	r3, #16
 8103224:	fbb3 f3f1 	udiv	r3, r3, r1

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103228:	4913      	ldr	r1, [pc, #76]	@ (8103278 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 810322a:	4411      	add	r1, r2
 810322c:	29a8      	cmp	r1, #168	@ 0xa8
 810322e:	d91e      	bls.n	810326e <DMA_CalcDMAMUXChannelBaseAndMask+0x82>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103230:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103234:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103236:	f502 4202 	add.w	r2, r2, #33280	@ 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810323a:	f003 031f 	and.w	r3, r3, #31
 810323e:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103242:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103244:	490d      	ldr	r1, [pc, #52]	@ (810327c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8103246:	e00e      	b.n	8103266 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103248:	2214      	movs	r2, #20
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810324a:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810324c:	3b08      	subs	r3, #8
 810324e:	fbb3 f3f2 	udiv	r3, r3, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103252:	f103 52b0 	add.w	r2, r3, #369098752	@ 0x16000000
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103256:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810325a:	f502 4216 	add.w	r2, r2, #38400	@ 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810325e:	fa01 f303 	lsl.w	r3, r1, r3
 8103262:	4907      	ldr	r1, [pc, #28]	@ (8103280 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103264:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103266:	e9c0 2118 	strd	r2, r1, [r0, #96]	@ 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810326a:	6683      	str	r3, [r0, #104]	@ 0x68
  }
}
 810326c:	4770      	bx	lr
      stream_number += 8U;
 810326e:	3308      	adds	r3, #8
 8103270:	e7de      	b.n	8103230 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>
 8103272:	bf00      	nop
 8103274:	58025408 	.word	0x58025408
 8103278:	bffdfbf0 	.word	0xbffdfbf0
 810327c:	40020880 	.word	0x40020880
 8103280:	58025880 	.word	0x58025880

08103284 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103284:	7902      	ldrb	r2, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103286:	1e51      	subs	r1, r2, #1
 8103288:	2907      	cmp	r1, #7
{
 810328a:	b510      	push	{r4, lr}
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810328c:	d821      	bhi.n	81032d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4e>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810328e:	6803      	ldr	r3, [r0, #0]
 8103290:	4c13      	ldr	r4, [pc, #76]	@ (81032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>)
 8103292:	42a3      	cmp	r3, r4
 8103294:	d01e      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103296:	3414      	adds	r4, #20
 8103298:	42a3      	cmp	r3, r4
 810329a:	d01b      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 810329c:	3414      	adds	r4, #20
 810329e:	42a3      	cmp	r3, r4
 81032a0:	d018      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81032a2:	3414      	adds	r4, #20
 81032a4:	42a3      	cmp	r3, r4
 81032a6:	d015      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81032a8:	3414      	adds	r4, #20
 81032aa:	42a3      	cmp	r3, r4
 81032ac:	d012      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81032ae:	3414      	adds	r4, #20
 81032b0:	42a3      	cmp	r3, r4
 81032b2:	d00f      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81032b4:	3414      	adds	r4, #20
 81032b6:	42a3      	cmp	r3, r4
 81032b8:	d00c      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 81032ba:	3414      	adds	r4, #20
 81032bc:	42a3      	cmp	r3, r4
 81032be:	d009      	beq.n	81032d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81032c0:	4b08      	ldr	r3, [pc, #32]	@ (81032e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>)
 81032c2:	4413      	add	r3, r2
 81032c4:	4a08      	ldr	r2, [pc, #32]	@ (81032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 81032c6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81032c8:	e9c0 321b 	strd	r3, r2, [r0, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81032cc:	2301      	movs	r3, #1
 81032ce:	408b      	lsls	r3, r1
 81032d0:	6743      	str	r3, [r0, #116]	@ 0x74
  }
}
 81032d2:	bd10      	pop	{r4, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 81032d4:	4b05      	ldr	r3, [pc, #20]	@ (81032ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 81032d6:	4413      	add	r3, r2
 81032d8:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81032da:	4a05      	ldr	r2, [pc, #20]	@ (81032f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 81032dc:	e7f4      	b.n	81032c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>
 81032de:	bf00      	nop
 81032e0:	58025408 	.word	0x58025408
 81032e4:	1000823f 	.word	0x1000823f
 81032e8:	40020940 	.word	0x40020940
 81032ec:	1600963f 	.word	0x1600963f
 81032f0:	58025940 	.word	0x58025940

081032f4 <HAL_DMA_Init>:
{
 81032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81032f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 81032f8:	f7ff f994 	bl	8102624 <HAL_GetTick>
 81032fc:	4606      	mov	r6, r0
  if(hdma == NULL)
 81032fe:	2c00      	cmp	r4, #0
 8103300:	f000 80ee 	beq.w	81034e0 <HAL_DMA_Init+0x1ec>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103304:	6823      	ldr	r3, [r4, #0]
 8103306:	4d83      	ldr	r5, [pc, #524]	@ (8103514 <HAL_DMA_Init+0x220>)
 8103308:	42ab      	cmp	r3, r5
 810330a:	d06a      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 810330c:	4a82      	ldr	r2, [pc, #520]	@ (8103518 <HAL_DMA_Init+0x224>)
 810330e:	4293      	cmp	r3, r2
 8103310:	d067      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103312:	3218      	adds	r2, #24
 8103314:	4293      	cmp	r3, r2
 8103316:	d064      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103318:	3218      	adds	r2, #24
 810331a:	4293      	cmp	r3, r2
 810331c:	d061      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 810331e:	3218      	adds	r2, #24
 8103320:	4293      	cmp	r3, r2
 8103322:	d05e      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103324:	3218      	adds	r2, #24
 8103326:	4293      	cmp	r3, r2
 8103328:	d05b      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 810332a:	3218      	adds	r2, #24
 810332c:	4293      	cmp	r3, r2
 810332e:	d058      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103330:	3218      	adds	r2, #24
 8103332:	4293      	cmp	r3, r2
 8103334:	d055      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103336:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 810333a:	4293      	cmp	r3, r2
 810333c:	d051      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 810333e:	3218      	adds	r2, #24
 8103340:	4293      	cmp	r3, r2
 8103342:	d04e      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103344:	3218      	adds	r2, #24
 8103346:	4293      	cmp	r3, r2
 8103348:	d04b      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 810334a:	3218      	adds	r2, #24
 810334c:	4293      	cmp	r3, r2
 810334e:	d048      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103350:	3218      	adds	r2, #24
 8103352:	4293      	cmp	r3, r2
 8103354:	d045      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103356:	3218      	adds	r2, #24
 8103358:	4293      	cmp	r3, r2
 810335a:	d042      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 810335c:	3218      	adds	r2, #24
 810335e:	4293      	cmp	r3, r2
 8103360:	d03f      	beq.n	81033e2 <HAL_DMA_Init+0xee>
 8103362:	3218      	adds	r2, #24
 8103364:	4293      	cmp	r3, r2
 8103366:	d03c      	beq.n	81033e2 <HAL_DMA_Init+0xee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103368:	4a6c      	ldr	r2, [pc, #432]	@ (810351c <HAL_DMA_Init+0x228>)
 810336a:	4293      	cmp	r3, r2
 810336c:	f040 8158 	bne.w	8103620 <HAL_DMA_Init+0x32c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8103370:	2202      	movs	r2, #2
 8103372:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8103376:	2200      	movs	r2, #0
 8103378:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810337c:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810337e:	68a1      	ldr	r1, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103380:	f420 30ff 	bic.w	r0, r0, #130560	@ 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103384:	2940      	cmp	r1, #64	@ 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103386:	f420 70f8 	bic.w	r0, r0, #496	@ 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810338a:	f000 8167 	beq.w	810365c <HAL_DMA_Init+0x368>
 810338e:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 8103392:	4251      	negs	r1, r2
 8103394:	4151      	adcs	r1, r2
 8103396:	0389      	lsls	r1, r1, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103398:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 810339c:	08d2      	lsrs	r2, r2, #3
 810339e:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81033a2:	6966      	ldr	r6, [r4, #20]
 81033a4:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81033a8:	69a6      	ldr	r6, [r4, #24]
 81033aa:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81033ae:	69e6      	ldr	r6, [r4, #28]
 81033b0:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81033b4:	6a26      	ldr	r6, [r4, #32]
 81033b6:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 81033ba:	4302      	orrs	r2, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81033bc:	4311      	orrs	r1, r2
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81033be:	4a58      	ldr	r2, [pc, #352]	@ (8103520 <HAL_DMA_Init+0x22c>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81033c0:	6019      	str	r1, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81033c2:	441a      	add	r2, r3
 81033c4:	2314      	movs	r3, #20
 81033c6:	fbb2 f2f3 	udiv	r2, r2, r3
 81033ca:	0092      	lsls	r2, r2, #2
 81033cc:	65e2      	str	r2, [r4, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81033ce:	4620      	mov	r0, r4
 81033d0:	f7ff febe 	bl	8103150 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81033d4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 81033d6:	f003 021f 	and.w	r2, r3, #31
 81033da:	2301      	movs	r3, #1
 81033dc:	4093      	lsls	r3, r2
 81033de:	6043      	str	r3, [r0, #4]
 81033e0:	e0b4      	b.n	810354c <HAL_DMA_Init+0x258>
    hdma->State = HAL_DMA_STATE_BUSY;
 81033e2:	2202      	movs	r2, #2
 81033e4:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 81033e8:	42ab      	cmp	r3, r5
    __HAL_UNLOCK(hdma);
 81033ea:	f04f 0200 	mov.w	r2, #0
 81033ee:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 81033f2:	d01e      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 81033f4:	4a48      	ldr	r2, [pc, #288]	@ (8103518 <HAL_DMA_Init+0x224>)
 81033f6:	4293      	cmp	r3, r2
 81033f8:	d01b      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 81033fa:	3218      	adds	r2, #24
 81033fc:	4293      	cmp	r3, r2
 81033fe:	d018      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 8103400:	3218      	adds	r2, #24
 8103402:	4293      	cmp	r3, r2
 8103404:	d015      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 8103406:	3218      	adds	r2, #24
 8103408:	4293      	cmp	r3, r2
 810340a:	d012      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 810340c:	3218      	adds	r2, #24
 810340e:	4293      	cmp	r3, r2
 8103410:	d00f      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 8103412:	3218      	adds	r2, #24
 8103414:	4293      	cmp	r3, r2
 8103416:	d00c      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 8103418:	3218      	adds	r2, #24
 810341a:	4293      	cmp	r3, r2
 810341c:	d009      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 810341e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8103422:	4293      	cmp	r3, r2
 8103424:	d005      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 8103426:	3218      	adds	r2, #24
 8103428:	4293      	cmp	r3, r2
 810342a:	d002      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 810342c:	3218      	adds	r2, #24
 810342e:	4293      	cmp	r3, r2
 8103430:	d0ff      	beq.n	8103432 <HAL_DMA_Init+0x13e>
 8103432:	681a      	ldr	r2, [r3, #0]
 8103434:	f022 0201 	bic.w	r2, r2, #1
 8103438:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810343a:	6822      	ldr	r2, [r4, #0]
 810343c:	6813      	ldr	r3, [r2, #0]
 810343e:	07df      	lsls	r7, r3, #31
 8103440:	d444      	bmi.n	81034cc <HAL_DMA_Init+0x1d8>
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103442:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103444:	4837      	ldr	r0, [pc, #220]	@ (8103524 <HAL_DMA_Init+0x230>)
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103446:	69a1      	ldr	r1, [r4, #24]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103448:	4018      	ands	r0, r3
    registerValue |=  hdma->Init.Direction           |
 810344a:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
 810344e:	4333      	orrs	r3, r6
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103450:	6926      	ldr	r6, [r4, #16]
 8103452:	4333      	orrs	r3, r6
 8103454:	6966      	ldr	r6, [r4, #20]
 8103456:	4333      	orrs	r3, r6
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103458:	69e6      	ldr	r6, [r4, #28]
 810345a:	430b      	orrs	r3, r1
 810345c:	4333      	orrs	r3, r6
            hdma->Init.Mode                | hdma->Init.Priority;
 810345e:	6a26      	ldr	r6, [r4, #32]
 8103460:	4333      	orrs	r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103462:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8103464:	2e04      	cmp	r6, #4
    registerValue |=  hdma->Init.Direction           |
 8103466:	ea43 0300 	orr.w	r3, r3, r0
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 810346a:	bf02      	ittt	eq
 810346c:	e9d4 070b 	ldrdeq	r0, r7, [r4, #44]	@ 0x2c
 8103470:	4338      	orreq	r0, r7
 8103472:	4303      	orreq	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103474:	482c      	ldr	r0, [pc, #176]	@ (8103528 <HAL_DMA_Init+0x234>)
 8103476:	6800      	ldr	r0, [r0, #0]
 8103478:	0c00      	lsrs	r0, r0, #16
 810347a:	0400      	lsls	r0, r0, #16
 810347c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8103480:	d30e      	bcc.n	81034a0 <HAL_DMA_Init+0x1ac>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103482:	6860      	ldr	r0, [r4, #4]
 8103484:	f1a0 0729 	sub.w	r7, r0, #41	@ 0x29
 8103488:	2f05      	cmp	r7, #5
 810348a:	d907      	bls.n	810349c <HAL_DMA_Init+0x1a8>
 810348c:	383f      	subs	r0, #63	@ 0x3f
 810348e:	2813      	cmp	r0, #19
 8103490:	d806      	bhi.n	81034a0 <HAL_DMA_Init+0x1ac>
 8103492:	4f26      	ldr	r7, [pc, #152]	@ (810352c <HAL_DMA_Init+0x238>)
 8103494:	fa27 f000 	lsr.w	r0, r7, r0
 8103498:	07c0      	lsls	r0, r0, #31
 810349a:	d501      	bpl.n	81034a0 <HAL_DMA_Init+0x1ac>
        registerValue |= DMA_SxCR_TRBUFF;
 810349c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81034a0:	6013      	str	r3, [r2, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81034a2:	6953      	ldr	r3, [r2, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81034a4:	2e04      	cmp	r6, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81034a6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 81034aa:	ea43 0306 	orr.w	r3, r3, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81034ae:	d143      	bne.n	8103538 <HAL_DMA_Init+0x244>
      registerValue |= hdma->Init.FIFOThreshold;
 81034b0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81034b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 81034b4:	4303      	orrs	r3, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81034b6:	2e00      	cmp	r6, #0
 81034b8:	d03e      	beq.n	8103538 <HAL_DMA_Init+0x244>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81034ba:	b999      	cbnz	r1, 81034e4 <HAL_DMA_Init+0x1f0>
    switch (hdma->Init.FIFOThreshold)
 81034bc:	2801      	cmp	r0, #1
 81034be:	d021      	beq.n	8103504 <HAL_DMA_Init+0x210>
 81034c0:	f030 0102 	bics.w	r1, r0, #2
 81034c4:	d138      	bne.n	8103538 <HAL_DMA_Init+0x244>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81034c6:	01f1      	lsls	r1, r6, #7
 81034c8:	d536      	bpl.n	8103538 <HAL_DMA_Init+0x244>
 81034ca:	e01e      	b.n	810350a <HAL_DMA_Init+0x216>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81034cc:	f7ff f8aa 	bl	8102624 <HAL_GetTick>
 81034d0:	1b80      	subs	r0, r0, r6
 81034d2:	2805      	cmp	r0, #5
 81034d4:	d9b1      	bls.n	810343a <HAL_DMA_Init+0x146>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81034d6:	2320      	movs	r3, #32
 81034d8:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 81034da:	2303      	movs	r3, #3
 81034dc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 81034e0:	2001      	movs	r0, #1
}
 81034e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81034e4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 81034e8:	d122      	bne.n	8103530 <HAL_DMA_Init+0x23c>
    switch (hdma->Init.FIFOThreshold)
 81034ea:	2803      	cmp	r0, #3
 81034ec:	d824      	bhi.n	8103538 <HAL_DMA_Init+0x244>
 81034ee:	a101      	add	r1, pc, #4	@ (adr r1, 81034f4 <HAL_DMA_Init+0x200>)
 81034f0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 81034f4:	0810350b 	.word	0x0810350b
 81034f8:	081034c7 	.word	0x081034c7
 81034fc:	0810350b 	.word	0x0810350b
 8103500:	08103505 	.word	0x08103505
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103504:	f1b6 7fc0 	cmp.w	r6, #25165824	@ 0x1800000
 8103508:	d116      	bne.n	8103538 <HAL_DMA_Init+0x244>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810350a:	2340      	movs	r3, #64	@ 0x40
 810350c:	6563      	str	r3, [r4, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 810350e:	2301      	movs	r3, #1
 8103510:	e7e4      	b.n	81034dc <HAL_DMA_Init+0x1e8>
 8103512:	bf00      	nop
 8103514:	40020010 	.word	0x40020010
 8103518:	40020028 	.word	0x40020028
 810351c:	58025408 	.word	0x58025408
 8103520:	a7fdabf8 	.word	0xa7fdabf8
 8103524:	fe10803f 	.word	0xfe10803f
 8103528:	5c001000 	.word	0x5c001000
 810352c:	000f030f 	.word	0x000f030f
    switch (hdma->Init.FIFOThreshold)
 8103530:	2802      	cmp	r0, #2
 8103532:	d9ea      	bls.n	810350a <HAL_DMA_Init+0x216>
 8103534:	2803      	cmp	r0, #3
 8103536:	d0c6      	beq.n	81034c6 <HAL_DMA_Init+0x1d2>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103538:	6153      	str	r3, [r2, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810353a:	4620      	mov	r0, r4
 810353c:	f7ff fe08 	bl	8103150 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103540:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8103542:	f003 021f 	and.w	r2, r3, #31
 8103546:	233f      	movs	r3, #63	@ 0x3f
 8103548:	4093      	lsls	r3, r2
 810354a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810354c:	6823      	ldr	r3, [r4, #0]
 810354e:	42ab      	cmp	r3, r5
 8103550:	d045      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103552:	4a45      	ldr	r2, [pc, #276]	@ (8103668 <HAL_DMA_Init+0x374>)
 8103554:	4293      	cmp	r3, r2
 8103556:	d042      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103558:	3218      	adds	r2, #24
 810355a:	4293      	cmp	r3, r2
 810355c:	d03f      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 810355e:	3218      	adds	r2, #24
 8103560:	4293      	cmp	r3, r2
 8103562:	d03c      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103564:	3218      	adds	r2, #24
 8103566:	4293      	cmp	r3, r2
 8103568:	d039      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 810356a:	3218      	adds	r2, #24
 810356c:	4293      	cmp	r3, r2
 810356e:	d036      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103570:	3218      	adds	r2, #24
 8103572:	4293      	cmp	r3, r2
 8103574:	d033      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103576:	3218      	adds	r2, #24
 8103578:	4293      	cmp	r3, r2
 810357a:	d030      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 810357c:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8103580:	4293      	cmp	r3, r2
 8103582:	d02c      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103584:	3218      	adds	r2, #24
 8103586:	4293      	cmp	r3, r2
 8103588:	d029      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 810358a:	3218      	adds	r2, #24
 810358c:	4293      	cmp	r3, r2
 810358e:	d026      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103590:	3218      	adds	r2, #24
 8103592:	4293      	cmp	r3, r2
 8103594:	d023      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 8103596:	3218      	adds	r2, #24
 8103598:	4293      	cmp	r3, r2
 810359a:	d020      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 810359c:	3218      	adds	r2, #24
 810359e:	4293      	cmp	r3, r2
 81035a0:	d01d      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035a2:	3218      	adds	r2, #24
 81035a4:	4293      	cmp	r3, r2
 81035a6:	d01a      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035a8:	3218      	adds	r2, #24
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d017      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035ae:	4a2f      	ldr	r2, [pc, #188]	@ (810366c <HAL_DMA_Init+0x378>)
 81035b0:	4293      	cmp	r3, r2
 81035b2:	d014      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035b4:	3214      	adds	r2, #20
 81035b6:	4293      	cmp	r3, r2
 81035b8:	d011      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035ba:	3214      	adds	r2, #20
 81035bc:	4293      	cmp	r3, r2
 81035be:	d00e      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035c0:	3214      	adds	r2, #20
 81035c2:	4293      	cmp	r3, r2
 81035c4:	d00b      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035c6:	3214      	adds	r2, #20
 81035c8:	4293      	cmp	r3, r2
 81035ca:	d008      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035cc:	3214      	adds	r2, #20
 81035ce:	4293      	cmp	r3, r2
 81035d0:	d005      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035d2:	3214      	adds	r2, #20
 81035d4:	4293      	cmp	r3, r2
 81035d6:	d002      	beq.n	81035de <HAL_DMA_Init+0x2ea>
 81035d8:	3214      	adds	r2, #20
 81035da:	4293      	cmp	r3, r2
 81035dc:	d11a      	bne.n	8103614 <HAL_DMA_Init+0x320>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81035de:	4620      	mov	r0, r4
 81035e0:	f7ff fe04 	bl	81031ec <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81035e4:	68a3      	ldr	r3, [r4, #8]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81035e6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81035e8:	2b80      	cmp	r3, #128	@ 0x80
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81035ea:	bf04      	itt	eq
 81035ec:	2300      	moveq	r3, #0
 81035ee:	6063      	streq	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81035f0:	6863      	ldr	r3, [r4, #4]
 81035f2:	b2d9      	uxtb	r1, r3
 81035f4:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81035f6:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81035fa:	3b01      	subs	r3, #1
 81035fc:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81035fe:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103600:	f04f 0500 	mov.w	r5, #0
 8103604:	d82c      	bhi.n	8103660 <HAL_DMA_Init+0x36c>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103606:	f7ff fe3d 	bl	8103284 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 810360a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 810360c:	601d      	str	r5, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810360e:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
 8103612:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103614:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8103616:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103618:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 810361a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 810361e:	e760      	b.n	81034e2 <HAL_DMA_Init+0x1ee>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103620:	4a13      	ldr	r2, [pc, #76]	@ (8103670 <HAL_DMA_Init+0x37c>)
 8103622:	4293      	cmp	r3, r2
 8103624:	f43f aea4 	beq.w	8103370 <HAL_DMA_Init+0x7c>
 8103628:	3214      	adds	r2, #20
 810362a:	4293      	cmp	r3, r2
 810362c:	f43f aea0 	beq.w	8103370 <HAL_DMA_Init+0x7c>
 8103630:	3214      	adds	r2, #20
 8103632:	4293      	cmp	r3, r2
 8103634:	f43f ae9c 	beq.w	8103370 <HAL_DMA_Init+0x7c>
 8103638:	3214      	adds	r2, #20
 810363a:	4293      	cmp	r3, r2
 810363c:	f43f ae98 	beq.w	8103370 <HAL_DMA_Init+0x7c>
 8103640:	3214      	adds	r2, #20
 8103642:	4293      	cmp	r3, r2
 8103644:	f43f ae94 	beq.w	8103370 <HAL_DMA_Init+0x7c>
 8103648:	3214      	adds	r2, #20
 810364a:	4293      	cmp	r3, r2
 810364c:	f43f ae90 	beq.w	8103370 <HAL_DMA_Init+0x7c>
 8103650:	3214      	adds	r2, #20
 8103652:	4293      	cmp	r3, r2
 8103654:	f43f ae8c 	beq.w	8103370 <HAL_DMA_Init+0x7c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103658:	2340      	movs	r3, #64	@ 0x40
 810365a:	e73d      	b.n	81034d8 <HAL_DMA_Init+0x1e4>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810365c:	2110      	movs	r1, #16
 810365e:	e69b      	b.n	8103398 <HAL_DMA_Init+0xa4>
      hdma->DMAmuxRequestGenStatus = 0U;
 8103660:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103664:	6765      	str	r5, [r4, #116]	@ 0x74
 8103666:	e7d5      	b.n	8103614 <HAL_DMA_Init+0x320>
 8103668:	40020028 	.word	0x40020028
 810366c:	58025408 	.word	0x58025408
 8103670:	5802541c 	.word	0x5802541c

08103674 <HAL_DMA_Start_IT>:
{
 8103674:	b570      	push	{r4, r5, r6, lr}
  if(hdma == NULL)
 8103676:	2800      	cmp	r0, #0
 8103678:	f000 810a 	beq.w	8103890 <HAL_DMA_Start_IT+0x21c>
  __HAL_LOCK(hdma);
 810367c:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
 8103680:	2c01      	cmp	r4, #1
 8103682:	f000 8107 	beq.w	8103894 <HAL_DMA_Start_IT+0x220>
 8103686:	2401      	movs	r4, #1
 8103688:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 810368c:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8103690:	2c01      	cmp	r4, #1
 8103692:	f04f 0400 	mov.w	r4, #0
 8103696:	f040 80f6 	bne.w	8103886 <HAL_DMA_Start_IT+0x212>
    hdma->State = HAL_DMA_STATE_BUSY;
 810369a:	2502      	movs	r5, #2
 810369c:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 81036a0:	4d7d      	ldr	r5, [pc, #500]	@ (8103898 <HAL_DMA_Start_IT+0x224>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81036a2:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 81036a4:	6804      	ldr	r4, [r0, #0]
 81036a6:	42ac      	cmp	r4, r5
 81036a8:	d01e      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036aa:	4e7c      	ldr	r6, [pc, #496]	@ (810389c <HAL_DMA_Start_IT+0x228>)
 81036ac:	42b4      	cmp	r4, r6
 81036ae:	d01b      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036b0:	3618      	adds	r6, #24
 81036b2:	42b4      	cmp	r4, r6
 81036b4:	d018      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036b6:	3618      	adds	r6, #24
 81036b8:	42b4      	cmp	r4, r6
 81036ba:	d015      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036bc:	3618      	adds	r6, #24
 81036be:	42b4      	cmp	r4, r6
 81036c0:	d012      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036c2:	3618      	adds	r6, #24
 81036c4:	42b4      	cmp	r4, r6
 81036c6:	d00f      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036c8:	3618      	adds	r6, #24
 81036ca:	42b4      	cmp	r4, r6
 81036cc:	d00c      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036ce:	3618      	adds	r6, #24
 81036d0:	42b4      	cmp	r4, r6
 81036d2:	d009      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036d4:	f506 7656 	add.w	r6, r6, #856	@ 0x358
 81036d8:	42b4      	cmp	r4, r6
 81036da:	d005      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036dc:	3618      	adds	r6, #24
 81036de:	42b4      	cmp	r4, r6
 81036e0:	d002      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036e2:	3618      	adds	r6, #24
 81036e4:	42b4      	cmp	r4, r6
 81036e6:	d0ff      	beq.n	81036e8 <HAL_DMA_Start_IT+0x74>
 81036e8:	6826      	ldr	r6, [r4, #0]
 81036ea:	f026 0601 	bic.w	r6, r6, #1
 81036ee:	6026      	str	r6, [r4, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81036f0:	f7ff fc6e 	bl	8102fd0 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81036f4:	42ac      	cmp	r4, r5
 81036f6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 81036f8:	d053      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 81036fa:	4b68      	ldr	r3, [pc, #416]	@ (810389c <HAL_DMA_Start_IT+0x228>)
 81036fc:	429c      	cmp	r4, r3
 81036fe:	d050      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103700:	3318      	adds	r3, #24
 8103702:	429c      	cmp	r4, r3
 8103704:	d04d      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103706:	3318      	adds	r3, #24
 8103708:	429c      	cmp	r4, r3
 810370a:	d04a      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 810370c:	3318      	adds	r3, #24
 810370e:	429c      	cmp	r4, r3
 8103710:	d047      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103712:	3318      	adds	r3, #24
 8103714:	429c      	cmp	r4, r3
 8103716:	d044      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103718:	3318      	adds	r3, #24
 810371a:	429c      	cmp	r4, r3
 810371c:	d041      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 810371e:	3318      	adds	r3, #24
 8103720:	429c      	cmp	r4, r3
 8103722:	d03e      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103724:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8103728:	429c      	cmp	r4, r3
 810372a:	d03a      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 810372c:	3318      	adds	r3, #24
 810372e:	429c      	cmp	r4, r3
 8103730:	d037      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103732:	3318      	adds	r3, #24
 8103734:	429c      	cmp	r4, r3
 8103736:	d034      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103738:	3318      	adds	r3, #24
 810373a:	429c      	cmp	r4, r3
 810373c:	d031      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 810373e:	3318      	adds	r3, #24
 8103740:	429c      	cmp	r4, r3
 8103742:	d02e      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103744:	3318      	adds	r3, #24
 8103746:	429c      	cmp	r4, r3
 8103748:	d02b      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 810374a:	3318      	adds	r3, #24
 810374c:	429c      	cmp	r4, r3
 810374e:	d028      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
 8103750:	3318      	adds	r3, #24
 8103752:	429c      	cmp	r4, r3
 8103754:	d025      	beq.n	81037a2 <HAL_DMA_Start_IT+0x12e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8103756:	6823      	ldr	r3, [r4, #0]
 8103758:	f023 030e 	bic.w	r3, r3, #14
 810375c:	f043 030a 	orr.w	r3, r3, #10
 8103760:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103762:	2a00      	cmp	r2, #0
 8103764:	d156      	bne.n	8103814 <HAL_DMA_Start_IT+0x1a0>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103766:	4b4e      	ldr	r3, [pc, #312]	@ (81038a0 <HAL_DMA_Start_IT+0x22c>)
 8103768:	429c      	cmp	r4, r3
 810376a:	d027      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810376c:	4b4d      	ldr	r3, [pc, #308]	@ (81038a4 <HAL_DMA_Start_IT+0x230>)
 810376e:	429c      	cmp	r4, r3
 8103770:	d024      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103772:	3314      	adds	r3, #20
 8103774:	429c      	cmp	r4, r3
 8103776:	d021      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103778:	3314      	adds	r3, #20
 810377a:	429c      	cmp	r4, r3
 810377c:	d01e      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810377e:	3314      	adds	r3, #20
 8103780:	429c      	cmp	r4, r3
 8103782:	d01b      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103784:	3314      	adds	r3, #20
 8103786:	429c      	cmp	r4, r3
 8103788:	d018      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810378a:	3314      	adds	r3, #20
 810378c:	429c      	cmp	r4, r3
 810378e:	d015      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103790:	3314      	adds	r3, #20
 8103792:	429c      	cmp	r4, r3
 8103794:	d012      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
    __HAL_DMA_ENABLE(hdma);
 8103796:	6823      	ldr	r3, [r4, #0]
 8103798:	f043 0301 	orr.w	r3, r3, #1
 810379c:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810379e:	2000      	movs	r0, #0
}
 81037a0:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81037a2:	6823      	ldr	r3, [r4, #0]
 81037a4:	f023 031e 	bic.w	r3, r3, #30
 81037a8:	f043 0316 	orr.w	r3, r3, #22
 81037ac:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 81037ae:	b11a      	cbz	r2, 81037b8 <HAL_DMA_Start_IT+0x144>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81037b0:	6823      	ldr	r3, [r4, #0]
 81037b2:	f043 0308 	orr.w	r3, r3, #8
 81037b6:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81037b8:	42ac      	cmp	r4, r5
 81037ba:	d130      	bne.n	810381e <HAL_DMA_Start_IT+0x1aa>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81037bc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 81037be:	681a      	ldr	r2, [r3, #0]
 81037c0:	03d2      	lsls	r2, r2, #15
 81037c2:	d45b      	bmi.n	810387c <HAL_DMA_Start_IT+0x208>
      if(hdma->DMAmuxRequestGen != 0U)
 81037c4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 81037c6:	b11b      	cbz	r3, 81037d0 <HAL_DMA_Start_IT+0x15c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81037c8:	681a      	ldr	r2, [r3, #0]
 81037ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81037ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 81037d0:	42ac      	cmp	r4, r5
 81037d2:	d0e0      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037d4:	4b31      	ldr	r3, [pc, #196]	@ (810389c <HAL_DMA_Start_IT+0x228>)
 81037d6:	429c      	cmp	r4, r3
 81037d8:	d0dd      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037da:	3318      	adds	r3, #24
 81037dc:	429c      	cmp	r4, r3
 81037de:	d0da      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037e0:	3318      	adds	r3, #24
 81037e2:	429c      	cmp	r4, r3
 81037e4:	d0d7      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037e6:	3318      	adds	r3, #24
 81037e8:	429c      	cmp	r4, r3
 81037ea:	d0d4      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037ec:	3318      	adds	r3, #24
 81037ee:	429c      	cmp	r4, r3
 81037f0:	d0d1      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037f2:	3318      	adds	r3, #24
 81037f4:	429c      	cmp	r4, r3
 81037f6:	d0ce      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037f8:	3318      	adds	r3, #24
 81037fa:	429c      	cmp	r4, r3
 81037fc:	d0cb      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 81037fe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8103802:	429c      	cmp	r4, r3
 8103804:	d0c7      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 8103806:	3318      	adds	r3, #24
 8103808:	429c      	cmp	r4, r3
 810380a:	d0c4      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 810380c:	3318      	adds	r3, #24
 810380e:	429c      	cmp	r4, r3
 8103810:	d0c1      	beq.n	8103796 <HAL_DMA_Start_IT+0x122>
 8103812:	e7c0      	b.n	8103796 <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8103814:	6823      	ldr	r3, [r4, #0]
 8103816:	f043 0304 	orr.w	r3, r3, #4
 810381a:	6023      	str	r3, [r4, #0]
 810381c:	e7a3      	b.n	8103766 <HAL_DMA_Start_IT+0xf2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810381e:	4b1f      	ldr	r3, [pc, #124]	@ (810389c <HAL_DMA_Start_IT+0x228>)
 8103820:	429c      	cmp	r4, r3
 8103822:	d0cb      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103824:	3318      	adds	r3, #24
 8103826:	429c      	cmp	r4, r3
 8103828:	d0c8      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810382a:	3318      	adds	r3, #24
 810382c:	429c      	cmp	r4, r3
 810382e:	d0c5      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103830:	3318      	adds	r3, #24
 8103832:	429c      	cmp	r4, r3
 8103834:	d0c2      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103836:	3318      	adds	r3, #24
 8103838:	429c      	cmp	r4, r3
 810383a:	d0bf      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810383c:	3318      	adds	r3, #24
 810383e:	429c      	cmp	r4, r3
 8103840:	d0bc      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103842:	3318      	adds	r3, #24
 8103844:	429c      	cmp	r4, r3
 8103846:	d0b9      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103848:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 810384c:	429c      	cmp	r4, r3
 810384e:	d0b5      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103850:	3318      	adds	r3, #24
 8103852:	429c      	cmp	r4, r3
 8103854:	d0b2      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103856:	3318      	adds	r3, #24
 8103858:	429c      	cmp	r4, r3
 810385a:	d0af      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810385c:	3318      	adds	r3, #24
 810385e:	429c      	cmp	r4, r3
 8103860:	d0ac      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103862:	3318      	adds	r3, #24
 8103864:	429c      	cmp	r4, r3
 8103866:	d0a9      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103868:	3318      	adds	r3, #24
 810386a:	429c      	cmp	r4, r3
 810386c:	d0a6      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810386e:	3318      	adds	r3, #24
 8103870:	429c      	cmp	r4, r3
 8103872:	d0a3      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 8103874:	3318      	adds	r3, #24
 8103876:	429c      	cmp	r4, r3
 8103878:	d0a0      	beq.n	81037bc <HAL_DMA_Start_IT+0x148>
 810387a:	e774      	b.n	8103766 <HAL_DMA_Start_IT+0xf2>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 810387c:	681a      	ldr	r2, [r3, #0]
 810387e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103882:	601a      	str	r2, [r3, #0]
 8103884:	e79e      	b.n	81037c4 <HAL_DMA_Start_IT+0x150>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8103886:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810388a:	6543      	str	r3, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 810388c:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8103890:	2001      	movs	r0, #1
 8103892:	e785      	b.n	81037a0 <HAL_DMA_Start_IT+0x12c>
  __HAL_LOCK(hdma);
 8103894:	2002      	movs	r0, #2
 8103896:	e783      	b.n	81037a0 <HAL_DMA_Start_IT+0x12c>
 8103898:	40020010 	.word	0x40020010
 810389c:	40020028 	.word	0x40020028
 81038a0:	58025408 	.word	0x58025408
 81038a4:	5802541c 	.word	0x5802541c

081038a8 <HAL_DMA_Abort>:
{
 81038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81038aa:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 81038ac:	f7fe feba 	bl	8102624 <HAL_GetTick>
 81038b0:	4607      	mov	r7, r0
  if(hdma == NULL)
 81038b2:	b145      	cbz	r5, 81038c6 <HAL_DMA_Abort+0x1e>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81038b4:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 81038b8:	2b02      	cmp	r3, #2
 81038ba:	d006      	beq.n	81038ca <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81038bc:	2380      	movs	r3, #128	@ 0x80
 81038be:	656b      	str	r3, [r5, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 81038c0:	2300      	movs	r3, #0
 81038c2:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 81038c6:	2001      	movs	r0, #1
}
 81038c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81038ca:	682c      	ldr	r4, [r5, #0]
 81038cc:	4ea9      	ldr	r6, [pc, #676]	@ (8103b74 <HAL_DMA_Abort+0x2cc>)
 81038ce:	42b4      	cmp	r4, r6
 81038d0:	d04a      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038d2:	4ba9      	ldr	r3, [pc, #676]	@ (8103b78 <HAL_DMA_Abort+0x2d0>)
 81038d4:	429c      	cmp	r4, r3
 81038d6:	d047      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038d8:	3318      	adds	r3, #24
 81038da:	429c      	cmp	r4, r3
 81038dc:	d044      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038de:	3318      	adds	r3, #24
 81038e0:	429c      	cmp	r4, r3
 81038e2:	d041      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038e4:	3318      	adds	r3, #24
 81038e6:	429c      	cmp	r4, r3
 81038e8:	d03e      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038ea:	3318      	adds	r3, #24
 81038ec:	429c      	cmp	r4, r3
 81038ee:	d03b      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038f0:	3318      	adds	r3, #24
 81038f2:	429c      	cmp	r4, r3
 81038f4:	d038      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038f6:	3318      	adds	r3, #24
 81038f8:	429c      	cmp	r4, r3
 81038fa:	d035      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 81038fc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8103900:	429c      	cmp	r4, r3
 8103902:	d031      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 8103904:	3318      	adds	r3, #24
 8103906:	429c      	cmp	r4, r3
 8103908:	d02e      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 810390a:	3318      	adds	r3, #24
 810390c:	429c      	cmp	r4, r3
 810390e:	d02b      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 8103910:	3318      	adds	r3, #24
 8103912:	429c      	cmp	r4, r3
 8103914:	d028      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 8103916:	3318      	adds	r3, #24
 8103918:	429c      	cmp	r4, r3
 810391a:	d025      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 810391c:	3318      	adds	r3, #24
 810391e:	429c      	cmp	r4, r3
 8103920:	d022      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 8103922:	3318      	adds	r3, #24
 8103924:	429c      	cmp	r4, r3
 8103926:	d01f      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
 8103928:	3318      	adds	r3, #24
 810392a:	429c      	cmp	r4, r3
 810392c:	d01c      	beq.n	8103968 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810392e:	6823      	ldr	r3, [r4, #0]
 8103930:	f023 030e 	bic.w	r3, r3, #14
 8103934:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103936:	4b91      	ldr	r3, [pc, #580]	@ (8103b7c <HAL_DMA_Abort+0x2d4>)
 8103938:	429c      	cmp	r4, r3
 810393a:	d01f      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 810393c:	3314      	adds	r3, #20
 810393e:	429c      	cmp	r4, r3
 8103940:	d01c      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 8103942:	3314      	adds	r3, #20
 8103944:	429c      	cmp	r4, r3
 8103946:	d019      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 8103948:	3314      	adds	r3, #20
 810394a:	429c      	cmp	r4, r3
 810394c:	d016      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 810394e:	3314      	adds	r3, #20
 8103950:	429c      	cmp	r4, r3
 8103952:	d013      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 8103954:	3314      	adds	r3, #20
 8103956:	429c      	cmp	r4, r3
 8103958:	d010      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 810395a:	3314      	adds	r3, #20
 810395c:	429c      	cmp	r4, r3
 810395e:	d00d      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 8103960:	3314      	adds	r3, #20
 8103962:	429c      	cmp	r4, r3
 8103964:	d112      	bne.n	810398c <HAL_DMA_Abort+0xe4>
 8103966:	e009      	b.n	810397c <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103968:	6823      	ldr	r3, [r4, #0]
 810396a:	f023 031e 	bic.w	r3, r3, #30
 810396e:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103970:	6963      	ldr	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103972:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103978:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810397a:	d176      	bne.n	8103a6a <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810397c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 810397e:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8103980:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103982:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103986:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8103988:	f040 80ab 	bne.w	8103ae2 <HAL_DMA_Abort+0x23a>
 810398c:	6823      	ldr	r3, [r4, #0]
 810398e:	f023 0301 	bic.w	r3, r3, #1
 8103992:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103994:	6823      	ldr	r3, [r4, #0]
 8103996:	07db      	lsls	r3, r3, #31
 8103998:	f100 80cd 	bmi.w	8103b36 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810399c:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810399e:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81039a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81039a2:	42b3      	cmp	r3, r6
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81039a4:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81039a8:	f000 80d1 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039ac:	4972      	ldr	r1, [pc, #456]	@ (8103b78 <HAL_DMA_Abort+0x2d0>)
 81039ae:	428b      	cmp	r3, r1
 81039b0:	f000 80cd 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039b4:	3118      	adds	r1, #24
 81039b6:	428b      	cmp	r3, r1
 81039b8:	f000 80c9 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039bc:	3118      	adds	r1, #24
 81039be:	428b      	cmp	r3, r1
 81039c0:	f000 80c5 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039c4:	3118      	adds	r1, #24
 81039c6:	428b      	cmp	r3, r1
 81039c8:	f000 80c1 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039cc:	3118      	adds	r1, #24
 81039ce:	428b      	cmp	r3, r1
 81039d0:	f000 80bd 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039d4:	3118      	adds	r1, #24
 81039d6:	428b      	cmp	r3, r1
 81039d8:	f000 80b9 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039dc:	3118      	adds	r1, #24
 81039de:	428b      	cmp	r3, r1
 81039e0:	f000 80b5 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039e4:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 81039e8:	428b      	cmp	r3, r1
 81039ea:	f000 80b0 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039ee:	3118      	adds	r1, #24
 81039f0:	428b      	cmp	r3, r1
 81039f2:	f000 80ac 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039f6:	3118      	adds	r1, #24
 81039f8:	428b      	cmp	r3, r1
 81039fa:	f000 80a8 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 81039fe:	3118      	adds	r1, #24
 8103a00:	428b      	cmp	r3, r1
 8103a02:	f000 80a4 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 8103a06:	3118      	adds	r1, #24
 8103a08:	428b      	cmp	r3, r1
 8103a0a:	f000 80a0 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 8103a0e:	3118      	adds	r1, #24
 8103a10:	428b      	cmp	r3, r1
 8103a12:	f000 809c 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 8103a16:	3118      	adds	r1, #24
 8103a18:	428b      	cmp	r3, r1
 8103a1a:	f000 8098 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
 8103a1e:	3118      	adds	r1, #24
 8103a20:	428b      	cmp	r3, r1
 8103a22:	f000 8094 	beq.w	8103b4e <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103a26:	2101      	movs	r1, #1
 8103a28:	fa01 f202 	lsl.w	r2, r1, r2
 8103a2c:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103a2e:	4a53      	ldr	r2, [pc, #332]	@ (8103b7c <HAL_DMA_Abort+0x2d4>)
 8103a30:	4293      	cmp	r3, r2
 8103a32:	f000 8092 	beq.w	8103b5a <HAL_DMA_Abort+0x2b2>
 8103a36:	3214      	adds	r2, #20
 8103a38:	4293      	cmp	r3, r2
 8103a3a:	f000 808e 	beq.w	8103b5a <HAL_DMA_Abort+0x2b2>
 8103a3e:	3214      	adds	r2, #20
 8103a40:	4293      	cmp	r3, r2
 8103a42:	f000 808a 	beq.w	8103b5a <HAL_DMA_Abort+0x2b2>
 8103a46:	3214      	adds	r2, #20
 8103a48:	4293      	cmp	r3, r2
 8103a4a:	f000 8086 	beq.w	8103b5a <HAL_DMA_Abort+0x2b2>
 8103a4e:	3214      	adds	r2, #20
 8103a50:	4293      	cmp	r3, r2
 8103a52:	f000 8082 	beq.w	8103b5a <HAL_DMA_Abort+0x2b2>
 8103a56:	3214      	adds	r2, #20
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	d07e      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103a5c:	3214      	adds	r2, #20
 8103a5e:	4293      	cmp	r3, r2
 8103a60:	d07b      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103a62:	3214      	adds	r2, #20
 8103a64:	4293      	cmp	r3, r2
 8103a66:	d17e      	bne.n	8103b66 <HAL_DMA_Abort+0x2be>
 8103a68:	e077      	b.n	8103b5a <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103a6a:	4b43      	ldr	r3, [pc, #268]	@ (8103b78 <HAL_DMA_Abort+0x2d0>)
 8103a6c:	429c      	cmp	r4, r3
 8103a6e:	d085      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 8103a70:	3318      	adds	r3, #24
 8103a72:	429c      	cmp	r4, r3
 8103a74:	d082      	beq.n	810397c <HAL_DMA_Abort+0xd4>
 8103a76:	3318      	adds	r3, #24
 8103a78:	429c      	cmp	r4, r3
 8103a7a:	f43f af7f 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103a7e:	3318      	adds	r3, #24
 8103a80:	429c      	cmp	r4, r3
 8103a82:	f43f af7b 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103a86:	3318      	adds	r3, #24
 8103a88:	429c      	cmp	r4, r3
 8103a8a:	f43f af77 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103a8e:	3318      	adds	r3, #24
 8103a90:	429c      	cmp	r4, r3
 8103a92:	f43f af73 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103a96:	3318      	adds	r3, #24
 8103a98:	429c      	cmp	r4, r3
 8103a9a:	f43f af6f 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103a9e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8103aa2:	429c      	cmp	r4, r3
 8103aa4:	f43f af6a 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103aa8:	3318      	adds	r3, #24
 8103aaa:	429c      	cmp	r4, r3
 8103aac:	f43f af66 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103ab0:	3318      	adds	r3, #24
 8103ab2:	429c      	cmp	r4, r3
 8103ab4:	f43f af62 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103ab8:	3318      	adds	r3, #24
 8103aba:	429c      	cmp	r4, r3
 8103abc:	f43f af5e 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103ac0:	3318      	adds	r3, #24
 8103ac2:	429c      	cmp	r4, r3
 8103ac4:	f43f af5a 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103ac8:	3318      	adds	r3, #24
 8103aca:	429c      	cmp	r4, r3
 8103acc:	f43f af56 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103ad0:	3318      	adds	r3, #24
 8103ad2:	429c      	cmp	r4, r3
 8103ad4:	f43f af52 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103ad8:	3318      	adds	r3, #24
 8103ada:	429c      	cmp	r4, r3
 8103adc:	f43f af4e 	beq.w	810397c <HAL_DMA_Abort+0xd4>
 8103ae0:	e729      	b.n	8103936 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8103ae2:	4b25      	ldr	r3, [pc, #148]	@ (8103b78 <HAL_DMA_Abort+0x2d0>)
 8103ae4:	429c      	cmp	r4, r3
 8103ae6:	f43f af51 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103aea:	3318      	adds	r3, #24
 8103aec:	429c      	cmp	r4, r3
 8103aee:	f43f af4d 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103af2:	3318      	adds	r3, #24
 8103af4:	429c      	cmp	r4, r3
 8103af6:	f43f af49 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103afa:	3318      	adds	r3, #24
 8103afc:	429c      	cmp	r4, r3
 8103afe:	f43f af45 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103b02:	3318      	adds	r3, #24
 8103b04:	429c      	cmp	r4, r3
 8103b06:	f43f af41 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103b0a:	3318      	adds	r3, #24
 8103b0c:	429c      	cmp	r4, r3
 8103b0e:	f43f af3d 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103b12:	3318      	adds	r3, #24
 8103b14:	429c      	cmp	r4, r3
 8103b16:	f43f af39 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103b1a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8103b1e:	429c      	cmp	r4, r3
 8103b20:	f43f af34 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103b24:	3318      	adds	r3, #24
 8103b26:	429c      	cmp	r4, r3
 8103b28:	f43f af30 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103b2c:	3318      	adds	r3, #24
 8103b2e:	429c      	cmp	r4, r3
 8103b30:	f43f af2c 	beq.w	810398c <HAL_DMA_Abort+0xe4>
 8103b34:	e72a      	b.n	810398c <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103b36:	f7fe fd75 	bl	8102624 <HAL_GetTick>
 8103b3a:	1bc0      	subs	r0, r0, r7
 8103b3c:	2805      	cmp	r0, #5
 8103b3e:	f67f af29 	bls.w	8103994 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103b42:	2320      	movs	r3, #32
 8103b44:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8103b46:	2303      	movs	r3, #3
 8103b48:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8103b4c:	e6b8      	b.n	81038c0 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103b4e:	213f      	movs	r1, #63	@ 0x3f
 8103b50:	fa01 f202 	lsl.w	r2, r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103b54:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103b56:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103b58:	d112      	bne.n	8103b80 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103b5a:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8103b5e:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8103b60:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d13b      	bne.n	8103bde <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8103b66:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8103b68:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8103b6a:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8103b6e:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8103b72:	e6a9      	b.n	81038c8 <HAL_DMA_Abort+0x20>
 8103b74:	40020010 	.word	0x40020010
 8103b78:	40020028 	.word	0x40020028
 8103b7c:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103b80:	4a1b      	ldr	r2, [pc, #108]	@ (8103bf0 <HAL_DMA_Abort+0x348>)
 8103b82:	4293      	cmp	r3, r2
 8103b84:	d0e9      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103b86:	3218      	adds	r2, #24
 8103b88:	4293      	cmp	r3, r2
 8103b8a:	d0e6      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103b8c:	3218      	adds	r2, #24
 8103b8e:	4293      	cmp	r3, r2
 8103b90:	d0e3      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103b92:	3218      	adds	r2, #24
 8103b94:	4293      	cmp	r3, r2
 8103b96:	d0e0      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103b98:	3218      	adds	r2, #24
 8103b9a:	4293      	cmp	r3, r2
 8103b9c:	d0dd      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103b9e:	3218      	adds	r2, #24
 8103ba0:	4293      	cmp	r3, r2
 8103ba2:	d0da      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103ba4:	3218      	adds	r2, #24
 8103ba6:	4293      	cmp	r3, r2
 8103ba8:	d0d7      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103baa:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d0d3      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bb2:	3218      	adds	r2, #24
 8103bb4:	4293      	cmp	r3, r2
 8103bb6:	d0d0      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bb8:	3218      	adds	r2, #24
 8103bba:	4293      	cmp	r3, r2
 8103bbc:	d0cd      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bbe:	3218      	adds	r2, #24
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d0ca      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bc4:	3218      	adds	r2, #24
 8103bc6:	4293      	cmp	r3, r2
 8103bc8:	d0c7      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bca:	3218      	adds	r2, #24
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d0c4      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bd0:	3218      	adds	r2, #24
 8103bd2:	4293      	cmp	r3, r2
 8103bd4:	d0c1      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bd6:	3218      	adds	r2, #24
 8103bd8:	4293      	cmp	r3, r2
 8103bda:	d0be      	beq.n	8103b5a <HAL_DMA_Abort+0x2b2>
 8103bdc:	e727      	b.n	8103a2e <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103bde:	681a      	ldr	r2, [r3, #0]
 8103be0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103be4:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103be6:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8103bea:	605a      	str	r2, [r3, #4]
 8103bec:	e7bb      	b.n	8103b66 <HAL_DMA_Abort+0x2be>
 8103bee:	bf00      	nop
 8103bf0:	40020028 	.word	0x40020028

08103bf4 <HAL_DMA_Abort_IT>:
{
 8103bf4:	b508      	push	{r3, lr}
  if(hdma == NULL)
 8103bf6:	b128      	cbz	r0, 8103c04 <HAL_DMA_Abort_IT+0x10>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103bf8:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8103bfc:	2b02      	cmp	r3, #2
 8103bfe:	d003      	beq.n	8103c08 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103c00:	2380      	movs	r3, #128	@ 0x80
 8103c02:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8103c04:	2001      	movs	r0, #1
 8103c06:	e05d      	b.n	8103cc4 <HAL_DMA_Abort_IT+0xd0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103c08:	6803      	ldr	r3, [r0, #0]
 8103c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8103d08 <HAL_DMA_Abort_IT+0x114>)
 8103c0c:	4293      	cmp	r3, r2
 8103c0e:	d051      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c10:	3218      	adds	r2, #24
 8103c12:	4293      	cmp	r3, r2
 8103c14:	d04e      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c16:	3218      	adds	r2, #24
 8103c18:	4293      	cmp	r3, r2
 8103c1a:	d04b      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c1c:	3218      	adds	r2, #24
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d048      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c22:	3218      	adds	r2, #24
 8103c24:	4293      	cmp	r3, r2
 8103c26:	d045      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c28:	3218      	adds	r2, #24
 8103c2a:	4293      	cmp	r3, r2
 8103c2c:	d042      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c2e:	3218      	adds	r2, #24
 8103c30:	4293      	cmp	r3, r2
 8103c32:	d03f      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c34:	3218      	adds	r2, #24
 8103c36:	4293      	cmp	r3, r2
 8103c38:	d03c      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c3a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d038      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c42:	3218      	adds	r2, #24
 8103c44:	4293      	cmp	r3, r2
 8103c46:	d035      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c48:	3218      	adds	r2, #24
 8103c4a:	4293      	cmp	r3, r2
 8103c4c:	d032      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c4e:	3218      	adds	r2, #24
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d02f      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c54:	3218      	adds	r2, #24
 8103c56:	4293      	cmp	r3, r2
 8103c58:	d02c      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c5a:	3218      	adds	r2, #24
 8103c5c:	4293      	cmp	r3, r2
 8103c5e:	d029      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c60:	3218      	adds	r2, #24
 8103c62:	4293      	cmp	r3, r2
 8103c64:	d026      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
 8103c66:	3218      	adds	r2, #24
 8103c68:	4293      	cmp	r3, r2
 8103c6a:	d023      	beq.n	8103cb4 <HAL_DMA_Abort_IT+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103c6c:	681a      	ldr	r2, [r3, #0]
 8103c6e:	f022 020e 	bic.w	r2, r2, #14
 8103c72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8103c74:	681a      	ldr	r2, [r3, #0]
 8103c76:	f022 0201 	bic.w	r2, r2, #1
 8103c7a:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103c7c:	4a23      	ldr	r2, [pc, #140]	@ (8103d0c <HAL_DMA_Abort_IT+0x118>)
 8103c7e:	4293      	cmp	r3, r2
 8103c80:	d121      	bne.n	8103cc6 <HAL_DMA_Abort_IT+0xd2>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103c82:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8103c84:	6813      	ldr	r3, [r2, #0]
 8103c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103c8a:	6013      	str	r3, [r2, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103c8c:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 8103c90:	f003 021f 	and.w	r2, r3, #31
 8103c94:	2301      	movs	r3, #1
 8103c96:	4093      	lsls	r3, r2
 8103c98:	604b      	str	r3, [r1, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103c9a:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 8103c9e:	605a      	str	r2, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8103ca0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8103ca2:	b32b      	cbz	r3, 8103cf0 <HAL_DMA_Abort_IT+0xfc>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103ca4:	681a      	ldr	r2, [r3, #0]
 8103ca6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103caa:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103cac:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 8103cb0:	605a      	str	r2, [r3, #4]
 8103cb2:	e01d      	b.n	8103cf0 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8103cb4:	2204      	movs	r2, #4
 8103cb6:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8103cba:	681a      	ldr	r2, [r3, #0]
 8103cbc:	f022 0201 	bic.w	r2, r2, #1
 8103cc0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8103cc2:	2000      	movs	r0, #0
}
 8103cc4:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103cc6:	4a12      	ldr	r2, [pc, #72]	@ (8103d10 <HAL_DMA_Abort_IT+0x11c>)
 8103cc8:	4293      	cmp	r3, r2
 8103cca:	d0da      	beq.n	8103c82 <HAL_DMA_Abort_IT+0x8e>
 8103ccc:	3214      	adds	r2, #20
 8103cce:	4293      	cmp	r3, r2
 8103cd0:	d0d7      	beq.n	8103c82 <HAL_DMA_Abort_IT+0x8e>
 8103cd2:	3214      	adds	r2, #20
 8103cd4:	4293      	cmp	r3, r2
 8103cd6:	d0d4      	beq.n	8103c82 <HAL_DMA_Abort_IT+0x8e>
 8103cd8:	3214      	adds	r2, #20
 8103cda:	4293      	cmp	r3, r2
 8103cdc:	d0d1      	beq.n	8103c82 <HAL_DMA_Abort_IT+0x8e>
 8103cde:	3214      	adds	r2, #20
 8103ce0:	4293      	cmp	r3, r2
 8103ce2:	d0ce      	beq.n	8103c82 <HAL_DMA_Abort_IT+0x8e>
 8103ce4:	3214      	adds	r2, #20
 8103ce6:	4293      	cmp	r3, r2
 8103ce8:	d0cb      	beq.n	8103c82 <HAL_DMA_Abort_IT+0x8e>
 8103cea:	3214      	adds	r2, #20
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d0c8      	beq.n	8103c82 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8103cf0:	2301      	movs	r3, #1
 8103cf2:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8103cf6:	2300      	movs	r3, #0
 8103cf8:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8103cfc:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8103cfe:	2b00      	cmp	r3, #0
 8103d00:	d0df      	beq.n	8103cc2 <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 8103d02:	4798      	blx	r3
 8103d04:	e7dd      	b.n	8103cc2 <HAL_DMA_Abort_IT+0xce>
 8103d06:	bf00      	nop
 8103d08:	40020010 	.word	0x40020010
 8103d0c:	58025408 	.word	0x58025408
 8103d10:	5802541c 	.word	0x5802541c

08103d14 <HAL_DMA_IRQHandler>:
{
 8103d14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8103d18:	2300      	movs	r3, #0
 8103d1a:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103d1c:	4b29      	ldr	r3, [pc, #164]	@ (8103dc4 <HAL_DMA_IRQHandler+0xb0>)
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103d1e:	4e2a      	ldr	r6, [pc, #168]	@ (8103dc8 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t timeout = SystemCoreClock / 9600U;
 8103d20:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103d22:	6803      	ldr	r3, [r0, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103d24:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103d26:	42b3      	cmp	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 8103d28:	f8d5 8000 	ldr.w	r8, [r5]
  tmpisr_bdma = regs_bdma->ISR;
 8103d2c:	f8d5 c000 	ldr.w	ip, [r5]
{
 8103d30:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103d32:	d04f      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d34:	4a25      	ldr	r2, [pc, #148]	@ (8103dcc <HAL_DMA_IRQHandler+0xb8>)
 8103d36:	4293      	cmp	r3, r2
 8103d38:	d04c      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d3a:	3218      	adds	r2, #24
 8103d3c:	4293      	cmp	r3, r2
 8103d3e:	d049      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d40:	3218      	adds	r2, #24
 8103d42:	4293      	cmp	r3, r2
 8103d44:	d046      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d46:	3218      	adds	r2, #24
 8103d48:	4293      	cmp	r3, r2
 8103d4a:	d043      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d4c:	3218      	adds	r2, #24
 8103d4e:	4293      	cmp	r3, r2
 8103d50:	d040      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d52:	3218      	adds	r2, #24
 8103d54:	4293      	cmp	r3, r2
 8103d56:	d03d      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d58:	3218      	adds	r2, #24
 8103d5a:	4293      	cmp	r3, r2
 8103d5c:	d03a      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d5e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8103d62:	4293      	cmp	r3, r2
 8103d64:	d036      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d66:	3218      	adds	r2, #24
 8103d68:	4293      	cmp	r3, r2
 8103d6a:	d033      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d6c:	3218      	adds	r2, #24
 8103d6e:	4293      	cmp	r3, r2
 8103d70:	d030      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d72:	3218      	adds	r2, #24
 8103d74:	4293      	cmp	r3, r2
 8103d76:	d02d      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d78:	3218      	adds	r2, #24
 8103d7a:	4293      	cmp	r3, r2
 8103d7c:	d02a      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d7e:	3218      	adds	r2, #24
 8103d80:	4293      	cmp	r3, r2
 8103d82:	d027      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d84:	3218      	adds	r2, #24
 8103d86:	4293      	cmp	r3, r2
 8103d88:	d024      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
 8103d8a:	3218      	adds	r2, #24
 8103d8c:	4293      	cmp	r3, r2
 8103d8e:	d021      	beq.n	8103dd4 <HAL_DMA_IRQHandler+0xc0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103d90:	4a0f      	ldr	r2, [pc, #60]	@ (8103dd0 <HAL_DMA_IRQHandler+0xbc>)
 8103d92:	4293      	cmp	r3, r2
 8103d94:	f040 8208 	bne.w	81041a8 <HAL_DMA_IRQHandler+0x494>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103d98:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103d9a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103d9c:	f001 011f 	and.w	r1, r1, #31
 8103da0:	2004      	movs	r0, #4
 8103da2:	4088      	lsls	r0, r1
 8103da4:	ea10 0f0c 	tst.w	r0, ip
 8103da8:	f000 8225 	beq.w	81041f6 <HAL_DMA_IRQHandler+0x4e2>
 8103dac:	0756      	lsls	r6, r2, #29
 8103dae:	f140 8222 	bpl.w	81041f6 <HAL_DMA_IRQHandler+0x4e2>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103db2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103db4:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103db6:	f140 8216 	bpl.w	81041e6 <HAL_DMA_IRQHandler+0x4d2>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103dba:	03d3      	lsls	r3, r2, #15
 8103dbc:	f100 8219 	bmi.w	81041f2 <HAL_DMA_IRQHandler+0x4de>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103dc0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8103dc2:	e17e      	b.n	81040c2 <HAL_DMA_IRQHandler+0x3ae>
 8103dc4:	10000054 	.word	0x10000054
 8103dc8:	40020010 	.word	0x40020010
 8103dcc:	40020028 	.word	0x40020028
 8103dd0:	58025408 	.word	0x58025408
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103dd4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8103dd6:	2008      	movs	r0, #8
 8103dd8:	f002 021f 	and.w	r2, r2, #31
 8103ddc:	4090      	lsls	r0, r2
 8103dde:	ea10 0f08 	tst.w	r0, r8
 8103de2:	d03d      	beq.n	8103e60 <HAL_DMA_IRQHandler+0x14c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103de4:	42b3      	cmp	r3, r6
 8103de6:	d02e      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103de8:	4984      	ldr	r1, [pc, #528]	@ (8103ffc <HAL_DMA_IRQHandler+0x2e8>)
 8103dea:	428b      	cmp	r3, r1
 8103dec:	d02b      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103dee:	3118      	adds	r1, #24
 8103df0:	428b      	cmp	r3, r1
 8103df2:	d028      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103df4:	3118      	adds	r1, #24
 8103df6:	428b      	cmp	r3, r1
 8103df8:	d025      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103dfa:	3118      	adds	r1, #24
 8103dfc:	428b      	cmp	r3, r1
 8103dfe:	d022      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e00:	3118      	adds	r1, #24
 8103e02:	428b      	cmp	r3, r1
 8103e04:	d01f      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e06:	3118      	adds	r1, #24
 8103e08:	428b      	cmp	r3, r1
 8103e0a:	d01c      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e0c:	3118      	adds	r1, #24
 8103e0e:	428b      	cmp	r3, r1
 8103e10:	d019      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e12:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8103e16:	428b      	cmp	r3, r1
 8103e18:	d015      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e1a:	3118      	adds	r1, #24
 8103e1c:	428b      	cmp	r3, r1
 8103e1e:	d012      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e20:	3118      	adds	r1, #24
 8103e22:	428b      	cmp	r3, r1
 8103e24:	d00f      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e26:	3118      	adds	r1, #24
 8103e28:	428b      	cmp	r3, r1
 8103e2a:	d00c      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e2c:	3118      	adds	r1, #24
 8103e2e:	428b      	cmp	r3, r1
 8103e30:	d009      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e32:	3118      	adds	r1, #24
 8103e34:	428b      	cmp	r3, r1
 8103e36:	d006      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e38:	3118      	adds	r1, #24
 8103e3a:	428b      	cmp	r3, r1
 8103e3c:	d003      	beq.n	8103e46 <HAL_DMA_IRQHandler+0x132>
 8103e3e:	3118      	adds	r1, #24
 8103e40:	428b      	cmp	r3, r1
 8103e42:	f040 80c1 	bne.w	8103fc8 <HAL_DMA_IRQHandler+0x2b4>
 8103e46:	6819      	ldr	r1, [r3, #0]
 8103e48:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8103e4c:	b141      	cbz	r1, 8103e60 <HAL_DMA_IRQHandler+0x14c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103e4e:	6819      	ldr	r1, [r3, #0]
 8103e50:	f021 0104 	bic.w	r1, r1, #4
 8103e54:	6019      	str	r1, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103e56:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103e58:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8103e5a:	f041 0101 	orr.w	r1, r1, #1
 8103e5e:	6561      	str	r1, [r4, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103e60:	fa28 f102 	lsr.w	r1, r8, r2
 8103e64:	07c8      	lsls	r0, r1, #31
 8103e66:	d534      	bpl.n	8103ed2 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103e68:	42b3      	cmp	r3, r6
 8103e6a:	d02e      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e6c:	4963      	ldr	r1, [pc, #396]	@ (8103ffc <HAL_DMA_IRQHandler+0x2e8>)
 8103e6e:	428b      	cmp	r3, r1
 8103e70:	d02b      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e72:	3118      	adds	r1, #24
 8103e74:	428b      	cmp	r3, r1
 8103e76:	d028      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e78:	3118      	adds	r1, #24
 8103e7a:	428b      	cmp	r3, r1
 8103e7c:	d025      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e7e:	3118      	adds	r1, #24
 8103e80:	428b      	cmp	r3, r1
 8103e82:	d022      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e84:	3118      	adds	r1, #24
 8103e86:	428b      	cmp	r3, r1
 8103e88:	d01f      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e8a:	3118      	adds	r1, #24
 8103e8c:	428b      	cmp	r3, r1
 8103e8e:	d01c      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e90:	3118      	adds	r1, #24
 8103e92:	428b      	cmp	r3, r1
 8103e94:	d019      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e96:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8103e9a:	428b      	cmp	r3, r1
 8103e9c:	d015      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103e9e:	3118      	adds	r1, #24
 8103ea0:	428b      	cmp	r3, r1
 8103ea2:	d012      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103ea4:	3118      	adds	r1, #24
 8103ea6:	428b      	cmp	r3, r1
 8103ea8:	d00f      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103eaa:	3118      	adds	r1, #24
 8103eac:	428b      	cmp	r3, r1
 8103eae:	d00c      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103eb0:	3118      	adds	r1, #24
 8103eb2:	428b      	cmp	r3, r1
 8103eb4:	d009      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103eb6:	3118      	adds	r1, #24
 8103eb8:	428b      	cmp	r3, r1
 8103eba:	d006      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103ebc:	3118      	adds	r1, #24
 8103ebe:	428b      	cmp	r3, r1
 8103ec0:	d003      	beq.n	8103eca <HAL_DMA_IRQHandler+0x1b6>
 8103ec2:	3118      	adds	r1, #24
 8103ec4:	428b      	cmp	r3, r1
 8103ec6:	f040 8083 	bne.w	8103fd0 <HAL_DMA_IRQHandler+0x2bc>
 8103eca:	6959      	ldr	r1, [r3, #20]
 8103ecc:	0609      	lsls	r1, r1, #24
 8103ece:	f100 8081 	bmi.w	8103fd4 <HAL_DMA_IRQHandler+0x2c0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103ed2:	2104      	movs	r1, #4
 8103ed4:	4091      	lsls	r1, r2
 8103ed6:	ea11 0f08 	tst.w	r1, r8
 8103eda:	d032      	beq.n	8103f42 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103edc:	42b3      	cmp	r3, r6
 8103ede:	d02d      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103ee0:	4846      	ldr	r0, [pc, #280]	@ (8103ffc <HAL_DMA_IRQHandler+0x2e8>)
 8103ee2:	4283      	cmp	r3, r0
 8103ee4:	d02a      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103ee6:	3018      	adds	r0, #24
 8103ee8:	4283      	cmp	r3, r0
 8103eea:	d027      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103eec:	3018      	adds	r0, #24
 8103eee:	4283      	cmp	r3, r0
 8103ef0:	d024      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103ef2:	3018      	adds	r0, #24
 8103ef4:	4283      	cmp	r3, r0
 8103ef6:	d021      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103ef8:	3018      	adds	r0, #24
 8103efa:	4283      	cmp	r3, r0
 8103efc:	d01e      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103efe:	3018      	adds	r0, #24
 8103f00:	4283      	cmp	r3, r0
 8103f02:	d01b      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f04:	3018      	adds	r0, #24
 8103f06:	4283      	cmp	r3, r0
 8103f08:	d018      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f0a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8103f0e:	4283      	cmp	r3, r0
 8103f10:	d014      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f12:	3018      	adds	r0, #24
 8103f14:	4283      	cmp	r3, r0
 8103f16:	d011      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f18:	3018      	adds	r0, #24
 8103f1a:	4283      	cmp	r3, r0
 8103f1c:	d00e      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f1e:	3018      	adds	r0, #24
 8103f20:	4283      	cmp	r3, r0
 8103f22:	d00b      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f24:	3018      	adds	r0, #24
 8103f26:	4283      	cmp	r3, r0
 8103f28:	d008      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f2a:	3018      	adds	r0, #24
 8103f2c:	4283      	cmp	r3, r0
 8103f2e:	d005      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f30:	3018      	adds	r0, #24
 8103f32:	4283      	cmp	r3, r0
 8103f34:	d002      	beq.n	8103f3c <HAL_DMA_IRQHandler+0x228>
 8103f36:	3018      	adds	r0, #24
 8103f38:	4283      	cmp	r3, r0
 8103f3a:	d153      	bne.n	8103fe4 <HAL_DMA_IRQHandler+0x2d0>
 8103f3c:	6818      	ldr	r0, [r3, #0]
 8103f3e:	0780      	lsls	r0, r0, #30
 8103f40:	d452      	bmi.n	8103fe8 <HAL_DMA_IRQHandler+0x2d4>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103f42:	2110      	movs	r1, #16
 8103f44:	4091      	lsls	r1, r2
 8103f46:	ea11 0f08 	tst.w	r1, r8
 8103f4a:	d05d      	beq.n	8104008 <HAL_DMA_IRQHandler+0x2f4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103f4c:	42b3      	cmp	r3, r6
 8103f4e:	d02d      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f50:	4a2a      	ldr	r2, [pc, #168]	@ (8103ffc <HAL_DMA_IRQHandler+0x2e8>)
 8103f52:	4293      	cmp	r3, r2
 8103f54:	d02a      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f56:	3218      	adds	r2, #24
 8103f58:	4293      	cmp	r3, r2
 8103f5a:	d027      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f5c:	3218      	adds	r2, #24
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d024      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f62:	3218      	adds	r2, #24
 8103f64:	4293      	cmp	r3, r2
 8103f66:	d021      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f68:	3218      	adds	r2, #24
 8103f6a:	4293      	cmp	r3, r2
 8103f6c:	d01e      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f6e:	3218      	adds	r2, #24
 8103f70:	4293      	cmp	r3, r2
 8103f72:	d01b      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f74:	3218      	adds	r2, #24
 8103f76:	4293      	cmp	r3, r2
 8103f78:	d018      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f7a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8103f7e:	4293      	cmp	r3, r2
 8103f80:	d014      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f82:	3218      	adds	r2, #24
 8103f84:	4293      	cmp	r3, r2
 8103f86:	d011      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f88:	3218      	adds	r2, #24
 8103f8a:	4293      	cmp	r3, r2
 8103f8c:	d00e      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f8e:	3218      	adds	r2, #24
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d00b      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f94:	3218      	adds	r2, #24
 8103f96:	4293      	cmp	r3, r2
 8103f98:	d008      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103f9a:	3218      	adds	r2, #24
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d005      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103fa0:	3218      	adds	r2, #24
 8103fa2:	4293      	cmp	r3, r2
 8103fa4:	d002      	beq.n	8103fac <HAL_DMA_IRQHandler+0x298>
 8103fa6:	3218      	adds	r2, #24
 8103fa8:	4293      	cmp	r3, r2
 8103faa:	d123      	bne.n	8103ff4 <HAL_DMA_IRQHandler+0x2e0>
 8103fac:	681a      	ldr	r2, [r3, #0]
 8103fae:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8103fb2:	b34a      	cbz	r2, 8104008 <HAL_DMA_IRQHandler+0x2f4>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103fb4:	60a9      	str	r1, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103fb6:	681a      	ldr	r2, [r3, #0]
 8103fb8:	0350      	lsls	r0, r2, #13
 8103fba:	f140 808a 	bpl.w	81040d2 <HAL_DMA_IRQHandler+0x3be>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	0319      	lsls	r1, r3, #12
 8103fc2:	d41d      	bmi.n	8104000 <HAL_DMA_IRQHandler+0x2ec>
          if(hdma->XferHalfCpltCallback != NULL)
 8103fc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8103fc6:	e01c      	b.n	8104002 <HAL_DMA_IRQHandler+0x2ee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103fc8:	6819      	ldr	r1, [r3, #0]
 8103fca:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8103fce:	e73d      	b.n	8103e4c <HAL_DMA_IRQHandler+0x138>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103fd0:	6819      	ldr	r1, [r3, #0]
 8103fd2:	e77e      	b.n	8103ed2 <HAL_DMA_IRQHandler+0x1be>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103fd4:	2101      	movs	r1, #1
 8103fd6:	4091      	lsls	r1, r2
 8103fd8:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103fda:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8103fdc:	f041 0102 	orr.w	r1, r1, #2
 8103fe0:	6561      	str	r1, [r4, #84]	@ 0x54
 8103fe2:	e776      	b.n	8103ed2 <HAL_DMA_IRQHandler+0x1be>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103fe4:	6819      	ldr	r1, [r3, #0]
 8103fe6:	e7ac      	b.n	8103f42 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103fe8:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103fea:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8103fec:	f041 0104 	orr.w	r1, r1, #4
 8103ff0:	6561      	str	r1, [r4, #84]	@ 0x54
 8103ff2:	e7a6      	b.n	8103f42 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103ff4:	681a      	ldr	r2, [r3, #0]
 8103ff6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8103ffa:	e7da      	b.n	8103fb2 <HAL_DMA_IRQHandler+0x29e>
 8103ffc:	40020028 	.word	0x40020028
            if(hdma->XferM1HalfCpltCallback != NULL)
 8104000:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
          if(hdma->XferHalfCpltCallback != NULL)
 8104002:	b10b      	cbz	r3, 8104008 <HAL_DMA_IRQHandler+0x2f4>
            hdma->XferHalfCpltCallback(hdma);
 8104004:	4620      	mov	r0, r4
 8104006:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104008:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 810400a:	2020      	movs	r0, #32
 810400c:	f001 011f 	and.w	r1, r1, #31
 8104010:	4088      	lsls	r0, r1
 8104012:	ea10 0f08 	tst.w	r0, r8
 8104016:	d071      	beq.n	81040fc <HAL_DMA_IRQHandler+0x3e8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104018:	6823      	ldr	r3, [r4, #0]
 810401a:	42b3      	cmp	r3, r6
 810401c:	d02d      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 810401e:	4a8c      	ldr	r2, [pc, #560]	@ (8104250 <HAL_DMA_IRQHandler+0x53c>)
 8104020:	4293      	cmp	r3, r2
 8104022:	d02a      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104024:	3218      	adds	r2, #24
 8104026:	4293      	cmp	r3, r2
 8104028:	d027      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 810402a:	3218      	adds	r2, #24
 810402c:	4293      	cmp	r3, r2
 810402e:	d024      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104030:	3218      	adds	r2, #24
 8104032:	4293      	cmp	r3, r2
 8104034:	d021      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104036:	3218      	adds	r2, #24
 8104038:	4293      	cmp	r3, r2
 810403a:	d01e      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 810403c:	3218      	adds	r2, #24
 810403e:	4293      	cmp	r3, r2
 8104040:	d01b      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104042:	3218      	adds	r2, #24
 8104044:	4293      	cmp	r3, r2
 8104046:	d018      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104048:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 810404c:	4293      	cmp	r3, r2
 810404e:	d014      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104050:	3218      	adds	r2, #24
 8104052:	4293      	cmp	r3, r2
 8104054:	d011      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104056:	3218      	adds	r2, #24
 8104058:	4293      	cmp	r3, r2
 810405a:	d00e      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 810405c:	3218      	adds	r2, #24
 810405e:	4293      	cmp	r3, r2
 8104060:	d00b      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104062:	3218      	adds	r2, #24
 8104064:	4293      	cmp	r3, r2
 8104066:	d008      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104068:	3218      	adds	r2, #24
 810406a:	4293      	cmp	r3, r2
 810406c:	d005      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 810406e:	3218      	adds	r2, #24
 8104070:	4293      	cmp	r3, r2
 8104072:	d002      	beq.n	810407a <HAL_DMA_IRQHandler+0x366>
 8104074:	3218      	adds	r2, #24
 8104076:	4293      	cmp	r3, r2
 8104078:	d133      	bne.n	81040e2 <HAL_DMA_IRQHandler+0x3ce>
 810407a:	681a      	ldr	r2, [r3, #0]
 810407c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8104080:	2a00      	cmp	r2, #0
 8104082:	d03b      	beq.n	81040fc <HAL_DMA_IRQHandler+0x3e8>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104084:	60a8      	str	r0, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8104086:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 810408a:	2a04      	cmp	r2, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810408c:	681a      	ldr	r2, [r3, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 810408e:	d12c      	bne.n	81040ea <HAL_DMA_IRQHandler+0x3d6>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104090:	f022 0216 	bic.w	r2, r2, #22
 8104094:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104096:	695a      	ldr	r2, [r3, #20]
 8104098:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810409c:	615a      	str	r2, [r3, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810409e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 81040a0:	b90a      	cbnz	r2, 81040a6 <HAL_DMA_IRQHandler+0x392>
 81040a2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 81040a4:	b11a      	cbz	r2, 81040ae <HAL_DMA_IRQHandler+0x39a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81040a6:	681a      	ldr	r2, [r3, #0]
 81040a8:	f022 0208 	bic.w	r2, r2, #8
 81040ac:	601a      	str	r2, [r3, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81040ae:	233f      	movs	r3, #63	@ 0x3f
 81040b0:	408b      	lsls	r3, r1
 81040b2:	60ab      	str	r3, [r5, #8]
          hdma->State = HAL_DMA_STATE_READY;
 81040b4:	2301      	movs	r3, #1
 81040b6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 81040ba:	2300      	movs	r3, #0
 81040bc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 81040c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      if (hdma->XferErrorCallback != NULL)
 81040c2:	2b00      	cmp	r3, #0
 81040c4:	f000 808c 	beq.w	81041e0 <HAL_DMA_IRQHandler+0x4cc>
        hdma->XferErrorCallback(hdma);
 81040c8:	4620      	mov	r0, r4
}
 81040ca:	b002      	add	sp, #8
 81040cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 81040d0:	4718      	bx	r3
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81040d2:	681a      	ldr	r2, [r3, #0]
 81040d4:	05d2      	lsls	r2, r2, #23
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81040d6:	bf5e      	ittt	pl
 81040d8:	681a      	ldrpl	r2, [r3, #0]
 81040da:	f022 0208 	bicpl.w	r2, r2, #8
 81040de:	601a      	strpl	r2, [r3, #0]
 81040e0:	e770      	b.n	8103fc4 <HAL_DMA_IRQHandler+0x2b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81040e2:	681a      	ldr	r2, [r3, #0]
 81040e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 81040e8:	e7ca      	b.n	8104080 <HAL_DMA_IRQHandler+0x36c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81040ea:	0355      	lsls	r5, r2, #13
 81040ec:	d54d      	bpl.n	810418a <HAL_DMA_IRQHandler+0x476>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	0318      	lsls	r0, r3, #12
 81040f2:	d457      	bmi.n	81041a4 <HAL_DMA_IRQHandler+0x490>
            if(hdma->XferM1CpltCallback != NULL)
 81040f4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          if(hdma->XferCpltCallback != NULL)
 81040f6:	b10b      	cbz	r3, 81040fc <HAL_DMA_IRQHandler+0x3e8>
            hdma->XferCpltCallback(hdma);
 81040f8:	4620      	mov	r0, r4
 81040fa:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81040fc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 81040fe:	2b00      	cmp	r3, #0
 8104100:	d06e      	beq.n	81041e0 <HAL_DMA_IRQHandler+0x4cc>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8104102:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8104104:	07d9      	lsls	r1, r3, #31
 8104106:	d53e      	bpl.n	8104186 <HAL_DMA_IRQHandler+0x472>
        hdma->State = HAL_DMA_STATE_ABORT;
 8104108:	2304      	movs	r3, #4
 810410a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_DMA_DISABLE(hdma);
 810410e:	6823      	ldr	r3, [r4, #0]
 8104110:	42b3      	cmp	r3, r6
 8104112:	d01e      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 8104114:	4a4e      	ldr	r2, [pc, #312]	@ (8104250 <HAL_DMA_IRQHandler+0x53c>)
 8104116:	4293      	cmp	r3, r2
 8104118:	d01b      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 810411a:	3218      	adds	r2, #24
 810411c:	4293      	cmp	r3, r2
 810411e:	d018      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 8104120:	3218      	adds	r2, #24
 8104122:	4293      	cmp	r3, r2
 8104124:	d015      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 8104126:	3218      	adds	r2, #24
 8104128:	4293      	cmp	r3, r2
 810412a:	d012      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 810412c:	3218      	adds	r2, #24
 810412e:	4293      	cmp	r3, r2
 8104130:	d00f      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 8104132:	3218      	adds	r2, #24
 8104134:	4293      	cmp	r3, r2
 8104136:	d00c      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 8104138:	3218      	adds	r2, #24
 810413a:	4293      	cmp	r3, r2
 810413c:	d009      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 810413e:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8104142:	4293      	cmp	r3, r2
 8104144:	d005      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 8104146:	3218      	adds	r2, #24
 8104148:	4293      	cmp	r3, r2
 810414a:	d002      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 810414c:	3218      	adds	r2, #24
 810414e:	4293      	cmp	r3, r2
 8104150:	d0ff      	beq.n	8104152 <HAL_DMA_IRQHandler+0x43e>
 8104152:	681a      	ldr	r2, [r3, #0]
 8104154:	f022 0201 	bic.w	r2, r2, #1
 8104158:	601a      	str	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 810415a:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 810415e:	fbb7 f1f1 	udiv	r1, r7, r1
          if (++count > timeout)
 8104162:	9a01      	ldr	r2, [sp, #4]
 8104164:	3201      	adds	r2, #1
 8104166:	428a      	cmp	r2, r1
 8104168:	9201      	str	r2, [sp, #4]
 810416a:	d802      	bhi.n	8104172 <HAL_DMA_IRQHandler+0x45e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810416c:	681a      	ldr	r2, [r3, #0]
 810416e:	07d2      	lsls	r2, r2, #31
 8104170:	d4f7      	bmi.n	8104162 <HAL_DMA_IRQHandler+0x44e>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	07df      	lsls	r7, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8104176:	bf4c      	ite	mi
 8104178:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 810417a:	2301      	movpl	r3, #1
      hdma->State = HAL_DMA_STATE_READY;
 810417c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8104180:	2300      	movs	r3, #0
 8104182:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      if (hdma->XferErrorCallback != NULL)
 8104186:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8104188:	e79b      	b.n	81040c2 <HAL_DMA_IRQHandler+0x3ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810418a:	681a      	ldr	r2, [r3, #0]
 810418c:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8104190:	d108      	bne.n	81041a4 <HAL_DMA_IRQHandler+0x490>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104192:	6819      	ldr	r1, [r3, #0]
 8104194:	f021 0110 	bic.w	r1, r1, #16
 8104198:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 810419a:	2301      	movs	r3, #1
 810419c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 81041a0:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          if(hdma->XferCpltCallback != NULL)
 81041a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 81041a6:	e7a6      	b.n	81040f6 <HAL_DMA_IRQHandler+0x3e2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81041a8:	4a2a      	ldr	r2, [pc, #168]	@ (8104254 <HAL_DMA_IRQHandler+0x540>)
 81041aa:	4293      	cmp	r3, r2
 81041ac:	f43f adf4 	beq.w	8103d98 <HAL_DMA_IRQHandler+0x84>
 81041b0:	3214      	adds	r2, #20
 81041b2:	4293      	cmp	r3, r2
 81041b4:	f43f adf0 	beq.w	8103d98 <HAL_DMA_IRQHandler+0x84>
 81041b8:	3214      	adds	r2, #20
 81041ba:	4293      	cmp	r3, r2
 81041bc:	f43f adec 	beq.w	8103d98 <HAL_DMA_IRQHandler+0x84>
 81041c0:	3214      	adds	r2, #20
 81041c2:	4293      	cmp	r3, r2
 81041c4:	f43f ade8 	beq.w	8103d98 <HAL_DMA_IRQHandler+0x84>
 81041c8:	3214      	adds	r2, #20
 81041ca:	4293      	cmp	r3, r2
 81041cc:	f43f ade4 	beq.w	8103d98 <HAL_DMA_IRQHandler+0x84>
 81041d0:	3214      	adds	r2, #20
 81041d2:	4293      	cmp	r3, r2
 81041d4:	f43f ade0 	beq.w	8103d98 <HAL_DMA_IRQHandler+0x84>
 81041d8:	3214      	adds	r2, #20
 81041da:	4293      	cmp	r3, r2
 81041dc:	f43f addc 	beq.w	8103d98 <HAL_DMA_IRQHandler+0x84>
}
 81041e0:	b002      	add	sp, #8
 81041e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81041e6:	0697      	lsls	r7, r2, #26
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81041e8:	bf5e      	ittt	pl
 81041ea:	681a      	ldrpl	r2, [r3, #0]
 81041ec:	f022 0204 	bicpl.w	r2, r2, #4
 81041f0:	601a      	strpl	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 81041f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81041f4:	e765      	b.n	81040c2 <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81041f6:	2002      	movs	r0, #2
 81041f8:	4088      	lsls	r0, r1
 81041fa:	ea10 0f0c 	tst.w	r0, ip
 81041fe:	d016      	beq.n	810422e <HAL_DMA_IRQHandler+0x51a>
 8104200:	0796      	lsls	r6, r2, #30
 8104202:	d514      	bpl.n	810422e <HAL_DMA_IRQHandler+0x51a>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104204:	6068      	str	r0, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104206:	0410      	lsls	r0, r2, #16
 8104208:	d503      	bpl.n	8104212 <HAL_DMA_IRQHandler+0x4fe>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810420a:	03d1      	lsls	r1, r2, #15
 810420c:	d40d      	bmi.n	810422a <HAL_DMA_IRQHandler+0x516>
          if(hdma->XferM1CpltCallback != NULL)
 810420e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8104210:	e757      	b.n	81040c2 <HAL_DMA_IRQHandler+0x3ae>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104212:	f012 0220 	ands.w	r2, r2, #32
 8104216:	d108      	bne.n	810422a <HAL_DMA_IRQHandler+0x516>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104218:	6819      	ldr	r1, [r3, #0]
 810421a:	f021 010a 	bic.w	r1, r1, #10
 810421e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8104220:	2301      	movs	r3, #1
 8104222:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8104226:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 810422a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 810422c:	e749      	b.n	81040c2 <HAL_DMA_IRQHandler+0x3ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810422e:	2008      	movs	r0, #8
 8104230:	4088      	lsls	r0, r1
 8104232:	ea10 0f0c 	tst.w	r0, ip
 8104236:	d0d3      	beq.n	81041e0 <HAL_DMA_IRQHandler+0x4cc>
 8104238:	0712      	lsls	r2, r2, #28
 810423a:	d5d1      	bpl.n	81041e0 <HAL_DMA_IRQHandler+0x4cc>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810423c:	681a      	ldr	r2, [r3, #0]
 810423e:	f022 020e 	bic.w	r2, r2, #14
 8104242:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104244:	2301      	movs	r3, #1
 8104246:	fa03 f101 	lsl.w	r1, r3, r1
 810424a:	6069      	str	r1, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 810424c:	6563      	str	r3, [r4, #84]	@ 0x54
 810424e:	e795      	b.n	810417c <HAL_DMA_IRQHandler+0x468>
 8104250:	40020028 	.word	0x40020028
 8104254:	5802541c 	.word	0x5802541c

08104258 <HAL_DMA_RegisterCallback>:
{
 8104258:	b510      	push	{r4, lr}
  if(hdma == NULL)
 810425a:	4603      	mov	r3, r0
 810425c:	b308      	cbz	r0, 81042a2 <HAL_DMA_RegisterCallback+0x4a>
  __HAL_LOCK(hdma);
 810425e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8104262:	2801      	cmp	r0, #1
 8104264:	d01f      	beq.n	81042a6 <HAL_DMA_RegisterCallback+0x4e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8104266:	f893 4035 	ldrb.w	r4, [r3, #53]	@ 0x35
 810426a:	2c01      	cmp	r4, #1
 810426c:	b2e0      	uxtb	r0, r4
 810426e:	d116      	bne.n	810429e <HAL_DMA_RegisterCallback+0x46>
    switch (CallbackID)
 8104270:	2905      	cmp	r1, #5
 8104272:	d806      	bhi.n	8104282 <HAL_DMA_RegisterCallback+0x2a>
 8104274:	e8df f001 	tbb	[pc, r1]
 8104278:	0d0b0903 	.word	0x0d0b0903
 810427c:	110f      	.short	0x110f
      hdma->XferCpltCallback = pCallback;
 810427e:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8104280:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 8104282:	2200      	movs	r2, #0
 8104284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8104288:	bd10      	pop	{r4, pc}
      hdma->XferHalfCpltCallback = pCallback;
 810428a:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 810428c:	e7f8      	b.n	8104280 <HAL_DMA_RegisterCallback+0x28>
      hdma->XferM1CpltCallback = pCallback;
 810428e:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8104290:	e7f6      	b.n	8104280 <HAL_DMA_RegisterCallback+0x28>
      hdma->XferM1HalfCpltCallback = pCallback;
 8104292:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8104294:	e7f4      	b.n	8104280 <HAL_DMA_RegisterCallback+0x28>
      hdma->XferErrorCallback = pCallback;
 8104296:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8104298:	e7f2      	b.n	8104280 <HAL_DMA_RegisterCallback+0x28>
      hdma->XferAbortCallback = pCallback;
 810429a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 810429c:	e7f0      	b.n	8104280 <HAL_DMA_RegisterCallback+0x28>
 810429e:	2001      	movs	r0, #1
 81042a0:	e7ef      	b.n	8104282 <HAL_DMA_RegisterCallback+0x2a>
    return HAL_ERROR;
 81042a2:	2001      	movs	r0, #1
 81042a4:	e7f0      	b.n	8104288 <HAL_DMA_RegisterCallback+0x30>
  __HAL_LOCK(hdma);
 81042a6:	2002      	movs	r0, #2
 81042a8:	e7ee      	b.n	8104288 <HAL_DMA_RegisterCallback+0x30>
	...

081042ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81042ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81042b0:	f8df 91c0 	ldr.w	r9, [pc, #448]	@ 8104474 <HAL_GPIO_Init+0x1c8>
  uint32_t position = 0x00U;
 81042b4:	2300      	movs	r3, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81042b6:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81042ba:	680a      	ldr	r2, [r1, #0]
 81042bc:	fa32 f503 	lsrs.w	r5, r2, r3
 81042c0:	d102      	bne.n	81042c8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 81042c2:	b003      	add	sp, #12
 81042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81042c8:	2501      	movs	r5, #1
 81042ca:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 81042ce:	ea18 0202 	ands.w	r2, r8, r2
 81042d2:	f000 80b9 	beq.w	8104448 <HAL_GPIO_Init+0x19c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81042d6:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81042d8:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81042da:	f006 0503 	and.w	r5, r6, #3
 81042de:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81042e2:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81042e6:	1e6f      	subs	r7, r5, #1
 81042e8:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81042ea:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81042ee:	d834      	bhi.n	810435a <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 81042f0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81042f2:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 81042f6:	68cf      	ldr	r7, [r1, #12]
 81042f8:	fa07 f70e 	lsl.w	r7, r7, lr
 81042fc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8104300:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8104302:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104304:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104308:	f3c6 1700 	ubfx	r7, r6, #4, #1
 810430c:	409f      	lsls	r7, r3
 810430e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8104312:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8104314:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104316:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810431a:	688f      	ldr	r7, [r1, #8]
 810431c:	fa07 f70e 	lsl.w	r7, r7, lr
 8104320:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104324:	2d02      	cmp	r5, #2
      GPIOx->PUPDR = temp;
 8104326:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104328:	d119      	bne.n	810435e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 810432a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 810432e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104332:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8104336:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810433a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 810433e:	f04f 0b0f 	mov.w	fp, #15
 8104342:	fa0b fb0a 	lsl.w	fp, fp, sl
 8104346:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810434a:	690f      	ldr	r7, [r1, #16]
 810434c:	fa07 f70a 	lsl.w	r7, r7, sl
 8104350:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8104354:	f8c8 7020 	str.w	r7, [r8, #32]
 8104358:	e001      	b.n	810435e <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810435a:	2d03      	cmp	r5, #3
 810435c:	d1da      	bne.n	8104314 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 810435e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104360:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104364:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104368:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810436a:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 810436e:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104370:	d06a      	beq.n	8104448 <HAL_GPIO_Init+0x19c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104372:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8104376:	f045 0502 	orr.w	r5, r5, #2
 810437a:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 810437e:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8104382:	f023 0703 	bic.w	r7, r3, #3
 8104386:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 810438a:	f005 0502 	and.w	r5, r5, #2
 810438e:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8104392:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104394:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104398:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 810439a:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810439c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 81043a0:	f04f 0e0f 	mov.w	lr, #15
 81043a4:	fa0e fe0c 	lsl.w	lr, lr, ip
 81043a8:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81043ac:	4d30      	ldr	r5, [pc, #192]	@ (8104470 <HAL_GPIO_Init+0x1c4>)
 81043ae:	42a8      	cmp	r0, r5
 81043b0:	d04c      	beq.n	810444c <HAL_GPIO_Init+0x1a0>
 81043b2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043b6:	42a8      	cmp	r0, r5
 81043b8:	d04a      	beq.n	8104450 <HAL_GPIO_Init+0x1a4>
 81043ba:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043be:	42a8      	cmp	r0, r5
 81043c0:	d048      	beq.n	8104454 <HAL_GPIO_Init+0x1a8>
 81043c2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043c6:	42a8      	cmp	r0, r5
 81043c8:	d046      	beq.n	8104458 <HAL_GPIO_Init+0x1ac>
 81043ca:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043ce:	42a8      	cmp	r0, r5
 81043d0:	d044      	beq.n	810445c <HAL_GPIO_Init+0x1b0>
 81043d2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043d6:	42a8      	cmp	r0, r5
 81043d8:	d042      	beq.n	8104460 <HAL_GPIO_Init+0x1b4>
 81043da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043de:	42a8      	cmp	r0, r5
 81043e0:	d040      	beq.n	8104464 <HAL_GPIO_Init+0x1b8>
 81043e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043e6:	42a8      	cmp	r0, r5
 81043e8:	d03e      	beq.n	8104468 <HAL_GPIO_Init+0x1bc>
 81043ea:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043ee:	42a8      	cmp	r0, r5
 81043f0:	d03c      	beq.n	810446c <HAL_GPIO_Init+0x1c0>
 81043f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 81043f6:	42a8      	cmp	r0, r5
 81043f8:	bf14      	ite	ne
 81043fa:	250a      	movne	r5, #10
 81043fc:	2509      	moveq	r5, #9
 81043fe:	fa05 f50c 	lsl.w	r5, r5, ip
 8104402:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104406:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8104408:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 810440a:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810440c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8104410:	bf0c      	ite	eq
 8104412:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104414:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8104416:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8104418:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810441a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 810441e:	bf0c      	ite	eq
 8104420:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104422:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8104424:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8104426:	f8d4 50c4 	ldr.w	r5, [r4, #196]	@ 0xc4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810442a:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 810442e:	bf0c      	ite	eq
 8104430:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8104432:	4315      	orrne	r5, r2
        EXTI_CurrentCPU->EMR1 = temp;
 8104434:	f8c4 50c4 	str.w	r5, [r4, #196]	@ 0xc4
        temp = EXTI_CurrentCPU->IMR1;
 8104438:	f8d4 50c0 	ldr.w	r5, [r4, #192]	@ 0xc0
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810443c:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 810443e:	bf54      	ite	pl
 8104440:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8104442:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8104444:	f8c4 50c0 	str.w	r5, [r4, #192]	@ 0xc0
    position++;
 8104448:	3301      	adds	r3, #1
 810444a:	e736      	b.n	81042ba <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810444c:	2500      	movs	r5, #0
 810444e:	e7d6      	b.n	81043fe <HAL_GPIO_Init+0x152>
 8104450:	2501      	movs	r5, #1
 8104452:	e7d4      	b.n	81043fe <HAL_GPIO_Init+0x152>
 8104454:	2502      	movs	r5, #2
 8104456:	e7d2      	b.n	81043fe <HAL_GPIO_Init+0x152>
 8104458:	2503      	movs	r5, #3
 810445a:	e7d0      	b.n	81043fe <HAL_GPIO_Init+0x152>
 810445c:	2504      	movs	r5, #4
 810445e:	e7ce      	b.n	81043fe <HAL_GPIO_Init+0x152>
 8104460:	2505      	movs	r5, #5
 8104462:	e7cc      	b.n	81043fe <HAL_GPIO_Init+0x152>
 8104464:	2506      	movs	r5, #6
 8104466:	e7ca      	b.n	81043fe <HAL_GPIO_Init+0x152>
 8104468:	2507      	movs	r5, #7
 810446a:	e7c8      	b.n	81043fe <HAL_GPIO_Init+0x152>
 810446c:	2508      	movs	r5, #8
 810446e:	e7c6      	b.n	81043fe <HAL_GPIO_Init+0x152>
 8104470:	58020000 	.word	0x58020000
 8104474:	58024400 	.word	0x58024400

08104478 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104478:	6903      	ldr	r3, [r0, #16]
 810447a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 810447c:	bf14      	ite	ne
 810447e:	2001      	movne	r0, #1
 8104480:	2000      	moveq	r0, #0
 8104482:	4770      	bx	lr

08104484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104484:	b10a      	cbz	r2, 810448a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104486:	6181      	str	r1, [r0, #24]
  }
}
 8104488:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810448a:	0409      	lsls	r1, r1, #16
 810448c:	e7fb      	b.n	8104486 <HAL_GPIO_WritePin+0x2>

0810448e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810448e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8104490:	ea01 0203 	and.w	r2, r1, r3
 8104494:	ea21 0103 	bic.w	r1, r1, r3
 8104498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810449c:	6181      	str	r1, [r0, #24]
}
 810449e:	4770      	bx	lr

081044a0 <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81044a0:	4a02      	ldr	r2, [pc, #8]	@ (81044ac <HAL_HSEM_ActivateNotification+0xc>)
 81044a2:	6913      	ldr	r3, [r2, #16]
 81044a4:	4303      	orrs	r3, r0
 81044a6:	6113      	str	r3, [r2, #16]
#endif
}
 81044a8:	4770      	bx	lr
 81044aa:	bf00      	nop
 81044ac:	58026500 	.word	0x58026500

081044b0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81044b0:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81044b2:	4c1e      	ldr	r4, [pc, #120]	@ (810452c <HAL_PWREx_EnterSTOPMode+0x7c>)
 81044b4:	6823      	ldr	r3, [r4, #0]
 81044b6:	f023 0301 	bic.w	r3, r3, #1
 81044ba:	4303      	orrs	r3, r0
{
 81044bc:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81044be:	6023      	str	r3, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81044c0:	b9c2      	cbnz	r2, 81044f4 <HAL_PWREx_EnterSTOPMode+0x44>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81044c2:	f7fe fd79 	bl	8102fb8 <HAL_GetCurrentCPUID>
 81044c6:	2803      	cmp	r0, #3
 81044c8:	d113      	bne.n	81044f2 <HAL_PWREx_EnterSTOPMode+0x42>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81044ca:	6923      	ldr	r3, [r4, #16]
 81044cc:	f023 0301 	bic.w	r3, r3, #1
 81044d0:	6123      	str	r3, [r4, #16]

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81044d2:	4b17      	ldr	r3, [pc, #92]	@ (8104530 <HAL_PWREx_EnterSTOPMode+0x80>)
 81044d4:	691a      	ldr	r2, [r3, #16]
 81044d6:	f042 0204 	orr.w	r2, r2, #4
 81044da:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81044dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81044e0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81044e4:	2d01      	cmp	r5, #1
 81044e6:	d110      	bne.n	810450a <HAL_PWREx_EnterSTOPMode+0x5a>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81044e8:	bf30      	wfi
      /* Request Wait For Event */
      __WFE ();
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81044ea:	691a      	ldr	r2, [r3, #16]
 81044ec:	f022 0204 	bic.w	r2, r2, #4
 81044f0:	611a      	str	r2, [r3, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81044f2:	bd38      	pop	{r3, r4, r5, pc}
  else if (Domain == PWR_D2_DOMAIN)
 81044f4:	2a01      	cmp	r2, #1
 81044f6:	d10a      	bne.n	810450e <HAL_PWREx_EnterSTOPMode+0x5e>
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81044f8:	f7fe fd5e 	bl	8102fb8 <HAL_GetCurrentCPUID>
 81044fc:	2801      	cmp	r0, #1
 81044fe:	d1f8      	bne.n	81044f2 <HAL_PWREx_EnterSTOPMode+0x42>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104500:	6963      	ldr	r3, [r4, #20]
 8104502:	f023 0302 	bic.w	r3, r3, #2
 8104506:	6163      	str	r3, [r4, #20]
 8104508:	e7e3      	b.n	81044d2 <HAL_PWREx_EnterSTOPMode+0x22>
      __WFE ();
 810450a:	bf20      	wfe
 810450c:	e7ed      	b.n	81044ea <HAL_PWREx_EnterSTOPMode+0x3a>
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810450e:	f7fe fd53 	bl	8102fb8 <HAL_GetCurrentCPUID>
 8104512:	2803      	cmp	r0, #3
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104514:	bf0b      	itete	eq
 8104516:	6923      	ldreq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104518:	6963      	ldrne	r3, [r4, #20]
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810451a:	f023 0304 	biceq.w	r3, r3, #4
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810451e:	f023 0304 	bicne.w	r3, r3, #4
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104522:	bf0c      	ite	eq
 8104524:	6123      	streq	r3, [r4, #16]
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104526:	6163      	strne	r3, [r4, #20]
 8104528:	e7e3      	b.n	81044f2 <HAL_PWREx_EnterSTOPMode+0x42>
 810452a:	bf00      	nop
 810452c:	58024800 	.word	0x58024800
 8104530:	e000ed00 	.word	0xe000ed00

08104534 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104534:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104536:	f7fe fd3f 	bl	8102fb8 <HAL_GetCurrentCPUID>
 810453a:	2803      	cmp	r0, #3
 810453c:	d101      	bne.n	8104542 <HAL_PWREx_ClearPendingEvent+0xe>
    __WFE ();
  }
  else
  {
    __SEV ();
    __WFE ();
 810453e:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104540:	bd08      	pop	{r3, pc}
    __SEV ();
 8104542:	bf40      	sev
 8104544:	e7fb      	b.n	810453e <HAL_PWREx_ClearPendingEvent+0xa>
	...

08104548 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104548:	4b49      	ldr	r3, [pc, #292]	@ (8104670 <HAL_RCC_GetSysClockFreq+0x128>)
 810454a:	691a      	ldr	r2, [r3, #16]
 810454c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8104550:	2a10      	cmp	r2, #16
{
 8104552:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104554:	f000 8088 	beq.w	8104668 <HAL_RCC_GetSysClockFreq+0x120>
 8104558:	2a18      	cmp	r2, #24
 810455a:	d00c      	beq.n	8104576 <HAL_RCC_GetSysClockFreq+0x2e>
 810455c:	2a00      	cmp	r2, #0
 810455e:	f040 8085 	bne.w	810466c <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104562:	681a      	ldr	r2, [r3, #0]
 8104564:	4843      	ldr	r0, [pc, #268]	@ (8104674 <HAL_RCC_GetSysClockFreq+0x12c>)
 8104566:	f012 0f20 	tst.w	r2, #32
 810456a:	d003      	beq.n	8104574 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810456c:	681b      	ldr	r3, [r3, #0]
 810456e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8104572:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8104574:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104576:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104578:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810457a:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810457c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 810457e:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104582:	f3c5 1005 	ubfx	r0, r5, #4, #6
      if (pllm != 0U)
 8104586:	d0f5      	beq.n	8104574 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104588:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810458c:	f004 0401 	and.w	r4, r4, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104590:	4362      	muls	r2, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104592:	ee07 0a90 	vmov	s15, r0
 8104596:	ee06 2a90 	vmov	s13, r2
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810459a:	f001 0103 	and.w	r1, r1, #3
 810459e:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81045a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81045a4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 81045a8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 81045ac:	d04e      	beq.n	810464c <HAL_RCC_GetSysClockFreq+0x104>
 81045ae:	2902      	cmp	r1, #2
 81045b0:	d03e      	beq.n	8104630 <HAL_RCC_GetSysClockFreq+0xe8>
 81045b2:	2900      	cmp	r1, #0
 81045b4:	d14a      	bne.n	810464c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81045b6:	681a      	ldr	r2, [r3, #0]
 81045b8:	0692      	lsls	r2, r2, #26
 81045ba:	d527      	bpl.n	810460c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81045bc:	6819      	ldr	r1, [r3, #0]
 81045be:	4a2d      	ldr	r2, [pc, #180]	@ (8104674 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81045c2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 81045c6:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81045c8:	ee07 2a90 	vmov	s15, r2
 81045cc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 81045d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81045d4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 81045d8:	ee07 3a10 	vmov	s14, r3
 81045dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81045e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 81045e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 81045e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81045ec:	4b20      	ldr	r3, [pc, #128]	@ (8104670 <HAL_RCC_GetSysClockFreq+0x128>)
 81045ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81045f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 81045f4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81045f6:	ee07 3a10 	vmov	s14, r3
 81045fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81045fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8104602:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8104606:	ee17 0a90 	vmov	r0, s15
 810460a:	e7b3      	b.n	8104574 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104612:	ee07 3a90 	vmov	s15, r3
 8104616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810461e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104622:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8104678 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104626:	eec6 6a07 	vdiv.f32	s13, s12, s14
 810462a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 810462e:	e7dd      	b.n	81045ec <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104636:	ee07 3a90 	vmov	s15, r3
 810463a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104642:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104646:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 810467c <HAL_RCC_GetSysClockFreq+0x134>
 810464a:	e7ec      	b.n	8104626 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104652:	ee07 3a90 	vmov	s15, r3
 8104656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810465a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810465e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8104662:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8104680 <HAL_RCC_GetSysClockFreq+0x138>
 8104666:	e7de      	b.n	8104626 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104668:	4806      	ldr	r0, [pc, #24]	@ (8104684 <HAL_RCC_GetSysClockFreq+0x13c>)
 810466a:	e783      	b.n	8104574 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 810466c:	4806      	ldr	r0, [pc, #24]	@ (8104688 <HAL_RCC_GetSysClockFreq+0x140>)
 810466e:	e781      	b.n	8104574 <HAL_RCC_GetSysClockFreq+0x2c>
 8104670:	58024400 	.word	0x58024400
 8104674:	03d09000 	.word	0x03d09000
 8104678:	4c742400 	.word	0x4c742400
 810467c:	4bbebc20 	.word	0x4bbebc20
 8104680:	4a742400 	.word	0x4a742400
 8104684:	017d7840 	.word	0x017d7840
 8104688:	003d0900 	.word	0x003d0900

0810468c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810468c:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810468e:	f7ff ff5b 	bl	8104548 <HAL_RCC_GetSysClockFreq>
 8104692:	4b0a      	ldr	r3, [pc, #40]	@ (81046bc <HAL_RCC_GetHCLKFreq+0x30>)
 8104694:	490a      	ldr	r1, [pc, #40]	@ (81046c0 <HAL_RCC_GetHCLKFreq+0x34>)
 8104696:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104698:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810469a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810469e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81046a2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81046a4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81046a6:	f002 021f 	and.w	r2, r2, #31
 81046aa:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81046ac:	f003 031f 	and.w	r3, r3, #31
 81046b0:	40d8      	lsrs	r0, r3
 81046b2:	4b04      	ldr	r3, [pc, #16]	@ (81046c4 <HAL_RCC_GetHCLKFreq+0x38>)
 81046b4:	6018      	str	r0, [r3, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81046b6:	4b04      	ldr	r3, [pc, #16]	@ (81046c8 <HAL_RCC_GetHCLKFreq+0x3c>)
 81046b8:	6018      	str	r0, [r3, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 81046ba:	bd08      	pop	{r3, pc}
 81046bc:	58024400 	.word	0x58024400
 81046c0:	0810ef70 	.word	0x0810ef70
 81046c4:	10000050 	.word	0x10000050
 81046c8:	10000054 	.word	0x10000054

081046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81046cc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81046ce:	f7ff ffdd 	bl	810468c <HAL_RCC_GetHCLKFreq>
 81046d2:	4b05      	ldr	r3, [pc, #20]	@ (81046e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 81046d4:	4a05      	ldr	r2, [pc, #20]	@ (81046ec <HAL_RCC_GetPCLK1Freq+0x20>)
 81046d6:	69db      	ldr	r3, [r3, #28]
 81046d8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 81046dc:	5cd3      	ldrb	r3, [r2, r3]
 81046de:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81046e2:	40d8      	lsrs	r0, r3
 81046e4:	bd08      	pop	{r3, pc}
 81046e6:	bf00      	nop
 81046e8:	58024400 	.word	0x58024400
 81046ec:	0810ef70 	.word	0x0810ef70

081046f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81046f0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81046f2:	f7ff ffcb 	bl	810468c <HAL_RCC_GetHCLKFreq>
 81046f6:	4b05      	ldr	r3, [pc, #20]	@ (810470c <HAL_RCC_GetPCLK2Freq+0x1c>)
 81046f8:	4a05      	ldr	r2, [pc, #20]	@ (8104710 <HAL_RCC_GetPCLK2Freq+0x20>)
 81046fa:	69db      	ldr	r3, [r3, #28]
 81046fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8104700:	5cd3      	ldrb	r3, [r2, r3]
 8104702:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104706:	40d8      	lsrs	r0, r3
 8104708:	bd08      	pop	{r3, pc}
 810470a:	bf00      	nop
 810470c:	58024400 	.word	0x58024400
 8104710:	0810ef70 	.word	0x0810ef70

08104714 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104716:	4c3a      	ldr	r4, [pc, #232]	@ (8104800 <RCCEx_PLL2_Config+0xec>)
 8104718:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 810471a:	f003 0303 	and.w	r3, r3, #3
 810471e:	2b03      	cmp	r3, #3
{
 8104720:	4606      	mov	r6, r0
 8104722:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104724:	d069      	beq.n	81047fa <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104726:	6823      	ldr	r3, [r4, #0]
 8104728:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810472c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810472e:	f7fd ff79 	bl	8102624 <HAL_GetTick>
 8104732:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104734:	6823      	ldr	r3, [r4, #0]
 8104736:	011a      	lsls	r2, r3, #4
 8104738:	d44b      	bmi.n	81047d2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810473a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 810473c:	6832      	ldr	r2, [r6, #0]
 810473e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8104742:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8104746:	62a3      	str	r3, [r4, #40]	@ 0x28
 8104748:	68b3      	ldr	r3, [r6, #8]
 810474a:	68f2      	ldr	r2, [r6, #12]
 810474c:	3b01      	subs	r3, #1
 810474e:	3a01      	subs	r2, #1
 8104750:	025b      	lsls	r3, r3, #9
 8104752:	0412      	lsls	r2, r2, #16
 8104754:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8104758:	b29b      	uxth	r3, r3
 810475a:	4313      	orrs	r3, r2
 810475c:	6872      	ldr	r2, [r6, #4]
 810475e:	3a01      	subs	r2, #1
 8104760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104764:	4313      	orrs	r3, r2
 8104766:	6932      	ldr	r2, [r6, #16]
 8104768:	3a01      	subs	r2, #1
 810476a:	0612      	lsls	r2, r2, #24
 810476c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8104770:	4313      	orrs	r3, r2
 8104772:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104774:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8104776:	6972      	ldr	r2, [r6, #20]
 8104778:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 810477c:	4313      	orrs	r3, r2
 810477e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104780:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8104782:	69b2      	ldr	r2, [r6, #24]
 8104784:	f023 0320 	bic.w	r3, r3, #32
 8104788:	4313      	orrs	r3, r2
 810478a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810478c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 810478e:	f023 0310 	bic.w	r3, r3, #16
 8104792:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104794:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8104796:	69f2      	ldr	r2, [r6, #28]
 8104798:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810479c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81047a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 81047a4:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81047a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 81047a8:	f043 0310 	orr.w	r3, r3, #16
 81047ac:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81047ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 81047b0:	b9b5      	cbnz	r5, 81047e0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81047b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81047b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81047b8:	4c11      	ldr	r4, [pc, #68]	@ (8104800 <RCCEx_PLL2_Config+0xec>)
 81047ba:	6823      	ldr	r3, [r4, #0]
 81047bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81047c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81047c2:	f7fd ff2f 	bl	8102624 <HAL_GetTick>
 81047c6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81047c8:	6823      	ldr	r3, [r4, #0]
 81047ca:	011b      	lsls	r3, r3, #4
 81047cc:	d50f      	bpl.n	81047ee <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 81047ce:	2000      	movs	r0, #0
 81047d0:	e005      	b.n	81047de <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81047d2:	f7fd ff27 	bl	8102624 <HAL_GetTick>
 81047d6:	1bc0      	subs	r0, r0, r7
 81047d8:	2802      	cmp	r0, #2
 81047da:	d9ab      	bls.n	8104734 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 81047dc:	2003      	movs	r0, #3
}
 81047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 81047e0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81047e2:	bf0c      	ite	eq
 81047e4:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81047e8:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 81047ec:	e7e3      	b.n	81047b6 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81047ee:	f7fd ff19 	bl	8102624 <HAL_GetTick>
 81047f2:	1b40      	subs	r0, r0, r5
 81047f4:	2802      	cmp	r0, #2
 81047f6:	d9e7      	bls.n	81047c8 <RCCEx_PLL2_Config+0xb4>
 81047f8:	e7f0      	b.n	81047dc <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 81047fa:	2001      	movs	r0, #1
 81047fc:	e7ef      	b.n	81047de <RCCEx_PLL2_Config+0xca>
 81047fe:	bf00      	nop
 8104800:	58024400 	.word	0x58024400

08104804 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104806:	4c3a      	ldr	r4, [pc, #232]	@ (81048f0 <RCCEx_PLL3_Config+0xec>)
 8104808:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 810480a:	f003 0303 	and.w	r3, r3, #3
 810480e:	2b03      	cmp	r3, #3
{
 8104810:	4606      	mov	r6, r0
 8104812:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104814:	d069      	beq.n	81048ea <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104816:	6823      	ldr	r3, [r4, #0]
 8104818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810481c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810481e:	f7fd ff01 	bl	8102624 <HAL_GetTick>
 8104822:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104824:	6823      	ldr	r3, [r4, #0]
 8104826:	009a      	lsls	r2, r3, #2
 8104828:	d44b      	bmi.n	81048c2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810482a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 810482c:	6832      	ldr	r2, [r6, #0]
 810482e:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8104832:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8104836:	62a3      	str	r3, [r4, #40]	@ 0x28
 8104838:	68b3      	ldr	r3, [r6, #8]
 810483a:	68f2      	ldr	r2, [r6, #12]
 810483c:	3b01      	subs	r3, #1
 810483e:	3a01      	subs	r2, #1
 8104840:	025b      	lsls	r3, r3, #9
 8104842:	0412      	lsls	r2, r2, #16
 8104844:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8104848:	b29b      	uxth	r3, r3
 810484a:	4313      	orrs	r3, r2
 810484c:	6872      	ldr	r2, [r6, #4]
 810484e:	3a01      	subs	r2, #1
 8104850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104854:	4313      	orrs	r3, r2
 8104856:	6932      	ldr	r2, [r6, #16]
 8104858:	3a01      	subs	r2, #1
 810485a:	0612      	lsls	r2, r2, #24
 810485c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8104860:	4313      	orrs	r3, r2
 8104862:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104864:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8104866:	6972      	ldr	r2, [r6, #20]
 8104868:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 810486c:	4313      	orrs	r3, r2
 810486e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104870:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8104872:	69b2      	ldr	r2, [r6, #24]
 8104874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8104878:	4313      	orrs	r3, r2
 810487a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810487c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 810487e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8104882:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104884:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8104886:	69f2      	ldr	r2, [r6, #28]
 8104888:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810488c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104890:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8104894:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104896:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8104898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810489c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810489e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 81048a0:	b9b5      	cbnz	r5, 81048d0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81048a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81048a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81048a8:	4c11      	ldr	r4, [pc, #68]	@ (81048f0 <RCCEx_PLL3_Config+0xec>)
 81048aa:	6823      	ldr	r3, [r4, #0]
 81048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81048b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81048b2:	f7fd feb7 	bl	8102624 <HAL_GetTick>
 81048b6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81048b8:	6823      	ldr	r3, [r4, #0]
 81048ba:	009b      	lsls	r3, r3, #2
 81048bc:	d50f      	bpl.n	81048de <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 81048be:	2000      	movs	r0, #0
 81048c0:	e005      	b.n	81048ce <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81048c2:	f7fd feaf 	bl	8102624 <HAL_GetTick>
 81048c6:	1bc0      	subs	r0, r0, r7
 81048c8:	2802      	cmp	r0, #2
 81048ca:	d9ab      	bls.n	8104824 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 81048cc:	2003      	movs	r0, #3
}
 81048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 81048d0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81048d2:	bf0c      	ite	eq
 81048d4:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81048d8:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 81048dc:	e7e3      	b.n	81048a6 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81048de:	f7fd fea1 	bl	8102624 <HAL_GetTick>
 81048e2:	1b40      	subs	r0, r0, r5
 81048e4:	2802      	cmp	r0, #2
 81048e6:	d9e7      	bls.n	81048b8 <RCCEx_PLL3_Config+0xb4>
 81048e8:	e7f0      	b.n	81048cc <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 81048ea:	2001      	movs	r0, #1
 81048ec:	e7ef      	b.n	81048ce <RCCEx_PLL3_Config+0xca>
 81048ee:	bf00      	nop
 81048f0:	58024400 	.word	0x58024400

081048f4 <HAL_RCCEx_PeriphCLKConfig>:
{
 81048f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81048f8:	6803      	ldr	r3, [r0, #0]
{
 81048fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81048fc:	0118      	lsls	r0, r3, #4
 81048fe:	d51e      	bpl.n	810493e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8104900:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8104902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104906:	d02b      	beq.n	8104960 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8104908:	d80f      	bhi.n	810492a <HAL_RCCEx_PeriphCLKConfig+0x36>
 810490a:	b1d3      	cbz	r3, 8104942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 810490c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104910:	d01d      	beq.n	810494e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8104912:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104914:	682b      	ldr	r3, [r5, #0]
 8104916:	05d9      	lsls	r1, r3, #23
 8104918:	d551      	bpl.n	81049be <HAL_RCCEx_PeriphCLKConfig+0xca>
    switch (PeriphClkInit->Sai1ClockSelection)
 810491a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 810491c:	2b04      	cmp	r3, #4
 810491e:	d84d      	bhi.n	81049bc <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8104920:	e8df f003 	tbb	[pc, r3]
 8104924:	29463f24 	.word	0x29463f24
 8104928:	29          	.byte	0x29
 8104929:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 810492a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810492e:	d1f0      	bne.n	8104912 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104930:	4a85      	ldr	r2, [pc, #532]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104932:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8104934:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8104936:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810493a:	430b      	orrs	r3, r1
 810493c:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810493e:	2600      	movs	r6, #0
 8104940:	e7e8      	b.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104942:	4a81      	ldr	r2, [pc, #516]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104944:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810494a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 810494c:	e7f0      	b.n	8104930 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810494e:	2102      	movs	r1, #2
 8104950:	f105 0008 	add.w	r0, r5, #8
 8104954:	f7ff fede 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104958:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 810495a:	2800      	cmp	r0, #0
 810495c:	d1da      	bne.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x20>
 810495e:	e7e7      	b.n	8104930 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104960:	2102      	movs	r1, #2
 8104962:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104966:	f7ff ff4d 	bl	8104804 <RCCEx_PLL3_Config>
 810496a:	e7f5      	b.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0x64>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810496c:	4a76      	ldr	r2, [pc, #472]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 810496e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104974:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8104976:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8104978:	bb1c      	cbnz	r4, 81049c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810497a:	4a73      	ldr	r2, [pc, #460]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 810497c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 810497e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8104980:	f023 0307 	bic.w	r3, r3, #7
 8104984:	430b      	orrs	r3, r1
 8104986:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104988:	682b      	ldr	r3, [r5, #0]
 810498a:	059a      	lsls	r2, r3, #22
 810498c:	d528      	bpl.n	81049e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai23ClockSelection)
 810498e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8104990:	2b80      	cmp	r3, #128	@ 0x80
 8104992:	d043      	beq.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8104994:	d817      	bhi.n	81049c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8104996:	b3a3      	cbz	r3, 8104a02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8104998:	2b40      	cmp	r3, #64	@ 0x40
 810499a:	d038      	beq.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0x11a>
 810499c:	2601      	movs	r6, #1
 810499e:	4634      	mov	r4, r6
 81049a0:	e01e      	b.n	81049e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049a2:	2100      	movs	r1, #0
 81049a4:	f105 0008 	add.w	r0, r5, #8
 81049a8:	f7ff feb4 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049ac:	4604      	mov	r4, r0
        break;
 81049ae:	e7e3      	b.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x84>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049b0:	2100      	movs	r1, #0
 81049b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 81049b6:	f7ff ff25 	bl	8104804 <RCCEx_PLL3_Config>
 81049ba:	e7f7      	b.n	81049ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    switch (PeriphClkInit->Sai1ClockSelection)
 81049bc:	2601      	movs	r6, #1
 81049be:	4634      	mov	r4, r6
 81049c0:	e7e2      	b.n	8104988 <HAL_RCCEx_PeriphCLKConfig+0x94>
 81049c2:	4626      	mov	r6, r4
 81049c4:	e7e0      	b.n	8104988 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai23ClockSelection)
 81049c6:	2bc0      	cmp	r3, #192	@ 0xc0
 81049c8:	d002      	beq.n	81049d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 81049ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81049ce:	d1e5      	bne.n	810499c <HAL_RCCEx_PeriphCLKConfig+0xa8>
    if (ret == HAL_OK)
 81049d0:	bb54      	cbnz	r4, 8104a28 <HAL_RCCEx_PeriphCLKConfig+0x134>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81049d2:	4a5d      	ldr	r2, [pc, #372]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 81049d4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 81049d6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 81049d8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 81049dc:	430b      	orrs	r3, r1
 81049de:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81049e0:	682b      	ldr	r3, [r5, #0]
 81049e2:	055b      	lsls	r3, r3, #21
 81049e4:	d531      	bpl.n	8104a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4AClockSelection)
 81049e6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	@ 0xa8
 81049ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81049ee:	d049      	beq.n	8104a84 <HAL_RCCEx_PeriphCLKConfig+0x190>
 81049f0:	d81c      	bhi.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x138>
 81049f2:	2b00      	cmp	r3, #0
 81049f4:	d039      	beq.n	8104a6a <HAL_RCCEx_PeriphCLKConfig+0x176>
 81049f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81049fa:	d03c      	beq.n	8104a76 <HAL_RCCEx_PeriphCLKConfig+0x182>
 81049fc:	2601      	movs	r6, #1
 81049fe:	4634      	mov	r4, r6
 8104a00:	e023      	b.n	8104a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a02:	4a51      	ldr	r2, [pc, #324]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104a04:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8104a0c:	e7e0      	b.n	81049d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a0e:	2100      	movs	r1, #0
 8104a10:	f105 0008 	add.w	r0, r5, #8
 8104a14:	f7ff fe7e 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a18:	4604      	mov	r4, r0
        break;
 8104a1a:	e7d9      	b.n	81049d0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a1c:	2100      	movs	r1, #0
 8104a1e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104a22:	f7ff feef 	bl	8104804 <RCCEx_PLL3_Config>
 8104a26:	e7f7      	b.n	8104a18 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8104a28:	4626      	mov	r6, r4
 8104a2a:	e7d9      	b.n	81049e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (PeriphClkInit->Sai4AClockSelection)
 8104a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104a30:	d002      	beq.n	8104a38 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8104a32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104a36:	d1e1      	bne.n	81049fc <HAL_RCCEx_PeriphCLKConfig+0x108>
    if (ret == HAL_OK)
 8104a38:	bb54      	cbnz	r4, 8104a90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104a3a:	4a43      	ldr	r2, [pc, #268]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104a3c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8104a40:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8104a42:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8104a46:	430b      	orrs	r3, r1
 8104a48:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104a4a:	682b      	ldr	r3, [r5, #0]
 8104a4c:	051f      	lsls	r7, r3, #20
 8104a4e:	d530      	bpl.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->Sai4BClockSelection)
 8104a50:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8104a54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104a58:	d045      	beq.n	8104ae6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8104a5a:	d81b      	bhi.n	8104a94 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8104a5c:	b3b3      	cbz	r3, 8104acc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8104a5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104a62:	d039      	beq.n	8104ad8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8104a64:	2601      	movs	r6, #1
 8104a66:	4634      	mov	r4, r6
 8104a68:	e023      	b.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a6a:	4a37      	ldr	r2, [pc, #220]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104a6c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104a72:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8104a74:	e7e0      	b.n	8104a38 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a76:	2100      	movs	r1, #0
 8104a78:	f105 0008 	add.w	r0, r5, #8
 8104a7c:	f7ff fe4a 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a80:	4604      	mov	r4, r0
        break;
 8104a82:	e7d9      	b.n	8104a38 <HAL_RCCEx_PeriphCLKConfig+0x144>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a84:	2100      	movs	r1, #0
 8104a86:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104a8a:	f7ff febb 	bl	8104804 <RCCEx_PLL3_Config>
 8104a8e:	e7f7      	b.n	8104a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8104a90:	4626      	mov	r6, r4
 8104a92:	e7da      	b.n	8104a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
    switch (PeriphClkInit->Sai4BClockSelection)
 8104a94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104a98:	d002      	beq.n	8104aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8104a9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104a9e:	d1e1      	bne.n	8104a64 <HAL_RCCEx_PeriphCLKConfig+0x170>
    if (ret == HAL_OK)
 8104aa0:	bb3c      	cbnz	r4, 8104af2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104aa2:	4a29      	ldr	r2, [pc, #164]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104aa4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 8104aa8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8104aaa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8104aae:	430b      	orrs	r3, r1
 8104ab0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104ab2:	682b      	ldr	r3, [r5, #0]
 8104ab4:	0198      	lsls	r0, r3, #6
 8104ab6:	d528      	bpl.n	8104b0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch (PeriphClkInit->QspiClockSelection)
 8104ab8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8104aba:	2b20      	cmp	r3, #32
 8104abc:	d03b      	beq.n	8104b36 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8104abe:	d81a      	bhi.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8104ac0:	b1db      	cbz	r3, 8104afa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104ac2:	2b10      	cmp	r3, #16
 8104ac4:	d031      	beq.n	8104b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
 8104ac6:	2601      	movs	r6, #1
 8104ac8:	4634      	mov	r4, r6
 8104aca:	e01e      	b.n	8104b0a <HAL_RCCEx_PeriphCLKConfig+0x216>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104acc:	4a1e      	ldr	r2, [pc, #120]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104ace:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8104ad6:	e7e3      	b.n	8104aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104ad8:	2100      	movs	r1, #0
 8104ada:	f105 0008 	add.w	r0, r5, #8
 8104ade:	f7ff fe19 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104ae2:	4604      	mov	r4, r0
        break;
 8104ae4:	e7dc      	b.n	8104aa0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104ae6:	2100      	movs	r1, #0
 8104ae8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104aec:	f7ff fe8a 	bl	8104804 <RCCEx_PLL3_Config>
 8104af0:	e7f7      	b.n	8104ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104af2:	4626      	mov	r6, r4
 8104af4:	e7dd      	b.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    switch (PeriphClkInit->QspiClockSelection)
 8104af6:	2b30      	cmp	r3, #48	@ 0x30
 8104af8:	d1e5      	bne.n	8104ac6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if (ret == HAL_OK)
 8104afa:	bb1c      	cbnz	r4, 8104b44 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104afc:	4a12      	ldr	r2, [pc, #72]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104afe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8104b00:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8104b02:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8104b06:	430b      	orrs	r3, r1
 8104b08:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104b0a:	682b      	ldr	r3, [r5, #0]
 8104b0c:	04d9      	lsls	r1, r3, #19
 8104b0e:	d52c      	bpl.n	8104b6a <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi123ClockSelection)
 8104b10:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8104b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104b16:	d076      	beq.n	8104c06 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8104b18:	d818      	bhi.n	8104b4c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8104b1a:	2b00      	cmp	r3, #0
 8104b1c:	d066      	beq.n	8104bec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8104b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104b22:	d069      	beq.n	8104bf8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8104b24:	2601      	movs	r6, #1
 8104b26:	4634      	mov	r4, r6
 8104b28:	e01f      	b.n	8104b6a <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b2a:	4a07      	ldr	r2, [pc, #28]	@ (8104b48 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8104b2c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8104b34:	e7e1      	b.n	8104afa <HAL_RCCEx_PeriphCLKConfig+0x206>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104b36:	2102      	movs	r1, #2
 8104b38:	f105 0008 	add.w	r0, r5, #8
 8104b3c:	f7ff fdea 	bl	8104714 <RCCEx_PLL2_Config>
 8104b40:	4604      	mov	r4, r0
        break;
 8104b42:	e7da      	b.n	8104afa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8104b44:	4626      	mov	r6, r4
 8104b46:	e7e0      	b.n	8104b0a <HAL_RCCEx_PeriphCLKConfig+0x216>
 8104b48:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 8104b4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104b50:	d002      	beq.n	8104b58 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8104b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104b56:	d1e5      	bne.n	8104b24 <HAL_RCCEx_PeriphCLKConfig+0x230>
    if (ret == HAL_OK)
 8104b58:	2c00      	cmp	r4, #0
 8104b5a:	d15a      	bne.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104b5c:	4a9e      	ldr	r2, [pc, #632]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104b5e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8104b60:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8104b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8104b66:	430b      	orrs	r3, r1
 8104b68:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104b6a:	682b      	ldr	r3, [r5, #0]
 8104b6c:	049a      	lsls	r2, r3, #18
 8104b6e:	d50b      	bpl.n	8104b88 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi45ClockSelection)
 8104b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8104b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104b76:	d066      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8104b78:	d84d      	bhi.n	8104c16 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8104b7a:	2b00      	cmp	r3, #0
 8104b7c:	d053      	beq.n	8104c26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8104b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104b82:	d059      	beq.n	8104c38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8104b84:	2601      	movs	r6, #1
 8104b86:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104b88:	682b      	ldr	r3, [r5, #0]
 8104b8a:	045b      	lsls	r3, r3, #17
 8104b8c:	d50c      	bpl.n	8104ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    switch (PeriphClkInit->Spi6ClockSelection)
 8104b8e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8104b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104b96:	d077      	beq.n	8104c88 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8104b98:	d85d      	bhi.n	8104c56 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8104b9a:	2b00      	cmp	r3, #0
 8104b9c:	d063      	beq.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8104b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104ba2:	d06a      	beq.n	8104c7a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8104ba4:	2601      	movs	r6, #1
 8104ba6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104ba8:	682b      	ldr	r3, [r5, #0]
 8104baa:	041f      	lsls	r7, r3, #16
 8104bac:	d511      	bpl.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FdcanClockSelection)
 8104bae:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8104bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104bb4:	d070      	beq.n	8104c98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8104bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104bba:	d073      	beq.n	8104ca4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8104bbc:	2b00      	cmp	r3, #0
 8104bbe:	d178      	bne.n	8104cb2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    if (ret == HAL_OK)
 8104bc0:	2c00      	cmp	r4, #0
 8104bc2:	d179      	bne.n	8104cb8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104bc4:	4a84      	ldr	r2, [pc, #528]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104bc6:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8104bc8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8104bca:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8104bce:	430b      	orrs	r3, r1
 8104bd0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104bd2:	682b      	ldr	r3, [r5, #0]
 8104bd4:	01d8      	lsls	r0, r3, #7
 8104bd6:	d57f      	bpl.n	8104cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    switch (PeriphClkInit->FmcClockSelection)
 8104bd8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8104bda:	2b03      	cmp	r3, #3
 8104bdc:	f200 80d8 	bhi.w	8104d90 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8104be0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8104be4:	006c0071 	.word	0x006c0071
 8104be8:	007100cf 	.word	0x007100cf
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104bec:	4a7a      	ldr	r2, [pc, #488]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104bee:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8104bf6:	e7af      	b.n	8104b58 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104bf8:	2100      	movs	r1, #0
 8104bfa:	f105 0008 	add.w	r0, r5, #8
 8104bfe:	f7ff fd89 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104c02:	4604      	mov	r4, r0
        break;
 8104c04:	e7a8      	b.n	8104b58 <HAL_RCCEx_PeriphCLKConfig+0x264>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104c06:	2100      	movs	r1, #0
 8104c08:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104c0c:	f7ff fdfa 	bl	8104804 <RCCEx_PLL3_Config>
 8104c10:	e7f7      	b.n	8104c02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8104c12:	4626      	mov	r6, r4
 8104c14:	e7a9      	b.n	8104b6a <HAL_RCCEx_PeriphCLKConfig+0x276>
    switch (PeriphClkInit->Spi45ClockSelection)
 8104c16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8104c1a:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8104c1e:	d002      	beq.n	8104c26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8104c20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104c24:	d1ae      	bne.n	8104b84 <HAL_RCCEx_PeriphCLKConfig+0x290>
    if (ret == HAL_OK)
 8104c26:	b9a4      	cbnz	r4, 8104c52 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104c28:	4a6b      	ldr	r2, [pc, #428]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104c2a:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 8104c2c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8104c2e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8104c32:	430b      	orrs	r3, r1
 8104c34:	6513      	str	r3, [r2, #80]	@ 0x50
 8104c36:	e7a7      	b.n	8104b88 <HAL_RCCEx_PeriphCLKConfig+0x294>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104c38:	2101      	movs	r1, #1
 8104c3a:	f105 0008 	add.w	r0, r5, #8
 8104c3e:	f7ff fd69 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104c42:	4604      	mov	r4, r0
        break;
 8104c44:	e7ef      	b.n	8104c26 <HAL_RCCEx_PeriphCLKConfig+0x332>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104c46:	2101      	movs	r1, #1
 8104c48:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104c4c:	f7ff fdda 	bl	8104804 <RCCEx_PLL3_Config>
 8104c50:	e7f7      	b.n	8104c42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8104c52:	4626      	mov	r6, r4
 8104c54:	e798      	b.n	8104b88 <HAL_RCCEx_PeriphCLKConfig+0x294>
    switch (PeriphClkInit->Spi6ClockSelection)
 8104c56:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8104c5a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8104c5e:	d002      	beq.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8104c60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104c64:	d19e      	bne.n	8104ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    if (ret == HAL_OK)
 8104c66:	b9ac      	cbnz	r4, 8104c94 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104c68:	4a5b      	ldr	r2, [pc, #364]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104c6a:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 8104c6e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8104c70:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 8104c74:	430b      	orrs	r3, r1
 8104c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8104c78:	e796      	b.n	8104ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104c7a:	2101      	movs	r1, #1
 8104c7c:	f105 0008 	add.w	r0, r5, #8
 8104c80:	f7ff fd48 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104c84:	4604      	mov	r4, r0
        break;
 8104c86:	e7ee      	b.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0x372>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104c88:	2101      	movs	r1, #1
 8104c8a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104c8e:	f7ff fdb9 	bl	8104804 <RCCEx_PLL3_Config>
 8104c92:	e7f7      	b.n	8104c84 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8104c94:	4626      	mov	r6, r4
 8104c96:	e787      	b.n	8104ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c98:	4a4f      	ldr	r2, [pc, #316]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104c9a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8104ca2:	e78d      	b.n	8104bc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104ca4:	2101      	movs	r1, #1
 8104ca6:	f105 0008 	add.w	r0, r5, #8
 8104caa:	f7ff fd33 	bl	8104714 <RCCEx_PLL2_Config>
 8104cae:	4604      	mov	r4, r0
        break;
 8104cb0:	e786      	b.n	8104bc0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    switch (PeriphClkInit->FdcanClockSelection)
 8104cb2:	2601      	movs	r6, #1
 8104cb4:	4634      	mov	r4, r6
 8104cb6:	e78c      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8104cb8:	4626      	mov	r6, r4
 8104cba:	e78a      	b.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104cbc:	4a46      	ldr	r2, [pc, #280]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104cbe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8104cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8104cc6:	2c00      	cmp	r4, #0
 8104cc8:	d165      	bne.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104cca:	4a43      	ldr	r2, [pc, #268]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104ccc:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8104cce:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8104cd0:	f023 0303 	bic.w	r3, r3, #3
 8104cd4:	430b      	orrs	r3, r1
 8104cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104cd8:	682b      	ldr	r3, [r5, #0]
 8104cda:	0259      	lsls	r1, r3, #9
 8104cdc:	d539      	bpl.n	8104d52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104cde:	4f3f      	ldr	r7, [pc, #252]	@ (8104ddc <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 8104ce0:	683b      	ldr	r3, [r7, #0]
 8104ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104ce6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8104ce8:	f7fd fc9c 	bl	8102624 <HAL_GetTick>
 8104cec:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104cee:	683b      	ldr	r3, [r7, #0]
 8104cf0:	05da      	lsls	r2, r3, #23
 8104cf2:	d552      	bpl.n	8104d9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    if (ret == HAL_OK)
 8104cf4:	2c00      	cmp	r4, #0
 8104cf6:	d175      	bne.n	8104de4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104cf8:	4b37      	ldr	r3, [pc, #220]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104cfa:	f8d5 00b4 	ldr.w	r0, [r5, #180]	@ 0xb4
 8104cfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8104d00:	4042      	eors	r2, r0
 8104d02:	f412 7f40 	tst.w	r2, #768	@ 0x300
 8104d06:	d00b      	beq.n	8104d20 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104d08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8104d0a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8104d0c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8104d10:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104d12:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104d14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104d18:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8104d1c:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8104d1e:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104d20:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8104d24:	d042      	beq.n	8104dac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104d26:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 8104d2a:	492b      	ldr	r1, [pc, #172]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104d2c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8104d30:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8104d34:	d14b      	bne.n	8104dce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8104d36:	6908      	ldr	r0, [r1, #16]
 8104d38:	4a29      	ldr	r2, [pc, #164]	@ (8104de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8104d3a:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 8104d3e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8104d42:	4302      	orrs	r2, r0
 8104d44:	610a      	str	r2, [r1, #16]
 8104d46:	4a24      	ldr	r2, [pc, #144]	@ (8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8104d48:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8104d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104d4e:	430b      	orrs	r3, r1
 8104d50:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104d52:	682b      	ldr	r3, [r5, #0]
 8104d54:	07d8      	lsls	r0, r3, #31
 8104d56:	d509      	bpl.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch (PeriphClkInit->Usart16ClockSelection)
 8104d58:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8104d5a:	2b10      	cmp	r3, #16
 8104d5c:	d05a      	beq.n	8104e14 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8104d5e:	d843      	bhi.n	8104de8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8104d60:	2b00      	cmp	r3, #0
 8104d62:	d047      	beq.n	8104df4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8104d64:	2b08      	cmp	r3, #8
 8104d66:	d04e      	beq.n	8104e06 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8104d68:	2601      	movs	r6, #1
 8104d6a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104d6c:	682b      	ldr	r3, [r5, #0]
 8104d6e:	0799      	lsls	r1, r3, #30
 8104d70:	d566      	bpl.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104d72:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8104d74:	2b05      	cmp	r3, #5
 8104d76:	d879      	bhi.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x578>
 8104d78:	e8df f003 	tbb	[pc, r3]
 8104d7c:	5a72545a 	.word	0x5a72545a
 8104d80:	5a5a      	.short	0x5a5a
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104d82:	2102      	movs	r1, #2
 8104d84:	f105 0008 	add.w	r0, r5, #8
 8104d88:	f7ff fcc4 	bl	8104714 <RCCEx_PLL2_Config>
 8104d8c:	4604      	mov	r4, r0
        break;
 8104d8e:	e79a      	b.n	8104cc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->FmcClockSelection)
 8104d90:	2601      	movs	r6, #1
 8104d92:	4634      	mov	r4, r6
 8104d94:	e7a0      	b.n	8104cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8104d96:	4626      	mov	r6, r4
 8104d98:	e79e      	b.n	8104cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104d9a:	f7fd fc43 	bl	8102624 <HAL_GetTick>
 8104d9e:	eba0 0008 	sub.w	r0, r0, r8
 8104da2:	2864      	cmp	r0, #100	@ 0x64
 8104da4:	d9a3      	bls.n	8104cee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        ret = HAL_TIMEOUT;
 8104da6:	2603      	movs	r6, #3
 8104da8:	4634      	mov	r4, r6
 8104daa:	e7d2      	b.n	8104d52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        tickstart = HAL_GetTick();
 8104dac:	f7fd fc3a 	bl	8102624 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104db0:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        tickstart = HAL_GetTick();
 8104db4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104db6:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104dba:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8104dbe:	079b      	lsls	r3, r3, #30
 8104dc0:	d4b1      	bmi.n	8104d26 <HAL_RCCEx_PeriphCLKConfig+0x432>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104dc2:	f7fd fc2f 	bl	8102624 <HAL_GetTick>
 8104dc6:	1bc0      	subs	r0, r0, r7
 8104dc8:	4548      	cmp	r0, r9
 8104dca:	d9f6      	bls.n	8104dba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8104dcc:	e7eb      	b.n	8104da6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104dce:	690a      	ldr	r2, [r1, #16]
 8104dd0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8104dd4:	e7b6      	b.n	8104d44 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8104dd6:	bf00      	nop
 8104dd8:	58024400 	.word	0x58024400
 8104ddc:	58024800 	.word	0x58024800
 8104de0:	00ffffcf 	.word	0x00ffffcf
 8104de4:	4626      	mov	r6, r4
 8104de6:	e7b4      	b.n	8104d52 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch (PeriphClkInit->Usart16ClockSelection)
 8104de8:	f023 0208 	bic.w	r2, r3, #8
 8104dec:	2a20      	cmp	r2, #32
 8104dee:	d001      	beq.n	8104df4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8104df0:	2b18      	cmp	r3, #24
 8104df2:	d1b9      	bne.n	8104d68 <HAL_RCCEx_PeriphCLKConfig+0x474>
    if (ret == HAL_OK)
 8104df4:	b9a4      	cbnz	r4, 8104e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104df6:	4a20      	ldr	r2, [pc, #128]	@ (8104e78 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8104df8:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 8104dfa:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8104dfc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8104e00:	430b      	orrs	r3, r1
 8104e02:	6553      	str	r3, [r2, #84]	@ 0x54
 8104e04:	e7b2      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e06:	2101      	movs	r1, #1
 8104e08:	f105 0008 	add.w	r0, r5, #8
 8104e0c:	f7ff fc82 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e10:	4604      	mov	r4, r0
        break;
 8104e12:	e7ef      	b.n	8104df4 <HAL_RCCEx_PeriphCLKConfig+0x500>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e14:	2101      	movs	r1, #1
 8104e16:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104e1a:	f7ff fcf3 	bl	8104804 <RCCEx_PLL3_Config>
 8104e1e:	e7f7      	b.n	8104e10 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8104e20:	4626      	mov	r6, r4
 8104e22:	e7a3      	b.n	8104d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e24:	2101      	movs	r1, #1
 8104e26:	f105 0008 	add.w	r0, r5, #8
 8104e2a:	f7ff fc73 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e2e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104e30:	b9fc      	cbnz	r4, 8104e72 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104e32:	4a11      	ldr	r2, [pc, #68]	@ (8104e78 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8104e34:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
 8104e36:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8104e38:	f023 0307 	bic.w	r3, r3, #7
 8104e3c:	430b      	orrs	r3, r1
 8104e3e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104e40:	682b      	ldr	r3, [r5, #0]
 8104e42:	075a      	lsls	r2, r3, #29
 8104e44:	d52b      	bpl.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104e46:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8104e4a:	2b05      	cmp	r3, #5
 8104e4c:	f200 816e 	bhi.w	810512c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8104e50:	e8df f013 	tbh	[pc, r3, lsl #1]
 8104e54:	0014001a 	.word	0x0014001a
 8104e58:	001a0166 	.word	0x001a0166
 8104e5c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e60:	2101      	movs	r1, #1
 8104e62:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104e66:	f7ff fccd 	bl	8104804 <RCCEx_PLL3_Config>
 8104e6a:	e7e0      	b.n	8104e2e <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104e6c:	2601      	movs	r6, #1
 8104e6e:	4634      	mov	r4, r6
 8104e70:	e7e6      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8104e72:	4626      	mov	r6, r4
 8104e74:	e7e4      	b.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8104e76:	bf00      	nop
 8104e78:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e7c:	2101      	movs	r1, #1
 8104e7e:	f105 0008 	add.w	r0, r5, #8
 8104e82:	f7ff fc47 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e86:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104e88:	2c00      	cmp	r4, #0
 8104e8a:	f040 8152 	bne.w	8105132 <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104e8e:	4aaa      	ldr	r2, [pc, #680]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8104e90:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 8104e94:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8104e96:	f023 0307 	bic.w	r3, r3, #7
 8104e9a:	430b      	orrs	r3, r1
 8104e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104e9e:	682b      	ldr	r3, [r5, #0]
 8104ea0:	069b      	lsls	r3, r3, #26
 8104ea2:	d510      	bpl.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104ea4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8104ea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104eac:	f000 8160 	beq.w	8105170 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8104eb0:	f200 8144 	bhi.w	810513c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8104eb4:	2b00      	cmp	r3, #0
 8104eb6:	f000 814a 	beq.w	810514e <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8104eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104ebe:	f000 8150 	beq.w	8105162 <HAL_RCCEx_PeriphCLKConfig+0x86e>
 8104ec2:	2601      	movs	r6, #1
 8104ec4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104ec6:	682b      	ldr	r3, [r5, #0]
 8104ec8:	065f      	lsls	r7, r3, #25
 8104eca:	d510      	bpl.n	8104eee <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104ecc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8104ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104ed4:	f000 816e 	beq.w	81051b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8104ed8:	f200 8152 	bhi.w	8105180 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8104edc:	2b00      	cmp	r3, #0
 8104ede:	f000 8158 	beq.w	8105192 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8104ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104ee6:	f000 815e 	beq.w	81051a6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8104eea:	2601      	movs	r6, #1
 8104eec:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104eee:	682b      	ldr	r3, [r5, #0]
 8104ef0:	0618      	lsls	r0, r3, #24
 8104ef2:	d510      	bpl.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x622>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104ef4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 8104ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104efc:	f000 817c 	beq.w	81051f8 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8104f00:	f200 8160 	bhi.w	81051c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 8104f04:	2b00      	cmp	r3, #0
 8104f06:	f000 8166 	beq.w	81051d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8104f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104f0e:	f000 816c 	beq.w	81051ea <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8104f12:	2601      	movs	r6, #1
 8104f14:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104f16:	682b      	ldr	r3, [r5, #0]
 8104f18:	0719      	lsls	r1, r3, #28
 8104f1a:	d514      	bpl.n	8104f46 <HAL_RCCEx_PeriphCLKConfig+0x652>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104f1c:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8104f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104f24:	d107      	bne.n	8104f36 <HAL_RCCEx_PeriphCLKConfig+0x642>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104f26:	2102      	movs	r1, #2
 8104f28:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104f2c:	f7ff fc6a 	bl	8104804 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8104f30:	2800      	cmp	r0, #0
 8104f32:	bf18      	it	ne
 8104f34:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104f36:	4a80      	ldr	r2, [pc, #512]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8104f38:	f8d5 1084 	ldr.w	r1, [r5, #132]	@ 0x84
 8104f3c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8104f3e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8104f42:	430b      	orrs	r3, r1
 8104f44:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104f46:	682b      	ldr	r3, [r5, #0]
 8104f48:	06da      	lsls	r2, r3, #27
 8104f4a:	d514      	bpl.n	8104f76 <HAL_RCCEx_PeriphCLKConfig+0x682>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104f4c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8104f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104f54:	d107      	bne.n	8104f66 <HAL_RCCEx_PeriphCLKConfig+0x672>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104f56:	2102      	movs	r1, #2
 8104f58:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8104f5c:	f7ff fc52 	bl	8104804 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8104f60:	2800      	cmp	r0, #0
 8104f62:	bf18      	it	ne
 8104f64:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104f66:	4a74      	ldr	r2, [pc, #464]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8104f68:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 8104f6c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8104f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8104f72:	430b      	orrs	r3, r1
 8104f74:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104f76:	682b      	ldr	r3, [r5, #0]
 8104f78:	031b      	lsls	r3, r3, #12
 8104f7a:	d51b      	bpl.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    switch (PeriphClkInit->AdcClockSelection)
 8104f7c:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8104f80:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8104f84:	f000 8140 	beq.w	8105208 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8104f88:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8104f8c:	d007      	beq.n	8104f9e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8104f8e:	2900      	cmp	r1, #0
 8104f90:	f040 8140 	bne.w	8105214 <HAL_RCCEx_PeriphCLKConfig+0x920>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f94:	f105 0008 	add.w	r0, r5, #8
 8104f98:	f7ff fbbc 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f9c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8104f9e:	2c00      	cmp	r4, #0
 8104fa0:	f040 813b 	bne.w	810521a <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104fa4:	4a64      	ldr	r2, [pc, #400]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8104fa6:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 8104faa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8104fac:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8104fb0:	430b      	orrs	r3, r1
 8104fb2:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104fb4:	682b      	ldr	r3, [r5, #0]
 8104fb6:	035f      	lsls	r7, r3, #13
 8104fb8:	d50f      	bpl.n	8104fda <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch (PeriphClkInit->UsbClockSelection)
 8104fba:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 8104fbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104fc2:	f000 813b 	beq.w	810523c <HAL_RCCEx_PeriphCLKConfig+0x948>
 8104fc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104fca:	f000 812d 	beq.w	8105228 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8104fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104fd2:	f000 8124 	beq.w	810521e <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8104fd6:	2601      	movs	r6, #1
 8104fd8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104fda:	682b      	ldr	r3, [r5, #0]
 8104fdc:	03d8      	lsls	r0, r3, #15
 8104fde:	d509      	bpl.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->SdmmcClockSelection)
 8104fe0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8104fe2:	2b00      	cmp	r3, #0
 8104fe4:	f000 8133 	beq.w	810524e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8104fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104fec:	f000 813d 	beq.w	810526a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8104ff0:	2601      	movs	r6, #1
 8104ff2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104ff4:	682b      	ldr	r3, [r5, #0]
 8104ff6:	0099      	lsls	r1, r3, #2
 8104ff8:	d507      	bpl.n	810500a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104ffa:	2102      	movs	r1, #2
 8104ffc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8105000:	f7ff fc00 	bl	8104804 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8105004:	2800      	cmp	r0, #0
 8105006:	bf18      	it	ne
 8105008:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810500a:	e9d5 3100 	ldrd	r3, r1, [r5]
 810500e:	039a      	lsls	r2, r3, #14
 8105010:	f140 8143 	bpl.w	810529a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    switch (PeriphClkInit->RngClockSelection)
 8105014:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 8105018:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 810501c:	f000 813f 	beq.w	810529e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 8105020:	f200 812c 	bhi.w	810527c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8105024:	2800      	cmp	r0, #0
 8105026:	f000 812f 	beq.w	8105288 <HAL_RCCEx_PeriphCLKConfig+0x994>
 810502a:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810502c:	02df      	lsls	r7, r3, #11
 810502e:	d506      	bpl.n	810503e <HAL_RCCEx_PeriphCLKConfig+0x74a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105030:	4841      	ldr	r0, [pc, #260]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8105032:	6f6e      	ldr	r6, [r5, #116]	@ 0x74
 8105034:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8105036:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810503a:	4332      	orrs	r2, r6
 810503c:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810503e:	00de      	lsls	r6, r3, #3
 8105040:	d507      	bpl.n	8105052 <HAL_RCCEx_PeriphCLKConfig+0x75e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105042:	483d      	ldr	r0, [pc, #244]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8105044:	f8d5 60b8 	ldr.w	r6, [r5, #184]	@ 0xb8
 8105048:	6902      	ldr	r2, [r0, #16]
 810504a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 810504e:	4332      	orrs	r2, r6
 8105050:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105052:	0298      	lsls	r0, r3, #10
 8105054:	d506      	bpl.n	8105064 <HAL_RCCEx_PeriphCLKConfig+0x770>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105056:	4838      	ldr	r0, [pc, #224]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8105058:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
 810505a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 810505c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8105060:	4332      	orrs	r2, r6
 8105062:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105064:	005a      	lsls	r2, r3, #1
 8105066:	d509      	bpl.n	810507c <HAL_RCCEx_PeriphCLKConfig+0x788>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105068:	4a33      	ldr	r2, [pc, #204]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 810506a:	6910      	ldr	r0, [r2, #16]
 810506c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8105070:	6110      	str	r0, [r2, #16]
 8105072:	6910      	ldr	r0, [r2, #16]
 8105074:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 8105078:	4330      	orrs	r0, r6
 810507a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810507c:	2b00      	cmp	r3, #0
 810507e:	da06      	bge.n	810508e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105080:	482d      	ldr	r0, [pc, #180]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8105082:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 8105084:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8105086:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 810508a:	4332      	orrs	r2, r6
 810508c:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810508e:	021f      	lsls	r7, r3, #8
 8105090:	d507      	bpl.n	81050a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105092:	4a29      	ldr	r2, [pc, #164]	@ (8105138 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8105094:	f8d5 008c 	ldr.w	r0, [r5, #140]	@ 0x8c
 8105098:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 810509a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 810509e:	4303      	orrs	r3, r0
 81050a0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81050a2:	07ce      	lsls	r6, r1, #31
 81050a4:	d506      	bpl.n	81050b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81050a6:	2100      	movs	r1, #0
 81050a8:	f105 0008 	add.w	r0, r5, #8
 81050ac:	f7ff fb32 	bl	8104714 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 81050b0:	4607      	mov	r7, r0
 81050b2:	b900      	cbnz	r0, 81050b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch (PeriphClkInit->RngClockSelection)
 81050b4:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81050b6:	686b      	ldr	r3, [r5, #4]
 81050b8:	079c      	lsls	r4, r3, #30
 81050ba:	d506      	bpl.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81050bc:	2101      	movs	r1, #1
 81050be:	f105 0008 	add.w	r0, r5, #8
 81050c2:	f7ff fb27 	bl	8104714 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 81050c6:	4606      	mov	r6, r0
 81050c8:	b900      	cbnz	r0, 81050cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    switch (PeriphClkInit->RngClockSelection)
 81050ca:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81050cc:	686b      	ldr	r3, [r5, #4]
 81050ce:	0758      	lsls	r0, r3, #29
 81050d0:	d506      	bpl.n	81050e0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81050d2:	2102      	movs	r1, #2
 81050d4:	f105 0008 	add.w	r0, r5, #8
 81050d8:	f7ff fb1c 	bl	8104714 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 81050dc:	4604      	mov	r4, r0
 81050de:	b900      	cbnz	r0, 81050e2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
    switch (PeriphClkInit->RngClockSelection)
 81050e0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81050e2:	686b      	ldr	r3, [r5, #4]
 81050e4:	0719      	lsls	r1, r3, #28
 81050e6:	d506      	bpl.n	81050f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81050e8:	2100      	movs	r1, #0
 81050ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 81050ee:	f7ff fb89 	bl	8104804 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 81050f2:	4606      	mov	r6, r0
 81050f4:	b900      	cbnz	r0, 81050f8 <HAL_RCCEx_PeriphCLKConfig+0x804>
    switch (PeriphClkInit->RngClockSelection)
 81050f6:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81050f8:	686b      	ldr	r3, [r5, #4]
 81050fa:	06da      	lsls	r2, r3, #27
 81050fc:	d506      	bpl.n	810510c <HAL_RCCEx_PeriphCLKConfig+0x818>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81050fe:	2101      	movs	r1, #1
 8105100:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8105104:	f7ff fb7e 	bl	8104804 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8105108:	4604      	mov	r4, r0
 810510a:	b900      	cbnz	r0, 810510e <HAL_RCCEx_PeriphCLKConfig+0x81a>
    switch (PeriphClkInit->RngClockSelection)
 810510c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810510e:	686b      	ldr	r3, [r5, #4]
 8105110:	069b      	lsls	r3, r3, #26
 8105112:	f100 80ca 	bmi.w	81052aa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  if (status == HAL_OK)
 8105116:	1e20      	subs	r0, r4, #0
 8105118:	bf18      	it	ne
 810511a:	2001      	movne	r0, #1
}
 810511c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105120:	2101      	movs	r1, #1
 8105122:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8105126:	f7ff fb6d 	bl	8104804 <RCCEx_PLL3_Config>
 810512a:	e6ac      	b.n	8104e86 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810512c:	2601      	movs	r6, #1
 810512e:	4634      	mov	r4, r6
 8105130:	e6b5      	b.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8105132:	4626      	mov	r6, r4
 8105134:	e6b3      	b.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8105136:	bf00      	nop
 8105138:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 810513c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8105140:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8105144:	d003      	beq.n	810514e <HAL_RCCEx_PeriphCLKConfig+0x85a>
 8105146:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810514a:	f47f aeba 	bne.w	8104ec2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    if (ret == HAL_OK)
 810514e:	b9ac      	cbnz	r4, 810517c <HAL_RCCEx_PeriphCLKConfig+0x888>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105150:	4a5b      	ldr	r2, [pc, #364]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8105152:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
 8105156:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8105158:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 810515c:	430b      	orrs	r3, r1
 810515e:	6553      	str	r3, [r2, #84]	@ 0x54
 8105160:	e6b1      	b.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105162:	2100      	movs	r1, #0
 8105164:	f105 0008 	add.w	r0, r5, #8
 8105168:	f7ff fad4 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810516c:	4604      	mov	r4, r0
        break;
 810516e:	e7ee      	b.n	810514e <HAL_RCCEx_PeriphCLKConfig+0x85a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105170:	2102      	movs	r1, #2
 8105172:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8105176:	f7ff fb45 	bl	8104804 <RCCEx_PLL3_Config>
 810517a:	e7f7      	b.n	810516c <HAL_RCCEx_PeriphCLKConfig+0x878>
 810517c:	4626      	mov	r6, r4
 810517e:	e6a2      	b.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105180:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8105184:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8105188:	d003      	beq.n	8105192 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 810518a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810518e:	f47f aeac 	bne.w	8104eea <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    if (ret == HAL_OK)
 8105192:	b9ac      	cbnz	r4, 81051c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105194:	4a4a      	ldr	r2, [pc, #296]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8105196:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 810519a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 810519c:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 81051a0:	430b      	orrs	r3, r1
 81051a2:	6593      	str	r3, [r2, #88]	@ 0x58
 81051a4:	e6a3      	b.n	8104eee <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81051a6:	2100      	movs	r1, #0
 81051a8:	f105 0008 	add.w	r0, r5, #8
 81051ac:	f7ff fab2 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81051b0:	4604      	mov	r4, r0
        break;
 81051b2:	e7ee      	b.n	8105192 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81051b4:	2102      	movs	r1, #2
 81051b6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 81051ba:	f7ff fb23 	bl	8104804 <RCCEx_PLL3_Config>
 81051be:	e7f7      	b.n	81051b0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 81051c0:	4626      	mov	r6, r4
 81051c2:	e694      	b.n	8104eee <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    switch (PeriphClkInit->Lptim345ClockSelection)
 81051c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 81051c8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 81051cc:	d003      	beq.n	81051d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 81051ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81051d2:	f47f ae9e 	bne.w	8104f12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    if (ret == HAL_OK)
 81051d6:	b9ac      	cbnz	r4, 8105204 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81051d8:	4a39      	ldr	r2, [pc, #228]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 81051da:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 81051de:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 81051e0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 81051e4:	430b      	orrs	r3, r1
 81051e6:	6593      	str	r3, [r2, #88]	@ 0x58
 81051e8:	e695      	b.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81051ea:	2100      	movs	r1, #0
 81051ec:	f105 0008 	add.w	r0, r5, #8
 81051f0:	f7ff fa90 	bl	8104714 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81051f4:	4604      	mov	r4, r0
        break;
 81051f6:	e7ee      	b.n	81051d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81051f8:	2102      	movs	r1, #2
 81051fa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 81051fe:	f7ff fb01 	bl	8104804 <RCCEx_PLL3_Config>
 8105202:	e7f7      	b.n	81051f4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 8105204:	4626      	mov	r6, r4
 8105206:	e686      	b.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x622>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105208:	2102      	movs	r1, #2
 810520a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 810520e:	f7ff faf9 	bl	8104804 <RCCEx_PLL3_Config>
 8105212:	e6c3      	b.n	8104f9c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    switch (PeriphClkInit->AdcClockSelection)
 8105214:	2601      	movs	r6, #1
 8105216:	4634      	mov	r4, r6
 8105218:	e6cc      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 810521a:	4626      	mov	r6, r4
 810521c:	e6ca      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810521e:	4a28      	ldr	r2, [pc, #160]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8105220:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8105222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105226:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8105228:	b97c      	cbnz	r4, 810524a <HAL_RCCEx_PeriphCLKConfig+0x956>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810522a:	4a25      	ldr	r2, [pc, #148]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 810522c:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 8105230:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8105232:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8105236:	430b      	orrs	r3, r1
 8105238:	6553      	str	r3, [r2, #84]	@ 0x54
 810523a:	e6ce      	b.n	8104fda <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810523c:	2101      	movs	r1, #1
 810523e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8105242:	f7ff fadf 	bl	8104804 <RCCEx_PLL3_Config>
 8105246:	4604      	mov	r4, r0
        break;
 8105248:	e7ee      	b.n	8105228 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810524a:	4626      	mov	r6, r4
 810524c:	e6c5      	b.n	8104fda <HAL_RCCEx_PeriphCLKConfig+0x6e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810524e:	4a1c      	ldr	r2, [pc, #112]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8105250:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8105252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105256:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8105258:	b974      	cbnz	r4, 8105278 <HAL_RCCEx_PeriphCLKConfig+0x984>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810525a:	4a19      	ldr	r2, [pc, #100]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 810525c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 810525e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8105260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105264:	430b      	orrs	r3, r1
 8105266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105268:	e6c4      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x700>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810526a:	2102      	movs	r1, #2
 810526c:	f105 0008 	add.w	r0, r5, #8
 8105270:	f7ff fa50 	bl	8104714 <RCCEx_PLL2_Config>
 8105274:	4604      	mov	r4, r0
        break;
 8105276:	e7ef      	b.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8105278:	4626      	mov	r6, r4
 810527a:	e6bb      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    switch (PeriphClkInit->RngClockSelection)
 810527c:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 8105280:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8105284:	f47f aed1 	bne.w	810502a <HAL_RCCEx_PeriphCLKConfig+0x736>
    if (ret == HAL_OK)
 8105288:	2c00      	cmp	r4, #0
 810528a:	f47f aecf 	bne.w	810502c <HAL_RCCEx_PeriphCLKConfig+0x738>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810528e:	4c0c      	ldr	r4, [pc, #48]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8105290:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8105292:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8105296:	4302      	orrs	r2, r0
 8105298:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 810529a:	4634      	mov	r4, r6
 810529c:	e6c6      	b.n	810502c <HAL_RCCEx_PeriphCLKConfig+0x738>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810529e:	4f08      	ldr	r7, [pc, #32]	@ (81052c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 81052a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81052a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 81052a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 81052a8:	e7ee      	b.n	8105288 <HAL_RCCEx_PeriphCLKConfig+0x994>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81052aa:	2102      	movs	r1, #2
 81052ac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 81052b0:	f7ff faa8 	bl	8104804 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 81052b4:	2800      	cmp	r0, #0
 81052b6:	f43f af2e 	beq.w	8105116 <HAL_RCCEx_PeriphCLKConfig+0x822>
  return HAL_ERROR;
 81052ba:	2001      	movs	r0, #1
 81052bc:	e72e      	b.n	810511c <HAL_RCCEx_PeriphCLKConfig+0x828>
 81052be:	bf00      	nop
 81052c0:	58024400 	.word	0x58024400

081052c4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 81052c4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81052c6:	f7ff f9e1 	bl	810468c <HAL_RCC_GetHCLKFreq>
 81052ca:	4b05      	ldr	r3, [pc, #20]	@ (81052e0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 81052cc:	4a05      	ldr	r2, [pc, #20]	@ (81052e4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 81052ce:	6a1b      	ldr	r3, [r3, #32]
 81052d0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 81052d4:	5cd3      	ldrb	r3, [r2, r3]
 81052d6:	f003 031f 	and.w	r3, r3, #31
}
 81052da:	40d8      	lsrs	r0, r3
 81052dc:	bd08      	pop	{r3, pc}
 81052de:	bf00      	nop
 81052e0:	58024400 	.word	0x58024400
 81052e4:	0810ef70 	.word	0x0810ef70

081052e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81052e8:	494f      	ldr	r1, [pc, #316]	@ (8105428 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 81052ea:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81052ec:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81052ee:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81052f0:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81052f2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 81052f4:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81052f8:	f3c6 3305 	ubfx	r3, r6, #12, #6
  if (pll2m != 0U)
 81052fc:	f000 8090 	beq.w	8105420 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105300:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105304:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105308:	f3c5 1200 	ubfx	r2, r5, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810530c:	4353      	muls	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810530e:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105312:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 8105316:	2c01      	cmp	r4, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810531c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105320:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
    switch (pllsource)
 8105324:	d06e      	beq.n	8105404 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 8105326:	2c02      	cmp	r4, #2
 8105328:	d05e      	beq.n	81053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 810532a:	2c00      	cmp	r4, #0
 810532c:	d16a      	bne.n	8105404 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810532e:	680b      	ldr	r3, [r1, #0]
 8105330:	069b      	lsls	r3, r3, #26
 8105332:	d547      	bpl.n	81053c4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105334:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105336:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105338:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 810533c:	4a3b      	ldr	r2, [pc, #236]	@ (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 810533e:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105340:	ee07 2a90 	vmov	s15, r2
 8105344:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8105348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810534c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8105350:	ee07 3a10 	vmov	s14, r3
 8105354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105358:	ee37 7a26 	vadd.f32	s14, s14, s13
 810535c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105360:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105364:	4a30      	ldr	r2, [pc, #192]	@ (8105428 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8105366:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8105368:	f3c3 2346 	ubfx	r3, r3, #9, #7
 810536c:	ee07 3a10 	vmov	s14, r3
 8105370:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105374:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105378:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810537c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105380:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105384:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8105386:	f3c3 4306 	ubfx	r3, r3, #16, #7
 810538a:	ee07 3a10 	vmov	s14, r3
 810538e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105392:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105396:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810539a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 810539e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81053a2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 81053a4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 81053a8:	ee06 3a90 	vmov	s13, r3
 81053ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81053b0:	ee76 6a86 	vadd.f32	s13, s13, s12
 81053b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81053b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 81053bc:	ee17 3a90 	vmov	r3, s15
 81053c0:	6083      	str	r3, [r0, #8]
}
 81053c2:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81053c4:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 81053c6:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8105430 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 81053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053ce:	ee07 3a90 	vmov	s15, r3
 81053d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053da:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81053de:	eec5 6a87 	vdiv.f32	s13, s11, s14
 81053e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 81053e6:	e7bd      	b.n	8105364 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81053e8:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 81053ea:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8105434 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 81053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81053f2:	ee07 3a90 	vmov	s15, r3
 81053f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81053fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81053fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105402:	e7ec      	b.n	81053de <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105404:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8105406:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 8105438 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 810540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810540e:	ee07 3a90 	vmov	s15, r3
 8105412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810541a:	ee77 7a86 	vadd.f32	s15, s15, s12
 810541e:	e7de      	b.n	81053de <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105420:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105424:	e7cc      	b.n	81053c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8105426:	bf00      	nop
 8105428:	58024400 	.word	0x58024400
 810542c:	03d09000 	.word	0x03d09000
 8105430:	4c742400 	.word	0x4c742400
 8105434:	4bbebc20 	.word	0x4bbebc20
 8105438:	4a742400 	.word	0x4a742400

0810543c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810543c:	494f      	ldr	r1, [pc, #316]	@ (810557c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 810543e:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105440:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105442:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105444:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105446:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 8105448:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810544c:	f3c6 5305 	ubfx	r3, r6, #20, #6
  if (pll3m != 0U)
 8105450:	f000 8090 	beq.w	8105574 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105454:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105458:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810545c:	f3c5 2200 	ubfx	r2, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105460:	4353      	muls	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105462:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105466:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 810546a:	2c01      	cmp	r4, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810546c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105470:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8105474:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
    switch (pllsource)
 8105478:	d06e      	beq.n	8105558 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 810547a:	2c02      	cmp	r4, #2
 810547c:	d05e      	beq.n	810553c <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 810547e:	2c00      	cmp	r4, #0
 8105480:	d16a      	bne.n	8105558 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105482:	680b      	ldr	r3, [r1, #0]
 8105484:	069b      	lsls	r3, r3, #26
 8105486:	d547      	bpl.n	8105518 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105488:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810548a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810548c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 8105490:	4a3b      	ldr	r2, [pc, #236]	@ (8105580 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8105492:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105494:	ee07 2a90 	vmov	s15, r2
 8105498:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 810549c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054a0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 81054a4:	ee07 3a10 	vmov	s14, r3
 81054a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81054ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 81054b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 81054b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81054b8:	4a30      	ldr	r2, [pc, #192]	@ (810557c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 81054ba:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 81054bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 81054c0:	ee07 3a10 	vmov	s14, r3
 81054c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81054c8:	ee37 7a06 	vadd.f32	s14, s14, s12
 81054cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81054d0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 81054d4:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81054d8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 81054da:	f3c3 4306 	ubfx	r3, r3, #16, #7
 81054de:	ee07 3a10 	vmov	s14, r3
 81054e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81054e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 81054ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81054ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 81054f2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81054f6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 81054f8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 81054fc:	ee06 3a90 	vmov	s13, r3
 8105500:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105504:	ee76 6a86 	vadd.f32	s13, s13, s12
 8105508:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 810550c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105510:	ee17 3a90 	vmov	r3, s15
 8105514:	6083      	str	r3, [r0, #8]
}
 8105516:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105518:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810551a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8105584 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 810551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105522:	ee07 3a90 	vmov	s15, r3
 8105526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810552a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810552e:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105532:	eec5 6a87 	vdiv.f32	s13, s11, s14
 8105536:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 810553a:	e7bd      	b.n	81054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810553c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810553e:	eddf 5a12 	vldr	s11, [pc, #72]	@ 8105588 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8105542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105546:	ee07 3a90 	vmov	s15, r3
 810554a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105552:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105556:	e7ec      	b.n	8105532 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105558:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810555a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 810558c <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 810555e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105562:	ee07 3a90 	vmov	s15, r3
 8105566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810556e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105572:	e7de      	b.n	8105532 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105574:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105578:	e7cc      	b.n	8105514 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 810557a:	bf00      	nop
 810557c:	58024400 	.word	0x58024400
 8105580:	03d09000 	.word	0x03d09000
 8105584:	4c742400 	.word	0x4c742400
 8105588:	4bbebc20 	.word	0x4bbebc20
 810558c:	4a742400 	.word	0x4a742400

08105590 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105590:	494f      	ldr	r1, [pc, #316]	@ (81056d0 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8105592:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105594:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105596:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105598:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810559a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  if (pll1m != 0U)
 810559c:	f416 7f7c 	tst.w	r6, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81055a0:	f3c6 1305 	ubfx	r3, r6, #4, #6
  if (pll1m != 0U)
 81055a4:	f000 8090 	beq.w	81056c8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055a8:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81055ac:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81055b0:	f005 0201 	and.w	r2, r5, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81055b4:	4353      	muls	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055b6:	ee06 3a90 	vmov	s13, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81055ba:	f004 0403 	and.w	r4, r4, #3
    switch (pllsource)
 81055be:	2c01      	cmp	r4, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81055c4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 81055c8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
    switch (pllsource)
 81055cc:	d04e      	beq.n	810566c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 81055ce:	2c02      	cmp	r4, #2
 81055d0:	d05e      	beq.n	8105690 <HAL_RCCEx_GetPLL1ClockFreq+0x100>
 81055d2:	2c00      	cmp	r4, #0
 81055d4:	d16a      	bne.n	81056ac <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81055d6:	680b      	ldr	r3, [r1, #0]
 81055d8:	069b      	lsls	r3, r3, #26
 81055da:	d567      	bpl.n	81056ac <HAL_RCCEx_GetPLL1ClockFreq+0x11c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81055dc:	680a      	ldr	r2, [r1, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055de:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81055e0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 81055e4:	4a3b      	ldr	r2, [pc, #236]	@ (81056d4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>)
 81055e6:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055e8:	ee07 2a90 	vmov	s15, r2
 81055ec:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 81055f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055f4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 81055f8:	ee07 3a10 	vmov	s14, r3
 81055fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105600:	ee37 7a26 	vadd.f32	s14, s14, s13
 8105604:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105608:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810560c:	4a30      	ldr	r2, [pc, #192]	@ (81056d0 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 810560e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8105610:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105614:	ee07 3a10 	vmov	s14, r3
 8105618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810561c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105620:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105624:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105628:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810562c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 810562e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8105632:	ee07 3a10 	vmov	s14, r3
 8105636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810563a:	ee37 7a06 	vadd.f32	s14, s14, s12
 810563e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105642:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8105646:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810564a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 810564c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8105650:	ee06 3a90 	vmov	s13, r3
 8105654:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105658:	ee76 6a86 	vadd.f32	s13, s13, s12
 810565c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8105660:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8105664:	ee17 3a90 	vmov	r3, s15
 8105668:	6083      	str	r3, [r0, #8]
}
 810566a:	bd70      	pop	{r4, r5, r6, pc}
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810566c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 810566e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 81056d8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8105672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105676:	ee07 3a90 	vmov	s15, r3
 810567a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810567e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105682:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105686:	eec5 6a87 	vdiv.f32	s13, s11, s14
 810568a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 810568e:	e7bd      	b.n	810560c <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105690:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8105692:	eddf 5a12 	vldr	s11, [pc, #72]	@ 81056dc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8105696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810569a:	ee07 3a90 	vmov	s15, r3
 810569e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81056a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 81056aa:	e7ec      	b.n	8105686 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81056ac:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 81056ae:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 81056e0 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 81056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056b6:	ee07 3a90 	vmov	s15, r3
 81056ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 81056c6:	e7de      	b.n	8105686 <HAL_RCCEx_GetPLL1ClockFreq+0xf6>
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81056c8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81056cc:	e7cc      	b.n	8105668 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 81056ce:	bf00      	nop
 81056d0:	58024400 	.word	0x58024400
 81056d4:	03d09000 	.word	0x03d09000
 81056d8:	4a742400 	.word	0x4a742400
 81056dc:	4bbebc20 	.word	0x4bbebc20
 81056e0:	4c742400 	.word	0x4c742400

081056e4 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 81056e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81056e6:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 81056ea:	430b      	orrs	r3, r1
 81056ec:	d114      	bne.n	8105718 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81056ee:	4b9e      	ldr	r3, [pc, #632]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 81056f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81056f2:	f002 0207 	and.w	r2, r2, #7
    switch (saiclocksource)
 81056f6:	2a04      	cmp	r2, #4
 81056f8:	d82f      	bhi.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 81056fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 81056fe:	0108      	.short	0x0108
 8105700:	0005001d 	.word	0x0005001d
 8105704:	00490165 	.word	0x00490165
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105708:	6818      	ldr	r0, [r3, #0]
 810570a:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 810570e:	d01b      	beq.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105710:	a801      	add	r0, sp, #4
 8105712:	f7ff fe93 	bl	810543c <HAL_RCCEx_GetPLL3ClockFreq>
 8105716:	e016      	b.n	8105746 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105718:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 810571c:	430b      	orrs	r3, r1
 810571e:	d11e      	bne.n	810575e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105720:	4b91      	ldr	r3, [pc, #580]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105722:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8105724:	f402 72e0 	and.w	r2, r2, #448	@ 0x1c0
    switch (saiclocksource)
 8105728:	2a80      	cmp	r2, #128	@ 0x80
 810572a:	d0ed      	beq.n	8105708 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 810572c:	d80f      	bhi.n	810574e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 810572e:	2a00      	cmp	r2, #0
 8105730:	f000 80ed 	beq.w	810590e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105734:	2a40      	cmp	r2, #64	@ 0x40
    switch (srcclk)
 8105736:	d110      	bne.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105738:	6818      	ldr	r0, [r3, #0]
 810573a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 810573e:	d003      	beq.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105740:	a801      	add	r0, sp, #4
 8105742:	f7ff fdd1 	bl	81052e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105746:	9801      	ldr	r0, [sp, #4]
}
 8105748:	b005      	add	sp, #20
 810574a:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 810574e:	2ac0      	cmp	r2, #192	@ 0xc0
 8105750:	f000 813a 	beq.w	81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8105754:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
    switch (saiclocksource)
 8105758:	d01a      	beq.n	8105790 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = 0;
 810575a:	2000      	movs	r0, #0
  return frequency;
 810575c:	e7f4      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810575e:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 8105762:	430b      	orrs	r3, r1
 8105764:	d133      	bne.n	81057ce <HAL_RCCEx_GetPeriphCLKFreq+0xea>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105766:	4b80      	ldr	r3, [pc, #512]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105768:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810576a:	f402 0260 	and.w	r2, r2, #14680064	@ 0xe00000
    switch (saiclocksource)
 810576e:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8105772:	d0c9      	beq.n	8105708 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 8105774:	d805      	bhi.n	8105782 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8105776:	2a00      	cmp	r2, #0
 8105778:	f000 80c9 	beq.w	810590e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 810577c:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8105780:	e7d9      	b.n	8105736 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105782:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8105786:	f000 811f 	beq.w	81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 810578a:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 810578e:	e7e3      	b.n	8105758 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105790:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105792:	6819      	ldr	r1, [r3, #0]
 8105794:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105796:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810579a:	d506      	bpl.n	81057aa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 810579c:	b92a      	cbnz	r2, 81057aa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810579e:	681b      	ldr	r3, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057a0:	4872      	ldr	r0, [pc, #456]	@ (810596c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 81057a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81057a6:	40d8      	lsrs	r0, r3
 81057a8:	e7ce      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81057aa:	4b6f      	ldr	r3, [pc, #444]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 81057ac:	6819      	ldr	r1, [r3, #0]
 81057ae:	05c9      	lsls	r1, r1, #23
 81057b0:	d503      	bpl.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 81057b2:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 81057b6:	f000 8109 	beq.w	81059cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81057ba:	6818      	ldr	r0, [r3, #0]
 81057bc:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 81057c0:	d0c2      	beq.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = HSE_VALUE;
 81057c2:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 81057c6:	486a      	ldr	r0, [pc, #424]	@ (8105970 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 81057c8:	bf18      	it	ne
 81057ca:	2000      	movne	r0, #0
 81057cc:	e7bc      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81057ce:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 81057d2:	430b      	orrs	r3, r1
 81057d4:	d125      	bne.n	8105822 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81057d6:	4b64      	ldr	r3, [pc, #400]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 81057d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81057da:	f002 62e0 	and.w	r2, r2, #117440512	@ 0x7000000
    switch (saiclocksource)
 81057de:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 81057e2:	d091      	beq.n	8105708 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 81057e4:	d805      	bhi.n	81057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 81057e6:	2a00      	cmp	r2, #0
 81057e8:	f000 8091 	beq.w	810590e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 81057ec:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 81057f0:	e7a1      	b.n	8105736 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 81057f2:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 81057f6:	f000 80e7 	beq.w	81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 81057fa:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
    switch (srcclk)
 81057fe:	d1ac      	bne.n	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105800:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105802:	6819      	ldr	r1, [r3, #0]
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105804:	681b      	ldr	r3, [r3, #0]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105806:	0748      	lsls	r0, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105808:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810580c:	d501      	bpl.n	8105812 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 810580e:	2a00      	cmp	r2, #0
 8105810:	d0c6      	beq.n	81057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105812:	05d9      	lsls	r1, r3, #23
 8105814:	d503      	bpl.n	810581e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8105816:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 810581a:	f000 80d7 	beq.w	81059cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810581e:	4b52      	ldr	r3, [pc, #328]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105820:	e7cb      	b.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105822:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 8105826:	430b      	orrs	r3, r1
 8105828:	d114      	bne.n	8105854 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810582a:	4b4f      	ldr	r3, [pc, #316]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 810582c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810582e:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
    switch (srcclk)
 8105832:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8105836:	f43f af67 	beq.w	8105708 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 810583a:	d804      	bhi.n	8105846 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 810583c:	2a00      	cmp	r2, #0
 810583e:	d066      	beq.n	810590e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
 8105840:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8105844:	e777      	b.n	8105736 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8105846:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 810584a:	f000 80bd 	beq.w	81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 810584e:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8105852:	e7d4      	b.n	81057fe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8105854:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8105858:	430b      	orrs	r3, r1
 810585a:	d134      	bne.n	81058c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810585c:	4a42      	ldr	r2, [pc, #264]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 810585e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8105860:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8105864:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105868:	f000 808a 	beq.w	8105980 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 810586c:	d80d      	bhi.n	810588a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 810586e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105872:	d016      	beq.n	81058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105874:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105878:	d01c      	beq.n	81058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 810587a:	2b00      	cmp	r3, #0
 810587c:	f47f af6d 	bne.w	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 8105880:	b005      	add	sp, #20
 8105882:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8105886:	f7fe bf21 	b.w	81046cc <HAL_RCC_GetPCLK1Freq>
    switch (srcclk)
 810588a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810588e:	d07e      	beq.n	810598e <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 8105890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
    switch (srcclk)
 8105894:	f47f af61 	bne.w	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105898:	6810      	ldr	r0, [r2, #0]
          frequency = HSE_VALUE;
 810589a:	4b35      	ldr	r3, [pc, #212]	@ (8105970 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 810589c:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 81058a0:	e079      	b.n	8105996 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81058a2:	6810      	ldr	r0, [r2, #0]
 81058a4:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 81058a8:	f43f af4e 	beq.w	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81058ac:	a801      	add	r0, sp, #4
 81058ae:	f7ff fd1b 	bl	81052e8 <HAL_RCCEx_GetPLL2ClockFreq>
 81058b2:	e034      	b.n	810591e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81058b4:	6810      	ldr	r0, [r2, #0]
 81058b6:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 81058ba:	f43f af45 	beq.w	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81058be:	a801      	add	r0, sp, #4
 81058c0:	f7ff fdbc 	bl	810543c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81058c4:	e02b      	b.n	810591e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81058c6:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 81058ca:	430b      	orrs	r3, r1
 81058cc:	d117      	bne.n	81058fe <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81058ce:	4b26      	ldr	r3, [pc, #152]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 81058d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81058d2:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
    switch (srcclk)
 81058d6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 81058da:	d006      	beq.n	81058ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 81058dc:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 81058e0:	d08e      	beq.n	8105800 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 81058e2:	2a00      	cmp	r2, #0
 81058e4:	f47f af39 	bne.w	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 81058e8:	e726      	b.n	8105738 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81058ea:	6818      	ldr	r0, [r3, #0]
 81058ec:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 81058f0:	f43f af2a 	beq.w	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81058f4:	a801      	add	r0, sp, #4
 81058f6:	f7ff fda1 	bl	810543c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81058fa:	9803      	ldr	r0, [sp, #12]
 81058fc:	e724      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81058fe:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 8105902:	430b      	orrs	r3, r1
 8105904:	d116      	bne.n	8105934 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8105906:	4b18      	ldr	r3, [pc, #96]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8105908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 810590a:	03d2      	lsls	r2, r2, #15
 810590c:	d409      	bmi.n	8105922 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810590e:	6818      	ldr	r0, [r3, #0]
 8105910:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8105914:	f43f af18 	beq.w	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105918:	a801      	add	r0, sp, #4
 810591a:	f7ff fe39 	bl	8105590 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810591e:	9802      	ldr	r0, [sp, #8]
 8105920:	e712      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105922:	6818      	ldr	r0, [r3, #0]
 8105924:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8105928:	f43f af0e 	beq.w	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810592c:	a801      	add	r0, sp, #4
 810592e:	f7ff fcdb 	bl	81052e8 <HAL_RCCEx_GetPLL2ClockFreq>
 8105932:	e7e2      	b.n	81058fa <HAL_RCCEx_GetPeriphCLKFreq+0x216>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105934:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8105938:	430b      	orrs	r3, r1
 810593a:	d12f      	bne.n	810599c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810593c:	4a0a      	ldr	r2, [pc, #40]	@ (8105968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 810593e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8105940:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8105944:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105948:	d01a      	beq.n	8105980 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 810594a:	d813      	bhi.n	8105974 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 810594c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105950:	d0a7      	beq.n	81058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105956:	d0ad      	beq.n	81058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8105958:	2b00      	cmp	r3, #0
 810595a:	f47f aefe 	bne.w	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
}
 810595e:	b005      	add	sp, #20
 8105960:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105964:	f7ff bcae 	b.w	81052c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8105968:	58024400 	.word	0x58024400
 810596c:	03d09000 	.word	0x03d09000
 8105970:	017d7840 	.word	0x017d7840
    switch (srcclk)
 8105974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105978:	d009      	beq.n	810598e <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
 810597a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810597e:	e789      	b.n	8105894 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105980:	6810      	ldr	r0, [r2, #0]
 8105982:	f010 0004 	ands.w	r0, r0, #4
 8105986:	f43f aedf 	beq.w	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810598a:	6813      	ldr	r3, [r2, #0]
 810598c:	e708      	b.n	81057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810598e:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 8105990:	4b0f      	ldr	r3, [pc, #60]	@ (81059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8105992:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
          frequency = HSE_VALUE;
 8105996:	bf18      	it	ne
 8105998:	4618      	movne	r0, r3
 810599a:	e6d5      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810599c:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 81059a0:	4308      	orrs	r0, r1
 81059a2:	f47f aeda 	bne.w	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81059a6:	4a0b      	ldr	r2, [pc, #44]	@ (81059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 81059a8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 81059aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 81059ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81059b2:	d007      	beq.n	81059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 81059b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81059b8:	f43f af73 	beq.w	81058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81059bc:	2b00      	cmp	r3, #0
 81059be:	f47f aecc 	bne.w	810575a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 81059c2:	e769      	b.n	8105898 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81059c4:	6810      	ldr	r0, [r2, #0]
 81059c6:	e7a3      	b.n	8105910 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        frequency = EXTERNAL_CLOCK_VALUE;
 81059c8:	4803      	ldr	r0, [pc, #12]	@ (81059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 81059ca:	e6bd      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          frequency = CSI_VALUE;
 81059cc:	4800      	ldr	r0, [pc, #0]	@ (81059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 81059ce:	e6bb      	b.n	8105748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 81059d0:	003d0900 	.word	0x003d0900
 81059d4:	58024400 	.word	0x58024400
 81059d8:	00bb8000 	.word	0x00bb8000

081059dc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81059dc:	6a03      	ldr	r3, [r0, #32]
 81059de:	f023 0301 	bic.w	r3, r3, #1
 81059e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81059e4:	6a03      	ldr	r3, [r0, #32]
{
 81059e6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81059e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81059ea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81059ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81059ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 81059f2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 81059f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81059f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 81059fa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 81059fe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8105a00:	4d1b      	ldr	r5, [pc, #108]	@ (8105a70 <TIM_OC1_SetConfig+0x94>)
 8105a02:	42a8      	cmp	r0, r5
 8105a04:	d00f      	beq.n	8105a26 <TIM_OC1_SetConfig+0x4a>
 8105a06:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105a0a:	42a8      	cmp	r0, r5
 8105a0c:	d00b      	beq.n	8105a26 <TIM_OC1_SetConfig+0x4a>
 8105a0e:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8105a12:	42a8      	cmp	r0, r5
 8105a14:	d007      	beq.n	8105a26 <TIM_OC1_SetConfig+0x4a>
 8105a16:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105a1a:	42a8      	cmp	r0, r5
 8105a1c:	d003      	beq.n	8105a26 <TIM_OC1_SetConfig+0x4a>
 8105a1e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105a22:	42a8      	cmp	r0, r5
 8105a24:	d11e      	bne.n	8105a64 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8105a26:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8105a28:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8105a2c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105a2e:	4d10      	ldr	r5, [pc, #64]	@ (8105a70 <TIM_OC1_SetConfig+0x94>)
 8105a30:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8105a32:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105a36:	d00f      	beq.n	8105a58 <TIM_OC1_SetConfig+0x7c>
 8105a38:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105a3c:	42a8      	cmp	r0, r5
 8105a3e:	d00b      	beq.n	8105a58 <TIM_OC1_SetConfig+0x7c>
 8105a40:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8105a44:	42a8      	cmp	r0, r5
 8105a46:	d007      	beq.n	8105a58 <TIM_OC1_SetConfig+0x7c>
 8105a48:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105a4c:	42a8      	cmp	r0, r5
 8105a4e:	d003      	beq.n	8105a58 <TIM_OC1_SetConfig+0x7c>
 8105a50:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105a54:	42a8      	cmp	r0, r5
 8105a56:	d105      	bne.n	8105a64 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8105a58:	f424 7540 	bic.w	r5, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8105a5c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105a60:	4334      	orrs	r4, r6
 8105a62:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105a64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8105a66:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8105a68:	684a      	ldr	r2, [r1, #4]
 8105a6a:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105a6c:	6203      	str	r3, [r0, #32]
}
 8105a6e:	bd70      	pop	{r4, r5, r6, pc}
 8105a70:	40010000 	.word	0x40010000

08105a74 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8105a74:	6a03      	ldr	r3, [r0, #32]
 8105a76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8105a7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105a7c:	6a03      	ldr	r3, [r0, #32]
{
 8105a7e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105a80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105a82:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105a84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8105a86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8105a8a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8105a8e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105a90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8105a92:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8105a96:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8105a9a:	4d16      	ldr	r5, [pc, #88]	@ (8105af4 <TIM_OC3_SetConfig+0x80>)
 8105a9c:	42a8      	cmp	r0, r5
 8105a9e:	d003      	beq.n	8105aa8 <TIM_OC3_SetConfig+0x34>
 8105aa0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105aa4:	42a8      	cmp	r0, r5
 8105aa6:	d10d      	bne.n	8105ac4 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105aa8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8105aaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8105aae:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105ab2:	4d10      	ldr	r5, [pc, #64]	@ (8105af4 <TIM_OC3_SetConfig+0x80>)
 8105ab4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8105ab6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105aba:	d00e      	beq.n	8105ada <TIM_OC3_SetConfig+0x66>
 8105abc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105ac0:	42a8      	cmp	r0, r5
 8105ac2:	d00a      	beq.n	8105ada <TIM_OC3_SetConfig+0x66>
 8105ac4:	4d0c      	ldr	r5, [pc, #48]	@ (8105af8 <TIM_OC3_SetConfig+0x84>)
 8105ac6:	42a8      	cmp	r0, r5
 8105ac8:	d007      	beq.n	8105ada <TIM_OC3_SetConfig+0x66>
 8105aca:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105ace:	42a8      	cmp	r0, r5
 8105ad0:	d003      	beq.n	8105ada <TIM_OC3_SetConfig+0x66>
 8105ad2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105ad6:	42a8      	cmp	r0, r5
 8105ad8:	d106      	bne.n	8105ae8 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8105ada:	f424 5540 	bic.w	r5, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8105ade:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105ae2:	4334      	orrs	r4, r6
 8105ae4:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105ae8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105aea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8105aec:	684a      	ldr	r2, [r1, #4]
 8105aee:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105af0:	6203      	str	r3, [r0, #32]
}
 8105af2:	bd70      	pop	{r4, r5, r6, pc}
 8105af4:	40010000 	.word	0x40010000
 8105af8:	40014000 	.word	0x40014000

08105afc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8105afc:	6a03      	ldr	r3, [r0, #32]
 8105afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8105b02:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105b04:	6a03      	ldr	r3, [r0, #32]
{
 8105b06:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105b08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8105b0a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105b0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8105b0e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8105b12:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105b16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105b1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8105b1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8105b20:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105b24:	4d0e      	ldr	r5, [pc, #56]	@ (8105b60 <TIM_OC4_SetConfig+0x64>)
 8105b26:	42a8      	cmp	r0, r5
 8105b28:	d00f      	beq.n	8105b4a <TIM_OC4_SetConfig+0x4e>
 8105b2a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105b2e:	42a8      	cmp	r0, r5
 8105b30:	d00b      	beq.n	8105b4a <TIM_OC4_SetConfig+0x4e>
 8105b32:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8105b36:	42a8      	cmp	r0, r5
 8105b38:	d007      	beq.n	8105b4a <TIM_OC4_SetConfig+0x4e>
 8105b3a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105b3e:	42a8      	cmp	r0, r5
 8105b40:	d003      	beq.n	8105b4a <TIM_OC4_SetConfig+0x4e>
 8105b42:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105b46:	42a8      	cmp	r0, r5
 8105b48:	d104      	bne.n	8105b54 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105b4a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8105b4c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8105b50:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105b54:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8105b56:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8105b58:	684a      	ldr	r2, [r1, #4]
 8105b5a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105b5c:	6203      	str	r3, [r0, #32]
}
 8105b5e:	bd30      	pop	{r4, r5, pc}
 8105b60:	40010000 	.word	0x40010000

08105b64 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8105b64:	6a03      	ldr	r3, [r0, #32]
 8105b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105b6a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105b6c:	6a03      	ldr	r3, [r0, #32]
{
 8105b6e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105b70:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105b72:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8105b74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8105b76:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8105b7a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8105b7e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8105b80:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8105b82:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8105b86:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105b8a:	4d0f      	ldr	r5, [pc, #60]	@ (8105bc8 <TIM_OC5_SetConfig+0x64>)
 8105b8c:	42a8      	cmp	r0, r5
 8105b8e:	d00f      	beq.n	8105bb0 <TIM_OC5_SetConfig+0x4c>
 8105b90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105b94:	42a8      	cmp	r0, r5
 8105b96:	d00b      	beq.n	8105bb0 <TIM_OC5_SetConfig+0x4c>
 8105b98:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8105b9c:	42a8      	cmp	r0, r5
 8105b9e:	d007      	beq.n	8105bb0 <TIM_OC5_SetConfig+0x4c>
 8105ba0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105ba4:	42a8      	cmp	r0, r5
 8105ba6:	d003      	beq.n	8105bb0 <TIM_OC5_SetConfig+0x4c>
 8105ba8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105bac:	42a8      	cmp	r0, r5
 8105bae:	d104      	bne.n	8105bba <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8105bb0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8105bb2:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8105bb6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105bba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105bbc:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8105bbe:	684a      	ldr	r2, [r1, #4]
 8105bc0:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105bc2:	6203      	str	r3, [r0, #32]
}
 8105bc4:	bd30      	pop	{r4, r5, pc}
 8105bc6:	bf00      	nop
 8105bc8:	40010000 	.word	0x40010000

08105bcc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8105bcc:	6a03      	ldr	r3, [r0, #32]
 8105bce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8105bd2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8105bd4:	6a03      	ldr	r3, [r0, #32]
{
 8105bd6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8105bd8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8105bda:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105bdc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8105bde:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8105be2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105be6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8105bea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8105bec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8105bf0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105bf4:	4d0e      	ldr	r5, [pc, #56]	@ (8105c30 <TIM_OC6_SetConfig+0x64>)
 8105bf6:	42a8      	cmp	r0, r5
 8105bf8:	d00f      	beq.n	8105c1a <TIM_OC6_SetConfig+0x4e>
 8105bfa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105bfe:	42a8      	cmp	r0, r5
 8105c00:	d00b      	beq.n	8105c1a <TIM_OC6_SetConfig+0x4e>
 8105c02:	f505 5570 	add.w	r5, r5, #15360	@ 0x3c00
 8105c06:	42a8      	cmp	r0, r5
 8105c08:	d007      	beq.n	8105c1a <TIM_OC6_SetConfig+0x4e>
 8105c0a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105c0e:	42a8      	cmp	r0, r5
 8105c10:	d003      	beq.n	8105c1a <TIM_OC6_SetConfig+0x4e>
 8105c12:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105c16:	42a8      	cmp	r0, r5
 8105c18:	d104      	bne.n	8105c24 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8105c1a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8105c1c:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8105c20:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8105c24:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8105c26:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8105c28:	684a      	ldr	r2, [r1, #4]
 8105c2a:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8105c2c:	6203      	str	r3, [r0, #32]
}
 8105c2e:	bd30      	pop	{r4, r5, pc}
 8105c30:	40010000 	.word	0x40010000

08105c34 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8105c34:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8105c38:	2b01      	cmp	r3, #1
 8105c3a:	d12f      	bne.n	8105c9c <HAL_TIM_Base_Start+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8105c3c:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105c3e:	4a18      	ldr	r2, [pc, #96]	@ (8105ca0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8105c40:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105c44:	6803      	ldr	r3, [r0, #0]
 8105c46:	4293      	cmp	r3, r2
 8105c48:	d01a      	beq.n	8105c80 <HAL_TIM_Base_Start+0x4c>
 8105c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105c4e:	d017      	beq.n	8105c80 <HAL_TIM_Base_Start+0x4c>
 8105c50:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8105c54:	4293      	cmp	r3, r2
 8105c56:	d013      	beq.n	8105c80 <HAL_TIM_Base_Start+0x4c>
 8105c58:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105c5c:	4293      	cmp	r3, r2
 8105c5e:	d00f      	beq.n	8105c80 <HAL_TIM_Base_Start+0x4c>
 8105c60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105c64:	4293      	cmp	r3, r2
 8105c66:	d00b      	beq.n	8105c80 <HAL_TIM_Base_Start+0x4c>
 8105c68:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8105c6c:	4293      	cmp	r3, r2
 8105c6e:	d007      	beq.n	8105c80 <HAL_TIM_Base_Start+0x4c>
 8105c70:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 8105c74:	4293      	cmp	r3, r2
 8105c76:	d003      	beq.n	8105c80 <HAL_TIM_Base_Start+0x4c>
 8105c78:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8105c7c:	4293      	cmp	r3, r2
 8105c7e:	d107      	bne.n	8105c90 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105c80:	6899      	ldr	r1, [r3, #8]
 8105c82:	4a08      	ldr	r2, [pc, #32]	@ (8105ca4 <HAL_TIM_Base_Start+0x70>)
 8105c84:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105c86:	2a06      	cmp	r2, #6
 8105c88:	d006      	beq.n	8105c98 <HAL_TIM_Base_Start+0x64>
 8105c8a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8105c8e:	d003      	beq.n	8105c98 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8105c90:	681a      	ldr	r2, [r3, #0]
 8105c92:	f042 0201 	orr.w	r2, r2, #1
 8105c96:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8105c98:	2000      	movs	r0, #0
 8105c9a:	4770      	bx	lr
    return HAL_ERROR;
 8105c9c:	2001      	movs	r0, #1
}
 8105c9e:	4770      	bx	lr
 8105ca0:	40010000 	.word	0x40010000
 8105ca4:	00010007 	.word	0x00010007

08105ca8 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8105ca8:	4770      	bx	lr
	...

08105cac <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105cac:	4a30      	ldr	r2, [pc, #192]	@ (8105d70 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8105cae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8105cb0:	4290      	cmp	r0, r2
 8105cb2:	d012      	beq.n	8105cda <TIM_Base_SetConfig+0x2e>
 8105cb4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8105cb8:	d00f      	beq.n	8105cda <TIM_Base_SetConfig+0x2e>
 8105cba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8105cbe:	4290      	cmp	r0, r2
 8105cc0:	d00b      	beq.n	8105cda <TIM_Base_SetConfig+0x2e>
 8105cc2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105cc6:	4290      	cmp	r0, r2
 8105cc8:	d007      	beq.n	8105cda <TIM_Base_SetConfig+0x2e>
 8105cca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105cce:	4290      	cmp	r0, r2
 8105cd0:	d003      	beq.n	8105cda <TIM_Base_SetConfig+0x2e>
 8105cd2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8105cd6:	4290      	cmp	r0, r2
 8105cd8:	d119      	bne.n	8105d0e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8105cda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8105cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8105ce0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8105ce2:	4a23      	ldr	r2, [pc, #140]	@ (8105d70 <TIM_Base_SetConfig+0xc4>)
 8105ce4:	4290      	cmp	r0, r2
 8105ce6:	d01d      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105ce8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8105cec:	d01a      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105cee:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8105cf2:	4290      	cmp	r0, r2
 8105cf4:	d016      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105cf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105cfa:	4290      	cmp	r0, r2
 8105cfc:	d012      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105cfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105d02:	4290      	cmp	r0, r2
 8105d04:	d00e      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105d06:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8105d0a:	4290      	cmp	r0, r2
 8105d0c:	d00a      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105d0e:	4a19      	ldr	r2, [pc, #100]	@ (8105d74 <TIM_Base_SetConfig+0xc8>)
 8105d10:	4290      	cmp	r0, r2
 8105d12:	d007      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105d14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105d18:	4290      	cmp	r0, r2
 8105d1a:	d003      	beq.n	8105d24 <TIM_Base_SetConfig+0x78>
 8105d1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8105d20:	4290      	cmp	r0, r2
 8105d22:	d103      	bne.n	8105d2c <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105d24:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8105d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105d2a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8105d2c:	694a      	ldr	r2, [r1, #20]
 8105d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105d32:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8105d34:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105d36:	688b      	ldr	r3, [r1, #8]
 8105d38:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8105d3a:	680b      	ldr	r3, [r1, #0]
 8105d3c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8105d70 <TIM_Base_SetConfig+0xc4>)
 8105d40:	4298      	cmp	r0, r3
 8105d42:	d00f      	beq.n	8105d64 <TIM_Base_SetConfig+0xb8>
 8105d44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8105d48:	4298      	cmp	r0, r3
 8105d4a:	d00b      	beq.n	8105d64 <TIM_Base_SetConfig+0xb8>
 8105d4c:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 8105d50:	4298      	cmp	r0, r3
 8105d52:	d007      	beq.n	8105d64 <TIM_Base_SetConfig+0xb8>
 8105d54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8105d58:	4298      	cmp	r0, r3
 8105d5a:	d003      	beq.n	8105d64 <TIM_Base_SetConfig+0xb8>
 8105d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8105d60:	4298      	cmp	r0, r3
 8105d62:	d101      	bne.n	8105d68 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8105d64:	690b      	ldr	r3, [r1, #16]
 8105d66:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8105d68:	2301      	movs	r3, #1
 8105d6a:	6143      	str	r3, [r0, #20]
}
 8105d6c:	4770      	bx	lr
 8105d6e:	bf00      	nop
 8105d70:	40010000 	.word	0x40010000
 8105d74:	40014000 	.word	0x40014000

08105d78 <HAL_TIM_Base_Init>:
{
 8105d78:	b510      	push	{r4, lr}
  if (htim == NULL)
 8105d7a:	4604      	mov	r4, r0
 8105d7c:	b350      	cbz	r0, 8105dd4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8105d7e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8105d82:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8105d86:	b91b      	cbnz	r3, 8105d90 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8105d88:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8105d8c:	f7fc f9d4 	bl	8102138 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8105d90:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105d92:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8105d94:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105d98:	1d21      	adds	r1, r4, #4
 8105d9a:	f7ff ff87 	bl	8105cac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105d9e:	2301      	movs	r3, #1
 8105da0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8105da4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105da6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8105daa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8105dae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8105db2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8105db6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8105dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105dbe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8105dc2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8105dc6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8105dca:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8105dce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8105dd2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8105dd4:	2001      	movs	r0, #1
 8105dd6:	e7fc      	b.n	8105dd2 <HAL_TIM_Base_Init+0x5a>

08105dd8 <HAL_TIM_PWM_Init>:
{
 8105dd8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8105dda:	4604      	mov	r4, r0
 8105ddc:	b350      	cbz	r0, 8105e34 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8105dde:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8105de2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8105de6:	b91b      	cbnz	r3, 8105df0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8105de8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8105dec:	f7ff ff5c 	bl	8105ca8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8105df0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105df2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8105df4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105df8:	1d21      	adds	r1, r4, #4
 8105dfa:	f7ff ff57 	bl	8105cac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105dfe:	2301      	movs	r3, #1
 8105e00:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 8105e04:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105e06:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8105e0a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8105e0e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8105e12:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8105e16:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8105e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105e1e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8105e22:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8105e26:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8105e2a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8105e2e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8105e32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8105e34:	2001      	movs	r0, #1
 8105e36:	e7fc      	b.n	8105e32 <HAL_TIM_PWM_Init+0x5a>

08105e38 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8105e38:	6a03      	ldr	r3, [r0, #32]
 8105e3a:	f023 0310 	bic.w	r3, r3, #16
 8105e3e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8105e40:	6a03      	ldr	r3, [r0, #32]
{
 8105e42:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8105e44:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8105e46:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105e48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8105e4a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8105e4e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8105e52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105e56:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8105e58:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8105e5c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8105e60:	4d16      	ldr	r5, [pc, #88]	@ (8105ebc <TIM_OC2_SetConfig+0x84>)
 8105e62:	42a8      	cmp	r0, r5
 8105e64:	d003      	beq.n	8105e6e <TIM_OC2_SetConfig+0x36>
 8105e66:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105e6a:	42a8      	cmp	r0, r5
 8105e6c:	d10d      	bne.n	8105e8a <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105e6e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8105e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8105e74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105e78:	4d10      	ldr	r5, [pc, #64]	@ (8105ebc <TIM_OC2_SetConfig+0x84>)
 8105e7a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8105e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8105e80:	d00e      	beq.n	8105ea0 <TIM_OC2_SetConfig+0x68>
 8105e82:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105e86:	42a8      	cmp	r0, r5
 8105e88:	d00a      	beq.n	8105ea0 <TIM_OC2_SetConfig+0x68>
 8105e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8105ec0 <TIM_OC2_SetConfig+0x88>)
 8105e8c:	42a8      	cmp	r0, r5
 8105e8e:	d007      	beq.n	8105ea0 <TIM_OC2_SetConfig+0x68>
 8105e90:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105e94:	42a8      	cmp	r0, r5
 8105e96:	d003      	beq.n	8105ea0 <TIM_OC2_SetConfig+0x68>
 8105e98:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8105e9c:	42a8      	cmp	r0, r5
 8105e9e:	d106      	bne.n	8105eae <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8105ea0:	f424 6540 	bic.w	r5, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8105ea4:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8105ea8:	4334      	orrs	r4, r6
 8105eaa:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8105eae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8105eb0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8105eb2:	684a      	ldr	r2, [r1, #4]
 8105eb4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8105eb6:	6203      	str	r3, [r0, #32]
}
 8105eb8:	bd70      	pop	{r4, r5, r6, pc}
 8105eba:	bf00      	nop
 8105ebc:	40010000 	.word	0x40010000
 8105ec0:	40014000 	.word	0x40014000

08105ec4 <HAL_TIM_PWM_ConfigChannel>:
{
 8105ec4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8105ec6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8105eca:	2b01      	cmp	r3, #1
{
 8105ecc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8105ece:	d073      	beq.n	8105fb8 <HAL_TIM_PWM_ConfigChannel+0xf4>
 8105ed0:	2001      	movs	r0, #1
  switch (Channel)
 8105ed2:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8105ed4:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 8105ed8:	d04e      	beq.n	8105f78 <HAL_TIM_PWM_ConfigChannel+0xb4>
 8105eda:	d808      	bhi.n	8105eee <HAL_TIM_PWM_ConfigChannel+0x2a>
 8105edc:	2a04      	cmp	r2, #4
 8105ede:	d02b      	beq.n	8105f38 <HAL_TIM_PWM_ConfigChannel+0x74>
 8105ee0:	2a08      	cmp	r2, #8
 8105ee2:	d039      	beq.n	8105f58 <HAL_TIM_PWM_ConfigChannel+0x94>
 8105ee4:	b1ba      	cbz	r2, 8105f16 <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 8105ee6:	2300      	movs	r3, #0
 8105ee8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8105eec:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8105eee:	2a10      	cmp	r2, #16
 8105ef0:	d052      	beq.n	8105f98 <HAL_TIM_PWM_ConfigChannel+0xd4>
 8105ef2:	2a14      	cmp	r2, #20
 8105ef4:	d1f7      	bne.n	8105ee6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8105ef6:	6820      	ldr	r0, [r4, #0]
 8105ef8:	f7ff fe68 	bl	8105bcc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105efc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105efe:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8105f00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8105f04:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8105f06:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8105f08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8105f0c:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105f0e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8105f10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8105f14:	e04e      	b.n	8105fb4 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8105f16:	6820      	ldr	r0, [r4, #0]
 8105f18:	f7ff fd60 	bl	81059dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105f1c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105f1e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105f20:	f043 0308 	orr.w	r3, r3, #8
 8105f24:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105f26:	6983      	ldr	r3, [r0, #24]
 8105f28:	f023 0304 	bic.w	r3, r3, #4
 8105f2c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105f2e:	6983      	ldr	r3, [r0, #24]
 8105f30:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105f32:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8105f34:	2000      	movs	r0, #0
 8105f36:	e7d6      	b.n	8105ee6 <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105f38:	6820      	ldr	r0, [r4, #0]
 8105f3a:	f7ff ff7d 	bl	8105e38 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105f3e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105f40:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105f42:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8105f46:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105f48:	6983      	ldr	r3, [r0, #24]
 8105f4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8105f4e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105f50:	6983      	ldr	r3, [r0, #24]
 8105f52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8105f56:	e7ec      	b.n	8105f32 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8105f58:	6820      	ldr	r0, [r4, #0]
 8105f5a:	f7ff fd8b 	bl	8105a74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105f5e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105f60:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105f62:	f043 0308 	orr.w	r3, r3, #8
 8105f66:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8105f68:	69c3      	ldr	r3, [r0, #28]
 8105f6a:	f023 0304 	bic.w	r3, r3, #4
 8105f6e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105f70:	69c3      	ldr	r3, [r0, #28]
 8105f72:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105f74:	61c3      	str	r3, [r0, #28]
      break;
 8105f76:	e7dd      	b.n	8105f34 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8105f78:	6820      	ldr	r0, [r4, #0]
 8105f7a:	f7ff fdbf 	bl	8105afc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105f7e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105f80:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105f82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8105f86:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105f88:	69c3      	ldr	r3, [r0, #28]
 8105f8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8105f8e:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105f90:	69c3      	ldr	r3, [r0, #28]
 8105f92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8105f96:	e7ed      	b.n	8105f74 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8105f98:	6820      	ldr	r0, [r4, #0]
 8105f9a:	f7ff fde3 	bl	8105b64 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105f9e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105fa0:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105fa2:	f043 0308 	orr.w	r3, r3, #8
 8105fa6:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105fa8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8105faa:	f023 0304 	bic.w	r3, r3, #4
 8105fae:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8105fb0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8105fb2:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8105fb4:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 8105fb6:	e7bd      	b.n	8105f34 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 8105fb8:	2002      	movs	r0, #2
 8105fba:	e797      	b.n	8105eec <HAL_TIM_PWM_ConfigChannel+0x28>

08105fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8105fbc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8105fbe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105fc0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105fc2:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8105fc6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8105fca:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8105fcc:	6082      	str	r2, [r0, #8]
}
 8105fce:	bd10      	pop	{r4, pc}

08105fd0 <HAL_TIM_ConfigClockSource>:
{
 8105fd0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8105fd2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8105fd6:	2b01      	cmp	r3, #1
{
 8105fd8:	4604      	mov	r4, r0
 8105fda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8105fde:	f000 80a9 	beq.w	8106134 <HAL_TIM_ConfigClockSource+0x164>
  htim->State = HAL_TIM_STATE_BUSY;
 8105fe2:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8105fe6:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8105fe8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8105fea:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8105fee:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8105ff0:	4b51      	ldr	r3, [pc, #324]	@ (8106138 <HAL_TIM_ConfigClockSource+0x168>)
 8105ff2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8105ff4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8105ff6:	680b      	ldr	r3, [r1, #0]
 8105ff8:	2b70      	cmp	r3, #112	@ 0x70
 8105ffa:	d056      	beq.n	81060aa <HAL_TIM_ConfigClockSource+0xda>
 8105ffc:	d83c      	bhi.n	8106078 <HAL_TIM_ConfigClockSource+0xa8>
 8105ffe:	2b50      	cmp	r3, #80	@ 0x50
 8106000:	d066      	beq.n	81060d0 <HAL_TIM_ConfigClockSource+0x100>
 8106002:	d81d      	bhi.n	8106040 <HAL_TIM_ConfigClockSource+0x70>
 8106004:	2b40      	cmp	r3, #64	@ 0x40
 8106006:	d07c      	beq.n	8106102 <HAL_TIM_ConfigClockSource+0x132>
 8106008:	d806      	bhi.n	8106018 <HAL_TIM_ConfigClockSource+0x48>
 810600a:	2b20      	cmp	r3, #32
 810600c:	d00e      	beq.n	810602c <HAL_TIM_ConfigClockSource+0x5c>
 810600e:	d80b      	bhi.n	8106028 <HAL_TIM_ConfigClockSource+0x58>
 8106010:	f033 0210 	bics.w	r2, r3, #16
 8106014:	d00a      	beq.n	810602c <HAL_TIM_ConfigClockSource+0x5c>
      status = HAL_ERROR;
 8106016:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 8106018:	2301      	movs	r3, #1
 810601a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 810601e:	2300      	movs	r3, #0
 8106020:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8106024:	4610      	mov	r0, r2
 8106026:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8106028:	2b30      	cmp	r3, #48	@ 0x30
 810602a:	d1f4      	bne.n	8106016 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 810602c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 810602e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8106032:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106036:	431a      	orrs	r2, r3
 8106038:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 810603c:	6082      	str	r2, [r0, #8]
}
 810603e:	e022      	b.n	8106086 <HAL_TIM_ConfigClockSource+0xb6>
  switch (sClockSourceConfig->ClockSource)
 8106040:	2b60      	cmp	r3, #96	@ 0x60
 8106042:	d1e9      	bne.n	8106018 <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106044:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8106046:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106048:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810604a:	f023 0310 	bic.w	r3, r3, #16
 810604e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106050:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8106052:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106054:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106058:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 810605c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106060:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8106064:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8106066:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8106068:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 810606a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810606e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106072:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8106076:	e020      	b.n	81060ba <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8106078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810607c:	d01f      	beq.n	81060be <HAL_TIM_ConfigClockSource+0xee>
 810607e:	d804      	bhi.n	810608a <HAL_TIM_ConfigClockSource+0xba>
 8106080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106084:	d1c8      	bne.n	8106018 <HAL_TIM_ConfigClockSource+0x48>
  HAL_StatusTypeDef status = HAL_OK;
 8106086:	2200      	movs	r2, #0
 8106088:	e7c6      	b.n	8106018 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 810608a:	492c      	ldr	r1, [pc, #176]	@ (810613c <HAL_TIM_ConfigClockSource+0x16c>)
 810608c:	428b      	cmp	r3, r1
 810608e:	d0cd      	beq.n	810602c <HAL_TIM_ConfigClockSource+0x5c>
 8106090:	d805      	bhi.n	810609e <HAL_TIM_ConfigClockSource+0xce>
 8106092:	f023 0110 	bic.w	r1, r3, #16
 8106096:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 810609a:	d0c7      	beq.n	810602c <HAL_TIM_ConfigClockSource+0x5c>
 810609c:	e7bc      	b.n	8106018 <HAL_TIM_ConfigClockSource+0x48>
 810609e:	4928      	ldr	r1, [pc, #160]	@ (8106140 <HAL_TIM_ConfigClockSource+0x170>)
 81060a0:	428b      	cmp	r3, r1
 81060a2:	d0c3      	beq.n	810602c <HAL_TIM_ConfigClockSource+0x5c>
 81060a4:	3110      	adds	r1, #16
 81060a6:	428b      	cmp	r3, r1
 81060a8:	e7f7      	b.n	810609a <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 81060aa:	68cb      	ldr	r3, [r1, #12]
 81060ac:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 81060b0:	f7ff ff84 	bl	8105fbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 81060b4:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81060b6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 81060ba:	6083      	str	r3, [r0, #8]
      break;
 81060bc:	e7e3      	b.n	8106086 <HAL_TIM_ConfigClockSource+0xb6>
      TIM_ETR_SetConfig(htim->Instance,
 81060be:	68cb      	ldr	r3, [r1, #12]
 81060c0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 81060c4:	f7ff ff7a 	bl	8105fbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81060c8:	6883      	ldr	r3, [r0, #8]
 81060ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81060ce:	e7f4      	b.n	81060ba <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 81060d0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 81060d2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 81060d4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81060d6:	6a03      	ldr	r3, [r0, #32]
 81060d8:	f023 0301 	bic.w	r3, r3, #1
 81060dc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 81060de:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81060e0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81060e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81060e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 81060ec:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 81060ee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 81060f0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 81060f2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 81060f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81060f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81060fc:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8106100:	e7db      	b.n	81060ba <HAL_TIM_ConfigClockSource+0xea>
                               sClockSourceConfig->ClockPolarity,
 8106102:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106104:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8106106:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106108:	6a03      	ldr	r3, [r0, #32]
 810610a:	f023 0301 	bic.w	r3, r3, #1
 810610e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106110:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106112:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810611a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 810611e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8106120:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8106122:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8106124:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8106126:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810612a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810612e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8106132:	e7c2      	b.n	81060ba <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 8106134:	4602      	mov	r2, r0
 8106136:	e775      	b.n	8106024 <HAL_TIM_ConfigClockSource+0x54>
 8106138:	ffce0088 	.word	0xffce0088
 810613c:	00100020 	.word	0x00100020
 8106140:	00100030 	.word	0x00100030

08106144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106144:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106146:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 810614a:	2b01      	cmp	r3, #1
{
 810614c:	4604      	mov	r4, r0
 810614e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8106152:	d03a      	beq.n	81061ca <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106154:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106156:	4d1d      	ldr	r5, [pc, #116]	@ (81061cc <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8106158:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810615c:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 810615e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8106160:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106162:	d002      	beq.n	810616a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8106164:	4e1a      	ldr	r6, [pc, #104]	@ (81061d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8106166:	42b3      	cmp	r3, r6
 8106168:	d103      	bne.n	8106172 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810616a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 810616c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106170:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106172:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8106174:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106178:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810617a:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 810617c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810617e:	d019      	beq.n	81061b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8106180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106184:	d016      	beq.n	81061b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8106186:	4a13      	ldr	r2, [pc, #76]	@ (81061d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8106188:	4293      	cmp	r3, r2
 810618a:	d013      	beq.n	81061b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 810618c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8106190:	4293      	cmp	r3, r2
 8106192:	d00f      	beq.n	81061b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8106194:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8106198:	4293      	cmp	r3, r2
 810619a:	d00b      	beq.n	81061b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 810619c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 81061a0:	4293      	cmp	r3, r2
 81061a2:	d007      	beq.n	81061b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 81061a4:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 81061a8:	4293      	cmp	r3, r2
 81061aa:	d003      	beq.n	81061b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 81061ac:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 81061b0:	4293      	cmp	r3, r2
 81061b2:	d104      	bne.n	81061be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81061b4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 81061b6:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81061ba:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81061bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81061be:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 81061c0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 81061c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 81061c6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 81061ca:	bd70      	pop	{r4, r5, r6, pc}
 81061cc:	40010000 	.word	0x40010000
 81061d0:	40010400 	.word	0x40010400
 81061d4:	40000400 	.word	0x40000400

081061d8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 81061d8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061da:	e852 3f00 	ldrex	r3, [r2]
 81061de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81061e2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 81061e6:	6802      	ldr	r2, [r0, #0]
 81061e8:	2900      	cmp	r1, #0
 81061ea:	d1f5      	bne.n	81061d8 <UART_EndTxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061ec:	f102 0308 	add.w	r3, r2, #8
 81061f0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 81061f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81061f8:	f102 0c08 	add.w	ip, r2, #8
 81061fc:	e84c 3100 	strex	r1, r3, [ip]
 8106200:	2900      	cmp	r1, #0
 8106202:	d1f3      	bne.n	81061ec <UART_EndTxTransfer+0x14>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8106204:	2320      	movs	r3, #32
 8106206:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 810620a:	4770      	bx	lr

0810620c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810620c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810620e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106210:	e852 3f00 	ldrex	r3, [r2]
 8106214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106218:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 810621c:	6802      	ldr	r2, [r0, #0]
 810621e:	2900      	cmp	r1, #0
 8106220:	d1f5      	bne.n	810620e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106222:	4c0f      	ldr	r4, [pc, #60]	@ (8106260 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106224:	f102 0308 	add.w	r3, r2, #8
 8106228:	e853 3f00 	ldrex	r3, [r3]
 810622c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810622e:	f102 0c08 	add.w	ip, r2, #8
 8106232:	e84c 3100 	strex	r1, r3, [ip]
 8106236:	2900      	cmp	r1, #0
 8106238:	d1f4      	bne.n	8106224 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810623a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 810623c:	2b01      	cmp	r3, #1
 810623e:	d107      	bne.n	8106250 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106240:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106244:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106248:	e842 3100 	strex	r1, r3, [r2]
 810624c:	2900      	cmp	r1, #0
 810624e:	d1f7      	bne.n	8106240 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106250:	2320      	movs	r3, #32
 8106252:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106256:	2300      	movs	r3, #0
 8106258:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810625a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 810625c:	bd10      	pop	{r4, pc}
 810625e:	bf00      	nop
 8106260:	effffffe 	.word	0xeffffffe

08106264 <HAL_UART_Transmit_DMA>:
{
 8106264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106266:	4604      	mov	r4, r0
 8106268:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 810626a:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
 810626e:	2d20      	cmp	r5, #32
 8106270:	d132      	bne.n	81062d8 <HAL_UART_Transmit_DMA+0x74>
    if ((pData == NULL) || (Size == 0U))
 8106272:	b1f1      	cbz	r1, 81062b2 <HAL_UART_Transmit_DMA+0x4e>
 8106274:	b1ea      	cbz	r2, 81062b2 <HAL_UART_Transmit_DMA+0x4e>
    if (huart->hdmatx != NULL)
 8106276:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
    huart->TxXferCount = Size;
 8106278:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    huart->TxXferSize  = Size;
 810627c:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106280:	2600      	movs	r6, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106282:	2221      	movs	r2, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106284:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    huart->pTxBuffPtr  = pData;
 8106288:	6521      	str	r1, [r4, #80]	@ 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810628a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810628e:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 8106290:	b188      	cbz	r0, 81062b6 <HAL_UART_Transmit_DMA+0x52>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8106292:	4f12      	ldr	r7, [pc, #72]	@ (81062dc <HAL_UART_Transmit_DMA+0x78>)
 8106294:	63c7      	str	r7, [r0, #60]	@ 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8106296:	4f12      	ldr	r7, [pc, #72]	@ (81062e0 <HAL_UART_Transmit_DMA+0x7c>)
 8106298:	6407      	str	r7, [r0, #64]	@ 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810629a:	4f12      	ldr	r7, [pc, #72]	@ (81062e4 <HAL_UART_Transmit_DMA+0x80>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810629c:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 810629e:	e9c0 7613 	strd	r7, r6, [r0, #76]	@ 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 81062a2:	f7fd f9e7 	bl	8103674 <HAL_DMA_Start_IT>
 81062a6:	b130      	cbz	r0, 81062b6 <HAL_UART_Transmit_DMA+0x52>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81062a8:	2310      	movs	r3, #16
 81062aa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 81062ae:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
      return HAL_ERROR;
 81062b2:	2001      	movs	r0, #1
}
 81062b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81062b6:	6823      	ldr	r3, [r4, #0]
 81062b8:	2240      	movs	r2, #64	@ 0x40
 81062ba:	621a      	str	r2, [r3, #32]
 81062bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81062be:	f102 0308 	add.w	r3, r2, #8
 81062c2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81062c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81062ca:	f102 0108 	add.w	r1, r2, #8
 81062ce:	e841 3000 	strex	r0, r3, [r1]
 81062d2:	2800      	cmp	r0, #0
 81062d4:	d1f3      	bne.n	81062be <HAL_UART_Transmit_DMA+0x5a>
 81062d6:	e7ed      	b.n	81062b4 <HAL_UART_Transmit_DMA+0x50>
    return HAL_BUSY;
 81062d8:	2002      	movs	r0, #2
 81062da:	e7eb      	b.n	81062b4 <HAL_UART_Transmit_DMA+0x50>
 81062dc:	081062e9 	.word	0x081062e9
 81062e0:	08106331 	.word	0x08106331
 81062e4:	0810633d 	.word	0x0810633d

081062e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 81062e8:	b508      	push	{r3, lr}
 81062ea:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81062ec:	6b80      	ldr	r0, [r0, #56]	@ 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81062ee:	69db      	ldr	r3, [r3, #28]
 81062f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81062f4:	d018      	beq.n	8106328 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 81062f6:	2300      	movs	r3, #0
 81062f8:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81062fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81062fe:	f102 0308 	add.w	r3, r2, #8
 8106302:	e853 3f00 	ldrex	r3, [r3]
 8106306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810630a:	3208      	adds	r2, #8
 810630c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8106310:	6802      	ldr	r2, [r0, #0]
 8106312:	2900      	cmp	r1, #0
 8106314:	d1f2      	bne.n	81062fc <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106316:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810631a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810631e:	e842 3100 	strex	r1, r3, [r2]
 8106322:	2900      	cmp	r1, #0
 8106324:	d1f7      	bne.n	8106316 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8106326:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8106328:	f7fb fa68 	bl	81017fc <HAL_UART_TxCpltCallback>
}
 810632c:	e7fb      	b.n	8106326 <UART_DMATransmitCplt+0x3e>

0810632e <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 810632e:	4770      	bx	lr

08106330 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8106330:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8106332:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8106334:	f7ff fffb 	bl	810632e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106338:	bd08      	pop	{r3, pc}

0810633a <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 810633a:	4770      	bx	lr

0810633c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810633c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 810633e:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8106340:	6804      	ldr	r4, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8106342:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8106346:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810634a:	68a2      	ldr	r2, [r4, #8]
 810634c:	0612      	lsls	r2, r2, #24
 810634e:	d506      	bpl.n	810635e <UART_DMAError+0x22>
 8106350:	2b21      	cmp	r3, #33	@ 0x21
 8106352:	d104      	bne.n	810635e <UART_DMAError+0x22>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8106354:	2300      	movs	r3, #0
 8106356:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 810635a:	f7ff ff3d 	bl	81061d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810635e:	68a3      	ldr	r3, [r4, #8]
 8106360:	065b      	lsls	r3, r3, #25
 8106362:	d506      	bpl.n	8106372 <UART_DMAError+0x36>
 8106364:	2d22      	cmp	r5, #34	@ 0x22
 8106366:	d104      	bne.n	8106372 <UART_DMAError+0x36>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8106368:	2300      	movs	r3, #0
 810636a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 810636e:	f7ff ff4d 	bl	810620c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8106372:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8106376:	f043 0310 	orr.w	r3, r3, #16
 810637a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810637e:	f7ff ffdc 	bl	810633a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106382:	bd38      	pop	{r3, r4, r5, pc}

08106384 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8106384:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8106386:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8106388:	2300      	movs	r3, #0
 810638a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810638e:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8106392:	f7ff ffd2 	bl	810633a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8106396:	bd08      	pop	{r3, pc}

08106398 <HAL_UARTEx_RxEventCallback>:
}
 8106398:	4770      	bx	lr
	...

0810639c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810639c:	6803      	ldr	r3, [r0, #0]
 810639e:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81063a0:	681a      	ldr	r2, [r3, #0]
{
 81063a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 81063a6:	f640 060f 	movw	r6, #2063	@ 0x80f
 81063aa:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81063ac:	689d      	ldr	r5, [r3, #8]
{
 81063ae:	4604      	mov	r4, r0
  if (errorflags == 0U)
 81063b0:	d110      	bne.n	81063d4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81063b2:	068e      	lsls	r6, r1, #26
 81063b4:	f140 8097 	bpl.w	81064e6 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81063b8:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81063bc:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 81063c0:	433e      	orrs	r6, r7
 81063c2:	f000 8090 	beq.w	81064e6 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 81063c6:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 81063c8:	2b00      	cmp	r3, #0
 81063ca:	f000 8085 	beq.w	81064d8 <HAL_UART_IRQHandler+0x13c>
}
 81063ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81063d2:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81063d4:	4eaa      	ldr	r6, [pc, #680]	@ (8106680 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81063d6:	48ab      	ldr	r0, [pc, #684]	@ (8106684 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81063d8:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81063da:	4010      	ands	r0, r2
 81063dc:	4330      	orrs	r0, r6
 81063de:	f000 8082 	beq.w	81064e6 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81063e2:	07cf      	lsls	r7, r1, #31
 81063e4:	d509      	bpl.n	81063fa <HAL_UART_IRQHandler+0x5e>
 81063e6:	05d0      	lsls	r0, r2, #23
 81063e8:	d507      	bpl.n	81063fa <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81063ea:	2001      	movs	r0, #1
 81063ec:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81063ee:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 81063f2:	f040 0001 	orr.w	r0, r0, #1
 81063f6:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81063fa:	078f      	lsls	r7, r1, #30
 81063fc:	d509      	bpl.n	8106412 <HAL_UART_IRQHandler+0x76>
 81063fe:	07e8      	lsls	r0, r5, #31
 8106400:	d507      	bpl.n	8106412 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8106402:	2002      	movs	r0, #2
 8106404:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8106406:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 810640a:	f040 0004 	orr.w	r0, r0, #4
 810640e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106412:	074f      	lsls	r7, r1, #29
 8106414:	d509      	bpl.n	810642a <HAL_UART_IRQHandler+0x8e>
 8106416:	07e8      	lsls	r0, r5, #31
 8106418:	d507      	bpl.n	810642a <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810641a:	2004      	movs	r0, #4
 810641c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810641e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8106422:	f040 0002 	orr.w	r0, r0, #2
 8106426:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 810642a:	070f      	lsls	r7, r1, #28
 810642c:	d50b      	bpl.n	8106446 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810642e:	f002 0020 	and.w	r0, r2, #32
 8106432:	4330      	orrs	r0, r6
 8106434:	d007      	beq.n	8106446 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106436:	2008      	movs	r0, #8
 8106438:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810643a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 810643e:	f040 0008 	orr.w	r0, r0, #8
 8106442:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8106446:	050e      	lsls	r6, r1, #20
 8106448:	d50a      	bpl.n	8106460 <HAL_UART_IRQHandler+0xc4>
 810644a:	0150      	lsls	r0, r2, #5
 810644c:	d508      	bpl.n	8106460 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810644e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8106452:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8106454:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8106458:	f043 0320 	orr.w	r3, r3, #32
 810645c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8106460:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8106464:	2b00      	cmp	r3, #0
 8106466:	d037      	beq.n	81064d8 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8106468:	068b      	lsls	r3, r1, #26
 810646a:	d509      	bpl.n	8106480 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810646c:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8106470:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 8106474:	432a      	orrs	r2, r5
 8106476:	d003      	beq.n	8106480 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 8106478:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 810647a:	b10b      	cbz	r3, 8106480 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 810647c:	4620      	mov	r0, r4
 810647e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106480:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 8106482:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106486:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8106488:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8106490:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 8106494:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8106496:	d021      	beq.n	81064dc <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 8106498:	f7ff feb8 	bl	810620c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810649c:	68b3      	ldr	r3, [r6, #8]
 810649e:	065f      	lsls	r7, r3, #25
 81064a0:	d517      	bpl.n	81064d2 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81064a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81064a4:	f102 0308 	add.w	r3, r2, #8
 81064a8:	e853 3f00 	ldrex	r3, [r3]
 81064ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81064b0:	3208      	adds	r2, #8
 81064b2:	e842 3100 	strex	r1, r3, [r2]
 81064b6:	2900      	cmp	r1, #0
 81064b8:	d1f3      	bne.n	81064a2 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 81064ba:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 81064be:	b140      	cbz	r0, 81064d2 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81064c0:	4b71      	ldr	r3, [pc, #452]	@ (8106688 <HAL_UART_IRQHandler+0x2ec>)
 81064c2:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81064c4:	f7fd fb96 	bl	8103bf4 <HAL_DMA_Abort_IT>
 81064c8:	b130      	cbz	r0, 81064d8 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81064ca:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 81064ce:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 81064d0:	e77d      	b.n	81063ce <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 81064d2:	4620      	mov	r0, r4
 81064d4:	f7ff ff31 	bl	810633a <HAL_UART_ErrorCallback>
}
 81064d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 81064dc:	f7ff ff2d 	bl	810633a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81064e0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 81064e4:	e7f8      	b.n	81064d8 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81064e6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 81064e8:	2801      	cmp	r0, #1
 81064ea:	f040 80ae 	bne.w	810664a <HAL_UART_IRQHandler+0x2ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 81064ee:	06ce      	lsls	r6, r1, #27
 81064f0:	f140 80ab 	bpl.w	810664a <HAL_UART_IRQHandler+0x2ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 81064f4:	06d0      	lsls	r0, r2, #27
 81064f6:	f140 80a8 	bpl.w	810664a <HAL_UART_IRQHandler+0x2ae>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81064fa:	2210      	movs	r2, #16
 81064fc:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81064fe:	689a      	ldr	r2, [r3, #8]
 8106500:	0652      	lsls	r2, r2, #25
 8106502:	d56e      	bpl.n	81065e2 <HAL_UART_IRQHandler+0x246>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8106504:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8106508:	4860      	ldr	r0, [pc, #384]	@ (810668c <HAL_UART_IRQHandler+0x2f0>)
 810650a:	680a      	ldr	r2, [r1, #0]
 810650c:	4282      	cmp	r2, r0
 810650e:	d01e      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 8106510:	3018      	adds	r0, #24
 8106512:	4282      	cmp	r2, r0
 8106514:	d01b      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 8106516:	3018      	adds	r0, #24
 8106518:	4282      	cmp	r2, r0
 810651a:	d018      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 810651c:	3018      	adds	r0, #24
 810651e:	4282      	cmp	r2, r0
 8106520:	d015      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 8106522:	3018      	adds	r0, #24
 8106524:	4282      	cmp	r2, r0
 8106526:	d012      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 8106528:	3018      	adds	r0, #24
 810652a:	4282      	cmp	r2, r0
 810652c:	d00f      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 810652e:	3018      	adds	r0, #24
 8106530:	4282      	cmp	r2, r0
 8106532:	d00c      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 8106534:	3018      	adds	r0, #24
 8106536:	4282      	cmp	r2, r0
 8106538:	d009      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 810653a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 810653e:	4282      	cmp	r2, r0
 8106540:	d005      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 8106542:	3018      	adds	r0, #24
 8106544:	4282      	cmp	r2, r0
 8106546:	d002      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 8106548:	3018      	adds	r0, #24
 810654a:	4282      	cmp	r2, r0
 810654c:	d0ff      	beq.n	810654e <HAL_UART_IRQHandler+0x1b2>
 810654e:	6852      	ldr	r2, [r2, #4]
 8106550:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8106552:	2a00      	cmp	r2, #0
 8106554:	d0c0      	beq.n	81064d8 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8106556:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
 810655a:	4290      	cmp	r0, r2
 810655c:	d9bc      	bls.n	81064d8 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 810655e:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8106562:	69ca      	ldr	r2, [r1, #28]
 8106564:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8106568:	d02f      	beq.n	81065ca <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810656a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810656e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106572:	e843 2100 	strex	r1, r2, [r3]
 8106576:	2900      	cmp	r1, #0
 8106578:	d1f7      	bne.n	810656a <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810657a:	f103 0208 	add.w	r2, r3, #8
 810657e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106582:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106586:	f103 0008 	add.w	r0, r3, #8
 810658a:	e840 2100 	strex	r1, r2, [r0]
 810658e:	2900      	cmp	r1, #0
 8106590:	d1f3      	bne.n	810657a <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106592:	f103 0208 	add.w	r2, r3, #8
 8106596:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810659a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810659e:	f103 0008 	add.w	r0, r3, #8
 81065a2:	e840 2100 	strex	r1, r2, [r0]
 81065a6:	2900      	cmp	r1, #0
 81065a8:	d1f3      	bne.n	8106592 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 81065aa:	2220      	movs	r2, #32
 81065ac:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81065b0:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81065b2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81065b6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81065ba:	e843 2100 	strex	r1, r2, [r3]
 81065be:	2900      	cmp	r1, #0
 81065c0:	d1f7      	bne.n	81065b2 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 81065c2:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 81065c6:	f7fd f96f 	bl	81038a8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 81065ca:	2302      	movs	r3, #2
 81065cc:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 81065ce:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 81065d2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 81065d6:	1ac9      	subs	r1, r1, r3
 81065d8:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 81065da:	4620      	mov	r0, r4
 81065dc:	f7ff fedc 	bl	8106398 <HAL_UARTEx_RxEventCallback>
 81065e0:	e77a      	b.n	81064d8 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81065e2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 81065e6:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81065ea:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
      if ((huart->RxXferCount > 0U)
 81065ee:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81065f0:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 81065f2:	2800      	cmp	r0, #0
 81065f4:	f43f af70 	beq.w	81064d8 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81065f8:	1a89      	subs	r1, r1, r2
 81065fa:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 81065fc:	2900      	cmp	r1, #0
 81065fe:	f43f af6b 	beq.w	81064d8 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106602:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106606:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810660a:	e843 2000 	strex	r0, r2, [r3]
 810660e:	2800      	cmp	r0, #0
 8106610:	d1f7      	bne.n	8106602 <HAL_UART_IRQHandler+0x266>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106612:	4d1f      	ldr	r5, [pc, #124]	@ (8106690 <HAL_UART_IRQHandler+0x2f4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106614:	f103 0208 	add.w	r2, r3, #8
 8106618:	e852 2f00 	ldrex	r2, [r2]
 810661c:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810661e:	f103 0608 	add.w	r6, r3, #8
 8106622:	e846 2000 	strex	r0, r2, [r6]
 8106626:	2800      	cmp	r0, #0
 8106628:	d1f4      	bne.n	8106614 <HAL_UART_IRQHandler+0x278>
        huart->RxState = HAL_UART_STATE_READY;
 810662a:	2220      	movs	r2, #32
 810662c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8106630:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106632:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106634:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106638:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810663c:	e843 2000 	strex	r0, r2, [r3]
 8106640:	2800      	cmp	r0, #0
 8106642:	d1f7      	bne.n	8106634 <HAL_UART_IRQHandler+0x298>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8106644:	2302      	movs	r3, #2
 8106646:	6723      	str	r3, [r4, #112]	@ 0x70
 8106648:	e7c7      	b.n	81065da <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810664a:	02cf      	lsls	r7, r1, #11
 810664c:	d509      	bpl.n	8106662 <HAL_UART_IRQHandler+0x2c6>
 810664e:	026e      	lsls	r6, r5, #9
 8106650:	d507      	bpl.n	8106662 <HAL_UART_IRQHandler+0x2c6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106652:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8106656:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8106658:	621a      	str	r2, [r3, #32]
}
 810665a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 810665e:	f000 bb1d 	b.w	8106c9c <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8106662:	0608      	lsls	r0, r1, #24
 8106664:	d516      	bpl.n	8106694 <HAL_UART_IRQHandler+0x2f8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8106666:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810666a:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 810666e:	4328      	orrs	r0, r5
 8106670:	d010      	beq.n	8106694 <HAL_UART_IRQHandler+0x2f8>
    if (huart->TxISR != NULL)
 8106672:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8106674:	2b00      	cmp	r3, #0
 8106676:	f43f af2f 	beq.w	81064d8 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 810667a:	4620      	mov	r0, r4
 810667c:	e6a7      	b.n	81063ce <HAL_UART_IRQHandler+0x32>
 810667e:	bf00      	nop
 8106680:	10000001 	.word	0x10000001
 8106684:	04000120 	.word	0x04000120
 8106688:	08106385 	.word	0x08106385
 810668c:	40020010 	.word	0x40020010
 8106690:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8106694:	064f      	lsls	r7, r1, #25
 8106696:	d511      	bpl.n	81066bc <HAL_UART_IRQHandler+0x320>
 8106698:	0656      	lsls	r6, r2, #25
 810669a:	d50f      	bpl.n	81066bc <HAL_UART_IRQHandler+0x320>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810669c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81066a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81066a4:	e843 2100 	strex	r1, r2, [r3]
 81066a8:	2900      	cmp	r1, #0
 81066aa:	d1f7      	bne.n	810669c <HAL_UART_IRQHandler+0x300>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 81066ac:	2320      	movs	r3, #32
 81066ae:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 81066b2:	67a1      	str	r1, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 81066b4:	4620      	mov	r0, r4
 81066b6:	f7fb f8a1 	bl	81017fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81066ba:	e70d      	b.n	81064d8 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 81066bc:	020d      	lsls	r5, r1, #8
 81066be:	d506      	bpl.n	81066ce <HAL_UART_IRQHandler+0x332>
 81066c0:	0050      	lsls	r0, r2, #1
 81066c2:	d504      	bpl.n	81066ce <HAL_UART_IRQHandler+0x332>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 81066c4:	4620      	mov	r0, r4
}
 81066c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 81066ca:	f000 bae9 	b.w	8106ca0 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 81066ce:	01cb      	lsls	r3, r1, #7
 81066d0:	f57f af02 	bpl.w	81064d8 <HAL_UART_IRQHandler+0x13c>
 81066d4:	2a00      	cmp	r2, #0
 81066d6:	f6bf aeff 	bge.w	81064d8 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 81066da:	4620      	mov	r0, r4
}
 81066dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 81066e0:	f000 badd 	b.w	8106c9e <HAL_UARTEx_RxFifoFullCallback>

081066e4 <UART_SetConfig>:
{
 81066e4:	b530      	push	{r4, r5, lr}
 81066e6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 81066e8:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81066ea:	6921      	ldr	r1, [r4, #16]
 81066ec:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81066ee:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81066f0:	69c0      	ldr	r0, [r0, #28]
 81066f2:	430a      	orrs	r2, r1
 81066f4:	6961      	ldr	r1, [r4, #20]
 81066f6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81066f8:	499c      	ldr	r1, [pc, #624]	@ (810696c <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81066fa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81066fc:	4029      	ands	r1, r5
 81066fe:	430a      	orrs	r2, r1
 8106700:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106702:	685a      	ldr	r2, [r3, #4]
 8106704:	68e1      	ldr	r1, [r4, #12]
 8106706:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 810670a:	430a      	orrs	r2, r1
 810670c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810670e:	4a98      	ldr	r2, [pc, #608]	@ (8106970 <UART_SetConfig+0x28c>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106710:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106712:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8106714:	bf1c      	itt	ne
 8106716:	6a22      	ldrne	r2, [r4, #32]
 8106718:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810671a:	689a      	ldr	r2, [r3, #8]
 810671c:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8106720:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8106724:	430a      	orrs	r2, r1
 8106726:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810672a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 810672c:	f022 020f 	bic.w	r2, r2, #15
 8106730:	430a      	orrs	r2, r1
 8106732:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106734:	4a8f      	ldr	r2, [pc, #572]	@ (8106974 <UART_SetConfig+0x290>)
 8106736:	4293      	cmp	r3, r2
{
 8106738:	b087      	sub	sp, #28
  UART_GETCLOCKSOURCE(huart, clocksource);
 810673a:	d128      	bne.n	810678e <UART_SetConfig+0xaa>
 810673c:	4b8e      	ldr	r3, [pc, #568]	@ (8106978 <UART_SetConfig+0x294>)
 810673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106740:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8106744:	2b18      	cmp	r3, #24
 8106746:	f000 812f 	beq.w	81069a8 <UART_SetConfig+0x2c4>
 810674a:	d814      	bhi.n	8106776 <UART_SetConfig+0x92>
 810674c:	2b08      	cmp	r3, #8
 810674e:	f000 8154 	beq.w	81069fa <UART_SetConfig+0x316>
 8106752:	2b10      	cmp	r3, #16
 8106754:	f000 8102 	beq.w	810695c <UART_SetConfig+0x278>
 8106758:	2b00      	cmp	r3, #0
 810675a:	f000 80f9 	beq.w	8106950 <UART_SetConfig+0x26c>
 810675e:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106760:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8106764:	f040 80b4 	bne.w	81068d0 <UART_SetConfig+0x1ec>
    switch (clocksource)
 8106768:	2b08      	cmp	r3, #8
 810676a:	d846      	bhi.n	81067fa <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810676c:	4668      	mov	r0, sp
 810676e:	f7fe fdbb 	bl	81052e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106772:	9801      	ldr	r0, [sp, #4]
        break;
 8106774:	e0e9      	b.n	810694a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106776:	2b20      	cmp	r3, #32
 8106778:	f000 80dd 	beq.w	8106936 <UART_SetConfig+0x252>
 810677c:	2b28      	cmp	r3, #40	@ 0x28
 810677e:	d1ee      	bne.n	810675e <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106780:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8106784:	f000 811d 	beq.w	81069c2 <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 8106788:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 810678c:	e0be      	b.n	810690c <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 810678e:	4a7b      	ldr	r2, [pc, #492]	@ (810697c <UART_SetConfig+0x298>)
 8106790:	4293      	cmp	r3, r2
 8106792:	d115      	bne.n	81067c0 <UART_SetConfig+0xdc>
 8106794:	4b78      	ldr	r3, [pc, #480]	@ (8106978 <UART_SetConfig+0x294>)
 8106796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106798:	f003 0307 	and.w	r3, r3, #7
 810679c:	2b05      	cmp	r3, #5
 810679e:	d82c      	bhi.n	81067fa <UART_SetConfig+0x116>
 81067a0:	a201      	add	r2, pc, #4	@ (adr r2, 81067a8 <UART_SetConfig+0xc4>)
 81067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067a6:	bf00      	nop
 81067a8:	08106941 	.word	0x08106941
 81067ac:	081068cd 	.word	0x081068cd
 81067b0:	0810695d 	.word	0x0810695d
 81067b4:	081069a9 	.word	0x081069a9
 81067b8:	08106937 	.word	0x08106937
 81067bc:	08106781 	.word	0x08106781
 81067c0:	4a6f      	ldr	r2, [pc, #444]	@ (8106980 <UART_SetConfig+0x29c>)
 81067c2:	4293      	cmp	r3, r2
 81067c4:	d0e6      	beq.n	8106794 <UART_SetConfig+0xb0>
 81067c6:	4a6f      	ldr	r2, [pc, #444]	@ (8106984 <UART_SetConfig+0x2a0>)
 81067c8:	4293      	cmp	r3, r2
 81067ca:	d0e3      	beq.n	8106794 <UART_SetConfig+0xb0>
 81067cc:	4a6e      	ldr	r2, [pc, #440]	@ (8106988 <UART_SetConfig+0x2a4>)
 81067ce:	4293      	cmp	r3, r2
 81067d0:	d0e0      	beq.n	8106794 <UART_SetConfig+0xb0>
 81067d2:	4a6e      	ldr	r2, [pc, #440]	@ (810698c <UART_SetConfig+0x2a8>)
 81067d4:	4293      	cmp	r3, r2
 81067d6:	d118      	bne.n	810680a <UART_SetConfig+0x126>
 81067d8:	4b67      	ldr	r3, [pc, #412]	@ (8106978 <UART_SetConfig+0x294>)
 81067da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81067dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81067e0:	2b18      	cmp	r3, #24
 81067e2:	f000 80e1 	beq.w	81069a8 <UART_SetConfig+0x2c4>
 81067e6:	d80a      	bhi.n	81067fe <UART_SetConfig+0x11a>
 81067e8:	2b08      	cmp	r3, #8
 81067ea:	f000 8106 	beq.w	81069fa <UART_SetConfig+0x316>
 81067ee:	2b10      	cmp	r3, #16
 81067f0:	f000 80b4 	beq.w	810695c <UART_SetConfig+0x278>
 81067f4:	2b00      	cmp	r3, #0
 81067f6:	f000 80ab 	beq.w	8106950 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 81067fa:	2001      	movs	r0, #1
 81067fc:	e049      	b.n	8106892 <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 81067fe:	2b20      	cmp	r3, #32
 8106800:	f000 8099 	beq.w	8106936 <UART_SetConfig+0x252>
 8106804:	2b28      	cmp	r3, #40	@ 0x28
 8106806:	d0bb      	beq.n	8106780 <UART_SetConfig+0x9c>
 8106808:	e7f7      	b.n	81067fa <UART_SetConfig+0x116>
 810680a:	4a61      	ldr	r2, [pc, #388]	@ (8106990 <UART_SetConfig+0x2ac>)
 810680c:	4293      	cmp	r3, r2
 810680e:	d0c1      	beq.n	8106794 <UART_SetConfig+0xb0>
 8106810:	4a60      	ldr	r2, [pc, #384]	@ (8106994 <UART_SetConfig+0x2b0>)
 8106812:	4293      	cmp	r3, r2
 8106814:	d0be      	beq.n	8106794 <UART_SetConfig+0xb0>
 8106816:	4a56      	ldr	r2, [pc, #344]	@ (8106970 <UART_SetConfig+0x28c>)
 8106818:	4293      	cmp	r3, r2
 810681a:	d1ee      	bne.n	81067fa <UART_SetConfig+0x116>
 810681c:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8106820:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8106822:	f003 0307 	and.w	r3, r3, #7
 8106826:	2b05      	cmp	r3, #5
 8106828:	d8e7      	bhi.n	81067fa <UART_SetConfig+0x116>
 810682a:	e8df f003 	tbb	[pc, r3]
 810682e:	2b49      	.short	0x2b49
 8106830:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 8106834:	4858      	ldr	r0, [pc, #352]	@ (8106998 <UART_SetConfig+0x2b4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106836:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106838:	4b58      	ldr	r3, [pc, #352]	@ (810699c <UART_SetConfig+0x2b8>)
 810683a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810683c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106840:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8106844:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106848:	4299      	cmp	r1, r3
 810684a:	d8d6      	bhi.n	81067fa <UART_SetConfig+0x116>
 810684c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8106850:	d8d3      	bhi.n	81067fa <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106852:	2300      	movs	r3, #0
 8106854:	4619      	mov	r1, r3
 8106856:	f7fa fa9f 	bl	8100d98 <__aeabi_uldivmod>
 810685a:	0209      	lsls	r1, r1, #8
 810685c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8106860:	086b      	lsrs	r3, r5, #1
 8106862:	0200      	lsls	r0, r0, #8
 8106864:	18c0      	adds	r0, r0, r3
 8106866:	462a      	mov	r2, r5
 8106868:	f04f 0300 	mov.w	r3, #0
 810686c:	f141 0100 	adc.w	r1, r1, #0
 8106870:	f7fa fa92 	bl	8100d98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106874:	4b4a      	ldr	r3, [pc, #296]	@ (81069a0 <UART_SetConfig+0x2bc>)
 8106876:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 810687a:	429a      	cmp	r2, r3
 810687c:	d8bd      	bhi.n	81067fa <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 810687e:	6823      	ldr	r3, [r4, #0]
 8106880:	60d8      	str	r0, [r3, #12]
 8106882:	e005      	b.n	8106890 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106884:	4668      	mov	r0, sp
 8106886:	f7fe fd2f 	bl	81052e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810688a:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 810688c:	2800      	cmp	r0, #0
 810688e:	d1d2      	bne.n	8106836 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 8106890:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8106892:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8106896:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8106898:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 810689a:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 810689e:	b007      	add	sp, #28
 81068a0:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81068a2:	a803      	add	r0, sp, #12
 81068a4:	f7fe fdca 	bl	810543c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81068a8:	9804      	ldr	r0, [sp, #16]
        break;
 81068aa:	e7ef      	b.n	810688c <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81068ac:	6813      	ldr	r3, [r2, #0]
 81068ae:	483d      	ldr	r0, [pc, #244]	@ (81069a4 <UART_SetConfig+0x2c0>)
 81068b0:	f013 0f20 	tst.w	r3, #32
 81068b4:	d0bf      	beq.n	8106836 <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81068b6:	6813      	ldr	r3, [r2, #0]
 81068b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81068bc:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 81068be:	e7ba      	b.n	8106836 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81068c0:	f7fe fd00 	bl	81052c4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 81068c4:	e7e2      	b.n	810688c <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 81068c6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 81068ca:	e7b4      	b.n	8106836 <UART_SetConfig+0x152>
 81068cc:	2304      	movs	r3, #4
 81068ce:	e747      	b.n	8106760 <UART_SetConfig+0x7c>
    switch (clocksource)
 81068d0:	2b08      	cmp	r3, #8
 81068d2:	d892      	bhi.n	81067fa <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81068d4:	4668      	mov	r0, sp
 81068d6:	f7fe fd07 	bl	81052e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81068da:	9801      	ldr	r0, [sp, #4]
        break;
 81068dc:	e001      	b.n	81068e2 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 81068de:	f7fd fef5 	bl	81046cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 81068e2:	2800      	cmp	r0, #0
 81068e4:	d0d4      	beq.n	8106890 <UART_SetConfig+0x1ac>
 81068e6:	e011      	b.n	810690c <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 81068e8:	f7fd ff02 	bl	81046f0 <HAL_RCC_GetPCLK2Freq>
        break;
 81068ec:	e7f9      	b.n	81068e2 <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81068ee:	a803      	add	r0, sp, #12
 81068f0:	f7fe fda4 	bl	810543c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81068f4:	9804      	ldr	r0, [sp, #16]
        break;
 81068f6:	e7f4      	b.n	81068e2 <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81068f8:	4b1f      	ldr	r3, [pc, #124]	@ (8106978 <UART_SetConfig+0x294>)
 81068fa:	482a      	ldr	r0, [pc, #168]	@ (81069a4 <UART_SetConfig+0x2c0>)
 81068fc:	681a      	ldr	r2, [r3, #0]
 81068fe:	f012 0f20 	tst.w	r2, #32
 8106902:	d003      	beq.n	810690c <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 810690a:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810690c:	6862      	ldr	r2, [r4, #4]
 810690e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8106910:	4b22      	ldr	r3, [pc, #136]	@ (810699c <UART_SetConfig+0x2b8>)
 8106912:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8106916:	fbb0 f3f3 	udiv	r3, r0, r3
 810691a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 810691e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106922:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8106926:	f1a3 0110 	sub.w	r1, r3, #16
 810692a:	4291      	cmp	r1, r2
 810692c:	f63f af65 	bhi.w	81067fa <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106930:	6822      	ldr	r2, [r4, #0]
 8106932:	60d3      	str	r3, [r2, #12]
 8106934:	e7ac      	b.n	8106890 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106936:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 810693a:	4817      	ldr	r0, [pc, #92]	@ (8106998 <UART_SetConfig+0x2b4>)
 810693c:	d1e6      	bne.n	810690c <UART_SetConfig+0x228>
 810693e:	e040      	b.n	81069c2 <UART_SetConfig+0x2de>
 8106940:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8106944:	d1cb      	bne.n	81068de <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8106946:	f7fd fec1 	bl	81046cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 810694a:	2800      	cmp	r0, #0
 810694c:	d0a0      	beq.n	8106890 <UART_SetConfig+0x1ac>
 810694e:	e038      	b.n	81069c2 <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106950:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8106954:	d1c8      	bne.n	81068e8 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8106956:	f7fd fecb 	bl	81046f0 <HAL_RCC_GetPCLK2Freq>
        break;
 810695a:	e7f6      	b.n	810694a <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810695c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8106960:	d1c5      	bne.n	81068ee <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106962:	a803      	add	r0, sp, #12
 8106964:	f7fe fd6a 	bl	810543c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106968:	9804      	ldr	r0, [sp, #16]
        break;
 810696a:	e7ee      	b.n	810694a <UART_SetConfig+0x266>
 810696c:	cfff69f3 	.word	0xcfff69f3
 8106970:	58000c00 	.word	0x58000c00
 8106974:	40011000 	.word	0x40011000
 8106978:	58024400 	.word	0x58024400
 810697c:	40004400 	.word	0x40004400
 8106980:	40004800 	.word	0x40004800
 8106984:	40004c00 	.word	0x40004c00
 8106988:	40005000 	.word	0x40005000
 810698c:	40011400 	.word	0x40011400
 8106990:	40007800 	.word	0x40007800
 8106994:	40007c00 	.word	0x40007c00
 8106998:	003d0900 	.word	0x003d0900
 810699c:	0810f788 	.word	0x0810f788
 81069a0:	000ffcff 	.word	0x000ffcff
 81069a4:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81069a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 81069ac:	d1a4      	bne.n	81068f8 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81069ae:	4b15      	ldr	r3, [pc, #84]	@ (8106a04 <UART_SetConfig+0x320>)
 81069b0:	4815      	ldr	r0, [pc, #84]	@ (8106a08 <UART_SetConfig+0x324>)
 81069b2:	681a      	ldr	r2, [r3, #0]
 81069b4:	f012 0f20 	tst.w	r2, #32
 81069b8:	d003      	beq.n	81069c2 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81069ba:	681b      	ldr	r3, [r3, #0]
 81069bc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81069c0:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81069c2:	6861      	ldr	r1, [r4, #4]
 81069c4:	4b11      	ldr	r3, [pc, #68]	@ (8106a0c <UART_SetConfig+0x328>)
 81069c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 81069c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 81069cc:	fbb0 f2f2 	udiv	r2, r0, r2
 81069d0:	084b      	lsrs	r3, r1, #1
 81069d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81069d6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81069da:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81069de:	f1a3 0110 	sub.w	r1, r3, #16
 81069e2:	4291      	cmp	r1, r2
 81069e4:	f63f af09 	bhi.w	81067fa <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81069e8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 81069ec:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81069ee:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81069f0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 81069f4:	4313      	orrs	r3, r2
 81069f6:	60cb      	str	r3, [r1, #12]
 81069f8:	e74a      	b.n	8106890 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81069fa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 81069fe:	f47f af69 	bne.w	81068d4 <UART_SetConfig+0x1f0>
 8106a02:	e6b3      	b.n	810676c <UART_SetConfig+0x88>
 8106a04:	58024400 	.word	0x58024400
 8106a08:	03d09000 	.word	0x03d09000
 8106a0c:	0810f788 	.word	0x0810f788

08106a10 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106a10:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8106a12:	07da      	lsls	r2, r3, #31
{
 8106a14:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106a16:	d506      	bpl.n	8106a26 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106a18:	6801      	ldr	r1, [r0, #0]
 8106a1a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8106a1c:	684a      	ldr	r2, [r1, #4]
 8106a1e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8106a22:	4322      	orrs	r2, r4
 8106a24:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106a26:	079c      	lsls	r4, r3, #30
 8106a28:	d506      	bpl.n	8106a38 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106a2a:	6801      	ldr	r1, [r0, #0]
 8106a2c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8106a2e:	684a      	ldr	r2, [r1, #4]
 8106a30:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8106a34:	4322      	orrs	r2, r4
 8106a36:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106a38:	0759      	lsls	r1, r3, #29
 8106a3a:	d506      	bpl.n	8106a4a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106a3c:	6801      	ldr	r1, [r0, #0]
 8106a3e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8106a40:	684a      	ldr	r2, [r1, #4]
 8106a42:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8106a46:	4322      	orrs	r2, r4
 8106a48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106a4a:	071a      	lsls	r2, r3, #28
 8106a4c:	d506      	bpl.n	8106a5c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106a4e:	6801      	ldr	r1, [r0, #0]
 8106a50:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8106a52:	684a      	ldr	r2, [r1, #4]
 8106a54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8106a58:	4322      	orrs	r2, r4
 8106a5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106a5c:	06dc      	lsls	r4, r3, #27
 8106a5e:	d506      	bpl.n	8106a6e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106a60:	6801      	ldr	r1, [r0, #0]
 8106a62:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8106a64:	688a      	ldr	r2, [r1, #8]
 8106a66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8106a6a:	4322      	orrs	r2, r4
 8106a6c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106a6e:	0699      	lsls	r1, r3, #26
 8106a70:	d506      	bpl.n	8106a80 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106a72:	6801      	ldr	r1, [r0, #0]
 8106a74:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8106a76:	688a      	ldr	r2, [r1, #8]
 8106a78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8106a7c:	4322      	orrs	r2, r4
 8106a7e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106a80:	065a      	lsls	r2, r3, #25
 8106a82:	d50f      	bpl.n	8106aa4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106a84:	6801      	ldr	r1, [r0, #0]
 8106a86:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8106a88:	684a      	ldr	r2, [r1, #4]
 8106a8a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8106a8e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106a90:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106a94:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106a96:	d105      	bne.n	8106aa4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106a98:	684a      	ldr	r2, [r1, #4]
 8106a9a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8106a9c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8106aa0:	4322      	orrs	r2, r4
 8106aa2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106aa4:	061b      	lsls	r3, r3, #24
 8106aa6:	d506      	bpl.n	8106ab6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106aa8:	6802      	ldr	r2, [r0, #0]
 8106aaa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8106aac:	6853      	ldr	r3, [r2, #4]
 8106aae:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8106ab2:	430b      	orrs	r3, r1
 8106ab4:	6053      	str	r3, [r2, #4]
}
 8106ab6:	bd10      	pop	{r4, pc}

08106ab8 <UART_WaitOnFlagUntilTimeout>:
{
 8106ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8106ac0:	4604      	mov	r4, r0
 8106ac2:	460f      	mov	r7, r1
 8106ac4:	4616      	mov	r6, r2
 8106ac6:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106ac8:	6822      	ldr	r2, [r4, #0]
 8106aca:	69d3      	ldr	r3, [r2, #28]
 8106acc:	ea37 0303 	bics.w	r3, r7, r3
 8106ad0:	bf0c      	ite	eq
 8106ad2:	2301      	moveq	r3, #1
 8106ad4:	2300      	movne	r3, #0
 8106ad6:	42b3      	cmp	r3, r6
 8106ad8:	d001      	beq.n	8106ade <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8106ada:	2000      	movs	r0, #0
 8106adc:	e01e      	b.n	8106b1c <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8106ade:	f1b9 3fff 	cmp.w	r9, #4294967295
 8106ae2:	d0f2      	beq.n	8106aca <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106ae4:	f7fb fd9e 	bl	8102624 <HAL_GetTick>
 8106ae8:	eba0 0008 	sub.w	r0, r0, r8
 8106aec:	4548      	cmp	r0, r9
 8106aee:	d825      	bhi.n	8106b3c <UART_WaitOnFlagUntilTimeout+0x84>
 8106af0:	f1b9 0f00 	cmp.w	r9, #0
 8106af4:	d022      	beq.n	8106b3c <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8106af6:	6820      	ldr	r0, [r4, #0]
 8106af8:	6803      	ldr	r3, [r0, #0]
 8106afa:	075a      	lsls	r2, r3, #29
 8106afc:	d5e4      	bpl.n	8106ac8 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8106afe:	69c5      	ldr	r5, [r0, #28]
 8106b00:	f015 0508 	ands.w	r5, r5, #8
 8106b04:	d00c      	beq.n	8106b20 <UART_WaitOnFlagUntilTimeout+0x68>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8106b06:	2508      	movs	r5, #8
 8106b08:	6205      	str	r5, [r0, #32]
           UART_EndRxTransfer(huart);
 8106b0a:	4620      	mov	r0, r4
 8106b0c:	f7ff fb7e 	bl	810620c <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 8106b10:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8106b12:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
           __HAL_UNLOCK(huart);
 8106b16:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
           return HAL_ERROR;
 8106b1a:	2001      	movs	r0, #1
}
 8106b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106b20:	69c3      	ldr	r3, [r0, #28]
 8106b22:	051b      	lsls	r3, r3, #20
 8106b24:	d5d0      	bpl.n	8106ac8 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8106b2a:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8106b2c:	4620      	mov	r0, r4
 8106b2e:	f7ff fb6d 	bl	810620c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106b32:	2320      	movs	r3, #32
 8106b34:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8106b38:	f884 5084 	strb.w	r5, [r4, #132]	@ 0x84
        return HAL_TIMEOUT;
 8106b3c:	2003      	movs	r0, #3
 8106b3e:	e7ed      	b.n	8106b1c <UART_WaitOnFlagUntilTimeout+0x64>

08106b40 <UART_CheckIdleState>:
{
 8106b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8106b42:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106b44:	2600      	movs	r6, #0
 8106b46:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8106b4a:	f7fb fd6b 	bl	8102624 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106b4e:	6823      	ldr	r3, [r4, #0]
 8106b50:	681b      	ldr	r3, [r3, #0]
 8106b52:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8106b54:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106b56:	d51c      	bpl.n	8106b92 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8106b5c:	9300      	str	r3, [sp, #0]
 8106b5e:	4632      	mov	r2, r6
 8106b60:	4603      	mov	r3, r0
 8106b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8106b66:	4620      	mov	r0, r4
 8106b68:	f7ff ffa6 	bl	8106ab8 <UART_WaitOnFlagUntilTimeout>
 8106b6c:	b188      	cbz	r0, 8106b92 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8106b6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106b70:	e852 3f00 	ldrex	r3, [r2]
 8106b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106b78:	e842 3100 	strex	r1, r3, [r2]
 8106b7c:	2900      	cmp	r1, #0
 8106b7e:	d1f6      	bne.n	8106b6e <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8106b80:	2320      	movs	r3, #32
 8106b82:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8106b86:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8106b88:	2300      	movs	r3, #0
 8106b8a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8106b8e:	b002      	add	sp, #8
 8106b90:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106b92:	6823      	ldr	r3, [r4, #0]
 8106b94:	681b      	ldr	r3, [r3, #0]
 8106b96:	075b      	lsls	r3, r3, #29
 8106b98:	d524      	bpl.n	8106be4 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106b9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8106b9e:	9300      	str	r3, [sp, #0]
 8106ba0:	2200      	movs	r2, #0
 8106ba2:	462b      	mov	r3, r5
 8106ba4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8106ba8:	4620      	mov	r0, r4
 8106baa:	f7ff ff85 	bl	8106ab8 <UART_WaitOnFlagUntilTimeout>
 8106bae:	b1c8      	cbz	r0, 8106be4 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106bb0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106bb2:	e852 3f00 	ldrex	r3, [r2]
 8106bb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106bba:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8106bbe:	6822      	ldr	r2, [r4, #0]
 8106bc0:	2900      	cmp	r1, #0
 8106bc2:	d1f5      	bne.n	8106bb0 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106bc4:	f102 0308 	add.w	r3, r2, #8
 8106bc8:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106bcc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106bd0:	f102 0008 	add.w	r0, r2, #8
 8106bd4:	e840 3100 	strex	r1, r3, [r0]
 8106bd8:	2900      	cmp	r1, #0
 8106bda:	d1f3      	bne.n	8106bc4 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8106bdc:	2320      	movs	r3, #32
 8106bde:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8106be2:	e7d0      	b.n	8106b86 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 8106be4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106be6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8106be8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8106bec:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106bf0:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8106bf2:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8106bf4:	e7c8      	b.n	8106b88 <UART_CheckIdleState+0x48>

08106bf6 <HAL_UART_Init>:
{
 8106bf6:	b510      	push	{r4, lr}
  if (huart == NULL)
 8106bf8:	4604      	mov	r4, r0
 8106bfa:	b350      	cbz	r0, 8106c52 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8106bfc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8106c00:	b91b      	cbnz	r3, 8106c0a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8106c02:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8106c06:	f7fb fb9b 	bl	8102340 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8106c0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8106c0c:	2324      	movs	r3, #36	@ 0x24
 8106c0e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8106c12:	6813      	ldr	r3, [r2, #0]
 8106c14:	f023 0301 	bic.w	r3, r3, #1
 8106c18:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106c1a:	4620      	mov	r0, r4
 8106c1c:	f7ff fd62 	bl	81066e4 <UART_SetConfig>
 8106c20:	2801      	cmp	r0, #1
 8106c22:	d016      	beq.n	8106c52 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106c24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8106c26:	b113      	cbz	r3, 8106c2e <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8106c28:	4620      	mov	r0, r4
 8106c2a:	f7ff fef1 	bl	8106a10 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106c2e:	6823      	ldr	r3, [r4, #0]
 8106c30:	685a      	ldr	r2, [r3, #4]
 8106c32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8106c36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106c38:	689a      	ldr	r2, [r3, #8]
 8106c3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8106c3e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8106c40:	681a      	ldr	r2, [r3, #0]
 8106c42:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8106c46:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8106c48:	601a      	str	r2, [r3, #0]
}
 8106c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8106c4e:	f7ff bf77 	b.w	8106b40 <UART_CheckIdleState>
}
 8106c52:	2001      	movs	r0, #1
 8106c54:	bd10      	pop	{r4, pc}
	...

08106c58 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106c58:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 8106c5a:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106c5c:	b92b      	cbnz	r3, 8106c6a <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8106c5e:	2301      	movs	r3, #1
 8106c60:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8106c64:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106c68:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106c6a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106c6c:	4d09      	ldr	r5, [pc, #36]	@ (8106c94 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106c6e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106c70:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8106c72:	4c09      	ldr	r4, [pc, #36]	@ (8106c98 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106c74:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106c76:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106c7a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8106c7c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106c7e:	011b      	lsls	r3, r3, #4
 8106c80:	fbb3 f3f1 	udiv	r3, r3, r1
 8106c84:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106c88:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8106c8a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106c8c:	011b      	lsls	r3, r3, #4
 8106c8e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8106c92:	e7e7      	b.n	8106c64 <UARTEx_SetNbDataToProcess+0xc>
 8106c94:	0810f7a8 	.word	0x0810f7a8
 8106c98:	0810f7a0 	.word	0x0810f7a0

08106c9c <HAL_UARTEx_WakeupCallback>:
}
 8106c9c:	4770      	bx	lr

08106c9e <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8106c9e:	4770      	bx	lr

08106ca0 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8106ca0:	4770      	bx	lr

08106ca2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8106ca2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8106ca6:	2b01      	cmp	r3, #1
 8106ca8:	d014      	beq.n	8106cd4 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106caa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8106cac:	2324      	movs	r3, #36	@ 0x24
 8106cae:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106cb2:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8106cb4:	6813      	ldr	r3, [r2, #0]
 8106cb6:	f023 0301 	bic.w	r3, r3, #1
 8106cba:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106cbc:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106cc0:	2300      	movs	r3, #0
 8106cc2:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106cc4:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8106cc6:	2220      	movs	r2, #32
 8106cc8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8106ccc:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8106cd0:	4618      	mov	r0, r3
 8106cd2:	4770      	bx	lr
  __HAL_LOCK(huart);
 8106cd4:	2002      	movs	r0, #2
}
 8106cd6:	4770      	bx	lr

08106cd8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8106cd8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8106cda:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8106cde:	2b01      	cmp	r3, #1
{
 8106ce0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8106ce2:	d017      	beq.n	8106d14 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106ce4:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8106ce6:	2324      	movs	r3, #36	@ 0x24
 8106ce8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106cec:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8106cee:	682b      	ldr	r3, [r5, #0]
 8106cf0:	f023 0301 	bic.w	r3, r3, #1
 8106cf4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106cf6:	68ab      	ldr	r3, [r5, #8]
 8106cf8:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8106cfc:	4319      	orrs	r1, r3
 8106cfe:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8106d00:	f7ff ffaa 	bl	8106c58 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8106d04:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106d06:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8106d08:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8106d0c:	2000      	movs	r0, #0
 8106d0e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8106d12:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8106d14:	2002      	movs	r0, #2
 8106d16:	e7fc      	b.n	8106d12 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

08106d18 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8106d18:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8106d1a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8106d1e:	2b01      	cmp	r3, #1
{
 8106d20:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8106d22:	d017      	beq.n	8106d54 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106d24:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8106d26:	2324      	movs	r3, #36	@ 0x24
 8106d28:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106d2c:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8106d2e:	682b      	ldr	r3, [r5, #0]
 8106d30:	f023 0301 	bic.w	r3, r3, #1
 8106d34:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106d36:	68ab      	ldr	r3, [r5, #8]
 8106d38:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8106d3c:	4319      	orrs	r1, r3
 8106d3e:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8106d40:	f7ff ff8a 	bl	8106c58 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8106d44:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106d46:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8106d48:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8106d4c:	2000      	movs	r0, #0
 8106d4e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8106d52:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8106d54:	2002      	movs	r0, #2
 8106d56:	e7fc      	b.n	8106d52 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

08106d58 <ai_ann_756_get_error>:
}

AI_API_ENTRY
ai_error ai_ann_756_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8106d58:	f001 bbe2 	b.w	8108520 <ai_platform_network_get_error>

08106d5c <ai_ann_756_create>:
}

AI_API_ENTRY
ai_error ai_ann_756_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8106d5c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8106d5e:	2305      	movs	r3, #5
 8106d60:	2200      	movs	r2, #0
 8106d62:	e9cd 3200 	strd	r3, r2, [sp]
 8106d66:	4a03      	ldr	r2, [pc, #12]	@ (8106d74 <ai_ann_756_create+0x18>)
 8106d68:	2301      	movs	r3, #1
 8106d6a:	f001 fdf3 	bl	8108954 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8106d6e:	b003      	add	sp, #12
 8106d70:	f85d fb04 	ldr.w	pc, [sp], #4
 8106d74:	10000074 	.word	0x10000074

08106d78 <ai_ann_756_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_756_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8106d78:	b910      	cbnz	r0, 8106d80 <ai_ann_756_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8106d7a:	4802      	ldr	r0, [pc, #8]	@ (8106d84 <ai_ann_756_inputs_get+0xc>)
 8106d7c:	4b02      	ldr	r3, [pc, #8]	@ (8106d88 <ai_ann_756_inputs_get+0x10>)
 8106d7e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8106d80:	f001 bc42 	b.w	8108608 <ai_platform_inputs_get>
 8106d84:	10000074 	.word	0x10000074
 8106d88:	a1c00100 	.word	0xa1c00100

08106d8c <ai_ann_756_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_ann_756_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8106d8c:	b910      	cbnz	r0, 8106d94 <ai_ann_756_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8106d8e:	4802      	ldr	r0, [pc, #8]	@ (8106d98 <ai_ann_756_outputs_get+0xc>)
 8106d90:	4b02      	ldr	r3, [pc, #8]	@ (8106d9c <ai_ann_756_outputs_get+0x10>)
 8106d92:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8106d94:	f001 bd0e 	b.w	81087b4 <ai_platform_outputs_get>
 8106d98:	10000074 	.word	0x10000074
 8106d9c:	a1c00100 	.word	0xa1c00100

08106da0 <ai_ann_756_init>:
}

AI_API_ENTRY
ai_bool ai_ann_756_init(
  ai_handle network, const ai_network_params* params)
{
 8106da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106da4:	4607      	mov	r7, r0
 8106da6:	4688      	mov	r8, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8106da8:	f001 feaa 	bl	8108b00 <ai_platform_network_init>
  if (!net_ctx) return false;
 8106dac:	4604      	mov	r4, r0
 8106dae:	2800      	cmp	r0, #0
 8106db0:	f000 80ac 	beq.w	8106f0c <ai_ann_756_init+0x16c>
  if (ai_platform_get_weights_map(g_ann_756_weights_map, 1, params)) {
 8106db4:	4e5c      	ldr	r6, [pc, #368]	@ (8106f28 <ai_ann_756_init+0x188>)
 8106db6:	4642      	mov	r2, r8
 8106db8:	2101      	movs	r1, #1
 8106dba:	4630      	mov	r0, r6
 8106dbc:	f001 fae6 	bl	810838c <ai_platform_get_weights_map>
 8106dc0:	4605      	mov	r5, r0
 8106dc2:	2800      	cmp	r0, #0
 8106dc4:	f000 80a4 	beq.w	8106f10 <ai_ann_756_init+0x170>
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8106dc8:	4a58      	ldr	r2, [pc, #352]	@ (8106f2c <ai_ann_756_init+0x18c>)
 8106dca:	6813      	ldr	r3, [r2, #0]
 8106dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8106dd0:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 64);
 8106dd2:	6833      	ldr	r3, [r6, #0]
 8106dd4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
    gemm_0_weights_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 0);
 8106dd8:	e9c2 1302 	strd	r1, r3, [r2, #8]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8106ddc:	4a54      	ldr	r2, [pc, #336]	@ (8106f30 <ai_ann_756_init+0x190>)
 8106dde:	6811      	ldr	r1, [r2, #0]
 8106de0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8106de4:	6011      	str	r1, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_ann_756_weights_map[0] + 285832);
 8106de6:	f503 218b 	add.w	r1, r3, #284672	@ 0x45800
 8106dea:	f501 6191 	add.w	r1, r1, #1160	@ 0x488
    gemm_0_bias_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 285832);
 8106dee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8106df2:	4a50      	ldr	r2, [pc, #320]	@ (8106f34 <ai_ann_756_init+0x194>)
 8106df4:	6811      	ldr	r1, [r2, #0]
 8106df6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8106dfa:	6011      	str	r1, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 288920);
 8106dfc:	f503 218d 	add.w	r1, r3, #288768	@ 0x46800
 8106e00:	f101 0098 	add.w	r0, r1, #152	@ 0x98
    gemm_1_weights_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 288856);
 8106e04:	3158      	adds	r1, #88	@ 0x58
    gemm_1_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 288920);
 8106e06:	6090      	str	r0, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 288856);
 8106e08:	60d1      	str	r1, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e0a:	4a4b      	ldr	r2, [pc, #300]	@ (8106f38 <ai_ann_756_init+0x198>)
 8106e0c:	6811      	ldr	r1, [r2, #0]
 8106e0e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8106e12:	6011      	str	r1, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_ann_756_weights_map[0] + 482456);
 8106e14:	f503 21eb 	add.w	r1, r3, #481280	@ 0x75800
 8106e18:	f501 6193 	add.w	r1, r1, #1176	@ 0x498
    gemm_1_bias_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 482456);
 8106e1c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8106e20:	4a46      	ldr	r2, [pc, #280]	@ (8106f3c <ai_ann_756_init+0x19c>)
 8106e22:	6811      	ldr	r1, [r2, #0]
 8106e24:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8106e28:	6011      	str	r1, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 484568);
 8106e2a:	f503 21ec 	add.w	r1, r3, #483328	@ 0x76000
 8106e2e:	f501 609b 	add.w	r0, r1, #1240	@ 0x4d8
    gemm_2_weights_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 484504);
 8106e32:	f501 6193 	add.w	r1, r1, #1176	@ 0x498
 8106e36:	60d1      	str	r1, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e38:	4941      	ldr	r1, [pc, #260]	@ (8106f40 <ai_ann_756_init+0x1a0>)
    gemm_2_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 484568);
 8106e3a:	6090      	str	r0, [r2, #8]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e3c:	680a      	ldr	r2, [r1, #0]
 8106e3e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8106e42:	600a      	str	r2, [r1, #0]
    gemm_2_bias_array.data = AI_PTR(g_ann_756_weights_map[0] + 550104);
 8106e44:	f503 2206 	add.w	r2, r3, #548864	@ 0x86000
 8106e48:	f502 609b 	add.w	r0, r2, #1240	@ 0x4d8
    gemm_2_bias_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 550104);
 8106e4c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8106e50:	493c      	ldr	r1, [pc, #240]	@ (8106f44 <ai_ann_756_init+0x1a4>)
 8106e52:	6808      	ldr	r0, [r1, #0]
 8106e54:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8106e58:	6008      	str	r0, [r1, #0]
    gemm_3_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 551192);
 8106e5a:	f602 1018 	addw	r0, r2, #2328	@ 0x918
    gemm_3_weights_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 551128);
 8106e5e:	f602 02d8 	addw	r2, r2, #2264	@ 0x8d8
 8106e62:	60ca      	str	r2, [r1, #12]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e64:	4a38      	ldr	r2, [pc, #224]	@ (8106f48 <ai_ann_756_init+0x1a8>)
    gemm_3_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 551192);
 8106e66:	6088      	str	r0, [r1, #8]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e68:	6811      	ldr	r1, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_ann_756_weights_map[0] + 567576);
 8106e6a:	f503 260a 	add.w	r6, r3, #565248	@ 0x8a000
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e6e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8106e72:	6011      	str	r1, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_ann_756_weights_map[0] + 567576);
 8106e74:	f606 1118 	addw	r1, r6, #2328	@ 0x918
    gemm_3_bias_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 567576);
 8106e78:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8106e7c:	4a33      	ldr	r2, [pc, #204]	@ (8106f4c <ai_ann_756_init+0x1ac>)
 8106e7e:	6811      	ldr	r1, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_ann_756_weights_map[0] + 568088);
 8106e80:	f606 3618 	addw	r6, r6, #2840	@ 0xb18
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8106e84:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8106e88:	6011      	str	r1, [r2, #0]
    gemm_4_weights_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 568088);
 8106e8a:	e9c2 6602 	strd	r6, r6, [r2, #8]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e8e:	4a30      	ldr	r2, [pc, #192]	@ (8106f50 <ai_ann_756_init+0x1b0>)
    gemm_4_bias_array.data = AI_PTR(g_ann_756_weights_map[0] + 574232);
 8106e90:	f503 230c 	add.w	r3, r3, #573440	@ 0x8c000
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e94:	6811      	ldr	r1, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_ann_756_weights_map[0] + 574232);
 8106e96:	f503 7346 	add.w	r3, r3, #792	@ 0x318
    gemm_4_bias_array.data_start = AI_PTR(g_ann_756_weights_map[0] + 574232);
 8106e9a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8106e9e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8106ea2:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_ann_756_activations_map, 1, params)) {
 8106ea4:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8106f78 <ai_ann_756_init+0x1d8>
 8106ea8:	4642      	mov	r2, r8
 8106eaa:	2101      	movs	r1, #1
 8106eac:	4648      	mov	r0, r9
 8106eae:	f001 fac1 	bl	8108434 <ai_platform_get_activations_map>
 8106eb2:	4606      	mov	r6, r0
 8106eb4:	b390      	cbz	r0, 8106f1c <ai_ann_756_init+0x17c>
    gemm_0_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106eb6:	f8d9 3000 	ldr.w	r3, [r9]
 8106eba:	4a26      	ldr	r2, [pc, #152]	@ (8106f54 <ai_ann_756_init+0x1b4>)
    gemm_0_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ebc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_0_nl_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ec0:	4a25      	ldr	r2, [pc, #148]	@ (8106f58 <ai_ann_756_init+0x1b8>)
    nl_0_nl_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ec2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_1_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 3024);
 8106ec6:	4a25      	ldr	r2, [pc, #148]	@ (8106f5c <ai_ann_756_init+0x1bc>)
 8106ec8:	f503 613d 	add.w	r1, r3, #3024	@ 0xbd0
    gemm_1_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 3024);
 8106ecc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_1_nl_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ed0:	4a23      	ldr	r2, [pc, #140]	@ (8106f60 <ai_ann_756_init+0x1c0>)
    nl_1_nl_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ed2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_2_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 2048);
 8106ed6:	4a23      	ldr	r2, [pc, #140]	@ (8106f64 <ai_ann_756_init+0x1c4>)
 8106ed8:	f503 6100 	add.w	r1, r3, #2048	@ 0x800
    gemm_2_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 2048);
 8106edc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_2_nl_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ee0:	4a21      	ldr	r2, [pc, #132]	@ (8106f68 <ai_ann_756_init+0x1c8>)
    nl_2_nl_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ee2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_3_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 1024);
 8106ee6:	4a21      	ldr	r2, [pc, #132]	@ (8106f6c <ai_ann_756_init+0x1cc>)
 8106ee8:	f503 6180 	add.w	r1, r3, #1024	@ 0x400
    gemm_3_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 1024);
 8106eec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_3_nl_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8106f70 <ai_ann_756_init+0x1d0>)
    nl_3_nl_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 0);
 8106ef2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_4_output_array.data = AI_PTR(g_ann_756_activations_map[0] + 512);
 8106ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8106f74 <ai_ann_756_init+0x1d4>)
 8106ef8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
    gemm_4_output_array.data_start = AI_PTR(g_ann_756_activations_map[0] + 512);
 8106efc:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= ann_756_configure_weights(net_ctx, params);
  ok &= ann_756_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8106f00:	4638      	mov	r0, r7
 8106f02:	f001 feeb 	bl	8108cdc <ai_platform_network_post_init>
 8106f06:	4030      	ands	r0, r6
 8106f08:	4005      	ands	r5, r0
 8106f0a:	b2e8      	uxtb	r0, r5

  return ok;
}
 8106f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8106f10:	2212      	movs	r2, #18
 8106f12:	2130      	movs	r1, #48	@ 0x30
 8106f14:	4620      	mov	r0, r4
 8106f16:	f001 fb71 	bl	81085fc <ai_platform_network_set_error>
  return false;
 8106f1a:	e7c3      	b.n	8106ea4 <ai_ann_756_init+0x104>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8106f1c:	2213      	movs	r2, #19
 8106f1e:	2130      	movs	r1, #48	@ 0x30
 8106f20:	4620      	mov	r0, r4
 8106f22:	f001 fb6b 	bl	81085fc <ai_platform_network_set_error>
  return false;
 8106f26:	e7eb      	b.n	8106f00 <ai_ann_756_init+0x160>
 8106f28:	10018be4 	.word	0x10018be4
 8106f2c:	10000b00 	.word	0x10000b00
 8106f30:	10000af0 	.word	0x10000af0
 8106f34:	10000ae0 	.word	0x10000ae0
 8106f38:	10000ad0 	.word	0x10000ad0
 8106f3c:	10000ac0 	.word	0x10000ac0
 8106f40:	10000ab0 	.word	0x10000ab0
 8106f44:	10000aa0 	.word	0x10000aa0
 8106f48:	10000a90 	.word	0x10000a90
 8106f4c:	10000a80 	.word	0x10000a80
 8106f50:	10000a70 	.word	0x10000a70
 8106f54:	10000a50 	.word	0x10000a50
 8106f58:	10000a40 	.word	0x10000a40
 8106f5c:	10000a30 	.word	0x10000a30
 8106f60:	10000a20 	.word	0x10000a20
 8106f64:	10000a10 	.word	0x10000a10
 8106f68:	10000a00 	.word	0x10000a00
 8106f6c:	100009f0 	.word	0x100009f0
 8106f70:	100009e0 	.word	0x100009e0
 8106f74:	100009d0 	.word	0x100009d0
 8106f78:	10018be8 	.word	0x10018be8

08106f7c <ai_ann_756_create_and_init>:
{
 8106f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8106f80:	4688      	mov	r8, r1
 8106f82:	b08f      	sub	sp, #60	@ 0x3c
    err = ai_ann_756_create(network, AI_ANN_756_DATA_CONFIG);
 8106f84:	2100      	movs	r1, #0
{
 8106f86:	4606      	mov	r6, r0
 8106f88:	4617      	mov	r7, r2
    err = ai_ann_756_create(network, AI_ANN_756_DATA_CONFIG);
 8106f8a:	f7ff fee7 	bl	8106d5c <ai_ann_756_create>
    if (err.type != AI_ERROR_NONE)
 8106f8e:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
    err = ai_ann_756_create(network, AI_ANN_756_DATA_CONFIG);
 8106f92:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 8106f94:	d107      	bne.n	8106fa6 <ai_ann_756_create_and_init+0x2a>
    if (ai_ann_756_data_params_get(&params) != true) {
 8106f96:	4668      	mov	r0, sp
 8106f98:	f000 f83a 	bl	8107010 <ai_ann_756_data_params_get>
 8106f9c:	b938      	cbnz	r0, 8106fae <ai_ann_756_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 8106f9e:	6830      	ldr	r0, [r6, #0]
 8106fa0:	f001 fabe 	bl	8108520 <ai_platform_network_get_error>
 8106fa4:	4604      	mov	r4, r0
}
 8106fa6:	4620      	mov	r0, r4
 8106fa8:	b00f      	add	sp, #60	@ 0x3c
 8106faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 8106fae:	f1b8 0f00 	cmp.w	r8, #0
 8106fb2:	d11a      	bne.n	8106fea <ai_ann_756_create_and_init+0x6e>
    if (weights) {
 8106fb4:	bb3f      	cbnz	r7, 8107006 <ai_ann_756_create_and_init+0x8a>
    if (ai_ann_756_init(*network, &params) != true) {
 8106fb6:	6830      	ldr	r0, [r6, #0]
 8106fb8:	4669      	mov	r1, sp
 8106fba:	f7ff fef1 	bl	8106da0 <ai_ann_756_init>
 8106fbe:	b928      	cbnz	r0, 8106fcc <ai_ann_756_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8106fc0:	6830      	ldr	r0, [r6, #0]
 8106fc2:	f001 faad 	bl	8108520 <ai_platform_network_get_error>
 8106fc6:	4604      	mov	r4, r0
 8106fc8:	fa5f f980 	uxtb.w	r9, r0
    return err;
 8106fcc:	f369 0407 	bfi	r4, r9, #0, #8
 8106fd0:	e7e9      	b.n	8106fa6 <ai_ann_756_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8106fd2:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8106fd6:	4629      	mov	r1, r5
 8106fd8:	a803      	add	r0, sp, #12
 8106fda:	f001 f9c3 	bl	8108364 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8106fde:	3501      	adds	r5, #1
 8106fe0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8106fe4:	42ab      	cmp	r3, r5
 8106fe6:	dcf4      	bgt.n	8106fd2 <ai_ann_756_create_and_init+0x56>
 8106fe8:	e7e4      	b.n	8106fb4 <ai_ann_756_create_and_init+0x38>
 8106fea:	464d      	mov	r5, r9
 8106fec:	e7f8      	b.n	8106fe0 <ai_ann_756_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8106fee:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8106ff2:	4629      	mov	r1, r5
 8106ff4:	a801      	add	r0, sp, #4
 8106ff6:	f001 f9b5 	bl	8108364 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8106ffa:	3501      	adds	r5, #1
 8106ffc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8107000:	42ab      	cmp	r3, r5
 8107002:	dcf4      	bgt.n	8106fee <ai_ann_756_create_and_init+0x72>
 8107004:	e7d7      	b.n	8106fb6 <ai_ann_756_create_and_init+0x3a>
 8107006:	2500      	movs	r5, #0
 8107008:	e7f8      	b.n	8106ffc <ai_ann_756_create_and_init+0x80>

0810700a <ai_ann_756_run>:

AI_API_ENTRY
ai_i32 ai_ann_756_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 810700a:	f001 beef 	b.w	8108dec <ai_platform_network_process>
	...

08107010 <ai_ann_756_data_params_get>:
 * @ingroup ann_756_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_ann_756_data_params_get(ai_network_params* params)
{
 8107010:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8107012:	4603      	mov	r3, r0
{
 8107014:	b085      	sub	sp, #20
  if (!params) return false;
 8107016:	b170      	cbz	r0, 8107036 <ai_ann_756_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8107018:	4c08      	ldr	r4, [pc, #32]	@ (810703c <ai_ann_756_data_params_get+0x2c>)
 810701a:	e894 0003 	ldmia.w	r4, {r0, r1}
 810701e:	466a      	mov	r2, sp
 8107020:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_756_DATA_ACTIVATIONS_COUNT, g_ann_756_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8107024:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8107028:	ad02      	add	r5, sp, #8
 810702a:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ANN_756_DATA_WEIGHTS_COUNT, g_ann_756_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 810702e:	4629      	mov	r1, r5
 8107030:	4618      	mov	r0, r3
 8107032:	f001 fa53 	bl	81084dc <ai_platform_bind_network_params>
}
 8107036:	b005      	add	sp, #20
 8107038:	bd30      	pop	{r4, r5, pc}
 810703a:	bf00      	nop
 810703c:	0810ef60 	.word	0x0810ef60

08107040 <acquire_and_process_data>:
  }

  return 0;
}

int acquire_and_process_data(ai_float data[AI_ANN_756_IN_1_SIZE], float mag_buffer[6][256]) {
 8107040:	b570      	push	{r4, r5, r6, lr}
 8107042:	3108      	adds	r1, #8

	int total_iters = 0;
 8107044:	2300      	movs	r3, #0
    for (int idx = 0; idx < 6; idx++) {

    	// Skip first two values in FFT data
    	// Are below 20k and add noise (not in training dataset)
        for (int j = 0; j < 126; j++) {
 8107046:	eb00 0483 	add.w	r4, r0, r3, lsl #2
int acquire_and_process_data(ai_float data[AI_ANN_756_IN_1_SIZE], float mag_buffer[6][256]) {
 810704a:	460a      	mov	r2, r1
        for (int j = 0; j < 126; j++) {
 810704c:	f501 75fc 	add.w	r5, r1, #504	@ 0x1f8
            data[total_iters] = mag_buffer[idx][j + 2];
 8107050:	f852 6b04 	ldr.w	r6, [r2], #4
 8107054:	f844 6b04 	str.w	r6, [r4], #4
        for (int j = 0; j < 126; j++) {
 8107058:	42aa      	cmp	r2, r5
 810705a:	d1f9      	bne.n	8107050 <acquire_and_process_data+0x10>
            total_iters++;
 810705c:	337e      	adds	r3, #126	@ 0x7e
    for (int idx = 0; idx < 6; idx++) {
 810705e:	f5b3 7f3d 	cmp.w	r3, #756	@ 0x2f4
 8107062:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8107066:	d1ee      	bne.n	8107046 <acquire_and_process_data+0x6>
        }
    }

    return 0;
}
 8107068:	2000      	movs	r0, #0
 810706a:	bd70      	pop	{r4, r5, r6, pc}

0810706c <post_process>:

int post_process(ai_float data[AI_ANN_756_OUT_1_SIZE])
{
 810706c:	b510      	push	{r4, lr}
 810706e:	2301      	movs	r3, #1
 8107070:	2400      	movs	r4, #0

    	  // For testing
          //predicted_region[idx] = data[idx];
    	  //printf("data[%d] = %f\r\n\n", idx, data[idx]);

          if (data[idx] == 1.0) {
 8107072:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8107076:	ecb0 7a01 	vldmia	r0!, {s14}
 810707a:	eeb4 7a67 	vcmp.f32	s14, s15
 810707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        	  curr_region = idx + 1;
 8107082:	bf08      	it	eq
 8107084:	b25c      	sxtbeq	r4, r3
      for (int idx = 0; idx < AI_ANN_756_OUT_1_SIZE; idx++) {
 8107086:	3301      	adds	r3, #1
 8107088:	2b0d      	cmp	r3, #13
 810708a:	d1f4      	bne.n	8107076 <post_process+0xa>
          }
      }

      prev_region = IPCGetPredictedRegion();
 810708c:	f7fa ff2e 	bl	8101eec <IPCGetPredictedRegion>

      // Update IPC if predicted region has changed
      if( prev_region != curr_region) IPCSetPredictedRegion(curr_region);
 8107090:	b240      	sxtb	r0, r0
 8107092:	4284      	cmp	r4, r0
 8107094:	d002      	beq.n	810709c <post_process+0x30>
 8107096:	4620      	mov	r0, r4
 8107098:	f7fa ff30 	bl	8101efc <IPCSetPredictedRegion>

      return 0;
}
 810709c:	2000      	movs	r0, #0
 810709e:	bd10      	pop	{r4, pc}

081070a0 <MX_X_CUBE_AI_Init>:


/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 81070a0:	b570      	push	{r4, r5, r6, lr}
  err = ai_ann_756_create_and_init(&ann_756, act_addr, NULL);
 81070a2:	4c16      	ldr	r4, [pc, #88]	@ (81070fc <MX_X_CUBE_AI_Init+0x5c>)

  printf("\r\nMX_X_CUBE_AI_Init\r\n");
 81070a4:	4816      	ldr	r0, [pc, #88]	@ (8107100 <MX_X_CUBE_AI_Init+0x60>)
 81070a6:	f004 f91f 	bl	810b2e8 <puts>
  err = ai_ann_756_create_and_init(&ann_756, act_addr, NULL);
 81070aa:	4916      	ldr	r1, [pc, #88]	@ (8107104 <MX_X_CUBE_AI_Init+0x64>)
 81070ac:	2200      	movs	r2, #0
 81070ae:	4620      	mov	r0, r4
 81070b0:	f7ff ff64 	bl	8106f7c <ai_ann_756_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 81070b4:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 81070b8:	d00c      	beq.n	81070d4 <MX_X_CUBE_AI_Init+0x34>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 81070ba:	0a03      	lsrs	r3, r0, #8
 81070bc:	4912      	ldr	r1, [pc, #72]	@ (8107108 <MX_X_CUBE_AI_Init+0x68>)
 81070be:	4813      	ldr	r0, [pc, #76]	@ (810710c <MX_X_CUBE_AI_Init+0x6c>)
 81070c0:	462a      	mov	r2, r5
 81070c2:	f004 f8a9 	bl	810b218 <iprintf>

  ai_boostrap(data_activations0);
  printf("ann_756 returns  %d\r\n\n", ((uint8_t*) ann_756)[0]);
 81070c6:	6823      	ldr	r3, [r4, #0]
 81070c8:	4811      	ldr	r0, [pc, #68]	@ (8107110 <MX_X_CUBE_AI_Init+0x70>)
 81070ca:	7819      	ldrb	r1, [r3, #0]

}
 81070cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  printf("ann_756 returns  %d\r\n\n", ((uint8_t*) ann_756)[0]);
 81070d0:	f004 b8a2 	b.w	810b218 <iprintf>
  ai_input = ai_ann_756_inputs_get(ann_756, NULL);
 81070d4:	4629      	mov	r1, r5
 81070d6:	6820      	ldr	r0, [r4, #0]
 81070d8:	4e0e      	ldr	r6, [pc, #56]	@ (8107114 <MX_X_CUBE_AI_Init+0x74>)
 81070da:	f7ff fe4d 	bl	8106d78 <ai_ann_756_inputs_get>
  ai_output = ai_ann_756_outputs_get(ann_756, NULL);
 81070de:	4629      	mov	r1, r5
  ai_input = ai_ann_756_inputs_get(ann_756, NULL);
 81070e0:	6030      	str	r0, [r6, #0]
  ai_output = ai_ann_756_outputs_get(ann_756, NULL);
 81070e2:	6820      	ldr	r0, [r4, #0]
 81070e4:	f7ff fe52 	bl	8106d8c <ai_ann_756_outputs_get>
 81070e8:	4b0b      	ldr	r3, [pc, #44]	@ (8107118 <MX_X_CUBE_AI_Init+0x78>)
	  ai_input[idx].data = data_ins[idx];
 81070ea:	4a0c      	ldr	r2, [pc, #48]	@ (810711c <MX_X_CUBE_AI_Init+0x7c>)
  ai_output = ai_ann_756_outputs_get(ann_756, NULL);
 81070ec:	6018      	str	r0, [r3, #0]
	  ai_input[idx].data = data_ins[idx];
 81070ee:	6833      	ldr	r3, [r6, #0]
 81070f0:	6812      	ldr	r2, [r2, #0]
 81070f2:	605a      	str	r2, [r3, #4]
	ai_output[idx].data = data_outs[idx];
 81070f4:	4b0a      	ldr	r3, [pc, #40]	@ (8107120 <MX_X_CUBE_AI_Init+0x80>)
 81070f6:	681b      	ldr	r3, [r3, #0]
 81070f8:	6043      	str	r3, [r0, #4]
  for (int idx=0; idx < AI_ANN_756_OUT_NUM; idx++) {
 81070fa:	e7e4      	b.n	81070c6 <MX_X_CUBE_AI_Init+0x26>
 81070fc:	10018bf4 	.word	0x10018bf4
 8107100:	0819bb48 	.word	0x0819bb48
 8107104:	10000b68 	.word	0x10000b68
 8107108:	0819bb5d 	.word	0x0819bb5d
 810710c:	0819bb78 	.word	0x0819bb78
 8107110:	0819bbaa 	.word	0x0819bbaa
 8107114:	10018bf0 	.word	0x10018bf0
 8107118:	10018bec 	.word	0x10018bec
 810711c:	10000b70 	.word	0x10000b70
 8107120:	10000b6c 	.word	0x10000b6c

08107124 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(float mag_buffer[6][256])
{
 8107124:	b570      	push	{r4, r5, r6, lr}
  int res = -1;

  printf("\nMX_X_CUBE_AI_Process\r\n\n");

  //printf("ann_756 %d\r\n", ((uint8_t*) ann_756)[0]);
  if (ann_756)
 8107126:	4d16      	ldr	r5, [pc, #88]	@ (8107180 <MX_X_CUBE_AI_Process+0x5c>)
{
 8107128:	4604      	mov	r4, r0
  printf("\nMX_X_CUBE_AI_Process\r\n\n");
 810712a:	4816      	ldr	r0, [pc, #88]	@ (8107184 <MX_X_CUBE_AI_Process+0x60>)
 810712c:	f004 f8dc 	bl	810b2e8 <puts>
  if (ann_756)
 8107130:	682e      	ldr	r6, [r5, #0]
 8107132:	b18e      	cbz	r6, 8107158 <MX_X_CUBE_AI_Process+0x34>
  {

    /* 1 - acquire and pre-process input data */
    res = acquire_and_process_data(data_in_1,mag_buffer);
 8107134:	4814      	ldr	r0, [pc, #80]	@ (8107188 <MX_X_CUBE_AI_Process+0x64>)
 8107136:	4621      	mov	r1, r4
 8107138:	f7ff ff82 	bl	8107040 <acquire_and_process_data>

    /* 2 - process the data - call inference engine */
    if (res == 0 ) res = ai_run();
 810713c:	b960      	cbnz	r0, 8107158 <MX_X_CUBE_AI_Process+0x34>
  batch = ai_ann_756_run(ann_756, ai_input, ai_output);
 810713e:	4b13      	ldr	r3, [pc, #76]	@ (810718c <MX_X_CUBE_AI_Process+0x68>)
 8107140:	681a      	ldr	r2, [r3, #0]
 8107142:	4b13      	ldr	r3, [pc, #76]	@ (8107190 <MX_X_CUBE_AI_Process+0x6c>)
 8107144:	4630      	mov	r0, r6
 8107146:	6819      	ldr	r1, [r3, #0]
 8107148:	f7ff ff5f 	bl	810700a <ai_ann_756_run>
  if (batch != 1) {
 810714c:	2801      	cmp	r0, #1
 810714e:	d10b      	bne.n	8107168 <MX_X_CUBE_AI_Process+0x44>

    /* 3- post-process the predictions */
    if (res == 0) res = post_process(data_out_1);
 8107150:	4810      	ldr	r0, [pc, #64]	@ (8107194 <MX_X_CUBE_AI_Process+0x70>)
 8107152:	f7ff ff8b 	bl	810706c <post_process>

  }

  if (res) {
 8107156:	b188      	cbz	r0, 810717c <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
    ai_log_err(err, "Process has FAILED");
  }
}
 8107158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 810715c:	490e      	ldr	r1, [pc, #56]	@ (8107198 <MX_X_CUBE_AI_Process+0x74>)
 810715e:	480f      	ldr	r0, [pc, #60]	@ (810719c <MX_X_CUBE_AI_Process+0x78>)
 8107160:	2310      	movs	r3, #16
 8107162:	2211      	movs	r2, #17
 8107164:	f004 b858 	b.w	810b218 <iprintf>
    ai_log_err(ai_ann_756_get_error(ann_756),
 8107168:	6828      	ldr	r0, [r5, #0]
 810716a:	f7ff fdf5 	bl	8106d58 <ai_ann_756_get_error>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 810716e:	490c      	ldr	r1, [pc, #48]	@ (81071a0 <MX_X_CUBE_AI_Process+0x7c>)
 8107170:	0a03      	lsrs	r3, r0, #8
 8107172:	b2c2      	uxtb	r2, r0
 8107174:	4809      	ldr	r0, [pc, #36]	@ (810719c <MX_X_CUBE_AI_Process+0x78>)
 8107176:	f004 f84f 	bl	810b218 <iprintf>
    if (res == 0) res = post_process(data_out_1);
 810717a:	e7ed      	b.n	8107158 <MX_X_CUBE_AI_Process+0x34>
}
 810717c:	bd70      	pop	{r4, r5, r6, pc}
 810717e:	bf00      	nop
 8107180:	10018bf4 	.word	0x10018bf4
 8107184:	0819bbc1 	.word	0x0819bbc1
 8107188:	1001a000 	.word	0x1001a000
 810718c:	10018bec 	.word	0x10018bec
 8107190:	10018bf0 	.word	0x10018bf0
 8107194:	10019fd0 	.word	0x10019fd0
 8107198:	0819bbe8 	.word	0x0819bbe8
 810719c:	0819bb78 	.word	0x0819bb78
 81071a0:	0819bbd9 	.word	0x0819bbd9

081071a4 <arm_rfft_32_fast_init_f32>:
 81071a4:	b180      	cbz	r0, 81071c8 <arm_rfft_32_fast_init_f32+0x24>
 81071a6:	4b0a      	ldr	r3, [pc, #40]	@ (81071d0 <arm_rfft_32_fast_init_f32+0x2c>)
 81071a8:	4a0a      	ldr	r2, [pc, #40]	@ (81071d4 <arm_rfft_32_fast_init_f32+0x30>)
 81071aa:	8999      	ldrh	r1, [r3, #12]
 81071ac:	b430      	push	{r4, r5}
 81071ae:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81071b2:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81071b6:	8181      	strh	r1, [r0, #12]
 81071b8:	2320      	movs	r3, #32
 81071ba:	2110      	movs	r1, #16
 81071bc:	8001      	strh	r1, [r0, #0]
 81071be:	8203      	strh	r3, [r0, #16]
 81071c0:	6142      	str	r2, [r0, #20]
 81071c2:	bc30      	pop	{r4, r5}
 81071c4:	2000      	movs	r0, #0
 81071c6:	4770      	bx	lr
 81071c8:	f04f 30ff 	mov.w	r0, #4294967295
 81071cc:	4770      	bx	lr
 81071ce:	bf00      	nop
 81071d0:	0819f174 	.word	0x0819f174
 81071d4:	081aa754 	.word	0x081aa754

081071d8 <arm_rfft_64_fast_init_f32>:
 81071d8:	b180      	cbz	r0, 81071fc <arm_rfft_64_fast_init_f32+0x24>
 81071da:	4b0a      	ldr	r3, [pc, #40]	@ (8107204 <arm_rfft_64_fast_init_f32+0x2c>)
 81071dc:	4a0a      	ldr	r2, [pc, #40]	@ (8107208 <arm_rfft_64_fast_init_f32+0x30>)
 81071de:	8999      	ldrh	r1, [r3, #12]
 81071e0:	b430      	push	{r4, r5}
 81071e2:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81071e6:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81071ea:	8181      	strh	r1, [r0, #12]
 81071ec:	2340      	movs	r3, #64	@ 0x40
 81071ee:	2120      	movs	r1, #32
 81071f0:	8001      	strh	r1, [r0, #0]
 81071f2:	8203      	strh	r3, [r0, #16]
 81071f4:	6142      	str	r2, [r0, #20]
 81071f6:	bc30      	pop	{r4, r5}
 81071f8:	2000      	movs	r0, #0
 81071fa:	4770      	bx	lr
 81071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8107200:	4770      	bx	lr
 8107202:	bf00      	nop
 8107204:	0819f1a4 	.word	0x0819f1a4
 8107208:	081aefd4 	.word	0x081aefd4

0810720c <arm_rfft_128_fast_init_f32>:
 810720c:	b180      	cbz	r0, 8107230 <arm_rfft_128_fast_init_f32+0x24>
 810720e:	4b0a      	ldr	r3, [pc, #40]	@ (8107238 <arm_rfft_128_fast_init_f32+0x2c>)
 8107210:	4a0a      	ldr	r2, [pc, #40]	@ (810723c <arm_rfft_128_fast_init_f32+0x30>)
 8107212:	8999      	ldrh	r1, [r3, #12]
 8107214:	b430      	push	{r4, r5}
 8107216:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810721a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810721e:	8181      	strh	r1, [r0, #12]
 8107220:	2380      	movs	r3, #128	@ 0x80
 8107222:	2140      	movs	r1, #64	@ 0x40
 8107224:	8001      	strh	r1, [r0, #0]
 8107226:	8203      	strh	r3, [r0, #16]
 8107228:	6142      	str	r2, [r0, #20]
 810722a:	bc30      	pop	{r4, r5}
 810722c:	2000      	movs	r0, #0
 810722e:	4770      	bx	lr
 8107230:	f04f 30ff 	mov.w	r0, #4294967295
 8107234:	4770      	bx	lr
 8107236:	bf00      	nop
 8107238:	0819f1c4 	.word	0x0819f1c4
 810723c:	081a8154 	.word	0x081a8154

08107240 <arm_rfft_256_fast_init_f32>:
 8107240:	b188      	cbz	r0, 8107266 <arm_rfft_256_fast_init_f32+0x26>
 8107242:	4b0a      	ldr	r3, [pc, #40]	@ (810726c <arm_rfft_256_fast_init_f32+0x2c>)
 8107244:	4a0a      	ldr	r2, [pc, #40]	@ (8107270 <arm_rfft_256_fast_init_f32+0x30>)
 8107246:	8999      	ldrh	r1, [r3, #12]
 8107248:	b430      	push	{r4, r5}
 810724a:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810724e:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107252:	8181      	strh	r1, [r0, #12]
 8107254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107258:	2180      	movs	r1, #128	@ 0x80
 810725a:	8001      	strh	r1, [r0, #0]
 810725c:	8203      	strh	r3, [r0, #16]
 810725e:	6142      	str	r2, [r0, #20]
 8107260:	bc30      	pop	{r4, r5}
 8107262:	2000      	movs	r0, #0
 8107264:	4770      	bx	lr
 8107266:	f04f 30ff 	mov.w	r0, #4294967295
 810726a:	4770      	bx	lr
 810726c:	0819f164 	.word	0x0819f164
 8107270:	081aa354 	.word	0x081aa354

08107274 <arm_rfft_512_fast_init_f32>:
 8107274:	b190      	cbz	r0, 810729c <arm_rfft_512_fast_init_f32+0x28>
 8107276:	4b0b      	ldr	r3, [pc, #44]	@ (81072a4 <arm_rfft_512_fast_init_f32+0x30>)
 8107278:	4a0b      	ldr	r2, [pc, #44]	@ (81072a8 <arm_rfft_512_fast_init_f32+0x34>)
 810727a:	8999      	ldrh	r1, [r3, #12]
 810727c:	b430      	push	{r4, r5}
 810727e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107282:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107286:	8181      	strh	r1, [r0, #12]
 8107288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810728c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8107290:	8001      	strh	r1, [r0, #0]
 8107292:	8203      	strh	r3, [r0, #16]
 8107294:	6142      	str	r2, [r0, #20]
 8107296:	bc30      	pop	{r4, r5}
 8107298:	2000      	movs	r0, #0
 810729a:	4770      	bx	lr
 810729c:	f04f 30ff 	mov.w	r0, #4294967295
 81072a0:	4770      	bx	lr
 81072a2:	bf00      	nop
 81072a4:	0819f194 	.word	0x0819f194
 81072a8:	081ae7d4 	.word	0x081ae7d4

081072ac <arm_rfft_1024_fast_init_f32>:
 81072ac:	b190      	cbz	r0, 81072d4 <arm_rfft_1024_fast_init_f32+0x28>
 81072ae:	4b0b      	ldr	r3, [pc, #44]	@ (81072dc <arm_rfft_1024_fast_init_f32+0x30>)
 81072b0:	4a0b      	ldr	r2, [pc, #44]	@ (81072e0 <arm_rfft_1024_fast_init_f32+0x34>)
 81072b2:	8999      	ldrh	r1, [r3, #12]
 81072b4:	b430      	push	{r4, r5}
 81072b6:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81072ba:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81072be:	8181      	strh	r1, [r0, #12]
 81072c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81072c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81072c8:	8001      	strh	r1, [r0, #0]
 81072ca:	8203      	strh	r3, [r0, #16]
 81072cc:	6142      	str	r2, [r0, #20]
 81072ce:	bc30      	pop	{r4, r5}
 81072d0:	2000      	movs	r0, #0
 81072d2:	4770      	bx	lr
 81072d4:	f04f 30ff 	mov.w	r0, #4294967295
 81072d8:	4770      	bx	lr
 81072da:	bf00      	nop
 81072dc:	0819f1b4 	.word	0x0819f1b4
 81072e0:	081a7154 	.word	0x081a7154

081072e4 <arm_rfft_2048_fast_init_f32>:
 81072e4:	b190      	cbz	r0, 810730c <arm_rfft_2048_fast_init_f32+0x28>
 81072e6:	4b0b      	ldr	r3, [pc, #44]	@ (8107314 <arm_rfft_2048_fast_init_f32+0x30>)
 81072e8:	4a0b      	ldr	r2, [pc, #44]	@ (8107318 <arm_rfft_2048_fast_init_f32+0x34>)
 81072ea:	8999      	ldrh	r1, [r3, #12]
 81072ec:	b430      	push	{r4, r5}
 81072ee:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 81072f2:	e9c0 4501 	strd	r4, r5, [r0, #4]
 81072f6:	8181      	strh	r1, [r0, #12]
 81072f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81072fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8107300:	8001      	strh	r1, [r0, #0]
 8107302:	8203      	strh	r3, [r0, #16]
 8107304:	6142      	str	r2, [r0, #20]
 8107306:	bc30      	pop	{r4, r5}
 8107308:	2000      	movs	r0, #0
 810730a:	4770      	bx	lr
 810730c:	f04f 30ff 	mov.w	r0, #4294967295
 8107310:	4770      	bx	lr
 8107312:	bf00      	nop
 8107314:	0819f154 	.word	0x0819f154
 8107318:	081a8354 	.word	0x081a8354

0810731c <arm_rfft_4096_fast_init_f32>:
 810731c:	b190      	cbz	r0, 8107344 <arm_rfft_4096_fast_init_f32+0x28>
 810731e:	4b0b      	ldr	r3, [pc, #44]	@ (810734c <arm_rfft_4096_fast_init_f32+0x30>)
 8107320:	4a0b      	ldr	r2, [pc, #44]	@ (8107350 <arm_rfft_4096_fast_init_f32+0x34>)
 8107322:	8999      	ldrh	r1, [r3, #12]
 8107324:	b430      	push	{r4, r5}
 8107326:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 810732a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 810732e:	8181      	strh	r1, [r0, #12]
 8107330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107334:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8107338:	8001      	strh	r1, [r0, #0]
 810733a:	8203      	strh	r3, [r0, #16]
 810733c:	6142      	str	r2, [r0, #20]
 810733e:	bc30      	pop	{r4, r5}
 8107340:	2000      	movs	r0, #0
 8107342:	4770      	bx	lr
 8107344:	f04f 30ff 	mov.w	r0, #4294967295
 8107348:	4770      	bx	lr
 810734a:	bf00      	nop
 810734c:	0819f184 	.word	0x0819f184
 8107350:	081aa7d4 	.word	0x081aa7d4

08107354 <arm_radix8_butterfly_f32>:
 8107354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107358:	ed2d 8b10 	vpush	{d8-d15}
 810735c:	b097      	sub	sp, #92	@ 0x5c
 810735e:	e9cd 3212 	strd	r3, r2, [sp, #72]	@ 0x48
 8107362:	4603      	mov	r3, r0
 8107364:	3304      	adds	r3, #4
 8107366:	eddf cacb 	vldr	s25, [pc, #812]	@ 8107694 <arm_radix8_butterfly_f32+0x340>
 810736a:	9014      	str	r0, [sp, #80]	@ 0x50
 810736c:	468a      	mov	sl, r1
 810736e:	468b      	mov	fp, r1
 8107370:	9315      	str	r3, [sp, #84]	@ 0x54
 8107372:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8107374:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8107378:	eb04 1246 	add.w	r2, r4, r6, lsl #5
 810737c:	eb02 1006 	add.w	r0, r2, r6, lsl #4
 8107380:	0131      	lsls	r1, r6, #4
 8107382:	eba6 0386 	sub.w	r3, r6, r6, lsl #2
 8107386:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 810738a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 810738e:	e9cd 0100 	strd	r0, r1, [sp]
 8107392:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8107396:	3104      	adds	r1, #4
 8107398:	f108 0004 	add.w	r0, r8, #4
 810739c:	9611      	str	r6, [sp, #68]	@ 0x44
 810739e:	4420      	add	r0, r4
 81073a0:	4421      	add	r1, r4
 81073a2:	012c      	lsls	r4, r5, #4
 81073a4:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 81073a8:	9403      	str	r4, [sp, #12]
 81073aa:	00ec      	lsls	r4, r5, #3
 81073ac:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 81073ae:	9404      	str	r4, [sp, #16]
 81073b0:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 81073b4:	9405      	str	r4, [sp, #20]
 81073b6:	016c      	lsls	r4, r5, #5
 81073b8:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
 81073bc:	9402      	str	r4, [sp, #8]
 81073be:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 81073c0:	9c00      	ldr	r4, [sp, #0]
 81073c2:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 81073c6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 81073ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 81073ce:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 81073d2:	f04f 0c00 	mov.w	ip, #0
 81073d6:	ed51 aa01 	vldr	s21, [r1, #-4]
 81073da:	edd3 1a00 	vldr	s3, [r3]
 81073de:	ed92 7a00 	vldr	s14, [r2]
 81073e2:	ed94 5a00 	vldr	s10, [r4]
 81073e6:	ed96 4a00 	vldr	s8, [r6]
 81073ea:	edd7 7a00 	vldr	s15, [r7]
 81073ee:	ed15 2a01 	vldr	s4, [r5, #-4]
 81073f2:	ed50 6a01 	vldr	s13, [r0, #-4]
 81073f6:	ee32 ba07 	vadd.f32	s22, s4, s14
 81073fa:	ee76 0a84 	vadd.f32	s1, s13, s8
 81073fe:	ee7a 5a85 	vadd.f32	s11, s21, s10
 8107402:	ee31 0aa7 	vadd.f32	s0, s3, s15
 8107406:	ee3b 6a25 	vadd.f32	s12, s22, s11
 810740a:	ee70 4a80 	vadd.f32	s9, s1, s0
 810740e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8107412:	ee36 4a24 	vadd.f32	s8, s12, s9
 8107416:	ee36 6a64 	vsub.f32	s12, s12, s9
 810741a:	ed05 4a01 	vstr	s8, [r5, #-4]
 810741e:	ed82 6a00 	vstr	s12, [r2]
 8107422:	edd0 ba00 	vldr	s23, [r0]
 8107426:	edd6 2a01 	vldr	s5, [r6, #4]
 810742a:	edd3 9a01 	vldr	s19, [r3, #4]
 810742e:	ed95 aa00 	vldr	s20, [r5]
 8107432:	ed92 6a01 	vldr	s12, [r2, #4]
 8107436:	ed97 3a01 	vldr	s6, [r7, #4]
 810743a:	ed91 ca00 	vldr	s24, [r1]
 810743e:	edd4 4a01 	vldr	s9, [r4, #4]
 8107442:	ee7b 3ae2 	vsub.f32	s7, s23, s5
 8107446:	ee36 9ae1 	vsub.f32	s18, s13, s3
 810744a:	ee32 2a47 	vsub.f32	s4, s4, s14
 810744e:	ee73 8ae9 	vsub.f32	s17, s7, s19
 8107452:	ee3a 4a46 	vsub.f32	s8, s20, s12
 8107456:	ee39 9a27 	vadd.f32	s18, s18, s15
 810745a:	ee78 8a83 	vadd.f32	s17, s17, s6
 810745e:	eeb0 8a42 	vmov.f32	s16, s4
 8107462:	eea9 8a6c 	vfms.f32	s16, s18, s25
 8107466:	44dc      	add	ip, fp
 8107468:	45e2      	cmp	sl, ip
 810746a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 810746e:	eeb0 1a44 	vmov.f32	s2, s8
 8107472:	eea8 1aec 	vfms.f32	s2, s17, s25
 8107476:	ee76 7ae7 	vsub.f32	s15, s13, s15
 810747a:	ee33 7aa9 	vadd.f32	s14, s7, s19
 810747e:	ee7c 3a64 	vsub.f32	s7, s24, s9
 8107482:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8107486:	ee3a 6a06 	vadd.f32	s12, s20, s12
 810748a:	ee7a 1ac5 	vsub.f32	s3, s21, s10
 810748e:	ee3c aa24 	vadd.f32	s20, s24, s9
 8107492:	ee74 4acc 	vsub.f32	s9, s9, s24
 8107496:	ee39 3a83 	vadd.f32	s6, s19, s6
 810749a:	ee35 5a6a 	vsub.f32	s10, s10, s21
 810749e:	eef0 9a63 	vmov.f32	s19, s7
 81074a2:	eef0 aa48 	vmov.f32	s21, s16
 81074a6:	eee7 9a2c 	vfma.f32	s19, s14, s25
 81074aa:	eea8 4aac 	vfma.f32	s8, s17, s25
 81074ae:	eee7 4a2c 	vfma.f32	s9, s14, s25
 81074b2:	eee7 aa6c 	vfms.f32	s21, s14, s25
 81074b6:	eef0 8a41 	vmov.f32	s17, s2
 81074ba:	eeb0 7a42 	vmov.f32	s14, s4
 81074be:	eeb0 2a61 	vmov.f32	s4, s3
 81074c2:	ee7b 6a65 	vsub.f32	s13, s22, s11
 81074c6:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 81074ca:	ee76 5a4a 	vsub.f32	s11, s12, s20
 81074ce:	eea9 7a2c 	vfma.f32	s14, s18, s25
 81074d2:	eea7 2aac 	vfma.f32	s4, s15, s25
 81074d6:	eea7 5aac 	vfma.f32	s10, s15, s25
 81074da:	eee7 8aec 	vfms.f32	s17, s15, s25
 81074de:	ee32 ba83 	vadd.f32	s22, s5, s6
 81074e2:	ee76 bac3 	vsub.f32	s23, s13, s6
 81074e6:	ee35 9ae0 	vsub.f32	s18, s11, s1
 81074ea:	ee75 7ac0 	vsub.f32	s15, s11, s0
 81074ee:	ee36 6a0a 	vadd.f32	s12, s12, s20
 81074f2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 81074f6:	ee36 aa0b 	vadd.f32	s20, s12, s22
 81074fa:	ee76 6a83 	vadd.f32	s13, s13, s6
 81074fe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8107502:	ee34 3a42 	vsub.f32	s6, s8, s4
 8107506:	ee77 0a29 	vadd.f32	s1, s14, s19
 810750a:	ee36 6a4b 	vsub.f32	s12, s12, s22
 810750e:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 8107512:	ee39 0a00 	vadd.f32	s0, s18, s0
 8107516:	ee73 3aaa 	vadd.f32	s7, s7, s21
 810751a:	ee78 4a24 	vadd.f32	s9, s16, s9
 810751e:	ee37 7a69 	vsub.f32	s14, s14, s19
 8107522:	ee31 5a05 	vadd.f32	s10, s2, s10
 8107526:	ee71 5aa8 	vadd.f32	s11, s3, s17
 810752a:	ee32 4a04 	vadd.f32	s8, s4, s8
 810752e:	ed85 aa00 	vstr	s20, [r5]
 8107532:	ed82 6a01 	vstr	s12, [r2, #4]
 8107536:	444d      	add	r5, r9
 8107538:	ed41 2a01 	vstr	s5, [r1, #-4]
 810753c:	444a      	add	r2, r9
 810753e:	edc4 6a00 	vstr	s13, [r4]
 8107542:	ed81 0a00 	vstr	s0, [r1]
 8107546:	edc4 7a01 	vstr	s15, [r4, #4]
 810754a:	4449      	add	r1, r9
 810754c:	ed40 0a01 	vstr	s1, [r0, #-4]
 8107550:	444c      	add	r4, r9
 8107552:	ed87 7a00 	vstr	s14, [r7]
 8107556:	edc6 3a00 	vstr	s7, [r6]
 810755a:	edc3 4a00 	vstr	s9, [r3]
 810755e:	ed80 3a00 	vstr	s6, [r0]
 8107562:	ed87 4a01 	vstr	s8, [r7, #4]
 8107566:	4448      	add	r0, r9
 8107568:	ed86 5a01 	vstr	s10, [r6, #4]
 810756c:	444f      	add	r7, r9
 810756e:	edc3 5a01 	vstr	s11, [r3, #4]
 8107572:	444e      	add	r6, r9
 8107574:	444b      	add	r3, r9
 8107576:	f63f af2e 	bhi.w	81073d6 <arm_radix8_butterfly_f32+0x82>
 810757a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810757c:	2b07      	cmp	r3, #7
 810757e:	f240 81c9 	bls.w	8107914 <arm_radix8_butterfly_f32+0x5c0>
 8107582:	9d02      	ldr	r5, [sp, #8]
 8107584:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8107586:	9b01      	ldr	r3, [sp, #4]
 8107588:	9803      	ldr	r0, [sp, #12]
 810758a:	9904      	ldr	r1, [sp, #16]
 810758c:	9a05      	ldr	r2, [sp, #20]
 810758e:	3508      	adds	r5, #8
 8107590:	1975      	adds	r5, r6, r5
 8107592:	330c      	adds	r3, #12
 8107594:	950e      	str	r5, [sp, #56]	@ 0x38
 8107596:	4635      	mov	r5, r6
 8107598:	18eb      	adds	r3, r5, r3
 810759a:	f108 0808 	add.w	r8, r8, #8
 810759e:	f10e 0408 	add.w	r4, lr, #8
 81075a2:	3008      	adds	r0, #8
 81075a4:	3108      	adds	r1, #8
 81075a6:	3208      	adds	r2, #8
 81075a8:	9307      	str	r3, [sp, #28]
 81075aa:	f105 030c 	add.w	r3, r5, #12
 81075ae:	4446      	add	r6, r8
 81075b0:	f04f 0e00 	mov.w	lr, #0
 81075b4:	192c      	adds	r4, r5, r4
 81075b6:	1828      	adds	r0, r5, r0
 81075b8:	1869      	adds	r1, r5, r1
 81075ba:	18aa      	adds	r2, r5, r2
 81075bc:	9308      	str	r3, [sp, #32]
 81075be:	465b      	mov	r3, fp
 81075c0:	960d      	str	r6, [sp, #52]	@ 0x34
 81075c2:	46f3      	mov	fp, lr
 81075c4:	940c      	str	r4, [sp, #48]	@ 0x30
 81075c6:	900b      	str	r0, [sp, #44]	@ 0x2c
 81075c8:	910a      	str	r1, [sp, #40]	@ 0x28
 81075ca:	9209      	str	r2, [sp, #36]	@ 0x24
 81075cc:	f04f 0801 	mov.w	r8, #1
 81075d0:	469e      	mov	lr, r3
 81075d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81075d4:	449b      	add	fp, r3
 81075d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81075d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 81075dc:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 81075e0:	9310      	str	r3, [sp, #64]	@ 0x40
 81075e2:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 81075e6:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 81075ea:	9102      	str	r1, [sp, #8]
 81075ec:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 81075f0:	eb01 05cb 	add.w	r5, r1, fp, lsl #3
 81075f4:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 81075f8:	edd6 7a00 	vldr	s15, [r6]
 81075fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 81075fe:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 8107602:	9101      	str	r1, [sp, #4]
 8107604:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8107608:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
 810760c:	edd3 aa01 	vldr	s21, [r3, #4]
 8107610:	edcd 7a06 	vstr	s15, [sp, #24]
 8107614:	9b01      	ldr	r3, [sp, #4]
 8107616:	edd5 7a00 	vldr	s15, [r5]
 810761a:	ed97 ba01 	vldr	s22, [r7, #4]
 810761e:	edcd 7a05 	vstr	s15, [sp, #20]
 8107622:	edd3 7a00 	vldr	s15, [r3]
 8107626:	9b02      	ldr	r3, [sp, #8]
 8107628:	edcd 7a04 	vstr	s15, [sp, #16]
 810762c:	edd3 7a00 	vldr	s15, [r3]
 8107630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107632:	edcd 7a03 	vstr	s15, [sp, #12]
 8107636:	eb07 0ccb 	add.w	ip, r7, fp, lsl #3
 810763a:	edd3 7a00 	vldr	s15, [r3]
 810763e:	eddc ba01 	vldr	s23, [ip, #4]
 8107642:	edcd 7a02 	vstr	s15, [sp, #8]
 8107646:	eb0c 01cb 	add.w	r1, ip, fp, lsl #3
 810764a:	edd2 7a00 	vldr	s15, [r2]
 810764e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8107650:	9100      	str	r1, [sp, #0]
 8107652:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
 8107656:	4601      	mov	r1, r0
 8107658:	ed91 da01 	vldr	s26, [r1, #4]
 810765c:	edcd 7a01 	vstr	s15, [sp, #4]
 8107660:	9900      	ldr	r1, [sp, #0]
 8107662:	edd2 7a00 	vldr	s15, [r2]
 8107666:	ed91 ca01 	vldr	s24, [r1, #4]
 810766a:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 810766e:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8107672:	ed94 ea01 	vldr	s28, [r4, #4]
 8107676:	edd0 da01 	vldr	s27, [r0, #4]
 810767a:	edcd 7a00 	vstr	s15, [sp]
 810767e:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 8107682:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	@ 0x24
 8107686:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	@ 0x2c
 810768a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
 810768e:	46c4      	mov	ip, r8
 8107690:	e002      	b.n	8107698 <arm_radix8_butterfly_f32+0x344>
 8107692:	bf00      	nop
 8107694:	3f3504f3 	.word	0x3f3504f3
 8107698:	ed94 9a00 	vldr	s18, [r4]
 810769c:	ed90 fa00 	vldr	s30, [r0]
 81076a0:	ed91 6a00 	vldr	s12, [r1]
 81076a4:	edd5 7a00 	vldr	s15, [r5]
 81076a8:	edd3 6a00 	vldr	s13, [r3]
 81076ac:	ed57 4a01 	vldr	s9, [r7, #-4]
 81076b0:	ed92 5a00 	vldr	s10, [r2]
 81076b4:	ed56 3a01 	vldr	s7, [r6, #-4]
 81076b8:	ed96 aa00 	vldr	s20, [r6]
 81076bc:	ee35 0a06 	vadd.f32	s0, s10, s12
 81076c0:	ee73 5aa6 	vadd.f32	s11, s7, s13
 81076c4:	ee39 8a27 	vadd.f32	s16, s18, s15
 81076c8:	ee34 7a8f 	vadd.f32	s14, s9, s30
 81076cc:	ee70 2a08 	vadd.f32	s5, s0, s16
 81076d0:	ee75 ea87 	vadd.f32	s29, s11, s14
 81076d4:	ee35 5a46 	vsub.f32	s10, s10, s12
 81076d8:	ee3e 6aa2 	vadd.f32	s12, s29, s5
 81076dc:	ee73 3ae6 	vsub.f32	s7, s7, s13
 81076e0:	ed06 6a01 	vstr	s12, [r6, #-4]
 81076e4:	edd1 9a01 	vldr	s19, [r1, #4]
 81076e8:	edd2 fa01 	vldr	s31, [r2, #4]
 81076ec:	edd4 6a01 	vldr	s13, [r4, #4]
 81076f0:	edd3 1a01 	vldr	s3, [r3, #4]
 81076f4:	ed95 3a01 	vldr	s6, [r5, #4]
 81076f8:	edd0 8a01 	vldr	s17, [r0, #4]
 81076fc:	ed97 4a00 	vldr	s8, [r7]
 8107700:	ee3f 6ae9 	vsub.f32	s12, s31, s19
 8107704:	ee35 1a49 	vsub.f32	s2, s10, s18
 8107708:	ee76 0a66 	vsub.f32	s1, s12, s13
 810770c:	ee31 1a27 	vadd.f32	s2, s2, s15
 8107710:	ee3a 2a61 	vsub.f32	s4, s20, s3
 8107714:	ee75 7a67 	vsub.f32	s15, s10, s15
 8107718:	ee70 0a83 	vadd.f32	s1, s1, s6
 810771c:	ee3f 5aa9 	vadd.f32	s10, s31, s19
 8107720:	ee74 9acf 	vsub.f32	s19, s9, s30
 8107724:	ee77 7a89 	vadd.f32	s15, s15, s18
 8107728:	ee7a 1a21 	vadd.f32	s3, s20, s3
 810772c:	eeb0 aa42 	vmov.f32	s20, s4
 8107730:	ee74 fa68 	vsub.f32	s31, s8, s17
 8107734:	eea0 aaec 	vfms.f32	s20, s1, s25
 8107738:	44f4      	add	ip, lr
 810773a:	45e2      	cmp	sl, ip
 810773c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8107740:	eeb0 9a63 	vmov.f32	s18, s7
 8107744:	ee74 5a28 	vadd.f32	s11, s8, s17
 8107748:	ee38 4ac4 	vsub.f32	s8, s17, s8
 810774c:	eef0 8a69 	vmov.f32	s17, s19
 8107750:	eea1 9a6c 	vfms.f32	s18, s2, s25
 8107754:	eee7 8aac 	vfma.f32	s17, s15, s25
 8107758:	ee36 6a43 	vsub.f32	s12, s12, s6
 810775c:	ee7f 4a64 	vsub.f32	s9, s30, s9
 8107760:	ee36 6a26 	vadd.f32	s12, s12, s13
 8107764:	eea0 2aac 	vfma.f32	s4, s1, s25
 8107768:	eef0 0a4a 	vmov.f32	s1, s20
 810776c:	eee7 0aec 	vfms.f32	s1, s15, s25
 8107770:	eee7 4aac 	vfma.f32	s9, s15, s25
 8107774:	eef0 7a68 	vmov.f32	s15, s17
 8107778:	eef0 8a49 	vmov.f32	s17, s18
 810777c:	ee36 3a83 	vadd.f32	s6, s13, s6
 8107780:	eee6 8a6c 	vfms.f32	s17, s12, s25
 8107784:	eee1 3a2c 	vfma.f32	s7, s2, s25
 8107788:	eeb0 1a6f 	vmov.f32	s2, s31
 810778c:	eea6 1a2c 	vfma.f32	s2, s12, s25
 8107790:	ee71 6ae5 	vsub.f32	s13, s3, s11
 8107794:	eea6 4a2c 	vfma.f32	s8, s12, s25
 8107798:	ee71 5aa5 	vadd.f32	s11, s3, s11
 810779c:	ee75 1a03 	vadd.f32	s3, s10, s6
 81077a0:	ee7e 2ae2 	vsub.f32	s5, s29, s5
 81077a4:	ee37 fa43 	vsub.f32	s30, s14, s6
 81077a8:	ee75 eae1 	vsub.f32	s29, s11, s3
 81077ac:	eeb0 6a68 	vmov.f32	s12, s17
 81077b0:	ee76 8ac0 	vsub.f32	s17, s13, s0
 81077b4:	ee34 4a09 	vadd.f32	s8, s8, s18
 81077b8:	ee76 fa2f 	vadd.f32	s31, s12, s31
 81077bc:	ee76 6ac8 	vsub.f32	s13, s13, s16
 81077c0:	ee33 6a81 	vadd.f32	s12, s7, s2
 81077c4:	ee38 8a88 	vadd.f32	s16, s17, s16
 81077c8:	ee73 3ac1 	vsub.f32	s7, s7, s2
 81077cc:	ee37 7a45 	vsub.f32	s14, s14, s10
 81077d0:	ee2c 1a2e 	vmul.f32	s2, s24, s29
 81077d4:	ee3f 5a05 	vadd.f32	s10, s30, s10
 81077d8:	ee22 9acc 	vnmul.f32	s18, s5, s24
 81077dc:	ed9d fa03 	vldr	s30, [sp, #12]
 81077e0:	ee70 6a26 	vadd.f32	s13, s0, s13
 81077e4:	ee33 7a07 	vadd.f32	s14, s6, s14
 81077e8:	eeaf 1a22 	vfma.f32	s2, s30, s5
 81077ec:	eeaf 9a2e 	vfma.f32	s18, s30, s29
 81077f0:	ee7a 4a24 	vadd.f32	s9, s20, s9
 81077f4:	ed9d fa01 	vldr	s30, [sp, #4]
 81077f8:	ee79 9aa0 	vadd.f32	s19, s19, s1
 81077fc:	ee25 aa4b 	vnmul.f32	s20, s10, s22
 8107800:	ee72 0a67 	vsub.f32	s1, s4, s15
 8107804:	ee37 2a82 	vadd.f32	s4, s15, s4
 8107808:	ee6b 7a08 	vmul.f32	s15, s22, s16
 810780c:	eeaf aa08 	vfma.f32	s20, s30, s16
 8107810:	eeef 7a05 	vfma.f32	s15, s30, s10
 8107814:	ee2d 3aa6 	vmul.f32	s6, s27, s13
 8107818:	ed9d fa05 	vldr	s30, [sp, #20]
 810781c:	ee67 8a6d 	vnmul.f32	s17, s14, s27
 8107820:	eeaf 3a07 	vfma.f32	s6, s30, s14
 8107824:	eeef 8a26 	vfma.f32	s17, s30, s13
 8107828:	ee66 2a6a 	vnmul.f32	s5, s12, s21
 810782c:	ed9d fa00 	vldr	s30, [sp]
 8107830:	ee2a 0aa0 	vmul.f32	s0, s21, s1
 8107834:	eeef 2a20 	vfma.f32	s5, s30, s1
 8107838:	ee6e ea02 	vmul.f32	s29, s28, s4
 810783c:	eddd 0a06 	vldr	s1, [sp, #24]
 8107840:	ee23 5ace 	vnmul.f32	s10, s7, s28
 8107844:	eee0 eaa3 	vfma.f32	s29, s1, s7
 8107848:	ee2b 8aa9 	vmul.f32	s16, s23, s19
 810784c:	eddd 3a02 	vldr	s7, [sp, #8]
 8107850:	eeaf 0a06 	vfma.f32	s0, s30, s12
 8107854:	eea3 8a84 	vfma.f32	s16, s7, s8
 8107858:	ee24 7a6b 	vnmul.f32	s14, s8, s23
 810785c:	ee6d 6a24 	vmul.f32	s13, s26, s9
 8107860:	ed9d 4a04 	vldr	s8, [sp, #16]
 8107864:	ee2f 6acd 	vnmul.f32	s12, s31, s26
 8107868:	eea0 5a82 	vfma.f32	s10, s1, s4
 810786c:	eea3 7aa9 	vfma.f32	s14, s7, s19
 8107870:	eee4 6a2f 	vfma.f32	s13, s8, s31
 8107874:	eea4 6a24 	vfma.f32	s12, s8, s9
 8107878:	ee75 5aa1 	vadd.f32	s11, s11, s3
 810787c:	edc6 5a00 	vstr	s11, [r6]
 8107880:	ed83 1a00 	vstr	s2, [r3]
 8107884:	ed83 9a01 	vstr	s18, [r3, #4]
 8107888:	444e      	add	r6, r9
 810788a:	ed47 7a01 	vstr	s15, [r7, #-4]
 810788e:	ed87 aa00 	vstr	s20, [r7]
 8107892:	444b      	add	r3, r9
 8107894:	ed80 3a00 	vstr	s6, [r0]
 8107898:	edc0 8a01 	vstr	s17, [r0, #4]
 810789c:	444f      	add	r7, r9
 810789e:	ed82 0a00 	vstr	s0, [r2]
 81078a2:	4448      	add	r0, r9
 81078a4:	edc2 2a01 	vstr	s5, [r2, #4]
 81078a8:	edc5 ea00 	vstr	s29, [r5]
 81078ac:	ed85 5a01 	vstr	s10, [r5, #4]
 81078b0:	444a      	add	r2, r9
 81078b2:	edc1 6a00 	vstr	s13, [r1]
 81078b6:	ed81 6a01 	vstr	s12, [r1, #4]
 81078ba:	444d      	add	r5, r9
 81078bc:	ed84 8a00 	vstr	s16, [r4]
 81078c0:	ed84 7a01 	vstr	s14, [r4, #4]
 81078c4:	4449      	add	r1, r9
 81078c6:	444c      	add	r4, r9
 81078c8:	f63f aee6 	bhi.w	8107698 <arm_radix8_butterfly_f32+0x344>
 81078cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81078ce:	3308      	adds	r3, #8
 81078d0:	930e      	str	r3, [sp, #56]	@ 0x38
 81078d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81078d4:	3308      	adds	r3, #8
 81078d6:	930d      	str	r3, [sp, #52]	@ 0x34
 81078d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 81078da:	3308      	adds	r3, #8
 81078dc:	930c      	str	r3, [sp, #48]	@ 0x30
 81078de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81078e0:	3308      	adds	r3, #8
 81078e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 81078e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81078e6:	3308      	adds	r3, #8
 81078e8:	930a      	str	r3, [sp, #40]	@ 0x28
 81078ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81078ec:	3308      	adds	r3, #8
 81078ee:	9309      	str	r3, [sp, #36]	@ 0x24
 81078f0:	9b08      	ldr	r3, [sp, #32]
 81078f2:	3308      	adds	r3, #8
 81078f4:	9308      	str	r3, [sp, #32]
 81078f6:	9b07      	ldr	r3, [sp, #28]
 81078f8:	3308      	adds	r3, #8
 81078fa:	9307      	str	r3, [sp, #28]
 81078fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 81078fe:	f108 0801 	add.w	r8, r8, #1
 8107902:	4543      	cmp	r3, r8
 8107904:	f47f ae65 	bne.w	81075d2 <arm_radix8_butterfly_f32+0x27e>
 8107908:	469b      	mov	fp, r3
 810790a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810790c:	00db      	lsls	r3, r3, #3
 810790e:	b29b      	uxth	r3, r3
 8107910:	9312      	str	r3, [sp, #72]	@ 0x48
 8107912:	e52e      	b.n	8107372 <arm_radix8_butterfly_f32+0x1e>
 8107914:	b017      	add	sp, #92	@ 0x5c
 8107916:	ecbd 8b10 	vpop	{d8-d15}
 810791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810791e:	bf00      	nop

08107920 <arm_cfft_radix8by2_f32>:
 8107920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107924:	f8b0 e000 	ldrh.w	lr, [r0]
 8107928:	6842      	ldr	r2, [r0, #4]
 810792a:	ed2d 8b08 	vpush	{d8-d11}
 810792e:	4607      	mov	r7, r0
 8107930:	4608      	mov	r0, r1
 8107932:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8107936:	ea4f 015e 	mov.w	r1, lr, lsr #1
 810793a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 810793e:	b082      	sub	sp, #8
 8107940:	f000 80a0 	beq.w	8107a84 <arm_cfft_radix8by2_f32+0x164>
 8107944:	008c      	lsls	r4, r1, #2
 8107946:	3410      	adds	r4, #16
 8107948:	f100 0310 	add.w	r3, r0, #16
 810794c:	1906      	adds	r6, r0, r4
 810794e:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8107952:	4444      	add	r4, r8
 8107954:	f102 0c10 	add.w	ip, r2, #16
 8107958:	f108 0510 	add.w	r5, r8, #16
 810795c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8107960:	ed55 2a03 	vldr	s5, [r5, #-12]
 8107964:	ed14 5a04 	vldr	s10, [r4, #-16]
 8107968:	ed54 5a03 	vldr	s11, [r4, #-12]
 810796c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8107970:	ed55 8a02 	vldr	s17, [r5, #-8]
 8107974:	ed15 8a01 	vldr	s16, [r5, #-4]
 8107978:	ed16 3a04 	vldr	s6, [r6, #-16]
 810797c:	ed56 3a03 	vldr	s7, [r6, #-12]
 8107980:	ed54 7a02 	vldr	s15, [r4, #-8]
 8107984:	ed14 7a01 	vldr	s14, [r4, #-4]
 8107988:	ed13 4a03 	vldr	s8, [r3, #-12]
 810798c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8107990:	ed13 6a01 	vldr	s12, [r3, #-4]
 8107994:	ed16 0a02 	vldr	s0, [r6, #-8]
 8107998:	ed56 0a01 	vldr	s1, [r6, #-4]
 810799c:	ee74 ba82 	vadd.f32	s23, s9, s4
 81079a0:	ee34 ba22 	vadd.f32	s22, s8, s5
 81079a4:	ee73 9a05 	vadd.f32	s19, s6, s10
 81079a8:	ee33 9aa5 	vadd.f32	s18, s7, s11
 81079ac:	ee30 1a27 	vadd.f32	s2, s0, s15
 81079b0:	ee70 1a87 	vadd.f32	s3, s1, s14
 81079b4:	ee76 aaa8 	vadd.f32	s21, s13, s17
 81079b8:	ee36 aa08 	vadd.f32	s20, s12, s16
 81079bc:	ed43 ba04 	vstr	s23, [r3, #-16]
 81079c0:	ed03 ba03 	vstr	s22, [r3, #-12]
 81079c4:	ed43 aa02 	vstr	s21, [r3, #-8]
 81079c8:	ed03 aa01 	vstr	s20, [r3, #-4]
 81079cc:	ed06 1a02 	vstr	s2, [r6, #-8]
 81079d0:	ed46 1a01 	vstr	s3, [r6, #-4]
 81079d4:	ed46 9a04 	vstr	s19, [r6, #-16]
 81079d8:	ed06 9a03 	vstr	s18, [r6, #-12]
 81079dc:	ee74 4ac2 	vsub.f32	s9, s9, s4
 81079e0:	ee34 4a62 	vsub.f32	s8, s8, s5
 81079e4:	ee35 5a43 	vsub.f32	s10, s10, s6
 81079e8:	ee75 5ae3 	vsub.f32	s11, s11, s7
 81079ec:	ed1c 3a04 	vldr	s6, [ip, #-16]
 81079f0:	ed5c 3a03 	vldr	s7, [ip, #-12]
 81079f4:	ee23 2a65 	vnmul.f32	s4, s6, s11
 81079f8:	ee64 1a23 	vmul.f32	s3, s8, s7
 81079fc:	ee23 1ae4 	vnmul.f32	s2, s7, s9
 8107a00:	ee65 2a03 	vmul.f32	s5, s10, s6
 8107a04:	eea4 1a03 	vfma.f32	s2, s8, s6
 8107a08:	3310      	adds	r3, #16
 8107a0a:	4573      	cmp	r3, lr
 8107a0c:	eee4 1a83 	vfma.f32	s3, s9, s6
 8107a10:	f106 0610 	add.w	r6, r6, #16
 8107a14:	f10c 0c10 	add.w	ip, ip, #16
 8107a18:	eea5 2a23 	vfma.f32	s4, s10, s7
 8107a1c:	f105 0510 	add.w	r5, r5, #16
 8107a20:	f104 0410 	add.w	r4, r4, #16
 8107a24:	eee5 2aa3 	vfma.f32	s5, s11, s7
 8107a28:	ed05 1a07 	vstr	s2, [r5, #-28]	@ 0xffffffe4
 8107a2c:	ed45 1a08 	vstr	s3, [r5, #-32]	@ 0xffffffe0
 8107a30:	ed04 2a08 	vstr	s4, [r4, #-32]	@ 0xffffffe0
 8107a34:	ed44 2a07 	vstr	s5, [r4, #-28]	@ 0xffffffe4
 8107a38:	ed5c 5a05 	vldr	s11, [ip, #-20]	@ 0xffffffec
 8107a3c:	ed1c 5a06 	vldr	s10, [ip, #-24]	@ 0xffffffe8
 8107a40:	ee76 6ae8 	vsub.f32	s13, s13, s17
 8107a44:	ee36 6a48 	vsub.f32	s12, s12, s16
 8107a48:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8107a4c:	ee37 7a60 	vsub.f32	s14, s14, s1
 8107a50:	ee26 3a25 	vmul.f32	s6, s12, s11
 8107a54:	ee65 3ae6 	vnmul.f32	s7, s11, s13
 8107a58:	ee27 4a85 	vmul.f32	s8, s15, s10
 8107a5c:	ee65 4a47 	vnmul.f32	s9, s10, s14
 8107a60:	eee6 3a05 	vfma.f32	s7, s12, s10
 8107a64:	eea6 3a85 	vfma.f32	s6, s13, s10
 8107a68:	eea7 4a25 	vfma.f32	s8, s14, s11
 8107a6c:	eee7 4aa5 	vfma.f32	s9, s15, s11
 8107a70:	ed05 3a06 	vstr	s6, [r5, #-24]	@ 0xffffffe8
 8107a74:	ed45 3a05 	vstr	s7, [r5, #-20]	@ 0xffffffec
 8107a78:	ed04 4a05 	vstr	s8, [r4, #-20]	@ 0xffffffec
 8107a7c:	ed44 4a06 	vstr	s9, [r4, #-24]	@ 0xffffffe8
 8107a80:	f47f af6c 	bne.w	810795c <arm_cfft_radix8by2_f32+0x3c>
 8107a84:	b289      	uxth	r1, r1
 8107a86:	2302      	movs	r3, #2
 8107a88:	9101      	str	r1, [sp, #4]
 8107a8a:	f7ff fc63 	bl	8107354 <arm_radix8_butterfly_f32>
 8107a8e:	9901      	ldr	r1, [sp, #4]
 8107a90:	687a      	ldr	r2, [r7, #4]
 8107a92:	4640      	mov	r0, r8
 8107a94:	2302      	movs	r3, #2
 8107a96:	b002      	add	sp, #8
 8107a98:	ecbd 8b08 	vpop	{d8-d11}
 8107a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107aa0:	f7ff bc58 	b.w	8107354 <arm_radix8_butterfly_f32>

08107aa4 <arm_cfft_radix8by4_f32>:
 8107aa4:	8803      	ldrh	r3, [r0, #0]
 8107aa6:	ed91 7a00 	vldr	s14, [r1]
 8107aaa:	edd1 7a01 	vldr	s15, [r1, #4]
 8107aae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107ab2:	085b      	lsrs	r3, r3, #1
 8107ab4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8107ab8:	edd2 5a00 	vldr	s11, [r2]
 8107abc:	6847      	ldr	r7, [r0, #4]
 8107abe:	ed92 4a01 	vldr	s8, [r2, #4]
 8107ac2:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8107ac6:	ed2d 8b0e 	vpush	{d8-d14}
 8107aca:	ed98 5a00 	vldr	s10, [r8]
 8107ace:	edd8 2a01 	vldr	s5, [r8, #4]
 8107ad2:	ee37 6a25 	vadd.f32	s12, s14, s11
 8107ad6:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 8107ada:	edd5 4a00 	vldr	s9, [r5]
 8107ade:	ed95 3a01 	vldr	s6, [r5, #4]
 8107ae2:	ee75 6a06 	vadd.f32	s13, s10, s12
 8107ae6:	b08f      	sub	sp, #60	@ 0x3c
 8107ae8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8107aec:	900d      	str	r0, [sp, #52]	@ 0x34
 8107aee:	4608      	mov	r0, r1
 8107af0:	edc0 6a00 	vstr	s13, [r0]
 8107af4:	ee37 7a65 	vsub.f32	s14, s14, s11
 8107af8:	ee77 6a84 	vadd.f32	s13, s15, s8
 8107afc:	edd8 5a01 	vldr	s11, [r8, #4]
 8107b00:	ed95 2a01 	vldr	s4, [r5, #4]
 8107b04:	920a      	str	r2, [sp, #40]	@ 0x28
 8107b06:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8107b0a:	ee36 6a64 	vsub.f32	s12, s12, s9
 8107b0e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8107b12:	ee73 3a07 	vadd.f32	s7, s6, s14
 8107b16:	ee35 4a27 	vadd.f32	s8, s10, s15
 8107b1a:	4614      	mov	r4, r2
 8107b1c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8107b20:	3408      	adds	r4, #8
 8107b22:	462e      	mov	r6, r5
 8107b24:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8107b28:	3108      	adds	r1, #8
 8107b2a:	3608      	adds	r6, #8
 8107b2c:	9406      	str	r4, [sp, #24]
 8107b2e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8107b32:	ee36 6a45 	vsub.f32	s12, s12, s10
 8107b36:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8107b3a:	ee75 5a82 	vadd.f32	s11, s11, s4
 8107b3e:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8107b42:	ee74 4a64 	vsub.f32	s9, s8, s9
 8107b46:	463c      	mov	r4, r7
 8107b48:	9103      	str	r1, [sp, #12]
 8107b4a:	9607      	str	r6, [sp, #28]
 8107b4c:	4611      	mov	r1, r2
 8107b4e:	f107 0608 	add.w	r6, r7, #8
 8107b52:	085a      	lsrs	r2, r3, #1
 8107b54:	3418      	adds	r4, #24
 8107b56:	edc0 5a01 	vstr	s11, [r0, #4]
 8107b5a:	920c      	str	r2, [sp, #48]	@ 0x30
 8107b5c:	edc5 3a00 	vstr	s7, [r5]
 8107b60:	edc5 4a01 	vstr	s9, [r5, #4]
 8107b64:	9602      	str	r6, [sp, #8]
 8107b66:	ed81 6a00 	vstr	s12, [r1]
 8107b6a:	edc1 6a01 	vstr	s13, [r1, #4]
 8107b6e:	9401      	str	r4, [sp, #4]
 8107b70:	ee37 7a43 	vsub.f32	s14, s14, s6
 8107b74:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8107b78:	3a02      	subs	r2, #2
 8107b7a:	463e      	mov	r6, r7
 8107b7c:	460c      	mov	r4, r1
 8107b7e:	4641      	mov	r1, r8
 8107b80:	3610      	adds	r6, #16
 8107b82:	3108      	adds	r1, #8
 8107b84:	0852      	lsrs	r2, r2, #1
 8107b86:	970b      	str	r7, [sp, #44]	@ 0x2c
 8107b88:	9509      	str	r5, [sp, #36]	@ 0x24
 8107b8a:	9604      	str	r6, [sp, #16]
 8107b8c:	ed88 7a00 	vstr	s14, [r8]
 8107b90:	9105      	str	r1, [sp, #20]
 8107b92:	edc8 7a01 	vstr	s15, [r8, #4]
 8107b96:	9208      	str	r2, [sp, #32]
 8107b98:	f000 812f 	beq.w	8107dfa <arm_cfft_radix8by4_f32+0x356>
 8107b9c:	4639      	mov	r1, r7
 8107b9e:	009b      	lsls	r3, r3, #2
 8107ba0:	4622      	mov	r2, r4
 8107ba2:	3b0c      	subs	r3, #12
 8107ba4:	f101 0930 	add.w	r9, r1, #48	@ 0x30
 8107ba8:	9908      	ldr	r1, [sp, #32]
 8107baa:	f1a5 0c0c 	sub.w	ip, r5, #12
 8107bae:	46b3      	mov	fp, r6
 8107bb0:	f107 0a20 	add.w	sl, r7, #32
 8107bb4:	4443      	add	r3, r8
 8107bb6:	f102 0710 	add.w	r7, r2, #16
 8107bba:	f100 0e10 	add.w	lr, r0, #16
 8107bbe:	3510      	adds	r5, #16
 8107bc0:	3c0c      	subs	r4, #12
 8107bc2:	f1a8 060c 	sub.w	r6, r8, #12
 8107bc6:	f108 0210 	add.w	r2, r8, #16
 8107bca:	ed12 5a02 	vldr	s10, [r2, #-8]
 8107bce:	ed57 6a02 	vldr	s13, [r7, #-8]
 8107bd2:	ed15 0a02 	vldr	s0, [r5, #-8]
 8107bd6:	ed5e 5a02 	vldr	s11, [lr, #-8]
 8107bda:	ed17 7a01 	vldr	s14, [r7, #-4]
 8107bde:	ed52 0a01 	vldr	s1, [r2, #-4]
 8107be2:	ed15 9a01 	vldr	s18, [r5, #-4]
 8107be6:	ed5e 4a01 	vldr	s9, [lr, #-4]
 8107bea:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8107bee:	ee70 7a05 	vadd.f32	s15, s0, s10
 8107bf2:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8107bf6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8107bfa:	ee34 4a87 	vadd.f32	s8, s9, s14
 8107bfe:	ed4e 7a02 	vstr	s15, [lr, #-8]
 8107c02:	ed52 6a01 	vldr	s13, [r2, #-4]
 8107c06:	ed55 7a01 	vldr	s15, [r5, #-4]
 8107c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107c0e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8107c12:	ee77 7a84 	vadd.f32	s15, s15, s8
 8107c16:	ee75 dae0 	vsub.f32	s27, s11, s1
 8107c1a:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8107c1e:	ed96 7a02 	vldr	s14, [r6, #8]
 8107c22:	ed93 ba02 	vldr	s22, [r3, #8]
 8107c26:	ed9c 1a02 	vldr	s2, [ip, #8]
 8107c2a:	edd4 7a02 	vldr	s15, [r4, #8]
 8107c2e:	edd6 1a01 	vldr	s3, [r6, #4]
 8107c32:	edd3 9a01 	vldr	s19, [r3, #4]
 8107c36:	edd4 8a01 	vldr	s17, [r4, #4]
 8107c3a:	ed9c 8a01 	vldr	s16, [ip, #4]
 8107c3e:	ee71 aa07 	vadd.f32	s21, s2, s14
 8107c42:	ee37 aa8b 	vadd.f32	s20, s15, s22
 8107c46:	ee38 3a21 	vadd.f32	s6, s16, s3
 8107c4a:	ee7a 2a8a 	vadd.f32	s5, s21, s20
 8107c4e:	ee37 6acb 	vsub.f32	s12, s15, s22
 8107c52:	edcc 2a02 	vstr	s5, [ip, #8]
 8107c56:	edd3 2a01 	vldr	s5, [r3, #4]
 8107c5a:	ed94 2a01 	vldr	s4, [r4, #4]
 8107c5e:	ee32 2a22 	vadd.f32	s4, s4, s5
 8107c62:	ee71 2a29 	vadd.f32	s5, s2, s19
 8107c66:	ee32 2a03 	vadd.f32	s4, s4, s6
 8107c6a:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8107c6e:	ed8c 2a01 	vstr	s4, [ip, #4]
 8107c72:	ee74 6ac0 	vsub.f32	s13, s9, s0
 8107c76:	ee36 ca61 	vsub.f32	s24, s12, s3
 8107c7a:	ed5b ba01 	vldr	s23, [fp, #-4]
 8107c7e:	ed5b ca02 	vldr	s25, [fp, #-8]
 8107c82:	ee72 2ae8 	vsub.f32	s5, s5, s17
 8107c86:	ee7d da89 	vadd.f32	s27, s27, s18
 8107c8a:	ee76 6a85 	vadd.f32	s13, s13, s10
 8107c8e:	ee3c ca08 	vadd.f32	s24, s24, s16
 8107c92:	ee22 eaac 	vmul.f32	s28, s5, s25
 8107c96:	ee2b daed 	vnmul.f32	s26, s23, s27
 8107c9a:	ee66 eaab 	vmul.f32	s29, s13, s23
 8107c9e:	ee2c 2acc 	vnmul.f32	s4, s25, s24
 8107ca2:	eea6 daac 	vfma.f32	s26, s13, s25
 8107ca6:	3901      	subs	r1, #1
 8107ca8:	f10e 0e08 	add.w	lr, lr, #8
 8107cac:	eef0 6a4e 	vmov.f32	s13, s28
 8107cb0:	eea2 2aab 	vfma.f32	s4, s5, s23
 8107cb4:	f1ac 0c08 	sub.w	ip, ip, #8
 8107cb8:	f10b 0b08 	add.w	fp, fp, #8
 8107cbc:	eeec 6a2b 	vfma.f32	s13, s24, s23
 8107cc0:	f105 0508 	add.w	r5, r5, #8
 8107cc4:	f1a4 0408 	sub.w	r4, r4, #8
 8107cc8:	eeed eaac 	vfma.f32	s29, s27, s25
 8107ccc:	f10a 0a10 	add.w	sl, sl, #16
 8107cd0:	f107 0708 	add.w	r7, r7, #8
 8107cd4:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8107cd8:	ee33 3a68 	vsub.f32	s6, s6, s17
 8107cdc:	ed05 da03 	vstr	s26, [r5, #-12]
 8107ce0:	ed45 ea04 	vstr	s29, [r5, #-16]
 8107ce4:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8107ce8:	ed84 2a04 	vstr	s4, [r4, #16]
 8107cec:	edc4 6a03 	vstr	s13, [r4, #12]
 8107cf0:	ee34 4a49 	vsub.f32	s8, s8, s18
 8107cf4:	ed5a 6a07 	vldr	s13, [sl, #-28]	@ 0xffffffe4
 8107cf8:	ed5a 2a08 	vldr	s5, [sl, #-32]	@ 0xffffffe0
 8107cfc:	ee33 3a69 	vsub.f32	s6, s6, s19
 8107d00:	ee77 7acb 	vsub.f32	s15, s15, s22
 8107d04:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8107d08:	ee34 4a60 	vsub.f32	s8, s8, s1
 8107d0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8107d10:	ee26 2ac3 	vnmul.f32	s4, s13, s6
 8107d14:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8107d18:	ee64 aa26 	vmul.f32	s21, s8, s13
 8107d1c:	ee66 6ae3 	vnmul.f32	s13, s13, s7
 8107d20:	eee3 7a62 	vfms.f32	s15, s6, s5
 8107d24:	f1a6 0608 	sub.w	r6, r6, #8
 8107d28:	f109 0918 	add.w	r9, r9, #24
 8107d2c:	eeb0 3a42 	vmov.f32	s6, s4
 8107d30:	eee4 6a22 	vfma.f32	s13, s8, s5
 8107d34:	f102 0208 	add.w	r2, r2, #8
 8107d38:	f1a3 0308 	sub.w	r3, r3, #8
 8107d3c:	eeaa 3a22 	vfma.f32	s6, s20, s5
 8107d40:	eee3 aaa2 	vfma.f32	s21, s7, s5
 8107d44:	ee37 7a29 	vadd.f32	s14, s14, s19
 8107d48:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8107d4c:	ee75 5ac9 	vsub.f32	s11, s11, s18
 8107d50:	ee36 6a48 	vsub.f32	s12, s12, s16
 8107d54:	ee37 7a68 	vsub.f32	s14, s14, s17
 8107d58:	ed47 aa04 	vstr	s21, [r7, #-16]
 8107d5c:	ed47 6a03 	vstr	s13, [r7, #-12]
 8107d60:	ed86 3a04 	vstr	s6, [r6, #16]
 8107d64:	edc6 7a03 	vstr	s15, [r6, #12]
 8107d68:	ee75 6aa0 	vadd.f32	s13, s11, s1
 8107d6c:	ee76 7a21 	vadd.f32	s15, s12, s3
 8107d70:	ed59 5a0c 	vldr	s11, [r9, #-48]	@ 0xffffffd0
 8107d74:	ed19 6a0b 	vldr	s12, [r9, #-44]	@ 0xffffffd4
 8107d78:	ee35 5a00 	vadd.f32	s10, s10, s0
 8107d7c:	ee37 7a41 	vsub.f32	s14, s14, s2
 8107d80:	ee65 3a06 	vmul.f32	s7, s10, s12
 8107d84:	ee27 4a25 	vmul.f32	s8, s14, s11
 8107d88:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 8107d8c:	eee6 3aa5 	vfma.f32	s7, s13, s11
 8107d90:	ee26 3a66 	vnmul.f32	s6, s12, s13
 8107d94:	eef0 6a44 	vmov.f32	s13, s8
 8107d98:	eee7 6a86 	vfma.f32	s13, s15, s12
 8107d9c:	eef0 7a64 	vmov.f32	s15, s9
 8107da0:	eea5 3a25 	vfma.f32	s6, s10, s11
 8107da4:	eee7 7a06 	vfma.f32	s15, s14, s12
 8107da8:	ed02 3a03 	vstr	s6, [r2, #-12]
 8107dac:	ed42 3a04 	vstr	s7, [r2, #-16]
 8107db0:	edc3 6a03 	vstr	s13, [r3, #12]
 8107db4:	edc3 7a04 	vstr	s15, [r3, #16]
 8107db8:	f47f af07 	bne.w	8107bca <arm_cfft_radix8by4_f32+0x126>
 8107dbc:	9a08      	ldr	r2, [sp, #32]
 8107dbe:	9903      	ldr	r1, [sp, #12]
 8107dc0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107dc4:	9103      	str	r1, [sp, #12]
 8107dc6:	9902      	ldr	r1, [sp, #8]
 8107dc8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107dcc:	9102      	str	r1, [sp, #8]
 8107dce:	9907      	ldr	r1, [sp, #28]
 8107dd0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107dd4:	9107      	str	r1, [sp, #28]
 8107dd6:	9904      	ldr	r1, [sp, #16]
 8107dd8:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8107ddc:	9104      	str	r1, [sp, #16]
 8107dde:	9906      	ldr	r1, [sp, #24]
 8107de0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8107de4:	9106      	str	r1, [sp, #24]
 8107de6:	9905      	ldr	r1, [sp, #20]
 8107de8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8107dec:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8107df0:	9205      	str	r2, [sp, #20]
 8107df2:	9a01      	ldr	r2, [sp, #4]
 8107df4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8107df8:	9301      	str	r3, [sp, #4]
 8107dfa:	9b07      	ldr	r3, [sp, #28]
 8107dfc:	9903      	ldr	r1, [sp, #12]
 8107dfe:	9e06      	ldr	r6, [sp, #24]
 8107e00:	9d05      	ldr	r5, [sp, #20]
 8107e02:	edd3 4a00 	vldr	s9, [r3]
 8107e06:	edd5 7a00 	vldr	s15, [r5]
 8107e0a:	edd1 3a00 	vldr	s7, [r1]
 8107e0e:	edd6 6a00 	vldr	s13, [r6]
 8107e12:	edd3 2a01 	vldr	s5, [r3, #4]
 8107e16:	ed95 3a01 	vldr	s6, [r5, #4]
 8107e1a:	ed96 4a01 	vldr	s8, [r6, #4]
 8107e1e:	ed91 7a01 	vldr	s14, [r1, #4]
 8107e22:	9a02      	ldr	r2, [sp, #8]
 8107e24:	9c01      	ldr	r4, [sp, #4]
 8107e26:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8107e2a:	ee73 5aa6 	vadd.f32	s11, s7, s13
 8107e2e:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8107e32:	ee35 5a25 	vadd.f32	s10, s10, s11
 8107e36:	ee37 6a04 	vadd.f32	s12, s14, s8
 8107e3a:	ed81 5a00 	vstr	s10, [r1]
 8107e3e:	edd5 3a01 	vldr	s7, [r5, #4]
 8107e42:	ed93 5a01 	vldr	s10, [r3, #4]
 8107e46:	ee35 5a23 	vadd.f32	s10, s10, s7
 8107e4a:	ee37 7a44 	vsub.f32	s14, s14, s8
 8107e4e:	ee35 5a06 	vadd.f32	s10, s10, s12
 8107e52:	ee37 4a64 	vsub.f32	s8, s14, s9
 8107e56:	ee76 3ac3 	vsub.f32	s7, s13, s6
 8107e5a:	ed81 5a01 	vstr	s10, [r1, #4]
 8107e5e:	ed92 5a01 	vldr	s10, [r2, #4]
 8107e62:	edd2 1a00 	vldr	s3, [r2]
 8107e66:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8107e6a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8107e6c:	9102      	str	r1, [sp, #8]
 8107e6e:	ee73 3aa2 	vadd.f32	s7, s7, s5
 8107e72:	ee34 4a27 	vadd.f32	s8, s8, s15
 8107e76:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8107e7a:	ee24 2a05 	vmul.f32	s4, s8, s10
 8107e7e:	ee25 5a63 	vnmul.f32	s10, s10, s7
 8107e82:	eea3 2aa1 	vfma.f32	s4, s7, s3
 8107e86:	eea4 5a21 	vfma.f32	s10, s8, s3
 8107e8a:	ed83 2a00 	vstr	s4, [r3]
 8107e8e:	ed83 5a01 	vstr	s10, [r3, #4]
 8107e92:	ee36 6a62 	vsub.f32	s12, s12, s5
 8107e96:	9b04      	ldr	r3, [sp, #16]
 8107e98:	ee36 6a43 	vsub.f32	s12, s12, s6
 8107e9c:	ed93 5a01 	vldr	s10, [r3, #4]
 8107ea0:	edd3 3a00 	vldr	s7, [r3]
 8107ea4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8107ea8:	ee26 4a05 	vmul.f32	s8, s12, s10
 8107eac:	ee25 5a65 	vnmul.f32	s10, s10, s11
 8107eb0:	eea5 4aa3 	vfma.f32	s8, s11, s7
 8107eb4:	2304      	movs	r3, #4
 8107eb6:	eea6 5a23 	vfma.f32	s10, s12, s7
 8107eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8107ebe:	ee36 7ae2 	vsub.f32	s14, s13, s5
 8107ec2:	ed86 4a00 	vstr	s8, [r6]
 8107ec6:	ed86 5a01 	vstr	s10, [r6, #4]
 8107eca:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8107ece:	ee37 7a03 	vadd.f32	s14, s14, s6
 8107ed2:	edd4 6a01 	vldr	s13, [r4, #4]
 8107ed6:	edd4 5a00 	vldr	s11, [r4]
 8107eda:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8107ede:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 8107ee2:	eea7 6a25 	vfma.f32	s12, s14, s11
 8107ee6:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8107eea:	ed85 6a00 	vstr	s12, [r5]
 8107eee:	edc5 6a01 	vstr	s13, [r5, #4]
 8107ef2:	f7ff fa2f 	bl	8107354 <arm_radix8_butterfly_f32>
 8107ef6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8107ef8:	9902      	ldr	r1, [sp, #8]
 8107efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8107efc:	6862      	ldr	r2, [r4, #4]
 8107efe:	9101      	str	r1, [sp, #4]
 8107f00:	2304      	movs	r3, #4
 8107f02:	f7ff fa27 	bl	8107354 <arm_radix8_butterfly_f32>
 8107f06:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8107f08:	9901      	ldr	r1, [sp, #4]
 8107f0a:	6862      	ldr	r2, [r4, #4]
 8107f0c:	2304      	movs	r3, #4
 8107f0e:	f7ff fa21 	bl	8107354 <arm_radix8_butterfly_f32>
 8107f12:	9901      	ldr	r1, [sp, #4]
 8107f14:	6862      	ldr	r2, [r4, #4]
 8107f16:	4640      	mov	r0, r8
 8107f18:	2304      	movs	r3, #4
 8107f1a:	b00f      	add	sp, #60	@ 0x3c
 8107f1c:	ecbd 8b0e 	vpop	{d8-d14}
 8107f20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107f24:	f7ff ba16 	b.w	8107354 <arm_radix8_butterfly_f32>

08107f28 <arm_cfft_f32>:
 8107f28:	2a01      	cmp	r2, #1
 8107f2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107f2e:	8805      	ldrh	r5, [r0, #0]
 8107f30:	4680      	mov	r8, r0
 8107f32:	4691      	mov	r9, r2
 8107f34:	460c      	mov	r4, r1
 8107f36:	461f      	mov	r7, r3
 8107f38:	d076      	beq.n	8108028 <arm_cfft_f32+0x100>
 8107f3a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8107f3e:	d06e      	beq.n	810801e <arm_cfft_f32+0xf6>
 8107f40:	d80e      	bhi.n	8107f60 <arm_cfft_f32+0x38>
 8107f42:	2d40      	cmp	r5, #64	@ 0x40
 8107f44:	d013      	beq.n	8107f6e <arm_cfft_f32+0x46>
 8107f46:	d966      	bls.n	8108016 <arm_cfft_f32+0xee>
 8107f48:	2d80      	cmp	r5, #128	@ 0x80
 8107f4a:	d103      	bne.n	8107f54 <arm_cfft_f32+0x2c>
 8107f4c:	4621      	mov	r1, r4
 8107f4e:	4640      	mov	r0, r8
 8107f50:	f7ff fce6 	bl	8107920 <arm_cfft_radix8by2_f32>
 8107f54:	b9a7      	cbnz	r7, 8107f80 <arm_cfft_f32+0x58>
 8107f56:	f1b9 0f01 	cmp.w	r9, #1
 8107f5a:	d036      	beq.n	8107fca <arm_cfft_f32+0xa2>
 8107f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107f60:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8107f64:	d05b      	beq.n	810801e <arm_cfft_f32+0xf6>
 8107f66:	d94f      	bls.n	8108008 <arm_cfft_f32+0xe0>
 8107f68:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8107f6c:	d1f2      	bne.n	8107f54 <arm_cfft_f32+0x2c>
 8107f6e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8107f72:	2301      	movs	r3, #1
 8107f74:	4629      	mov	r1, r5
 8107f76:	4620      	mov	r0, r4
 8107f78:	f7ff f9ec 	bl	8107354 <arm_radix8_butterfly_f32>
 8107f7c:	2f00      	cmp	r7, #0
 8107f7e:	d0ea      	beq.n	8107f56 <arm_cfft_f32+0x2e>
 8107f80:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8107f84:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8107f88:	2f00      	cmp	r7, #0
 8107f8a:	d0e4      	beq.n	8107f56 <arm_cfft_f32+0x2e>
 8107f8c:	2200      	movs	r2, #0
 8107f8e:	f10c 0e02 	add.w	lr, ip, #2
 8107f92:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 8107f96:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 8107f9a:	0889      	lsrs	r1, r1, #2
 8107f9c:	089b      	lsrs	r3, r3, #2
 8107f9e:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8107fa2:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8107fa6:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8107faa:	0088      	lsls	r0, r1, #2
 8107fac:	009b      	lsls	r3, r3, #2
 8107fae:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8107fb2:	3304      	adds	r3, #4
 8107fb4:	3004      	adds	r0, #4
 8107fb6:	3202      	adds	r2, #2
 8107fb8:	58e1      	ldr	r1, [r4, r3]
 8107fba:	5826      	ldr	r6, [r4, r0]
 8107fbc:	50e6      	str	r6, [r4, r3]
 8107fbe:	42ba      	cmp	r2, r7
 8107fc0:	5021      	str	r1, [r4, r0]
 8107fc2:	d3e6      	bcc.n	8107f92 <arm_cfft_f32+0x6a>
 8107fc4:	f1b9 0f01 	cmp.w	r9, #1
 8107fc8:	d1c8      	bne.n	8107f5c <arm_cfft_f32+0x34>
 8107fca:	ee07 5a90 	vmov	s15, r5
 8107fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107fd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8107fda:	2d00      	cmp	r5, #0
 8107fdc:	d0be      	beq.n	8107f5c <arm_cfft_f32+0x34>
 8107fde:	3408      	adds	r4, #8
 8107fe0:	2300      	movs	r3, #0
 8107fe2:	3301      	adds	r3, #1
 8107fe4:	429d      	cmp	r5, r3
 8107fe6:	f104 0408 	add.w	r4, r4, #8
 8107fea:	ed14 7a04 	vldr	s14, [r4, #-16]
 8107fee:	ed54 7a03 	vldr	s15, [r4, #-12]
 8107ff2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8107ff6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8107ffa:	ed04 7a04 	vstr	s14, [r4, #-16]
 8107ffe:	ed44 7a03 	vstr	s15, [r4, #-12]
 8108002:	d1ee      	bne.n	8107fe2 <arm_cfft_f32+0xba>
 8108004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108008:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 810800c:	d0af      	beq.n	8107f6e <arm_cfft_f32+0x46>
 810800e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8108012:	d09b      	beq.n	8107f4c <arm_cfft_f32+0x24>
 8108014:	e79e      	b.n	8107f54 <arm_cfft_f32+0x2c>
 8108016:	2d10      	cmp	r5, #16
 8108018:	d098      	beq.n	8107f4c <arm_cfft_f32+0x24>
 810801a:	2d20      	cmp	r5, #32
 810801c:	d19a      	bne.n	8107f54 <arm_cfft_f32+0x2c>
 810801e:	4621      	mov	r1, r4
 8108020:	4640      	mov	r0, r8
 8108022:	f7ff fd3f 	bl	8107aa4 <arm_cfft_radix8by4_f32>
 8108026:	e795      	b.n	8107f54 <arm_cfft_f32+0x2c>
 8108028:	b175      	cbz	r5, 8108048 <arm_cfft_f32+0x120>
 810802a:	f101 020c 	add.w	r2, r1, #12
 810802e:	2100      	movs	r1, #0
 8108030:	ed52 7a02 	vldr	s15, [r2, #-8]
 8108034:	3101      	adds	r1, #1
 8108036:	eef1 7a67 	vneg.f32	s15, s15
 810803a:	428d      	cmp	r5, r1
 810803c:	ed42 7a02 	vstr	s15, [r2, #-8]
 8108040:	f102 0208 	add.w	r2, r2, #8
 8108044:	d1f4      	bne.n	8108030 <arm_cfft_f32+0x108>
 8108046:	e778      	b.n	8107f3a <arm_cfft_f32+0x12>
 8108048:	2b00      	cmp	r3, #0
 810804a:	d087      	beq.n	8107f5c <arm_cfft_f32+0x34>
 810804c:	8987      	ldrh	r7, [r0, #12]
 810804e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8108052:	2f00      	cmp	r7, #0
 8108054:	d19a      	bne.n	8107f8c <arm_cfft_f32+0x64>
 8108056:	e7b8      	b.n	8107fca <arm_cfft_f32+0xa2>

08108058 <stage_rfft_f32>:
 8108058:	edd1 7a01 	vldr	s15, [r1, #4]
 810805c:	ed91 6a00 	vldr	s12, [r1]
 8108060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108064:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8108068:	eeb0 7a67 	vmov.f32	s14, s15
 810806c:	eea6 7a26 	vfma.f32	s14, s12, s13
 8108070:	b410      	push	{r4}
 8108072:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8108076:	8804      	ldrh	r4, [r0, #0]
 8108078:	6940      	ldr	r0, [r0, #20]
 810807a:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 810807e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108082:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108086:	3c01      	subs	r4, #1
 8108088:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 810808c:	ed82 7a00 	vstr	s14, [r2]
 8108090:	edc2 7a01 	vstr	s15, [r2, #4]
 8108094:	3010      	adds	r0, #16
 8108096:	3210      	adds	r2, #16
 8108098:	3b08      	subs	r3, #8
 810809a:	3110      	adds	r1, #16
 810809c:	edd3 6a03 	vldr	s13, [r3, #12]
 81080a0:	ed11 5a01 	vldr	s10, [r1, #-4]
 81080a4:	edd3 7a02 	vldr	s15, [r3, #8]
 81080a8:	ed11 4a02 	vldr	s8, [r1, #-8]
 81080ac:	ed50 5a01 	vldr	s11, [r0, #-4]
 81080b0:	ed10 6a02 	vldr	s12, [r0, #-8]
 81080b4:	ee77 4ac4 	vsub.f32	s9, s15, s8
 81080b8:	ee35 7a66 	vsub.f32	s14, s10, s13
 81080bc:	ee77 7a84 	vadd.f32	s15, s15, s8
 81080c0:	eea5 7aa4 	vfma.f32	s14, s11, s9
 81080c4:	3c01      	subs	r4, #1
 81080c6:	2c00      	cmp	r4, #0
 81080c8:	eee6 7a24 	vfma.f32	s15, s12, s9
 81080cc:	f1a3 0308 	sub.w	r3, r3, #8
 81080d0:	f101 0108 	add.w	r1, r1, #8
 81080d4:	ee76 6a85 	vadd.f32	s13, s13, s10
 81080d8:	f100 0008 	add.w	r0, r0, #8
 81080dc:	eee5 7aa6 	vfma.f32	s15, s11, s13
 81080e0:	f102 0208 	add.w	r2, r2, #8
 81080e4:	eea6 7a66 	vfms.f32	s14, s12, s13
 81080e8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 81080ec:	ee27 7a23 	vmul.f32	s14, s14, s7
 81080f0:	ed42 7a04 	vstr	s15, [r2, #-16]
 81080f4:	ed02 7a03 	vstr	s14, [r2, #-12]
 81080f8:	dcd0      	bgt.n	810809c <stage_rfft_f32+0x44>
 81080fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 81080fe:	4770      	bx	lr

08108100 <merge_rfft_f32>:
 8108100:	edd1 7a00 	vldr	s15, [r1]
 8108104:	edd1 6a01 	vldr	s13, [r1, #4]
 8108108:	b430      	push	{r4, r5}
 810810a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 810810e:	8804      	ldrh	r4, [r0, #0]
 8108110:	6940      	ldr	r0, [r0, #20]
 8108112:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8108116:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 810811a:	1e65      	subs	r5, r4, #1
 810811c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108120:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108124:	2d00      	cmp	r5, #0
 8108126:	ed82 7a00 	vstr	s14, [r2]
 810812a:	edc2 7a01 	vstr	s15, [r2, #4]
 810812e:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8108132:	dd32      	ble.n	810819a <merge_rfft_f32+0x9a>
 8108134:	eba3 04c4 	sub.w	r4, r3, r4, lsl #3
 8108138:	3010      	adds	r0, #16
 810813a:	3210      	adds	r2, #16
 810813c:	3110      	adds	r1, #16
 810813e:	3b08      	subs	r3, #8
 8108140:	edd3 6a03 	vldr	s13, [r3, #12]
 8108144:	edd3 7a02 	vldr	s15, [r3, #8]
 8108148:	ed11 5a01 	vldr	s10, [r1, #-4]
 810814c:	ed11 4a02 	vldr	s8, [r1, #-8]
 8108150:	ed50 5a01 	vldr	s11, [r0, #-4]
 8108154:	ed10 6a02 	vldr	s12, [r0, #-8]
 8108158:	ee74 4a67 	vsub.f32	s9, s8, s15
 810815c:	ee35 7a66 	vsub.f32	s14, s10, s13
 8108160:	ee77 7a84 	vadd.f32	s15, s15, s8
 8108164:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8108168:	3b08      	subs	r3, #8
 810816a:	429c      	cmp	r4, r3
 810816c:	eee6 7a64 	vfms.f32	s15, s12, s9
 8108170:	f101 0108 	add.w	r1, r1, #8
 8108174:	f100 0008 	add.w	r0, r0, #8
 8108178:	ee76 6a85 	vadd.f32	s13, s13, s10
 810817c:	f102 0208 	add.w	r2, r2, #8
 8108180:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8108184:	eea6 7a66 	vfms.f32	s14, s12, s13
 8108188:	ee67 7aa3 	vmul.f32	s15, s15, s7
 810818c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108190:	ed42 7a04 	vstr	s15, [r2, #-16]
 8108194:	ed02 7a03 	vstr	s14, [r2, #-12]
 8108198:	d1d2      	bne.n	8108140 <merge_rfft_f32+0x40>
 810819a:	bc30      	pop	{r4, r5}
 810819c:	4770      	bx	lr
 810819e:	bf00      	nop

081081a0 <arm_rfft_fast_f32>:
 81081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81081a4:	4605      	mov	r5, r0
 81081a6:	4616      	mov	r6, r2
 81081a8:	b153      	cbz	r3, 81081c0 <arm_rfft_fast_f32+0x20>
 81081aa:	461f      	mov	r7, r3
 81081ac:	f7ff ffa8 	bl	8108100 <merge_rfft_f32>
 81081b0:	463a      	mov	r2, r7
 81081b2:	4631      	mov	r1, r6
 81081b4:	4628      	mov	r0, r5
 81081b6:	2301      	movs	r3, #1
 81081b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81081bc:	f7ff beb4 	b.w	8107f28 <arm_cfft_f32>
 81081c0:	460c      	mov	r4, r1
 81081c2:	8801      	ldrh	r1, [r0, #0]
 81081c4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 81081c8:	d03f      	beq.n	810824a <arm_rfft_fast_f32+0xaa>
 81081ca:	d82d      	bhi.n	8108228 <arm_rfft_fast_f32+0x88>
 81081cc:	2940      	cmp	r1, #64	@ 0x40
 81081ce:	d032      	beq.n	8108236 <arm_rfft_fast_f32+0x96>
 81081d0:	d937      	bls.n	8108242 <arm_rfft_fast_f32+0xa2>
 81081d2:	2980      	cmp	r1, #128	@ 0x80
 81081d4:	d049      	beq.n	810826a <arm_rfft_fast_f32+0xca>
 81081d6:	89a8      	ldrh	r0, [r5, #12]
 81081d8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 81081dc:	b1e8      	cbz	r0, 810821a <arm_rfft_fast_f32+0x7a>
 81081de:	2200      	movs	r2, #0
 81081e0:	f10c 0e02 	add.w	lr, ip, #2
 81081e4:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 81081e8:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 81081ec:	0889      	lsrs	r1, r1, #2
 81081ee:	089b      	lsrs	r3, r3, #2
 81081f0:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
 81081f4:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 81081f8:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 81081fc:	008f      	lsls	r7, r1, #2
 81081fe:	009b      	lsls	r3, r3, #2
 8108200:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8108204:	3304      	adds	r3, #4
 8108206:	3704      	adds	r7, #4
 8108208:	3202      	adds	r2, #2
 810820a:	f854 8003 	ldr.w	r8, [r4, r3]
 810820e:	59e1      	ldr	r1, [r4, r7]
 8108210:	50e1      	str	r1, [r4, r3]
 8108212:	4290      	cmp	r0, r2
 8108214:	f844 8007 	str.w	r8, [r4, r7]
 8108218:	d8e4      	bhi.n	81081e4 <arm_rfft_fast_f32+0x44>
 810821a:	4632      	mov	r2, r6
 810821c:	4621      	mov	r1, r4
 810821e:	4628      	mov	r0, r5
 8108220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108224:	f7ff bf18 	b.w	8108058 <stage_rfft_f32>
 8108228:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 810822c:	d00d      	beq.n	810824a <arm_rfft_fast_f32+0xaa>
 810822e:	d916      	bls.n	810825e <arm_rfft_fast_f32+0xbe>
 8108230:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8108234:	d10d      	bne.n	8108252 <arm_rfft_fast_f32+0xb2>
 8108236:	686a      	ldr	r2, [r5, #4]
 8108238:	2301      	movs	r3, #1
 810823a:	4620      	mov	r0, r4
 810823c:	f7ff f88a 	bl	8107354 <arm_radix8_butterfly_f32>
 8108240:	e007      	b.n	8108252 <arm_rfft_fast_f32+0xb2>
 8108242:	2910      	cmp	r1, #16
 8108244:	d011      	beq.n	810826a <arm_rfft_fast_f32+0xca>
 8108246:	2920      	cmp	r1, #32
 8108248:	d103      	bne.n	8108252 <arm_rfft_fast_f32+0xb2>
 810824a:	4621      	mov	r1, r4
 810824c:	4628      	mov	r0, r5
 810824e:	f7ff fc29 	bl	8107aa4 <arm_cfft_radix8by4_f32>
 8108252:	89a8      	ldrh	r0, [r5, #12]
 8108254:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8108258:	2800      	cmp	r0, #0
 810825a:	d1c0      	bne.n	81081de <arm_rfft_fast_f32+0x3e>
 810825c:	e7dd      	b.n	810821a <arm_rfft_fast_f32+0x7a>
 810825e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8108262:	d0e8      	beq.n	8108236 <arm_rfft_fast_f32+0x96>
 8108264:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8108268:	d1f3      	bne.n	8108252 <arm_rfft_fast_f32+0xb2>
 810826a:	4621      	mov	r1, r4
 810826c:	4628      	mov	r0, r5
 810826e:	f7ff fb57 	bl	8107920 <arm_cfft_radix8by2_f32>
 8108272:	e7ee      	b.n	8108252 <arm_rfft_fast_f32+0xb2>

08108274 <arm_rfft_fast_init_f32>:
 8108274:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8108278:	d024      	beq.n	81082c4 <arm_rfft_fast_init_f32+0x50>
 810827a:	d807      	bhi.n	810828c <arm_rfft_fast_init_f32+0x18>
 810827c:	2980      	cmp	r1, #128	@ 0x80
 810827e:	d01c      	beq.n	81082ba <arm_rfft_fast_init_f32+0x46>
 8108280:	d90c      	bls.n	810829c <arm_rfft_fast_init_f32+0x28>
 8108282:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8108286:	d11a      	bne.n	81082be <arm_rfft_fast_init_f32+0x4a>
 8108288:	4b0f      	ldr	r3, [pc, #60]	@ (81082c8 <arm_rfft_fast_init_f32+0x54>)
 810828a:	4718      	bx	r3
 810828c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8108290:	d011      	beq.n	81082b6 <arm_rfft_fast_init_f32+0x42>
 8108292:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8108296:	d107      	bne.n	81082a8 <arm_rfft_fast_init_f32+0x34>
 8108298:	4b0c      	ldr	r3, [pc, #48]	@ (81082cc <arm_rfft_fast_init_f32+0x58>)
 810829a:	4718      	bx	r3
 810829c:	2920      	cmp	r1, #32
 810829e:	d008      	beq.n	81082b2 <arm_rfft_fast_init_f32+0x3e>
 81082a0:	2940      	cmp	r1, #64	@ 0x40
 81082a2:	d10c      	bne.n	81082be <arm_rfft_fast_init_f32+0x4a>
 81082a4:	4b0a      	ldr	r3, [pc, #40]	@ (81082d0 <arm_rfft_fast_init_f32+0x5c>)
 81082a6:	e7f0      	b.n	810828a <arm_rfft_fast_init_f32+0x16>
 81082a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 81082ac:	d107      	bne.n	81082be <arm_rfft_fast_init_f32+0x4a>
 81082ae:	4b09      	ldr	r3, [pc, #36]	@ (81082d4 <arm_rfft_fast_init_f32+0x60>)
 81082b0:	e7eb      	b.n	810828a <arm_rfft_fast_init_f32+0x16>
 81082b2:	4b09      	ldr	r3, [pc, #36]	@ (81082d8 <arm_rfft_fast_init_f32+0x64>)
 81082b4:	e7e9      	b.n	810828a <arm_rfft_fast_init_f32+0x16>
 81082b6:	4b09      	ldr	r3, [pc, #36]	@ (81082dc <arm_rfft_fast_init_f32+0x68>)
 81082b8:	e7e7      	b.n	810828a <arm_rfft_fast_init_f32+0x16>
 81082ba:	4b09      	ldr	r3, [pc, #36]	@ (81082e0 <arm_rfft_fast_init_f32+0x6c>)
 81082bc:	e7e5      	b.n	810828a <arm_rfft_fast_init_f32+0x16>
 81082be:	f04f 30ff 	mov.w	r0, #4294967295
 81082c2:	4770      	bx	lr
 81082c4:	4b07      	ldr	r3, [pc, #28]	@ (81082e4 <arm_rfft_fast_init_f32+0x70>)
 81082c6:	e7e0      	b.n	810828a <arm_rfft_fast_init_f32+0x16>
 81082c8:	08107241 	.word	0x08107241
 81082cc:	0810731d 	.word	0x0810731d
 81082d0:	081071d9 	.word	0x081071d9
 81082d4:	081072ad 	.word	0x081072ad
 81082d8:	081071a5 	.word	0x081071a5
 81082dc:	081072e5 	.word	0x081072e5
 81082e0:	0810720d 	.word	0x0810720d
 81082e4:	08107275 	.word	0x08107275

081082e8 <ai_buffer_get_size>:
 81082e8:	b378      	cbz	r0, 810834a <ai_buffer_get_size+0x62>
 81082ea:	b410      	push	{r4}
 81082ec:	6803      	ldr	r3, [r0, #0]
 81082ee:	4a17      	ldr	r2, [pc, #92]	@ (810834c <ai_buffer_get_size+0x64>)
 81082f0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 81082f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 81082f8:	4293      	cmp	r3, r2
 81082fa:	d01e      	beq.n	810833a <ai_buffer_get_size+0x52>
 81082fc:	6984      	ldr	r4, [r0, #24]
 81082fe:	6862      	ldr	r2, [r4, #4]
 8108300:	7d03      	ldrb	r3, [r0, #20]
 8108302:	6941      	ldr	r1, [r0, #20]
 8108304:	f1a3 0301 	sub.w	r3, r3, #1
 8108308:	fab3 f383 	clz	r3, r3
 810830c:	095b      	lsrs	r3, r3, #5
 810830e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8108312:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8108316:	da0b      	bge.n	8108330 <ai_buffer_get_size+0x48>
 8108318:	2b01      	cmp	r3, #1
 810831a:	d102      	bne.n	8108322 <ai_buffer_get_size+0x3a>
 810831c:	2802      	cmp	r0, #2
 810831e:	d007      	beq.n	8108330 <ai_buffer_get_size+0x48>
 8108320:	2302      	movs	r3, #2
 8108322:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8108326:	3301      	adds	r3, #1
 8108328:	4298      	cmp	r0, r3
 810832a:	fb01 f202 	mul.w	r2, r1, r2
 810832e:	d1f3      	bne.n	8108318 <ai_buffer_get_size+0x30>
 8108330:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8108334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108338:	4770      	bx	lr
 810833a:	2900      	cmp	r1, #0
 810833c:	d0de      	beq.n	81082fc <ai_buffer_get_size+0x14>
 810833e:	6984      	ldr	r4, [r0, #24]
 8108340:	6863      	ldr	r3, [r4, #4]
 8108342:	331f      	adds	r3, #31
 8108344:	f023 021f 	bic.w	r2, r3, #31
 8108348:	e7da      	b.n	8108300 <ai_buffer_get_size+0x18>
 810834a:	4770      	bx	lr
 810834c:	000400c0 	.word	0x000400c0

08108350 <ai_buffer_array_sane>:
 8108350:	b138      	cbz	r0, 8108362 <ai_buffer_array_sane+0x12>
 8108352:	6843      	ldr	r3, [r0, #4]
 8108354:	b123      	cbz	r3, 8108360 <ai_buffer_array_sane+0x10>
 8108356:	8840      	ldrh	r0, [r0, #2]
 8108358:	3800      	subs	r0, #0
 810835a:	bf18      	it	ne
 810835c:	2001      	movne	r0, #1
 810835e:	4770      	bx	lr
 8108360:	4618      	mov	r0, r3
 8108362:	4770      	bx	lr

08108364 <ai_buffer_array_item_set_address>:
 8108364:	b150      	cbz	r0, 810837c <ai_buffer_array_item_set_address+0x18>
 8108366:	6843      	ldr	r3, [r0, #4]
 8108368:	b14b      	cbz	r3, 810837e <ai_buffer_array_item_set_address+0x1a>
 810836a:	8840      	ldrh	r0, [r0, #2]
 810836c:	b900      	cbnz	r0, 8108370 <ai_buffer_array_item_set_address+0xc>
 810836e:	4770      	bx	lr
 8108370:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8108374:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8108378:	2001      	movs	r0, #1
 810837a:	604a      	str	r2, [r1, #4]
 810837c:	4770      	bx	lr
 810837e:	4618      	mov	r0, r3
 8108380:	4770      	bx	lr
 8108382:	bf00      	nop

08108384 <_ai_platform_acquire_crc>:
 8108384:	2001      	movs	r0, #1
 8108386:	4770      	bx	lr

08108388 <_ai_platform_release_crc>:
 8108388:	4770      	bx	lr
 810838a:	bf00      	nop

0810838c <ai_platform_get_weights_map>:
 810838c:	2a00      	cmp	r2, #0
 810838e:	d037      	beq.n	8108400 <ai_platform_get_weights_map+0x74>
 8108390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108392:	4604      	mov	r4, r0
 8108394:	b1a0      	cbz	r0, 81083c0 <ai_platform_get_weights_map+0x34>
 8108396:	460f      	mov	r7, r1
 8108398:	b191      	cbz	r1, 81083c0 <ai_platform_get_weights_map+0x34>
 810839a:	4b25      	ldr	r3, [pc, #148]	@ (8108430 <ai_platform_get_weights_map+0xa4>)
 810839c:	6810      	ldr	r0, [r2, #0]
 810839e:	4298      	cmp	r0, r3
 81083a0:	4615      	mov	r5, r2
 81083a2:	d00f      	beq.n	81083c4 <ai_platform_get_weights_map+0x38>
 81083a4:	6855      	ldr	r5, [r2, #4]
 81083a6:	b15d      	cbz	r5, 81083c0 <ai_platform_get_weights_map+0x34>
 81083a8:	682e      	ldr	r6, [r5, #0]
 81083aa:	429e      	cmp	r6, r3
 81083ac:	d02a      	beq.n	8108404 <ai_platform_get_weights_map+0x78>
 81083ae:	f1a1 0001 	sub.w	r0, r1, #1
 81083b2:	6025      	str	r5, [r4, #0]
 81083b4:	fab0 f080 	clz	r0, r0
 81083b8:	0940      	lsrs	r0, r0, #5
 81083ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81083bc:	42a7      	cmp	r7, r4
 81083be:	d034      	beq.n	810842a <ai_platform_get_weights_map+0x9e>
 81083c0:	2000      	movs	r0, #0
 81083c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81083c4:	1d10      	adds	r0, r2, #4
 81083c6:	f7ff ffc3 	bl	8108350 <ai_buffer_array_sane>
 81083ca:	2800      	cmp	r0, #0
 81083cc:	d0f8      	beq.n	81083c0 <ai_platform_get_weights_map+0x34>
 81083ce:	88eb      	ldrh	r3, [r5, #6]
 81083d0:	429f      	cmp	r7, r3
 81083d2:	d1f5      	bne.n	81083c0 <ai_platform_get_weights_map+0x34>
 81083d4:	f04f 0e00 	mov.w	lr, #0
 81083d8:	1f23      	subs	r3, r4, #4
 81083da:	4670      	mov	r0, lr
 81083dc:	68aa      	ldr	r2, [r5, #8]
 81083de:	eb02 0c0e 	add.w	ip, r2, lr
 81083e2:	f10e 0e1c 	add.w	lr, lr, #28
 81083e6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 81083ea:	b124      	cbz	r4, 81083f6 <ai_platform_get_weights_map+0x6a>
 81083ec:	3001      	adds	r0, #1
 81083ee:	4287      	cmp	r7, r0
 81083f0:	f843 4f04 	str.w	r4, [r3, #4]!
 81083f4:	d1f2      	bne.n	81083dc <ai_platform_get_weights_map+0x50>
 81083f6:	1a38      	subs	r0, r7, r0
 81083f8:	fab0 f080 	clz	r0, r0
 81083fc:	0940      	lsrs	r0, r0, #5
 81083fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108400:	2000      	movs	r0, #0
 8108402:	4770      	bx	lr
 8108404:	1f23      	subs	r3, r4, #4
 8108406:	4628      	mov	r0, r5
 8108408:	2400      	movs	r4, #0
 810840a:	e000      	b.n	810840e <ai_platform_get_weights_map+0x82>
 810840c:	4614      	mov	r4, r2
 810840e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8108412:	42b2      	cmp	r2, r6
 8108414:	d0d2      	beq.n	81083bc <ai_platform_get_weights_map+0x30>
 8108416:	f843 2f04 	str.w	r2, [r3, #4]!
 810841a:	1c62      	adds	r2, r4, #1
 810841c:	4297      	cmp	r7, r2
 810841e:	d1f5      	bne.n	810840c <ai_platform_get_weights_map+0x80>
 8108420:	3402      	adds	r4, #2
 8108422:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8108426:	42b3      	cmp	r3, r6
 8108428:	d1ca      	bne.n	81083c0 <ai_platform_get_weights_map+0x34>
 810842a:	2001      	movs	r0, #1
 810842c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810842e:	bf00      	nop
 8108430:	a1facade 	.word	0xa1facade

08108434 <ai_platform_get_activations_map>:
 8108434:	2a00      	cmp	r2, #0
 8108436:	d038      	beq.n	81084aa <ai_platform_get_activations_map+0x76>
 8108438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810843a:	4604      	mov	r4, r0
 810843c:	b1a0      	cbz	r0, 8108468 <ai_platform_get_activations_map+0x34>
 810843e:	460f      	mov	r7, r1
 8108440:	b191      	cbz	r1, 8108468 <ai_platform_get_activations_map+0x34>
 8108442:	4b25      	ldr	r3, [pc, #148]	@ (81084d8 <ai_platform_get_activations_map+0xa4>)
 8108444:	6810      	ldr	r0, [r2, #0]
 8108446:	4298      	cmp	r0, r3
 8108448:	4615      	mov	r5, r2
 810844a:	d00f      	beq.n	810846c <ai_platform_get_activations_map+0x38>
 810844c:	6a15      	ldr	r5, [r2, #32]
 810844e:	b15d      	cbz	r5, 8108468 <ai_platform_get_activations_map+0x34>
 8108450:	682e      	ldr	r6, [r5, #0]
 8108452:	429e      	cmp	r6, r3
 8108454:	d02b      	beq.n	81084ae <ai_platform_get_activations_map+0x7a>
 8108456:	f1a1 0001 	sub.w	r0, r1, #1
 810845a:	6025      	str	r5, [r4, #0]
 810845c:	fab0 f080 	clz	r0, r0
 8108460:	0940      	lsrs	r0, r0, #5
 8108462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108464:	42a7      	cmp	r7, r4
 8108466:	d035      	beq.n	81084d4 <ai_platform_get_activations_map+0xa0>
 8108468:	2000      	movs	r0, #0
 810846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810846c:	f102 000c 	add.w	r0, r2, #12
 8108470:	f7ff ff6e 	bl	8108350 <ai_buffer_array_sane>
 8108474:	2800      	cmp	r0, #0
 8108476:	d0f7      	beq.n	8108468 <ai_platform_get_activations_map+0x34>
 8108478:	89eb      	ldrh	r3, [r5, #14]
 810847a:	429f      	cmp	r7, r3
 810847c:	d1f4      	bne.n	8108468 <ai_platform_get_activations_map+0x34>
 810847e:	f04f 0e00 	mov.w	lr, #0
 8108482:	1f23      	subs	r3, r4, #4
 8108484:	4670      	mov	r0, lr
 8108486:	692a      	ldr	r2, [r5, #16]
 8108488:	eb02 0c0e 	add.w	ip, r2, lr
 810848c:	f10e 0e1c 	add.w	lr, lr, #28
 8108490:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8108494:	b124      	cbz	r4, 81084a0 <ai_platform_get_activations_map+0x6c>
 8108496:	3001      	adds	r0, #1
 8108498:	4287      	cmp	r7, r0
 810849a:	f843 4f04 	str.w	r4, [r3, #4]!
 810849e:	d1f2      	bne.n	8108486 <ai_platform_get_activations_map+0x52>
 81084a0:	1a38      	subs	r0, r7, r0
 81084a2:	fab0 f080 	clz	r0, r0
 81084a6:	0940      	lsrs	r0, r0, #5
 81084a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81084aa:	2000      	movs	r0, #0
 81084ac:	4770      	bx	lr
 81084ae:	1f23      	subs	r3, r4, #4
 81084b0:	4628      	mov	r0, r5
 81084b2:	2400      	movs	r4, #0
 81084b4:	e000      	b.n	81084b8 <ai_platform_get_activations_map+0x84>
 81084b6:	4614      	mov	r4, r2
 81084b8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 81084bc:	42b2      	cmp	r2, r6
 81084be:	d0d1      	beq.n	8108464 <ai_platform_get_activations_map+0x30>
 81084c0:	f843 2f04 	str.w	r2, [r3, #4]!
 81084c4:	1c62      	adds	r2, r4, #1
 81084c6:	4297      	cmp	r7, r2
 81084c8:	d1f5      	bne.n	81084b6 <ai_platform_get_activations_map+0x82>
 81084ca:	3402      	adds	r4, #2
 81084cc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 81084d0:	42b3      	cmp	r3, r6
 81084d2:	d1c9      	bne.n	8108468 <ai_platform_get_activations_map+0x34>
 81084d4:	2001      	movs	r0, #1
 81084d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81084d8:	a1facade 	.word	0xa1facade

081084dc <ai_platform_bind_network_params>:
 81084dc:	b1a0      	cbz	r0, 8108508 <ai_platform_bind_network_params+0x2c>
 81084de:	b1b1      	cbz	r1, 810850e <ai_platform_bind_network_params+0x32>
 81084e0:	b1c2      	cbz	r2, 8108514 <ai_platform_bind_network_params+0x38>
 81084e2:	b410      	push	{r4}
 81084e4:	4603      	mov	r3, r0
 81084e6:	4c0d      	ldr	r4, [pc, #52]	@ (810851c <ai_platform_bind_network_params+0x40>)
 81084e8:	f843 4b04 	str.w	r4, [r3], #4
 81084ec:	f100 0c0c 	add.w	ip, r0, #12
 81084f0:	c903      	ldmia	r1, {r0, r1}
 81084f2:	e883 0003 	stmia.w	r3, {r0, r1}
 81084f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 81084fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 81084fe:	2301      	movs	r3, #1
 8108500:	4618      	mov	r0, r3
 8108502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108506:	4770      	bx	lr
 8108508:	4603      	mov	r3, r0
 810850a:	4618      	mov	r0, r3
 810850c:	4770      	bx	lr
 810850e:	460b      	mov	r3, r1
 8108510:	4618      	mov	r0, r3
 8108512:	4770      	bx	lr
 8108514:	4613      	mov	r3, r2
 8108516:	4618      	mov	r0, r3
 8108518:	4770      	bx	lr
 810851a:	bf00      	nop
 810851c:	a1facade 	.word	0xa1facade

08108520 <ai_platform_network_get_error>:
 8108520:	b510      	push	{r4, lr}
 8108522:	b1f0      	cbz	r0, 8108562 <ai_platform_network_get_error+0x42>
 8108524:	4b2f      	ldr	r3, [pc, #188]	@ (81085e4 <ai_platform_network_get_error+0xc4>)
 8108526:	6802      	ldr	r2, [r0, #0]
 8108528:	429a      	cmp	r2, r3
 810852a:	4604      	mov	r4, r0
 810852c:	d119      	bne.n	8108562 <ai_platform_network_get_error+0x42>
 810852e:	f7ff ff29 	bl	8108384 <_ai_platform_acquire_crc>
 8108532:	4b2d      	ldr	r3, [pc, #180]	@ (81085e8 <ai_platform_network_get_error+0xc8>)
 8108534:	681b      	ldr	r3, [r3, #0]
 8108536:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810853a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810853e:	d03c      	beq.n	81085ba <ai_platform_network_get_error+0x9a>
 8108540:	4a2a      	ldr	r2, [pc, #168]	@ (81085ec <ai_platform_network_get_error+0xcc>)
 8108542:	2301      	movs	r3, #1
 8108544:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108548:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 810854c:	2b00      	cmp	r3, #0
 810854e:	d1fb      	bne.n	8108548 <ai_platform_network_get_error+0x28>
 8108550:	4b27      	ldr	r3, [pc, #156]	@ (81085f0 <ai_platform_network_get_error+0xd0>)
 8108552:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108556:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 810855a:	4b26      	ldr	r3, [pc, #152]	@ (81085f4 <ai_platform_network_get_error+0xd4>)
 810855c:	429a      	cmp	r2, r3
 810855e:	d038      	beq.n	81085d2 <ai_platform_network_get_error+0xb2>
 8108560:	e7fe      	b.n	8108560 <ai_platform_network_get_error+0x40>
 8108562:	f7ff ff0f 	bl	8108384 <_ai_platform_acquire_crc>
 8108566:	4b20      	ldr	r3, [pc, #128]	@ (81085e8 <ai_platform_network_get_error+0xc8>)
 8108568:	681b      	ldr	r3, [r3, #0]
 810856a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810856e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108572:	d010      	beq.n	8108596 <ai_platform_network_get_error+0x76>
 8108574:	4a1d      	ldr	r2, [pc, #116]	@ (81085ec <ai_platform_network_get_error+0xcc>)
 8108576:	2301      	movs	r3, #1
 8108578:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 810857c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8108580:	2b00      	cmp	r3, #0
 8108582:	d1fb      	bne.n	810857c <ai_platform_network_get_error+0x5c>
 8108584:	4b1a      	ldr	r3, [pc, #104]	@ (81085f0 <ai_platform_network_get_error+0xd0>)
 8108586:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 810858a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 810858e:	4b19      	ldr	r3, [pc, #100]	@ (81085f4 <ai_platform_network_get_error+0xd4>)
 8108590:	429a      	cmp	r2, r3
 8108592:	d00d      	beq.n	81085b0 <ai_platform_network_get_error+0x90>
 8108594:	e7fe      	b.n	8108594 <ai_platform_network_get_error+0x74>
 8108596:	4a18      	ldr	r2, [pc, #96]	@ (81085f8 <ai_platform_network_get_error+0xd8>)
 8108598:	2301      	movs	r3, #1
 810859a:	6093      	str	r3, [r2, #8]
 810859c:	6893      	ldr	r3, [r2, #8]
 810859e:	2b00      	cmp	r3, #0
 81085a0:	d1fc      	bne.n	810859c <ai_platform_network_get_error+0x7c>
 81085a2:	4b13      	ldr	r3, [pc, #76]	@ (81085f0 <ai_platform_network_get_error+0xd0>)
 81085a4:	6013      	str	r3, [r2, #0]
 81085a6:	6812      	ldr	r2, [r2, #0]
 81085a8:	4b12      	ldr	r3, [pc, #72]	@ (81085f4 <ai_platform_network_get_error+0xd4>)
 81085aa:	429a      	cmp	r2, r3
 81085ac:	d000      	beq.n	81085b0 <ai_platform_network_get_error+0x90>
 81085ae:	e7fe      	b.n	81085ae <ai_platform_network_get_error+0x8e>
 81085b0:	f7ff feea 	bl	8108388 <_ai_platform_release_crc>
 81085b4:	f241 0010 	movw	r0, #4112	@ 0x1010
 81085b8:	bd10      	pop	{r4, pc}
 81085ba:	4a0f      	ldr	r2, [pc, #60]	@ (81085f8 <ai_platform_network_get_error+0xd8>)
 81085bc:	2301      	movs	r3, #1
 81085be:	6093      	str	r3, [r2, #8]
 81085c0:	6893      	ldr	r3, [r2, #8]
 81085c2:	2b00      	cmp	r3, #0
 81085c4:	d1fc      	bne.n	81085c0 <ai_platform_network_get_error+0xa0>
 81085c6:	4b0a      	ldr	r3, [pc, #40]	@ (81085f0 <ai_platform_network_get_error+0xd0>)
 81085c8:	6013      	str	r3, [r2, #0]
 81085ca:	6812      	ldr	r2, [r2, #0]
 81085cc:	4b09      	ldr	r3, [pc, #36]	@ (81085f4 <ai_platform_network_get_error+0xd4>)
 81085ce:	429a      	cmp	r2, r3
 81085d0:	d107      	bne.n	81085e2 <ai_platform_network_get_error+0xc2>
 81085d2:	f7ff fed9 	bl	8108388 <_ai_platform_release_crc>
 81085d6:	f104 0010 	add.w	r0, r4, #16
 81085da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81085de:	f000 be8b 	b.w	81092f8 <core_get_error>
 81085e2:	e7fe      	b.n	81085e2 <ai_platform_network_get_error+0xc2>
 81085e4:	a1c00100 	.word	0xa1c00100
 81085e8:	e0042000 	.word	0xe0042000
 81085ec:	58024000 	.word	0x58024000
 81085f0:	f407a5c2 	.word	0xf407a5c2
 81085f4:	b5e8b5cd 	.word	0xb5e8b5cd
 81085f8:	40023000 	.word	0x40023000

081085fc <ai_platform_network_set_error>:
 81085fc:	b110      	cbz	r0, 8108604 <ai_platform_network_set_error+0x8>
 81085fe:	3010      	adds	r0, #16
 8108600:	f000 be80 	b.w	8109304 <core_set_error>
 8108604:	4770      	bx	lr
 8108606:	bf00      	nop

08108608 <ai_platform_inputs_get>:
 8108608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810860c:	b085      	sub	sp, #20
 810860e:	9102      	str	r1, [sp, #8]
 8108610:	b1f0      	cbz	r0, 8108650 <ai_platform_inputs_get+0x48>
 8108612:	4b62      	ldr	r3, [pc, #392]	@ (810879c <ai_platform_inputs_get+0x194>)
 8108614:	6802      	ldr	r2, [r0, #0]
 8108616:	429a      	cmp	r2, r3
 8108618:	4607      	mov	r7, r0
 810861a:	d119      	bne.n	8108650 <ai_platform_inputs_get+0x48>
 810861c:	f7ff feb2 	bl	8108384 <_ai_platform_acquire_crc>
 8108620:	4b5f      	ldr	r3, [pc, #380]	@ (81087a0 <ai_platform_inputs_get+0x198>)
 8108622:	681b      	ldr	r3, [r3, #0]
 8108624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810862c:	d03d      	beq.n	81086aa <ai_platform_inputs_get+0xa2>
 810862e:	4a5d      	ldr	r2, [pc, #372]	@ (81087a4 <ai_platform_inputs_get+0x19c>)
 8108630:	2301      	movs	r3, #1
 8108632:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108636:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 810863a:	2b00      	cmp	r3, #0
 810863c:	d1fb      	bne.n	8108636 <ai_platform_inputs_get+0x2e>
 810863e:	4b5a      	ldr	r3, [pc, #360]	@ (81087a8 <ai_platform_inputs_get+0x1a0>)
 8108640:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108644:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108648:	4b58      	ldr	r3, [pc, #352]	@ (81087ac <ai_platform_inputs_get+0x1a4>)
 810864a:	429a      	cmp	r2, r3
 810864c:	d039      	beq.n	81086c2 <ai_platform_inputs_get+0xba>
 810864e:	e7fe      	b.n	810864e <ai_platform_inputs_get+0x46>
 8108650:	f7ff fe98 	bl	8108384 <_ai_platform_acquire_crc>
 8108654:	4b52      	ldr	r3, [pc, #328]	@ (81087a0 <ai_platform_inputs_get+0x198>)
 8108656:	681b      	ldr	r3, [r3, #0]
 8108658:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810865c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108660:	d010      	beq.n	8108684 <ai_platform_inputs_get+0x7c>
 8108662:	4a50      	ldr	r2, [pc, #320]	@ (81087a4 <ai_platform_inputs_get+0x19c>)
 8108664:	2301      	movs	r3, #1
 8108666:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 810866a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 810866e:	2b00      	cmp	r3, #0
 8108670:	d1fb      	bne.n	810866a <ai_platform_inputs_get+0x62>
 8108672:	4b4d      	ldr	r3, [pc, #308]	@ (81087a8 <ai_platform_inputs_get+0x1a0>)
 8108674:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108678:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 810867c:	4b4b      	ldr	r3, [pc, #300]	@ (81087ac <ai_platform_inputs_get+0x1a4>)
 810867e:	429a      	cmp	r2, r3
 8108680:	d00d      	beq.n	810869e <ai_platform_inputs_get+0x96>
 8108682:	e7fe      	b.n	8108682 <ai_platform_inputs_get+0x7a>
 8108684:	4a4a      	ldr	r2, [pc, #296]	@ (81087b0 <ai_platform_inputs_get+0x1a8>)
 8108686:	2301      	movs	r3, #1
 8108688:	6093      	str	r3, [r2, #8]
 810868a:	6893      	ldr	r3, [r2, #8]
 810868c:	2b00      	cmp	r3, #0
 810868e:	d1fc      	bne.n	810868a <ai_platform_inputs_get+0x82>
 8108690:	4b45      	ldr	r3, [pc, #276]	@ (81087a8 <ai_platform_inputs_get+0x1a0>)
 8108692:	6013      	str	r3, [r2, #0]
 8108694:	6812      	ldr	r2, [r2, #0]
 8108696:	4b45      	ldr	r3, [pc, #276]	@ (81087ac <ai_platform_inputs_get+0x1a4>)
 8108698:	429a      	cmp	r2, r3
 810869a:	d000      	beq.n	810869e <ai_platform_inputs_get+0x96>
 810869c:	e7fe      	b.n	810869c <ai_platform_inputs_get+0x94>
 810869e:	f7ff fe73 	bl	8108388 <_ai_platform_release_crc>
 81086a2:	2000      	movs	r0, #0
 81086a4:	b005      	add	sp, #20
 81086a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81086aa:	4a41      	ldr	r2, [pc, #260]	@ (81087b0 <ai_platform_inputs_get+0x1a8>)
 81086ac:	2301      	movs	r3, #1
 81086ae:	6093      	str	r3, [r2, #8]
 81086b0:	6893      	ldr	r3, [r2, #8]
 81086b2:	2b00      	cmp	r3, #0
 81086b4:	d1fc      	bne.n	81086b0 <ai_platform_inputs_get+0xa8>
 81086b6:	4b3c      	ldr	r3, [pc, #240]	@ (81087a8 <ai_platform_inputs_get+0x1a0>)
 81086b8:	6013      	str	r3, [r2, #0]
 81086ba:	6812      	ldr	r2, [r2, #0]
 81086bc:	4b3b      	ldr	r3, [pc, #236]	@ (81087ac <ai_platform_inputs_get+0x1a4>)
 81086be:	429a      	cmp	r2, r3
 81086c0:	d155      	bne.n	810876e <ai_platform_inputs_get+0x166>
 81086c2:	f7ff fe61 	bl	8108388 <_ai_platform_release_crc>
 81086c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 81086c8:	2b00      	cmp	r3, #0
 81086ca:	d051      	beq.n	8108770 <ai_platform_inputs_get+0x168>
 81086cc:	f8d7 a030 	ldr.w	sl, [r7, #48]	@ 0x30
 81086d0:	f1ba 0f00 	cmp.w	sl, #0
 81086d4:	d04c      	beq.n	8108770 <ai_platform_inputs_get+0x168>
 81086d6:	f04f 0b00 	mov.w	fp, #0
 81086da:	465d      	mov	r5, fp
 81086dc:	9703      	str	r7, [sp, #12]
 81086de:	e016      	b.n	810870e <ai_platform_inputs_get+0x106>
 81086e0:	9901      	ldr	r1, [sp, #4]
 81086e2:	2301      	movs	r3, #1
 81086e4:	507b      	str	r3, [r7, r1]
 81086e6:	69b1      	ldr	r1, [r6, #24]
 81086e8:	6849      	ldr	r1, [r1, #4]
 81086ea:	6121      	str	r1, [r4, #16]
 81086ec:	f04f 0301 	mov.w	r3, #1
 81086f0:	7523      	strb	r3, [r4, #20]
 81086f2:	e9c4 c200 	strd	ip, r2, [r4]
 81086f6:	6962      	ldr	r2, [r4, #20]
 81086f8:	60a0      	str	r0, [r4, #8]
 81086fa:	2300      	movs	r3, #0
 81086fc:	f369 221f 	bfi	r2, r9, #8, #24
 8108700:	f8c4 8018 	str.w	r8, [r4, #24]
 8108704:	60e3      	str	r3, [r4, #12]
 8108706:	3501      	adds	r5, #1
 8108708:	f10b 0b1c 	add.w	fp, fp, #28
 810870c:	6162      	str	r2, [r4, #20]
 810870e:	f8ba 3000 	ldrh.w	r3, [sl]
 8108712:	42ab      	cmp	r3, r5
 8108714:	b2aa      	uxth	r2, r5
 8108716:	d93a      	bls.n	810878e <ai_platform_inputs_get+0x186>
 8108718:	f8da 3004 	ldr.w	r3, [sl, #4]
 810871c:	00e9      	lsls	r1, r5, #3
 810871e:	9101      	str	r1, [sp, #4]
 8108720:	2b00      	cmp	r3, #0
 8108722:	d034      	beq.n	810878e <ai_platform_inputs_get+0x186>
 8108724:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8108728:	2e00      	cmp	r6, #0
 810872a:	d030      	beq.n	810878e <ai_platform_inputs_get+0x186>
 810872c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108730:	69b2      	ldr	r2, [r6, #24]
 8108732:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8108736:	6810      	ldr	r0, [r2, #0]
 8108738:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 810873c:	68b3      	ldr	r3, [r6, #8]
 810873e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8108742:	f001 fc93 	bl	810a06c <ai_array_to_buffer_fmt>
 8108746:	69b1      	ldr	r1, [r6, #24]
 8108748:	4684      	mov	ip, r0
 810874a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 810874e:	688a      	ldr	r2, [r1, #8]
 8108750:	445c      	add	r4, fp
 8108752:	2800      	cmp	r0, #0
 8108754:	d0c8      	beq.n	81086e8 <ai_platform_inputs_get+0xe0>
 8108756:	2100      	movs	r1, #0
 8108758:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 810875c:	6831      	ldr	r1, [r6, #0]
 810875e:	6041      	str	r1, [r0, #4]
 8108760:	b111      	cbz	r1, 8108768 <ai_platform_inputs_get+0x160>
 8108762:	8849      	ldrh	r1, [r1, #2]
 8108764:	2900      	cmp	r1, #0
 8108766:	d1bb      	bne.n	81086e0 <ai_platform_inputs_get+0xd8>
 8108768:	69b1      	ldr	r1, [r6, #24]
 810876a:	2000      	movs	r0, #0
 810876c:	e7bc      	b.n	81086e8 <ai_platform_inputs_get+0xe0>
 810876e:	e7fe      	b.n	810876e <ai_platform_inputs_get+0x166>
 8108770:	2218      	movs	r2, #24
 8108772:	2111      	movs	r1, #17
 8108774:	f107 0010 	add.w	r0, r7, #16
 8108778:	f000 fdc4 	bl	8109304 <core_set_error>
 810877c:	2200      	movs	r2, #0
 810877e:	4610      	mov	r0, r2
 8108780:	9b02      	ldr	r3, [sp, #8]
 8108782:	2b00      	cmp	r3, #0
 8108784:	d08e      	beq.n	81086a4 <ai_platform_inputs_get+0x9c>
 8108786:	801a      	strh	r2, [r3, #0]
 8108788:	b005      	add	sp, #20
 810878a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810878e:	9f03      	ldr	r7, [sp, #12]
 8108790:	2a00      	cmp	r2, #0
 8108792:	d0ed      	beq.n	8108770 <ai_platform_inputs_get+0x168>
 8108794:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108798:	6858      	ldr	r0, [r3, #4]
 810879a:	e7f1      	b.n	8108780 <ai_platform_inputs_get+0x178>
 810879c:	a1c00100 	.word	0xa1c00100
 81087a0:	e0042000 	.word	0xe0042000
 81087a4:	58024000 	.word	0x58024000
 81087a8:	f407a5c2 	.word	0xf407a5c2
 81087ac:	b5e8b5cd 	.word	0xb5e8b5cd
 81087b0:	40023000 	.word	0x40023000

081087b4 <ai_platform_outputs_get>:
 81087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81087b8:	b085      	sub	sp, #20
 81087ba:	9102      	str	r1, [sp, #8]
 81087bc:	b1f0      	cbz	r0, 81087fc <ai_platform_outputs_get+0x48>
 81087be:	4b5f      	ldr	r3, [pc, #380]	@ (810893c <ai_platform_outputs_get+0x188>)
 81087c0:	6802      	ldr	r2, [r0, #0]
 81087c2:	429a      	cmp	r2, r3
 81087c4:	4607      	mov	r7, r0
 81087c6:	d119      	bne.n	81087fc <ai_platform_outputs_get+0x48>
 81087c8:	f7ff fddc 	bl	8108384 <_ai_platform_acquire_crc>
 81087cc:	4b5c      	ldr	r3, [pc, #368]	@ (8108940 <ai_platform_outputs_get+0x18c>)
 81087ce:	681b      	ldr	r3, [r3, #0]
 81087d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81087d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81087d8:	d03d      	beq.n	8108856 <ai_platform_outputs_get+0xa2>
 81087da:	4a5a      	ldr	r2, [pc, #360]	@ (8108944 <ai_platform_outputs_get+0x190>)
 81087dc:	2301      	movs	r3, #1
 81087de:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 81087e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 81087e6:	2b00      	cmp	r3, #0
 81087e8:	d1fb      	bne.n	81087e2 <ai_platform_outputs_get+0x2e>
 81087ea:	4b57      	ldr	r3, [pc, #348]	@ (8108948 <ai_platform_outputs_get+0x194>)
 81087ec:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 81087f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 81087f4:	4b55      	ldr	r3, [pc, #340]	@ (810894c <ai_platform_outputs_get+0x198>)
 81087f6:	429a      	cmp	r2, r3
 81087f8:	d039      	beq.n	810886e <ai_platform_outputs_get+0xba>
 81087fa:	e7fe      	b.n	81087fa <ai_platform_outputs_get+0x46>
 81087fc:	f7ff fdc2 	bl	8108384 <_ai_platform_acquire_crc>
 8108800:	4b4f      	ldr	r3, [pc, #316]	@ (8108940 <ai_platform_outputs_get+0x18c>)
 8108802:	681b      	ldr	r3, [r3, #0]
 8108804:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810880c:	d010      	beq.n	8108830 <ai_platform_outputs_get+0x7c>
 810880e:	4a4d      	ldr	r2, [pc, #308]	@ (8108944 <ai_platform_outputs_get+0x190>)
 8108810:	2301      	movs	r3, #1
 8108812:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108816:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 810881a:	2b00      	cmp	r3, #0
 810881c:	d1fb      	bne.n	8108816 <ai_platform_outputs_get+0x62>
 810881e:	4b4a      	ldr	r3, [pc, #296]	@ (8108948 <ai_platform_outputs_get+0x194>)
 8108820:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108824:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108828:	4b48      	ldr	r3, [pc, #288]	@ (810894c <ai_platform_outputs_get+0x198>)
 810882a:	429a      	cmp	r2, r3
 810882c:	d00d      	beq.n	810884a <ai_platform_outputs_get+0x96>
 810882e:	e7fe      	b.n	810882e <ai_platform_outputs_get+0x7a>
 8108830:	4a47      	ldr	r2, [pc, #284]	@ (8108950 <ai_platform_outputs_get+0x19c>)
 8108832:	2301      	movs	r3, #1
 8108834:	6093      	str	r3, [r2, #8]
 8108836:	6893      	ldr	r3, [r2, #8]
 8108838:	2b00      	cmp	r3, #0
 810883a:	d1fc      	bne.n	8108836 <ai_platform_outputs_get+0x82>
 810883c:	4b42      	ldr	r3, [pc, #264]	@ (8108948 <ai_platform_outputs_get+0x194>)
 810883e:	6013      	str	r3, [r2, #0]
 8108840:	6812      	ldr	r2, [r2, #0]
 8108842:	4b42      	ldr	r3, [pc, #264]	@ (810894c <ai_platform_outputs_get+0x198>)
 8108844:	429a      	cmp	r2, r3
 8108846:	d000      	beq.n	810884a <ai_platform_outputs_get+0x96>
 8108848:	e7fe      	b.n	8108848 <ai_platform_outputs_get+0x94>
 810884a:	f7ff fd9d 	bl	8108388 <_ai_platform_release_crc>
 810884e:	2000      	movs	r0, #0
 8108850:	b005      	add	sp, #20
 8108852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108856:	4a3e      	ldr	r2, [pc, #248]	@ (8108950 <ai_platform_outputs_get+0x19c>)
 8108858:	2301      	movs	r3, #1
 810885a:	6093      	str	r3, [r2, #8]
 810885c:	6893      	ldr	r3, [r2, #8]
 810885e:	2b00      	cmp	r3, #0
 8108860:	d1fc      	bne.n	810885c <ai_platform_outputs_get+0xa8>
 8108862:	4b39      	ldr	r3, [pc, #228]	@ (8108948 <ai_platform_outputs_get+0x194>)
 8108864:	6013      	str	r3, [r2, #0]
 8108866:	6812      	ldr	r2, [r2, #0]
 8108868:	4b38      	ldr	r3, [pc, #224]	@ (810894c <ai_platform_outputs_get+0x198>)
 810886a:	429a      	cmp	r2, r3
 810886c:	d150      	bne.n	8108910 <ai_platform_outputs_get+0x15c>
 810886e:	f7ff fd8b 	bl	8108388 <_ai_platform_release_crc>
 8108872:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8108874:	2b01      	cmp	r3, #1
 8108876:	d958      	bls.n	810892a <ai_platform_outputs_get+0x176>
 8108878:	f04f 0b00 	mov.w	fp, #0
 810887c:	f8d7 a030 	ldr.w	sl, [r7, #48]	@ 0x30
 8108880:	9703      	str	r7, [sp, #12]
 8108882:	465d      	mov	r5, fp
 8108884:	e016      	b.n	81088b4 <ai_platform_outputs_get+0x100>
 8108886:	9901      	ldr	r1, [sp, #4]
 8108888:	2301      	movs	r3, #1
 810888a:	507b      	str	r3, [r7, r1]
 810888c:	69b1      	ldr	r1, [r6, #24]
 810888e:	6849      	ldr	r1, [r1, #4]
 8108890:	6121      	str	r1, [r4, #16]
 8108892:	f04f 0301 	mov.w	r3, #1
 8108896:	7523      	strb	r3, [r4, #20]
 8108898:	e9c4 c200 	strd	ip, r2, [r4]
 810889c:	6962      	ldr	r2, [r4, #20]
 810889e:	60a0      	str	r0, [r4, #8]
 81088a0:	2300      	movs	r3, #0
 81088a2:	f369 221f 	bfi	r2, r9, #8, #24
 81088a6:	f8c4 8018 	str.w	r8, [r4, #24]
 81088aa:	60e3      	str	r3, [r4, #12]
 81088ac:	3501      	adds	r5, #1
 81088ae:	f10b 0b1c 	add.w	fp, fp, #28
 81088b2:	6162      	str	r2, [r4, #20]
 81088b4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 81088b8:	42ab      	cmp	r3, r5
 81088ba:	b2aa      	uxth	r2, r5
 81088bc:	d929      	bls.n	8108912 <ai_platform_outputs_get+0x15e>
 81088be:	f8da 3010 	ldr.w	r3, [sl, #16]
 81088c2:	00e9      	lsls	r1, r5, #3
 81088c4:	9101      	str	r1, [sp, #4]
 81088c6:	b323      	cbz	r3, 8108912 <ai_platform_outputs_get+0x15e>
 81088c8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 81088cc:	b30e      	cbz	r6, 8108912 <ai_platform_outputs_get+0x15e>
 81088ce:	f8da 3014 	ldr.w	r3, [sl, #20]
 81088d2:	69b2      	ldr	r2, [r6, #24]
 81088d4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 81088d8:	6810      	ldr	r0, [r2, #0]
 81088da:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 81088de:	68b3      	ldr	r3, [r6, #8]
 81088e0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 81088e4:	f001 fbc2 	bl	810a06c <ai_array_to_buffer_fmt>
 81088e8:	69b1      	ldr	r1, [r6, #24]
 81088ea:	4684      	mov	ip, r0
 81088ec:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 81088f0:	688a      	ldr	r2, [r1, #8]
 81088f2:	445c      	add	r4, fp
 81088f4:	2800      	cmp	r0, #0
 81088f6:	d0ca      	beq.n	810888e <ai_platform_outputs_get+0xda>
 81088f8:	2100      	movs	r1, #0
 81088fa:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 81088fe:	6831      	ldr	r1, [r6, #0]
 8108900:	6041      	str	r1, [r0, #4]
 8108902:	b111      	cbz	r1, 810890a <ai_platform_outputs_get+0x156>
 8108904:	8849      	ldrh	r1, [r1, #2]
 8108906:	2900      	cmp	r1, #0
 8108908:	d1bd      	bne.n	8108886 <ai_platform_outputs_get+0xd2>
 810890a:	69b1      	ldr	r1, [r6, #24]
 810890c:	2000      	movs	r0, #0
 810890e:	e7be      	b.n	810888e <ai_platform_outputs_get+0xda>
 8108910:	e7fe      	b.n	8108910 <ai_platform_outputs_get+0x15c>
 8108912:	9f03      	ldr	r7, [sp, #12]
 8108914:	b14a      	cbz	r2, 810892a <ai_platform_outputs_get+0x176>
 8108916:	f8da 3014 	ldr.w	r3, [sl, #20]
 810891a:	6858      	ldr	r0, [r3, #4]
 810891c:	9b02      	ldr	r3, [sp, #8]
 810891e:	2b00      	cmp	r3, #0
 8108920:	d096      	beq.n	8108850 <ai_platform_outputs_get+0x9c>
 8108922:	801a      	strh	r2, [r3, #0]
 8108924:	b005      	add	sp, #20
 8108926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810892a:	2218      	movs	r2, #24
 810892c:	2111      	movs	r1, #17
 810892e:	f107 0010 	add.w	r0, r7, #16
 8108932:	f000 fce7 	bl	8109304 <core_set_error>
 8108936:	2200      	movs	r2, #0
 8108938:	4610      	mov	r0, r2
 810893a:	e7ef      	b.n	810891c <ai_platform_outputs_get+0x168>
 810893c:	a1c00100 	.word	0xa1c00100
 8108940:	e0042000 	.word	0xe0042000
 8108944:	58024000 	.word	0x58024000
 8108948:	f407a5c2 	.word	0xf407a5c2
 810894c:	b5e8b5cd 	.word	0xb5e8b5cd
 8108950:	40023000 	.word	0x40023000

08108954 <ai_platform_network_create>:
 8108954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108958:	b083      	sub	sp, #12
 810895a:	4606      	mov	r6, r0
 810895c:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8108960:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8108964:	4615      	mov	r5, r2
 8108966:	461f      	mov	r7, r3
 8108968:	f7ff fd0c 	bl	8108384 <_ai_platform_acquire_crc>
 810896c:	b188      	cbz	r0, 8108992 <ai_platform_network_create+0x3e>
 810896e:	4a5d      	ldr	r2, [pc, #372]	@ (8108ae4 <ai_platform_network_create+0x190>)
 8108970:	6812      	ldr	r2, [r2, #0]
 8108972:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8108976:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 810897a:	4603      	mov	r3, r0
 810897c:	d00e      	beq.n	810899c <ai_platform_network_create+0x48>
 810897e:	4a5a      	ldr	r2, [pc, #360]	@ (8108ae8 <ai_platform_network_create+0x194>)
 8108980:	2118      	movs	r1, #24
 8108982:	f8c2 1c08 	str.w	r1, [r2, #3080]	@ 0xc08
 8108986:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	@ 0xc08
 810898a:	2918      	cmp	r1, #24
 810898c:	d018      	beq.n	81089c0 <ai_platform_network_create+0x6c>
 810898e:	f7ff fcfb 	bl	8108388 <_ai_platform_release_crc>
 8108992:	f244 1033 	movw	r0, #16691	@ 0x4133
 8108996:	b003      	add	sp, #12
 8108998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810899c:	4a53      	ldr	r2, [pc, #332]	@ (8108aec <ai_platform_network_create+0x198>)
 810899e:	2101      	movs	r1, #1
 81089a0:	6091      	str	r1, [r2, #8]
 81089a2:	2114      	movs	r1, #20
 81089a4:	e001      	b.n	81089aa <ai_platform_network_create+0x56>
 81089a6:	3901      	subs	r1, #1
 81089a8:	d002      	beq.n	81089b0 <ai_platform_network_create+0x5c>
 81089aa:	6894      	ldr	r4, [r2, #8]
 81089ac:	2c00      	cmp	r4, #0
 81089ae:	d1fa      	bne.n	81089a6 <ai_platform_network_create+0x52>
 81089b0:	4a4e      	ldr	r2, [pc, #312]	@ (8108aec <ai_platform_network_create+0x198>)
 81089b2:	6891      	ldr	r1, [r2, #8]
 81089b4:	b911      	cbnz	r1, 81089bc <ai_platform_network_create+0x68>
 81089b6:	6812      	ldr	r2, [r2, #0]
 81089b8:	3201      	adds	r2, #1
 81089ba:	d008      	beq.n	81089ce <ai_platform_network_create+0x7a>
 81089bc:	4618      	mov	r0, r3
 81089be:	e7e6      	b.n	810898e <ai_platform_network_create+0x3a>
 81089c0:	2101      	movs	r1, #1
 81089c2:	f8c2 1c08 	str.w	r1, [r2, #3080]	@ 0xc08
 81089c6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	@ 0xc08
 81089ca:	2900      	cmp	r1, #0
 81089cc:	d1fb      	bne.n	81089c6 <ai_platform_network_create+0x72>
 81089ce:	4618      	mov	r0, r3
 81089d0:	f7ff fcda 	bl	8108388 <_ai_platform_release_crc>
 81089d4:	f7ff fcd6 	bl	8108384 <_ai_platform_acquire_crc>
 81089d8:	4b42      	ldr	r3, [pc, #264]	@ (8108ae4 <ai_platform_network_create+0x190>)
 81089da:	681b      	ldr	r3, [r3, #0]
 81089dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81089e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81089e4:	d010      	beq.n	8108a08 <ai_platform_network_create+0xb4>
 81089e6:	4b40      	ldr	r3, [pc, #256]	@ (8108ae8 <ai_platform_network_create+0x194>)
 81089e8:	2201      	movs	r2, #1
 81089ea:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 81089ee:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	@ 0xc08
 81089f2:	2900      	cmp	r1, #0
 81089f4:	d1fb      	bne.n	81089ee <ai_platform_network_create+0x9a>
 81089f6:	4a3e      	ldr	r2, [pc, #248]	@ (8108af0 <ai_platform_network_create+0x19c>)
 81089f8:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 81089fc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 8108a00:	4b3c      	ldr	r3, [pc, #240]	@ (8108af4 <ai_platform_network_create+0x1a0>)
 8108a02:	429a      	cmp	r2, r3
 8108a04:	d00c      	beq.n	8108a20 <ai_platform_network_create+0xcc>
 8108a06:	e7fe      	b.n	8108a06 <ai_platform_network_create+0xb2>
 8108a08:	4a38      	ldr	r2, [pc, #224]	@ (8108aec <ai_platform_network_create+0x198>)
 8108a0a:	2301      	movs	r3, #1
 8108a0c:	6093      	str	r3, [r2, #8]
 8108a0e:	6893      	ldr	r3, [r2, #8]
 8108a10:	2b00      	cmp	r3, #0
 8108a12:	d1fc      	bne.n	8108a0e <ai_platform_network_create+0xba>
 8108a14:	4b36      	ldr	r3, [pc, #216]	@ (8108af0 <ai_platform_network_create+0x19c>)
 8108a16:	6013      	str	r3, [r2, #0]
 8108a18:	6812      	ldr	r2, [r2, #0]
 8108a1a:	4b36      	ldr	r3, [pc, #216]	@ (8108af4 <ai_platform_network_create+0x1a0>)
 8108a1c:	429a      	cmp	r2, r3
 8108a1e:	d122      	bne.n	8108a66 <ai_platform_network_create+0x112>
 8108a20:	f7ff fcb2 	bl	8108388 <_ai_platform_release_crc>
 8108a24:	b38e      	cbz	r6, 8108a8a <ai_platform_network_create+0x136>
 8108a26:	4b34      	ldr	r3, [pc, #208]	@ (8108af8 <ai_platform_network_create+0x1a4>)
 8108a28:	602b      	str	r3, [r5, #0]
 8108a2a:	6035      	str	r5, [r6, #0]
 8108a2c:	f000 fc62 	bl	81092f4 <core_init>
 8108a30:	b1d0      	cbz	r0, 8108a68 <ai_platform_network_create+0x114>
 8108a32:	f7ff fca7 	bl	8108384 <_ai_platform_acquire_crc>
 8108a36:	4b2b      	ldr	r3, [pc, #172]	@ (8108ae4 <ai_platform_network_create+0x190>)
 8108a38:	681b      	ldr	r3, [r3, #0]
 8108a3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108a42:	d025      	beq.n	8108a90 <ai_platform_network_create+0x13c>
 8108a44:	4a28      	ldr	r2, [pc, #160]	@ (8108ae8 <ai_platform_network_create+0x194>)
 8108a46:	2301      	movs	r3, #1
 8108a48:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108a4c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8108a50:	2b00      	cmp	r3, #0
 8108a52:	d1fb      	bne.n	8108a4c <ai_platform_network_create+0xf8>
 8108a54:	4b26      	ldr	r3, [pc, #152]	@ (8108af0 <ai_platform_network_create+0x19c>)
 8108a56:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108a5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108a5e:	4b25      	ldr	r3, [pc, #148]	@ (8108af4 <ai_platform_network_create+0x1a0>)
 8108a60:	429a      	cmp	r2, r3
 8108a62:	d022      	beq.n	8108aaa <ai_platform_network_create+0x156>
 8108a64:	e7fe      	b.n	8108a64 <ai_platform_network_create+0x110>
 8108a66:	e7fe      	b.n	8108a66 <ai_platform_network_create+0x112>
 8108a68:	2430      	movs	r4, #48	@ 0x30
 8108a6a:	2300      	movs	r3, #0
 8108a6c:	6033      	str	r3, [r6, #0]
 8108a6e:	2610      	movs	r6, #16
 8108a70:	464a      	mov	r2, r9
 8108a72:	4641      	mov	r1, r8
 8108a74:	4638      	mov	r0, r7
 8108a76:	f001 fb9f 	bl	810a1b8 <ai_version_get>
 8108a7a:	4603      	mov	r3, r0
 8108a7c:	2000      	movs	r0, #0
 8108a7e:	f364 0007 	bfi	r0, r4, #0, #8
 8108a82:	64ab      	str	r3, [r5, #72]	@ 0x48
 8108a84:	f366 201f 	bfi	r0, r6, #8, #24
 8108a88:	e785      	b.n	8108996 <ai_platform_network_create+0x42>
 8108a8a:	f241 0010 	movw	r0, #4112	@ 0x1010
 8108a8e:	e782      	b.n	8108996 <ai_platform_network_create+0x42>
 8108a90:	4a16      	ldr	r2, [pc, #88]	@ (8108aec <ai_platform_network_create+0x198>)
 8108a92:	2301      	movs	r3, #1
 8108a94:	6093      	str	r3, [r2, #8]
 8108a96:	6893      	ldr	r3, [r2, #8]
 8108a98:	2b00      	cmp	r3, #0
 8108a9a:	d1fc      	bne.n	8108a96 <ai_platform_network_create+0x142>
 8108a9c:	4b14      	ldr	r3, [pc, #80]	@ (8108af0 <ai_platform_network_create+0x19c>)
 8108a9e:	6013      	str	r3, [r2, #0]
 8108aa0:	6812      	ldr	r2, [r2, #0]
 8108aa2:	4b14      	ldr	r3, [pc, #80]	@ (8108af4 <ai_platform_network_create+0x1a0>)
 8108aa4:	429a      	cmp	r2, r3
 8108aa6:	d000      	beq.n	8108aaa <ai_platform_network_create+0x156>
 8108aa8:	e7fe      	b.n	8108aa8 <ai_platform_network_create+0x154>
 8108aaa:	f7ff fc6d 	bl	8108388 <_ai_platform_release_crc>
 8108aae:	2200      	movs	r2, #0
 8108ab0:	4641      	mov	r1, r8
 8108ab2:	4638      	mov	r0, r7
 8108ab4:	f001 fb80 	bl	810a1b8 <ai_version_get>
 8108ab8:	2200      	movs	r2, #0
 8108aba:	4604      	mov	r4, r0
 8108abc:	2105      	movs	r1, #5
 8108abe:	2001      	movs	r0, #1
 8108ac0:	f001 fb7a 	bl	810a1b8 <ai_version_get>
 8108ac4:	4284      	cmp	r4, r0
 8108ac6:	d001      	beq.n	8108acc <ai_platform_network_create+0x178>
 8108ac8:	2401      	movs	r4, #1
 8108aca:	e7ce      	b.n	8108a6a <ai_platform_network_create+0x116>
 8108acc:	4b0b      	ldr	r3, [pc, #44]	@ (8108afc <ai_platform_network_create+0x1a8>)
 8108ace:	9301      	str	r3, [sp, #4]
 8108ad0:	a801      	add	r0, sp, #4
 8108ad2:	f000 fc23 	bl	810931c <ai_check_custom_types>
 8108ad6:	b110      	cbz	r0, 8108ade <ai_platform_network_create+0x18a>
 8108ad8:	2600      	movs	r6, #0
 8108ada:	4634      	mov	r4, r6
 8108adc:	e7c8      	b.n	8108a70 <ai_platform_network_create+0x11c>
 8108ade:	2402      	movs	r4, #2
 8108ae0:	e7c3      	b.n	8108a6a <ai_platform_network_create+0x116>
 8108ae2:	bf00      	nop
 8108ae4:	e0042000 	.word	0xe0042000
 8108ae8:	58024000 	.word	0x58024000
 8108aec:	40023000 	.word	0x40023000
 8108af0:	f407a5c2 	.word	0xf407a5c2
 8108af4:	b5e8b5cd 	.word	0xb5e8b5cd
 8108af8:	a1c00100 	.word	0xa1c00100
 8108afc:	84048403 	.word	0x84048403

08108b00 <ai_platform_network_init>:
 8108b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108b04:	b1f8      	cbz	r0, 8108b46 <ai_platform_network_init+0x46>
 8108b06:	4b6e      	ldr	r3, [pc, #440]	@ (8108cc0 <ai_platform_network_init+0x1c0>)
 8108b08:	6802      	ldr	r2, [r0, #0]
 8108b0a:	429a      	cmp	r2, r3
 8108b0c:	4604      	mov	r4, r0
 8108b0e:	d11a      	bne.n	8108b46 <ai_platform_network_init+0x46>
 8108b10:	460e      	mov	r6, r1
 8108b12:	f7ff fc37 	bl	8108384 <_ai_platform_acquire_crc>
 8108b16:	4b6b      	ldr	r3, [pc, #428]	@ (8108cc4 <ai_platform_network_init+0x1c4>)
 8108b18:	681b      	ldr	r3, [r3, #0]
 8108b1a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108b22:	d03d      	beq.n	8108ba0 <ai_platform_network_init+0xa0>
 8108b24:	4a68      	ldr	r2, [pc, #416]	@ (8108cc8 <ai_platform_network_init+0x1c8>)
 8108b26:	2301      	movs	r3, #1
 8108b28:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108b2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8108b30:	2b00      	cmp	r3, #0
 8108b32:	d1fb      	bne.n	8108b2c <ai_platform_network_init+0x2c>
 8108b34:	4b65      	ldr	r3, [pc, #404]	@ (8108ccc <ai_platform_network_init+0x1cc>)
 8108b36:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108b3a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108b3e:	4b64      	ldr	r3, [pc, #400]	@ (8108cd0 <ai_platform_network_init+0x1d0>)
 8108b40:	429a      	cmp	r2, r3
 8108b42:	d039      	beq.n	8108bb8 <ai_platform_network_init+0xb8>
 8108b44:	e7fe      	b.n	8108b44 <ai_platform_network_init+0x44>
 8108b46:	f7ff fc1d 	bl	8108384 <_ai_platform_acquire_crc>
 8108b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8108cc4 <ai_platform_network_init+0x1c4>)
 8108b4c:	681b      	ldr	r3, [r3, #0]
 8108b4e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108b56:	d010      	beq.n	8108b7a <ai_platform_network_init+0x7a>
 8108b58:	4a5b      	ldr	r2, [pc, #364]	@ (8108cc8 <ai_platform_network_init+0x1c8>)
 8108b5a:	2301      	movs	r3, #1
 8108b5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108b60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8108b64:	2b00      	cmp	r3, #0
 8108b66:	d1fb      	bne.n	8108b60 <ai_platform_network_init+0x60>
 8108b68:	4b58      	ldr	r3, [pc, #352]	@ (8108ccc <ai_platform_network_init+0x1cc>)
 8108b6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108b6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108b72:	4b57      	ldr	r3, [pc, #348]	@ (8108cd0 <ai_platform_network_init+0x1d0>)
 8108b74:	429a      	cmp	r2, r3
 8108b76:	d00d      	beq.n	8108b94 <ai_platform_network_init+0x94>
 8108b78:	e7fe      	b.n	8108b78 <ai_platform_network_init+0x78>
 8108b7a:	4a56      	ldr	r2, [pc, #344]	@ (8108cd4 <ai_platform_network_init+0x1d4>)
 8108b7c:	2301      	movs	r3, #1
 8108b7e:	6093      	str	r3, [r2, #8]
 8108b80:	6893      	ldr	r3, [r2, #8]
 8108b82:	2b00      	cmp	r3, #0
 8108b84:	d1fc      	bne.n	8108b80 <ai_platform_network_init+0x80>
 8108b86:	4b51      	ldr	r3, [pc, #324]	@ (8108ccc <ai_platform_network_init+0x1cc>)
 8108b88:	6013      	str	r3, [r2, #0]
 8108b8a:	6812      	ldr	r2, [r2, #0]
 8108b8c:	4b50      	ldr	r3, [pc, #320]	@ (8108cd0 <ai_platform_network_init+0x1d0>)
 8108b8e:	429a      	cmp	r2, r3
 8108b90:	d000      	beq.n	8108b94 <ai_platform_network_init+0x94>
 8108b92:	e7fe      	b.n	8108b92 <ai_platform_network_init+0x92>
 8108b94:	f7ff fbf8 	bl	8108388 <_ai_platform_release_crc>
 8108b98:	2600      	movs	r6, #0
 8108b9a:	4630      	mov	r0, r6
 8108b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108ba0:	4a4c      	ldr	r2, [pc, #304]	@ (8108cd4 <ai_platform_network_init+0x1d4>)
 8108ba2:	2301      	movs	r3, #1
 8108ba4:	6093      	str	r3, [r2, #8]
 8108ba6:	6893      	ldr	r3, [r2, #8]
 8108ba8:	2b00      	cmp	r3, #0
 8108baa:	d1fc      	bne.n	8108ba6 <ai_platform_network_init+0xa6>
 8108bac:	4b47      	ldr	r3, [pc, #284]	@ (8108ccc <ai_platform_network_init+0x1cc>)
 8108bae:	6013      	str	r3, [r2, #0]
 8108bb0:	6812      	ldr	r2, [r2, #0]
 8108bb2:	4b47      	ldr	r3, [pc, #284]	@ (8108cd0 <ai_platform_network_init+0x1d0>)
 8108bb4:	429a      	cmp	r2, r3
 8108bb6:	d11c      	bne.n	8108bf2 <ai_platform_network_init+0xf2>
 8108bb8:	f7ff fbe6 	bl	8108388 <_ai_platform_release_crc>
 8108bbc:	2e00      	cmp	r6, #0
 8108bbe:	d06f      	beq.n	8108ca0 <ai_platform_network_init+0x1a0>
 8108bc0:	4b45      	ldr	r3, [pc, #276]	@ (8108cd8 <ai_platform_network_init+0x1d8>)
 8108bc2:	6832      	ldr	r2, [r6, #0]
 8108bc4:	429a      	cmp	r2, r3
 8108bc6:	d115      	bne.n	8108bf4 <ai_platform_network_init+0xf4>
 8108bc8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8108bcc:	6933      	ldr	r3, [r6, #16]
 8108bce:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8108bd2:	89f7      	ldrh	r7, [r6, #14]
 8108bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8108bd6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8108bda:	2303      	movs	r3, #3
 8108bdc:	84e7      	strh	r7, [r4, #38]	@ 0x26
 8108bde:	f8a4 e024 	strh.w	lr, [r4, #36]	@ 0x24
 8108be2:	60e3      	str	r3, [r4, #12]
 8108be4:	4620      	mov	r0, r4
 8108be6:	4626      	mov	r6, r4
 8108be8:	f000 fbc2 	bl	8109370 <ai_layers_init_all>
 8108bec:	4630      	mov	r0, r6
 8108bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108bf2:	e7fe      	b.n	8108bf2 <ai_platform_network_init+0xf2>
 8108bf4:	2101      	movs	r1, #1
 8108bf6:	4630      	mov	r0, r6
 8108bf8:	4635      	mov	r5, r6
 8108bfa:	6876      	ldr	r6, [r6, #4]
 8108bfc:	f7ff fb74 	bl	81082e8 <ai_buffer_get_size>
 8108c00:	f105 081c 	add.w	r8, r5, #28
 8108c04:	4681      	mov	r9, r0
 8108c06:	2101      	movs	r1, #1
 8108c08:	4640      	mov	r0, r8
 8108c0a:	6a2f      	ldr	r7, [r5, #32]
 8108c0c:	f7ff fb6c 	bl	81082e8 <ai_buffer_get_size>
 8108c10:	f1b9 0f00 	cmp.w	r9, #0
 8108c14:	d025      	beq.n	8108c62 <ai_platform_network_init+0x162>
 8108c16:	2201      	movs	r2, #1
 8108c18:	4696      	mov	lr, r2
 8108c1a:	bb30      	cbnz	r0, 8108c6a <ai_platform_network_init+0x16a>
 8108c1c:	4680      	mov	r8, r0
 8108c1e:	4607      	mov	r7, r0
 8108c20:	b376      	cbz	r6, 8108c80 <ai_platform_network_init+0x180>
 8108c22:	8be3      	ldrh	r3, [r4, #30]
 8108c24:	4573      	cmp	r3, lr
 8108c26:	d323      	bcc.n	8108c70 <ai_platform_network_init+0x170>
 8108c28:	b142      	cbz	r2, 8108c3c <ai_platform_network_init+0x13c>
 8108c2a:	46ac      	mov	ip, r5
 8108c2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8108c30:	6a25      	ldr	r5, [r4, #32]
 8108c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8108c34:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8108c38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8108c3c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8108c3e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8108c42:	2600      	movs	r6, #0
 8108c44:	42bb      	cmp	r3, r7
 8108c46:	83a6      	strh	r6, [r4, #28]
 8108c48:	d323      	bcc.n	8108c92 <ai_platform_network_init+0x192>
 8108c4a:	b37f      	cbz	r7, 8108cac <ai_platform_network_init+0x1ac>
 8108c4c:	46c4      	mov	ip, r8
 8108c4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8108c52:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8108c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8108c56:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8108c5a:	46b6      	mov	lr, r6
 8108c5c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8108c60:	e7bb      	b.n	8108bda <ai_platform_network_init+0xda>
 8108c62:	464a      	mov	r2, r9
 8108c64:	46ce      	mov	lr, r9
 8108c66:	464d      	mov	r5, r9
 8108c68:	e7d7      	b.n	8108c1a <ai_platform_network_init+0x11a>
 8108c6a:	b30f      	cbz	r7, 8108cb0 <ai_platform_network_init+0x1b0>
 8108c6c:	2701      	movs	r7, #1
 8108c6e:	e7d7      	b.n	8108c20 <ai_platform_network_init+0x120>
 8108c70:	2212      	movs	r2, #18
 8108c72:	2116      	movs	r1, #22
 8108c74:	f104 0010 	add.w	r0, r4, #16
 8108c78:	f000 fb44 	bl	8109304 <core_set_error>
 8108c7c:	2600      	movs	r6, #0
 8108c7e:	e78c      	b.n	8108b9a <ai_platform_network_init+0x9a>
 8108c80:	f1b9 0f00 	cmp.w	r9, #0
 8108c84:	d0cd      	beq.n	8108c22 <ai_platform_network_init+0x122>
 8108c86:	2110      	movs	r1, #16
 8108c88:	2212      	movs	r2, #18
 8108c8a:	1860      	adds	r0, r4, r1
 8108c8c:	f000 fb3a 	bl	8109304 <core_set_error>
 8108c90:	e783      	b.n	8108b9a <ai_platform_network_init+0x9a>
 8108c92:	2213      	movs	r2, #19
 8108c94:	2116      	movs	r1, #22
 8108c96:	f104 0010 	add.w	r0, r4, #16
 8108c9a:	f000 fb33 	bl	8109304 <core_set_error>
 8108c9e:	e77c      	b.n	8108b9a <ai_platform_network_init+0x9a>
 8108ca0:	2110      	movs	r1, #16
 8108ca2:	2211      	movs	r2, #17
 8108ca4:	1860      	adds	r0, r4, r1
 8108ca6:	f000 fb2d 	bl	8109304 <core_set_error>
 8108caa:	e776      	b.n	8108b9a <ai_platform_network_init+0x9a>
 8108cac:	46be      	mov	lr, r7
 8108cae:	e794      	b.n	8108bda <ai_platform_network_init+0xda>
 8108cb0:	2110      	movs	r1, #16
 8108cb2:	2213      	movs	r2, #19
 8108cb4:	1860      	adds	r0, r4, r1
 8108cb6:	f000 fb25 	bl	8109304 <core_set_error>
 8108cba:	463e      	mov	r6, r7
 8108cbc:	e76d      	b.n	8108b9a <ai_platform_network_init+0x9a>
 8108cbe:	bf00      	nop
 8108cc0:	a1c00100 	.word	0xa1c00100
 8108cc4:	e0042000 	.word	0xe0042000
 8108cc8:	58024000 	.word	0x58024000
 8108ccc:	f407a5c2 	.word	0xf407a5c2
 8108cd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8108cd4:	40023000 	.word	0x40023000
 8108cd8:	a1facade 	.word	0xa1facade

08108cdc <ai_platform_network_post_init>:
 8108cdc:	b538      	push	{r3, r4, r5, lr}
 8108cde:	b1f0      	cbz	r0, 8108d1e <ai_platform_network_post_init+0x42>
 8108ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8108dd4 <ai_platform_network_post_init+0xf8>)
 8108ce2:	6802      	ldr	r2, [r0, #0]
 8108ce4:	429a      	cmp	r2, r3
 8108ce6:	4604      	mov	r4, r0
 8108ce8:	d119      	bne.n	8108d1e <ai_platform_network_post_init+0x42>
 8108cea:	f7ff fb4b 	bl	8108384 <_ai_platform_acquire_crc>
 8108cee:	4b3a      	ldr	r3, [pc, #232]	@ (8108dd8 <ai_platform_network_post_init+0xfc>)
 8108cf0:	681b      	ldr	r3, [r3, #0]
 8108cf2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108cfa:	d03b      	beq.n	8108d74 <ai_platform_network_post_init+0x98>
 8108cfc:	4a37      	ldr	r2, [pc, #220]	@ (8108ddc <ai_platform_network_post_init+0x100>)
 8108cfe:	2301      	movs	r3, #1
 8108d00:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108d04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8108d08:	2b00      	cmp	r3, #0
 8108d0a:	d1fb      	bne.n	8108d04 <ai_platform_network_post_init+0x28>
 8108d0c:	4b34      	ldr	r3, [pc, #208]	@ (8108de0 <ai_platform_network_post_init+0x104>)
 8108d0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108d12:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108d16:	4b33      	ldr	r3, [pc, #204]	@ (8108de4 <ai_platform_network_post_init+0x108>)
 8108d18:	429a      	cmp	r2, r3
 8108d1a:	d037      	beq.n	8108d8c <ai_platform_network_post_init+0xb0>
 8108d1c:	e7fe      	b.n	8108d1c <ai_platform_network_post_init+0x40>
 8108d1e:	f7ff fb31 	bl	8108384 <_ai_platform_acquire_crc>
 8108d22:	4b2d      	ldr	r3, [pc, #180]	@ (8108dd8 <ai_platform_network_post_init+0xfc>)
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108d2e:	d010      	beq.n	8108d52 <ai_platform_network_post_init+0x76>
 8108d30:	4a2a      	ldr	r2, [pc, #168]	@ (8108ddc <ai_platform_network_post_init+0x100>)
 8108d32:	2301      	movs	r3, #1
 8108d34:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108d38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8108d3c:	2b00      	cmp	r3, #0
 8108d3e:	d1fb      	bne.n	8108d38 <ai_platform_network_post_init+0x5c>
 8108d40:	4b27      	ldr	r3, [pc, #156]	@ (8108de0 <ai_platform_network_post_init+0x104>)
 8108d42:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108d46:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108d4a:	4b26      	ldr	r3, [pc, #152]	@ (8108de4 <ai_platform_network_post_init+0x108>)
 8108d4c:	429a      	cmp	r2, r3
 8108d4e:	d00d      	beq.n	8108d6c <ai_platform_network_post_init+0x90>
 8108d50:	e7fe      	b.n	8108d50 <ai_platform_network_post_init+0x74>
 8108d52:	4a25      	ldr	r2, [pc, #148]	@ (8108de8 <ai_platform_network_post_init+0x10c>)
 8108d54:	2301      	movs	r3, #1
 8108d56:	6093      	str	r3, [r2, #8]
 8108d58:	6893      	ldr	r3, [r2, #8]
 8108d5a:	2b00      	cmp	r3, #0
 8108d5c:	d1fc      	bne.n	8108d58 <ai_platform_network_post_init+0x7c>
 8108d5e:	4b20      	ldr	r3, [pc, #128]	@ (8108de0 <ai_platform_network_post_init+0x104>)
 8108d60:	6013      	str	r3, [r2, #0]
 8108d62:	6812      	ldr	r2, [r2, #0]
 8108d64:	4b1f      	ldr	r3, [pc, #124]	@ (8108de4 <ai_platform_network_post_init+0x108>)
 8108d66:	429a      	cmp	r2, r3
 8108d68:	d000      	beq.n	8108d6c <ai_platform_network_post_init+0x90>
 8108d6a:	e7fe      	b.n	8108d6a <ai_platform_network_post_init+0x8e>
 8108d6c:	f7ff fb0c 	bl	8108388 <_ai_platform_release_crc>
 8108d70:	2000      	movs	r0, #0
 8108d72:	bd38      	pop	{r3, r4, r5, pc}
 8108d74:	4a1c      	ldr	r2, [pc, #112]	@ (8108de8 <ai_platform_network_post_init+0x10c>)
 8108d76:	2301      	movs	r3, #1
 8108d78:	6093      	str	r3, [r2, #8]
 8108d7a:	6893      	ldr	r3, [r2, #8]
 8108d7c:	2b00      	cmp	r3, #0
 8108d7e:	d1fc      	bne.n	8108d7a <ai_platform_network_post_init+0x9e>
 8108d80:	4b17      	ldr	r3, [pc, #92]	@ (8108de0 <ai_platform_network_post_init+0x104>)
 8108d82:	6013      	str	r3, [r2, #0]
 8108d84:	6812      	ldr	r2, [r2, #0]
 8108d86:	4b17      	ldr	r3, [pc, #92]	@ (8108de4 <ai_platform_network_post_init+0x108>)
 8108d88:	429a      	cmp	r2, r3
 8108d8a:	d11a      	bne.n	8108dc2 <ai_platform_network_post_init+0xe6>
 8108d8c:	f7ff fafc 	bl	8108388 <_ai_platform_release_crc>
 8108d90:	68e3      	ldr	r3, [r4, #12]
 8108d92:	f013 0502 	ands.w	r5, r3, #2
 8108d96:	d015      	beq.n	8108dc4 <ai_platform_network_post_init+0xe8>
 8108d98:	4620      	mov	r0, r4
 8108d9a:	f000 faf7 	bl	810938c <ai_layers_post_init_all>
 8108d9e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8108da0:	b16b      	cbz	r3, 8108dbe <ai_platform_network_post_init+0xe2>
 8108da2:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8108da4:	e007      	b.n	8108db6 <ai_platform_network_post_init+0xda>
 8108da6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 8108daa:	4798      	blx	r3
 8108dac:	692b      	ldr	r3, [r5, #16]
 8108dae:	42ab      	cmp	r3, r5
 8108db0:	d005      	beq.n	8108dbe <ai_platform_network_post_init+0xe2>
 8108db2:	b123      	cbz	r3, 8108dbe <ai_platform_network_post_init+0xe2>
 8108db4:	461d      	mov	r5, r3
 8108db6:	4629      	mov	r1, r5
 8108db8:	2000      	movs	r0, #0
 8108dba:	2d00      	cmp	r5, #0
 8108dbc:	d1f3      	bne.n	8108da6 <ai_platform_network_post_init+0xca>
 8108dbe:	2001      	movs	r0, #1
 8108dc0:	bd38      	pop	{r3, r4, r5, pc}
 8108dc2:	e7fe      	b.n	8108dc2 <ai_platform_network_post_init+0xe6>
 8108dc4:	2210      	movs	r2, #16
 8108dc6:	2111      	movs	r1, #17
 8108dc8:	18a0      	adds	r0, r4, r2
 8108dca:	f000 fa9b 	bl	8109304 <core_set_error>
 8108dce:	4628      	mov	r0, r5
 8108dd0:	bd38      	pop	{r3, r4, r5, pc}
 8108dd2:	bf00      	nop
 8108dd4:	a1c00100 	.word	0xa1c00100
 8108dd8:	e0042000 	.word	0xe0042000
 8108ddc:	58024000 	.word	0x58024000
 8108de0:	f407a5c2 	.word	0xf407a5c2
 8108de4:	b5e8b5cd 	.word	0xb5e8b5cd
 8108de8:	40023000 	.word	0x40023000

08108dec <ai_platform_network_process>:
 8108dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108df0:	460e      	mov	r6, r1
 8108df2:	b085      	sub	sp, #20
 8108df4:	4693      	mov	fp, r2
 8108df6:	4605      	mov	r5, r0
 8108df8:	b120      	cbz	r0, 8108e04 <ai_platform_network_process+0x18>
 8108dfa:	4bb8      	ldr	r3, [pc, #736]	@ (81090dc <ai_platform_network_process+0x2f0>)
 8108dfc:	6802      	ldr	r2, [r0, #0]
 8108dfe:	429a      	cmp	r2, r3
 8108e00:	bf18      	it	ne
 8108e02:	2500      	movne	r5, #0
 8108e04:	f7ff fabe 	bl	8108384 <_ai_platform_acquire_crc>
 8108e08:	4bb5      	ldr	r3, [pc, #724]	@ (81090e0 <ai_platform_network_process+0x2f4>)
 8108e0a:	681b      	ldr	r3, [r3, #0]
 8108e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8108e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8108e14:	d010      	beq.n	8108e38 <ai_platform_network_process+0x4c>
 8108e16:	4ab3      	ldr	r2, [pc, #716]	@ (81090e4 <ai_platform_network_process+0x2f8>)
 8108e18:	2301      	movs	r3, #1
 8108e1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8108e1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8108e22:	2b00      	cmp	r3, #0
 8108e24:	d1fb      	bne.n	8108e1e <ai_platform_network_process+0x32>
 8108e26:	4bb0      	ldr	r3, [pc, #704]	@ (81090e8 <ai_platform_network_process+0x2fc>)
 8108e28:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8108e2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8108e30:	4bae      	ldr	r3, [pc, #696]	@ (81090ec <ai_platform_network_process+0x300>)
 8108e32:	429a      	cmp	r2, r3
 8108e34:	d00d      	beq.n	8108e52 <ai_platform_network_process+0x66>
 8108e36:	e7fe      	b.n	8108e36 <ai_platform_network_process+0x4a>
 8108e38:	4aad      	ldr	r2, [pc, #692]	@ (81090f0 <ai_platform_network_process+0x304>)
 8108e3a:	2301      	movs	r3, #1
 8108e3c:	6093      	str	r3, [r2, #8]
 8108e3e:	6893      	ldr	r3, [r2, #8]
 8108e40:	2b00      	cmp	r3, #0
 8108e42:	d1fc      	bne.n	8108e3e <ai_platform_network_process+0x52>
 8108e44:	4ba8      	ldr	r3, [pc, #672]	@ (81090e8 <ai_platform_network_process+0x2fc>)
 8108e46:	6013      	str	r3, [r2, #0]
 8108e48:	6812      	ldr	r2, [r2, #0]
 8108e4a:	4ba8      	ldr	r3, [pc, #672]	@ (81090ec <ai_platform_network_process+0x300>)
 8108e4c:	429a      	cmp	r2, r3
 8108e4e:	f040 812c 	bne.w	81090aa <ai_platform_network_process+0x2be>
 8108e52:	f7ff fa99 	bl	8108388 <_ai_platform_release_crc>
 8108e56:	2d00      	cmp	r5, #0
 8108e58:	f000 8154 	beq.w	8109104 <ai_platform_network_process+0x318>
 8108e5c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8108e5e:	2b00      	cmp	r3, #0
 8108e60:	f000 8124 	beq.w	81090ac <ai_platform_network_process+0x2c0>
 8108e64:	68eb      	ldr	r3, [r5, #12]
 8108e66:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8108e6a:	f003 0303 	and.w	r3, r3, #3
 8108e6e:	2700      	movs	r7, #0
 8108e70:	2b03      	cmp	r3, #3
 8108e72:	616f      	str	r7, [r5, #20]
 8108e74:	f040 813e 	bne.w	81090f4 <ai_platform_network_process+0x308>
 8108e78:	2e00      	cmp	r6, #0
 8108e7a:	f000 811d 	beq.w	81090b8 <ai_platform_network_process+0x2cc>
 8108e7e:	f1ba 0f00 	cmp.w	sl, #0
 8108e82:	f000 8119 	beq.w	81090b8 <ai_platform_network_process+0x2cc>
 8108e86:	f8ba 3000 	ldrh.w	r3, [sl]
 8108e8a:	2b00      	cmp	r3, #0
 8108e8c:	f000 8114 	beq.w	81090b8 <ai_platform_network_process+0x2cc>
 8108e90:	69b3      	ldr	r3, [r6, #24]
 8108e92:	f8cd b00c 	str.w	fp, [sp, #12]
 8108e96:	681b      	ldr	r3, [r3, #0]
 8108e98:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8108e9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8108ea0:	2b00      	cmp	r3, #0
 8108ea2:	d072      	beq.n	8108f8a <ai_platform_network_process+0x19e>
 8108ea4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8108ea8:	2c00      	cmp	r4, #0
 8108eaa:	d06e      	beq.n	8108f8a <ai_platform_network_process+0x19e>
 8108eac:	f8da 3008 	ldr.w	r3, [sl, #8]
 8108eb0:	f8d3 9000 	ldr.w	r9, [r3]
 8108eb4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8108eb8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8108ebc:	f000 81de 	beq.w	810927c <ai_platform_network_process+0x490>
 8108ec0:	69a3      	ldr	r3, [r4, #24]
 8108ec2:	2101      	movs	r1, #1
 8108ec4:	4630      	mov	r0, r6
 8108ec6:	685d      	ldr	r5, [r3, #4]
 8108ec8:	f7ff fa0e 	bl	81082e8 <ai_buffer_get_size>
 8108ecc:	4285      	cmp	r5, r0
 8108ece:	f0c0 811b 	bcc.w	8109108 <ai_platform_network_process+0x31c>
 8108ed2:	68e0      	ldr	r0, [r4, #12]
 8108ed4:	69b1      	ldr	r1, [r6, #24]
 8108ed6:	68c2      	ldr	r2, [r0, #12]
 8108ed8:	68cb      	ldr	r3, [r1, #12]
 8108eda:	429a      	cmp	r2, r3
 8108edc:	f040 8114 	bne.w	8109108 <ai_platform_network_process+0x31c>
 8108ee0:	6882      	ldr	r2, [r0, #8]
 8108ee2:	688b      	ldr	r3, [r1, #8]
 8108ee4:	429a      	cmp	r2, r3
 8108ee6:	f040 810f 	bne.w	8109108 <ai_platform_network_process+0x31c>
 8108eea:	6842      	ldr	r2, [r0, #4]
 8108eec:	684b      	ldr	r3, [r1, #4]
 8108eee:	429a      	cmp	r2, r3
 8108ef0:	f040 810a 	bne.w	8109108 <ai_platform_network_process+0x31c>
 8108ef4:	69a3      	ldr	r3, [r4, #24]
 8108ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8108efa:	f001 f94b 	bl	810a194 <ai_array_get_data_byte_size>
 8108efe:	4605      	mov	r5, r0
 8108f00:	4620      	mov	r0, r4
 8108f02:	f001 f95f 	bl	810a1c4 <get_tensor_byte_size>
 8108f06:	4285      	cmp	r5, r0
 8108f08:	f0c0 80fe 	bcc.w	8109108 <ai_platform_network_process+0x31c>
 8108f0c:	69a3      	ldr	r3, [r4, #24]
 8108f0e:	6818      	ldr	r0, [r3, #0]
 8108f10:	f001 f8ac 	bl	810a06c <ai_array_to_buffer_fmt>
 8108f14:	6833      	ldr	r3, [r6, #0]
 8108f16:	4058      	eors	r0, r3
 8108f18:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8108f1c:	f040 81b9 	bne.w	8109292 <ai_platform_network_process+0x4a6>
 8108f20:	6873      	ldr	r3, [r6, #4]
 8108f22:	2b00      	cmp	r3, #0
 8108f24:	f000 81ac 	beq.w	8109280 <ai_platform_network_process+0x494>
 8108f28:	69b3      	ldr	r3, [r6, #24]
 8108f2a:	681b      	ldr	r3, [r3, #0]
 8108f2c:	2b00      	cmp	r3, #0
 8108f2e:	f000 819c 	beq.w	810926a <ai_platform_network_process+0x47e>
 8108f32:	9a01      	ldr	r2, [sp, #4]
 8108f34:	429a      	cmp	r2, r3
 8108f36:	bf38      	it	cc
 8108f38:	461a      	movcc	r2, r3
 8108f3a:	4620      	mov	r0, r4
 8108f3c:	9201      	str	r2, [sp, #4]
 8108f3e:	f001 f941 	bl	810a1c4 <get_tensor_byte_size>
 8108f42:	f8c8 0008 	str.w	r0, [r8, #8]
 8108f46:	69b3      	ldr	r3, [r6, #24]
 8108f48:	681b      	ldr	r3, [r3, #0]
 8108f4a:	fb00 f303 	mul.w	r3, r0, r3
 8108f4e:	f8c8 300c 	str.w	r3, [r8, #12]
 8108f52:	6871      	ldr	r1, [r6, #4]
 8108f54:	f8c8 1004 	str.w	r1, [r8, #4]
 8108f58:	440b      	add	r3, r1
 8108f5a:	f849 300b 	str.w	r3, [r9, fp]
 8108f5e:	69a0      	ldr	r0, [r4, #24]
 8108f60:	6803      	ldr	r3, [r0, #0]
 8108f62:	009a      	lsls	r2, r3, #2
 8108f64:	f107 0701 	add.w	r7, r7, #1
 8108f68:	f106 061c 	add.w	r6, r6, #28
 8108f6c:	f100 80af 	bmi.w	81090ce <ai_platform_network_process+0x2e2>
 8108f70:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8108f74:	1a9b      	subs	r3, r3, r2
 8108f76:	4419      	add	r1, r3
 8108f78:	6081      	str	r1, [r0, #8]
 8108f7a:	69a3      	ldr	r3, [r4, #24]
 8108f7c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8108f80:	60da      	str	r2, [r3, #12]
 8108f82:	f8ba 3000 	ldrh.w	r3, [sl]
 8108f86:	42bb      	cmp	r3, r7
 8108f88:	d888      	bhi.n	8108e9c <ai_platform_network_process+0xb0>
 8108f8a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8108f8e:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8108f90:	f1bb 0f00 	cmp.w	fp, #0
 8108f94:	f000 8186 	beq.w	81092a4 <ai_platform_network_process+0x4b8>
 8108f98:	2a01      	cmp	r2, #1
 8108f9a:	f240 815e 	bls.w	810925a <ai_platform_network_process+0x46e>
 8108f9e:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8108fa2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8108fa6:	2b00      	cmp	r3, #0
 8108fa8:	f000 8157 	beq.w	810925a <ai_platform_network_process+0x46e>
 8108fac:	465e      	mov	r6, fp
 8108fae:	2700      	movs	r7, #0
 8108fb0:	462c      	mov	r4, r5
 8108fb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8108fb6:	2b00      	cmp	r3, #0
 8108fb8:	f000 80b4 	beq.w	8109124 <ai_platform_network_process+0x338>
 8108fbc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8108fc0:	2d00      	cmp	r5, #0
 8108fc2:	f000 80af 	beq.w	8109124 <ai_platform_network_process+0x338>
 8108fc6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8108fca:	f8d3 8000 	ldr.w	r8, [r3]
 8108fce:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8108fd2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8108fd6:	f000 8171 	beq.w	81092bc <ai_platform_network_process+0x4d0>
 8108fda:	69ab      	ldr	r3, [r5, #24]
 8108fdc:	2101      	movs	r1, #1
 8108fde:	685b      	ldr	r3, [r3, #4]
 8108fe0:	9302      	str	r3, [sp, #8]
 8108fe2:	4630      	mov	r0, r6
 8108fe4:	f7ff f980 	bl	81082e8 <ai_buffer_get_size>
 8108fe8:	9b02      	ldr	r3, [sp, #8]
 8108fea:	4283      	cmp	r3, r0
 8108fec:	f0c0 8134 	bcc.w	8109258 <ai_platform_network_process+0x46c>
 8108ff0:	68e8      	ldr	r0, [r5, #12]
 8108ff2:	69b1      	ldr	r1, [r6, #24]
 8108ff4:	68c2      	ldr	r2, [r0, #12]
 8108ff6:	68cb      	ldr	r3, [r1, #12]
 8108ff8:	429a      	cmp	r2, r3
 8108ffa:	f040 812d 	bne.w	8109258 <ai_platform_network_process+0x46c>
 8108ffe:	6882      	ldr	r2, [r0, #8]
 8109000:	688b      	ldr	r3, [r1, #8]
 8109002:	429a      	cmp	r2, r3
 8109004:	f040 8128 	bne.w	8109258 <ai_platform_network_process+0x46c>
 8109008:	6842      	ldr	r2, [r0, #4]
 810900a:	684b      	ldr	r3, [r1, #4]
 810900c:	429a      	cmp	r2, r3
 810900e:	f040 8123 	bne.w	8109258 <ai_platform_network_process+0x46c>
 8109012:	69ab      	ldr	r3, [r5, #24]
 8109014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8109018:	f001 f8bc 	bl	810a194 <ai_array_get_data_byte_size>
 810901c:	9002      	str	r0, [sp, #8]
 810901e:	4628      	mov	r0, r5
 8109020:	f001 f8d0 	bl	810a1c4 <get_tensor_byte_size>
 8109024:	9b02      	ldr	r3, [sp, #8]
 8109026:	4283      	cmp	r3, r0
 8109028:	f0c0 8116 	bcc.w	8109258 <ai_platform_network_process+0x46c>
 810902c:	69ab      	ldr	r3, [r5, #24]
 810902e:	6818      	ldr	r0, [r3, #0]
 8109030:	f001 f81c 	bl	810a06c <ai_array_to_buffer_fmt>
 8109034:	6833      	ldr	r3, [r6, #0]
 8109036:	4058      	eors	r0, r3
 8109038:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 810903c:	f040 8136 	bne.w	81092ac <ai_platform_network_process+0x4c0>
 8109040:	6873      	ldr	r3, [r6, #4]
 8109042:	2b00      	cmp	r3, #0
 8109044:	f000 814d 	beq.w	81092e2 <ai_platform_network_process+0x4f6>
 8109048:	69b3      	ldr	r3, [r6, #24]
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	2b00      	cmp	r3, #0
 810904e:	f000 813f 	beq.w	81092d0 <ai_platform_network_process+0x4e4>
 8109052:	9a01      	ldr	r2, [sp, #4]
 8109054:	429a      	cmp	r2, r3
 8109056:	bf38      	it	cc
 8109058:	461a      	movcc	r2, r3
 810905a:	4628      	mov	r0, r5
 810905c:	9201      	str	r2, [sp, #4]
 810905e:	f001 f8b1 	bl	810a1c4 <get_tensor_byte_size>
 8109062:	f8ca 0008 	str.w	r0, [sl, #8]
 8109066:	69b3      	ldr	r3, [r6, #24]
 8109068:	681b      	ldr	r3, [r3, #0]
 810906a:	fb00 f303 	mul.w	r3, r0, r3
 810906e:	f8ca 300c 	str.w	r3, [sl, #12]
 8109072:	6871      	ldr	r1, [r6, #4]
 8109074:	f8ca 1004 	str.w	r1, [sl, #4]
 8109078:	440b      	add	r3, r1
 810907a:	f848 300b 	str.w	r3, [r8, fp]
 810907e:	69a8      	ldr	r0, [r5, #24]
 8109080:	6803      	ldr	r3, [r0, #0]
 8109082:	009b      	lsls	r3, r3, #2
 8109084:	f107 0701 	add.w	r7, r7, #1
 8109088:	f106 061c 	add.w	r6, r6, #28
 810908c:	d445      	bmi.n	810911a <ai_platform_network_process+0x32e>
 810908e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8109092:	1a9b      	subs	r3, r3, r2
 8109094:	4419      	add	r1, r3
 8109096:	6081      	str	r1, [r0, #8]
 8109098:	69ab      	ldr	r3, [r5, #24]
 810909a:	f8da 2004 	ldr.w	r2, [sl, #4]
 810909e:	60da      	str	r2, [r3, #12]
 81090a0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 81090a4:	429f      	cmp	r7, r3
 81090a6:	d384      	bcc.n	8108fb2 <ai_platform_network_process+0x1c6>
 81090a8:	e03c      	b.n	8109124 <ai_platform_network_process+0x338>
 81090aa:	e7fe      	b.n	81090aa <ai_platform_network_process+0x2be>
 81090ac:	68ea      	ldr	r2, [r5, #12]
 81090ae:	616b      	str	r3, [r5, #20]
 81090b0:	f002 0203 	and.w	r2, r2, #3
 81090b4:	2a03      	cmp	r2, #3
 81090b6:	d11d      	bne.n	81090f4 <ai_platform_network_process+0x308>
 81090b8:	2217      	movs	r2, #23
 81090ba:	2112      	movs	r1, #18
 81090bc:	f105 0010 	add.w	r0, r5, #16
 81090c0:	f000 f920 	bl	8109304 <core_set_error>
 81090c4:	2400      	movs	r4, #0
 81090c6:	4620      	mov	r0, r4
 81090c8:	b005      	add	sp, #20
 81090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81090ce:	f8ba 3000 	ldrh.w	r3, [sl]
 81090d2:	429f      	cmp	r7, r3
 81090d4:	f4ff aee2 	bcc.w	8108e9c <ai_platform_network_process+0xb0>
 81090d8:	e757      	b.n	8108f8a <ai_platform_network_process+0x19e>
 81090da:	bf00      	nop
 81090dc:	a1c00100 	.word	0xa1c00100
 81090e0:	e0042000 	.word	0xe0042000
 81090e4:	58024000 	.word	0x58024000
 81090e8:	f407a5c2 	.word	0xf407a5c2
 81090ec:	b5e8b5cd 	.word	0xb5e8b5cd
 81090f0:	40023000 	.word	0x40023000
 81090f4:	2230      	movs	r2, #48	@ 0x30
 81090f6:	2111      	movs	r1, #17
 81090f8:	f105 0010 	add.w	r0, r5, #16
 81090fc:	f000 f902 	bl	8109304 <core_set_error>
 8109100:	2400      	movs	r4, #0
 8109102:	e7e0      	b.n	81090c6 <ai_platform_network_process+0x2da>
 8109104:	462c      	mov	r4, r5
 8109106:	e7de      	b.n	81090c6 <ai_platform_network_process+0x2da>
 8109108:	9d02      	ldr	r5, [sp, #8]
 810910a:	2218      	movs	r2, #24
 810910c:	2112      	movs	r1, #18
 810910e:	f105 0010 	add.w	r0, r5, #16
 8109112:	f000 f8f7 	bl	8109304 <core_set_error>
 8109116:	2400      	movs	r4, #0
 8109118:	e7d5      	b.n	81090c6 <ai_platform_network_process+0x2da>
 810911a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 810911e:	429f      	cmp	r7, r3
 8109120:	f4ff af47 	bcc.w	8108fb2 <ai_platform_network_process+0x1c6>
 8109124:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8109128:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 810912a:	82a3      	strh	r3, [r4, #20]
 810912c:	4625      	mov	r5, r4
 810912e:	2a00      	cmp	r2, #0
 8109130:	f040 808c 	bne.w	810924c <ai_platform_network_process+0x460>
 8109134:	4616      	mov	r6, r2
 8109136:	4617      	mov	r7, r2
 8109138:	8aec      	ldrh	r4, [r5, #22]
 810913a:	429c      	cmp	r4, r3
 810913c:	bf38      	it	cc
 810913e:	46ab      	movcc	fp, r5
 8109140:	d2c1      	bcs.n	81090c6 <ai_platform_network_process+0x2da>
 8109142:	2e00      	cmp	r6, #0
 8109144:	d030      	beq.n	81091a8 <ai_platform_network_process+0x3bc>
 8109146:	f04f 0800 	mov.w	r8, #0
 810914a:	e014      	b.n	8109176 <ai_platform_network_process+0x38a>
 810914c:	6882      	ldr	r2, [r0, #8]
 810914e:	68c5      	ldr	r5, [r0, #12]
 8109150:	6863      	ldr	r3, [r4, #4]
 8109152:	1b52      	subs	r2, r2, r5
 8109154:	4413      	add	r3, r2
 8109156:	6083      	str	r3, [r0, #8]
 8109158:	698b      	ldr	r3, [r1, #24]
 810915a:	6862      	ldr	r2, [r4, #4]
 810915c:	60da      	str	r2, [r3, #12]
 810915e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8109162:	f859 200a 	ldr.w	r2, [r9, sl]
 8109166:	440b      	add	r3, r1
 8109168:	4293      	cmp	r3, r2
 810916a:	bf24      	itt	cs
 810916c:	68e3      	ldrcs	r3, [r4, #12]
 810916e:	1ad3      	subcs	r3, r2, r3
 8109170:	6063      	str	r3, [r4, #4]
 8109172:	f108 0801 	add.w	r8, r8, #1
 8109176:	8833      	ldrh	r3, [r6, #0]
 8109178:	4543      	cmp	r3, r8
 810917a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 810917e:	d913      	bls.n	81091a8 <ai_platform_network_process+0x3bc>
 8109180:	6873      	ldr	r3, [r6, #4]
 8109182:	b18b      	cbz	r3, 81091a8 <ai_platform_network_process+0x3bc>
 8109184:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8109188:	b171      	cbz	r1, 81091a8 <ai_platform_network_process+0x3bc>
 810918a:	6988      	ldr	r0, [r1, #24]
 810918c:	68b2      	ldr	r2, [r6, #8]
 810918e:	6803      	ldr	r3, [r0, #0]
 8109190:	f8d2 9000 	ldr.w	r9, [r2]
 8109194:	009d      	lsls	r5, r3, #2
 8109196:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 810919a:	d5d7      	bpl.n	810914c <ai_platform_network_process+0x360>
 810919c:	6881      	ldr	r1, [r0, #8]
 810919e:	68a2      	ldr	r2, [r4, #8]
 81091a0:	6860      	ldr	r0, [r4, #4]
 81091a2:	f000 fedd 	bl	8109f60 <st_int8_copy>
 81091a6:	e7da      	b.n	810915e <ai_platform_network_process+0x372>
 81091a8:	4658      	mov	r0, fp
 81091aa:	f000 f903 	bl	81093b4 <ai_layers_forward_all>
 81091ae:	2f00      	cmp	r7, #0
 81091b0:	d03d      	beq.n	810922e <ai_platform_network_process+0x442>
 81091b2:	2400      	movs	r4, #0
 81091b4:	e016      	b.n	81091e4 <ai_platform_network_process+0x3f8>
 81091b6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 81091ba:	f859 100a 	ldr.w	r1, [r9, sl]
 81091be:	4413      	add	r3, r2
 81091c0:	428b      	cmp	r3, r1
 81091c2:	bf24      	itt	cs
 81091c4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 81091c8:	1acb      	subcs	r3, r1, r3
 81091ca:	f8c8 3004 	str.w	r3, [r8, #4]
 81091ce:	6981      	ldr	r1, [r0, #24]
 81091d0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 81091d4:	1b52      	subs	r2, r2, r5
 81091d6:	4413      	add	r3, r2
 81091d8:	608b      	str	r3, [r1, #8]
 81091da:	6983      	ldr	r3, [r0, #24]
 81091dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 81091e0:	60da      	str	r2, [r3, #12]
 81091e2:	3401      	adds	r4, #1
 81091e4:	883b      	ldrh	r3, [r7, #0]
 81091e6:	42a3      	cmp	r3, r4
 81091e8:	d921      	bls.n	810922e <ai_platform_network_process+0x442>
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	b1fb      	cbz	r3, 810922e <ai_platform_network_process+0x442>
 81091ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 81091f2:	b1e0      	cbz	r0, 810922e <ai_platform_network_process+0x442>
 81091f4:	68ba      	ldr	r2, [r7, #8]
 81091f6:	6983      	ldr	r3, [r0, #24]
 81091f8:	f8d2 9000 	ldr.w	r9, [r2]
 81091fc:	681a      	ldr	r2, [r3, #0]
 81091fe:	0092      	lsls	r2, r2, #2
 8109200:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8109204:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8109208:	d5d5      	bpl.n	81091b6 <ai_platform_network_process+0x3ca>
 810920a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 810920e:	6898      	ldr	r0, [r3, #8]
 8109210:	f000 fea6 	bl	8109f60 <st_int8_copy>
 8109214:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8109218:	f859 200a 	ldr.w	r2, [r9, sl]
 810921c:	440b      	add	r3, r1
 810921e:	4293      	cmp	r3, r2
 8109220:	bf24      	itt	cs
 8109222:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8109226:	1ad3      	subcs	r3, r2, r3
 8109228:	f8c8 3004 	str.w	r3, [r8, #4]
 810922c:	e7d9      	b.n	81091e2 <ai_platform_network_process+0x3f6>
 810922e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8109232:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8109236:	3401      	adds	r4, #1
 8109238:	b2a4      	uxth	r4, r4
 810923a:	42a3      	cmp	r3, r4
 810923c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8109240:	f63f af7f 	bhi.w	8109142 <ai_platform_network_process+0x356>
 8109244:	4620      	mov	r0, r4
 8109246:	b005      	add	sp, #20
 8109248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810924c:	2a01      	cmp	r2, #1
 810924e:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8109250:	d03c      	beq.n	81092cc <ai_platform_network_process+0x4e0>
 8109252:	f106 070c 	add.w	r7, r6, #12
 8109256:	e76f      	b.n	8109138 <ai_platform_network_process+0x34c>
 8109258:	4625      	mov	r5, r4
 810925a:	2218      	movs	r2, #24
 810925c:	2113      	movs	r1, #19
 810925e:	f105 0010 	add.w	r0, r5, #16
 8109262:	f000 f84f 	bl	8109304 <core_set_error>
 8109266:	2400      	movs	r4, #0
 8109268:	e72d      	b.n	81090c6 <ai_platform_network_process+0x2da>
 810926a:	9d02      	ldr	r5, [sp, #8]
 810926c:	4604      	mov	r4, r0
 810926e:	2221      	movs	r2, #33	@ 0x21
 8109270:	2112      	movs	r1, #18
 8109272:	f105 0010 	add.w	r0, r5, #16
 8109276:	f000 f845 	bl	8109304 <core_set_error>
 810927a:	e724      	b.n	81090c6 <ai_platform_network_process+0x2da>
 810927c:	9d02      	ldr	r5, [sp, #8]
 810927e:	e71b      	b.n	81090b8 <ai_platform_network_process+0x2cc>
 8109280:	9d02      	ldr	r5, [sp, #8]
 8109282:	4604      	mov	r4, r0
 8109284:	2217      	movs	r2, #23
 8109286:	2112      	movs	r1, #18
 8109288:	f105 0010 	add.w	r0, r5, #16
 810928c:	f000 f83a 	bl	8109304 <core_set_error>
 8109290:	e719      	b.n	81090c6 <ai_platform_network_process+0x2da>
 8109292:	9d02      	ldr	r5, [sp, #8]
 8109294:	2219      	movs	r2, #25
 8109296:	2112      	movs	r1, #18
 8109298:	f105 0010 	add.w	r0, r5, #16
 810929c:	f000 f832 	bl	8109304 <core_set_error>
 81092a0:	2400      	movs	r4, #0
 81092a2:	e710      	b.n	81090c6 <ai_platform_network_process+0x2da>
 81092a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 81092a8:	82ab      	strh	r3, [r5, #20]
 81092aa:	e740      	b.n	810912e <ai_platform_network_process+0x342>
 81092ac:	f104 0010 	add.w	r0, r4, #16
 81092b0:	2219      	movs	r2, #25
 81092b2:	2113      	movs	r1, #19
 81092b4:	f000 f826 	bl	8109304 <core_set_error>
 81092b8:	2400      	movs	r4, #0
 81092ba:	e704      	b.n	81090c6 <ai_platform_network_process+0x2da>
 81092bc:	f104 0010 	add.w	r0, r4, #16
 81092c0:	2217      	movs	r2, #23
 81092c2:	2113      	movs	r1, #19
 81092c4:	f000 f81e 	bl	8109304 <core_set_error>
 81092c8:	4654      	mov	r4, sl
 81092ca:	e6fc      	b.n	81090c6 <ai_platform_network_process+0x2da>
 81092cc:	2700      	movs	r7, #0
 81092ce:	e733      	b.n	8109138 <ai_platform_network_process+0x34c>
 81092d0:	4625      	mov	r5, r4
 81092d2:	2221      	movs	r2, #33	@ 0x21
 81092d4:	4604      	mov	r4, r0
 81092d6:	2113      	movs	r1, #19
 81092d8:	f105 0010 	add.w	r0, r5, #16
 81092dc:	f000 f812 	bl	8109304 <core_set_error>
 81092e0:	e6f1      	b.n	81090c6 <ai_platform_network_process+0x2da>
 81092e2:	4625      	mov	r5, r4
 81092e4:	2217      	movs	r2, #23
 81092e6:	4604      	mov	r4, r0
 81092e8:	2113      	movs	r1, #19
 81092ea:	f105 0010 	add.w	r0, r5, #16
 81092ee:	f000 f809 	bl	8109304 <core_set_error>
 81092f2:	e6e8      	b.n	81090c6 <ai_platform_network_process+0x2da>

081092f4 <core_init>:
 81092f4:	2001      	movs	r0, #1
 81092f6:	4770      	bx	lr

081092f8 <core_get_error>:
 81092f8:	4603      	mov	r3, r0
 81092fa:	2200      	movs	r2, #0
 81092fc:	6800      	ldr	r0, [r0, #0]
 81092fe:	601a      	str	r2, [r3, #0]
 8109300:	4770      	bx	lr
 8109302:	bf00      	nop

08109304 <core_set_error>:
 8109304:	4603      	mov	r3, r0
 8109306:	7800      	ldrb	r0, [r0, #0]
 8109308:	b108      	cbz	r0, 810930e <core_set_error+0xa>
 810930a:	2000      	movs	r0, #0
 810930c:	4770      	bx	lr
 810930e:	7019      	strb	r1, [r3, #0]
 8109310:	6819      	ldr	r1, [r3, #0]
 8109312:	f362 211f 	bfi	r1, r2, #8, #24
 8109316:	2001      	movs	r0, #1
 8109318:	6019      	str	r1, [r3, #0]
 810931a:	4770      	bx	lr

0810931c <ai_check_custom_types>:
 810931c:	b082      	sub	sp, #8
 810931e:	4b13      	ldr	r3, [pc, #76]	@ (810936c <ai_check_custom_types+0x50>)
 8109320:	9301      	str	r3, [sp, #4]
 8109322:	b118      	cbz	r0, 810932c <ai_check_custom_types+0x10>
 8109324:	7803      	ldrb	r3, [r0, #0]
 8109326:	2b03      	cmp	r3, #3
 8109328:	d002      	beq.n	8109330 <ai_check_custom_types+0x14>
 810932a:	2000      	movs	r0, #0
 810932c:	b002      	add	sp, #8
 810932e:	4770      	bx	lr
 8109330:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8109334:	4293      	cmp	r3, r2
 8109336:	d004      	beq.n	8109342 <ai_check_custom_types+0x26>
 8109338:	2001      	movs	r0, #1
 810933a:	f080 0001 	eor.w	r0, r0, #1
 810933e:	b002      	add	sp, #8
 8109340:	4770      	bx	lr
 8109342:	7842      	ldrb	r2, [r0, #1]
 8109344:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8109348:	429a      	cmp	r2, r3
 810934a:	f100 0001 	add.w	r0, r0, #1
 810934e:	d1f3      	bne.n	8109338 <ai_check_custom_types+0x1c>
 8109350:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8109354:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8109358:	429a      	cmp	r2, r3
 810935a:	d1ed      	bne.n	8109338 <ai_check_custom_types+0x1c>
 810935c:	7842      	ldrb	r2, [r0, #1]
 810935e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8109362:	429a      	cmp	r2, r3
 8109364:	d1e8      	bne.n	8109338 <ai_check_custom_types+0x1c>
 8109366:	2000      	movs	r0, #0
 8109368:	e7e7      	b.n	810933a <ai_check_custom_types+0x1e>
 810936a:	bf00      	nop
 810936c:	84048403 	.word	0x84048403

08109370 <ai_layers_init_all>:
 8109370:	4601      	mov	r1, r0
 8109372:	2000      	movs	r0, #0
 8109374:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8109376:	b143      	cbz	r3, 810938a <ai_layers_init_all+0x1a>
 8109378:	691a      	ldr	r2, [r3, #16]
 810937a:	60d9      	str	r1, [r3, #12]
 810937c:	429a      	cmp	r2, r3
 810937e:	f100 0001 	add.w	r0, r0, #1
 8109382:	d002      	beq.n	810938a <ai_layers_init_all+0x1a>
 8109384:	b10a      	cbz	r2, 810938a <ai_layers_init_all+0x1a>
 8109386:	4613      	mov	r3, r2
 8109388:	e7f5      	b.n	8109376 <ai_layers_init_all+0x6>
 810938a:	4770      	bx	lr

0810938c <ai_layers_post_init_all>:
 810938c:	b538      	push	{r3, r4, r5, lr}
 810938e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8109390:	2500      	movs	r5, #0
 8109392:	b16c      	cbz	r4, 81093b0 <ai_layers_post_init_all+0x24>
 8109394:	6863      	ldr	r3, [r4, #4]
 8109396:	07db      	lsls	r3, r3, #31
 8109398:	d504      	bpl.n	81093a4 <ai_layers_post_init_all+0x18>
 810939a:	6a23      	ldr	r3, [r4, #32]
 810939c:	4620      	mov	r0, r4
 810939e:	b10b      	cbz	r3, 81093a4 <ai_layers_post_init_all+0x18>
 81093a0:	4798      	blx	r3
 81093a2:	3501      	adds	r5, #1
 81093a4:	6923      	ldr	r3, [r4, #16]
 81093a6:	42a3      	cmp	r3, r4
 81093a8:	d002      	beq.n	81093b0 <ai_layers_post_init_all+0x24>
 81093aa:	b10b      	cbz	r3, 81093b0 <ai_layers_post_init_all+0x24>
 81093ac:	461c      	mov	r4, r3
 81093ae:	e7f0      	b.n	8109392 <ai_layers_post_init_all+0x6>
 81093b0:	4628      	mov	r0, r5
 81093b2:	bd38      	pop	{r3, r4, r5, pc}

081093b4 <ai_layers_forward_all>:
 81093b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81093b8:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 81093bc:	4604      	mov	r4, r0
 81093be:	f1b8 0f00 	cmp.w	r8, #0
 81093c2:	d02b      	beq.n	810941c <ai_layers_forward_all+0x68>
 81093c4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 81093c6:	6381      	str	r1, [r0, #56]	@ 0x38
 81093c8:	b321      	cbz	r1, 8109414 <ai_layers_forward_all+0x60>
 81093ca:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 81093cc:	2001      	movs	r0, #1
 81093ce:	47c0      	blx	r8
 81093d0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 81093d2:	b1fe      	cbz	r6, 8109414 <ai_layers_forward_all+0x60>
 81093d4:	2700      	movs	r7, #0
 81093d6:	4631      	mov	r1, r6
 81093d8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 81093da:	2002      	movs	r0, #2
 81093dc:	47c0      	blx	r8
 81093de:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 81093e0:	4628      	mov	r0, r5
 81093e2:	696b      	ldr	r3, [r5, #20]
 81093e4:	4798      	blx	r3
 81093e6:	692e      	ldr	r6, [r5, #16]
 81093e8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 81093ea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 81093ec:	42b5      	cmp	r5, r6
 81093ee:	f04f 0003 	mov.w	r0, #3
 81093f2:	d007      	beq.n	8109404 <ai_layers_forward_all+0x50>
 81093f4:	47c0      	blx	r8
 81093f6:	3701      	adds	r7, #1
 81093f8:	63a6      	str	r6, [r4, #56]	@ 0x38
 81093fa:	2e00      	cmp	r6, #0
 81093fc:	d1eb      	bne.n	81093d6 <ai_layers_forward_all+0x22>
 81093fe:	4638      	mov	r0, r7
 8109400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109404:	2003      	movs	r0, #3
 8109406:	47c0      	blx	r8
 8109408:	2300      	movs	r3, #0
 810940a:	3701      	adds	r7, #1
 810940c:	63a3      	str	r3, [r4, #56]	@ 0x38
 810940e:	4638      	mov	r0, r7
 8109410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109414:	2700      	movs	r7, #0
 8109416:	4638      	mov	r0, r7
 8109418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810941c:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 810941e:	6385      	str	r5, [r0, #56]	@ 0x38
 8109420:	2d00      	cmp	r5, #0
 8109422:	d0f7      	beq.n	8109414 <ai_layers_forward_all+0x60>
 8109424:	4647      	mov	r7, r8
 8109426:	696b      	ldr	r3, [r5, #20]
 8109428:	4628      	mov	r0, r5
 810942a:	4798      	blx	r3
 810942c:	462b      	mov	r3, r5
 810942e:	692d      	ldr	r5, [r5, #16]
 8109430:	429d      	cmp	r5, r3
 8109432:	d004      	beq.n	810943e <ai_layers_forward_all+0x8a>
 8109434:	63a5      	str	r5, [r4, #56]	@ 0x38
 8109436:	3701      	adds	r7, #1
 8109438:	2d00      	cmp	r5, #0
 810943a:	d1f4      	bne.n	8109426 <ai_layers_forward_all+0x72>
 810943c:	e7df      	b.n	81093fe <ai_layers_forward_all+0x4a>
 810943e:	2300      	movs	r3, #0
 8109440:	63a3      	str	r3, [r4, #56]	@ 0x38
 8109442:	3701      	adds	r7, #1
 8109444:	e7db      	b.n	81093fe <ai_layers_forward_all+0x4a>
 8109446:	bf00      	nop

08109448 <forward_dense>:
 8109448:	6983      	ldr	r3, [r0, #24]
 810944a:	881a      	ldrh	r2, [r3, #0]
 810944c:	2a00      	cmp	r2, #0
 810944e:	f000 8181 	beq.w	8109754 <forward_dense+0x30c>
 8109452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109456:	ed2d 8b02 	vpush	{d8}
 810945a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 810945e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8109462:	b095      	sub	sp, #84	@ 0x54
 8109464:	b105      	cbz	r5, 8109468 <forward_dense+0x20>
 8109466:	682d      	ldr	r5, [r5, #0]
 8109468:	2a01      	cmp	r2, #1
 810946a:	f000 828f 	beq.w	810998c <forward_dense+0x544>
 810946e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8109472:	b106      	cbz	r6, 8109476 <forward_dense+0x2e>
 8109474:	6836      	ldr	r6, [r6, #0]
 8109476:	2a02      	cmp	r2, #2
 8109478:	f000 816e 	beq.w	8109758 <forward_dense+0x310>
 810947c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8109480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8109482:	2b00      	cmp	r3, #0
 8109484:	f000 8274 	beq.w	8109970 <forward_dense+0x528>
 8109488:	4619      	mov	r1, r3
 810948a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 810948e:	6809      	ldr	r1, [r1, #0]
 8109490:	910d      	str	r1, [sp, #52]	@ 0x34
 8109492:	2b01      	cmp	r3, #1
 8109494:	f240 826e 	bls.w	8109974 <forward_dense+0x52c>
 8109498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810949a:	685b      	ldr	r3, [r3, #4]
 810949c:	930b      	str	r3, [sp, #44]	@ 0x2c
 810949e:	460b      	mov	r3, r1
 81094a0:	68e8      	ldr	r0, [r5, #12]
 81094a2:	68f7      	ldr	r7, [r6, #12]
 81094a4:	6840      	ldr	r0, [r0, #4]
 81094a6:	6999      	ldr	r1, [r3, #24]
 81094a8:	9013      	str	r0, [sp, #76]	@ 0x4c
 81094aa:	6878      	ldr	r0, [r7, #4]
 81094ac:	680b      	ldr	r3, [r1, #0]
 81094ae:	9012      	str	r0, [sp, #72]	@ 0x48
 81094b0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 81094b4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 81094b8:	fb00 f404 	mul.w	r4, r0, r4
 81094bc:	f3c3 5041 	ubfx	r0, r3, #21, #2
 81094c0:	fa4e f000 	asr.w	r0, lr, r0
 81094c4:	2a03      	cmp	r2, #3
 81094c6:	9010      	str	r0, [sp, #64]	@ 0x40
 81094c8:	f000 825d 	beq.w	8109986 <forward_dense+0x53e>
 81094cc:	f8dc 2028 	ldr.w	r2, [ip, #40]	@ 0x28
 81094d0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 81094d4:	2a00      	cmp	r2, #0
 81094d6:	f000 8246 	beq.w	8109966 <forward_dense+0x51e>
 81094da:	6812      	ldr	r2, [r2, #0]
 81094dc:	2a00      	cmp	r2, #0
 81094de:	f000 8242 	beq.w	8109966 <forward_dense+0x51e>
 81094e2:	2b04      	cmp	r3, #4
 81094e4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 81094e8:	f000 822c 	beq.w	8109944 <forward_dense+0x4fc>
 81094ec:	2b08      	cmp	r3, #8
 81094ee:	f000 8229 	beq.w	8109944 <forward_dense+0x4fc>
 81094f2:	f04f 0b00 	mov.w	fp, #0
 81094f6:	69b2      	ldr	r2, [r6, #24]
 81094f8:	69ab      	ldr	r3, [r5, #24]
 81094fa:	6891      	ldr	r1, [r2, #8]
 81094fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 81094fe:	689b      	ldr	r3, [r3, #8]
 8109500:	6952      	ldr	r2, [r2, #20]
 8109502:	9106      	str	r1, [sp, #24]
 8109504:	fb07 f404 	mul.w	r4, r7, r4
 8109508:	f8d2 9004 	ldr.w	r9, [r2, #4]
 810950c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 810950e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8109512:	4281      	cmp	r1, r0
 8109514:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8109518:	900e      	str	r0, [sp, #56]	@ 0x38
 810951a:	940c      	str	r4, [sp, #48]	@ 0x30
 810951c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8109520:	f080 8113 	bcs.w	810974a <forward_dense+0x302>
 8109524:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8109526:	ed9f 8a93 	vldr	s16, [pc, #588]	@ 8109774 <forward_dense+0x32c>
 810952a:	f021 0201 	bic.w	r2, r1, #1
 810952e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8109532:	9204      	str	r2, [sp, #16]
 8109534:	f001 0201 	and.w	r2, r1, #1
 8109538:	08c8      	lsrs	r0, r1, #3
 810953a:	9208      	str	r2, [sp, #32]
 810953c:	008a      	lsls	r2, r1, #2
 810953e:	f001 0a07 	and.w	sl, r1, #7
 8109542:	920f      	str	r2, [sp, #60]	@ 0x3c
 8109544:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8109548:	3320      	adds	r3, #32
 810954a:	465c      	mov	r4, fp
 810954c:	9007      	str	r0, [sp, #28]
 810954e:	46cb      	mov	fp, r9
 8109550:	9205      	str	r2, [sp, #20]
 8109552:	9302      	str	r3, [sp, #8]
 8109554:	46c1      	mov	r9, r8
 8109556:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
 810955a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810955c:	699b      	ldr	r3, [r3, #24]
 810955e:	689a      	ldr	r2, [r3, #8]
 8109560:	9b02      	ldr	r3, [sp, #8]
 8109562:	3b20      	subs	r3, #32
 8109564:	930a      	str	r3, [sp, #40]	@ 0x28
 8109566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109568:	b10b      	cbz	r3, 810956e <forward_dense+0x126>
 810956a:	699b      	ldr	r3, [r3, #24]
 810956c:	689b      	ldr	r3, [r3, #8]
 810956e:	2c00      	cmp	r4, #0
 8109570:	f000 81da 	beq.w	8109928 <forward_dense+0x4e0>
 8109574:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8109576:	2904      	cmp	r1, #4
 8109578:	9906      	ldr	r1, [sp, #24]
 810957a:	f000 80fd 	beq.w	8109778 <forward_dense+0x330>
 810957e:	4549      	cmp	r1, r9
 8109580:	f080 80d2 	bcs.w	8109728 <forward_dense+0x2e0>
 8109584:	460f      	mov	r7, r1
 8109586:	9907      	ldr	r1, [sp, #28]
 8109588:	f8dd 8008 	ldr.w	r8, [sp, #8]
 810958c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8109590:	1c4e      	adds	r6, r1, #1
 8109592:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8109596:	4694      	mov	ip, r2
 8109598:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 810959a:	468e      	mov	lr, r1
 810959c:	2b00      	cmp	r3, #0
 810959e:	f000 80de 	beq.w	810975e <forward_dense+0x316>
 81095a2:	ecf3 2a01 	vldmia	r3!, {s5}
 81095a6:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8109774 <forward_dense+0x32c>
 81095aa:	f1be 0f00 	cmp.w	lr, #0
 81095ae:	f000 80de 	beq.w	810976e <forward_dense+0x326>
 81095b2:	f10c 0108 	add.w	r1, ip, #8
 81095b6:	4640      	mov	r0, r8
 81095b8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 81095bc:	ed10 3a07 	vldr	s6, [r0, #-28]	@ 0xffffffe4
 81095c0:	ed50 3a08 	vldr	s7, [r0, #-32]	@ 0xffffffe0
 81095c4:	ed10 4a06 	vldr	s8, [r0, #-24]	@ 0xffffffe8
 81095c8:	ed50 4a05 	vldr	s9, [r0, #-20]	@ 0xffffffec
 81095cc:	ed10 5a04 	vldr	s10, [r0, #-16]
 81095d0:	ed50 5a03 	vldr	s11, [r0, #-12]
 81095d4:	ed10 6a02 	vldr	s12, [r0, #-8]
 81095d8:	ed50 6a01 	vldr	s13, [r0, #-4]
 81095dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81095e0:	edd5 7a00 	vldr	s15, [r5]
 81095e4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 81095e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81095ec:	ee67 7a83 	vmul.f32	s15, s15, s6
 81095f0:	ed95 3a00 	vldr	s6, [r5]
 81095f4:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 81095f8:	eee3 7a23 	vfma.f32	s15, s6, s7
 81095fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109600:	3108      	adds	r1, #8
 8109602:	edd5 3a00 	vldr	s7, [r5]
 8109606:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 810960a:	eee3 7a84 	vfma.f32	s15, s7, s8
 810960e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109612:	3020      	adds	r0, #32
 8109614:	ed95 4a00 	vldr	s8, [r5]
 8109618:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 810961c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109620:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109624:	edd5 4a00 	vldr	s9, [r5]
 8109628:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 810962c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8109630:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109634:	ed95 5a00 	vldr	s10, [r5]
 8109638:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 810963c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109640:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109644:	edd5 5a00 	vldr	s11, [r5]
 8109648:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 810964c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109650:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109654:	428e      	cmp	r6, r1
 8109656:	ed95 6a00 	vldr	s12, [r5]
 810965a:	eee6 7a26 	vfma.f32	s15, s12, s13
 810965e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109662:	d1a9      	bne.n	81095b8 <forward_dense+0x170>
 8109664:	f1a6 0108 	sub.w	r1, r6, #8
 8109668:	4650      	mov	r0, sl
 810966a:	2a00      	cmp	r2, #0
 810966c:	d04a      	beq.n	8109704 <forward_dense+0x2bc>
 810966e:	780d      	ldrb	r5, [r1, #0]
 8109670:	edd0 6a00 	vldr	s13, [r0]
 8109674:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109678:	edd5 7a00 	vldr	s15, [r5]
 810967c:	2a01      	cmp	r2, #1
 810967e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109682:	d03f      	beq.n	8109704 <forward_dense+0x2bc>
 8109684:	784d      	ldrb	r5, [r1, #1]
 8109686:	edd0 6a01 	vldr	s13, [r0, #4]
 810968a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 810968e:	edd5 7a00 	vldr	s15, [r5]
 8109692:	2a02      	cmp	r2, #2
 8109694:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109698:	d034      	beq.n	8109704 <forward_dense+0x2bc>
 810969a:	788d      	ldrb	r5, [r1, #2]
 810969c:	edd0 6a02 	vldr	s13, [r0, #8]
 81096a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81096a4:	edd5 7a00 	vldr	s15, [r5]
 81096a8:	2a03      	cmp	r2, #3
 81096aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 81096ae:	d029      	beq.n	8109704 <forward_dense+0x2bc>
 81096b0:	78cd      	ldrb	r5, [r1, #3]
 81096b2:	edd0 6a03 	vldr	s13, [r0, #12]
 81096b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81096ba:	edd5 7a00 	vldr	s15, [r5]
 81096be:	2a04      	cmp	r2, #4
 81096c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 81096c4:	d01e      	beq.n	8109704 <forward_dense+0x2bc>
 81096c6:	790d      	ldrb	r5, [r1, #4]
 81096c8:	edd0 6a04 	vldr	s13, [r0, #16]
 81096cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81096d0:	edd5 7a00 	vldr	s15, [r5]
 81096d4:	2a05      	cmp	r2, #5
 81096d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 81096da:	d013      	beq.n	8109704 <forward_dense+0x2bc>
 81096dc:	794d      	ldrb	r5, [r1, #5]
 81096de:	edd0 6a05 	vldr	s13, [r0, #20]
 81096e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 81096e6:	edd5 7a00 	vldr	s15, [r5]
 81096ea:	2a06      	cmp	r2, #6
 81096ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 81096f0:	d008      	beq.n	8109704 <forward_dense+0x2bc>
 81096f2:	7989      	ldrb	r1, [r1, #6]
 81096f4:	edd0 7a06 	vldr	s15, [r0, #24]
 81096f8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 81096fc:	edd1 6a00 	vldr	s13, [r1]
 8109700:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109704:	44dc      	add	ip, fp
 8109706:	445e      	add	r6, fp
 8109708:	ee32 7a87 	vadd.f32	s14, s5, s14
 810970c:	eca7 7a01 	vstmia	r7!, {s14}
 8109710:	454f      	cmp	r7, r9
 8109712:	f4ff af43 	bcc.w	810959c <forward_dense+0x154>
 8109716:	9a06      	ldr	r2, [sp, #24]
 8109718:	eba9 0302 	sub.w	r3, r9, r2
 810971c:	3b01      	subs	r3, #1
 810971e:	f023 0303 	bic.w	r3, r3, #3
 8109722:	3304      	adds	r3, #4
 8109724:	18d3      	adds	r3, r2, r3
 8109726:	9306      	str	r3, [sp, #24]
 8109728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810972a:	9a05      	ldr	r2, [sp, #20]
 810972c:	4499      	add	r9, r3
 810972e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8109730:	441a      	add	r2, r3
 8109732:	9205      	str	r2, [sp, #20]
 8109734:	9a02      	ldr	r2, [sp, #8]
 8109736:	441a      	add	r2, r3
 8109738:	9202      	str	r2, [sp, #8]
 810973a:	9a04      	ldr	r2, [sp, #16]
 810973c:	441a      	add	r2, r3
 810973e:	9204      	str	r2, [sp, #16]
 8109740:	9b06      	ldr	r3, [sp, #24]
 8109742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8109744:	4293      	cmp	r3, r2
 8109746:	f4ff af08 	bcc.w	810955a <forward_dense+0x112>
 810974a:	b015      	add	sp, #84	@ 0x54
 810974c:	ecbd 8b02 	vpop	{d8}
 8109750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109754:	6853      	ldr	r3, [r2, #4]
 8109756:	deff      	udf	#255	@ 0xff
 8109758:	2300      	movs	r3, #0
 810975a:	685b      	ldr	r3, [r3, #4]
 810975c:	deff      	udf	#255	@ 0xff
 810975e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8109774 <forward_dense+0x32c>
 8109762:	eef0 2a48 	vmov.f32	s5, s16
 8109766:	f1be 0f00 	cmp.w	lr, #0
 810976a:	f47f af22 	bne.w	81095b2 <forward_dense+0x16a>
 810976e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8109770:	4661      	mov	r1, ip
 8109772:	e77a      	b.n	810966a <forward_dense+0x222>
 8109774:	00000000 	.word	0x00000000
 8109778:	4549      	cmp	r1, r9
 810977a:	d2d5      	bcs.n	8109728 <forward_dense+0x2e0>
 810977c:	9807      	ldr	r0, [sp, #28]
 810977e:	9103      	str	r1, [sp, #12]
 8109780:	9904      	ldr	r1, [sp, #16]
 8109782:	f100 0c01 	add.w	ip, r0, #1
 8109786:	3901      	subs	r1, #1
 8109788:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 810978c:	9109      	str	r1, [sp, #36]	@ 0x24
 810978e:	2b00      	cmp	r3, #0
 8109790:	f000 80b2 	beq.w	81098f8 <forward_dense+0x4b0>
 8109794:	9907      	ldr	r1, [sp, #28]
 8109796:	ecf3 2a01 	vldmia	r3!, {s5}
 810979a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 8109774 <forward_dense+0x32c>
 810979e:	2900      	cmp	r1, #0
 81097a0:	f000 80b2 	beq.w	8109908 <forward_dense+0x4c0>
 81097a4:	9902      	ldr	r1, [sp, #8]
 81097a6:	1d10      	adds	r0, r2, #4
 81097a8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 81097ac:	ed11 2a07 	vldr	s4, [r1, #-28]	@ 0xffffffe4
 81097b0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 81097b4:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 81097b8:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 81097bc:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 81097c0:	ed11 5a04 	vldr	s10, [r1, #-16]
 81097c4:	ed51 5a03 	vldr	s11, [r1, #-12]
 81097c8:	ed11 6a02 	vldr	s12, [r1, #-8]
 81097cc:	ed51 6a01 	vldr	s13, [r1, #-4]
 81097d0:	f006 070f 	and.w	r7, r6, #15
 81097d4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 81097d8:	edd7 7a00 	vldr	s15, [r7]
 81097dc:	0936      	lsrs	r6, r6, #4
 81097de:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 81097e2:	ed96 3a00 	vldr	s6, [r6]
 81097e6:	ee67 7a82 	vmul.f32	s15, s15, s4
 81097ea:	092e      	lsrs	r6, r5, #4
 81097ec:	eee3 7a23 	vfma.f32	s15, s6, s7
 81097f0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 81097f4:	f005 050f 	and.w	r5, r5, #15
 81097f8:	edd6 3a00 	vldr	s7, [r6]
 81097fc:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8109800:	eee3 7a84 	vfma.f32	s15, s7, s8
 8109804:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109808:	0937      	lsrs	r7, r6, #4
 810980a:	ed95 4a00 	vldr	s8, [r5]
 810980e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8109812:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109816:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 810981a:	f006 060f 	and.w	r6, r6, #15
 810981e:	edd7 4a00 	vldr	s9, [r7]
 8109822:	eee4 7a85 	vfma.f32	s15, s9, s10
 8109826:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 810982a:	3004      	adds	r0, #4
 810982c:	ed96 5a00 	vldr	s10, [r6]
 8109830:	092e      	lsrs	r6, r5, #4
 8109832:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109836:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 810983a:	f005 050f 	and.w	r5, r5, #15
 810983e:	edd6 5a00 	vldr	s11, [r6]
 8109842:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109846:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 810984a:	4584      	cmp	ip, r0
 810984c:	ed95 6a00 	vldr	s12, [r5]
 8109850:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109854:	f101 0120 	add.w	r1, r1, #32
 8109858:	ee37 7a27 	vadd.f32	s14, s14, s15
 810985c:	d1a4      	bne.n	81097a8 <forward_dense+0x360>
 810985e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8109862:	f1ac 0804 	sub.w	r8, ip, #4
 8109866:	9904      	ldr	r1, [sp, #16]
 8109868:	458e      	cmp	lr, r1
 810986a:	d22a      	bcs.n	81098c2 <forward_dense+0x47a>
 810986c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810986e:	eba1 070e 	sub.w	r7, r1, lr
 8109872:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8109876:	f10e 0008 	add.w	r0, lr, #8
 810987a:	f108 36ff 	add.w	r6, r8, #4294967295
 810987e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8109882:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8109886:	ed50 5a01 	vldr	s11, [r0, #-4]
 810988a:	ed50 6a02 	vldr	s13, [r0, #-8]
 810988e:	f001 050f 	and.w	r5, r1, #15
 8109892:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8109896:	edd5 7a00 	vldr	s15, [r5]
 810989a:	0909      	lsrs	r1, r1, #4
 810989c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 81098a0:	ed91 6a00 	vldr	s12, [r1]
 81098a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 81098a8:	42b7      	cmp	r7, r6
 81098aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 81098ae:	f100 0008 	add.w	r0, r0, #8
 81098b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 81098b6:	d1e4      	bne.n	8109882 <forward_dense+0x43a>
 81098b8:	f10a 0a01 	add.w	sl, sl, #1
 81098bc:	44d0      	add	r8, sl
 81098be:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 81098c2:	9908      	ldr	r1, [sp, #32]
 81098c4:	b321      	cbz	r1, 8109910 <forward_dense+0x4c8>
 81098c6:	f898 1000 	ldrb.w	r1, [r8]
 81098ca:	edde 7a00 	vldr	s15, [lr]
 81098ce:	0909      	lsrs	r1, r1, #4
 81098d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 81098d4:	edd1 6a00 	vldr	s13, [r1]
 81098d8:	9903      	ldr	r1, [sp, #12]
 81098da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 81098de:	445a      	add	r2, fp
 81098e0:	44dc      	add	ip, fp
 81098e2:	ee72 2a87 	vadd.f32	s5, s5, s14
 81098e6:	ece1 2a01 	vstmia	r1!, {s5}
 81098ea:	4589      	cmp	r9, r1
 81098ec:	9103      	str	r1, [sp, #12]
 81098ee:	f67f af12 	bls.w	8109716 <forward_dense+0x2ce>
 81098f2:	2b00      	cmp	r3, #0
 81098f4:	f47f af4e 	bne.w	8109794 <forward_dense+0x34c>
 81098f8:	9907      	ldr	r1, [sp, #28]
 81098fa:	ed1f 7a62 	vldr	s14, [pc, #-392]	@ 8109774 <forward_dense+0x32c>
 81098fe:	eef0 2a48 	vmov.f32	s5, s16
 8109902:	2900      	cmp	r1, #0
 8109904:	f47f af4e 	bne.w	81097a4 <forward_dense+0x35c>
 8109908:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 810990c:	4690      	mov	r8, r2
 810990e:	e7aa      	b.n	8109866 <forward_dense+0x41e>
 8109910:	9903      	ldr	r1, [sp, #12]
 8109912:	ee32 7a87 	vadd.f32	s14, s5, s14
 8109916:	445a      	add	r2, fp
 8109918:	eca1 7a01 	vstmia	r1!, {s14}
 810991c:	4549      	cmp	r1, r9
 810991e:	9103      	str	r1, [sp, #12]
 8109920:	44dc      	add	ip, fp
 8109922:	f4ff af34 	bcc.w	810978e <forward_dense+0x346>
 8109926:	e6f6      	b.n	8109716 <forward_dense+0x2ce>
 8109928:	9912      	ldr	r1, [sp, #72]	@ 0x48
 810992a:	9d06      	ldr	r5, [sp, #24]
 810992c:	9101      	str	r1, [sp, #4]
 810992e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8109930:	9100      	str	r1, [sp, #0]
 8109932:	4628      	mov	r0, r5
 8109934:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8109936:	f000 f9ef 	bl	8109d18 <forward_lite_dense_if32of32wf32>
 810993a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 810993c:	462b      	mov	r3, r5
 810993e:	4413      	add	r3, r2
 8109940:	9306      	str	r3, [sp, #24]
 8109942:	e6f1      	b.n	8109728 <forward_dense+0x2e0>
 8109944:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8109948:	f1b9 0f00 	cmp.w	r9, #0
 810994c:	d016      	beq.n	810997c <forward_dense+0x534>
 810994e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8109952:	f000 fbf7 	bl	810a144 <ai_array_get_byte_size>
 8109956:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 810995a:	4602      	mov	r2, r0
 810995c:	4659      	mov	r1, fp
 810995e:	4640      	mov	r0, r8
 8109960:	f000 fafe 	bl	8109f60 <st_int8_copy>
 8109964:	e5c7      	b.n	81094f6 <forward_dense+0xae>
 8109966:	2b04      	cmp	r3, #4
 8109968:	d00a      	beq.n	8109980 <forward_dense+0x538>
 810996a:	f04f 0900 	mov.w	r9, #0
 810996e:	e5bd      	b.n	81094ec <forward_dense+0xa4>
 8109970:	930d      	str	r3, [sp, #52]	@ 0x34
 8109972:	e595      	b.n	81094a0 <forward_dense+0x58>
 8109974:	2300      	movs	r3, #0
 8109976:	930b      	str	r3, [sp, #44]	@ 0x2c
 8109978:	460b      	mov	r3, r1
 810997a:	e591      	b.n	81094a0 <forward_dense+0x58>
 810997c:	46c3      	mov	fp, r8
 810997e:	e5ba      	b.n	81094f6 <forward_dense+0xae>
 8109980:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8109984:	e5b7      	b.n	81094f6 <forward_dense+0xae>
 8109986:	2300      	movs	r3, #0
 8109988:	685b      	ldr	r3, [r3, #4]
 810998a:	deff      	udf	#255	@ 0xff
 810998c:	2300      	movs	r3, #0
 810998e:	685b      	ldr	r3, [r3, #4]
 8109990:	deff      	udf	#255	@ 0xff
 8109992:	bf00      	nop

08109994 <forward_relu>:
 8109994:	6982      	ldr	r2, [r0, #24]
 8109996:	8813      	ldrh	r3, [r2, #0]
 8109998:	2b00      	cmp	r3, #0
 810999a:	d05b      	beq.n	8109a54 <forward_relu+0xc0>
 810999c:	6851      	ldr	r1, [r2, #4]
 810999e:	684a      	ldr	r2, [r1, #4]
 81099a0:	b102      	cbz	r2, 81099a4 <forward_relu+0x10>
 81099a2:	6812      	ldr	r2, [r2, #0]
 81099a4:	2b01      	cmp	r3, #1
 81099a6:	f000 8123 	beq.w	8109bf0 <forward_relu+0x25c>
 81099aa:	b470      	push	{r4, r5, r6}
 81099ac:	6909      	ldr	r1, [r1, #16]
 81099ae:	b101      	cbz	r1, 81099b2 <forward_relu+0x1e>
 81099b0:	6809      	ldr	r1, [r1, #0]
 81099b2:	69c6      	ldr	r6, [r0, #28]
 81099b4:	2e00      	cmp	r6, #0
 81099b6:	f000 8097 	beq.w	8109ae8 <forward_relu+0x154>
 81099ba:	6873      	ldr	r3, [r6, #4]
 81099bc:	6988      	ldr	r0, [r1, #24]
 81099be:	6991      	ldr	r1, [r2, #24]
 81099c0:	2b01      	cmp	r3, #1
 81099c2:	f000 80c1 	beq.w	8109b48 <forward_relu+0x1b4>
 81099c6:	6893      	ldr	r3, [r2, #8]
 81099c8:	6880      	ldr	r0, [r0, #8]
 81099ca:	688c      	ldr	r4, [r1, #8]
 81099cc:	0a1b      	lsrs	r3, r3, #8
 81099ce:	f000 80f2 	beq.w	8109bb6 <forward_relu+0x222>
 81099d2:	68d5      	ldr	r5, [r2, #12]
 81099d4:	2201      	movs	r2, #1
 81099d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 81099da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81099de:	42ab      	cmp	r3, r5
 81099e0:	fb01 f202 	mul.w	r2, r1, r2
 81099e4:	d1f9      	bne.n	81099da <forward_relu+0x46>
 81099e6:	68b3      	ldr	r3, [r6, #8]
 81099e8:	ed93 7a02 	vldr	s14, [r3, #8]
 81099ec:	edd3 6a00 	vldr	s13, [r3]
 81099f0:	ed93 6a01 	vldr	s12, [r3, #4]
 81099f4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 81099f8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 81099fc:	3a01      	subs	r2, #1
 81099fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109a06:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109a0a:	d425      	bmi.n	8109a58 <forward_relu+0xc4>
 8109a0c:	429c      	cmp	r4, r3
 8109a0e:	d81f      	bhi.n	8109a50 <forward_relu+0xbc>
 8109a10:	1d1a      	adds	r2, r3, #4
 8109a12:	1d01      	adds	r1, r0, #4
 8109a14:	e00d      	b.n	8109a32 <forward_relu+0x9e>
 8109a16:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a1e:	db03      	blt.n	8109a28 <forward_relu+0x94>
 8109a20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8109a24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8109a28:	3b08      	subs	r3, #8
 8109a2a:	429c      	cmp	r4, r3
 8109a2c:	ed61 7a01 	vstmdb	r1!, {s15}
 8109a30:	d80e      	bhi.n	8109a50 <forward_relu+0xbc>
 8109a32:	4613      	mov	r3, r2
 8109a34:	ed72 7a01 	vldmdb	r2!, {s15}
 8109a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8109a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a40:	d9e9      	bls.n	8109a16 <forward_relu+0x82>
 8109a42:	3b08      	subs	r3, #8
 8109a44:	eef0 7a47 	vmov.f32	s15, s14
 8109a48:	429c      	cmp	r4, r3
 8109a4a:	ed61 7a01 	vstmdb	r1!, {s15}
 8109a4e:	d9f0      	bls.n	8109a32 <forward_relu+0x9e>
 8109a50:	bc70      	pop	{r4, r5, r6}
 8109a52:	4770      	bx	lr
 8109a54:	685b      	ldr	r3, [r3, #4]
 8109a56:	deff      	udf	#255	@ 0xff
 8109a58:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8109a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a60:	d11f      	bne.n	8109aa2 <forward_relu+0x10e>
 8109a62:	429c      	cmp	r4, r3
 8109a64:	d8f4      	bhi.n	8109a50 <forward_relu+0xbc>
 8109a66:	1b1c      	subs	r4, r3, r4
 8109a68:	f024 0403 	bic.w	r4, r4, #3
 8109a6c:	1d1a      	adds	r2, r3, #4
 8109a6e:	2500      	movs	r5, #0
 8109a70:	1b1b      	subs	r3, r3, r4
 8109a72:	1d01      	adds	r1, r0, #4
 8109a74:	ed72 7a01 	vldmdb	r2!, {s15}
 8109a78:	eef4 7ae6 	vcmpe.f32	s15, s13
 8109a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a80:	dc0a      	bgt.n	8109a98 <forward_relu+0x104>
 8109a82:	429a      	cmp	r2, r3
 8109a84:	f841 5d04 	str.w	r5, [r1, #-4]!
 8109a88:	d0e2      	beq.n	8109a50 <forward_relu+0xbc>
 8109a8a:	ed72 7a01 	vldmdb	r2!, {s15}
 8109a8e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8109a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109a96:	ddf4      	ble.n	8109a82 <forward_relu+0xee>
 8109a98:	429a      	cmp	r2, r3
 8109a9a:	ed61 7a01 	vstmdb	r1!, {s15}
 8109a9e:	d1e9      	bne.n	8109a74 <forward_relu+0xe0>
 8109aa0:	e7d6      	b.n	8109a50 <forward_relu+0xbc>
 8109aa2:	429c      	cmp	r4, r3
 8109aa4:	d8d4      	bhi.n	8109a50 <forward_relu+0xbc>
 8109aa6:	1b1c      	subs	r4, r3, r4
 8109aa8:	f024 0403 	bic.w	r4, r4, #3
 8109aac:	1d1a      	adds	r2, r3, #4
 8109aae:	1d01      	adds	r1, r0, #4
 8109ab0:	1b1b      	subs	r3, r3, r4
 8109ab2:	ed72 7a01 	vldmdb	r2!, {s15}
 8109ab6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109abe:	db0e      	blt.n	8109ade <forward_relu+0x14a>
 8109ac0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8109ac4:	4293      	cmp	r3, r2
 8109ac6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8109aca:	ed61 7a01 	vstmdb	r1!, {s15}
 8109ace:	d0bf      	beq.n	8109a50 <forward_relu+0xbc>
 8109ad0:	ed72 7a01 	vldmdb	r2!, {s15}
 8109ad4:	eef4 6ae7 	vcmpe.f32	s13, s15
 8109ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109adc:	daf0      	bge.n	8109ac0 <forward_relu+0x12c>
 8109ade:	4293      	cmp	r3, r2
 8109ae0:	ed61 7a01 	vstmdb	r1!, {s15}
 8109ae4:	d1e5      	bne.n	8109ab2 <forward_relu+0x11e>
 8109ae6:	e7b3      	b.n	8109a50 <forward_relu+0xbc>
 8109ae8:	6893      	ldr	r3, [r2, #8]
 8109aea:	6989      	ldr	r1, [r1, #24]
 8109aec:	6990      	ldr	r0, [r2, #24]
 8109aee:	6889      	ldr	r1, [r1, #8]
 8109af0:	6884      	ldr	r4, [r0, #8]
 8109af2:	0a1b      	lsrs	r3, r3, #8
 8109af4:	d075      	beq.n	8109be2 <forward_relu+0x24e>
 8109af6:	68d5      	ldr	r5, [r2, #12]
 8109af8:	2201      	movs	r2, #1
 8109afa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8109afe:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8109b02:	429d      	cmp	r5, r3
 8109b04:	fb00 f202 	mul.w	r2, r0, r2
 8109b08:	d1f9      	bne.n	8109afe <forward_relu+0x16a>
 8109b0a:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8109b0e:	3b01      	subs	r3, #1
 8109b10:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8109b14:	4294      	cmp	r4, r2
 8109b16:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8109b1a:	d899      	bhi.n	8109a50 <forward_relu+0xbc>
 8109b1c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8109bf8 <forward_relu+0x264>
 8109b20:	3204      	adds	r2, #4
 8109b22:	3104      	adds	r1, #4
 8109b24:	4613      	mov	r3, r2
 8109b26:	ed72 7a01 	vldmdb	r2!, {s15}
 8109b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8109b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109b32:	f1a3 0308 	sub.w	r3, r3, #8
 8109b36:	bfb8      	it	lt
 8109b38:	eef0 7a47 	vmovlt.f32	s15, s14
 8109b3c:	429c      	cmp	r4, r3
 8109b3e:	ed61 7a01 	vstmdb	r1!, {s15}
 8109b42:	d9ef      	bls.n	8109b24 <forward_relu+0x190>
 8109b44:	bc70      	pop	{r4, r5, r6}
 8109b46:	4770      	bx	lr
 8109b48:	688c      	ldr	r4, [r1, #8]
 8109b4a:	6891      	ldr	r1, [r2, #8]
 8109b4c:	6880      	ldr	r0, [r0, #8]
 8109b4e:	0a09      	lsrs	r1, r1, #8
 8109b50:	d049      	beq.n	8109be6 <forward_relu+0x252>
 8109b52:	68d5      	ldr	r5, [r2, #12]
 8109b54:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8109b58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8109b5c:	42aa      	cmp	r2, r5
 8109b5e:	fb01 f303 	mul.w	r3, r1, r3
 8109b62:	d1f9      	bne.n	8109b58 <forward_relu+0x1c4>
 8109b64:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8109b68:	3a01      	subs	r2, #1
 8109b6a:	68b1      	ldr	r1, [r6, #8]
 8109b6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109b70:	429c      	cmp	r4, r3
 8109b72:	ed91 7a00 	vldr	s14, [r1]
 8109b76:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8109b7a:	f63f af69 	bhi.w	8109a50 <forward_relu+0xbc>
 8109b7e:	2500      	movs	r5, #0
 8109b80:	3304      	adds	r3, #4
 8109b82:	1d02      	adds	r2, r0, #4
 8109b84:	ed53 7a01 	vldr	s15, [r3, #-4]
 8109b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8109b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109b90:	f1a3 0104 	sub.w	r1, r3, #4
 8109b94:	f1a3 0308 	sub.w	r3, r3, #8
 8109b98:	d406      	bmi.n	8109ba8 <forward_relu+0x214>
 8109b9a:	429c      	cmp	r4, r3
 8109b9c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8109ba0:	f63f af56 	bhi.w	8109a50 <forward_relu+0xbc>
 8109ba4:	460b      	mov	r3, r1
 8109ba6:	e7ed      	b.n	8109b84 <forward_relu+0x1f0>
 8109ba8:	429c      	cmp	r4, r3
 8109baa:	ed62 7a01 	vstmdb	r2!, {s15}
 8109bae:	f63f af4f 	bhi.w	8109a50 <forward_relu+0xbc>
 8109bb2:	460b      	mov	r3, r1
 8109bb4:	e7e6      	b.n	8109b84 <forward_relu+0x1f0>
 8109bb6:	68b3      	ldr	r3, [r6, #8]
 8109bb8:	ed93 7a02 	vldr	s14, [r3, #8]
 8109bbc:	edd3 6a00 	vldr	s13, [r3]
 8109bc0:	ed93 6a01 	vldr	s12, [r3, #4]
 8109bc4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8109bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109bcc:	d401      	bmi.n	8109bd2 <forward_relu+0x23e>
 8109bce:	4623      	mov	r3, r4
 8109bd0:	e71e      	b.n	8109a10 <forward_relu+0x7c>
 8109bd2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8109bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109bda:	4623      	mov	r3, r4
 8109bdc:	f47f af63 	bne.w	8109aa6 <forward_relu+0x112>
 8109be0:	e741      	b.n	8109a66 <forward_relu+0xd2>
 8109be2:	4622      	mov	r2, r4
 8109be4:	e79a      	b.n	8109b1c <forward_relu+0x188>
 8109be6:	68b2      	ldr	r2, [r6, #8]
 8109be8:	4623      	mov	r3, r4
 8109bea:	ed92 7a00 	vldr	s14, [r2]
 8109bee:	e7c6      	b.n	8109b7e <forward_relu+0x1ea>
 8109bf0:	2300      	movs	r3, #0
 8109bf2:	685b      	ldr	r3, [r3, #4]
 8109bf4:	deff      	udf	#255	@ 0xff
 8109bf6:	bf00      	nop
 8109bf8:	00000000 	.word	0x00000000

08109bfc <forward_sm>:
 8109bfc:	6982      	ldr	r2, [r0, #24]
 8109bfe:	8813      	ldrh	r3, [r2, #0]
 8109c00:	2b00      	cmp	r3, #0
 8109c02:	d07c      	beq.n	8109cfe <forward_sm+0x102>
 8109c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109c08:	ed2d 8b04 	vpush	{d8-d9}
 8109c0c:	6852      	ldr	r2, [r2, #4]
 8109c0e:	6854      	ldr	r4, [r2, #4]
 8109c10:	b085      	sub	sp, #20
 8109c12:	b104      	cbz	r4, 8109c16 <forward_sm+0x1a>
 8109c14:	6824      	ldr	r4, [r4, #0]
 8109c16:	2b01      	cmp	r3, #1
 8109c18:	d076      	beq.n	8109d08 <forward_sm+0x10c>
 8109c1a:	6913      	ldr	r3, [r2, #16]
 8109c1c:	2b00      	cmp	r3, #0
 8109c1e:	d076      	beq.n	8109d0e <forward_sm+0x112>
 8109c20:	681e      	ldr	r6, [r3, #0]
 8109c22:	68a3      	ldr	r3, [r4, #8]
 8109c24:	68e0      	ldr	r0, [r4, #12]
 8109c26:	68f2      	ldr	r2, [r6, #12]
 8109c28:	6845      	ldr	r5, [r0, #4]
 8109c2a:	6857      	ldr	r7, [r2, #4]
 8109c2c:	0a1b      	lsrs	r3, r3, #8
 8109c2e:	d068      	beq.n	8109d02 <forward_sm+0x106>
 8109c30:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8109c34:	2201      	movs	r2, #1
 8109c36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109c3a:	4298      	cmp	r0, r3
 8109c3c:	fb01 f202 	mul.w	r2, r1, r2
 8109c40:	d1f9      	bne.n	8109c36 <forward_sm+0x3a>
 8109c42:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8109c46:	69a2      	ldr	r2, [r4, #24]
 8109c48:	69b3      	ldr	r3, [r6, #24]
 8109c4a:	6892      	ldr	r2, [r2, #8]
 8109c4c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8109c50:	eb02 0309 	add.w	r3, r2, r9
 8109c54:	429a      	cmp	r2, r3
 8109c56:	9301      	str	r3, [sp, #4]
 8109c58:	d24c      	bcs.n	8109cf4 <forward_sm+0xf8>
 8109c5a:	00bb      	lsls	r3, r7, #2
 8109c5c:	9303      	str	r3, [sp, #12]
 8109c5e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8109c62:	00ab      	lsls	r3, r5, #2
 8109c64:	2d01      	cmp	r5, #1
 8109c66:	ed92 8a00 	vldr	s16, [r2]
 8109c6a:	9302      	str	r3, [sp, #8]
 8109c6c:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8109c70:	463e      	mov	r6, r7
 8109c72:	d93c      	bls.n	8109cee <forward_sm+0xf2>
 8109c74:	1d13      	adds	r3, r2, #4
 8109c76:	ecf3 7a01 	vldmia	r3!, {s15}
 8109c7a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8109c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109c82:	bfb8      	it	lt
 8109c84:	eeb0 8a67 	vmovlt.f32	s16, s15
 8109c88:	429e      	cmp	r6, r3
 8109c8a:	d1f4      	bne.n	8109c76 <forward_sm+0x7a>
 8109c8c:	eddf 8a21 	vldr	s17, [pc, #132]	@ 8109d14 <forward_sm+0x118>
 8109c90:	4692      	mov	sl, r2
 8109c92:	46c3      	mov	fp, r8
 8109c94:	46c1      	mov	r9, r8
 8109c96:	2400      	movs	r4, #0
 8109c98:	ecba 0a01 	vldmia	sl!, {s0}
 8109c9c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8109ca0:	f004 fe82 	bl	810e9a8 <expf>
 8109ca4:	3401      	adds	r4, #1
 8109ca6:	42a5      	cmp	r5, r4
 8109ca8:	ee78 8a80 	vadd.f32	s17, s17, s0
 8109cac:	eca9 0a01 	vstmia	r9!, {s0}
 8109cb0:	d8f2      	bhi.n	8109c98 <forward_sm+0x9c>
 8109cb2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8109cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8109cba:	d00b      	beq.n	8109cd4 <forward_sm+0xd8>
 8109cbc:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8109cc0:	2300      	movs	r3, #0
 8109cc2:	3301      	adds	r3, #1
 8109cc4:	429d      	cmp	r5, r3
 8109cc6:	eddb 7a00 	vldr	s15, [fp]
 8109cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109cce:	eceb 7a01 	vstmia	fp!, {s15}
 8109cd2:	d8f6      	bhi.n	8109cc2 <forward_sm+0xc6>
 8109cd4:	9b03      	ldr	r3, [sp, #12]
 8109cd6:	9901      	ldr	r1, [sp, #4]
 8109cd8:	4498      	add	r8, r3
 8109cda:	9b02      	ldr	r3, [sp, #8]
 8109cdc:	42b9      	cmp	r1, r7
 8109cde:	463a      	mov	r2, r7
 8109ce0:	441e      	add	r6, r3
 8109ce2:	d907      	bls.n	8109cf4 <forward_sm+0xf8>
 8109ce4:	2d01      	cmp	r5, #1
 8109ce6:	ed92 8a00 	vldr	s16, [r2]
 8109cea:	441f      	add	r7, r3
 8109cec:	d8c2      	bhi.n	8109c74 <forward_sm+0x78>
 8109cee:	2d00      	cmp	r5, #0
 8109cf0:	d0f0      	beq.n	8109cd4 <forward_sm+0xd8>
 8109cf2:	e7cb      	b.n	8109c8c <forward_sm+0x90>
 8109cf4:	b005      	add	sp, #20
 8109cf6:	ecbd 8b04 	vpop	{d8-d9}
 8109cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109cfe:	685b      	ldr	r3, [r3, #4]
 8109d00:	deff      	udf	#255	@ 0xff
 8109d02:	f04f 0904 	mov.w	r9, #4
 8109d06:	e79e      	b.n	8109c46 <forward_sm+0x4a>
 8109d08:	2300      	movs	r3, #0
 8109d0a:	685b      	ldr	r3, [r3, #4]
 8109d0c:	deff      	udf	#255	@ 0xff
 8109d0e:	68db      	ldr	r3, [r3, #12]
 8109d10:	deff      	udf	#255	@ 0xff
 8109d12:	bf00      	nop
 8109d14:	00000000 	.word	0x00000000

08109d18 <forward_lite_dense_if32of32wf32>:
 8109d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109d1c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	@ 0x24
 8109d20:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8109d24:	4287      	cmp	r7, r0
 8109d26:	f240 8106 	bls.w	8109f36 <forward_lite_dense_if32of32wf32+0x21e>
 8109d2a:	f1a6 0810 	sub.w	r8, r6, #16
 8109d2e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8109d32:	f108 0801 	add.w	r8, r8, #1
 8109d36:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8109d3a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8109d3e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8109d42:	4605      	mov	r5, r0
 8109d44:	f006 0a0f 	and.w	sl, r6, #15
 8109d48:	2e0f      	cmp	r6, #15
 8109d4a:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8109f5c <forward_lite_dense_if32of32wf32+0x244>
 8109d4e:	f240 8101 	bls.w	8109f54 <forward_lite_dense_if32of32wf32+0x23c>
 8109d52:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 8109d56:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 8109d5a:	46b6      	mov	lr, r6
 8109d5c:	ed54 5a0f 	vldr	s11, [r4, #-60]	@ 0xffffffc4
 8109d60:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 8109d64:	ed1c 6a10 	vldr	s12, [ip, #-64]	@ 0xffffffc0
 8109d68:	ed54 6a10 	vldr	s13, [r4, #-64]	@ 0xffffffc0
 8109d6c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	@ 0xffffffcc
 8109d70:	ed1c 5a0c 	vldr	s10, [ip, #-48]	@ 0xffffffd0
 8109d74:	ed1c 3a0a 	vldr	s6, [ip, #-40]	@ 0xffffffd8
 8109d78:	ed54 3a0a 	vldr	s7, [r4, #-40]	@ 0xffffffd8
 8109d7c:	ed1c 4a09 	vldr	s8, [ip, #-36]	@ 0xffffffdc
 8109d80:	ed1c 1a06 	vldr	s2, [ip, #-24]	@ 0xffffffe8
 8109d84:	ed54 1a06 	vldr	s3, [r4, #-24]	@ 0xffffffe8
 8109d88:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 8109d8c:	ed54 2a05 	vldr	s5, [r4, #-20]	@ 0xffffffec
 8109d90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8109d94:	ed5c 5a0e 	vldr	s11, [ip, #-56]	@ 0xffffffc8
 8109d98:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109d9c:	f1ae 0e10 	sub.w	lr, lr, #16
 8109da0:	f1be 0f0f 	cmp.w	lr, #15
 8109da4:	ed14 6a0e 	vldr	s12, [r4, #-56]	@ 0xffffffc8
 8109da8:	ed54 6a0d 	vldr	s13, [r4, #-52]	@ 0xffffffcc
 8109dac:	eee5 7a86 	vfma.f32	s15, s11, s12
 8109db0:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 8109db4:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 8109db8:	ed54 5a1c 	vldr	s11, [r4, #-112]	@ 0xffffff90
 8109dbc:	ed1c 6a1b 	vldr	s12, [ip, #-108]	@ 0xffffff94
 8109dc0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8109dc4:	ed54 6a1b 	vldr	s13, [r4, #-108]	@ 0xffffff94
 8109dc8:	ed54 4a19 	vldr	s9, [r4, #-100]	@ 0xffffff9c
 8109dcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109dd0:	ed1c 5a18 	vldr	s10, [ip, #-96]	@ 0xffffffa0
 8109dd4:	ed54 5a18 	vldr	s11, [r4, #-96]	@ 0xffffffa0
 8109dd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109ddc:	ed1c 6a17 	vldr	s12, [ip, #-92]	@ 0xffffffa4
 8109de0:	ed54 6a17 	vldr	s13, [r4, #-92]	@ 0xffffffa4
 8109de4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109de8:	ed1c 3a14 	vldr	s6, [ip, #-80]	@ 0xffffffb0
 8109dec:	ed54 3a14 	vldr	s7, [r4, #-80]	@ 0xffffffb0
 8109df0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109df4:	ed1c 4a13 	vldr	s8, [ip, #-76]	@ 0xffffffb4
 8109df8:	ed54 4a13 	vldr	s9, [r4, #-76]	@ 0xffffffb4
 8109dfc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109e00:	ed1c 5a12 	vldr	s10, [ip, #-72]	@ 0xffffffb8
 8109e04:	ed54 5a12 	vldr	s11, [r4, #-72]	@ 0xffffffb8
 8109e08:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109e0c:	ed1c 6a11 	vldr	s12, [ip, #-68]	@ 0xffffffbc
 8109e10:	ed54 6a11 	vldr	s13, [r4, #-68]	@ 0xffffffbc
 8109e14:	eee1 7a21 	vfma.f32	s15, s2, s3
 8109e18:	eee2 7a22 	vfma.f32	s15, s4, s5
 8109e1c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8109e20:	eee4 7a24 	vfma.f32	s15, s8, s9
 8109e24:	eee5 7a25 	vfma.f32	s15, s10, s11
 8109e28:	eee6 7a26 	vfma.f32	s15, s12, s13
 8109e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8109e30:	d894      	bhi.n	8109d5c <forward_lite_dense_if32of32wf32+0x44>
 8109e32:	eb02 0e0b 	add.w	lr, r2, fp
 8109e36:	4654      	mov	r4, sl
 8109e38:	46c4      	mov	ip, r8
 8109e3a:	2c00      	cmp	r4, #0
 8109e3c:	d075      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109e3e:	eddc 6a00 	vldr	s13, [ip]
 8109e42:	edde 7a00 	vldr	s15, [lr]
 8109e46:	2c01      	cmp	r4, #1
 8109e48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109e4c:	d06d      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109e4e:	eddc 6a01 	vldr	s13, [ip, #4]
 8109e52:	edde 7a01 	vldr	s15, [lr, #4]
 8109e56:	2c02      	cmp	r4, #2
 8109e58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109e5c:	d065      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109e5e:	eddc 6a02 	vldr	s13, [ip, #8]
 8109e62:	edde 7a02 	vldr	s15, [lr, #8]
 8109e66:	2c03      	cmp	r4, #3
 8109e68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109e6c:	d05d      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109e6e:	eddc 6a03 	vldr	s13, [ip, #12]
 8109e72:	edde 7a03 	vldr	s15, [lr, #12]
 8109e76:	2c04      	cmp	r4, #4
 8109e78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109e7c:	d055      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109e7e:	eddc 6a04 	vldr	s13, [ip, #16]
 8109e82:	edde 7a04 	vldr	s15, [lr, #16]
 8109e86:	2c05      	cmp	r4, #5
 8109e88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109e8c:	d04d      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109e8e:	eddc 6a05 	vldr	s13, [ip, #20]
 8109e92:	edde 7a05 	vldr	s15, [lr, #20]
 8109e96:	2c06      	cmp	r4, #6
 8109e98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109e9c:	d045      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109e9e:	eddc 6a06 	vldr	s13, [ip, #24]
 8109ea2:	edde 7a06 	vldr	s15, [lr, #24]
 8109ea6:	2c07      	cmp	r4, #7
 8109ea8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109eac:	d03d      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109eae:	eddc 6a07 	vldr	s13, [ip, #28]
 8109eb2:	edde 7a07 	vldr	s15, [lr, #28]
 8109eb6:	2c08      	cmp	r4, #8
 8109eb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109ebc:	d035      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109ebe:	eddc 6a08 	vldr	s13, [ip, #32]
 8109ec2:	edde 7a08 	vldr	s15, [lr, #32]
 8109ec6:	2c09      	cmp	r4, #9
 8109ec8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109ecc:	d02d      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109ece:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 8109ed2:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 8109ed6:	2c0a      	cmp	r4, #10
 8109ed8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109edc:	d025      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109ede:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 8109ee2:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 8109ee6:	2c0b      	cmp	r4, #11
 8109ee8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109eec:	d01d      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109eee:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 8109ef2:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 8109ef6:	2c0c      	cmp	r4, #12
 8109ef8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109efc:	d015      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109efe:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 8109f02:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 8109f06:	3c0d      	subs	r4, #13
 8109f08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109f0c:	d00d      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109f0e:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 8109f12:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 8109f16:	2c01      	cmp	r4, #1
 8109f18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109f1c:	d005      	beq.n	8109f2a <forward_lite_dense_if32of32wf32+0x212>
 8109f1e:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 8109f22:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 8109f26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8109f2a:	444a      	add	r2, r9
 8109f2c:	eca5 7a01 	vstmia	r5!, {s14}
 8109f30:	42af      	cmp	r7, r5
 8109f32:	f63f af09 	bhi.w	8109d48 <forward_lite_dense_if32of32wf32+0x30>
 8109f36:	b15b      	cbz	r3, 8109f50 <forward_lite_dense_if32of32wf32+0x238>
 8109f38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8109f3a:	b14a      	cbz	r2, 8109f50 <forward_lite_dense_if32of32wf32+0x238>
 8109f3c:	edd0 7a00 	vldr	s15, [r0]
 8109f40:	ecb3 7a01 	vldmia	r3!, {s14}
 8109f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8109f48:	ece0 7a01 	vstmia	r0!, {s15}
 8109f4c:	4287      	cmp	r7, r0
 8109f4e:	d1f5      	bne.n	8109f3c <forward_lite_dense_if32of32wf32+0x224>
 8109f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109f54:	4634      	mov	r4, r6
 8109f56:	4696      	mov	lr, r2
 8109f58:	468c      	mov	ip, r1
 8109f5a:	e76e      	b.n	8109e3a <forward_lite_dense_if32of32wf32+0x122>
 8109f5c:	00000000 	.word	0x00000000

08109f60 <st_int8_copy>:
 8109f60:	4288      	cmp	r0, r1
 8109f62:	d057      	beq.n	810a014 <st_int8_copy+0xb4>
 8109f64:	2a00      	cmp	r2, #0
 8109f66:	d055      	beq.n	810a014 <st_int8_copy+0xb4>
 8109f68:	4288      	cmp	r0, r1
 8109f6a:	d354      	bcc.n	810a016 <st_int8_copy+0xb6>
 8109f6c:	078b      	lsls	r3, r1, #30
 8109f6e:	d102      	bne.n	8109f76 <st_int8_copy+0x16>
 8109f70:	e009      	b.n	8109f86 <st_int8_copy+0x26>
 8109f72:	2a00      	cmp	r2, #0
 8109f74:	d05c      	beq.n	810a030 <st_int8_copy+0xd0>
 8109f76:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8109f7a:	f801 3b01 	strb.w	r3, [r1], #1
 8109f7e:	078b      	lsls	r3, r1, #30
 8109f80:	f102 32ff 	add.w	r2, r2, #4294967295
 8109f84:	d1f5      	bne.n	8109f72 <st_int8_copy+0x12>
 8109f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109f8a:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8109f8e:	d069      	beq.n	810a064 <st_int8_copy+0x104>
 8109f90:	ea41 0300 	orr.w	r3, r1, r0
 8109f94:	075b      	lsls	r3, r3, #29
 8109f96:	d14c      	bne.n	810a032 <st_int8_copy+0xd2>
 8109f98:	f10e 33ff 	add.w	r3, lr, #4294967295
 8109f9c:	2b01      	cmp	r3, #1
 8109f9e:	d948      	bls.n	810a032 <st_int8_copy+0xd2>
 8109fa0:	f100 0310 	add.w	r3, r0, #16
 8109fa4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8109fa8:	f101 0c10 	add.w	ip, r1, #16
 8109fac:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8109fb0:	ed13 6b04 	vldr	d6, [r3, #-16]
 8109fb4:	ed13 7b02 	vldr	d7, [r3, #-8]
 8109fb8:	3310      	adds	r3, #16
 8109fba:	4573      	cmp	r3, lr
 8109fbc:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8109fc0:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8109fc4:	f10c 0c10 	add.w	ip, ip, #16
 8109fc8:	d1f2      	bne.n	8109fb0 <st_int8_copy+0x50>
 8109fca:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8109fce:	4421      	add	r1, r4
 8109fd0:	4420      	add	r0, r4
 8109fd2:	f002 0203 	and.w	r2, r2, #3
 8109fd6:	b16b      	cbz	r3, 8109ff4 <st_int8_copy+0x94>
 8109fd8:	6804      	ldr	r4, [r0, #0]
 8109fda:	600c      	str	r4, [r1, #0]
 8109fdc:	1e5c      	subs	r4, r3, #1
 8109fde:	d005      	beq.n	8109fec <st_int8_copy+0x8c>
 8109fe0:	6845      	ldr	r5, [r0, #4]
 8109fe2:	604d      	str	r5, [r1, #4]
 8109fe4:	2c01      	cmp	r4, #1
 8109fe6:	bf1c      	itt	ne
 8109fe8:	6884      	ldrne	r4, [r0, #8]
 8109fea:	608c      	strne	r4, [r1, #8]
 8109fec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8109ff0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8109ff4:	b162      	cbz	r2, 810a010 <st_int8_copy+0xb0>
 8109ff6:	f990 3000 	ldrsb.w	r3, [r0]
 8109ffa:	700b      	strb	r3, [r1, #0]
 8109ffc:	3a01      	subs	r2, #1
 8109ffe:	d007      	beq.n	810a010 <st_int8_copy+0xb0>
 810a000:	f990 3001 	ldrsb.w	r3, [r0, #1]
 810a004:	704b      	strb	r3, [r1, #1]
 810a006:	2a01      	cmp	r2, #1
 810a008:	bf1c      	itt	ne
 810a00a:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 810a00e:	708b      	strbne	r3, [r1, #2]
 810a010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a014:	4770      	bx	lr
 810a016:	1883      	adds	r3, r0, r2
 810a018:	428b      	cmp	r3, r1
 810a01a:	d9a7      	bls.n	8109f6c <st_int8_copy+0xc>
 810a01c:	4283      	cmp	r3, r0
 810a01e:	440a      	add	r2, r1
 810a020:	d9f8      	bls.n	810a014 <st_int8_copy+0xb4>
 810a022:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 810a026:	f802 1d01 	strb.w	r1, [r2, #-1]!
 810a02a:	4283      	cmp	r3, r0
 810a02c:	d1f9      	bne.n	810a022 <st_int8_copy+0xc2>
 810a02e:	4770      	bx	lr
 810a030:	4770      	bx	lr
 810a032:	ea4f 140e 	mov.w	r4, lr, lsl #4
 810a036:	460b      	mov	r3, r1
 810a038:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 810a03c:	4684      	mov	ip, r0
 810a03e:	f8dc 7000 	ldr.w	r7, [ip]
 810a042:	f8dc 6004 	ldr.w	r6, [ip, #4]
 810a046:	f8dc 5008 	ldr.w	r5, [ip, #8]
 810a04a:	f8dc 800c 	ldr.w	r8, [ip, #12]
 810a04e:	f8c3 800c 	str.w	r8, [r3, #12]
 810a052:	601f      	str	r7, [r3, #0]
 810a054:	605e      	str	r6, [r3, #4]
 810a056:	609d      	str	r5, [r3, #8]
 810a058:	3310      	adds	r3, #16
 810a05a:	459e      	cmp	lr, r3
 810a05c:	f10c 0c10 	add.w	ip, ip, #16
 810a060:	d1ed      	bne.n	810a03e <st_int8_copy+0xde>
 810a062:	e7b2      	b.n	8109fca <st_int8_copy+0x6a>
 810a064:	0893      	lsrs	r3, r2, #2
 810a066:	f002 0203 	and.w	r2, r2, #3
 810a06a:	e7b4      	b.n	8109fd6 <st_int8_copy+0x76>

0810a06c <ai_array_to_buffer_fmt>:
 810a06c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 810a070:	2b02      	cmp	r3, #2
 810a072:	d050      	beq.n	810a116 <ai_array_to_buffer_fmt+0xaa>
 810a074:	4b2a      	ldr	r3, [pc, #168]	@ (810a120 <ai_array_to_buffer_fmt+0xb4>)
 810a076:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 810a07a:	429a      	cmp	r2, r3
 810a07c:	d00b      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a07e:	dc1c      	bgt.n	810a0ba <ai_array_to_buffer_fmt+0x4e>
 810a080:	4b28      	ldr	r3, [pc, #160]	@ (810a124 <ai_array_to_buffer_fmt+0xb8>)
 810a082:	429a      	cmp	r2, r3
 810a084:	d007      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a086:	dd0b      	ble.n	810a0a0 <ai_array_to_buffer_fmt+0x34>
 810a088:	4b27      	ldr	r3, [pc, #156]	@ (810a128 <ai_array_to_buffer_fmt+0xbc>)
 810a08a:	429a      	cmp	r2, r3
 810a08c:	d003      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a08e:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 810a092:	429a      	cmp	r2, r3
 810a094:	d131      	bne.n	810a0fa <ai_array_to_buffer_fmt+0x8e>
 810a096:	4613      	mov	r3, r2
 810a098:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 810a09c:	4318      	orrs	r0, r3
 810a09e:	4770      	bx	lr
 810a0a0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 810a0a4:	429a      	cmp	r2, r3
 810a0a6:	d0f6      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a0a8:	dd2c      	ble.n	810a104 <ai_array_to_buffer_fmt+0x98>
 810a0aa:	4b20      	ldr	r3, [pc, #128]	@ (810a12c <ai_array_to_buffer_fmt+0xc0>)
 810a0ac:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 810a0b0:	429a      	cmp	r2, r3
 810a0b2:	bf18      	it	ne
 810a0b4:	2340      	movne	r3, #64	@ 0x40
 810a0b6:	4318      	orrs	r0, r3
 810a0b8:	4770      	bx	lr
 810a0ba:	4b1d      	ldr	r3, [pc, #116]	@ (810a130 <ai_array_to_buffer_fmt+0xc4>)
 810a0bc:	429a      	cmp	r2, r3
 810a0be:	d0ea      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a0c0:	dd0e      	ble.n	810a0e0 <ai_array_to_buffer_fmt+0x74>
 810a0c2:	4b1c      	ldr	r3, [pc, #112]	@ (810a134 <ai_array_to_buffer_fmt+0xc8>)
 810a0c4:	429a      	cmp	r2, r3
 810a0c6:	d0e6      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a0c8:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 810a0cc:	429a      	cmp	r2, r3
 810a0ce:	d0e2      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a0d0:	4b19      	ldr	r3, [pc, #100]	@ (810a138 <ai_array_to_buffer_fmt+0xcc>)
 810a0d2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 810a0d6:	429a      	cmp	r2, r3
 810a0d8:	bf18      	it	ne
 810a0da:	2340      	movne	r3, #64	@ 0x40
 810a0dc:	4318      	orrs	r0, r3
 810a0de:	4770      	bx	lr
 810a0e0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 810a0e4:	429a      	cmp	r2, r3
 810a0e6:	d0d6      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a0e8:	3307      	adds	r3, #7
 810a0ea:	429a      	cmp	r2, r3
 810a0ec:	d0d3      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a0ee:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 810a0f2:	429a      	cmp	r2, r3
 810a0f4:	bf18      	it	ne
 810a0f6:	2340      	movne	r3, #64	@ 0x40
 810a0f8:	e7ce      	b.n	810a098 <ai_array_to_buffer_fmt+0x2c>
 810a0fa:	4b10      	ldr	r3, [pc, #64]	@ (810a13c <ai_array_to_buffer_fmt+0xd0>)
 810a0fc:	429a      	cmp	r2, r3
 810a0fe:	bf18      	it	ne
 810a100:	2340      	movne	r3, #64	@ 0x40
 810a102:	e7c9      	b.n	810a098 <ai_array_to_buffer_fmt+0x2c>
 810a104:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 810a108:	429a      	cmp	r2, r3
 810a10a:	d0c4      	beq.n	810a096 <ai_array_to_buffer_fmt+0x2a>
 810a10c:	3380      	adds	r3, #128	@ 0x80
 810a10e:	429a      	cmp	r2, r3
 810a110:	bf18      	it	ne
 810a112:	2340      	movne	r3, #64	@ 0x40
 810a114:	e7c0      	b.n	810a098 <ai_array_to_buffer_fmt+0x2c>
 810a116:	4b0a      	ldr	r3, [pc, #40]	@ (810a140 <ai_array_to_buffer_fmt+0xd4>)
 810a118:	4003      	ands	r3, r0
 810a11a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810a11e:	e7bb      	b.n	810a098 <ai_array_to_buffer_fmt+0x2c>
 810a120:	00840040 	.word	0x00840040
 810a124:	00040840 	.word	0x00040840
 810a128:	00041040 	.word	0x00041040
 810a12c:	00040447 	.word	0x00040447
 810a130:	00840840 	.word	0x00840840
 810a134:	00841040 	.word	0x00841040
 810a138:	0084084f 	.word	0x0084084f
 810a13c:	0004084f 	.word	0x0004084f
 810a140:	00803fff 	.word	0x00803fff

0810a144 <ai_array_get_byte_size>:
 810a144:	b319      	cbz	r1, 810a18e <ai_array_get_byte_size+0x4a>
 810a146:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 810a14a:	fb03 f101 	mul.w	r1, r3, r1
 810a14e:	3107      	adds	r1, #7
 810a150:	f3c0 4243 	ubfx	r2, r0, #17, #4
 810a154:	f021 0307 	bic.w	r3, r1, #7
 810a158:	2a04      	cmp	r2, #4
 810a15a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 810a15e:	fa23 f101 	lsr.w	r1, r3, r1
 810a162:	ea4f 10e0 	mov.w	r0, r0, asr #7
 810a166:	d00b      	beq.n	810a180 <ai_array_get_byte_size+0x3c>
 810a168:	2a08      	cmp	r2, #8
 810a16a:	d002      	beq.n	810a172 <ai_array_get_byte_size+0x2e>
 810a16c:	3107      	adds	r1, #7
 810a16e:	08c8      	lsrs	r0, r1, #3
 810a170:	4770      	bx	lr
 810a172:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 810a176:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 810a17a:	3107      	adds	r1, #7
 810a17c:	08c8      	lsrs	r0, r1, #3
 810a17e:	4770      	bx	lr
 810a180:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 810a184:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 810a188:	3107      	adds	r1, #7
 810a18a:	08c8      	lsrs	r0, r1, #3
 810a18c:	4770      	bx	lr
 810a18e:	4608      	mov	r0, r1
 810a190:	4770      	bx	lr
 810a192:	bf00      	nop

0810a194 <ai_array_get_data_byte_size>:
 810a194:	b169      	cbz	r1, 810a1b2 <ai_array_get_data_byte_size+0x1e>
 810a196:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 810a19a:	fb02 f101 	mul.w	r1, r2, r1
 810a19e:	1dcb      	adds	r3, r1, #7
 810a1a0:	f023 0307 	bic.w	r3, r3, #7
 810a1a4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 810a1a8:	fa23 f000 	lsr.w	r0, r3, r0
 810a1ac:	3007      	adds	r0, #7
 810a1ae:	08c0      	lsrs	r0, r0, #3
 810a1b0:	4770      	bx	lr
 810a1b2:	4608      	mov	r0, r1
 810a1b4:	4770      	bx	lr
 810a1b6:	bf00      	nop

0810a1b8 <ai_version_get>:
 810a1b8:	0212      	lsls	r2, r2, #8
 810a1ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810a1be:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 810a1c2:	4770      	bx	lr

0810a1c4 <get_tensor_byte_size>:
 810a1c4:	b410      	push	{r4}
 810a1c6:	6983      	ldr	r3, [r0, #24]
 810a1c8:	68c4      	ldr	r4, [r0, #12]
 810a1ca:	6941      	ldr	r1, [r0, #20]
 810a1cc:	681b      	ldr	r3, [r3, #0]
 810a1ce:	68e0      	ldr	r0, [r4, #12]
 810a1d0:	4a07      	ldr	r2, [pc, #28]	@ (810a1f0 <get_tensor_byte_size+0x2c>)
 810a1d2:	68c9      	ldr	r1, [r1, #12]
 810a1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a1d8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 810a1dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 810a1e0:	fb01 f000 	mul.w	r0, r1, r0
 810a1e4:	4293      	cmp	r3, r2
 810a1e6:	bf04      	itt	eq
 810a1e8:	3007      	addeq	r0, #7
 810a1ea:	08c0      	lsreq	r0, r0, #3
 810a1ec:	4770      	bx	lr
 810a1ee:	bf00      	nop
 810a1f0:	000400c0 	.word	0x000400c0

0810a1f4 <malloc>:
 810a1f4:	4b02      	ldr	r3, [pc, #8]	@ (810a200 <malloc+0xc>)
 810a1f6:	4601      	mov	r1, r0
 810a1f8:	6818      	ldr	r0, [r3, #0]
 810a1fa:	f000 b825 	b.w	810a248 <_malloc_r>
 810a1fe:	bf00      	nop
 810a200:	10000b80 	.word	0x10000b80

0810a204 <sbrk_aligned>:
 810a204:	b570      	push	{r4, r5, r6, lr}
 810a206:	4e0f      	ldr	r6, [pc, #60]	@ (810a244 <sbrk_aligned+0x40>)
 810a208:	460c      	mov	r4, r1
 810a20a:	6831      	ldr	r1, [r6, #0]
 810a20c:	4605      	mov	r5, r0
 810a20e:	b911      	cbnz	r1, 810a216 <sbrk_aligned+0x12>
 810a210:	f001 f9aa 	bl	810b568 <_sbrk_r>
 810a214:	6030      	str	r0, [r6, #0]
 810a216:	4621      	mov	r1, r4
 810a218:	4628      	mov	r0, r5
 810a21a:	f001 f9a5 	bl	810b568 <_sbrk_r>
 810a21e:	1c43      	adds	r3, r0, #1
 810a220:	d103      	bne.n	810a22a <sbrk_aligned+0x26>
 810a222:	f04f 34ff 	mov.w	r4, #4294967295
 810a226:	4620      	mov	r0, r4
 810a228:	bd70      	pop	{r4, r5, r6, pc}
 810a22a:	1cc4      	adds	r4, r0, #3
 810a22c:	f024 0403 	bic.w	r4, r4, #3
 810a230:	42a0      	cmp	r0, r4
 810a232:	d0f8      	beq.n	810a226 <sbrk_aligned+0x22>
 810a234:	1a21      	subs	r1, r4, r0
 810a236:	4628      	mov	r0, r5
 810a238:	f001 f996 	bl	810b568 <_sbrk_r>
 810a23c:	3001      	adds	r0, #1
 810a23e:	d1f2      	bne.n	810a226 <sbrk_aligned+0x22>
 810a240:	e7ef      	b.n	810a222 <sbrk_aligned+0x1e>
 810a242:	bf00      	nop
 810a244:	1001abd0 	.word	0x1001abd0

0810a248 <_malloc_r>:
 810a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a24c:	1ccd      	adds	r5, r1, #3
 810a24e:	f025 0503 	bic.w	r5, r5, #3
 810a252:	3508      	adds	r5, #8
 810a254:	2d0c      	cmp	r5, #12
 810a256:	bf38      	it	cc
 810a258:	250c      	movcc	r5, #12
 810a25a:	2d00      	cmp	r5, #0
 810a25c:	4606      	mov	r6, r0
 810a25e:	db01      	blt.n	810a264 <_malloc_r+0x1c>
 810a260:	42a9      	cmp	r1, r5
 810a262:	d904      	bls.n	810a26e <_malloc_r+0x26>
 810a264:	230c      	movs	r3, #12
 810a266:	6033      	str	r3, [r6, #0]
 810a268:	2000      	movs	r0, #0
 810a26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a26e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810a344 <_malloc_r+0xfc>
 810a272:	f000 f869 	bl	810a348 <__malloc_lock>
 810a276:	f8d8 3000 	ldr.w	r3, [r8]
 810a27a:	461c      	mov	r4, r3
 810a27c:	bb44      	cbnz	r4, 810a2d0 <_malloc_r+0x88>
 810a27e:	4629      	mov	r1, r5
 810a280:	4630      	mov	r0, r6
 810a282:	f7ff ffbf 	bl	810a204 <sbrk_aligned>
 810a286:	1c43      	adds	r3, r0, #1
 810a288:	4604      	mov	r4, r0
 810a28a:	d158      	bne.n	810a33e <_malloc_r+0xf6>
 810a28c:	f8d8 4000 	ldr.w	r4, [r8]
 810a290:	4627      	mov	r7, r4
 810a292:	2f00      	cmp	r7, #0
 810a294:	d143      	bne.n	810a31e <_malloc_r+0xd6>
 810a296:	2c00      	cmp	r4, #0
 810a298:	d04b      	beq.n	810a332 <_malloc_r+0xea>
 810a29a:	6823      	ldr	r3, [r4, #0]
 810a29c:	4639      	mov	r1, r7
 810a29e:	4630      	mov	r0, r6
 810a2a0:	eb04 0903 	add.w	r9, r4, r3
 810a2a4:	f001 f960 	bl	810b568 <_sbrk_r>
 810a2a8:	4581      	cmp	r9, r0
 810a2aa:	d142      	bne.n	810a332 <_malloc_r+0xea>
 810a2ac:	6821      	ldr	r1, [r4, #0]
 810a2ae:	1a6d      	subs	r5, r5, r1
 810a2b0:	4629      	mov	r1, r5
 810a2b2:	4630      	mov	r0, r6
 810a2b4:	f7ff ffa6 	bl	810a204 <sbrk_aligned>
 810a2b8:	3001      	adds	r0, #1
 810a2ba:	d03a      	beq.n	810a332 <_malloc_r+0xea>
 810a2bc:	6823      	ldr	r3, [r4, #0]
 810a2be:	442b      	add	r3, r5
 810a2c0:	6023      	str	r3, [r4, #0]
 810a2c2:	f8d8 3000 	ldr.w	r3, [r8]
 810a2c6:	685a      	ldr	r2, [r3, #4]
 810a2c8:	bb62      	cbnz	r2, 810a324 <_malloc_r+0xdc>
 810a2ca:	f8c8 7000 	str.w	r7, [r8]
 810a2ce:	e00f      	b.n	810a2f0 <_malloc_r+0xa8>
 810a2d0:	6822      	ldr	r2, [r4, #0]
 810a2d2:	1b52      	subs	r2, r2, r5
 810a2d4:	d420      	bmi.n	810a318 <_malloc_r+0xd0>
 810a2d6:	2a0b      	cmp	r2, #11
 810a2d8:	d917      	bls.n	810a30a <_malloc_r+0xc2>
 810a2da:	1961      	adds	r1, r4, r5
 810a2dc:	42a3      	cmp	r3, r4
 810a2de:	6025      	str	r5, [r4, #0]
 810a2e0:	bf18      	it	ne
 810a2e2:	6059      	strne	r1, [r3, #4]
 810a2e4:	6863      	ldr	r3, [r4, #4]
 810a2e6:	bf08      	it	eq
 810a2e8:	f8c8 1000 	streq.w	r1, [r8]
 810a2ec:	5162      	str	r2, [r4, r5]
 810a2ee:	604b      	str	r3, [r1, #4]
 810a2f0:	4630      	mov	r0, r6
 810a2f2:	f000 f82f 	bl	810a354 <__malloc_unlock>
 810a2f6:	f104 000b 	add.w	r0, r4, #11
 810a2fa:	1d23      	adds	r3, r4, #4
 810a2fc:	f020 0007 	bic.w	r0, r0, #7
 810a300:	1ac2      	subs	r2, r0, r3
 810a302:	bf1c      	itt	ne
 810a304:	1a1b      	subne	r3, r3, r0
 810a306:	50a3      	strne	r3, [r4, r2]
 810a308:	e7af      	b.n	810a26a <_malloc_r+0x22>
 810a30a:	6862      	ldr	r2, [r4, #4]
 810a30c:	42a3      	cmp	r3, r4
 810a30e:	bf0c      	ite	eq
 810a310:	f8c8 2000 	streq.w	r2, [r8]
 810a314:	605a      	strne	r2, [r3, #4]
 810a316:	e7eb      	b.n	810a2f0 <_malloc_r+0xa8>
 810a318:	4623      	mov	r3, r4
 810a31a:	6864      	ldr	r4, [r4, #4]
 810a31c:	e7ae      	b.n	810a27c <_malloc_r+0x34>
 810a31e:	463c      	mov	r4, r7
 810a320:	687f      	ldr	r7, [r7, #4]
 810a322:	e7b6      	b.n	810a292 <_malloc_r+0x4a>
 810a324:	461a      	mov	r2, r3
 810a326:	685b      	ldr	r3, [r3, #4]
 810a328:	42a3      	cmp	r3, r4
 810a32a:	d1fb      	bne.n	810a324 <_malloc_r+0xdc>
 810a32c:	2300      	movs	r3, #0
 810a32e:	6053      	str	r3, [r2, #4]
 810a330:	e7de      	b.n	810a2f0 <_malloc_r+0xa8>
 810a332:	230c      	movs	r3, #12
 810a334:	6033      	str	r3, [r6, #0]
 810a336:	4630      	mov	r0, r6
 810a338:	f000 f80c 	bl	810a354 <__malloc_unlock>
 810a33c:	e794      	b.n	810a268 <_malloc_r+0x20>
 810a33e:	6005      	str	r5, [r0, #0]
 810a340:	e7d6      	b.n	810a2f0 <_malloc_r+0xa8>
 810a342:	bf00      	nop
 810a344:	1001abd4 	.word	0x1001abd4

0810a348 <__malloc_lock>:
 810a348:	4801      	ldr	r0, [pc, #4]	@ (810a350 <__malloc_lock+0x8>)
 810a34a:	f001 b95a 	b.w	810b602 <__retarget_lock_acquire_recursive>
 810a34e:	bf00      	nop
 810a350:	1001ad18 	.word	0x1001ad18

0810a354 <__malloc_unlock>:
 810a354:	4801      	ldr	r0, [pc, #4]	@ (810a35c <__malloc_unlock+0x8>)
 810a356:	f001 b955 	b.w	810b604 <__retarget_lock_release_recursive>
 810a35a:	bf00      	nop
 810a35c:	1001ad18 	.word	0x1001ad18

0810a360 <_realloc_r>:
 810a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a364:	4680      	mov	r8, r0
 810a366:	4615      	mov	r5, r2
 810a368:	460c      	mov	r4, r1
 810a36a:	b921      	cbnz	r1, 810a376 <_realloc_r+0x16>
 810a36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a370:	4611      	mov	r1, r2
 810a372:	f7ff bf69 	b.w	810a248 <_malloc_r>
 810a376:	b92a      	cbnz	r2, 810a384 <_realloc_r+0x24>
 810a378:	f001 ffa6 	bl	810c2c8 <_free_r>
 810a37c:	2400      	movs	r4, #0
 810a37e:	4620      	mov	r0, r4
 810a380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a384:	f002 fc9c 	bl	810ccc0 <_malloc_usable_size_r>
 810a388:	4285      	cmp	r5, r0
 810a38a:	4606      	mov	r6, r0
 810a38c:	d802      	bhi.n	810a394 <_realloc_r+0x34>
 810a38e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810a392:	d8f4      	bhi.n	810a37e <_realloc_r+0x1e>
 810a394:	4629      	mov	r1, r5
 810a396:	4640      	mov	r0, r8
 810a398:	f7ff ff56 	bl	810a248 <_malloc_r>
 810a39c:	4607      	mov	r7, r0
 810a39e:	2800      	cmp	r0, #0
 810a3a0:	d0ec      	beq.n	810a37c <_realloc_r+0x1c>
 810a3a2:	42b5      	cmp	r5, r6
 810a3a4:	462a      	mov	r2, r5
 810a3a6:	4621      	mov	r1, r4
 810a3a8:	bf28      	it	cs
 810a3aa:	4632      	movcs	r2, r6
 810a3ac:	f001 f92b 	bl	810b606 <memcpy>
 810a3b0:	4621      	mov	r1, r4
 810a3b2:	4640      	mov	r0, r8
 810a3b4:	f001 ff88 	bl	810c2c8 <_free_r>
 810a3b8:	463c      	mov	r4, r7
 810a3ba:	e7e0      	b.n	810a37e <_realloc_r+0x1e>

0810a3bc <__cvt>:
 810a3bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a3c0:	ec57 6b10 	vmov	r6, r7, d0
 810a3c4:	2f00      	cmp	r7, #0
 810a3c6:	460c      	mov	r4, r1
 810a3c8:	4619      	mov	r1, r3
 810a3ca:	463b      	mov	r3, r7
 810a3cc:	bfbb      	ittet	lt
 810a3ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810a3d2:	461f      	movlt	r7, r3
 810a3d4:	2300      	movge	r3, #0
 810a3d6:	232d      	movlt	r3, #45	@ 0x2d
 810a3d8:	700b      	strb	r3, [r1, #0]
 810a3da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810a3dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810a3e0:	4691      	mov	r9, r2
 810a3e2:	f023 0820 	bic.w	r8, r3, #32
 810a3e6:	bfbc      	itt	lt
 810a3e8:	4632      	movlt	r2, r6
 810a3ea:	4616      	movlt	r6, r2
 810a3ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810a3f0:	d005      	beq.n	810a3fe <__cvt+0x42>
 810a3f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 810a3f6:	d100      	bne.n	810a3fa <__cvt+0x3e>
 810a3f8:	3401      	adds	r4, #1
 810a3fa:	2102      	movs	r1, #2
 810a3fc:	e000      	b.n	810a400 <__cvt+0x44>
 810a3fe:	2103      	movs	r1, #3
 810a400:	ab03      	add	r3, sp, #12
 810a402:	9301      	str	r3, [sp, #4]
 810a404:	ab02      	add	r3, sp, #8
 810a406:	9300      	str	r3, [sp, #0]
 810a408:	ec47 6b10 	vmov	d0, r6, r7
 810a40c:	4653      	mov	r3, sl
 810a40e:	4622      	mov	r2, r4
 810a410:	f001 f996 	bl	810b740 <_dtoa_r>
 810a414:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 810a418:	4605      	mov	r5, r0
 810a41a:	d119      	bne.n	810a450 <__cvt+0x94>
 810a41c:	f019 0f01 	tst.w	r9, #1
 810a420:	d00e      	beq.n	810a440 <__cvt+0x84>
 810a422:	eb00 0904 	add.w	r9, r0, r4
 810a426:	2200      	movs	r2, #0
 810a428:	2300      	movs	r3, #0
 810a42a:	4630      	mov	r0, r6
 810a42c:	4639      	mov	r1, r7
 810a42e:	f7f6 fbd3 	bl	8100bd8 <__aeabi_dcmpeq>
 810a432:	b108      	cbz	r0, 810a438 <__cvt+0x7c>
 810a434:	f8cd 900c 	str.w	r9, [sp, #12]
 810a438:	2230      	movs	r2, #48	@ 0x30
 810a43a:	9b03      	ldr	r3, [sp, #12]
 810a43c:	454b      	cmp	r3, r9
 810a43e:	d31e      	bcc.n	810a47e <__cvt+0xc2>
 810a440:	9b03      	ldr	r3, [sp, #12]
 810a442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810a444:	1b5b      	subs	r3, r3, r5
 810a446:	4628      	mov	r0, r5
 810a448:	6013      	str	r3, [r2, #0]
 810a44a:	b004      	add	sp, #16
 810a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a450:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810a454:	eb00 0904 	add.w	r9, r0, r4
 810a458:	d1e5      	bne.n	810a426 <__cvt+0x6a>
 810a45a:	7803      	ldrb	r3, [r0, #0]
 810a45c:	2b30      	cmp	r3, #48	@ 0x30
 810a45e:	d10a      	bne.n	810a476 <__cvt+0xba>
 810a460:	2200      	movs	r2, #0
 810a462:	2300      	movs	r3, #0
 810a464:	4630      	mov	r0, r6
 810a466:	4639      	mov	r1, r7
 810a468:	f7f6 fbb6 	bl	8100bd8 <__aeabi_dcmpeq>
 810a46c:	b918      	cbnz	r0, 810a476 <__cvt+0xba>
 810a46e:	f1c4 0401 	rsb	r4, r4, #1
 810a472:	f8ca 4000 	str.w	r4, [sl]
 810a476:	f8da 3000 	ldr.w	r3, [sl]
 810a47a:	4499      	add	r9, r3
 810a47c:	e7d3      	b.n	810a426 <__cvt+0x6a>
 810a47e:	1c59      	adds	r1, r3, #1
 810a480:	9103      	str	r1, [sp, #12]
 810a482:	701a      	strb	r2, [r3, #0]
 810a484:	e7d9      	b.n	810a43a <__cvt+0x7e>

0810a486 <__exponent>:
 810a486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810a488:	2900      	cmp	r1, #0
 810a48a:	bfba      	itte	lt
 810a48c:	4249      	neglt	r1, r1
 810a48e:	232d      	movlt	r3, #45	@ 0x2d
 810a490:	232b      	movge	r3, #43	@ 0x2b
 810a492:	2909      	cmp	r1, #9
 810a494:	7002      	strb	r2, [r0, #0]
 810a496:	7043      	strb	r3, [r0, #1]
 810a498:	dd29      	ble.n	810a4ee <__exponent+0x68>
 810a49a:	f10d 0307 	add.w	r3, sp, #7
 810a49e:	461d      	mov	r5, r3
 810a4a0:	270a      	movs	r7, #10
 810a4a2:	461a      	mov	r2, r3
 810a4a4:	fbb1 f6f7 	udiv	r6, r1, r7
 810a4a8:	fb07 1416 	mls	r4, r7, r6, r1
 810a4ac:	3430      	adds	r4, #48	@ 0x30
 810a4ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 810a4b2:	460c      	mov	r4, r1
 810a4b4:	2c63      	cmp	r4, #99	@ 0x63
 810a4b6:	f103 33ff 	add.w	r3, r3, #4294967295
 810a4ba:	4631      	mov	r1, r6
 810a4bc:	dcf1      	bgt.n	810a4a2 <__exponent+0x1c>
 810a4be:	3130      	adds	r1, #48	@ 0x30
 810a4c0:	1e94      	subs	r4, r2, #2
 810a4c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 810a4c6:	1c41      	adds	r1, r0, #1
 810a4c8:	4623      	mov	r3, r4
 810a4ca:	42ab      	cmp	r3, r5
 810a4cc:	d30a      	bcc.n	810a4e4 <__exponent+0x5e>
 810a4ce:	f10d 0309 	add.w	r3, sp, #9
 810a4d2:	1a9b      	subs	r3, r3, r2
 810a4d4:	42ac      	cmp	r4, r5
 810a4d6:	bf88      	it	hi
 810a4d8:	2300      	movhi	r3, #0
 810a4da:	3302      	adds	r3, #2
 810a4dc:	4403      	add	r3, r0
 810a4de:	1a18      	subs	r0, r3, r0
 810a4e0:	b003      	add	sp, #12
 810a4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810a4e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 810a4e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 810a4ec:	e7ed      	b.n	810a4ca <__exponent+0x44>
 810a4ee:	2330      	movs	r3, #48	@ 0x30
 810a4f0:	3130      	adds	r1, #48	@ 0x30
 810a4f2:	7083      	strb	r3, [r0, #2]
 810a4f4:	70c1      	strb	r1, [r0, #3]
 810a4f6:	1d03      	adds	r3, r0, #4
 810a4f8:	e7f1      	b.n	810a4de <__exponent+0x58>
	...

0810a4fc <_printf_float>:
 810a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a500:	b08d      	sub	sp, #52	@ 0x34
 810a502:	460c      	mov	r4, r1
 810a504:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 810a508:	4616      	mov	r6, r2
 810a50a:	461f      	mov	r7, r3
 810a50c:	4605      	mov	r5, r0
 810a50e:	f000 fff3 	bl	810b4f8 <_localeconv_r>
 810a512:	6803      	ldr	r3, [r0, #0]
 810a514:	9304      	str	r3, [sp, #16]
 810a516:	4618      	mov	r0, r3
 810a518:	f7f5 ff32 	bl	8100380 <strlen>
 810a51c:	2300      	movs	r3, #0
 810a51e:	930a      	str	r3, [sp, #40]	@ 0x28
 810a520:	f8d8 3000 	ldr.w	r3, [r8]
 810a524:	9005      	str	r0, [sp, #20]
 810a526:	3307      	adds	r3, #7
 810a528:	f023 0307 	bic.w	r3, r3, #7
 810a52c:	f103 0208 	add.w	r2, r3, #8
 810a530:	f894 a018 	ldrb.w	sl, [r4, #24]
 810a534:	f8d4 b000 	ldr.w	fp, [r4]
 810a538:	f8c8 2000 	str.w	r2, [r8]
 810a53c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a540:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810a544:	9307      	str	r3, [sp, #28]
 810a546:	f8cd 8018 	str.w	r8, [sp, #24]
 810a54a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810a54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a552:	4b9c      	ldr	r3, [pc, #624]	@ (810a7c4 <_printf_float+0x2c8>)
 810a554:	f04f 32ff 	mov.w	r2, #4294967295
 810a558:	f7f6 fb70 	bl	8100c3c <__aeabi_dcmpun>
 810a55c:	bb70      	cbnz	r0, 810a5bc <_printf_float+0xc0>
 810a55e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810a562:	4b98      	ldr	r3, [pc, #608]	@ (810a7c4 <_printf_float+0x2c8>)
 810a564:	f04f 32ff 	mov.w	r2, #4294967295
 810a568:	f7f6 fb4a 	bl	8100c00 <__aeabi_dcmple>
 810a56c:	bb30      	cbnz	r0, 810a5bc <_printf_float+0xc0>
 810a56e:	2200      	movs	r2, #0
 810a570:	2300      	movs	r3, #0
 810a572:	4640      	mov	r0, r8
 810a574:	4649      	mov	r1, r9
 810a576:	f7f6 fb39 	bl	8100bec <__aeabi_dcmplt>
 810a57a:	b110      	cbz	r0, 810a582 <_printf_float+0x86>
 810a57c:	232d      	movs	r3, #45	@ 0x2d
 810a57e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a582:	4a91      	ldr	r2, [pc, #580]	@ (810a7c8 <_printf_float+0x2cc>)
 810a584:	4b91      	ldr	r3, [pc, #580]	@ (810a7cc <_printf_float+0x2d0>)
 810a586:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 810a58a:	bf94      	ite	ls
 810a58c:	4690      	movls	r8, r2
 810a58e:	4698      	movhi	r8, r3
 810a590:	2303      	movs	r3, #3
 810a592:	6123      	str	r3, [r4, #16]
 810a594:	f02b 0304 	bic.w	r3, fp, #4
 810a598:	6023      	str	r3, [r4, #0]
 810a59a:	f04f 0900 	mov.w	r9, #0
 810a59e:	9700      	str	r7, [sp, #0]
 810a5a0:	4633      	mov	r3, r6
 810a5a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 810a5a4:	4621      	mov	r1, r4
 810a5a6:	4628      	mov	r0, r5
 810a5a8:	f000 f9d2 	bl	810a950 <_printf_common>
 810a5ac:	3001      	adds	r0, #1
 810a5ae:	f040 808d 	bne.w	810a6cc <_printf_float+0x1d0>
 810a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 810a5b6:	b00d      	add	sp, #52	@ 0x34
 810a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a5bc:	4642      	mov	r2, r8
 810a5be:	464b      	mov	r3, r9
 810a5c0:	4640      	mov	r0, r8
 810a5c2:	4649      	mov	r1, r9
 810a5c4:	f7f6 fb3a 	bl	8100c3c <__aeabi_dcmpun>
 810a5c8:	b140      	cbz	r0, 810a5dc <_printf_float+0xe0>
 810a5ca:	464b      	mov	r3, r9
 810a5cc:	2b00      	cmp	r3, #0
 810a5ce:	bfbc      	itt	lt
 810a5d0:	232d      	movlt	r3, #45	@ 0x2d
 810a5d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 810a5d6:	4a7e      	ldr	r2, [pc, #504]	@ (810a7d0 <_printf_float+0x2d4>)
 810a5d8:	4b7e      	ldr	r3, [pc, #504]	@ (810a7d4 <_printf_float+0x2d8>)
 810a5da:	e7d4      	b.n	810a586 <_printf_float+0x8a>
 810a5dc:	6863      	ldr	r3, [r4, #4]
 810a5de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810a5e2:	9206      	str	r2, [sp, #24]
 810a5e4:	1c5a      	adds	r2, r3, #1
 810a5e6:	d13b      	bne.n	810a660 <_printf_float+0x164>
 810a5e8:	2306      	movs	r3, #6
 810a5ea:	6063      	str	r3, [r4, #4]
 810a5ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810a5f0:	2300      	movs	r3, #0
 810a5f2:	6022      	str	r2, [r4, #0]
 810a5f4:	9303      	str	r3, [sp, #12]
 810a5f6:	ab0a      	add	r3, sp, #40	@ 0x28
 810a5f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 810a5fc:	ab09      	add	r3, sp, #36	@ 0x24
 810a5fe:	9300      	str	r3, [sp, #0]
 810a600:	6861      	ldr	r1, [r4, #4]
 810a602:	ec49 8b10 	vmov	d0, r8, r9
 810a606:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 810a60a:	4628      	mov	r0, r5
 810a60c:	f7ff fed6 	bl	810a3bc <__cvt>
 810a610:	9b06      	ldr	r3, [sp, #24]
 810a612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810a614:	2b47      	cmp	r3, #71	@ 0x47
 810a616:	4680      	mov	r8, r0
 810a618:	d129      	bne.n	810a66e <_printf_float+0x172>
 810a61a:	1cc8      	adds	r0, r1, #3
 810a61c:	db02      	blt.n	810a624 <_printf_float+0x128>
 810a61e:	6863      	ldr	r3, [r4, #4]
 810a620:	4299      	cmp	r1, r3
 810a622:	dd41      	ble.n	810a6a8 <_printf_float+0x1ac>
 810a624:	f1aa 0a02 	sub.w	sl, sl, #2
 810a628:	fa5f fa8a 	uxtb.w	sl, sl
 810a62c:	3901      	subs	r1, #1
 810a62e:	4652      	mov	r2, sl
 810a630:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810a634:	9109      	str	r1, [sp, #36]	@ 0x24
 810a636:	f7ff ff26 	bl	810a486 <__exponent>
 810a63a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810a63c:	1813      	adds	r3, r2, r0
 810a63e:	2a01      	cmp	r2, #1
 810a640:	4681      	mov	r9, r0
 810a642:	6123      	str	r3, [r4, #16]
 810a644:	dc02      	bgt.n	810a64c <_printf_float+0x150>
 810a646:	6822      	ldr	r2, [r4, #0]
 810a648:	07d2      	lsls	r2, r2, #31
 810a64a:	d501      	bpl.n	810a650 <_printf_float+0x154>
 810a64c:	3301      	adds	r3, #1
 810a64e:	6123      	str	r3, [r4, #16]
 810a650:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810a654:	2b00      	cmp	r3, #0
 810a656:	d0a2      	beq.n	810a59e <_printf_float+0xa2>
 810a658:	232d      	movs	r3, #45	@ 0x2d
 810a65a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a65e:	e79e      	b.n	810a59e <_printf_float+0xa2>
 810a660:	9a06      	ldr	r2, [sp, #24]
 810a662:	2a47      	cmp	r2, #71	@ 0x47
 810a664:	d1c2      	bne.n	810a5ec <_printf_float+0xf0>
 810a666:	2b00      	cmp	r3, #0
 810a668:	d1c0      	bne.n	810a5ec <_printf_float+0xf0>
 810a66a:	2301      	movs	r3, #1
 810a66c:	e7bd      	b.n	810a5ea <_printf_float+0xee>
 810a66e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810a672:	d9db      	bls.n	810a62c <_printf_float+0x130>
 810a674:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 810a678:	d118      	bne.n	810a6ac <_printf_float+0x1b0>
 810a67a:	2900      	cmp	r1, #0
 810a67c:	6863      	ldr	r3, [r4, #4]
 810a67e:	dd0b      	ble.n	810a698 <_printf_float+0x19c>
 810a680:	6121      	str	r1, [r4, #16]
 810a682:	b913      	cbnz	r3, 810a68a <_printf_float+0x18e>
 810a684:	6822      	ldr	r2, [r4, #0]
 810a686:	07d0      	lsls	r0, r2, #31
 810a688:	d502      	bpl.n	810a690 <_printf_float+0x194>
 810a68a:	3301      	adds	r3, #1
 810a68c:	440b      	add	r3, r1
 810a68e:	6123      	str	r3, [r4, #16]
 810a690:	65a1      	str	r1, [r4, #88]	@ 0x58
 810a692:	f04f 0900 	mov.w	r9, #0
 810a696:	e7db      	b.n	810a650 <_printf_float+0x154>
 810a698:	b913      	cbnz	r3, 810a6a0 <_printf_float+0x1a4>
 810a69a:	6822      	ldr	r2, [r4, #0]
 810a69c:	07d2      	lsls	r2, r2, #31
 810a69e:	d501      	bpl.n	810a6a4 <_printf_float+0x1a8>
 810a6a0:	3302      	adds	r3, #2
 810a6a2:	e7f4      	b.n	810a68e <_printf_float+0x192>
 810a6a4:	2301      	movs	r3, #1
 810a6a6:	e7f2      	b.n	810a68e <_printf_float+0x192>
 810a6a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 810a6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810a6ae:	4299      	cmp	r1, r3
 810a6b0:	db05      	blt.n	810a6be <_printf_float+0x1c2>
 810a6b2:	6823      	ldr	r3, [r4, #0]
 810a6b4:	6121      	str	r1, [r4, #16]
 810a6b6:	07d8      	lsls	r0, r3, #31
 810a6b8:	d5ea      	bpl.n	810a690 <_printf_float+0x194>
 810a6ba:	1c4b      	adds	r3, r1, #1
 810a6bc:	e7e7      	b.n	810a68e <_printf_float+0x192>
 810a6be:	2900      	cmp	r1, #0
 810a6c0:	bfd4      	ite	le
 810a6c2:	f1c1 0202 	rsble	r2, r1, #2
 810a6c6:	2201      	movgt	r2, #1
 810a6c8:	4413      	add	r3, r2
 810a6ca:	e7e0      	b.n	810a68e <_printf_float+0x192>
 810a6cc:	6823      	ldr	r3, [r4, #0]
 810a6ce:	055a      	lsls	r2, r3, #21
 810a6d0:	d407      	bmi.n	810a6e2 <_printf_float+0x1e6>
 810a6d2:	6923      	ldr	r3, [r4, #16]
 810a6d4:	4642      	mov	r2, r8
 810a6d6:	4631      	mov	r1, r6
 810a6d8:	4628      	mov	r0, r5
 810a6da:	47b8      	blx	r7
 810a6dc:	3001      	adds	r0, #1
 810a6de:	d12b      	bne.n	810a738 <_printf_float+0x23c>
 810a6e0:	e767      	b.n	810a5b2 <_printf_float+0xb6>
 810a6e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810a6e6:	f240 80dd 	bls.w	810a8a4 <_printf_float+0x3a8>
 810a6ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810a6ee:	2200      	movs	r2, #0
 810a6f0:	2300      	movs	r3, #0
 810a6f2:	f7f6 fa71 	bl	8100bd8 <__aeabi_dcmpeq>
 810a6f6:	2800      	cmp	r0, #0
 810a6f8:	d033      	beq.n	810a762 <_printf_float+0x266>
 810a6fa:	4a37      	ldr	r2, [pc, #220]	@ (810a7d8 <_printf_float+0x2dc>)
 810a6fc:	2301      	movs	r3, #1
 810a6fe:	4631      	mov	r1, r6
 810a700:	4628      	mov	r0, r5
 810a702:	47b8      	blx	r7
 810a704:	3001      	adds	r0, #1
 810a706:	f43f af54 	beq.w	810a5b2 <_printf_float+0xb6>
 810a70a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810a70e:	4543      	cmp	r3, r8
 810a710:	db02      	blt.n	810a718 <_printf_float+0x21c>
 810a712:	6823      	ldr	r3, [r4, #0]
 810a714:	07d8      	lsls	r0, r3, #31
 810a716:	d50f      	bpl.n	810a738 <_printf_float+0x23c>
 810a718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a71c:	4631      	mov	r1, r6
 810a71e:	4628      	mov	r0, r5
 810a720:	47b8      	blx	r7
 810a722:	3001      	adds	r0, #1
 810a724:	f43f af45 	beq.w	810a5b2 <_printf_float+0xb6>
 810a728:	f04f 0900 	mov.w	r9, #0
 810a72c:	f108 38ff 	add.w	r8, r8, #4294967295
 810a730:	f104 0a1a 	add.w	sl, r4, #26
 810a734:	45c8      	cmp	r8, r9
 810a736:	dc09      	bgt.n	810a74c <_printf_float+0x250>
 810a738:	6823      	ldr	r3, [r4, #0]
 810a73a:	079b      	lsls	r3, r3, #30
 810a73c:	f100 8103 	bmi.w	810a946 <_printf_float+0x44a>
 810a740:	68e0      	ldr	r0, [r4, #12]
 810a742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810a744:	4298      	cmp	r0, r3
 810a746:	bfb8      	it	lt
 810a748:	4618      	movlt	r0, r3
 810a74a:	e734      	b.n	810a5b6 <_printf_float+0xba>
 810a74c:	2301      	movs	r3, #1
 810a74e:	4652      	mov	r2, sl
 810a750:	4631      	mov	r1, r6
 810a752:	4628      	mov	r0, r5
 810a754:	47b8      	blx	r7
 810a756:	3001      	adds	r0, #1
 810a758:	f43f af2b 	beq.w	810a5b2 <_printf_float+0xb6>
 810a75c:	f109 0901 	add.w	r9, r9, #1
 810a760:	e7e8      	b.n	810a734 <_printf_float+0x238>
 810a762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a764:	2b00      	cmp	r3, #0
 810a766:	dc39      	bgt.n	810a7dc <_printf_float+0x2e0>
 810a768:	4a1b      	ldr	r2, [pc, #108]	@ (810a7d8 <_printf_float+0x2dc>)
 810a76a:	2301      	movs	r3, #1
 810a76c:	4631      	mov	r1, r6
 810a76e:	4628      	mov	r0, r5
 810a770:	47b8      	blx	r7
 810a772:	3001      	adds	r0, #1
 810a774:	f43f af1d 	beq.w	810a5b2 <_printf_float+0xb6>
 810a778:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 810a77c:	ea59 0303 	orrs.w	r3, r9, r3
 810a780:	d102      	bne.n	810a788 <_printf_float+0x28c>
 810a782:	6823      	ldr	r3, [r4, #0]
 810a784:	07d9      	lsls	r1, r3, #31
 810a786:	d5d7      	bpl.n	810a738 <_printf_float+0x23c>
 810a788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a78c:	4631      	mov	r1, r6
 810a78e:	4628      	mov	r0, r5
 810a790:	47b8      	blx	r7
 810a792:	3001      	adds	r0, #1
 810a794:	f43f af0d 	beq.w	810a5b2 <_printf_float+0xb6>
 810a798:	f04f 0a00 	mov.w	sl, #0
 810a79c:	f104 0b1a 	add.w	fp, r4, #26
 810a7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a7a2:	425b      	negs	r3, r3
 810a7a4:	4553      	cmp	r3, sl
 810a7a6:	dc01      	bgt.n	810a7ac <_printf_float+0x2b0>
 810a7a8:	464b      	mov	r3, r9
 810a7aa:	e793      	b.n	810a6d4 <_printf_float+0x1d8>
 810a7ac:	2301      	movs	r3, #1
 810a7ae:	465a      	mov	r2, fp
 810a7b0:	4631      	mov	r1, r6
 810a7b2:	4628      	mov	r0, r5
 810a7b4:	47b8      	blx	r7
 810a7b6:	3001      	adds	r0, #1
 810a7b8:	f43f aefb 	beq.w	810a5b2 <_printf_float+0xb6>
 810a7bc:	f10a 0a01 	add.w	sl, sl, #1
 810a7c0:	e7ee      	b.n	810a7a0 <_printf_float+0x2a4>
 810a7c2:	bf00      	nop
 810a7c4:	7fefffff 	.word	0x7fefffff
 810a7c8:	081af0d4 	.word	0x081af0d4
 810a7cc:	081af0d8 	.word	0x081af0d8
 810a7d0:	081af0dc 	.word	0x081af0dc
 810a7d4:	081af0e0 	.word	0x081af0e0
 810a7d8:	081af0e4 	.word	0x081af0e4
 810a7dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810a7de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810a7e2:	4553      	cmp	r3, sl
 810a7e4:	bfa8      	it	ge
 810a7e6:	4653      	movge	r3, sl
 810a7e8:	2b00      	cmp	r3, #0
 810a7ea:	4699      	mov	r9, r3
 810a7ec:	dc36      	bgt.n	810a85c <_printf_float+0x360>
 810a7ee:	f04f 0b00 	mov.w	fp, #0
 810a7f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a7f6:	f104 021a 	add.w	r2, r4, #26
 810a7fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810a7fc:	9306      	str	r3, [sp, #24]
 810a7fe:	eba3 0309 	sub.w	r3, r3, r9
 810a802:	455b      	cmp	r3, fp
 810a804:	dc31      	bgt.n	810a86a <_printf_float+0x36e>
 810a806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a808:	459a      	cmp	sl, r3
 810a80a:	dc3a      	bgt.n	810a882 <_printf_float+0x386>
 810a80c:	6823      	ldr	r3, [r4, #0]
 810a80e:	07da      	lsls	r2, r3, #31
 810a810:	d437      	bmi.n	810a882 <_printf_float+0x386>
 810a812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a814:	ebaa 0903 	sub.w	r9, sl, r3
 810a818:	9b06      	ldr	r3, [sp, #24]
 810a81a:	ebaa 0303 	sub.w	r3, sl, r3
 810a81e:	4599      	cmp	r9, r3
 810a820:	bfa8      	it	ge
 810a822:	4699      	movge	r9, r3
 810a824:	f1b9 0f00 	cmp.w	r9, #0
 810a828:	dc33      	bgt.n	810a892 <_printf_float+0x396>
 810a82a:	f04f 0800 	mov.w	r8, #0
 810a82e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a832:	f104 0b1a 	add.w	fp, r4, #26
 810a836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810a838:	ebaa 0303 	sub.w	r3, sl, r3
 810a83c:	eba3 0309 	sub.w	r3, r3, r9
 810a840:	4543      	cmp	r3, r8
 810a842:	f77f af79 	ble.w	810a738 <_printf_float+0x23c>
 810a846:	2301      	movs	r3, #1
 810a848:	465a      	mov	r2, fp
 810a84a:	4631      	mov	r1, r6
 810a84c:	4628      	mov	r0, r5
 810a84e:	47b8      	blx	r7
 810a850:	3001      	adds	r0, #1
 810a852:	f43f aeae 	beq.w	810a5b2 <_printf_float+0xb6>
 810a856:	f108 0801 	add.w	r8, r8, #1
 810a85a:	e7ec      	b.n	810a836 <_printf_float+0x33a>
 810a85c:	4642      	mov	r2, r8
 810a85e:	4631      	mov	r1, r6
 810a860:	4628      	mov	r0, r5
 810a862:	47b8      	blx	r7
 810a864:	3001      	adds	r0, #1
 810a866:	d1c2      	bne.n	810a7ee <_printf_float+0x2f2>
 810a868:	e6a3      	b.n	810a5b2 <_printf_float+0xb6>
 810a86a:	2301      	movs	r3, #1
 810a86c:	4631      	mov	r1, r6
 810a86e:	4628      	mov	r0, r5
 810a870:	9206      	str	r2, [sp, #24]
 810a872:	47b8      	blx	r7
 810a874:	3001      	adds	r0, #1
 810a876:	f43f ae9c 	beq.w	810a5b2 <_printf_float+0xb6>
 810a87a:	9a06      	ldr	r2, [sp, #24]
 810a87c:	f10b 0b01 	add.w	fp, fp, #1
 810a880:	e7bb      	b.n	810a7fa <_printf_float+0x2fe>
 810a882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a886:	4631      	mov	r1, r6
 810a888:	4628      	mov	r0, r5
 810a88a:	47b8      	blx	r7
 810a88c:	3001      	adds	r0, #1
 810a88e:	d1c0      	bne.n	810a812 <_printf_float+0x316>
 810a890:	e68f      	b.n	810a5b2 <_printf_float+0xb6>
 810a892:	9a06      	ldr	r2, [sp, #24]
 810a894:	464b      	mov	r3, r9
 810a896:	4442      	add	r2, r8
 810a898:	4631      	mov	r1, r6
 810a89a:	4628      	mov	r0, r5
 810a89c:	47b8      	blx	r7
 810a89e:	3001      	adds	r0, #1
 810a8a0:	d1c3      	bne.n	810a82a <_printf_float+0x32e>
 810a8a2:	e686      	b.n	810a5b2 <_printf_float+0xb6>
 810a8a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810a8a8:	f1ba 0f01 	cmp.w	sl, #1
 810a8ac:	dc01      	bgt.n	810a8b2 <_printf_float+0x3b6>
 810a8ae:	07db      	lsls	r3, r3, #31
 810a8b0:	d536      	bpl.n	810a920 <_printf_float+0x424>
 810a8b2:	2301      	movs	r3, #1
 810a8b4:	4642      	mov	r2, r8
 810a8b6:	4631      	mov	r1, r6
 810a8b8:	4628      	mov	r0, r5
 810a8ba:	47b8      	blx	r7
 810a8bc:	3001      	adds	r0, #1
 810a8be:	f43f ae78 	beq.w	810a5b2 <_printf_float+0xb6>
 810a8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810a8c6:	4631      	mov	r1, r6
 810a8c8:	4628      	mov	r0, r5
 810a8ca:	47b8      	blx	r7
 810a8cc:	3001      	adds	r0, #1
 810a8ce:	f43f ae70 	beq.w	810a5b2 <_printf_float+0xb6>
 810a8d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810a8d6:	2200      	movs	r2, #0
 810a8d8:	2300      	movs	r3, #0
 810a8da:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a8de:	f7f6 f97b 	bl	8100bd8 <__aeabi_dcmpeq>
 810a8e2:	b9c0      	cbnz	r0, 810a916 <_printf_float+0x41a>
 810a8e4:	4653      	mov	r3, sl
 810a8e6:	f108 0201 	add.w	r2, r8, #1
 810a8ea:	4631      	mov	r1, r6
 810a8ec:	4628      	mov	r0, r5
 810a8ee:	47b8      	blx	r7
 810a8f0:	3001      	adds	r0, #1
 810a8f2:	d10c      	bne.n	810a90e <_printf_float+0x412>
 810a8f4:	e65d      	b.n	810a5b2 <_printf_float+0xb6>
 810a8f6:	2301      	movs	r3, #1
 810a8f8:	465a      	mov	r2, fp
 810a8fa:	4631      	mov	r1, r6
 810a8fc:	4628      	mov	r0, r5
 810a8fe:	47b8      	blx	r7
 810a900:	3001      	adds	r0, #1
 810a902:	f43f ae56 	beq.w	810a5b2 <_printf_float+0xb6>
 810a906:	f108 0801 	add.w	r8, r8, #1
 810a90a:	45d0      	cmp	r8, sl
 810a90c:	dbf3      	blt.n	810a8f6 <_printf_float+0x3fa>
 810a90e:	464b      	mov	r3, r9
 810a910:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 810a914:	e6df      	b.n	810a6d6 <_printf_float+0x1da>
 810a916:	f04f 0800 	mov.w	r8, #0
 810a91a:	f104 0b1a 	add.w	fp, r4, #26
 810a91e:	e7f4      	b.n	810a90a <_printf_float+0x40e>
 810a920:	2301      	movs	r3, #1
 810a922:	4642      	mov	r2, r8
 810a924:	e7e1      	b.n	810a8ea <_printf_float+0x3ee>
 810a926:	2301      	movs	r3, #1
 810a928:	464a      	mov	r2, r9
 810a92a:	4631      	mov	r1, r6
 810a92c:	4628      	mov	r0, r5
 810a92e:	47b8      	blx	r7
 810a930:	3001      	adds	r0, #1
 810a932:	f43f ae3e 	beq.w	810a5b2 <_printf_float+0xb6>
 810a936:	f108 0801 	add.w	r8, r8, #1
 810a93a:	68e3      	ldr	r3, [r4, #12]
 810a93c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810a93e:	1a5b      	subs	r3, r3, r1
 810a940:	4543      	cmp	r3, r8
 810a942:	dcf0      	bgt.n	810a926 <_printf_float+0x42a>
 810a944:	e6fc      	b.n	810a740 <_printf_float+0x244>
 810a946:	f04f 0800 	mov.w	r8, #0
 810a94a:	f104 0919 	add.w	r9, r4, #25
 810a94e:	e7f4      	b.n	810a93a <_printf_float+0x43e>

0810a950 <_printf_common>:
 810a950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a954:	4616      	mov	r6, r2
 810a956:	4698      	mov	r8, r3
 810a958:	688a      	ldr	r2, [r1, #8]
 810a95a:	690b      	ldr	r3, [r1, #16]
 810a95c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810a960:	4293      	cmp	r3, r2
 810a962:	bfb8      	it	lt
 810a964:	4613      	movlt	r3, r2
 810a966:	6033      	str	r3, [r6, #0]
 810a968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810a96c:	4607      	mov	r7, r0
 810a96e:	460c      	mov	r4, r1
 810a970:	b10a      	cbz	r2, 810a976 <_printf_common+0x26>
 810a972:	3301      	adds	r3, #1
 810a974:	6033      	str	r3, [r6, #0]
 810a976:	6823      	ldr	r3, [r4, #0]
 810a978:	0699      	lsls	r1, r3, #26
 810a97a:	bf42      	ittt	mi
 810a97c:	6833      	ldrmi	r3, [r6, #0]
 810a97e:	3302      	addmi	r3, #2
 810a980:	6033      	strmi	r3, [r6, #0]
 810a982:	6825      	ldr	r5, [r4, #0]
 810a984:	f015 0506 	ands.w	r5, r5, #6
 810a988:	d106      	bne.n	810a998 <_printf_common+0x48>
 810a98a:	f104 0a19 	add.w	sl, r4, #25
 810a98e:	68e3      	ldr	r3, [r4, #12]
 810a990:	6832      	ldr	r2, [r6, #0]
 810a992:	1a9b      	subs	r3, r3, r2
 810a994:	42ab      	cmp	r3, r5
 810a996:	dc26      	bgt.n	810a9e6 <_printf_common+0x96>
 810a998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810a99c:	6822      	ldr	r2, [r4, #0]
 810a99e:	3b00      	subs	r3, #0
 810a9a0:	bf18      	it	ne
 810a9a2:	2301      	movne	r3, #1
 810a9a4:	0692      	lsls	r2, r2, #26
 810a9a6:	d42b      	bmi.n	810aa00 <_printf_common+0xb0>
 810a9a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810a9ac:	4641      	mov	r1, r8
 810a9ae:	4638      	mov	r0, r7
 810a9b0:	47c8      	blx	r9
 810a9b2:	3001      	adds	r0, #1
 810a9b4:	d01e      	beq.n	810a9f4 <_printf_common+0xa4>
 810a9b6:	6823      	ldr	r3, [r4, #0]
 810a9b8:	6922      	ldr	r2, [r4, #16]
 810a9ba:	f003 0306 	and.w	r3, r3, #6
 810a9be:	2b04      	cmp	r3, #4
 810a9c0:	bf02      	ittt	eq
 810a9c2:	68e5      	ldreq	r5, [r4, #12]
 810a9c4:	6833      	ldreq	r3, [r6, #0]
 810a9c6:	1aed      	subeq	r5, r5, r3
 810a9c8:	68a3      	ldr	r3, [r4, #8]
 810a9ca:	bf0c      	ite	eq
 810a9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a9d0:	2500      	movne	r5, #0
 810a9d2:	4293      	cmp	r3, r2
 810a9d4:	bfc4      	itt	gt
 810a9d6:	1a9b      	subgt	r3, r3, r2
 810a9d8:	18ed      	addgt	r5, r5, r3
 810a9da:	2600      	movs	r6, #0
 810a9dc:	341a      	adds	r4, #26
 810a9de:	42b5      	cmp	r5, r6
 810a9e0:	d11a      	bne.n	810aa18 <_printf_common+0xc8>
 810a9e2:	2000      	movs	r0, #0
 810a9e4:	e008      	b.n	810a9f8 <_printf_common+0xa8>
 810a9e6:	2301      	movs	r3, #1
 810a9e8:	4652      	mov	r2, sl
 810a9ea:	4641      	mov	r1, r8
 810a9ec:	4638      	mov	r0, r7
 810a9ee:	47c8      	blx	r9
 810a9f0:	3001      	adds	r0, #1
 810a9f2:	d103      	bne.n	810a9fc <_printf_common+0xac>
 810a9f4:	f04f 30ff 	mov.w	r0, #4294967295
 810a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a9fc:	3501      	adds	r5, #1
 810a9fe:	e7c6      	b.n	810a98e <_printf_common+0x3e>
 810aa00:	18e1      	adds	r1, r4, r3
 810aa02:	1c5a      	adds	r2, r3, #1
 810aa04:	2030      	movs	r0, #48	@ 0x30
 810aa06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810aa0a:	4422      	add	r2, r4
 810aa0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810aa10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810aa14:	3302      	adds	r3, #2
 810aa16:	e7c7      	b.n	810a9a8 <_printf_common+0x58>
 810aa18:	2301      	movs	r3, #1
 810aa1a:	4622      	mov	r2, r4
 810aa1c:	4641      	mov	r1, r8
 810aa1e:	4638      	mov	r0, r7
 810aa20:	47c8      	blx	r9
 810aa22:	3001      	adds	r0, #1
 810aa24:	d0e6      	beq.n	810a9f4 <_printf_common+0xa4>
 810aa26:	3601      	adds	r6, #1
 810aa28:	e7d9      	b.n	810a9de <_printf_common+0x8e>
	...

0810aa2c <_printf_i>:
 810aa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810aa30:	7e0f      	ldrb	r7, [r1, #24]
 810aa32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810aa34:	2f78      	cmp	r7, #120	@ 0x78
 810aa36:	4691      	mov	r9, r2
 810aa38:	4680      	mov	r8, r0
 810aa3a:	460c      	mov	r4, r1
 810aa3c:	469a      	mov	sl, r3
 810aa3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810aa42:	d807      	bhi.n	810aa54 <_printf_i+0x28>
 810aa44:	2f62      	cmp	r7, #98	@ 0x62
 810aa46:	d80a      	bhi.n	810aa5e <_printf_i+0x32>
 810aa48:	2f00      	cmp	r7, #0
 810aa4a:	f000 80d2 	beq.w	810abf2 <_printf_i+0x1c6>
 810aa4e:	2f58      	cmp	r7, #88	@ 0x58
 810aa50:	f000 80b9 	beq.w	810abc6 <_printf_i+0x19a>
 810aa54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810aa58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810aa5c:	e03a      	b.n	810aad4 <_printf_i+0xa8>
 810aa5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810aa62:	2b15      	cmp	r3, #21
 810aa64:	d8f6      	bhi.n	810aa54 <_printf_i+0x28>
 810aa66:	a101      	add	r1, pc, #4	@ (adr r1, 810aa6c <_printf_i+0x40>)
 810aa68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810aa6c:	0810aac5 	.word	0x0810aac5
 810aa70:	0810aad9 	.word	0x0810aad9
 810aa74:	0810aa55 	.word	0x0810aa55
 810aa78:	0810aa55 	.word	0x0810aa55
 810aa7c:	0810aa55 	.word	0x0810aa55
 810aa80:	0810aa55 	.word	0x0810aa55
 810aa84:	0810aad9 	.word	0x0810aad9
 810aa88:	0810aa55 	.word	0x0810aa55
 810aa8c:	0810aa55 	.word	0x0810aa55
 810aa90:	0810aa55 	.word	0x0810aa55
 810aa94:	0810aa55 	.word	0x0810aa55
 810aa98:	0810abd9 	.word	0x0810abd9
 810aa9c:	0810ab03 	.word	0x0810ab03
 810aaa0:	0810ab93 	.word	0x0810ab93
 810aaa4:	0810aa55 	.word	0x0810aa55
 810aaa8:	0810aa55 	.word	0x0810aa55
 810aaac:	0810abfb 	.word	0x0810abfb
 810aab0:	0810aa55 	.word	0x0810aa55
 810aab4:	0810ab03 	.word	0x0810ab03
 810aab8:	0810aa55 	.word	0x0810aa55
 810aabc:	0810aa55 	.word	0x0810aa55
 810aac0:	0810ab9b 	.word	0x0810ab9b
 810aac4:	6833      	ldr	r3, [r6, #0]
 810aac6:	1d1a      	adds	r2, r3, #4
 810aac8:	681b      	ldr	r3, [r3, #0]
 810aaca:	6032      	str	r2, [r6, #0]
 810aacc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810aad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810aad4:	2301      	movs	r3, #1
 810aad6:	e09d      	b.n	810ac14 <_printf_i+0x1e8>
 810aad8:	6833      	ldr	r3, [r6, #0]
 810aada:	6820      	ldr	r0, [r4, #0]
 810aadc:	1d19      	adds	r1, r3, #4
 810aade:	6031      	str	r1, [r6, #0]
 810aae0:	0606      	lsls	r6, r0, #24
 810aae2:	d501      	bpl.n	810aae8 <_printf_i+0xbc>
 810aae4:	681d      	ldr	r5, [r3, #0]
 810aae6:	e003      	b.n	810aaf0 <_printf_i+0xc4>
 810aae8:	0645      	lsls	r5, r0, #25
 810aaea:	d5fb      	bpl.n	810aae4 <_printf_i+0xb8>
 810aaec:	f9b3 5000 	ldrsh.w	r5, [r3]
 810aaf0:	2d00      	cmp	r5, #0
 810aaf2:	da03      	bge.n	810aafc <_printf_i+0xd0>
 810aaf4:	232d      	movs	r3, #45	@ 0x2d
 810aaf6:	426d      	negs	r5, r5
 810aaf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810aafc:	4859      	ldr	r0, [pc, #356]	@ (810ac64 <_printf_i+0x238>)
 810aafe:	230a      	movs	r3, #10
 810ab00:	e011      	b.n	810ab26 <_printf_i+0xfa>
 810ab02:	6821      	ldr	r1, [r4, #0]
 810ab04:	6833      	ldr	r3, [r6, #0]
 810ab06:	0608      	lsls	r0, r1, #24
 810ab08:	f853 5b04 	ldr.w	r5, [r3], #4
 810ab0c:	d402      	bmi.n	810ab14 <_printf_i+0xe8>
 810ab0e:	0649      	lsls	r1, r1, #25
 810ab10:	bf48      	it	mi
 810ab12:	b2ad      	uxthmi	r5, r5
 810ab14:	2f6f      	cmp	r7, #111	@ 0x6f
 810ab16:	4853      	ldr	r0, [pc, #332]	@ (810ac64 <_printf_i+0x238>)
 810ab18:	6033      	str	r3, [r6, #0]
 810ab1a:	bf14      	ite	ne
 810ab1c:	230a      	movne	r3, #10
 810ab1e:	2308      	moveq	r3, #8
 810ab20:	2100      	movs	r1, #0
 810ab22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810ab26:	6866      	ldr	r6, [r4, #4]
 810ab28:	60a6      	str	r6, [r4, #8]
 810ab2a:	2e00      	cmp	r6, #0
 810ab2c:	bfa2      	ittt	ge
 810ab2e:	6821      	ldrge	r1, [r4, #0]
 810ab30:	f021 0104 	bicge.w	r1, r1, #4
 810ab34:	6021      	strge	r1, [r4, #0]
 810ab36:	b90d      	cbnz	r5, 810ab3c <_printf_i+0x110>
 810ab38:	2e00      	cmp	r6, #0
 810ab3a:	d04b      	beq.n	810abd4 <_printf_i+0x1a8>
 810ab3c:	4616      	mov	r6, r2
 810ab3e:	fbb5 f1f3 	udiv	r1, r5, r3
 810ab42:	fb03 5711 	mls	r7, r3, r1, r5
 810ab46:	5dc7      	ldrb	r7, [r0, r7]
 810ab48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810ab4c:	462f      	mov	r7, r5
 810ab4e:	42bb      	cmp	r3, r7
 810ab50:	460d      	mov	r5, r1
 810ab52:	d9f4      	bls.n	810ab3e <_printf_i+0x112>
 810ab54:	2b08      	cmp	r3, #8
 810ab56:	d10b      	bne.n	810ab70 <_printf_i+0x144>
 810ab58:	6823      	ldr	r3, [r4, #0]
 810ab5a:	07df      	lsls	r7, r3, #31
 810ab5c:	d508      	bpl.n	810ab70 <_printf_i+0x144>
 810ab5e:	6923      	ldr	r3, [r4, #16]
 810ab60:	6861      	ldr	r1, [r4, #4]
 810ab62:	4299      	cmp	r1, r3
 810ab64:	bfde      	ittt	le
 810ab66:	2330      	movle	r3, #48	@ 0x30
 810ab68:	f806 3c01 	strble.w	r3, [r6, #-1]
 810ab6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 810ab70:	1b92      	subs	r2, r2, r6
 810ab72:	6122      	str	r2, [r4, #16]
 810ab74:	f8cd a000 	str.w	sl, [sp]
 810ab78:	464b      	mov	r3, r9
 810ab7a:	aa03      	add	r2, sp, #12
 810ab7c:	4621      	mov	r1, r4
 810ab7e:	4640      	mov	r0, r8
 810ab80:	f7ff fee6 	bl	810a950 <_printf_common>
 810ab84:	3001      	adds	r0, #1
 810ab86:	d14a      	bne.n	810ac1e <_printf_i+0x1f2>
 810ab88:	f04f 30ff 	mov.w	r0, #4294967295
 810ab8c:	b004      	add	sp, #16
 810ab8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ab92:	6823      	ldr	r3, [r4, #0]
 810ab94:	f043 0320 	orr.w	r3, r3, #32
 810ab98:	6023      	str	r3, [r4, #0]
 810ab9a:	4833      	ldr	r0, [pc, #204]	@ (810ac68 <_printf_i+0x23c>)
 810ab9c:	2778      	movs	r7, #120	@ 0x78
 810ab9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810aba2:	6823      	ldr	r3, [r4, #0]
 810aba4:	6831      	ldr	r1, [r6, #0]
 810aba6:	061f      	lsls	r7, r3, #24
 810aba8:	f851 5b04 	ldr.w	r5, [r1], #4
 810abac:	d402      	bmi.n	810abb4 <_printf_i+0x188>
 810abae:	065f      	lsls	r7, r3, #25
 810abb0:	bf48      	it	mi
 810abb2:	b2ad      	uxthmi	r5, r5
 810abb4:	6031      	str	r1, [r6, #0]
 810abb6:	07d9      	lsls	r1, r3, #31
 810abb8:	bf44      	itt	mi
 810abba:	f043 0320 	orrmi.w	r3, r3, #32
 810abbe:	6023      	strmi	r3, [r4, #0]
 810abc0:	b11d      	cbz	r5, 810abca <_printf_i+0x19e>
 810abc2:	2310      	movs	r3, #16
 810abc4:	e7ac      	b.n	810ab20 <_printf_i+0xf4>
 810abc6:	4827      	ldr	r0, [pc, #156]	@ (810ac64 <_printf_i+0x238>)
 810abc8:	e7e9      	b.n	810ab9e <_printf_i+0x172>
 810abca:	6823      	ldr	r3, [r4, #0]
 810abcc:	f023 0320 	bic.w	r3, r3, #32
 810abd0:	6023      	str	r3, [r4, #0]
 810abd2:	e7f6      	b.n	810abc2 <_printf_i+0x196>
 810abd4:	4616      	mov	r6, r2
 810abd6:	e7bd      	b.n	810ab54 <_printf_i+0x128>
 810abd8:	6833      	ldr	r3, [r6, #0]
 810abda:	6825      	ldr	r5, [r4, #0]
 810abdc:	6961      	ldr	r1, [r4, #20]
 810abde:	1d18      	adds	r0, r3, #4
 810abe0:	6030      	str	r0, [r6, #0]
 810abe2:	062e      	lsls	r6, r5, #24
 810abe4:	681b      	ldr	r3, [r3, #0]
 810abe6:	d501      	bpl.n	810abec <_printf_i+0x1c0>
 810abe8:	6019      	str	r1, [r3, #0]
 810abea:	e002      	b.n	810abf2 <_printf_i+0x1c6>
 810abec:	0668      	lsls	r0, r5, #25
 810abee:	d5fb      	bpl.n	810abe8 <_printf_i+0x1bc>
 810abf0:	8019      	strh	r1, [r3, #0]
 810abf2:	2300      	movs	r3, #0
 810abf4:	6123      	str	r3, [r4, #16]
 810abf6:	4616      	mov	r6, r2
 810abf8:	e7bc      	b.n	810ab74 <_printf_i+0x148>
 810abfa:	6833      	ldr	r3, [r6, #0]
 810abfc:	1d1a      	adds	r2, r3, #4
 810abfe:	6032      	str	r2, [r6, #0]
 810ac00:	681e      	ldr	r6, [r3, #0]
 810ac02:	6862      	ldr	r2, [r4, #4]
 810ac04:	2100      	movs	r1, #0
 810ac06:	4630      	mov	r0, r6
 810ac08:	f7f5 fb6a 	bl	81002e0 <memchr>
 810ac0c:	b108      	cbz	r0, 810ac12 <_printf_i+0x1e6>
 810ac0e:	1b80      	subs	r0, r0, r6
 810ac10:	6060      	str	r0, [r4, #4]
 810ac12:	6863      	ldr	r3, [r4, #4]
 810ac14:	6123      	str	r3, [r4, #16]
 810ac16:	2300      	movs	r3, #0
 810ac18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810ac1c:	e7aa      	b.n	810ab74 <_printf_i+0x148>
 810ac1e:	6923      	ldr	r3, [r4, #16]
 810ac20:	4632      	mov	r2, r6
 810ac22:	4649      	mov	r1, r9
 810ac24:	4640      	mov	r0, r8
 810ac26:	47d0      	blx	sl
 810ac28:	3001      	adds	r0, #1
 810ac2a:	d0ad      	beq.n	810ab88 <_printf_i+0x15c>
 810ac2c:	6823      	ldr	r3, [r4, #0]
 810ac2e:	079b      	lsls	r3, r3, #30
 810ac30:	d413      	bmi.n	810ac5a <_printf_i+0x22e>
 810ac32:	68e0      	ldr	r0, [r4, #12]
 810ac34:	9b03      	ldr	r3, [sp, #12]
 810ac36:	4298      	cmp	r0, r3
 810ac38:	bfb8      	it	lt
 810ac3a:	4618      	movlt	r0, r3
 810ac3c:	e7a6      	b.n	810ab8c <_printf_i+0x160>
 810ac3e:	2301      	movs	r3, #1
 810ac40:	4632      	mov	r2, r6
 810ac42:	4649      	mov	r1, r9
 810ac44:	4640      	mov	r0, r8
 810ac46:	47d0      	blx	sl
 810ac48:	3001      	adds	r0, #1
 810ac4a:	d09d      	beq.n	810ab88 <_printf_i+0x15c>
 810ac4c:	3501      	adds	r5, #1
 810ac4e:	68e3      	ldr	r3, [r4, #12]
 810ac50:	9903      	ldr	r1, [sp, #12]
 810ac52:	1a5b      	subs	r3, r3, r1
 810ac54:	42ab      	cmp	r3, r5
 810ac56:	dcf2      	bgt.n	810ac3e <_printf_i+0x212>
 810ac58:	e7eb      	b.n	810ac32 <_printf_i+0x206>
 810ac5a:	2500      	movs	r5, #0
 810ac5c:	f104 0619 	add.w	r6, r4, #25
 810ac60:	e7f5      	b.n	810ac4e <_printf_i+0x222>
 810ac62:	bf00      	nop
 810ac64:	081af0e6 	.word	0x081af0e6
 810ac68:	081af0f7 	.word	0x081af0f7

0810ac6c <_scanf_float>:
 810ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ac70:	b087      	sub	sp, #28
 810ac72:	4617      	mov	r7, r2
 810ac74:	9303      	str	r3, [sp, #12]
 810ac76:	688b      	ldr	r3, [r1, #8]
 810ac78:	1e5a      	subs	r2, r3, #1
 810ac7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810ac7e:	bf81      	itttt	hi
 810ac80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810ac84:	eb03 0b05 	addhi.w	fp, r3, r5
 810ac88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810ac8c:	608b      	strhi	r3, [r1, #8]
 810ac8e:	680b      	ldr	r3, [r1, #0]
 810ac90:	460a      	mov	r2, r1
 810ac92:	f04f 0500 	mov.w	r5, #0
 810ac96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810ac9a:	f842 3b1c 	str.w	r3, [r2], #28
 810ac9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810aca2:	4680      	mov	r8, r0
 810aca4:	460c      	mov	r4, r1
 810aca6:	bf98      	it	ls
 810aca8:	f04f 0b00 	movls.w	fp, #0
 810acac:	9201      	str	r2, [sp, #4]
 810acae:	4616      	mov	r6, r2
 810acb0:	46aa      	mov	sl, r5
 810acb2:	46a9      	mov	r9, r5
 810acb4:	9502      	str	r5, [sp, #8]
 810acb6:	68a2      	ldr	r2, [r4, #8]
 810acb8:	b152      	cbz	r2, 810acd0 <_scanf_float+0x64>
 810acba:	683b      	ldr	r3, [r7, #0]
 810acbc:	781b      	ldrb	r3, [r3, #0]
 810acbe:	2b4e      	cmp	r3, #78	@ 0x4e
 810acc0:	d864      	bhi.n	810ad8c <_scanf_float+0x120>
 810acc2:	2b40      	cmp	r3, #64	@ 0x40
 810acc4:	d83c      	bhi.n	810ad40 <_scanf_float+0xd4>
 810acc6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810acca:	b2c8      	uxtb	r0, r1
 810accc:	280e      	cmp	r0, #14
 810acce:	d93a      	bls.n	810ad46 <_scanf_float+0xda>
 810acd0:	f1b9 0f00 	cmp.w	r9, #0
 810acd4:	d003      	beq.n	810acde <_scanf_float+0x72>
 810acd6:	6823      	ldr	r3, [r4, #0]
 810acd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810acdc:	6023      	str	r3, [r4, #0]
 810acde:	f10a 3aff 	add.w	sl, sl, #4294967295
 810ace2:	f1ba 0f01 	cmp.w	sl, #1
 810ace6:	f200 8117 	bhi.w	810af18 <_scanf_float+0x2ac>
 810acea:	9b01      	ldr	r3, [sp, #4]
 810acec:	429e      	cmp	r6, r3
 810acee:	f200 8108 	bhi.w	810af02 <_scanf_float+0x296>
 810acf2:	2001      	movs	r0, #1
 810acf4:	b007      	add	sp, #28
 810acf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810acfa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810acfe:	2a0d      	cmp	r2, #13
 810ad00:	d8e6      	bhi.n	810acd0 <_scanf_float+0x64>
 810ad02:	a101      	add	r1, pc, #4	@ (adr r1, 810ad08 <_scanf_float+0x9c>)
 810ad04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810ad08:	0810ae4f 	.word	0x0810ae4f
 810ad0c:	0810acd1 	.word	0x0810acd1
 810ad10:	0810acd1 	.word	0x0810acd1
 810ad14:	0810acd1 	.word	0x0810acd1
 810ad18:	0810aeaf 	.word	0x0810aeaf
 810ad1c:	0810ae87 	.word	0x0810ae87
 810ad20:	0810acd1 	.word	0x0810acd1
 810ad24:	0810acd1 	.word	0x0810acd1
 810ad28:	0810ae5d 	.word	0x0810ae5d
 810ad2c:	0810acd1 	.word	0x0810acd1
 810ad30:	0810acd1 	.word	0x0810acd1
 810ad34:	0810acd1 	.word	0x0810acd1
 810ad38:	0810acd1 	.word	0x0810acd1
 810ad3c:	0810ae15 	.word	0x0810ae15
 810ad40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810ad44:	e7db      	b.n	810acfe <_scanf_float+0x92>
 810ad46:	290e      	cmp	r1, #14
 810ad48:	d8c2      	bhi.n	810acd0 <_scanf_float+0x64>
 810ad4a:	a001      	add	r0, pc, #4	@ (adr r0, 810ad50 <_scanf_float+0xe4>)
 810ad4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810ad50:	0810ae05 	.word	0x0810ae05
 810ad54:	0810acd1 	.word	0x0810acd1
 810ad58:	0810ae05 	.word	0x0810ae05
 810ad5c:	0810ae9b 	.word	0x0810ae9b
 810ad60:	0810acd1 	.word	0x0810acd1
 810ad64:	0810adad 	.word	0x0810adad
 810ad68:	0810adeb 	.word	0x0810adeb
 810ad6c:	0810adeb 	.word	0x0810adeb
 810ad70:	0810adeb 	.word	0x0810adeb
 810ad74:	0810adeb 	.word	0x0810adeb
 810ad78:	0810adeb 	.word	0x0810adeb
 810ad7c:	0810adeb 	.word	0x0810adeb
 810ad80:	0810adeb 	.word	0x0810adeb
 810ad84:	0810adeb 	.word	0x0810adeb
 810ad88:	0810adeb 	.word	0x0810adeb
 810ad8c:	2b6e      	cmp	r3, #110	@ 0x6e
 810ad8e:	d809      	bhi.n	810ada4 <_scanf_float+0x138>
 810ad90:	2b60      	cmp	r3, #96	@ 0x60
 810ad92:	d8b2      	bhi.n	810acfa <_scanf_float+0x8e>
 810ad94:	2b54      	cmp	r3, #84	@ 0x54
 810ad96:	d07b      	beq.n	810ae90 <_scanf_float+0x224>
 810ad98:	2b59      	cmp	r3, #89	@ 0x59
 810ad9a:	d199      	bne.n	810acd0 <_scanf_float+0x64>
 810ad9c:	2d07      	cmp	r5, #7
 810ad9e:	d197      	bne.n	810acd0 <_scanf_float+0x64>
 810ada0:	2508      	movs	r5, #8
 810ada2:	e02c      	b.n	810adfe <_scanf_float+0x192>
 810ada4:	2b74      	cmp	r3, #116	@ 0x74
 810ada6:	d073      	beq.n	810ae90 <_scanf_float+0x224>
 810ada8:	2b79      	cmp	r3, #121	@ 0x79
 810adaa:	e7f6      	b.n	810ad9a <_scanf_float+0x12e>
 810adac:	6821      	ldr	r1, [r4, #0]
 810adae:	05c8      	lsls	r0, r1, #23
 810adb0:	d51b      	bpl.n	810adea <_scanf_float+0x17e>
 810adb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810adb6:	6021      	str	r1, [r4, #0]
 810adb8:	f109 0901 	add.w	r9, r9, #1
 810adbc:	f1bb 0f00 	cmp.w	fp, #0
 810adc0:	d003      	beq.n	810adca <_scanf_float+0x15e>
 810adc2:	3201      	adds	r2, #1
 810adc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 810adc8:	60a2      	str	r2, [r4, #8]
 810adca:	68a3      	ldr	r3, [r4, #8]
 810adcc:	3b01      	subs	r3, #1
 810adce:	60a3      	str	r3, [r4, #8]
 810add0:	6923      	ldr	r3, [r4, #16]
 810add2:	3301      	adds	r3, #1
 810add4:	6123      	str	r3, [r4, #16]
 810add6:	687b      	ldr	r3, [r7, #4]
 810add8:	3b01      	subs	r3, #1
 810adda:	2b00      	cmp	r3, #0
 810addc:	607b      	str	r3, [r7, #4]
 810adde:	f340 8087 	ble.w	810aef0 <_scanf_float+0x284>
 810ade2:	683b      	ldr	r3, [r7, #0]
 810ade4:	3301      	adds	r3, #1
 810ade6:	603b      	str	r3, [r7, #0]
 810ade8:	e765      	b.n	810acb6 <_scanf_float+0x4a>
 810adea:	eb1a 0105 	adds.w	r1, sl, r5
 810adee:	f47f af6f 	bne.w	810acd0 <_scanf_float+0x64>
 810adf2:	6822      	ldr	r2, [r4, #0]
 810adf4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810adf8:	6022      	str	r2, [r4, #0]
 810adfa:	460d      	mov	r5, r1
 810adfc:	468a      	mov	sl, r1
 810adfe:	f806 3b01 	strb.w	r3, [r6], #1
 810ae02:	e7e2      	b.n	810adca <_scanf_float+0x15e>
 810ae04:	6822      	ldr	r2, [r4, #0]
 810ae06:	0610      	lsls	r0, r2, #24
 810ae08:	f57f af62 	bpl.w	810acd0 <_scanf_float+0x64>
 810ae0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810ae10:	6022      	str	r2, [r4, #0]
 810ae12:	e7f4      	b.n	810adfe <_scanf_float+0x192>
 810ae14:	f1ba 0f00 	cmp.w	sl, #0
 810ae18:	d10e      	bne.n	810ae38 <_scanf_float+0x1cc>
 810ae1a:	f1b9 0f00 	cmp.w	r9, #0
 810ae1e:	d10e      	bne.n	810ae3e <_scanf_float+0x1d2>
 810ae20:	6822      	ldr	r2, [r4, #0]
 810ae22:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810ae26:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810ae2a:	d108      	bne.n	810ae3e <_scanf_float+0x1d2>
 810ae2c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810ae30:	6022      	str	r2, [r4, #0]
 810ae32:	f04f 0a01 	mov.w	sl, #1
 810ae36:	e7e2      	b.n	810adfe <_scanf_float+0x192>
 810ae38:	f1ba 0f02 	cmp.w	sl, #2
 810ae3c:	d055      	beq.n	810aeea <_scanf_float+0x27e>
 810ae3e:	2d01      	cmp	r5, #1
 810ae40:	d002      	beq.n	810ae48 <_scanf_float+0x1dc>
 810ae42:	2d04      	cmp	r5, #4
 810ae44:	f47f af44 	bne.w	810acd0 <_scanf_float+0x64>
 810ae48:	3501      	adds	r5, #1
 810ae4a:	b2ed      	uxtb	r5, r5
 810ae4c:	e7d7      	b.n	810adfe <_scanf_float+0x192>
 810ae4e:	f1ba 0f01 	cmp.w	sl, #1
 810ae52:	f47f af3d 	bne.w	810acd0 <_scanf_float+0x64>
 810ae56:	f04f 0a02 	mov.w	sl, #2
 810ae5a:	e7d0      	b.n	810adfe <_scanf_float+0x192>
 810ae5c:	b97d      	cbnz	r5, 810ae7e <_scanf_float+0x212>
 810ae5e:	f1b9 0f00 	cmp.w	r9, #0
 810ae62:	f47f af38 	bne.w	810acd6 <_scanf_float+0x6a>
 810ae66:	6822      	ldr	r2, [r4, #0]
 810ae68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810ae6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810ae70:	f040 8108 	bne.w	810b084 <_scanf_float+0x418>
 810ae74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810ae78:	6022      	str	r2, [r4, #0]
 810ae7a:	2501      	movs	r5, #1
 810ae7c:	e7bf      	b.n	810adfe <_scanf_float+0x192>
 810ae7e:	2d03      	cmp	r5, #3
 810ae80:	d0e2      	beq.n	810ae48 <_scanf_float+0x1dc>
 810ae82:	2d05      	cmp	r5, #5
 810ae84:	e7de      	b.n	810ae44 <_scanf_float+0x1d8>
 810ae86:	2d02      	cmp	r5, #2
 810ae88:	f47f af22 	bne.w	810acd0 <_scanf_float+0x64>
 810ae8c:	2503      	movs	r5, #3
 810ae8e:	e7b6      	b.n	810adfe <_scanf_float+0x192>
 810ae90:	2d06      	cmp	r5, #6
 810ae92:	f47f af1d 	bne.w	810acd0 <_scanf_float+0x64>
 810ae96:	2507      	movs	r5, #7
 810ae98:	e7b1      	b.n	810adfe <_scanf_float+0x192>
 810ae9a:	6822      	ldr	r2, [r4, #0]
 810ae9c:	0591      	lsls	r1, r2, #22
 810ae9e:	f57f af17 	bpl.w	810acd0 <_scanf_float+0x64>
 810aea2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810aea6:	6022      	str	r2, [r4, #0]
 810aea8:	f8cd 9008 	str.w	r9, [sp, #8]
 810aeac:	e7a7      	b.n	810adfe <_scanf_float+0x192>
 810aeae:	6822      	ldr	r2, [r4, #0]
 810aeb0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810aeb4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810aeb8:	d006      	beq.n	810aec8 <_scanf_float+0x25c>
 810aeba:	0550      	lsls	r0, r2, #21
 810aebc:	f57f af08 	bpl.w	810acd0 <_scanf_float+0x64>
 810aec0:	f1b9 0f00 	cmp.w	r9, #0
 810aec4:	f000 80de 	beq.w	810b084 <_scanf_float+0x418>
 810aec8:	0591      	lsls	r1, r2, #22
 810aeca:	bf58      	it	pl
 810aecc:	9902      	ldrpl	r1, [sp, #8]
 810aece:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810aed2:	bf58      	it	pl
 810aed4:	eba9 0101 	subpl.w	r1, r9, r1
 810aed8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810aedc:	bf58      	it	pl
 810aede:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810aee2:	6022      	str	r2, [r4, #0]
 810aee4:	f04f 0900 	mov.w	r9, #0
 810aee8:	e789      	b.n	810adfe <_scanf_float+0x192>
 810aeea:	f04f 0a03 	mov.w	sl, #3
 810aeee:	e786      	b.n	810adfe <_scanf_float+0x192>
 810aef0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810aef4:	4639      	mov	r1, r7
 810aef6:	4640      	mov	r0, r8
 810aef8:	4798      	blx	r3
 810aefa:	2800      	cmp	r0, #0
 810aefc:	f43f aedb 	beq.w	810acb6 <_scanf_float+0x4a>
 810af00:	e6e6      	b.n	810acd0 <_scanf_float+0x64>
 810af02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810af06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810af0a:	463a      	mov	r2, r7
 810af0c:	4640      	mov	r0, r8
 810af0e:	4798      	blx	r3
 810af10:	6923      	ldr	r3, [r4, #16]
 810af12:	3b01      	subs	r3, #1
 810af14:	6123      	str	r3, [r4, #16]
 810af16:	e6e8      	b.n	810acea <_scanf_float+0x7e>
 810af18:	1e6b      	subs	r3, r5, #1
 810af1a:	2b06      	cmp	r3, #6
 810af1c:	d824      	bhi.n	810af68 <_scanf_float+0x2fc>
 810af1e:	2d02      	cmp	r5, #2
 810af20:	d836      	bhi.n	810af90 <_scanf_float+0x324>
 810af22:	9b01      	ldr	r3, [sp, #4]
 810af24:	429e      	cmp	r6, r3
 810af26:	f67f aee4 	bls.w	810acf2 <_scanf_float+0x86>
 810af2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810af2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810af32:	463a      	mov	r2, r7
 810af34:	4640      	mov	r0, r8
 810af36:	4798      	blx	r3
 810af38:	6923      	ldr	r3, [r4, #16]
 810af3a:	3b01      	subs	r3, #1
 810af3c:	6123      	str	r3, [r4, #16]
 810af3e:	e7f0      	b.n	810af22 <_scanf_float+0x2b6>
 810af40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810af44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810af48:	463a      	mov	r2, r7
 810af4a:	4640      	mov	r0, r8
 810af4c:	4798      	blx	r3
 810af4e:	6923      	ldr	r3, [r4, #16]
 810af50:	3b01      	subs	r3, #1
 810af52:	6123      	str	r3, [r4, #16]
 810af54:	f10a 3aff 	add.w	sl, sl, #4294967295
 810af58:	fa5f fa8a 	uxtb.w	sl, sl
 810af5c:	f1ba 0f02 	cmp.w	sl, #2
 810af60:	d1ee      	bne.n	810af40 <_scanf_float+0x2d4>
 810af62:	3d03      	subs	r5, #3
 810af64:	b2ed      	uxtb	r5, r5
 810af66:	1b76      	subs	r6, r6, r5
 810af68:	6823      	ldr	r3, [r4, #0]
 810af6a:	05da      	lsls	r2, r3, #23
 810af6c:	d530      	bpl.n	810afd0 <_scanf_float+0x364>
 810af6e:	055b      	lsls	r3, r3, #21
 810af70:	d511      	bpl.n	810af96 <_scanf_float+0x32a>
 810af72:	9b01      	ldr	r3, [sp, #4]
 810af74:	429e      	cmp	r6, r3
 810af76:	f67f aebc 	bls.w	810acf2 <_scanf_float+0x86>
 810af7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810af7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810af82:	463a      	mov	r2, r7
 810af84:	4640      	mov	r0, r8
 810af86:	4798      	blx	r3
 810af88:	6923      	ldr	r3, [r4, #16]
 810af8a:	3b01      	subs	r3, #1
 810af8c:	6123      	str	r3, [r4, #16]
 810af8e:	e7f0      	b.n	810af72 <_scanf_float+0x306>
 810af90:	46aa      	mov	sl, r5
 810af92:	46b3      	mov	fp, r6
 810af94:	e7de      	b.n	810af54 <_scanf_float+0x2e8>
 810af96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810af9a:	6923      	ldr	r3, [r4, #16]
 810af9c:	2965      	cmp	r1, #101	@ 0x65
 810af9e:	f103 33ff 	add.w	r3, r3, #4294967295
 810afa2:	f106 35ff 	add.w	r5, r6, #4294967295
 810afa6:	6123      	str	r3, [r4, #16]
 810afa8:	d00c      	beq.n	810afc4 <_scanf_float+0x358>
 810afaa:	2945      	cmp	r1, #69	@ 0x45
 810afac:	d00a      	beq.n	810afc4 <_scanf_float+0x358>
 810afae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810afb2:	463a      	mov	r2, r7
 810afb4:	4640      	mov	r0, r8
 810afb6:	4798      	blx	r3
 810afb8:	6923      	ldr	r3, [r4, #16]
 810afba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810afbe:	3b01      	subs	r3, #1
 810afc0:	1eb5      	subs	r5, r6, #2
 810afc2:	6123      	str	r3, [r4, #16]
 810afc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810afc8:	463a      	mov	r2, r7
 810afca:	4640      	mov	r0, r8
 810afcc:	4798      	blx	r3
 810afce:	462e      	mov	r6, r5
 810afd0:	6822      	ldr	r2, [r4, #0]
 810afd2:	f012 0210 	ands.w	r2, r2, #16
 810afd6:	d001      	beq.n	810afdc <_scanf_float+0x370>
 810afd8:	2000      	movs	r0, #0
 810afda:	e68b      	b.n	810acf4 <_scanf_float+0x88>
 810afdc:	7032      	strb	r2, [r6, #0]
 810afde:	6823      	ldr	r3, [r4, #0]
 810afe0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810afe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810afe8:	d11c      	bne.n	810b024 <_scanf_float+0x3b8>
 810afea:	9b02      	ldr	r3, [sp, #8]
 810afec:	454b      	cmp	r3, r9
 810afee:	eba3 0209 	sub.w	r2, r3, r9
 810aff2:	d123      	bne.n	810b03c <_scanf_float+0x3d0>
 810aff4:	9901      	ldr	r1, [sp, #4]
 810aff6:	2200      	movs	r2, #0
 810aff8:	4640      	mov	r0, r8
 810affa:	f002 fc6d 	bl	810d8d8 <_strtod_r>
 810affe:	9b03      	ldr	r3, [sp, #12]
 810b000:	6821      	ldr	r1, [r4, #0]
 810b002:	681b      	ldr	r3, [r3, #0]
 810b004:	f011 0f02 	tst.w	r1, #2
 810b008:	ec57 6b10 	vmov	r6, r7, d0
 810b00c:	f103 0204 	add.w	r2, r3, #4
 810b010:	d01f      	beq.n	810b052 <_scanf_float+0x3e6>
 810b012:	9903      	ldr	r1, [sp, #12]
 810b014:	600a      	str	r2, [r1, #0]
 810b016:	681b      	ldr	r3, [r3, #0]
 810b018:	e9c3 6700 	strd	r6, r7, [r3]
 810b01c:	68e3      	ldr	r3, [r4, #12]
 810b01e:	3301      	adds	r3, #1
 810b020:	60e3      	str	r3, [r4, #12]
 810b022:	e7d9      	b.n	810afd8 <_scanf_float+0x36c>
 810b024:	9b04      	ldr	r3, [sp, #16]
 810b026:	2b00      	cmp	r3, #0
 810b028:	d0e4      	beq.n	810aff4 <_scanf_float+0x388>
 810b02a:	9905      	ldr	r1, [sp, #20]
 810b02c:	230a      	movs	r3, #10
 810b02e:	3101      	adds	r1, #1
 810b030:	4640      	mov	r0, r8
 810b032:	f002 fcd1 	bl	810d9d8 <_strtol_r>
 810b036:	9b04      	ldr	r3, [sp, #16]
 810b038:	9e05      	ldr	r6, [sp, #20]
 810b03a:	1ac2      	subs	r2, r0, r3
 810b03c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810b040:	429e      	cmp	r6, r3
 810b042:	bf28      	it	cs
 810b044:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810b048:	4910      	ldr	r1, [pc, #64]	@ (810b08c <_scanf_float+0x420>)
 810b04a:	4630      	mov	r0, r6
 810b04c:	f000 f954 	bl	810b2f8 <siprintf>
 810b050:	e7d0      	b.n	810aff4 <_scanf_float+0x388>
 810b052:	f011 0f04 	tst.w	r1, #4
 810b056:	9903      	ldr	r1, [sp, #12]
 810b058:	600a      	str	r2, [r1, #0]
 810b05a:	d1dc      	bne.n	810b016 <_scanf_float+0x3aa>
 810b05c:	681d      	ldr	r5, [r3, #0]
 810b05e:	4632      	mov	r2, r6
 810b060:	463b      	mov	r3, r7
 810b062:	4630      	mov	r0, r6
 810b064:	4639      	mov	r1, r7
 810b066:	f7f5 fde9 	bl	8100c3c <__aeabi_dcmpun>
 810b06a:	b128      	cbz	r0, 810b078 <_scanf_float+0x40c>
 810b06c:	4808      	ldr	r0, [pc, #32]	@ (810b090 <_scanf_float+0x424>)
 810b06e:	f000 fad9 	bl	810b624 <nanf>
 810b072:	ed85 0a00 	vstr	s0, [r5]
 810b076:	e7d1      	b.n	810b01c <_scanf_float+0x3b0>
 810b078:	4630      	mov	r0, r6
 810b07a:	4639      	mov	r1, r7
 810b07c:	f7f5 fe3c 	bl	8100cf8 <__aeabi_d2f>
 810b080:	6028      	str	r0, [r5, #0]
 810b082:	e7cb      	b.n	810b01c <_scanf_float+0x3b0>
 810b084:	f04f 0900 	mov.w	r9, #0
 810b088:	e629      	b.n	810acde <_scanf_float+0x72>
 810b08a:	bf00      	nop
 810b08c:	081af108 	.word	0x081af108
 810b090:	0819bbc0 	.word	0x0819bbc0

0810b094 <std>:
 810b094:	2300      	movs	r3, #0
 810b096:	b510      	push	{r4, lr}
 810b098:	4604      	mov	r4, r0
 810b09a:	e9c0 3300 	strd	r3, r3, [r0]
 810b09e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b0a2:	6083      	str	r3, [r0, #8]
 810b0a4:	8181      	strh	r1, [r0, #12]
 810b0a6:	6643      	str	r3, [r0, #100]	@ 0x64
 810b0a8:	81c2      	strh	r2, [r0, #14]
 810b0aa:	6183      	str	r3, [r0, #24]
 810b0ac:	4619      	mov	r1, r3
 810b0ae:	2208      	movs	r2, #8
 810b0b0:	305c      	adds	r0, #92	@ 0x5c
 810b0b2:	f000 fa19 	bl	810b4e8 <memset>
 810b0b6:	4b0d      	ldr	r3, [pc, #52]	@ (810b0ec <std+0x58>)
 810b0b8:	6263      	str	r3, [r4, #36]	@ 0x24
 810b0ba:	4b0d      	ldr	r3, [pc, #52]	@ (810b0f0 <std+0x5c>)
 810b0bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 810b0be:	4b0d      	ldr	r3, [pc, #52]	@ (810b0f4 <std+0x60>)
 810b0c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810b0c2:	4b0d      	ldr	r3, [pc, #52]	@ (810b0f8 <std+0x64>)
 810b0c4:	6323      	str	r3, [r4, #48]	@ 0x30
 810b0c6:	4b0d      	ldr	r3, [pc, #52]	@ (810b0fc <std+0x68>)
 810b0c8:	6224      	str	r4, [r4, #32]
 810b0ca:	429c      	cmp	r4, r3
 810b0cc:	d006      	beq.n	810b0dc <std+0x48>
 810b0ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810b0d2:	4294      	cmp	r4, r2
 810b0d4:	d002      	beq.n	810b0dc <std+0x48>
 810b0d6:	33d0      	adds	r3, #208	@ 0xd0
 810b0d8:	429c      	cmp	r4, r3
 810b0da:	d105      	bne.n	810b0e8 <std+0x54>
 810b0dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810b0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b0e4:	f000 ba8c 	b.w	810b600 <__retarget_lock_init_recursive>
 810b0e8:	bd10      	pop	{r4, pc}
 810b0ea:	bf00      	nop
 810b0ec:	0810b339 	.word	0x0810b339
 810b0f0:	0810b35b 	.word	0x0810b35b
 810b0f4:	0810b393 	.word	0x0810b393
 810b0f8:	0810b3b7 	.word	0x0810b3b7
 810b0fc:	1001abd8 	.word	0x1001abd8

0810b100 <stdio_exit_handler>:
 810b100:	4a02      	ldr	r2, [pc, #8]	@ (810b10c <stdio_exit_handler+0xc>)
 810b102:	4903      	ldr	r1, [pc, #12]	@ (810b110 <stdio_exit_handler+0x10>)
 810b104:	4803      	ldr	r0, [pc, #12]	@ (810b114 <stdio_exit_handler+0x14>)
 810b106:	f000 b869 	b.w	810b1dc <_fwalk_sglue>
 810b10a:	bf00      	nop
 810b10c:	10000b74 	.word	0x10000b74
 810b110:	0810e019 	.word	0x0810e019
 810b114:	10000b84 	.word	0x10000b84

0810b118 <cleanup_stdio>:
 810b118:	6841      	ldr	r1, [r0, #4]
 810b11a:	4b0c      	ldr	r3, [pc, #48]	@ (810b14c <cleanup_stdio+0x34>)
 810b11c:	4299      	cmp	r1, r3
 810b11e:	b510      	push	{r4, lr}
 810b120:	4604      	mov	r4, r0
 810b122:	d001      	beq.n	810b128 <cleanup_stdio+0x10>
 810b124:	f002 ff78 	bl	810e018 <_fflush_r>
 810b128:	68a1      	ldr	r1, [r4, #8]
 810b12a:	4b09      	ldr	r3, [pc, #36]	@ (810b150 <cleanup_stdio+0x38>)
 810b12c:	4299      	cmp	r1, r3
 810b12e:	d002      	beq.n	810b136 <cleanup_stdio+0x1e>
 810b130:	4620      	mov	r0, r4
 810b132:	f002 ff71 	bl	810e018 <_fflush_r>
 810b136:	68e1      	ldr	r1, [r4, #12]
 810b138:	4b06      	ldr	r3, [pc, #24]	@ (810b154 <cleanup_stdio+0x3c>)
 810b13a:	4299      	cmp	r1, r3
 810b13c:	d004      	beq.n	810b148 <cleanup_stdio+0x30>
 810b13e:	4620      	mov	r0, r4
 810b140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b144:	f002 bf68 	b.w	810e018 <_fflush_r>
 810b148:	bd10      	pop	{r4, pc}
 810b14a:	bf00      	nop
 810b14c:	1001abd8 	.word	0x1001abd8
 810b150:	1001ac40 	.word	0x1001ac40
 810b154:	1001aca8 	.word	0x1001aca8

0810b158 <global_stdio_init.part.0>:
 810b158:	b510      	push	{r4, lr}
 810b15a:	4b0b      	ldr	r3, [pc, #44]	@ (810b188 <global_stdio_init.part.0+0x30>)
 810b15c:	4c0b      	ldr	r4, [pc, #44]	@ (810b18c <global_stdio_init.part.0+0x34>)
 810b15e:	4a0c      	ldr	r2, [pc, #48]	@ (810b190 <global_stdio_init.part.0+0x38>)
 810b160:	601a      	str	r2, [r3, #0]
 810b162:	4620      	mov	r0, r4
 810b164:	2200      	movs	r2, #0
 810b166:	2104      	movs	r1, #4
 810b168:	f7ff ff94 	bl	810b094 <std>
 810b16c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810b170:	2201      	movs	r2, #1
 810b172:	2109      	movs	r1, #9
 810b174:	f7ff ff8e 	bl	810b094 <std>
 810b178:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810b17c:	2202      	movs	r2, #2
 810b17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b182:	2112      	movs	r1, #18
 810b184:	f7ff bf86 	b.w	810b094 <std>
 810b188:	1001ad10 	.word	0x1001ad10
 810b18c:	1001abd8 	.word	0x1001abd8
 810b190:	0810b101 	.word	0x0810b101

0810b194 <__sfp_lock_acquire>:
 810b194:	4801      	ldr	r0, [pc, #4]	@ (810b19c <__sfp_lock_acquire+0x8>)
 810b196:	f000 ba34 	b.w	810b602 <__retarget_lock_acquire_recursive>
 810b19a:	bf00      	nop
 810b19c:	1001ad19 	.word	0x1001ad19

0810b1a0 <__sfp_lock_release>:
 810b1a0:	4801      	ldr	r0, [pc, #4]	@ (810b1a8 <__sfp_lock_release+0x8>)
 810b1a2:	f000 ba2f 	b.w	810b604 <__retarget_lock_release_recursive>
 810b1a6:	bf00      	nop
 810b1a8:	1001ad19 	.word	0x1001ad19

0810b1ac <__sinit>:
 810b1ac:	b510      	push	{r4, lr}
 810b1ae:	4604      	mov	r4, r0
 810b1b0:	f7ff fff0 	bl	810b194 <__sfp_lock_acquire>
 810b1b4:	6a23      	ldr	r3, [r4, #32]
 810b1b6:	b11b      	cbz	r3, 810b1c0 <__sinit+0x14>
 810b1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b1bc:	f7ff bff0 	b.w	810b1a0 <__sfp_lock_release>
 810b1c0:	4b04      	ldr	r3, [pc, #16]	@ (810b1d4 <__sinit+0x28>)
 810b1c2:	6223      	str	r3, [r4, #32]
 810b1c4:	4b04      	ldr	r3, [pc, #16]	@ (810b1d8 <__sinit+0x2c>)
 810b1c6:	681b      	ldr	r3, [r3, #0]
 810b1c8:	2b00      	cmp	r3, #0
 810b1ca:	d1f5      	bne.n	810b1b8 <__sinit+0xc>
 810b1cc:	f7ff ffc4 	bl	810b158 <global_stdio_init.part.0>
 810b1d0:	e7f2      	b.n	810b1b8 <__sinit+0xc>
 810b1d2:	bf00      	nop
 810b1d4:	0810b119 	.word	0x0810b119
 810b1d8:	1001ad10 	.word	0x1001ad10

0810b1dc <_fwalk_sglue>:
 810b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b1e0:	4607      	mov	r7, r0
 810b1e2:	4688      	mov	r8, r1
 810b1e4:	4614      	mov	r4, r2
 810b1e6:	2600      	movs	r6, #0
 810b1e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b1ec:	f1b9 0901 	subs.w	r9, r9, #1
 810b1f0:	d505      	bpl.n	810b1fe <_fwalk_sglue+0x22>
 810b1f2:	6824      	ldr	r4, [r4, #0]
 810b1f4:	2c00      	cmp	r4, #0
 810b1f6:	d1f7      	bne.n	810b1e8 <_fwalk_sglue+0xc>
 810b1f8:	4630      	mov	r0, r6
 810b1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b1fe:	89ab      	ldrh	r3, [r5, #12]
 810b200:	2b01      	cmp	r3, #1
 810b202:	d907      	bls.n	810b214 <_fwalk_sglue+0x38>
 810b204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b208:	3301      	adds	r3, #1
 810b20a:	d003      	beq.n	810b214 <_fwalk_sglue+0x38>
 810b20c:	4629      	mov	r1, r5
 810b20e:	4638      	mov	r0, r7
 810b210:	47c0      	blx	r8
 810b212:	4306      	orrs	r6, r0
 810b214:	3568      	adds	r5, #104	@ 0x68
 810b216:	e7e9      	b.n	810b1ec <_fwalk_sglue+0x10>

0810b218 <iprintf>:
 810b218:	b40f      	push	{r0, r1, r2, r3}
 810b21a:	b507      	push	{r0, r1, r2, lr}
 810b21c:	4906      	ldr	r1, [pc, #24]	@ (810b238 <iprintf+0x20>)
 810b21e:	ab04      	add	r3, sp, #16
 810b220:	6808      	ldr	r0, [r1, #0]
 810b222:	f853 2b04 	ldr.w	r2, [r3], #4
 810b226:	6881      	ldr	r1, [r0, #8]
 810b228:	9301      	str	r3, [sp, #4]
 810b22a:	f002 fd59 	bl	810dce0 <_vfiprintf_r>
 810b22e:	b003      	add	sp, #12
 810b230:	f85d eb04 	ldr.w	lr, [sp], #4
 810b234:	b004      	add	sp, #16
 810b236:	4770      	bx	lr
 810b238:	10000b80 	.word	0x10000b80

0810b23c <_puts_r>:
 810b23c:	6a03      	ldr	r3, [r0, #32]
 810b23e:	b570      	push	{r4, r5, r6, lr}
 810b240:	6884      	ldr	r4, [r0, #8]
 810b242:	4605      	mov	r5, r0
 810b244:	460e      	mov	r6, r1
 810b246:	b90b      	cbnz	r3, 810b24c <_puts_r+0x10>
 810b248:	f7ff ffb0 	bl	810b1ac <__sinit>
 810b24c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810b24e:	07db      	lsls	r3, r3, #31
 810b250:	d405      	bmi.n	810b25e <_puts_r+0x22>
 810b252:	89a3      	ldrh	r3, [r4, #12]
 810b254:	0598      	lsls	r0, r3, #22
 810b256:	d402      	bmi.n	810b25e <_puts_r+0x22>
 810b258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810b25a:	f000 f9d2 	bl	810b602 <__retarget_lock_acquire_recursive>
 810b25e:	89a3      	ldrh	r3, [r4, #12]
 810b260:	0719      	lsls	r1, r3, #28
 810b262:	d502      	bpl.n	810b26a <_puts_r+0x2e>
 810b264:	6923      	ldr	r3, [r4, #16]
 810b266:	2b00      	cmp	r3, #0
 810b268:	d135      	bne.n	810b2d6 <_puts_r+0x9a>
 810b26a:	4621      	mov	r1, r4
 810b26c:	4628      	mov	r0, r5
 810b26e:	f000 f8e5 	bl	810b43c <__swsetup_r>
 810b272:	b380      	cbz	r0, 810b2d6 <_puts_r+0x9a>
 810b274:	f04f 35ff 	mov.w	r5, #4294967295
 810b278:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810b27a:	07da      	lsls	r2, r3, #31
 810b27c:	d405      	bmi.n	810b28a <_puts_r+0x4e>
 810b27e:	89a3      	ldrh	r3, [r4, #12]
 810b280:	059b      	lsls	r3, r3, #22
 810b282:	d402      	bmi.n	810b28a <_puts_r+0x4e>
 810b284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810b286:	f000 f9bd 	bl	810b604 <__retarget_lock_release_recursive>
 810b28a:	4628      	mov	r0, r5
 810b28c:	bd70      	pop	{r4, r5, r6, pc}
 810b28e:	2b00      	cmp	r3, #0
 810b290:	da04      	bge.n	810b29c <_puts_r+0x60>
 810b292:	69a2      	ldr	r2, [r4, #24]
 810b294:	429a      	cmp	r2, r3
 810b296:	dc17      	bgt.n	810b2c8 <_puts_r+0x8c>
 810b298:	290a      	cmp	r1, #10
 810b29a:	d015      	beq.n	810b2c8 <_puts_r+0x8c>
 810b29c:	6823      	ldr	r3, [r4, #0]
 810b29e:	1c5a      	adds	r2, r3, #1
 810b2a0:	6022      	str	r2, [r4, #0]
 810b2a2:	7019      	strb	r1, [r3, #0]
 810b2a4:	68a3      	ldr	r3, [r4, #8]
 810b2a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810b2aa:	3b01      	subs	r3, #1
 810b2ac:	60a3      	str	r3, [r4, #8]
 810b2ae:	2900      	cmp	r1, #0
 810b2b0:	d1ed      	bne.n	810b28e <_puts_r+0x52>
 810b2b2:	2b00      	cmp	r3, #0
 810b2b4:	da11      	bge.n	810b2da <_puts_r+0x9e>
 810b2b6:	4622      	mov	r2, r4
 810b2b8:	210a      	movs	r1, #10
 810b2ba:	4628      	mov	r0, r5
 810b2bc:	f000 f87f 	bl	810b3be <__swbuf_r>
 810b2c0:	3001      	adds	r0, #1
 810b2c2:	d0d7      	beq.n	810b274 <_puts_r+0x38>
 810b2c4:	250a      	movs	r5, #10
 810b2c6:	e7d7      	b.n	810b278 <_puts_r+0x3c>
 810b2c8:	4622      	mov	r2, r4
 810b2ca:	4628      	mov	r0, r5
 810b2cc:	f000 f877 	bl	810b3be <__swbuf_r>
 810b2d0:	3001      	adds	r0, #1
 810b2d2:	d1e7      	bne.n	810b2a4 <_puts_r+0x68>
 810b2d4:	e7ce      	b.n	810b274 <_puts_r+0x38>
 810b2d6:	3e01      	subs	r6, #1
 810b2d8:	e7e4      	b.n	810b2a4 <_puts_r+0x68>
 810b2da:	6823      	ldr	r3, [r4, #0]
 810b2dc:	1c5a      	adds	r2, r3, #1
 810b2de:	6022      	str	r2, [r4, #0]
 810b2e0:	220a      	movs	r2, #10
 810b2e2:	701a      	strb	r2, [r3, #0]
 810b2e4:	e7ee      	b.n	810b2c4 <_puts_r+0x88>
	...

0810b2e8 <puts>:
 810b2e8:	4b02      	ldr	r3, [pc, #8]	@ (810b2f4 <puts+0xc>)
 810b2ea:	4601      	mov	r1, r0
 810b2ec:	6818      	ldr	r0, [r3, #0]
 810b2ee:	f7ff bfa5 	b.w	810b23c <_puts_r>
 810b2f2:	bf00      	nop
 810b2f4:	10000b80 	.word	0x10000b80

0810b2f8 <siprintf>:
 810b2f8:	b40e      	push	{r1, r2, r3}
 810b2fa:	b500      	push	{lr}
 810b2fc:	b09c      	sub	sp, #112	@ 0x70
 810b2fe:	ab1d      	add	r3, sp, #116	@ 0x74
 810b300:	9002      	str	r0, [sp, #8]
 810b302:	9006      	str	r0, [sp, #24]
 810b304:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810b308:	4809      	ldr	r0, [pc, #36]	@ (810b330 <siprintf+0x38>)
 810b30a:	9107      	str	r1, [sp, #28]
 810b30c:	9104      	str	r1, [sp, #16]
 810b30e:	4909      	ldr	r1, [pc, #36]	@ (810b334 <siprintf+0x3c>)
 810b310:	f853 2b04 	ldr.w	r2, [r3], #4
 810b314:	9105      	str	r1, [sp, #20]
 810b316:	6800      	ldr	r0, [r0, #0]
 810b318:	9301      	str	r3, [sp, #4]
 810b31a:	a902      	add	r1, sp, #8
 810b31c:	f002 fbba 	bl	810da94 <_svfiprintf_r>
 810b320:	9b02      	ldr	r3, [sp, #8]
 810b322:	2200      	movs	r2, #0
 810b324:	701a      	strb	r2, [r3, #0]
 810b326:	b01c      	add	sp, #112	@ 0x70
 810b328:	f85d eb04 	ldr.w	lr, [sp], #4
 810b32c:	b003      	add	sp, #12
 810b32e:	4770      	bx	lr
 810b330:	10000b80 	.word	0x10000b80
 810b334:	ffff0208 	.word	0xffff0208

0810b338 <__sread>:
 810b338:	b510      	push	{r4, lr}
 810b33a:	460c      	mov	r4, r1
 810b33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b340:	f000 f900 	bl	810b544 <_read_r>
 810b344:	2800      	cmp	r0, #0
 810b346:	bfab      	itete	ge
 810b348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810b34a:	89a3      	ldrhlt	r3, [r4, #12]
 810b34c:	181b      	addge	r3, r3, r0
 810b34e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810b352:	bfac      	ite	ge
 810b354:	6563      	strge	r3, [r4, #84]	@ 0x54
 810b356:	81a3      	strhlt	r3, [r4, #12]
 810b358:	bd10      	pop	{r4, pc}

0810b35a <__swrite>:
 810b35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b35e:	461f      	mov	r7, r3
 810b360:	898b      	ldrh	r3, [r1, #12]
 810b362:	05db      	lsls	r3, r3, #23
 810b364:	4605      	mov	r5, r0
 810b366:	460c      	mov	r4, r1
 810b368:	4616      	mov	r6, r2
 810b36a:	d505      	bpl.n	810b378 <__swrite+0x1e>
 810b36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b370:	2302      	movs	r3, #2
 810b372:	2200      	movs	r2, #0
 810b374:	f000 f8d4 	bl	810b520 <_lseek_r>
 810b378:	89a3      	ldrh	r3, [r4, #12]
 810b37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b37e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810b382:	81a3      	strh	r3, [r4, #12]
 810b384:	4632      	mov	r2, r6
 810b386:	463b      	mov	r3, r7
 810b388:	4628      	mov	r0, r5
 810b38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b38e:	f000 b8fb 	b.w	810b588 <_write_r>

0810b392 <__sseek>:
 810b392:	b510      	push	{r4, lr}
 810b394:	460c      	mov	r4, r1
 810b396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b39a:	f000 f8c1 	bl	810b520 <_lseek_r>
 810b39e:	1c43      	adds	r3, r0, #1
 810b3a0:	89a3      	ldrh	r3, [r4, #12]
 810b3a2:	bf15      	itete	ne
 810b3a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 810b3a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810b3aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810b3ae:	81a3      	strheq	r3, [r4, #12]
 810b3b0:	bf18      	it	ne
 810b3b2:	81a3      	strhne	r3, [r4, #12]
 810b3b4:	bd10      	pop	{r4, pc}

0810b3b6 <__sclose>:
 810b3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b3ba:	f000 b8a1 	b.w	810b500 <_close_r>

0810b3be <__swbuf_r>:
 810b3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b3c0:	460e      	mov	r6, r1
 810b3c2:	4614      	mov	r4, r2
 810b3c4:	4605      	mov	r5, r0
 810b3c6:	b118      	cbz	r0, 810b3d0 <__swbuf_r+0x12>
 810b3c8:	6a03      	ldr	r3, [r0, #32]
 810b3ca:	b90b      	cbnz	r3, 810b3d0 <__swbuf_r+0x12>
 810b3cc:	f7ff feee 	bl	810b1ac <__sinit>
 810b3d0:	69a3      	ldr	r3, [r4, #24]
 810b3d2:	60a3      	str	r3, [r4, #8]
 810b3d4:	89a3      	ldrh	r3, [r4, #12]
 810b3d6:	071a      	lsls	r2, r3, #28
 810b3d8:	d501      	bpl.n	810b3de <__swbuf_r+0x20>
 810b3da:	6923      	ldr	r3, [r4, #16]
 810b3dc:	b943      	cbnz	r3, 810b3f0 <__swbuf_r+0x32>
 810b3de:	4621      	mov	r1, r4
 810b3e0:	4628      	mov	r0, r5
 810b3e2:	f000 f82b 	bl	810b43c <__swsetup_r>
 810b3e6:	b118      	cbz	r0, 810b3f0 <__swbuf_r+0x32>
 810b3e8:	f04f 37ff 	mov.w	r7, #4294967295
 810b3ec:	4638      	mov	r0, r7
 810b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b3f0:	6823      	ldr	r3, [r4, #0]
 810b3f2:	6922      	ldr	r2, [r4, #16]
 810b3f4:	1a98      	subs	r0, r3, r2
 810b3f6:	6963      	ldr	r3, [r4, #20]
 810b3f8:	b2f6      	uxtb	r6, r6
 810b3fa:	4283      	cmp	r3, r0
 810b3fc:	4637      	mov	r7, r6
 810b3fe:	dc05      	bgt.n	810b40c <__swbuf_r+0x4e>
 810b400:	4621      	mov	r1, r4
 810b402:	4628      	mov	r0, r5
 810b404:	f002 fe08 	bl	810e018 <_fflush_r>
 810b408:	2800      	cmp	r0, #0
 810b40a:	d1ed      	bne.n	810b3e8 <__swbuf_r+0x2a>
 810b40c:	68a3      	ldr	r3, [r4, #8]
 810b40e:	3b01      	subs	r3, #1
 810b410:	60a3      	str	r3, [r4, #8]
 810b412:	6823      	ldr	r3, [r4, #0]
 810b414:	1c5a      	adds	r2, r3, #1
 810b416:	6022      	str	r2, [r4, #0]
 810b418:	701e      	strb	r6, [r3, #0]
 810b41a:	6962      	ldr	r2, [r4, #20]
 810b41c:	1c43      	adds	r3, r0, #1
 810b41e:	429a      	cmp	r2, r3
 810b420:	d004      	beq.n	810b42c <__swbuf_r+0x6e>
 810b422:	89a3      	ldrh	r3, [r4, #12]
 810b424:	07db      	lsls	r3, r3, #31
 810b426:	d5e1      	bpl.n	810b3ec <__swbuf_r+0x2e>
 810b428:	2e0a      	cmp	r6, #10
 810b42a:	d1df      	bne.n	810b3ec <__swbuf_r+0x2e>
 810b42c:	4621      	mov	r1, r4
 810b42e:	4628      	mov	r0, r5
 810b430:	f002 fdf2 	bl	810e018 <_fflush_r>
 810b434:	2800      	cmp	r0, #0
 810b436:	d0d9      	beq.n	810b3ec <__swbuf_r+0x2e>
 810b438:	e7d6      	b.n	810b3e8 <__swbuf_r+0x2a>
	...

0810b43c <__swsetup_r>:
 810b43c:	b538      	push	{r3, r4, r5, lr}
 810b43e:	4b29      	ldr	r3, [pc, #164]	@ (810b4e4 <__swsetup_r+0xa8>)
 810b440:	4605      	mov	r5, r0
 810b442:	6818      	ldr	r0, [r3, #0]
 810b444:	460c      	mov	r4, r1
 810b446:	b118      	cbz	r0, 810b450 <__swsetup_r+0x14>
 810b448:	6a03      	ldr	r3, [r0, #32]
 810b44a:	b90b      	cbnz	r3, 810b450 <__swsetup_r+0x14>
 810b44c:	f7ff feae 	bl	810b1ac <__sinit>
 810b450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b454:	0719      	lsls	r1, r3, #28
 810b456:	d422      	bmi.n	810b49e <__swsetup_r+0x62>
 810b458:	06da      	lsls	r2, r3, #27
 810b45a:	d407      	bmi.n	810b46c <__swsetup_r+0x30>
 810b45c:	2209      	movs	r2, #9
 810b45e:	602a      	str	r2, [r5, #0]
 810b460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b464:	81a3      	strh	r3, [r4, #12]
 810b466:	f04f 30ff 	mov.w	r0, #4294967295
 810b46a:	e033      	b.n	810b4d4 <__swsetup_r+0x98>
 810b46c:	0758      	lsls	r0, r3, #29
 810b46e:	d512      	bpl.n	810b496 <__swsetup_r+0x5a>
 810b470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810b472:	b141      	cbz	r1, 810b486 <__swsetup_r+0x4a>
 810b474:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810b478:	4299      	cmp	r1, r3
 810b47a:	d002      	beq.n	810b482 <__swsetup_r+0x46>
 810b47c:	4628      	mov	r0, r5
 810b47e:	f000 ff23 	bl	810c2c8 <_free_r>
 810b482:	2300      	movs	r3, #0
 810b484:	6363      	str	r3, [r4, #52]	@ 0x34
 810b486:	89a3      	ldrh	r3, [r4, #12]
 810b488:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810b48c:	81a3      	strh	r3, [r4, #12]
 810b48e:	2300      	movs	r3, #0
 810b490:	6063      	str	r3, [r4, #4]
 810b492:	6923      	ldr	r3, [r4, #16]
 810b494:	6023      	str	r3, [r4, #0]
 810b496:	89a3      	ldrh	r3, [r4, #12]
 810b498:	f043 0308 	orr.w	r3, r3, #8
 810b49c:	81a3      	strh	r3, [r4, #12]
 810b49e:	6923      	ldr	r3, [r4, #16]
 810b4a0:	b94b      	cbnz	r3, 810b4b6 <__swsetup_r+0x7a>
 810b4a2:	89a3      	ldrh	r3, [r4, #12]
 810b4a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810b4a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b4ac:	d003      	beq.n	810b4b6 <__swsetup_r+0x7a>
 810b4ae:	4621      	mov	r1, r4
 810b4b0:	4628      	mov	r0, r5
 810b4b2:	f002 fdff 	bl	810e0b4 <__smakebuf_r>
 810b4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b4ba:	f013 0201 	ands.w	r2, r3, #1
 810b4be:	d00a      	beq.n	810b4d6 <__swsetup_r+0x9a>
 810b4c0:	2200      	movs	r2, #0
 810b4c2:	60a2      	str	r2, [r4, #8]
 810b4c4:	6962      	ldr	r2, [r4, #20]
 810b4c6:	4252      	negs	r2, r2
 810b4c8:	61a2      	str	r2, [r4, #24]
 810b4ca:	6922      	ldr	r2, [r4, #16]
 810b4cc:	b942      	cbnz	r2, 810b4e0 <__swsetup_r+0xa4>
 810b4ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810b4d2:	d1c5      	bne.n	810b460 <__swsetup_r+0x24>
 810b4d4:	bd38      	pop	{r3, r4, r5, pc}
 810b4d6:	0799      	lsls	r1, r3, #30
 810b4d8:	bf58      	it	pl
 810b4da:	6962      	ldrpl	r2, [r4, #20]
 810b4dc:	60a2      	str	r2, [r4, #8]
 810b4de:	e7f4      	b.n	810b4ca <__swsetup_r+0x8e>
 810b4e0:	2000      	movs	r0, #0
 810b4e2:	e7f7      	b.n	810b4d4 <__swsetup_r+0x98>
 810b4e4:	10000b80 	.word	0x10000b80

0810b4e8 <memset>:
 810b4e8:	4402      	add	r2, r0
 810b4ea:	4603      	mov	r3, r0
 810b4ec:	4293      	cmp	r3, r2
 810b4ee:	d100      	bne.n	810b4f2 <memset+0xa>
 810b4f0:	4770      	bx	lr
 810b4f2:	f803 1b01 	strb.w	r1, [r3], #1
 810b4f6:	e7f9      	b.n	810b4ec <memset+0x4>

0810b4f8 <_localeconv_r>:
 810b4f8:	4800      	ldr	r0, [pc, #0]	@ (810b4fc <_localeconv_r+0x4>)
 810b4fa:	4770      	bx	lr
 810b4fc:	10000cc0 	.word	0x10000cc0

0810b500 <_close_r>:
 810b500:	b538      	push	{r3, r4, r5, lr}
 810b502:	4d06      	ldr	r5, [pc, #24]	@ (810b51c <_close_r+0x1c>)
 810b504:	2300      	movs	r3, #0
 810b506:	4604      	mov	r4, r0
 810b508:	4608      	mov	r0, r1
 810b50a:	602b      	str	r3, [r5, #0]
 810b50c:	f7f6 fde8 	bl	81020e0 <_close>
 810b510:	1c43      	adds	r3, r0, #1
 810b512:	d102      	bne.n	810b51a <_close_r+0x1a>
 810b514:	682b      	ldr	r3, [r5, #0]
 810b516:	b103      	cbz	r3, 810b51a <_close_r+0x1a>
 810b518:	6023      	str	r3, [r4, #0]
 810b51a:	bd38      	pop	{r3, r4, r5, pc}
 810b51c:	1001ad14 	.word	0x1001ad14

0810b520 <_lseek_r>:
 810b520:	b538      	push	{r3, r4, r5, lr}
 810b522:	4d07      	ldr	r5, [pc, #28]	@ (810b540 <_lseek_r+0x20>)
 810b524:	4604      	mov	r4, r0
 810b526:	4608      	mov	r0, r1
 810b528:	4611      	mov	r1, r2
 810b52a:	2200      	movs	r2, #0
 810b52c:	602a      	str	r2, [r5, #0]
 810b52e:	461a      	mov	r2, r3
 810b530:	f7f6 fde0 	bl	81020f4 <_lseek>
 810b534:	1c43      	adds	r3, r0, #1
 810b536:	d102      	bne.n	810b53e <_lseek_r+0x1e>
 810b538:	682b      	ldr	r3, [r5, #0]
 810b53a:	b103      	cbz	r3, 810b53e <_lseek_r+0x1e>
 810b53c:	6023      	str	r3, [r4, #0]
 810b53e:	bd38      	pop	{r3, r4, r5, pc}
 810b540:	1001ad14 	.word	0x1001ad14

0810b544 <_read_r>:
 810b544:	b538      	push	{r3, r4, r5, lr}
 810b546:	4d07      	ldr	r5, [pc, #28]	@ (810b564 <_read_r+0x20>)
 810b548:	4604      	mov	r4, r0
 810b54a:	4608      	mov	r0, r1
 810b54c:	4611      	mov	r1, r2
 810b54e:	2200      	movs	r2, #0
 810b550:	602a      	str	r2, [r5, #0]
 810b552:	461a      	mov	r2, r3
 810b554:	f7f6 fdb6 	bl	81020c4 <_read>
 810b558:	1c43      	adds	r3, r0, #1
 810b55a:	d102      	bne.n	810b562 <_read_r+0x1e>
 810b55c:	682b      	ldr	r3, [r5, #0]
 810b55e:	b103      	cbz	r3, 810b562 <_read_r+0x1e>
 810b560:	6023      	str	r3, [r4, #0]
 810b562:	bd38      	pop	{r3, r4, r5, pc}
 810b564:	1001ad14 	.word	0x1001ad14

0810b568 <_sbrk_r>:
 810b568:	b538      	push	{r3, r4, r5, lr}
 810b56a:	4d06      	ldr	r5, [pc, #24]	@ (810b584 <_sbrk_r+0x1c>)
 810b56c:	2300      	movs	r3, #0
 810b56e:	4604      	mov	r4, r0
 810b570:	4608      	mov	r0, r1
 810b572:	602b      	str	r3, [r5, #0]
 810b574:	f7f6 fdc0 	bl	81020f8 <_sbrk>
 810b578:	1c43      	adds	r3, r0, #1
 810b57a:	d102      	bne.n	810b582 <_sbrk_r+0x1a>
 810b57c:	682b      	ldr	r3, [r5, #0]
 810b57e:	b103      	cbz	r3, 810b582 <_sbrk_r+0x1a>
 810b580:	6023      	str	r3, [r4, #0]
 810b582:	bd38      	pop	{r3, r4, r5, pc}
 810b584:	1001ad14 	.word	0x1001ad14

0810b588 <_write_r>:
 810b588:	b538      	push	{r3, r4, r5, lr}
 810b58a:	4d07      	ldr	r5, [pc, #28]	@ (810b5a8 <_write_r+0x20>)
 810b58c:	4604      	mov	r4, r0
 810b58e:	4608      	mov	r0, r1
 810b590:	4611      	mov	r1, r2
 810b592:	2200      	movs	r2, #0
 810b594:	602a      	str	r2, [r5, #0]
 810b596:	461a      	mov	r2, r3
 810b598:	f7f6 fcb6 	bl	8101f08 <_write>
 810b59c:	1c43      	adds	r3, r0, #1
 810b59e:	d102      	bne.n	810b5a6 <_write_r+0x1e>
 810b5a0:	682b      	ldr	r3, [r5, #0]
 810b5a2:	b103      	cbz	r3, 810b5a6 <_write_r+0x1e>
 810b5a4:	6023      	str	r3, [r4, #0]
 810b5a6:	bd38      	pop	{r3, r4, r5, pc}
 810b5a8:	1001ad14 	.word	0x1001ad14

0810b5ac <__errno>:
 810b5ac:	4b01      	ldr	r3, [pc, #4]	@ (810b5b4 <__errno+0x8>)
 810b5ae:	6818      	ldr	r0, [r3, #0]
 810b5b0:	4770      	bx	lr
 810b5b2:	bf00      	nop
 810b5b4:	10000b80 	.word	0x10000b80

0810b5b8 <__libc_init_array>:
 810b5b8:	b570      	push	{r4, r5, r6, lr}
 810b5ba:	4d0d      	ldr	r5, [pc, #52]	@ (810b5f0 <__libc_init_array+0x38>)
 810b5bc:	4c0d      	ldr	r4, [pc, #52]	@ (810b5f4 <__libc_init_array+0x3c>)
 810b5be:	1b64      	subs	r4, r4, r5
 810b5c0:	10a4      	asrs	r4, r4, #2
 810b5c2:	2600      	movs	r6, #0
 810b5c4:	42a6      	cmp	r6, r4
 810b5c6:	d109      	bne.n	810b5dc <__libc_init_array+0x24>
 810b5c8:	4d0b      	ldr	r5, [pc, #44]	@ (810b5f8 <__libc_init_array+0x40>)
 810b5ca:	4c0c      	ldr	r4, [pc, #48]	@ (810b5fc <__libc_init_array+0x44>)
 810b5cc:	f003 fcba 	bl	810ef44 <_init>
 810b5d0:	1b64      	subs	r4, r4, r5
 810b5d2:	10a4      	asrs	r4, r4, #2
 810b5d4:	2600      	movs	r6, #0
 810b5d6:	42a6      	cmp	r6, r4
 810b5d8:	d105      	bne.n	810b5e6 <__libc_init_array+0x2e>
 810b5da:	bd70      	pop	{r4, r5, r6, pc}
 810b5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 810b5e0:	4798      	blx	r3
 810b5e2:	3601      	adds	r6, #1
 810b5e4:	e7ee      	b.n	810b5c4 <__libc_init_array+0xc>
 810b5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 810b5ea:	4798      	blx	r3
 810b5ec:	3601      	adds	r6, #1
 810b5ee:	e7f2      	b.n	810b5d6 <__libc_init_array+0x1e>
 810b5f0:	081af520 	.word	0x081af520
 810b5f4:	081af520 	.word	0x081af520
 810b5f8:	081af520 	.word	0x081af520
 810b5fc:	081af524 	.word	0x081af524

0810b600 <__retarget_lock_init_recursive>:
 810b600:	4770      	bx	lr

0810b602 <__retarget_lock_acquire_recursive>:
 810b602:	4770      	bx	lr

0810b604 <__retarget_lock_release_recursive>:
 810b604:	4770      	bx	lr

0810b606 <memcpy>:
 810b606:	440a      	add	r2, r1
 810b608:	4291      	cmp	r1, r2
 810b60a:	f100 33ff 	add.w	r3, r0, #4294967295
 810b60e:	d100      	bne.n	810b612 <memcpy+0xc>
 810b610:	4770      	bx	lr
 810b612:	b510      	push	{r4, lr}
 810b614:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b618:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b61c:	4291      	cmp	r1, r2
 810b61e:	d1f9      	bne.n	810b614 <memcpy+0xe>
 810b620:	bd10      	pop	{r4, pc}
	...

0810b624 <nanf>:
 810b624:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810b62c <nanf+0x8>
 810b628:	4770      	bx	lr
 810b62a:	bf00      	nop
 810b62c:	7fc00000 	.word	0x7fc00000

0810b630 <quorem>:
 810b630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b634:	6903      	ldr	r3, [r0, #16]
 810b636:	690c      	ldr	r4, [r1, #16]
 810b638:	42a3      	cmp	r3, r4
 810b63a:	4607      	mov	r7, r0
 810b63c:	db7e      	blt.n	810b73c <quorem+0x10c>
 810b63e:	3c01      	subs	r4, #1
 810b640:	f101 0814 	add.w	r8, r1, #20
 810b644:	00a3      	lsls	r3, r4, #2
 810b646:	f100 0514 	add.w	r5, r0, #20
 810b64a:	9300      	str	r3, [sp, #0]
 810b64c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b650:	9301      	str	r3, [sp, #4]
 810b652:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810b656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b65a:	3301      	adds	r3, #1
 810b65c:	429a      	cmp	r2, r3
 810b65e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810b662:	fbb2 f6f3 	udiv	r6, r2, r3
 810b666:	d32e      	bcc.n	810b6c6 <quorem+0x96>
 810b668:	f04f 0a00 	mov.w	sl, #0
 810b66c:	46c4      	mov	ip, r8
 810b66e:	46ae      	mov	lr, r5
 810b670:	46d3      	mov	fp, sl
 810b672:	f85c 3b04 	ldr.w	r3, [ip], #4
 810b676:	b298      	uxth	r0, r3
 810b678:	fb06 a000 	mla	r0, r6, r0, sl
 810b67c:	0c02      	lsrs	r2, r0, #16
 810b67e:	0c1b      	lsrs	r3, r3, #16
 810b680:	fb06 2303 	mla	r3, r6, r3, r2
 810b684:	f8de 2000 	ldr.w	r2, [lr]
 810b688:	b280      	uxth	r0, r0
 810b68a:	b292      	uxth	r2, r2
 810b68c:	1a12      	subs	r2, r2, r0
 810b68e:	445a      	add	r2, fp
 810b690:	f8de 0000 	ldr.w	r0, [lr]
 810b694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810b698:	b29b      	uxth	r3, r3
 810b69a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810b69e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810b6a2:	b292      	uxth	r2, r2
 810b6a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810b6a8:	45e1      	cmp	r9, ip
 810b6aa:	f84e 2b04 	str.w	r2, [lr], #4
 810b6ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810b6b2:	d2de      	bcs.n	810b672 <quorem+0x42>
 810b6b4:	9b00      	ldr	r3, [sp, #0]
 810b6b6:	58eb      	ldr	r3, [r5, r3]
 810b6b8:	b92b      	cbnz	r3, 810b6c6 <quorem+0x96>
 810b6ba:	9b01      	ldr	r3, [sp, #4]
 810b6bc:	3b04      	subs	r3, #4
 810b6be:	429d      	cmp	r5, r3
 810b6c0:	461a      	mov	r2, r3
 810b6c2:	d32f      	bcc.n	810b724 <quorem+0xf4>
 810b6c4:	613c      	str	r4, [r7, #16]
 810b6c6:	4638      	mov	r0, r7
 810b6c8:	f001 f90c 	bl	810c8e4 <__mcmp>
 810b6cc:	2800      	cmp	r0, #0
 810b6ce:	db25      	blt.n	810b71c <quorem+0xec>
 810b6d0:	4629      	mov	r1, r5
 810b6d2:	2000      	movs	r0, #0
 810b6d4:	f858 2b04 	ldr.w	r2, [r8], #4
 810b6d8:	f8d1 c000 	ldr.w	ip, [r1]
 810b6dc:	fa1f fe82 	uxth.w	lr, r2
 810b6e0:	fa1f f38c 	uxth.w	r3, ip
 810b6e4:	eba3 030e 	sub.w	r3, r3, lr
 810b6e8:	4403      	add	r3, r0
 810b6ea:	0c12      	lsrs	r2, r2, #16
 810b6ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810b6f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810b6f4:	b29b      	uxth	r3, r3
 810b6f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b6fa:	45c1      	cmp	r9, r8
 810b6fc:	f841 3b04 	str.w	r3, [r1], #4
 810b700:	ea4f 4022 	mov.w	r0, r2, asr #16
 810b704:	d2e6      	bcs.n	810b6d4 <quorem+0xa4>
 810b706:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810b70a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810b70e:	b922      	cbnz	r2, 810b71a <quorem+0xea>
 810b710:	3b04      	subs	r3, #4
 810b712:	429d      	cmp	r5, r3
 810b714:	461a      	mov	r2, r3
 810b716:	d30b      	bcc.n	810b730 <quorem+0x100>
 810b718:	613c      	str	r4, [r7, #16]
 810b71a:	3601      	adds	r6, #1
 810b71c:	4630      	mov	r0, r6
 810b71e:	b003      	add	sp, #12
 810b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b724:	6812      	ldr	r2, [r2, #0]
 810b726:	3b04      	subs	r3, #4
 810b728:	2a00      	cmp	r2, #0
 810b72a:	d1cb      	bne.n	810b6c4 <quorem+0x94>
 810b72c:	3c01      	subs	r4, #1
 810b72e:	e7c6      	b.n	810b6be <quorem+0x8e>
 810b730:	6812      	ldr	r2, [r2, #0]
 810b732:	3b04      	subs	r3, #4
 810b734:	2a00      	cmp	r2, #0
 810b736:	d1ef      	bne.n	810b718 <quorem+0xe8>
 810b738:	3c01      	subs	r4, #1
 810b73a:	e7ea      	b.n	810b712 <quorem+0xe2>
 810b73c:	2000      	movs	r0, #0
 810b73e:	e7ee      	b.n	810b71e <quorem+0xee>

0810b740 <_dtoa_r>:
 810b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b744:	69c7      	ldr	r7, [r0, #28]
 810b746:	b099      	sub	sp, #100	@ 0x64
 810b748:	ed8d 0b02 	vstr	d0, [sp, #8]
 810b74c:	ec55 4b10 	vmov	r4, r5, d0
 810b750:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810b752:	9109      	str	r1, [sp, #36]	@ 0x24
 810b754:	4683      	mov	fp, r0
 810b756:	920e      	str	r2, [sp, #56]	@ 0x38
 810b758:	9313      	str	r3, [sp, #76]	@ 0x4c
 810b75a:	b97f      	cbnz	r7, 810b77c <_dtoa_r+0x3c>
 810b75c:	2010      	movs	r0, #16
 810b75e:	f7fe fd49 	bl	810a1f4 <malloc>
 810b762:	4602      	mov	r2, r0
 810b764:	f8cb 001c 	str.w	r0, [fp, #28]
 810b768:	b920      	cbnz	r0, 810b774 <_dtoa_r+0x34>
 810b76a:	4ba7      	ldr	r3, [pc, #668]	@ (810ba08 <_dtoa_r+0x2c8>)
 810b76c:	21ef      	movs	r1, #239	@ 0xef
 810b76e:	48a7      	ldr	r0, [pc, #668]	@ (810ba0c <_dtoa_r+0x2cc>)
 810b770:	f002 fd32 	bl	810e1d8 <__assert_func>
 810b774:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810b778:	6007      	str	r7, [r0, #0]
 810b77a:	60c7      	str	r7, [r0, #12]
 810b77c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810b780:	6819      	ldr	r1, [r3, #0]
 810b782:	b159      	cbz	r1, 810b79c <_dtoa_r+0x5c>
 810b784:	685a      	ldr	r2, [r3, #4]
 810b786:	604a      	str	r2, [r1, #4]
 810b788:	2301      	movs	r3, #1
 810b78a:	4093      	lsls	r3, r2
 810b78c:	608b      	str	r3, [r1, #8]
 810b78e:	4658      	mov	r0, fp
 810b790:	f000 fe24 	bl	810c3dc <_Bfree>
 810b794:	f8db 301c 	ldr.w	r3, [fp, #28]
 810b798:	2200      	movs	r2, #0
 810b79a:	601a      	str	r2, [r3, #0]
 810b79c:	1e2b      	subs	r3, r5, #0
 810b79e:	bfb9      	ittee	lt
 810b7a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810b7a4:	9303      	strlt	r3, [sp, #12]
 810b7a6:	2300      	movge	r3, #0
 810b7a8:	6033      	strge	r3, [r6, #0]
 810b7aa:	9f03      	ldr	r7, [sp, #12]
 810b7ac:	4b98      	ldr	r3, [pc, #608]	@ (810ba10 <_dtoa_r+0x2d0>)
 810b7ae:	bfbc      	itt	lt
 810b7b0:	2201      	movlt	r2, #1
 810b7b2:	6032      	strlt	r2, [r6, #0]
 810b7b4:	43bb      	bics	r3, r7
 810b7b6:	d112      	bne.n	810b7de <_dtoa_r+0x9e>
 810b7b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810b7ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 810b7be:	6013      	str	r3, [r2, #0]
 810b7c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b7c4:	4323      	orrs	r3, r4
 810b7c6:	f000 854d 	beq.w	810c264 <_dtoa_r+0xb24>
 810b7ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b7cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810ba24 <_dtoa_r+0x2e4>
 810b7d0:	2b00      	cmp	r3, #0
 810b7d2:	f000 854f 	beq.w	810c274 <_dtoa_r+0xb34>
 810b7d6:	f10a 0303 	add.w	r3, sl, #3
 810b7da:	f000 bd49 	b.w	810c270 <_dtoa_r+0xb30>
 810b7de:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b7e2:	2200      	movs	r2, #0
 810b7e4:	ec51 0b17 	vmov	r0, r1, d7
 810b7e8:	2300      	movs	r3, #0
 810b7ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810b7ee:	f7f5 f9f3 	bl	8100bd8 <__aeabi_dcmpeq>
 810b7f2:	4680      	mov	r8, r0
 810b7f4:	b158      	cbz	r0, 810b80e <_dtoa_r+0xce>
 810b7f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810b7f8:	2301      	movs	r3, #1
 810b7fa:	6013      	str	r3, [r2, #0]
 810b7fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b7fe:	b113      	cbz	r3, 810b806 <_dtoa_r+0xc6>
 810b800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810b802:	4b84      	ldr	r3, [pc, #528]	@ (810ba14 <_dtoa_r+0x2d4>)
 810b804:	6013      	str	r3, [r2, #0]
 810b806:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810ba28 <_dtoa_r+0x2e8>
 810b80a:	f000 bd33 	b.w	810c274 <_dtoa_r+0xb34>
 810b80e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810b812:	aa16      	add	r2, sp, #88	@ 0x58
 810b814:	a917      	add	r1, sp, #92	@ 0x5c
 810b816:	4658      	mov	r0, fp
 810b818:	f001 f984 	bl	810cb24 <__d2b>
 810b81c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810b820:	4681      	mov	r9, r0
 810b822:	2e00      	cmp	r6, #0
 810b824:	d077      	beq.n	810b916 <_dtoa_r+0x1d6>
 810b826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810b828:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810b82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810b834:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810b838:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810b83c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810b840:	4619      	mov	r1, r3
 810b842:	2200      	movs	r2, #0
 810b844:	4b74      	ldr	r3, [pc, #464]	@ (810ba18 <_dtoa_r+0x2d8>)
 810b846:	f7f4 fda7 	bl	8100398 <__aeabi_dsub>
 810b84a:	a369      	add	r3, pc, #420	@ (adr r3, 810b9f0 <_dtoa_r+0x2b0>)
 810b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b850:	f7f4 ff5a 	bl	8100708 <__aeabi_dmul>
 810b854:	a368      	add	r3, pc, #416	@ (adr r3, 810b9f8 <_dtoa_r+0x2b8>)
 810b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b85a:	f7f4 fd9f 	bl	810039c <__adddf3>
 810b85e:	4604      	mov	r4, r0
 810b860:	4630      	mov	r0, r6
 810b862:	460d      	mov	r5, r1
 810b864:	f7f4 fee6 	bl	8100634 <__aeabi_i2d>
 810b868:	a365      	add	r3, pc, #404	@ (adr r3, 810ba00 <_dtoa_r+0x2c0>)
 810b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b86e:	f7f4 ff4b 	bl	8100708 <__aeabi_dmul>
 810b872:	4602      	mov	r2, r0
 810b874:	460b      	mov	r3, r1
 810b876:	4620      	mov	r0, r4
 810b878:	4629      	mov	r1, r5
 810b87a:	f7f4 fd8f 	bl	810039c <__adddf3>
 810b87e:	4604      	mov	r4, r0
 810b880:	460d      	mov	r5, r1
 810b882:	f7f5 f9f1 	bl	8100c68 <__aeabi_d2iz>
 810b886:	2200      	movs	r2, #0
 810b888:	4607      	mov	r7, r0
 810b88a:	2300      	movs	r3, #0
 810b88c:	4620      	mov	r0, r4
 810b88e:	4629      	mov	r1, r5
 810b890:	f7f5 f9ac 	bl	8100bec <__aeabi_dcmplt>
 810b894:	b140      	cbz	r0, 810b8a8 <_dtoa_r+0x168>
 810b896:	4638      	mov	r0, r7
 810b898:	f7f4 fecc 	bl	8100634 <__aeabi_i2d>
 810b89c:	4622      	mov	r2, r4
 810b89e:	462b      	mov	r3, r5
 810b8a0:	f7f5 f99a 	bl	8100bd8 <__aeabi_dcmpeq>
 810b8a4:	b900      	cbnz	r0, 810b8a8 <_dtoa_r+0x168>
 810b8a6:	3f01      	subs	r7, #1
 810b8a8:	2f16      	cmp	r7, #22
 810b8aa:	d851      	bhi.n	810b950 <_dtoa_r+0x210>
 810b8ac:	4b5b      	ldr	r3, [pc, #364]	@ (810ba1c <_dtoa_r+0x2dc>)
 810b8ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b8b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810b8ba:	f7f5 f997 	bl	8100bec <__aeabi_dcmplt>
 810b8be:	2800      	cmp	r0, #0
 810b8c0:	d048      	beq.n	810b954 <_dtoa_r+0x214>
 810b8c2:	3f01      	subs	r7, #1
 810b8c4:	2300      	movs	r3, #0
 810b8c6:	9312      	str	r3, [sp, #72]	@ 0x48
 810b8c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810b8ca:	1b9b      	subs	r3, r3, r6
 810b8cc:	1e5a      	subs	r2, r3, #1
 810b8ce:	bf44      	itt	mi
 810b8d0:	f1c3 0801 	rsbmi	r8, r3, #1
 810b8d4:	2300      	movmi	r3, #0
 810b8d6:	9208      	str	r2, [sp, #32]
 810b8d8:	bf54      	ite	pl
 810b8da:	f04f 0800 	movpl.w	r8, #0
 810b8de:	9308      	strmi	r3, [sp, #32]
 810b8e0:	2f00      	cmp	r7, #0
 810b8e2:	db39      	blt.n	810b958 <_dtoa_r+0x218>
 810b8e4:	9b08      	ldr	r3, [sp, #32]
 810b8e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 810b8e8:	443b      	add	r3, r7
 810b8ea:	9308      	str	r3, [sp, #32]
 810b8ec:	2300      	movs	r3, #0
 810b8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 810b8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b8f2:	2b09      	cmp	r3, #9
 810b8f4:	d864      	bhi.n	810b9c0 <_dtoa_r+0x280>
 810b8f6:	2b05      	cmp	r3, #5
 810b8f8:	bfc4      	itt	gt
 810b8fa:	3b04      	subgt	r3, #4
 810b8fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810b8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b900:	f1a3 0302 	sub.w	r3, r3, #2
 810b904:	bfcc      	ite	gt
 810b906:	2400      	movgt	r4, #0
 810b908:	2401      	movle	r4, #1
 810b90a:	2b03      	cmp	r3, #3
 810b90c:	d863      	bhi.n	810b9d6 <_dtoa_r+0x296>
 810b90e:	e8df f003 	tbb	[pc, r3]
 810b912:	372a      	.short	0x372a
 810b914:	5535      	.short	0x5535
 810b916:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810b91a:	441e      	add	r6, r3
 810b91c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810b920:	2b20      	cmp	r3, #32
 810b922:	bfc1      	itttt	gt
 810b924:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810b928:	409f      	lslgt	r7, r3
 810b92a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810b92e:	fa24 f303 	lsrgt.w	r3, r4, r3
 810b932:	bfd6      	itet	le
 810b934:	f1c3 0320 	rsble	r3, r3, #32
 810b938:	ea47 0003 	orrgt.w	r0, r7, r3
 810b93c:	fa04 f003 	lslle.w	r0, r4, r3
 810b940:	f7f4 fe68 	bl	8100614 <__aeabi_ui2d>
 810b944:	2201      	movs	r2, #1
 810b946:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810b94a:	3e01      	subs	r6, #1
 810b94c:	9214      	str	r2, [sp, #80]	@ 0x50
 810b94e:	e777      	b.n	810b840 <_dtoa_r+0x100>
 810b950:	2301      	movs	r3, #1
 810b952:	e7b8      	b.n	810b8c6 <_dtoa_r+0x186>
 810b954:	9012      	str	r0, [sp, #72]	@ 0x48
 810b956:	e7b7      	b.n	810b8c8 <_dtoa_r+0x188>
 810b958:	427b      	negs	r3, r7
 810b95a:	930a      	str	r3, [sp, #40]	@ 0x28
 810b95c:	2300      	movs	r3, #0
 810b95e:	eba8 0807 	sub.w	r8, r8, r7
 810b962:	930f      	str	r3, [sp, #60]	@ 0x3c
 810b964:	e7c4      	b.n	810b8f0 <_dtoa_r+0x1b0>
 810b966:	2300      	movs	r3, #0
 810b968:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b96a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b96c:	2b00      	cmp	r3, #0
 810b96e:	dc35      	bgt.n	810b9dc <_dtoa_r+0x29c>
 810b970:	2301      	movs	r3, #1
 810b972:	9300      	str	r3, [sp, #0]
 810b974:	9307      	str	r3, [sp, #28]
 810b976:	461a      	mov	r2, r3
 810b978:	920e      	str	r2, [sp, #56]	@ 0x38
 810b97a:	e00b      	b.n	810b994 <_dtoa_r+0x254>
 810b97c:	2301      	movs	r3, #1
 810b97e:	e7f3      	b.n	810b968 <_dtoa_r+0x228>
 810b980:	2300      	movs	r3, #0
 810b982:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b986:	18fb      	adds	r3, r7, r3
 810b988:	9300      	str	r3, [sp, #0]
 810b98a:	3301      	adds	r3, #1
 810b98c:	2b01      	cmp	r3, #1
 810b98e:	9307      	str	r3, [sp, #28]
 810b990:	bfb8      	it	lt
 810b992:	2301      	movlt	r3, #1
 810b994:	f8db 001c 	ldr.w	r0, [fp, #28]
 810b998:	2100      	movs	r1, #0
 810b99a:	2204      	movs	r2, #4
 810b99c:	f102 0514 	add.w	r5, r2, #20
 810b9a0:	429d      	cmp	r5, r3
 810b9a2:	d91f      	bls.n	810b9e4 <_dtoa_r+0x2a4>
 810b9a4:	6041      	str	r1, [r0, #4]
 810b9a6:	4658      	mov	r0, fp
 810b9a8:	f000 fcd8 	bl	810c35c <_Balloc>
 810b9ac:	4682      	mov	sl, r0
 810b9ae:	2800      	cmp	r0, #0
 810b9b0:	d13c      	bne.n	810ba2c <_dtoa_r+0x2ec>
 810b9b2:	4b1b      	ldr	r3, [pc, #108]	@ (810ba20 <_dtoa_r+0x2e0>)
 810b9b4:	4602      	mov	r2, r0
 810b9b6:	f240 11af 	movw	r1, #431	@ 0x1af
 810b9ba:	e6d8      	b.n	810b76e <_dtoa_r+0x2e>
 810b9bc:	2301      	movs	r3, #1
 810b9be:	e7e0      	b.n	810b982 <_dtoa_r+0x242>
 810b9c0:	2401      	movs	r4, #1
 810b9c2:	2300      	movs	r3, #0
 810b9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 810b9c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 810b9c8:	f04f 33ff 	mov.w	r3, #4294967295
 810b9cc:	9300      	str	r3, [sp, #0]
 810b9ce:	9307      	str	r3, [sp, #28]
 810b9d0:	2200      	movs	r2, #0
 810b9d2:	2312      	movs	r3, #18
 810b9d4:	e7d0      	b.n	810b978 <_dtoa_r+0x238>
 810b9d6:	2301      	movs	r3, #1
 810b9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b9da:	e7f5      	b.n	810b9c8 <_dtoa_r+0x288>
 810b9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b9de:	9300      	str	r3, [sp, #0]
 810b9e0:	9307      	str	r3, [sp, #28]
 810b9e2:	e7d7      	b.n	810b994 <_dtoa_r+0x254>
 810b9e4:	3101      	adds	r1, #1
 810b9e6:	0052      	lsls	r2, r2, #1
 810b9e8:	e7d8      	b.n	810b99c <_dtoa_r+0x25c>
 810b9ea:	bf00      	nop
 810b9ec:	f3af 8000 	nop.w
 810b9f0:	636f4361 	.word	0x636f4361
 810b9f4:	3fd287a7 	.word	0x3fd287a7
 810b9f8:	8b60c8b3 	.word	0x8b60c8b3
 810b9fc:	3fc68a28 	.word	0x3fc68a28
 810ba00:	509f79fb 	.word	0x509f79fb
 810ba04:	3fd34413 	.word	0x3fd34413
 810ba08:	081af11a 	.word	0x081af11a
 810ba0c:	081af131 	.word	0x081af131
 810ba10:	7ff00000 	.word	0x7ff00000
 810ba14:	081af0e5 	.word	0x081af0e5
 810ba18:	3ff80000 	.word	0x3ff80000
 810ba1c:	081af228 	.word	0x081af228
 810ba20:	081af189 	.word	0x081af189
 810ba24:	081af116 	.word	0x081af116
 810ba28:	081af0e4 	.word	0x081af0e4
 810ba2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810ba30:	6018      	str	r0, [r3, #0]
 810ba32:	9b07      	ldr	r3, [sp, #28]
 810ba34:	2b0e      	cmp	r3, #14
 810ba36:	f200 80a4 	bhi.w	810bb82 <_dtoa_r+0x442>
 810ba3a:	2c00      	cmp	r4, #0
 810ba3c:	f000 80a1 	beq.w	810bb82 <_dtoa_r+0x442>
 810ba40:	2f00      	cmp	r7, #0
 810ba42:	dd33      	ble.n	810baac <_dtoa_r+0x36c>
 810ba44:	4bad      	ldr	r3, [pc, #692]	@ (810bcfc <_dtoa_r+0x5bc>)
 810ba46:	f007 020f 	and.w	r2, r7, #15
 810ba4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810ba4e:	ed93 7b00 	vldr	d7, [r3]
 810ba52:	05f8      	lsls	r0, r7, #23
 810ba54:	ed8d 7b04 	vstr	d7, [sp, #16]
 810ba58:	ea4f 1427 	mov.w	r4, r7, asr #4
 810ba5c:	d516      	bpl.n	810ba8c <_dtoa_r+0x34c>
 810ba5e:	4ba8      	ldr	r3, [pc, #672]	@ (810bd00 <_dtoa_r+0x5c0>)
 810ba60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ba64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810ba68:	f7f4 ff78 	bl	810095c <__aeabi_ddiv>
 810ba6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ba70:	f004 040f 	and.w	r4, r4, #15
 810ba74:	2603      	movs	r6, #3
 810ba76:	4da2      	ldr	r5, [pc, #648]	@ (810bd00 <_dtoa_r+0x5c0>)
 810ba78:	b954      	cbnz	r4, 810ba90 <_dtoa_r+0x350>
 810ba7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810ba7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810ba82:	f7f4 ff6b 	bl	810095c <__aeabi_ddiv>
 810ba86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810ba8a:	e028      	b.n	810bade <_dtoa_r+0x39e>
 810ba8c:	2602      	movs	r6, #2
 810ba8e:	e7f2      	b.n	810ba76 <_dtoa_r+0x336>
 810ba90:	07e1      	lsls	r1, r4, #31
 810ba92:	d508      	bpl.n	810baa6 <_dtoa_r+0x366>
 810ba94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810ba98:	e9d5 2300 	ldrd	r2, r3, [r5]
 810ba9c:	f7f4 fe34 	bl	8100708 <__aeabi_dmul>
 810baa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810baa4:	3601      	adds	r6, #1
 810baa6:	1064      	asrs	r4, r4, #1
 810baa8:	3508      	adds	r5, #8
 810baaa:	e7e5      	b.n	810ba78 <_dtoa_r+0x338>
 810baac:	f000 80d2 	beq.w	810bc54 <_dtoa_r+0x514>
 810bab0:	427c      	negs	r4, r7
 810bab2:	4b92      	ldr	r3, [pc, #584]	@ (810bcfc <_dtoa_r+0x5bc>)
 810bab4:	4d92      	ldr	r5, [pc, #584]	@ (810bd00 <_dtoa_r+0x5c0>)
 810bab6:	f004 020f 	and.w	r2, r4, #15
 810baba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810bac6:	f7f4 fe1f 	bl	8100708 <__aeabi_dmul>
 810baca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bace:	1124      	asrs	r4, r4, #4
 810bad0:	2300      	movs	r3, #0
 810bad2:	2602      	movs	r6, #2
 810bad4:	2c00      	cmp	r4, #0
 810bad6:	f040 80b2 	bne.w	810bc3e <_dtoa_r+0x4fe>
 810bada:	2b00      	cmp	r3, #0
 810badc:	d1d3      	bne.n	810ba86 <_dtoa_r+0x346>
 810bade:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810bae0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810bae4:	2b00      	cmp	r3, #0
 810bae6:	f000 80b7 	beq.w	810bc58 <_dtoa_r+0x518>
 810baea:	4b86      	ldr	r3, [pc, #536]	@ (810bd04 <_dtoa_r+0x5c4>)
 810baec:	2200      	movs	r2, #0
 810baee:	4620      	mov	r0, r4
 810baf0:	4629      	mov	r1, r5
 810baf2:	f7f5 f87b 	bl	8100bec <__aeabi_dcmplt>
 810baf6:	2800      	cmp	r0, #0
 810baf8:	f000 80ae 	beq.w	810bc58 <_dtoa_r+0x518>
 810bafc:	9b07      	ldr	r3, [sp, #28]
 810bafe:	2b00      	cmp	r3, #0
 810bb00:	f000 80aa 	beq.w	810bc58 <_dtoa_r+0x518>
 810bb04:	9b00      	ldr	r3, [sp, #0]
 810bb06:	2b00      	cmp	r3, #0
 810bb08:	dd37      	ble.n	810bb7a <_dtoa_r+0x43a>
 810bb0a:	1e7b      	subs	r3, r7, #1
 810bb0c:	9304      	str	r3, [sp, #16]
 810bb0e:	4620      	mov	r0, r4
 810bb10:	4b7d      	ldr	r3, [pc, #500]	@ (810bd08 <_dtoa_r+0x5c8>)
 810bb12:	2200      	movs	r2, #0
 810bb14:	4629      	mov	r1, r5
 810bb16:	f7f4 fdf7 	bl	8100708 <__aeabi_dmul>
 810bb1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bb1e:	9c00      	ldr	r4, [sp, #0]
 810bb20:	3601      	adds	r6, #1
 810bb22:	4630      	mov	r0, r6
 810bb24:	f7f4 fd86 	bl	8100634 <__aeabi_i2d>
 810bb28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810bb2c:	f7f4 fdec 	bl	8100708 <__aeabi_dmul>
 810bb30:	4b76      	ldr	r3, [pc, #472]	@ (810bd0c <_dtoa_r+0x5cc>)
 810bb32:	2200      	movs	r2, #0
 810bb34:	f7f4 fc32 	bl	810039c <__adddf3>
 810bb38:	4605      	mov	r5, r0
 810bb3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810bb3e:	2c00      	cmp	r4, #0
 810bb40:	f040 808d 	bne.w	810bc5e <_dtoa_r+0x51e>
 810bb44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bb48:	4b71      	ldr	r3, [pc, #452]	@ (810bd10 <_dtoa_r+0x5d0>)
 810bb4a:	2200      	movs	r2, #0
 810bb4c:	f7f4 fc24 	bl	8100398 <__aeabi_dsub>
 810bb50:	4602      	mov	r2, r0
 810bb52:	460b      	mov	r3, r1
 810bb54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810bb58:	462a      	mov	r2, r5
 810bb5a:	4633      	mov	r3, r6
 810bb5c:	f7f5 f864 	bl	8100c28 <__aeabi_dcmpgt>
 810bb60:	2800      	cmp	r0, #0
 810bb62:	f040 828b 	bne.w	810c07c <_dtoa_r+0x93c>
 810bb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bb6a:	462a      	mov	r2, r5
 810bb6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810bb70:	f7f5 f83c 	bl	8100bec <__aeabi_dcmplt>
 810bb74:	2800      	cmp	r0, #0
 810bb76:	f040 8128 	bne.w	810bdca <_dtoa_r+0x68a>
 810bb7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810bb7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810bb82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810bb84:	2b00      	cmp	r3, #0
 810bb86:	f2c0 815a 	blt.w	810be3e <_dtoa_r+0x6fe>
 810bb8a:	2f0e      	cmp	r7, #14
 810bb8c:	f300 8157 	bgt.w	810be3e <_dtoa_r+0x6fe>
 810bb90:	4b5a      	ldr	r3, [pc, #360]	@ (810bcfc <_dtoa_r+0x5bc>)
 810bb92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810bb96:	ed93 7b00 	vldr	d7, [r3]
 810bb9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810bb9c:	2b00      	cmp	r3, #0
 810bb9e:	ed8d 7b00 	vstr	d7, [sp]
 810bba2:	da03      	bge.n	810bbac <_dtoa_r+0x46c>
 810bba4:	9b07      	ldr	r3, [sp, #28]
 810bba6:	2b00      	cmp	r3, #0
 810bba8:	f340 8101 	ble.w	810bdae <_dtoa_r+0x66e>
 810bbac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810bbb0:	4656      	mov	r6, sl
 810bbb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 810bbb6:	4620      	mov	r0, r4
 810bbb8:	4629      	mov	r1, r5
 810bbba:	f7f4 fecf 	bl	810095c <__aeabi_ddiv>
 810bbbe:	f7f5 f853 	bl	8100c68 <__aeabi_d2iz>
 810bbc2:	4680      	mov	r8, r0
 810bbc4:	f7f4 fd36 	bl	8100634 <__aeabi_i2d>
 810bbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 810bbcc:	f7f4 fd9c 	bl	8100708 <__aeabi_dmul>
 810bbd0:	4602      	mov	r2, r0
 810bbd2:	460b      	mov	r3, r1
 810bbd4:	4620      	mov	r0, r4
 810bbd6:	4629      	mov	r1, r5
 810bbd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810bbdc:	f7f4 fbdc 	bl	8100398 <__aeabi_dsub>
 810bbe0:	f806 4b01 	strb.w	r4, [r6], #1
 810bbe4:	9d07      	ldr	r5, [sp, #28]
 810bbe6:	eba6 040a 	sub.w	r4, r6, sl
 810bbea:	42a5      	cmp	r5, r4
 810bbec:	4602      	mov	r2, r0
 810bbee:	460b      	mov	r3, r1
 810bbf0:	f040 8117 	bne.w	810be22 <_dtoa_r+0x6e2>
 810bbf4:	f7f4 fbd2 	bl	810039c <__adddf3>
 810bbf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 810bbfc:	4604      	mov	r4, r0
 810bbfe:	460d      	mov	r5, r1
 810bc00:	f7f5 f812 	bl	8100c28 <__aeabi_dcmpgt>
 810bc04:	2800      	cmp	r0, #0
 810bc06:	f040 80f9 	bne.w	810bdfc <_dtoa_r+0x6bc>
 810bc0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810bc0e:	4620      	mov	r0, r4
 810bc10:	4629      	mov	r1, r5
 810bc12:	f7f4 ffe1 	bl	8100bd8 <__aeabi_dcmpeq>
 810bc16:	b118      	cbz	r0, 810bc20 <_dtoa_r+0x4e0>
 810bc18:	f018 0f01 	tst.w	r8, #1
 810bc1c:	f040 80ee 	bne.w	810bdfc <_dtoa_r+0x6bc>
 810bc20:	4649      	mov	r1, r9
 810bc22:	4658      	mov	r0, fp
 810bc24:	f000 fbda 	bl	810c3dc <_Bfree>
 810bc28:	2300      	movs	r3, #0
 810bc2a:	7033      	strb	r3, [r6, #0]
 810bc2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810bc2e:	3701      	adds	r7, #1
 810bc30:	601f      	str	r7, [r3, #0]
 810bc32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810bc34:	2b00      	cmp	r3, #0
 810bc36:	f000 831d 	beq.w	810c274 <_dtoa_r+0xb34>
 810bc3a:	601e      	str	r6, [r3, #0]
 810bc3c:	e31a      	b.n	810c274 <_dtoa_r+0xb34>
 810bc3e:	07e2      	lsls	r2, r4, #31
 810bc40:	d505      	bpl.n	810bc4e <_dtoa_r+0x50e>
 810bc42:	e9d5 2300 	ldrd	r2, r3, [r5]
 810bc46:	f7f4 fd5f 	bl	8100708 <__aeabi_dmul>
 810bc4a:	3601      	adds	r6, #1
 810bc4c:	2301      	movs	r3, #1
 810bc4e:	1064      	asrs	r4, r4, #1
 810bc50:	3508      	adds	r5, #8
 810bc52:	e73f      	b.n	810bad4 <_dtoa_r+0x394>
 810bc54:	2602      	movs	r6, #2
 810bc56:	e742      	b.n	810bade <_dtoa_r+0x39e>
 810bc58:	9c07      	ldr	r4, [sp, #28]
 810bc5a:	9704      	str	r7, [sp, #16]
 810bc5c:	e761      	b.n	810bb22 <_dtoa_r+0x3e2>
 810bc5e:	4b27      	ldr	r3, [pc, #156]	@ (810bcfc <_dtoa_r+0x5bc>)
 810bc60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810bc62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810bc66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810bc6a:	4454      	add	r4, sl
 810bc6c:	2900      	cmp	r1, #0
 810bc6e:	d053      	beq.n	810bd18 <_dtoa_r+0x5d8>
 810bc70:	4928      	ldr	r1, [pc, #160]	@ (810bd14 <_dtoa_r+0x5d4>)
 810bc72:	2000      	movs	r0, #0
 810bc74:	f7f4 fe72 	bl	810095c <__aeabi_ddiv>
 810bc78:	4633      	mov	r3, r6
 810bc7a:	462a      	mov	r2, r5
 810bc7c:	f7f4 fb8c 	bl	8100398 <__aeabi_dsub>
 810bc80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810bc84:	4656      	mov	r6, sl
 810bc86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bc8a:	f7f4 ffed 	bl	8100c68 <__aeabi_d2iz>
 810bc8e:	4605      	mov	r5, r0
 810bc90:	f7f4 fcd0 	bl	8100634 <__aeabi_i2d>
 810bc94:	4602      	mov	r2, r0
 810bc96:	460b      	mov	r3, r1
 810bc98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bc9c:	f7f4 fb7c 	bl	8100398 <__aeabi_dsub>
 810bca0:	3530      	adds	r5, #48	@ 0x30
 810bca2:	4602      	mov	r2, r0
 810bca4:	460b      	mov	r3, r1
 810bca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810bcaa:	f806 5b01 	strb.w	r5, [r6], #1
 810bcae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810bcb2:	f7f4 ff9b 	bl	8100bec <__aeabi_dcmplt>
 810bcb6:	2800      	cmp	r0, #0
 810bcb8:	d171      	bne.n	810bd9e <_dtoa_r+0x65e>
 810bcba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810bcbe:	4911      	ldr	r1, [pc, #68]	@ (810bd04 <_dtoa_r+0x5c4>)
 810bcc0:	2000      	movs	r0, #0
 810bcc2:	f7f4 fb69 	bl	8100398 <__aeabi_dsub>
 810bcc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810bcca:	f7f4 ff8f 	bl	8100bec <__aeabi_dcmplt>
 810bcce:	2800      	cmp	r0, #0
 810bcd0:	f040 8095 	bne.w	810bdfe <_dtoa_r+0x6be>
 810bcd4:	42a6      	cmp	r6, r4
 810bcd6:	f43f af50 	beq.w	810bb7a <_dtoa_r+0x43a>
 810bcda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810bcde:	4b0a      	ldr	r3, [pc, #40]	@ (810bd08 <_dtoa_r+0x5c8>)
 810bce0:	2200      	movs	r2, #0
 810bce2:	f7f4 fd11 	bl	8100708 <__aeabi_dmul>
 810bce6:	4b08      	ldr	r3, [pc, #32]	@ (810bd08 <_dtoa_r+0x5c8>)
 810bce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810bcec:	2200      	movs	r2, #0
 810bcee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bcf2:	f7f4 fd09 	bl	8100708 <__aeabi_dmul>
 810bcf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bcfa:	e7c4      	b.n	810bc86 <_dtoa_r+0x546>
 810bcfc:	081af228 	.word	0x081af228
 810bd00:	081af200 	.word	0x081af200
 810bd04:	3ff00000 	.word	0x3ff00000
 810bd08:	40240000 	.word	0x40240000
 810bd0c:	401c0000 	.word	0x401c0000
 810bd10:	40140000 	.word	0x40140000
 810bd14:	3fe00000 	.word	0x3fe00000
 810bd18:	4631      	mov	r1, r6
 810bd1a:	4628      	mov	r0, r5
 810bd1c:	f7f4 fcf4 	bl	8100708 <__aeabi_dmul>
 810bd20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810bd24:	9415      	str	r4, [sp, #84]	@ 0x54
 810bd26:	4656      	mov	r6, sl
 810bd28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bd2c:	f7f4 ff9c 	bl	8100c68 <__aeabi_d2iz>
 810bd30:	4605      	mov	r5, r0
 810bd32:	f7f4 fc7f 	bl	8100634 <__aeabi_i2d>
 810bd36:	4602      	mov	r2, r0
 810bd38:	460b      	mov	r3, r1
 810bd3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bd3e:	f7f4 fb2b 	bl	8100398 <__aeabi_dsub>
 810bd42:	3530      	adds	r5, #48	@ 0x30
 810bd44:	f806 5b01 	strb.w	r5, [r6], #1
 810bd48:	4602      	mov	r2, r0
 810bd4a:	460b      	mov	r3, r1
 810bd4c:	42a6      	cmp	r6, r4
 810bd4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810bd52:	f04f 0200 	mov.w	r2, #0
 810bd56:	d124      	bne.n	810bda2 <_dtoa_r+0x662>
 810bd58:	4bac      	ldr	r3, [pc, #688]	@ (810c00c <_dtoa_r+0x8cc>)
 810bd5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810bd5e:	f7f4 fb1d 	bl	810039c <__adddf3>
 810bd62:	4602      	mov	r2, r0
 810bd64:	460b      	mov	r3, r1
 810bd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bd6a:	f7f4 ff5d 	bl	8100c28 <__aeabi_dcmpgt>
 810bd6e:	2800      	cmp	r0, #0
 810bd70:	d145      	bne.n	810bdfe <_dtoa_r+0x6be>
 810bd72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810bd76:	49a5      	ldr	r1, [pc, #660]	@ (810c00c <_dtoa_r+0x8cc>)
 810bd78:	2000      	movs	r0, #0
 810bd7a:	f7f4 fb0d 	bl	8100398 <__aeabi_dsub>
 810bd7e:	4602      	mov	r2, r0
 810bd80:	460b      	mov	r3, r1
 810bd82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810bd86:	f7f4 ff31 	bl	8100bec <__aeabi_dcmplt>
 810bd8a:	2800      	cmp	r0, #0
 810bd8c:	f43f aef5 	beq.w	810bb7a <_dtoa_r+0x43a>
 810bd90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810bd92:	1e73      	subs	r3, r6, #1
 810bd94:	9315      	str	r3, [sp, #84]	@ 0x54
 810bd96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810bd9a:	2b30      	cmp	r3, #48	@ 0x30
 810bd9c:	d0f8      	beq.n	810bd90 <_dtoa_r+0x650>
 810bd9e:	9f04      	ldr	r7, [sp, #16]
 810bda0:	e73e      	b.n	810bc20 <_dtoa_r+0x4e0>
 810bda2:	4b9b      	ldr	r3, [pc, #620]	@ (810c010 <_dtoa_r+0x8d0>)
 810bda4:	f7f4 fcb0 	bl	8100708 <__aeabi_dmul>
 810bda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810bdac:	e7bc      	b.n	810bd28 <_dtoa_r+0x5e8>
 810bdae:	d10c      	bne.n	810bdca <_dtoa_r+0x68a>
 810bdb0:	4b98      	ldr	r3, [pc, #608]	@ (810c014 <_dtoa_r+0x8d4>)
 810bdb2:	2200      	movs	r2, #0
 810bdb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bdb8:	f7f4 fca6 	bl	8100708 <__aeabi_dmul>
 810bdbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810bdc0:	f7f4 ff28 	bl	8100c14 <__aeabi_dcmpge>
 810bdc4:	2800      	cmp	r0, #0
 810bdc6:	f000 8157 	beq.w	810c078 <_dtoa_r+0x938>
 810bdca:	2400      	movs	r4, #0
 810bdcc:	4625      	mov	r5, r4
 810bdce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810bdd0:	43db      	mvns	r3, r3
 810bdd2:	9304      	str	r3, [sp, #16]
 810bdd4:	4656      	mov	r6, sl
 810bdd6:	2700      	movs	r7, #0
 810bdd8:	4621      	mov	r1, r4
 810bdda:	4658      	mov	r0, fp
 810bddc:	f000 fafe 	bl	810c3dc <_Bfree>
 810bde0:	2d00      	cmp	r5, #0
 810bde2:	d0dc      	beq.n	810bd9e <_dtoa_r+0x65e>
 810bde4:	b12f      	cbz	r7, 810bdf2 <_dtoa_r+0x6b2>
 810bde6:	42af      	cmp	r7, r5
 810bde8:	d003      	beq.n	810bdf2 <_dtoa_r+0x6b2>
 810bdea:	4639      	mov	r1, r7
 810bdec:	4658      	mov	r0, fp
 810bdee:	f000 faf5 	bl	810c3dc <_Bfree>
 810bdf2:	4629      	mov	r1, r5
 810bdf4:	4658      	mov	r0, fp
 810bdf6:	f000 faf1 	bl	810c3dc <_Bfree>
 810bdfa:	e7d0      	b.n	810bd9e <_dtoa_r+0x65e>
 810bdfc:	9704      	str	r7, [sp, #16]
 810bdfe:	4633      	mov	r3, r6
 810be00:	461e      	mov	r6, r3
 810be02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810be06:	2a39      	cmp	r2, #57	@ 0x39
 810be08:	d107      	bne.n	810be1a <_dtoa_r+0x6da>
 810be0a:	459a      	cmp	sl, r3
 810be0c:	d1f8      	bne.n	810be00 <_dtoa_r+0x6c0>
 810be0e:	9a04      	ldr	r2, [sp, #16]
 810be10:	3201      	adds	r2, #1
 810be12:	9204      	str	r2, [sp, #16]
 810be14:	2230      	movs	r2, #48	@ 0x30
 810be16:	f88a 2000 	strb.w	r2, [sl]
 810be1a:	781a      	ldrb	r2, [r3, #0]
 810be1c:	3201      	adds	r2, #1
 810be1e:	701a      	strb	r2, [r3, #0]
 810be20:	e7bd      	b.n	810bd9e <_dtoa_r+0x65e>
 810be22:	4b7b      	ldr	r3, [pc, #492]	@ (810c010 <_dtoa_r+0x8d0>)
 810be24:	2200      	movs	r2, #0
 810be26:	f7f4 fc6f 	bl	8100708 <__aeabi_dmul>
 810be2a:	2200      	movs	r2, #0
 810be2c:	2300      	movs	r3, #0
 810be2e:	4604      	mov	r4, r0
 810be30:	460d      	mov	r5, r1
 810be32:	f7f4 fed1 	bl	8100bd8 <__aeabi_dcmpeq>
 810be36:	2800      	cmp	r0, #0
 810be38:	f43f aebb 	beq.w	810bbb2 <_dtoa_r+0x472>
 810be3c:	e6f0      	b.n	810bc20 <_dtoa_r+0x4e0>
 810be3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810be40:	2a00      	cmp	r2, #0
 810be42:	f000 80db 	beq.w	810bffc <_dtoa_r+0x8bc>
 810be46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810be48:	2a01      	cmp	r2, #1
 810be4a:	f300 80bf 	bgt.w	810bfcc <_dtoa_r+0x88c>
 810be4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810be50:	2a00      	cmp	r2, #0
 810be52:	f000 80b7 	beq.w	810bfc4 <_dtoa_r+0x884>
 810be56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810be5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810be5c:	4646      	mov	r6, r8
 810be5e:	9a08      	ldr	r2, [sp, #32]
 810be60:	2101      	movs	r1, #1
 810be62:	441a      	add	r2, r3
 810be64:	4658      	mov	r0, fp
 810be66:	4498      	add	r8, r3
 810be68:	9208      	str	r2, [sp, #32]
 810be6a:	f000 fbb5 	bl	810c5d8 <__i2b>
 810be6e:	4605      	mov	r5, r0
 810be70:	b15e      	cbz	r6, 810be8a <_dtoa_r+0x74a>
 810be72:	9b08      	ldr	r3, [sp, #32]
 810be74:	2b00      	cmp	r3, #0
 810be76:	dd08      	ble.n	810be8a <_dtoa_r+0x74a>
 810be78:	42b3      	cmp	r3, r6
 810be7a:	9a08      	ldr	r2, [sp, #32]
 810be7c:	bfa8      	it	ge
 810be7e:	4633      	movge	r3, r6
 810be80:	eba8 0803 	sub.w	r8, r8, r3
 810be84:	1af6      	subs	r6, r6, r3
 810be86:	1ad3      	subs	r3, r2, r3
 810be88:	9308      	str	r3, [sp, #32]
 810be8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810be8c:	b1f3      	cbz	r3, 810becc <_dtoa_r+0x78c>
 810be8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810be90:	2b00      	cmp	r3, #0
 810be92:	f000 80b7 	beq.w	810c004 <_dtoa_r+0x8c4>
 810be96:	b18c      	cbz	r4, 810bebc <_dtoa_r+0x77c>
 810be98:	4629      	mov	r1, r5
 810be9a:	4622      	mov	r2, r4
 810be9c:	4658      	mov	r0, fp
 810be9e:	f000 fc5b 	bl	810c758 <__pow5mult>
 810bea2:	464a      	mov	r2, r9
 810bea4:	4601      	mov	r1, r0
 810bea6:	4605      	mov	r5, r0
 810bea8:	4658      	mov	r0, fp
 810beaa:	f000 fbab 	bl	810c604 <__multiply>
 810beae:	4649      	mov	r1, r9
 810beb0:	9004      	str	r0, [sp, #16]
 810beb2:	4658      	mov	r0, fp
 810beb4:	f000 fa92 	bl	810c3dc <_Bfree>
 810beb8:	9b04      	ldr	r3, [sp, #16]
 810beba:	4699      	mov	r9, r3
 810bebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810bebe:	1b1a      	subs	r2, r3, r4
 810bec0:	d004      	beq.n	810becc <_dtoa_r+0x78c>
 810bec2:	4649      	mov	r1, r9
 810bec4:	4658      	mov	r0, fp
 810bec6:	f000 fc47 	bl	810c758 <__pow5mult>
 810beca:	4681      	mov	r9, r0
 810becc:	2101      	movs	r1, #1
 810bece:	4658      	mov	r0, fp
 810bed0:	f000 fb82 	bl	810c5d8 <__i2b>
 810bed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810bed6:	4604      	mov	r4, r0
 810bed8:	2b00      	cmp	r3, #0
 810beda:	f000 81cf 	beq.w	810c27c <_dtoa_r+0xb3c>
 810bede:	461a      	mov	r2, r3
 810bee0:	4601      	mov	r1, r0
 810bee2:	4658      	mov	r0, fp
 810bee4:	f000 fc38 	bl	810c758 <__pow5mult>
 810bee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810beea:	2b01      	cmp	r3, #1
 810beec:	4604      	mov	r4, r0
 810beee:	f300 8095 	bgt.w	810c01c <_dtoa_r+0x8dc>
 810bef2:	9b02      	ldr	r3, [sp, #8]
 810bef4:	2b00      	cmp	r3, #0
 810bef6:	f040 8087 	bne.w	810c008 <_dtoa_r+0x8c8>
 810befa:	9b03      	ldr	r3, [sp, #12]
 810befc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810bf00:	2b00      	cmp	r3, #0
 810bf02:	f040 8089 	bne.w	810c018 <_dtoa_r+0x8d8>
 810bf06:	9b03      	ldr	r3, [sp, #12]
 810bf08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810bf0c:	0d1b      	lsrs	r3, r3, #20
 810bf0e:	051b      	lsls	r3, r3, #20
 810bf10:	b12b      	cbz	r3, 810bf1e <_dtoa_r+0x7de>
 810bf12:	9b08      	ldr	r3, [sp, #32]
 810bf14:	3301      	adds	r3, #1
 810bf16:	9308      	str	r3, [sp, #32]
 810bf18:	f108 0801 	add.w	r8, r8, #1
 810bf1c:	2301      	movs	r3, #1
 810bf1e:	930a      	str	r3, [sp, #40]	@ 0x28
 810bf20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810bf22:	2b00      	cmp	r3, #0
 810bf24:	f000 81b0 	beq.w	810c288 <_dtoa_r+0xb48>
 810bf28:	6923      	ldr	r3, [r4, #16]
 810bf2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810bf2e:	6918      	ldr	r0, [r3, #16]
 810bf30:	f000 fb06 	bl	810c540 <__hi0bits>
 810bf34:	f1c0 0020 	rsb	r0, r0, #32
 810bf38:	9b08      	ldr	r3, [sp, #32]
 810bf3a:	4418      	add	r0, r3
 810bf3c:	f010 001f 	ands.w	r0, r0, #31
 810bf40:	d077      	beq.n	810c032 <_dtoa_r+0x8f2>
 810bf42:	f1c0 0320 	rsb	r3, r0, #32
 810bf46:	2b04      	cmp	r3, #4
 810bf48:	dd6b      	ble.n	810c022 <_dtoa_r+0x8e2>
 810bf4a:	9b08      	ldr	r3, [sp, #32]
 810bf4c:	f1c0 001c 	rsb	r0, r0, #28
 810bf50:	4403      	add	r3, r0
 810bf52:	4480      	add	r8, r0
 810bf54:	4406      	add	r6, r0
 810bf56:	9308      	str	r3, [sp, #32]
 810bf58:	f1b8 0f00 	cmp.w	r8, #0
 810bf5c:	dd05      	ble.n	810bf6a <_dtoa_r+0x82a>
 810bf5e:	4649      	mov	r1, r9
 810bf60:	4642      	mov	r2, r8
 810bf62:	4658      	mov	r0, fp
 810bf64:	f000 fc52 	bl	810c80c <__lshift>
 810bf68:	4681      	mov	r9, r0
 810bf6a:	9b08      	ldr	r3, [sp, #32]
 810bf6c:	2b00      	cmp	r3, #0
 810bf6e:	dd05      	ble.n	810bf7c <_dtoa_r+0x83c>
 810bf70:	4621      	mov	r1, r4
 810bf72:	461a      	mov	r2, r3
 810bf74:	4658      	mov	r0, fp
 810bf76:	f000 fc49 	bl	810c80c <__lshift>
 810bf7a:	4604      	mov	r4, r0
 810bf7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810bf7e:	2b00      	cmp	r3, #0
 810bf80:	d059      	beq.n	810c036 <_dtoa_r+0x8f6>
 810bf82:	4621      	mov	r1, r4
 810bf84:	4648      	mov	r0, r9
 810bf86:	f000 fcad 	bl	810c8e4 <__mcmp>
 810bf8a:	2800      	cmp	r0, #0
 810bf8c:	da53      	bge.n	810c036 <_dtoa_r+0x8f6>
 810bf8e:	1e7b      	subs	r3, r7, #1
 810bf90:	9304      	str	r3, [sp, #16]
 810bf92:	4649      	mov	r1, r9
 810bf94:	2300      	movs	r3, #0
 810bf96:	220a      	movs	r2, #10
 810bf98:	4658      	mov	r0, fp
 810bf9a:	f000 fa41 	bl	810c420 <__multadd>
 810bf9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810bfa0:	4681      	mov	r9, r0
 810bfa2:	2b00      	cmp	r3, #0
 810bfa4:	f000 8172 	beq.w	810c28c <_dtoa_r+0xb4c>
 810bfa8:	2300      	movs	r3, #0
 810bfaa:	4629      	mov	r1, r5
 810bfac:	220a      	movs	r2, #10
 810bfae:	4658      	mov	r0, fp
 810bfb0:	f000 fa36 	bl	810c420 <__multadd>
 810bfb4:	9b00      	ldr	r3, [sp, #0]
 810bfb6:	2b00      	cmp	r3, #0
 810bfb8:	4605      	mov	r5, r0
 810bfba:	dc67      	bgt.n	810c08c <_dtoa_r+0x94c>
 810bfbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810bfbe:	2b02      	cmp	r3, #2
 810bfc0:	dc41      	bgt.n	810c046 <_dtoa_r+0x906>
 810bfc2:	e063      	b.n	810c08c <_dtoa_r+0x94c>
 810bfc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810bfc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810bfca:	e746      	b.n	810be5a <_dtoa_r+0x71a>
 810bfcc:	9b07      	ldr	r3, [sp, #28]
 810bfce:	1e5c      	subs	r4, r3, #1
 810bfd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810bfd2:	42a3      	cmp	r3, r4
 810bfd4:	bfbf      	itttt	lt
 810bfd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810bfd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810bfda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810bfdc:	1ae3      	sublt	r3, r4, r3
 810bfde:	bfb4      	ite	lt
 810bfe0:	18d2      	addlt	r2, r2, r3
 810bfe2:	1b1c      	subge	r4, r3, r4
 810bfe4:	9b07      	ldr	r3, [sp, #28]
 810bfe6:	bfbc      	itt	lt
 810bfe8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810bfea:	2400      	movlt	r4, #0
 810bfec:	2b00      	cmp	r3, #0
 810bfee:	bfb5      	itete	lt
 810bff0:	eba8 0603 	sublt.w	r6, r8, r3
 810bff4:	9b07      	ldrge	r3, [sp, #28]
 810bff6:	2300      	movlt	r3, #0
 810bff8:	4646      	movge	r6, r8
 810bffa:	e730      	b.n	810be5e <_dtoa_r+0x71e>
 810bffc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810bffe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810c000:	4646      	mov	r6, r8
 810c002:	e735      	b.n	810be70 <_dtoa_r+0x730>
 810c004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810c006:	e75c      	b.n	810bec2 <_dtoa_r+0x782>
 810c008:	2300      	movs	r3, #0
 810c00a:	e788      	b.n	810bf1e <_dtoa_r+0x7de>
 810c00c:	3fe00000 	.word	0x3fe00000
 810c010:	40240000 	.word	0x40240000
 810c014:	40140000 	.word	0x40140000
 810c018:	9b02      	ldr	r3, [sp, #8]
 810c01a:	e780      	b.n	810bf1e <_dtoa_r+0x7de>
 810c01c:	2300      	movs	r3, #0
 810c01e:	930a      	str	r3, [sp, #40]	@ 0x28
 810c020:	e782      	b.n	810bf28 <_dtoa_r+0x7e8>
 810c022:	d099      	beq.n	810bf58 <_dtoa_r+0x818>
 810c024:	9a08      	ldr	r2, [sp, #32]
 810c026:	331c      	adds	r3, #28
 810c028:	441a      	add	r2, r3
 810c02a:	4498      	add	r8, r3
 810c02c:	441e      	add	r6, r3
 810c02e:	9208      	str	r2, [sp, #32]
 810c030:	e792      	b.n	810bf58 <_dtoa_r+0x818>
 810c032:	4603      	mov	r3, r0
 810c034:	e7f6      	b.n	810c024 <_dtoa_r+0x8e4>
 810c036:	9b07      	ldr	r3, [sp, #28]
 810c038:	9704      	str	r7, [sp, #16]
 810c03a:	2b00      	cmp	r3, #0
 810c03c:	dc20      	bgt.n	810c080 <_dtoa_r+0x940>
 810c03e:	9300      	str	r3, [sp, #0]
 810c040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c042:	2b02      	cmp	r3, #2
 810c044:	dd1e      	ble.n	810c084 <_dtoa_r+0x944>
 810c046:	9b00      	ldr	r3, [sp, #0]
 810c048:	2b00      	cmp	r3, #0
 810c04a:	f47f aec0 	bne.w	810bdce <_dtoa_r+0x68e>
 810c04e:	4621      	mov	r1, r4
 810c050:	2205      	movs	r2, #5
 810c052:	4658      	mov	r0, fp
 810c054:	f000 f9e4 	bl	810c420 <__multadd>
 810c058:	4601      	mov	r1, r0
 810c05a:	4604      	mov	r4, r0
 810c05c:	4648      	mov	r0, r9
 810c05e:	f000 fc41 	bl	810c8e4 <__mcmp>
 810c062:	2800      	cmp	r0, #0
 810c064:	f77f aeb3 	ble.w	810bdce <_dtoa_r+0x68e>
 810c068:	4656      	mov	r6, sl
 810c06a:	2331      	movs	r3, #49	@ 0x31
 810c06c:	f806 3b01 	strb.w	r3, [r6], #1
 810c070:	9b04      	ldr	r3, [sp, #16]
 810c072:	3301      	adds	r3, #1
 810c074:	9304      	str	r3, [sp, #16]
 810c076:	e6ae      	b.n	810bdd6 <_dtoa_r+0x696>
 810c078:	9c07      	ldr	r4, [sp, #28]
 810c07a:	9704      	str	r7, [sp, #16]
 810c07c:	4625      	mov	r5, r4
 810c07e:	e7f3      	b.n	810c068 <_dtoa_r+0x928>
 810c080:	9b07      	ldr	r3, [sp, #28]
 810c082:	9300      	str	r3, [sp, #0]
 810c084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c086:	2b00      	cmp	r3, #0
 810c088:	f000 8104 	beq.w	810c294 <_dtoa_r+0xb54>
 810c08c:	2e00      	cmp	r6, #0
 810c08e:	dd05      	ble.n	810c09c <_dtoa_r+0x95c>
 810c090:	4629      	mov	r1, r5
 810c092:	4632      	mov	r2, r6
 810c094:	4658      	mov	r0, fp
 810c096:	f000 fbb9 	bl	810c80c <__lshift>
 810c09a:	4605      	mov	r5, r0
 810c09c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c09e:	2b00      	cmp	r3, #0
 810c0a0:	d05a      	beq.n	810c158 <_dtoa_r+0xa18>
 810c0a2:	6869      	ldr	r1, [r5, #4]
 810c0a4:	4658      	mov	r0, fp
 810c0a6:	f000 f959 	bl	810c35c <_Balloc>
 810c0aa:	4606      	mov	r6, r0
 810c0ac:	b928      	cbnz	r0, 810c0ba <_dtoa_r+0x97a>
 810c0ae:	4b84      	ldr	r3, [pc, #528]	@ (810c2c0 <_dtoa_r+0xb80>)
 810c0b0:	4602      	mov	r2, r0
 810c0b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810c0b6:	f7ff bb5a 	b.w	810b76e <_dtoa_r+0x2e>
 810c0ba:	692a      	ldr	r2, [r5, #16]
 810c0bc:	3202      	adds	r2, #2
 810c0be:	0092      	lsls	r2, r2, #2
 810c0c0:	f105 010c 	add.w	r1, r5, #12
 810c0c4:	300c      	adds	r0, #12
 810c0c6:	f7ff fa9e 	bl	810b606 <memcpy>
 810c0ca:	2201      	movs	r2, #1
 810c0cc:	4631      	mov	r1, r6
 810c0ce:	4658      	mov	r0, fp
 810c0d0:	f000 fb9c 	bl	810c80c <__lshift>
 810c0d4:	f10a 0301 	add.w	r3, sl, #1
 810c0d8:	9307      	str	r3, [sp, #28]
 810c0da:	9b00      	ldr	r3, [sp, #0]
 810c0dc:	4453      	add	r3, sl
 810c0de:	930b      	str	r3, [sp, #44]	@ 0x2c
 810c0e0:	9b02      	ldr	r3, [sp, #8]
 810c0e2:	f003 0301 	and.w	r3, r3, #1
 810c0e6:	462f      	mov	r7, r5
 810c0e8:	930a      	str	r3, [sp, #40]	@ 0x28
 810c0ea:	4605      	mov	r5, r0
 810c0ec:	9b07      	ldr	r3, [sp, #28]
 810c0ee:	4621      	mov	r1, r4
 810c0f0:	3b01      	subs	r3, #1
 810c0f2:	4648      	mov	r0, r9
 810c0f4:	9300      	str	r3, [sp, #0]
 810c0f6:	f7ff fa9b 	bl	810b630 <quorem>
 810c0fa:	4639      	mov	r1, r7
 810c0fc:	9002      	str	r0, [sp, #8]
 810c0fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810c102:	4648      	mov	r0, r9
 810c104:	f000 fbee 	bl	810c8e4 <__mcmp>
 810c108:	462a      	mov	r2, r5
 810c10a:	9008      	str	r0, [sp, #32]
 810c10c:	4621      	mov	r1, r4
 810c10e:	4658      	mov	r0, fp
 810c110:	f000 fc04 	bl	810c91c <__mdiff>
 810c114:	68c2      	ldr	r2, [r0, #12]
 810c116:	4606      	mov	r6, r0
 810c118:	bb02      	cbnz	r2, 810c15c <_dtoa_r+0xa1c>
 810c11a:	4601      	mov	r1, r0
 810c11c:	4648      	mov	r0, r9
 810c11e:	f000 fbe1 	bl	810c8e4 <__mcmp>
 810c122:	4602      	mov	r2, r0
 810c124:	4631      	mov	r1, r6
 810c126:	4658      	mov	r0, fp
 810c128:	920e      	str	r2, [sp, #56]	@ 0x38
 810c12a:	f000 f957 	bl	810c3dc <_Bfree>
 810c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810c132:	9e07      	ldr	r6, [sp, #28]
 810c134:	ea43 0102 	orr.w	r1, r3, r2
 810c138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c13a:	4319      	orrs	r1, r3
 810c13c:	d110      	bne.n	810c160 <_dtoa_r+0xa20>
 810c13e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810c142:	d029      	beq.n	810c198 <_dtoa_r+0xa58>
 810c144:	9b08      	ldr	r3, [sp, #32]
 810c146:	2b00      	cmp	r3, #0
 810c148:	dd02      	ble.n	810c150 <_dtoa_r+0xa10>
 810c14a:	9b02      	ldr	r3, [sp, #8]
 810c14c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810c150:	9b00      	ldr	r3, [sp, #0]
 810c152:	f883 8000 	strb.w	r8, [r3]
 810c156:	e63f      	b.n	810bdd8 <_dtoa_r+0x698>
 810c158:	4628      	mov	r0, r5
 810c15a:	e7bb      	b.n	810c0d4 <_dtoa_r+0x994>
 810c15c:	2201      	movs	r2, #1
 810c15e:	e7e1      	b.n	810c124 <_dtoa_r+0x9e4>
 810c160:	9b08      	ldr	r3, [sp, #32]
 810c162:	2b00      	cmp	r3, #0
 810c164:	db04      	blt.n	810c170 <_dtoa_r+0xa30>
 810c166:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810c168:	430b      	orrs	r3, r1
 810c16a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810c16c:	430b      	orrs	r3, r1
 810c16e:	d120      	bne.n	810c1b2 <_dtoa_r+0xa72>
 810c170:	2a00      	cmp	r2, #0
 810c172:	dded      	ble.n	810c150 <_dtoa_r+0xa10>
 810c174:	4649      	mov	r1, r9
 810c176:	2201      	movs	r2, #1
 810c178:	4658      	mov	r0, fp
 810c17a:	f000 fb47 	bl	810c80c <__lshift>
 810c17e:	4621      	mov	r1, r4
 810c180:	4681      	mov	r9, r0
 810c182:	f000 fbaf 	bl	810c8e4 <__mcmp>
 810c186:	2800      	cmp	r0, #0
 810c188:	dc03      	bgt.n	810c192 <_dtoa_r+0xa52>
 810c18a:	d1e1      	bne.n	810c150 <_dtoa_r+0xa10>
 810c18c:	f018 0f01 	tst.w	r8, #1
 810c190:	d0de      	beq.n	810c150 <_dtoa_r+0xa10>
 810c192:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810c196:	d1d8      	bne.n	810c14a <_dtoa_r+0xa0a>
 810c198:	9a00      	ldr	r2, [sp, #0]
 810c19a:	2339      	movs	r3, #57	@ 0x39
 810c19c:	7013      	strb	r3, [r2, #0]
 810c19e:	4633      	mov	r3, r6
 810c1a0:	461e      	mov	r6, r3
 810c1a2:	3b01      	subs	r3, #1
 810c1a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810c1a8:	2a39      	cmp	r2, #57	@ 0x39
 810c1aa:	d052      	beq.n	810c252 <_dtoa_r+0xb12>
 810c1ac:	3201      	adds	r2, #1
 810c1ae:	701a      	strb	r2, [r3, #0]
 810c1b0:	e612      	b.n	810bdd8 <_dtoa_r+0x698>
 810c1b2:	2a00      	cmp	r2, #0
 810c1b4:	dd07      	ble.n	810c1c6 <_dtoa_r+0xa86>
 810c1b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810c1ba:	d0ed      	beq.n	810c198 <_dtoa_r+0xa58>
 810c1bc:	9a00      	ldr	r2, [sp, #0]
 810c1be:	f108 0301 	add.w	r3, r8, #1
 810c1c2:	7013      	strb	r3, [r2, #0]
 810c1c4:	e608      	b.n	810bdd8 <_dtoa_r+0x698>
 810c1c6:	9b07      	ldr	r3, [sp, #28]
 810c1c8:	9a07      	ldr	r2, [sp, #28]
 810c1ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 810c1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c1d0:	4293      	cmp	r3, r2
 810c1d2:	d028      	beq.n	810c226 <_dtoa_r+0xae6>
 810c1d4:	4649      	mov	r1, r9
 810c1d6:	2300      	movs	r3, #0
 810c1d8:	220a      	movs	r2, #10
 810c1da:	4658      	mov	r0, fp
 810c1dc:	f000 f920 	bl	810c420 <__multadd>
 810c1e0:	42af      	cmp	r7, r5
 810c1e2:	4681      	mov	r9, r0
 810c1e4:	f04f 0300 	mov.w	r3, #0
 810c1e8:	f04f 020a 	mov.w	r2, #10
 810c1ec:	4639      	mov	r1, r7
 810c1ee:	4658      	mov	r0, fp
 810c1f0:	d107      	bne.n	810c202 <_dtoa_r+0xac2>
 810c1f2:	f000 f915 	bl	810c420 <__multadd>
 810c1f6:	4607      	mov	r7, r0
 810c1f8:	4605      	mov	r5, r0
 810c1fa:	9b07      	ldr	r3, [sp, #28]
 810c1fc:	3301      	adds	r3, #1
 810c1fe:	9307      	str	r3, [sp, #28]
 810c200:	e774      	b.n	810c0ec <_dtoa_r+0x9ac>
 810c202:	f000 f90d 	bl	810c420 <__multadd>
 810c206:	4629      	mov	r1, r5
 810c208:	4607      	mov	r7, r0
 810c20a:	2300      	movs	r3, #0
 810c20c:	220a      	movs	r2, #10
 810c20e:	4658      	mov	r0, fp
 810c210:	f000 f906 	bl	810c420 <__multadd>
 810c214:	4605      	mov	r5, r0
 810c216:	e7f0      	b.n	810c1fa <_dtoa_r+0xaba>
 810c218:	9b00      	ldr	r3, [sp, #0]
 810c21a:	2b00      	cmp	r3, #0
 810c21c:	bfcc      	ite	gt
 810c21e:	461e      	movgt	r6, r3
 810c220:	2601      	movle	r6, #1
 810c222:	4456      	add	r6, sl
 810c224:	2700      	movs	r7, #0
 810c226:	4649      	mov	r1, r9
 810c228:	2201      	movs	r2, #1
 810c22a:	4658      	mov	r0, fp
 810c22c:	f000 faee 	bl	810c80c <__lshift>
 810c230:	4621      	mov	r1, r4
 810c232:	4681      	mov	r9, r0
 810c234:	f000 fb56 	bl	810c8e4 <__mcmp>
 810c238:	2800      	cmp	r0, #0
 810c23a:	dcb0      	bgt.n	810c19e <_dtoa_r+0xa5e>
 810c23c:	d102      	bne.n	810c244 <_dtoa_r+0xb04>
 810c23e:	f018 0f01 	tst.w	r8, #1
 810c242:	d1ac      	bne.n	810c19e <_dtoa_r+0xa5e>
 810c244:	4633      	mov	r3, r6
 810c246:	461e      	mov	r6, r3
 810c248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810c24c:	2a30      	cmp	r2, #48	@ 0x30
 810c24e:	d0fa      	beq.n	810c246 <_dtoa_r+0xb06>
 810c250:	e5c2      	b.n	810bdd8 <_dtoa_r+0x698>
 810c252:	459a      	cmp	sl, r3
 810c254:	d1a4      	bne.n	810c1a0 <_dtoa_r+0xa60>
 810c256:	9b04      	ldr	r3, [sp, #16]
 810c258:	3301      	adds	r3, #1
 810c25a:	9304      	str	r3, [sp, #16]
 810c25c:	2331      	movs	r3, #49	@ 0x31
 810c25e:	f88a 3000 	strb.w	r3, [sl]
 810c262:	e5b9      	b.n	810bdd8 <_dtoa_r+0x698>
 810c264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810c266:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810c2c4 <_dtoa_r+0xb84>
 810c26a:	b11b      	cbz	r3, 810c274 <_dtoa_r+0xb34>
 810c26c:	f10a 0308 	add.w	r3, sl, #8
 810c270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810c272:	6013      	str	r3, [r2, #0]
 810c274:	4650      	mov	r0, sl
 810c276:	b019      	add	sp, #100	@ 0x64
 810c278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c27c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c27e:	2b01      	cmp	r3, #1
 810c280:	f77f ae37 	ble.w	810bef2 <_dtoa_r+0x7b2>
 810c284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810c286:	930a      	str	r3, [sp, #40]	@ 0x28
 810c288:	2001      	movs	r0, #1
 810c28a:	e655      	b.n	810bf38 <_dtoa_r+0x7f8>
 810c28c:	9b00      	ldr	r3, [sp, #0]
 810c28e:	2b00      	cmp	r3, #0
 810c290:	f77f aed6 	ble.w	810c040 <_dtoa_r+0x900>
 810c294:	4656      	mov	r6, sl
 810c296:	4621      	mov	r1, r4
 810c298:	4648      	mov	r0, r9
 810c29a:	f7ff f9c9 	bl	810b630 <quorem>
 810c29e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810c2a2:	f806 8b01 	strb.w	r8, [r6], #1
 810c2a6:	9b00      	ldr	r3, [sp, #0]
 810c2a8:	eba6 020a 	sub.w	r2, r6, sl
 810c2ac:	4293      	cmp	r3, r2
 810c2ae:	ddb3      	ble.n	810c218 <_dtoa_r+0xad8>
 810c2b0:	4649      	mov	r1, r9
 810c2b2:	2300      	movs	r3, #0
 810c2b4:	220a      	movs	r2, #10
 810c2b6:	4658      	mov	r0, fp
 810c2b8:	f000 f8b2 	bl	810c420 <__multadd>
 810c2bc:	4681      	mov	r9, r0
 810c2be:	e7ea      	b.n	810c296 <_dtoa_r+0xb56>
 810c2c0:	081af189 	.word	0x081af189
 810c2c4:	081af10d 	.word	0x081af10d

0810c2c8 <_free_r>:
 810c2c8:	b538      	push	{r3, r4, r5, lr}
 810c2ca:	4605      	mov	r5, r0
 810c2cc:	2900      	cmp	r1, #0
 810c2ce:	d041      	beq.n	810c354 <_free_r+0x8c>
 810c2d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c2d4:	1f0c      	subs	r4, r1, #4
 810c2d6:	2b00      	cmp	r3, #0
 810c2d8:	bfb8      	it	lt
 810c2da:	18e4      	addlt	r4, r4, r3
 810c2dc:	f7fe f834 	bl	810a348 <__malloc_lock>
 810c2e0:	4a1d      	ldr	r2, [pc, #116]	@ (810c358 <_free_r+0x90>)
 810c2e2:	6813      	ldr	r3, [r2, #0]
 810c2e4:	b933      	cbnz	r3, 810c2f4 <_free_r+0x2c>
 810c2e6:	6063      	str	r3, [r4, #4]
 810c2e8:	6014      	str	r4, [r2, #0]
 810c2ea:	4628      	mov	r0, r5
 810c2ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810c2f0:	f7fe b830 	b.w	810a354 <__malloc_unlock>
 810c2f4:	42a3      	cmp	r3, r4
 810c2f6:	d908      	bls.n	810c30a <_free_r+0x42>
 810c2f8:	6820      	ldr	r0, [r4, #0]
 810c2fa:	1821      	adds	r1, r4, r0
 810c2fc:	428b      	cmp	r3, r1
 810c2fe:	bf01      	itttt	eq
 810c300:	6819      	ldreq	r1, [r3, #0]
 810c302:	685b      	ldreq	r3, [r3, #4]
 810c304:	1809      	addeq	r1, r1, r0
 810c306:	6021      	streq	r1, [r4, #0]
 810c308:	e7ed      	b.n	810c2e6 <_free_r+0x1e>
 810c30a:	461a      	mov	r2, r3
 810c30c:	685b      	ldr	r3, [r3, #4]
 810c30e:	b10b      	cbz	r3, 810c314 <_free_r+0x4c>
 810c310:	42a3      	cmp	r3, r4
 810c312:	d9fa      	bls.n	810c30a <_free_r+0x42>
 810c314:	6811      	ldr	r1, [r2, #0]
 810c316:	1850      	adds	r0, r2, r1
 810c318:	42a0      	cmp	r0, r4
 810c31a:	d10b      	bne.n	810c334 <_free_r+0x6c>
 810c31c:	6820      	ldr	r0, [r4, #0]
 810c31e:	4401      	add	r1, r0
 810c320:	1850      	adds	r0, r2, r1
 810c322:	4283      	cmp	r3, r0
 810c324:	6011      	str	r1, [r2, #0]
 810c326:	d1e0      	bne.n	810c2ea <_free_r+0x22>
 810c328:	6818      	ldr	r0, [r3, #0]
 810c32a:	685b      	ldr	r3, [r3, #4]
 810c32c:	6053      	str	r3, [r2, #4]
 810c32e:	4408      	add	r0, r1
 810c330:	6010      	str	r0, [r2, #0]
 810c332:	e7da      	b.n	810c2ea <_free_r+0x22>
 810c334:	d902      	bls.n	810c33c <_free_r+0x74>
 810c336:	230c      	movs	r3, #12
 810c338:	602b      	str	r3, [r5, #0]
 810c33a:	e7d6      	b.n	810c2ea <_free_r+0x22>
 810c33c:	6820      	ldr	r0, [r4, #0]
 810c33e:	1821      	adds	r1, r4, r0
 810c340:	428b      	cmp	r3, r1
 810c342:	bf04      	itt	eq
 810c344:	6819      	ldreq	r1, [r3, #0]
 810c346:	685b      	ldreq	r3, [r3, #4]
 810c348:	6063      	str	r3, [r4, #4]
 810c34a:	bf04      	itt	eq
 810c34c:	1809      	addeq	r1, r1, r0
 810c34e:	6021      	streq	r1, [r4, #0]
 810c350:	6054      	str	r4, [r2, #4]
 810c352:	e7ca      	b.n	810c2ea <_free_r+0x22>
 810c354:	bd38      	pop	{r3, r4, r5, pc}
 810c356:	bf00      	nop
 810c358:	1001abd4 	.word	0x1001abd4

0810c35c <_Balloc>:
 810c35c:	b570      	push	{r4, r5, r6, lr}
 810c35e:	69c6      	ldr	r6, [r0, #28]
 810c360:	4604      	mov	r4, r0
 810c362:	460d      	mov	r5, r1
 810c364:	b976      	cbnz	r6, 810c384 <_Balloc+0x28>
 810c366:	2010      	movs	r0, #16
 810c368:	f7fd ff44 	bl	810a1f4 <malloc>
 810c36c:	4602      	mov	r2, r0
 810c36e:	61e0      	str	r0, [r4, #28]
 810c370:	b920      	cbnz	r0, 810c37c <_Balloc+0x20>
 810c372:	4b18      	ldr	r3, [pc, #96]	@ (810c3d4 <_Balloc+0x78>)
 810c374:	4818      	ldr	r0, [pc, #96]	@ (810c3d8 <_Balloc+0x7c>)
 810c376:	216b      	movs	r1, #107	@ 0x6b
 810c378:	f001 ff2e 	bl	810e1d8 <__assert_func>
 810c37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c380:	6006      	str	r6, [r0, #0]
 810c382:	60c6      	str	r6, [r0, #12]
 810c384:	69e6      	ldr	r6, [r4, #28]
 810c386:	68f3      	ldr	r3, [r6, #12]
 810c388:	b183      	cbz	r3, 810c3ac <_Balloc+0x50>
 810c38a:	69e3      	ldr	r3, [r4, #28]
 810c38c:	68db      	ldr	r3, [r3, #12]
 810c38e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810c392:	b9b8      	cbnz	r0, 810c3c4 <_Balloc+0x68>
 810c394:	2101      	movs	r1, #1
 810c396:	fa01 f605 	lsl.w	r6, r1, r5
 810c39a:	1d72      	adds	r2, r6, #5
 810c39c:	0092      	lsls	r2, r2, #2
 810c39e:	4620      	mov	r0, r4
 810c3a0:	f001 ff38 	bl	810e214 <_calloc_r>
 810c3a4:	b160      	cbz	r0, 810c3c0 <_Balloc+0x64>
 810c3a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810c3aa:	e00e      	b.n	810c3ca <_Balloc+0x6e>
 810c3ac:	2221      	movs	r2, #33	@ 0x21
 810c3ae:	2104      	movs	r1, #4
 810c3b0:	4620      	mov	r0, r4
 810c3b2:	f001 ff2f 	bl	810e214 <_calloc_r>
 810c3b6:	69e3      	ldr	r3, [r4, #28]
 810c3b8:	60f0      	str	r0, [r6, #12]
 810c3ba:	68db      	ldr	r3, [r3, #12]
 810c3bc:	2b00      	cmp	r3, #0
 810c3be:	d1e4      	bne.n	810c38a <_Balloc+0x2e>
 810c3c0:	2000      	movs	r0, #0
 810c3c2:	bd70      	pop	{r4, r5, r6, pc}
 810c3c4:	6802      	ldr	r2, [r0, #0]
 810c3c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810c3ca:	2300      	movs	r3, #0
 810c3cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c3d0:	e7f7      	b.n	810c3c2 <_Balloc+0x66>
 810c3d2:	bf00      	nop
 810c3d4:	081af11a 	.word	0x081af11a
 810c3d8:	081af19a 	.word	0x081af19a

0810c3dc <_Bfree>:
 810c3dc:	b570      	push	{r4, r5, r6, lr}
 810c3de:	69c6      	ldr	r6, [r0, #28]
 810c3e0:	4605      	mov	r5, r0
 810c3e2:	460c      	mov	r4, r1
 810c3e4:	b976      	cbnz	r6, 810c404 <_Bfree+0x28>
 810c3e6:	2010      	movs	r0, #16
 810c3e8:	f7fd ff04 	bl	810a1f4 <malloc>
 810c3ec:	4602      	mov	r2, r0
 810c3ee:	61e8      	str	r0, [r5, #28]
 810c3f0:	b920      	cbnz	r0, 810c3fc <_Bfree+0x20>
 810c3f2:	4b09      	ldr	r3, [pc, #36]	@ (810c418 <_Bfree+0x3c>)
 810c3f4:	4809      	ldr	r0, [pc, #36]	@ (810c41c <_Bfree+0x40>)
 810c3f6:	218f      	movs	r1, #143	@ 0x8f
 810c3f8:	f001 feee 	bl	810e1d8 <__assert_func>
 810c3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810c400:	6006      	str	r6, [r0, #0]
 810c402:	60c6      	str	r6, [r0, #12]
 810c404:	b13c      	cbz	r4, 810c416 <_Bfree+0x3a>
 810c406:	69eb      	ldr	r3, [r5, #28]
 810c408:	6862      	ldr	r2, [r4, #4]
 810c40a:	68db      	ldr	r3, [r3, #12]
 810c40c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c410:	6021      	str	r1, [r4, #0]
 810c412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810c416:	bd70      	pop	{r4, r5, r6, pc}
 810c418:	081af11a 	.word	0x081af11a
 810c41c:	081af19a 	.word	0x081af19a

0810c420 <__multadd>:
 810c420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c424:	690d      	ldr	r5, [r1, #16]
 810c426:	4607      	mov	r7, r0
 810c428:	460c      	mov	r4, r1
 810c42a:	461e      	mov	r6, r3
 810c42c:	f101 0c14 	add.w	ip, r1, #20
 810c430:	2000      	movs	r0, #0
 810c432:	f8dc 3000 	ldr.w	r3, [ip]
 810c436:	b299      	uxth	r1, r3
 810c438:	fb02 6101 	mla	r1, r2, r1, r6
 810c43c:	0c1e      	lsrs	r6, r3, #16
 810c43e:	0c0b      	lsrs	r3, r1, #16
 810c440:	fb02 3306 	mla	r3, r2, r6, r3
 810c444:	b289      	uxth	r1, r1
 810c446:	3001      	adds	r0, #1
 810c448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810c44c:	4285      	cmp	r5, r0
 810c44e:	f84c 1b04 	str.w	r1, [ip], #4
 810c452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810c456:	dcec      	bgt.n	810c432 <__multadd+0x12>
 810c458:	b30e      	cbz	r6, 810c49e <__multadd+0x7e>
 810c45a:	68a3      	ldr	r3, [r4, #8]
 810c45c:	42ab      	cmp	r3, r5
 810c45e:	dc19      	bgt.n	810c494 <__multadd+0x74>
 810c460:	6861      	ldr	r1, [r4, #4]
 810c462:	4638      	mov	r0, r7
 810c464:	3101      	adds	r1, #1
 810c466:	f7ff ff79 	bl	810c35c <_Balloc>
 810c46a:	4680      	mov	r8, r0
 810c46c:	b928      	cbnz	r0, 810c47a <__multadd+0x5a>
 810c46e:	4602      	mov	r2, r0
 810c470:	4b0c      	ldr	r3, [pc, #48]	@ (810c4a4 <__multadd+0x84>)
 810c472:	480d      	ldr	r0, [pc, #52]	@ (810c4a8 <__multadd+0x88>)
 810c474:	21ba      	movs	r1, #186	@ 0xba
 810c476:	f001 feaf 	bl	810e1d8 <__assert_func>
 810c47a:	6922      	ldr	r2, [r4, #16]
 810c47c:	3202      	adds	r2, #2
 810c47e:	f104 010c 	add.w	r1, r4, #12
 810c482:	0092      	lsls	r2, r2, #2
 810c484:	300c      	adds	r0, #12
 810c486:	f7ff f8be 	bl	810b606 <memcpy>
 810c48a:	4621      	mov	r1, r4
 810c48c:	4638      	mov	r0, r7
 810c48e:	f7ff ffa5 	bl	810c3dc <_Bfree>
 810c492:	4644      	mov	r4, r8
 810c494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c498:	3501      	adds	r5, #1
 810c49a:	615e      	str	r6, [r3, #20]
 810c49c:	6125      	str	r5, [r4, #16]
 810c49e:	4620      	mov	r0, r4
 810c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c4a4:	081af189 	.word	0x081af189
 810c4a8:	081af19a 	.word	0x081af19a

0810c4ac <__s2b>:
 810c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c4b0:	460c      	mov	r4, r1
 810c4b2:	4615      	mov	r5, r2
 810c4b4:	461f      	mov	r7, r3
 810c4b6:	2209      	movs	r2, #9
 810c4b8:	3308      	adds	r3, #8
 810c4ba:	4606      	mov	r6, r0
 810c4bc:	fb93 f3f2 	sdiv	r3, r3, r2
 810c4c0:	2100      	movs	r1, #0
 810c4c2:	2201      	movs	r2, #1
 810c4c4:	429a      	cmp	r2, r3
 810c4c6:	db09      	blt.n	810c4dc <__s2b+0x30>
 810c4c8:	4630      	mov	r0, r6
 810c4ca:	f7ff ff47 	bl	810c35c <_Balloc>
 810c4ce:	b940      	cbnz	r0, 810c4e2 <__s2b+0x36>
 810c4d0:	4602      	mov	r2, r0
 810c4d2:	4b19      	ldr	r3, [pc, #100]	@ (810c538 <__s2b+0x8c>)
 810c4d4:	4819      	ldr	r0, [pc, #100]	@ (810c53c <__s2b+0x90>)
 810c4d6:	21d3      	movs	r1, #211	@ 0xd3
 810c4d8:	f001 fe7e 	bl	810e1d8 <__assert_func>
 810c4dc:	0052      	lsls	r2, r2, #1
 810c4de:	3101      	adds	r1, #1
 810c4e0:	e7f0      	b.n	810c4c4 <__s2b+0x18>
 810c4e2:	9b08      	ldr	r3, [sp, #32]
 810c4e4:	6143      	str	r3, [r0, #20]
 810c4e6:	2d09      	cmp	r5, #9
 810c4e8:	f04f 0301 	mov.w	r3, #1
 810c4ec:	6103      	str	r3, [r0, #16]
 810c4ee:	dd16      	ble.n	810c51e <__s2b+0x72>
 810c4f0:	f104 0909 	add.w	r9, r4, #9
 810c4f4:	46c8      	mov	r8, r9
 810c4f6:	442c      	add	r4, r5
 810c4f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 810c4fc:	4601      	mov	r1, r0
 810c4fe:	3b30      	subs	r3, #48	@ 0x30
 810c500:	220a      	movs	r2, #10
 810c502:	4630      	mov	r0, r6
 810c504:	f7ff ff8c 	bl	810c420 <__multadd>
 810c508:	45a0      	cmp	r8, r4
 810c50a:	d1f5      	bne.n	810c4f8 <__s2b+0x4c>
 810c50c:	f1a5 0408 	sub.w	r4, r5, #8
 810c510:	444c      	add	r4, r9
 810c512:	1b2d      	subs	r5, r5, r4
 810c514:	1963      	adds	r3, r4, r5
 810c516:	42bb      	cmp	r3, r7
 810c518:	db04      	blt.n	810c524 <__s2b+0x78>
 810c51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c51e:	340a      	adds	r4, #10
 810c520:	2509      	movs	r5, #9
 810c522:	e7f6      	b.n	810c512 <__s2b+0x66>
 810c524:	f814 3b01 	ldrb.w	r3, [r4], #1
 810c528:	4601      	mov	r1, r0
 810c52a:	3b30      	subs	r3, #48	@ 0x30
 810c52c:	220a      	movs	r2, #10
 810c52e:	4630      	mov	r0, r6
 810c530:	f7ff ff76 	bl	810c420 <__multadd>
 810c534:	e7ee      	b.n	810c514 <__s2b+0x68>
 810c536:	bf00      	nop
 810c538:	081af189 	.word	0x081af189
 810c53c:	081af19a 	.word	0x081af19a

0810c540 <__hi0bits>:
 810c540:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810c544:	4603      	mov	r3, r0
 810c546:	bf36      	itet	cc
 810c548:	0403      	lslcc	r3, r0, #16
 810c54a:	2000      	movcs	r0, #0
 810c54c:	2010      	movcc	r0, #16
 810c54e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810c552:	bf3c      	itt	cc
 810c554:	021b      	lslcc	r3, r3, #8
 810c556:	3008      	addcc	r0, #8
 810c558:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810c55c:	bf3c      	itt	cc
 810c55e:	011b      	lslcc	r3, r3, #4
 810c560:	3004      	addcc	r0, #4
 810c562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c566:	bf3c      	itt	cc
 810c568:	009b      	lslcc	r3, r3, #2
 810c56a:	3002      	addcc	r0, #2
 810c56c:	2b00      	cmp	r3, #0
 810c56e:	db05      	blt.n	810c57c <__hi0bits+0x3c>
 810c570:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810c574:	f100 0001 	add.w	r0, r0, #1
 810c578:	bf08      	it	eq
 810c57a:	2020      	moveq	r0, #32
 810c57c:	4770      	bx	lr

0810c57e <__lo0bits>:
 810c57e:	6803      	ldr	r3, [r0, #0]
 810c580:	4602      	mov	r2, r0
 810c582:	f013 0007 	ands.w	r0, r3, #7
 810c586:	d00b      	beq.n	810c5a0 <__lo0bits+0x22>
 810c588:	07d9      	lsls	r1, r3, #31
 810c58a:	d421      	bmi.n	810c5d0 <__lo0bits+0x52>
 810c58c:	0798      	lsls	r0, r3, #30
 810c58e:	bf49      	itett	mi
 810c590:	085b      	lsrmi	r3, r3, #1
 810c592:	089b      	lsrpl	r3, r3, #2
 810c594:	2001      	movmi	r0, #1
 810c596:	6013      	strmi	r3, [r2, #0]
 810c598:	bf5c      	itt	pl
 810c59a:	6013      	strpl	r3, [r2, #0]
 810c59c:	2002      	movpl	r0, #2
 810c59e:	4770      	bx	lr
 810c5a0:	b299      	uxth	r1, r3
 810c5a2:	b909      	cbnz	r1, 810c5a8 <__lo0bits+0x2a>
 810c5a4:	0c1b      	lsrs	r3, r3, #16
 810c5a6:	2010      	movs	r0, #16
 810c5a8:	b2d9      	uxtb	r1, r3
 810c5aa:	b909      	cbnz	r1, 810c5b0 <__lo0bits+0x32>
 810c5ac:	3008      	adds	r0, #8
 810c5ae:	0a1b      	lsrs	r3, r3, #8
 810c5b0:	0719      	lsls	r1, r3, #28
 810c5b2:	bf04      	itt	eq
 810c5b4:	091b      	lsreq	r3, r3, #4
 810c5b6:	3004      	addeq	r0, #4
 810c5b8:	0799      	lsls	r1, r3, #30
 810c5ba:	bf04      	itt	eq
 810c5bc:	089b      	lsreq	r3, r3, #2
 810c5be:	3002      	addeq	r0, #2
 810c5c0:	07d9      	lsls	r1, r3, #31
 810c5c2:	d403      	bmi.n	810c5cc <__lo0bits+0x4e>
 810c5c4:	085b      	lsrs	r3, r3, #1
 810c5c6:	f100 0001 	add.w	r0, r0, #1
 810c5ca:	d003      	beq.n	810c5d4 <__lo0bits+0x56>
 810c5cc:	6013      	str	r3, [r2, #0]
 810c5ce:	4770      	bx	lr
 810c5d0:	2000      	movs	r0, #0
 810c5d2:	4770      	bx	lr
 810c5d4:	2020      	movs	r0, #32
 810c5d6:	4770      	bx	lr

0810c5d8 <__i2b>:
 810c5d8:	b510      	push	{r4, lr}
 810c5da:	460c      	mov	r4, r1
 810c5dc:	2101      	movs	r1, #1
 810c5de:	f7ff febd 	bl	810c35c <_Balloc>
 810c5e2:	4602      	mov	r2, r0
 810c5e4:	b928      	cbnz	r0, 810c5f2 <__i2b+0x1a>
 810c5e6:	4b05      	ldr	r3, [pc, #20]	@ (810c5fc <__i2b+0x24>)
 810c5e8:	4805      	ldr	r0, [pc, #20]	@ (810c600 <__i2b+0x28>)
 810c5ea:	f240 1145 	movw	r1, #325	@ 0x145
 810c5ee:	f001 fdf3 	bl	810e1d8 <__assert_func>
 810c5f2:	2301      	movs	r3, #1
 810c5f4:	6144      	str	r4, [r0, #20]
 810c5f6:	6103      	str	r3, [r0, #16]
 810c5f8:	bd10      	pop	{r4, pc}
 810c5fa:	bf00      	nop
 810c5fc:	081af189 	.word	0x081af189
 810c600:	081af19a 	.word	0x081af19a

0810c604 <__multiply>:
 810c604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c608:	4614      	mov	r4, r2
 810c60a:	690a      	ldr	r2, [r1, #16]
 810c60c:	6923      	ldr	r3, [r4, #16]
 810c60e:	429a      	cmp	r2, r3
 810c610:	bfa8      	it	ge
 810c612:	4623      	movge	r3, r4
 810c614:	460f      	mov	r7, r1
 810c616:	bfa4      	itt	ge
 810c618:	460c      	movge	r4, r1
 810c61a:	461f      	movge	r7, r3
 810c61c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810c620:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810c624:	68a3      	ldr	r3, [r4, #8]
 810c626:	6861      	ldr	r1, [r4, #4]
 810c628:	eb0a 0609 	add.w	r6, sl, r9
 810c62c:	42b3      	cmp	r3, r6
 810c62e:	b085      	sub	sp, #20
 810c630:	bfb8      	it	lt
 810c632:	3101      	addlt	r1, #1
 810c634:	f7ff fe92 	bl	810c35c <_Balloc>
 810c638:	b930      	cbnz	r0, 810c648 <__multiply+0x44>
 810c63a:	4602      	mov	r2, r0
 810c63c:	4b44      	ldr	r3, [pc, #272]	@ (810c750 <__multiply+0x14c>)
 810c63e:	4845      	ldr	r0, [pc, #276]	@ (810c754 <__multiply+0x150>)
 810c640:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810c644:	f001 fdc8 	bl	810e1d8 <__assert_func>
 810c648:	f100 0514 	add.w	r5, r0, #20
 810c64c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810c650:	462b      	mov	r3, r5
 810c652:	2200      	movs	r2, #0
 810c654:	4543      	cmp	r3, r8
 810c656:	d321      	bcc.n	810c69c <__multiply+0x98>
 810c658:	f107 0114 	add.w	r1, r7, #20
 810c65c:	f104 0214 	add.w	r2, r4, #20
 810c660:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810c664:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810c668:	9302      	str	r3, [sp, #8]
 810c66a:	1b13      	subs	r3, r2, r4
 810c66c:	3b15      	subs	r3, #21
 810c66e:	f023 0303 	bic.w	r3, r3, #3
 810c672:	3304      	adds	r3, #4
 810c674:	f104 0715 	add.w	r7, r4, #21
 810c678:	42ba      	cmp	r2, r7
 810c67a:	bf38      	it	cc
 810c67c:	2304      	movcc	r3, #4
 810c67e:	9301      	str	r3, [sp, #4]
 810c680:	9b02      	ldr	r3, [sp, #8]
 810c682:	9103      	str	r1, [sp, #12]
 810c684:	428b      	cmp	r3, r1
 810c686:	d80c      	bhi.n	810c6a2 <__multiply+0x9e>
 810c688:	2e00      	cmp	r6, #0
 810c68a:	dd03      	ble.n	810c694 <__multiply+0x90>
 810c68c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810c690:	2b00      	cmp	r3, #0
 810c692:	d05b      	beq.n	810c74c <__multiply+0x148>
 810c694:	6106      	str	r6, [r0, #16]
 810c696:	b005      	add	sp, #20
 810c698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c69c:	f843 2b04 	str.w	r2, [r3], #4
 810c6a0:	e7d8      	b.n	810c654 <__multiply+0x50>
 810c6a2:	f8b1 a000 	ldrh.w	sl, [r1]
 810c6a6:	f1ba 0f00 	cmp.w	sl, #0
 810c6aa:	d024      	beq.n	810c6f6 <__multiply+0xf2>
 810c6ac:	f104 0e14 	add.w	lr, r4, #20
 810c6b0:	46a9      	mov	r9, r5
 810c6b2:	f04f 0c00 	mov.w	ip, #0
 810c6b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 810c6ba:	f8d9 3000 	ldr.w	r3, [r9]
 810c6be:	fa1f fb87 	uxth.w	fp, r7
 810c6c2:	b29b      	uxth	r3, r3
 810c6c4:	fb0a 330b 	mla	r3, sl, fp, r3
 810c6c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810c6cc:	f8d9 7000 	ldr.w	r7, [r9]
 810c6d0:	4463      	add	r3, ip
 810c6d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810c6d6:	fb0a c70b 	mla	r7, sl, fp, ip
 810c6da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810c6de:	b29b      	uxth	r3, r3
 810c6e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810c6e4:	4572      	cmp	r2, lr
 810c6e6:	f849 3b04 	str.w	r3, [r9], #4
 810c6ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810c6ee:	d8e2      	bhi.n	810c6b6 <__multiply+0xb2>
 810c6f0:	9b01      	ldr	r3, [sp, #4]
 810c6f2:	f845 c003 	str.w	ip, [r5, r3]
 810c6f6:	9b03      	ldr	r3, [sp, #12]
 810c6f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810c6fc:	3104      	adds	r1, #4
 810c6fe:	f1b9 0f00 	cmp.w	r9, #0
 810c702:	d021      	beq.n	810c748 <__multiply+0x144>
 810c704:	682b      	ldr	r3, [r5, #0]
 810c706:	f104 0c14 	add.w	ip, r4, #20
 810c70a:	46ae      	mov	lr, r5
 810c70c:	f04f 0a00 	mov.w	sl, #0
 810c710:	f8bc b000 	ldrh.w	fp, [ip]
 810c714:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810c718:	fb09 770b 	mla	r7, r9, fp, r7
 810c71c:	4457      	add	r7, sl
 810c71e:	b29b      	uxth	r3, r3
 810c720:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810c724:	f84e 3b04 	str.w	r3, [lr], #4
 810c728:	f85c 3b04 	ldr.w	r3, [ip], #4
 810c72c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810c730:	f8be 3000 	ldrh.w	r3, [lr]
 810c734:	fb09 330a 	mla	r3, r9, sl, r3
 810c738:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810c73c:	4562      	cmp	r2, ip
 810c73e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810c742:	d8e5      	bhi.n	810c710 <__multiply+0x10c>
 810c744:	9f01      	ldr	r7, [sp, #4]
 810c746:	51eb      	str	r3, [r5, r7]
 810c748:	3504      	adds	r5, #4
 810c74a:	e799      	b.n	810c680 <__multiply+0x7c>
 810c74c:	3e01      	subs	r6, #1
 810c74e:	e79b      	b.n	810c688 <__multiply+0x84>
 810c750:	081af189 	.word	0x081af189
 810c754:	081af19a 	.word	0x081af19a

0810c758 <__pow5mult>:
 810c758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c75c:	4615      	mov	r5, r2
 810c75e:	f012 0203 	ands.w	r2, r2, #3
 810c762:	4607      	mov	r7, r0
 810c764:	460e      	mov	r6, r1
 810c766:	d007      	beq.n	810c778 <__pow5mult+0x20>
 810c768:	4c25      	ldr	r4, [pc, #148]	@ (810c800 <__pow5mult+0xa8>)
 810c76a:	3a01      	subs	r2, #1
 810c76c:	2300      	movs	r3, #0
 810c76e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c772:	f7ff fe55 	bl	810c420 <__multadd>
 810c776:	4606      	mov	r6, r0
 810c778:	10ad      	asrs	r5, r5, #2
 810c77a:	d03d      	beq.n	810c7f8 <__pow5mult+0xa0>
 810c77c:	69fc      	ldr	r4, [r7, #28]
 810c77e:	b97c      	cbnz	r4, 810c7a0 <__pow5mult+0x48>
 810c780:	2010      	movs	r0, #16
 810c782:	f7fd fd37 	bl	810a1f4 <malloc>
 810c786:	4602      	mov	r2, r0
 810c788:	61f8      	str	r0, [r7, #28]
 810c78a:	b928      	cbnz	r0, 810c798 <__pow5mult+0x40>
 810c78c:	4b1d      	ldr	r3, [pc, #116]	@ (810c804 <__pow5mult+0xac>)
 810c78e:	481e      	ldr	r0, [pc, #120]	@ (810c808 <__pow5mult+0xb0>)
 810c790:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810c794:	f001 fd20 	bl	810e1d8 <__assert_func>
 810c798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c79c:	6004      	str	r4, [r0, #0]
 810c79e:	60c4      	str	r4, [r0, #12]
 810c7a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810c7a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c7a8:	b94c      	cbnz	r4, 810c7be <__pow5mult+0x66>
 810c7aa:	f240 2171 	movw	r1, #625	@ 0x271
 810c7ae:	4638      	mov	r0, r7
 810c7b0:	f7ff ff12 	bl	810c5d8 <__i2b>
 810c7b4:	2300      	movs	r3, #0
 810c7b6:	f8c8 0008 	str.w	r0, [r8, #8]
 810c7ba:	4604      	mov	r4, r0
 810c7bc:	6003      	str	r3, [r0, #0]
 810c7be:	f04f 0900 	mov.w	r9, #0
 810c7c2:	07eb      	lsls	r3, r5, #31
 810c7c4:	d50a      	bpl.n	810c7dc <__pow5mult+0x84>
 810c7c6:	4631      	mov	r1, r6
 810c7c8:	4622      	mov	r2, r4
 810c7ca:	4638      	mov	r0, r7
 810c7cc:	f7ff ff1a 	bl	810c604 <__multiply>
 810c7d0:	4631      	mov	r1, r6
 810c7d2:	4680      	mov	r8, r0
 810c7d4:	4638      	mov	r0, r7
 810c7d6:	f7ff fe01 	bl	810c3dc <_Bfree>
 810c7da:	4646      	mov	r6, r8
 810c7dc:	106d      	asrs	r5, r5, #1
 810c7de:	d00b      	beq.n	810c7f8 <__pow5mult+0xa0>
 810c7e0:	6820      	ldr	r0, [r4, #0]
 810c7e2:	b938      	cbnz	r0, 810c7f4 <__pow5mult+0x9c>
 810c7e4:	4622      	mov	r2, r4
 810c7e6:	4621      	mov	r1, r4
 810c7e8:	4638      	mov	r0, r7
 810c7ea:	f7ff ff0b 	bl	810c604 <__multiply>
 810c7ee:	6020      	str	r0, [r4, #0]
 810c7f0:	f8c0 9000 	str.w	r9, [r0]
 810c7f4:	4604      	mov	r4, r0
 810c7f6:	e7e4      	b.n	810c7c2 <__pow5mult+0x6a>
 810c7f8:	4630      	mov	r0, r6
 810c7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c7fe:	bf00      	nop
 810c800:	081af1f4 	.word	0x081af1f4
 810c804:	081af11a 	.word	0x081af11a
 810c808:	081af19a 	.word	0x081af19a

0810c80c <__lshift>:
 810c80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c810:	460c      	mov	r4, r1
 810c812:	6849      	ldr	r1, [r1, #4]
 810c814:	6923      	ldr	r3, [r4, #16]
 810c816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810c81a:	68a3      	ldr	r3, [r4, #8]
 810c81c:	4607      	mov	r7, r0
 810c81e:	4691      	mov	r9, r2
 810c820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c824:	f108 0601 	add.w	r6, r8, #1
 810c828:	42b3      	cmp	r3, r6
 810c82a:	db0b      	blt.n	810c844 <__lshift+0x38>
 810c82c:	4638      	mov	r0, r7
 810c82e:	f7ff fd95 	bl	810c35c <_Balloc>
 810c832:	4605      	mov	r5, r0
 810c834:	b948      	cbnz	r0, 810c84a <__lshift+0x3e>
 810c836:	4602      	mov	r2, r0
 810c838:	4b28      	ldr	r3, [pc, #160]	@ (810c8dc <__lshift+0xd0>)
 810c83a:	4829      	ldr	r0, [pc, #164]	@ (810c8e0 <__lshift+0xd4>)
 810c83c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810c840:	f001 fcca 	bl	810e1d8 <__assert_func>
 810c844:	3101      	adds	r1, #1
 810c846:	005b      	lsls	r3, r3, #1
 810c848:	e7ee      	b.n	810c828 <__lshift+0x1c>
 810c84a:	2300      	movs	r3, #0
 810c84c:	f100 0114 	add.w	r1, r0, #20
 810c850:	f100 0210 	add.w	r2, r0, #16
 810c854:	4618      	mov	r0, r3
 810c856:	4553      	cmp	r3, sl
 810c858:	db33      	blt.n	810c8c2 <__lshift+0xb6>
 810c85a:	6920      	ldr	r0, [r4, #16]
 810c85c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c860:	f104 0314 	add.w	r3, r4, #20
 810c864:	f019 091f 	ands.w	r9, r9, #31
 810c868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c86c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810c870:	d02b      	beq.n	810c8ca <__lshift+0xbe>
 810c872:	f1c9 0e20 	rsb	lr, r9, #32
 810c876:	468a      	mov	sl, r1
 810c878:	2200      	movs	r2, #0
 810c87a:	6818      	ldr	r0, [r3, #0]
 810c87c:	fa00 f009 	lsl.w	r0, r0, r9
 810c880:	4310      	orrs	r0, r2
 810c882:	f84a 0b04 	str.w	r0, [sl], #4
 810c886:	f853 2b04 	ldr.w	r2, [r3], #4
 810c88a:	459c      	cmp	ip, r3
 810c88c:	fa22 f20e 	lsr.w	r2, r2, lr
 810c890:	d8f3      	bhi.n	810c87a <__lshift+0x6e>
 810c892:	ebac 0304 	sub.w	r3, ip, r4
 810c896:	3b15      	subs	r3, #21
 810c898:	f023 0303 	bic.w	r3, r3, #3
 810c89c:	3304      	adds	r3, #4
 810c89e:	f104 0015 	add.w	r0, r4, #21
 810c8a2:	4584      	cmp	ip, r0
 810c8a4:	bf38      	it	cc
 810c8a6:	2304      	movcc	r3, #4
 810c8a8:	50ca      	str	r2, [r1, r3]
 810c8aa:	b10a      	cbz	r2, 810c8b0 <__lshift+0xa4>
 810c8ac:	f108 0602 	add.w	r6, r8, #2
 810c8b0:	3e01      	subs	r6, #1
 810c8b2:	4638      	mov	r0, r7
 810c8b4:	612e      	str	r6, [r5, #16]
 810c8b6:	4621      	mov	r1, r4
 810c8b8:	f7ff fd90 	bl	810c3dc <_Bfree>
 810c8bc:	4628      	mov	r0, r5
 810c8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c8c2:	f842 0f04 	str.w	r0, [r2, #4]!
 810c8c6:	3301      	adds	r3, #1
 810c8c8:	e7c5      	b.n	810c856 <__lshift+0x4a>
 810c8ca:	3904      	subs	r1, #4
 810c8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 810c8d0:	f841 2f04 	str.w	r2, [r1, #4]!
 810c8d4:	459c      	cmp	ip, r3
 810c8d6:	d8f9      	bhi.n	810c8cc <__lshift+0xc0>
 810c8d8:	e7ea      	b.n	810c8b0 <__lshift+0xa4>
 810c8da:	bf00      	nop
 810c8dc:	081af189 	.word	0x081af189
 810c8e0:	081af19a 	.word	0x081af19a

0810c8e4 <__mcmp>:
 810c8e4:	690a      	ldr	r2, [r1, #16]
 810c8e6:	4603      	mov	r3, r0
 810c8e8:	6900      	ldr	r0, [r0, #16]
 810c8ea:	1a80      	subs	r0, r0, r2
 810c8ec:	b530      	push	{r4, r5, lr}
 810c8ee:	d10e      	bne.n	810c90e <__mcmp+0x2a>
 810c8f0:	3314      	adds	r3, #20
 810c8f2:	3114      	adds	r1, #20
 810c8f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810c8f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810c8fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810c900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810c904:	4295      	cmp	r5, r2
 810c906:	d003      	beq.n	810c910 <__mcmp+0x2c>
 810c908:	d205      	bcs.n	810c916 <__mcmp+0x32>
 810c90a:	f04f 30ff 	mov.w	r0, #4294967295
 810c90e:	bd30      	pop	{r4, r5, pc}
 810c910:	42a3      	cmp	r3, r4
 810c912:	d3f3      	bcc.n	810c8fc <__mcmp+0x18>
 810c914:	e7fb      	b.n	810c90e <__mcmp+0x2a>
 810c916:	2001      	movs	r0, #1
 810c918:	e7f9      	b.n	810c90e <__mcmp+0x2a>
	...

0810c91c <__mdiff>:
 810c91c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c920:	4689      	mov	r9, r1
 810c922:	4606      	mov	r6, r0
 810c924:	4611      	mov	r1, r2
 810c926:	4648      	mov	r0, r9
 810c928:	4614      	mov	r4, r2
 810c92a:	f7ff ffdb 	bl	810c8e4 <__mcmp>
 810c92e:	1e05      	subs	r5, r0, #0
 810c930:	d112      	bne.n	810c958 <__mdiff+0x3c>
 810c932:	4629      	mov	r1, r5
 810c934:	4630      	mov	r0, r6
 810c936:	f7ff fd11 	bl	810c35c <_Balloc>
 810c93a:	4602      	mov	r2, r0
 810c93c:	b928      	cbnz	r0, 810c94a <__mdiff+0x2e>
 810c93e:	4b3f      	ldr	r3, [pc, #252]	@ (810ca3c <__mdiff+0x120>)
 810c940:	f240 2137 	movw	r1, #567	@ 0x237
 810c944:	483e      	ldr	r0, [pc, #248]	@ (810ca40 <__mdiff+0x124>)
 810c946:	f001 fc47 	bl	810e1d8 <__assert_func>
 810c94a:	2301      	movs	r3, #1
 810c94c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c950:	4610      	mov	r0, r2
 810c952:	b003      	add	sp, #12
 810c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c958:	bfbc      	itt	lt
 810c95a:	464b      	movlt	r3, r9
 810c95c:	46a1      	movlt	r9, r4
 810c95e:	4630      	mov	r0, r6
 810c960:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810c964:	bfba      	itte	lt
 810c966:	461c      	movlt	r4, r3
 810c968:	2501      	movlt	r5, #1
 810c96a:	2500      	movge	r5, #0
 810c96c:	f7ff fcf6 	bl	810c35c <_Balloc>
 810c970:	4602      	mov	r2, r0
 810c972:	b918      	cbnz	r0, 810c97c <__mdiff+0x60>
 810c974:	4b31      	ldr	r3, [pc, #196]	@ (810ca3c <__mdiff+0x120>)
 810c976:	f240 2145 	movw	r1, #581	@ 0x245
 810c97a:	e7e3      	b.n	810c944 <__mdiff+0x28>
 810c97c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810c980:	6926      	ldr	r6, [r4, #16]
 810c982:	60c5      	str	r5, [r0, #12]
 810c984:	f109 0310 	add.w	r3, r9, #16
 810c988:	f109 0514 	add.w	r5, r9, #20
 810c98c:	f104 0e14 	add.w	lr, r4, #20
 810c990:	f100 0b14 	add.w	fp, r0, #20
 810c994:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810c998:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810c99c:	9301      	str	r3, [sp, #4]
 810c99e:	46d9      	mov	r9, fp
 810c9a0:	f04f 0c00 	mov.w	ip, #0
 810c9a4:	9b01      	ldr	r3, [sp, #4]
 810c9a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 810c9aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 810c9ae:	9301      	str	r3, [sp, #4]
 810c9b0:	fa1f f38a 	uxth.w	r3, sl
 810c9b4:	4619      	mov	r1, r3
 810c9b6:	b283      	uxth	r3, r0
 810c9b8:	1acb      	subs	r3, r1, r3
 810c9ba:	0c00      	lsrs	r0, r0, #16
 810c9bc:	4463      	add	r3, ip
 810c9be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810c9c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810c9c6:	b29b      	uxth	r3, r3
 810c9c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810c9cc:	4576      	cmp	r6, lr
 810c9ce:	f849 3b04 	str.w	r3, [r9], #4
 810c9d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810c9d6:	d8e5      	bhi.n	810c9a4 <__mdiff+0x88>
 810c9d8:	1b33      	subs	r3, r6, r4
 810c9da:	3b15      	subs	r3, #21
 810c9dc:	f023 0303 	bic.w	r3, r3, #3
 810c9e0:	3415      	adds	r4, #21
 810c9e2:	3304      	adds	r3, #4
 810c9e4:	42a6      	cmp	r6, r4
 810c9e6:	bf38      	it	cc
 810c9e8:	2304      	movcc	r3, #4
 810c9ea:	441d      	add	r5, r3
 810c9ec:	445b      	add	r3, fp
 810c9ee:	461e      	mov	r6, r3
 810c9f0:	462c      	mov	r4, r5
 810c9f2:	4544      	cmp	r4, r8
 810c9f4:	d30e      	bcc.n	810ca14 <__mdiff+0xf8>
 810c9f6:	f108 0103 	add.w	r1, r8, #3
 810c9fa:	1b49      	subs	r1, r1, r5
 810c9fc:	f021 0103 	bic.w	r1, r1, #3
 810ca00:	3d03      	subs	r5, #3
 810ca02:	45a8      	cmp	r8, r5
 810ca04:	bf38      	it	cc
 810ca06:	2100      	movcc	r1, #0
 810ca08:	440b      	add	r3, r1
 810ca0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810ca0e:	b191      	cbz	r1, 810ca36 <__mdiff+0x11a>
 810ca10:	6117      	str	r7, [r2, #16]
 810ca12:	e79d      	b.n	810c950 <__mdiff+0x34>
 810ca14:	f854 1b04 	ldr.w	r1, [r4], #4
 810ca18:	46e6      	mov	lr, ip
 810ca1a:	0c08      	lsrs	r0, r1, #16
 810ca1c:	fa1c fc81 	uxtah	ip, ip, r1
 810ca20:	4471      	add	r1, lr
 810ca22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810ca26:	b289      	uxth	r1, r1
 810ca28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810ca2c:	f846 1b04 	str.w	r1, [r6], #4
 810ca30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810ca34:	e7dd      	b.n	810c9f2 <__mdiff+0xd6>
 810ca36:	3f01      	subs	r7, #1
 810ca38:	e7e7      	b.n	810ca0a <__mdiff+0xee>
 810ca3a:	bf00      	nop
 810ca3c:	081af189 	.word	0x081af189
 810ca40:	081af19a 	.word	0x081af19a

0810ca44 <__ulp>:
 810ca44:	b082      	sub	sp, #8
 810ca46:	ed8d 0b00 	vstr	d0, [sp]
 810ca4a:	9a01      	ldr	r2, [sp, #4]
 810ca4c:	4b0f      	ldr	r3, [pc, #60]	@ (810ca8c <__ulp+0x48>)
 810ca4e:	4013      	ands	r3, r2
 810ca50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810ca54:	2b00      	cmp	r3, #0
 810ca56:	dc08      	bgt.n	810ca6a <__ulp+0x26>
 810ca58:	425b      	negs	r3, r3
 810ca5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810ca5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 810ca62:	da04      	bge.n	810ca6e <__ulp+0x2a>
 810ca64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810ca68:	4113      	asrs	r3, r2
 810ca6a:	2200      	movs	r2, #0
 810ca6c:	e008      	b.n	810ca80 <__ulp+0x3c>
 810ca6e:	f1a2 0314 	sub.w	r3, r2, #20
 810ca72:	2b1e      	cmp	r3, #30
 810ca74:	bfda      	itte	le
 810ca76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810ca7a:	40da      	lsrle	r2, r3
 810ca7c:	2201      	movgt	r2, #1
 810ca7e:	2300      	movs	r3, #0
 810ca80:	4619      	mov	r1, r3
 810ca82:	4610      	mov	r0, r2
 810ca84:	ec41 0b10 	vmov	d0, r0, r1
 810ca88:	b002      	add	sp, #8
 810ca8a:	4770      	bx	lr
 810ca8c:	7ff00000 	.word	0x7ff00000

0810ca90 <__b2d>:
 810ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ca94:	6906      	ldr	r6, [r0, #16]
 810ca96:	f100 0814 	add.w	r8, r0, #20
 810ca9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810ca9e:	1f37      	subs	r7, r6, #4
 810caa0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810caa4:	4610      	mov	r0, r2
 810caa6:	f7ff fd4b 	bl	810c540 <__hi0bits>
 810caaa:	f1c0 0320 	rsb	r3, r0, #32
 810caae:	280a      	cmp	r0, #10
 810cab0:	600b      	str	r3, [r1, #0]
 810cab2:	491b      	ldr	r1, [pc, #108]	@ (810cb20 <__b2d+0x90>)
 810cab4:	dc15      	bgt.n	810cae2 <__b2d+0x52>
 810cab6:	f1c0 0c0b 	rsb	ip, r0, #11
 810caba:	fa22 f30c 	lsr.w	r3, r2, ip
 810cabe:	45b8      	cmp	r8, r7
 810cac0:	ea43 0501 	orr.w	r5, r3, r1
 810cac4:	bf34      	ite	cc
 810cac6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810caca:	2300      	movcs	r3, #0
 810cacc:	3015      	adds	r0, #21
 810cace:	fa02 f000 	lsl.w	r0, r2, r0
 810cad2:	fa23 f30c 	lsr.w	r3, r3, ip
 810cad6:	4303      	orrs	r3, r0
 810cad8:	461c      	mov	r4, r3
 810cada:	ec45 4b10 	vmov	d0, r4, r5
 810cade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810cae2:	45b8      	cmp	r8, r7
 810cae4:	bf3a      	itte	cc
 810cae6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810caea:	f1a6 0708 	subcc.w	r7, r6, #8
 810caee:	2300      	movcs	r3, #0
 810caf0:	380b      	subs	r0, #11
 810caf2:	d012      	beq.n	810cb1a <__b2d+0x8a>
 810caf4:	f1c0 0120 	rsb	r1, r0, #32
 810caf8:	fa23 f401 	lsr.w	r4, r3, r1
 810cafc:	4082      	lsls	r2, r0
 810cafe:	4322      	orrs	r2, r4
 810cb00:	4547      	cmp	r7, r8
 810cb02:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810cb06:	bf8c      	ite	hi
 810cb08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810cb0c:	2200      	movls	r2, #0
 810cb0e:	4083      	lsls	r3, r0
 810cb10:	40ca      	lsrs	r2, r1
 810cb12:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810cb16:	4313      	orrs	r3, r2
 810cb18:	e7de      	b.n	810cad8 <__b2d+0x48>
 810cb1a:	ea42 0501 	orr.w	r5, r2, r1
 810cb1e:	e7db      	b.n	810cad8 <__b2d+0x48>
 810cb20:	3ff00000 	.word	0x3ff00000

0810cb24 <__d2b>:
 810cb24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810cb28:	460f      	mov	r7, r1
 810cb2a:	2101      	movs	r1, #1
 810cb2c:	ec59 8b10 	vmov	r8, r9, d0
 810cb30:	4616      	mov	r6, r2
 810cb32:	f7ff fc13 	bl	810c35c <_Balloc>
 810cb36:	4604      	mov	r4, r0
 810cb38:	b930      	cbnz	r0, 810cb48 <__d2b+0x24>
 810cb3a:	4602      	mov	r2, r0
 810cb3c:	4b23      	ldr	r3, [pc, #140]	@ (810cbcc <__d2b+0xa8>)
 810cb3e:	4824      	ldr	r0, [pc, #144]	@ (810cbd0 <__d2b+0xac>)
 810cb40:	f240 310f 	movw	r1, #783	@ 0x30f
 810cb44:	f001 fb48 	bl	810e1d8 <__assert_func>
 810cb48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810cb4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cb50:	b10d      	cbz	r5, 810cb56 <__d2b+0x32>
 810cb52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810cb56:	9301      	str	r3, [sp, #4]
 810cb58:	f1b8 0300 	subs.w	r3, r8, #0
 810cb5c:	d023      	beq.n	810cba6 <__d2b+0x82>
 810cb5e:	4668      	mov	r0, sp
 810cb60:	9300      	str	r3, [sp, #0]
 810cb62:	f7ff fd0c 	bl	810c57e <__lo0bits>
 810cb66:	e9dd 1200 	ldrd	r1, r2, [sp]
 810cb6a:	b1d0      	cbz	r0, 810cba2 <__d2b+0x7e>
 810cb6c:	f1c0 0320 	rsb	r3, r0, #32
 810cb70:	fa02 f303 	lsl.w	r3, r2, r3
 810cb74:	430b      	orrs	r3, r1
 810cb76:	40c2      	lsrs	r2, r0
 810cb78:	6163      	str	r3, [r4, #20]
 810cb7a:	9201      	str	r2, [sp, #4]
 810cb7c:	9b01      	ldr	r3, [sp, #4]
 810cb7e:	61a3      	str	r3, [r4, #24]
 810cb80:	2b00      	cmp	r3, #0
 810cb82:	bf0c      	ite	eq
 810cb84:	2201      	moveq	r2, #1
 810cb86:	2202      	movne	r2, #2
 810cb88:	6122      	str	r2, [r4, #16]
 810cb8a:	b1a5      	cbz	r5, 810cbb6 <__d2b+0x92>
 810cb8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810cb90:	4405      	add	r5, r0
 810cb92:	603d      	str	r5, [r7, #0]
 810cb94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810cb98:	6030      	str	r0, [r6, #0]
 810cb9a:	4620      	mov	r0, r4
 810cb9c:	b003      	add	sp, #12
 810cb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810cba2:	6161      	str	r1, [r4, #20]
 810cba4:	e7ea      	b.n	810cb7c <__d2b+0x58>
 810cba6:	a801      	add	r0, sp, #4
 810cba8:	f7ff fce9 	bl	810c57e <__lo0bits>
 810cbac:	9b01      	ldr	r3, [sp, #4]
 810cbae:	6163      	str	r3, [r4, #20]
 810cbb0:	3020      	adds	r0, #32
 810cbb2:	2201      	movs	r2, #1
 810cbb4:	e7e8      	b.n	810cb88 <__d2b+0x64>
 810cbb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810cbba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810cbbe:	6038      	str	r0, [r7, #0]
 810cbc0:	6918      	ldr	r0, [r3, #16]
 810cbc2:	f7ff fcbd 	bl	810c540 <__hi0bits>
 810cbc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810cbca:	e7e5      	b.n	810cb98 <__d2b+0x74>
 810cbcc:	081af189 	.word	0x081af189
 810cbd0:	081af19a 	.word	0x081af19a

0810cbd4 <__ratio>:
 810cbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cbd8:	b085      	sub	sp, #20
 810cbda:	e9cd 1000 	strd	r1, r0, [sp]
 810cbde:	a902      	add	r1, sp, #8
 810cbe0:	f7ff ff56 	bl	810ca90 <__b2d>
 810cbe4:	9800      	ldr	r0, [sp, #0]
 810cbe6:	a903      	add	r1, sp, #12
 810cbe8:	ec55 4b10 	vmov	r4, r5, d0
 810cbec:	f7ff ff50 	bl	810ca90 <__b2d>
 810cbf0:	9b01      	ldr	r3, [sp, #4]
 810cbf2:	6919      	ldr	r1, [r3, #16]
 810cbf4:	9b00      	ldr	r3, [sp, #0]
 810cbf6:	691b      	ldr	r3, [r3, #16]
 810cbf8:	1ac9      	subs	r1, r1, r3
 810cbfa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810cbfe:	1a9b      	subs	r3, r3, r2
 810cc00:	ec5b ab10 	vmov	sl, fp, d0
 810cc04:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810cc08:	2b00      	cmp	r3, #0
 810cc0a:	bfce      	itee	gt
 810cc0c:	462a      	movgt	r2, r5
 810cc0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810cc12:	465a      	movle	r2, fp
 810cc14:	462f      	mov	r7, r5
 810cc16:	46d9      	mov	r9, fp
 810cc18:	bfcc      	ite	gt
 810cc1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810cc1e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810cc22:	464b      	mov	r3, r9
 810cc24:	4652      	mov	r2, sl
 810cc26:	4620      	mov	r0, r4
 810cc28:	4639      	mov	r1, r7
 810cc2a:	f7f3 fe97 	bl	810095c <__aeabi_ddiv>
 810cc2e:	ec41 0b10 	vmov	d0, r0, r1
 810cc32:	b005      	add	sp, #20
 810cc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810cc38 <__copybits>:
 810cc38:	3901      	subs	r1, #1
 810cc3a:	b570      	push	{r4, r5, r6, lr}
 810cc3c:	1149      	asrs	r1, r1, #5
 810cc3e:	6914      	ldr	r4, [r2, #16]
 810cc40:	3101      	adds	r1, #1
 810cc42:	f102 0314 	add.w	r3, r2, #20
 810cc46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810cc4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810cc4e:	1f05      	subs	r5, r0, #4
 810cc50:	42a3      	cmp	r3, r4
 810cc52:	d30c      	bcc.n	810cc6e <__copybits+0x36>
 810cc54:	1aa3      	subs	r3, r4, r2
 810cc56:	3b11      	subs	r3, #17
 810cc58:	f023 0303 	bic.w	r3, r3, #3
 810cc5c:	3211      	adds	r2, #17
 810cc5e:	42a2      	cmp	r2, r4
 810cc60:	bf88      	it	hi
 810cc62:	2300      	movhi	r3, #0
 810cc64:	4418      	add	r0, r3
 810cc66:	2300      	movs	r3, #0
 810cc68:	4288      	cmp	r0, r1
 810cc6a:	d305      	bcc.n	810cc78 <__copybits+0x40>
 810cc6c:	bd70      	pop	{r4, r5, r6, pc}
 810cc6e:	f853 6b04 	ldr.w	r6, [r3], #4
 810cc72:	f845 6f04 	str.w	r6, [r5, #4]!
 810cc76:	e7eb      	b.n	810cc50 <__copybits+0x18>
 810cc78:	f840 3b04 	str.w	r3, [r0], #4
 810cc7c:	e7f4      	b.n	810cc68 <__copybits+0x30>

0810cc7e <__any_on>:
 810cc7e:	f100 0214 	add.w	r2, r0, #20
 810cc82:	6900      	ldr	r0, [r0, #16]
 810cc84:	114b      	asrs	r3, r1, #5
 810cc86:	4298      	cmp	r0, r3
 810cc88:	b510      	push	{r4, lr}
 810cc8a:	db11      	blt.n	810ccb0 <__any_on+0x32>
 810cc8c:	dd0a      	ble.n	810cca4 <__any_on+0x26>
 810cc8e:	f011 011f 	ands.w	r1, r1, #31
 810cc92:	d007      	beq.n	810cca4 <__any_on+0x26>
 810cc94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810cc98:	fa24 f001 	lsr.w	r0, r4, r1
 810cc9c:	fa00 f101 	lsl.w	r1, r0, r1
 810cca0:	428c      	cmp	r4, r1
 810cca2:	d10b      	bne.n	810ccbc <__any_on+0x3e>
 810cca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810cca8:	4293      	cmp	r3, r2
 810ccaa:	d803      	bhi.n	810ccb4 <__any_on+0x36>
 810ccac:	2000      	movs	r0, #0
 810ccae:	bd10      	pop	{r4, pc}
 810ccb0:	4603      	mov	r3, r0
 810ccb2:	e7f7      	b.n	810cca4 <__any_on+0x26>
 810ccb4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810ccb8:	2900      	cmp	r1, #0
 810ccba:	d0f5      	beq.n	810cca8 <__any_on+0x2a>
 810ccbc:	2001      	movs	r0, #1
 810ccbe:	e7f6      	b.n	810ccae <__any_on+0x30>

0810ccc0 <_malloc_usable_size_r>:
 810ccc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ccc4:	1f18      	subs	r0, r3, #4
 810ccc6:	2b00      	cmp	r3, #0
 810ccc8:	bfbc      	itt	lt
 810ccca:	580b      	ldrlt	r3, [r1, r0]
 810cccc:	18c0      	addlt	r0, r0, r3
 810ccce:	4770      	bx	lr

0810ccd0 <sulp>:
 810ccd0:	b570      	push	{r4, r5, r6, lr}
 810ccd2:	4604      	mov	r4, r0
 810ccd4:	460d      	mov	r5, r1
 810ccd6:	ec45 4b10 	vmov	d0, r4, r5
 810ccda:	4616      	mov	r6, r2
 810ccdc:	f7ff feb2 	bl	810ca44 <__ulp>
 810cce0:	ec51 0b10 	vmov	r0, r1, d0
 810cce4:	b17e      	cbz	r6, 810cd06 <sulp+0x36>
 810cce6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810ccea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810ccee:	2b00      	cmp	r3, #0
 810ccf0:	dd09      	ble.n	810cd06 <sulp+0x36>
 810ccf2:	051b      	lsls	r3, r3, #20
 810ccf4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810ccf8:	2400      	movs	r4, #0
 810ccfa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810ccfe:	4622      	mov	r2, r4
 810cd00:	462b      	mov	r3, r5
 810cd02:	f7f3 fd01 	bl	8100708 <__aeabi_dmul>
 810cd06:	ec41 0b10 	vmov	d0, r0, r1
 810cd0a:	bd70      	pop	{r4, r5, r6, pc}
 810cd0c:	0000      	movs	r0, r0
	...

0810cd10 <_strtod_l>:
 810cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cd14:	b09f      	sub	sp, #124	@ 0x7c
 810cd16:	460c      	mov	r4, r1
 810cd18:	9217      	str	r2, [sp, #92]	@ 0x5c
 810cd1a:	2200      	movs	r2, #0
 810cd1c:	921a      	str	r2, [sp, #104]	@ 0x68
 810cd1e:	9005      	str	r0, [sp, #20]
 810cd20:	f04f 0a00 	mov.w	sl, #0
 810cd24:	f04f 0b00 	mov.w	fp, #0
 810cd28:	460a      	mov	r2, r1
 810cd2a:	9219      	str	r2, [sp, #100]	@ 0x64
 810cd2c:	7811      	ldrb	r1, [r2, #0]
 810cd2e:	292b      	cmp	r1, #43	@ 0x2b
 810cd30:	d04a      	beq.n	810cdc8 <_strtod_l+0xb8>
 810cd32:	d838      	bhi.n	810cda6 <_strtod_l+0x96>
 810cd34:	290d      	cmp	r1, #13
 810cd36:	d832      	bhi.n	810cd9e <_strtod_l+0x8e>
 810cd38:	2908      	cmp	r1, #8
 810cd3a:	d832      	bhi.n	810cda2 <_strtod_l+0x92>
 810cd3c:	2900      	cmp	r1, #0
 810cd3e:	d03b      	beq.n	810cdb8 <_strtod_l+0xa8>
 810cd40:	2200      	movs	r2, #0
 810cd42:	920b      	str	r2, [sp, #44]	@ 0x2c
 810cd44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810cd46:	782a      	ldrb	r2, [r5, #0]
 810cd48:	2a30      	cmp	r2, #48	@ 0x30
 810cd4a:	f040 80b3 	bne.w	810ceb4 <_strtod_l+0x1a4>
 810cd4e:	786a      	ldrb	r2, [r5, #1]
 810cd50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810cd54:	2a58      	cmp	r2, #88	@ 0x58
 810cd56:	d16e      	bne.n	810ce36 <_strtod_l+0x126>
 810cd58:	9302      	str	r3, [sp, #8]
 810cd5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810cd5c:	9301      	str	r3, [sp, #4]
 810cd5e:	ab1a      	add	r3, sp, #104	@ 0x68
 810cd60:	9300      	str	r3, [sp, #0]
 810cd62:	4a8e      	ldr	r2, [pc, #568]	@ (810cf9c <_strtod_l+0x28c>)
 810cd64:	9805      	ldr	r0, [sp, #20]
 810cd66:	ab1b      	add	r3, sp, #108	@ 0x6c
 810cd68:	a919      	add	r1, sp, #100	@ 0x64
 810cd6a:	f001 facf 	bl	810e30c <__gethex>
 810cd6e:	f010 060f 	ands.w	r6, r0, #15
 810cd72:	4604      	mov	r4, r0
 810cd74:	d005      	beq.n	810cd82 <_strtod_l+0x72>
 810cd76:	2e06      	cmp	r6, #6
 810cd78:	d128      	bne.n	810cdcc <_strtod_l+0xbc>
 810cd7a:	3501      	adds	r5, #1
 810cd7c:	2300      	movs	r3, #0
 810cd7e:	9519      	str	r5, [sp, #100]	@ 0x64
 810cd80:	930b      	str	r3, [sp, #44]	@ 0x2c
 810cd82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810cd84:	2b00      	cmp	r3, #0
 810cd86:	f040 858e 	bne.w	810d8a6 <_strtod_l+0xb96>
 810cd8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810cd8c:	b1cb      	cbz	r3, 810cdc2 <_strtod_l+0xb2>
 810cd8e:	4652      	mov	r2, sl
 810cd90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810cd94:	ec43 2b10 	vmov	d0, r2, r3
 810cd98:	b01f      	add	sp, #124	@ 0x7c
 810cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cd9e:	2920      	cmp	r1, #32
 810cda0:	d1ce      	bne.n	810cd40 <_strtod_l+0x30>
 810cda2:	3201      	adds	r2, #1
 810cda4:	e7c1      	b.n	810cd2a <_strtod_l+0x1a>
 810cda6:	292d      	cmp	r1, #45	@ 0x2d
 810cda8:	d1ca      	bne.n	810cd40 <_strtod_l+0x30>
 810cdaa:	2101      	movs	r1, #1
 810cdac:	910b      	str	r1, [sp, #44]	@ 0x2c
 810cdae:	1c51      	adds	r1, r2, #1
 810cdb0:	9119      	str	r1, [sp, #100]	@ 0x64
 810cdb2:	7852      	ldrb	r2, [r2, #1]
 810cdb4:	2a00      	cmp	r2, #0
 810cdb6:	d1c5      	bne.n	810cd44 <_strtod_l+0x34>
 810cdb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810cdba:	9419      	str	r4, [sp, #100]	@ 0x64
 810cdbc:	2b00      	cmp	r3, #0
 810cdbe:	f040 8570 	bne.w	810d8a2 <_strtod_l+0xb92>
 810cdc2:	4652      	mov	r2, sl
 810cdc4:	465b      	mov	r3, fp
 810cdc6:	e7e5      	b.n	810cd94 <_strtod_l+0x84>
 810cdc8:	2100      	movs	r1, #0
 810cdca:	e7ef      	b.n	810cdac <_strtod_l+0x9c>
 810cdcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810cdce:	b13a      	cbz	r2, 810cde0 <_strtod_l+0xd0>
 810cdd0:	2135      	movs	r1, #53	@ 0x35
 810cdd2:	a81c      	add	r0, sp, #112	@ 0x70
 810cdd4:	f7ff ff30 	bl	810cc38 <__copybits>
 810cdd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810cdda:	9805      	ldr	r0, [sp, #20]
 810cddc:	f7ff fafe 	bl	810c3dc <_Bfree>
 810cde0:	3e01      	subs	r6, #1
 810cde2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810cde4:	2e04      	cmp	r6, #4
 810cde6:	d806      	bhi.n	810cdf6 <_strtod_l+0xe6>
 810cde8:	e8df f006 	tbb	[pc, r6]
 810cdec:	201d0314 	.word	0x201d0314
 810cdf0:	14          	.byte	0x14
 810cdf1:	00          	.byte	0x00
 810cdf2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810cdf6:	05e1      	lsls	r1, r4, #23
 810cdf8:	bf48      	it	mi
 810cdfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810cdfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ce02:	0d1b      	lsrs	r3, r3, #20
 810ce04:	051b      	lsls	r3, r3, #20
 810ce06:	2b00      	cmp	r3, #0
 810ce08:	d1bb      	bne.n	810cd82 <_strtod_l+0x72>
 810ce0a:	f7fe fbcf 	bl	810b5ac <__errno>
 810ce0e:	2322      	movs	r3, #34	@ 0x22
 810ce10:	6003      	str	r3, [r0, #0]
 810ce12:	e7b6      	b.n	810cd82 <_strtod_l+0x72>
 810ce14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810ce18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810ce1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810ce20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810ce24:	e7e7      	b.n	810cdf6 <_strtod_l+0xe6>
 810ce26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810cfa4 <_strtod_l+0x294>
 810ce2a:	e7e4      	b.n	810cdf6 <_strtod_l+0xe6>
 810ce2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810ce30:	f04f 3aff 	mov.w	sl, #4294967295
 810ce34:	e7df      	b.n	810cdf6 <_strtod_l+0xe6>
 810ce36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ce38:	1c5a      	adds	r2, r3, #1
 810ce3a:	9219      	str	r2, [sp, #100]	@ 0x64
 810ce3c:	785b      	ldrb	r3, [r3, #1]
 810ce3e:	2b30      	cmp	r3, #48	@ 0x30
 810ce40:	d0f9      	beq.n	810ce36 <_strtod_l+0x126>
 810ce42:	2b00      	cmp	r3, #0
 810ce44:	d09d      	beq.n	810cd82 <_strtod_l+0x72>
 810ce46:	2301      	movs	r3, #1
 810ce48:	9309      	str	r3, [sp, #36]	@ 0x24
 810ce4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ce4c:	930c      	str	r3, [sp, #48]	@ 0x30
 810ce4e:	2300      	movs	r3, #0
 810ce50:	9308      	str	r3, [sp, #32]
 810ce52:	930a      	str	r3, [sp, #40]	@ 0x28
 810ce54:	461f      	mov	r7, r3
 810ce56:	220a      	movs	r2, #10
 810ce58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810ce5a:	7805      	ldrb	r5, [r0, #0]
 810ce5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810ce60:	b2d9      	uxtb	r1, r3
 810ce62:	2909      	cmp	r1, #9
 810ce64:	d928      	bls.n	810ceb8 <_strtod_l+0x1a8>
 810ce66:	494e      	ldr	r1, [pc, #312]	@ (810cfa0 <_strtod_l+0x290>)
 810ce68:	2201      	movs	r2, #1
 810ce6a:	f001 f979 	bl	810e160 <strncmp>
 810ce6e:	2800      	cmp	r0, #0
 810ce70:	d032      	beq.n	810ced8 <_strtod_l+0x1c8>
 810ce72:	2000      	movs	r0, #0
 810ce74:	462a      	mov	r2, r5
 810ce76:	4681      	mov	r9, r0
 810ce78:	463d      	mov	r5, r7
 810ce7a:	4603      	mov	r3, r0
 810ce7c:	2a65      	cmp	r2, #101	@ 0x65
 810ce7e:	d001      	beq.n	810ce84 <_strtod_l+0x174>
 810ce80:	2a45      	cmp	r2, #69	@ 0x45
 810ce82:	d114      	bne.n	810ceae <_strtod_l+0x19e>
 810ce84:	b91d      	cbnz	r5, 810ce8e <_strtod_l+0x17e>
 810ce86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810ce88:	4302      	orrs	r2, r0
 810ce8a:	d095      	beq.n	810cdb8 <_strtod_l+0xa8>
 810ce8c:	2500      	movs	r5, #0
 810ce8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810ce90:	1c62      	adds	r2, r4, #1
 810ce92:	9219      	str	r2, [sp, #100]	@ 0x64
 810ce94:	7862      	ldrb	r2, [r4, #1]
 810ce96:	2a2b      	cmp	r2, #43	@ 0x2b
 810ce98:	d077      	beq.n	810cf8a <_strtod_l+0x27a>
 810ce9a:	2a2d      	cmp	r2, #45	@ 0x2d
 810ce9c:	d07b      	beq.n	810cf96 <_strtod_l+0x286>
 810ce9e:	f04f 0c00 	mov.w	ip, #0
 810cea2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810cea6:	2909      	cmp	r1, #9
 810cea8:	f240 8082 	bls.w	810cfb0 <_strtod_l+0x2a0>
 810ceac:	9419      	str	r4, [sp, #100]	@ 0x64
 810ceae:	f04f 0800 	mov.w	r8, #0
 810ceb2:	e0a2      	b.n	810cffa <_strtod_l+0x2ea>
 810ceb4:	2300      	movs	r3, #0
 810ceb6:	e7c7      	b.n	810ce48 <_strtod_l+0x138>
 810ceb8:	2f08      	cmp	r7, #8
 810ceba:	bfd5      	itete	le
 810cebc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810cebe:	9908      	ldrgt	r1, [sp, #32]
 810cec0:	fb02 3301 	mlale	r3, r2, r1, r3
 810cec4:	fb02 3301 	mlagt	r3, r2, r1, r3
 810cec8:	f100 0001 	add.w	r0, r0, #1
 810cecc:	bfd4      	ite	le
 810cece:	930a      	strle	r3, [sp, #40]	@ 0x28
 810ced0:	9308      	strgt	r3, [sp, #32]
 810ced2:	3701      	adds	r7, #1
 810ced4:	9019      	str	r0, [sp, #100]	@ 0x64
 810ced6:	e7bf      	b.n	810ce58 <_strtod_l+0x148>
 810ced8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ceda:	1c5a      	adds	r2, r3, #1
 810cedc:	9219      	str	r2, [sp, #100]	@ 0x64
 810cede:	785a      	ldrb	r2, [r3, #1]
 810cee0:	b37f      	cbz	r7, 810cf42 <_strtod_l+0x232>
 810cee2:	4681      	mov	r9, r0
 810cee4:	463d      	mov	r5, r7
 810cee6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810ceea:	2b09      	cmp	r3, #9
 810ceec:	d912      	bls.n	810cf14 <_strtod_l+0x204>
 810ceee:	2301      	movs	r3, #1
 810cef0:	e7c4      	b.n	810ce7c <_strtod_l+0x16c>
 810cef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810cef4:	1c5a      	adds	r2, r3, #1
 810cef6:	9219      	str	r2, [sp, #100]	@ 0x64
 810cef8:	785a      	ldrb	r2, [r3, #1]
 810cefa:	3001      	adds	r0, #1
 810cefc:	2a30      	cmp	r2, #48	@ 0x30
 810cefe:	d0f8      	beq.n	810cef2 <_strtod_l+0x1e2>
 810cf00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810cf04:	2b08      	cmp	r3, #8
 810cf06:	f200 84d3 	bhi.w	810d8b0 <_strtod_l+0xba0>
 810cf0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810cf0c:	930c      	str	r3, [sp, #48]	@ 0x30
 810cf0e:	4681      	mov	r9, r0
 810cf10:	2000      	movs	r0, #0
 810cf12:	4605      	mov	r5, r0
 810cf14:	3a30      	subs	r2, #48	@ 0x30
 810cf16:	f100 0301 	add.w	r3, r0, #1
 810cf1a:	d02a      	beq.n	810cf72 <_strtod_l+0x262>
 810cf1c:	4499      	add	r9, r3
 810cf1e:	eb00 0c05 	add.w	ip, r0, r5
 810cf22:	462b      	mov	r3, r5
 810cf24:	210a      	movs	r1, #10
 810cf26:	4563      	cmp	r3, ip
 810cf28:	d10d      	bne.n	810cf46 <_strtod_l+0x236>
 810cf2a:	1c69      	adds	r1, r5, #1
 810cf2c:	4401      	add	r1, r0
 810cf2e:	4428      	add	r0, r5
 810cf30:	2808      	cmp	r0, #8
 810cf32:	dc16      	bgt.n	810cf62 <_strtod_l+0x252>
 810cf34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810cf36:	230a      	movs	r3, #10
 810cf38:	fb03 2300 	mla	r3, r3, r0, r2
 810cf3c:	930a      	str	r3, [sp, #40]	@ 0x28
 810cf3e:	2300      	movs	r3, #0
 810cf40:	e018      	b.n	810cf74 <_strtod_l+0x264>
 810cf42:	4638      	mov	r0, r7
 810cf44:	e7da      	b.n	810cefc <_strtod_l+0x1ec>
 810cf46:	2b08      	cmp	r3, #8
 810cf48:	f103 0301 	add.w	r3, r3, #1
 810cf4c:	dc03      	bgt.n	810cf56 <_strtod_l+0x246>
 810cf4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810cf50:	434e      	muls	r6, r1
 810cf52:	960a      	str	r6, [sp, #40]	@ 0x28
 810cf54:	e7e7      	b.n	810cf26 <_strtod_l+0x216>
 810cf56:	2b10      	cmp	r3, #16
 810cf58:	bfde      	ittt	le
 810cf5a:	9e08      	ldrle	r6, [sp, #32]
 810cf5c:	434e      	mulle	r6, r1
 810cf5e:	9608      	strle	r6, [sp, #32]
 810cf60:	e7e1      	b.n	810cf26 <_strtod_l+0x216>
 810cf62:	280f      	cmp	r0, #15
 810cf64:	dceb      	bgt.n	810cf3e <_strtod_l+0x22e>
 810cf66:	9808      	ldr	r0, [sp, #32]
 810cf68:	230a      	movs	r3, #10
 810cf6a:	fb03 2300 	mla	r3, r3, r0, r2
 810cf6e:	9308      	str	r3, [sp, #32]
 810cf70:	e7e5      	b.n	810cf3e <_strtod_l+0x22e>
 810cf72:	4629      	mov	r1, r5
 810cf74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810cf76:	1c50      	adds	r0, r2, #1
 810cf78:	9019      	str	r0, [sp, #100]	@ 0x64
 810cf7a:	7852      	ldrb	r2, [r2, #1]
 810cf7c:	4618      	mov	r0, r3
 810cf7e:	460d      	mov	r5, r1
 810cf80:	e7b1      	b.n	810cee6 <_strtod_l+0x1d6>
 810cf82:	f04f 0900 	mov.w	r9, #0
 810cf86:	2301      	movs	r3, #1
 810cf88:	e77d      	b.n	810ce86 <_strtod_l+0x176>
 810cf8a:	f04f 0c00 	mov.w	ip, #0
 810cf8e:	1ca2      	adds	r2, r4, #2
 810cf90:	9219      	str	r2, [sp, #100]	@ 0x64
 810cf92:	78a2      	ldrb	r2, [r4, #2]
 810cf94:	e785      	b.n	810cea2 <_strtod_l+0x192>
 810cf96:	f04f 0c01 	mov.w	ip, #1
 810cf9a:	e7f8      	b.n	810cf8e <_strtod_l+0x27e>
 810cf9c:	081af308 	.word	0x081af308
 810cfa0:	081af2f0 	.word	0x081af2f0
 810cfa4:	7ff00000 	.word	0x7ff00000
 810cfa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810cfaa:	1c51      	adds	r1, r2, #1
 810cfac:	9119      	str	r1, [sp, #100]	@ 0x64
 810cfae:	7852      	ldrb	r2, [r2, #1]
 810cfb0:	2a30      	cmp	r2, #48	@ 0x30
 810cfb2:	d0f9      	beq.n	810cfa8 <_strtod_l+0x298>
 810cfb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810cfb8:	2908      	cmp	r1, #8
 810cfba:	f63f af78 	bhi.w	810ceae <_strtod_l+0x19e>
 810cfbe:	3a30      	subs	r2, #48	@ 0x30
 810cfc0:	920e      	str	r2, [sp, #56]	@ 0x38
 810cfc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810cfc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 810cfc6:	f04f 080a 	mov.w	r8, #10
 810cfca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810cfcc:	1c56      	adds	r6, r2, #1
 810cfce:	9619      	str	r6, [sp, #100]	@ 0x64
 810cfd0:	7852      	ldrb	r2, [r2, #1]
 810cfd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810cfd6:	f1be 0f09 	cmp.w	lr, #9
 810cfda:	d939      	bls.n	810d050 <_strtod_l+0x340>
 810cfdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810cfde:	1a76      	subs	r6, r6, r1
 810cfe0:	2e08      	cmp	r6, #8
 810cfe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810cfe6:	dc03      	bgt.n	810cff0 <_strtod_l+0x2e0>
 810cfe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810cfea:	4588      	cmp	r8, r1
 810cfec:	bfa8      	it	ge
 810cfee:	4688      	movge	r8, r1
 810cff0:	f1bc 0f00 	cmp.w	ip, #0
 810cff4:	d001      	beq.n	810cffa <_strtod_l+0x2ea>
 810cff6:	f1c8 0800 	rsb	r8, r8, #0
 810cffa:	2d00      	cmp	r5, #0
 810cffc:	d14e      	bne.n	810d09c <_strtod_l+0x38c>
 810cffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810d000:	4308      	orrs	r0, r1
 810d002:	f47f aebe 	bne.w	810cd82 <_strtod_l+0x72>
 810d006:	2b00      	cmp	r3, #0
 810d008:	f47f aed6 	bne.w	810cdb8 <_strtod_l+0xa8>
 810d00c:	2a69      	cmp	r2, #105	@ 0x69
 810d00e:	d028      	beq.n	810d062 <_strtod_l+0x352>
 810d010:	dc25      	bgt.n	810d05e <_strtod_l+0x34e>
 810d012:	2a49      	cmp	r2, #73	@ 0x49
 810d014:	d025      	beq.n	810d062 <_strtod_l+0x352>
 810d016:	2a4e      	cmp	r2, #78	@ 0x4e
 810d018:	f47f aece 	bne.w	810cdb8 <_strtod_l+0xa8>
 810d01c:	499b      	ldr	r1, [pc, #620]	@ (810d28c <_strtod_l+0x57c>)
 810d01e:	a819      	add	r0, sp, #100	@ 0x64
 810d020:	f001 fb96 	bl	810e750 <__match>
 810d024:	2800      	cmp	r0, #0
 810d026:	f43f aec7 	beq.w	810cdb8 <_strtod_l+0xa8>
 810d02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810d02c:	781b      	ldrb	r3, [r3, #0]
 810d02e:	2b28      	cmp	r3, #40	@ 0x28
 810d030:	d12e      	bne.n	810d090 <_strtod_l+0x380>
 810d032:	4997      	ldr	r1, [pc, #604]	@ (810d290 <_strtod_l+0x580>)
 810d034:	aa1c      	add	r2, sp, #112	@ 0x70
 810d036:	a819      	add	r0, sp, #100	@ 0x64
 810d038:	f001 fb9e 	bl	810e778 <__hexnan>
 810d03c:	2805      	cmp	r0, #5
 810d03e:	d127      	bne.n	810d090 <_strtod_l+0x380>
 810d040:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810d042:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810d046:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810d04a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810d04e:	e698      	b.n	810cd82 <_strtod_l+0x72>
 810d050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810d052:	fb08 2101 	mla	r1, r8, r1, r2
 810d056:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810d05a:	920e      	str	r2, [sp, #56]	@ 0x38
 810d05c:	e7b5      	b.n	810cfca <_strtod_l+0x2ba>
 810d05e:	2a6e      	cmp	r2, #110	@ 0x6e
 810d060:	e7da      	b.n	810d018 <_strtod_l+0x308>
 810d062:	498c      	ldr	r1, [pc, #560]	@ (810d294 <_strtod_l+0x584>)
 810d064:	a819      	add	r0, sp, #100	@ 0x64
 810d066:	f001 fb73 	bl	810e750 <__match>
 810d06a:	2800      	cmp	r0, #0
 810d06c:	f43f aea4 	beq.w	810cdb8 <_strtod_l+0xa8>
 810d070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810d072:	4989      	ldr	r1, [pc, #548]	@ (810d298 <_strtod_l+0x588>)
 810d074:	3b01      	subs	r3, #1
 810d076:	a819      	add	r0, sp, #100	@ 0x64
 810d078:	9319      	str	r3, [sp, #100]	@ 0x64
 810d07a:	f001 fb69 	bl	810e750 <__match>
 810d07e:	b910      	cbnz	r0, 810d086 <_strtod_l+0x376>
 810d080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810d082:	3301      	adds	r3, #1
 810d084:	9319      	str	r3, [sp, #100]	@ 0x64
 810d086:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810d2a8 <_strtod_l+0x598>
 810d08a:	f04f 0a00 	mov.w	sl, #0
 810d08e:	e678      	b.n	810cd82 <_strtod_l+0x72>
 810d090:	4882      	ldr	r0, [pc, #520]	@ (810d29c <_strtod_l+0x58c>)
 810d092:	f001 f899 	bl	810e1c8 <nan>
 810d096:	ec5b ab10 	vmov	sl, fp, d0
 810d09a:	e672      	b.n	810cd82 <_strtod_l+0x72>
 810d09c:	eba8 0309 	sub.w	r3, r8, r9
 810d0a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810d0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 810d0a4:	2f00      	cmp	r7, #0
 810d0a6:	bf08      	it	eq
 810d0a8:	462f      	moveq	r7, r5
 810d0aa:	2d10      	cmp	r5, #16
 810d0ac:	462c      	mov	r4, r5
 810d0ae:	bfa8      	it	ge
 810d0b0:	2410      	movge	r4, #16
 810d0b2:	f7f3 faaf 	bl	8100614 <__aeabi_ui2d>
 810d0b6:	2d09      	cmp	r5, #9
 810d0b8:	4682      	mov	sl, r0
 810d0ba:	468b      	mov	fp, r1
 810d0bc:	dc13      	bgt.n	810d0e6 <_strtod_l+0x3d6>
 810d0be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d0c0:	2b00      	cmp	r3, #0
 810d0c2:	f43f ae5e 	beq.w	810cd82 <_strtod_l+0x72>
 810d0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d0c8:	dd78      	ble.n	810d1bc <_strtod_l+0x4ac>
 810d0ca:	2b16      	cmp	r3, #22
 810d0cc:	dc5f      	bgt.n	810d18e <_strtod_l+0x47e>
 810d0ce:	4974      	ldr	r1, [pc, #464]	@ (810d2a0 <_strtod_l+0x590>)
 810d0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810d0d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d0d8:	4652      	mov	r2, sl
 810d0da:	465b      	mov	r3, fp
 810d0dc:	f7f3 fb14 	bl	8100708 <__aeabi_dmul>
 810d0e0:	4682      	mov	sl, r0
 810d0e2:	468b      	mov	fp, r1
 810d0e4:	e64d      	b.n	810cd82 <_strtod_l+0x72>
 810d0e6:	4b6e      	ldr	r3, [pc, #440]	@ (810d2a0 <_strtod_l+0x590>)
 810d0e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810d0ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810d0f0:	f7f3 fb0a 	bl	8100708 <__aeabi_dmul>
 810d0f4:	4682      	mov	sl, r0
 810d0f6:	9808      	ldr	r0, [sp, #32]
 810d0f8:	468b      	mov	fp, r1
 810d0fa:	f7f3 fa8b 	bl	8100614 <__aeabi_ui2d>
 810d0fe:	4602      	mov	r2, r0
 810d100:	460b      	mov	r3, r1
 810d102:	4650      	mov	r0, sl
 810d104:	4659      	mov	r1, fp
 810d106:	f7f3 f949 	bl	810039c <__adddf3>
 810d10a:	2d0f      	cmp	r5, #15
 810d10c:	4682      	mov	sl, r0
 810d10e:	468b      	mov	fp, r1
 810d110:	ddd5      	ble.n	810d0be <_strtod_l+0x3ae>
 810d112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d114:	1b2c      	subs	r4, r5, r4
 810d116:	441c      	add	r4, r3
 810d118:	2c00      	cmp	r4, #0
 810d11a:	f340 8096 	ble.w	810d24a <_strtod_l+0x53a>
 810d11e:	f014 030f 	ands.w	r3, r4, #15
 810d122:	d00a      	beq.n	810d13a <_strtod_l+0x42a>
 810d124:	495e      	ldr	r1, [pc, #376]	@ (810d2a0 <_strtod_l+0x590>)
 810d126:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810d12a:	4652      	mov	r2, sl
 810d12c:	465b      	mov	r3, fp
 810d12e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d132:	f7f3 fae9 	bl	8100708 <__aeabi_dmul>
 810d136:	4682      	mov	sl, r0
 810d138:	468b      	mov	fp, r1
 810d13a:	f034 040f 	bics.w	r4, r4, #15
 810d13e:	d073      	beq.n	810d228 <_strtod_l+0x518>
 810d140:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810d144:	dd48      	ble.n	810d1d8 <_strtod_l+0x4c8>
 810d146:	2400      	movs	r4, #0
 810d148:	46a0      	mov	r8, r4
 810d14a:	940a      	str	r4, [sp, #40]	@ 0x28
 810d14c:	46a1      	mov	r9, r4
 810d14e:	9a05      	ldr	r2, [sp, #20]
 810d150:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810d2a8 <_strtod_l+0x598>
 810d154:	2322      	movs	r3, #34	@ 0x22
 810d156:	6013      	str	r3, [r2, #0]
 810d158:	f04f 0a00 	mov.w	sl, #0
 810d15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810d15e:	2b00      	cmp	r3, #0
 810d160:	f43f ae0f 	beq.w	810cd82 <_strtod_l+0x72>
 810d164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810d166:	9805      	ldr	r0, [sp, #20]
 810d168:	f7ff f938 	bl	810c3dc <_Bfree>
 810d16c:	9805      	ldr	r0, [sp, #20]
 810d16e:	4649      	mov	r1, r9
 810d170:	f7ff f934 	bl	810c3dc <_Bfree>
 810d174:	9805      	ldr	r0, [sp, #20]
 810d176:	4641      	mov	r1, r8
 810d178:	f7ff f930 	bl	810c3dc <_Bfree>
 810d17c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810d17e:	9805      	ldr	r0, [sp, #20]
 810d180:	f7ff f92c 	bl	810c3dc <_Bfree>
 810d184:	9805      	ldr	r0, [sp, #20]
 810d186:	4621      	mov	r1, r4
 810d188:	f7ff f928 	bl	810c3dc <_Bfree>
 810d18c:	e5f9      	b.n	810cd82 <_strtod_l+0x72>
 810d18e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d190:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810d194:	4293      	cmp	r3, r2
 810d196:	dbbc      	blt.n	810d112 <_strtod_l+0x402>
 810d198:	4c41      	ldr	r4, [pc, #260]	@ (810d2a0 <_strtod_l+0x590>)
 810d19a:	f1c5 050f 	rsb	r5, r5, #15
 810d19e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810d1a2:	4652      	mov	r2, sl
 810d1a4:	465b      	mov	r3, fp
 810d1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d1aa:	f7f3 faad 	bl	8100708 <__aeabi_dmul>
 810d1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d1b0:	1b5d      	subs	r5, r3, r5
 810d1b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810d1b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 810d1ba:	e78f      	b.n	810d0dc <_strtod_l+0x3cc>
 810d1bc:	3316      	adds	r3, #22
 810d1be:	dba8      	blt.n	810d112 <_strtod_l+0x402>
 810d1c0:	4b37      	ldr	r3, [pc, #220]	@ (810d2a0 <_strtod_l+0x590>)
 810d1c2:	eba9 0808 	sub.w	r8, r9, r8
 810d1c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810d1ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 810d1ce:	4650      	mov	r0, sl
 810d1d0:	4659      	mov	r1, fp
 810d1d2:	f7f3 fbc3 	bl	810095c <__aeabi_ddiv>
 810d1d6:	e783      	b.n	810d0e0 <_strtod_l+0x3d0>
 810d1d8:	4b32      	ldr	r3, [pc, #200]	@ (810d2a4 <_strtod_l+0x594>)
 810d1da:	9308      	str	r3, [sp, #32]
 810d1dc:	2300      	movs	r3, #0
 810d1de:	1124      	asrs	r4, r4, #4
 810d1e0:	4650      	mov	r0, sl
 810d1e2:	4659      	mov	r1, fp
 810d1e4:	461e      	mov	r6, r3
 810d1e6:	2c01      	cmp	r4, #1
 810d1e8:	dc21      	bgt.n	810d22e <_strtod_l+0x51e>
 810d1ea:	b10b      	cbz	r3, 810d1f0 <_strtod_l+0x4e0>
 810d1ec:	4682      	mov	sl, r0
 810d1ee:	468b      	mov	fp, r1
 810d1f0:	492c      	ldr	r1, [pc, #176]	@ (810d2a4 <_strtod_l+0x594>)
 810d1f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810d1f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810d1fa:	4652      	mov	r2, sl
 810d1fc:	465b      	mov	r3, fp
 810d1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 810d202:	f7f3 fa81 	bl	8100708 <__aeabi_dmul>
 810d206:	4b28      	ldr	r3, [pc, #160]	@ (810d2a8 <_strtod_l+0x598>)
 810d208:	460a      	mov	r2, r1
 810d20a:	400b      	ands	r3, r1
 810d20c:	4927      	ldr	r1, [pc, #156]	@ (810d2ac <_strtod_l+0x59c>)
 810d20e:	428b      	cmp	r3, r1
 810d210:	4682      	mov	sl, r0
 810d212:	d898      	bhi.n	810d146 <_strtod_l+0x436>
 810d214:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810d218:	428b      	cmp	r3, r1
 810d21a:	bf86      	itte	hi
 810d21c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810d2b0 <_strtod_l+0x5a0>
 810d220:	f04f 3aff 	movhi.w	sl, #4294967295
 810d224:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810d228:	2300      	movs	r3, #0
 810d22a:	9308      	str	r3, [sp, #32]
 810d22c:	e07a      	b.n	810d324 <_strtod_l+0x614>
 810d22e:	07e2      	lsls	r2, r4, #31
 810d230:	d505      	bpl.n	810d23e <_strtod_l+0x52e>
 810d232:	9b08      	ldr	r3, [sp, #32]
 810d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d238:	f7f3 fa66 	bl	8100708 <__aeabi_dmul>
 810d23c:	2301      	movs	r3, #1
 810d23e:	9a08      	ldr	r2, [sp, #32]
 810d240:	3208      	adds	r2, #8
 810d242:	3601      	adds	r6, #1
 810d244:	1064      	asrs	r4, r4, #1
 810d246:	9208      	str	r2, [sp, #32]
 810d248:	e7cd      	b.n	810d1e6 <_strtod_l+0x4d6>
 810d24a:	d0ed      	beq.n	810d228 <_strtod_l+0x518>
 810d24c:	4264      	negs	r4, r4
 810d24e:	f014 020f 	ands.w	r2, r4, #15
 810d252:	d00a      	beq.n	810d26a <_strtod_l+0x55a>
 810d254:	4b12      	ldr	r3, [pc, #72]	@ (810d2a0 <_strtod_l+0x590>)
 810d256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810d25a:	4650      	mov	r0, sl
 810d25c:	4659      	mov	r1, fp
 810d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d262:	f7f3 fb7b 	bl	810095c <__aeabi_ddiv>
 810d266:	4682      	mov	sl, r0
 810d268:	468b      	mov	fp, r1
 810d26a:	1124      	asrs	r4, r4, #4
 810d26c:	d0dc      	beq.n	810d228 <_strtod_l+0x518>
 810d26e:	2c1f      	cmp	r4, #31
 810d270:	dd20      	ble.n	810d2b4 <_strtod_l+0x5a4>
 810d272:	2400      	movs	r4, #0
 810d274:	46a0      	mov	r8, r4
 810d276:	940a      	str	r4, [sp, #40]	@ 0x28
 810d278:	46a1      	mov	r9, r4
 810d27a:	9a05      	ldr	r2, [sp, #20]
 810d27c:	2322      	movs	r3, #34	@ 0x22
 810d27e:	f04f 0a00 	mov.w	sl, #0
 810d282:	f04f 0b00 	mov.w	fp, #0
 810d286:	6013      	str	r3, [r2, #0]
 810d288:	e768      	b.n	810d15c <_strtod_l+0x44c>
 810d28a:	bf00      	nop
 810d28c:	081af0e1 	.word	0x081af0e1
 810d290:	081af2f4 	.word	0x081af2f4
 810d294:	081af0d9 	.word	0x081af0d9
 810d298:	081af110 	.word	0x081af110
 810d29c:	0819bbc0 	.word	0x0819bbc0
 810d2a0:	081af228 	.word	0x081af228
 810d2a4:	081af200 	.word	0x081af200
 810d2a8:	7ff00000 	.word	0x7ff00000
 810d2ac:	7ca00000 	.word	0x7ca00000
 810d2b0:	7fefffff 	.word	0x7fefffff
 810d2b4:	f014 0310 	ands.w	r3, r4, #16
 810d2b8:	bf18      	it	ne
 810d2ba:	236a      	movne	r3, #106	@ 0x6a
 810d2bc:	4ea9      	ldr	r6, [pc, #676]	@ (810d564 <_strtod_l+0x854>)
 810d2be:	9308      	str	r3, [sp, #32]
 810d2c0:	4650      	mov	r0, sl
 810d2c2:	4659      	mov	r1, fp
 810d2c4:	2300      	movs	r3, #0
 810d2c6:	07e2      	lsls	r2, r4, #31
 810d2c8:	d504      	bpl.n	810d2d4 <_strtod_l+0x5c4>
 810d2ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 810d2ce:	f7f3 fa1b 	bl	8100708 <__aeabi_dmul>
 810d2d2:	2301      	movs	r3, #1
 810d2d4:	1064      	asrs	r4, r4, #1
 810d2d6:	f106 0608 	add.w	r6, r6, #8
 810d2da:	d1f4      	bne.n	810d2c6 <_strtod_l+0x5b6>
 810d2dc:	b10b      	cbz	r3, 810d2e2 <_strtod_l+0x5d2>
 810d2de:	4682      	mov	sl, r0
 810d2e0:	468b      	mov	fp, r1
 810d2e2:	9b08      	ldr	r3, [sp, #32]
 810d2e4:	b1b3      	cbz	r3, 810d314 <_strtod_l+0x604>
 810d2e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810d2ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810d2ee:	2b00      	cmp	r3, #0
 810d2f0:	4659      	mov	r1, fp
 810d2f2:	dd0f      	ble.n	810d314 <_strtod_l+0x604>
 810d2f4:	2b1f      	cmp	r3, #31
 810d2f6:	dd55      	ble.n	810d3a4 <_strtod_l+0x694>
 810d2f8:	2b34      	cmp	r3, #52	@ 0x34
 810d2fa:	bfde      	ittt	le
 810d2fc:	f04f 33ff 	movle.w	r3, #4294967295
 810d300:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810d304:	4093      	lslle	r3, r2
 810d306:	f04f 0a00 	mov.w	sl, #0
 810d30a:	bfcc      	ite	gt
 810d30c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810d310:	ea03 0b01 	andle.w	fp, r3, r1
 810d314:	2200      	movs	r2, #0
 810d316:	2300      	movs	r3, #0
 810d318:	4650      	mov	r0, sl
 810d31a:	4659      	mov	r1, fp
 810d31c:	f7f3 fc5c 	bl	8100bd8 <__aeabi_dcmpeq>
 810d320:	2800      	cmp	r0, #0
 810d322:	d1a6      	bne.n	810d272 <_strtod_l+0x562>
 810d324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810d326:	9300      	str	r3, [sp, #0]
 810d328:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810d32a:	9805      	ldr	r0, [sp, #20]
 810d32c:	462b      	mov	r3, r5
 810d32e:	463a      	mov	r2, r7
 810d330:	f7ff f8bc 	bl	810c4ac <__s2b>
 810d334:	900a      	str	r0, [sp, #40]	@ 0x28
 810d336:	2800      	cmp	r0, #0
 810d338:	f43f af05 	beq.w	810d146 <_strtod_l+0x436>
 810d33c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d33e:	2a00      	cmp	r2, #0
 810d340:	eba9 0308 	sub.w	r3, r9, r8
 810d344:	bfa8      	it	ge
 810d346:	2300      	movge	r3, #0
 810d348:	9312      	str	r3, [sp, #72]	@ 0x48
 810d34a:	2400      	movs	r4, #0
 810d34c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810d350:	9316      	str	r3, [sp, #88]	@ 0x58
 810d352:	46a0      	mov	r8, r4
 810d354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810d356:	9805      	ldr	r0, [sp, #20]
 810d358:	6859      	ldr	r1, [r3, #4]
 810d35a:	f7fe ffff 	bl	810c35c <_Balloc>
 810d35e:	4681      	mov	r9, r0
 810d360:	2800      	cmp	r0, #0
 810d362:	f43f aef4 	beq.w	810d14e <_strtod_l+0x43e>
 810d366:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810d368:	691a      	ldr	r2, [r3, #16]
 810d36a:	3202      	adds	r2, #2
 810d36c:	f103 010c 	add.w	r1, r3, #12
 810d370:	0092      	lsls	r2, r2, #2
 810d372:	300c      	adds	r0, #12
 810d374:	f7fe f947 	bl	810b606 <memcpy>
 810d378:	ec4b ab10 	vmov	d0, sl, fp
 810d37c:	9805      	ldr	r0, [sp, #20]
 810d37e:	aa1c      	add	r2, sp, #112	@ 0x70
 810d380:	a91b      	add	r1, sp, #108	@ 0x6c
 810d382:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810d386:	f7ff fbcd 	bl	810cb24 <__d2b>
 810d38a:	901a      	str	r0, [sp, #104]	@ 0x68
 810d38c:	2800      	cmp	r0, #0
 810d38e:	f43f aede 	beq.w	810d14e <_strtod_l+0x43e>
 810d392:	9805      	ldr	r0, [sp, #20]
 810d394:	2101      	movs	r1, #1
 810d396:	f7ff f91f 	bl	810c5d8 <__i2b>
 810d39a:	4680      	mov	r8, r0
 810d39c:	b948      	cbnz	r0, 810d3b2 <_strtod_l+0x6a2>
 810d39e:	f04f 0800 	mov.w	r8, #0
 810d3a2:	e6d4      	b.n	810d14e <_strtod_l+0x43e>
 810d3a4:	f04f 32ff 	mov.w	r2, #4294967295
 810d3a8:	fa02 f303 	lsl.w	r3, r2, r3
 810d3ac:	ea03 0a0a 	and.w	sl, r3, sl
 810d3b0:	e7b0      	b.n	810d314 <_strtod_l+0x604>
 810d3b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810d3b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810d3b6:	2d00      	cmp	r5, #0
 810d3b8:	bfab      	itete	ge
 810d3ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810d3bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810d3be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810d3c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810d3c2:	bfac      	ite	ge
 810d3c4:	18ef      	addge	r7, r5, r3
 810d3c6:	1b5e      	sublt	r6, r3, r5
 810d3c8:	9b08      	ldr	r3, [sp, #32]
 810d3ca:	1aed      	subs	r5, r5, r3
 810d3cc:	4415      	add	r5, r2
 810d3ce:	4b66      	ldr	r3, [pc, #408]	@ (810d568 <_strtod_l+0x858>)
 810d3d0:	3d01      	subs	r5, #1
 810d3d2:	429d      	cmp	r5, r3
 810d3d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810d3d8:	da50      	bge.n	810d47c <_strtod_l+0x76c>
 810d3da:	1b5b      	subs	r3, r3, r5
 810d3dc:	2b1f      	cmp	r3, #31
 810d3de:	eba2 0203 	sub.w	r2, r2, r3
 810d3e2:	f04f 0101 	mov.w	r1, #1
 810d3e6:	dc3d      	bgt.n	810d464 <_strtod_l+0x754>
 810d3e8:	fa01 f303 	lsl.w	r3, r1, r3
 810d3ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 810d3ee:	2300      	movs	r3, #0
 810d3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 810d3f2:	18bd      	adds	r5, r7, r2
 810d3f4:	9b08      	ldr	r3, [sp, #32]
 810d3f6:	42af      	cmp	r7, r5
 810d3f8:	4416      	add	r6, r2
 810d3fa:	441e      	add	r6, r3
 810d3fc:	463b      	mov	r3, r7
 810d3fe:	bfa8      	it	ge
 810d400:	462b      	movge	r3, r5
 810d402:	42b3      	cmp	r3, r6
 810d404:	bfa8      	it	ge
 810d406:	4633      	movge	r3, r6
 810d408:	2b00      	cmp	r3, #0
 810d40a:	bfc2      	ittt	gt
 810d40c:	1aed      	subgt	r5, r5, r3
 810d40e:	1af6      	subgt	r6, r6, r3
 810d410:	1aff      	subgt	r7, r7, r3
 810d412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810d414:	2b00      	cmp	r3, #0
 810d416:	dd16      	ble.n	810d446 <_strtod_l+0x736>
 810d418:	4641      	mov	r1, r8
 810d41a:	9805      	ldr	r0, [sp, #20]
 810d41c:	461a      	mov	r2, r3
 810d41e:	f7ff f99b 	bl	810c758 <__pow5mult>
 810d422:	4680      	mov	r8, r0
 810d424:	2800      	cmp	r0, #0
 810d426:	d0ba      	beq.n	810d39e <_strtod_l+0x68e>
 810d428:	4601      	mov	r1, r0
 810d42a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810d42c:	9805      	ldr	r0, [sp, #20]
 810d42e:	f7ff f8e9 	bl	810c604 <__multiply>
 810d432:	900e      	str	r0, [sp, #56]	@ 0x38
 810d434:	2800      	cmp	r0, #0
 810d436:	f43f ae8a 	beq.w	810d14e <_strtod_l+0x43e>
 810d43a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810d43c:	9805      	ldr	r0, [sp, #20]
 810d43e:	f7fe ffcd 	bl	810c3dc <_Bfree>
 810d442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d444:	931a      	str	r3, [sp, #104]	@ 0x68
 810d446:	2d00      	cmp	r5, #0
 810d448:	dc1d      	bgt.n	810d486 <_strtod_l+0x776>
 810d44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d44c:	2b00      	cmp	r3, #0
 810d44e:	dd23      	ble.n	810d498 <_strtod_l+0x788>
 810d450:	4649      	mov	r1, r9
 810d452:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810d454:	9805      	ldr	r0, [sp, #20]
 810d456:	f7ff f97f 	bl	810c758 <__pow5mult>
 810d45a:	4681      	mov	r9, r0
 810d45c:	b9e0      	cbnz	r0, 810d498 <_strtod_l+0x788>
 810d45e:	f04f 0900 	mov.w	r9, #0
 810d462:	e674      	b.n	810d14e <_strtod_l+0x43e>
 810d464:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810d468:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810d46c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810d470:	35e2      	adds	r5, #226	@ 0xe2
 810d472:	fa01 f305 	lsl.w	r3, r1, r5
 810d476:	9310      	str	r3, [sp, #64]	@ 0x40
 810d478:	9113      	str	r1, [sp, #76]	@ 0x4c
 810d47a:	e7ba      	b.n	810d3f2 <_strtod_l+0x6e2>
 810d47c:	2300      	movs	r3, #0
 810d47e:	9310      	str	r3, [sp, #64]	@ 0x40
 810d480:	2301      	movs	r3, #1
 810d482:	9313      	str	r3, [sp, #76]	@ 0x4c
 810d484:	e7b5      	b.n	810d3f2 <_strtod_l+0x6e2>
 810d486:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810d488:	9805      	ldr	r0, [sp, #20]
 810d48a:	462a      	mov	r2, r5
 810d48c:	f7ff f9be 	bl	810c80c <__lshift>
 810d490:	901a      	str	r0, [sp, #104]	@ 0x68
 810d492:	2800      	cmp	r0, #0
 810d494:	d1d9      	bne.n	810d44a <_strtod_l+0x73a>
 810d496:	e65a      	b.n	810d14e <_strtod_l+0x43e>
 810d498:	2e00      	cmp	r6, #0
 810d49a:	dd07      	ble.n	810d4ac <_strtod_l+0x79c>
 810d49c:	4649      	mov	r1, r9
 810d49e:	9805      	ldr	r0, [sp, #20]
 810d4a0:	4632      	mov	r2, r6
 810d4a2:	f7ff f9b3 	bl	810c80c <__lshift>
 810d4a6:	4681      	mov	r9, r0
 810d4a8:	2800      	cmp	r0, #0
 810d4aa:	d0d8      	beq.n	810d45e <_strtod_l+0x74e>
 810d4ac:	2f00      	cmp	r7, #0
 810d4ae:	dd08      	ble.n	810d4c2 <_strtod_l+0x7b2>
 810d4b0:	4641      	mov	r1, r8
 810d4b2:	9805      	ldr	r0, [sp, #20]
 810d4b4:	463a      	mov	r2, r7
 810d4b6:	f7ff f9a9 	bl	810c80c <__lshift>
 810d4ba:	4680      	mov	r8, r0
 810d4bc:	2800      	cmp	r0, #0
 810d4be:	f43f ae46 	beq.w	810d14e <_strtod_l+0x43e>
 810d4c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810d4c4:	9805      	ldr	r0, [sp, #20]
 810d4c6:	464a      	mov	r2, r9
 810d4c8:	f7ff fa28 	bl	810c91c <__mdiff>
 810d4cc:	4604      	mov	r4, r0
 810d4ce:	2800      	cmp	r0, #0
 810d4d0:	f43f ae3d 	beq.w	810d14e <_strtod_l+0x43e>
 810d4d4:	68c3      	ldr	r3, [r0, #12]
 810d4d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 810d4d8:	2300      	movs	r3, #0
 810d4da:	60c3      	str	r3, [r0, #12]
 810d4dc:	4641      	mov	r1, r8
 810d4de:	f7ff fa01 	bl	810c8e4 <__mcmp>
 810d4e2:	2800      	cmp	r0, #0
 810d4e4:	da46      	bge.n	810d574 <_strtod_l+0x864>
 810d4e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810d4e8:	ea53 030a 	orrs.w	r3, r3, sl
 810d4ec:	d16c      	bne.n	810d5c8 <_strtod_l+0x8b8>
 810d4ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810d4f2:	2b00      	cmp	r3, #0
 810d4f4:	d168      	bne.n	810d5c8 <_strtod_l+0x8b8>
 810d4f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810d4fa:	0d1b      	lsrs	r3, r3, #20
 810d4fc:	051b      	lsls	r3, r3, #20
 810d4fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810d502:	d961      	bls.n	810d5c8 <_strtod_l+0x8b8>
 810d504:	6963      	ldr	r3, [r4, #20]
 810d506:	b913      	cbnz	r3, 810d50e <_strtod_l+0x7fe>
 810d508:	6923      	ldr	r3, [r4, #16]
 810d50a:	2b01      	cmp	r3, #1
 810d50c:	dd5c      	ble.n	810d5c8 <_strtod_l+0x8b8>
 810d50e:	4621      	mov	r1, r4
 810d510:	2201      	movs	r2, #1
 810d512:	9805      	ldr	r0, [sp, #20]
 810d514:	f7ff f97a 	bl	810c80c <__lshift>
 810d518:	4641      	mov	r1, r8
 810d51a:	4604      	mov	r4, r0
 810d51c:	f7ff f9e2 	bl	810c8e4 <__mcmp>
 810d520:	2800      	cmp	r0, #0
 810d522:	dd51      	ble.n	810d5c8 <_strtod_l+0x8b8>
 810d524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810d528:	9a08      	ldr	r2, [sp, #32]
 810d52a:	0d1b      	lsrs	r3, r3, #20
 810d52c:	051b      	lsls	r3, r3, #20
 810d52e:	2a00      	cmp	r2, #0
 810d530:	d06b      	beq.n	810d60a <_strtod_l+0x8fa>
 810d532:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810d536:	d868      	bhi.n	810d60a <_strtod_l+0x8fa>
 810d538:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810d53c:	f67f ae9d 	bls.w	810d27a <_strtod_l+0x56a>
 810d540:	4b0a      	ldr	r3, [pc, #40]	@ (810d56c <_strtod_l+0x85c>)
 810d542:	4650      	mov	r0, sl
 810d544:	4659      	mov	r1, fp
 810d546:	2200      	movs	r2, #0
 810d548:	f7f3 f8de 	bl	8100708 <__aeabi_dmul>
 810d54c:	4b08      	ldr	r3, [pc, #32]	@ (810d570 <_strtod_l+0x860>)
 810d54e:	400b      	ands	r3, r1
 810d550:	4682      	mov	sl, r0
 810d552:	468b      	mov	fp, r1
 810d554:	2b00      	cmp	r3, #0
 810d556:	f47f ae05 	bne.w	810d164 <_strtod_l+0x454>
 810d55a:	9a05      	ldr	r2, [sp, #20]
 810d55c:	2322      	movs	r3, #34	@ 0x22
 810d55e:	6013      	str	r3, [r2, #0]
 810d560:	e600      	b.n	810d164 <_strtod_l+0x454>
 810d562:	bf00      	nop
 810d564:	081af320 	.word	0x081af320
 810d568:	fffffc02 	.word	0xfffffc02
 810d56c:	39500000 	.word	0x39500000
 810d570:	7ff00000 	.word	0x7ff00000
 810d574:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810d578:	d165      	bne.n	810d646 <_strtod_l+0x936>
 810d57a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810d57c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810d580:	b35a      	cbz	r2, 810d5da <_strtod_l+0x8ca>
 810d582:	4a9f      	ldr	r2, [pc, #636]	@ (810d800 <_strtod_l+0xaf0>)
 810d584:	4293      	cmp	r3, r2
 810d586:	d12b      	bne.n	810d5e0 <_strtod_l+0x8d0>
 810d588:	9b08      	ldr	r3, [sp, #32]
 810d58a:	4651      	mov	r1, sl
 810d58c:	b303      	cbz	r3, 810d5d0 <_strtod_l+0x8c0>
 810d58e:	4b9d      	ldr	r3, [pc, #628]	@ (810d804 <_strtod_l+0xaf4>)
 810d590:	465a      	mov	r2, fp
 810d592:	4013      	ands	r3, r2
 810d594:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810d598:	f04f 32ff 	mov.w	r2, #4294967295
 810d59c:	d81b      	bhi.n	810d5d6 <_strtod_l+0x8c6>
 810d59e:	0d1b      	lsrs	r3, r3, #20
 810d5a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810d5a4:	fa02 f303 	lsl.w	r3, r2, r3
 810d5a8:	4299      	cmp	r1, r3
 810d5aa:	d119      	bne.n	810d5e0 <_strtod_l+0x8d0>
 810d5ac:	4b96      	ldr	r3, [pc, #600]	@ (810d808 <_strtod_l+0xaf8>)
 810d5ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810d5b0:	429a      	cmp	r2, r3
 810d5b2:	d102      	bne.n	810d5ba <_strtod_l+0x8aa>
 810d5b4:	3101      	adds	r1, #1
 810d5b6:	f43f adca 	beq.w	810d14e <_strtod_l+0x43e>
 810d5ba:	4b92      	ldr	r3, [pc, #584]	@ (810d804 <_strtod_l+0xaf4>)
 810d5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810d5be:	401a      	ands	r2, r3
 810d5c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810d5c4:	f04f 0a00 	mov.w	sl, #0
 810d5c8:	9b08      	ldr	r3, [sp, #32]
 810d5ca:	2b00      	cmp	r3, #0
 810d5cc:	d1b8      	bne.n	810d540 <_strtod_l+0x830>
 810d5ce:	e5c9      	b.n	810d164 <_strtod_l+0x454>
 810d5d0:	f04f 33ff 	mov.w	r3, #4294967295
 810d5d4:	e7e8      	b.n	810d5a8 <_strtod_l+0x898>
 810d5d6:	4613      	mov	r3, r2
 810d5d8:	e7e6      	b.n	810d5a8 <_strtod_l+0x898>
 810d5da:	ea53 030a 	orrs.w	r3, r3, sl
 810d5de:	d0a1      	beq.n	810d524 <_strtod_l+0x814>
 810d5e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810d5e2:	b1db      	cbz	r3, 810d61c <_strtod_l+0x90c>
 810d5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810d5e6:	4213      	tst	r3, r2
 810d5e8:	d0ee      	beq.n	810d5c8 <_strtod_l+0x8b8>
 810d5ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810d5ec:	9a08      	ldr	r2, [sp, #32]
 810d5ee:	4650      	mov	r0, sl
 810d5f0:	4659      	mov	r1, fp
 810d5f2:	b1bb      	cbz	r3, 810d624 <_strtod_l+0x914>
 810d5f4:	f7ff fb6c 	bl	810ccd0 <sulp>
 810d5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d5fc:	ec53 2b10 	vmov	r2, r3, d0
 810d600:	f7f2 fecc 	bl	810039c <__adddf3>
 810d604:	4682      	mov	sl, r0
 810d606:	468b      	mov	fp, r1
 810d608:	e7de      	b.n	810d5c8 <_strtod_l+0x8b8>
 810d60a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810d60e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810d612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810d616:	f04f 3aff 	mov.w	sl, #4294967295
 810d61a:	e7d5      	b.n	810d5c8 <_strtod_l+0x8b8>
 810d61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810d61e:	ea13 0f0a 	tst.w	r3, sl
 810d622:	e7e1      	b.n	810d5e8 <_strtod_l+0x8d8>
 810d624:	f7ff fb54 	bl	810ccd0 <sulp>
 810d628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d62c:	ec53 2b10 	vmov	r2, r3, d0
 810d630:	f7f2 feb2 	bl	8100398 <__aeabi_dsub>
 810d634:	2200      	movs	r2, #0
 810d636:	2300      	movs	r3, #0
 810d638:	4682      	mov	sl, r0
 810d63a:	468b      	mov	fp, r1
 810d63c:	f7f3 facc 	bl	8100bd8 <__aeabi_dcmpeq>
 810d640:	2800      	cmp	r0, #0
 810d642:	d0c1      	beq.n	810d5c8 <_strtod_l+0x8b8>
 810d644:	e619      	b.n	810d27a <_strtod_l+0x56a>
 810d646:	4641      	mov	r1, r8
 810d648:	4620      	mov	r0, r4
 810d64a:	f7ff fac3 	bl	810cbd4 <__ratio>
 810d64e:	ec57 6b10 	vmov	r6, r7, d0
 810d652:	2200      	movs	r2, #0
 810d654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810d658:	4630      	mov	r0, r6
 810d65a:	4639      	mov	r1, r7
 810d65c:	f7f3 fad0 	bl	8100c00 <__aeabi_dcmple>
 810d660:	2800      	cmp	r0, #0
 810d662:	d06f      	beq.n	810d744 <_strtod_l+0xa34>
 810d664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810d666:	2b00      	cmp	r3, #0
 810d668:	d17a      	bne.n	810d760 <_strtod_l+0xa50>
 810d66a:	f1ba 0f00 	cmp.w	sl, #0
 810d66e:	d158      	bne.n	810d722 <_strtod_l+0xa12>
 810d670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d676:	2b00      	cmp	r3, #0
 810d678:	d15a      	bne.n	810d730 <_strtod_l+0xa20>
 810d67a:	4b64      	ldr	r3, [pc, #400]	@ (810d80c <_strtod_l+0xafc>)
 810d67c:	2200      	movs	r2, #0
 810d67e:	4630      	mov	r0, r6
 810d680:	4639      	mov	r1, r7
 810d682:	f7f3 fab3 	bl	8100bec <__aeabi_dcmplt>
 810d686:	2800      	cmp	r0, #0
 810d688:	d159      	bne.n	810d73e <_strtod_l+0xa2e>
 810d68a:	4630      	mov	r0, r6
 810d68c:	4639      	mov	r1, r7
 810d68e:	4b60      	ldr	r3, [pc, #384]	@ (810d810 <_strtod_l+0xb00>)
 810d690:	2200      	movs	r2, #0
 810d692:	f7f3 f839 	bl	8100708 <__aeabi_dmul>
 810d696:	4606      	mov	r6, r0
 810d698:	460f      	mov	r7, r1
 810d69a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810d69e:	9606      	str	r6, [sp, #24]
 810d6a0:	9307      	str	r3, [sp, #28]
 810d6a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d6a6:	4d57      	ldr	r5, [pc, #348]	@ (810d804 <_strtod_l+0xaf4>)
 810d6a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810d6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d6ae:	401d      	ands	r5, r3
 810d6b0:	4b58      	ldr	r3, [pc, #352]	@ (810d814 <_strtod_l+0xb04>)
 810d6b2:	429d      	cmp	r5, r3
 810d6b4:	f040 80b2 	bne.w	810d81c <_strtod_l+0xb0c>
 810d6b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d6ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810d6be:	ec4b ab10 	vmov	d0, sl, fp
 810d6c2:	f7ff f9bf 	bl	810ca44 <__ulp>
 810d6c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810d6ca:	ec51 0b10 	vmov	r0, r1, d0
 810d6ce:	f7f3 f81b 	bl	8100708 <__aeabi_dmul>
 810d6d2:	4652      	mov	r2, sl
 810d6d4:	465b      	mov	r3, fp
 810d6d6:	f7f2 fe61 	bl	810039c <__adddf3>
 810d6da:	460b      	mov	r3, r1
 810d6dc:	4949      	ldr	r1, [pc, #292]	@ (810d804 <_strtod_l+0xaf4>)
 810d6de:	4a4e      	ldr	r2, [pc, #312]	@ (810d818 <_strtod_l+0xb08>)
 810d6e0:	4019      	ands	r1, r3
 810d6e2:	4291      	cmp	r1, r2
 810d6e4:	4682      	mov	sl, r0
 810d6e6:	d942      	bls.n	810d76e <_strtod_l+0xa5e>
 810d6e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810d6ea:	4b47      	ldr	r3, [pc, #284]	@ (810d808 <_strtod_l+0xaf8>)
 810d6ec:	429a      	cmp	r2, r3
 810d6ee:	d103      	bne.n	810d6f8 <_strtod_l+0x9e8>
 810d6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810d6f2:	3301      	adds	r3, #1
 810d6f4:	f43f ad2b 	beq.w	810d14e <_strtod_l+0x43e>
 810d6f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810d808 <_strtod_l+0xaf8>
 810d6fc:	f04f 3aff 	mov.w	sl, #4294967295
 810d700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810d702:	9805      	ldr	r0, [sp, #20]
 810d704:	f7fe fe6a 	bl	810c3dc <_Bfree>
 810d708:	9805      	ldr	r0, [sp, #20]
 810d70a:	4649      	mov	r1, r9
 810d70c:	f7fe fe66 	bl	810c3dc <_Bfree>
 810d710:	9805      	ldr	r0, [sp, #20]
 810d712:	4641      	mov	r1, r8
 810d714:	f7fe fe62 	bl	810c3dc <_Bfree>
 810d718:	9805      	ldr	r0, [sp, #20]
 810d71a:	4621      	mov	r1, r4
 810d71c:	f7fe fe5e 	bl	810c3dc <_Bfree>
 810d720:	e618      	b.n	810d354 <_strtod_l+0x644>
 810d722:	f1ba 0f01 	cmp.w	sl, #1
 810d726:	d103      	bne.n	810d730 <_strtod_l+0xa20>
 810d728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810d72a:	2b00      	cmp	r3, #0
 810d72c:	f43f ada5 	beq.w	810d27a <_strtod_l+0x56a>
 810d730:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810d7e0 <_strtod_l+0xad0>
 810d734:	4f35      	ldr	r7, [pc, #212]	@ (810d80c <_strtod_l+0xafc>)
 810d736:	ed8d 7b06 	vstr	d7, [sp, #24]
 810d73a:	2600      	movs	r6, #0
 810d73c:	e7b1      	b.n	810d6a2 <_strtod_l+0x992>
 810d73e:	4f34      	ldr	r7, [pc, #208]	@ (810d810 <_strtod_l+0xb00>)
 810d740:	2600      	movs	r6, #0
 810d742:	e7aa      	b.n	810d69a <_strtod_l+0x98a>
 810d744:	4b32      	ldr	r3, [pc, #200]	@ (810d810 <_strtod_l+0xb00>)
 810d746:	4630      	mov	r0, r6
 810d748:	4639      	mov	r1, r7
 810d74a:	2200      	movs	r2, #0
 810d74c:	f7f2 ffdc 	bl	8100708 <__aeabi_dmul>
 810d750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810d752:	4606      	mov	r6, r0
 810d754:	460f      	mov	r7, r1
 810d756:	2b00      	cmp	r3, #0
 810d758:	d09f      	beq.n	810d69a <_strtod_l+0x98a>
 810d75a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810d75e:	e7a0      	b.n	810d6a2 <_strtod_l+0x992>
 810d760:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810d7e8 <_strtod_l+0xad8>
 810d764:	ed8d 7b06 	vstr	d7, [sp, #24]
 810d768:	ec57 6b17 	vmov	r6, r7, d7
 810d76c:	e799      	b.n	810d6a2 <_strtod_l+0x992>
 810d76e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810d772:	9b08      	ldr	r3, [sp, #32]
 810d774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810d778:	2b00      	cmp	r3, #0
 810d77a:	d1c1      	bne.n	810d700 <_strtod_l+0x9f0>
 810d77c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810d780:	0d1b      	lsrs	r3, r3, #20
 810d782:	051b      	lsls	r3, r3, #20
 810d784:	429d      	cmp	r5, r3
 810d786:	d1bb      	bne.n	810d700 <_strtod_l+0x9f0>
 810d788:	4630      	mov	r0, r6
 810d78a:	4639      	mov	r1, r7
 810d78c:	f7f3 fb1c 	bl	8100dc8 <__aeabi_d2lz>
 810d790:	f7f2 ff8c 	bl	81006ac <__aeabi_l2d>
 810d794:	4602      	mov	r2, r0
 810d796:	460b      	mov	r3, r1
 810d798:	4630      	mov	r0, r6
 810d79a:	4639      	mov	r1, r7
 810d79c:	f7f2 fdfc 	bl	8100398 <__aeabi_dsub>
 810d7a0:	460b      	mov	r3, r1
 810d7a2:	4602      	mov	r2, r0
 810d7a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810d7a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810d7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810d7ae:	ea46 060a 	orr.w	r6, r6, sl
 810d7b2:	431e      	orrs	r6, r3
 810d7b4:	d06f      	beq.n	810d896 <_strtod_l+0xb86>
 810d7b6:	a30e      	add	r3, pc, #56	@ (adr r3, 810d7f0 <_strtod_l+0xae0>)
 810d7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7bc:	f7f3 fa16 	bl	8100bec <__aeabi_dcmplt>
 810d7c0:	2800      	cmp	r0, #0
 810d7c2:	f47f accf 	bne.w	810d164 <_strtod_l+0x454>
 810d7c6:	a30c      	add	r3, pc, #48	@ (adr r3, 810d7f8 <_strtod_l+0xae8>)
 810d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810d7d0:	f7f3 fa2a 	bl	8100c28 <__aeabi_dcmpgt>
 810d7d4:	2800      	cmp	r0, #0
 810d7d6:	d093      	beq.n	810d700 <_strtod_l+0x9f0>
 810d7d8:	e4c4      	b.n	810d164 <_strtod_l+0x454>
 810d7da:	bf00      	nop
 810d7dc:	f3af 8000 	nop.w
 810d7e0:	00000000 	.word	0x00000000
 810d7e4:	bff00000 	.word	0xbff00000
 810d7e8:	00000000 	.word	0x00000000
 810d7ec:	3ff00000 	.word	0x3ff00000
 810d7f0:	94a03595 	.word	0x94a03595
 810d7f4:	3fdfffff 	.word	0x3fdfffff
 810d7f8:	35afe535 	.word	0x35afe535
 810d7fc:	3fe00000 	.word	0x3fe00000
 810d800:	000fffff 	.word	0x000fffff
 810d804:	7ff00000 	.word	0x7ff00000
 810d808:	7fefffff 	.word	0x7fefffff
 810d80c:	3ff00000 	.word	0x3ff00000
 810d810:	3fe00000 	.word	0x3fe00000
 810d814:	7fe00000 	.word	0x7fe00000
 810d818:	7c9fffff 	.word	0x7c9fffff
 810d81c:	9b08      	ldr	r3, [sp, #32]
 810d81e:	b323      	cbz	r3, 810d86a <_strtod_l+0xb5a>
 810d820:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810d824:	d821      	bhi.n	810d86a <_strtod_l+0xb5a>
 810d826:	a328      	add	r3, pc, #160	@ (adr r3, 810d8c8 <_strtod_l+0xbb8>)
 810d828:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d82c:	4630      	mov	r0, r6
 810d82e:	4639      	mov	r1, r7
 810d830:	f7f3 f9e6 	bl	8100c00 <__aeabi_dcmple>
 810d834:	b1a0      	cbz	r0, 810d860 <_strtod_l+0xb50>
 810d836:	4639      	mov	r1, r7
 810d838:	4630      	mov	r0, r6
 810d83a:	f7f3 fa3d 	bl	8100cb8 <__aeabi_d2uiz>
 810d83e:	2801      	cmp	r0, #1
 810d840:	bf38      	it	cc
 810d842:	2001      	movcc	r0, #1
 810d844:	f7f2 fee6 	bl	8100614 <__aeabi_ui2d>
 810d848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810d84a:	4606      	mov	r6, r0
 810d84c:	460f      	mov	r7, r1
 810d84e:	b9fb      	cbnz	r3, 810d890 <_strtod_l+0xb80>
 810d850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810d854:	9014      	str	r0, [sp, #80]	@ 0x50
 810d856:	9315      	str	r3, [sp, #84]	@ 0x54
 810d858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810d85c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810d860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810d862:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810d866:	1b5b      	subs	r3, r3, r5
 810d868:	9311      	str	r3, [sp, #68]	@ 0x44
 810d86a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810d86e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810d872:	f7ff f8e7 	bl	810ca44 <__ulp>
 810d876:	4650      	mov	r0, sl
 810d878:	ec53 2b10 	vmov	r2, r3, d0
 810d87c:	4659      	mov	r1, fp
 810d87e:	f7f2 ff43 	bl	8100708 <__aeabi_dmul>
 810d882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810d886:	f7f2 fd89 	bl	810039c <__adddf3>
 810d88a:	4682      	mov	sl, r0
 810d88c:	468b      	mov	fp, r1
 810d88e:	e770      	b.n	810d772 <_strtod_l+0xa62>
 810d890:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810d894:	e7e0      	b.n	810d858 <_strtod_l+0xb48>
 810d896:	a30e      	add	r3, pc, #56	@ (adr r3, 810d8d0 <_strtod_l+0xbc0>)
 810d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d89c:	f7f3 f9a6 	bl	8100bec <__aeabi_dcmplt>
 810d8a0:	e798      	b.n	810d7d4 <_strtod_l+0xac4>
 810d8a2:	2300      	movs	r3, #0
 810d8a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d8a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810d8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810d8aa:	6013      	str	r3, [r2, #0]
 810d8ac:	f7ff ba6d 	b.w	810cd8a <_strtod_l+0x7a>
 810d8b0:	2a65      	cmp	r2, #101	@ 0x65
 810d8b2:	f43f ab66 	beq.w	810cf82 <_strtod_l+0x272>
 810d8b6:	2a45      	cmp	r2, #69	@ 0x45
 810d8b8:	f43f ab63 	beq.w	810cf82 <_strtod_l+0x272>
 810d8bc:	2301      	movs	r3, #1
 810d8be:	f7ff bb9e 	b.w	810cffe <_strtod_l+0x2ee>
 810d8c2:	bf00      	nop
 810d8c4:	f3af 8000 	nop.w
 810d8c8:	ffc00000 	.word	0xffc00000
 810d8cc:	41dfffff 	.word	0x41dfffff
 810d8d0:	94a03595 	.word	0x94a03595
 810d8d4:	3fcfffff 	.word	0x3fcfffff

0810d8d8 <_strtod_r>:
 810d8d8:	4b01      	ldr	r3, [pc, #4]	@ (810d8e0 <_strtod_r+0x8>)
 810d8da:	f7ff ba19 	b.w	810cd10 <_strtod_l>
 810d8de:	bf00      	nop
 810d8e0:	10000bd0 	.word	0x10000bd0

0810d8e4 <_strtol_l.constprop.0>:
 810d8e4:	2b24      	cmp	r3, #36	@ 0x24
 810d8e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d8ea:	4686      	mov	lr, r0
 810d8ec:	4690      	mov	r8, r2
 810d8ee:	d801      	bhi.n	810d8f4 <_strtol_l.constprop.0+0x10>
 810d8f0:	2b01      	cmp	r3, #1
 810d8f2:	d106      	bne.n	810d902 <_strtol_l.constprop.0+0x1e>
 810d8f4:	f7fd fe5a 	bl	810b5ac <__errno>
 810d8f8:	2316      	movs	r3, #22
 810d8fa:	6003      	str	r3, [r0, #0]
 810d8fc:	2000      	movs	r0, #0
 810d8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d902:	4834      	ldr	r0, [pc, #208]	@ (810d9d4 <_strtol_l.constprop.0+0xf0>)
 810d904:	460d      	mov	r5, r1
 810d906:	462a      	mov	r2, r5
 810d908:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d90c:	5d06      	ldrb	r6, [r0, r4]
 810d90e:	f016 0608 	ands.w	r6, r6, #8
 810d912:	d1f8      	bne.n	810d906 <_strtol_l.constprop.0+0x22>
 810d914:	2c2d      	cmp	r4, #45	@ 0x2d
 810d916:	d12d      	bne.n	810d974 <_strtol_l.constprop.0+0x90>
 810d918:	782c      	ldrb	r4, [r5, #0]
 810d91a:	2601      	movs	r6, #1
 810d91c:	1c95      	adds	r5, r2, #2
 810d91e:	f033 0210 	bics.w	r2, r3, #16
 810d922:	d109      	bne.n	810d938 <_strtol_l.constprop.0+0x54>
 810d924:	2c30      	cmp	r4, #48	@ 0x30
 810d926:	d12a      	bne.n	810d97e <_strtol_l.constprop.0+0x9a>
 810d928:	782a      	ldrb	r2, [r5, #0]
 810d92a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810d92e:	2a58      	cmp	r2, #88	@ 0x58
 810d930:	d125      	bne.n	810d97e <_strtol_l.constprop.0+0x9a>
 810d932:	786c      	ldrb	r4, [r5, #1]
 810d934:	2310      	movs	r3, #16
 810d936:	3502      	adds	r5, #2
 810d938:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810d93c:	f10c 3cff 	add.w	ip, ip, #4294967295
 810d940:	2200      	movs	r2, #0
 810d942:	fbbc f9f3 	udiv	r9, ip, r3
 810d946:	4610      	mov	r0, r2
 810d948:	fb03 ca19 	mls	sl, r3, r9, ip
 810d94c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810d950:	2f09      	cmp	r7, #9
 810d952:	d81b      	bhi.n	810d98c <_strtol_l.constprop.0+0xa8>
 810d954:	463c      	mov	r4, r7
 810d956:	42a3      	cmp	r3, r4
 810d958:	dd27      	ble.n	810d9aa <_strtol_l.constprop.0+0xc6>
 810d95a:	1c57      	adds	r7, r2, #1
 810d95c:	d007      	beq.n	810d96e <_strtol_l.constprop.0+0x8a>
 810d95e:	4581      	cmp	r9, r0
 810d960:	d320      	bcc.n	810d9a4 <_strtol_l.constprop.0+0xc0>
 810d962:	d101      	bne.n	810d968 <_strtol_l.constprop.0+0x84>
 810d964:	45a2      	cmp	sl, r4
 810d966:	db1d      	blt.n	810d9a4 <_strtol_l.constprop.0+0xc0>
 810d968:	fb00 4003 	mla	r0, r0, r3, r4
 810d96c:	2201      	movs	r2, #1
 810d96e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d972:	e7eb      	b.n	810d94c <_strtol_l.constprop.0+0x68>
 810d974:	2c2b      	cmp	r4, #43	@ 0x2b
 810d976:	bf04      	itt	eq
 810d978:	782c      	ldrbeq	r4, [r5, #0]
 810d97a:	1c95      	addeq	r5, r2, #2
 810d97c:	e7cf      	b.n	810d91e <_strtol_l.constprop.0+0x3a>
 810d97e:	2b00      	cmp	r3, #0
 810d980:	d1da      	bne.n	810d938 <_strtol_l.constprop.0+0x54>
 810d982:	2c30      	cmp	r4, #48	@ 0x30
 810d984:	bf0c      	ite	eq
 810d986:	2308      	moveq	r3, #8
 810d988:	230a      	movne	r3, #10
 810d98a:	e7d5      	b.n	810d938 <_strtol_l.constprop.0+0x54>
 810d98c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810d990:	2f19      	cmp	r7, #25
 810d992:	d801      	bhi.n	810d998 <_strtol_l.constprop.0+0xb4>
 810d994:	3c37      	subs	r4, #55	@ 0x37
 810d996:	e7de      	b.n	810d956 <_strtol_l.constprop.0+0x72>
 810d998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810d99c:	2f19      	cmp	r7, #25
 810d99e:	d804      	bhi.n	810d9aa <_strtol_l.constprop.0+0xc6>
 810d9a0:	3c57      	subs	r4, #87	@ 0x57
 810d9a2:	e7d8      	b.n	810d956 <_strtol_l.constprop.0+0x72>
 810d9a4:	f04f 32ff 	mov.w	r2, #4294967295
 810d9a8:	e7e1      	b.n	810d96e <_strtol_l.constprop.0+0x8a>
 810d9aa:	1c53      	adds	r3, r2, #1
 810d9ac:	d108      	bne.n	810d9c0 <_strtol_l.constprop.0+0xdc>
 810d9ae:	2322      	movs	r3, #34	@ 0x22
 810d9b0:	f8ce 3000 	str.w	r3, [lr]
 810d9b4:	4660      	mov	r0, ip
 810d9b6:	f1b8 0f00 	cmp.w	r8, #0
 810d9ba:	d0a0      	beq.n	810d8fe <_strtol_l.constprop.0+0x1a>
 810d9bc:	1e69      	subs	r1, r5, #1
 810d9be:	e006      	b.n	810d9ce <_strtol_l.constprop.0+0xea>
 810d9c0:	b106      	cbz	r6, 810d9c4 <_strtol_l.constprop.0+0xe0>
 810d9c2:	4240      	negs	r0, r0
 810d9c4:	f1b8 0f00 	cmp.w	r8, #0
 810d9c8:	d099      	beq.n	810d8fe <_strtol_l.constprop.0+0x1a>
 810d9ca:	2a00      	cmp	r2, #0
 810d9cc:	d1f6      	bne.n	810d9bc <_strtol_l.constprop.0+0xd8>
 810d9ce:	f8c8 1000 	str.w	r1, [r8]
 810d9d2:	e794      	b.n	810d8fe <_strtol_l.constprop.0+0x1a>
 810d9d4:	081af349 	.word	0x081af349

0810d9d8 <_strtol_r>:
 810d9d8:	f7ff bf84 	b.w	810d8e4 <_strtol_l.constprop.0>

0810d9dc <__ssputs_r>:
 810d9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d9e0:	688e      	ldr	r6, [r1, #8]
 810d9e2:	461f      	mov	r7, r3
 810d9e4:	42be      	cmp	r6, r7
 810d9e6:	680b      	ldr	r3, [r1, #0]
 810d9e8:	4682      	mov	sl, r0
 810d9ea:	460c      	mov	r4, r1
 810d9ec:	4690      	mov	r8, r2
 810d9ee:	d82d      	bhi.n	810da4c <__ssputs_r+0x70>
 810d9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810d9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810d9f8:	d026      	beq.n	810da48 <__ssputs_r+0x6c>
 810d9fa:	6965      	ldr	r5, [r4, #20]
 810d9fc:	6909      	ldr	r1, [r1, #16]
 810d9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810da02:	eba3 0901 	sub.w	r9, r3, r1
 810da06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810da0a:	1c7b      	adds	r3, r7, #1
 810da0c:	444b      	add	r3, r9
 810da0e:	106d      	asrs	r5, r5, #1
 810da10:	429d      	cmp	r5, r3
 810da12:	bf38      	it	cc
 810da14:	461d      	movcc	r5, r3
 810da16:	0553      	lsls	r3, r2, #21
 810da18:	d527      	bpl.n	810da6a <__ssputs_r+0x8e>
 810da1a:	4629      	mov	r1, r5
 810da1c:	f7fc fc14 	bl	810a248 <_malloc_r>
 810da20:	4606      	mov	r6, r0
 810da22:	b360      	cbz	r0, 810da7e <__ssputs_r+0xa2>
 810da24:	6921      	ldr	r1, [r4, #16]
 810da26:	464a      	mov	r2, r9
 810da28:	f7fd fded 	bl	810b606 <memcpy>
 810da2c:	89a3      	ldrh	r3, [r4, #12]
 810da2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810da32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810da36:	81a3      	strh	r3, [r4, #12]
 810da38:	6126      	str	r6, [r4, #16]
 810da3a:	6165      	str	r5, [r4, #20]
 810da3c:	444e      	add	r6, r9
 810da3e:	eba5 0509 	sub.w	r5, r5, r9
 810da42:	6026      	str	r6, [r4, #0]
 810da44:	60a5      	str	r5, [r4, #8]
 810da46:	463e      	mov	r6, r7
 810da48:	42be      	cmp	r6, r7
 810da4a:	d900      	bls.n	810da4e <__ssputs_r+0x72>
 810da4c:	463e      	mov	r6, r7
 810da4e:	6820      	ldr	r0, [r4, #0]
 810da50:	4632      	mov	r2, r6
 810da52:	4641      	mov	r1, r8
 810da54:	f000 fb6a 	bl	810e12c <memmove>
 810da58:	68a3      	ldr	r3, [r4, #8]
 810da5a:	1b9b      	subs	r3, r3, r6
 810da5c:	60a3      	str	r3, [r4, #8]
 810da5e:	6823      	ldr	r3, [r4, #0]
 810da60:	4433      	add	r3, r6
 810da62:	6023      	str	r3, [r4, #0]
 810da64:	2000      	movs	r0, #0
 810da66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810da6a:	462a      	mov	r2, r5
 810da6c:	f7fc fc78 	bl	810a360 <_realloc_r>
 810da70:	4606      	mov	r6, r0
 810da72:	2800      	cmp	r0, #0
 810da74:	d1e0      	bne.n	810da38 <__ssputs_r+0x5c>
 810da76:	6921      	ldr	r1, [r4, #16]
 810da78:	4650      	mov	r0, sl
 810da7a:	f7fe fc25 	bl	810c2c8 <_free_r>
 810da7e:	230c      	movs	r3, #12
 810da80:	f8ca 3000 	str.w	r3, [sl]
 810da84:	89a3      	ldrh	r3, [r4, #12]
 810da86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810da8a:	81a3      	strh	r3, [r4, #12]
 810da8c:	f04f 30ff 	mov.w	r0, #4294967295
 810da90:	e7e9      	b.n	810da66 <__ssputs_r+0x8a>
	...

0810da94 <_svfiprintf_r>:
 810da94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810da98:	4698      	mov	r8, r3
 810da9a:	898b      	ldrh	r3, [r1, #12]
 810da9c:	061b      	lsls	r3, r3, #24
 810da9e:	b09d      	sub	sp, #116	@ 0x74
 810daa0:	4607      	mov	r7, r0
 810daa2:	460d      	mov	r5, r1
 810daa4:	4614      	mov	r4, r2
 810daa6:	d510      	bpl.n	810daca <_svfiprintf_r+0x36>
 810daa8:	690b      	ldr	r3, [r1, #16]
 810daaa:	b973      	cbnz	r3, 810daca <_svfiprintf_r+0x36>
 810daac:	2140      	movs	r1, #64	@ 0x40
 810daae:	f7fc fbcb 	bl	810a248 <_malloc_r>
 810dab2:	6028      	str	r0, [r5, #0]
 810dab4:	6128      	str	r0, [r5, #16]
 810dab6:	b930      	cbnz	r0, 810dac6 <_svfiprintf_r+0x32>
 810dab8:	230c      	movs	r3, #12
 810daba:	603b      	str	r3, [r7, #0]
 810dabc:	f04f 30ff 	mov.w	r0, #4294967295
 810dac0:	b01d      	add	sp, #116	@ 0x74
 810dac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dac6:	2340      	movs	r3, #64	@ 0x40
 810dac8:	616b      	str	r3, [r5, #20]
 810daca:	2300      	movs	r3, #0
 810dacc:	9309      	str	r3, [sp, #36]	@ 0x24
 810dace:	2320      	movs	r3, #32
 810dad0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810dad4:	f8cd 800c 	str.w	r8, [sp, #12]
 810dad8:	2330      	movs	r3, #48	@ 0x30
 810dada:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810dc78 <_svfiprintf_r+0x1e4>
 810dade:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810dae2:	f04f 0901 	mov.w	r9, #1
 810dae6:	4623      	mov	r3, r4
 810dae8:	469a      	mov	sl, r3
 810daea:	f813 2b01 	ldrb.w	r2, [r3], #1
 810daee:	b10a      	cbz	r2, 810daf4 <_svfiprintf_r+0x60>
 810daf0:	2a25      	cmp	r2, #37	@ 0x25
 810daf2:	d1f9      	bne.n	810dae8 <_svfiprintf_r+0x54>
 810daf4:	ebba 0b04 	subs.w	fp, sl, r4
 810daf8:	d00b      	beq.n	810db12 <_svfiprintf_r+0x7e>
 810dafa:	465b      	mov	r3, fp
 810dafc:	4622      	mov	r2, r4
 810dafe:	4629      	mov	r1, r5
 810db00:	4638      	mov	r0, r7
 810db02:	f7ff ff6b 	bl	810d9dc <__ssputs_r>
 810db06:	3001      	adds	r0, #1
 810db08:	f000 80a7 	beq.w	810dc5a <_svfiprintf_r+0x1c6>
 810db0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810db0e:	445a      	add	r2, fp
 810db10:	9209      	str	r2, [sp, #36]	@ 0x24
 810db12:	f89a 3000 	ldrb.w	r3, [sl]
 810db16:	2b00      	cmp	r3, #0
 810db18:	f000 809f 	beq.w	810dc5a <_svfiprintf_r+0x1c6>
 810db1c:	2300      	movs	r3, #0
 810db1e:	f04f 32ff 	mov.w	r2, #4294967295
 810db22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810db26:	f10a 0a01 	add.w	sl, sl, #1
 810db2a:	9304      	str	r3, [sp, #16]
 810db2c:	9307      	str	r3, [sp, #28]
 810db2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810db32:	931a      	str	r3, [sp, #104]	@ 0x68
 810db34:	4654      	mov	r4, sl
 810db36:	2205      	movs	r2, #5
 810db38:	f814 1b01 	ldrb.w	r1, [r4], #1
 810db3c:	484e      	ldr	r0, [pc, #312]	@ (810dc78 <_svfiprintf_r+0x1e4>)
 810db3e:	f7f2 fbcf 	bl	81002e0 <memchr>
 810db42:	9a04      	ldr	r2, [sp, #16]
 810db44:	b9d8      	cbnz	r0, 810db7e <_svfiprintf_r+0xea>
 810db46:	06d0      	lsls	r0, r2, #27
 810db48:	bf44      	itt	mi
 810db4a:	2320      	movmi	r3, #32
 810db4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810db50:	0711      	lsls	r1, r2, #28
 810db52:	bf44      	itt	mi
 810db54:	232b      	movmi	r3, #43	@ 0x2b
 810db56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810db5a:	f89a 3000 	ldrb.w	r3, [sl]
 810db5e:	2b2a      	cmp	r3, #42	@ 0x2a
 810db60:	d015      	beq.n	810db8e <_svfiprintf_r+0xfa>
 810db62:	9a07      	ldr	r2, [sp, #28]
 810db64:	4654      	mov	r4, sl
 810db66:	2000      	movs	r0, #0
 810db68:	f04f 0c0a 	mov.w	ip, #10
 810db6c:	4621      	mov	r1, r4
 810db6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810db72:	3b30      	subs	r3, #48	@ 0x30
 810db74:	2b09      	cmp	r3, #9
 810db76:	d94b      	bls.n	810dc10 <_svfiprintf_r+0x17c>
 810db78:	b1b0      	cbz	r0, 810dba8 <_svfiprintf_r+0x114>
 810db7a:	9207      	str	r2, [sp, #28]
 810db7c:	e014      	b.n	810dba8 <_svfiprintf_r+0x114>
 810db7e:	eba0 0308 	sub.w	r3, r0, r8
 810db82:	fa09 f303 	lsl.w	r3, r9, r3
 810db86:	4313      	orrs	r3, r2
 810db88:	9304      	str	r3, [sp, #16]
 810db8a:	46a2      	mov	sl, r4
 810db8c:	e7d2      	b.n	810db34 <_svfiprintf_r+0xa0>
 810db8e:	9b03      	ldr	r3, [sp, #12]
 810db90:	1d19      	adds	r1, r3, #4
 810db92:	681b      	ldr	r3, [r3, #0]
 810db94:	9103      	str	r1, [sp, #12]
 810db96:	2b00      	cmp	r3, #0
 810db98:	bfbb      	ittet	lt
 810db9a:	425b      	neglt	r3, r3
 810db9c:	f042 0202 	orrlt.w	r2, r2, #2
 810dba0:	9307      	strge	r3, [sp, #28]
 810dba2:	9307      	strlt	r3, [sp, #28]
 810dba4:	bfb8      	it	lt
 810dba6:	9204      	strlt	r2, [sp, #16]
 810dba8:	7823      	ldrb	r3, [r4, #0]
 810dbaa:	2b2e      	cmp	r3, #46	@ 0x2e
 810dbac:	d10a      	bne.n	810dbc4 <_svfiprintf_r+0x130>
 810dbae:	7863      	ldrb	r3, [r4, #1]
 810dbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 810dbb2:	d132      	bne.n	810dc1a <_svfiprintf_r+0x186>
 810dbb4:	9b03      	ldr	r3, [sp, #12]
 810dbb6:	1d1a      	adds	r2, r3, #4
 810dbb8:	681b      	ldr	r3, [r3, #0]
 810dbba:	9203      	str	r2, [sp, #12]
 810dbbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810dbc0:	3402      	adds	r4, #2
 810dbc2:	9305      	str	r3, [sp, #20]
 810dbc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810dc88 <_svfiprintf_r+0x1f4>
 810dbc8:	7821      	ldrb	r1, [r4, #0]
 810dbca:	2203      	movs	r2, #3
 810dbcc:	4650      	mov	r0, sl
 810dbce:	f7f2 fb87 	bl	81002e0 <memchr>
 810dbd2:	b138      	cbz	r0, 810dbe4 <_svfiprintf_r+0x150>
 810dbd4:	9b04      	ldr	r3, [sp, #16]
 810dbd6:	eba0 000a 	sub.w	r0, r0, sl
 810dbda:	2240      	movs	r2, #64	@ 0x40
 810dbdc:	4082      	lsls	r2, r0
 810dbde:	4313      	orrs	r3, r2
 810dbe0:	3401      	adds	r4, #1
 810dbe2:	9304      	str	r3, [sp, #16]
 810dbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dbe8:	4824      	ldr	r0, [pc, #144]	@ (810dc7c <_svfiprintf_r+0x1e8>)
 810dbea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810dbee:	2206      	movs	r2, #6
 810dbf0:	f7f2 fb76 	bl	81002e0 <memchr>
 810dbf4:	2800      	cmp	r0, #0
 810dbf6:	d036      	beq.n	810dc66 <_svfiprintf_r+0x1d2>
 810dbf8:	4b21      	ldr	r3, [pc, #132]	@ (810dc80 <_svfiprintf_r+0x1ec>)
 810dbfa:	bb1b      	cbnz	r3, 810dc44 <_svfiprintf_r+0x1b0>
 810dbfc:	9b03      	ldr	r3, [sp, #12]
 810dbfe:	3307      	adds	r3, #7
 810dc00:	f023 0307 	bic.w	r3, r3, #7
 810dc04:	3308      	adds	r3, #8
 810dc06:	9303      	str	r3, [sp, #12]
 810dc08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810dc0a:	4433      	add	r3, r6
 810dc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 810dc0e:	e76a      	b.n	810dae6 <_svfiprintf_r+0x52>
 810dc10:	fb0c 3202 	mla	r2, ip, r2, r3
 810dc14:	460c      	mov	r4, r1
 810dc16:	2001      	movs	r0, #1
 810dc18:	e7a8      	b.n	810db6c <_svfiprintf_r+0xd8>
 810dc1a:	2300      	movs	r3, #0
 810dc1c:	3401      	adds	r4, #1
 810dc1e:	9305      	str	r3, [sp, #20]
 810dc20:	4619      	mov	r1, r3
 810dc22:	f04f 0c0a 	mov.w	ip, #10
 810dc26:	4620      	mov	r0, r4
 810dc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 810dc2c:	3a30      	subs	r2, #48	@ 0x30
 810dc2e:	2a09      	cmp	r2, #9
 810dc30:	d903      	bls.n	810dc3a <_svfiprintf_r+0x1a6>
 810dc32:	2b00      	cmp	r3, #0
 810dc34:	d0c6      	beq.n	810dbc4 <_svfiprintf_r+0x130>
 810dc36:	9105      	str	r1, [sp, #20]
 810dc38:	e7c4      	b.n	810dbc4 <_svfiprintf_r+0x130>
 810dc3a:	fb0c 2101 	mla	r1, ip, r1, r2
 810dc3e:	4604      	mov	r4, r0
 810dc40:	2301      	movs	r3, #1
 810dc42:	e7f0      	b.n	810dc26 <_svfiprintf_r+0x192>
 810dc44:	ab03      	add	r3, sp, #12
 810dc46:	9300      	str	r3, [sp, #0]
 810dc48:	462a      	mov	r2, r5
 810dc4a:	4b0e      	ldr	r3, [pc, #56]	@ (810dc84 <_svfiprintf_r+0x1f0>)
 810dc4c:	a904      	add	r1, sp, #16
 810dc4e:	4638      	mov	r0, r7
 810dc50:	f7fc fc54 	bl	810a4fc <_printf_float>
 810dc54:	1c42      	adds	r2, r0, #1
 810dc56:	4606      	mov	r6, r0
 810dc58:	d1d6      	bne.n	810dc08 <_svfiprintf_r+0x174>
 810dc5a:	89ab      	ldrh	r3, [r5, #12]
 810dc5c:	065b      	lsls	r3, r3, #25
 810dc5e:	f53f af2d 	bmi.w	810dabc <_svfiprintf_r+0x28>
 810dc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810dc64:	e72c      	b.n	810dac0 <_svfiprintf_r+0x2c>
 810dc66:	ab03      	add	r3, sp, #12
 810dc68:	9300      	str	r3, [sp, #0]
 810dc6a:	462a      	mov	r2, r5
 810dc6c:	4b05      	ldr	r3, [pc, #20]	@ (810dc84 <_svfiprintf_r+0x1f0>)
 810dc6e:	a904      	add	r1, sp, #16
 810dc70:	4638      	mov	r0, r7
 810dc72:	f7fc fedb 	bl	810aa2c <_printf_i>
 810dc76:	e7ed      	b.n	810dc54 <_svfiprintf_r+0x1c0>
 810dc78:	081af449 	.word	0x081af449
 810dc7c:	081af453 	.word	0x081af453
 810dc80:	0810a4fd 	.word	0x0810a4fd
 810dc84:	0810d9dd 	.word	0x0810d9dd
 810dc88:	081af44f 	.word	0x081af44f

0810dc8c <__sfputc_r>:
 810dc8c:	6893      	ldr	r3, [r2, #8]
 810dc8e:	3b01      	subs	r3, #1
 810dc90:	2b00      	cmp	r3, #0
 810dc92:	b410      	push	{r4}
 810dc94:	6093      	str	r3, [r2, #8]
 810dc96:	da08      	bge.n	810dcaa <__sfputc_r+0x1e>
 810dc98:	6994      	ldr	r4, [r2, #24]
 810dc9a:	42a3      	cmp	r3, r4
 810dc9c:	db01      	blt.n	810dca2 <__sfputc_r+0x16>
 810dc9e:	290a      	cmp	r1, #10
 810dca0:	d103      	bne.n	810dcaa <__sfputc_r+0x1e>
 810dca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 810dca6:	f7fd bb8a 	b.w	810b3be <__swbuf_r>
 810dcaa:	6813      	ldr	r3, [r2, #0]
 810dcac:	1c58      	adds	r0, r3, #1
 810dcae:	6010      	str	r0, [r2, #0]
 810dcb0:	7019      	strb	r1, [r3, #0]
 810dcb2:	4608      	mov	r0, r1
 810dcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 810dcb8:	4770      	bx	lr

0810dcba <__sfputs_r>:
 810dcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dcbc:	4606      	mov	r6, r0
 810dcbe:	460f      	mov	r7, r1
 810dcc0:	4614      	mov	r4, r2
 810dcc2:	18d5      	adds	r5, r2, r3
 810dcc4:	42ac      	cmp	r4, r5
 810dcc6:	d101      	bne.n	810dccc <__sfputs_r+0x12>
 810dcc8:	2000      	movs	r0, #0
 810dcca:	e007      	b.n	810dcdc <__sfputs_r+0x22>
 810dccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810dcd0:	463a      	mov	r2, r7
 810dcd2:	4630      	mov	r0, r6
 810dcd4:	f7ff ffda 	bl	810dc8c <__sfputc_r>
 810dcd8:	1c43      	adds	r3, r0, #1
 810dcda:	d1f3      	bne.n	810dcc4 <__sfputs_r+0xa>
 810dcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810dce0 <_vfiprintf_r>:
 810dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dce4:	460d      	mov	r5, r1
 810dce6:	b09d      	sub	sp, #116	@ 0x74
 810dce8:	4614      	mov	r4, r2
 810dcea:	4698      	mov	r8, r3
 810dcec:	4606      	mov	r6, r0
 810dcee:	b118      	cbz	r0, 810dcf8 <_vfiprintf_r+0x18>
 810dcf0:	6a03      	ldr	r3, [r0, #32]
 810dcf2:	b90b      	cbnz	r3, 810dcf8 <_vfiprintf_r+0x18>
 810dcf4:	f7fd fa5a 	bl	810b1ac <__sinit>
 810dcf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810dcfa:	07d9      	lsls	r1, r3, #31
 810dcfc:	d405      	bmi.n	810dd0a <_vfiprintf_r+0x2a>
 810dcfe:	89ab      	ldrh	r3, [r5, #12]
 810dd00:	059a      	lsls	r2, r3, #22
 810dd02:	d402      	bmi.n	810dd0a <_vfiprintf_r+0x2a>
 810dd04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810dd06:	f7fd fc7c 	bl	810b602 <__retarget_lock_acquire_recursive>
 810dd0a:	89ab      	ldrh	r3, [r5, #12]
 810dd0c:	071b      	lsls	r3, r3, #28
 810dd0e:	d501      	bpl.n	810dd14 <_vfiprintf_r+0x34>
 810dd10:	692b      	ldr	r3, [r5, #16]
 810dd12:	b99b      	cbnz	r3, 810dd3c <_vfiprintf_r+0x5c>
 810dd14:	4629      	mov	r1, r5
 810dd16:	4630      	mov	r0, r6
 810dd18:	f7fd fb90 	bl	810b43c <__swsetup_r>
 810dd1c:	b170      	cbz	r0, 810dd3c <_vfiprintf_r+0x5c>
 810dd1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810dd20:	07dc      	lsls	r4, r3, #31
 810dd22:	d504      	bpl.n	810dd2e <_vfiprintf_r+0x4e>
 810dd24:	f04f 30ff 	mov.w	r0, #4294967295
 810dd28:	b01d      	add	sp, #116	@ 0x74
 810dd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dd2e:	89ab      	ldrh	r3, [r5, #12]
 810dd30:	0598      	lsls	r0, r3, #22
 810dd32:	d4f7      	bmi.n	810dd24 <_vfiprintf_r+0x44>
 810dd34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810dd36:	f7fd fc65 	bl	810b604 <__retarget_lock_release_recursive>
 810dd3a:	e7f3      	b.n	810dd24 <_vfiprintf_r+0x44>
 810dd3c:	2300      	movs	r3, #0
 810dd3e:	9309      	str	r3, [sp, #36]	@ 0x24
 810dd40:	2320      	movs	r3, #32
 810dd42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810dd46:	f8cd 800c 	str.w	r8, [sp, #12]
 810dd4a:	2330      	movs	r3, #48	@ 0x30
 810dd4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810defc <_vfiprintf_r+0x21c>
 810dd50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810dd54:	f04f 0901 	mov.w	r9, #1
 810dd58:	4623      	mov	r3, r4
 810dd5a:	469a      	mov	sl, r3
 810dd5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dd60:	b10a      	cbz	r2, 810dd66 <_vfiprintf_r+0x86>
 810dd62:	2a25      	cmp	r2, #37	@ 0x25
 810dd64:	d1f9      	bne.n	810dd5a <_vfiprintf_r+0x7a>
 810dd66:	ebba 0b04 	subs.w	fp, sl, r4
 810dd6a:	d00b      	beq.n	810dd84 <_vfiprintf_r+0xa4>
 810dd6c:	465b      	mov	r3, fp
 810dd6e:	4622      	mov	r2, r4
 810dd70:	4629      	mov	r1, r5
 810dd72:	4630      	mov	r0, r6
 810dd74:	f7ff ffa1 	bl	810dcba <__sfputs_r>
 810dd78:	3001      	adds	r0, #1
 810dd7a:	f000 80a7 	beq.w	810decc <_vfiprintf_r+0x1ec>
 810dd7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810dd80:	445a      	add	r2, fp
 810dd82:	9209      	str	r2, [sp, #36]	@ 0x24
 810dd84:	f89a 3000 	ldrb.w	r3, [sl]
 810dd88:	2b00      	cmp	r3, #0
 810dd8a:	f000 809f 	beq.w	810decc <_vfiprintf_r+0x1ec>
 810dd8e:	2300      	movs	r3, #0
 810dd90:	f04f 32ff 	mov.w	r2, #4294967295
 810dd94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810dd98:	f10a 0a01 	add.w	sl, sl, #1
 810dd9c:	9304      	str	r3, [sp, #16]
 810dd9e:	9307      	str	r3, [sp, #28]
 810dda0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810dda4:	931a      	str	r3, [sp, #104]	@ 0x68
 810dda6:	4654      	mov	r4, sl
 810dda8:	2205      	movs	r2, #5
 810ddaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ddae:	4853      	ldr	r0, [pc, #332]	@ (810defc <_vfiprintf_r+0x21c>)
 810ddb0:	f7f2 fa96 	bl	81002e0 <memchr>
 810ddb4:	9a04      	ldr	r2, [sp, #16]
 810ddb6:	b9d8      	cbnz	r0, 810ddf0 <_vfiprintf_r+0x110>
 810ddb8:	06d1      	lsls	r1, r2, #27
 810ddba:	bf44      	itt	mi
 810ddbc:	2320      	movmi	r3, #32
 810ddbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810ddc2:	0713      	lsls	r3, r2, #28
 810ddc4:	bf44      	itt	mi
 810ddc6:	232b      	movmi	r3, #43	@ 0x2b
 810ddc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810ddcc:	f89a 3000 	ldrb.w	r3, [sl]
 810ddd0:	2b2a      	cmp	r3, #42	@ 0x2a
 810ddd2:	d015      	beq.n	810de00 <_vfiprintf_r+0x120>
 810ddd4:	9a07      	ldr	r2, [sp, #28]
 810ddd6:	4654      	mov	r4, sl
 810ddd8:	2000      	movs	r0, #0
 810ddda:	f04f 0c0a 	mov.w	ip, #10
 810ddde:	4621      	mov	r1, r4
 810dde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 810dde4:	3b30      	subs	r3, #48	@ 0x30
 810dde6:	2b09      	cmp	r3, #9
 810dde8:	d94b      	bls.n	810de82 <_vfiprintf_r+0x1a2>
 810ddea:	b1b0      	cbz	r0, 810de1a <_vfiprintf_r+0x13a>
 810ddec:	9207      	str	r2, [sp, #28]
 810ddee:	e014      	b.n	810de1a <_vfiprintf_r+0x13a>
 810ddf0:	eba0 0308 	sub.w	r3, r0, r8
 810ddf4:	fa09 f303 	lsl.w	r3, r9, r3
 810ddf8:	4313      	orrs	r3, r2
 810ddfa:	9304      	str	r3, [sp, #16]
 810ddfc:	46a2      	mov	sl, r4
 810ddfe:	e7d2      	b.n	810dda6 <_vfiprintf_r+0xc6>
 810de00:	9b03      	ldr	r3, [sp, #12]
 810de02:	1d19      	adds	r1, r3, #4
 810de04:	681b      	ldr	r3, [r3, #0]
 810de06:	9103      	str	r1, [sp, #12]
 810de08:	2b00      	cmp	r3, #0
 810de0a:	bfbb      	ittet	lt
 810de0c:	425b      	neglt	r3, r3
 810de0e:	f042 0202 	orrlt.w	r2, r2, #2
 810de12:	9307      	strge	r3, [sp, #28]
 810de14:	9307      	strlt	r3, [sp, #28]
 810de16:	bfb8      	it	lt
 810de18:	9204      	strlt	r2, [sp, #16]
 810de1a:	7823      	ldrb	r3, [r4, #0]
 810de1c:	2b2e      	cmp	r3, #46	@ 0x2e
 810de1e:	d10a      	bne.n	810de36 <_vfiprintf_r+0x156>
 810de20:	7863      	ldrb	r3, [r4, #1]
 810de22:	2b2a      	cmp	r3, #42	@ 0x2a
 810de24:	d132      	bne.n	810de8c <_vfiprintf_r+0x1ac>
 810de26:	9b03      	ldr	r3, [sp, #12]
 810de28:	1d1a      	adds	r2, r3, #4
 810de2a:	681b      	ldr	r3, [r3, #0]
 810de2c:	9203      	str	r2, [sp, #12]
 810de2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810de32:	3402      	adds	r4, #2
 810de34:	9305      	str	r3, [sp, #20]
 810de36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810df0c <_vfiprintf_r+0x22c>
 810de3a:	7821      	ldrb	r1, [r4, #0]
 810de3c:	2203      	movs	r2, #3
 810de3e:	4650      	mov	r0, sl
 810de40:	f7f2 fa4e 	bl	81002e0 <memchr>
 810de44:	b138      	cbz	r0, 810de56 <_vfiprintf_r+0x176>
 810de46:	9b04      	ldr	r3, [sp, #16]
 810de48:	eba0 000a 	sub.w	r0, r0, sl
 810de4c:	2240      	movs	r2, #64	@ 0x40
 810de4e:	4082      	lsls	r2, r0
 810de50:	4313      	orrs	r3, r2
 810de52:	3401      	adds	r4, #1
 810de54:	9304      	str	r3, [sp, #16]
 810de56:	f814 1b01 	ldrb.w	r1, [r4], #1
 810de5a:	4829      	ldr	r0, [pc, #164]	@ (810df00 <_vfiprintf_r+0x220>)
 810de5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810de60:	2206      	movs	r2, #6
 810de62:	f7f2 fa3d 	bl	81002e0 <memchr>
 810de66:	2800      	cmp	r0, #0
 810de68:	d03f      	beq.n	810deea <_vfiprintf_r+0x20a>
 810de6a:	4b26      	ldr	r3, [pc, #152]	@ (810df04 <_vfiprintf_r+0x224>)
 810de6c:	bb1b      	cbnz	r3, 810deb6 <_vfiprintf_r+0x1d6>
 810de6e:	9b03      	ldr	r3, [sp, #12]
 810de70:	3307      	adds	r3, #7
 810de72:	f023 0307 	bic.w	r3, r3, #7
 810de76:	3308      	adds	r3, #8
 810de78:	9303      	str	r3, [sp, #12]
 810de7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810de7c:	443b      	add	r3, r7
 810de7e:	9309      	str	r3, [sp, #36]	@ 0x24
 810de80:	e76a      	b.n	810dd58 <_vfiprintf_r+0x78>
 810de82:	fb0c 3202 	mla	r2, ip, r2, r3
 810de86:	460c      	mov	r4, r1
 810de88:	2001      	movs	r0, #1
 810de8a:	e7a8      	b.n	810ddde <_vfiprintf_r+0xfe>
 810de8c:	2300      	movs	r3, #0
 810de8e:	3401      	adds	r4, #1
 810de90:	9305      	str	r3, [sp, #20]
 810de92:	4619      	mov	r1, r3
 810de94:	f04f 0c0a 	mov.w	ip, #10
 810de98:	4620      	mov	r0, r4
 810de9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810de9e:	3a30      	subs	r2, #48	@ 0x30
 810dea0:	2a09      	cmp	r2, #9
 810dea2:	d903      	bls.n	810deac <_vfiprintf_r+0x1cc>
 810dea4:	2b00      	cmp	r3, #0
 810dea6:	d0c6      	beq.n	810de36 <_vfiprintf_r+0x156>
 810dea8:	9105      	str	r1, [sp, #20]
 810deaa:	e7c4      	b.n	810de36 <_vfiprintf_r+0x156>
 810deac:	fb0c 2101 	mla	r1, ip, r1, r2
 810deb0:	4604      	mov	r4, r0
 810deb2:	2301      	movs	r3, #1
 810deb4:	e7f0      	b.n	810de98 <_vfiprintf_r+0x1b8>
 810deb6:	ab03      	add	r3, sp, #12
 810deb8:	9300      	str	r3, [sp, #0]
 810deba:	462a      	mov	r2, r5
 810debc:	4b12      	ldr	r3, [pc, #72]	@ (810df08 <_vfiprintf_r+0x228>)
 810debe:	a904      	add	r1, sp, #16
 810dec0:	4630      	mov	r0, r6
 810dec2:	f7fc fb1b 	bl	810a4fc <_printf_float>
 810dec6:	4607      	mov	r7, r0
 810dec8:	1c78      	adds	r0, r7, #1
 810deca:	d1d6      	bne.n	810de7a <_vfiprintf_r+0x19a>
 810decc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810dece:	07d9      	lsls	r1, r3, #31
 810ded0:	d405      	bmi.n	810dede <_vfiprintf_r+0x1fe>
 810ded2:	89ab      	ldrh	r3, [r5, #12]
 810ded4:	059a      	lsls	r2, r3, #22
 810ded6:	d402      	bmi.n	810dede <_vfiprintf_r+0x1fe>
 810ded8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810deda:	f7fd fb93 	bl	810b604 <__retarget_lock_release_recursive>
 810dede:	89ab      	ldrh	r3, [r5, #12]
 810dee0:	065b      	lsls	r3, r3, #25
 810dee2:	f53f af1f 	bmi.w	810dd24 <_vfiprintf_r+0x44>
 810dee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810dee8:	e71e      	b.n	810dd28 <_vfiprintf_r+0x48>
 810deea:	ab03      	add	r3, sp, #12
 810deec:	9300      	str	r3, [sp, #0]
 810deee:	462a      	mov	r2, r5
 810def0:	4b05      	ldr	r3, [pc, #20]	@ (810df08 <_vfiprintf_r+0x228>)
 810def2:	a904      	add	r1, sp, #16
 810def4:	4630      	mov	r0, r6
 810def6:	f7fc fd99 	bl	810aa2c <_printf_i>
 810defa:	e7e4      	b.n	810dec6 <_vfiprintf_r+0x1e6>
 810defc:	081af449 	.word	0x081af449
 810df00:	081af453 	.word	0x081af453
 810df04:	0810a4fd 	.word	0x0810a4fd
 810df08:	0810dcbb 	.word	0x0810dcbb
 810df0c:	081af44f 	.word	0x081af44f

0810df10 <__sflush_r>:
 810df10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810df14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810df18:	0716      	lsls	r6, r2, #28
 810df1a:	4605      	mov	r5, r0
 810df1c:	460c      	mov	r4, r1
 810df1e:	d454      	bmi.n	810dfca <__sflush_r+0xba>
 810df20:	684b      	ldr	r3, [r1, #4]
 810df22:	2b00      	cmp	r3, #0
 810df24:	dc02      	bgt.n	810df2c <__sflush_r+0x1c>
 810df26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810df28:	2b00      	cmp	r3, #0
 810df2a:	dd48      	ble.n	810dfbe <__sflush_r+0xae>
 810df2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810df2e:	2e00      	cmp	r6, #0
 810df30:	d045      	beq.n	810dfbe <__sflush_r+0xae>
 810df32:	2300      	movs	r3, #0
 810df34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810df38:	682f      	ldr	r7, [r5, #0]
 810df3a:	6a21      	ldr	r1, [r4, #32]
 810df3c:	602b      	str	r3, [r5, #0]
 810df3e:	d030      	beq.n	810dfa2 <__sflush_r+0x92>
 810df40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810df42:	89a3      	ldrh	r3, [r4, #12]
 810df44:	0759      	lsls	r1, r3, #29
 810df46:	d505      	bpl.n	810df54 <__sflush_r+0x44>
 810df48:	6863      	ldr	r3, [r4, #4]
 810df4a:	1ad2      	subs	r2, r2, r3
 810df4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810df4e:	b10b      	cbz	r3, 810df54 <__sflush_r+0x44>
 810df50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810df52:	1ad2      	subs	r2, r2, r3
 810df54:	2300      	movs	r3, #0
 810df56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810df58:	6a21      	ldr	r1, [r4, #32]
 810df5a:	4628      	mov	r0, r5
 810df5c:	47b0      	blx	r6
 810df5e:	1c43      	adds	r3, r0, #1
 810df60:	89a3      	ldrh	r3, [r4, #12]
 810df62:	d106      	bne.n	810df72 <__sflush_r+0x62>
 810df64:	6829      	ldr	r1, [r5, #0]
 810df66:	291d      	cmp	r1, #29
 810df68:	d82b      	bhi.n	810dfc2 <__sflush_r+0xb2>
 810df6a:	4a2a      	ldr	r2, [pc, #168]	@ (810e014 <__sflush_r+0x104>)
 810df6c:	410a      	asrs	r2, r1
 810df6e:	07d6      	lsls	r6, r2, #31
 810df70:	d427      	bmi.n	810dfc2 <__sflush_r+0xb2>
 810df72:	2200      	movs	r2, #0
 810df74:	6062      	str	r2, [r4, #4]
 810df76:	04d9      	lsls	r1, r3, #19
 810df78:	6922      	ldr	r2, [r4, #16]
 810df7a:	6022      	str	r2, [r4, #0]
 810df7c:	d504      	bpl.n	810df88 <__sflush_r+0x78>
 810df7e:	1c42      	adds	r2, r0, #1
 810df80:	d101      	bne.n	810df86 <__sflush_r+0x76>
 810df82:	682b      	ldr	r3, [r5, #0]
 810df84:	b903      	cbnz	r3, 810df88 <__sflush_r+0x78>
 810df86:	6560      	str	r0, [r4, #84]	@ 0x54
 810df88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810df8a:	602f      	str	r7, [r5, #0]
 810df8c:	b1b9      	cbz	r1, 810dfbe <__sflush_r+0xae>
 810df8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810df92:	4299      	cmp	r1, r3
 810df94:	d002      	beq.n	810df9c <__sflush_r+0x8c>
 810df96:	4628      	mov	r0, r5
 810df98:	f7fe f996 	bl	810c2c8 <_free_r>
 810df9c:	2300      	movs	r3, #0
 810df9e:	6363      	str	r3, [r4, #52]	@ 0x34
 810dfa0:	e00d      	b.n	810dfbe <__sflush_r+0xae>
 810dfa2:	2301      	movs	r3, #1
 810dfa4:	4628      	mov	r0, r5
 810dfa6:	47b0      	blx	r6
 810dfa8:	4602      	mov	r2, r0
 810dfaa:	1c50      	adds	r0, r2, #1
 810dfac:	d1c9      	bne.n	810df42 <__sflush_r+0x32>
 810dfae:	682b      	ldr	r3, [r5, #0]
 810dfb0:	2b00      	cmp	r3, #0
 810dfb2:	d0c6      	beq.n	810df42 <__sflush_r+0x32>
 810dfb4:	2b1d      	cmp	r3, #29
 810dfb6:	d001      	beq.n	810dfbc <__sflush_r+0xac>
 810dfb8:	2b16      	cmp	r3, #22
 810dfba:	d11e      	bne.n	810dffa <__sflush_r+0xea>
 810dfbc:	602f      	str	r7, [r5, #0]
 810dfbe:	2000      	movs	r0, #0
 810dfc0:	e022      	b.n	810e008 <__sflush_r+0xf8>
 810dfc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810dfc6:	b21b      	sxth	r3, r3
 810dfc8:	e01b      	b.n	810e002 <__sflush_r+0xf2>
 810dfca:	690f      	ldr	r7, [r1, #16]
 810dfcc:	2f00      	cmp	r7, #0
 810dfce:	d0f6      	beq.n	810dfbe <__sflush_r+0xae>
 810dfd0:	0793      	lsls	r3, r2, #30
 810dfd2:	680e      	ldr	r6, [r1, #0]
 810dfd4:	bf08      	it	eq
 810dfd6:	694b      	ldreq	r3, [r1, #20]
 810dfd8:	600f      	str	r7, [r1, #0]
 810dfda:	bf18      	it	ne
 810dfdc:	2300      	movne	r3, #0
 810dfde:	eba6 0807 	sub.w	r8, r6, r7
 810dfe2:	608b      	str	r3, [r1, #8]
 810dfe4:	f1b8 0f00 	cmp.w	r8, #0
 810dfe8:	dde9      	ble.n	810dfbe <__sflush_r+0xae>
 810dfea:	6a21      	ldr	r1, [r4, #32]
 810dfec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810dfee:	4643      	mov	r3, r8
 810dff0:	463a      	mov	r2, r7
 810dff2:	4628      	mov	r0, r5
 810dff4:	47b0      	blx	r6
 810dff6:	2800      	cmp	r0, #0
 810dff8:	dc08      	bgt.n	810e00c <__sflush_r+0xfc>
 810dffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810dffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810e002:	81a3      	strh	r3, [r4, #12]
 810e004:	f04f 30ff 	mov.w	r0, #4294967295
 810e008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e00c:	4407      	add	r7, r0
 810e00e:	eba8 0800 	sub.w	r8, r8, r0
 810e012:	e7e7      	b.n	810dfe4 <__sflush_r+0xd4>
 810e014:	dfbffffe 	.word	0xdfbffffe

0810e018 <_fflush_r>:
 810e018:	b538      	push	{r3, r4, r5, lr}
 810e01a:	690b      	ldr	r3, [r1, #16]
 810e01c:	4605      	mov	r5, r0
 810e01e:	460c      	mov	r4, r1
 810e020:	b913      	cbnz	r3, 810e028 <_fflush_r+0x10>
 810e022:	2500      	movs	r5, #0
 810e024:	4628      	mov	r0, r5
 810e026:	bd38      	pop	{r3, r4, r5, pc}
 810e028:	b118      	cbz	r0, 810e032 <_fflush_r+0x1a>
 810e02a:	6a03      	ldr	r3, [r0, #32]
 810e02c:	b90b      	cbnz	r3, 810e032 <_fflush_r+0x1a>
 810e02e:	f7fd f8bd 	bl	810b1ac <__sinit>
 810e032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e036:	2b00      	cmp	r3, #0
 810e038:	d0f3      	beq.n	810e022 <_fflush_r+0xa>
 810e03a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810e03c:	07d0      	lsls	r0, r2, #31
 810e03e:	d404      	bmi.n	810e04a <_fflush_r+0x32>
 810e040:	0599      	lsls	r1, r3, #22
 810e042:	d402      	bmi.n	810e04a <_fflush_r+0x32>
 810e044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e046:	f7fd fadc 	bl	810b602 <__retarget_lock_acquire_recursive>
 810e04a:	4628      	mov	r0, r5
 810e04c:	4621      	mov	r1, r4
 810e04e:	f7ff ff5f 	bl	810df10 <__sflush_r>
 810e052:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810e054:	07da      	lsls	r2, r3, #31
 810e056:	4605      	mov	r5, r0
 810e058:	d4e4      	bmi.n	810e024 <_fflush_r+0xc>
 810e05a:	89a3      	ldrh	r3, [r4, #12]
 810e05c:	059b      	lsls	r3, r3, #22
 810e05e:	d4e1      	bmi.n	810e024 <_fflush_r+0xc>
 810e060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810e062:	f7fd facf 	bl	810b604 <__retarget_lock_release_recursive>
 810e066:	e7dd      	b.n	810e024 <_fflush_r+0xc>

0810e068 <__swhatbuf_r>:
 810e068:	b570      	push	{r4, r5, r6, lr}
 810e06a:	460c      	mov	r4, r1
 810e06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e070:	2900      	cmp	r1, #0
 810e072:	b096      	sub	sp, #88	@ 0x58
 810e074:	4615      	mov	r5, r2
 810e076:	461e      	mov	r6, r3
 810e078:	da0d      	bge.n	810e096 <__swhatbuf_r+0x2e>
 810e07a:	89a3      	ldrh	r3, [r4, #12]
 810e07c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810e080:	f04f 0100 	mov.w	r1, #0
 810e084:	bf14      	ite	ne
 810e086:	2340      	movne	r3, #64	@ 0x40
 810e088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810e08c:	2000      	movs	r0, #0
 810e08e:	6031      	str	r1, [r6, #0]
 810e090:	602b      	str	r3, [r5, #0]
 810e092:	b016      	add	sp, #88	@ 0x58
 810e094:	bd70      	pop	{r4, r5, r6, pc}
 810e096:	466a      	mov	r2, sp
 810e098:	f000 f874 	bl	810e184 <_fstat_r>
 810e09c:	2800      	cmp	r0, #0
 810e09e:	dbec      	blt.n	810e07a <__swhatbuf_r+0x12>
 810e0a0:	9901      	ldr	r1, [sp, #4]
 810e0a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810e0a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810e0aa:	4259      	negs	r1, r3
 810e0ac:	4159      	adcs	r1, r3
 810e0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810e0b2:	e7eb      	b.n	810e08c <__swhatbuf_r+0x24>

0810e0b4 <__smakebuf_r>:
 810e0b4:	898b      	ldrh	r3, [r1, #12]
 810e0b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810e0b8:	079d      	lsls	r5, r3, #30
 810e0ba:	4606      	mov	r6, r0
 810e0bc:	460c      	mov	r4, r1
 810e0be:	d507      	bpl.n	810e0d0 <__smakebuf_r+0x1c>
 810e0c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810e0c4:	6023      	str	r3, [r4, #0]
 810e0c6:	6123      	str	r3, [r4, #16]
 810e0c8:	2301      	movs	r3, #1
 810e0ca:	6163      	str	r3, [r4, #20]
 810e0cc:	b003      	add	sp, #12
 810e0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e0d0:	ab01      	add	r3, sp, #4
 810e0d2:	466a      	mov	r2, sp
 810e0d4:	f7ff ffc8 	bl	810e068 <__swhatbuf_r>
 810e0d8:	9f00      	ldr	r7, [sp, #0]
 810e0da:	4605      	mov	r5, r0
 810e0dc:	4639      	mov	r1, r7
 810e0de:	4630      	mov	r0, r6
 810e0e0:	f7fc f8b2 	bl	810a248 <_malloc_r>
 810e0e4:	b948      	cbnz	r0, 810e0fa <__smakebuf_r+0x46>
 810e0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e0ea:	059a      	lsls	r2, r3, #22
 810e0ec:	d4ee      	bmi.n	810e0cc <__smakebuf_r+0x18>
 810e0ee:	f023 0303 	bic.w	r3, r3, #3
 810e0f2:	f043 0302 	orr.w	r3, r3, #2
 810e0f6:	81a3      	strh	r3, [r4, #12]
 810e0f8:	e7e2      	b.n	810e0c0 <__smakebuf_r+0xc>
 810e0fa:	89a3      	ldrh	r3, [r4, #12]
 810e0fc:	6020      	str	r0, [r4, #0]
 810e0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810e102:	81a3      	strh	r3, [r4, #12]
 810e104:	9b01      	ldr	r3, [sp, #4]
 810e106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810e10a:	b15b      	cbz	r3, 810e124 <__smakebuf_r+0x70>
 810e10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e110:	4630      	mov	r0, r6
 810e112:	f000 f849 	bl	810e1a8 <_isatty_r>
 810e116:	b128      	cbz	r0, 810e124 <__smakebuf_r+0x70>
 810e118:	89a3      	ldrh	r3, [r4, #12]
 810e11a:	f023 0303 	bic.w	r3, r3, #3
 810e11e:	f043 0301 	orr.w	r3, r3, #1
 810e122:	81a3      	strh	r3, [r4, #12]
 810e124:	89a3      	ldrh	r3, [r4, #12]
 810e126:	431d      	orrs	r5, r3
 810e128:	81a5      	strh	r5, [r4, #12]
 810e12a:	e7cf      	b.n	810e0cc <__smakebuf_r+0x18>

0810e12c <memmove>:
 810e12c:	4288      	cmp	r0, r1
 810e12e:	b510      	push	{r4, lr}
 810e130:	eb01 0402 	add.w	r4, r1, r2
 810e134:	d902      	bls.n	810e13c <memmove+0x10>
 810e136:	4284      	cmp	r4, r0
 810e138:	4623      	mov	r3, r4
 810e13a:	d807      	bhi.n	810e14c <memmove+0x20>
 810e13c:	1e43      	subs	r3, r0, #1
 810e13e:	42a1      	cmp	r1, r4
 810e140:	d008      	beq.n	810e154 <memmove+0x28>
 810e142:	f811 2b01 	ldrb.w	r2, [r1], #1
 810e146:	f803 2f01 	strb.w	r2, [r3, #1]!
 810e14a:	e7f8      	b.n	810e13e <memmove+0x12>
 810e14c:	4402      	add	r2, r0
 810e14e:	4601      	mov	r1, r0
 810e150:	428a      	cmp	r2, r1
 810e152:	d100      	bne.n	810e156 <memmove+0x2a>
 810e154:	bd10      	pop	{r4, pc}
 810e156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810e15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810e15e:	e7f7      	b.n	810e150 <memmove+0x24>

0810e160 <strncmp>:
 810e160:	b510      	push	{r4, lr}
 810e162:	b16a      	cbz	r2, 810e180 <strncmp+0x20>
 810e164:	3901      	subs	r1, #1
 810e166:	1884      	adds	r4, r0, r2
 810e168:	f810 2b01 	ldrb.w	r2, [r0], #1
 810e16c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810e170:	429a      	cmp	r2, r3
 810e172:	d103      	bne.n	810e17c <strncmp+0x1c>
 810e174:	42a0      	cmp	r0, r4
 810e176:	d001      	beq.n	810e17c <strncmp+0x1c>
 810e178:	2a00      	cmp	r2, #0
 810e17a:	d1f5      	bne.n	810e168 <strncmp+0x8>
 810e17c:	1ad0      	subs	r0, r2, r3
 810e17e:	bd10      	pop	{r4, pc}
 810e180:	4610      	mov	r0, r2
 810e182:	e7fc      	b.n	810e17e <strncmp+0x1e>

0810e184 <_fstat_r>:
 810e184:	b538      	push	{r3, r4, r5, lr}
 810e186:	4d07      	ldr	r5, [pc, #28]	@ (810e1a4 <_fstat_r+0x20>)
 810e188:	2300      	movs	r3, #0
 810e18a:	4604      	mov	r4, r0
 810e18c:	4608      	mov	r0, r1
 810e18e:	4611      	mov	r1, r2
 810e190:	602b      	str	r3, [r5, #0]
 810e192:	f7f3 ffa8 	bl	81020e6 <_fstat>
 810e196:	1c43      	adds	r3, r0, #1
 810e198:	d102      	bne.n	810e1a0 <_fstat_r+0x1c>
 810e19a:	682b      	ldr	r3, [r5, #0]
 810e19c:	b103      	cbz	r3, 810e1a0 <_fstat_r+0x1c>
 810e19e:	6023      	str	r3, [r4, #0]
 810e1a0:	bd38      	pop	{r3, r4, r5, pc}
 810e1a2:	bf00      	nop
 810e1a4:	1001ad14 	.word	0x1001ad14

0810e1a8 <_isatty_r>:
 810e1a8:	b538      	push	{r3, r4, r5, lr}
 810e1aa:	4d06      	ldr	r5, [pc, #24]	@ (810e1c4 <_isatty_r+0x1c>)
 810e1ac:	2300      	movs	r3, #0
 810e1ae:	4604      	mov	r4, r0
 810e1b0:	4608      	mov	r0, r1
 810e1b2:	602b      	str	r3, [r5, #0]
 810e1b4:	f7f3 ff9c 	bl	81020f0 <_isatty>
 810e1b8:	1c43      	adds	r3, r0, #1
 810e1ba:	d102      	bne.n	810e1c2 <_isatty_r+0x1a>
 810e1bc:	682b      	ldr	r3, [r5, #0]
 810e1be:	b103      	cbz	r3, 810e1c2 <_isatty_r+0x1a>
 810e1c0:	6023      	str	r3, [r4, #0]
 810e1c2:	bd38      	pop	{r3, r4, r5, pc}
 810e1c4:	1001ad14 	.word	0x1001ad14

0810e1c8 <nan>:
 810e1c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 810e1d0 <nan+0x8>
 810e1cc:	4770      	bx	lr
 810e1ce:	bf00      	nop
 810e1d0:	00000000 	.word	0x00000000
 810e1d4:	7ff80000 	.word	0x7ff80000

0810e1d8 <__assert_func>:
 810e1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810e1da:	4614      	mov	r4, r2
 810e1dc:	461a      	mov	r2, r3
 810e1de:	4b09      	ldr	r3, [pc, #36]	@ (810e204 <__assert_func+0x2c>)
 810e1e0:	681b      	ldr	r3, [r3, #0]
 810e1e2:	4605      	mov	r5, r0
 810e1e4:	68d8      	ldr	r0, [r3, #12]
 810e1e6:	b954      	cbnz	r4, 810e1fe <__assert_func+0x26>
 810e1e8:	4b07      	ldr	r3, [pc, #28]	@ (810e208 <__assert_func+0x30>)
 810e1ea:	461c      	mov	r4, r3
 810e1ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810e1f0:	9100      	str	r1, [sp, #0]
 810e1f2:	462b      	mov	r3, r5
 810e1f4:	4905      	ldr	r1, [pc, #20]	@ (810e20c <__assert_func+0x34>)
 810e1f6:	f000 fb79 	bl	810e8ec <fiprintf>
 810e1fa:	f000 fb89 	bl	810e910 <abort>
 810e1fe:	4b04      	ldr	r3, [pc, #16]	@ (810e210 <__assert_func+0x38>)
 810e200:	e7f4      	b.n	810e1ec <__assert_func+0x14>
 810e202:	bf00      	nop
 810e204:	10000b80 	.word	0x10000b80
 810e208:	0819bbc0 	.word	0x0819bbc0
 810e20c:	081af46f 	.word	0x081af46f
 810e210:	081af462 	.word	0x081af462

0810e214 <_calloc_r>:
 810e214:	b570      	push	{r4, r5, r6, lr}
 810e216:	fba1 5402 	umull	r5, r4, r1, r2
 810e21a:	b93c      	cbnz	r4, 810e22c <_calloc_r+0x18>
 810e21c:	4629      	mov	r1, r5
 810e21e:	f7fc f813 	bl	810a248 <_malloc_r>
 810e222:	4606      	mov	r6, r0
 810e224:	b928      	cbnz	r0, 810e232 <_calloc_r+0x1e>
 810e226:	2600      	movs	r6, #0
 810e228:	4630      	mov	r0, r6
 810e22a:	bd70      	pop	{r4, r5, r6, pc}
 810e22c:	220c      	movs	r2, #12
 810e22e:	6002      	str	r2, [r0, #0]
 810e230:	e7f9      	b.n	810e226 <_calloc_r+0x12>
 810e232:	462a      	mov	r2, r5
 810e234:	4621      	mov	r1, r4
 810e236:	f7fd f957 	bl	810b4e8 <memset>
 810e23a:	e7f5      	b.n	810e228 <_calloc_r+0x14>

0810e23c <rshift>:
 810e23c:	6903      	ldr	r3, [r0, #16]
 810e23e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810e242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810e246:	ea4f 1261 	mov.w	r2, r1, asr #5
 810e24a:	f100 0414 	add.w	r4, r0, #20
 810e24e:	dd45      	ble.n	810e2dc <rshift+0xa0>
 810e250:	f011 011f 	ands.w	r1, r1, #31
 810e254:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810e258:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810e25c:	d10c      	bne.n	810e278 <rshift+0x3c>
 810e25e:	f100 0710 	add.w	r7, r0, #16
 810e262:	4629      	mov	r1, r5
 810e264:	42b1      	cmp	r1, r6
 810e266:	d334      	bcc.n	810e2d2 <rshift+0x96>
 810e268:	1a9b      	subs	r3, r3, r2
 810e26a:	009b      	lsls	r3, r3, #2
 810e26c:	1eea      	subs	r2, r5, #3
 810e26e:	4296      	cmp	r6, r2
 810e270:	bf38      	it	cc
 810e272:	2300      	movcc	r3, #0
 810e274:	4423      	add	r3, r4
 810e276:	e015      	b.n	810e2a4 <rshift+0x68>
 810e278:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810e27c:	f1c1 0820 	rsb	r8, r1, #32
 810e280:	40cf      	lsrs	r7, r1
 810e282:	f105 0e04 	add.w	lr, r5, #4
 810e286:	46a1      	mov	r9, r4
 810e288:	4576      	cmp	r6, lr
 810e28a:	46f4      	mov	ip, lr
 810e28c:	d815      	bhi.n	810e2ba <rshift+0x7e>
 810e28e:	1a9a      	subs	r2, r3, r2
 810e290:	0092      	lsls	r2, r2, #2
 810e292:	3a04      	subs	r2, #4
 810e294:	3501      	adds	r5, #1
 810e296:	42ae      	cmp	r6, r5
 810e298:	bf38      	it	cc
 810e29a:	2200      	movcc	r2, #0
 810e29c:	18a3      	adds	r3, r4, r2
 810e29e:	50a7      	str	r7, [r4, r2]
 810e2a0:	b107      	cbz	r7, 810e2a4 <rshift+0x68>
 810e2a2:	3304      	adds	r3, #4
 810e2a4:	1b1a      	subs	r2, r3, r4
 810e2a6:	42a3      	cmp	r3, r4
 810e2a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810e2ac:	bf08      	it	eq
 810e2ae:	2300      	moveq	r3, #0
 810e2b0:	6102      	str	r2, [r0, #16]
 810e2b2:	bf08      	it	eq
 810e2b4:	6143      	streq	r3, [r0, #20]
 810e2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810e2ba:	f8dc c000 	ldr.w	ip, [ip]
 810e2be:	fa0c fc08 	lsl.w	ip, ip, r8
 810e2c2:	ea4c 0707 	orr.w	r7, ip, r7
 810e2c6:	f849 7b04 	str.w	r7, [r9], #4
 810e2ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 810e2ce:	40cf      	lsrs	r7, r1
 810e2d0:	e7da      	b.n	810e288 <rshift+0x4c>
 810e2d2:	f851 cb04 	ldr.w	ip, [r1], #4
 810e2d6:	f847 cf04 	str.w	ip, [r7, #4]!
 810e2da:	e7c3      	b.n	810e264 <rshift+0x28>
 810e2dc:	4623      	mov	r3, r4
 810e2de:	e7e1      	b.n	810e2a4 <rshift+0x68>

0810e2e0 <__hexdig_fun>:
 810e2e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 810e2e4:	2b09      	cmp	r3, #9
 810e2e6:	d802      	bhi.n	810e2ee <__hexdig_fun+0xe>
 810e2e8:	3820      	subs	r0, #32
 810e2ea:	b2c0      	uxtb	r0, r0
 810e2ec:	4770      	bx	lr
 810e2ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 810e2f2:	2b05      	cmp	r3, #5
 810e2f4:	d801      	bhi.n	810e2fa <__hexdig_fun+0x1a>
 810e2f6:	3847      	subs	r0, #71	@ 0x47
 810e2f8:	e7f7      	b.n	810e2ea <__hexdig_fun+0xa>
 810e2fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 810e2fe:	2b05      	cmp	r3, #5
 810e300:	d801      	bhi.n	810e306 <__hexdig_fun+0x26>
 810e302:	3827      	subs	r0, #39	@ 0x27
 810e304:	e7f1      	b.n	810e2ea <__hexdig_fun+0xa>
 810e306:	2000      	movs	r0, #0
 810e308:	4770      	bx	lr
	...

0810e30c <__gethex>:
 810e30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e310:	b085      	sub	sp, #20
 810e312:	468a      	mov	sl, r1
 810e314:	9302      	str	r3, [sp, #8]
 810e316:	680b      	ldr	r3, [r1, #0]
 810e318:	9001      	str	r0, [sp, #4]
 810e31a:	4690      	mov	r8, r2
 810e31c:	1c9c      	adds	r4, r3, #2
 810e31e:	46a1      	mov	r9, r4
 810e320:	f814 0b01 	ldrb.w	r0, [r4], #1
 810e324:	2830      	cmp	r0, #48	@ 0x30
 810e326:	d0fa      	beq.n	810e31e <__gethex+0x12>
 810e328:	eba9 0303 	sub.w	r3, r9, r3
 810e32c:	f1a3 0b02 	sub.w	fp, r3, #2
 810e330:	f7ff ffd6 	bl	810e2e0 <__hexdig_fun>
 810e334:	4605      	mov	r5, r0
 810e336:	2800      	cmp	r0, #0
 810e338:	d168      	bne.n	810e40c <__gethex+0x100>
 810e33a:	49a0      	ldr	r1, [pc, #640]	@ (810e5bc <__gethex+0x2b0>)
 810e33c:	2201      	movs	r2, #1
 810e33e:	4648      	mov	r0, r9
 810e340:	f7ff ff0e 	bl	810e160 <strncmp>
 810e344:	4607      	mov	r7, r0
 810e346:	2800      	cmp	r0, #0
 810e348:	d167      	bne.n	810e41a <__gethex+0x10e>
 810e34a:	f899 0001 	ldrb.w	r0, [r9, #1]
 810e34e:	4626      	mov	r6, r4
 810e350:	f7ff ffc6 	bl	810e2e0 <__hexdig_fun>
 810e354:	2800      	cmp	r0, #0
 810e356:	d062      	beq.n	810e41e <__gethex+0x112>
 810e358:	4623      	mov	r3, r4
 810e35a:	7818      	ldrb	r0, [r3, #0]
 810e35c:	2830      	cmp	r0, #48	@ 0x30
 810e35e:	4699      	mov	r9, r3
 810e360:	f103 0301 	add.w	r3, r3, #1
 810e364:	d0f9      	beq.n	810e35a <__gethex+0x4e>
 810e366:	f7ff ffbb 	bl	810e2e0 <__hexdig_fun>
 810e36a:	fab0 f580 	clz	r5, r0
 810e36e:	096d      	lsrs	r5, r5, #5
 810e370:	f04f 0b01 	mov.w	fp, #1
 810e374:	464a      	mov	r2, r9
 810e376:	4616      	mov	r6, r2
 810e378:	3201      	adds	r2, #1
 810e37a:	7830      	ldrb	r0, [r6, #0]
 810e37c:	f7ff ffb0 	bl	810e2e0 <__hexdig_fun>
 810e380:	2800      	cmp	r0, #0
 810e382:	d1f8      	bne.n	810e376 <__gethex+0x6a>
 810e384:	498d      	ldr	r1, [pc, #564]	@ (810e5bc <__gethex+0x2b0>)
 810e386:	2201      	movs	r2, #1
 810e388:	4630      	mov	r0, r6
 810e38a:	f7ff fee9 	bl	810e160 <strncmp>
 810e38e:	2800      	cmp	r0, #0
 810e390:	d13f      	bne.n	810e412 <__gethex+0x106>
 810e392:	b944      	cbnz	r4, 810e3a6 <__gethex+0x9a>
 810e394:	1c74      	adds	r4, r6, #1
 810e396:	4622      	mov	r2, r4
 810e398:	4616      	mov	r6, r2
 810e39a:	3201      	adds	r2, #1
 810e39c:	7830      	ldrb	r0, [r6, #0]
 810e39e:	f7ff ff9f 	bl	810e2e0 <__hexdig_fun>
 810e3a2:	2800      	cmp	r0, #0
 810e3a4:	d1f8      	bne.n	810e398 <__gethex+0x8c>
 810e3a6:	1ba4      	subs	r4, r4, r6
 810e3a8:	00a7      	lsls	r7, r4, #2
 810e3aa:	7833      	ldrb	r3, [r6, #0]
 810e3ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 810e3b0:	2b50      	cmp	r3, #80	@ 0x50
 810e3b2:	d13e      	bne.n	810e432 <__gethex+0x126>
 810e3b4:	7873      	ldrb	r3, [r6, #1]
 810e3b6:	2b2b      	cmp	r3, #43	@ 0x2b
 810e3b8:	d033      	beq.n	810e422 <__gethex+0x116>
 810e3ba:	2b2d      	cmp	r3, #45	@ 0x2d
 810e3bc:	d034      	beq.n	810e428 <__gethex+0x11c>
 810e3be:	1c71      	adds	r1, r6, #1
 810e3c0:	2400      	movs	r4, #0
 810e3c2:	7808      	ldrb	r0, [r1, #0]
 810e3c4:	f7ff ff8c 	bl	810e2e0 <__hexdig_fun>
 810e3c8:	1e43      	subs	r3, r0, #1
 810e3ca:	b2db      	uxtb	r3, r3
 810e3cc:	2b18      	cmp	r3, #24
 810e3ce:	d830      	bhi.n	810e432 <__gethex+0x126>
 810e3d0:	f1a0 0210 	sub.w	r2, r0, #16
 810e3d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810e3d8:	f7ff ff82 	bl	810e2e0 <__hexdig_fun>
 810e3dc:	f100 3cff 	add.w	ip, r0, #4294967295
 810e3e0:	fa5f fc8c 	uxtb.w	ip, ip
 810e3e4:	f1bc 0f18 	cmp.w	ip, #24
 810e3e8:	f04f 030a 	mov.w	r3, #10
 810e3ec:	d91e      	bls.n	810e42c <__gethex+0x120>
 810e3ee:	b104      	cbz	r4, 810e3f2 <__gethex+0xe6>
 810e3f0:	4252      	negs	r2, r2
 810e3f2:	4417      	add	r7, r2
 810e3f4:	f8ca 1000 	str.w	r1, [sl]
 810e3f8:	b1ed      	cbz	r5, 810e436 <__gethex+0x12a>
 810e3fa:	f1bb 0f00 	cmp.w	fp, #0
 810e3fe:	bf0c      	ite	eq
 810e400:	2506      	moveq	r5, #6
 810e402:	2500      	movne	r5, #0
 810e404:	4628      	mov	r0, r5
 810e406:	b005      	add	sp, #20
 810e408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e40c:	2500      	movs	r5, #0
 810e40e:	462c      	mov	r4, r5
 810e410:	e7b0      	b.n	810e374 <__gethex+0x68>
 810e412:	2c00      	cmp	r4, #0
 810e414:	d1c7      	bne.n	810e3a6 <__gethex+0x9a>
 810e416:	4627      	mov	r7, r4
 810e418:	e7c7      	b.n	810e3aa <__gethex+0x9e>
 810e41a:	464e      	mov	r6, r9
 810e41c:	462f      	mov	r7, r5
 810e41e:	2501      	movs	r5, #1
 810e420:	e7c3      	b.n	810e3aa <__gethex+0x9e>
 810e422:	2400      	movs	r4, #0
 810e424:	1cb1      	adds	r1, r6, #2
 810e426:	e7cc      	b.n	810e3c2 <__gethex+0xb6>
 810e428:	2401      	movs	r4, #1
 810e42a:	e7fb      	b.n	810e424 <__gethex+0x118>
 810e42c:	fb03 0002 	mla	r0, r3, r2, r0
 810e430:	e7ce      	b.n	810e3d0 <__gethex+0xc4>
 810e432:	4631      	mov	r1, r6
 810e434:	e7de      	b.n	810e3f4 <__gethex+0xe8>
 810e436:	eba6 0309 	sub.w	r3, r6, r9
 810e43a:	3b01      	subs	r3, #1
 810e43c:	4629      	mov	r1, r5
 810e43e:	2b07      	cmp	r3, #7
 810e440:	dc0a      	bgt.n	810e458 <__gethex+0x14c>
 810e442:	9801      	ldr	r0, [sp, #4]
 810e444:	f7fd ff8a 	bl	810c35c <_Balloc>
 810e448:	4604      	mov	r4, r0
 810e44a:	b940      	cbnz	r0, 810e45e <__gethex+0x152>
 810e44c:	4b5c      	ldr	r3, [pc, #368]	@ (810e5c0 <__gethex+0x2b4>)
 810e44e:	4602      	mov	r2, r0
 810e450:	21e4      	movs	r1, #228	@ 0xe4
 810e452:	485c      	ldr	r0, [pc, #368]	@ (810e5c4 <__gethex+0x2b8>)
 810e454:	f7ff fec0 	bl	810e1d8 <__assert_func>
 810e458:	3101      	adds	r1, #1
 810e45a:	105b      	asrs	r3, r3, #1
 810e45c:	e7ef      	b.n	810e43e <__gethex+0x132>
 810e45e:	f100 0a14 	add.w	sl, r0, #20
 810e462:	2300      	movs	r3, #0
 810e464:	4655      	mov	r5, sl
 810e466:	469b      	mov	fp, r3
 810e468:	45b1      	cmp	r9, r6
 810e46a:	d337      	bcc.n	810e4dc <__gethex+0x1d0>
 810e46c:	f845 bb04 	str.w	fp, [r5], #4
 810e470:	eba5 050a 	sub.w	r5, r5, sl
 810e474:	10ad      	asrs	r5, r5, #2
 810e476:	6125      	str	r5, [r4, #16]
 810e478:	4658      	mov	r0, fp
 810e47a:	f7fe f861 	bl	810c540 <__hi0bits>
 810e47e:	016d      	lsls	r5, r5, #5
 810e480:	f8d8 6000 	ldr.w	r6, [r8]
 810e484:	1a2d      	subs	r5, r5, r0
 810e486:	42b5      	cmp	r5, r6
 810e488:	dd54      	ble.n	810e534 <__gethex+0x228>
 810e48a:	1bad      	subs	r5, r5, r6
 810e48c:	4629      	mov	r1, r5
 810e48e:	4620      	mov	r0, r4
 810e490:	f7fe fbf5 	bl	810cc7e <__any_on>
 810e494:	4681      	mov	r9, r0
 810e496:	b178      	cbz	r0, 810e4b8 <__gethex+0x1ac>
 810e498:	1e6b      	subs	r3, r5, #1
 810e49a:	1159      	asrs	r1, r3, #5
 810e49c:	f003 021f 	and.w	r2, r3, #31
 810e4a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810e4a4:	f04f 0901 	mov.w	r9, #1
 810e4a8:	fa09 f202 	lsl.w	r2, r9, r2
 810e4ac:	420a      	tst	r2, r1
 810e4ae:	d003      	beq.n	810e4b8 <__gethex+0x1ac>
 810e4b0:	454b      	cmp	r3, r9
 810e4b2:	dc36      	bgt.n	810e522 <__gethex+0x216>
 810e4b4:	f04f 0902 	mov.w	r9, #2
 810e4b8:	4629      	mov	r1, r5
 810e4ba:	4620      	mov	r0, r4
 810e4bc:	f7ff febe 	bl	810e23c <rshift>
 810e4c0:	442f      	add	r7, r5
 810e4c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e4c6:	42bb      	cmp	r3, r7
 810e4c8:	da42      	bge.n	810e550 <__gethex+0x244>
 810e4ca:	9801      	ldr	r0, [sp, #4]
 810e4cc:	4621      	mov	r1, r4
 810e4ce:	f7fd ff85 	bl	810c3dc <_Bfree>
 810e4d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810e4d4:	2300      	movs	r3, #0
 810e4d6:	6013      	str	r3, [r2, #0]
 810e4d8:	25a3      	movs	r5, #163	@ 0xa3
 810e4da:	e793      	b.n	810e404 <__gethex+0xf8>
 810e4dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 810e4e0:	2a2e      	cmp	r2, #46	@ 0x2e
 810e4e2:	d012      	beq.n	810e50a <__gethex+0x1fe>
 810e4e4:	2b20      	cmp	r3, #32
 810e4e6:	d104      	bne.n	810e4f2 <__gethex+0x1e6>
 810e4e8:	f845 bb04 	str.w	fp, [r5], #4
 810e4ec:	f04f 0b00 	mov.w	fp, #0
 810e4f0:	465b      	mov	r3, fp
 810e4f2:	7830      	ldrb	r0, [r6, #0]
 810e4f4:	9303      	str	r3, [sp, #12]
 810e4f6:	f7ff fef3 	bl	810e2e0 <__hexdig_fun>
 810e4fa:	9b03      	ldr	r3, [sp, #12]
 810e4fc:	f000 000f 	and.w	r0, r0, #15
 810e500:	4098      	lsls	r0, r3
 810e502:	ea4b 0b00 	orr.w	fp, fp, r0
 810e506:	3304      	adds	r3, #4
 810e508:	e7ae      	b.n	810e468 <__gethex+0x15c>
 810e50a:	45b1      	cmp	r9, r6
 810e50c:	d8ea      	bhi.n	810e4e4 <__gethex+0x1d8>
 810e50e:	492b      	ldr	r1, [pc, #172]	@ (810e5bc <__gethex+0x2b0>)
 810e510:	9303      	str	r3, [sp, #12]
 810e512:	2201      	movs	r2, #1
 810e514:	4630      	mov	r0, r6
 810e516:	f7ff fe23 	bl	810e160 <strncmp>
 810e51a:	9b03      	ldr	r3, [sp, #12]
 810e51c:	2800      	cmp	r0, #0
 810e51e:	d1e1      	bne.n	810e4e4 <__gethex+0x1d8>
 810e520:	e7a2      	b.n	810e468 <__gethex+0x15c>
 810e522:	1ea9      	subs	r1, r5, #2
 810e524:	4620      	mov	r0, r4
 810e526:	f7fe fbaa 	bl	810cc7e <__any_on>
 810e52a:	2800      	cmp	r0, #0
 810e52c:	d0c2      	beq.n	810e4b4 <__gethex+0x1a8>
 810e52e:	f04f 0903 	mov.w	r9, #3
 810e532:	e7c1      	b.n	810e4b8 <__gethex+0x1ac>
 810e534:	da09      	bge.n	810e54a <__gethex+0x23e>
 810e536:	1b75      	subs	r5, r6, r5
 810e538:	4621      	mov	r1, r4
 810e53a:	9801      	ldr	r0, [sp, #4]
 810e53c:	462a      	mov	r2, r5
 810e53e:	f7fe f965 	bl	810c80c <__lshift>
 810e542:	1b7f      	subs	r7, r7, r5
 810e544:	4604      	mov	r4, r0
 810e546:	f100 0a14 	add.w	sl, r0, #20
 810e54a:	f04f 0900 	mov.w	r9, #0
 810e54e:	e7b8      	b.n	810e4c2 <__gethex+0x1b6>
 810e550:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810e554:	42bd      	cmp	r5, r7
 810e556:	dd6f      	ble.n	810e638 <__gethex+0x32c>
 810e558:	1bed      	subs	r5, r5, r7
 810e55a:	42ae      	cmp	r6, r5
 810e55c:	dc34      	bgt.n	810e5c8 <__gethex+0x2bc>
 810e55e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e562:	2b02      	cmp	r3, #2
 810e564:	d022      	beq.n	810e5ac <__gethex+0x2a0>
 810e566:	2b03      	cmp	r3, #3
 810e568:	d024      	beq.n	810e5b4 <__gethex+0x2a8>
 810e56a:	2b01      	cmp	r3, #1
 810e56c:	d115      	bne.n	810e59a <__gethex+0x28e>
 810e56e:	42ae      	cmp	r6, r5
 810e570:	d113      	bne.n	810e59a <__gethex+0x28e>
 810e572:	2e01      	cmp	r6, #1
 810e574:	d10b      	bne.n	810e58e <__gethex+0x282>
 810e576:	9a02      	ldr	r2, [sp, #8]
 810e578:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810e57c:	6013      	str	r3, [r2, #0]
 810e57e:	2301      	movs	r3, #1
 810e580:	6123      	str	r3, [r4, #16]
 810e582:	f8ca 3000 	str.w	r3, [sl]
 810e586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e588:	2562      	movs	r5, #98	@ 0x62
 810e58a:	601c      	str	r4, [r3, #0]
 810e58c:	e73a      	b.n	810e404 <__gethex+0xf8>
 810e58e:	1e71      	subs	r1, r6, #1
 810e590:	4620      	mov	r0, r4
 810e592:	f7fe fb74 	bl	810cc7e <__any_on>
 810e596:	2800      	cmp	r0, #0
 810e598:	d1ed      	bne.n	810e576 <__gethex+0x26a>
 810e59a:	9801      	ldr	r0, [sp, #4]
 810e59c:	4621      	mov	r1, r4
 810e59e:	f7fd ff1d 	bl	810c3dc <_Bfree>
 810e5a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810e5a4:	2300      	movs	r3, #0
 810e5a6:	6013      	str	r3, [r2, #0]
 810e5a8:	2550      	movs	r5, #80	@ 0x50
 810e5aa:	e72b      	b.n	810e404 <__gethex+0xf8>
 810e5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810e5ae:	2b00      	cmp	r3, #0
 810e5b0:	d1f3      	bne.n	810e59a <__gethex+0x28e>
 810e5b2:	e7e0      	b.n	810e576 <__gethex+0x26a>
 810e5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810e5b6:	2b00      	cmp	r3, #0
 810e5b8:	d1dd      	bne.n	810e576 <__gethex+0x26a>
 810e5ba:	e7ee      	b.n	810e59a <__gethex+0x28e>
 810e5bc:	081af2f0 	.word	0x081af2f0
 810e5c0:	081af189 	.word	0x081af189
 810e5c4:	081af49e 	.word	0x081af49e
 810e5c8:	1e6f      	subs	r7, r5, #1
 810e5ca:	f1b9 0f00 	cmp.w	r9, #0
 810e5ce:	d130      	bne.n	810e632 <__gethex+0x326>
 810e5d0:	b127      	cbz	r7, 810e5dc <__gethex+0x2d0>
 810e5d2:	4639      	mov	r1, r7
 810e5d4:	4620      	mov	r0, r4
 810e5d6:	f7fe fb52 	bl	810cc7e <__any_on>
 810e5da:	4681      	mov	r9, r0
 810e5dc:	117a      	asrs	r2, r7, #5
 810e5de:	2301      	movs	r3, #1
 810e5e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810e5e4:	f007 071f 	and.w	r7, r7, #31
 810e5e8:	40bb      	lsls	r3, r7
 810e5ea:	4213      	tst	r3, r2
 810e5ec:	4629      	mov	r1, r5
 810e5ee:	4620      	mov	r0, r4
 810e5f0:	bf18      	it	ne
 810e5f2:	f049 0902 	orrne.w	r9, r9, #2
 810e5f6:	f7ff fe21 	bl	810e23c <rshift>
 810e5fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 810e5fe:	1b76      	subs	r6, r6, r5
 810e600:	2502      	movs	r5, #2
 810e602:	f1b9 0f00 	cmp.w	r9, #0
 810e606:	d047      	beq.n	810e698 <__gethex+0x38c>
 810e608:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810e60c:	2b02      	cmp	r3, #2
 810e60e:	d015      	beq.n	810e63c <__gethex+0x330>
 810e610:	2b03      	cmp	r3, #3
 810e612:	d017      	beq.n	810e644 <__gethex+0x338>
 810e614:	2b01      	cmp	r3, #1
 810e616:	d109      	bne.n	810e62c <__gethex+0x320>
 810e618:	f019 0f02 	tst.w	r9, #2
 810e61c:	d006      	beq.n	810e62c <__gethex+0x320>
 810e61e:	f8da 3000 	ldr.w	r3, [sl]
 810e622:	ea49 0903 	orr.w	r9, r9, r3
 810e626:	f019 0f01 	tst.w	r9, #1
 810e62a:	d10e      	bne.n	810e64a <__gethex+0x33e>
 810e62c:	f045 0510 	orr.w	r5, r5, #16
 810e630:	e032      	b.n	810e698 <__gethex+0x38c>
 810e632:	f04f 0901 	mov.w	r9, #1
 810e636:	e7d1      	b.n	810e5dc <__gethex+0x2d0>
 810e638:	2501      	movs	r5, #1
 810e63a:	e7e2      	b.n	810e602 <__gethex+0x2f6>
 810e63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810e63e:	f1c3 0301 	rsb	r3, r3, #1
 810e642:	930f      	str	r3, [sp, #60]	@ 0x3c
 810e644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810e646:	2b00      	cmp	r3, #0
 810e648:	d0f0      	beq.n	810e62c <__gethex+0x320>
 810e64a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810e64e:	f104 0314 	add.w	r3, r4, #20
 810e652:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810e656:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810e65a:	f04f 0c00 	mov.w	ip, #0
 810e65e:	4618      	mov	r0, r3
 810e660:	f853 2b04 	ldr.w	r2, [r3], #4
 810e664:	f1b2 3fff 	cmp.w	r2, #4294967295
 810e668:	d01b      	beq.n	810e6a2 <__gethex+0x396>
 810e66a:	3201      	adds	r2, #1
 810e66c:	6002      	str	r2, [r0, #0]
 810e66e:	2d02      	cmp	r5, #2
 810e670:	f104 0314 	add.w	r3, r4, #20
 810e674:	d13c      	bne.n	810e6f0 <__gethex+0x3e4>
 810e676:	f8d8 2000 	ldr.w	r2, [r8]
 810e67a:	3a01      	subs	r2, #1
 810e67c:	42b2      	cmp	r2, r6
 810e67e:	d109      	bne.n	810e694 <__gethex+0x388>
 810e680:	1171      	asrs	r1, r6, #5
 810e682:	2201      	movs	r2, #1
 810e684:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810e688:	f006 061f 	and.w	r6, r6, #31
 810e68c:	fa02 f606 	lsl.w	r6, r2, r6
 810e690:	421e      	tst	r6, r3
 810e692:	d13a      	bne.n	810e70a <__gethex+0x3fe>
 810e694:	f045 0520 	orr.w	r5, r5, #32
 810e698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810e69a:	601c      	str	r4, [r3, #0]
 810e69c:	9b02      	ldr	r3, [sp, #8]
 810e69e:	601f      	str	r7, [r3, #0]
 810e6a0:	e6b0      	b.n	810e404 <__gethex+0xf8>
 810e6a2:	4299      	cmp	r1, r3
 810e6a4:	f843 cc04 	str.w	ip, [r3, #-4]
 810e6a8:	d8d9      	bhi.n	810e65e <__gethex+0x352>
 810e6aa:	68a3      	ldr	r3, [r4, #8]
 810e6ac:	459b      	cmp	fp, r3
 810e6ae:	db17      	blt.n	810e6e0 <__gethex+0x3d4>
 810e6b0:	6861      	ldr	r1, [r4, #4]
 810e6b2:	9801      	ldr	r0, [sp, #4]
 810e6b4:	3101      	adds	r1, #1
 810e6b6:	f7fd fe51 	bl	810c35c <_Balloc>
 810e6ba:	4681      	mov	r9, r0
 810e6bc:	b918      	cbnz	r0, 810e6c6 <__gethex+0x3ba>
 810e6be:	4b1a      	ldr	r3, [pc, #104]	@ (810e728 <__gethex+0x41c>)
 810e6c0:	4602      	mov	r2, r0
 810e6c2:	2184      	movs	r1, #132	@ 0x84
 810e6c4:	e6c5      	b.n	810e452 <__gethex+0x146>
 810e6c6:	6922      	ldr	r2, [r4, #16]
 810e6c8:	3202      	adds	r2, #2
 810e6ca:	f104 010c 	add.w	r1, r4, #12
 810e6ce:	0092      	lsls	r2, r2, #2
 810e6d0:	300c      	adds	r0, #12
 810e6d2:	f7fc ff98 	bl	810b606 <memcpy>
 810e6d6:	4621      	mov	r1, r4
 810e6d8:	9801      	ldr	r0, [sp, #4]
 810e6da:	f7fd fe7f 	bl	810c3dc <_Bfree>
 810e6de:	464c      	mov	r4, r9
 810e6e0:	6923      	ldr	r3, [r4, #16]
 810e6e2:	1c5a      	adds	r2, r3, #1
 810e6e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810e6e8:	6122      	str	r2, [r4, #16]
 810e6ea:	2201      	movs	r2, #1
 810e6ec:	615a      	str	r2, [r3, #20]
 810e6ee:	e7be      	b.n	810e66e <__gethex+0x362>
 810e6f0:	6922      	ldr	r2, [r4, #16]
 810e6f2:	455a      	cmp	r2, fp
 810e6f4:	dd0b      	ble.n	810e70e <__gethex+0x402>
 810e6f6:	2101      	movs	r1, #1
 810e6f8:	4620      	mov	r0, r4
 810e6fa:	f7ff fd9f 	bl	810e23c <rshift>
 810e6fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810e702:	3701      	adds	r7, #1
 810e704:	42bb      	cmp	r3, r7
 810e706:	f6ff aee0 	blt.w	810e4ca <__gethex+0x1be>
 810e70a:	2501      	movs	r5, #1
 810e70c:	e7c2      	b.n	810e694 <__gethex+0x388>
 810e70e:	f016 061f 	ands.w	r6, r6, #31
 810e712:	d0fa      	beq.n	810e70a <__gethex+0x3fe>
 810e714:	4453      	add	r3, sl
 810e716:	f1c6 0620 	rsb	r6, r6, #32
 810e71a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810e71e:	f7fd ff0f 	bl	810c540 <__hi0bits>
 810e722:	42b0      	cmp	r0, r6
 810e724:	dbe7      	blt.n	810e6f6 <__gethex+0x3ea>
 810e726:	e7f0      	b.n	810e70a <__gethex+0x3fe>
 810e728:	081af189 	.word	0x081af189

0810e72c <L_shift>:
 810e72c:	f1c2 0208 	rsb	r2, r2, #8
 810e730:	0092      	lsls	r2, r2, #2
 810e732:	b570      	push	{r4, r5, r6, lr}
 810e734:	f1c2 0620 	rsb	r6, r2, #32
 810e738:	6843      	ldr	r3, [r0, #4]
 810e73a:	6804      	ldr	r4, [r0, #0]
 810e73c:	fa03 f506 	lsl.w	r5, r3, r6
 810e740:	432c      	orrs	r4, r5
 810e742:	40d3      	lsrs	r3, r2
 810e744:	6004      	str	r4, [r0, #0]
 810e746:	f840 3f04 	str.w	r3, [r0, #4]!
 810e74a:	4288      	cmp	r0, r1
 810e74c:	d3f4      	bcc.n	810e738 <L_shift+0xc>
 810e74e:	bd70      	pop	{r4, r5, r6, pc}

0810e750 <__match>:
 810e750:	b530      	push	{r4, r5, lr}
 810e752:	6803      	ldr	r3, [r0, #0]
 810e754:	3301      	adds	r3, #1
 810e756:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e75a:	b914      	cbnz	r4, 810e762 <__match+0x12>
 810e75c:	6003      	str	r3, [r0, #0]
 810e75e:	2001      	movs	r0, #1
 810e760:	bd30      	pop	{r4, r5, pc}
 810e762:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e766:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 810e76a:	2d19      	cmp	r5, #25
 810e76c:	bf98      	it	ls
 810e76e:	3220      	addls	r2, #32
 810e770:	42a2      	cmp	r2, r4
 810e772:	d0f0      	beq.n	810e756 <__match+0x6>
 810e774:	2000      	movs	r0, #0
 810e776:	e7f3      	b.n	810e760 <__match+0x10>

0810e778 <__hexnan>:
 810e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e77c:	680b      	ldr	r3, [r1, #0]
 810e77e:	6801      	ldr	r1, [r0, #0]
 810e780:	115e      	asrs	r6, r3, #5
 810e782:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810e786:	f013 031f 	ands.w	r3, r3, #31
 810e78a:	b087      	sub	sp, #28
 810e78c:	bf18      	it	ne
 810e78e:	3604      	addne	r6, #4
 810e790:	2500      	movs	r5, #0
 810e792:	1f37      	subs	r7, r6, #4
 810e794:	4682      	mov	sl, r0
 810e796:	4690      	mov	r8, r2
 810e798:	9301      	str	r3, [sp, #4]
 810e79a:	f846 5c04 	str.w	r5, [r6, #-4]
 810e79e:	46b9      	mov	r9, r7
 810e7a0:	463c      	mov	r4, r7
 810e7a2:	9502      	str	r5, [sp, #8]
 810e7a4:	46ab      	mov	fp, r5
 810e7a6:	784a      	ldrb	r2, [r1, #1]
 810e7a8:	1c4b      	adds	r3, r1, #1
 810e7aa:	9303      	str	r3, [sp, #12]
 810e7ac:	b342      	cbz	r2, 810e800 <__hexnan+0x88>
 810e7ae:	4610      	mov	r0, r2
 810e7b0:	9105      	str	r1, [sp, #20]
 810e7b2:	9204      	str	r2, [sp, #16]
 810e7b4:	f7ff fd94 	bl	810e2e0 <__hexdig_fun>
 810e7b8:	2800      	cmp	r0, #0
 810e7ba:	d151      	bne.n	810e860 <__hexnan+0xe8>
 810e7bc:	9a04      	ldr	r2, [sp, #16]
 810e7be:	9905      	ldr	r1, [sp, #20]
 810e7c0:	2a20      	cmp	r2, #32
 810e7c2:	d818      	bhi.n	810e7f6 <__hexnan+0x7e>
 810e7c4:	9b02      	ldr	r3, [sp, #8]
 810e7c6:	459b      	cmp	fp, r3
 810e7c8:	dd13      	ble.n	810e7f2 <__hexnan+0x7a>
 810e7ca:	454c      	cmp	r4, r9
 810e7cc:	d206      	bcs.n	810e7dc <__hexnan+0x64>
 810e7ce:	2d07      	cmp	r5, #7
 810e7d0:	dc04      	bgt.n	810e7dc <__hexnan+0x64>
 810e7d2:	462a      	mov	r2, r5
 810e7d4:	4649      	mov	r1, r9
 810e7d6:	4620      	mov	r0, r4
 810e7d8:	f7ff ffa8 	bl	810e72c <L_shift>
 810e7dc:	4544      	cmp	r4, r8
 810e7de:	d952      	bls.n	810e886 <__hexnan+0x10e>
 810e7e0:	2300      	movs	r3, #0
 810e7e2:	f1a4 0904 	sub.w	r9, r4, #4
 810e7e6:	f844 3c04 	str.w	r3, [r4, #-4]
 810e7ea:	f8cd b008 	str.w	fp, [sp, #8]
 810e7ee:	464c      	mov	r4, r9
 810e7f0:	461d      	mov	r5, r3
 810e7f2:	9903      	ldr	r1, [sp, #12]
 810e7f4:	e7d7      	b.n	810e7a6 <__hexnan+0x2e>
 810e7f6:	2a29      	cmp	r2, #41	@ 0x29
 810e7f8:	d157      	bne.n	810e8aa <__hexnan+0x132>
 810e7fa:	3102      	adds	r1, #2
 810e7fc:	f8ca 1000 	str.w	r1, [sl]
 810e800:	f1bb 0f00 	cmp.w	fp, #0
 810e804:	d051      	beq.n	810e8aa <__hexnan+0x132>
 810e806:	454c      	cmp	r4, r9
 810e808:	d206      	bcs.n	810e818 <__hexnan+0xa0>
 810e80a:	2d07      	cmp	r5, #7
 810e80c:	dc04      	bgt.n	810e818 <__hexnan+0xa0>
 810e80e:	462a      	mov	r2, r5
 810e810:	4649      	mov	r1, r9
 810e812:	4620      	mov	r0, r4
 810e814:	f7ff ff8a 	bl	810e72c <L_shift>
 810e818:	4544      	cmp	r4, r8
 810e81a:	d936      	bls.n	810e88a <__hexnan+0x112>
 810e81c:	f1a8 0204 	sub.w	r2, r8, #4
 810e820:	4623      	mov	r3, r4
 810e822:	f853 1b04 	ldr.w	r1, [r3], #4
 810e826:	f842 1f04 	str.w	r1, [r2, #4]!
 810e82a:	429f      	cmp	r7, r3
 810e82c:	d2f9      	bcs.n	810e822 <__hexnan+0xaa>
 810e82e:	1b3b      	subs	r3, r7, r4
 810e830:	f023 0303 	bic.w	r3, r3, #3
 810e834:	3304      	adds	r3, #4
 810e836:	3401      	adds	r4, #1
 810e838:	3e03      	subs	r6, #3
 810e83a:	42b4      	cmp	r4, r6
 810e83c:	bf88      	it	hi
 810e83e:	2304      	movhi	r3, #4
 810e840:	4443      	add	r3, r8
 810e842:	2200      	movs	r2, #0
 810e844:	f843 2b04 	str.w	r2, [r3], #4
 810e848:	429f      	cmp	r7, r3
 810e84a:	d2fb      	bcs.n	810e844 <__hexnan+0xcc>
 810e84c:	683b      	ldr	r3, [r7, #0]
 810e84e:	b91b      	cbnz	r3, 810e858 <__hexnan+0xe0>
 810e850:	4547      	cmp	r7, r8
 810e852:	d128      	bne.n	810e8a6 <__hexnan+0x12e>
 810e854:	2301      	movs	r3, #1
 810e856:	603b      	str	r3, [r7, #0]
 810e858:	2005      	movs	r0, #5
 810e85a:	b007      	add	sp, #28
 810e85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e860:	3501      	adds	r5, #1
 810e862:	2d08      	cmp	r5, #8
 810e864:	f10b 0b01 	add.w	fp, fp, #1
 810e868:	dd06      	ble.n	810e878 <__hexnan+0x100>
 810e86a:	4544      	cmp	r4, r8
 810e86c:	d9c1      	bls.n	810e7f2 <__hexnan+0x7a>
 810e86e:	2300      	movs	r3, #0
 810e870:	f844 3c04 	str.w	r3, [r4, #-4]
 810e874:	2501      	movs	r5, #1
 810e876:	3c04      	subs	r4, #4
 810e878:	6822      	ldr	r2, [r4, #0]
 810e87a:	f000 000f 	and.w	r0, r0, #15
 810e87e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810e882:	6020      	str	r0, [r4, #0]
 810e884:	e7b5      	b.n	810e7f2 <__hexnan+0x7a>
 810e886:	2508      	movs	r5, #8
 810e888:	e7b3      	b.n	810e7f2 <__hexnan+0x7a>
 810e88a:	9b01      	ldr	r3, [sp, #4]
 810e88c:	2b00      	cmp	r3, #0
 810e88e:	d0dd      	beq.n	810e84c <__hexnan+0xd4>
 810e890:	f1c3 0320 	rsb	r3, r3, #32
 810e894:	f04f 32ff 	mov.w	r2, #4294967295
 810e898:	40da      	lsrs	r2, r3
 810e89a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810e89e:	4013      	ands	r3, r2
 810e8a0:	f846 3c04 	str.w	r3, [r6, #-4]
 810e8a4:	e7d2      	b.n	810e84c <__hexnan+0xd4>
 810e8a6:	3f04      	subs	r7, #4
 810e8a8:	e7d0      	b.n	810e84c <__hexnan+0xd4>
 810e8aa:	2004      	movs	r0, #4
 810e8ac:	e7d5      	b.n	810e85a <__hexnan+0xe2>

0810e8ae <__ascii_mbtowc>:
 810e8ae:	b082      	sub	sp, #8
 810e8b0:	b901      	cbnz	r1, 810e8b4 <__ascii_mbtowc+0x6>
 810e8b2:	a901      	add	r1, sp, #4
 810e8b4:	b142      	cbz	r2, 810e8c8 <__ascii_mbtowc+0x1a>
 810e8b6:	b14b      	cbz	r3, 810e8cc <__ascii_mbtowc+0x1e>
 810e8b8:	7813      	ldrb	r3, [r2, #0]
 810e8ba:	600b      	str	r3, [r1, #0]
 810e8bc:	7812      	ldrb	r2, [r2, #0]
 810e8be:	1e10      	subs	r0, r2, #0
 810e8c0:	bf18      	it	ne
 810e8c2:	2001      	movne	r0, #1
 810e8c4:	b002      	add	sp, #8
 810e8c6:	4770      	bx	lr
 810e8c8:	4610      	mov	r0, r2
 810e8ca:	e7fb      	b.n	810e8c4 <__ascii_mbtowc+0x16>
 810e8cc:	f06f 0001 	mvn.w	r0, #1
 810e8d0:	e7f8      	b.n	810e8c4 <__ascii_mbtowc+0x16>

0810e8d2 <__ascii_wctomb>:
 810e8d2:	4603      	mov	r3, r0
 810e8d4:	4608      	mov	r0, r1
 810e8d6:	b141      	cbz	r1, 810e8ea <__ascii_wctomb+0x18>
 810e8d8:	2aff      	cmp	r2, #255	@ 0xff
 810e8da:	d904      	bls.n	810e8e6 <__ascii_wctomb+0x14>
 810e8dc:	228a      	movs	r2, #138	@ 0x8a
 810e8de:	601a      	str	r2, [r3, #0]
 810e8e0:	f04f 30ff 	mov.w	r0, #4294967295
 810e8e4:	4770      	bx	lr
 810e8e6:	700a      	strb	r2, [r1, #0]
 810e8e8:	2001      	movs	r0, #1
 810e8ea:	4770      	bx	lr

0810e8ec <fiprintf>:
 810e8ec:	b40e      	push	{r1, r2, r3}
 810e8ee:	b503      	push	{r0, r1, lr}
 810e8f0:	4601      	mov	r1, r0
 810e8f2:	ab03      	add	r3, sp, #12
 810e8f4:	4805      	ldr	r0, [pc, #20]	@ (810e90c <fiprintf+0x20>)
 810e8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 810e8fa:	6800      	ldr	r0, [r0, #0]
 810e8fc:	9301      	str	r3, [sp, #4]
 810e8fe:	f7ff f9ef 	bl	810dce0 <_vfiprintf_r>
 810e902:	b002      	add	sp, #8
 810e904:	f85d eb04 	ldr.w	lr, [sp], #4
 810e908:	b003      	add	sp, #12
 810e90a:	4770      	bx	lr
 810e90c:	10000b80 	.word	0x10000b80

0810e910 <abort>:
 810e910:	b508      	push	{r3, lr}
 810e912:	2006      	movs	r0, #6
 810e914:	f000 f82c 	bl	810e970 <raise>
 810e918:	2001      	movs	r0, #1
 810e91a:	f7f3 fbcd 	bl	81020b8 <_exit>

0810e91e <_raise_r>:
 810e91e:	291f      	cmp	r1, #31
 810e920:	b538      	push	{r3, r4, r5, lr}
 810e922:	4605      	mov	r5, r0
 810e924:	460c      	mov	r4, r1
 810e926:	d904      	bls.n	810e932 <_raise_r+0x14>
 810e928:	2316      	movs	r3, #22
 810e92a:	6003      	str	r3, [r0, #0]
 810e92c:	f04f 30ff 	mov.w	r0, #4294967295
 810e930:	bd38      	pop	{r3, r4, r5, pc}
 810e932:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810e934:	b112      	cbz	r2, 810e93c <_raise_r+0x1e>
 810e936:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e93a:	b94b      	cbnz	r3, 810e950 <_raise_r+0x32>
 810e93c:	4628      	mov	r0, r5
 810e93e:	f000 f831 	bl	810e9a4 <_getpid_r>
 810e942:	4622      	mov	r2, r4
 810e944:	4601      	mov	r1, r0
 810e946:	4628      	mov	r0, r5
 810e948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e94c:	f000 b818 	b.w	810e980 <_kill_r>
 810e950:	2b01      	cmp	r3, #1
 810e952:	d00a      	beq.n	810e96a <_raise_r+0x4c>
 810e954:	1c59      	adds	r1, r3, #1
 810e956:	d103      	bne.n	810e960 <_raise_r+0x42>
 810e958:	2316      	movs	r3, #22
 810e95a:	6003      	str	r3, [r0, #0]
 810e95c:	2001      	movs	r0, #1
 810e95e:	e7e7      	b.n	810e930 <_raise_r+0x12>
 810e960:	2100      	movs	r1, #0
 810e962:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810e966:	4620      	mov	r0, r4
 810e968:	4798      	blx	r3
 810e96a:	2000      	movs	r0, #0
 810e96c:	e7e0      	b.n	810e930 <_raise_r+0x12>
	...

0810e970 <raise>:
 810e970:	4b02      	ldr	r3, [pc, #8]	@ (810e97c <raise+0xc>)
 810e972:	4601      	mov	r1, r0
 810e974:	6818      	ldr	r0, [r3, #0]
 810e976:	f7ff bfd2 	b.w	810e91e <_raise_r>
 810e97a:	bf00      	nop
 810e97c:	10000b80 	.word	0x10000b80

0810e980 <_kill_r>:
 810e980:	b538      	push	{r3, r4, r5, lr}
 810e982:	4d07      	ldr	r5, [pc, #28]	@ (810e9a0 <_kill_r+0x20>)
 810e984:	2300      	movs	r3, #0
 810e986:	4604      	mov	r4, r0
 810e988:	4608      	mov	r0, r1
 810e98a:	4611      	mov	r1, r2
 810e98c:	602b      	str	r3, [r5, #0]
 810e98e:	f7f3 fb8b 	bl	81020a8 <_kill>
 810e992:	1c43      	adds	r3, r0, #1
 810e994:	d102      	bne.n	810e99c <_kill_r+0x1c>
 810e996:	682b      	ldr	r3, [r5, #0]
 810e998:	b103      	cbz	r3, 810e99c <_kill_r+0x1c>
 810e99a:	6023      	str	r3, [r4, #0]
 810e99c:	bd38      	pop	{r3, r4, r5, pc}
 810e99e:	bf00      	nop
 810e9a0:	1001ad14 	.word	0x1001ad14

0810e9a4 <_getpid_r>:
 810e9a4:	f7f3 bb7e 	b.w	81020a4 <_getpid>

0810e9a8 <expf>:
 810e9a8:	b508      	push	{r3, lr}
 810e9aa:	ed2d 8b02 	vpush	{d8}
 810e9ae:	eef0 8a40 	vmov.f32	s17, s0
 810e9b2:	f000 f8af 	bl	810eb14 <__ieee754_expf>
 810e9b6:	eeb0 8a40 	vmov.f32	s16, s0
 810e9ba:	eeb0 0a68 	vmov.f32	s0, s17
 810e9be:	f000 f875 	bl	810eaac <finitef>
 810e9c2:	b160      	cbz	r0, 810e9de <expf+0x36>
 810e9c4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 810ea04 <expf+0x5c>
 810e9c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 810e9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e9d0:	dd0a      	ble.n	810e9e8 <expf+0x40>
 810e9d2:	f7fc fdeb 	bl	810b5ac <__errno>
 810e9d6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 810ea08 <expf+0x60>
 810e9da:	2322      	movs	r3, #34	@ 0x22
 810e9dc:	6003      	str	r3, [r0, #0]
 810e9de:	eeb0 0a48 	vmov.f32	s0, s16
 810e9e2:	ecbd 8b02 	vpop	{d8}
 810e9e6:	bd08      	pop	{r3, pc}
 810e9e8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 810ea0c <expf+0x64>
 810e9ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 810e9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e9f4:	d5f3      	bpl.n	810e9de <expf+0x36>
 810e9f6:	f7fc fdd9 	bl	810b5ac <__errno>
 810e9fa:	2322      	movs	r3, #34	@ 0x22
 810e9fc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 810ea10 <expf+0x68>
 810ea00:	6003      	str	r3, [r0, #0]
 810ea02:	e7ec      	b.n	810e9de <expf+0x36>
 810ea04:	42b17217 	.word	0x42b17217
 810ea08:	7f800000 	.word	0x7f800000
 810ea0c:	c2cff1b5 	.word	0xc2cff1b5
 810ea10:	00000000 	.word	0x00000000

0810ea14 <log10f>:
 810ea14:	b508      	push	{r3, lr}
 810ea16:	ed2d 8b02 	vpush	{d8}
 810ea1a:	eeb0 8a40 	vmov.f32	s16, s0
 810ea1e:	f000 fa39 	bl	810ee94 <__ieee754_log10f>
 810ea22:	eeb4 8a48 	vcmp.f32	s16, s16
 810ea26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ea2a:	d60f      	bvs.n	810ea4c <log10f+0x38>
 810ea2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810ea30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ea34:	d80a      	bhi.n	810ea4c <log10f+0x38>
 810ea36:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810ea3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ea3e:	d108      	bne.n	810ea52 <log10f+0x3e>
 810ea40:	f7fc fdb4 	bl	810b5ac <__errno>
 810ea44:	2322      	movs	r3, #34	@ 0x22
 810ea46:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 810ea68 <log10f+0x54>
 810ea4a:	6003      	str	r3, [r0, #0]
 810ea4c:	ecbd 8b02 	vpop	{d8}
 810ea50:	bd08      	pop	{r3, pc}
 810ea52:	f7fc fdab 	bl	810b5ac <__errno>
 810ea56:	ecbd 8b02 	vpop	{d8}
 810ea5a:	2321      	movs	r3, #33	@ 0x21
 810ea5c:	6003      	str	r3, [r0, #0]
 810ea5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810ea62:	4802      	ldr	r0, [pc, #8]	@ (810ea6c <log10f+0x58>)
 810ea64:	f7fc bdde 	b.w	810b624 <nanf>
 810ea68:	ff800000 	.word	0xff800000
 810ea6c:	0819bbc0 	.word	0x0819bbc0

0810ea70 <sqrtf>:
 810ea70:	b508      	push	{r3, lr}
 810ea72:	ed2d 8b02 	vpush	{d8}
 810ea76:	eeb0 8a40 	vmov.f32	s16, s0
 810ea7a:	f000 f847 	bl	810eb0c <__ieee754_sqrtf>
 810ea7e:	eeb4 8a48 	vcmp.f32	s16, s16
 810ea82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ea86:	d60c      	bvs.n	810eaa2 <sqrtf+0x32>
 810ea88:	eddf 8a07 	vldr	s17, [pc, #28]	@ 810eaa8 <sqrtf+0x38>
 810ea8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 810ea90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ea94:	d505      	bpl.n	810eaa2 <sqrtf+0x32>
 810ea96:	f7fc fd89 	bl	810b5ac <__errno>
 810ea9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 810ea9e:	2321      	movs	r3, #33	@ 0x21
 810eaa0:	6003      	str	r3, [r0, #0]
 810eaa2:	ecbd 8b02 	vpop	{d8}
 810eaa6:	bd08      	pop	{r3, pc}
 810eaa8:	00000000 	.word	0x00000000

0810eaac <finitef>:
 810eaac:	ee10 3a10 	vmov	r3, s0
 810eab0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 810eab4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 810eab8:	bfac      	ite	ge
 810eaba:	2000      	movge	r0, #0
 810eabc:	2001      	movlt	r0, #1
 810eabe:	4770      	bx	lr

0810eac0 <with_errnof>:
 810eac0:	b510      	push	{r4, lr}
 810eac2:	ed2d 8b02 	vpush	{d8}
 810eac6:	eeb0 8a40 	vmov.f32	s16, s0
 810eaca:	4604      	mov	r4, r0
 810eacc:	f7fc fd6e 	bl	810b5ac <__errno>
 810ead0:	eeb0 0a48 	vmov.f32	s0, s16
 810ead4:	ecbd 8b02 	vpop	{d8}
 810ead8:	6004      	str	r4, [r0, #0]
 810eada:	bd10      	pop	{r4, pc}

0810eadc <xflowf>:
 810eadc:	b130      	cbz	r0, 810eaec <xflowf+0x10>
 810eade:	eef1 7a40 	vneg.f32	s15, s0
 810eae2:	ee27 0a80 	vmul.f32	s0, s15, s0
 810eae6:	2022      	movs	r0, #34	@ 0x22
 810eae8:	f7ff bfea 	b.w	810eac0 <with_errnof>
 810eaec:	eef0 7a40 	vmov.f32	s15, s0
 810eaf0:	e7f7      	b.n	810eae2 <xflowf+0x6>
	...

0810eaf4 <__math_uflowf>:
 810eaf4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810eafc <__math_uflowf+0x8>
 810eaf8:	f7ff bff0 	b.w	810eadc <xflowf>
 810eafc:	10000000 	.word	0x10000000

0810eb00 <__math_oflowf>:
 810eb00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810eb08 <__math_oflowf+0x8>
 810eb04:	f7ff bfea 	b.w	810eadc <xflowf>
 810eb08:	70000000 	.word	0x70000000

0810eb0c <__ieee754_sqrtf>:
 810eb0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810eb10:	4770      	bx	lr
	...

0810eb14 <__ieee754_expf>:
 810eb14:	ee10 2a10 	vmov	r2, s0
 810eb18:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 810eb1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 810eb20:	d902      	bls.n	810eb28 <__ieee754_expf+0x14>
 810eb22:	ee30 0a00 	vadd.f32	s0, s0, s0
 810eb26:	4770      	bx	lr
 810eb28:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 810eb2c:	d106      	bne.n	810eb3c <__ieee754_expf+0x28>
 810eb2e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 810ec68 <__ieee754_expf+0x154>
 810eb32:	2900      	cmp	r1, #0
 810eb34:	bf18      	it	ne
 810eb36:	eeb0 0a67 	vmovne.f32	s0, s15
 810eb3a:	4770      	bx	lr
 810eb3c:	484b      	ldr	r0, [pc, #300]	@ (810ec6c <__ieee754_expf+0x158>)
 810eb3e:	4282      	cmp	r2, r0
 810eb40:	dd02      	ble.n	810eb48 <__ieee754_expf+0x34>
 810eb42:	2000      	movs	r0, #0
 810eb44:	f7ff bfdc 	b.w	810eb00 <__math_oflowf>
 810eb48:	2a00      	cmp	r2, #0
 810eb4a:	da05      	bge.n	810eb58 <__ieee754_expf+0x44>
 810eb4c:	4a48      	ldr	r2, [pc, #288]	@ (810ec70 <__ieee754_expf+0x15c>)
 810eb4e:	4293      	cmp	r3, r2
 810eb50:	d902      	bls.n	810eb58 <__ieee754_expf+0x44>
 810eb52:	2000      	movs	r0, #0
 810eb54:	f7ff bfce 	b.w	810eaf4 <__math_uflowf>
 810eb58:	4a46      	ldr	r2, [pc, #280]	@ (810ec74 <__ieee754_expf+0x160>)
 810eb5a:	4293      	cmp	r3, r2
 810eb5c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 810eb60:	d952      	bls.n	810ec08 <__ieee754_expf+0xf4>
 810eb62:	4a45      	ldr	r2, [pc, #276]	@ (810ec78 <__ieee754_expf+0x164>)
 810eb64:	4293      	cmp	r3, r2
 810eb66:	ea4f 0281 	mov.w	r2, r1, lsl #2
 810eb6a:	d834      	bhi.n	810ebd6 <__ieee754_expf+0xc2>
 810eb6c:	4b43      	ldr	r3, [pc, #268]	@ (810ec7c <__ieee754_expf+0x168>)
 810eb6e:	4413      	add	r3, r2
 810eb70:	ed93 7a00 	vldr	s14, [r3]
 810eb74:	4b42      	ldr	r3, [pc, #264]	@ (810ec80 <__ieee754_expf+0x16c>)
 810eb76:	4413      	add	r3, r2
 810eb78:	ee30 7a47 	vsub.f32	s14, s0, s14
 810eb7c:	f1c1 0201 	rsb	r2, r1, #1
 810eb80:	edd3 7a00 	vldr	s15, [r3]
 810eb84:	1a52      	subs	r2, r2, r1
 810eb86:	ee37 0a67 	vsub.f32	s0, s14, s15
 810eb8a:	ee20 6a00 	vmul.f32	s12, s0, s0
 810eb8e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 810ec84 <__ieee754_expf+0x170>
 810eb92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810ec88 <__ieee754_expf+0x174>
 810eb96:	eee6 6a05 	vfma.f32	s13, s12, s10
 810eb9a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 810ec8c <__ieee754_expf+0x178>
 810eb9e:	eea6 5a86 	vfma.f32	s10, s13, s12
 810eba2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810ec90 <__ieee754_expf+0x17c>
 810eba6:	eee5 6a06 	vfma.f32	s13, s10, s12
 810ebaa:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 810ec94 <__ieee754_expf+0x180>
 810ebae:	eea6 5a86 	vfma.f32	s10, s13, s12
 810ebb2:	eef0 6a40 	vmov.f32	s13, s0
 810ebb6:	eee5 6a46 	vfms.f32	s13, s10, s12
 810ebba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 810ebbe:	ee20 5a26 	vmul.f32	s10, s0, s13
 810ebc2:	bb92      	cbnz	r2, 810ec2a <__ieee754_expf+0x116>
 810ebc4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 810ebc8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 810ebcc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810ebd0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 810ebd4:	4770      	bx	lr
 810ebd6:	4b30      	ldr	r3, [pc, #192]	@ (810ec98 <__ieee754_expf+0x184>)
 810ebd8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 810ec9c <__ieee754_expf+0x188>
 810ebdc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 810eca0 <__ieee754_expf+0x18c>
 810ebe0:	4413      	add	r3, r2
 810ebe2:	edd3 7a00 	vldr	s15, [r3]
 810ebe6:	eee0 7a07 	vfma.f32	s15, s0, s14
 810ebea:	eeb0 7a40 	vmov.f32	s14, s0
 810ebee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810ebf2:	ee17 2a90 	vmov	r2, s15
 810ebf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ebfa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810ebfe:	eddf 6a29 	vldr	s13, [pc, #164]	@ 810eca4 <__ieee754_expf+0x190>
 810ec02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810ec06:	e7be      	b.n	810eb86 <__ieee754_expf+0x72>
 810ec08:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 810ec0c:	d20b      	bcs.n	810ec26 <__ieee754_expf+0x112>
 810ec0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810eca8 <__ieee754_expf+0x194>
 810ec12:	ee70 6a26 	vadd.f32	s13, s0, s13
 810ec16:	eef4 6ae5 	vcmpe.f32	s13, s11
 810ec1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ec1e:	dd02      	ble.n	810ec26 <__ieee754_expf+0x112>
 810ec20:	ee30 0a25 	vadd.f32	s0, s0, s11
 810ec24:	4770      	bx	lr
 810ec26:	2200      	movs	r2, #0
 810ec28:	e7af      	b.n	810eb8a <__ieee754_expf+0x76>
 810ec2a:	ee36 6a66 	vsub.f32	s12, s12, s13
 810ec2e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 810ec32:	eec5 6a06 	vdiv.f32	s13, s10, s12
 810ec36:	bfb8      	it	lt
 810ec38:	3264      	addlt	r2, #100	@ 0x64
 810ec3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810ec3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ec42:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810ec46:	ee17 3a90 	vmov	r3, s15
 810ec4a:	bfab      	itete	ge
 810ec4c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 810ec50:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 810ec54:	ee00 3a10 	vmovge	s0, r3
 810ec58:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 810ecac <__ieee754_expf+0x198>
 810ec5c:	bfbc      	itt	lt
 810ec5e:	ee00 3a10 	vmovlt	s0, r3
 810ec62:	ee20 0a27 	vmullt.f32	s0, s0, s15
 810ec66:	4770      	bx	lr
 810ec68:	00000000 	.word	0x00000000
 810ec6c:	42b17217 	.word	0x42b17217
 810ec70:	42cff1b5 	.word	0x42cff1b5
 810ec74:	3eb17218 	.word	0x3eb17218
 810ec78:	3f851591 	.word	0x3f851591
 810ec7c:	081af508 	.word	0x081af508
 810ec80:	081af500 	.word	0x081af500
 810ec84:	3331bb4c 	.word	0x3331bb4c
 810ec88:	b5ddea0e 	.word	0xb5ddea0e
 810ec8c:	388ab355 	.word	0x388ab355
 810ec90:	bb360b61 	.word	0xbb360b61
 810ec94:	3e2aaaab 	.word	0x3e2aaaab
 810ec98:	081af510 	.word	0x081af510
 810ec9c:	3fb8aa3b 	.word	0x3fb8aa3b
 810eca0:	3f317180 	.word	0x3f317180
 810eca4:	3717f7d1 	.word	0x3717f7d1
 810eca8:	7149f2ca 	.word	0x7149f2ca
 810ecac:	0d800000 	.word	0x0d800000

0810ecb0 <__ieee754_logf>:
 810ecb0:	ee10 3a10 	vmov	r3, s0
 810ecb4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 810ecb8:	d106      	bne.n	810ecc8 <__ieee754_logf+0x18>
 810ecba:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 810ee54 <__ieee754_logf+0x1a4>
 810ecbe:	eddf 7a66 	vldr	s15, [pc, #408]	@ 810ee58 <__ieee754_logf+0x1a8>
 810ecc2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810ecc6:	4770      	bx	lr
 810ecc8:	2b00      	cmp	r3, #0
 810ecca:	461a      	mov	r2, r3
 810eccc:	da02      	bge.n	810ecd4 <__ieee754_logf+0x24>
 810ecce:	ee30 7a40 	vsub.f32	s14, s0, s0
 810ecd2:	e7f4      	b.n	810ecbe <__ieee754_logf+0xe>
 810ecd4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 810ecd8:	db02      	blt.n	810ece0 <__ieee754_logf+0x30>
 810ecda:	ee30 0a00 	vadd.f32	s0, s0, s0
 810ecde:	4770      	bx	lr
 810ece0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810ece4:	bfb8      	it	lt
 810ece6:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 810ee5c <__ieee754_logf+0x1ac>
 810ecea:	485d      	ldr	r0, [pc, #372]	@ (810ee60 <__ieee754_logf+0x1b0>)
 810ecec:	bfbe      	ittt	lt
 810ecee:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810ecf2:	f06f 0118 	mvnlt.w	r1, #24
 810ecf6:	ee17 2a90 	vmovlt	r2, s15
 810ecfa:	ea4f 53e2 	mov.w	r3, r2, asr #23
 810ecfe:	f3c2 0216 	ubfx	r2, r2, #0, #23
 810ed02:	4410      	add	r0, r2
 810ed04:	bfa8      	it	ge
 810ed06:	2100      	movge	r1, #0
 810ed08:	3b7f      	subs	r3, #127	@ 0x7f
 810ed0a:	440b      	add	r3, r1
 810ed0c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 810ed10:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 810ed14:	4311      	orrs	r1, r2
 810ed16:	ee00 1a10 	vmov	s0, r1
 810ed1a:	4952      	ldr	r1, [pc, #328]	@ (810ee64 <__ieee754_logf+0x1b4>)
 810ed1c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 810ed20:	f102 000f 	add.w	r0, r2, #15
 810ed24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 810ed28:	4001      	ands	r1, r0
 810ed2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 810ed2e:	bb89      	cbnz	r1, 810ed94 <__ieee754_logf+0xe4>
 810ed30:	eeb5 0a40 	vcmp.f32	s0, #0.0
 810ed34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810ed38:	d10f      	bne.n	810ed5a <__ieee754_logf+0xaa>
 810ed3a:	2b00      	cmp	r3, #0
 810ed3c:	f000 8087 	beq.w	810ee4e <__ieee754_logf+0x19e>
 810ed40:	ee07 3a90 	vmov	s15, r3
 810ed44:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 810ee68 <__ieee754_logf+0x1b8>
 810ed48:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 810ee6c <__ieee754_logf+0x1bc>
 810ed4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ed50:	ee27 0a80 	vmul.f32	s0, s15, s0
 810ed54:	eea7 0a87 	vfma.f32	s0, s15, s14
 810ed58:	4770      	bx	lr
 810ed5a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 810ee70 <__ieee754_logf+0x1c0>
 810ed5e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 810ed62:	eee0 7a66 	vfms.f32	s15, s0, s13
 810ed66:	ee20 7a00 	vmul.f32	s14, s0, s0
 810ed6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 810ed6e:	b913      	cbnz	r3, 810ed76 <__ieee754_logf+0xc6>
 810ed70:	ee30 0a47 	vsub.f32	s0, s0, s14
 810ed74:	4770      	bx	lr
 810ed76:	ee07 3a90 	vmov	s15, r3
 810ed7a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810ee68 <__ieee754_logf+0x1b8>
 810ed7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810ed82:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810ed86:	ee37 0a40 	vsub.f32	s0, s14, s0
 810ed8a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 810ee6c <__ieee754_logf+0x1bc>
 810ed8e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 810ed92:	4770      	bx	lr
 810ed94:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 810ed98:	ee70 7a27 	vadd.f32	s15, s0, s15
 810ed9c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 810ee74 <__ieee754_logf+0x1c4>
 810eda0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 810ee78 <__ieee754_logf+0x1c8>
 810eda4:	4935      	ldr	r1, [pc, #212]	@ (810ee7c <__ieee754_logf+0x1cc>)
 810eda6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 810edaa:	4411      	add	r1, r2
 810edac:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 810edb0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 810edb4:	430a      	orrs	r2, r1
 810edb6:	2a00      	cmp	r2, #0
 810edb8:	ee07 3a90 	vmov	s15, r3
 810edbc:	ee26 5a06 	vmul.f32	s10, s12, s12
 810edc0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810edc4:	ee25 7a05 	vmul.f32	s14, s10, s10
 810edc8:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 810ee80 <__ieee754_logf+0x1d0>
 810edcc:	eee7 7a25 	vfma.f32	s15, s14, s11
 810edd0:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 810ee84 <__ieee754_logf+0x1d4>
 810edd4:	eee7 5a87 	vfma.f32	s11, s15, s14
 810edd8:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 810ee88 <__ieee754_logf+0x1d8>
 810eddc:	eee7 7a24 	vfma.f32	s15, s14, s9
 810ede0:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 810ee8c <__ieee754_logf+0x1dc>
 810ede4:	eee7 4a87 	vfma.f32	s9, s15, s14
 810ede8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 810ee90 <__ieee754_logf+0x1e0>
 810edec:	eee4 7a87 	vfma.f32	s15, s9, s14
 810edf0:	ee67 7a85 	vmul.f32	s15, s15, s10
 810edf4:	eee5 7a87 	vfma.f32	s15, s11, s14
 810edf8:	dd1a      	ble.n	810ee30 <__ieee754_logf+0x180>
 810edfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 810edfe:	ee20 7a07 	vmul.f32	s14, s0, s14
 810ee02:	ee27 7a00 	vmul.f32	s14, s14, s0
 810ee06:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ee0a:	ee67 7a86 	vmul.f32	s15, s15, s12
 810ee0e:	b913      	cbnz	r3, 810ee16 <__ieee754_logf+0x166>
 810ee10:	ee37 7a67 	vsub.f32	s14, s14, s15
 810ee14:	e7ac      	b.n	810ed70 <__ieee754_logf+0xc0>
 810ee16:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 810ee68 <__ieee754_logf+0x1b8>
 810ee1a:	eee6 7a86 	vfma.f32	s15, s13, s12
 810ee1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 810ee22:	ee37 0a40 	vsub.f32	s0, s14, s0
 810ee26:	eddf 7a11 	vldr	s15, [pc, #68]	@ 810ee6c <__ieee754_logf+0x1bc>
 810ee2a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 810ee2e:	4770      	bx	lr
 810ee30:	ee70 7a67 	vsub.f32	s15, s0, s15
 810ee34:	ee67 7a86 	vmul.f32	s15, s15, s12
 810ee38:	b913      	cbnz	r3, 810ee40 <__ieee754_logf+0x190>
 810ee3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 810ee3e:	4770      	bx	lr
 810ee40:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 810ee68 <__ieee754_logf+0x1b8>
 810ee44:	eee6 7ac7 	vfms.f32	s15, s13, s14
 810ee48:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810ee4c:	e7eb      	b.n	810ee26 <__ieee754_logf+0x176>
 810ee4e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 810ee58 <__ieee754_logf+0x1a8>
 810ee52:	4770      	bx	lr
 810ee54:	cc000000 	.word	0xcc000000
 810ee58:	00000000 	.word	0x00000000
 810ee5c:	4c000000 	.word	0x4c000000
 810ee60:	004afb20 	.word	0x004afb20
 810ee64:	007ffff0 	.word	0x007ffff0
 810ee68:	3717f7d1 	.word	0x3717f7d1
 810ee6c:	3f317180 	.word	0x3f317180
 810ee70:	3eaaaaab 	.word	0x3eaaaaab
 810ee74:	3e1cd04f 	.word	0x3e1cd04f
 810ee78:	3e178897 	.word	0x3e178897
 810ee7c:	ffcf5c30 	.word	0xffcf5c30
 810ee80:	3e638e29 	.word	0x3e638e29
 810ee84:	3ecccccd 	.word	0x3ecccccd
 810ee88:	3e3a3325 	.word	0x3e3a3325
 810ee8c:	3e924925 	.word	0x3e924925
 810ee90:	3f2aaaab 	.word	0x3f2aaaab

0810ee94 <__ieee754_log10f>:
 810ee94:	b508      	push	{r3, lr}
 810ee96:	ee10 3a10 	vmov	r3, s0
 810ee9a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 810ee9e:	ed2d 8b02 	vpush	{d8}
 810eea2:	d108      	bne.n	810eeb6 <__ieee754_log10f+0x22>
 810eea4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 810ef2c <__ieee754_log10f+0x98>
 810eea8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 810ef30 <__ieee754_log10f+0x9c>
 810eeac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810eeb0:	ecbd 8b02 	vpop	{d8}
 810eeb4:	bd08      	pop	{r3, pc}
 810eeb6:	2b00      	cmp	r3, #0
 810eeb8:	461a      	mov	r2, r3
 810eeba:	da02      	bge.n	810eec2 <__ieee754_log10f+0x2e>
 810eebc:	ee30 7a40 	vsub.f32	s14, s0, s0
 810eec0:	e7f2      	b.n	810eea8 <__ieee754_log10f+0x14>
 810eec2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 810eec6:	db02      	blt.n	810eece <__ieee754_log10f+0x3a>
 810eec8:	ee30 0a00 	vadd.f32	s0, s0, s0
 810eecc:	e7f0      	b.n	810eeb0 <__ieee754_log10f+0x1c>
 810eece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810eed2:	bfbf      	itttt	lt
 810eed4:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 810ef34 <__ieee754_log10f+0xa0>
 810eed8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810eedc:	f06f 0118 	mvnlt.w	r1, #24
 810eee0:	ee17 2a90 	vmovlt	r2, s15
 810eee4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 810eee8:	bfa8      	it	ge
 810eeea:	2100      	movge	r1, #0
 810eeec:	3b7f      	subs	r3, #127	@ 0x7f
 810eeee:	440b      	add	r3, r1
 810eef0:	0fd9      	lsrs	r1, r3, #31
 810eef2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 810eef6:	ee07 3a90 	vmov	s15, r3
 810eefa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 810eefe:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 810ef02:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 810ef06:	ee00 3a10 	vmov	s0, r3
 810ef0a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810ef0e:	f7ff fecf 	bl	810ecb0 <__ieee754_logf>
 810ef12:	eddf 7a09 	vldr	s15, [pc, #36]	@ 810ef38 <__ieee754_log10f+0xa4>
 810ef16:	ee20 0a27 	vmul.f32	s0, s0, s15
 810ef1a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 810ef3c <__ieee754_log10f+0xa8>
 810ef1e:	eea8 0a27 	vfma.f32	s0, s16, s15
 810ef22:	eddf 7a07 	vldr	s15, [pc, #28]	@ 810ef40 <__ieee754_log10f+0xac>
 810ef26:	eea8 0a27 	vfma.f32	s0, s16, s15
 810ef2a:	e7c1      	b.n	810eeb0 <__ieee754_log10f+0x1c>
 810ef2c:	cc000000 	.word	0xcc000000
 810ef30:	00000000 	.word	0x00000000
 810ef34:	4c000000 	.word	0x4c000000
 810ef38:	3ede5bd9 	.word	0x3ede5bd9
 810ef3c:	355427db 	.word	0x355427db
 810ef40:	3e9a2080 	.word	0x3e9a2080

0810ef44 <_init>:
 810ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ef46:	bf00      	nop
 810ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ef4a:	bc08      	pop	{r3}
 810ef4c:	469e      	mov	lr, r3
 810ef4e:	4770      	bx	lr

0810ef50 <_fini>:
 810ef50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ef52:	bf00      	nop
 810ef54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ef56:	bc08      	pop	{r3}
 810ef58:	469e      	mov	lr, r3
 810ef5a:	4770      	bx	lr
