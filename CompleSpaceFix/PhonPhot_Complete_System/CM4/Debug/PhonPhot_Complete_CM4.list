
PhonPhot_Complete_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8b0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000145e0  0810eb50  0810eb50  0001eb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08123130  08123130  00033130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08123138  08123138  00033138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0812313c  0812313c  0003313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  1000004c  08123140  0004004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00018898  10000248  0812333c  00040248  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10018ae0  0812333c  00048ae0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0005004c  2**0
                  CONTENTS, READONLY
 10 .comment      00000096  00000000  00000000  0005007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027971  00000000  00000000  00050112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a1c  00000000  00000000  00077a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 000104f6  00000000  00000000  0007c49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0008c998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c92  00000000  00000000  0008dc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee4a  00000000  00000000  0008f922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ca84  00000000  00000000  000ce76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019c161  00000000  00000000  000fb1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000053f0  00000000  00000000  00297354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .ipc_data     0000004c  10000000  10000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .debug_line_str 00000099  00000000  00000000  0029c744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000248 	.word	0x10000248
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810eb38 	.word	0x0810eb38

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000024c 	.word	0x1000024c
 81002dc:	0810eb38 	.word	0x0810eb38

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b07      	ldr	r3, [pc, #28]	; (8101120 <SystemInit+0x20>)
 8101102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8101106:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 810110a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810110e:	691a      	ldr	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101110:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	f042 0210 	orr.w	r2, r2, #16
 8101118:	611a      	str	r2, [r3, #16]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810111a:	6099      	str	r1, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <MX_ADC1_Init>:

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8101124:	4837      	ldr	r0, [pc, #220]	; (8101204 <MX_ADC1_Init+0xe0>)
 8101126:	4a38      	ldr	r2, [pc, #224]	; (8101208 <MX_ADC1_Init+0xe4>)
{
 8101128:	b500      	push	{lr}
  hadc1.Instance = ADC1;
 810112a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 810112c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  ADC_MultiModeTypeDef multimode = {0};
 8101130:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8101132:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8101134:	2201      	movs	r2, #1
 8101136:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810113a:	2204      	movs	r2, #4
 810113c:	6102      	str	r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 3;
 810113e:	2203      	movs	r2, #3
{
 8101140:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.NbrOfConversion = 3;
 8101142:	6182      	str	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8101144:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8101146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810114a:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
  ADC_MultiModeTypeDef multimode = {0};
 810114e:	e9cd 3300 	strd	r3, r3, [sp]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101152:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8101156:	e9cd 3304 	strd	r3, r3, [sp, #16]
 810115a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 810115e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8101162:	8283      	strh	r3, [r0, #20]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8101164:	7703      	strb	r3, [r0, #28]
  hadc1.Init.OversamplingMode = DISABLE;
 8101166:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 810116a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 810116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101172:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101176:	f002 f9cf 	bl	8103518 <HAL_ADC_Init>
 810117a:	bb88      	cbnz	r0, 81011e0 <MX_ADC1_Init+0xbc>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810117c:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810117e:	4821      	ldr	r0, [pc, #132]	; (8101204 <MX_ADC1_Init+0xe0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101180:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101182:	4669      	mov	r1, sp
 8101184:	f002 fade 	bl	8103744 <HAL_ADCEx_MultiModeConfigChannel>
 8101188:	2800      	cmp	r0, #0
 810118a:	d137      	bne.n	81011fc <MX_ADC1_Init+0xd8>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 810118c:	4a1f      	ldr	r2, [pc, #124]	; (810120c <MX_ADC1_Init+0xe8>)
 810118e:	9203      	str	r2, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101190:	2106      	movs	r1, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8101192:	2203      	movs	r2, #3
 8101194:	e9cd 1204 	strd	r1, r2, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101198:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810119c:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 810119e:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81011a0:	e9cd 1206 	strd	r1, r2, [sp, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011a4:	4817      	ldr	r0, [pc, #92]	; (8101204 <MX_ADC1_Init+0xe0>)
  sConfig.Offset = 0;
 81011a6:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011a8:	a903      	add	r1, sp, #12
  sConfig.OffsetSignedSaturation = DISABLE;
 81011aa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011ae:	f001 fe71 	bl	8102e94 <HAL_ADC_ConfigChannel>
 81011b2:	bb00      	cbnz	r0, 81011f6 <MX_ADC1_Init+0xd2>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81011b4:	230c      	movs	r3, #12
  sConfig.Channel = ADC_CHANNEL_0;
 81011b6:	2201      	movs	r2, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011b8:	4812      	ldr	r0, [pc, #72]	; (8101204 <MX_ADC1_Init+0xe0>)
 81011ba:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81011be:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011c2:	f001 fe67 	bl	8102e94 <HAL_ADC_ConfigChannel>
 81011c6:	b998      	cbnz	r0, 81011f0 <MX_ADC1_Init+0xcc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 81011c8:	4a11      	ldr	r2, [pc, #68]	; (8101210 <MX_ADC1_Init+0xec>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011ca:	480e      	ldr	r0, [pc, #56]	; (8101204 <MX_ADC1_Init+0xe0>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011cc:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011ce:	a903      	add	r1, sp, #12
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81011d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81011d4:	f001 fe5e 	bl	8102e94 <HAL_ADC_ConfigChannel>
 81011d8:	b928      	cbnz	r0, 81011e6 <MX_ADC1_Init+0xc2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81011da:	b00b      	add	sp, #44	; 0x2c
 81011dc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 81011e0:	f001 f908 	bl	81023f4 <Error_Handler>
 81011e4:	e7ca      	b.n	810117c <MX_ADC1_Init+0x58>
    Error_Handler();
 81011e6:	f001 f905 	bl	81023f4 <Error_Handler>
}
 81011ea:	b00b      	add	sp, #44	; 0x2c
 81011ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 81011f0:	f001 f900 	bl	81023f4 <Error_Handler>
 81011f4:	e7e8      	b.n	81011c8 <MX_ADC1_Init+0xa4>
    Error_Handler();
 81011f6:	f001 f8fd 	bl	81023f4 <Error_Handler>
 81011fa:	e7db      	b.n	81011b4 <MX_ADC1_Init+0x90>
    Error_Handler();
 81011fc:	f001 f8fa 	bl	81023f4 <Error_Handler>
 8101200:	e7c4      	b.n	810118c <MX_ADC1_Init+0x68>
 8101202:	bf00      	nop
 8101204:	10000264 	.word	0x10000264
 8101208:	40022000 	.word	0x40022000
 810120c:	2a000400 	.word	0x2a000400
 8101210:	04300002 	.word	0x04300002

08101214 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8101214:	b500      	push	{lr}

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8101216:	482e      	ldr	r0, [pc, #184]	; (81012d0 <MX_ADC3_Init+0xbc>)
 8101218:	492e      	ldr	r1, [pc, #184]	; (81012d4 <MX_ADC3_Init+0xc0>)
 810121a:	6001      	str	r1, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 810121c:	2300      	movs	r3, #0
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 810121e:	2101      	movs	r1, #1
 8101220:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101224:	2104      	movs	r1, #4
 8101226:	6101      	str	r1, [r0, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.NbrOfConversion = 3;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8101228:	f44f 6190 	mov.w	r1, #1152	; 0x480
{
 810122c:	b089      	sub	sp, #36	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 810122e:	6241      	str	r1, [r0, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101230:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc3.Init.NbrOfConversion = 3;
 8101234:	2203      	movs	r2, #3
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8101236:	6281      	str	r1, [r0, #40]	; 0x28
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8101238:	8283      	strh	r3, [r0, #20]
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 810123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  ADC_ChannelConfTypeDef sConfig = {0};
 810123e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8101242:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8101246:	e9cd 3305 	strd	r3, r3, [sp, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 810124a:	e9c0 210b 	strd	r2, r1, [r0, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 810124e:	9307      	str	r3, [sp, #28]
  hadc3.Init.NbrOfConversion = 3;
 8101250:	6182      	str	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8101252:	7703      	strb	r3, [r0, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8101254:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8101256:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 810125a:	f002 f95d 	bl	8103518 <HAL_ADC_Init>
 810125e:	bb48      	cbnz	r0, 81012b4 <MX_ADC3_Init+0xa0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8101260:	4a1d      	ldr	r2, [pc, #116]	; (81012d8 <MX_ADC3_Init+0xc4>)
 8101262:	9201      	str	r2, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101264:	2106      	movs	r1, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8101266:	2203      	movs	r2, #3
 8101268:	e9cd 1202 	strd	r1, r2, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810126c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8101270:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8101272:	2300      	movs	r3, #0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8101274:	e9cd 1204 	strd	r1, r2, [sp, #16]
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101278:	4815      	ldr	r0, [pc, #84]	; (81012d0 <MX_ADC3_Init+0xbc>)
  sConfig.Offset = 0;
 810127a:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810127c:	eb0d 0102 	add.w	r1, sp, r2
  sConfig.OffsetSignedSaturation = DISABLE;
 8101280:	f88d 301d 	strb.w	r3, [sp, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101284:	f001 fe06 	bl	8102e94 <HAL_ADC_ConfigChannel>
 8101288:	b9f8      	cbnz	r0, 81012ca <MX_ADC3_Init+0xb6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 810128a:	2201      	movs	r2, #1
  sConfig.Rank = ADC_REGULAR_RANK_2;
 810128c:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810128e:	4810      	ldr	r0, [pc, #64]	; (81012d0 <MX_ADC3_Init+0xbc>)
 8101290:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8101292:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8101296:	f001 fdfd 	bl	8102e94 <HAL_ADC_ConfigChannel>
 810129a:	b998      	cbnz	r0, 81012c4 <MX_ADC3_Init+0xb0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 810129c:	4a0f      	ldr	r2, [pc, #60]	; (81012dc <MX_ADC3_Init+0xc8>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810129e:	480c      	ldr	r0, [pc, #48]	; (81012d0 <MX_ADC3_Init+0xbc>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81012a0:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81012a2:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 81012a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81012a8:	f001 fdf4 	bl	8102e94 <HAL_ADC_ConfigChannel>
 81012ac:	b928      	cbnz	r0, 81012ba <MX_ADC3_Init+0xa6>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81012ae:	b009      	add	sp, #36	; 0x24
 81012b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 81012b4:	f001 f89e 	bl	81023f4 <Error_Handler>
 81012b8:	e7d2      	b.n	8101260 <MX_ADC3_Init+0x4c>
    Error_Handler();
 81012ba:	f001 f89b 	bl	81023f4 <Error_Handler>
}
 81012be:	b009      	add	sp, #36	; 0x24
 81012c0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 81012c4:	f001 f896 	bl	81023f4 <Error_Handler>
 81012c8:	e7e8      	b.n	810129c <MX_ADC3_Init+0x88>
    Error_Handler();
 81012ca:	f001 f893 	bl	81023f4 <Error_Handler>
 81012ce:	e7dc      	b.n	810128a <MX_ADC3_Init+0x76>
 81012d0:	100002c8 	.word	0x100002c8
 81012d4:	58026000 	.word	0x58026000
 81012d8:	1d500080 	.word	0x1d500080
 81012dc:	04300002 	.word	0x04300002

081012e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81012e0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 81012e2:	6803      	ldr	r3, [r0, #0]
 81012e4:	4a5d      	ldr	r2, [pc, #372]	; (810145c <HAL_ADC_MspInit+0x17c>)
{
 81012e6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012e8:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 81012ea:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012ec:	e9cd 4407 	strd	r4, r4, [sp, #28]
 81012f0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
{
 81012f4:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012f6:	940b      	str	r4, [sp, #44]	; 0x2c
  if(adcHandle->Instance==ADC1)
 81012f8:	d004      	beq.n	8101304 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 81012fa:	4a59      	ldr	r2, [pc, #356]	; (8101460 <HAL_ADC_MspInit+0x180>)
 81012fc:	4293      	cmp	r3, r2
 81012fe:	d058      	beq.n	81013b2 <HAL_ADC_MspInit+0xd2>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8101300:	b00d      	add	sp, #52	; 0x34
 8101302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101304:	4b57      	ldr	r3, [pc, #348]	; (8101464 <HAL_ADC_MspInit+0x184>)
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 8101306:	4858      	ldr	r0, [pc, #352]	; (8101468 <HAL_ADC_MspInit+0x188>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101308:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    hdma_adc1.Instance = DMA1_Stream0;
 810130c:	4e57      	ldr	r6, [pc, #348]	; (810146c <HAL_ADC_MspInit+0x18c>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 810130e:	f042 0220 	orr.w	r2, r2, #32
 8101312:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8101316:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 810131a:	f002 0220 	and.w	r2, r2, #32
 810131e:	9201      	str	r2, [sp, #4]
 8101320:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101322:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101326:	f042 0204 	orr.w	r2, r2, #4
 810132a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810132e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101332:	f002 0204 	and.w	r2, r2, #4
 8101336:	9202      	str	r2, [sp, #8]
 8101338:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810133a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810133e:	f042 0201 	orr.w	r2, r2, #1
 8101342:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810134a:	f003 0301 	and.w	r3, r3, #1
 810134e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = MEMS_AIN_1_Pin;
 8101350:	2301      	movs	r3, #1
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 8101352:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = MEMS_AIN_1_Pin;
 8101354:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101356:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101358:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 810135a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 810135c:	f003 fcc2 	bl	8104ce4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101360:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8101364:	4608      	mov	r0, r1
 8101366:	f001 fd8b 	bl	8102e80 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810136a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 810136e:	4608      	mov	r0, r1
 8101370:	f001 fd86 	bl	8102e80 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8101374:	4a3e      	ldr	r2, [pc, #248]	; (8101470 <HAL_ADC_MspInit+0x190>)
 8101376:	2309      	movs	r3, #9
 8101378:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 810137c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101384:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8101388:	f44f 7380 	mov.w	r3, #256	; 0x100
 810138c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101390:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8101394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101398:	e9c6 3408 	strd	r3, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 810139c:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 810139e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 81013a2:	f002 fc83 	bl	8103cac <HAL_DMA_Init>
 81013a6:	2800      	cmp	r0, #0
 81013a8:	d155      	bne.n	8101456 <HAL_ADC_MspInit+0x176>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 81013aa:	64ee      	str	r6, [r5, #76]	; 0x4c
 81013ac:	63b5      	str	r5, [r6, #56]	; 0x38
}
 81013ae:	b00d      	add	sp, #52	; 0x34
 81013b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 81013b2:	4b2c      	ldr	r3, [pc, #176]	; (8101464 <HAL_ADC_MspInit+0x184>)
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013b4:	482f      	ldr	r0, [pc, #188]	; (8101474 <HAL_ADC_MspInit+0x194>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 81013b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    hdma_adc3.Instance = DMA1_Stream1;
 81013ba:	4e2f      	ldr	r6, [pc, #188]	; (8101478 <HAL_ADC_MspInit+0x198>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 81013bc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 81013c0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013c8:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 81013cc:	9204      	str	r2, [sp, #16]
 81013ce:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81013d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013d4:	f042 0220 	orr.w	r2, r2, #32
 81013d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013e0:	f002 0220 	and.w	r2, r2, #32
 81013e4:	9205      	str	r2, [sp, #20]
 81013e6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81013e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81013ec:	f042 0204 	orr.w	r2, r2, #4
 81013f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013f8:	f003 0304 	and.w	r3, r3, #4
 81013fc:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81013fe:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101400:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = MEMS_AIN_2_Pin;
 8101402:	f44f 7780 	mov.w	r7, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101406:	e9cd 7307 	strd	r7, r3, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810140a:	9a06      	ldr	r2, [sp, #24]
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 810140c:	f003 fc6a 	bl	8104ce4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8101410:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8101414:	4608      	mov	r0, r1
 8101416:	f001 fd33 	bl	8102e80 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 810141a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 810141e:	4608      	mov	r0, r1
 8101420:	f001 fd2e 	bl	8102e80 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8101424:	4a15      	ldr	r2, [pc, #84]	; (810147c <HAL_ADC_MspInit+0x19c>)
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101426:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8101428:	2373      	movs	r3, #115	; 0x73
 810142a:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 810142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101432:	6133      	str	r3, [r6, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8101434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810143c:	e9c6 1305 	strd	r1, r3, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8101440:	4630      	mov	r0, r6
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8101442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8101446:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 810144a:	e9c6 7307 	strd	r7, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 810144e:	f002 fc2d 	bl	8103cac <HAL_DMA_Init>
 8101452:	2800      	cmp	r0, #0
 8101454:	d0a9      	beq.n	81013aa <HAL_ADC_MspInit+0xca>
      Error_Handler();
 8101456:	f000 ffcd 	bl	81023f4 <Error_Handler>
 810145a:	e7a6      	b.n	81013aa <HAL_ADC_MspInit+0xca>
 810145c:	40022000 	.word	0x40022000
 8101460:	58026000 	.word	0x58026000
 8101464:	58024400 	.word	0x58024400
 8101468:	58020800 	.word	0x58020800
 810146c:	1000032c 	.word	0x1000032c
 8101470:	40020010 	.word	0x40020010
 8101474:	58021400 	.word	0x58021400
 8101478:	100003a4 	.word	0x100003a4
 810147c:	40020028 	.word	0x40020028

08101480 <limitFloat>:
	}
}

float limitFloat ( float _tested_value, float _min_bound, float _max_bound )
{
  if(_tested_value < _min_bound)
 8101480:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8101484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101488:	d407      	bmi.n	810149a <limitFloat+0x1a>
  if(_tested_value > _max_bound)
  {
    return _max_bound;
  }

  return _tested_value;
 810148a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 810148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101492:	bfc8      	it	gt
 8101494:	eeb0 0a41 	vmovgt.f32	s0, s2
 8101498:	4770      	bx	lr
    return _min_bound;
 810149a:	eeb0 0a60 	vmov.f32	s0, s1
}
 810149e:	4770      	bx	lr

081014a0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81014a0:	4b14      	ldr	r3, [pc, #80]	; (81014f4 <MX_DMA_Init+0x54>)
{
 81014a2:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 81014a4:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 81014a8:	f040 0001 	orr.w	r0, r0, #1
 81014ac:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
 81014b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
{
 81014b4:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81014b6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 81014b8:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81014bc:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 81014be:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81014c0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 81014c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 81014c4:	f002 f9ba 	bl	810383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 81014c8:	200b      	movs	r0, #11
 81014ca:	f002 f9f5 	bl	81038b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 81014ce:	2200      	movs	r2, #0
 81014d0:	4611      	mov	r1, r2
 81014d2:	200c      	movs	r0, #12
 81014d4:	f002 f9b2 	bl	810383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 81014d8:	200c      	movs	r0, #12
 81014da:	f002 f9ed 	bl	81038b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 81014de:	2200      	movs	r2, #0
 81014e0:	202f      	movs	r0, #47	; 0x2f
 81014e2:	4611      	mov	r1, r2
 81014e4:	f002 f9aa 	bl	810383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014e8:	202f      	movs	r0, #47	; 0x2f

}
 81014ea:	b003      	add	sp, #12
 81014ec:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 81014f0:	f002 b9e2 	b.w	81038b8 <HAL_NVIC_EnableIRQ>
 81014f4:	58024400 	.word	0x58024400

081014f8 <copySamplesForFFT>:

  //setUserLED1State( FALSE );
}

static void copySamplesForFFT( volatile uint16_t *_source1, volatile uint16_t *_source2 )
{
 81014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 81014fa:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 81015ec <copySamplesForFFT+0xf4>
 81014fe:	4d3c      	ldr	r5, [pc, #240]	; (81015f0 <copySamplesForFFT+0xf8>)
 8101500:	4c3c      	ldr	r4, [pc, #240]	; (81015f4 <copySamplesForFFT+0xfc>)
    // ADC3 packed microphone 1,4,5

    // convert to voltage
    // apply HANN_WINDOW_COEFF
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101502:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81015f8 <copySamplesForFFT+0x100>
 8101506:	3002      	adds	r0, #2
 8101508:	3102      	adds	r1, #2
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 810150a:	2200      	movs	r2, #0
 810150c:	e001      	b.n	8101512 <copySamplesForFFT+0x1a>
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810150e:	ecb5 7a01 	vldmia	r5!, {s14}
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 8101512:	f830 3c02 	ldrh.w	r3, [r0, #-2]
 8101516:	b29b      	uxth	r3, r3
 8101518:	ee07 3a90 	vmov	s15, r3
 810151c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101520:	eb04 0682 	add.w	r6, r4, r2, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101524:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 8101528:	f502 7c00 	add.w	ip, r2, #512	; 0x200
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810152c:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 8101530:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
    fft_sample_buffer[0][_index] = (3.3f / 65535.0f * (float)_source1[0 + _index * 3]
 8101534:	edc6 7a00 	vstr	s15, [r6]
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 8101538:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 810153c:	b29b      	uxth	r3, r3
 810153e:	ee07 3a90 	vmov	s15, r3
 8101542:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 8101546:	f502 6780 	add.w	r7, r2, #1024	; 0x400
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810154a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 810154e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101552:	ee67 7a87 	vmul.f32	s15, s15, s14
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101556:	f502 66c0 	add.w	r6, r2, #1536	; 0x600
    fft_sample_buffer[1][_index] = (3.3f / 65535.0f * (float)_source2[0 + _index * 3]
 810155a:	edcc 7a00 	vstr	s15, [ip]
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 810155e:	8803      	ldrh	r3, [r0, #0]
 8101560:	b29b      	uxth	r3, r3
 8101562:	ee07 3a90 	vmov	s15, r3
 8101566:	eef8 7a67 	vcvt.f32.u32	s15, s15
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 810156a:	3106      	adds	r1, #6
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 810156c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101570:	eb04 0686 	add.w	r6, r4, r6, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101574:	ee67 7a87 	vmul.f32	s15, s15, s14
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 8101578:	f502 6e00 	add.w	lr, r2, #2048	; 0x800
    fft_sample_buffer[2][_index] = (3.3f / 65535.0f * (float)_source1[1 + _index * 3]
 810157c:	edc7 7a00 	vstr	s15, [r7]
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 8101580:	8843      	ldrh	r3, [r0, #2]
 8101582:	b29b      	uxth	r3, r3
 8101584:	ee07 3a90 	vmov	s15, r3
 8101588:	eef8 7a67 	vcvt.f32.u32	s15, s15
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 810158c:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101590:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 8101594:	f502 6c20 	add.w	ip, r2, #2560	; 0xa00
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 8101598:	ee67 7a87 	vmul.f32	s15, s15, s14
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 810159c:	3201      	adds	r2, #1
    fft_sample_buffer[3][_index] = (3.3f / 65535.0f * (float)_source1[2 + _index * 3]
 810159e:	edc6 7a00 	vstr	s15, [r6]
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 81015a2:	f831 3c06 	ldrh.w	r3, [r1, #-6]
 81015a6:	b29b      	uxth	r3, r3
 81015a8:	ee07 3a90 	vmov	s15, r3
 81015ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 81015b0:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81015b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81015b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81015c0:	f100 0006 	add.w	r0, r0, #6
    fft_sample_buffer[4][_index] = (3.3f / 65535.0f * (float)_source2[1 + _index * 3]
 81015c4:	edce 7a00 	vstr	s15, [lr]
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 81015c8:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 81015cc:	b29b      	uxth	r3, r3
 81015ce:	ee07 3a90 	vmov	s15, r3
 81015d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                  - (0.0f)) * HANN_WINDOW_COEFF[_index];
 81015d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 81015da:	ee67 7a87 	vmul.f32	s15, s15, s14
    fft_sample_buffer[5][_index] = (3.3f / 65535.0f * (float)_source2[2 + _index * 3]
 81015de:	edcc 7a00 	vstr	s15, [ip]
  for ( _index = 0; _index < FFT_BATCH_SIZE; _index++ )
 81015e2:	d194      	bne.n	810150e <copySamplesForFFT+0x16>
  }

  // set ready for FFT flag so base loop or an RTOS task can perform the op without blocking interrupts
  fft_samples_ready = TRUE;
 81015e4:	4b05      	ldr	r3, [pc, #20]	; (81015fc <copySamplesForFFT+0x104>)
 81015e6:	2201      	movs	r2, #1
 81015e8:	701a      	strb	r2, [r3, #0]
}
 81015ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81015ec:	00000000 	.word	0x00000000
 81015f0:	0810eb64 	.word	0x0810eb64
 81015f4:	10014dd4 	.word	0x10014dd4
 81015f8:	38533406 	.word	0x38533406
 81015fc:	10017dd4 	.word	0x10017dd4

08101600 <performOutputAudioFIR>:
{
 8101600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8101604:	4f59      	ldr	r7, [pc, #356]	; (810176c <performOutputAudioFIR+0x16c>)
 8101606:	468c      	mov	ip, r1
 8101608:	f107 0558 	add.w	r5, r7, #88	; 0x58
 810160c:	f201 4156 	addw	r1, r1, #1110	; 0x456
 8101610:	463c      	mov	r4, r7
 8101612:	2302      	movs	r3, #2
  int32_t _temp = 0;
 8101614:	2600      	movs	r6, #0
 8101616:	e001      	b.n	810161c <performOutputAudioFIR+0x1c>
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101618:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 810161c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8101620:	b212      	sxth	r2, r2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101622:	fb02 f303 	mul.w	r3, r2, r3
  for ( _index = 0; _index < 45; _index++ )
 8101626:	42ac      	cmp	r4, r5
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 45 + _index]
 8101628:	eb06 4623 	add.w	r6, r6, r3, asr #16
  for ( _index = 0; _index < 45; _index++ )
 810162c:	d1f4      	bne.n	8101618 <performOutputAudioFIR+0x18>
 810162e:	4c50      	ldr	r4, [pc, #320]	; (8101770 <performOutputAudioFIR+0x170>)
 8101630:	4605      	mov	r5, r0
 8101632:	4686      	mov	lr, r0
 8101634:	f104 011c 	add.w	r1, r4, #28
 8101638:	f44f 73ca 	mov.w	r3, #404	; 0x194
 810163c:	e001      	b.n	8101642 <performOutputAudioFIR+0x42>
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810163e:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
    _temp += ((int32_t)_current_data_buffer[_index - 45]
 8101642:	f83e 2b02 	ldrh.w	r2, [lr], #2
 8101646:	b212      	sxth	r2, r2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101648:	fb02 f303 	mul.w	r3, r2, r3
  for ( ; _index < 60; _index++ )
 810164c:	428c      	cmp	r4, r1
    _temp += ((int32_t)_current_data_buffer[_index - 45]
 810164e:	eb06 4623 	add.w	r6, r6, r3, asr #16
  for ( ; _index < 60; _index++ )
 8101652:	d1f4      	bne.n	810163e <performOutputAudioFIR+0x3e>
  output_audio_filtered_buffer[0] = _temp * output_audio_base_gain;
 8101654:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8101784 <performOutputAudioFIR+0x184>
 8101658:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8101780 <performOutputAudioFIR+0x180>
 810165c:	f8b9 3000 	ldrh.w	r3, [r9]
 8101660:	f8df a124 	ldr.w	sl, [pc, #292]	; 8101788 <performOutputAudioFIR+0x188>
 8101664:	fb16 f303 	smulbb	r3, r6, r3
 8101668:	b21b      	sxth	r3, r3
 810166a:	f8a8 3000 	strh.w	r3, [r8]
  for ( _index = 0; _index < 30; _index++ )
 810166e:	f20c 4e74 	addw	lr, ip, #1140	; 0x474
  output_audio_filtered_buffer[0] = _temp * output_audio_base_gain;
 8101672:	f1aa 063a 	sub.w	r6, sl, #58	; 0x3a
 8101676:	2202      	movs	r2, #2
  _temp = 0;
 8101678:	2300      	movs	r3, #0
 810167a:	e001      	b.n	8101680 <performOutputAudioFIR+0x80>
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810167c:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 8101680:	f83e 4b02 	ldrh.w	r4, [lr], #2
 8101684:	b224      	sxth	r4, r4
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 8101686:	fb04 f202 	mul.w	r2, r4, r2
  for ( _index = 0; _index < 30; _index++ )
 810168a:	4556      	cmp	r6, sl
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 30 + _index]
 810168c:	eb03 4322 	add.w	r3, r3, r2, asr #16
  for ( _index = 0; _index < 30; _index++ )
 8101690:	d1f4      	bne.n	810167c <performOutputAudioFIR+0x7c>
 8101692:	4e38      	ldr	r6, [pc, #224]	; (8101774 <performOutputAudioFIR+0x174>)
 8101694:	4686      	mov	lr, r0
 8101696:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 810169a:	e001      	b.n	81016a0 <performOutputAudioFIR+0xa0>
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 810169c:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
    _temp += ((int32_t)_current_data_buffer[_index - 30]
 81016a0:	f83e 4b02 	ldrh.w	r4, [lr], #2
 81016a4:	b224      	sxth	r4, r4
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81016a6:	fb04 f202 	mul.w	r2, r4, r2
  for ( ; _index < 60; _index++ )
 81016aa:	428e      	cmp	r6, r1
    _temp += ((int32_t)_current_data_buffer[_index - 30]
 81016ac:	eb03 4322 	add.w	r3, r3, r2, asr #16
  for ( ; _index < 60; _index++ )
 81016b0:	d1f4      	bne.n	810169c <performOutputAudioFIR+0x9c>
  output_audio_filtered_buffer[1] = _temp * output_audio_base_gain;
 81016b2:	f8b9 2000 	ldrh.w	r2, [r9]
 81016b6:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 810178c <performOutputAudioFIR+0x18c>
 81016ba:	fb13 f302 	smulbb	r3, r3, r2
 81016be:	b21b      	sxth	r3, r3
 81016c0:	f8a8 3002 	strh.w	r3, [r8, #2]
  for ( _index = 0; _index < 15; _index++ )
 81016c4:	f20c 4c92 	addw	ip, ip, #1170	; 0x492
  output_audio_filtered_buffer[1] = _temp * output_audio_base_gain;
 81016c8:	2302      	movs	r3, #2
 81016ca:	f1ae 061c 	sub.w	r6, lr, #28
  _temp = 0;
 81016ce:	2400      	movs	r4, #0
 81016d0:	e001      	b.n	81016d6 <performOutputAudioFIR+0xd6>
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81016d2:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 81016d6:	f83c 2b02 	ldrh.w	r2, [ip], #2
 81016da:	b212      	sxth	r2, r2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81016dc:	fb02 f303 	mul.w	r3, r2, r3
  for ( _index = 0; _index < 15; _index++ )
 81016e0:	4576      	cmp	r6, lr
    _temp += ((int32_t)_previous_data_buffer[OUTPUT_AUDIO_BUFFER_SIZE * ADC_OUTPUT_AUDIO_OVERSAMPLING_RATIO - 15 + _index]
 81016e2:	eb04 4423 	add.w	r4, r4, r3, asr #16
  for ( _index = 0; _index < 15; _index++ )
 81016e6:	d1f4      	bne.n	81016d2 <performOutputAudioFIR+0xd2>
 81016e8:	4606      	mov	r6, r0
 81016ea:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 81016ee:	4822      	ldr	r0, [pc, #136]	; (8101778 <performOutputAudioFIR+0x178>)
 81016f0:	e001      	b.n	81016f6 <performOutputAudioFIR+0xf6>
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81016f2:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
    _temp += ((int32_t)_current_data_buffer[_index - 15]
 81016f6:	f836 2b02 	ldrh.w	r2, [r6], #2
 81016fa:	b212      	sxth	r2, r2
           * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_index])
 81016fc:	fb02 f303 	mul.w	r3, r2, r3
  for ( ; _index < 60; _index++ )
 8101700:	4288      	cmp	r0, r1
    _temp += ((int32_t)_current_data_buffer[_index - 15]
 8101702:	eb04 4423 	add.w	r4, r4, r3, asr #16
  for ( ; _index < 60; _index++ )
 8101706:	d1f4      	bne.n	81016f2 <performOutputAudioFIR+0xf2>
  output_audio_filtered_buffer[2] = _temp * output_audio_base_gain;
 8101708:	f8b9 3000 	ldrh.w	r3, [r9]
 810170c:	fb14 f303 	smulbb	r3, r4, r3
 8101710:	b21b      	sxth	r3, r3
 8101712:	f8a8 3004 	strh.w	r3, [r8, #4]
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 8101716:	2403      	movs	r4, #3
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 8101718:	4626      	mov	r6, r4
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 810171a:	4638      	mov	r0, r7
 810171c:	3401      	adds	r4, #1
 810171e:	46ae      	mov	lr, r5
 8101720:	2302      	movs	r3, #2
    _temp = 0;
 8101722:	f04f 0c00 	mov.w	ip, #0
 8101726:	e001      	b.n	810172c <performOutputAudioFIR+0x12c>
             * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_tap_index])
 8101728:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 810172c:	f83e 2b02 	ldrh.w	r2, [lr], #2
 8101730:	b212      	sxth	r2, r2
             * (int32_t)OUTPUT_AUDIO_FIR_COEFFICIENTS[_tap_index])
 8101732:	fb02 f303 	mul.w	r3, r2, r3
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 8101736:	4288      	cmp	r0, r1
      _temp += ((int32_t)_current_data_buffer[(_fir_output_buffer_index + 1)
 8101738:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    for ( int _tap_index = 0; _tap_index < OUTPUT_AUDIO_FIR_TAPS; _tap_index++ )
 810173c:	d1f4      	bne.n	8101728 <performOutputAudioFIR+0x128>
    output_audio_filtered_buffer[_fir_output_buffer_index] = _temp * output_audio_base_gain;
 810173e:	f8b9 3000 	ldrh.w	r3, [r9]
 8101742:	fb1c f303 	smulbb	r3, ip, r3
 8101746:	b21b      	sxth	r3, r3
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 8101748:	2c28      	cmp	r4, #40	; 0x28
    output_audio_filtered_buffer[_fir_output_buffer_index] = _temp * output_audio_base_gain;
 810174a:	f828 3016 	strh.w	r3, [r8, r6, lsl #1]
  for ( int _fir_output_buffer_index = 3; _fir_output_buffer_index < OUTPUT_AUDIO_BUFFER_SIZE; _fir_output_buffer_index++ )
 810174e:	f105 051e 	add.w	r5, r5, #30
 8101752:	d1e1      	bne.n	8101718 <performOutputAudioFIR+0x118>
  if ( !uart_data_flag )
 8101754:	4b09      	ldr	r3, [pc, #36]	; (810177c <performOutputAudioFIR+0x17c>)
 8101756:	781b      	ldrb	r3, [r3, #0]
 8101758:	b10b      	cbz	r3, 810175e <performOutputAudioFIR+0x15e>
}
 810175a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    playAudio( output_audio_filtered_buffer, OUTPUT_AUDIO_BUFFER_SIZE );
 810175e:	4621      	mov	r1, r4
 8101760:	4807      	ldr	r0, [pc, #28]	; (8101780 <performOutputAudioFIR+0x180>)
}
 8101762:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    playAudio( output_audio_filtered_buffer, OUTPUT_AUDIO_BUFFER_SIZE );
 8101766:	f000 be7f 	b.w	8102468 <playAudio>
 810176a:	bf00      	nop
 810176c:	0810f360 	.word	0x0810f360
 8101770:	0810f3ba 	.word	0x0810f3ba
 8101774:	0810f39c 	.word	0x0810f39c
 8101778:	0810f37e 	.word	0x0810f37e
 810177c:	10018790 	.word	0x10018790
 8101780:	10018740 	.word	0x10018740
 8101784:	10000064 	.word	0x10000064
 8101788:	0810f39a 	.word	0x0810f39a
 810178c:	0810f37c 	.word	0x0810f37c

08101790 <ADC3DMATransferCompleteIRQCallback>:
{
 8101790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( debug_output_enable )
 8101794:	4b72      	ldr	r3, [pc, #456]	; (8101960 <ADC3DMATransferCompleteIRQCallback+0x1d0>)
 8101796:	781b      	ldrb	r3, [r3, #0]
{
 8101798:	b089      	sub	sp, #36	; 0x24
  if ( debug_output_enable )
 810179a:	2b00      	cmp	r3, #0
 810179c:	f040 80ca 	bne.w	8101934 <ADC3DMATransferCompleteIRQCallback+0x1a4>
  setUserLED1State(TRUE);
 81017a0:	2001      	movs	r0, #1
 81017a2:	f000 fe13 	bl	81023cc <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 81017a6:	4a6f      	ldr	r2, [pc, #444]	; (8101964 <ADC3DMATransferCompleteIRQCallback+0x1d4>)
 81017a8:	8813      	ldrh	r3, [r2, #0]
 81017aa:	3301      	adds	r3, #1
 81017ac:	b29b      	uxth	r3, r3
 81017ae:	2b14      	cmp	r3, #20
 81017b0:	8013      	strh	r3, [r2, #0]
 81017b2:	f000 80cd 	beq.w	8101950 <ADC3DMATransferCompleteIRQCallback+0x1c0>
  uint32_t _channel_offset[6] = {0,0,0,0,0,0};
 81017b6:	2300      	movs	r3, #0
 81017b8:	461f      	mov	r7, r3
 81017ba:	4c6b      	ldr	r4, [pc, #428]	; (8101968 <ADC3DMATransferCompleteIRQCallback+0x1d8>)
 81017bc:	496b      	ldr	r1, [pc, #428]	; (810196c <ADC3DMATransferCompleteIRQCallback+0x1dc>)
 81017be:	486c      	ldr	r0, [pc, #432]	; (8101970 <ADC3DMATransferCompleteIRQCallback+0x1e0>)
 81017c0:	9302      	str	r3, [sp, #8]
 81017c2:	46b8      	mov	r8, r7
 81017c4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 81017c8:	46b9      	mov	r9, r7
 81017ca:	46ba      	mov	sl, r7
 81017cc:	9700      	str	r7, [sp, #0]
 81017ce:	46bb      	mov	fp, r7
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 81017d0:	f44f 7616 	mov.w	r6, #600	; 0x258
 81017d4:	9701      	str	r7, [sp, #4]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81017d6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 81017da:	880d      	ldrh	r5, [r1, #0]
 81017dc:	b292      	uxth	r2, r2
 81017de:	b2ad      	uxth	r5, r5
 81017e0:	1b52      	subs	r2, r2, r5
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 81017e2:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
 81017e6:	fa12 f585 	uxtah	r5, r2, r5
 81017ea:	884a      	ldrh	r2, [r1, #2]
 81017ec:	f103 0e01 	add.w	lr, r3, #1
 81017f0:	b292      	uxth	r2, r2
 81017f2:	1aad      	subs	r5, r5, r2
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81017f4:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 81017f8:	fa15 f282 	uxtah	r2, r5, r2
 81017fc:	888d      	ldrh	r5, [r1, #4]
 81017fe:	f103 0c02 	add.w	ip, r3, #2
 8101802:	b2ad      	uxth	r5, r5
 8101804:	1b55      	subs	r5, r2, r5
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 8101806:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 810180a:	fa15 f282 	uxtah	r2, r5, r2
 810180e:	88cd      	ldrh	r5, [r1, #6]
 8101810:	b2ad      	uxth	r5, r5
 8101812:	1b55      	subs	r5, r2, r5
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 8101814:	f830 201e 	ldrh.w	r2, [r0, lr, lsl #1]
 8101818:	fa15 f282 	uxtah	r2, r5, r2
 810181c:	890d      	ldrh	r5, [r1, #8]
 810181e:	b2ad      	uxth	r5, r5
 8101820:	1b55      	subs	r5, r2, r5
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 8101822:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8101826:	fa15 f282 	uxtah	r2, r5, r2
 810182a:	894d      	ldrh	r5, [r1, #10]
 810182c:	b2ad      	uxth	r5, r5
 810182e:	1b52      	subs	r2, r2, r5
                                                          / 6);
 8101830:	4d50      	ldr	r5, [pc, #320]	; (8101974 <ADC3DMATransferCompleteIRQCallback+0x1e4>)
 8101832:	fb85 7502 	smull	r7, r5, r5, r2
 8101836:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 810183a:	4a4f      	ldr	r2, [pc, #316]	; (8101978 <ADC3DMATransferCompleteIRQCallback+0x1e8>)
 810183c:	b22d      	sxth	r5, r5
 810183e:	f822 5016 	strh.w	r5, [r2, r6, lsl #1]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101842:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101846:	9d00      	ldr	r5, [sp, #0]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101848:	fa1b fb82 	uxtah	fp, fp, r2
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 810184c:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8101850:	fa15 f282 	uxtah	r2, r5, r2
 8101854:	9200      	str	r2, [sp, #0]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101856:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 810185a:	9d01      	ldr	r5, [sp, #4]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 810185c:	fa1a fa82 	uxtah	sl, sl, r2
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101860:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 8101864:	fa19 f982 	uxtah	r9, r9, r2
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101868:	f830 201e 	ldrh.w	r2, [r0, lr, lsl #1]
 810186c:	fa18 f882 	uxtah	r8, r8, r2
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101870:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 8101874:	3601      	adds	r6, #1
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101876:	fa15 f282 	uxtah	r2, r5, r2
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 810187a:	f5b6 6f96 	cmp.w	r6, #1200	; 0x4b0
 810187e:	f103 0303 	add.w	r3, r3, #3
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101882:	9201      	str	r2, [sp, #4]
  for ( int index = ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index < ADC_BUFFER_SAMPLES_PER_CHANNEL; index++ )
 8101884:	d1a7      	bne.n	81017d6 <ADC3DMATransferCompleteIRQCallback+0x46>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101886:	4b3d      	ldr	r3, [pc, #244]	; (810197c <ADC3DMATransferCompleteIRQCallback+0x1ec>)
 8101888:	4617      	mov	r7, r2
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810188a:	9a00      	ldr	r2, [sp, #0]
 810188c:	fba3 2602 	umull	r2, r6, r3, r2
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101890:	fba3 250a 	umull	r2, r5, r3, sl
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101894:	fba3 2409 	umull	r2, r4, r3, r9
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101898:	fba3 2008 	umull	r2, r0, r3, r8
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 810189c:	fba3 7207 	umull	r7, r2, r3, r7
 81018a0:	0992      	lsrs	r2, r2, #6
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018a2:	0980      	lsrs	r0, r0, #6
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018a4:	fba3 730b 	umull	r7, r3, r3, fp
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018a8:	09b6      	lsrs	r6, r6, #6
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018aa:	09ad      	lsrs	r5, r5, #6
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018ac:	09a4      	lsrs	r4, r4, #6
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018ae:	e9cd 0206 	strd	r0, r2, [sp, #24]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81018b2:	2200      	movs	r2, #0
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018b4:	9603      	str	r6, [sp, #12]
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018b6:	9504      	str	r5, [sp, #16]
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018b8:	9405      	str	r4, [sp, #20]
 81018ba:	4e31      	ldr	r6, [pc, #196]	; (8101980 <ADC3DMATransferCompleteIRQCallback+0x1f0>)
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 81018bc:	099b      	lsrs	r3, r3, #6
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81018be:	ac02      	add	r4, sp, #8
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81018c0:	f644 651e 	movw	r5, #19998	; 0x4e1e
      channel_is_valid[_channel] = FALSE;
 81018c4:	4694      	mov	ip, r2
      channel_is_valid[_channel] = TRUE;
 81018c6:	2701      	movs	r7, #1
 81018c8:	e010      	b.n	81018ec <ADC3DMATransferCompleteIRQCallback+0x15c>
 81018ca:	54b7      	strb	r7, [r6, r2]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 81018cc:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 81018d0:	b280      	uxth	r0, r0
 81018d2:	4298      	cmp	r0, r3
 81018d4:	d222      	bcs.n	810191c <ADC3DMATransferCompleteIRQCallback+0x18c>
        adc_channel_dynamic_offsets[_channel]++;
 81018d6:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 81018da:	3301      	adds	r3, #1
 81018dc:	b29b      	uxth	r3, r3
 81018de:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81018e2:	3201      	adds	r2, #1
 81018e4:	2a06      	cmp	r2, #6
 81018e6:	d00b      	beq.n	8101900 <ADC3DMATransferCompleteIRQCallback+0x170>
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81018e8:	f854 3f04 	ldr.w	r3, [r4, #4]!
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 81018ec:	f5a3 40b1 	sub.w	r0, r3, #22656	; 0x5880
 81018f0:	3870      	subs	r0, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 81018f2:	42a8      	cmp	r0, r5
 81018f4:	d9e9      	bls.n	81018ca <ADC3DMATransferCompleteIRQCallback+0x13a>
      channel_is_valid[_channel] = FALSE;
 81018f6:	f806 c002 	strb.w	ip, [r6, r2]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81018fa:	3201      	adds	r2, #1
 81018fc:	2a06      	cmp	r2, #6
 81018fe:	d1f3      	bne.n	81018e8 <ADC3DMATransferCompleteIRQCallback+0x158>
  performOutputAudioFIR( &output_audio_filter_input_buffer[ADC_BUFFER_SAMPLES_PER_CHANNEL / 2], &output_audio_filter_input_buffer[0] );
 8101900:	491d      	ldr	r1, [pc, #116]	; (8101978 <ADC3DMATransferCompleteIRQCallback+0x1e8>)
 8101902:	f501 6096 	add.w	r0, r1, #1200	; 0x4b0
 8101906:	f7ff fe7b 	bl	8101600 <performOutputAudioFIR>
  setUserLED1State(FALSE);
 810190a:	2000      	movs	r0, #0
 810190c:	f000 fd5e 	bl	81023cc <setUserLED1State>
  if ( debug_output_enable )
 8101910:	4b13      	ldr	r3, [pc, #76]	; (8101960 <ADC3DMATransferCompleteIRQCallback+0x1d0>)
 8101912:	781b      	ldrb	r3, [r3, #0]
 8101914:	b9a3      	cbnz	r3, 8101940 <ADC3DMATransferCompleteIRQCallback+0x1b0>
}
 8101916:	b009      	add	sp, #36	; 0x24
 8101918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 810191c:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8101920:	b280      	uxth	r0, r0
 8101922:	4298      	cmp	r0, r3
 8101924:	d9dd      	bls.n	81018e2 <ADC3DMATransferCompleteIRQCallback+0x152>
        adc_channel_dynamic_offsets[_channel]--;
 8101926:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 810192a:	3b01      	subs	r3, #1
 810192c:	b29b      	uxth	r3, r3
 810192e:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8101932:	e7d6      	b.n	81018e2 <ADC3DMATransferCompleteIRQCallback+0x152>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 8101934:	4813      	ldr	r0, [pc, #76]	; (8101984 <ADC3DMATransferCompleteIRQCallback+0x1f4>)
 8101936:	2201      	movs	r2, #1
 8101938:	2104      	movs	r1, #4
 810193a:	f003 fb05 	bl	8104f48 <HAL_GPIO_WritePin>
 810193e:	e72f      	b.n	81017a0 <ADC3DMATransferCompleteIRQCallback+0x10>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 8101940:	4810      	ldr	r0, [pc, #64]	; (8101984 <ADC3DMATransferCompleteIRQCallback+0x1f4>)
 8101942:	2200      	movs	r2, #0
 8101944:	2104      	movs	r1, #4
}
 8101946:	b009      	add	sp, #36	; 0x24
 8101948:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 810194c:	f003 bafc 	b.w	8104f48 <HAL_GPIO_WritePin>
    fft_op_skip_counter = 0;
 8101950:	2300      	movs	r3, #0
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 8101952:	490d      	ldr	r1, [pc, #52]	; (8101988 <ADC3DMATransferCompleteIRQCallback+0x1f8>)
 8101954:	480d      	ldr	r0, [pc, #52]	; (810198c <ADC3DMATransferCompleteIRQCallback+0x1fc>)
    fft_op_skip_counter = 0;
 8101956:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( &adc1_read_buffer[(ADC1_CHANNELS*ADC_BUFFER_SAMPLES_PER_CHANNEL)/2],
 8101958:	f7ff fdce 	bl	81014f8 <copySamplesForFFT>
 810195c:	e72b      	b.n	81017b6 <ADC3DMATransferCompleteIRQCallback+0x26>
 810195e:	bf00      	nop
 8101960:	10003c7a 	.word	0x10003c7a
 8101964:	10011dcc 	.word	0x10011dcc
 8101968:	1000041c 	.word	0x1000041c
 810196c:	10000054 	.word	0x10000054
 8101970:	1000203c 	.word	0x1000203c
 8101974:	2aaaaaab 	.word	0x2aaaaaab
 8101978:	10017de0 	.word	0x10017de0
 810197c:	1b4e81b5 	.word	0x1b4e81b5
 8101980:	10003c74 	.word	0x10003c74
 8101984:	58022000 	.word	0x58022000
 8101988:	10002e4c 	.word	0x10002e4c
 810198c:	1000122c 	.word	0x1000122c

08101990 <ADC3DMAHalfTransferIRQCallback>:
{
 8101990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( debug_output_enable )
 8101994:	4b70      	ldr	r3, [pc, #448]	; (8101b58 <ADC3DMAHalfTransferIRQCallback+0x1c8>)
 8101996:	781b      	ldrb	r3, [r3, #0]
{
 8101998:	b089      	sub	sp, #36	; 0x24
  if ( debug_output_enable )
 810199a:	2b00      	cmp	r3, #0
 810199c:	f040 80c7 	bne.w	8101b2e <ADC3DMAHalfTransferIRQCallback+0x19e>
  setUserLED1State(TRUE);
 81019a0:	2001      	movs	r0, #1
 81019a2:	f000 fd13 	bl	81023cc <setUserLED1State>
  if ( ++fft_op_skip_counter == FFT_OP_ON_COUNT )
 81019a6:	4a6d      	ldr	r2, [pc, #436]	; (8101b5c <ADC3DMAHalfTransferIRQCallback+0x1cc>)
 81019a8:	8813      	ldrh	r3, [r2, #0]
 81019aa:	3301      	adds	r3, #1
 81019ac:	b29b      	uxth	r3, r3
 81019ae:	2b14      	cmp	r3, #20
 81019b0:	8013      	strh	r3, [r2, #0]
 81019b2:	f000 80ca 	beq.w	8101b4a <ADC3DMAHalfTransferIRQCallback+0x1ba>
  uint32_t _channel_offset[6] = {0,0,0,0,0,0};
 81019b6:	2200      	movs	r2, #0
 81019b8:	4c69      	ldr	r4, [pc, #420]	; (8101b60 <ADC3DMAHalfTransferIRQCallback+0x1d0>)
 81019ba:	496a      	ldr	r1, [pc, #424]	; (8101b64 <ADC3DMAHalfTransferIRQCallback+0x1d4>)
 81019bc:	486a      	ldr	r0, [pc, #424]	; (8101b68 <ADC3DMAHalfTransferIRQCallback+0x1d8>)
 81019be:	9202      	str	r2, [sp, #8]
 81019c0:	4613      	mov	r3, r2
 81019c2:	4690      	mov	r8, r2
 81019c4:	4691      	mov	r9, r2
 81019c6:	4692      	mov	sl, r2
 81019c8:	9200      	str	r2, [sp, #0]
 81019ca:	4693      	mov	fp, r2
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 81019cc:	4616      	mov	r6, r2
 81019ce:	9201      	str	r2, [sp, #4]
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 81019d0:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 81019d4:	880d      	ldrh	r5, [r1, #0]
 81019d6:	b292      	uxth	r2, r2
 81019d8:	b2ad      	uxth	r5, r5
 81019da:	1b52      	subs	r2, r2, r5
                                                        + (int32_t)adc3_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[1]
 81019dc:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
 81019e0:	fa12 f585 	uxtah	r5, r2, r5
 81019e4:	884a      	ldrh	r2, [r1, #2]
 81019e6:	f103 0e01 	add.w	lr, r3, #1
 81019ea:	b292      	uxth	r2, r2
 81019ec:	1aad      	subs	r5, r5, r2
                                                        + (int32_t)adc1_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[2]
 81019ee:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 81019f2:	fa15 f282 	uxtah	r2, r5, r2
 81019f6:	888d      	ldrh	r5, [r1, #4]
 81019f8:	f103 0c02 	add.w	ip, r3, #2
 81019fc:	b2ad      	uxth	r5, r5
 81019fe:	1b55      	subs	r5, r2, r5
                                                        + (int32_t)adc1_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[3]
 8101a00:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 8101a04:	fa15 f282 	uxtah	r2, r5, r2
 8101a08:	88cd      	ldrh	r5, [r1, #6]
 8101a0a:	b2ad      	uxth	r5, r5
 8101a0c:	1b55      	subs	r5, r2, r5
                                                        + (int32_t)adc3_read_buffer[1 + index * 3] - adc_channel_dynamic_offsets[4]
 8101a0e:	f830 201e 	ldrh.w	r2, [r0, lr, lsl #1]
 8101a12:	fa15 f282 	uxtah	r2, r5, r2
 8101a16:	890d      	ldrh	r5, [r1, #8]
 8101a18:	b2ad      	uxth	r5, r5
 8101a1a:	1b55      	subs	r5, r2, r5
                                                        + (int32_t)adc3_read_buffer[2 + index * 3] - adc_channel_dynamic_offsets[5])
 8101a1c:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8101a20:	fa15 f282 	uxtah	r2, r5, r2
 8101a24:	894d      	ldrh	r5, [r1, #10]
 8101a26:	b2ad      	uxth	r5, r5
 8101a28:	1b52      	subs	r2, r2, r5
                                                          / 6);
 8101a2a:	4d50      	ldr	r5, [pc, #320]	; (8101b6c <ADC3DMAHalfTransferIRQCallback+0x1dc>)
 8101a2c:	fb85 7502 	smull	r7, r5, r5, r2
 8101a30:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
    output_audio_filter_input_buffer[index] = (int16_t)(((int32_t)adc1_read_buffer[0 + index * 3] - adc_channel_dynamic_offsets[0]
 8101a34:	4a4e      	ldr	r2, [pc, #312]	; (8101b70 <ADC3DMAHalfTransferIRQCallback+0x1e0>)
 8101a36:	b22d      	sxth	r5, r5
 8101a38:	f822 5016 	strh.w	r5, [r2, r6, lsl #1]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101a3c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101a40:	9d00      	ldr	r5, [sp, #0]
    _channel_offset[0] += adc1_read_buffer[0 + index * 3];
 8101a42:	fa1b fb82 	uxtah	fp, fp, r2
    _channel_offset[1] += adc3_read_buffer[0 + index * 3];
 8101a46:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8101a4a:	fa15 f282 	uxtah	r2, r5, r2
 8101a4e:	9200      	str	r2, [sp, #0]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101a50:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a54:	9d01      	ldr	r5, [sp, #4]
    _channel_offset[2] += adc1_read_buffer[1 + index * 3];
 8101a56:	fa1a fa82 	uxtah	sl, sl, r2
    _channel_offset[3] += adc1_read_buffer[2 + index * 3];
 8101a5a:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 8101a5e:	fa19 f982 	uxtah	r9, r9, r2
    _channel_offset[4] += adc3_read_buffer[1 + index * 3];
 8101a62:	f830 201e 	ldrh.w	r2, [r0, lr, lsl #1]
 8101a66:	fa18 f882 	uxtah	r8, r8, r2
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a6a:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a6e:	3601      	adds	r6, #1
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a70:	fa15 f282 	uxtah	r2, r5, r2
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a74:	f5b6 7f16 	cmp.w	r6, #600	; 0x258
 8101a78:	f103 0303 	add.w	r3, r3, #3
    _channel_offset[5] += adc3_read_buffer[2 + index * 3];
 8101a7c:	9201      	str	r2, [sp, #4]
  for ( int index = 0; index < ADC_BUFFER_SAMPLES_PER_CHANNEL / 2; index++ )
 8101a7e:	d1a7      	bne.n	81019d0 <ADC3DMAHalfTransferIRQCallback+0x40>
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a80:	4b3c      	ldr	r3, [pc, #240]	; (8101b74 <ADC3DMAHalfTransferIRQCallback+0x1e4>)
 8101a82:	4617      	mov	r7, r2
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a84:	9a00      	ldr	r2, [sp, #0]
 8101a86:	fba3 2602 	umull	r2, r6, r3, r2
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a8a:	fba3 250a 	umull	r2, r5, r3, sl
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a8e:	fba3 2409 	umull	r2, r4, r3, r9
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a92:	fba3 2008 	umull	r2, r0, r3, r8
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a96:	fba3 7207 	umull	r7, r2, r3, r7
 8101a9a:	0992      	lsrs	r2, r2, #6
  _channel_offset[4] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a9c:	0980      	lsrs	r0, r0, #6
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101a9e:	fba3 730b 	umull	r7, r3, r3, fp
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101aa2:	09b6      	lsrs	r6, r6, #6
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101aa4:	09ad      	lsrs	r5, r5, #6
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101aa6:	09a4      	lsrs	r4, r4, #6
  _channel_offset[5] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101aa8:	e9cd 0206 	strd	r0, r2, [sp, #24]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101aac:	2200      	movs	r2, #0
  _channel_offset[1] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101aae:	9603      	str	r6, [sp, #12]
  _channel_offset[2] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101ab0:	9504      	str	r5, [sp, #16]
  _channel_offset[3] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101ab2:	9405      	str	r4, [sp, #20]
 8101ab4:	4e30      	ldr	r6, [pc, #192]	; (8101b78 <ADC3DMAHalfTransferIRQCallback+0x1e8>)
  _channel_offset[0] /= ADC_BUFFER_SAMPLES_PER_CHANNEL / 2;
 8101ab6:	099b      	lsrs	r3, r3, #6
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101ab8:	ac02      	add	r4, sp, #8
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101aba:	f644 651e 	movw	r5, #19998	; 0x4e1e
      channel_is_valid[_channel] = FALSE;
 8101abe:	4694      	mov	ip, r2
      channel_is_valid[_channel] = TRUE;
 8101ac0:	2701      	movs	r7, #1
 8101ac2:	e010      	b.n	8101ae6 <ADC3DMAHalfTransferIRQCallback+0x156>
 8101ac4:	54b7      	strb	r7, [r6, r2]
      if ( _channel_offset[_channel] > adc_channel_dynamic_offsets[_channel] )
 8101ac6:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8101aca:	b280      	uxth	r0, r0
 8101acc:	4298      	cmp	r0, r3
 8101ace:	d222      	bcs.n	8101b16 <ADC3DMAHalfTransferIRQCallback+0x186>
        adc_channel_dynamic_offsets[_channel]++;
 8101ad0:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8101ad4:	3301      	adds	r3, #1
 8101ad6:	b29b      	uxth	r3, r3
 8101ad8:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101adc:	3201      	adds	r2, #1
 8101ade:	2a06      	cmp	r2, #6
 8101ae0:	d00b      	beq.n	8101afa <ADC3DMAHalfTransferIRQCallback+0x16a>
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101ae2:	f854 3f04 	ldr.w	r3, [r4, #4]!
         && ( _channel_offset[_channel] < ADC_CHANNEL_OFFSET_BOUND_MAX ))
 8101ae6:	f5a3 40b1 	sub.w	r0, r3, #22656	; 0x5880
 8101aea:	3870      	subs	r0, #112	; 0x70
    if (( _channel_offset[_channel] > ADC_CHANNEL_OFFSET_BOUND_MIN )
 8101aec:	42a8      	cmp	r0, r5
 8101aee:	d9e9      	bls.n	8101ac4 <ADC3DMAHalfTransferIRQCallback+0x134>
      channel_is_valid[_channel] = FALSE;
 8101af0:	f806 c002 	strb.w	ip, [r6, r2]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8101af4:	3201      	adds	r2, #1
 8101af6:	2a06      	cmp	r2, #6
 8101af8:	d1f3      	bne.n	8101ae2 <ADC3DMAHalfTransferIRQCallback+0x152>
  performOutputAudioFIR( &output_audio_filter_input_buffer[0], &output_audio_filter_input_buffer[ADC_BUFFER_SAMPLES_PER_CHANNEL / 2] );
 8101afa:	4920      	ldr	r1, [pc, #128]	; (8101b7c <ADC3DMAHalfTransferIRQCallback+0x1ec>)
 8101afc:	f5a1 6096 	sub.w	r0, r1, #1200	; 0x4b0
 8101b00:	f7ff fd7e 	bl	8101600 <performOutputAudioFIR>
  setUserLED1State(FALSE);
 8101b04:	2000      	movs	r0, #0
 8101b06:	f000 fc61 	bl	81023cc <setUserLED1State>
  if ( debug_output_enable )
 8101b0a:	4b13      	ldr	r3, [pc, #76]	; (8101b58 <ADC3DMAHalfTransferIRQCallback+0x1c8>)
 8101b0c:	781b      	ldrb	r3, [r3, #0]
 8101b0e:	b9a3      	cbnz	r3, 8101b3a <ADC3DMAHalfTransferIRQCallback+0x1aa>
}
 8101b10:	b009      	add	sp, #36	; 0x24
 8101b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if ( _channel_offset[_channel] < adc_channel_dynamic_offsets[_channel] )
 8101b16:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 8101b1a:	b280      	uxth	r0, r0
 8101b1c:	4298      	cmp	r0, r3
 8101b1e:	d9dd      	bls.n	8101adc <ADC3DMAHalfTransferIRQCallback+0x14c>
        adc_channel_dynamic_offsets[_channel]--;
 8101b20:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8101b24:	3b01      	subs	r3, #1
 8101b26:	b29b      	uxth	r3, r3
 8101b28:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8101b2c:	e7d6      	b.n	8101adc <ADC3DMAHalfTransferIRQCallback+0x14c>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_SET );
 8101b2e:	4814      	ldr	r0, [pc, #80]	; (8101b80 <ADC3DMAHalfTransferIRQCallback+0x1f0>)
 8101b30:	2201      	movs	r2, #1
 8101b32:	2104      	movs	r1, #4
 8101b34:	f003 fa08 	bl	8104f48 <HAL_GPIO_WritePin>
 8101b38:	e732      	b.n	81019a0 <ADC3DMAHalfTransferIRQCallback+0x10>
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 8101b3a:	4811      	ldr	r0, [pc, #68]	; (8101b80 <ADC3DMAHalfTransferIRQCallback+0x1f0>)
 8101b3c:	2200      	movs	r2, #0
 8101b3e:	2104      	movs	r1, #4
}
 8101b40:	b009      	add	sp, #36	; 0x24
 8101b42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_GPIO_WritePin( DEBUG_GPIO_0_GPIO_Port, DEBUG_GPIO_0_Pin, GPIO_PIN_RESET );
 8101b46:	f003 b9ff 	b.w	8104f48 <HAL_GPIO_WritePin>
    fft_op_skip_counter = 0;
 8101b4a:	2300      	movs	r3, #0
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 8101b4c:	4906      	ldr	r1, [pc, #24]	; (8101b68 <ADC3DMAHalfTransferIRQCallback+0x1d8>)
 8101b4e:	4804      	ldr	r0, [pc, #16]	; (8101b60 <ADC3DMAHalfTransferIRQCallback+0x1d0>)
    fft_op_skip_counter = 0;
 8101b50:	8013      	strh	r3, [r2, #0]
    copySamplesForFFT( adc1_read_buffer, adc3_read_buffer );
 8101b52:	f7ff fcd1 	bl	81014f8 <copySamplesForFFT>
 8101b56:	e72e      	b.n	81019b6 <ADC3DMAHalfTransferIRQCallback+0x26>
 8101b58:	10003c7a 	.word	0x10003c7a
 8101b5c:	10011dcc 	.word	0x10011dcc
 8101b60:	1000041c 	.word	0x1000041c
 8101b64:	10000054 	.word	0x10000054
 8101b68:	1000203c 	.word	0x1000203c
 8101b6c:	2aaaaaab 	.word	0x2aaaaaab
 8101b70:	10017de0 	.word	0x10017de0
 8101b74:	1b4e81b5 	.word	0x1b4e81b5
 8101b78:	10003c74 	.word	0x10003c74
 8101b7c:	10018290 	.word	0x10018290
 8101b80:	58022000 	.word	0x58022000

08101b84 <dspGetIsAnomalyDetected>:
  return anomaly_detect_state_current;
 8101b84:	4b01      	ldr	r3, [pc, #4]	; (8101b8c <dspGetIsAnomalyDetected+0x8>)
}
 8101b86:	7818      	ldrb	r0, [r3, #0]
 8101b88:	4770      	bx	lr
 8101b8a:	bf00      	nop
 8101b8c:	10003c5c 	.word	0x10003c5c

08101b90 <dspGetAnomalyFrequencyNormalized>:
  return anomaly_frequency_normalized;
 8101b90:	4b01      	ldr	r3, [pc, #4]	; (8101b98 <dspGetAnomalyFrequencyNormalized+0x8>)
}
 8101b92:	ed93 0a00 	vldr	s0, [r3]
 8101b96:	4770      	bx	lr
 8101b98:	10003c64 	.word	0x10003c64

08101b9c <dspGetAnomalyMagnitude>:
  return anomaly_magnitude;
 8101b9c:	4b01      	ldr	r3, [pc, #4]	; (8101ba4 <dspGetAnomalyMagnitude+0x8>)
}
 8101b9e:	ed93 0a00 	vldr	s0, [r3]
 8101ba2:	4770      	bx	lr
 8101ba4:	10003c68 	.word	0x10003c68

08101ba8 <dspEntry>:
{
 8101ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101bac:	ed2d 8b06 	vpush	{d8-d10}
 8101bb0:	b087      	sub	sp, #28
  alarminit( );
 8101bb2:	f000 fc21 	bl	81023f8 <alarminit>
  IPCInitialize( );
 8101bb6:	f000 fb7d 	bl	81022b4 <IPCInitialize>
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101bba:	2108      	movs	r1, #8
 8101bbc:	48b5      	ldr	r0, [pc, #724]	; (8101e94 <dspEntry+0x2ec>)
  ADC1->CR |= ADC_CR_BOOST;
 8101bbe:	4db6      	ldr	r5, [pc, #728]	; (8101e98 <dspEntry+0x2f0>)
  ADC3->CR |= ADC_CR_BOOST;
 8101bc0:	4cb6      	ldr	r4, [pc, #728]	; (8101e9c <dspEntry+0x2f4>)
    {
#ifdef FFT_AVERAGING
      // compute magnitude, correct for dc offset, save value to current magnitude buffer

      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101bc2:	ed9f 8ab7 	vldr	s16, [pc, #732]	; 8101ea0 <dspEntry+0x2f8>
  boolean_t _anomaly_detected = FALSE;

  // for each channel
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
  {
    _largest_magnitude_db = -200.0f;
 8101bc6:	eddf 8ab7 	vldr	s17, [pc, #732]	; 8101ea4 <dspEntry+0x2fc>
  // sum of frequencies of active channels
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
  {
    if ( channel_is_active_anomaly[_channel] )
    {
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8101bca:	eddf 9ab7 	vldr	s19, [pc, #732]	; 8101ea8 <dspEntry+0x300>
 8101bce:	ed9f 9ab7 	vldr	s18, [pc, #732]	; 8101eac <dspEntry+0x304>
 8101bd2:	4eb7      	ldr	r6, [pc, #732]	; (8101eb0 <dspEntry+0x308>)
 8101bd4:	f8df a350 	ldr.w	sl, [pc, #848]	; 8101f28 <dspEntry+0x380>
 8101bd8:	f8df b350 	ldr.w	fp, [pc, #848]	; 8101f2c <dspEntry+0x384>
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101bdc:	f003 f9ae 	bl	8104f3c <HAL_GPIO_ReadPin>
 8101be0:	4bb4      	ldr	r3, [pc, #720]	; (8101eb4 <dspEntry+0x30c>)
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101be2:	4ab5      	ldr	r2, [pc, #724]	; (8101eb8 <dspEntry+0x310>)
  debug_output_enable = (boolean_t)(HAL_GPIO_ReadPin( DEBUG_EN_IN_GPIO_Port, DEBUG_EN_IN_Pin ) == GPIO_PIN_RESET);
 8101be4:	fab0 f080 	clz	r0, r0
 8101be8:	0940      	lsrs	r0, r0, #5
 8101bea:	7018      	strb	r0, [r3, #0]
  ADC1->CR |= ADC_CR_BOOST;
 8101bec:	68ab      	ldr	r3, [r5, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101bee:	48b3      	ldr	r0, [pc, #716]	; (8101ebc <dspEntry+0x314>)
  ADC1->CR |= ADC_CR_BOOST;
 8101bf0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101bf4:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_BOOST;
 8101bf6:	68a3      	ldr	r3, [r4, #8]
 8101bf8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101bfc:	60a3      	str	r3, [r4, #8]
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_HALFCPLT_CB_ID, ADC3DMAHalfTransferIRQCallback);
 8101bfe:	2101      	movs	r1, #1
 8101c00:	f003 f83e 	bl	8104c80 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_adc3, HAL_DMA_XFER_CPLT_CB_ID, ADC3DMATransferCompleteIRQCallback);
 8101c04:	4aae      	ldr	r2, [pc, #696]	; (8101ec0 <dspEntry+0x318>)
 8101c06:	48ad      	ldr	r0, [pc, #692]	; (8101ebc <dspEntry+0x314>)
 8101c08:	2100      	movs	r1, #0
 8101c0a:	f003 f839 	bl	8104c80 <HAL_DMA_RegisterCallback>
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101c0e:	4bad      	ldr	r3, [pc, #692]	; (8101ec4 <dspEntry+0x31c>)
  ADC_Enable( &hadc1 );
 8101c10:	48ad      	ldr	r0, [pc, #692]	; (8101ec8 <dspEntry+0x320>)
  DMA1_Stream0->CR |= DMA_SxCR_CIRC;
 8101c12:	691a      	ldr	r2, [r3, #16]
 8101c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8101c18:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101c1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101c1e:	4aab      	ldr	r2, [pc, #684]	; (8101ecc <dspEntry+0x324>)
  DMA1_Stream0->NDTR = ADC1_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101c20:	6159      	str	r1, [r3, #20]
  DMA1_Stream0->PAR = (uint32_t)&ADC1->DR;
 8101c22:	619a      	str	r2, [r3, #24]
  DMA1_Stream0->M0AR = (uint32_t)adc1_read_buffer;
 8101c24:	4aaa      	ldr	r2, [pc, #680]	; (8101ed0 <dspEntry+0x328>)
 8101c26:	61da      	str	r2, [r3, #28]
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 8101c28:	691a      	ldr	r2, [r3, #16]
 8101c2a:	f042 0201 	orr.w	r2, r2, #1
 8101c2e:	611a      	str	r2, [r3, #16]
  DMA1->LIFCR = DMA_LIFCR_CTCIF1;
 8101c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101c34:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_SxCR_HTIE | DMA_SxCR_TCIE | DMA_SxCR_CIRC;
 8101c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101c38:	f442 728c 	orr.w	r2, r2, #280	; 0x118
 8101c3c:	629a      	str	r2, [r3, #40]	; 0x28
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101c3e:	4aa5      	ldr	r2, [pc, #660]	; (8101ed4 <dspEntry+0x32c>)
  DMA1_Stream1->NDTR = ADC3_CHANNELS * ADC_BUFFER_SAMPLES_PER_CHANNEL;
 8101c40:	62d9      	str	r1, [r3, #44]	; 0x2c
  DMA1_Stream1->PAR = (uint32_t)&ADC3->DR;
 8101c42:	631a      	str	r2, [r3, #48]	; 0x30
  DMA1_Stream1->M0AR = (uint32_t)adc3_read_buffer;
 8101c44:	4aa4      	ldr	r2, [pc, #656]	; (8101ed8 <dspEntry+0x330>)
 8101c46:	635a      	str	r2, [r3, #52]	; 0x34
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 8101c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8101c4a:	f042 0201 	orr.w	r2, r2, #1
 8101c4e:	629a      	str	r2, [r3, #40]	; 0x28
  ADC_Enable( &hadc1 );
 8101c50:	f001 fb50 	bl	81032f4 <ADC_Enable>
  ADC_Enable( &hadc3 );
 8101c54:	48a1      	ldr	r0, [pc, #644]	; (8101edc <dspEntry+0x334>)
 8101c56:	f001 fb4d 	bl	81032f4 <ADC_Enable>
  while(!(ADC1->ISR | ADC_ISR_ADRDY) || !(ADC3->ISR | ADC_ISR_ADRDY));
 8101c5a:	682b      	ldr	r3, [r5, #0]
 8101c5c:	6823      	ldr	r3, [r4, #0]
  ADC1->CR |= ADC_CR_ADSTART;
 8101c5e:	68ab      	ldr	r3, [r5, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101c60:	499f      	ldr	r1, [pc, #636]	; (8101ee0 <dspEntry+0x338>)
  ADC1->CR |= ADC_CR_ADSTART;
 8101c62:	f043 0304 	orr.w	r3, r3, #4
 8101c66:	60ab      	str	r3, [r5, #8]
  ADC3->CR |= ADC_CR_ADSTART;
 8101c68:	68a3      	ldr	r3, [r4, #8]
 8101c6a:	4d9e      	ldr	r5, [pc, #632]	; (8101ee4 <dspEntry+0x33c>)
 8101c6c:	f043 0304 	orr.w	r3, r3, #4
 8101c70:	60a3      	str	r3, [r4, #8]
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101c72:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  TIM3->ARR = 750;
 8101c74:	4b9c      	ldr	r3, [pc, #624]	; (8101ee8 <dspEntry+0x340>)
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101c76:	f042 0202 	orr.w	r2, r2, #2
  TIM3->ARR = 750;
 8101c7a:	f240 24ee 	movw	r4, #750	; 0x2ee
  TIM3->CCR1 = 375;
 8101c7e:	f240 1077 	movw	r0, #375	; 0x177
  DBGMCU->APB1LFZ1 |= DBGMCU_APB1LFZ1_DBG_TIM3;
 8101c82:	63ca      	str	r2, [r1, #60]	; 0x3c
  TIM3->ARR = 750;
 8101c84:	62dc      	str	r4, [r3, #44]	; 0x2c
  TIM3->CCR1 = 375;
 8101c86:	6358      	str	r0, [r3, #52]	; 0x34
  TIM3->CCER |= TIM_CCER_CC1E;
 8101c88:	6a1a      	ldr	r2, [r3, #32]
  HAL_TIM_Base_Start( &htim3 );
 8101c8a:	4898      	ldr	r0, [pc, #608]	; (8101eec <dspEntry+0x344>)
 8101c8c:	4c98      	ldr	r4, [pc, #608]	; (8101ef0 <dspEntry+0x348>)
  TIM3->CCER |= TIM_CCER_CC1E;
 8101c8e:	f042 0201 	orr.w	r2, r2, #1
 8101c92:	621a      	str	r2, [r3, #32]
  HAL_TIM_Base_Start( &htim3 );
 8101c94:	f004 feb0 	bl	81069f8 <HAL_TIM_Base_Start>
  arm_rfft_fast_init_f32( &fft_handler, FFT_BATCH_SIZE );
 8101c98:	4896      	ldr	r0, [pc, #600]	; (8101ef4 <dspEntry+0x34c>)
 8101c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101c9e:	f007 f915 	bl	8108ecc <arm_rfft_fast_init_f32>
  float_union.valueu8[0] = 0x55;
 8101ca2:	4b95      	ldr	r3, [pc, #596]	; (8101ef8 <dspEntry+0x350>)
 8101ca4:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8101ca8:	601a      	str	r2, [r3, #0]
    if ( fft_samples_ready )
 8101caa:	4b94      	ldr	r3, [pc, #592]	; (8101efc <dspEntry+0x354>)
 8101cac:	781b      	ldrb	r3, [r3, #0]
 8101cae:	bb3b      	cbnz	r3, 8101d00 <dspEntry+0x158>
    user_button_state_previous = user_button_state_current;
 8101cb0:	4f93      	ldr	r7, [pc, #588]	; (8101f00 <dspEntry+0x358>)
 8101cb2:	4a94      	ldr	r2, [pc, #592]	; (8101f04 <dspEntry+0x35c>)
 8101cb4:	783b      	ldrb	r3, [r7, #0]
 8101cb6:	7013      	strb	r3, [r2, #0]
    user_button_state_current = getUserButtonState( );
 8101cb8:	f000 fb7c 	bl	81023b4 <getUserButtonState>
 8101cbc:	7038      	strb	r0, [r7, #0]
    if ( user_button_state_current && !user_button_state_previous )
 8101cbe:	b140      	cbz	r0, 8101cd2 <dspEntry+0x12a>
 8101cc0:	4a90      	ldr	r2, [pc, #576]	; (8101f04 <dspEntry+0x35c>)
 8101cc2:	7813      	ldrb	r3, [r2, #0]
 8101cc4:	b92b      	cbnz	r3, 8101cd2 <dspEntry+0x12a>
      uart_data_flag = (uart_data_flag ? FALSE : TRUE);
 8101cc6:	4a90      	ldr	r2, [pc, #576]	; (8101f08 <dspEntry+0x360>)
 8101cc8:	7813      	ldrb	r3, [r2, #0]
 8101cca:	fab3 f383 	clz	r3, r3
 8101cce:	095b      	lsrs	r3, r3, #5
 8101cd0:	7013      	strb	r3, [r2, #0]
    if ( fft_results_ready && uart_data_flag )
 8101cd2:	4b8e      	ldr	r3, [pc, #568]	; (8101f0c <dspEntry+0x364>)
 8101cd4:	781b      	ldrb	r3, [r3, #0]
 8101cd6:	2b00      	cmp	r3, #0
 8101cd8:	d0e7      	beq.n	8101caa <dspEntry+0x102>
 8101cda:	4b8b      	ldr	r3, [pc, #556]	; (8101f08 <dspEntry+0x360>)
 8101cdc:	781b      	ldrb	r3, [r3, #0]
 8101cde:	2b00      	cmp	r3, #0
 8101ce0:	d0e3      	beq.n	8101caa <dspEntry+0x102>
      usart_data_skip_counter++;
 8101ce2:	4a8b      	ldr	r2, [pc, #556]	; (8101f10 <dspEntry+0x368>)
 8101ce4:	8813      	ldrh	r3, [r2, #0]
 8101ce6:	3301      	adds	r3, #1
 8101ce8:	b29b      	uxth	r3, r3
      if ( usart_data_skip_counter >= USART_SKIP_N_DATA_SETS )
 8101cea:	2b04      	cmp	r3, #4
 8101cec:	f200 820e 	bhi.w	810210c <dspEntry+0x564>
      usart_data_skip_counter++;
 8101cf0:	8013      	strh	r3, [r2, #0]
      fft_results_ready = FALSE;
 8101cf2:	4a86      	ldr	r2, [pc, #536]	; (8101f0c <dspEntry+0x364>)
 8101cf4:	2300      	movs	r3, #0
 8101cf6:	7013      	strb	r3, [r2, #0]
    if ( fft_samples_ready )
 8101cf8:	4b80      	ldr	r3, [pc, #512]	; (8101efc <dspEntry+0x354>)
 8101cfa:	781b      	ldrb	r3, [r3, #0]
 8101cfc:	2b00      	cmp	r3, #0
 8101cfe:	d0d7      	beq.n	8101cb0 <dspEntry+0x108>
 8101d00:	4f84      	ldr	r7, [pc, #528]	; (8101f14 <dspEntry+0x36c>)
 8101d02:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8101f20 <dspEntry+0x378>
    arm_rfft_fast_f32( &fft_handler, (float*)&fft_sample_buffer[_channel][0], (float*)&fft_out_buffer[_channel][0], 0);
 8101d06:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8101ef4 <dspEntry+0x34c>
 8101d0a:	4642      	mov	r2, r8
 8101d0c:	4639      	mov	r1, r7
 8101d0e:	2300      	movs	r3, #0
 8101d10:	4648      	mov	r0, r9
 8101d12:	f007 f871 	bl	8108df8 <arm_rfft_fast_f32>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101d16:	4b80      	ldr	r3, [pc, #512]	; (8101f18 <dspEntry+0x370>)
 8101d18:	f507 6700 	add.w	r7, r7, #2048	; 0x800
 8101d1c:	429f      	cmp	r7, r3
 8101d1e:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8101d22:	d1f2      	bne.n	8101d0a <dspEntry+0x162>
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101d24:	4b7d      	ldr	r3, [pc, #500]	; (8101f1c <dspEntry+0x374>)
 8101d26:	881b      	ldrh	r3, [r3, #0]
 8101d28:	9301      	str	r3, [sp, #4]
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101d2a:	2300      	movs	r3, #0
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101d2c:	eef3 aa04 	vmov.f32	s21, #52	; 0x41a00000  20.0
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101d30:	eeb4 aa00 	vmov.f32	s20, #64	; 0x3e000000  0.125
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101d34:	9305      	str	r3, [sp, #20]
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101d36:	9b05      	ldr	r3, [sp, #20]
 8101d38:	025a      	lsls	r2, r3, #9
 8101d3a:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8101d3e:	9203      	str	r2, [sp, #12]
 8101d40:	02da      	lsls	r2, r3, #11
 8101d42:	021b      	lsls	r3, r3, #8
{
 8101d44:	2700      	movs	r7, #0
 8101d46:	9302      	str	r3, [sp, #8]
 8101d48:	464b      	mov	r3, r9
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101d4a:	46b8      	mov	r8, r7
 8101d4c:	46b9      	mov	r9, r7
 8101d4e:	9204      	str	r2, [sp, #16]
 8101d50:	461f      	mov	r7, r3
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101d52:	9b03      	ldr	r3, [sp, #12]
 8101d54:	4972      	ldr	r1, [pc, #456]	; (8101f20 <dspEntry+0x378>)
 8101d56:	f108 0201 	add.w	r2, r8, #1
 8101d5a:	441a      	add	r2, r3
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101d5c:	eb03 0c08 	add.w	ip, r3, r8
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101d60:	eb01 0282 	add.w	r2, r1, r2, lsl #2
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101d64:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 8101d68:	ed9c 7a00 	vldr	s14, [ip]
                                    fft_out_buffer[_channel][(_i*2)+1] / (FFT_BATCH_SIZE / 8))));
 8101d6c:	edd2 7a00 	vldr	s15, [r2]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101d70:	ee67 7a88 	vmul.f32	s15, s15, s16
 8101d74:	ee27 7a08 	vmul.f32	s14, s14, s16
  return sqrtf(_real * _real + _compl * _compl);
 8101d78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8101d7c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8101d80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8101d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101d88:	f100 81bb 	bmi.w	8102102 <dspEntry+0x55a>
 8101d8c:	eeb1 0ae7 	vsqrt.f32	s0, s15
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101d90:	f00b fcae 	bl	810d6f0 <log10f>
      fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101d94:	8832      	ldrh	r2, [r6, #0]
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101d96:	9b01      	ldr	r3, [sp, #4]
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101d98:	fa17 f282 	uxtah	r2, r7, r2
 8101d9c:	eb09 2202 	add.w	r2, r9, r2, lsl #8
 8101da0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101da4:	2b27      	cmp	r3, #39	; 0x27
                = (20.0f * log10f(complexABS(fft_out_buffer[_channel][_i*2] / (FFT_BATCH_SIZE / 8),
 8101da6:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8101daa:	ed82 0a00 	vstr	s0, [r2]
      if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101dae:	d81f      	bhi.n	8101df0 <dspEntry+0x248>
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101db0:	8832      	ldrh	r2, [r6, #0]
 8101db2:	fa17 f282 	uxtah	r2, r7, r2
 8101db6:	eb09 2202 	add.w	r2, r9, r2, lsl #8
 8101dba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8101dbe:	ed92 7a00 	vldr	s14, [r2]
              > fft_noise_floor[_i] )
 8101dc2:	eb05 0289 	add.w	r2, r5, r9, lsl #2
 8101dc6:	edd2 7a00 	vldr	s15, [r2]
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
              > fft_noise_floor[_i] )
 8101dd2:	ea4f 0c89 	mov.w	ip, r9, lsl #2
        if (( fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i]
 8101dd6:	dc00      	bgt.n	8101dda <dspEntry+0x232>
            || ( noise_floor_samples == 0 ))
 8101dd8:	b953      	cbnz	r3, 8101df0 <dspEntry+0x248>
          fft_noise_floor[_i] = fft_frequency_magnitude_db[_channel][fft_frequency_magnitude_db_index][_i];
 8101dda:	8832      	ldrh	r2, [r6, #0]
 8101ddc:	fa17 f282 	uxtah	r2, r7, r2
 8101de0:	eb09 2202 	add.w	r2, r9, r2, lsl #8
 8101de4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8101de8:	44ac      	add	ip, r5
 8101dea:	6812      	ldr	r2, [r2, #0]
 8101dec:	f8cc 2000 	str.w	r2, [ip]
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 8101df0:	9b04      	ldr	r3, [sp, #16]
 8101df2:	eb03 0209 	add.w	r2, r3, r9
 8101df6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8101dfa:	9b02      	ldr	r3, [sp, #8]
 8101dfc:	f8d2 c000 	ldr.w	ip, [r2]
 8101e00:	eb03 0209 	add.w	r2, r3, r9
 8101e04:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101e08:	f04f 0e01 	mov.w	lr, #1
      fft_frequency_magnitude_db_average[_channel][_i] = fft_frequency_magnitude_db[_channel][0][_i];
 8101e0c:	f8c2 c000 	str.w	ip, [r2]
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101e10:	eb07 030e 	add.w	r3, r7, lr
 8101e14:	eb09 2303 	add.w	r3, r9, r3, lsl #8
 8101e18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8101e1c:	edd3 7a00 	vldr	s15, [r3]
 8101e20:	ed92 7a00 	vldr	s14, [r2]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101e24:	f10e 0e01 	add.w	lr, lr, #1
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101e28:	ee77 7a87 	vadd.f32	s15, s15, s14
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101e2c:	f1be 0f08 	cmp.w	lr, #8
        fft_frequency_magnitude_db_average[_channel][_i] += fft_frequency_magnitude_db[_channel][sample_index][_i];
 8101e30:	edc2 7a00 	vstr	s15, [r2]
      for ( int sample_index = 1; sample_index < FFT_AVERAGE_SAMPLES; sample_index++ )
 8101e34:	d1ec      	bne.n	8101e10 <dspEntry+0x268>
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101e36:	edd2 7a00 	vldr	s15, [r2]
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101e3a:	f109 0901 	add.w	r9, r9, #1
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101e3e:	ee67 7a8a 	vmul.f32	s15, s15, s20
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101e42:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
      fft_frequency_magnitude_db_average[_channel][_i] /= (float)FFT_AVERAGE_SAMPLES;
 8101e46:	edc2 7a00 	vstr	s15, [r2]
    for ( int _i=0; _i<FFT_BATCH_SIZE / 2; _i++ )
 8101e4a:	f108 0802 	add.w	r8, r8, #2
 8101e4e:	d180      	bne.n	8101d52 <dspEntry+0x1aa>
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101e50:	9b05      	ldr	r3, [sp, #20]
 8101e52:	3301      	adds	r3, #1
 8101e54:	2b06      	cmp	r3, #6
 8101e56:	9305      	str	r3, [sp, #20]
 8101e58:	f47f af6d 	bne.w	8101d36 <dspEntry+0x18e>
  if ( noise_floor_samples < FFT_REQUIRED_NOISE_FLOOR_SAMPLES )
 8101e5c:	9b01      	ldr	r3, [sp, #4]
 8101e5e:	2b27      	cmp	r3, #39	; 0x27
 8101e60:	d802      	bhi.n	8101e68 <dspEntry+0x2c0>
    noise_floor_samples++;
 8101e62:	4a2e      	ldr	r2, [pc, #184]	; (8101f1c <dspEntry+0x374>)
 8101e64:	3301      	adds	r3, #1
 8101e66:	8013      	strh	r3, [r2, #0]
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101e68:	8833      	ldrh	r3, [r6, #0]
 8101e6a:	3301      	adds	r3, #1
 8101e6c:	f003 0307 	and.w	r3, r3, #7
  boolean_t _anomaly_detected = FALSE;
 8101e70:	2000      	movs	r0, #0
  fft_frequency_magnitude_db_index = ( fft_frequency_magnitude_db_index + 1 ) % FFT_AVERAGE_SAMPLES;
 8101e72:	8033      	strh	r3, [r6, #0]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101e74:	4b2b      	ldr	r3, [pc, #172]	; (8101f24 <dspEntry+0x37c>)
 8101e76:	9301      	str	r3, [sp, #4]
  uint16_t _largest_magnitude_bin = 0;
 8101e78:	4680      	mov	r8, r0
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101e7a:	9002      	str	r0, [sp, #8]
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101e7c:	9b01      	ldr	r3, [sp, #4]
 8101e7e:	9902      	ldr	r1, [sp, #8]
    _largest_magnitude_db = -200.0f;
 8101e80:	eeb0 7a68 	vmov.f32	s14, s17
 8101e84:	3bd6      	subs	r3, #214	; 0xd6
  for ( int _channel = 0; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++ )
 8101e86:	222a      	movs	r2, #42	; 0x2a
    _channel_active = FALSE;
 8101e88:	f04f 0900 	mov.w	r9, #0
 8101e8c:	ea4f 2e01 	mov.w	lr, r1, lsl #8
 8101e90:	e061      	b.n	8101f56 <dspEntry+0x3ae>
 8101e92:	bf00      	nop
 8101e94:	58020c00 	.word	0x58020c00
 8101e98:	40022000 	.word	0x40022000
 8101e9c:	58026000 	.word	0x58026000
 8101ea0:	3c800000 	.word	0x3c800000
 8101ea4:	c3480000 	.word	0xc3480000
 8101ea8:	486a6000 	.word	0x486a6000
 8101eac:	3b000000 	.word	0x3b000000
 8101eb0:	100114ac 	.word	0x100114ac
 8101eb4:	10003c7a 	.word	0x10003c7a
 8101eb8:	08101991 	.word	0x08101991
 8101ebc:	100003a4 	.word	0x100003a4
 8101ec0:	08101791 	.word	0x08101791
 8101ec4:	40020000 	.word	0x40020000
 8101ec8:	10000264 	.word	0x10000264
 8101ecc:	40022040 	.word	0x40022040
 8101ed0:	1000041c 	.word	0x1000041c
 8101ed4:	58026040 	.word	0x58026040
 8101ed8:	1000203c 	.word	0x1000203c
 8101edc:	100002c8 	.word	0x100002c8
 8101ee0:	5c001000 	.word	0x5c001000
 8101ee4:	100119cc 	.word	0x100119cc
 8101ee8:	40000400 	.word	0x40000400
 8101eec:	10018838 	.word	0x10018838
 8101ef0:	10003cac 	.word	0x10003cac
 8101ef4:	100114b0 	.word	0x100114b0
 8101ef8:	10017dd8 	.word	0x10017dd8
 8101efc:	10017dd4 	.word	0x10017dd4
 8101f00:	10018794 	.word	0x10018794
 8101f04:	10018795 	.word	0x10018795
 8101f08:	10018790 	.word	0x10018790
 8101f0c:	10014dd0 	.word	0x10014dd0
 8101f10:	10018792 	.word	0x10018792
 8101f14:	10014dd4 	.word	0x10014dd4
 8101f18:	10017dd4 	.word	0x10017dd4
 8101f1c:	10017dde 	.word	0x10017dde
 8101f20:	10011dd0 	.word	0x10011dd0
 8101f24:	1001159e 	.word	0x1001159e
 8101f28:	1000fcac 	.word	0x1000fcac
 8101f2c:	10000060 	.word	0x10000060
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101f30:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 8101f34:	2918      	cmp	r1, #24
 8101f36:	d003      	beq.n	8101f40 <dspEntry+0x398>
 8101f38:	3701      	adds	r7, #1
 8101f3a:	b2f9      	uxtb	r1, r7
      if ( fft_magnitude_trigger_counter[channel][bin_index] >= FFT_DETECT_THRESHOLD_RISING_COUNT )
 8101f3c:	290d      	cmp	r1, #13
 8101f3e:	d946      	bls.n	8101fce <dspEntry+0x426>
        fft_magnitude_trigger_counter[channel][bin_index] |= FFT_DETECT_BIN_ACTIVE_FLAG;
 8101f40:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8101f44:	7019      	strb	r1, [r3, #0]
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101f46:	9901      	ldr	r1, [sp, #4]
 8101f48:	3301      	adds	r3, #1
        _anomaly_detected = TRUE;
 8101f4a:	2001      	movs	r0, #1
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101f4c:	428b      	cmp	r3, r1
        _channel_active = TRUE;
 8101f4e:	4681      	mov	r9, r0
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101f50:	f102 0201 	add.w	r2, r2, #1
 8101f54:	d042      	beq.n	8101fdc <dspEntry+0x434>
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f56:	eb0e 0102 	add.w	r1, lr, r2
 8101f5a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f5e:	eb05 0c82 	add.w	ip, r5, r2, lsl #2
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f62:	edd1 7a00 	vldr	s15, [r1]
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f66:	eddc 6a00 	vldr	s13, [ip]
                  + fft_trigger_threshold_offset_db))
 8101f6a:	ed9b 6a00 	vldr	s12, [fp]
 8101f6e:	ee76 6a86 	vadd.f32	s13, s13, s12
             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f72:	0097      	lsls	r7, r2, #2
 8101f74:	ee77 7ae6 	vsub.f32	s15, s15, s13
      if ( (fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101f80:	dd0b      	ble.n	8101f9a <dspEntry+0x3f2>
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f82:	ed91 7a00 	vldr	s14, [r1]
                             - (fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f86:	eddc 7a00 	vldr	s15, [ip]
                                    + fft_trigger_threshold_offset_db);
 8101f8a:	eddb 6a00 	vldr	s13, [fp]
 8101f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f92:	fa1f f882 	uxth.w	r8, r2
        _largest_magnitude_db = fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f96:	ee37 7a67 	vsub.f32	s14, s14, s15
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f9a:	eb0e 0102 	add.w	r1, lr, r2
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101f9e:	442f      	add	r7, r5
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101fa0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8101fa4:	edd1 6a00 	vldr	s13, [r1]
                >= ( fft_noise_floor[bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101fa8:	edd7 7a00 	vldr	s15, [r7]
                         + fft_trigger_threshold_offset_db ))
 8101fac:	ed9b 6a00 	vldr	s12, [fp]
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101fb0:	781f      	ldrb	r7, [r3, #0]
                         + fft_trigger_threshold_offset_db ))
 8101fb2:	ee77 7a86 	vadd.f32	s15, s15, s12
      if ( fft_frequency_magnitude_db_average[channel][bin_index + FFT_SPECTRUM_ULTRASONIC_BIN_INDEX_LOW]
 8101fb6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8101fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101fbe:	dab7      	bge.n	8101f30 <dspEntry+0x388>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101fc0:	f017 017f 	ands.w	r1, r7, #127	; 0x7f
 8101fc4:	d003      	beq.n	8101fce <dspEntry+0x426>
 8101fc6:	3f01      	subs	r7, #1
 8101fc8:	b2f9      	uxtb	r1, r7
      if ( fft_magnitude_trigger_counter[channel][bin_index] >= FFT_DETECT_THRESHOLD_RISING_COUNT )
 8101fca:	290d      	cmp	r1, #13
 8101fcc:	d8b8      	bhi.n	8101f40 <dspEntry+0x398>
        fft_magnitude_trigger_counter[channel][bin_index] = ((fft_magnitude_trigger_counter[channel][bin_index] & FFT_DETECT_COUNT_MASK)
 8101fce:	7019      	strb	r1, [r3, #0]
    for ( int bin_index = 0; bin_index < FFT_SPECTRUM_NUMBER_OF_ULTRASONIC_BINS; bin_index++ )
 8101fd0:	9901      	ldr	r1, [sp, #4]
 8101fd2:	3301      	adds	r3, #1
 8101fd4:	428b      	cmp	r3, r1
 8101fd6:	f102 0201 	add.w	r2, r2, #1
 8101fda:	d1bc      	bne.n	8101f56 <dspEntry+0x3ae>
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101fdc:	33d6      	adds	r3, #214	; 0xd6
    channel_is_active_anomaly[channel] = _channel_active;
 8101fde:	9a02      	ldr	r2, [sp, #8]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8101fe0:	9301      	str	r3, [sp, #4]
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101fe2:	4b55      	ldr	r3, [pc, #340]	; (8102138 <dspEntry+0x590>)
    channel_is_active_anomaly[channel] = _channel_active;
 8101fe4:	4955      	ldr	r1, [pc, #340]	; (810213c <dspEntry+0x594>)
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101fe6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101fea:	ee07 8a90 	vmov	s15, r8
    channel_is_active_anomaly[channel] = _channel_active;
 8101fee:	f801 9002 	strb.w	r9, [r1, r2]
    fft_channel_magnitude_db[channel] = _largest_magnitude_db;
 8101ff2:	ed83 7a00 	vstr	s14, [r3]
    fft_channel_magnitude_bin[channel] = _largest_magnitude_bin;
 8101ff6:	4b52      	ldr	r3, [pc, #328]	; (8102140 <dspEntry+0x598>)
 8101ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ffc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8102000:	edc3 7a00 	vstr	s15, [r3]
  for ( int channel = 0; channel < (ADC1_CHANNELS + ADC3_CHANNELS); channel++ )
 8102004:	1c53      	adds	r3, r2, #1
 8102006:	2b06      	cmp	r3, #6
 8102008:	9302      	str	r3, [sp, #8]
 810200a:	f47f af37 	bne.w	8101e7c <dspEntry+0x2d4>
  anomaly_detect_state_current = _anomaly_detected;
 810200e:	4b4d      	ldr	r3, [pc, #308]	; (8102144 <dspEntry+0x59c>)
 8102010:	7018      	strb	r0, [r3, #0]
  setUserLED2State( anomaly_detect_state_current );
 8102012:	f000 f9e5 	bl	81023e0 <setUserLED2State>
      fft_results_ready = TRUE;
 8102016:	4a4c      	ldr	r2, [pc, #304]	; (8102148 <dspEntry+0x5a0>)
      fft_samples_ready = FALSE;
 8102018:	494c      	ldr	r1, [pc, #304]	; (810214c <dspEntry+0x5a4>)
      fft_results_ready = TRUE;
 810201a:	2301      	movs	r3, #1
 810201c:	7013      	strb	r3, [r2, #0]
      fft_samples_ready = FALSE;
 810201e:	2200      	movs	r2, #0
 8102020:	700a      	strb	r2, [r1, #0]
  _magnitude_max = fft_channel_magnitude_db[0];
 8102022:	4a45      	ldr	r2, [pc, #276]	; (8102138 <dspEntry+0x590>)
 8102024:	edd2 7a00 	vldr	s15, [r2]
  _magnitude_min = _magnitude_max;
 8102028:	eeb0 7a67 	vmov.f32	s14, s15
    if ( fft_channel_magnitude_db[_channel] > _magnitude_max )
 810202c:	4842      	ldr	r0, [pc, #264]	; (8102138 <dspEntry+0x590>)
 810202e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8102032:	edd1 6a00 	vldr	s13, [r1]
 8102036:	eef4 6ae7 	vcmpe.f32	s13, s15
 810203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      _magnitude_max = fft_channel_magnitude_db[_channel];
 810203e:	bfc8      	it	gt
 8102040:	edd1 7a00 	vldrgt	s15, [r1]
    if ( fft_channel_magnitude_db[_channel] < _magnitude_min )
 8102044:	edd1 6a00 	vldr	s13, [r1]
 8102048:	eef4 6ac7 	vcmpe.f32	s13, s14
 810204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
 8102050:	f103 0301 	add.w	r3, r3, #1
      _magnitude_min = fft_channel_magnitude_db[_channel];
 8102054:	bf48      	it	mi
 8102056:	ed91 7a00 	vldrmi	s14, [r1]
  for ( int _channel = 1; _channel < (ADC1_CHANNELS + ADC3_CHANNELS); _channel++)
 810205a:	2b06      	cmp	r3, #6
 810205c:	d1e6      	bne.n	810202c <dspEntry+0x484>
      localization_data_ready = TRUE;
 810205e:	4a3c      	ldr	r2, [pc, #240]	; (8102150 <dspEntry+0x5a8>)
  float _sum = 0.0f;
 8102060:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8102154 <dspEntry+0x5ac>
      localization_data_ready = TRUE;
 8102064:	2301      	movs	r3, #1
 8102066:	7013      	strb	r3, [r2, #0]
  uint8_t _active_channels = 0;
 8102068:	2300      	movs	r3, #0
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 810206a:	461a      	mov	r2, r3
    if ( channel_is_active_anomaly[_channel] )
 810206c:	4833      	ldr	r0, [pc, #204]	; (810213c <dspEntry+0x594>)
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 810206e:	4934      	ldr	r1, [pc, #208]	; (8102140 <dspEntry+0x598>)
    if ( channel_is_active_anomaly[_channel] )
 8102070:	5c80      	ldrb	r0, [r0, r2]
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8102072:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 8102076:	3201      	adds	r2, #1
    if ( channel_is_active_anomaly[_channel] )
 8102078:	b138      	cbz	r0, 810208a <dspEntry+0x4e2>
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 810207a:	edd1 7a00 	vldr	s15, [r1]
 810207e:	ee67 7aa9 	vmul.f32	s15, s15, s19
      _active_channels++;
 8102082:	3301      	adds	r3, #1
      _sum += (float)fft_channel_magnitude_bin[_channel] * ADC_SAMPLE_FREQUENCY / (FFT_BATCH_SIZE);
 8102084:	eee7 6a89 	vfma.f32	s13, s15, s18
      _active_channels++;
 8102088:	b2db      	uxtb	r3, r3
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 810208a:	2a06      	cmp	r2, #6
 810208c:	d1ee      	bne.n	810206c <dspEntry+0x4c4>
  if ( _active_channels == 0 )
  {
    anomaly_frequency = 20000.0f;
  }

  anomaly_frequency = _sum / _active_channels;
 810208e:	ee07 3a90 	vmov	s15, r3
 8102092:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  // normalized frequency
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 8102096:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8102158 <dspEntry+0x5b0>
 810209a:	eddf 5a30 	vldr	s11, [pc, #192]	; 810215c <dspEntry+0x5b4>
  anomaly_frequency = _sum / _active_channels;
 810209e:	4b30      	ldr	r3, [pc, #192]	; (8102160 <dspEntry+0x5b8>)
 81020a0:	ee86 6aa7 	vdiv.f32	s12, s13, s15

  // magnitude, ** also potato but functional **
  float _largest = -200.0f;
 81020a4:	eef0 7a68 	vmov.f32	s15, s17
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 81020a8:	ee36 7a47 	vsub.f32	s14, s12, s14
  anomaly_frequency = _sum / _active_channels;
 81020ac:	ed83 6a00 	vstr	s12, [r3]
  anomaly_frequency_normalized = (anomaly_frequency - 20000.0f) / (120000.0f - 20000.0f);
 81020b0:	eec7 6a25 	vdiv.f32	s13, s14, s11
 81020b4:	4b2b      	ldr	r3, [pc, #172]	; (8102164 <dspEntry+0x5bc>)
 81020b6:	edc3 6a00 	vstr	s13, [r3]

  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81020ba:	2300      	movs	r3, #0
  {
    if (( fft_channel_magnitude_db[_channel] > _largest )
 81020bc:	4a1e      	ldr	r2, [pc, #120]	; (8102138 <dspEntry+0x590>)
 81020be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 81020c2:	ed92 7a00 	vldr	s14, [r2]
 81020c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81020ce:	dd04      	ble.n	81020da <dspEntry+0x532>
        && ( channel_is_active_anomaly[_channel] ))
 81020d0:	491a      	ldr	r1, [pc, #104]	; (810213c <dspEntry+0x594>)
 81020d2:	5cc9      	ldrb	r1, [r1, r3]
 81020d4:	b109      	cbz	r1, 81020da <dspEntry+0x532>
    {
      _largest = fft_channel_magnitude_db[_channel];
 81020d6:	edd2 7a00 	vldr	s15, [r2]
  for ( int _channel = 0; _channel < NUM_MICROPHONE_CHANNELS; _channel++ )
 81020da:	3301      	adds	r3, #1
 81020dc:	2b06      	cmp	r3, #6
 81020de:	d1ed      	bne.n	81020bc <dspEntry+0x514>
  }

  anomaly_magnitude = _largest;

  // update inter-processor communication (shared RAM region)
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 81020e0:	4b18      	ldr	r3, [pc, #96]	; (8102144 <dspEntry+0x59c>)
  anomaly_magnitude = _largest;
 81020e2:	4f21      	ldr	r7, [pc, #132]	; (8102168 <dspEntry+0x5c0>)
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 81020e4:	7818      	ldrb	r0, [r3, #0]
  anomaly_magnitude = _largest;
 81020e6:	edc7 7a00 	vstr	s15, [r7]
  IPCSetAnomalyDetectState( anomaly_detect_state_current );
 81020ea:	f000 f901 	bl	81022f0 <IPCSetAnomalyDetectState>
  IPCSetAnomalyFrequency( anomaly_frequency );
 81020ee:	4b1c      	ldr	r3, [pc, #112]	; (8102160 <dspEntry+0x5b8>)
 81020f0:	ed93 0a00 	vldr	s0, [r3]
 81020f4:	f000 f902 	bl	81022fc <IPCSetAnomalyFrequency>
  IPCSetAnomalyMagnitudedB( anomaly_magnitude );
 81020f8:	ed97 0a00 	vldr	s0, [r7]
 81020fc:	f000 f904 	bl	8102308 <IPCSetAnomalyMagnitudedB>
}
 8102100:	e5d6      	b.n	8101cb0 <dspEntry+0x108>
  return sqrtf(_real * _real + _compl * _compl);
 8102102:	eeb0 0a67 	vmov.f32	s0, s15
 8102106:	f00b fb79 	bl	810d7fc <sqrtf>
 810210a:	e641      	b.n	8101d90 <dspEntry+0x1e8>
        usart_data_skip_counter = 0;
 810210c:	4a17      	ldr	r2, [pc, #92]	; (810216c <dspEntry+0x5c4>)
        status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 810210e:	4918      	ldr	r1, [pc, #96]	; (8102170 <dspEntry+0x5c8>)
 8102110:	4818      	ldr	r0, [pc, #96]	; (8102174 <dspEntry+0x5cc>)
        while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8102112:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8102178 <dspEntry+0x5d0>
 8102116:	4f17      	ldr	r7, [pc, #92]	; (8102174 <dspEntry+0x5cc>)
        usart_data_skip_counter = 0;
 8102118:	2300      	movs	r3, #0
 810211a:	8013      	strh	r3, [r2, #0]
        status = HAL_UART_Transmit_DMA( &huart3, float_union.valueu8, 4 );
 810211c:	2204      	movs	r2, #4
 810211e:	f004 ff97 	bl	8107050 <HAL_UART_Transmit_DMA>
        while ( (status = HAL_UART_Transmit_DMA( &huart3,
 8102122:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8102126:	4641      	mov	r1, r8
 8102128:	4638      	mov	r0, r7
 810212a:	f004 ff91 	bl	8107050 <HAL_UART_Transmit_DMA>
              == HAL_BUSY );
 810212e:	2802      	cmp	r0, #2
 8102130:	f47f addf 	bne.w	8101cf2 <dspEntry+0x14a>
 8102134:	e7f5      	b.n	8102122 <dspEntry+0x57a>
 8102136:	bf00      	nop
 8102138:	10003c94 	.word	0x10003c94
 810213c:	10003c6c 	.word	0x10003c6c
 8102140:	10003c7c 	.word	0x10003c7c
 8102144:	10003c5c 	.word	0x10003c5c
 8102148:	10014dd0 	.word	0x10014dd0
 810214c:	10017dd4 	.word	0x10017dd4
 8102150:	10017ddc 	.word	0x10017ddc
 8102154:	00000000 	.word	0x00000000
 8102158:	469c4000 	.word	0x469c4000
 810215c:	47c35000 	.word	0x47c35000
 8102160:	10003c60 	.word	0x10003c60
 8102164:	10003c64 	.word	0x10003c64
 8102168:	10003c68 	.word	0x10003c68
 810216c:	10018792 	.word	0x10018792
 8102170:	10017dd8 	.word	0x10017dd8
 8102174:	100188fc 	.word	0x100188fc
 8102178:	1000fcac 	.word	0x1000fcac

0810217c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 810217c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810217e:	2400      	movs	r4, #0
{
 8102180:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102182:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8102186:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810218a:	4b45      	ldr	r3, [pc, #276]	; (81022a0 <MX_GPIO_Init+0x124>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810218c:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810218e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102192:	4e44      	ldr	r6, [pc, #272]	; (81022a4 <MX_GPIO_Init+0x128>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102194:	4f44      	ldr	r7, [pc, #272]	; (81022a8 <MX_GPIO_Init+0x12c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102196:	f042 0202 	orr.w	r2, r2, #2
 810219a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810219e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021a2:	f002 0202 	and.w	r2, r2, #2
 81021a6:	9200      	str	r2, [sp, #0]
 81021a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81021aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021ae:	f042 0208 	orr.w	r2, r2, #8
 81021b2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81021b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021ba:	f002 0208 	and.w	r2, r2, #8
 81021be:	9201      	str	r2, [sp, #4]
 81021c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 81021c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81021ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81021ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021d2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 81021d6:	9202      	str	r2, [sp, #8]
 81021d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 81021da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021de:	f042 0204 	orr.w	r2, r2, #4
 81021e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81021e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021ea:	f002 0204 	and.w	r2, r2, #4
 81021ee:	9203      	str	r2, [sp, #12]
 81021f0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81021f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81021f6:	f042 0220 	orr.w	r2, r2, #32
 81021fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81021fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102202:	f002 0220 	and.w	r2, r2, #32
 8102206:	9204      	str	r2, [sp, #16]
 8102208:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810220a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810220e:	f042 0201 	orr.w	r2, r2, #1
 8102212:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102216:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810221a:	f002 0201 	and.w	r2, r2, #1
 810221e:	9205      	str	r2, [sp, #20]
 8102220:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102222:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810222a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102236:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102238:	4622      	mov	r2, r4
 810223a:	4630      	mov	r0, r6
 810223c:	f242 0104 	movw	r1, #8196	; 0x2004
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102240:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8102242:	f002 fe81 	bl	8104f48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102246:	4622      	mov	r2, r4
 8102248:	4638      	mov	r0, r7
 810224a:	2104      	movs	r1, #4
 810224c:	f002 fe7c 	bl	8104f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8102250:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
 8102252:	2308      	movs	r3, #8
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 8102254:	a907      	add	r1, sp, #28
 8102256:	4815      	ldr	r0, [pc, #84]	; (81022ac <MX_GPIO_Init+0x130>)
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
 8102258:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 810225a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 810225e:	f002 fd41 	bl	8104ce4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = DEBUG_GPIO_0_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8102262:	4630      	mov	r0, r6
 8102264:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DEBUG_GPIO_0_Pin|LD2_Pin;
 8102266:	f242 0304 	movw	r3, #8196	; 0x2004
 810226a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810226c:	e9cd 5408 	strd	r5, r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102270:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8102272:	f002 fd37 	bl	8104ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8102276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 810227a:	a907      	add	r1, sp, #28
 810227c:	480c      	ldr	r0, [pc, #48]	; (81022b0 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pin = B1_Pin;
 810227e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102280:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8102284:	f002 fd2e 	bl	8104ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8102288:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 810228a:	a907      	add	r1, sp, #28
 810228c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810228e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102292:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8102296:	f002 fd25 	bl	8104ce4 <HAL_GPIO_Init>

}
 810229a:	b00d      	add	sp, #52	; 0x34
 810229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810229e:	bf00      	nop
 81022a0:	58024400 	.word	0x58024400
 81022a4:	58022000 	.word	0x58022000
 81022a8:	58022400 	.word	0x58022400
 81022ac:	58020c00 	.word	0x58020c00
 81022b0:	58020800 	.word	0x58020800

081022b4 <IPCInitialize>:
} shared_memory __attribute__((section(".ipc_data")));

void IPCInitialize( void )
{
  // only initialize a few, the others are constantly updated by DSP or others
  shared_memory.voice_volume_normalized = 0.5f;
 81022b4:	4b07      	ldr	r3, [pc, #28]	; (81022d4 <IPCInitialize+0x20>)
  shared_memory.voice_mute_active = FALSE;
 81022b6:	2200      	movs	r2, #0
  shared_memory.voice_volume_normalized = 0.5f;
 81022b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 81022bc:	6019      	str	r1, [r3, #0]
  shared_memory.voice_mute_active = FALSE;
 81022be:	711a      	strb	r2, [r3, #4]
  shared_memory.anomaly_detection_active = FALSE;
 81022c0:	715a      	strb	r2, [r3, #5]
  shared_memory.alarm_mute = FALSE;
 81022c2:	719a      	strb	r2, [r3, #6]
  shared_memory.anomaly_vector[0] = 0;
 81022c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  shared_memory.anomaly_vector[1] = 0;
 81022c8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  shared_memory.anomaly_vector[2] = 0;
 81022cc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 81022d0:	4770      	bx	lr
 81022d2:	bf00      	nop
 81022d4:	10000000 	.word	0x10000000

081022d8 <IPCGetVoiceVolumeNormalized>:

float IPCGetVoiceVolumeNormalized( void )
{
  return shared_memory.voice_volume_normalized;
 81022d8:	4b01      	ldr	r3, [pc, #4]	; (81022e0 <IPCGetVoiceVolumeNormalized+0x8>)
 81022da:	ed93 0a00 	vldr	s0, [r3]
}
 81022de:	4770      	bx	lr
 81022e0:	10000000 	.word	0x10000000

081022e4 <IPCGetVoiceMuteState>:
  shared_memory.voice_volume_normalized = new_vol;
}

boolean_t IPCGetVoiceMuteState( void )
{
  return shared_memory.voice_mute_active;
 81022e4:	4b01      	ldr	r3, [pc, #4]	; (81022ec <IPCGetVoiceMuteState+0x8>)
 81022e6:	7918      	ldrb	r0, [r3, #4]
}
 81022e8:	4770      	bx	lr
 81022ea:	bf00      	nop
 81022ec:	10000000 	.word	0x10000000

081022f0 <IPCSetAnomalyDetectState>:
  return shared_memory.anomaly_detection_active;
}

void IPCSetAnomalyDetectState( boolean_t new_state )
{
  shared_memory.anomaly_detection_active = new_state;
 81022f0:	4b01      	ldr	r3, [pc, #4]	; (81022f8 <IPCSetAnomalyDetectState+0x8>)
 81022f2:	7158      	strb	r0, [r3, #5]
}
 81022f4:	4770      	bx	lr
 81022f6:	bf00      	nop
 81022f8:	10000000 	.word	0x10000000

081022fc <IPCSetAnomalyFrequency>:
  return shared_memory.anomaly_frequency;
}

void IPCSetAnomalyFrequency( float new_freq )
{
  shared_memory.anomaly_frequency = new_freq;
 81022fc:	4b01      	ldr	r3, [pc, #4]	; (8102304 <IPCSetAnomalyFrequency+0x8>)
 81022fe:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8102302:	4770      	bx	lr
 8102304:	10000000 	.word	0x10000000

08102308 <IPCSetAnomalyMagnitudedB>:
  return shared_memory.anomaly_magnitude_db;
}

void IPCSetAnomalyMagnitudedB( float new_mag )
{
  shared_memory.anomaly_magnitude_db = new_mag;
 8102308:	4b01      	ldr	r3, [pc, #4]	; (8102310 <IPCSetAnomalyMagnitudedB+0x8>)
 810230a:	ed83 0a03 	vstr	s0, [r3, #12]
}
 810230e:	4770      	bx	lr
 8102310:	10000000 	.word	0x10000000

08102314 <IPCGetAlarmMuteState>:

boolean_t IPCGetAlarmMuteState( void )
{
  return shared_memory.alarm_mute;
 8102314:	4b01      	ldr	r3, [pc, #4]	; (810231c <IPCGetAlarmMuteState+0x8>)
 8102316:	7998      	ldrb	r0, [r3, #6]
}
 8102318:	4770      	bx	lr
 810231a:	bf00      	nop
 810231c:	10000000 	.word	0x10000000

08102320 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
  shared_memory.alarm_mute = new_state;
 8102320:	4b01      	ldr	r3, [pc, #4]	; (8102328 <IPCSetAlarmMuteState+0x8>)
 8102322:	7198      	strb	r0, [r3, #6]
}
 8102324:	4770      	bx	lr
 8102326:	bf00      	nop
 8102328:	10000000 	.word	0x10000000

0810232c <main>:

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810232c:	4b1e      	ldr	r3, [pc, #120]	; (81023a8 <main+0x7c>)
{
 810232e:	b500      	push	{lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102330:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102334:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8102338:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810233c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
{
 8102340:	b083      	sub	sp, #12
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102346:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102348:	9301      	str	r3, [sp, #4]
 810234a:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810234c:	f002 fe00 	bl	8104f50 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */

  HAL_PWREx_ClearPendingEvent();
 8102350:	f002 fe4a 	bl	8104fe8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8102354:	2201      	movs	r2, #1
 8102356:	2102      	movs	r1, #2
 8102358:	2000      	movs	r0, #0
 810235a:	f002 fe01 	bl	8104f60 <HAL_PWREx_EnterSTOPMode>

  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810235e:	4b13      	ldr	r3, [pc, #76]	; (81023ac <main+0x80>)
 8102360:	4a13      	ldr	r2, [pc, #76]	; (81023b0 <main+0x84>)
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8102368:	2b07      	cmp	r3, #7
 810236a:	d016      	beq.n	810239a <main+0x6e>
 810236c:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 8102370:	f043 0301 	orr.w	r3, r3, #1
 8102374:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102378:	f000 fd18 	bl	8102dac <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810237c:	f7ff fefe 	bl	810217c <MX_GPIO_Init>
  MX_DMA_Init();
 8102380:	f7ff f88e 	bl	81014a0 <MX_DMA_Init>
  MX_TIM3_Init();
 8102384:	f000 fba2 	bl	8102acc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8102388:	f000 fc08 	bl	8102b9c <MX_USART3_UART_Init>
  MX_ADC3_Init();
 810238c:	f7fe ff42 	bl	8101214 <MX_ADC3_Init>
  MX_ADC1_Init();
 8102390:	f7fe fec8 	bl	8101124 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  dspEntry( );
 8102394:	f7ff fc08 	bl	8101ba8 <dspEntry>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8102398:	e7fe      	b.n	8102398 <main+0x6c>
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810239a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 810239e:	f043 0301 	orr.w	r3, r3, #1
 81023a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81023a6:	e7e7      	b.n	8102378 <main+0x4c>
 81023a8:	58024400 	.word	0x58024400
 81023ac:	e000ed00 	.word	0xe000ed00
 81023b0:	58026400 	.word	0x58026400

081023b4 <getUserButtonState>:
}

/* USER CODE BEGIN 4 */

boolean_t getUserButtonState ( void )
{
 81023b4:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin) ? TRUE : FALSE);
 81023b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 81023ba:	4803      	ldr	r0, [pc, #12]	; (81023c8 <getUserButtonState+0x14>)
 81023bc:	f002 fdbe 	bl	8104f3c <HAL_GPIO_ReadPin>
}
 81023c0:	3800      	subs	r0, #0
 81023c2:	bf18      	it	ne
 81023c4:	2001      	movne	r0, #1
 81023c6:	bd08      	pop	{r3, pc}
 81023c8:	58020800 	.word	0x58020800

081023cc <setUserLED1State>:

void setUserLED1State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD1_GPIO_Port, LD1_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 81023cc:	fab0 f280 	clz	r2, r0
 81023d0:	0952      	lsrs	r2, r2, #5
 81023d2:	4802      	ldr	r0, [pc, #8]	; (81023dc <setUserLED1State+0x10>)
 81023d4:	2104      	movs	r1, #4
 81023d6:	f002 bdb7 	b.w	8104f48 <HAL_GPIO_WritePin>
 81023da:	bf00      	nop
 81023dc:	58022400 	.word	0x58022400

081023e0 <setUserLED2State>:
}

void setUserLED2State ( boolean_t state )
{
  HAL_GPIO_WritePin( LD2_GPIO_Port, LD2_Pin, (state ? GPIO_PIN_RESET : GPIO_PIN_SET) );
 81023e0:	fab0 f280 	clz	r2, r0
 81023e4:	0952      	lsrs	r2, r2, #5
 81023e6:	4802      	ldr	r0, [pc, #8]	; (81023f0 <setUserLED2State+0x10>)
 81023e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 81023ec:	f002 bdac 	b.w	8104f48 <HAL_GPIO_WritePin>
 81023f0:	58022000 	.word	0x58022000

081023f4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81023f4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81023f6:	e7fe      	b.n	81023f6 <Error_Handler+0x2>

081023f8 <alarminit>:
extern UART_HandleTypeDef huart3;

// one-time generation of alarm tone,
//   contains integer number of cycles of alarm frequency to avoid discontinuities
void alarminit( )
{
 81023f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81023fc:	4c16      	ldr	r4, [pc, #88]	; (8102458 <alarminit+0x60>)
 81023fe:	ed9f 0a17 	vldr	s0, [pc, #92]	; 810245c <alarminit+0x64>
 8102402:	ed2d 8b02 	vpush	{d8}
  int n;

  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
	{
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102406:	a712      	add	r7, pc, #72	; (adr r7, 8102450 <alarminit+0x58>)
 8102408:	e9d7 6700 	ldrd	r6, r7, [r7]
 810240c:	ed9f 8a14 	vldr	s16, [pc, #80]	; 8102460 <alarminit+0x68>
 8102410:	f104 0880 	add.w	r8, r4, #128	; 0x80
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102414:	2500      	movs	r5, #0
 8102416:	e00b      	b.n	8102430 <alarminit+0x38>
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102418:	f7fe f90c 	bl	8100634 <__aeabi_i2d>
 810241c:	4632      	mov	r2, r6
 810241e:	463b      	mov	r3, r7
 8102420:	f7fe f972 	bl	8100708 <__aeabi_dmul>
 8102424:	f7fe fc68 	bl	8100cf8 <__aeabi_d2f>
 8102428:	ee00 0a10 	vmov	s0, r0
 810242c:	f00b fa04 	bl	810d838 <sinf>
 8102430:	ee20 0a08 	vmul.f32	s0, s0, s16
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102434:	3501      	adds	r5, #1
		alarm_tone_data_buffer[n] = (65535/64)* sinf((750.0f/16000.0f)*2*M_PI*n);
 8102436:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 810243a:	4628      	mov	r0, r5
 810243c:	ee10 3a10 	vmov	r3, s0
 8102440:	f824 3f02 	strh.w	r3, [r4, #2]!
  for (n = 0; n < ALARM_BUFFER_LENGTH; ++n)
 8102444:	45a0      	cmp	r8, r4
 8102446:	d1e7      	bne.n	8102418 <alarminit+0x20>
	}
}
 8102448:	ecbd 8b02 	vpop	{d8}
 810244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8102450:	7f3321d2 	.word	0x7f3321d2
 8102454:	3fd2d97c 	.word	0x3fd2d97c
 8102458:	100187a2 	.word	0x100187a2
 810245c:	00000000 	.word	0x00000000
 8102460:	447fc000 	.word	0x447fc000
 8102464:	00000000 	.word	0x00000000

08102468 <playAudio>:

// passed array is voice audio from DSP
void playAudio( int16_t *audio_samples, uint16_t audio_sample_length )
{
 8102468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810246c:	ed2d 8b08 	vpush	{d8-d11}
	alarm_state_previous = alarm_state_current;
 8102470:	4c63      	ldr	r4, [pc, #396]	; (8102600 <playAudio+0x198>)
 8102472:	4e64      	ldr	r6, [pc, #400]	; (8102604 <playAudio+0x19c>)
 8102474:	7823      	ldrb	r3, [r4, #0]
 8102476:	7033      	strb	r3, [r6, #0]
{
 8102478:	b085      	sub	sp, #20
 810247a:	460d      	mov	r5, r1
 810247c:	9001      	str	r0, [sp, #4]
	alarm_state_current = dspGetIsAnomalyDetected( );
 810247e:	f7ff fb81 	bl	8101b84 <dspGetIsAnomalyDetected>
 8102482:	7020      	strb	r0, [r4, #0]

	if ( alarm_state_current && !alarm_state_previous )
 8102484:	b118      	cbz	r0, 810248e <playAudio+0x26>
 8102486:	7830      	ldrb	r0, [r6, #0]
 8102488:	2800      	cmp	r0, #0
 810248a:	f000 81c8 	beq.w	810281e <playAudio+0x3b6>
    IPCSetAlarmMuteState( FALSE );
	}
	else
	{
	  // update mute state from IPC
	  alarm_mute = IPCGetAlarmMuteState( );
 810248e:	f7ff ff41 	bl	8102314 <IPCGetAlarmMuteState>
 8102492:	4f5d      	ldr	r7, [pc, #372]	; (8102608 <playAudio+0x1a0>)
 8102494:	7038      	strb	r0, [r7, #0]
	}

	// update voice volume from IPC
	voice_volume_normalized = IPCGetVoiceVolumeNormalized( );
 8102496:	f7ff ff1f 	bl	81022d8 <IPCGetVoiceVolumeNormalized>
	voice_volume_log_approx = powf(voice_volume_normalized, 4.0f) * VOICE_VOLUME_MAX;
 810249a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 810249e:	f00b f955 	bl	810d74c <powf>
 81024a2:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 81024a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 81024aa:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8102638 <playAudio+0x1d0>
 81024ae:	ed88 0a00 	vstr	s0, [r8]
	// scale raw voice audio data depending on volume variable, the other sources have their own volume standards
	// TODO - adjust this scaling so the bounds are reasonable
	if ( IPCGetVoiceMuteState( ) )
 81024b2:	f7ff ff17 	bl	81022e4 <IPCGetVoiceMuteState>
 81024b6:	2800      	cmp	r0, #0
 81024b8:	f040 80c2 	bne.w	8102640 <playAudio+0x1d8>
    }
	}
	else
  {
	  // voice is active, adjust volume
    for ( int index = 0; index < audio_sample_length; index++ )
 81024bc:	2d00      	cmp	r5, #0
 81024be:	f000 81f4 	beq.w	81028aa <playAudio+0x442>
 81024c2:	9901      	ldr	r1, [sp, #4]
    {
      audio_samples[index] = (int16_t)((float)audio_samples[index] * voice_volume_log_approx);
 81024c4:	ed98 7a00 	vldr	s14, [r8]
 81024c8:	006a      	lsls	r2, r5, #1
 81024ca:	9203      	str	r2, [sp, #12]
 81024cc:	460b      	mov	r3, r1
 81024ce:	eb01 0245 	add.w	r2, r1, r5, lsl #1
 81024d2:	f9b3 1000 	ldrsh.w	r1, [r3]
 81024d6:	ee07 1a90 	vmov	s15, r1
 81024da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81024de:	ee67 7a87 	vmul.f32	s15, s15, s14
 81024e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 81024e6:	ee17 1a90 	vmov	r1, s15
 81024ea:	f823 1b02 	strh.w	r1, [r3], #2
    for ( int index = 0; index < audio_sample_length; index++ )
 81024ee:	429a      	cmp	r2, r3
 81024f0:	d1ef      	bne.n	81024d2 <playAudio+0x6a>
    }
	}

	// Mix in alarm audio, if alarm active or needs to end
  if ( alarm_state_current && !alarm_mute )
 81024f2:	f894 e000 	ldrb.w	lr, [r4]
 81024f6:	f1be 0f00 	cmp.w	lr, #0
 81024fa:	f040 80b1 	bne.w	8102660 <playAudio+0x1f8>
                                      ? 0 : alarm_tone_buffer_index + 1);
	    }
	    alarm_counter++;
	  }
	}
  else if ( alarm_tone_buffer_index != 0 )
 81024fe:	4f43      	ldr	r7, [pc, #268]	; (810260c <playAudio+0x1a4>)
 8102500:	883b      	ldrh	r3, [r7, #0]
 8102502:	2b00      	cmp	r3, #0
 8102504:	f040 81be 	bne.w	8102884 <playAudio+0x41c>
          sonification_index_n = 1;
        }
      }
    }
  }
  else if ( sonification_active )
 8102508:	f8df a128 	ldr.w	sl, [pc, #296]	; 8102634 <playAudio+0x1cc>
 810250c:	f89a 3000 	ldrb.w	r3, [sl]
 8102510:	2b00      	cmp	r3, #0
 8102512:	d065      	beq.n	81025e0 <playAudio+0x178>
  {
    // alarm is not active, but sonification needs to end cleanly
    // for each sample in array, unless sonification has reached end condition
    for ( int index = 0; (index < audio_sample_length) && sonification_active; index++ )
 8102514:	2d00      	cmp	r5, #0
 8102516:	d063      	beq.n	81025e0 <playAudio+0x178>
 8102518:	9b01      	ldr	r3, [sp, #4]
 810251a:	9a03      	ldr	r2, [sp, #12]
    {
      // calculate sample, volume dependent on standard maximum and linear with dsp reported magnitude
      // sample magnitude has bounds from max of standard magnitude (65535/64) to min of (65535/184)
      // TODO - test this volume setup to see if it and the bounds work well
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810251c:	ed9f aa3c 	vldr	s20, [pc, #240]	; 8102610 <playAudio+0x1a8>
 8102520:	eddf aa3c 	vldr	s21, [pc, #240]	; 8102614 <playAudio+0x1ac>
 8102524:	eddf 9a3c 	vldr	s19, [pc, #240]	; 8102618 <playAudio+0x1b0>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102528:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 810261c <playAudio+0x1b4>
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810252c:	eddf 8a3c 	vldr	s17, [pc, #240]	; 8102620 <playAudio+0x1b8>
 8102530:	4f3c      	ldr	r7, [pc, #240]	; (8102624 <playAudio+0x1bc>)
 8102532:	f8df b108 	ldr.w	fp, [pc, #264]	; 810263c <playAudio+0x1d4>
 8102536:	4d3c      	ldr	r5, [pc, #240]	; (8102628 <playAudio+0x1c0>)
 8102538:	461e      	mov	r6, r3
 810253a:	4413      	add	r3, r2
 810253c:	9302      	str	r3, [sp, #8]
 810253e:	edd7 7a00 	vldr	s15, [r7]
 8102542:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8102546:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 810254a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 810254e:	eeb0 1a6a 	vmov.f32	s2, s21
 8102552:	eef0 0a69 	vmov.f32	s1, s19
 8102556:	ee87 0a80 	vdiv.f32	s0, s15, s0
 810255a:	f7fe ff91 	bl	8101480 <limitFloat>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810255e:	682c      	ldr	r4, [r5, #0]
 8102560:	ed9b 7a00 	vldr	s14, [fp]
 8102564:	eec7 7a09 	vdiv.f32	s15, s14, s18
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102568:	eeb0 8a40 	vmov.f32	s16, s0
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810256c:	ee77 7aa7 	vadd.f32	s15, s15, s15
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102570:	ee38 8a28 	vadd.f32	s16, s16, s17
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102574:	ee17 0a90 	vmov	r0, s15
 8102578:	f7fe f86e 	bl	8100658 <__aeabi_f2d>
 810257c:	a31e      	add	r3, pc, #120	; (adr r3, 81025f8 <playAudio+0x190>)
 810257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102582:	f7fe f8c1 	bl	8100708 <__aeabi_dmul>
 8102586:	4680      	mov	r8, r0
 8102588:	4620      	mov	r0, r4
 810258a:	4689      	mov	r9, r1
 810258c:	f7fe f842 	bl	8100614 <__aeabi_ui2d>
 8102590:	460b      	mov	r3, r1
 8102592:	4602      	mov	r2, r0
 8102594:	4649      	mov	r1, r9
 8102596:	4640      	mov	r0, r8
 8102598:	f7fe f8b6 	bl	8100708 <__aeabi_dmul>
 810259c:	f7fe fbac 	bl	8100cf8 <__aeabi_d2f>
 81025a0:	ee00 0a10 	vmov	s0, r0
 81025a4:	f00b f948 	bl	810d838 <sinf>
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81025a8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 810262c <playAudio+0x1c4>
 81025ac:	eec7 7a08 	vdiv.f32	s15, s14, s16
      if ( sonification_sample == 0 )
      {
        sonification_active = FALSE;
      }
      audio_samples[index] += sonification_sample;
      sonification_index_n++;
 81025b0:	3401      	adds	r4, #1
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81025b2:	ee27 0a80 	vmul.f32	s0, s15, s0
      int16_t sonification_sample = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81025b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 81025ba:	ee10 3a10 	vmov	r3, s0
 81025be:	b21b      	sxth	r3, r3
      if ( sonification_sample == 0 )
 81025c0:	b90b      	cbnz	r3, 81025c6 <playAudio+0x15e>
        sonification_active = FALSE;
 81025c2:	f88a 3000 	strb.w	r3, [sl]
      audio_samples[index] += sonification_sample;
 81025c6:	f9b6 2000 	ldrsh.w	r2, [r6]
      sonification_index_n++;
 81025ca:	602c      	str	r4, [r5, #0]
      audio_samples[index] += sonification_sample;
 81025cc:	4413      	add	r3, r2
 81025ce:	f826 3b02 	strh.w	r3, [r6], #2
    for ( int index = 0; (index < audio_sample_length) && sonification_active; index++ )
 81025d2:	9b02      	ldr	r3, [sp, #8]
 81025d4:	42b3      	cmp	r3, r6
 81025d6:	d003      	beq.n	81025e0 <playAudio+0x178>
 81025d8:	f89a 3000 	ldrb.w	r3, [sl]
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d1ae      	bne.n	810253e <playAudio+0xd6>
    }
  }

	// write mixed output audio to output -> stlink uart -> usb com port
  HAL_UART_Transmit_DMA( &huart3, (uint8_t*)audio_samples, audio_sample_length*2 );
 81025e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 81025e4:	4812      	ldr	r0, [pc, #72]	; (8102630 <playAudio+0x1c8>)
 81025e6:	9901      	ldr	r1, [sp, #4]
}
 81025e8:	b005      	add	sp, #20
 81025ea:	ecbd 8b08 	vpop	{d8-d11}
 81025ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_UART_Transmit_DMA( &huart3, (uint8_t*)audio_samples, audio_sample_length*2 );
 81025f2:	f004 bd2d 	b.w	8107050 <HAL_UART_Transmit_DMA>
 81025f6:	bf00      	nop
 81025f8:	54442d18 	.word	0x54442d18
 81025fc:	400921fb 	.word	0x400921fb
 8102600:	1001879d 	.word	0x1001879d
 8102604:	1001879e 	.word	0x1001879e
 8102608:	1001879c 	.word	0x1001879c
 810260c:	100187a0 	.word	0x100187a0
 8102610:	42700000 	.word	0x42700000
 8102614:	42f00000 	.word	0x42f00000
 8102618:	00000000 	.word	0x00000000
 810261c:	467a0000 	.word	0x467a0000
 8102620:	42800000 	.word	0x42800000
 8102624:	10000074 	.word	0x10000074
 8102628:	10018828 	.word	0x10018828
 810262c:	477fff00 	.word	0x477fff00
 8102630:	100188fc 	.word	0x100188fc
 8102634:	10018824 	.word	0x10018824
 8102638:	10018830 	.word	0x10018830
 810263c:	10000068 	.word	0x10000068
    for ( int index = 0; index < audio_sample_length; index++ )
 8102640:	2d00      	cmp	r5, #0
 8102642:	f000 8132 	beq.w	81028aa <playAudio+0x442>
      audio_samples[index] = 0;
 8102646:	006b      	lsls	r3, r5, #1
 8102648:	9801      	ldr	r0, [sp, #4]
 810264a:	9303      	str	r3, [sp, #12]
 810264c:	461a      	mov	r2, r3
 810264e:	2100      	movs	r1, #0
 8102650:	f007 fc11 	bl	8109e76 <memset>
  if ( alarm_state_current && !alarm_mute )
 8102654:	f894 e000 	ldrb.w	lr, [r4]
 8102658:	f1be 0f00 	cmp.w	lr, #0
 810265c:	f43f af4f 	beq.w	81024fe <playAudio+0x96>
 8102660:	7839      	ldrb	r1, [r7, #0]
 8102662:	2900      	cmp	r1, #0
 8102664:	f040 80e2 	bne.w	810282c <playAudio+0x3c4>
    for ( int index = 0; index < audio_sample_length; index++ )
 8102668:	b36d      	cbz	r5, 81026c6 <playAudio+0x25e>
 810266a:	f8df b294 	ldr.w	fp, [pc, #660]	; 8102900 <playAudio+0x498>
 810266e:	4f92      	ldr	r7, [pc, #584]	; (81028b8 <playAudio+0x450>)
 8102670:	f8db 2000 	ldr.w	r2, [fp]
 8102674:	8838      	ldrh	r0, [r7, #0]
	    if (( alarm_counter % 16000 < 4000 ) || ( alarm_tone_buffer_index != 0))
 8102676:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8102904 <playAudio+0x49c>
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 810267a:	f8df 928c 	ldr.w	r9, [pc, #652]	; 8102908 <playAudio+0x4a0>
 810267e:	9c01      	ldr	r4, [sp, #4]
 8102680:	eb05 0c02 	add.w	ip, r5, r2
	    if (( alarm_counter % 16000 < 4000 ) || ( alarm_tone_buffer_index != 0))
 8102684:	f44f 5e7a 	mov.w	lr, #16000	; 0x3e80
 8102688:	fba8 a302 	umull	sl, r3, r8, r2
 810268c:	0a9b      	lsrs	r3, r3, #10
 810268e:	fb0e 2313 	mls	r3, lr, r3, r2
 8102692:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 8102696:	f100 0a01 	add.w	sl, r0, #1
	    if (( alarm_counter % 16000 < 4000 ) || ( alarm_tone_buffer_index != 0))
 810269a:	d300      	bcc.n	810269e <playAudio+0x236>
 810269c:	b150      	cbz	r0, 81026b4 <playAudio+0x24c>
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 810269e:	f839 1010 	ldrh.w	r1, [r9, r0, lsl #1]
 81026a2:	8823      	ldrh	r3, [r4, #0]
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 81026a4:	283f      	cmp	r0, #63	; 0x3f
        audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 81026a6:	440b      	add	r3, r1
 81026a8:	8023      	strh	r3, [r4, #0]
        alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 81026aa:	bf14      	ite	ne
 81026ac:	fa1f f08a 	uxthne.w	r0, sl
 81026b0:	2000      	moveq	r0, #0
 81026b2:	2101      	movs	r1, #1
    for ( int index = 0; index < audio_sample_length; index++ )
 81026b4:	3201      	adds	r2, #1
 81026b6:	4594      	cmp	ip, r2
 81026b8:	f104 0402 	add.w	r4, r4, #2
 81026bc:	d1e4      	bne.n	8102688 <playAudio+0x220>
 81026be:	f8cb c000 	str.w	ip, [fp]
 81026c2:	b101      	cbz	r1, 81026c6 <playAudio+0x25e>
 81026c4:	8038      	strh	r0, [r7, #0]
    sonification_active = TRUE;
 81026c6:	4b7d      	ldr	r3, [pc, #500]	; (81028bc <playAudio+0x454>)
 81026c8:	2201      	movs	r2, #1
 81026ca:	701a      	strb	r2, [r3, #0]
    sonification_frequency_normalized = dspGetAnomalyFrequencyNormalized( );
 81026cc:	f7ff fa60 	bl	8101b90 <dspGetAnomalyFrequencyNormalized>
 81026d0:	4b7b      	ldr	r3, [pc, #492]	; (81028c0 <playAudio+0x458>)
    if ( alarm_state_previous == FALSE )
 81026d2:	7832      	ldrb	r2, [r6, #0]
    sonification_frequency_normalized = dspGetAnomalyFrequencyNormalized( );
 81026d4:	ed83 0a00 	vstr	s0, [r3]
    if ( alarm_state_previous == FALSE )
 81026d8:	2a00      	cmp	r2, #0
 81026da:	f000 80d6 	beq.w	810288a <playAudio+0x422>
                                     + (FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized)
 81026de:	ed93 6a00 	vldr	s12, [r3]
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 81026e2:	f8df a228 	ldr.w	sl, [pc, #552]	; 810290c <playAudio+0x4a4>
                                     + (FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized)
 81026e6:	eddf 6a77 	vldr	s13, [pc, #476]	; 81028c4 <playAudio+0x45c>
 81026ea:	eddf 7a77 	vldr	s15, [pc, #476]	; 81028c8 <playAudio+0x460>
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 81026ee:	ed9a 7a00 	vldr	s14, [sl]
 81026f2:	ed9f 8a76 	vldr	s16, [pc, #472]	; 81028cc <playAudio+0x464>
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 81026f6:	4f76      	ldr	r7, [pc, #472]	; (81028d0 <playAudio+0x468>)
                                     + (FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized)
 81026f8:	eee6 7a26 	vfma.f32	s15, s12, s13
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 81026fc:	eddf 6a75 	vldr	s13, [pc, #468]	; 81028d4 <playAudio+0x46c>
 8102700:	ee27 7a26 	vmul.f32	s14, s14, s13
                                       / 400.0f;
 8102704:	ee87 6a88 	vdiv.f32	s12, s15, s16
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 8102708:	eec7 7a08 	vdiv.f32	s15, s14, s16
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 810270c:	ed97 7a00 	vldr	s14, [r7]
                                     + (FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized)
 8102710:	ee77 7a86 	vadd.f32	s15, s15, s12
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 8102714:	ee27 7a26 	vmul.f32	s14, s14, s13
      sonification_frequency_new = (sonification_frequency_new * 399.0f / 400.0f)
 8102718:	edca 7a00 	vstr	s15, [sl]
      sonification_magnitude = (sonification_magnitude * 399.0f / 400.0f) + dspGetAnomalyMagnitude( ) / 400.0f;
 810271c:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8102720:	f7ff fa3c 	bl	8101b9c <dspGetAnomalyMagnitude>
 8102724:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8102728:	ee37 0aa8 	vadd.f32	s0, s15, s17
 810272c:	ed87 0a00 	vstr	s0, [r7]
    for ( int index = 0; index < audio_sample_length; index++ )
 8102730:	2d00      	cmp	r5, #0
 8102732:	f43f af55 	beq.w	81025e0 <playAudio+0x178>
 8102736:	9b01      	ldr	r3, [sp, #4]
 8102738:	9a03      	ldr	r2, [sp, #12]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810273a:	eddf aa67 	vldr	s21, [pc, #412]	; 81028d8 <playAudio+0x470>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810273e:	ed9f aa67 	vldr	s20, [pc, #412]	; 81028dc <playAudio+0x474>
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102742:	eddf 9a67 	vldr	s19, [pc, #412]	; 81028e0 <playAudio+0x478>
 8102746:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 8102910 <playAudio+0x4a8>
 810274a:	4d66      	ldr	r5, [pc, #408]	; (81028e4 <playAudio+0x47c>)
 810274c:	ed9f ba66 	vldr	s22, [pc, #408]	; 81028e8 <playAudio+0x480>
 8102750:	ed9f 9a66 	vldr	s18, [pc, #408]	; 81028ec <playAudio+0x484>
 8102754:	1e9e      	subs	r6, r3, #2
      sonification_sample_previous = sonification_sample_current;
 8102756:	4b66      	ldr	r3, [pc, #408]	; (81028f0 <playAudio+0x488>)
 8102758:	18b2      	adds	r2, r6, r2
 810275a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810275e:	9202      	str	r2, [sp, #8]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102760:	edd7 7a00 	vldr	s15, [r7]
      sonification_sample_previous = sonification_sample_current;
 8102764:	4a63      	ldr	r2, [pc, #396]	; (81028f4 <playAudio+0x48c>)
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102766:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 810276a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 810276e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8102772:	eeb0 1a4b 	vmov.f32	s2, s22
 8102776:	eef0 0a49 	vmov.f32	s1, s18
 810277a:	ee87 0a80 	vdiv.f32	s0, s15, s0
      sonification_sample_previous = sonification_sample_current;
 810277e:	8013      	strh	r3, [r2, #0]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102780:	f7fe fe7e 	bl	8101480 <limitFloat>
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102784:	682c      	ldr	r4, [r5, #0]
 8102786:	eddb 8a00 	vldr	s17, [fp]
 810278a:	eec8 7a8a 	vdiv.f32	s15, s17, s20
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 810278e:	eeb0 8a40 	vmov.f32	s16, s0
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 8102792:	ee77 7aa7 	vadd.f32	s15, s15, s15
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 8102796:	ee38 8a29 	vadd.f32	s16, s16, s19
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 810279a:	ee17 0a90 	vmov	r0, s15
 810279e:	f7fd ff5b 	bl	8100658 <__aeabi_f2d>
 81027a2:	a343      	add	r3, pc, #268	; (adr r3, 81028b0 <playAudio+0x448>)
 81027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027a8:	f7fd ffae 	bl	8100708 <__aeabi_dmul>
 81027ac:	4680      	mov	r8, r0
 81027ae:	4620      	mov	r0, r4
 81027b0:	4689      	mov	r9, r1
 81027b2:	f7fd ff2f 	bl	8100614 <__aeabi_ui2d>
 81027b6:	4602      	mov	r2, r0
 81027b8:	460b      	mov	r3, r1
 81027ba:	4640      	mov	r0, r8
 81027bc:	4649      	mov	r1, r9
 81027be:	f7fd ffa3 	bl	8100708 <__aeabi_dmul>
 81027c2:	f7fe fa99 	bl	8100cf8 <__aeabi_d2f>
 81027c6:	ee00 0a10 	vmov	s0, r0
 81027ca:	f00b f835 	bl	810d838 <sinf>
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81027ce:	eddf 6a4a 	vldr	s13, [pc, #296]	; 81028f8 <playAudio+0x490>
      if ( sonification_frequency_new != sonification_frequency_current )
 81027d2:	ed9a 7a00 	vldr	s14, [sl]
      audio_samples[index] += sonification_sample_current;
 81027d6:	f836 2f02 	ldrh.w	r2, [r6, #2]!
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81027da:	4945      	ldr	r1, [pc, #276]	; (81028f0 <playAudio+0x488>)
 81027dc:	eec6 7a88 	vdiv.f32	s15, s13, s16
      sonification_index_n++;
 81027e0:	3401      	adds	r4, #1
 81027e2:	602c      	str	r4, [r5, #0]
      if ( sonification_frequency_new != sonification_frequency_current )
 81027e4:	eef4 8a47 	vcmp.f32	s17, s14
                                      *sinf((sonification_frequency_current / 16000.0f)*2*M_PI*sonification_index_n);
 81027e8:	ee27 0a80 	vmul.f32	s0, s15, s0
      if ( sonification_frequency_new != sonification_frequency_current )
 81027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81027f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 81027f4:	ee10 3a10 	vmov	r3, s0
 81027f8:	b21b      	sxth	r3, r3
      audio_samples[index] += sonification_sample_current;
 81027fa:	441a      	add	r2, r3
 81027fc:	8032      	strh	r2, [r6, #0]
      sonification_sample_current = (65535/(64 + limitFloat(2 * ( 60 - sonification_magnitude) / 6, 0.0f, 120.0f)))
 81027fe:	800b      	strh	r3, [r1, #0]
      if ( sonification_frequency_new != sonification_frequency_current )
 8102800:	d009      	beq.n	8102816 <playAudio+0x3ae>
        if ((( sonification_sample_current == 0))
 8102802:	b943      	cbnz	r3, 8102816 <playAudio+0x3ae>
            && (sonification_sample_previous < sonification_sample_current))
 8102804:	4a3b      	ldr	r2, [pc, #236]	; (81028f4 <playAudio+0x48c>)
 8102806:	f9b2 2000 	ldrsh.w	r2, [r2]
 810280a:	2a00      	cmp	r2, #0
 810280c:	da03      	bge.n	8102816 <playAudio+0x3ae>
          sonification_index_n = 1;
 810280e:	2201      	movs	r2, #1
          sonification_frequency_current = sonification_frequency_new;
 8102810:	ed8b 7a00 	vstr	s14, [fp]
          sonification_index_n = 1;
 8102814:	602a      	str	r2, [r5, #0]
    for ( int index = 0; index < audio_sample_length; index++ )
 8102816:	9a02      	ldr	r2, [sp, #8]
 8102818:	4296      	cmp	r6, r2
 810281a:	d1a1      	bne.n	8102760 <playAudio+0x2f8>
 810281c:	e6e0      	b.n	81025e0 <playAudio+0x178>
    alarm_mute = FALSE;
 810281e:	4f37      	ldr	r7, [pc, #220]	; (81028fc <playAudio+0x494>)
    alarm_counter = 0;
 8102820:	4b37      	ldr	r3, [pc, #220]	; (8102900 <playAudio+0x498>)
    alarm_mute = FALSE;
 8102822:	7038      	strb	r0, [r7, #0]
    alarm_counter = 0;
 8102824:	6018      	str	r0, [r3, #0]
    IPCSetAlarmMuteState( FALSE );
 8102826:	f7ff fd7b 	bl	8102320 <IPCSetAlarmMuteState>
 810282a:	e634      	b.n	8102496 <playAudio+0x2e>
  else if ( alarm_tone_buffer_index != 0 )
 810282c:	4f22      	ldr	r7, [pc, #136]	; (81028b8 <playAudio+0x450>)
 810282e:	883b      	ldrh	r3, [r7, #0]
 8102830:	2b00      	cmp	r3, #0
 8102832:	f43f af48 	beq.w	81026c6 <playAudio+0x25e>
    for ( int index = 0; index < audio_sample_length; index++ )
 8102836:	2d00      	cmp	r5, #0
 8102838:	f43f af45 	beq.w	81026c6 <playAudio+0x25e>
 810283c:	9901      	ldr	r1, [sp, #4]
 810283e:	9803      	ldr	r0, [sp, #12]
 8102840:	883b      	ldrh	r3, [r7, #0]
 8102842:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8102908 <playAudio+0x4a0>
 8102846:	460a      	mov	r2, r1
 8102848:	eb01 0c00 	add.w	ip, r1, r0
      audio_samples[index] += alarm_tone_data_buffer[alarm_tone_buffer_index];
 810284c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8102850:	f9b2 1000 	ldrsh.w	r1, [r2]
 8102854:	4401      	add	r1, r0
 8102856:	f822 1b02 	strh.w	r1, [r2], #2
      alarm_tone_buffer_index = (alarm_tone_buffer_index == (ALARM_BUFFER_LENGTH - 1)
 810285a:	2b3f      	cmp	r3, #63	; 0x3f
 810285c:	f103 0401 	add.w	r4, r3, #1
 8102860:	bf14      	ite	ne
 8102862:	b2a3      	uxthne	r3, r4
 8102864:	2300      	moveq	r3, #0
    for ( int index = 0; index < audio_sample_length; index++ )
 8102866:	4594      	cmp	ip, r2
 8102868:	d1f0      	bne.n	810284c <playAudio+0x3e4>
 810286a:	803b      	strh	r3, [r7, #0]
  if ( alarm_state_current )
 810286c:	f1be 0f00 	cmp.w	lr, #0
 8102870:	f47f af29 	bne.w	81026c6 <playAudio+0x25e>
  else if ( sonification_active )
 8102874:	f8df a044 	ldr.w	sl, [pc, #68]	; 81028bc <playAudio+0x454>
 8102878:	f89a 3000 	ldrb.w	r3, [sl]
 810287c:	2b00      	cmp	r3, #0
 810287e:	f47f ae4b 	bne.w	8102518 <playAudio+0xb0>
 8102882:	e6ad      	b.n	81025e0 <playAudio+0x178>
    for ( int index = 0; index < audio_sample_length; index++ )
 8102884:	2d00      	cmp	r5, #0
 8102886:	d1d9      	bne.n	810283c <playAudio+0x3d4>
 8102888:	e63e      	b.n	8102508 <playAudio+0xa0>
      sonification_frequency_new = FREQ_MIN + (FREQ_MAX - FREQ_MIN) * sonification_frequency_normalized;
 810288a:	edd3 6a00 	vldr	s13, [r3]
 810288e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 81028c4 <playAudio+0x45c>
 8102892:	eddf 7a0d 	vldr	s15, [pc, #52]	; 81028c8 <playAudio+0x460>
 8102896:	f8df a074 	ldr.w	sl, [pc, #116]	; 810290c <playAudio+0x4a4>
 810289a:	4f0d      	ldr	r7, [pc, #52]	; (81028d0 <playAudio+0x468>)
 810289c:	eee6 7a87 	vfma.f32	s15, s13, s14
 81028a0:	edca 7a00 	vstr	s15, [sl]
      sonification_magnitude = dspGetAnomalyMagnitude( );
 81028a4:	f7ff f97a 	bl	8101b9c <dspGetAnomalyMagnitude>
 81028a8:	e740      	b.n	810272c <playAudio+0x2c4>
 81028aa:	9503      	str	r5, [sp, #12]
 81028ac:	e6d2      	b.n	8102654 <playAudio+0x1ec>
 81028ae:	bf00      	nop
 81028b0:	54442d18 	.word	0x54442d18
 81028b4:	400921fb 	.word	0x400921fb
 81028b8:	100187a0 	.word	0x100187a0
 81028bc:	10018824 	.word	0x10018824
 81028c0:	10000070 	.word	0x10000070
 81028c4:	45f3c000 	.word	0x45f3c000
 81028c8:	43480000 	.word	0x43480000
 81028cc:	43c80000 	.word	0x43c80000
 81028d0:	10000074 	.word	0x10000074
 81028d4:	43c78000 	.word	0x43c78000
 81028d8:	42700000 	.word	0x42700000
 81028dc:	467a0000 	.word	0x467a0000
 81028e0:	42800000 	.word	0x42800000
 81028e4:	10018828 	.word	0x10018828
 81028e8:	42f00000 	.word	0x42f00000
 81028ec:	00000000 	.word	0x00000000
 81028f0:	1001882c 	.word	0x1001882c
 81028f4:	1001882e 	.word	0x1001882e
 81028f8:	477fff00 	.word	0x477fff00
 81028fc:	1001879c 	.word	0x1001879c
 8102900:	10018798 	.word	0x10018798
 8102904:	10624dd3 	.word	0x10624dd3
 8102908:	100187a4 	.word	0x100187a4
 810290c:	1000006c 	.word	0x1000006c
 8102910:	10000068 	.word	0x10000068

08102914 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102914:	4b07      	ldr	r3, [pc, #28]	; (8102934 <HAL_MspInit+0x20>)
 8102916:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 810291a:	f042 0202 	orr.w	r2, r2, #2
 810291e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8102922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
{
 8102926:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102928:	f003 0302 	and.w	r3, r3, #2
 810292c:	9301      	str	r3, [sp, #4]
 810292e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102930:	b002      	add	sp, #8
 8102932:	4770      	bx	lr
 8102934:	58024400 	.word	0x58024400

08102938 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102938:	e7fe      	b.n	8102938 <NMI_Handler>
 810293a:	bf00      	nop

0810293c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810293c:	e7fe      	b.n	810293c <HardFault_Handler>
 810293e:	bf00      	nop

08102940 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102940:	e7fe      	b.n	8102940 <MemManage_Handler>
 8102942:	bf00      	nop

08102944 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102944:	e7fe      	b.n	8102944 <BusFault_Handler>
 8102946:	bf00      	nop

08102948 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102948:	e7fe      	b.n	8102948 <UsageFault_Handler>
 810294a:	bf00      	nop

0810294c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810294c:	4770      	bx	lr
 810294e:	bf00      	nop

08102950 <DebugMon_Handler>:
 8102950:	4770      	bx	lr
 8102952:	bf00      	nop

08102954 <PendSV_Handler>:
 8102954:	4770      	bx	lr
 8102956:	bf00      	nop

08102958 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102958:	f000 ba7a 	b.w	8102e50 <HAL_IncTick>

0810295c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 810295c:	4801      	ldr	r0, [pc, #4]	; (8102964 <DMA1_Stream0_IRQHandler+0x8>)
 810295e:	f001 bf9f 	b.w	81048a0 <HAL_DMA_IRQHandler>
 8102962:	bf00      	nop
 8102964:	1000032c 	.word	0x1000032c

08102968 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8102968:	4801      	ldr	r0, [pc, #4]	; (8102970 <DMA1_Stream1_IRQHandler+0x8>)
 810296a:	f001 bf99 	b.w	81048a0 <HAL_DMA_IRQHandler>
 810296e:	bf00      	nop
 8102970:	100003a4 	.word	0x100003a4

08102974 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102974:	4801      	ldr	r0, [pc, #4]	; (810297c <USART3_IRQHandler+0x8>)
 8102976:	f004 bc25 	b.w	81071c4 <HAL_UART_IRQHandler>
 810297a:	bf00      	nop
 810297c:	100188fc 	.word	0x100188fc

08102980 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102980:	4801      	ldr	r0, [pc, #4]	; (8102988 <DMA1_Stream7_IRQHandler+0x8>)
 8102982:	f001 bf8d 	b.w	81048a0 <HAL_DMA_IRQHandler>
 8102986:	bf00      	nop
 8102988:	10018884 	.word	0x10018884

0810298c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 810298c:	2001      	movs	r0, #1
 810298e:	4770      	bx	lr

08102990 <_kill>:

int _kill(int pid, int sig)
{
 8102990:	b508      	push	{r3, lr}
	errno = EINVAL;
 8102992:	f007 fac3 	bl	8109f1c <__errno>
 8102996:	2316      	movs	r3, #22
 8102998:	6003      	str	r3, [r0, #0]
	return -1;
}
 810299a:	f04f 30ff 	mov.w	r0, #4294967295
 810299e:	bd08      	pop	{r3, pc}

081029a0 <_exit>:

void _exit (int status)
{
 81029a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 81029a2:	f007 fabb 	bl	8109f1c <__errno>
 81029a6:	2316      	movs	r3, #22
 81029a8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 81029aa:	e7fe      	b.n	81029aa <_exit+0xa>

081029ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81029ac:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81029ae:	1e16      	subs	r6, r2, #0
 81029b0:	dd07      	ble.n	81029c2 <_read+0x16>
 81029b2:	460c      	mov	r4, r1
 81029b4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 81029b6:	f3af 8000 	nop.w
 81029ba:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81029be:	42a5      	cmp	r5, r4
 81029c0:	d1f9      	bne.n	81029b6 <_read+0xa>
	}

return len;
}
 81029c2:	4630      	mov	r0, r6
 81029c4:	bd70      	pop	{r4, r5, r6, pc}
 81029c6:	bf00      	nop

081029c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81029c8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81029ca:	1e16      	subs	r6, r2, #0
 81029cc:	dd07      	ble.n	81029de <_write+0x16>
 81029ce:	460c      	mov	r4, r1
 81029d0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 81029d2:	f814 0b01 	ldrb.w	r0, [r4], #1
 81029d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81029da:	42a5      	cmp	r5, r4
 81029dc:	d1f9      	bne.n	81029d2 <_write+0xa>
	}
	return len;
}
 81029de:	4630      	mov	r0, r6
 81029e0:	bd70      	pop	{r4, r5, r6, pc}
 81029e2:	bf00      	nop

081029e4 <_close>:

int _close(int file)
{
	return -1;
}
 81029e4:	f04f 30ff 	mov.w	r0, #4294967295
 81029e8:	4770      	bx	lr
 81029ea:	bf00      	nop

081029ec <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 81029ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81029f0:	604b      	str	r3, [r1, #4]
	return 0;
}
 81029f2:	2000      	movs	r0, #0
 81029f4:	4770      	bx	lr
 81029f6:	bf00      	nop

081029f8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 81029f8:	2001      	movs	r0, #1
 81029fa:	4770      	bx	lr

081029fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 81029fc:	2000      	movs	r0, #0
 81029fe:	4770      	bx	lr

08102a00 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102a00:	490c      	ldr	r1, [pc, #48]	; (8102a34 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102a02:	4a0d      	ldr	r2, [pc, #52]	; (8102a38 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8102a04:	680b      	ldr	r3, [r1, #0]
{
 8102a06:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102a08:	4c0c      	ldr	r4, [pc, #48]	; (8102a3c <_sbrk+0x3c>)
 8102a0a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8102a0c:	b12b      	cbz	r3, 8102a1a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102a0e:	4418      	add	r0, r3
 8102a10:	4290      	cmp	r0, r2
 8102a12:	d807      	bhi.n	8102a24 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8102a14:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8102a16:	4618      	mov	r0, r3
 8102a18:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8102a1a:	4b09      	ldr	r3, [pc, #36]	; (8102a40 <_sbrk+0x40>)
 8102a1c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8102a1e:	4418      	add	r0, r3
 8102a20:	4290      	cmp	r0, r2
 8102a22:	d9f7      	bls.n	8102a14 <_sbrk+0x14>
    errno = ENOMEM;
 8102a24:	f007 fa7a 	bl	8109f1c <__errno>
 8102a28:	230c      	movs	r3, #12
 8102a2a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8102a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102a30:	4618      	mov	r0, r3
 8102a32:	bd10      	pop	{r4, pc}
 8102a34:	10018834 	.word	0x10018834
 8102a38:	10048000 	.word	0x10048000
 8102a3c:	00000400 	.word	0x00000400
 8102a40:	10018ae0 	.word	0x10018ae0

08102a44 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8102a44:	4b0a      	ldr	r3, [pc, #40]	; (8102a70 <HAL_TIM_Base_MspInit+0x2c>)
 8102a46:	6802      	ldr	r2, [r0, #0]
 8102a48:	429a      	cmp	r2, r3
 8102a4a:	d000      	beq.n	8102a4e <HAL_TIM_Base_MspInit+0xa>
 8102a4c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102a4e:	4b09      	ldr	r3, [pc, #36]	; (8102a74 <HAL_TIM_Base_MspInit+0x30>)
 8102a50:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8102a54:	f042 0202 	orr.w	r2, r2, #2
 8102a58:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8102a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
{
 8102a60:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102a62:	f003 0302 	and.w	r3, r3, #2
 8102a66:	9301      	str	r3, [sp, #4]
 8102a68:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8102a6a:	b002      	add	sp, #8
 8102a6c:	4770      	bx	lr
 8102a6e:	bf00      	nop
 8102a70:	40000400 	.word	0x40000400
 8102a74:	58024400 	.word	0x58024400

08102a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102a78:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM3)
 8102a7a:	4a11      	ldr	r2, [pc, #68]	; (8102ac0 <HAL_TIM_MspPostInit+0x48>)
 8102a7c:	6801      	ldr	r1, [r0, #0]
{
 8102a7e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a80:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM3)
 8102a82:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a84:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8102a88:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8102a8c:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM3)
 8102a8e:	d001      	beq.n	8102a94 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102a90:	b007      	add	sp, #28
 8102a92:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a94:	4b0b      	ldr	r3, [pc, #44]	; (8102ac4 <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102a96:	480c      	ldr	r0, [pc, #48]	; (8102ac8 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102a9c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a9e:	4322      	orrs	r2, r4
 8102aa0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102aa8:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102aaa:	4023      	ands	r3, r4
 8102aac:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8102aae:	2510      	movs	r5, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ab0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ab2:	e9cd 5401 	strd	r5, r4, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102ab6:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ab8:	f002 f914 	bl	8104ce4 <HAL_GPIO_Init>
}
 8102abc:	b007      	add	sp, #28
 8102abe:	bd30      	pop	{r4, r5, pc}
 8102ac0:	40000400 	.word	0x40000400
 8102ac4:	58024400 	.word	0x58024400
 8102ac8:	58020400 	.word	0x58020400

08102acc <MX_TIM3_Init>:
{
 8102acc:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8102ace:	4831      	ldr	r0, [pc, #196]	; (8102b94 <MX_TIM3_Init+0xc8>)
{
 8102ad0:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102ad2:	2300      	movs	r3, #0
 8102ad4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8102ad8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102adc:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102ae0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8102ae4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8102ae8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102aec:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102af0:	9302      	str	r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102af2:	930d      	str	r3, [sp, #52]	; 0x34
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102af4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102af6:	6183      	str	r3, [r0, #24]
  htim3.Instance = TIM3;
 8102af8:	4b27      	ldr	r3, [pc, #156]	; (8102b98 <MX_TIM3_Init+0xcc>)
 8102afa:	6003      	str	r3, [r0, #0]
  htim3.Init.Period = 750;
 8102afc:	f240 23ee 	movw	r3, #750	; 0x2ee
 8102b00:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102b02:	f004 f8f1 	bl	8106ce8 <HAL_TIM_Base_Init>
 8102b06:	bb70      	cbnz	r0, 8102b66 <MX_TIM3_Init+0x9a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102b0c:	4821      	ldr	r0, [pc, #132]	; (8102b94 <MX_TIM3_Init+0xc8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102b0e:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102b10:	a903      	add	r1, sp, #12
 8102b12:	f003 ffaf 	bl	8106a74 <HAL_TIM_ConfigClockSource>
 8102b16:	2800      	cmp	r0, #0
 8102b18:	d139      	bne.n	8102b8e <MX_TIM3_Init+0xc2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102b1a:	481e      	ldr	r0, [pc, #120]	; (8102b94 <MX_TIM3_Init+0xc8>)
 8102b1c:	f004 f916 	bl	8106d4c <HAL_TIM_PWM_Init>
 8102b20:	bb90      	cbnz	r0, 8102b88 <MX_TIM3_Init+0xbc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8102b22:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102b24:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102b26:	481b      	ldr	r0, [pc, #108]	; (8102b94 <MX_TIM3_Init+0xc8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8102b28:	9200      	str	r2, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102b2a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102b2c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102b2e:	f004 fa0b 	bl	8106f48 <HAL_TIMEx_MasterConfigSynchronization>
 8102b32:	bb30      	cbnz	r0, 8102b82 <MX_TIM3_Init+0xb6>
  sConfigOC.Pulse = 400;
 8102b34:	2170      	movs	r1, #112	; 0x70
 8102b36:	f44f 73c8 	mov.w	r3, #400	; 0x190
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102b3a:	2200      	movs	r2, #0
  sConfigOC.Pulse = 400;
 8102b3c:	e9cd 1307 	strd	r1, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102b40:	4814      	ldr	r0, [pc, #80]	; (8102b94 <MX_TIM3_Init+0xc8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102b42:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102b44:	a907      	add	r1, sp, #28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102b46:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102b48:	f004 f972 	bl	8106e30 <HAL_TIM_PWM_ConfigChannel>
 8102b4c:	b9b0      	cbnz	r0, 8102b7c <MX_TIM3_Init+0xb0>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102b4e:	4811      	ldr	r0, [pc, #68]	; (8102b94 <MX_TIM3_Init+0xc8>)
 8102b50:	220c      	movs	r2, #12
 8102b52:	a907      	add	r1, sp, #28
 8102b54:	f004 f96c 	bl	8106e30 <HAL_TIM_PWM_ConfigChannel>
 8102b58:	b940      	cbnz	r0, 8102b6c <MX_TIM3_Init+0xa0>
  HAL_TIM_MspPostInit(&htim3);
 8102b5a:	480e      	ldr	r0, [pc, #56]	; (8102b94 <MX_TIM3_Init+0xc8>)
 8102b5c:	f7ff ff8c 	bl	8102a78 <HAL_TIM_MspPostInit>
}
 8102b60:	b00f      	add	sp, #60	; 0x3c
 8102b62:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8102b66:	f7ff fc45 	bl	81023f4 <Error_Handler>
 8102b6a:	e7cd      	b.n	8102b08 <MX_TIM3_Init+0x3c>
    Error_Handler();
 8102b6c:	f7ff fc42 	bl	81023f4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8102b70:	4808      	ldr	r0, [pc, #32]	; (8102b94 <MX_TIM3_Init+0xc8>)
 8102b72:	f7ff ff81 	bl	8102a78 <HAL_TIM_MspPostInit>
}
 8102b76:	b00f      	add	sp, #60	; 0x3c
 8102b78:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8102b7c:	f7ff fc3a 	bl	81023f4 <Error_Handler>
 8102b80:	e7e5      	b.n	8102b4e <MX_TIM3_Init+0x82>
    Error_Handler();
 8102b82:	f7ff fc37 	bl	81023f4 <Error_Handler>
 8102b86:	e7d5      	b.n	8102b34 <MX_TIM3_Init+0x68>
    Error_Handler();
 8102b88:	f7ff fc34 	bl	81023f4 <Error_Handler>
 8102b8c:	e7c9      	b.n	8102b22 <MX_TIM3_Init+0x56>
    Error_Handler();
 8102b8e:	f7ff fc31 	bl	81023f4 <Error_Handler>
 8102b92:	e7c2      	b.n	8102b1a <MX_TIM3_Init+0x4e>
 8102b94:	10018838 	.word	0x10018838
 8102b98:	40000400 	.word	0x40000400

08102b9c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102b9c:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102b9e:	481e      	ldr	r0, [pc, #120]	; (8102c18 <MX_USART3_UART_Init+0x7c>)
 8102ba0:	4c1e      	ldr	r4, [pc, #120]	; (8102c1c <MX_USART3_UART_Init+0x80>)
  huart3.Init.BaudRate = 4000000;
 8102ba2:	491f      	ldr	r1, [pc, #124]	; (8102c20 <MX_USART3_UART_Init+0x84>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102ba4:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102ba6:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 4000000;
 8102ba8:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102bac:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102bb0:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102bb4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102bb8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102bbc:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102bbe:	f005 f859 	bl	8107c74 <HAL_UART_Init>
 8102bc2:	b970      	cbnz	r0, 8102be2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102bc4:	4814      	ldr	r0, [pc, #80]	; (8102c18 <MX_USART3_UART_Init+0x7c>)
 8102bc6:	2100      	movs	r1, #0
 8102bc8:	f005 f8cc 	bl	8107d64 <HAL_UARTEx_SetTxFifoThreshold>
 8102bcc:	b988      	cbnz	r0, 8102bf2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102bce:	4812      	ldr	r0, [pc, #72]	; (8102c18 <MX_USART3_UART_Init+0x7c>)
 8102bd0:	2100      	movs	r1, #0
 8102bd2:	f005 f8ed 	bl	8107db0 <HAL_UARTEx_SetRxFifoThreshold>
 8102bd6:	b9a0      	cbnz	r0, 8102c02 <MX_USART3_UART_Init+0x66>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102bd8:	480f      	ldr	r0, [pc, #60]	; (8102c18 <MX_USART3_UART_Init+0x7c>)
 8102bda:	f005 f8a5 	bl	8107d28 <HAL_UARTEx_DisableFifoMode>
 8102bde:	b9b8      	cbnz	r0, 8102c10 <MX_USART3_UART_Init+0x74>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102be0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8102be2:	f7ff fc07 	bl	81023f4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102be6:	480c      	ldr	r0, [pc, #48]	; (8102c18 <MX_USART3_UART_Init+0x7c>)
 8102be8:	2100      	movs	r1, #0
 8102bea:	f005 f8bb 	bl	8107d64 <HAL_UARTEx_SetTxFifoThreshold>
 8102bee:	2800      	cmp	r0, #0
 8102bf0:	d0ed      	beq.n	8102bce <MX_USART3_UART_Init+0x32>
    Error_Handler();
 8102bf2:	f7ff fbff 	bl	81023f4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102bf6:	4808      	ldr	r0, [pc, #32]	; (8102c18 <MX_USART3_UART_Init+0x7c>)
 8102bf8:	2100      	movs	r1, #0
 8102bfa:	f005 f8d9 	bl	8107db0 <HAL_UARTEx_SetRxFifoThreshold>
 8102bfe:	2800      	cmp	r0, #0
 8102c00:	d0ea      	beq.n	8102bd8 <MX_USART3_UART_Init+0x3c>
    Error_Handler();
 8102c02:	f7ff fbf7 	bl	81023f4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102c06:	4804      	ldr	r0, [pc, #16]	; (8102c18 <MX_USART3_UART_Init+0x7c>)
 8102c08:	f005 f88e 	bl	8107d28 <HAL_UARTEx_DisableFifoMode>
 8102c0c:	2800      	cmp	r0, #0
 8102c0e:	d0e7      	beq.n	8102be0 <MX_USART3_UART_Init+0x44>
}
 8102c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8102c14:	f7ff bbee 	b.w	81023f4 <Error_Handler>
 8102c18:	100188fc 	.word	0x100188fc
 8102c1c:	40004800 	.word	0x40004800
 8102c20:	003d0900 	.word	0x003d0900

08102c24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102c24:	b570      	push	{r4, r5, r6, lr}
 8102c26:	4604      	mov	r4, r0
 8102c28:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c2a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102c2c:	22c0      	movs	r2, #192	; 0xc0
 8102c2e:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c30:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8102c34:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8102c38:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102c3a:	f007 f91c 	bl	8109e76 <memset>
  if(uartHandle->Instance==USART3)
 8102c3e:	4b2e      	ldr	r3, [pc, #184]	; (8102cf8 <HAL_UART_MspInit+0xd4>)
 8102c40:	6822      	ldr	r2, [r4, #0]
 8102c42:	429a      	cmp	r2, r3
 8102c44:	d001      	beq.n	8102c4a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102c46:	b038      	add	sp, #224	; 0xe0
 8102c48:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102c4a:	2202      	movs	r2, #2
 8102c4c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102c4e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102c50:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102c54:	f002 fbcc 	bl	81053f0 <HAL_RCCEx_PeriphCLKConfig>
 8102c58:	2800      	cmp	r0, #0
 8102c5a:	d146      	bne.n	8102cea <HAL_UART_MspInit+0xc6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8102c5c:	4b27      	ldr	r3, [pc, #156]	; (8102cfc <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102c5e:	4828      	ldr	r0, [pc, #160]	; (8102d00 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8102c60:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_tx.Instance = DMA1_Stream7;
 8102c64:	4d27      	ldr	r5, [pc, #156]	; (8102d04 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8102c66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8102c6a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8102c6e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8102c72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8102c76:	9201      	str	r2, [sp, #4]
 8102c78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102c7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8102c7e:	f042 0202 	orr.w	r2, r2, #2
 8102c82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c8a:	f003 0302 	and.w	r3, r3, #2
 8102c8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8102c90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8102c94:	9303      	str	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102c96:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c98:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c9a:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c9c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102c9e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102ca0:	2307      	movs	r3, #7
 8102ca2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ca4:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ca6:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102ca8:	f002 f81c 	bl	8104ce4 <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102cac:	4a16      	ldr	r2, [pc, #88]	; (8102d08 <HAL_UART_MspInit+0xe4>)
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102cae:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102cb0:	232e      	movs	r3, #46	; 0x2e
 8102cb2:	e9c5 2300 	strd	r2, r3, [r5]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102cb6:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102cb8:	2240      	movs	r2, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102cbe:	e9c5 2602 	strd	r2, r6, [r5, #8]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102cc2:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8102cc6:	e9c5 6607 	strd	r6, r6, [r5, #28]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102cca:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102ccc:	f000 ffee 	bl	8103cac <HAL_DMA_Init>
 8102cd0:	b970      	cbnz	r0, 8102cf0 <HAL_UART_MspInit+0xcc>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102cd2:	2200      	movs	r2, #0
 8102cd4:	4611      	mov	r1, r2
 8102cd6:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102cd8:	67e5      	str	r5, [r4, #124]	; 0x7c
 8102cda:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8102cdc:	f000 fdae 	bl	810383c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102ce0:	2027      	movs	r0, #39	; 0x27
 8102ce2:	f000 fde9 	bl	81038b8 <HAL_NVIC_EnableIRQ>
}
 8102ce6:	b038      	add	sp, #224	; 0xe0
 8102ce8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8102cea:	f7ff fb83 	bl	81023f4 <Error_Handler>
 8102cee:	e7b5      	b.n	8102c5c <HAL_UART_MspInit+0x38>
      Error_Handler();
 8102cf0:	f7ff fb80 	bl	81023f4 <Error_Handler>
 8102cf4:	e7ed      	b.n	8102cd2 <HAL_UART_MspInit+0xae>
 8102cf6:	bf00      	nop
 8102cf8:	40004800 	.word	0x40004800
 8102cfc:	58024400 	.word	0x58024400
 8102d00:	58020400 	.word	0x58020400
 8102d04:	10018884 	.word	0x10018884
 8102d08:	400200b8 	.word	0x400200b8

08102d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102d44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102d10:	f7fe f9f6 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102d14:	480c      	ldr	r0, [pc, #48]	; (8102d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102d16:	490d      	ldr	r1, [pc, #52]	; (8102d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102d18:	4a0d      	ldr	r2, [pc, #52]	; (8102d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102d1c:	e002      	b.n	8102d24 <LoopCopyDataInit>

08102d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102d22:	3304      	adds	r3, #4

08102d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102d28:	d3f9      	bcc.n	8102d1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102d2a:	4a0a      	ldr	r2, [pc, #40]	; (8102d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102d2c:	4c0a      	ldr	r4, [pc, #40]	; (8102d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102d30:	e001      	b.n	8102d36 <LoopFillZerobss>

08102d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102d34:	3204      	adds	r2, #4

08102d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102d38:	d3fb      	bcc.n	8102d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102d3a:	f007 f8f5 	bl	8109f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102d3e:	f7ff faf5 	bl	810232c <main>
  bx  lr
 8102d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102d44:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102d48:	1000004c 	.word	0x1000004c
  ldr r1, =_edata
 8102d4c:	10000248 	.word	0x10000248
  ldr r2, =_sidata
 8102d50:	08123140 	.word	0x08123140
  ldr r2, =_sbss
 8102d54:	10000248 	.word	0x10000248
  ldr r4, =_ebss
 8102d58:	10018ae0 	.word	0x10018ae0

08102d5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102d5c:	e7fe      	b.n	8102d5c <ADC3_IRQHandler>
	...

08102d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102d60:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102d62:	4b0f      	ldr	r3, [pc, #60]	; (8102da0 <HAL_InitTick+0x40>)
 8102d64:	781b      	ldrb	r3, [r3, #0]
 8102d66:	b90b      	cbnz	r3, 8102d6c <HAL_InitTick+0xc>
  {
    return HAL_ERROR;
 8102d68:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8102d6a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102d6c:	490d      	ldr	r1, [pc, #52]	; (8102da4 <HAL_InitTick+0x44>)
 8102d6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8102d72:	4605      	mov	r5, r0
 8102d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8102d78:	6808      	ldr	r0, [r1, #0]
 8102d7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8102d7e:	f000 fda9 	bl	81038d4 <HAL_SYSTICK_Config>
 8102d82:	4604      	mov	r4, r0
 8102d84:	2800      	cmp	r0, #0
 8102d86:	d1ef      	bne.n	8102d68 <HAL_InitTick+0x8>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102d88:	2d0f      	cmp	r5, #15
 8102d8a:	d8ed      	bhi.n	8102d68 <HAL_InitTick+0x8>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102d8c:	4602      	mov	r2, r0
 8102d8e:	4629      	mov	r1, r5
 8102d90:	f04f 30ff 	mov.w	r0, #4294967295
 8102d94:	f000 fd52 	bl	810383c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102d98:	4b03      	ldr	r3, [pc, #12]	; (8102da8 <HAL_InitTick+0x48>)
 8102d9a:	4620      	mov	r0, r4
 8102d9c:	601d      	str	r5, [r3, #0]
}
 8102d9e:	bd38      	pop	{r3, r4, r5, pc}
 8102da0:	10000078 	.word	0x10000078
 8102da4:	1000004c 	.word	0x1000004c
 8102da8:	1000007c 	.word	0x1000007c

08102dac <HAL_Init>:
{
 8102dac:	b510      	push	{r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102dae:	4c23      	ldr	r4, [pc, #140]	; (8102e3c <HAL_Init+0x90>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102db0:	4a23      	ldr	r2, [pc, #140]	; (8102e40 <HAL_Init+0x94>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102db2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8102db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102dba:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8102dbe:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
{
 8102dc2:	b082      	sub	sp, #8
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102dc8:	9301      	str	r3, [sp, #4]
 8102dca:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102dcc:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102dd0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102dd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102dd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102ddc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102de0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102de4:	f043 0301 	orr.w	r3, r3, #1
 8102de8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102dec:	2003      	movs	r0, #3
 8102dee:	f000 fd13 	bl	8103818 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102df2:	f002 f985 	bl	8105100 <HAL_RCC_GetSysClockFreq>
 8102df6:	69a2      	ldr	r2, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102df8:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102dfa:	4912      	ldr	r1, [pc, #72]	; (8102e44 <HAL_Init+0x98>)
 8102dfc:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e00:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102e04:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e06:	5ccb      	ldrb	r3, [r1, r3]
 8102e08:	490f      	ldr	r1, [pc, #60]	; (8102e48 <HAL_Init+0x9c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102e0a:	f002 021f 	and.w	r2, r2, #31
 8102e0e:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e10:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = SystemD2Clock;
 8102e14:	4a0d      	ldr	r2, [pc, #52]	; (8102e4c <HAL_Init+0xa0>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e16:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102e1a:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102e1c:	600b      	str	r3, [r1, #0]
  SystemCoreClock = SystemD2Clock;
 8102e1e:	6013      	str	r3, [r2, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102e20:	f7ff ff9e 	bl	8102d60 <HAL_InitTick>
 8102e24:	b118      	cbz	r0, 8102e2e <HAL_Init+0x82>
    return HAL_ERROR;
 8102e26:	2401      	movs	r4, #1
}
 8102e28:	4620      	mov	r0, r4
 8102e2a:	b002      	add	sp, #8
 8102e2c:	bd10      	pop	{r4, pc}
 8102e2e:	4604      	mov	r4, r0
  HAL_MspInit();
 8102e30:	f7ff fd70 	bl	8102914 <HAL_MspInit>
}
 8102e34:	4620      	mov	r0, r4
 8102e36:	b002      	add	sp, #8
 8102e38:	bd10      	pop	{r4, pc}
 8102e3a:	bf00      	nop
 8102e3c:	58024400 	.word	0x58024400
 8102e40:	40024000 	.word	0x40024000
 8102e44:	0810eb50 	.word	0x0810eb50
 8102e48:	10000050 	.word	0x10000050
 8102e4c:	1000004c 	.word	0x1000004c

08102e50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8102e50:	4a03      	ldr	r2, [pc, #12]	; (8102e60 <HAL_IncTick+0x10>)
 8102e52:	4b04      	ldr	r3, [pc, #16]	; (8102e64 <HAL_IncTick+0x14>)
 8102e54:	6811      	ldr	r1, [r2, #0]
 8102e56:	781b      	ldrb	r3, [r3, #0]
 8102e58:	440b      	add	r3, r1
 8102e5a:	6013      	str	r3, [r2, #0]
}
 8102e5c:	4770      	bx	lr
 8102e5e:	bf00      	nop
 8102e60:	10018990 	.word	0x10018990
 8102e64:	10000078 	.word	0x10000078

08102e68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8102e68:	4b01      	ldr	r3, [pc, #4]	; (8102e70 <HAL_GetTick+0x8>)
 8102e6a:	6818      	ldr	r0, [r3, #0]
}
 8102e6c:	4770      	bx	lr
 8102e6e:	bf00      	nop
 8102e70:	10018990 	.word	0x10018990

08102e74 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8102e74:	4b01      	ldr	r3, [pc, #4]	; (8102e7c <HAL_GetREVID+0x8>)
 8102e76:	6818      	ldr	r0, [r3, #0]
}
 8102e78:	0c00      	lsrs	r0, r0, #16
 8102e7a:	4770      	bx	lr
 8102e7c:	5c001000 	.word	0x5c001000

08102e80 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102e80:	4a03      	ldr	r2, [pc, #12]	; (8102e90 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8102e82:	6853      	ldr	r3, [r2, #4]
 8102e84:	ea23 0000 	bic.w	r0, r3, r0
 8102e88:	4301      	orrs	r1, r0
 8102e8a:	6051      	str	r1, [r2, #4]
}
 8102e8c:	4770      	bx	lr
 8102e8e:	bf00      	nop
 8102e90:	58000400 	.word	0x58000400

08102e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102e96:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8102e9a:	b083      	sub	sp, #12
 8102e9c:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8102e9e:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8102ea0:	f04f 0000 	mov.w	r0, #0
 8102ea4:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8102ea6:	f000 8138 	beq.w	810311a <HAL_ADC_ConfigChannel+0x286>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102eaa:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8102eac:	2001      	movs	r0, #1
 8102eae:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102eb2:	68a2      	ldr	r2, [r4, #8]
 8102eb4:	0756      	lsls	r6, r2, #29
 8102eb6:	d43f      	bmi.n	8102f38 <HAL_ADC_ConfigChannel+0xa4>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102eb8:	680a      	ldr	r2, [r1, #0]
 8102eba:	f3c2 0513 	ubfx	r5, r2, #0, #20
 8102ebe:	2d00      	cmp	r5, #0
 8102ec0:	f040 80a0 	bne.w	8103004 <HAL_ADC_ConfigChannel+0x170>
 8102ec4:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8102ec8:	4090      	lsls	r0, r2
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102eca:	684d      	ldr	r5, [r1, #4]
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102ecc:	69e6      	ldr	r6, [r4, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102ece:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8102ed2:	4330      	orrs	r0, r6
 8102ed4:	61e0      	str	r0, [r4, #28]
 8102ed6:	f00c 0c0c 	and.w	ip, ip, #12
  MODIFY_REG(*preg,
 8102eda:	f005 001f 	and.w	r0, r5, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102ede:	f104 0530 	add.w	r5, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8102ee2:	f04f 0e1f 	mov.w	lr, #31
 8102ee6:	4082      	lsls	r2, r0
 8102ee8:	fa0e fe00 	lsl.w	lr, lr, r0
 8102eec:	f855 000c 	ldr.w	r0, [r5, ip]
 8102ef0:	ea20 000e 	bic.w	r0, r0, lr
 8102ef4:	4302      	orrs	r2, r0
 8102ef6:	f845 200c 	str.w	r2, [r5, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102efa:	68a2      	ldr	r2, [r4, #8]
 8102efc:	0755      	lsls	r5, r2, #29
 8102efe:	d524      	bpl.n	8102f4a <HAL_ADC_ConfigChannel+0xb6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102f00:	68a2      	ldr	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102f02:	68a2      	ldr	r2, [r4, #8]
 8102f04:	07d0      	lsls	r0, r2, #31
 8102f06:	d415      	bmi.n	8102f34 <HAL_ADC_ConfigChannel+0xa0>
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102f08:	68ce      	ldr	r6, [r1, #12]
 8102f0a:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8102f0c:	4ab6      	ldr	r2, [pc, #728]	; (81031e8 <HAL_ADC_ConfigChannel+0x354>)
 8102f0e:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8102f12:	f006 0718 	and.w	r7, r6, #24
 8102f16:	40fa      	lsrs	r2, r7
 8102f18:	f3c0 0713 	ubfx	r7, r0, #0, #20
 8102f1c:	4002      	ands	r2, r0
 8102f1e:	ea25 0507 	bic.w	r5, r5, r7
 8102f22:	432a      	orrs	r2, r5
 8102f24:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102f28:	4ab0      	ldr	r2, [pc, #704]	; (81031ec <HAL_ADC_ConfigChannel+0x358>)
 8102f2a:	4296      	cmp	r6, r2
 8102f2c:	f000 80a5 	beq.w	810307a <HAL_ADC_ConfigChannel+0x1e6>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102f30:	2800      	cmp	r0, #0
 8102f32:	db70      	blt.n	8103016 <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102f34:	2000      	movs	r0, #0
 8102f36:	e003      	b.n	8102f40 <HAL_ADC_ConfigChannel+0xac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102f3a:	f042 0220 	orr.w	r2, r2, #32
 8102f3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102f40:	2200      	movs	r2, #0
 8102f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8102f46:	b003      	add	sp, #12
 8102f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102f4a:	68a2      	ldr	r2, [r4, #8]
 8102f4c:	0712      	lsls	r2, r2, #28
 8102f4e:	d4d8      	bmi.n	8102f02 <HAL_ADC_ConfigChannel+0x6e>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102f50:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(*preg,
 8102f52:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102f54:	0dc5      	lsrs	r5, r0, #23
 8102f56:	f005 0504 	and.w	r5, r5, #4
 8102f5a:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 8102f5e:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8102f62:	fa02 f700 	lsl.w	r7, r2, r0
 8102f66:	f04f 0c07 	mov.w	ip, #7
 8102f6a:	5972      	ldr	r2, [r6, r5]
 8102f6c:	fa0c f000 	lsl.w	r0, ip, r0
 8102f70:	ea22 0200 	bic.w	r2, r2, r0
 8102f74:	433a      	orrs	r2, r7
 8102f76:	5172      	str	r2, [r6, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102f78:	4a9d      	ldr	r2, [pc, #628]	; (81031f0 <HAL_ADC_ConfigChannel+0x35c>)
 8102f7a:	6812      	ldr	r2, [r2, #0]
 8102f7c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8102f80:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8102f84:	68e2      	ldr	r2, [r4, #12]
 8102f86:	f000 80db 	beq.w	8103140 <HAL_ADC_ConfigChannel+0x2ac>
 8102f8a:	f012 0f10 	tst.w	r2, #16
 8102f8e:	68e2      	ldr	r2, [r4, #12]
 8102f90:	694d      	ldr	r5, [r1, #20]
 8102f92:	bf0b      	itete	eq
 8102f94:	f3c2 0282 	ubfxeq	r2, r2, #2, #3
 8102f98:	0852      	lsrne	r2, r2, #1
 8102f9a:	0052      	lsleq	r2, r2, #1
 8102f9c:	f002 0208 	andne.w	r2, r2, #8
 8102fa0:	4095      	lsls	r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8102fa2:	690e      	ldr	r6, [r1, #16]
 8102fa4:	2e04      	cmp	r6, #4
 8102fa6:	f000 80e6 	beq.w	8103176 <HAL_ADC_ConfigChannel+0x2e2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102faa:	f104 0060 	add.w	r0, r4, #96	; 0x60
    MODIFY_REG(*preg,
 8102fae:	680a      	ldr	r2, [r1, #0]
 8102fb0:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8102fb4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8102fb8:	f007 4700 	and.w	r7, r7, #2147483648	; 0x80000000
 8102fbc:	433a      	orrs	r2, r7
 8102fbe:	432a      	orrs	r2, r5
 8102fc0:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102fc4:	690e      	ldr	r6, [r1, #16]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102fc6:	7e4d      	ldrb	r5, [r1, #25]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102fc8:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8102fcc:	f1a5 0501 	sub.w	r5, r5, #1
 8102fd0:	fab5 f585 	clz	r5, r5
 8102fd4:	096d      	lsrs	r5, r5, #5
 8102fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102fda:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8102fde:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102fe2:	7e0a      	ldrb	r2, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102fe4:	690d      	ldr	r5, [r1, #16]
 8102fe6:	6920      	ldr	r0, [r4, #16]
 8102fe8:	f1a2 0201 	sub.w	r2, r2, #1
 8102fec:	fab2 f282 	clz	r2, r2
 8102ff0:	0952      	lsrs	r2, r2, #5
 8102ff2:	02d2      	lsls	r2, r2, #11
 8102ff4:	f005 051f 	and.w	r5, r5, #31
 8102ff8:	40aa      	lsls	r2, r5
 8102ffa:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8102ffe:	4302      	orrs	r2, r0
 8103000:	6122      	str	r2, [r4, #16]
}
 8103002:	e77e      	b.n	8102f02 <HAL_ADC_ConfigChannel+0x6e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103004:	fa92 f5a2 	rbit	r5, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8103008:	b115      	cbz	r5, 8103010 <HAL_ADC_ConfigChannel+0x17c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 810300a:	fab5 f585 	clz	r5, r5
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810300e:	40a8      	lsls	r0, r5
 8103010:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8103014:	e759      	b.n	8102eca <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103016:	4a77      	ldr	r2, [pc, #476]	; (81031f4 <HAL_ADC_ConfigChannel+0x360>)
 8103018:	4294      	cmp	r4, r2
 810301a:	f000 8097 	beq.w	810314c <HAL_ADC_ConfigChannel+0x2b8>
 810301e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8103022:	4294      	cmp	r4, r2
 8103024:	f000 8092 	beq.w	810314c <HAL_ADC_ConfigChannel+0x2b8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103028:	4a73      	ldr	r2, [pc, #460]	; (81031f8 <HAL_ADC_ConfigChannel+0x364>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810302a:	4974      	ldr	r1, [pc, #464]	; (81031fc <HAL_ADC_ConfigChannel+0x368>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810302c:	6892      	ldr	r2, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810302e:	6889      	ldr	r1, [r1, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103030:	43c9      	mvns	r1, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103032:	f002 75e0 	and.w	r5, r2, #29360128	; 0x1c00000
 8103036:	f001 0101 	and.w	r1, r1, #1
 810303a:	2900      	cmp	r1, #0
 810303c:	f000 8095 	beq.w	810316a <HAL_ADC_ConfigChannel+0x2d6>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103040:	496f      	ldr	r1, [pc, #444]	; (8103200 <HAL_ADC_ConfigChannel+0x36c>)
 8103042:	4288      	cmp	r0, r1
 8103044:	f000 8108 	beq.w	8103258 <HAL_ADC_ConfigChannel+0x3c4>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103048:	496e      	ldr	r1, [pc, #440]	; (8103204 <HAL_ADC_ConfigChannel+0x370>)
 810304a:	4288      	cmp	r0, r1
 810304c:	f000 8128 	beq.w	81032a0 <HAL_ADC_ConfigChannel+0x40c>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103050:	496d      	ldr	r1, [pc, #436]	; (8103208 <HAL_ADC_ConfigChannel+0x374>)
 8103052:	4288      	cmp	r0, r1
 8103054:	f47f af6e 	bne.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
 8103058:	f412 0080 	ands.w	r0, r2, #4194304	; 0x400000
 810305c:	f47f af6a 	bne.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8103060:	4a66      	ldr	r2, [pc, #408]	; (81031fc <HAL_ADC_ConfigChannel+0x368>)
 8103062:	4294      	cmp	r4, r2
 8103064:	f47f af66 	bne.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103068:	4963      	ldr	r1, [pc, #396]	; (81031f8 <HAL_ADC_ConfigChannel+0x364>)
 810306a:	688a      	ldr	r2, [r1, #8]
 810306c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8103070:	432a      	orrs	r2, r5
 8103072:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8103076:	608a      	str	r2, [r1, #8]
}
 8103078:	e762      	b.n	8102f40 <HAL_ADC_ConfigChannel+0xac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810307a:	2f00      	cmp	r7, #0
 810307c:	d050      	beq.n	8103120 <HAL_ADC_ConfigChannel+0x28c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810307e:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8103082:	2a00      	cmp	r2, #0
 8103084:	f000 80c4 	beq.w	8103210 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8103088:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810308c:	3201      	adds	r2, #1
 810308e:	f002 021f 	and.w	r2, r2, #31
 8103092:	2a09      	cmp	r2, #9
 8103094:	f240 80bc 	bls.w	8103210 <HAL_ADC_ConfigChannel+0x37c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103098:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 810309c:	2d00      	cmp	r5, #0
 810309e:	f000 8114 	beq.w	81032ca <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 81030a2:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81030a6:	3501      	adds	r5, #1
 81030a8:	06ad      	lsls	r5, r5, #26
 81030aa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81030ae:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 81030b2:	2a00      	cmp	r2, #0
 81030b4:	f000 8107 	beq.w	81032c6 <HAL_ADC_ConfigChannel+0x432>
  return __builtin_clz(value);
 81030b8:	fab2 f282 	clz	r2, r2
 81030bc:	3201      	adds	r2, #1
 81030be:	f002 021f 	and.w	r2, r2, #31
 81030c2:	2601      	movs	r6, #1
 81030c4:	fa06 f202 	lsl.w	r2, r6, r2
 81030c8:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81030ca:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 81030ce:	2800      	cmp	r0, #0
 81030d0:	f000 80f7 	beq.w	81032c2 <HAL_ADC_ConfigChannel+0x42e>
  return __builtin_clz(value);
 81030d4:	fab0 f080 	clz	r0, r0
 81030d8:	3001      	adds	r0, #1
 81030da:	f000 001f 	and.w	r0, r0, #31
 81030de:	2203      	movs	r2, #3
 81030e0:	f06f 061d 	mvn.w	r6, #29
 81030e4:	fb12 6200 	smlabb	r2, r2, r0, r6
 81030e8:	0512      	lsls	r2, r2, #20
 81030ea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81030ee:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81030f0:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 81030f2:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81030f4:	f005 0504 	and.w	r5, r5, #4
 81030f8:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 81030fc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8103100:	fa00 f702 	lsl.w	r7, r0, r2
 8103104:	f04f 0c07 	mov.w	ip, #7
 8103108:	5970      	ldr	r0, [r6, r5]
 810310a:	fa0c f202 	lsl.w	r2, ip, r2
 810310e:	ea20 0202 	bic.w	r2, r0, r2
 8103112:	433a      	orrs	r2, r7
 8103114:	5172      	str	r2, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103116:	6808      	ldr	r0, [r1, #0]
}
 8103118:	e70a      	b.n	8102f30 <HAL_ADC_ConfigChannel+0x9c>
  __HAL_LOCK(hadc);
 810311a:	2002      	movs	r0, #2
}
 810311c:	b003      	add	sp, #12
 810311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103120:	0e82      	lsrs	r2, r0, #26
 8103122:	3201      	adds	r2, #1
 8103124:	f002 001f 	and.w	r0, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103128:	2809      	cmp	r0, #9
 810312a:	d84e      	bhi.n	81031ca <HAL_ADC_ConfigChannel+0x336>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810312c:	0695      	lsls	r5, r2, #26
 810312e:	2201      	movs	r2, #1
 8103130:	4082      	lsls	r2, r0
 8103132:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8103136:	4315      	orrs	r5, r2
 8103138:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 810313c:	0512      	lsls	r2, r2, #20
 810313e:	e7d6      	b.n	81030ee <HAL_ADC_ConfigChannel+0x25a>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8103140:	694d      	ldr	r5, [r1, #20]
 8103142:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8103146:	0052      	lsls	r2, r2, #1
 8103148:	4095      	lsls	r5, r2
 810314a:	e72a      	b.n	8102fa2 <HAL_ADC_ConfigChannel+0x10e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810314c:	4929      	ldr	r1, [pc, #164]	; (81031f4 <HAL_ADC_ConfigChannel+0x360>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810314e:	4a2f      	ldr	r2, [pc, #188]	; (810320c <HAL_ADC_ConfigChannel+0x378>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103150:	f501 7180 	add.w	r1, r1, #256	; 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103154:	6892      	ldr	r2, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103156:	f851 6cf8 	ldr.w	r6, [r1, #-248]
 810315a:	6889      	ldr	r1, [r1, #8]
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810315c:	4331      	orrs	r1, r6
 810315e:	43c9      	mvns	r1, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8103160:	f002 75e0 	and.w	r5, r2, #29360128	; 0x1c00000
 8103164:	f001 0101 	and.w	r1, r1, #1
 8103168:	e767      	b.n	810303a <HAL_ADC_ConfigChannel+0x1a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810316a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810316c:	f042 0220 	orr.w	r2, r2, #32
          tmp_hal_status = HAL_ERROR;
 8103170:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103172:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8103174:	e6e4      	b.n	8102f40 <HAL_ADC_ConfigChannel+0xac>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103176:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8103178:	680d      	ldr	r5, [r1, #0]
 810317a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 810317e:	ebb2 6f85 	cmp.w	r2, r5, lsl #26
 8103182:	ea4f 6085 	mov.w	r0, r5, lsl #26
 8103186:	d103      	bne.n	8103190 <HAL_ADC_ConfigChannel+0x2fc>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103188:	6e22      	ldr	r2, [r4, #96]	; 0x60
 810318a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810318e:	6622      	str	r2, [r4, #96]	; 0x60
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103190:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8103192:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8103196:	4290      	cmp	r0, r2
 8103198:	d103      	bne.n	81031a2 <HAL_ADC_ConfigChannel+0x30e>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810319a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810319c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81031a0:	6662      	str	r2, [r4, #100]	; 0x64
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81031a2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 81031a4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 81031a8:	4290      	cmp	r0, r2
 81031aa:	d103      	bne.n	81031b4 <HAL_ADC_ConfigChannel+0x320>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81031ac:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 81031ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81031b2:	66a2      	str	r2, [r4, #104]	; 0x68
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81031b4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 81031b6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 81031ba:	4290      	cmp	r0, r2
 81031bc:	f47f aea1 	bne.w	8102f02 <HAL_ADC_ConfigChannel+0x6e>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81031c0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 81031c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81031c6:	66e2      	str	r2, [r4, #108]	; 0x6c
 81031c8:	e69b      	b.n	8102f02 <HAL_ADC_ConfigChannel+0x6e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81031ca:	0695      	lsls	r5, r2, #26
 81031cc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 81031d0:	3a1e      	subs	r2, #30
 81031d2:	2601      	movs	r6, #1
 81031d4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 81031d8:	0512      	lsls	r2, r2, #20
 81031da:	fa06 f000 	lsl.w	r0, r6, r0
 81031de:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 81031e2:	4305      	orrs	r5, r0
 81031e4:	e783      	b.n	81030ee <HAL_ADC_ConfigChannel+0x25a>
 81031e6:	bf00      	nop
 81031e8:	000fffff 	.word	0x000fffff
 81031ec:	47ff0000 	.word	0x47ff0000
 81031f0:	5c001000 	.word	0x5c001000
 81031f4:	40022000 	.word	0x40022000
 81031f8:	58026300 	.word	0x58026300
 81031fc:	58026000 	.word	0x58026000
 8103200:	cb840000 	.word	0xcb840000
 8103204:	c7520000 	.word	0xc7520000
 8103208:	cfb80000 	.word	0xcfb80000
 810320c:	40022300 	.word	0x40022300
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103210:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8103214:	2d00      	cmp	r5, #0
 8103216:	d060      	beq.n	81032da <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8103218:	fab5 f585 	clz	r5, r5
 810321c:	3501      	adds	r5, #1
 810321e:	06ad      	lsls	r5, r5, #26
 8103220:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103224:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8103228:	2a00      	cmp	r2, #0
 810322a:	d054      	beq.n	81032d6 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 810322c:	fab2 f282 	clz	r2, r2
 8103230:	3201      	adds	r2, #1
 8103232:	f002 021f 	and.w	r2, r2, #31
 8103236:	2601      	movs	r6, #1
 8103238:	fa06 f202 	lsl.w	r2, r6, r2
 810323c:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810323e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8103242:	2800      	cmp	r0, #0
 8103244:	d044      	beq.n	81032d0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8103246:	fab0 f280 	clz	r2, r0
 810324a:	3201      	adds	r2, #1
 810324c:	f002 021f 	and.w	r2, r2, #31
 8103250:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8103254:	0512      	lsls	r2, r2, #20
 8103256:	e74a      	b.n	81030ee <HAL_ADC_ConfigChannel+0x25a>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103258:	0211      	lsls	r1, r2, #8
 810325a:	f53f ae6b 	bmi.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810325e:	4a20      	ldr	r2, [pc, #128]	; (81032e0 <HAL_ADC_ConfigChannel+0x44c>)
 8103260:	4294      	cmp	r4, r2
 8103262:	f47f ae67 	bne.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8103266:	491f      	ldr	r1, [pc, #124]	; (81032e4 <HAL_ADC_ConfigChannel+0x450>)
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103268:	481f      	ldr	r0, [pc, #124]	; (81032e8 <HAL_ADC_ConfigChannel+0x454>)
 810326a:	688a      	ldr	r2, [r1, #8]
 810326c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8103270:	432a      	orrs	r2, r5
 8103272:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8103276:	608a      	str	r2, [r1, #8]
 8103278:	6802      	ldr	r2, [r0, #0]
 810327a:	491c      	ldr	r1, [pc, #112]	; (81032ec <HAL_ADC_ConfigChannel+0x458>)
 810327c:	0992      	lsrs	r2, r2, #6
 810327e:	fba1 1202 	umull	r1, r2, r1, r2
 8103282:	0992      	lsrs	r2, r2, #6
 8103284:	3201      	adds	r2, #1
 8103286:	0052      	lsls	r2, r2, #1
 8103288:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 810328a:	9a01      	ldr	r2, [sp, #4]
 810328c:	2a00      	cmp	r2, #0
 810328e:	f43f ae51 	beq.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
                wait_loop_index--;
 8103292:	9a01      	ldr	r2, [sp, #4]
 8103294:	3a01      	subs	r2, #1
 8103296:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8103298:	9a01      	ldr	r2, [sp, #4]
 810329a:	2a00      	cmp	r2, #0
 810329c:	d1f9      	bne.n	8103292 <HAL_ADC_ConfigChannel+0x3fe>
 810329e:	e649      	b.n	8102f34 <HAL_ADC_ConfigChannel+0xa0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81032a0:	f012 7080 	ands.w	r0, r2, #16777216	; 0x1000000
 81032a4:	f47f ae46 	bne.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81032a8:	4a0d      	ldr	r2, [pc, #52]	; (81032e0 <HAL_ADC_ConfigChannel+0x44c>)
 81032aa:	4294      	cmp	r4, r2
 81032ac:	f47f ae42 	bne.w	8102f34 <HAL_ADC_ConfigChannel+0xa0>
 81032b0:	490c      	ldr	r1, [pc, #48]	; (81032e4 <HAL_ADC_ConfigChannel+0x450>)
 81032b2:	688a      	ldr	r2, [r1, #8]
 81032b4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 81032b8:	432a      	orrs	r2, r5
 81032ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 81032be:	608a      	str	r2, [r1, #8]
}
 81032c0:	e63e      	b.n	8102f40 <HAL_ADC_ConfigChannel+0xac>
 81032c2:	4a0b      	ldr	r2, [pc, #44]	; (81032f0 <HAL_ADC_ConfigChannel+0x45c>)
 81032c4:	e713      	b.n	81030ee <HAL_ADC_ConfigChannel+0x25a>
 81032c6:	2202      	movs	r2, #2
 81032c8:	e6fe      	b.n	81030c8 <HAL_ADC_ConfigChannel+0x234>
 81032ca:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 81032ce:	e6ee      	b.n	81030ae <HAL_ADC_ConfigChannel+0x21a>
 81032d0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 81032d4:	e70b      	b.n	81030ee <HAL_ADC_ConfigChannel+0x25a>
 81032d6:	2202      	movs	r2, #2
 81032d8:	e7b0      	b.n	810323c <HAL_ADC_ConfigChannel+0x3a8>
 81032da:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 81032de:	e7a1      	b.n	8103224 <HAL_ADC_ConfigChannel+0x390>
 81032e0:	58026000 	.word	0x58026000
 81032e4:	58026300 	.word	0x58026300
 81032e8:	1000004c 	.word	0x1000004c
 81032ec:	053e2d63 	.word	0x053e2d63
 81032f0:	fe500000 	.word	0xfe500000

081032f4 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81032f4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81032f6:	689a      	ldr	r2, [r3, #8]
 81032f8:	07d2      	lsls	r2, r2, #31
 81032fa:	d501      	bpl.n	8103300 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 81032fc:	2000      	movs	r0, #0
}
 81032fe:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8103300:	6899      	ldr	r1, [r3, #8]
 8103302:	4a22      	ldr	r2, [pc, #136]	; (810338c <ADC_Enable+0x98>)
 8103304:	4211      	tst	r1, r2
{
 8103306:	b570      	push	{r4, r5, r6, lr}
 8103308:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 810330a:	d12e      	bne.n	810336a <ADC_Enable+0x76>
  MODIFY_REG(ADCx->CR,
 810330c:	689a      	ldr	r2, [r3, #8]
 810330e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103312:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8103316:	f042 0201 	orr.w	r2, r2, #1
 810331a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 810331c:	f7ff fda4 	bl	8102e68 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103320:	6823      	ldr	r3, [r4, #0]
 8103322:	4a1b      	ldr	r2, [pc, #108]	; (8103390 <ADC_Enable+0x9c>)
 8103324:	4293      	cmp	r3, r2
    tickstart = HAL_GetTick();
 8103326:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8103328:	d028      	beq.n	810337c <ADC_Enable+0x88>
 810332a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 810332e:	4293      	cmp	r3, r2
 8103330:	d027      	beq.n	8103382 <ADC_Enable+0x8e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8103332:	4a18      	ldr	r2, [pc, #96]	; (8103394 <ADC_Enable+0xa0>)
 8103334:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103336:	681a      	ldr	r2, [r3, #0]
 8103338:	07d1      	lsls	r1, r2, #31
 810333a:	d414      	bmi.n	8103366 <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 810333c:	4e16      	ldr	r6, [pc, #88]	; (8103398 <ADC_Enable+0xa4>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810333e:	689a      	ldr	r2, [r3, #8]
 8103340:	07d1      	lsls	r1, r2, #31
 8103342:	d404      	bmi.n	810334e <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8103344:	689a      	ldr	r2, [r3, #8]
 8103346:	4032      	ands	r2, r6
 8103348:	f042 0201 	orr.w	r2, r2, #1
 810334c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 810334e:	f7ff fd8b 	bl	8102e68 <HAL_GetTick>
 8103352:	1b43      	subs	r3, r0, r5
 8103354:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103356:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8103358:	d902      	bls.n	8103360 <ADC_Enable+0x6c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 810335a:	681a      	ldr	r2, [r3, #0]
 810335c:	07d2      	lsls	r2, r2, #31
 810335e:	d504      	bpl.n	810336a <ADC_Enable+0x76>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8103360:	681a      	ldr	r2, [r3, #0]
 8103362:	07d0      	lsls	r0, r2, #31
 8103364:	d5eb      	bpl.n	810333e <ADC_Enable+0x4a>
  return HAL_OK;
 8103366:	2000      	movs	r0, #0
}
 8103368:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810336a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 810336c:	f043 0310 	orr.w	r3, r3, #16
 8103370:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103372:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 8103374:	2001      	movs	r0, #1
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103376:	4303      	orrs	r3, r0
 8103378:	65a3      	str	r3, [r4, #88]	; 0x58
}
 810337a:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 810337c:	4a07      	ldr	r2, [pc, #28]	; (810339c <ADC_Enable+0xa8>)
 810337e:	6892      	ldr	r2, [r2, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8103380:	e7d9      	b.n	8103336 <ADC_Enable+0x42>
 8103382:	4a06      	ldr	r2, [pc, #24]	; (810339c <ADC_Enable+0xa8>)
 8103384:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103386:	06d2      	lsls	r2, r2, #27
 8103388:	d0d5      	beq.n	8103336 <ADC_Enable+0x42>
 810338a:	e7ec      	b.n	8103366 <ADC_Enable+0x72>
 810338c:	8000003f 	.word	0x8000003f
 8103390:	40022000 	.word	0x40022000
 8103394:	58026300 	.word	0x58026300
 8103398:	7fffffc0 	.word	0x7fffffc0
 810339c:	40022300 	.word	0x40022300

081033a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81033a0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81033a2:	4a56      	ldr	r2, [pc, #344]	; (81034fc <ADC_ConfigureBoostMode+0x15c>)
 81033a4:	6803      	ldr	r3, [r0, #0]
 81033a6:	4293      	cmp	r3, r2
{
 81033a8:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81033aa:	d026      	beq.n	81033fa <ADC_ConfigureBoostMode+0x5a>
 81033ac:	f502 7280 	add.w	r2, r2, #256	; 0x100
 81033b0:	4293      	cmp	r3, r2
 81033b2:	d022      	beq.n	81033fa <ADC_ConfigureBoostMode+0x5a>
 81033b4:	4b52      	ldr	r3, [pc, #328]	; (8103500 <ADC_ConfigureBoostMode+0x160>)
 81033b6:	689b      	ldr	r3, [r3, #8]
 81033b8:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 81033bc:	d022      	beq.n	8103404 <ADC_ConfigureBoostMode+0x64>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81033be:	f001 fec1 	bl	8105144 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 81033c2:	6863      	ldr	r3, [r4, #4]
 81033c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    freq = HAL_RCC_GetHCLKFreq();
 81033c8:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 81033ca:	f000 808a 	beq.w	81034e2 <ADC_ConfigureBoostMode+0x142>
 81033ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81033d2:	d06e      	beq.n	81034b2 <ADC_ConfigureBoostMode+0x112>
 81033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81033d8:	f000 8083 	beq.w	81034e2 <ADC_ConfigureBoostMode+0x142>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81033dc:	f7ff fd4a 	bl	8102e74 <HAL_GetREVID>
 81033e0:	f241 0303 	movw	r3, #4099	; 0x1003
 81033e4:	4298      	cmp	r0, r3
 81033e6:	d84b      	bhi.n	8103480 <ADC_ConfigureBoostMode+0xe0>
  {
    if (freq > 20000000UL)
 81033e8:	4b46      	ldr	r3, [pc, #280]	; (8103504 <ADC_ConfigureBoostMode+0x164>)
 81033ea:	429d      	cmp	r5, r3
 81033ec:	d92a      	bls.n	8103444 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81033ee:	6822      	ldr	r2, [r4, #0]
 81033f0:	6893      	ldr	r3, [r2, #8]
 81033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81033f6:	6093      	str	r3, [r2, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81033f8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81033fa:	4b43      	ldr	r3, [pc, #268]	; (8103508 <ADC_ConfigureBoostMode+0x168>)
 81033fc:	689b      	ldr	r3, [r3, #8]
 81033fe:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8103402:	d1dc      	bne.n	81033be <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103404:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8103408:	2100      	movs	r1, #0
 810340a:	f003 f807 	bl	810641c <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 810340e:	6863      	ldr	r3, [r4, #4]
 8103410:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103414:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8103416:	d06e      	beq.n	81034f6 <ADC_ConfigureBoostMode+0x156>
 8103418:	d808      	bhi.n	810342c <ADC_ConfigureBoostMode+0x8c>
 810341a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810341e:	d052      	beq.n	81034c6 <ADC_ConfigureBoostMode+0x126>
 8103420:	d916      	bls.n	8103450 <ADC_ConfigureBoostMode+0xb0>
 8103422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103426:	d1d9      	bne.n	81033dc <ADC_ConfigureBoostMode+0x3c>
        freq /= 32UL;
 8103428:	0945      	lsrs	r5, r0, #5
        break;
 810342a:	e7d7      	b.n	81033dc <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 810342c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103430:	d047      	beq.n	81034c2 <ADC_ConfigureBoostMode+0x122>
 8103432:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103436:	d1d1      	bne.n	81033dc <ADC_ConfigureBoostMode+0x3c>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103438:	f7ff fd1c 	bl	8102e74 <HAL_GetREVID>
 810343c:	f241 0303 	movw	r3, #4099	; 0x1003
 8103440:	4298      	cmp	r0, r3
 8103442:	d842      	bhi.n	81034ca <ADC_ConfigureBoostMode+0x12a>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103444:	6822      	ldr	r2, [r4, #0]
 8103446:	6893      	ldr	r3, [r2, #8]
 8103448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810344c:	6093      	str	r3, [r2, #8]
}
 810344e:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8103450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103454:	d006      	beq.n	8103464 <ADC_ConfigureBoostMode+0xc4>
 8103456:	d90a      	bls.n	810346e <ADC_ConfigureBoostMode+0xce>
 8103458:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810345c:	d002      	beq.n	8103464 <ADC_ConfigureBoostMode+0xc4>
 810345e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103462:	d1bb      	bne.n	81033dc <ADC_ConfigureBoostMode+0x3c>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103464:	0c9b      	lsrs	r3, r3, #18
 8103466:	005b      	lsls	r3, r3, #1
 8103468:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 810346c:	e7b6      	b.n	81033dc <ADC_ConfigureBoostMode+0x3c>
    switch (hadc->Init.ClockPrescaler)
 810346e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8103472:	d0f7      	beq.n	8103464 <ADC_ConfigureBoostMode+0xc4>
 8103474:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8103478:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 810347c:	d0f2      	beq.n	8103464 <ADC_ConfigureBoostMode+0xc4>
 810347e:	e7ad      	b.n	81033dc <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 8103480:	4b22      	ldr	r3, [pc, #136]	; (810350c <ADC_ConfigureBoostMode+0x16c>)
 8103482:	429d      	cmp	r5, r3
 8103484:	d805      	bhi.n	8103492 <ADC_ConfigureBoostMode+0xf2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103486:	6822      	ldr	r2, [r4, #0]
 8103488:	6893      	ldr	r3, [r2, #8]
 810348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810348e:	6093      	str	r3, [r2, #8]
}
 8103490:	bd38      	pop	{r3, r4, r5, pc}
    else if (freq <= 12500000UL)
 8103492:	4b1f      	ldr	r3, [pc, #124]	; (8103510 <ADC_ConfigureBoostMode+0x170>)
 8103494:	429d      	cmp	r5, r3
 8103496:	d91c      	bls.n	81034d2 <ADC_ConfigureBoostMode+0x132>
    else if (freq <= 25000000UL)
 8103498:	4b1e      	ldr	r3, [pc, #120]	; (8103514 <ADC_ConfigureBoostMode+0x174>)
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810349a:	6822      	ldr	r2, [r4, #0]
    else if (freq <= 25000000UL)
 810349c:	429d      	cmp	r5, r3
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810349e:	6893      	ldr	r3, [r2, #8]
 81034a0:	bf9a      	itte	ls
 81034a2:	f423 7340 	bicls.w	r3, r3, #768	; 0x300
 81034a6:	f443 7300 	orrls.w	r3, r3, #512	; 0x200
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81034aa:	f443 7340 	orrhi.w	r3, r3, #768	; 0x300
 81034ae:	6093      	str	r3, [r2, #8]
}
 81034b0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 81034b2:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81034b4:	f7ff fcde 	bl	8102e74 <HAL_GetREVID>
 81034b8:	f241 0303 	movw	r3, #4099	; 0x1003
 81034bc:	4298      	cmp	r0, r3
 81034be:	d8df      	bhi.n	8103480 <ADC_ConfigureBoostMode+0xe0>
 81034c0:	e792      	b.n	81033e8 <ADC_ConfigureBoostMode+0x48>
        freq /= 128UL;
 81034c2:	09c5      	lsrs	r5, r0, #7
        break;
 81034c4:	e78a      	b.n	81033dc <ADC_ConfigureBoostMode+0x3c>
        freq /= 16UL;
 81034c6:	0905      	lsrs	r5, r0, #4
        break;
 81034c8:	e788      	b.n	81033dc <ADC_ConfigureBoostMode+0x3c>
    if (freq <= 6250000UL)
 81034ca:	4b10      	ldr	r3, [pc, #64]	; (810350c <ADC_ConfigureBoostMode+0x16c>)
 81034cc:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 81034d0:	d2d9      	bcs.n	8103486 <ADC_ConfigureBoostMode+0xe6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81034d2:	6822      	ldr	r2, [r4, #0]
 81034d4:	6893      	ldr	r3, [r2, #8]
 81034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81034de:	6093      	str	r3, [r2, #8]
}
 81034e0:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81034e2:	0c1b      	lsrs	r3, r3, #16
 81034e4:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81034e8:	f7ff fcc4 	bl	8102e74 <HAL_GetREVID>
 81034ec:	f241 0303 	movw	r3, #4099	; 0x1003
 81034f0:	4298      	cmp	r0, r3
 81034f2:	d8c5      	bhi.n	8103480 <ADC_ConfigureBoostMode+0xe0>
 81034f4:	e778      	b.n	81033e8 <ADC_ConfigureBoostMode+0x48>
        freq /= 64UL;
 81034f6:	0985      	lsrs	r5, r0, #6
        break;
 81034f8:	e770      	b.n	81033dc <ADC_ConfigureBoostMode+0x3c>
 81034fa:	bf00      	nop
 81034fc:	40022000 	.word	0x40022000
 8103500:	58026300 	.word	0x58026300
 8103504:	01312d00 	.word	0x01312d00
 8103508:	40022300 	.word	0x40022300
 810350c:	00bebc21 	.word	0x00bebc21
 8103510:	017d7841 	.word	0x017d7841
 8103514:	02faf081 	.word	0x02faf081

08103518 <HAL_ADC_Init>:
{
 8103518:	b570      	push	{r4, r5, r6, lr}
 810351a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 810351c:	2300      	movs	r3, #0
 810351e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8103520:	2800      	cmp	r0, #0
 8103522:	f000 80b0 	beq.w	8103686 <HAL_ADC_Init+0x16e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8103526:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8103528:	4604      	mov	r4, r0
 810352a:	2d00      	cmp	r5, #0
 810352c:	f000 809a 	beq.w	8103664 <HAL_ADC_Init+0x14c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8103530:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8103532:	6893      	ldr	r3, [r2, #8]
 8103534:	009e      	lsls	r6, r3, #2
 8103536:	d505      	bpl.n	8103544 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8103538:	6893      	ldr	r3, [r2, #8]
 810353a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 810353e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8103542:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103544:	6893      	ldr	r3, [r2, #8]
 8103546:	00dd      	lsls	r5, r3, #3
 8103548:	d418      	bmi.n	810357c <HAL_ADC_Init+0x64>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810354a:	4b75      	ldr	r3, [pc, #468]	; (8103720 <HAL_ADC_Init+0x208>)
  MODIFY_REG(ADCx->CR,
 810354c:	6891      	ldr	r1, [r2, #8]
 810354e:	681b      	ldr	r3, [r3, #0]
 8103550:	4874      	ldr	r0, [pc, #464]	; (8103724 <HAL_ADC_Init+0x20c>)
 8103552:	099b      	lsrs	r3, r3, #6
 8103554:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8103558:	fba0 0303 	umull	r0, r3, r0, r3
 810355c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8103560:	099b      	lsrs	r3, r3, #6
 8103562:	3301      	adds	r3, #1
 8103564:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8103568:	6091      	str	r1, [r2, #8]
 810356a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 810356c:	9b01      	ldr	r3, [sp, #4]
 810356e:	b12b      	cbz	r3, 810357c <HAL_ADC_Init+0x64>
      wait_loop_index--;
 8103570:	9b01      	ldr	r3, [sp, #4]
 8103572:	3b01      	subs	r3, #1
 8103574:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8103576:	9b01      	ldr	r3, [sp, #4]
 8103578:	2b00      	cmp	r3, #0
 810357a:	d1f9      	bne.n	8103570 <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 810357c:	6893      	ldr	r3, [r2, #8]
 810357e:	00d8      	lsls	r0, r3, #3
 8103580:	d461      	bmi.n	8103646 <HAL_ADC_Init+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103582:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8103584:	f043 0310 	orr.w	r3, r3, #16
 8103588:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810358a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 810358c:	2501      	movs	r5, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810358e:	432b      	orrs	r3, r5
 8103590:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103592:	6893      	ldr	r3, [r2, #8]
 8103594:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103598:	6d63      	ldr	r3, [r4, #84]	; 0x54
 810359a:	d15b      	bne.n	8103654 <HAL_ADC_Init+0x13c>
 810359c:	06d9      	lsls	r1, r3, #27
 810359e:	d459      	bmi.n	8103654 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 81035a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 81035a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81035a6:	f043 0302 	orr.w	r3, r3, #2
 81035aa:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81035ac:	6893      	ldr	r3, [r2, #8]
 81035ae:	07db      	lsls	r3, r3, #31
 81035b0:	d412      	bmi.n	81035d8 <HAL_ADC_Init+0xc0>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81035b2:	4b5d      	ldr	r3, [pc, #372]	; (8103728 <HAL_ADC_Init+0x210>)
 81035b4:	495d      	ldr	r1, [pc, #372]	; (810372c <HAL_ADC_Init+0x214>)
 81035b6:	429a      	cmp	r2, r3
 81035b8:	f000 80a3 	beq.w	8103702 <HAL_ADC_Init+0x1ea>
 81035bc:	428a      	cmp	r2, r1
 81035be:	f000 80a8 	beq.w	8103712 <HAL_ADC_Init+0x1fa>
 81035c2:	4b5b      	ldr	r3, [pc, #364]	; (8103730 <HAL_ADC_Init+0x218>)
 81035c4:	689b      	ldr	r3, [r3, #8]
 81035c6:	07de      	lsls	r6, r3, #31
 81035c8:	d406      	bmi.n	81035d8 <HAL_ADC_Init+0xc0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81035ca:	4a5a      	ldr	r2, [pc, #360]	; (8103734 <HAL_ADC_Init+0x21c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81035cc:	6893      	ldr	r3, [r2, #8]
 81035ce:	6861      	ldr	r1, [r4, #4]
 81035d0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 81035d4:	430b      	orrs	r3, r1
 81035d6:	6093      	str	r3, [r2, #8]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81035d8:	f7ff fc4c 	bl	8102e74 <HAL_GetREVID>
 81035dc:	f241 0303 	movw	r3, #4099	; 0x1003
 81035e0:	4298      	cmp	r0, r3
 81035e2:	68a1      	ldr	r1, [r4, #8]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81035e4:	7f22      	ldrb	r2, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81035e6:	d843      	bhi.n	8103670 <HAL_ADC_Init+0x158>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035e8:	f894 c015 	ldrb.w	ip, [r4, #21]
 81035ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81035ee:	0413      	lsls	r3, r2, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81035f0:	ea43 334c 	orr.w	r3, r3, ip, lsl #13
 81035f4:	4303      	orrs	r3, r0
 81035f6:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81035f8:	2a01      	cmp	r2, #1
 81035fa:	d103      	bne.n	8103604 <HAL_ADC_Init+0xec>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81035fc:	6a22      	ldr	r2, [r4, #32]
 81035fe:	3a01      	subs	r2, #1
 8103600:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103604:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8103606:	b122      	cbz	r2, 8103612 <HAL_ADC_Init+0xfa>
                  | hadc->Init.ExternalTrigConvEdge
 8103608:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810360a:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810360e:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103610:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8103612:	6822      	ldr	r2, [r4, #0]
 8103614:	4948      	ldr	r1, [pc, #288]	; (8103738 <HAL_ADC_Init+0x220>)
 8103616:	68d0      	ldr	r0, [r2, #12]
 8103618:	4001      	ands	r1, r0
 810361a:	4319      	orrs	r1, r3
 810361c:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810361e:	6893      	ldr	r3, [r2, #8]
 8103620:	0758      	lsls	r0, r3, #29
 8103622:	d534      	bpl.n	810368e <HAL_ADC_Init+0x176>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8103624:	6893      	ldr	r3, [r2, #8]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103626:	68e3      	ldr	r3, [r4, #12]
 8103628:	2b01      	cmp	r3, #1
 810362a:	d051      	beq.n	81036d0 <HAL_ADC_Init+0x1b8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810362c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 810362e:	f023 030f 	bic.w	r3, r3, #15
 8103632:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103634:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8103636:	f023 0303 	bic.w	r3, r3, #3
 810363a:	f043 0301 	orr.w	r3, r3, #1
}
 810363e:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8103640:	6563      	str	r3, [r4, #84]	; 0x54
}
 8103642:	b002      	add	sp, #8
 8103644:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103646:	6893      	ldr	r3, [r2, #8]
 8103648:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810364c:	f04f 0500 	mov.w	r5, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103650:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8103652:	d0a3      	beq.n	810359c <HAL_ADC_Init+0x84>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103654:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8103656:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103658:	f043 0310 	orr.w	r3, r3, #16
}
 810365c:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810365e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8103660:	b002      	add	sp, #8
 8103662:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8103664:	f7fd fe3c 	bl	81012e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8103668:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 810366a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 810366e:	e75f      	b.n	8103530 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103670:	2910      	cmp	r1, #16
 8103672:	d1b9      	bne.n	81035e8 <HAL_ADC_Init+0xd0>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103674:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103676:	0413      	lsls	r3, r2, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103678:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 810367c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 810367e:	430b      	orrs	r3, r1
 8103680:	f043 031c 	orr.w	r3, r3, #28
 8103684:	e7b8      	b.n	81035f8 <HAL_ADC_Init+0xe0>
    return HAL_ERROR;
 8103686:	2501      	movs	r5, #1
}
 8103688:	4628      	mov	r0, r5
 810368a:	b002      	add	sp, #8
 810368c:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810368e:	6893      	ldr	r3, [r2, #8]
 8103690:	0719      	lsls	r1, r3, #28
 8103692:	d4c8      	bmi.n	8103626 <HAL_ADC_Init+0x10e>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103694:	68d3      	ldr	r3, [r2, #12]
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8103696:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8103698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810369c:	f023 0303 	bic.w	r3, r3, #3
 81036a0:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 81036a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 81036a6:	430b      	orrs	r3, r1
 81036a8:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 81036aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 81036ae:	2b01      	cmp	r3, #1
 81036b0:	d016      	beq.n	81036e0 <HAL_ADC_Init+0x1c8>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81036b2:	6913      	ldr	r3, [r2, #16]
 81036b4:	f023 0301 	bic.w	r3, r3, #1
 81036b8:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81036ba:	6913      	ldr	r3, [r2, #16]
 81036bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81036be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 81036c2:	430b      	orrs	r3, r1
 81036c4:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
 81036c6:	4620      	mov	r0, r4
 81036c8:	f7ff fe6a 	bl	81033a0 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81036cc:	6822      	ldr	r2, [r4, #0]
 81036ce:	e7aa      	b.n	8103626 <HAL_ADC_Init+0x10e>
 81036d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 81036d2:	69a3      	ldr	r3, [r4, #24]
 81036d4:	f021 010f 	bic.w	r1, r1, #15
 81036d8:	3b01      	subs	r3, #1
 81036da:	430b      	orrs	r3, r1
 81036dc:	6313      	str	r3, [r2, #48]	; 0x30
 81036de:	e7a9      	b.n	8103634 <HAL_ADC_Init+0x11c>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81036e0:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 81036e4:	6c66      	ldr	r6, [r4, #68]	; 0x44
 81036e6:	6910      	ldr	r0, [r2, #16]
 81036e8:	3901      	subs	r1, #1
 81036ea:	4333      	orrs	r3, r6
 81036ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81036f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 81036f2:	430b      	orrs	r3, r1
 81036f4:	4911      	ldr	r1, [pc, #68]	; (810373c <HAL_ADC_Init+0x224>)
 81036f6:	4001      	ands	r1, r0
 81036f8:	430b      	orrs	r3, r1
 81036fa:	f043 0301 	orr.w	r3, r3, #1
 81036fe:	6113      	str	r3, [r2, #16]
 8103700:	e7db      	b.n	81036ba <HAL_ADC_Init+0x1a2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103702:	6893      	ldr	r3, [r2, #8]
 8103704:	688a      	ldr	r2, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103706:	4313      	orrs	r3, r2
 8103708:	07db      	lsls	r3, r3, #31
 810370a:	f53f af65 	bmi.w	81035d8 <HAL_ADC_Init+0xc0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810370e:	4a0c      	ldr	r2, [pc, #48]	; (8103740 <HAL_ADC_Init+0x228>)
 8103710:	e75c      	b.n	81035cc <HAL_ADC_Init+0xb4>
 8103712:	689b      	ldr	r3, [r3, #8]
 8103714:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103716:	4313      	orrs	r3, r2
 8103718:	07da      	lsls	r2, r3, #31
 810371a:	f53f af5d 	bmi.w	81035d8 <HAL_ADC_Init+0xc0>
 810371e:	e7f6      	b.n	810370e <HAL_ADC_Init+0x1f6>
 8103720:	1000004c 	.word	0x1000004c
 8103724:	053e2d63 	.word	0x053e2d63
 8103728:	40022000 	.word	0x40022000
 810372c:	40022100 	.word	0x40022100
 8103730:	58026000 	.word	0x58026000
 8103734:	58026300 	.word	0x58026300
 8103738:	fff0c003 	.word	0xfff0c003
 810373c:	fc00f81e 	.word	0xfc00f81e
 8103740:	40022300 	.word	0x40022300

08103744 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103744:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103746:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810374a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 810374c:	2a01      	cmp	r2, #1
{
 810374e:	b09a      	sub	sp, #104	; 0x68
  __HAL_LOCK(hadc);
 8103750:	d057      	beq.n	8103802 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8103752:	4603      	mov	r3, r0

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103754:	4c2d      	ldr	r4, [pc, #180]	; (810380c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8103756:	681d      	ldr	r5, [r3, #0]
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103758:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 810375a:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810375c:	42a5      	cmp	r5, r4
  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810375e:	9216      	str	r2, [sp, #88]	; 0x58
  __HAL_LOCK(hadc);
 8103760:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103764:	9217      	str	r2, [sp, #92]	; 0x5c
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103766:	d008      	beq.n	810377a <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103768:	6d59      	ldr	r1, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 810376a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810376e:	f041 0120 	orr.w	r1, r1, #32
 8103772:	6559      	str	r1, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8103774:	b01a      	add	sp, #104	; 0x68
 8103776:	bcf0      	pop	{r4, r5, r6, r7}
 8103778:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810377a:	4c25      	ldr	r4, [pc, #148]	; (8103810 <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 810377c:	68a2      	ldr	r2, [r4, #8]
 810377e:	0752      	lsls	r2, r2, #29
 8103780:	d50b      	bpl.n	810379a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8103782:	68aa      	ldr	r2, [r5, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103786:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 810378a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810378c:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 810378e:	2200      	movs	r2, #0
 8103790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8103794:	b01a      	add	sp, #104	; 0x68
 8103796:	bcf0      	pop	{r4, r5, r6, r7}
 8103798:	4770      	bx	lr
 810379a:	68a8      	ldr	r0, [r5, #8]
 810379c:	f010 0004 	ands.w	r0, r0, #4
 81037a0:	d1f0      	bne.n	8103784 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81037a2:	b1d6      	cbz	r6, 81037da <HAL_ADCEx_MultiModeConfigChannel+0x96>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81037a4:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8103814 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 81037a8:	684f      	ldr	r7, [r1, #4]
 81037aa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 81037ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81037b2:	433a      	orrs	r2, r7
 81037b4:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81037b8:	68ad      	ldr	r5, [r5, #8]
 81037ba:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81037bc:	432a      	orrs	r2, r5
 81037be:	07d4      	lsls	r4, r2, #31
 81037c0:	d41d      	bmi.n	81037fe <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 81037c2:	688a      	ldr	r2, [r1, #8]
 81037c4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 81037c8:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 81037cc:	4332      	orrs	r2, r6
 81037ce:	f021 010f 	bic.w	r1, r1, #15
 81037d2:	430a      	orrs	r2, r1
 81037d4:	f8cc 2008 	str.w	r2, [ip, #8]
 81037d8:	e7d9      	b.n	810378e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81037da:	490e      	ldr	r1, [pc, #56]	; (8103814 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 81037dc:	688a      	ldr	r2, [r1, #8]
 81037de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81037e2:	608a      	str	r2, [r1, #8]
 81037e4:	68a8      	ldr	r0, [r5, #8]
 81037e6:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81037e8:	4302      	orrs	r2, r0
 81037ea:	07d0      	lsls	r0, r2, #31
 81037ec:	d407      	bmi.n	81037fe <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81037ee:	688a      	ldr	r2, [r1, #8]
 81037f0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 81037f4:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81037f8:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81037fa:	608a      	str	r2, [r1, #8]
 81037fc:	e7c7      	b.n	810378e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81037fe:	2000      	movs	r0, #0
 8103800:	e7c5      	b.n	810378e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8103802:	2002      	movs	r0, #2
}
 8103804:	b01a      	add	sp, #104	; 0x68
 8103806:	bcf0      	pop	{r4, r5, r6, r7}
 8103808:	4770      	bx	lr
 810380a:	bf00      	nop
 810380c:	40022000 	.word	0x40022000
 8103810:	40022100 	.word	0x40022100
 8103814:	40022300 	.word	0x40022300

08103818 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103818:	4907      	ldr	r1, [pc, #28]	; (8103838 <HAL_NVIC_SetPriorityGrouping+0x20>)
 810381a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810381c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810381e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103822:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103826:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103828:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810382a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810382e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8103832:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8103834:	4770      	bx	lr
 8103836:	bf00      	nop
 8103838:	e000ed00 	.word	0xe000ed00

0810383c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810383c:	4b1c      	ldr	r3, [pc, #112]	; (81038b0 <HAL_NVIC_SetPriority+0x74>)
 810383e:	68db      	ldr	r3, [r3, #12]
 8103840:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103844:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103846:	f1c3 0e07 	rsb	lr, r3, #7
 810384a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810384e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103852:	bf28      	it	cs
 8103854:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103858:	f1bc 0f06 	cmp.w	ip, #6
 810385c:	d91b      	bls.n	8103896 <HAL_NVIC_SetPriority+0x5a>
 810385e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103860:	f04f 3cff 	mov.w	ip, #4294967295
 8103864:	fa0c fc03 	lsl.w	ip, ip, r3
 8103868:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810386c:	f04f 3cff 	mov.w	ip, #4294967295
 8103870:	fa0c fc0e 	lsl.w	ip, ip, lr
 8103874:	ea21 010c 	bic.w	r1, r1, ip
 8103878:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 810387a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810387c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8103880:	db0c      	blt.n	810389c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103882:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8103886:	0109      	lsls	r1, r1, #4
 8103888:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 810388c:	b2c9      	uxtb	r1, r1
 810388e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8103892:	f85d fb04 	ldr.w	pc, [sp], #4
 8103896:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103898:	4613      	mov	r3, r2
 810389a:	e7e7      	b.n	810386c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810389c:	4b05      	ldr	r3, [pc, #20]	; (81038b4 <HAL_NVIC_SetPriority+0x78>)
 810389e:	f000 000f 	and.w	r0, r0, #15
 81038a2:	0109      	lsls	r1, r1, #4
 81038a4:	4403      	add	r3, r0
 81038a6:	b2c9      	uxtb	r1, r1
 81038a8:	7619      	strb	r1, [r3, #24]
 81038aa:	f85d fb04 	ldr.w	pc, [sp], #4
 81038ae:	bf00      	nop
 81038b0:	e000ed00 	.word	0xe000ed00
 81038b4:	e000ecfc 	.word	0xe000ecfc

081038b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 81038b8:	2800      	cmp	r0, #0
 81038ba:	db07      	blt.n	81038cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81038bc:	4a04      	ldr	r2, [pc, #16]	; (81038d0 <HAL_NVIC_EnableIRQ+0x18>)
 81038be:	0941      	lsrs	r1, r0, #5
 81038c0:	2301      	movs	r3, #1
 81038c2:	f000 001f 	and.w	r0, r0, #31
 81038c6:	4083      	lsls	r3, r0
 81038c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 81038cc:	4770      	bx	lr
 81038ce:	bf00      	nop
 81038d0:	e000e100 	.word	0xe000e100

081038d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81038d4:	3801      	subs	r0, #1
 81038d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 81038da:	d210      	bcs.n	81038fe <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81038dc:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81038de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81038e2:	4c08      	ldr	r4, [pc, #32]	; (8103904 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81038e4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81038e6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 81038ea:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81038ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81038f0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81038f2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81038f4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 81038f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81038fa:	6119      	str	r1, [r3, #16]
 81038fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 81038fe:	2001      	movs	r0, #1
 8103900:	4770      	bx	lr
 8103902:	bf00      	nop
 8103904:	e000ed00 	.word	0xe000ed00

08103908 <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103908:	4b04      	ldr	r3, [pc, #16]	; (810391c <HAL_GetCurrentCPUID+0x14>)
 810390a:	681b      	ldr	r3, [r3, #0]
 810390c:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 8103910:	2b07      	cmp	r3, #7
  }
}
 8103912:	bf0c      	ite	eq
 8103914:	2003      	moveq	r0, #3
 8103916:	2001      	movne	r0, #1
 8103918:	4770      	bx	lr
 810391a:	bf00      	nop
 810391c:	e000ed00 	.word	0xe000ed00

08103920 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103920:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103922:	6804      	ldr	r4, [r0, #0]
 8103924:	4d65      	ldr	r5, [pc, #404]	; (8103abc <DMA_SetConfig+0x19c>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103926:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103928:	42ac      	cmp	r4, r5
{
 810392a:	4696      	mov	lr, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810392c:	f000 80b8 	beq.w	8103aa0 <DMA_SetConfig+0x180>
 8103930:	3518      	adds	r5, #24
 8103932:	42ac      	cmp	r4, r5
 8103934:	d07a      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 8103936:	3518      	adds	r5, #24
 8103938:	42ac      	cmp	r4, r5
 810393a:	d077      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 810393c:	3518      	adds	r5, #24
 810393e:	42ac      	cmp	r4, r5
 8103940:	d074      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 8103942:	3518      	adds	r5, #24
 8103944:	42ac      	cmp	r4, r5
 8103946:	d071      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 8103948:	3518      	adds	r5, #24
 810394a:	42ac      	cmp	r4, r5
 810394c:	d06e      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 810394e:	3518      	adds	r5, #24
 8103950:	42ac      	cmp	r4, r5
 8103952:	d06b      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 8103954:	3518      	adds	r5, #24
 8103956:	42ac      	cmp	r4, r5
 8103958:	d068      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 810395a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 810395e:	42ac      	cmp	r4, r5
 8103960:	d064      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 8103962:	3518      	adds	r5, #24
 8103964:	42ac      	cmp	r4, r5
 8103966:	d061      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 8103968:	3518      	adds	r5, #24
 810396a:	42ac      	cmp	r4, r5
 810396c:	d05e      	beq.n	8103a2c <DMA_SetConfig+0x10c>
 810396e:	3518      	adds	r5, #24
 8103970:	42ac      	cmp	r4, r5
 8103972:	d023      	beq.n	81039bc <DMA_SetConfig+0x9c>
 8103974:	3518      	adds	r5, #24
 8103976:	42ac      	cmp	r4, r5
 8103978:	d020      	beq.n	81039bc <DMA_SetConfig+0x9c>
 810397a:	3518      	adds	r5, #24
 810397c:	42ac      	cmp	r4, r5
 810397e:	d01d      	beq.n	81039bc <DMA_SetConfig+0x9c>
 8103980:	3518      	adds	r5, #24
 8103982:	42ac      	cmp	r4, r5
 8103984:	d01a      	beq.n	81039bc <DMA_SetConfig+0x9c>
 8103986:	3518      	adds	r5, #24
 8103988:	42ac      	cmp	r4, r5
 810398a:	d017      	beq.n	81039bc <DMA_SetConfig+0x9c>
 810398c:	4d4c      	ldr	r5, [pc, #304]	; (8103ac0 <DMA_SetConfig+0x1a0>)
 810398e:	42ac      	cmp	r4, r5
 8103990:	d014      	beq.n	81039bc <DMA_SetConfig+0x9c>
 8103992:	3514      	adds	r5, #20
 8103994:	42ac      	cmp	r4, r5
 8103996:	d011      	beq.n	81039bc <DMA_SetConfig+0x9c>
 8103998:	3514      	adds	r5, #20
 810399a:	42ac      	cmp	r4, r5
 810399c:	d00e      	beq.n	81039bc <DMA_SetConfig+0x9c>
 810399e:	3514      	adds	r5, #20
 81039a0:	42ac      	cmp	r4, r5
 81039a2:	d00b      	beq.n	81039bc <DMA_SetConfig+0x9c>
 81039a4:	3514      	adds	r5, #20
 81039a6:	42ac      	cmp	r4, r5
 81039a8:	d008      	beq.n	81039bc <DMA_SetConfig+0x9c>
 81039aa:	3514      	adds	r5, #20
 81039ac:	42ac      	cmp	r4, r5
 81039ae:	d005      	beq.n	81039bc <DMA_SetConfig+0x9c>
 81039b0:	3514      	adds	r5, #20
 81039b2:	42ac      	cmp	r4, r5
 81039b4:	d002      	beq.n	81039bc <DMA_SetConfig+0x9c>
 81039b6:	3514      	adds	r5, #20
 81039b8:	42ac      	cmp	r4, r5
 81039ba:	d136      	bne.n	8103a2a <DMA_SetConfig+0x10a>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81039bc:	e9d0 751a 	ldrd	r7, r5, [r0, #104]	; 0x68
 81039c0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 81039c2:	6057      	str	r7, [r2, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 81039c4:	2d00      	cmp	r5, #0
 81039c6:	d136      	bne.n	8103a36 <DMA_SetConfig+0x116>
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81039c8:	4d3e      	ldr	r5, [pc, #248]	; (8103ac4 <DMA_SetConfig+0x1a4>)
 81039ca:	42ac      	cmp	r4, r5
 81039cc:	d055      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 81039ce:	3518      	adds	r5, #24
 81039d0:	42ac      	cmp	r4, r5
 81039d2:	d052      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 81039d4:	3518      	adds	r5, #24
 81039d6:	42ac      	cmp	r4, r5
 81039d8:	d04f      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 81039da:	3518      	adds	r5, #24
 81039dc:	42ac      	cmp	r4, r5
 81039de:	d04c      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 81039e0:	3518      	adds	r5, #24
 81039e2:	42ac      	cmp	r4, r5
 81039e4:	d049      	beq.n	8103a7a <DMA_SetConfig+0x15a>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81039e6:	4d36      	ldr	r5, [pc, #216]	; (8103ac0 <DMA_SetConfig+0x1a0>)
 81039e8:	42ac      	cmp	r4, r5
 81039ea:	d011      	beq.n	8103a10 <DMA_SetConfig+0xf0>
 81039ec:	4d36      	ldr	r5, [pc, #216]	; (8103ac8 <DMA_SetConfig+0x1a8>)
 81039ee:	42ac      	cmp	r4, r5
 81039f0:	d00e      	beq.n	8103a10 <DMA_SetConfig+0xf0>
 81039f2:	3514      	adds	r5, #20
 81039f4:	42ac      	cmp	r4, r5
 81039f6:	d00b      	beq.n	8103a10 <DMA_SetConfig+0xf0>
 81039f8:	3514      	adds	r5, #20
 81039fa:	42ac      	cmp	r4, r5
 81039fc:	d008      	beq.n	8103a10 <DMA_SetConfig+0xf0>
 81039fe:	3514      	adds	r5, #20
 8103a00:	42ac      	cmp	r4, r5
 8103a02:	d005      	beq.n	8103a10 <DMA_SetConfig+0xf0>
 8103a04:	3514      	adds	r5, #20
 8103a06:	42ac      	cmp	r4, r5
 8103a08:	d002      	beq.n	8103a10 <DMA_SetConfig+0xf0>
 8103a0a:	3514      	adds	r5, #20
 8103a0c:	42ac      	cmp	r4, r5
 8103a0e:	d151      	bne.n	8103ab4 <DMA_SetConfig+0x194>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103a10:	6dc5      	ldr	r5, [r0, #92]	; 0x5c

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103a12:	6887      	ldr	r7, [r0, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103a14:	f005 051f 	and.w	r5, r5, #31
 8103a18:	2001      	movs	r0, #1
 8103a1a:	40a8      	lsls	r0, r5
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103a1c:	2f40      	cmp	r7, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103a1e:	6070      	str	r0, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8103a20:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103a22:	d139      	bne.n	8103a98 <DMA_SetConfig+0x178>
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8103a24:	f8c4 e008 	str.w	lr, [r4, #8]

      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8103a28:	60e1      	str	r1, [r4, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103a2c:	e9d0 751a 	ldrd	r7, r5, [r0, #104]	; 0x68
 8103a30:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8103a32:	6057      	str	r7, [r2, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8103a34:	b30d      	cbz	r5, 8103a7a <DMA_SetConfig+0x15a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103a36:	e9d0 271c 	ldrd	r2, r7, [r0, #112]	; 0x70
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103a3a:	4d24      	ldr	r5, [pc, #144]	; (8103acc <DMA_SetConfig+0x1ac>)
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103a3c:	6057      	str	r7, [r2, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103a3e:	42ac      	cmp	r4, r5
 8103a40:	d01b      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a42:	4d23      	ldr	r5, [pc, #140]	; (8103ad0 <DMA_SetConfig+0x1b0>)
 8103a44:	42ac      	cmp	r4, r5
 8103a46:	d018      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a48:	3518      	adds	r5, #24
 8103a4a:	42ac      	cmp	r4, r5
 8103a4c:	d015      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a4e:	3518      	adds	r5, #24
 8103a50:	42ac      	cmp	r4, r5
 8103a52:	d012      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a54:	3518      	adds	r5, #24
 8103a56:	42ac      	cmp	r4, r5
 8103a58:	d00f      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a5a:	3518      	adds	r5, #24
 8103a5c:	42ac      	cmp	r4, r5
 8103a5e:	d00c      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a60:	3518      	adds	r5, #24
 8103a62:	42ac      	cmp	r4, r5
 8103a64:	d009      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a66:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8103a6a:	42ac      	cmp	r4, r5
 8103a6c:	d005      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a6e:	3518      	adds	r5, #24
 8103a70:	42ac      	cmp	r4, r5
 8103a72:	d002      	beq.n	8103a7a <DMA_SetConfig+0x15a>
 8103a74:	3518      	adds	r5, #24
 8103a76:	42ac      	cmp	r4, r5
 8103a78:	d1a6      	bne.n	81039c8 <DMA_SetConfig+0xa8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103a7a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103a7c:	6887      	ldr	r7, [r0, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103a7e:	f005 0c1f 	and.w	ip, r5, #31
 8103a82:	203f      	movs	r0, #63	; 0x3f
 8103a84:	fa00 f00c 	lsl.w	r0, r0, ip
 8103a88:	60b0      	str	r0, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8103a8a:	6820      	ldr	r0, [r4, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103a8c:	2f40      	cmp	r7, #64	; 0x40
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8103a8e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8103a92:	6020      	str	r0, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8103a94:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8103a96:	d0c5      	beq.n	8103a24 <DMA_SetConfig+0x104>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8103a98:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8103a9a:	f8c4 e00c 	str.w	lr, [r4, #12]
}
 8103a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103aa0:	e9d0 751a 	ldrd	r7, r5, [r0, #104]	; 0x68
 8103aa4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8103aa6:	6057      	str	r7, [r2, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8103aa8:	2d00      	cmp	r5, #0
 8103aaa:	d0e6      	beq.n	8103a7a <DMA_SetConfig+0x15a>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103aac:	e9d0 571c 	ldrd	r5, r7, [r0, #112]	; 0x70
 8103ab0:	606f      	str	r7, [r5, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103ab2:	e7e2      	b.n	8103a7a <DMA_SetConfig+0x15a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103ab4:	3514      	adds	r5, #20
 8103ab6:	42ac      	cmp	r4, r5
 8103ab8:	d0aa      	beq.n	8103a10 <DMA_SetConfig+0xf0>
}
 8103aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103abc:	40020010 	.word	0x40020010
 8103ac0:	58025408 	.word	0x58025408
 8103ac4:	40020458 	.word	0x40020458
 8103ac8:	5802541c 	.word	0x5802541c
 8103acc:	40020028 	.word	0x40020028
 8103ad0:	40020040 	.word	0x40020040

08103ad4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103ad4:	492a      	ldr	r1, [pc, #168]	; (8103b80 <DMA_CalcBaseAndBitshift+0xac>)
 8103ad6:	6803      	ldr	r3, [r0, #0]
 8103ad8:	428b      	cmp	r3, r1
{
 8103ada:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103adc:	d030      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103ade:	3118      	adds	r1, #24
 8103ae0:	428b      	cmp	r3, r1
 8103ae2:	d02d      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103ae4:	3118      	adds	r1, #24
 8103ae6:	428b      	cmp	r3, r1
 8103ae8:	d02a      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103aea:	3118      	adds	r1, #24
 8103aec:	428b      	cmp	r3, r1
 8103aee:	d027      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103af0:	3118      	adds	r1, #24
 8103af2:	428b      	cmp	r3, r1
 8103af4:	d033      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
 8103af6:	3118      	adds	r1, #24
 8103af8:	428b      	cmp	r3, r1
 8103afa:	d030      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
 8103afc:	3118      	adds	r1, #24
 8103afe:	428b      	cmp	r3, r1
 8103b00:	d02d      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
 8103b02:	3118      	adds	r1, #24
 8103b04:	428b      	cmp	r3, r1
 8103b06:	d02a      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
 8103b08:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8103b0c:	428b      	cmp	r3, r1
 8103b0e:	d017      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103b10:	3118      	adds	r1, #24
 8103b12:	428b      	cmp	r3, r1
 8103b14:	d014      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103b16:	3118      	adds	r1, #24
 8103b18:	428b      	cmp	r3, r1
 8103b1a:	d011      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103b1c:	3118      	adds	r1, #24
 8103b1e:	428b      	cmp	r3, r1
 8103b20:	d00e      	beq.n	8103b40 <DMA_CalcBaseAndBitshift+0x6c>
 8103b22:	3118      	adds	r1, #24
 8103b24:	428b      	cmp	r3, r1
 8103b26:	d01a      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
 8103b28:	3118      	adds	r1, #24
 8103b2a:	428b      	cmp	r3, r1
 8103b2c:	d017      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
 8103b2e:	3118      	adds	r1, #24
 8103b30:	428b      	cmp	r3, r1
 8103b32:	d014      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
 8103b34:	3118      	adds	r1, #24
 8103b36:	428b      	cmp	r3, r1
 8103b38:	d011      	beq.n	8103b5e <DMA_CalcBaseAndBitshift+0x8a>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8103b3a:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
 8103b3e:	e00c      	b.n	8103b5a <DMA_CalcBaseAndBitshift+0x86>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103b40:	4810      	ldr	r0, [pc, #64]	; (8103b84 <DMA_CalcBaseAndBitshift+0xb0>)
 8103b42:	b2d9      	uxtb	r1, r3
 8103b44:	3910      	subs	r1, #16
 8103b46:	fba0 0101 	umull	r0, r1, r0, r1
 8103b4a:	0909      	lsrs	r1, r1, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103b4c:	480e      	ldr	r0, [pc, #56]	; (8103b88 <DMA_CalcBaseAndBitshift+0xb4>)
 8103b4e:	5c41      	ldrb	r1, [r0, r1]
 8103b50:	65d1      	str	r1, [r2, #92]	; 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103b52:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8103b56:	f020 0003 	bic.w	r0, r0, #3
 8103b5a:	6590      	str	r0, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8103b5c:	4770      	bx	lr
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103b5e:	4809      	ldr	r0, [pc, #36]	; (8103b84 <DMA_CalcBaseAndBitshift+0xb0>)
 8103b60:	b2d9      	uxtb	r1, r3
 8103b62:	3910      	subs	r1, #16
 8103b64:	fba0 0101 	umull	r0, r1, r0, r1
 8103b68:	0909      	lsrs	r1, r1, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103b6a:	4807      	ldr	r0, [pc, #28]	; (8103b88 <DMA_CalcBaseAndBitshift+0xb4>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103b6c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8103b70:	f023 0303 	bic.w	r3, r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8103b74:	5c41      	ldrb	r1, [r0, r1]
 8103b76:	65d1      	str	r1, [r2, #92]	; 0x5c
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8103b78:	1d18      	adds	r0, r3, #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8103b7a:	6590      	str	r0, [r2, #88]	; 0x58
}
 8103b7c:	4770      	bx	lr
 8103b7e:	bf00      	nop
 8103b80:	40020010 	.word	0x40020010
 8103b84:	aaaaaaab 	.word	0xaaaaaaab
 8103b88:	0810f3d8 	.word	0x0810f3d8

08103b8c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103b8c:	4a23      	ldr	r2, [pc, #140]	; (8103c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8103b8e:	6803      	ldr	r3, [r0, #0]
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103b90:	4293      	cmp	r3, r2
{
 8103b92:	b410      	push	{r4}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103b94:	d02b      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103b96:	3214      	adds	r2, #20
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d028      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103b9c:	3214      	adds	r2, #20
 8103b9e:	4293      	cmp	r3, r2
 8103ba0:	d025      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103ba2:	3214      	adds	r2, #20
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d022      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103ba8:	3214      	adds	r2, #20
 8103baa:	4293      	cmp	r3, r2
 8103bac:	d01f      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103bae:	3214      	adds	r2, #20
 8103bb0:	4293      	cmp	r3, r2
 8103bb2:	d01c      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103bb4:	3214      	adds	r2, #20
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d019      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8103bba:	3214      	adds	r2, #20
 8103bbc:	4293      	cmp	r3, r2
 8103bbe:	d016      	beq.n	8103bee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103bc0:	4917      	ldr	r1, [pc, #92]	; (8103c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103bc2:	4c18      	ldr	r4, [pc, #96]	; (8103c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8103bc4:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103bc6:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103bc8:	3a10      	subs	r2, #16
 8103bca:	fba4 4202 	umull	r4, r2, r4, r2
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103bce:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8103bd0:	ea4f 1312 	mov.w	r3, r2, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8103bd4:	d800      	bhi.n	8103bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 8103bd6:	3308      	adds	r3, #8
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103bd8:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103bdc:	f003 011f 	and.w	r1, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103be0:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103be4:	2301      	movs	r3, #1
 8103be6:	4c10      	ldr	r4, [pc, #64]	; (8103c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8103be8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103bea:	408b      	lsls	r3, r1
 8103bec:	e010      	b.n	8103c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8103bee:	4a0f      	ldr	r2, [pc, #60]	; (8103c2c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8103bf0:	4c0f      	ldr	r4, [pc, #60]	; (8103c30 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8103bf2:	b2db      	uxtb	r3, r3
 8103bf4:	3b08      	subs	r3, #8
 8103bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8103bfa:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103bfc:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8103c00:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103c04:	f003 031f 	and.w	r3, r3, #31
 8103c08:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103c0a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103c0c:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8103c10:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103c14:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8103c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8103c1a:	4770      	bx	lr
 8103c1c:	58025408 	.word	0x58025408
 8103c20:	bffdfbf0 	.word	0xbffdfbf0
 8103c24:	aaaaaaab 	.word	0xaaaaaaab
 8103c28:	40020880 	.word	0x40020880
 8103c2c:	cccccccd 	.word	0xcccccccd
 8103c30:	58025880 	.word	0x58025880

08103c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8103c34:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103c36:	1e4a      	subs	r2, r1, #1
 8103c38:	2a07      	cmp	r2, #7
 8103c3a:	d81e      	bhi.n	8103c7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x46>
{
 8103c3c:	b410      	push	{r4}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103c3e:	6803      	ldr	r3, [r0, #0]
 8103c40:	4c15      	ldr	r4, [pc, #84]	; (8103c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8103c42:	42a3      	cmp	r3, r4
 8103c44:	d01a      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 8103c46:	3414      	adds	r4, #20
 8103c48:	42a3      	cmp	r3, r4
 8103c4a:	d017      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 8103c4c:	3414      	adds	r4, #20
 8103c4e:	42a3      	cmp	r3, r4
 8103c50:	d014      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 8103c52:	3414      	adds	r4, #20
 8103c54:	42a3      	cmp	r3, r4
 8103c56:	d011      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 8103c58:	3414      	adds	r4, #20
 8103c5a:	42a3      	cmp	r3, r4
 8103c5c:	d00e      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 8103c5e:	3414      	adds	r4, #20
 8103c60:	42a3      	cmp	r3, r4
 8103c62:	d00b      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 8103c64:	3414      	adds	r4, #20
 8103c66:	42a3      	cmp	r3, r4
 8103c68:	d008      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
 8103c6a:	3414      	adds	r4, #20
 8103c6c:	42a3      	cmp	r3, r4
 8103c6e:	d005      	beq.n	8103c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103c70:	4b0a      	ldr	r3, [pc, #40]	; (8103c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8103c72:	4c0b      	ldr	r4, [pc, #44]	; (8103ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8103c74:	440b      	add	r3, r1
 8103c76:	009b      	lsls	r3, r3, #2

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103c78:	e004      	b.n	8103c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x50>
 8103c7a:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103c7c:	4b09      	ldr	r3, [pc, #36]	; (8103ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8103c7e:	4c0a      	ldr	r4, [pc, #40]	; (8103ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8103c80:	440b      	add	r3, r1
 8103c82:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103c84:	2101      	movs	r1, #1
 8103c86:	fa01 f202 	lsl.w	r2, r1, r2
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103c8a:	e9c0 341b 	strd	r3, r4, [r0, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103c8e:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8103c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8103c94:	4770      	bx	lr
 8103c96:	bf00      	nop
 8103c98:	58025408 	.word	0x58025408
 8103c9c:	1000823f 	.word	0x1000823f
 8103ca0:	40020940 	.word	0x40020940
 8103ca4:	1600963f 	.word	0x1600963f
 8103ca8:	58025940 	.word	0x58025940

08103cac <HAL_DMA_Init>:
{
 8103cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103cae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8103cb0:	f7ff f8da 	bl	8102e68 <HAL_GetTick>
  if(hdma == NULL)
 8103cb4:	2c00      	cmp	r4, #0
 8103cb6:	f000 813e 	beq.w	8103f36 <HAL_DMA_Init+0x28a>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103cba:	6825      	ldr	r5, [r4, #0]
 8103cbc:	4ba7      	ldr	r3, [pc, #668]	; (8103f5c <HAL_DMA_Init+0x2b0>)
 8103cbe:	429d      	cmp	r5, r3
 8103cc0:	4606      	mov	r6, r0
 8103cc2:	d054      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cc4:	3318      	adds	r3, #24
 8103cc6:	429d      	cmp	r5, r3
 8103cc8:	d051      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cca:	3318      	adds	r3, #24
 8103ccc:	429d      	cmp	r5, r3
 8103cce:	d04e      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cd0:	3318      	adds	r3, #24
 8103cd2:	429d      	cmp	r5, r3
 8103cd4:	d04b      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cd6:	3318      	adds	r3, #24
 8103cd8:	429d      	cmp	r5, r3
 8103cda:	d048      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cdc:	3318      	adds	r3, #24
 8103cde:	429d      	cmp	r5, r3
 8103ce0:	d045      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103ce2:	3318      	adds	r3, #24
 8103ce4:	429d      	cmp	r5, r3
 8103ce6:	d042      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103ce8:	3318      	adds	r3, #24
 8103cea:	429d      	cmp	r5, r3
 8103cec:	d03f      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103cf2:	429d      	cmp	r5, r3
 8103cf4:	d03b      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cf6:	3318      	adds	r3, #24
 8103cf8:	429d      	cmp	r5, r3
 8103cfa:	d038      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103cfc:	3318      	adds	r3, #24
 8103cfe:	429d      	cmp	r5, r3
 8103d00:	d035      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103d02:	3318      	adds	r3, #24
 8103d04:	429d      	cmp	r5, r3
 8103d06:	d032      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103d08:	3318      	adds	r3, #24
 8103d0a:	429d      	cmp	r5, r3
 8103d0c:	d02f      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103d0e:	3318      	adds	r3, #24
 8103d10:	429d      	cmp	r5, r3
 8103d12:	d02c      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103d14:	3318      	adds	r3, #24
 8103d16:	429d      	cmp	r5, r3
 8103d18:	d029      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
 8103d1a:	3318      	adds	r3, #24
 8103d1c:	429d      	cmp	r5, r3
 8103d1e:	d026      	beq.n	8103d6e <HAL_DMA_Init+0xc2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103d20:	4b8f      	ldr	r3, [pc, #572]	; (8103f60 <HAL_DMA_Init+0x2b4>)
 8103d22:	429d      	cmp	r5, r3
 8103d24:	f000 814d 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
 8103d28:	4b8e      	ldr	r3, [pc, #568]	; (8103f64 <HAL_DMA_Init+0x2b8>)
 8103d2a:	429d      	cmp	r5, r3
 8103d2c:	f000 8149 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
 8103d30:	3314      	adds	r3, #20
 8103d32:	429d      	cmp	r5, r3
 8103d34:	f000 8145 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
 8103d38:	3314      	adds	r3, #20
 8103d3a:	429d      	cmp	r5, r3
 8103d3c:	f000 8141 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
 8103d40:	3314      	adds	r3, #20
 8103d42:	429d      	cmp	r5, r3
 8103d44:	f000 813d 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
 8103d48:	3314      	adds	r3, #20
 8103d4a:	429d      	cmp	r5, r3
 8103d4c:	f000 8139 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
 8103d50:	3314      	adds	r3, #20
 8103d52:	429d      	cmp	r5, r3
 8103d54:	f000 8135 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
 8103d58:	3314      	adds	r3, #20
 8103d5a:	429d      	cmp	r5, r3
 8103d5c:	f000 8131 	beq.w	8103fc2 <HAL_DMA_Init+0x316>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103d60:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103d62:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103d64:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103d66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8103d6a:	2001      	movs	r0, #1
}
 8103d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma);
 8103d6e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8103d70:	2202      	movs	r2, #2
 8103d72:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8103d76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8103d7a:	682b      	ldr	r3, [r5, #0]
 8103d7c:	f023 0301 	bic.w	r3, r3, #1
 8103d80:	602b      	str	r3, [r5, #0]
 8103d82:	e006      	b.n	8103d92 <HAL_DMA_Init+0xe6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103d84:	f7ff f870 	bl	8102e68 <HAL_GetTick>
 8103d88:	1b83      	subs	r3, r0, r6
 8103d8a:	2b05      	cmp	r3, #5
 8103d8c:	f200 80b7 	bhi.w	8103efe <HAL_DMA_Init+0x252>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103d90:	6825      	ldr	r5, [r4, #0]
 8103d92:	682b      	ldr	r3, [r5, #0]
 8103d94:	07d8      	lsls	r0, r3, #31
 8103d96:	d4f5      	bmi.n	8103d84 <HAL_DMA_Init+0xd8>
    registerValue |=  hdma->Init.Direction           |
 8103d98:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103d9c:	6921      	ldr	r1, [r4, #16]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103d9e:	6828      	ldr	r0, [r5, #0]
    registerValue |=  hdma->Init.Direction           |
 8103da0:	4313      	orrs	r3, r2
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103da2:	430b      	orrs	r3, r1
 8103da4:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103da6:	69a2      	ldr	r2, [r4, #24]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103da8:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103daa:	69e1      	ldr	r1, [r4, #28]
 8103dac:	4313      	orrs	r3, r2
 8103dae:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103db0:	496d      	ldr	r1, [pc, #436]	; (8103f68 <HAL_DMA_Init+0x2bc>)
 8103db2:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8103db4:	6a20      	ldr	r0, [r4, #32]
 8103db6:	4303      	orrs	r3, r0
    registerValue |=  hdma->Init.Direction           |
 8103db8:	430b      	orrs	r3, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103dba:	496c      	ldr	r1, [pc, #432]	; (8103f6c <HAL_DMA_Init+0x2c0>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103dbe:	6809      	ldr	r1, [r1, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103dc0:	2804      	cmp	r0, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103dc2:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8103dc6:	ea4f 4101 	mov.w	r1, r1, lsl #16
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103dca:	f000 80b6 	beq.w	8103f3a <HAL_DMA_Init+0x28e>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103dce:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8103dd2:	d275      	bcs.n	8103ec0 <HAL_DMA_Init+0x214>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103dd4:	602b      	str	r3, [r5, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103dd6:	696b      	ldr	r3, [r5, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103dd8:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8103ddc:	4303      	orrs	r3, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103dde:	616b      	str	r3, [r5, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103de0:	4620      	mov	r0, r4
 8103de2:	f7ff fe77 	bl	8103ad4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103de6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8103de8:	f003 021f 	and.w	r2, r3, #31
 8103dec:	233f      	movs	r3, #63	; 0x3f
 8103dee:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103df0:	4a5a      	ldr	r2, [pc, #360]	; (8103f5c <HAL_DMA_Init+0x2b0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103df2:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103df4:	4295      	cmp	r5, r2
 8103df6:	d045      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103df8:	4b5d      	ldr	r3, [pc, #372]	; (8103f70 <HAL_DMA_Init+0x2c4>)
 8103dfa:	429d      	cmp	r5, r3
 8103dfc:	d042      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103dfe:	3318      	adds	r3, #24
 8103e00:	429d      	cmp	r5, r3
 8103e02:	d03f      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e04:	3318      	adds	r3, #24
 8103e06:	429d      	cmp	r5, r3
 8103e08:	d03c      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e0a:	3318      	adds	r3, #24
 8103e0c:	429d      	cmp	r5, r3
 8103e0e:	d039      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e10:	3318      	adds	r3, #24
 8103e12:	429d      	cmp	r5, r3
 8103e14:	d036      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e16:	3318      	adds	r3, #24
 8103e18:	429d      	cmp	r5, r3
 8103e1a:	d033      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e1c:	3318      	adds	r3, #24
 8103e1e:	429d      	cmp	r5, r3
 8103e20:	d030      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103e26:	429d      	cmp	r5, r3
 8103e28:	d02c      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e2a:	3318      	adds	r3, #24
 8103e2c:	429d      	cmp	r5, r3
 8103e2e:	d029      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e30:	3318      	adds	r3, #24
 8103e32:	429d      	cmp	r5, r3
 8103e34:	d026      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e36:	3318      	adds	r3, #24
 8103e38:	429d      	cmp	r5, r3
 8103e3a:	d023      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e3c:	3318      	adds	r3, #24
 8103e3e:	429d      	cmp	r5, r3
 8103e40:	d020      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e42:	3318      	adds	r3, #24
 8103e44:	429d      	cmp	r5, r3
 8103e46:	d01d      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e48:	3318      	adds	r3, #24
 8103e4a:	429d      	cmp	r5, r3
 8103e4c:	d01a      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e4e:	3318      	adds	r3, #24
 8103e50:	429d      	cmp	r5, r3
 8103e52:	d017      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e54:	4b42      	ldr	r3, [pc, #264]	; (8103f60 <HAL_DMA_Init+0x2b4>)
 8103e56:	429d      	cmp	r5, r3
 8103e58:	d014      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e5a:	3314      	adds	r3, #20
 8103e5c:	429d      	cmp	r5, r3
 8103e5e:	d011      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e60:	3314      	adds	r3, #20
 8103e62:	429d      	cmp	r5, r3
 8103e64:	d00e      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e66:	3314      	adds	r3, #20
 8103e68:	429d      	cmp	r5, r3
 8103e6a:	d00b      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e6c:	3314      	adds	r3, #20
 8103e6e:	429d      	cmp	r5, r3
 8103e70:	d008      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e72:	3314      	adds	r3, #20
 8103e74:	429d      	cmp	r5, r3
 8103e76:	d005      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e78:	3314      	adds	r3, #20
 8103e7a:	429d      	cmp	r5, r3
 8103e7c:	d002      	beq.n	8103e84 <HAL_DMA_Init+0x1d8>
 8103e7e:	3314      	adds	r3, #20
 8103e80:	429d      	cmp	r5, r3
 8103e82:	d117      	bne.n	8103eb4 <HAL_DMA_Init+0x208>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103e84:	4620      	mov	r0, r4
 8103e86:	f7ff fe81 	bl	8103b8c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103e8a:	68a3      	ldr	r3, [r4, #8]
 8103e8c:	2b80      	cmp	r3, #128	; 0x80
 8103e8e:	d046      	beq.n	8103f1e <HAL_DMA_Init+0x272>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103e90:	6863      	ldr	r3, [r4, #4]
 8103e92:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8103e94:	b2d9      	uxtb	r1, r3
 8103e96:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103e98:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	; 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103e9c:	3b01      	subs	r3, #1
 8103e9e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103ea0:	6051      	str	r1, [r2, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103ea2:	d843      	bhi.n	8103f2c <HAL_DMA_Init+0x280>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103ea4:	f7ff fec6 	bl	8103c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103ea8:	e9d4 131b 	ldrd	r1, r3, [r4, #108]	; 0x6c
 8103eac:	6f62      	ldr	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103eae:	2000      	movs	r0, #0
 8103eb0:	6008      	str	r0, [r1, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103eb2:	605a      	str	r2, [r3, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103eb4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8103eb6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103eb8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8103eba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8103ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103ec0:	6861      	ldr	r1, [r4, #4]
 8103ec2:	f1a1 0629 	sub.w	r6, r1, #41	; 0x29
 8103ec6:	2e05      	cmp	r6, #5
 8103ec8:	d820      	bhi.n	8103f0c <HAL_DMA_Init+0x260>
        registerValue |= DMA_SxCR_TRBUFF;
 8103eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103ece:	602b      	str	r3, [r5, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103ed0:	696b      	ldr	r3, [r5, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103ed2:	2804      	cmp	r0, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103ed4:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8103ed8:	ea43 0300 	orr.w	r3, r3, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103edc:	f47f af7f 	bne.w	8103dde <HAL_DMA_Init+0x132>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8103ee2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8103ee4:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103ee6:	2e00      	cmp	r6, #0
 8103ee8:	f43f af79 	beq.w	8103dde <HAL_DMA_Init+0x132>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103eec:	2a00      	cmp	r2, #0
 8103eee:	d143      	bne.n	8103f78 <HAL_DMA_Init+0x2cc>
    switch (hdma->Init.FIFOThreshold)
 8103ef0:	2901      	cmp	r1, #1
 8103ef2:	d061      	beq.n	8103fb8 <HAL_DMA_Init+0x30c>
 8103ef4:	f031 0202 	bics.w	r2, r1, #2
 8103ef8:	f47f af71 	bne.w	8103dde <HAL_DMA_Init+0x132>
 8103efc:	e044      	b.n	8103f88 <HAL_DMA_Init+0x2dc>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103efe:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8103f00:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103f02:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8103f04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8103f08:	2001      	movs	r0, #1
}
 8103f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8103f0c:	393f      	subs	r1, #63	; 0x3f
 8103f0e:	2913      	cmp	r1, #19
 8103f10:	d8dd      	bhi.n	8103ece <HAL_DMA_Init+0x222>
 8103f12:	4e18      	ldr	r6, [pc, #96]	; (8103f74 <HAL_DMA_Init+0x2c8>)
 8103f14:	fa26 f101 	lsr.w	r1, r6, r1
 8103f18:	07c9      	lsls	r1, r1, #31
 8103f1a:	d5d8      	bpl.n	8103ece <HAL_DMA_Init+0x222>
 8103f1c:	e7d5      	b.n	8103eca <HAL_DMA_Init+0x21e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103f1e:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
 8103f22:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103f24:	2300      	movs	r3, #0
 8103f26:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103f28:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103f2a:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8103f2c:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8103f2e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103f32:	6763      	str	r3, [r4, #116]	; 0x74
 8103f34:	e7be      	b.n	8103eb4 <HAL_DMA_Init+0x208>
    return HAL_ERROR;
 8103f36:	2001      	movs	r0, #1
}
 8103f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103f3a:	e9d4 670b 	ldrd	r6, r7, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103f3e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103f42:	ea46 0c07 	orr.w	ip, r6, r7
 8103f46:	ea43 030c 	orr.w	r3, r3, ip
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103f4a:	d2b9      	bcs.n	8103ec0 <HAL_DMA_Init+0x214>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103f4c:	602b      	str	r3, [r5, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103f4e:	696b      	ldr	r3, [r5, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103f50:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8103f54:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103f58:	e7c3      	b.n	8103ee2 <HAL_DMA_Init+0x236>
 8103f5a:	bf00      	nop
 8103f5c:	40020010 	.word	0x40020010
 8103f60:	58025408 	.word	0x58025408
 8103f64:	5802541c 	.word	0x5802541c
 8103f68:	fe10803f 	.word	0xfe10803f
 8103f6c:	5c001000 	.word	0x5c001000
 8103f70:	40020028 	.word	0x40020028
 8103f74:	000f030f 	.word	0x000f030f
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103f78:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8103f7c:	d00e      	beq.n	8103f9c <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 8103f7e:	2902      	cmp	r1, #2
 8103f80:	d905      	bls.n	8103f8e <HAL_DMA_Init+0x2e2>
 8103f82:	2903      	cmp	r1, #3
 8103f84:	f47f af2b 	bne.w	8103dde <HAL_DMA_Init+0x132>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103f88:	01f2      	lsls	r2, r6, #7
 8103f8a:	f57f af28 	bpl.w	8103dde <HAL_DMA_Init+0x132>
          hdma->State = HAL_DMA_STATE_READY;
 8103f8e:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103f90:	2240      	movs	r2, #64	; 0x40
 8103f92:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8103f94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 8103f98:	4618      	mov	r0, r3
}
 8103f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8103f9c:	2903      	cmp	r1, #3
 8103f9e:	f63f af1e 	bhi.w	8103dde <HAL_DMA_Init+0x132>
 8103fa2:	a201      	add	r2, pc, #4	; (adr r2, 8103fa8 <HAL_DMA_Init+0x2fc>)
 8103fa4:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8103fa8:	08103f8f 	.word	0x08103f8f
 8103fac:	08103f89 	.word	0x08103f89
 8103fb0:	08103f8f 	.word	0x08103f8f
 8103fb4:	08103fb9 	.word	0x08103fb9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103fb8:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8103fbc:	f47f af0f 	bne.w	8103dde <HAL_DMA_Init+0x132>
 8103fc0:	e7e5      	b.n	8103f8e <HAL_DMA_Init+0x2e2>
    __HAL_UNLOCK(hdma);
 8103fc2:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8103fc4:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8103fc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8103fca:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103fce:	6828      	ldr	r0, [r5, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103fd0:	68a3      	ldr	r3, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103fd2:	f420 30ff 	bic.w	r0, r0, #130560	; 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103fd6:	2b40      	cmp	r3, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103fd8:	f420 70f8 	bic.w	r0, r0, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103fdc:	d02b      	beq.n	8104036 <HAL_DMA_Init+0x38a>
 8103fde:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8103fe2:	fab3 f383 	clz	r3, r3
 8103fe6:	095b      	lsrs	r3, r3, #5
 8103fe8:	0399      	lsls	r1, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103fea:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8103fee:	08db      	lsrs	r3, r3, #3
 8103ff0:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103ff4:	6962      	ldr	r2, [r4, #20]
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103ff6:	6a26      	ldr	r6, [r4, #32]
 8103ff8:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103ffc:	69a2      	ldr	r2, [r4, #24]
 8103ffe:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104002:	69e2      	ldr	r2, [r4, #28]
 8104004:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8104008:	ea43 1316 	orr.w	r3, r3, r6, lsr #4
 810400c:	4303      	orrs	r3, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810400e:	4a0b      	ldr	r2, [pc, #44]	; (810403c <HAL_DMA_Init+0x390>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104010:	4319      	orrs	r1, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104012:	4b0b      	ldr	r3, [pc, #44]	; (8104040 <HAL_DMA_Init+0x394>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8104014:	6029      	str	r1, [r5, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104016:	442a      	add	r2, r5
 8104018:	fba3 2302 	umull	r2, r3, r3, r2
 810401c:	091b      	lsrs	r3, r3, #4
 810401e:	009b      	lsls	r3, r3, #2
 8104020:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8104022:	4620      	mov	r0, r4
 8104024:	f7ff fd56 	bl	8103ad4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104028:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 810402a:	f003 021f 	and.w	r2, r3, #31
 810402e:	2301      	movs	r3, #1
 8104030:	4093      	lsls	r3, r2
 8104032:	6043      	str	r3, [r0, #4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104034:	e70e      	b.n	8103e54 <HAL_DMA_Init+0x1a8>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104036:	2110      	movs	r1, #16
 8104038:	e7d7      	b.n	8103fea <HAL_DMA_Init+0x33e>
 810403a:	bf00      	nop
 810403c:	a7fdabf8 	.word	0xa7fdabf8
 8104040:	cccccccd 	.word	0xcccccccd

08104044 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8104044:	2800      	cmp	r0, #0
 8104046:	f000 80e0 	beq.w	810420a <HAL_DMA_Start_IT+0x1c6>
{
 810404a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdma);
 810404e:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
 8104052:	2e01      	cmp	r6, #1
 8104054:	4604      	mov	r4, r0
 8104056:	f000 80da 	beq.w	810420e <HAL_DMA_Start_IT+0x1ca>
  if(HAL_DMA_STATE_READY == hdma->State)
 810405a:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 810405e:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8104062:	4566      	cmp	r6, ip
  __HAL_LOCK(hdma);
 8104064:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8104068:	d008      	beq.n	810407c <HAL_DMA_Start_IT+0x38>
    __HAL_UNLOCK(hdma);
 810406a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810406c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8104070:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8104074:	6542      	str	r2, [r0, #84]	; 0x54
    status = HAL_ERROR;
 8104076:	4660      	mov	r0, ip
}
 8104078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_DMA_DISABLE(hdma);
 810407c:	6806      	ldr	r6, [r0, #0]
 810407e:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8104368 <HAL_DMA_Start_IT+0x324>
    hdma->State = HAL_DMA_STATE_BUSY;
 8104082:	f04f 0802 	mov.w	r8, #2
 8104086:	f880 8035 	strb.w	r8, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 810408a:	4566      	cmp	r6, ip
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810408c:	f04f 0800 	mov.w	r8, #0
 8104090:	f8c0 8054 	str.w	r8, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8104094:	d075      	beq.n	8104182 <HAL_DMA_Start_IT+0x13e>
 8104096:	f10c 0c18 	add.w	ip, ip, #24
 810409a:	4566      	cmp	r6, ip
 810409c:	f000 80ba 	beq.w	8104214 <HAL_DMA_Start_IT+0x1d0>
 81040a0:	f10c 0c18 	add.w	ip, ip, #24
 81040a4:	4566      	cmp	r6, ip
 81040a6:	f000 8109 	beq.w	81042bc <HAL_DMA_Start_IT+0x278>
 81040aa:	f10c 0c18 	add.w	ip, ip, #24
 81040ae:	4566      	cmp	r6, ip
 81040b0:	f000 8115 	beq.w	81042de <HAL_DMA_Start_IT+0x29a>
 81040b4:	f10c 0c18 	add.w	ip, ip, #24
 81040b8:	4566      	cmp	r6, ip
 81040ba:	f000 80ee 	beq.w	810429a <HAL_DMA_Start_IT+0x256>
 81040be:	f10c 0c18 	add.w	ip, ip, #24
 81040c2:	4566      	cmp	r6, ip
 81040c4:	f000 811c 	beq.w	8104300 <HAL_DMA_Start_IT+0x2bc>
 81040c8:	469e      	mov	lr, r3
 81040ca:	4ba3      	ldr	r3, [pc, #652]	; (8104358 <HAL_DMA_Start_IT+0x314>)
 81040cc:	429e      	cmp	r6, r3
 81040ce:	f000 812c 	beq.w	810432a <HAL_DMA_Start_IT+0x2e6>
 81040d2:	3318      	adds	r3, #24
 81040d4:	429e      	cmp	r6, r3
 81040d6:	f000 814f 	beq.w	8104378 <HAL_DMA_Start_IT+0x334>
 81040da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81040de:	429e      	cmp	r6, r3
 81040e0:	f000 8160 	beq.w	81043a4 <HAL_DMA_Start_IT+0x360>
 81040e4:	3318      	adds	r3, #24
 81040e6:	429e      	cmp	r6, r3
 81040e8:	f000 8165 	beq.w	81043b6 <HAL_DMA_Start_IT+0x372>
 81040ec:	3318      	adds	r3, #24
 81040ee:	429e      	cmp	r6, r3
 81040f0:	f000 816a 	beq.w	81043c8 <HAL_DMA_Start_IT+0x384>
 81040f4:	3318      	adds	r3, #24
 81040f6:	429e      	cmp	r6, r3
 81040f8:	f000 816f 	beq.w	81043da <HAL_DMA_Start_IT+0x396>
 81040fc:	3318      	adds	r3, #24
 81040fe:	429e      	cmp	r6, r3
 8104100:	f000 8174 	beq.w	81043ec <HAL_DMA_Start_IT+0x3a8>
 8104104:	3318      	adds	r3, #24
 8104106:	429e      	cmp	r6, r3
 8104108:	f000 8179 	beq.w	81043fe <HAL_DMA_Start_IT+0x3ba>
 810410c:	3318      	adds	r3, #24
 810410e:	429e      	cmp	r6, r3
 8104110:	f000 8180 	beq.w	8104414 <HAL_DMA_Start_IT+0x3d0>
 8104114:	3318      	adds	r3, #24
 8104116:	429e      	cmp	r6, r3
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104118:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 810411a:	f000 8186 	beq.w	810442a <HAL_DMA_Start_IT+0x3e6>
 810411e:	6830      	ldr	r0, [r6, #0]
 8104120:	f020 0001 	bic.w	r0, r0, #1
 8104124:	6030      	str	r0, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104126:	4620      	mov	r0, r4
 8104128:	f7ff fbfa 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 810412c:	6833      	ldr	r3, [r6, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 810412e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104130:	f023 030e 	bic.w	r3, r3, #14
 8104134:	f043 030a 	orr.w	r3, r3, #10
 8104138:	6033      	str	r3, [r6, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 810413a:	b11a      	cbz	r2, 8104144 <HAL_DMA_Start_IT+0x100>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 810413c:	6833      	ldr	r3, [r6, #0]
 810413e:	f043 0304 	orr.w	r3, r3, #4
 8104142:	6033      	str	r3, [r6, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104144:	4b85      	ldr	r3, [pc, #532]	; (810435c <HAL_DMA_Start_IT+0x318>)
 8104146:	429e      	cmp	r6, r3
 8104148:	d02e      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810414a:	4b85      	ldr	r3, [pc, #532]	; (8104360 <HAL_DMA_Start_IT+0x31c>)
 810414c:	429e      	cmp	r6, r3
 810414e:	d02b      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104150:	3314      	adds	r3, #20
 8104152:	429e      	cmp	r6, r3
 8104154:	d028      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104156:	3314      	adds	r3, #20
 8104158:	429e      	cmp	r6, r3
 810415a:	d025      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810415c:	3314      	adds	r3, #20
 810415e:	429e      	cmp	r6, r3
 8104160:	d022      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104162:	3314      	adds	r3, #20
 8104164:	429e      	cmp	r6, r3
 8104166:	d01f      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104168:	3314      	adds	r3, #20
 810416a:	429e      	cmp	r6, r3
 810416c:	d01c      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810416e:	3314      	adds	r3, #20
 8104170:	429e      	cmp	r6, r3
 8104172:	d019      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
    __HAL_DMA_ENABLE(hdma);
 8104174:	6833      	ldr	r3, [r6, #0]
 8104176:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 810417a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 810417c:	6033      	str	r3, [r6, #0]
}
 810417e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_DMA_DISABLE(hdma);
 8104182:	4d78      	ldr	r5, [pc, #480]	; (8104364 <HAL_DMA_Start_IT+0x320>)
 8104184:	692f      	ldr	r7, [r5, #16]
 8104186:	f027 0701 	bic.w	r7, r7, #1
 810418a:	612f      	str	r7, [r5, #16]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810418c:	f7ff fbc8 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104190:	692b      	ldr	r3, [r5, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8104192:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104194:	f023 031e 	bic.w	r3, r3, #30
 8104198:	f043 0316 	orr.w	r3, r3, #22
 810419c:	612b      	str	r3, [r5, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 810419e:	b11a      	cbz	r2, 81041a8 <HAL_DMA_Start_IT+0x164>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81041a0:	692b      	ldr	r3, [r5, #16]
 81041a2:	f043 0308 	orr.w	r3, r3, #8
 81041a6:	612b      	str	r3, [r5, #16]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81041a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 81041aa:	681a      	ldr	r2, [r3, #0]
 81041ac:	03d2      	lsls	r2, r2, #15
 81041ae:	d503      	bpl.n	81041b8 <HAL_DMA_Start_IT+0x174>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81041b0:	681a      	ldr	r2, [r3, #0]
 81041b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81041b6:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 81041b8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 81041ba:	b11b      	cbz	r3, 81041c4 <HAL_DMA_Start_IT+0x180>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81041bc:	681a      	ldr	r2, [r3, #0]
 81041be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81041c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 81041c4:	4b68      	ldr	r3, [pc, #416]	; (8104368 <HAL_DMA_Start_IT+0x324>)
 81041c6:	429e      	cmp	r6, r3
 81041c8:	d0d4      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041ca:	3318      	adds	r3, #24
 81041cc:	429e      	cmp	r6, r3
 81041ce:	d0d1      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041d0:	3318      	adds	r3, #24
 81041d2:	429e      	cmp	r6, r3
 81041d4:	d0ce      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041d6:	3318      	adds	r3, #24
 81041d8:	429e      	cmp	r6, r3
 81041da:	d0cb      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041dc:	3318      	adds	r3, #24
 81041de:	429e      	cmp	r6, r3
 81041e0:	d0c8      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041e2:	3318      	adds	r3, #24
 81041e4:	429e      	cmp	r6, r3
 81041e6:	d0c5      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041e8:	3318      	adds	r3, #24
 81041ea:	429e      	cmp	r6, r3
 81041ec:	d0c2      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041ee:	3318      	adds	r3, #24
 81041f0:	429e      	cmp	r6, r3
 81041f2:	d0bf      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81041f8:	429e      	cmp	r6, r3
 81041fa:	d0bb      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 81041fc:	3318      	adds	r3, #24
 81041fe:	429e      	cmp	r6, r3
 8104200:	d0b8      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 8104202:	3318      	adds	r3, #24
 8104204:	429e      	cmp	r6, r3
 8104206:	d0b5      	beq.n	8104174 <HAL_DMA_Start_IT+0x130>
 8104208:	e7b4      	b.n	8104174 <HAL_DMA_Start_IT+0x130>
    return HAL_ERROR;
 810420a:	2001      	movs	r0, #1
}
 810420c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 810420e:	2002      	movs	r0, #2
}
 8104210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_DMA_DISABLE(hdma);
 8104214:	4d53      	ldr	r5, [pc, #332]	; (8104364 <HAL_DMA_Start_IT+0x320>)
 8104216:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8104218:	f027 0701 	bic.w	r7, r7, #1
 810421c:	62af      	str	r7, [r5, #40]	; 0x28
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810421e:	f7ff fb7f 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104222:	6aab      	ldr	r3, [r5, #40]	; 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8104224:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104226:	f023 031e 	bic.w	r3, r3, #30
 810422a:	f043 0316 	orr.w	r3, r3, #22
 810422e:	62ab      	str	r3, [r5, #40]	; 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8104230:	2a00      	cmp	r2, #0
 8104232:	d0b9      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8104234:	6833      	ldr	r3, [r6, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104236:	4a4d      	ldr	r2, [pc, #308]	; (810436c <HAL_DMA_Start_IT+0x328>)
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8104238:	f043 0308 	orr.w	r3, r3, #8
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810423c:	4296      	cmp	r6, r2
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810423e:	6033      	str	r3, [r6, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104240:	d0b2      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104242:	4b4b      	ldr	r3, [pc, #300]	; (8104370 <HAL_DMA_Start_IT+0x32c>)
 8104244:	429e      	cmp	r6, r3
 8104246:	d0af      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104248:	3318      	adds	r3, #24
 810424a:	429e      	cmp	r6, r3
 810424c:	d0ac      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810424e:	3318      	adds	r3, #24
 8104250:	429e      	cmp	r6, r3
 8104252:	d0a9      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104254:	3318      	adds	r3, #24
 8104256:	429e      	cmp	r6, r3
 8104258:	d0a6      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810425a:	3318      	adds	r3, #24
 810425c:	429e      	cmp	r6, r3
 810425e:	d0a3      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104260:	4b44      	ldr	r3, [pc, #272]	; (8104374 <HAL_DMA_Start_IT+0x330>)
 8104262:	429e      	cmp	r6, r3
 8104264:	d0a0      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104266:	f503 7356 	add.w	r3, r3, #856	; 0x358
 810426a:	429e      	cmp	r6, r3
 810426c:	d09c      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810426e:	3318      	adds	r3, #24
 8104270:	429e      	cmp	r6, r3
 8104272:	d099      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104274:	3318      	adds	r3, #24
 8104276:	429e      	cmp	r6, r3
 8104278:	d096      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810427a:	3318      	adds	r3, #24
 810427c:	429e      	cmp	r6, r3
 810427e:	d093      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104280:	3318      	adds	r3, #24
 8104282:	429e      	cmp	r6, r3
 8104284:	d090      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104286:	3318      	adds	r3, #24
 8104288:	429e      	cmp	r6, r3
 810428a:	d08d      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 810428c:	3318      	adds	r3, #24
 810428e:	429e      	cmp	r6, r3
 8104290:	d08a      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104292:	3318      	adds	r3, #24
 8104294:	429e      	cmp	r6, r3
 8104296:	d087      	beq.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104298:	e754      	b.n	8104144 <HAL_DMA_Start_IT+0x100>
    __HAL_DMA_DISABLE(hdma);
 810429a:	4d32      	ldr	r5, [pc, #200]	; (8104364 <HAL_DMA_Start_IT+0x320>)
 810429c:	6f2f      	ldr	r7, [r5, #112]	; 0x70
 810429e:	f027 0701 	bic.w	r7, r7, #1
 81042a2:	672f      	str	r7, [r5, #112]	; 0x70
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81042a4:	f7ff fb3c 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81042a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 81042aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81042ac:	f023 031e 	bic.w	r3, r3, #30
 81042b0:	f043 0316 	orr.w	r3, r3, #22
 81042b4:	672b      	str	r3, [r5, #112]	; 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 81042b6:	2a00      	cmp	r2, #0
 81042b8:	d1bc      	bne.n	8104234 <HAL_DMA_Start_IT+0x1f0>
 81042ba:	e775      	b.n	81041a8 <HAL_DMA_Start_IT+0x164>
    __HAL_DMA_DISABLE(hdma);
 81042bc:	4d29      	ldr	r5, [pc, #164]	; (8104364 <HAL_DMA_Start_IT+0x320>)
 81042be:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 81042c0:	f027 0701 	bic.w	r7, r7, #1
 81042c4:	642f      	str	r7, [r5, #64]	; 0x40
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81042c6:	f7ff fb2b 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81042ca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 81042cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81042ce:	f023 031e 	bic.w	r3, r3, #30
 81042d2:	f043 0316 	orr.w	r3, r3, #22
 81042d6:	642b      	str	r3, [r5, #64]	; 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 81042d8:	2a00      	cmp	r2, #0
 81042da:	d1ab      	bne.n	8104234 <HAL_DMA_Start_IT+0x1f0>
 81042dc:	e764      	b.n	81041a8 <HAL_DMA_Start_IT+0x164>
    __HAL_DMA_DISABLE(hdma);
 81042de:	4d21      	ldr	r5, [pc, #132]	; (8104364 <HAL_DMA_Start_IT+0x320>)
 81042e0:	6daf      	ldr	r7, [r5, #88]	; 0x58
 81042e2:	f027 0701 	bic.w	r7, r7, #1
 81042e6:	65af      	str	r7, [r5, #88]	; 0x58
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81042e8:	f7ff fb1a 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81042ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 81042ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81042f0:	f023 031e 	bic.w	r3, r3, #30
 81042f4:	f043 0316 	orr.w	r3, r3, #22
 81042f8:	65ab      	str	r3, [r5, #88]	; 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 81042fa:	2a00      	cmp	r2, #0
 81042fc:	d19a      	bne.n	8104234 <HAL_DMA_Start_IT+0x1f0>
 81042fe:	e753      	b.n	81041a8 <HAL_DMA_Start_IT+0x164>
    __HAL_DMA_DISABLE(hdma);
 8104300:	4d18      	ldr	r5, [pc, #96]	; (8104364 <HAL_DMA_Start_IT+0x320>)
 8104302:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 8104306:	f027 0701 	bic.w	r7, r7, #1
 810430a:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810430e:	f7ff fb07 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104312:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8104316:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104318:	f023 031e 	bic.w	r3, r3, #30
 810431c:	f043 0316 	orr.w	r3, r3, #22
 8104320:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8104324:	2a00      	cmp	r2, #0
 8104326:	d185      	bne.n	8104234 <HAL_DMA_Start_IT+0x1f0>
 8104328:	e73e      	b.n	81041a8 <HAL_DMA_Start_IT+0x164>
    __HAL_DMA_DISABLE(hdma);
 810432a:	4d0e      	ldr	r5, [pc, #56]	; (8104364 <HAL_DMA_Start_IT+0x320>)
 810432c:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 8104330:	f027 0701 	bic.w	r7, r7, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104334:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 8104336:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810433a:	f7ff faf1 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810433e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8104342:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104344:	f023 031e 	bic.w	r3, r3, #30
 8104348:	f043 0316 	orr.w	r3, r3, #22
 810434c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8104350:	2a00      	cmp	r2, #0
 8104352:	f47f af6f 	bne.w	8104234 <HAL_DMA_Start_IT+0x1f0>
 8104356:	e727      	b.n	81041a8 <HAL_DMA_Start_IT+0x164>
 8104358:	400200a0 	.word	0x400200a0
 810435c:	58025408 	.word	0x58025408
 8104360:	5802541c 	.word	0x5802541c
 8104364:	40020000 	.word	0x40020000
 8104368:	40020010 	.word	0x40020010
 810436c:	40020028 	.word	0x40020028
 8104370:	40020040 	.word	0x40020040
 8104374:	400200b8 	.word	0x400200b8
    __HAL_DMA_DISABLE(hdma);
 8104378:	4f2d      	ldr	r7, [pc, #180]	; (8104430 <HAL_DMA_Start_IT+0x3ec>)
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810437a:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 810437c:	f8d7 50b8 	ldr.w	r5, [r7, #184]	; 0xb8
 8104380:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104384:	4620      	mov	r0, r4
    __HAL_DMA_DISABLE(hdma);
 8104386:	f8c7 50b8 	str.w	r5, [r7, #184]	; 0xb8
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810438a:	f7ff fac9 	bl	8103920 <DMA_SetConfig>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810438e:	6833      	ldr	r3, [r6, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8104390:	6c22      	ldr	r2, [r4, #64]	; 0x40
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8104392:	f023 031e 	bic.w	r3, r3, #30
 8104396:	f043 0316 	orr.w	r3, r3, #22
 810439a:	6033      	str	r3, [r6, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 810439c:	2a00      	cmp	r2, #0
 810439e:	f47f af49 	bne.w	8104234 <HAL_DMA_Start_IT+0x1f0>
 81043a2:	e75d      	b.n	8104260 <HAL_DMA_Start_IT+0x21c>
    __HAL_DMA_DISABLE(hdma);
 81043a4:	4f23      	ldr	r7, [pc, #140]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 81043a6:	693d      	ldr	r5, [r7, #16]
 81043a8:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043ac:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 81043ae:	613d      	str	r5, [r7, #16]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043b0:	f7ff fab6 	bl	8103920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81043b4:	e7eb      	b.n	810438e <HAL_DMA_Start_IT+0x34a>
    __HAL_DMA_DISABLE(hdma);
 81043b6:	4f1f      	ldr	r7, [pc, #124]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 81043b8:	6abd      	ldr	r5, [r7, #40]	; 0x28
 81043ba:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043be:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 81043c0:	62bd      	str	r5, [r7, #40]	; 0x28
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043c2:	f7ff faad 	bl	8103920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81043c6:	e7e2      	b.n	810438e <HAL_DMA_Start_IT+0x34a>
    __HAL_DMA_DISABLE(hdma);
 81043c8:	4f1a      	ldr	r7, [pc, #104]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 81043ca:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 81043cc:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043d0:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 81043d2:	643d      	str	r5, [r7, #64]	; 0x40
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043d4:	f7ff faa4 	bl	8103920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81043d8:	e7d9      	b.n	810438e <HAL_DMA_Start_IT+0x34a>
    __HAL_DMA_DISABLE(hdma);
 81043da:	4f16      	ldr	r7, [pc, #88]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 81043dc:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 81043de:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043e2:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 81043e4:	65bd      	str	r5, [r7, #88]	; 0x58
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043e6:	f7ff fa9b 	bl	8103920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81043ea:	e7d0      	b.n	810438e <HAL_DMA_Start_IT+0x34a>
    __HAL_DMA_DISABLE(hdma);
 81043ec:	4f11      	ldr	r7, [pc, #68]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 81043ee:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 81043f0:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043f4:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 81043f6:	673d      	str	r5, [r7, #112]	; 0x70
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81043f8:	f7ff fa92 	bl	8103920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81043fc:	e7c7      	b.n	810438e <HAL_DMA_Start_IT+0x34a>
    __HAL_DMA_DISABLE(hdma);
 81043fe:	4f0d      	ldr	r7, [pc, #52]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 8104400:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8104404:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104408:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 810440a:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810440e:	f7ff fa87 	bl	8103920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104412:	e7bc      	b.n	810438e <HAL_DMA_Start_IT+0x34a>
    __HAL_DMA_DISABLE(hdma);
 8104414:	4f07      	ldr	r7, [pc, #28]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 8104416:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
 810441a:	f025 0501 	bic.w	r5, r5, #1
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 810441e:	4673      	mov	r3, lr
    __HAL_DMA_DISABLE(hdma);
 8104420:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8104424:	f7ff fa7c 	bl	8103920 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104428:	e7b1      	b.n	810438e <HAL_DMA_Start_IT+0x34a>
    __HAL_DMA_DISABLE(hdma);
 810442a:	4f02      	ldr	r7, [pc, #8]	; (8104434 <HAL_DMA_Start_IT+0x3f0>)
 810442c:	e7a6      	b.n	810437c <HAL_DMA_Start_IT+0x338>
 810442e:	bf00      	nop
 8104430:	40020000 	.word	0x40020000
 8104434:	40020400 	.word	0x40020400

08104438 <HAL_DMA_Abort>:
{
 8104438:	b570      	push	{r4, r5, r6, lr}
 810443a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 810443c:	f7fe fd14 	bl	8102e68 <HAL_GetTick>
  if(hdma == NULL)
 8104440:	2c00      	cmp	r4, #0
 8104442:	f000 8102 	beq.w	810464a <HAL_DMA_Abort+0x212>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104446:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 810444a:	2b02      	cmp	r3, #2
 810444c:	d165      	bne.n	810451a <HAL_DMA_Abort+0xe2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810444e:	6826      	ldr	r6, [r4, #0]
 8104450:	4ba7      	ldr	r3, [pc, #668]	; (81046f0 <HAL_DMA_Abort+0x2b8>)
 8104452:	429e      	cmp	r6, r3
 8104454:	4605      	mov	r5, r0
 8104456:	f000 80fa 	beq.w	810464e <HAL_DMA_Abort+0x216>
 810445a:	3318      	adds	r3, #24
 810445c:	429e      	cmp	r6, r3
 810445e:	f000 8105 	beq.w	810466c <HAL_DMA_Abort+0x234>
 8104462:	3318      	adds	r3, #24
 8104464:	429e      	cmp	r6, r3
 8104466:	d05f      	beq.n	8104528 <HAL_DMA_Abort+0xf0>
 8104468:	3318      	adds	r3, #24
 810446a:	429e      	cmp	r6, r3
 810446c:	f000 8120 	beq.w	81046b0 <HAL_DMA_Abort+0x278>
 8104470:	3318      	adds	r3, #24
 8104472:	429e      	cmp	r6, r3
 8104474:	f000 812b 	beq.w	81046ce <HAL_DMA_Abort+0x296>
 8104478:	3318      	adds	r3, #24
 810447a:	429e      	cmp	r6, r3
 810447c:	f000 8105 	beq.w	810468a <HAL_DMA_Abort+0x252>
 8104480:	3318      	adds	r3, #24
 8104482:	429e      	cmp	r6, r3
 8104484:	f000 813c 	beq.w	8104700 <HAL_DMA_Abort+0x2c8>
 8104488:	3318      	adds	r3, #24
 810448a:	429e      	cmp	r6, r3
 810448c:	f000 814b 	beq.w	8104726 <HAL_DMA_Abort+0x2ee>
 8104490:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8104494:	429e      	cmp	r6, r3
 8104496:	f000 8159 	beq.w	810474c <HAL_DMA_Abort+0x314>
 810449a:	3318      	adds	r3, #24
 810449c:	429e      	cmp	r6, r3
 810449e:	f000 8157 	beq.w	8104750 <HAL_DMA_Abort+0x318>
 81044a2:	3318      	adds	r3, #24
 81044a4:	429e      	cmp	r6, r3
 81044a6:	f000 8155 	beq.w	8104754 <HAL_DMA_Abort+0x31c>
 81044aa:	3318      	adds	r3, #24
 81044ac:	429e      	cmp	r6, r3
 81044ae:	f000 8153 	beq.w	8104758 <HAL_DMA_Abort+0x320>
 81044b2:	3318      	adds	r3, #24
 81044b4:	429e      	cmp	r6, r3
 81044b6:	f000 8151 	beq.w	810475c <HAL_DMA_Abort+0x324>
 81044ba:	3318      	adds	r3, #24
 81044bc:	429e      	cmp	r6, r3
 81044be:	f000 814f 	beq.w	8104760 <HAL_DMA_Abort+0x328>
 81044c2:	3318      	adds	r3, #24
 81044c4:	429e      	cmp	r6, r3
 81044c6:	f000 814f 	beq.w	8104768 <HAL_DMA_Abort+0x330>
 81044ca:	3318      	adds	r3, #24
 81044cc:	429e      	cmp	r6, r3
 81044ce:	f000 8149 	beq.w	8104764 <HAL_DMA_Abort+0x32c>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81044d2:	6833      	ldr	r3, [r6, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81044d4:	4a87      	ldr	r2, [pc, #540]	; (81046f4 <HAL_DMA_Abort+0x2bc>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81044d6:	f023 030e 	bic.w	r3, r3, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81044da:	4296      	cmp	r6, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81044dc:	6033      	str	r3, [r6, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81044de:	f000 80ce 	beq.w	810467e <HAL_DMA_Abort+0x246>
 81044e2:	4b85      	ldr	r3, [pc, #532]	; (81046f8 <HAL_DMA_Abort+0x2c0>)
 81044e4:	429e      	cmp	r6, r3
 81044e6:	f000 80ca 	beq.w	810467e <HAL_DMA_Abort+0x246>
 81044ea:	3314      	adds	r3, #20
 81044ec:	429e      	cmp	r6, r3
 81044ee:	f000 80c6 	beq.w	810467e <HAL_DMA_Abort+0x246>
 81044f2:	3314      	adds	r3, #20
 81044f4:	429e      	cmp	r6, r3
 81044f6:	f000 80c2 	beq.w	810467e <HAL_DMA_Abort+0x246>
 81044fa:	3314      	adds	r3, #20
 81044fc:	429e      	cmp	r6, r3
 81044fe:	f000 80be 	beq.w	810467e <HAL_DMA_Abort+0x246>
 8104502:	3314      	adds	r3, #20
 8104504:	429e      	cmp	r6, r3
 8104506:	f000 80ba 	beq.w	810467e <HAL_DMA_Abort+0x246>
 810450a:	3314      	adds	r3, #20
 810450c:	429e      	cmp	r6, r3
 810450e:	f000 80b6 	beq.w	810467e <HAL_DMA_Abort+0x246>
 8104512:	3314      	adds	r3, #20
 8104514:	429e      	cmp	r6, r3
 8104516:	d115      	bne.n	8104544 <HAL_DMA_Abort+0x10c>
 8104518:	e0b1      	b.n	810467e <HAL_DMA_Abort+0x246>
    __HAL_UNLOCK(hdma);
 810451a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810451c:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 810451e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104522:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8104524:	2001      	movs	r0, #1
}
 8104526:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104528:	4b74      	ldr	r3, [pc, #464]	; (81046fc <HAL_DMA_Abort+0x2c4>)
 810452a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810452c:	f022 021e 	bic.w	r2, r2, #30
 8104530:	641a      	str	r2, [r3, #64]	; 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104538:	655a      	str	r2, [r3, #84]	; 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810453a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 810453c:	6813      	ldr	r3, [r2, #0]
 810453e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104542:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8104544:	6833      	ldr	r3, [r6, #0]
 8104546:	f023 0301 	bic.w	r3, r3, #1
 810454a:	6033      	str	r3, [r6, #0]
 810454c:	e004      	b.n	8104558 <HAL_DMA_Abort+0x120>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810454e:	f7fe fc8b 	bl	8102e68 <HAL_GetTick>
 8104552:	1b43      	subs	r3, r0, r5
 8104554:	2b05      	cmp	r3, #5
 8104556:	d86e      	bhi.n	8104636 <HAL_DMA_Abort+0x1fe>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104558:	6833      	ldr	r3, [r6, #0]
 810455a:	07db      	lsls	r3, r3, #31
 810455c:	d4f7      	bmi.n	810454e <HAL_DMA_Abort+0x116>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810455e:	6823      	ldr	r3, [r4, #0]
 8104560:	4a63      	ldr	r2, [pc, #396]	; (81046f0 <HAL_DMA_Abort+0x2b8>)
 8104562:	4293      	cmp	r3, r2
 8104564:	d04d      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 8104566:	3218      	adds	r2, #24
 8104568:	4293      	cmp	r3, r2
 810456a:	d04a      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 810456c:	3218      	adds	r2, #24
 810456e:	4293      	cmp	r3, r2
 8104570:	d047      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 8104572:	3218      	adds	r2, #24
 8104574:	4293      	cmp	r3, r2
 8104576:	d044      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 8104578:	3218      	adds	r2, #24
 810457a:	4293      	cmp	r3, r2
 810457c:	d041      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 810457e:	3218      	adds	r2, #24
 8104580:	4293      	cmp	r3, r2
 8104582:	d03e      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 8104584:	3218      	adds	r2, #24
 8104586:	4293      	cmp	r3, r2
 8104588:	d03b      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 810458a:	3218      	adds	r2, #24
 810458c:	4293      	cmp	r3, r2
 810458e:	d038      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 8104590:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8104594:	4293      	cmp	r3, r2
 8104596:	d034      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 8104598:	3218      	adds	r2, #24
 810459a:	4293      	cmp	r3, r2
 810459c:	d031      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 810459e:	3218      	adds	r2, #24
 81045a0:	4293      	cmp	r3, r2
 81045a2:	d02e      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 81045a4:	3218      	adds	r2, #24
 81045a6:	4293      	cmp	r3, r2
 81045a8:	d02b      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 81045aa:	3218      	adds	r2, #24
 81045ac:	4293      	cmp	r3, r2
 81045ae:	d028      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 81045b0:	3218      	adds	r2, #24
 81045b2:	4293      	cmp	r3, r2
 81045b4:	d025      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 81045b6:	3218      	adds	r2, #24
 81045b8:	4293      	cmp	r3, r2
 81045ba:	d022      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
 81045bc:	3218      	adds	r2, #24
 81045be:	4293      	cmp	r3, r2
 81045c0:	d01f      	beq.n	8104602 <HAL_DMA_Abort+0x1ca>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81045c2:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81045c6:	f002 011f 	and.w	r1, r2, #31
 81045ca:	2201      	movs	r2, #1
 81045cc:	408a      	lsls	r2, r1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81045ce:	4949      	ldr	r1, [pc, #292]	; (81046f4 <HAL_DMA_Abort+0x2bc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81045d0:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81045d2:	428b      	cmp	r3, r1
 81045d4:	d01c      	beq.n	8104610 <HAL_DMA_Abort+0x1d8>
 81045d6:	4a48      	ldr	r2, [pc, #288]	; (81046f8 <HAL_DMA_Abort+0x2c0>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d019      	beq.n	8104610 <HAL_DMA_Abort+0x1d8>
 81045dc:	3214      	adds	r2, #20
 81045de:	4293      	cmp	r3, r2
 81045e0:	d016      	beq.n	8104610 <HAL_DMA_Abort+0x1d8>
 81045e2:	3214      	adds	r2, #20
 81045e4:	4293      	cmp	r3, r2
 81045e6:	d013      	beq.n	8104610 <HAL_DMA_Abort+0x1d8>
 81045e8:	3214      	adds	r2, #20
 81045ea:	4293      	cmp	r3, r2
 81045ec:	d010      	beq.n	8104610 <HAL_DMA_Abort+0x1d8>
 81045ee:	3214      	adds	r2, #20
 81045f0:	4293      	cmp	r3, r2
 81045f2:	d00d      	beq.n	8104610 <HAL_DMA_Abort+0x1d8>
 81045f4:	3214      	adds	r2, #20
 81045f6:	4293      	cmp	r3, r2
 81045f8:	d00a      	beq.n	8104610 <HAL_DMA_Abort+0x1d8>
 81045fa:	3214      	adds	r2, #20
 81045fc:	4293      	cmp	r3, r2
 81045fe:	d113      	bne.n	8104628 <HAL_DMA_Abort+0x1f0>
 8104600:	e006      	b.n	8104610 <HAL_DMA_Abort+0x1d8>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104602:	e9d4 1316 	ldrd	r1, r3, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104606:	f003 021f 	and.w	r2, r3, #31
 810460a:	233f      	movs	r3, #63	; 0x3f
 810460c:	4093      	lsls	r3, r2
 810460e:	608b      	str	r3, [r1, #8]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104610:	e9d4 131a 	ldrd	r1, r3, [r4, #104]	; 0x68
 8104614:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8104616:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8104618:	b133      	cbz	r3, 8104628 <HAL_DMA_Abort+0x1f0>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810461a:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810461c:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104624:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104626:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8104628:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 810462a:	2301      	movs	r3, #1
 810462c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8104630:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8104634:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104636:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8104638:	2303      	movs	r3, #3
        __HAL_UNLOCK(hdma);
 810463a:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810463c:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 810463e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8104642:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8104646:	2001      	movs	r0, #1
}
 8104648:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 810464a:	2001      	movs	r0, #1
}
 810464c:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810464e:	4b2b      	ldr	r3, [pc, #172]	; (81046fc <HAL_DMA_Abort+0x2c4>)
 8104650:	691a      	ldr	r2, [r3, #16]
 8104652:	f022 021e 	bic.w	r2, r2, #30
 8104656:	611a      	str	r2, [r3, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810465a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810465e:	625a      	str	r2, [r3, #36]	; 0x24
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104660:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8104662:	6813      	ldr	r3, [r2, #0]
 8104664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104668:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 810466a:	e76b      	b.n	8104544 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810466c:	4b23      	ldr	r3, [pc, #140]	; (81046fc <HAL_DMA_Abort+0x2c4>)
 810466e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8104670:	f022 021e 	bic.w	r2, r2, #30
 8104674:	629a      	str	r2, [r3, #40]	; 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8104678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810467c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810467e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8104680:	6813      	ldr	r3, [r2, #0]
 8104682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104686:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8104688:	e75c      	b.n	8104544 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810468a:	4b1c      	ldr	r3, [pc, #112]	; (81046fc <HAL_DMA_Abort+0x2c4>)
 810468c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8104690:	f022 021e 	bic.w	r2, r2, #30
 8104694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104698:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 810469c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81046a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81046a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 81046a6:	6813      	ldr	r3, [r2, #0]
 81046a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81046ac:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 81046ae:	e749      	b.n	8104544 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81046b0:	4b12      	ldr	r3, [pc, #72]	; (81046fc <HAL_DMA_Abort+0x2c4>)
 81046b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81046b4:	f022 021e 	bic.w	r2, r2, #30
 81046b8:	659a      	str	r2, [r3, #88]	; 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81046ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81046bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81046c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81046c2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 81046c4:	6813      	ldr	r3, [r2, #0]
 81046c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81046ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 81046cc:	e73a      	b.n	8104544 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81046ce:	4b0b      	ldr	r3, [pc, #44]	; (81046fc <HAL_DMA_Abort+0x2c4>)
 81046d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81046d2:	f022 021e 	bic.w	r2, r2, #30
 81046d6:	671a      	str	r2, [r3, #112]	; 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81046d8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 81046dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81046e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81046e4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 81046e6:	6813      	ldr	r3, [r2, #0]
 81046e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81046ec:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 81046ee:	e729      	b.n	8104544 <HAL_DMA_Abort+0x10c>
 81046f0:	40020010 	.word	0x40020010
 81046f4:	58025408 	.word	0x58025408
 81046f8:	5802541c 	.word	0x5802541c
 81046fc:	40020000 	.word	0x40020000
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104700:	4b1a      	ldr	r3, [pc, #104]	; (810476c <HAL_DMA_Abort+0x334>)
 8104702:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8104706:	f022 021e 	bic.w	r2, r2, #30
 810470a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810470e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8104712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104716:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810471a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 810471c:	6813      	ldr	r3, [r2, #0]
 810471e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104722:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8104724:	e70e      	b.n	8104544 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8104726:	4b11      	ldr	r3, [pc, #68]	; (810476c <HAL_DMA_Abort+0x334>)
 8104728:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 810472c:	f022 021e 	bic.w	r2, r2, #30
 8104730:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104734:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8104738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810473c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104740:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8104742:	6813      	ldr	r3, [r2, #0]
 8104744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104748:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 810474a:	e6fb      	b.n	8104544 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 810474c:	4b08      	ldr	r3, [pc, #32]	; (8104770 <HAL_DMA_Abort+0x338>)
 810474e:	e77f      	b.n	8104650 <HAL_DMA_Abort+0x218>
 8104750:	4b07      	ldr	r3, [pc, #28]	; (8104770 <HAL_DMA_Abort+0x338>)
 8104752:	e78c      	b.n	810466e <HAL_DMA_Abort+0x236>
 8104754:	4b06      	ldr	r3, [pc, #24]	; (8104770 <HAL_DMA_Abort+0x338>)
 8104756:	e6e8      	b.n	810452a <HAL_DMA_Abort+0xf2>
 8104758:	4b05      	ldr	r3, [pc, #20]	; (8104770 <HAL_DMA_Abort+0x338>)
 810475a:	e7aa      	b.n	81046b2 <HAL_DMA_Abort+0x27a>
 810475c:	4b04      	ldr	r3, [pc, #16]	; (8104770 <HAL_DMA_Abort+0x338>)
 810475e:	e7b7      	b.n	81046d0 <HAL_DMA_Abort+0x298>
 8104760:	4b03      	ldr	r3, [pc, #12]	; (8104770 <HAL_DMA_Abort+0x338>)
 8104762:	e793      	b.n	810468c <HAL_DMA_Abort+0x254>
 8104764:	4b02      	ldr	r3, [pc, #8]	; (8104770 <HAL_DMA_Abort+0x338>)
 8104766:	e7df      	b.n	8104728 <HAL_DMA_Abort+0x2f0>
 8104768:	4b01      	ldr	r3, [pc, #4]	; (8104770 <HAL_DMA_Abort+0x338>)
 810476a:	e7ca      	b.n	8104702 <HAL_DMA_Abort+0x2ca>
 810476c:	40020000 	.word	0x40020000
 8104770:	40020400 	.word	0x40020400

08104774 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8104774:	2800      	cmp	r0, #0
 8104776:	d06e      	beq.n	8104856 <HAL_DMA_Abort_IT+0xe2>
{
 8104778:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 810477a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 810477e:	2b02      	cmp	r3, #2
 8104780:	d15c      	bne.n	810483c <HAL_DMA_Abort_IT+0xc8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104782:	6803      	ldr	r3, [r0, #0]
 8104784:	4a43      	ldr	r2, [pc, #268]	; (8104894 <HAL_DMA_Abort_IT+0x120>)
 8104786:	4293      	cmp	r3, r2
 8104788:	d05c      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 810478a:	3218      	adds	r2, #24
 810478c:	4293      	cmp	r3, r2
 810478e:	d059      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 8104790:	3218      	adds	r2, #24
 8104792:	4293      	cmp	r3, r2
 8104794:	d056      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 8104796:	3218      	adds	r2, #24
 8104798:	4293      	cmp	r3, r2
 810479a:	d053      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 810479c:	3218      	adds	r2, #24
 810479e:	4293      	cmp	r3, r2
 81047a0:	d050      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047a2:	3218      	adds	r2, #24
 81047a4:	4293      	cmp	r3, r2
 81047a6:	d04d      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047a8:	3218      	adds	r2, #24
 81047aa:	4293      	cmp	r3, r2
 81047ac:	d04a      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047ae:	3218      	adds	r2, #24
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d047      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047b4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81047b8:	4293      	cmp	r3, r2
 81047ba:	d043      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047bc:	3218      	adds	r2, #24
 81047be:	4293      	cmp	r3, r2
 81047c0:	d040      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047c2:	3218      	adds	r2, #24
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d03d      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047c8:	3218      	adds	r2, #24
 81047ca:	4293      	cmp	r3, r2
 81047cc:	d03a      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047ce:	3218      	adds	r2, #24
 81047d0:	4293      	cmp	r3, r2
 81047d2:	d037      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047d4:	3218      	adds	r2, #24
 81047d6:	4293      	cmp	r3, r2
 81047d8:	d034      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047da:	3218      	adds	r2, #24
 81047dc:	4293      	cmp	r3, r2
 81047de:	d031      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
 81047e0:	3218      	adds	r2, #24
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d02e      	beq.n	8104844 <HAL_DMA_Abort_IT+0xd0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81047e6:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81047e8:	492b      	ldr	r1, [pc, #172]	; (8104898 <HAL_DMA_Abort_IT+0x124>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81047ea:	f022 020e 	bic.w	r2, r2, #14
 81047ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 81047f0:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81047f2:	428b      	cmp	r3, r1
      __HAL_DMA_DISABLE(hdma);
 81047f4:	f022 0201 	bic.w	r2, r2, #1
 81047f8:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81047fa:	d02e      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
 81047fc:	4a27      	ldr	r2, [pc, #156]	; (810489c <HAL_DMA_Abort_IT+0x128>)
 81047fe:	4293      	cmp	r3, r2
 8104800:	d02b      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
 8104802:	3214      	adds	r2, #20
 8104804:	4293      	cmp	r3, r2
 8104806:	d028      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
 8104808:	3214      	adds	r2, #20
 810480a:	4293      	cmp	r3, r2
 810480c:	d025      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
 810480e:	3214      	adds	r2, #20
 8104810:	4293      	cmp	r3, r2
 8104812:	d022      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
 8104814:	3214      	adds	r2, #20
 8104816:	4293      	cmp	r3, r2
 8104818:	d01f      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
 810481a:	3214      	adds	r2, #20
 810481c:	4293      	cmp	r3, r2
 810481e:	d01c      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
 8104820:	3214      	adds	r2, #20
 8104822:	4293      	cmp	r3, r2
 8104824:	d019      	beq.n	810485a <HAL_DMA_Abort_IT+0xe6>
      if(hdma->XferAbortCallback != NULL)
 8104826:	6d03      	ldr	r3, [r0, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8104828:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 810482a:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 810482c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8104830:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8104834:	b35b      	cbz	r3, 810488e <HAL_DMA_Abort_IT+0x11a>
        hdma->XferAbortCallback(hdma);
 8104836:	4798      	blx	r3
  return HAL_OK;
 8104838:	4620      	mov	r0, r4
}
 810483a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810483c:	2380      	movs	r3, #128	; 0x80
 810483e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8104840:	2001      	movs	r0, #1
}
 8104842:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8104844:	2204      	movs	r2, #4
 8104846:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 810484a:	681a      	ldr	r2, [r3, #0]
 810484c:	f022 0201 	bic.w	r2, r2, #1
  return HAL_OK;
 8104850:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8104852:	601a      	str	r2, [r3, #0]
}
 8104854:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8104856:	2001      	movs	r0, #1
}
 8104858:	4770      	bx	lr
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810485a:	e9d0 3117 	ldrd	r3, r1, [r0, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810485e:	680a      	ldr	r2, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104860:	6d85      	ldr	r5, [r0, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104866:	600a      	str	r2, [r1, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104868:	f003 031f 	and.w	r3, r3, #31
 810486c:	2201      	movs	r2, #1
 810486e:	409a      	lsls	r2, r3
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104870:	e9d0 431a 	ldrd	r4, r3, [r0, #104]	; 0x68
 8104874:	6e41      	ldr	r1, [r0, #100]	; 0x64
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104876:	606a      	str	r2, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104878:	604c      	str	r4, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 810487a:	2b00      	cmp	r3, #0
 810487c:	d0d3      	beq.n	8104826 <HAL_DMA_Abort_IT+0xb2>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810487e:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104880:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104888:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810488a:	604c      	str	r4, [r1, #4]
 810488c:	e7cb      	b.n	8104826 <HAL_DMA_Abort_IT+0xb2>
  return HAL_OK;
 810488e:	4618      	mov	r0, r3
}
 8104890:	bd38      	pop	{r3, r4, r5, pc}
 8104892:	bf00      	nop
 8104894:	40020010 	.word	0x40020010
 8104898:	58025408 	.word	0x58025408
 810489c:	5802541c 	.word	0x5802541c

081048a0 <HAL_DMA_IRQHandler>:
{
 81048a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 81048a2:	4b93      	ldr	r3, [pc, #588]	; (8104af0 <HAL_DMA_IRQHandler+0x250>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81048a4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 81048a6:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81048a8:	4b92      	ldr	r3, [pc, #584]	; (8104af4 <HAL_DMA_IRQHandler+0x254>)
{
 81048aa:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 81048ac:	2200      	movs	r2, #0
 81048ae:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81048b0:	6802      	ldr	r2, [r0, #0]
  tmpisr_dma  = regs_dma->ISR;
 81048b2:	6835      	ldr	r5, [r6, #0]
  tmpisr_bdma = regs_bdma->ISR;
 81048b4:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81048b6:	429a      	cmp	r2, r3
{
 81048b8:	4604      	mov	r4, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81048ba:	d05e      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048bc:	3318      	adds	r3, #24
 81048be:	429a      	cmp	r2, r3
 81048c0:	d05b      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048c2:	3318      	adds	r3, #24
 81048c4:	429a      	cmp	r2, r3
 81048c6:	d058      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048c8:	3318      	adds	r3, #24
 81048ca:	429a      	cmp	r2, r3
 81048cc:	d055      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048ce:	3318      	adds	r3, #24
 81048d0:	429a      	cmp	r2, r3
 81048d2:	d052      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048d4:	3318      	adds	r3, #24
 81048d6:	429a      	cmp	r2, r3
 81048d8:	d04f      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048da:	3318      	adds	r3, #24
 81048dc:	429a      	cmp	r2, r3
 81048de:	d04c      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048e0:	3318      	adds	r3, #24
 81048e2:	429a      	cmp	r2, r3
 81048e4:	d049      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048e6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81048ea:	429a      	cmp	r2, r3
 81048ec:	d045      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048ee:	3318      	adds	r3, #24
 81048f0:	429a      	cmp	r2, r3
 81048f2:	d042      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048f4:	3318      	adds	r3, #24
 81048f6:	429a      	cmp	r2, r3
 81048f8:	d03f      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 81048fa:	3318      	adds	r3, #24
 81048fc:	429a      	cmp	r2, r3
 81048fe:	d03c      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 8104900:	3318      	adds	r3, #24
 8104902:	429a      	cmp	r2, r3
 8104904:	d039      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 8104906:	3318      	adds	r3, #24
 8104908:	429a      	cmp	r2, r3
 810490a:	d036      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 810490c:	3318      	adds	r3, #24
 810490e:	429a      	cmp	r2, r3
 8104910:	d033      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
 8104912:	3318      	adds	r3, #24
 8104914:	429a      	cmp	r2, r3
 8104916:	d030      	beq.n	810497a <HAL_DMA_IRQHandler+0xda>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8104918:	4b77      	ldr	r3, [pc, #476]	; (8104af8 <HAL_DMA_IRQHandler+0x258>)
 810491a:	429a      	cmp	r2, r3
 810491c:	d014      	beq.n	8104948 <HAL_DMA_IRQHandler+0xa8>
 810491e:	4b77      	ldr	r3, [pc, #476]	; (8104afc <HAL_DMA_IRQHandler+0x25c>)
 8104920:	429a      	cmp	r2, r3
 8104922:	d011      	beq.n	8104948 <HAL_DMA_IRQHandler+0xa8>
 8104924:	3314      	adds	r3, #20
 8104926:	429a      	cmp	r2, r3
 8104928:	d00e      	beq.n	8104948 <HAL_DMA_IRQHandler+0xa8>
 810492a:	3314      	adds	r3, #20
 810492c:	429a      	cmp	r2, r3
 810492e:	d00b      	beq.n	8104948 <HAL_DMA_IRQHandler+0xa8>
 8104930:	3314      	adds	r3, #20
 8104932:	429a      	cmp	r2, r3
 8104934:	d008      	beq.n	8104948 <HAL_DMA_IRQHandler+0xa8>
 8104936:	3314      	adds	r3, #20
 8104938:	429a      	cmp	r2, r3
 810493a:	d005      	beq.n	8104948 <HAL_DMA_IRQHandler+0xa8>
 810493c:	3314      	adds	r3, #20
 810493e:	429a      	cmp	r2, r3
 8104940:	d002      	beq.n	8104948 <HAL_DMA_IRQHandler+0xa8>
 8104942:	3314      	adds	r3, #20
 8104944:	429a      	cmp	r2, r3
 8104946:	d116      	bne.n	8104976 <HAL_DMA_IRQHandler+0xd6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8104948:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810494a:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 810494c:	f000 001f 	and.w	r0, r0, #31
 8104950:	2504      	movs	r5, #4
 8104952:	4085      	lsls	r5, r0
 8104954:	420d      	tst	r5, r1
 8104956:	f000 8148 	beq.w	8104bea <HAL_DMA_IRQHandler+0x34a>
 810495a:	075f      	lsls	r7, r3, #29
 810495c:	f140 8145 	bpl.w	8104bea <HAL_DMA_IRQHandler+0x34a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104960:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8104962:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104964:	f140 816f 	bpl.w	8104c46 <HAL_DMA_IRQHandler+0x3a6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104968:	03da      	lsls	r2, r3, #15
 810496a:	f100 8172 	bmi.w	8104c52 <HAL_DMA_IRQHandler+0x3b2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 810496e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8104970:	2b00      	cmp	r3, #0
 8104972:	f040 80dd 	bne.w	8104b30 <HAL_DMA_IRQHandler+0x290>
}
 8104976:	b003      	add	sp, #12
 8104978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810497a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 810497c:	2108      	movs	r1, #8
 810497e:	f003 031f 	and.w	r3, r3, #31
 8104982:	4099      	lsls	r1, r3
 8104984:	4229      	tst	r1, r5
 8104986:	d00b      	beq.n	81049a0 <HAL_DMA_IRQHandler+0x100>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8104988:	6810      	ldr	r0, [r2, #0]
 810498a:	0740      	lsls	r0, r0, #29
 810498c:	d508      	bpl.n	81049a0 <HAL_DMA_IRQHandler+0x100>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 810498e:	6810      	ldr	r0, [r2, #0]
 8104990:	f020 0004 	bic.w	r0, r0, #4
 8104994:	6010      	str	r0, [r2, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104996:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8104998:	6d61      	ldr	r1, [r4, #84]	; 0x54
 810499a:	f041 0101 	orr.w	r1, r1, #1
 810499e:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81049a0:	fa25 f103 	lsr.w	r1, r5, r3
 81049a4:	07c8      	lsls	r0, r1, #31
 81049a6:	d509      	bpl.n	81049bc <HAL_DMA_IRQHandler+0x11c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81049a8:	6951      	ldr	r1, [r2, #20]
 81049aa:	0609      	lsls	r1, r1, #24
 81049ac:	d506      	bpl.n	81049bc <HAL_DMA_IRQHandler+0x11c>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81049ae:	2101      	movs	r1, #1
 81049b0:	4099      	lsls	r1, r3
 81049b2:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81049b4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 81049b6:	f041 0102 	orr.w	r1, r1, #2
 81049ba:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81049bc:	2104      	movs	r1, #4
 81049be:	4099      	lsls	r1, r3
 81049c0:	4229      	tst	r1, r5
 81049c2:	d007      	beq.n	81049d4 <HAL_DMA_IRQHandler+0x134>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81049c4:	6810      	ldr	r0, [r2, #0]
 81049c6:	0780      	lsls	r0, r0, #30
 81049c8:	d504      	bpl.n	81049d4 <HAL_DMA_IRQHandler+0x134>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81049ca:	60b1      	str	r1, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81049cc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 81049ce:	f041 0104 	orr.w	r1, r1, #4
 81049d2:	6561      	str	r1, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81049d4:	2110      	movs	r1, #16
 81049d6:	4099      	lsls	r1, r3
 81049d8:	4229      	tst	r1, r5
 81049da:	d015      	beq.n	8104a08 <HAL_DMA_IRQHandler+0x168>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81049dc:	6810      	ldr	r0, [r2, #0]
 81049de:	0700      	lsls	r0, r0, #28
 81049e0:	d512      	bpl.n	8104a08 <HAL_DMA_IRQHandler+0x168>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81049e2:	60b1      	str	r1, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81049e4:	6811      	ldr	r1, [r2, #0]
 81049e6:	0349      	lsls	r1, r1, #13
 81049e8:	f100 80c0 	bmi.w	8104b6c <HAL_DMA_IRQHandler+0x2cc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81049ec:	6811      	ldr	r1, [r2, #0]
 81049ee:	05c9      	lsls	r1, r1, #23
 81049f0:	d403      	bmi.n	81049fa <HAL_DMA_IRQHandler+0x15a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81049f2:	6811      	ldr	r1, [r2, #0]
 81049f4:	f021 0108 	bic.w	r1, r1, #8
 81049f8:	6011      	str	r1, [r2, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 81049fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 81049fc:	b122      	cbz	r2, 8104a08 <HAL_DMA_IRQHandler+0x168>
            hdma->XferHalfCpltCallback(hdma);
 81049fe:	4620      	mov	r0, r4
 8104a00:	4790      	blx	r2
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104a02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8104a04:	f003 031f 	and.w	r3, r3, #31
 8104a08:	2220      	movs	r2, #32
 8104a0a:	409a      	lsls	r2, r3
 8104a0c:	422a      	tst	r2, r5
 8104a0e:	d039      	beq.n	8104a84 <HAL_DMA_IRQHandler+0x1e4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104a10:	6821      	ldr	r1, [r4, #0]
 8104a12:	4838      	ldr	r0, [pc, #224]	; (8104af4 <HAL_DMA_IRQHandler+0x254>)
 8104a14:	4281      	cmp	r1, r0
 8104a16:	f000 8090 	beq.w	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a1a:	3018      	adds	r0, #24
 8104a1c:	4281      	cmp	r1, r0
 8104a1e:	f000 808c 	beq.w	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a22:	3018      	adds	r0, #24
 8104a24:	4281      	cmp	r1, r0
 8104a26:	f000 8088 	beq.w	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a2a:	3018      	adds	r0, #24
 8104a2c:	4281      	cmp	r1, r0
 8104a2e:	f000 8084 	beq.w	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a32:	3018      	adds	r0, #24
 8104a34:	4281      	cmp	r1, r0
 8104a36:	f000 8080 	beq.w	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a3a:	3018      	adds	r0, #24
 8104a3c:	4281      	cmp	r1, r0
 8104a3e:	d07c      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a40:	3018      	adds	r0, #24
 8104a42:	4281      	cmp	r1, r0
 8104a44:	d079      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a46:	3018      	adds	r0, #24
 8104a48:	4281      	cmp	r1, r0
 8104a4a:	d076      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a4c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8104a50:	4281      	cmp	r1, r0
 8104a52:	d072      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a54:	3018      	adds	r0, #24
 8104a56:	4281      	cmp	r1, r0
 8104a58:	d06f      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a5a:	3018      	adds	r0, #24
 8104a5c:	4281      	cmp	r1, r0
 8104a5e:	d06c      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a60:	3018      	adds	r0, #24
 8104a62:	4281      	cmp	r1, r0
 8104a64:	d069      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a66:	3018      	adds	r0, #24
 8104a68:	4281      	cmp	r1, r0
 8104a6a:	d066      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a6c:	3018      	adds	r0, #24
 8104a6e:	4281      	cmp	r1, r0
 8104a70:	d063      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a72:	3018      	adds	r0, #24
 8104a74:	4281      	cmp	r1, r0
 8104a76:	d060      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a78:	3018      	adds	r0, #24
 8104a7a:	4281      	cmp	r1, r0
 8104a7c:	d05d      	beq.n	8104b3a <HAL_DMA_IRQHandler+0x29a>
 8104a7e:	6808      	ldr	r0, [r1, #0]
 8104a80:	0780      	lsls	r0, r0, #30
 8104a82:	d45d      	bmi.n	8104b40 <HAL_DMA_IRQHandler+0x2a0>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104a84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	f43f af75 	beq.w	8104976 <HAL_DMA_IRQHandler+0xd6>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8104a8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8104a8e:	07dd      	lsls	r5, r3, #31
 8104a90:	d54a      	bpl.n	8104b28 <HAL_DMA_IRQHandler+0x288>
        __HAL_DMA_DISABLE(hdma);
 8104a92:	6821      	ldr	r1, [r4, #0]
 8104a94:	4b17      	ldr	r3, [pc, #92]	; (8104af4 <HAL_DMA_IRQHandler+0x254>)
        hdma->State = HAL_DMA_STATE_ABORT;
 8104a96:	2204      	movs	r2, #4
        __HAL_DMA_DISABLE(hdma);
 8104a98:	4299      	cmp	r1, r3
        hdma->State = HAL_DMA_STATE_ABORT;
 8104a9a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8104a9e:	d01e      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104aa0:	3318      	adds	r3, #24
 8104aa2:	4299      	cmp	r1, r3
 8104aa4:	d01b      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104aa6:	3318      	adds	r3, #24
 8104aa8:	4299      	cmp	r1, r3
 8104aaa:	d018      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104aac:	3318      	adds	r3, #24
 8104aae:	4299      	cmp	r1, r3
 8104ab0:	d015      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104ab2:	3318      	adds	r3, #24
 8104ab4:	4299      	cmp	r1, r3
 8104ab6:	d012      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104ab8:	3318      	adds	r3, #24
 8104aba:	4299      	cmp	r1, r3
 8104abc:	d00f      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104abe:	3318      	adds	r3, #24
 8104ac0:	4299      	cmp	r1, r3
 8104ac2:	d00c      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104ac4:	3318      	adds	r3, #24
 8104ac6:	4299      	cmp	r1, r3
 8104ac8:	d009      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104aca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8104ace:	4299      	cmp	r1, r3
 8104ad0:	d005      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104ad2:	3318      	adds	r3, #24
 8104ad4:	4299      	cmp	r1, r3
 8104ad6:	d002      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104ad8:	3318      	adds	r3, #24
 8104ada:	4299      	cmp	r1, r3
 8104adc:	d0ff      	beq.n	8104ade <HAL_DMA_IRQHandler+0x23e>
 8104ade:	680b      	ldr	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104ae0:	4a07      	ldr	r2, [pc, #28]	; (8104b00 <HAL_DMA_IRQHandler+0x260>)
        __HAL_DMA_DISABLE(hdma);
 8104ae2:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8104ae6:	fba2 7207 	umull	r7, r2, r2, r7
        __HAL_DMA_DISABLE(hdma);
 8104aea:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104aec:	0a92      	lsrs	r2, r2, #10
 8104aee:	e00c      	b.n	8104b0a <HAL_DMA_IRQHandler+0x26a>
 8104af0:	1000004c 	.word	0x1000004c
 8104af4:	40020010 	.word	0x40020010
 8104af8:	58025408 	.word	0x58025408
 8104afc:	5802541c 	.word	0x5802541c
 8104b00:	1b4e81b5 	.word	0x1b4e81b5
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8104b04:	680b      	ldr	r3, [r1, #0]
 8104b06:	07d8      	lsls	r0, r3, #31
 8104b08:	d504      	bpl.n	8104b14 <HAL_DMA_IRQHandler+0x274>
          if (++count > timeout)
 8104b0a:	9b01      	ldr	r3, [sp, #4]
 8104b0c:	3301      	adds	r3, #1
 8104b0e:	4293      	cmp	r3, r2
 8104b10:	9301      	str	r3, [sp, #4]
 8104b12:	d9f7      	bls.n	8104b04 <HAL_DMA_IRQHandler+0x264>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104b14:	680b      	ldr	r3, [r1, #0]
 8104b16:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8104b18:	bf4c      	ite	mi
 8104b1a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8104b1c:	2301      	movpl	r3, #1
 8104b1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8104b22:	2300      	movs	r3, #0
 8104b24:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8104b28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8104b2a:	2b00      	cmp	r3, #0
 8104b2c:	f43f af23 	beq.w	8104976 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferCpltCallback(hdma);
 8104b30:	4620      	mov	r0, r4
}
 8104b32:	b003      	add	sp, #12
 8104b34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8104b38:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104b3a:	6808      	ldr	r0, [r1, #0]
 8104b3c:	06c5      	lsls	r5, r0, #27
 8104b3e:	d5a1      	bpl.n	8104a84 <HAL_DMA_IRQHandler+0x1e4>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104b40:	60b2      	str	r2, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8104b42:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8104b46:	2a04      	cmp	r2, #4
 8104b48:	d019      	beq.n	8104b7e <HAL_DMA_IRQHandler+0x2de>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104b4a:	680b      	ldr	r3, [r1, #0]
 8104b4c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104b50:	680b      	ldr	r3, [r1, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104b52:	d035      	beq.n	8104bc0 <HAL_DMA_IRQHandler+0x320>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104b54:	031e      	lsls	r6, r3, #12
 8104b56:	d540      	bpl.n	8104bda <HAL_DMA_IRQHandler+0x33a>
          if(hdma->XferCpltCallback != NULL)
 8104b58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8104b5a:	2b00      	cmp	r3, #0
 8104b5c:	d092      	beq.n	8104a84 <HAL_DMA_IRQHandler+0x1e4>
            hdma->XferCpltCallback(hdma);
 8104b5e:	4620      	mov	r0, r4
 8104b60:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104b62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8104b64:	2b00      	cmp	r3, #0
 8104b66:	f43f af06 	beq.w	8104976 <HAL_DMA_IRQHandler+0xd6>
 8104b6a:	e78f      	b.n	8104a8c <HAL_DMA_IRQHandler+0x1ec>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104b6c:	6812      	ldr	r2, [r2, #0]
 8104b6e:	0310      	lsls	r0, r2, #12
 8104b70:	f57f af43 	bpl.w	81049fa <HAL_DMA_IRQHandler+0x15a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8104b74:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8104b76:	2a00      	cmp	r2, #0
 8104b78:	f47f af41 	bne.w	81049fe <HAL_DMA_IRQHandler+0x15e>
 8104b7c:	e744      	b.n	8104a08 <HAL_DMA_IRQHandler+0x168>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104b7e:	680a      	ldr	r2, [r1, #0]
 8104b80:	f022 0216 	bic.w	r2, r2, #22
 8104b84:	600a      	str	r2, [r1, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104b86:	694a      	ldr	r2, [r1, #20]
 8104b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104b8c:	614a      	str	r2, [r1, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8104b8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8104b90:	b33a      	cbz	r2, 8104be2 <HAL_DMA_IRQHandler+0x342>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104b92:	680a      	ldr	r2, [r1, #0]
 8104b94:	f022 0208 	bic.w	r2, r2, #8
 8104b98:	600a      	str	r2, [r1, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104b9a:	223f      	movs	r2, #63	; 0x3f
 8104b9c:	fa02 f303 	lsl.w	r3, r2, r3
          if(hdma->XferAbortCallback != NULL)
 8104ba0:	6d21      	ldr	r1, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104ba2:	60b3      	str	r3, [r6, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8104ba4:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8104ba6:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8104ba8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8104bac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8104bb0:	2900      	cmp	r1, #0
 8104bb2:	f43f aee0 	beq.w	8104976 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferAbortCallback(hdma);
 8104bb6:	4620      	mov	r0, r4
}
 8104bb8:	b003      	add	sp, #12
 8104bba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            hdma->XferAbortCallback(hdma);
 8104bbe:	4708      	bx	r1
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104bc0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8104bc4:	d1c8      	bne.n	8104b58 <HAL_DMA_IRQHandler+0x2b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104bc6:	680a      	ldr	r2, [r1, #0]
 8104bc8:	f022 0210 	bic.w	r2, r2, #16
 8104bcc:	600a      	str	r2, [r1, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8104bce:	2201      	movs	r2, #1
 8104bd0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8104bd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8104bd8:	e7be      	b.n	8104b58 <HAL_DMA_IRQHandler+0x2b8>
            if(hdma->XferM1CpltCallback != NULL)
 8104bda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8104bdc:	2b00      	cmp	r3, #0
 8104bde:	d1be      	bne.n	8104b5e <HAL_DMA_IRQHandler+0x2be>
 8104be0:	e750      	b.n	8104a84 <HAL_DMA_IRQHandler+0x1e4>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8104be2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8104be4:	2a00      	cmp	r2, #0
 8104be6:	d1d4      	bne.n	8104b92 <HAL_DMA_IRQHandler+0x2f2>
 8104be8:	e7d7      	b.n	8104b9a <HAL_DMA_IRQHandler+0x2fa>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104bea:	2502      	movs	r5, #2
 8104bec:	4085      	lsls	r5, r0
 8104bee:	420d      	tst	r5, r1
 8104bf0:	d00a      	beq.n	8104c08 <HAL_DMA_IRQHandler+0x368>
 8104bf2:	079f      	lsls	r7, r3, #30
 8104bf4:	d508      	bpl.n	8104c08 <HAL_DMA_IRQHandler+0x368>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104bf6:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104bf8:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104bfa:	d52f      	bpl.n	8104c5c <HAL_DMA_IRQHandler+0x3bc>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104bfc:	03da      	lsls	r2, r3, #15
 8104bfe:	d439      	bmi.n	8104c74 <HAL_DMA_IRQHandler+0x3d4>
          if(hdma->XferM1CpltCallback != NULL)
 8104c00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8104c02:	2b00      	cmp	r3, #0
 8104c04:	d194      	bne.n	8104b30 <HAL_DMA_IRQHandler+0x290>
 8104c06:	e6b6      	b.n	8104976 <HAL_DMA_IRQHandler+0xd6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8104c08:	2508      	movs	r5, #8
 8104c0a:	4085      	lsls	r5, r0
 8104c0c:	420d      	tst	r5, r1
 8104c0e:	f43f aeb2 	beq.w	8104976 <HAL_DMA_IRQHandler+0xd6>
 8104c12:	071b      	lsls	r3, r3, #28
 8104c14:	f57f aeaf 	bpl.w	8104976 <HAL_DMA_IRQHandler+0xd6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104c18:	6813      	ldr	r3, [r2, #0]
 8104c1a:	f023 030e 	bic.w	r3, r3, #14
 8104c1e:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104c20:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8104c22:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104c24:	fa03 f000 	lsl.w	r0, r3, r0
      __HAL_UNLOCK(hdma);
 8104c28:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104c2a:	6070      	str	r0, [r6, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8104c2c:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8104c2e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8104c32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8104c36:	2a00      	cmp	r2, #0
 8104c38:	f43f ae9d 	beq.w	8104976 <HAL_DMA_IRQHandler+0xd6>
        hdma->XferErrorCallback(hdma);
 8104c3c:	4620      	mov	r0, r4
}
 8104c3e:	b003      	add	sp, #12
 8104c40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8104c44:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104c46:	069b      	lsls	r3, r3, #26
 8104c48:	d403      	bmi.n	8104c52 <HAL_DMA_IRQHandler+0x3b2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8104c4a:	6813      	ldr	r3, [r2, #0]
 8104c4c:	f023 0304 	bic.w	r3, r3, #4
 8104c50:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8104c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8104c54:	2b00      	cmp	r3, #0
 8104c56:	f47f af6b 	bne.w	8104b30 <HAL_DMA_IRQHandler+0x290>
 8104c5a:	e68c      	b.n	8104976 <HAL_DMA_IRQHandler+0xd6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104c5c:	f013 0320 	ands.w	r3, r3, #32
 8104c60:	d108      	bne.n	8104c74 <HAL_DMA_IRQHandler+0x3d4>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104c62:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8104c64:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104c66:	f021 010a 	bic.w	r1, r1, #10
 8104c6a:	6011      	str	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8104c6c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8104c70:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8104c74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8104c76:	2b00      	cmp	r3, #0
 8104c78:	f47f af5a 	bne.w	8104b30 <HAL_DMA_IRQHandler+0x290>
 8104c7c:	e67b      	b.n	8104976 <HAL_DMA_IRQHandler+0xd6>
 8104c7e:	bf00      	nop

08104c80 <HAL_DMA_RegisterCallback>:
  if(hdma == NULL)
 8104c80:	b1b8      	cbz	r0, 8104cb2 <HAL_DMA_RegisterCallback+0x32>
  __HAL_LOCK(hdma);
 8104c82:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8104c86:	2b01      	cmp	r3, #1
 8104c88:	d016      	beq.n	8104cb8 <HAL_DMA_RegisterCallback+0x38>
  if(HAL_DMA_STATE_READY == hdma->State)
 8104c8a:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 8104c8e:	f1bc 0f01 	cmp.w	ip, #1
 8104c92:	fa5f f38c 	uxtb.w	r3, ip
 8104c96:	d005      	beq.n	8104ca4 <HAL_DMA_RegisterCallback+0x24>
    status =  HAL_ERROR;
 8104c98:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma);
 8104c9a:	2200      	movs	r2, #0
 8104c9c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8104ca0:	4618      	mov	r0, r3
 8104ca2:	4770      	bx	lr
    switch (CallbackID)
 8104ca4:	2905      	cmp	r1, #5
 8104ca6:	d8f8      	bhi.n	8104c9a <HAL_DMA_RegisterCallback+0x1a>
 8104ca8:	e8df f001 	tbb	[pc, r1]
 8104cac:	15120f0c 	.word	0x15120f0c
 8104cb0:	0918      	.short	0x0918
    return HAL_ERROR;
 8104cb2:	2301      	movs	r3, #1
}
 8104cb4:	4618      	mov	r0, r3
 8104cb6:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8104cb8:	2302      	movs	r3, #2
}
 8104cba:	4618      	mov	r0, r3
 8104cbc:	4770      	bx	lr
      hdma->XferAbortCallback = pCallback;
 8104cbe:	6502      	str	r2, [r0, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8104cc0:	2300      	movs	r3, #0
      break;
 8104cc2:	e7ea      	b.n	8104c9a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferCpltCallback = pCallback;
 8104cc4:	63c2      	str	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8104cc6:	460b      	mov	r3, r1
      break;
 8104cc8:	e7e7      	b.n	8104c9a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferHalfCpltCallback = pCallback;
 8104cca:	6402      	str	r2, [r0, #64]	; 0x40
  HAL_StatusTypeDef status = HAL_OK;
 8104ccc:	2300      	movs	r3, #0
      break;
 8104cce:	e7e4      	b.n	8104c9a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1CpltCallback = pCallback;
 8104cd0:	6442      	str	r2, [r0, #68]	; 0x44
  HAL_StatusTypeDef status = HAL_OK;
 8104cd2:	2300      	movs	r3, #0
      break;
 8104cd4:	e7e1      	b.n	8104c9a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferM1HalfCpltCallback = pCallback;
 8104cd6:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 8104cd8:	2300      	movs	r3, #0
      break;
 8104cda:	e7de      	b.n	8104c9a <HAL_DMA_RegisterCallback+0x1a>
      hdma->XferErrorCallback = pCallback;
 8104cdc:	64c2      	str	r2, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8104cde:	2300      	movs	r3, #0
      break;
 8104ce0:	e7db      	b.n	8104c9a <HAL_DMA_RegisterCallback+0x1a>
 8104ce2:	bf00      	nop

08104ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104ce8:	680c      	ldr	r4, [r1, #0]
{
 8104cea:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104cec:	2c00      	cmp	r4, #0
 8104cee:	f000 809d 	beq.w	8104e2c <HAL_GPIO_Init+0x148>
 8104cf2:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104cf6:	f8df a240 	ldr.w	sl, [pc, #576]	; 8104f38 <HAL_GPIO_Init+0x254>
  uint32_t position = 0x00U;
 8104cfa:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104cfc:	2701      	movs	r7, #1
 8104cfe:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 8104d00:	ea17 0904 	ands.w	r9, r7, r4
 8104d04:	f000 808b 	beq.w	8104e1e <HAL_GPIO_Init+0x13a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104d08:	684e      	ldr	r6, [r1, #4]
 8104d0a:	f006 0203 	and.w	r2, r6, #3
 8104d0e:	1e55      	subs	r5, r2, #1
 8104d10:	2d01      	cmp	r5, #1
 8104d12:	f240 808e 	bls.w	8104e32 <HAL_GPIO_Init+0x14e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104d16:	2a03      	cmp	r2, #3
 8104d18:	f040 80cf 	bne.w	8104eba <HAL_GPIO_Init+0x1d6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104d1c:	fa02 f20c 	lsl.w	r2, r2, ip
 8104d20:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8104d22:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104d24:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104d26:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104d28:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8104d2c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104d2e:	d076      	beq.n	8104e1e <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104d30:	f8da 20f4 	ldr.w	r2, [sl, #244]	; 0xf4
 8104d34:	f042 0202 	orr.w	r2, r2, #2
 8104d38:	f8ca 20f4 	str.w	r2, [sl, #244]	; 0xf4
 8104d3c:	f8da 20f4 	ldr.w	r2, [sl, #244]	; 0xf4
 8104d40:	f002 0202 	and.w	r2, r2, #2
 8104d44:	9203      	str	r2, [sp, #12]
 8104d46:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104d48:	f023 0203 	bic.w	r2, r3, #3
 8104d4c:	f102 42b0 	add.w	r2, r2, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104d50:	f003 0e03 	and.w	lr, r3, #3
 8104d54:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8104d58:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8104d5a:	f8d2 5408 	ldr.w	r5, [r2, #1032]	; 0x408
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104d5e:	fa07 f70e 	lsl.w	r7, r7, lr
 8104d62:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104d66:	4f6b      	ldr	r7, [pc, #428]	; (8104f14 <HAL_GPIO_Init+0x230>)
 8104d68:	42b8      	cmp	r0, r7
 8104d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8104d6e:	d028      	beq.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104d70:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8104d74:	42b8      	cmp	r0, r7
 8104d76:	f000 80aa 	beq.w	8104ece <HAL_GPIO_Init+0x1ea>
 8104d7a:	4f67      	ldr	r7, [pc, #412]	; (8104f18 <HAL_GPIO_Init+0x234>)
 8104d7c:	42b8      	cmp	r0, r7
 8104d7e:	f000 80ab 	beq.w	8104ed8 <HAL_GPIO_Init+0x1f4>
 8104d82:	4f66      	ldr	r7, [pc, #408]	; (8104f1c <HAL_GPIO_Init+0x238>)
 8104d84:	42b8      	cmp	r0, r7
 8104d86:	f000 809d 	beq.w	8104ec4 <HAL_GPIO_Init+0x1e0>
 8104d8a:	4f65      	ldr	r7, [pc, #404]	; (8104f20 <HAL_GPIO_Init+0x23c>)
 8104d8c:	42b8      	cmp	r0, r7
 8104d8e:	f000 80ad 	beq.w	8104eec <HAL_GPIO_Init+0x208>
 8104d92:	4f64      	ldr	r7, [pc, #400]	; (8104f24 <HAL_GPIO_Init+0x240>)
 8104d94:	42b8      	cmp	r0, r7
 8104d96:	f000 80ae 	beq.w	8104ef6 <HAL_GPIO_Init+0x212>
 8104d9a:	4f63      	ldr	r7, [pc, #396]	; (8104f28 <HAL_GPIO_Init+0x244>)
 8104d9c:	42b8      	cmp	r0, r7
 8104d9e:	f000 80a0 	beq.w	8104ee2 <HAL_GPIO_Init+0x1fe>
 8104da2:	4f62      	ldr	r7, [pc, #392]	; (8104f2c <HAL_GPIO_Init+0x248>)
 8104da4:	42b8      	cmp	r0, r7
 8104da6:	f000 80ab 	beq.w	8104f00 <HAL_GPIO_Init+0x21c>
 8104daa:	4f61      	ldr	r7, [pc, #388]	; (8104f30 <HAL_GPIO_Init+0x24c>)
 8104dac:	42b8      	cmp	r0, r7
 8104dae:	f000 80ac 	beq.w	8104f0a <HAL_GPIO_Init+0x226>
 8104db2:	4f60      	ldr	r7, [pc, #384]	; (8104f34 <HAL_GPIO_Init+0x250>)
 8104db4:	42b8      	cmp	r0, r7
 8104db6:	bf0c      	ite	eq
 8104db8:	2709      	moveq	r7, #9
 8104dba:	270a      	movne	r7, #10
 8104dbc:	fa07 f70e 	lsl.w	r7, r7, lr
 8104dc0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104dc2:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8104dc8:	ea6f 0509 	mvn.w	r5, r9
        temp = EXTI->RTSR1;
 8104dcc:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104dce:	02f7      	lsls	r7, r6, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8104dd0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8104dd4:	bf54      	ite	pl
 8104dd6:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8104dd8:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->RTSR1 = temp;
 8104ddc:	603a      	str	r2, [r7, #0]

        temp = EXTI->FTSR1;
 8104dde:	687a      	ldr	r2, [r7, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104de0:	02b7      	lsls	r7, r6, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8104de2:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8104de6:	bf54      	ite	pl
 8104de8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8104dea:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->FTSR1 = temp;
 8104dee:	607a      	str	r2, [r7, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104df0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104df4:	03b7      	lsls	r7, r6, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104df6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8104dfa:	bf54      	ite	pl
 8104dfc:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8104dfe:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI_CurrentCPU->EMR1 = temp;
 8104e02:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104e06:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104e0a:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8104e0c:	bf58      	it	pl
 8104e0e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104e10:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
          temp |= iocurrent;
 8104e14:	bf48      	it	mi
 8104e16:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8104e1a:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
      }
    }

    position++;
 8104e1e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104e20:	fa34 f203 	lsrs.w	r2, r4, r3
 8104e24:	f10c 0c02 	add.w	ip, ip, #2
 8104e28:	f47f af68 	bne.w	8104cfc <HAL_GPIO_Init+0x18>
  }
}
 8104e2c:	b005      	add	sp, #20
 8104e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8104e32:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104e36:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104e38:	f04f 0803 	mov.w	r8, #3
 8104e3c:	fa08 f80c 	lsl.w	r8, r8, ip
 8104e40:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104e44:	fa05 f50c 	lsl.w	r5, r5, ip
 8104e48:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OSPEEDR = temp;
 8104e4c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8104e4e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104e52:	ea2e 0e07 	bic.w	lr, lr, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104e56:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8104e5a:	409f      	lsls	r7, r3
 8104e5c:	ea47 070e 	orr.w	r7, r7, lr
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104e60:	ea6f 0508 	mvn.w	r5, r8
        GPIOx->OTYPER = temp;
 8104e64:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8104e66:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104e68:	ea07 0e05 	and.w	lr, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104e6c:	688f      	ldr	r7, [r1, #8]
 8104e6e:	fa07 f70c 	lsl.w	r7, r7, ip
 8104e72:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104e76:	2a02      	cmp	r2, #2
      GPIOx->PUPDR = temp;
 8104e78:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104e7a:	fa02 f20c 	lsl.w	r2, r2, ip
 8104e7e:	f47f af50 	bne.w	8104d22 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8104e82:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8104e86:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104e8a:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8104e8e:	f8de 7020 	ldr.w	r7, [lr, #32]
 8104e92:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104e94:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104e96:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104e9a:	fa07 f708 	lsl.w	r7, r7, r8
 8104e9e:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104ea0:	f04f 0b0f 	mov.w	fp, #15
 8104ea4:	9f00      	ldr	r7, [sp, #0]
 8104ea6:	fa0b fb08 	lsl.w	fp, fp, r8
 8104eaa:	ea27 080b 	bic.w	r8, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104eae:	9f01      	ldr	r7, [sp, #4]
 8104eb0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8104eb4:	f8ce 7020 	str.w	r7, [lr, #32]
 8104eb8:	e733      	b.n	8104d22 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104eba:	2503      	movs	r5, #3
 8104ebc:	fa05 f50c 	lsl.w	r5, r5, ip
 8104ec0:	43ed      	mvns	r5, r5
 8104ec2:	e7d0      	b.n	8104e66 <HAL_GPIO_Init+0x182>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104ec4:	2703      	movs	r7, #3
 8104ec6:	fa07 f70e 	lsl.w	r7, r7, lr
 8104eca:	433d      	orrs	r5, r7
 8104ecc:	e779      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104ece:	2701      	movs	r7, #1
 8104ed0:	fa07 f70e 	lsl.w	r7, r7, lr
 8104ed4:	433d      	orrs	r5, r7
 8104ed6:	e774      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104ed8:	2702      	movs	r7, #2
 8104eda:	fa07 f70e 	lsl.w	r7, r7, lr
 8104ede:	433d      	orrs	r5, r7
 8104ee0:	e76f      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104ee2:	2706      	movs	r7, #6
 8104ee4:	fa07 f70e 	lsl.w	r7, r7, lr
 8104ee8:	433d      	orrs	r5, r7
 8104eea:	e76a      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104eec:	2704      	movs	r7, #4
 8104eee:	fa07 f70e 	lsl.w	r7, r7, lr
 8104ef2:	433d      	orrs	r5, r7
 8104ef4:	e765      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104ef6:	2705      	movs	r7, #5
 8104ef8:	fa07 f70e 	lsl.w	r7, r7, lr
 8104efc:	433d      	orrs	r5, r7
 8104efe:	e760      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104f00:	2707      	movs	r7, #7
 8104f02:	fa07 f70e 	lsl.w	r7, r7, lr
 8104f06:	433d      	orrs	r5, r7
 8104f08:	e75b      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104f0a:	2708      	movs	r7, #8
 8104f0c:	fa07 f70e 	lsl.w	r7, r7, lr
 8104f10:	433d      	orrs	r5, r7
 8104f12:	e756      	b.n	8104dc2 <HAL_GPIO_Init+0xde>
 8104f14:	58020000 	.word	0x58020000
 8104f18:	58020800 	.word	0x58020800
 8104f1c:	58020c00 	.word	0x58020c00
 8104f20:	58021000 	.word	0x58021000
 8104f24:	58021400 	.word	0x58021400
 8104f28:	58021800 	.word	0x58021800
 8104f2c:	58021c00 	.word	0x58021c00
 8104f30:	58022000 	.word	0x58022000
 8104f34:	58022400 	.word	0x58022400
 8104f38:	58024400 	.word	0x58024400

08104f3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8104f3c:	6903      	ldr	r3, [r0, #16]
 8104f3e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8104f40:	bf14      	ite	ne
 8104f42:	2001      	movne	r0, #1
 8104f44:	2000      	moveq	r0, #0
 8104f46:	4770      	bx	lr

08104f48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104f48:	b902      	cbnz	r2, 8104f4c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104f4a:	0409      	lsls	r1, r1, #16
 8104f4c:	6181      	str	r1, [r0, #24]
  }
}
 8104f4e:	4770      	bx	lr

08104f50 <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104f50:	4a02      	ldr	r2, [pc, #8]	; (8104f5c <HAL_HSEM_ActivateNotification+0xc>)
 8104f52:	6913      	ldr	r3, [r2, #16]
 8104f54:	4318      	orrs	r0, r3
 8104f56:	6110      	str	r0, [r2, #16]
#endif
}
 8104f58:	4770      	bx	lr
 8104f5a:	bf00      	nop
 8104f5c:	58026500 	.word	0x58026500

08104f60 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104f60:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104f62:	4c1f      	ldr	r4, [pc, #124]	; (8104fe0 <HAL_PWREx_EnterSTOPMode+0x80>)
 8104f64:	6823      	ldr	r3, [r4, #0]
 8104f66:	f023 0301 	bic.w	r3, r3, #1
 8104f6a:	4303      	orrs	r3, r0
{
 8104f6c:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104f6e:	6023      	str	r3, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104f70:	b1a2      	cbz	r2, 8104f9c <HAL_PWREx_EnterSTOPMode+0x3c>

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104f72:	2a01      	cmp	r2, #1
 8104f74:	d008      	beq.n	8104f88 <HAL_PWREx_EnterSTOPMode+0x28>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104f76:	f7fe fcc7 	bl	8103908 <HAL_GetCurrentCPUID>
 8104f7a:	2803      	cmp	r0, #3
 8104f7c:	d028      	beq.n	8104fd0 <HAL_PWREx_EnterSTOPMode+0x70>
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104f7e:	6963      	ldr	r3, [r4, #20]
 8104f80:	f023 0304 	bic.w	r3, r3, #4
 8104f84:	6163      	str	r3, [r4, #20]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104f86:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104f88:	f7fe fcbe 	bl	8103908 <HAL_GetCurrentCPUID>
 8104f8c:	2801      	cmp	r0, #1
 8104f8e:	d1fa      	bne.n	8104f86 <HAL_PWREx_EnterSTOPMode+0x26>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104f90:	6963      	ldr	r3, [r4, #20]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f92:	4a14      	ldr	r2, [pc, #80]	; (8104fe4 <HAL_PWREx_EnterSTOPMode+0x84>)
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104f94:	f023 0302 	bic.w	r3, r3, #2
 8104f98:	6163      	str	r3, [r4, #20]
 8104f9a:	e008      	b.n	8104fae <HAL_PWREx_EnterSTOPMode+0x4e>
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104f9c:	f7fe fcb4 	bl	8103908 <HAL_GetCurrentCPUID>
 8104fa0:	2803      	cmp	r0, #3
 8104fa2:	d1f0      	bne.n	8104f86 <HAL_PWREx_EnterSTOPMode+0x26>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104fa4:	6923      	ldr	r3, [r4, #16]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104fa6:	4a0f      	ldr	r2, [pc, #60]	; (8104fe4 <HAL_PWREx_EnterSTOPMode+0x84>)
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104fa8:	f023 0301 	bic.w	r3, r3, #1
 8104fac:	6123      	str	r3, [r4, #16]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104fae:	6913      	ldr	r3, [r2, #16]
 8104fb0:	f043 0304 	orr.w	r3, r3, #4
 8104fb4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104fb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8104fba:	f3bf 8f6f 	isb	sy
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104fbe:	2d01      	cmp	r5, #1
 8104fc0:	d00b      	beq.n	8104fda <HAL_PWREx_EnterSTOPMode+0x7a>
      __WFE ();
 8104fc2:	bf20      	wfe
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104fc4:	4a07      	ldr	r2, [pc, #28]	; (8104fe4 <HAL_PWREx_EnterSTOPMode+0x84>)
 8104fc6:	6913      	ldr	r3, [r2, #16]
 8104fc8:	f023 0304 	bic.w	r3, r3, #4
 8104fcc:	6113      	str	r3, [r2, #16]
}
 8104fce:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104fd0:	6923      	ldr	r3, [r4, #16]
 8104fd2:	f023 0304 	bic.w	r3, r3, #4
 8104fd6:	6123      	str	r3, [r4, #16]
}
 8104fd8:	bd38      	pop	{r3, r4, r5, pc}
      __WFI ();
 8104fda:	bf30      	wfi
 8104fdc:	e7f2      	b.n	8104fc4 <HAL_PWREx_EnterSTOPMode+0x64>
 8104fde:	bf00      	nop
 8104fe0:	58024800 	.word	0x58024800
 8104fe4:	e000ed00 	.word	0xe000ed00

08104fe8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104fe8:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104fea:	f7fe fc8d 	bl	8103908 <HAL_GetCurrentCPUID>
 8104fee:	2803      	cmp	r0, #3
 8104ff0:	d000      	beq.n	8104ff4 <HAL_PWREx_ClearPendingEvent+0xc>
  {
    __WFE ();
  }
  else
  {
    __SEV ();
 8104ff2:	bf40      	sev
    __WFE ();
 8104ff4:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104ff6:	bd08      	pop	{r3, pc}

08104ff8 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104ff8:	4b3b      	ldr	r3, [pc, #236]	; (81050e8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8104ffa:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104ffe:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105000:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105002:	6b59      	ldr	r1, [r3, #52]	; 0x34

      if (pllm != 0U)
 8105004:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105008:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 810500c:	d038      	beq.n	8105080 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810500e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105012:	f005 0501 	and.w	r5, r5, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105016:	fb05 f101 	mul.w	r1, r5, r1
 810501a:	ee07 1a90 	vmov	s15, r1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810501e:	f002 0203 	and.w	r2, r2, #3
 8105022:	2a01      	cmp	r2, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105024:	eef8 5ae7 	vcvt.f32.s32	s11, s15
      {
        switch (pllsource)
 8105028:	d002      	beq.n	8105030 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 810502a:	2a02      	cmp	r2, #2
 810502c:	d04e      	beq.n	81050cc <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 810502e:	b34a      	cbz	r2, 8105084 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105030:	ee07 0a90 	vmov	s15, r0
 8105034:	eddf 6a2d 	vldr	s13, [pc, #180]	; 81050ec <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8105038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810503c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105046:	ee07 3a90 	vmov	s15, r3
 810504a:	ed9f 6a29 	vldr	s12, [pc, #164]	; 81050f0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 810504e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105056:	eee5 7a86 	vfma.f32	s15, s11, s12
 810505a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810505e:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105062:	4b21      	ldr	r3, [pc, #132]	; (81050e8 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8105064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105066:	f3c3 2346 	ubfx	r3, r3, #9, #7
 810506a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810506c:	ee07 3a90 	vmov	s15, r3
 8105070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105074:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8105078:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 810507c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8105080:	bc30      	pop	{r4, r5}
 8105082:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105084:	681a      	ldr	r2, [r3, #0]
 8105086:	0692      	lsls	r2, r2, #26
 8105088:	d527      	bpl.n	81050da <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810508a:	6819      	ldr	r1, [r3, #0]
 810508c:	4a19      	ldr	r2, [pc, #100]	; (81050f4 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105090:	ed9f 6a17 	vldr	s12, [pc, #92]	; 81050f0 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105094:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8105098:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810509a:	ee07 2a90 	vmov	s15, r2
 810509e:	ee07 0a10 	vmov	s14, r0
 81050a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81050a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81050b2:	ee07 3a10 	vmov	s14, r3
 81050b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81050ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 81050be:	eea5 7a86 	vfma.f32	s14, s11, s12
 81050c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 81050c6:	ee27 7a26 	vmul.f32	s14, s14, s13
 81050ca:	e7ca      	b.n	8105062 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81050cc:	ee07 0a90 	vmov	s15, r0
 81050d0:	eddf 6a09 	vldr	s13, [pc, #36]	; 81050f8 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 81050d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81050d8:	e7b0      	b.n	810503c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81050da:	ee07 0a90 	vmov	s15, r0
 81050de:	eddf 6a07 	vldr	s13, [pc, #28]	; 81050fc <HAL_RCC_GetSysClockFreq.part.0+0x104>
 81050e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81050e6:	e7a9      	b.n	810503c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 81050e8:	58024400 	.word	0x58024400
 81050ec:	4a742400 	.word	0x4a742400
 81050f0:	39000000 	.word	0x39000000
 81050f4:	03d09000 	.word	0x03d09000
 81050f8:	4bbebc20 	.word	0x4bbebc20
 81050fc:	4c742400 	.word	0x4c742400

08105100 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105100:	4a0c      	ldr	r2, [pc, #48]	; (8105134 <HAL_RCC_GetSysClockFreq+0x34>)
 8105102:	6913      	ldr	r3, [r2, #16]
 8105104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105108:	2b10      	cmp	r3, #16
 810510a:	d004      	beq.n	8105116 <HAL_RCC_GetSysClockFreq+0x16>
 810510c:	2b18      	cmp	r3, #24
 810510e:	d00d      	beq.n	810512c <HAL_RCC_GetSysClockFreq+0x2c>
 8105110:	b11b      	cbz	r3, 810511a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8105112:	4809      	ldr	r0, [pc, #36]	; (8105138 <HAL_RCC_GetSysClockFreq+0x38>)
 8105114:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105116:	4809      	ldr	r0, [pc, #36]	; (810513c <HAL_RCC_GetSysClockFreq+0x3c>)
 8105118:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810511a:	6813      	ldr	r3, [r2, #0]
 810511c:	069b      	lsls	r3, r3, #26
 810511e:	d507      	bpl.n	8105130 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105120:	6813      	ldr	r3, [r2, #0]
 8105122:	4807      	ldr	r0, [pc, #28]	; (8105140 <HAL_RCC_GetSysClockFreq+0x40>)
 8105124:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8105128:	40d8      	lsrs	r0, r3
 810512a:	4770      	bx	lr
 810512c:	f7ff bf64 	b.w	8104ff8 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105130:	4803      	ldr	r0, [pc, #12]	; (8105140 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8105132:	4770      	bx	lr
 8105134:	58024400 	.word	0x58024400
 8105138:	003d0900 	.word	0x003d0900
 810513c:	017d7840 	.word	0x017d7840
 8105140:	03d09000 	.word	0x03d09000

08105144 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105144:	4a17      	ldr	r2, [pc, #92]	; (81051a4 <HAL_RCC_GetHCLKFreq+0x60>)
 8105146:	6913      	ldr	r3, [r2, #16]
 8105148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810514c:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810514e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105150:	d018      	beq.n	8105184 <HAL_RCC_GetHCLKFreq+0x40>
 8105152:	2b18      	cmp	r3, #24
 8105154:	d021      	beq.n	810519a <HAL_RCC_GetHCLKFreq+0x56>
 8105156:	b1bb      	cbz	r3, 8105188 <HAL_RCC_GetHCLKFreq+0x44>
      sysclockfreq = CSI_VALUE;
 8105158:	4813      	ldr	r0, [pc, #76]	; (81051a8 <HAL_RCC_GetHCLKFreq+0x64>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810515a:	4b12      	ldr	r3, [pc, #72]	; (81051a4 <HAL_RCC_GetHCLKFreq+0x60>)
 810515c:	4913      	ldr	r1, [pc, #76]	; (81051ac <HAL_RCC_GetHCLKFreq+0x68>)
 810515e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105160:	699b      	ldr	r3, [r3, #24]
 8105162:	4c13      	ldr	r4, [pc, #76]	; (81051b0 <HAL_RCC_GetHCLKFreq+0x6c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105164:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105168:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810516c:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810516e:	5ccb      	ldrb	r3, [r1, r3]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105170:	4910      	ldr	r1, [pc, #64]	; (81051b4 <HAL_RCC_GetHCLKFreq+0x70>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105172:	f002 021f 	and.w	r2, r2, #31
 8105176:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105178:	f003 031f 	and.w	r3, r3, #31
 810517c:	40d8      	lsrs	r0, r3
 810517e:	6020      	str	r0, [r4, #0]
  SystemCoreClock = SystemD2Clock;
 8105180:	6008      	str	r0, [r1, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8105182:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105184:	480c      	ldr	r0, [pc, #48]	; (81051b8 <HAL_RCC_GetHCLKFreq+0x74>)
 8105186:	e7e8      	b.n	810515a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105188:	6813      	ldr	r3, [r2, #0]
 810518a:	069b      	lsls	r3, r3, #26
 810518c:	d508      	bpl.n	81051a0 <HAL_RCC_GetHCLKFreq+0x5c>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810518e:	6813      	ldr	r3, [r2, #0]
 8105190:	480a      	ldr	r0, [pc, #40]	; (81051bc <HAL_RCC_GetHCLKFreq+0x78>)
 8105192:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8105196:	40d8      	lsrs	r0, r3
 8105198:	e7df      	b.n	810515a <HAL_RCC_GetHCLKFreq+0x16>
 810519a:	f7ff ff2d 	bl	8104ff8 <HAL_RCC_GetSysClockFreq.part.0>
 810519e:	e7dc      	b.n	810515a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81051a0:	4806      	ldr	r0, [pc, #24]	; (81051bc <HAL_RCC_GetHCLKFreq+0x78>)
 81051a2:	e7da      	b.n	810515a <HAL_RCC_GetHCLKFreq+0x16>
 81051a4:	58024400 	.word	0x58024400
 81051a8:	003d0900 	.word	0x003d0900
 81051ac:	0810eb50 	.word	0x0810eb50
 81051b0:	10000050 	.word	0x10000050
 81051b4:	1000004c 	.word	0x1000004c
 81051b8:	017d7840 	.word	0x017d7840
 81051bc:	03d09000 	.word	0x03d09000

081051c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81051c0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81051c2:	f7ff ffbf 	bl	8105144 <HAL_RCC_GetHCLKFreq>
 81051c6:	4b05      	ldr	r3, [pc, #20]	; (81051dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 81051c8:	4a05      	ldr	r2, [pc, #20]	; (81051e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 81051ca:	69db      	ldr	r3, [r3, #28]
 81051cc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 81051d0:	5cd3      	ldrb	r3, [r2, r3]
 81051d2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81051d6:	40d8      	lsrs	r0, r3
 81051d8:	bd08      	pop	{r3, pc}
 81051da:	bf00      	nop
 81051dc:	58024400 	.word	0x58024400
 81051e0:	0810eb50 	.word	0x0810eb50

081051e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81051e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81051e6:	f7ff ffad 	bl	8105144 <HAL_RCC_GetHCLKFreq>
 81051ea:	4b05      	ldr	r3, [pc, #20]	; (8105200 <HAL_RCC_GetPCLK2Freq+0x1c>)
 81051ec:	4a05      	ldr	r2, [pc, #20]	; (8105204 <HAL_RCC_GetPCLK2Freq+0x20>)
 81051ee:	69db      	ldr	r3, [r3, #28]
 81051f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 81051f4:	5cd3      	ldrb	r3, [r2, r3]
 81051f6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81051fa:	40d8      	lsrs	r0, r3
 81051fc:	bd08      	pop	{r3, pc}
 81051fe:	bf00      	nop
 8105200:	58024400 	.word	0x58024400
 8105204:	0810eb50 	.word	0x0810eb50

08105208 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810520a:	4c3b      	ldr	r4, [pc, #236]	; (81052f8 <RCCEx_PLL2_Config+0xf0>)
 810520c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810520e:	f003 0303 	and.w	r3, r3, #3
 8105212:	2b03      	cmp	r3, #3
 8105214:	d069      	beq.n	81052ea <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105216:	6823      	ldr	r3, [r4, #0]
 8105218:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810521c:	6023      	str	r3, [r4, #0]
 810521e:	4606      	mov	r6, r0
 8105220:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105222:	f7fd fe21 	bl	8102e68 <HAL_GetTick>
 8105226:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105228:	e004      	b.n	8105234 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810522a:	f7fd fe1d 	bl	8102e68 <HAL_GetTick>
 810522e:	1b43      	subs	r3, r0, r5
 8105230:	2b02      	cmp	r3, #2
 8105232:	d858      	bhi.n	81052e6 <RCCEx_PLL2_Config+0xde>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105234:	6823      	ldr	r3, [r4, #0]
 8105236:	011a      	lsls	r2, r3, #4
 8105238:	d4f7      	bmi.n	810522a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810523a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810523c:	6832      	ldr	r2, [r6, #0]
 810523e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8105242:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8105246:	62a3      	str	r3, [r4, #40]	; 0x28
 8105248:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 810524c:	3b01      	subs	r3, #1
 810524e:	3a01      	subs	r2, #1
 8105250:	025b      	lsls	r3, r3, #9
 8105252:	0412      	lsls	r2, r2, #16
 8105254:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8105258:	b29b      	uxth	r3, r3
 810525a:	4313      	orrs	r3, r2
 810525c:	6872      	ldr	r2, [r6, #4]
 810525e:	3a01      	subs	r2, #1
 8105260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105264:	4313      	orrs	r3, r2
 8105266:	6932      	ldr	r2, [r6, #16]
 8105268:	3a01      	subs	r2, #1
 810526a:	0612      	lsls	r2, r2, #24
 810526c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8105270:	4313      	orrs	r3, r2
 8105272:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105274:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105276:	6972      	ldr	r2, [r6, #20]
 8105278:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 810527c:	4313      	orrs	r3, r2
 810527e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105280:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105282:	69b2      	ldr	r2, [r6, #24]
 8105284:	f023 0320 	bic.w	r3, r3, #32
 8105288:	4313      	orrs	r3, r2
 810528a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810528c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810528e:	f023 0310 	bic.w	r3, r3, #16
 8105292:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105294:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8105296:	69f2      	ldr	r2, [r6, #28]
 8105298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810529c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81052a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 81052a4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81052a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 81052a8:	f043 0310 	orr.w	r3, r3, #16
 81052ac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81052ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 81052b0:	b1ef      	cbz	r7, 81052ee <RCCEx_PLL2_Config+0xe6>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81052b2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81052b4:	bf0c      	ite	eq
 81052b6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81052ba:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 81052be:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81052c0:	4c0d      	ldr	r4, [pc, #52]	; (81052f8 <RCCEx_PLL2_Config+0xf0>)
 81052c2:	6823      	ldr	r3, [r4, #0]
 81052c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81052c8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81052ca:	f7fd fdcd 	bl	8102e68 <HAL_GetTick>
 81052ce:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81052d0:	e004      	b.n	81052dc <RCCEx_PLL2_Config+0xd4>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81052d2:	f7fd fdc9 	bl	8102e68 <HAL_GetTick>
 81052d6:	1b40      	subs	r0, r0, r5
 81052d8:	2802      	cmp	r0, #2
 81052da:	d804      	bhi.n	81052e6 <RCCEx_PLL2_Config+0xde>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81052dc:	6823      	ldr	r3, [r4, #0]
 81052de:	011b      	lsls	r3, r3, #4
 81052e0:	d5f7      	bpl.n	81052d2 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 81052e2:	2000      	movs	r0, #0
}
 81052e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 81052e6:	2003      	movs	r0, #3
}
 81052e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 81052ea:	2001      	movs	r0, #1
}
 81052ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81052ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81052f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 81052f4:	e7e4      	b.n	81052c0 <RCCEx_PLL2_Config+0xb8>
 81052f6:	bf00      	nop
 81052f8:	58024400 	.word	0x58024400

081052fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81052fe:	4c3b      	ldr	r4, [pc, #236]	; (81053ec <RCCEx_PLL3_Config+0xf0>)
 8105300:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8105302:	f003 0303 	and.w	r3, r3, #3
 8105306:	2b03      	cmp	r3, #3
 8105308:	d069      	beq.n	81053de <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810530a:	6823      	ldr	r3, [r4, #0]
 810530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105310:	6023      	str	r3, [r4, #0]
 8105312:	4606      	mov	r6, r0
 8105314:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105316:	f7fd fda7 	bl	8102e68 <HAL_GetTick>
 810531a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810531c:	e004      	b.n	8105328 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810531e:	f7fd fda3 	bl	8102e68 <HAL_GetTick>
 8105322:	1b43      	subs	r3, r0, r5
 8105324:	2b02      	cmp	r3, #2
 8105326:	d858      	bhi.n	81053da <RCCEx_PLL3_Config+0xde>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105328:	6823      	ldr	r3, [r4, #0]
 810532a:	009a      	lsls	r2, r3, #2
 810532c:	d4f7      	bmi.n	810531e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810532e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8105330:	6832      	ldr	r2, [r6, #0]
 8105332:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8105336:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 810533a:	62a3      	str	r3, [r4, #40]	; 0x28
 810533c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8105340:	3b01      	subs	r3, #1
 8105342:	3a01      	subs	r2, #1
 8105344:	025b      	lsls	r3, r3, #9
 8105346:	0412      	lsls	r2, r2, #16
 8105348:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 810534c:	b29b      	uxth	r3, r3
 810534e:	4313      	orrs	r3, r2
 8105350:	6872      	ldr	r2, [r6, #4]
 8105352:	3a01      	subs	r2, #1
 8105354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105358:	4313      	orrs	r3, r2
 810535a:	6932      	ldr	r2, [r6, #16]
 810535c:	3a01      	subs	r2, #1
 810535e:	0612      	lsls	r2, r2, #24
 8105360:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8105364:	4313      	orrs	r3, r2
 8105366:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810536a:	6972      	ldr	r2, [r6, #20]
 810536c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8105370:	4313      	orrs	r3, r2
 8105372:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105376:	69b2      	ldr	r2, [r6, #24]
 8105378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810537c:	4313      	orrs	r3, r2
 810537e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105386:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105388:	6c63      	ldr	r3, [r4, #68]	; 0x44
 810538a:	69f2      	ldr	r2, [r6, #28]
 810538c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105390:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105394:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8105398:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810539a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810539c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81053a0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81053a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 81053a4:	b1ef      	cbz	r7, 81053e2 <RCCEx_PLL3_Config+0xe6>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81053a6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81053a8:	bf0c      	ite	eq
 81053aa:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81053ae:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 81053b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81053b4:	4c0d      	ldr	r4, [pc, #52]	; (81053ec <RCCEx_PLL3_Config+0xf0>)
 81053b6:	6823      	ldr	r3, [r4, #0]
 81053b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81053bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81053be:	f7fd fd53 	bl	8102e68 <HAL_GetTick>
 81053c2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81053c4:	e004      	b.n	81053d0 <RCCEx_PLL3_Config+0xd4>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81053c6:	f7fd fd4f 	bl	8102e68 <HAL_GetTick>
 81053ca:	1b40      	subs	r0, r0, r5
 81053cc:	2802      	cmp	r0, #2
 81053ce:	d804      	bhi.n	81053da <RCCEx_PLL3_Config+0xde>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81053d0:	6823      	ldr	r3, [r4, #0]
 81053d2:	009b      	lsls	r3, r3, #2
 81053d4:	d5f7      	bpl.n	81053c6 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 81053d6:	2000      	movs	r0, #0
}
 81053d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 81053da:	2003      	movs	r0, #3
}
 81053dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 81053de:	2001      	movs	r0, #1
}
 81053e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81053e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81053e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 81053e8:	e7e4      	b.n	81053b4 <RCCEx_PLL3_Config+0xb8>
 81053ea:	bf00      	nop
 81053ec:	58024400 	.word	0x58024400

081053f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 81053f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81053f4:	e9d0 3200 	ldrd	r3, r2, [r0]
 81053f8:	011d      	lsls	r5, r3, #4
{
 81053fa:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81053fc:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8105400:	d523      	bpl.n	810544a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8105402:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8105404:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8105408:	f000 8553 	beq.w	8105eb2 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 810540c:	d812      	bhi.n	8105434 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810540e:	2900      	cmp	r1, #0
 8105410:	f000 85a9 	beq.w	8105f66 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8105414:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8105418:	f040 85a2 	bne.w	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810541c:	2102      	movs	r1, #2
 810541e:	3008      	adds	r0, #8
 8105420:	f7ff fef2 	bl	8105208 <RCCEx_PLL2_Config>
 8105424:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8105426:	2e00      	cmp	r6, #0
 8105428:	f040 8522 	bne.w	8105e70 <HAL_RCCEx_PeriphCLKConfig+0xa80>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810542c:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105430:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8105432:	e003      	b.n	810543c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8105434:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8105438:	f040 8592 	bne.w	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810543c:	4dae      	ldr	r5, [pc, #696]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 810543e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8105440:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8105444:	4301      	orrs	r1, r0
 8105446:	2600      	movs	r6, #0
 8105448:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810544a:	05d8      	lsls	r0, r3, #23
 810544c:	d50a      	bpl.n	8105464 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 810544e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8105450:	2904      	cmp	r1, #4
 8105452:	d806      	bhi.n	8105462 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8105454:	e8df f011 	tbh	[pc, r1, lsl #1]
 8105458:	053d0536 	.word	0x053d0536
 810545c:	0323051a 	.word	0x0323051a
 8105460:	0323      	.short	0x0323
 8105462:	2601      	movs	r6, #1
 8105464:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105466:	0599      	lsls	r1, r3, #22
 8105468:	d51d      	bpl.n	81054a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 810546a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 810546c:	2980      	cmp	r1, #128	; 0x80
 810546e:	f000 8516 	beq.w	8105e9e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8105472:	f200 80f9 	bhi.w	8105668 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8105476:	2900      	cmp	r1, #0
 8105478:	f000 8433 	beq.w	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810547c:	2940      	cmp	r1, #64	; 0x40
 810547e:	f040 80fa 	bne.w	8105676 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105482:	2100      	movs	r1, #0
 8105484:	f104 0008 	add.w	r0, r4, #8
 8105488:	f7ff febe 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810548c:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105490:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8105492:	2d00      	cmp	r5, #0
 8105494:	f040 83fe 	bne.w	8105c94 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105498:	4f97      	ldr	r7, [pc, #604]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 810549a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 810549c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810549e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 81054a2:	4301      	orrs	r1, r0
 81054a4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81054a6:	055f      	lsls	r7, r3, #21
 81054a8:	d521      	bpl.n	81054ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 81054aa:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 81054ae:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 81054b2:	f000 8521 	beq.w	8105ef8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 81054b6:	f200 80e1 	bhi.w	810567c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 81054ba:	2900      	cmp	r1, #0
 81054bc:	f000 8418 	beq.w	8105cf0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 81054c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81054c4:	f040 80e2 	bne.w	810568c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81054c8:	2100      	movs	r1, #0
 81054ca:	f104 0008 	add.w	r0, r4, #8
 81054ce:	f7ff fe9b 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81054d2:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81054d6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 81054d8:	2d00      	cmp	r5, #0
 81054da:	f040 83e2 	bne.w	8105ca2 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81054de:	4f86      	ldr	r7, [pc, #536]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 81054e0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 81054e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81054e6:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 81054ea:	4301      	orrs	r1, r0
 81054ec:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81054ee:	0518      	lsls	r0, r3, #20
 81054f0:	d521      	bpl.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 81054f2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 81054f6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 81054fa:	f000 84bd 	beq.w	8105e78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 81054fe:	f200 80c8 	bhi.w	8105692 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8105502:	2900      	cmp	r1, #0
 8105504:	f000 83e7 	beq.w	8105cd6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105508:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 810550c:	f040 80c9 	bne.w	81056a2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105510:	2100      	movs	r1, #0
 8105512:	f104 0008 	add.w	r0, r4, #8
 8105516:	f7ff fe77 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810551a:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810551e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8105520:	2d00      	cmp	r5, #0
 8105522:	f040 83b5 	bne.w	8105c90 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105526:	4f74      	ldr	r7, [pc, #464]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8105528:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 810552c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810552e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8105532:	4301      	orrs	r1, r0
 8105534:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105536:	0199      	lsls	r1, r3, #6
 8105538:	d518      	bpl.n	810556c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 810553a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 810553c:	2920      	cmp	r1, #32
 810553e:	f000 841f 	beq.w	8105d80 <HAL_RCCEx_PeriphCLKConfig+0x990>
 8105542:	f200 80b1 	bhi.w	81056a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105546:	b139      	cbz	r1, 8105558 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8105548:	2910      	cmp	r1, #16
 810554a:	f040 80b0 	bne.w	81056ae <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810554e:	486a      	ldr	r0, [pc, #424]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8105550:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105552:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105556:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8105558:	2d00      	cmp	r5, #0
 810555a:	f040 83d8 	bne.w	8105d0e <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810555e:	4f66      	ldr	r7, [pc, #408]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8105560:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8105562:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8105564:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8105568:	4301      	orrs	r1, r0
 810556a:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810556c:	04df      	lsls	r7, r3, #19
 810556e:	d51f      	bpl.n	81055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8105570:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8105572:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8105576:	f000 84b5 	beq.w	8105ee4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 810557a:	f200 809b 	bhi.w	81056b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 810557e:	2900      	cmp	r1, #0
 8105580:	f000 83a3 	beq.w	8105cca <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8105584:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8105588:	f040 809c 	bne.w	81056c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810558c:	2100      	movs	r1, #0
 810558e:	f104 0008 	add.w	r0, r4, #8
 8105592:	f7ff fe39 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105596:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810559a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 810559c:	2d00      	cmp	r5, #0
 810559e:	f040 837b 	bne.w	8105c98 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81055a2:	4f55      	ldr	r7, [pc, #340]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 81055a4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 81055a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 81055a8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 81055ac:	4301      	orrs	r1, r0
 81055ae:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81055b0:	0498      	lsls	r0, r3, #18
 81055b2:	d51d      	bpl.n	81055f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 81055b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 81055b6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 81055ba:	f000 8410 	beq.w	8105dde <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 81055be:	f200 8084 	bhi.w	81056ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 81055c2:	b159      	cbz	r1, 81055dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 81055c4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 81055c8:	f040 8087 	bne.w	81056da <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81055cc:	2101      	movs	r1, #1
 81055ce:	f104 0008 	add.w	r0, r4, #8
 81055d2:	f7ff fe19 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81055d6:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81055da:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 81055dc:	2d00      	cmp	r5, #0
 81055de:	f040 839a 	bne.w	8105d16 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81055e2:	4f45      	ldr	r7, [pc, #276]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 81055e4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 81055e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 81055e8:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 81055ec:	4301      	orrs	r1, r0
 81055ee:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81055f0:	0459      	lsls	r1, r3, #17
 81055f2:	d51d      	bpl.n	8105630 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 81055f4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 81055f8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 81055fc:	f000 83fb 	beq.w	8105df6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8105600:	d86e      	bhi.n	81056e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8105602:	b151      	cbz	r1, 810561a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105604:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8105608:	d172      	bne.n	81056f0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810560a:	2101      	movs	r1, #1
 810560c:	f104 0008 	add.w	r0, r4, #8
 8105610:	f7ff fdfa 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105614:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105618:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 810561a:	2d00      	cmp	r5, #0
 810561c:	f040 837f 	bne.w	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105620:	4f35      	ldr	r7, [pc, #212]	; (81056f8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8105622:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8105626:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105628:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 810562c:	4301      	orrs	r1, r0
 810562e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105630:	041f      	lsls	r7, r3, #16
 8105632:	d50d      	bpl.n	8105650 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 8105634:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8105636:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 810563a:	f000 83c8 	beq.w	8105dce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810563e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8105642:	f000 823b 	beq.w	8105abc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8105646:	2900      	cmp	r1, #0
 8105648:	f000 8240 	beq.w	8105acc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 810564c:	2601      	movs	r6, #1
 810564e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105650:	01d8      	lsls	r0, r3, #7
 8105652:	d562      	bpl.n	810571a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
 8105654:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8105656:	2903      	cmp	r1, #3
 8105658:	f200 84bf 	bhi.w	8105fda <HAL_RCCEx_PeriphCLKConfig+0xbea>
 810565c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8105660:	004e0053 	.word	0x004e0053
 8105664:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
 8105668:	29c0      	cmp	r1, #192	; 0xc0
 810566a:	f43f af12 	beq.w	8105492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 810566e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8105672:	f43f af0e 	beq.w	8105492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8105676:	2601      	movs	r6, #1
 8105678:	4635      	mov	r5, r6
 810567a:	e714      	b.n	81054a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 810567c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8105680:	f43f af2a 	beq.w	81054d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8105684:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8105688:	f43f af26 	beq.w	81054d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 810568c:	2601      	movs	r6, #1
 810568e:	4635      	mov	r5, r6
 8105690:	e72d      	b.n	81054ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 8105692:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8105696:	f43f af43 	beq.w	8105520 <HAL_RCCEx_PeriphCLKConfig+0x130>
 810569a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 810569e:	f43f af3f 	beq.w	8105520 <HAL_RCCEx_PeriphCLKConfig+0x130>
 81056a2:	2601      	movs	r6, #1
 81056a4:	4635      	mov	r5, r6
 81056a6:	e746      	b.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 81056a8:	2930      	cmp	r1, #48	; 0x30
 81056aa:	f43f af55 	beq.w	8105558 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81056ae:	2601      	movs	r6, #1
 81056b0:	4635      	mov	r5, r6
 81056b2:	e75b      	b.n	810556c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 81056b4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 81056b8:	f43f af70 	beq.w	810559c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 81056bc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 81056c0:	f43f af6c 	beq.w	810559c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 81056c4:	2601      	movs	r6, #1
 81056c6:	4635      	mov	r5, r6
 81056c8:	e772      	b.n	81055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 81056ca:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 81056ce:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 81056d2:	d083      	beq.n	81055dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 81056d4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 81056d8:	d080      	beq.n	81055dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 81056da:	2601      	movs	r6, #1
 81056dc:	4635      	mov	r5, r6
 81056de:	e787      	b.n	81055f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 81056e0:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 81056e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 81056e8:	d097      	beq.n	810561a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81056ea:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 81056ee:	d094      	beq.n	810561a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81056f0:	2601      	movs	r6, #1
 81056f2:	4635      	mov	r5, r6
 81056f4:	e79c      	b.n	8105630 <HAL_RCCEx_PeriphCLKConfig+0x240>
 81056f6:	bf00      	nop
 81056f8:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81056fc:	4839      	ldr	r0, [pc, #228]	; (81057e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 81056fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105700:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105704:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8105706:	2d00      	cmp	r5, #0
 8105708:	f040 8303 	bne.w	8105d12 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810570c:	4f35      	ldr	r7, [pc, #212]	; (81057e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 810570e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8105710:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8105712:	f021 0103 	bic.w	r1, r1, #3
 8105716:	4301      	orrs	r1, r0
 8105718:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810571a:	0259      	lsls	r1, r3, #9
 810571c:	f100 826a 	bmi.w	8105bf4 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105720:	07d8      	lsls	r0, r3, #31
 8105722:	d52f      	bpl.n	8105784 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
 8105724:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8105726:	2928      	cmp	r1, #40	; 0x28
 8105728:	d82a      	bhi.n	8105780 <HAL_RCCEx_PeriphCLKConfig+0x390>
 810572a:	e8df f011 	tbh	[pc, r1, lsl #1]
 810572e:	020a      	.short	0x020a
 8105730:	00290029 	.word	0x00290029
 8105734:	00290029 	.word	0x00290029
 8105738:	00290029 	.word	0x00290029
 810573c:	02020029 	.word	0x02020029
 8105740:	00290029 	.word	0x00290029
 8105744:	00290029 	.word	0x00290029
 8105748:	00290029 	.word	0x00290029
 810574c:	04070029 	.word	0x04070029
 8105750:	00290029 	.word	0x00290029
 8105754:	00290029 	.word	0x00290029
 8105758:	00290029 	.word	0x00290029
 810575c:	020a0029 	.word	0x020a0029
 8105760:	00290029 	.word	0x00290029
 8105764:	00290029 	.word	0x00290029
 8105768:	00290029 	.word	0x00290029
 810576c:	020a0029 	.word	0x020a0029
 8105770:	00290029 	.word	0x00290029
 8105774:	00290029 	.word	0x00290029
 8105778:	00290029 	.word	0x00290029
 810577c:	020a0029 	.word	0x020a0029
 8105780:	2601      	movs	r6, #1
 8105782:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105784:	0799      	lsls	r1, r3, #30
 8105786:	d51d      	bpl.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105788:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 810578a:	2905      	cmp	r1, #5
 810578c:	f200 8421 	bhi.w	8105fd2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8105790:	e8df f011 	tbh	[pc, r1, lsl #1]
 8105794:	0006000e 	.word	0x0006000e
 8105798:	000e03c8 	.word	0x000e03c8
 810579c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81057a0:	2101      	movs	r1, #1
 81057a2:	f104 0008 	add.w	r0, r4, #8
 81057a6:	f7ff fd2f 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81057aa:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81057ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 81057b0:	2d00      	cmp	r5, #0
 81057b2:	f040 82b8 	bne.w	8105d26 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81057b6:	4f0b      	ldr	r7, [pc, #44]	; (81057e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 81057b8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 81057ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 81057bc:	f021 0107 	bic.w	r1, r1, #7
 81057c0:	4301      	orrs	r1, r0
 81057c2:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81057c4:	075f      	lsls	r7, r3, #29
 81057c6:	d522      	bpl.n	810580e <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81057c8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 81057cc:	2905      	cmp	r1, #5
 81057ce:	f200 8408 	bhi.w	8105fe2 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 81057d2:	e8df f011 	tbh	[pc, r1, lsl #1]
 81057d6:	0011      	.short	0x0011
 81057d8:	039b0009 	.word	0x039b0009
 81057dc:	00110011 	.word	0x00110011
 81057e0:	0011      	.short	0x0011
 81057e2:	bf00      	nop
 81057e4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81057e8:	2101      	movs	r1, #1
 81057ea:	f104 0008 	add.w	r0, r4, #8
 81057ee:	f7ff fd0b 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81057f2:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81057f6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 81057f8:	2d00      	cmp	r5, #0
 81057fa:	f040 8286 	bne.w	8105d0a <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81057fe:	4fae      	ldr	r7, [pc, #696]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8105800:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8105804:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105806:	f021 0107 	bic.w	r1, r1, #7
 810580a:	4301      	orrs	r1, r0
 810580c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810580e:	0698      	lsls	r0, r3, #26
 8105810:	d51f      	bpl.n	8105852 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105812:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8105816:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 810581a:	f000 82f7 	beq.w	8105e0c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 810581e:	f200 810b 	bhi.w	8105a38 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8105822:	b159      	cbz	r1, 810583c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8105824:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8105828:	f040 8110 	bne.w	8105a4c <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810582c:	2100      	movs	r1, #0
 810582e:	f104 0008 	add.w	r0, r4, #8
 8105832:	f7ff fce9 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105836:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810583a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 810583c:	2d00      	cmp	r5, #0
 810583e:	f040 8260 	bne.w	8105d02 <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105842:	4f9d      	ldr	r7, [pc, #628]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8105844:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8105848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 810584a:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 810584e:	4301      	orrs	r1, r0
 8105850:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105852:	0659      	lsls	r1, r3, #25
 8105854:	d51f      	bpl.n	8105896 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105856:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 810585a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 810585e:	f000 829b 	beq.w	8105d98 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8105862:	f200 80f6 	bhi.w	8105a52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105866:	b159      	cbz	r1, 8105880 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8105868:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810586c:	f040 80fb 	bne.w	8105a66 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105870:	2100      	movs	r1, #0
 8105872:	f104 0008 	add.w	r0, r4, #8
 8105876:	f7ff fcc7 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810587a:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810587e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8105880:	2d00      	cmp	r5, #0
 8105882:	f040 824e 	bne.w	8105d22 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105886:	4f8c      	ldr	r7, [pc, #560]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8105888:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 810588c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810588e:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8105892:	4301      	orrs	r1, r0
 8105894:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105896:	061f      	lsls	r7, r3, #24
 8105898:	d51f      	bpl.n	81058da <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
 810589a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 810589e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 81058a2:	f000 8289 	beq.w	8105db8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 81058a6:	f200 80e1 	bhi.w	8105a6c <HAL_RCCEx_PeriphCLKConfig+0x67c>
 81058aa:	b159      	cbz	r1, 81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 81058ac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 81058b0:	f040 80e6 	bne.w	8105a80 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81058b4:	2100      	movs	r1, #0
 81058b6:	f104 0008 	add.w	r0, r4, #8
 81058ba:	f7ff fca5 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81058be:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81058c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 81058c4:	2d00      	cmp	r5, #0
 81058c6:	f040 8228 	bne.w	8105d1a <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81058ca:	4f7b      	ldr	r7, [pc, #492]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 81058cc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 81058d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81058d2:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 81058d6:	4301      	orrs	r1, r0
 81058d8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81058da:	0718      	lsls	r0, r3, #28
 81058dc:	d50b      	bpl.n	81058f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81058de:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 81058e2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 81058e6:	f000 82a9 	beq.w	8105e3c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81058ea:	4f73      	ldr	r7, [pc, #460]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 81058ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 81058ee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 81058f2:	4301      	orrs	r1, r0
 81058f4:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81058f6:	06d9      	lsls	r1, r3, #27
 81058f8:	d50b      	bpl.n	8105912 <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81058fa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 81058fe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8105902:	f000 82a8 	beq.w	8105e56 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105906:	4f6c      	ldr	r7, [pc, #432]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8105908:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810590a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 810590e:	4301      	orrs	r1, r0
 8105910:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105912:	031f      	lsls	r7, r3, #12
 8105914:	d50e      	bpl.n	8105934 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
 8105916:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 810591a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 810591e:	f000 80f4 	beq.w	8105b0a <HAL_RCCEx_PeriphCLKConfig+0x71a>
 8105922:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8105926:	f000 80f8 	beq.w	8105b1a <HAL_RCCEx_PeriphCLKConfig+0x72a>
 810592a:	2900      	cmp	r1, #0
 810592c:	f000 821c 	beq.w	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x978>
 8105930:	2601      	movs	r6, #1
 8105932:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105934:	0358      	lsls	r0, r3, #13
 8105936:	d50f      	bpl.n	8105958 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
 8105938:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 810593c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8105940:	f000 80cf 	beq.w	8105ae2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8105944:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8105948:	f000 80d3 	beq.w	8105af2 <HAL_RCCEx_PeriphCLKConfig+0x702>
 810594c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8105950:	f000 8202 	beq.w	8105d58 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8105954:	2601      	movs	r6, #1
 8105956:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105958:	03d9      	lsls	r1, r3, #15
 810595a:	d509      	bpl.n	8105970 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
 810595c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 810595e:	2900      	cmp	r1, #0
 8105960:	f000 81f1 	beq.w	8105d46 <HAL_RCCEx_PeriphCLKConfig+0x956>
 8105964:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8105968:	f000 819d 	beq.w	8105ca6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 810596c:	2601      	movs	r6, #1
 810596e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105970:	009f      	lsls	r7, r3, #2
 8105972:	f100 80f1 	bmi.w	8105b58 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105976:	0398      	lsls	r0, r3, #14
 8105978:	d50c      	bpl.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
 810597a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 810597e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8105982:	f000 81d8 	beq.w	8105d36 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8105986:	d97e      	bls.n	8105a86 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8105988:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 810598c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8105990:	d07b      	beq.n	8105a8a <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8105992:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105994:	02d9      	lsls	r1, r3, #11
 8105996:	d506      	bpl.n	81059a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105998:	4847      	ldr	r0, [pc, #284]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 810599a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 810599c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 810599e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81059a2:	4329      	orrs	r1, r5
 81059a4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81059a6:	00df      	lsls	r7, r3, #3
 81059a8:	d507      	bpl.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81059aa:	4843      	ldr	r0, [pc, #268]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 81059ac:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 81059b0:	6901      	ldr	r1, [r0, #16]
 81059b2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 81059b6:	4329      	orrs	r1, r5
 81059b8:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81059ba:	029d      	lsls	r5, r3, #10
 81059bc:	d506      	bpl.n	81059cc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81059be:	483e      	ldr	r0, [pc, #248]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 81059c0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 81059c2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 81059c4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 81059c8:	4329      	orrs	r1, r5
 81059ca:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81059cc:	0058      	lsls	r0, r3, #1
 81059ce:	d509      	bpl.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81059d0:	4939      	ldr	r1, [pc, #228]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 81059d2:	6908      	ldr	r0, [r1, #16]
 81059d4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 81059d8:	6108      	str	r0, [r1, #16]
 81059da:	6908      	ldr	r0, [r1, #16]
 81059dc:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 81059e0:	4328      	orrs	r0, r5
 81059e2:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81059e4:	2b00      	cmp	r3, #0
 81059e6:	da06      	bge.n	81059f6 <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81059e8:	4833      	ldr	r0, [pc, #204]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 81059ea:	6d65      	ldr	r5, [r4, #84]	; 0x54
 81059ec:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 81059ee:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 81059f2:	4329      	orrs	r1, r5
 81059f4:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81059f6:	0219      	lsls	r1, r3, #8
 81059f8:	d507      	bpl.n	8105a0a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81059fa:	492f      	ldr	r1, [pc, #188]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 81059fc:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8105a00:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8105a02:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8105a06:	4303      	orrs	r3, r0
 8105a08:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105a0a:	07d3      	lsls	r3, r2, #31
 8105a0c:	f100 80b0 	bmi.w	8105b70 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105a10:	0797      	lsls	r7, r2, #30
 8105a12:	f100 80ba 	bmi.w	8105b8a <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105a16:	0755      	lsls	r5, r2, #29
 8105a18:	f100 80c4 	bmi.w	8105ba4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105a1c:	0710      	lsls	r0, r2, #28
 8105a1e:	f100 80ce 	bmi.w	8105bbe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105a22:	06d1      	lsls	r1, r2, #27
 8105a24:	f100 80d8 	bmi.w	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105a28:	0692      	lsls	r2, r2, #26
 8105a2a:	f100 8125 	bmi.w	8105c78 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
 8105a2e:	1e30      	subs	r0, r6, #0
 8105a30:	bf18      	it	ne
 8105a32:	2001      	movne	r0, #1
}
 8105a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105a38:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8105a3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8105a40:	f43f aefc 	beq.w	810583c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8105a44:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8105a48:	f43f aef8 	beq.w	810583c <HAL_RCCEx_PeriphCLKConfig+0x44c>
 8105a4c:	2601      	movs	r6, #1
 8105a4e:	4635      	mov	r5, r6
 8105a50:	e6ff      	b.n	8105852 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105a52:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8105a56:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8105a5a:	f43f af11 	beq.w	8105880 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8105a5e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8105a62:	f43f af0d 	beq.w	8105880 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8105a66:	2601      	movs	r6, #1
 8105a68:	4635      	mov	r5, r6
 8105a6a:	e714      	b.n	8105896 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105a6c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8105a70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8105a74:	f43f af26 	beq.w	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8105a78:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8105a7c:	f43f af22 	beq.w	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8105a80:	2601      	movs	r6, #1
 8105a82:	4635      	mov	r5, r6
 8105a84:	e729      	b.n	81058da <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
 8105a86:	2900      	cmp	r1, #0
 8105a88:	d183      	bne.n	8105992 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
 8105a8a:	2d00      	cmp	r5, #0
 8105a8c:	f040 8151 	bne.w	8105d32 <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105a90:	4d09      	ldr	r5, [pc, #36]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8105a92:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8105a94:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8105a98:	4301      	orrs	r1, r0
 8105a9a:	6569      	str	r1, [r5, #84]	; 0x54
 8105a9c:	e77a      	b.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8105a9e:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8105aa0:	2d00      	cmp	r5, #0
 8105aa2:	f040 80fb 	bne.w	8105c9c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105aa6:	4f04      	ldr	r7, [pc, #16]	; (8105ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8105aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105aaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8105aac:	f021 0107 	bic.w	r1, r1, #7
 8105ab0:	4301      	orrs	r1, r0
 8105ab2:	6539      	str	r1, [r7, #80]	; 0x50
 8105ab4:	e4d7      	b.n	8105466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105ab6:	bf00      	nop
 8105ab8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105abc:	2101      	movs	r1, #1
 8105abe:	f104 0008 	add.w	r0, r4, #8
 8105ac2:	f7ff fba1 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105ac6:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105aca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8105acc:	2d00      	cmp	r5, #0
 8105ace:	f040 811a 	bne.w	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105ad2:	4fb7      	ldr	r7, [pc, #732]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105ad4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8105ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8105ad8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8105adc:	4301      	orrs	r1, r0
 8105ade:	6539      	str	r1, [r7, #80]	; 0x50
 8105ae0:	e5b6      	b.n	8105650 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105ae2:	2101      	movs	r1, #1
 8105ae4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105ae8:	f7ff fc08 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105aec:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105af0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8105af2:	2d00      	cmp	r5, #0
 8105af4:	f040 811b 	bne.w	8105d2e <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105af8:	4fad      	ldr	r7, [pc, #692]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105afa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8105afe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8105b00:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8105b04:	4301      	orrs	r1, r0
 8105b06:	6579      	str	r1, [r7, #84]	; 0x54
 8105b08:	e726      	b.n	8105958 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105b0a:	2102      	movs	r1, #2
 8105b0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105b10:	f7ff fbf4 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105b14:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105b18:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8105b1a:	2d00      	cmp	r5, #0
 8105b1c:	f040 8105 	bne.w	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105b20:	4fa3      	ldr	r7, [pc, #652]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105b22:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8105b26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105b28:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8105b2c:	4301      	orrs	r1, r0
 8105b2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8105b30:	e700      	b.n	8105934 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b32:	2101      	movs	r1, #1
 8105b34:	f104 0008 	add.w	r0, r4, #8
 8105b38:	f7ff fb66 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105b3c:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b40:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8105b42:	2d00      	cmp	r5, #0
 8105b44:	f040 80db 	bne.w	8105cfe <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105b48:	4f99      	ldr	r7, [pc, #612]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105b4a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8105b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8105b4e:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8105b52:	4301      	orrs	r1, r0
 8105b54:	6579      	str	r1, [r7, #84]	; 0x54
 8105b56:	e615      	b.n	8105784 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105b58:	2102      	movs	r1, #2
 8105b5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105b5e:	f7ff fbcd 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105b62:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105b66:	2800      	cmp	r0, #0
 8105b68:	f43f af05 	beq.w	8105976 <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
 8105b6c:	2601      	movs	r6, #1
 8105b6e:	e702      	b.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b70:	2100      	movs	r1, #0
 8105b72:	f104 0008 	add.w	r0, r4, #8
 8105b76:	f7ff fb47 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105b7a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8105b7c:	2800      	cmp	r0, #0
 8105b7e:	f43f af47 	beq.w	8105a10 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105b82:	0797      	lsls	r7, r2, #30
 8105b84:	4606      	mov	r6, r0
 8105b86:	f57f af46 	bpl.w	8105a16 <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b8a:	2101      	movs	r1, #1
 8105b8c:	f104 0008 	add.w	r0, r4, #8
 8105b90:	f7ff fb3a 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105b94:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8105b96:	2800      	cmp	r0, #0
 8105b98:	f43f af3d 	beq.w	8105a16 <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105b9c:	0755      	lsls	r5, r2, #29
 8105b9e:	4606      	mov	r6, r0
 8105ba0:	f57f af3c 	bpl.w	8105a1c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105ba4:	2102      	movs	r1, #2
 8105ba6:	f104 0008 	add.w	r0, r4, #8
 8105baa:	f7ff fb2d 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105bae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8105bb0:	2800      	cmp	r0, #0
 8105bb2:	f43f af33 	beq.w	8105a1c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105bb6:	4606      	mov	r6, r0
 8105bb8:	0710      	lsls	r0, r2, #28
 8105bba:	f57f af32 	bpl.w	8105a22 <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105bbe:	2100      	movs	r1, #0
 8105bc0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105bc4:	f7ff fb9a 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105bc8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8105bca:	2800      	cmp	r0, #0
 8105bcc:	f43f af29 	beq.w	8105a22 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105bd0:	06d1      	lsls	r1, r2, #27
 8105bd2:	4606      	mov	r6, r0
 8105bd4:	f57f af28 	bpl.w	8105a28 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105bd8:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8105bdc:	2101      	movs	r1, #1
 8105bde:	4628      	mov	r0, r5
 8105be0:	f7ff fb8c 	bl	81052fc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8105be4:	2800      	cmp	r0, #0
 8105be6:	f000 80c9 	beq.w	8105d7c <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105bea:	6863      	ldr	r3, [r4, #4]
 8105bec:	069b      	lsls	r3, r3, #26
 8105bee:	d54c      	bpl.n	8105c8a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8105bf0:	4606      	mov	r6, r0
 8105bf2:	e043      	b.n	8105c7c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105bf4:	4f6f      	ldr	r7, [pc, #444]	; (8105db4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8105bf6:	683b      	ldr	r3, [r7, #0]
 8105bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105bfc:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8105bfe:	f7fd f933 	bl	8102e68 <HAL_GetTick>
 8105c02:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105c04:	e006      	b.n	8105c14 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105c06:	f7fd f92f 	bl	8102e68 <HAL_GetTick>
 8105c0a:	eba0 0008 	sub.w	r0, r0, r8
 8105c0e:	2864      	cmp	r0, #100	; 0x64
 8105c10:	f200 81a0 	bhi.w	8105f54 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105c14:	683b      	ldr	r3, [r7, #0]
 8105c16:	05da      	lsls	r2, r3, #23
 8105c18:	d5f5      	bpl.n	8105c06 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
 8105c1a:	2d00      	cmp	r5, #0
 8105c1c:	f040 81d4 	bne.w	8105fc8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105c20:	4a63      	ldr	r2, [pc, #396]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105c22:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8105c26:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8105c28:	4059      	eors	r1, r3
 8105c2a:	f411 7f40 	tst.w	r1, #768	; 0x300
 8105c2e:	d00b      	beq.n	8105c48 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105c30:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8105c32:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8105c34:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8105c38:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105c3a:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105c3c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105c40:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8105c44:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8105c46:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c4c:	f000 819e 	beq.w	8105f8c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105c50:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8105c54:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8105c58:	f000 81ac 	beq.w	8105fb4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
 8105c5c:	4954      	ldr	r1, [pc, #336]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105c5e:	690a      	ldr	r2, [r1, #16]
 8105c60:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8105c64:	610a      	str	r2, [r1, #16]
 8105c66:	4a52      	ldr	r2, [pc, #328]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105c68:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8105c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105c6e:	430b      	orrs	r3, r1
 8105c70:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105c72:	e9d4 3200 	ldrd	r3, r2, [r4]
 8105c76:	e553      	b.n	8105720 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c78:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c7c:	2102      	movs	r1, #2
 8105c7e:	4628      	mov	r0, r5
 8105c80:	f7ff fb3c 	bl	81052fc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8105c84:	2800      	cmp	r0, #0
 8105c86:	f43f aed2 	beq.w	8105a2e <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
 8105c8a:	2001      	movs	r0, #1
}
 8105c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8105c90:	462e      	mov	r6, r5
 8105c92:	e450      	b.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8105c94:	462e      	mov	r6, r5
 8105c96:	e406      	b.n	81054a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8105c98:	462e      	mov	r6, r5
 8105c9a:	e489      	b.n	81055b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8105c9c:	462e      	mov	r6, r5
 8105c9e:	f7ff bbe2 	b.w	8105466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105ca2:	462e      	mov	r6, r5
 8105ca4:	e423      	b.n	81054ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105ca6:	2102      	movs	r1, #2
 8105ca8:	f104 0008 	add.w	r0, r4, #8
 8105cac:	f7ff faac 	bl	8105208 <RCCEx_PLL2_Config>
 8105cb0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105cb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105cb6:	2d00      	cmp	r5, #0
 8105cb8:	d14c      	bne.n	8105d54 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105cba:	4f3d      	ldr	r7, [pc, #244]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105cbc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8105cbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8105cc0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8105cc4:	4301      	orrs	r1, r0
 8105cc6:	64f9      	str	r1, [r7, #76]	; 0x4c
 8105cc8:	e652      	b.n	8105970 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cca:	4839      	ldr	r0, [pc, #228]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105ccc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105cce:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105cd2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8105cd4:	e462      	b.n	810559c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cd6:	4836      	ldr	r0, [pc, #216]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105cd8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105cda:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105cde:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8105ce0:	e41e      	b.n	8105520 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ce2:	4833      	ldr	r0, [pc, #204]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105ce4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105ce6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105cea:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8105cec:	f7ff bbd1 	b.w	8105492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cf0:	482f      	ldr	r0, [pc, #188]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105cf2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105cf4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105cf8:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8105cfa:	f7ff bbed 	b.w	81054d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8105cfe:	462e      	mov	r6, r5
 8105d00:	e540      	b.n	8105784 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8105d02:	462e      	mov	r6, r5
 8105d04:	e5a5      	b.n	8105852 <HAL_RCCEx_PeriphCLKConfig+0x462>
 8105d06:	462e      	mov	r6, r5
 8105d08:	e4a2      	b.n	8105650 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8105d0a:	462e      	mov	r6, r5
 8105d0c:	e57f      	b.n	810580e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8105d0e:	462e      	mov	r6, r5
 8105d10:	e42c      	b.n	810556c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8105d12:	462e      	mov	r6, r5
 8105d14:	e501      	b.n	810571a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8105d16:	462e      	mov	r6, r5
 8105d18:	e46a      	b.n	81055f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8105d1a:	462e      	mov	r6, r5
 8105d1c:	e5dd      	b.n	81058da <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8105d1e:	462e      	mov	r6, r5
 8105d20:	e486      	b.n	8105630 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8105d22:	462e      	mov	r6, r5
 8105d24:	e5b7      	b.n	8105896 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105d26:	462e      	mov	r6, r5
 8105d28:	e54c      	b.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8105d2a:	462e      	mov	r6, r5
 8105d2c:	e602      	b.n	8105934 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8105d2e:	462e      	mov	r6, r5
 8105d30:	e612      	b.n	8105958 <HAL_RCCEx_PeriphCLKConfig+0x568>
 8105d32:	462e      	mov	r6, r5
 8105d34:	e62e      	b.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d36:	4f1e      	ldr	r7, [pc, #120]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8105d3a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8105d3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 8105d40:	2d00      	cmp	r5, #0
 8105d42:	d1f6      	bne.n	8105d32 <HAL_RCCEx_PeriphCLKConfig+0x942>
 8105d44:	e6a4      	b.n	8105a90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d46:	481a      	ldr	r0, [pc, #104]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105d48:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105d4a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105d4e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8105d50:	2d00      	cmp	r5, #0
 8105d52:	d0b2      	beq.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8105d54:	462e      	mov	r6, r5
 8105d56:	e60b      	b.n	8105970 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d58:	4815      	ldr	r0, [pc, #84]	; (8105db0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8105d5a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105d5c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105d60:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8105d62:	2d00      	cmp	r5, #0
 8105d64:	d1e3      	bne.n	8105d2e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8105d66:	e6c7      	b.n	8105af8 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105d68:	f104 0008 	add.w	r0, r4, #8
 8105d6c:	f7ff fa4c 	bl	8105208 <RCCEx_PLL2_Config>
 8105d70:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105d72:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105d76:	2d00      	cmp	r5, #0
 8105d78:	d1d7      	bne.n	8105d2a <HAL_RCCEx_PeriphCLKConfig+0x93a>
 8105d7a:	e6d1      	b.n	8105b20 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105d7c:	6862      	ldr	r2, [r4, #4]
 8105d7e:	e653      	b.n	8105a28 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105d80:	2102      	movs	r1, #2
 8105d82:	f104 0008 	add.w	r0, r4, #8
 8105d86:	f7ff fa3f 	bl	8105208 <RCCEx_PLL2_Config>
 8105d8a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105d8c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105d90:	2d00      	cmp	r5, #0
 8105d92:	d1bc      	bne.n	8105d0e <HAL_RCCEx_PeriphCLKConfig+0x91e>
 8105d94:	f7ff bbe3 	b.w	810555e <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105d98:	2102      	movs	r1, #2
 8105d9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105d9e:	f7ff faad 	bl	81052fc <RCCEx_PLL3_Config>
 8105da2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105da4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105da8:	2d00      	cmp	r5, #0
 8105daa:	d1ba      	bne.n	8105d22 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8105dac:	e56b      	b.n	8105886 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8105dae:	bf00      	nop
 8105db0:	58024400 	.word	0x58024400
 8105db4:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105db8:	2102      	movs	r1, #2
 8105dba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105dbe:	f7ff fa9d 	bl	81052fc <RCCEx_PLL3_Config>
 8105dc2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105dc4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105dc8:	2d00      	cmp	r5, #0
 8105dca:	d1a6      	bne.n	8105d1a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8105dcc:	e57d      	b.n	81058ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105dce:	4886      	ldr	r0, [pc, #536]	; (8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8105dd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105dd2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105dd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8105dd8:	2d00      	cmp	r5, #0
 8105dda:	d194      	bne.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8105ddc:	e679      	b.n	8105ad2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105dde:	2101      	movs	r1, #1
 8105de0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105de4:	f7ff fa8a 	bl	81052fc <RCCEx_PLL3_Config>
 8105de8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105dea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105dee:	2d00      	cmp	r5, #0
 8105df0:	d191      	bne.n	8105d16 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8105df2:	f7ff bbf6 	b.w	81055e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105df6:	2101      	movs	r1, #1
 8105df8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105dfc:	f7ff fa7e 	bl	81052fc <RCCEx_PLL3_Config>
 8105e00:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105e02:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105e06:	2d00      	cmp	r5, #0
 8105e08:	d189      	bne.n	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 8105e0a:	e409      	b.n	8105620 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105e0c:	2102      	movs	r1, #2
 8105e0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105e12:	f7ff fa73 	bl	81052fc <RCCEx_PLL3_Config>
 8105e16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105e18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105e1c:	2d00      	cmp	r5, #0
 8105e1e:	f47f af70 	bne.w	8105d02 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8105e22:	e50e      	b.n	8105842 <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105e24:	2102      	movs	r1, #2
 8105e26:	f104 0008 	add.w	r0, r4, #8
 8105e2a:	f7ff f9ed 	bl	8105208 <RCCEx_PLL2_Config>
 8105e2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105e30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105e34:	2d00      	cmp	r5, #0
 8105e36:	f47f af6c 	bne.w	8105d12 <HAL_RCCEx_PeriphCLKConfig+0x922>
 8105e3a:	e467      	b.n	810570c <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105e3c:	2102      	movs	r1, #2
 8105e3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105e42:	f7ff fa5b 	bl	81052fc <RCCEx_PLL3_Config>
 8105e46:	2800      	cmp	r0, #0
 8105e48:	f040 8094 	bne.w	8105f74 <HAL_RCCEx_PeriphCLKConfig+0xb84>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105e4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105e50:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8105e54:	e549      	b.n	81058ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105e56:	2102      	movs	r1, #2
 8105e58:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105e5c:	f7ff fa4e 	bl	81052fc <RCCEx_PLL3_Config>
 8105e60:	2800      	cmp	r0, #0
 8105e62:	f040 808d 	bne.w	8105f80 <HAL_RCCEx_PeriphCLKConfig+0xb90>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105e66:	e9d4 3200 	ldrd	r3, r2, [r4]
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105e6a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8105e6e:	e54a      	b.n	8105906 <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105e70:	e9d4 3200 	ldrd	r3, r2, [r4]
 8105e74:	f7ff bae9 	b.w	810544a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e78:	2100      	movs	r1, #0
 8105e7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105e7e:	f7ff fa3d 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105e82:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e86:	4605      	mov	r5, r0
        break;
 8105e88:	f7ff bb4a 	b.w	8105520 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e8c:	2100      	movs	r1, #0
 8105e8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105e92:	f7ff fa33 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105e96:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e9a:	4605      	mov	r5, r0
        break;
 8105e9c:	e600      	b.n	8105aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e9e:	2100      	movs	r1, #0
 8105ea0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105ea4:	f7ff fa2a 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105ea8:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105eac:	4605      	mov	r5, r0
        break;
 8105eae:	f7ff baf0 	b.w	8105492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105eb2:	2102      	movs	r1, #2
 8105eb4:	3028      	adds	r0, #40	; 0x28
 8105eb6:	f7ff fa21 	bl	81052fc <RCCEx_PLL3_Config>
 8105eba:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8105ebc:	2e00      	cmp	r6, #0
 8105ebe:	f43f aab5 	beq.w	810542c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8105ec2:	e7d5      	b.n	8105e70 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ec4:	4848      	ldr	r0, [pc, #288]	; (8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8105ec6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105ec8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
        break;
 8105ecc:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ece:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8105ed0:	e5e6      	b.n	8105aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105ed2:	2100      	movs	r1, #0
 8105ed4:	f104 0008 	add.w	r0, r4, #8
 8105ed8:	f7ff f996 	bl	8105208 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105edc:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105ee0:	4605      	mov	r5, r0
        break;
 8105ee2:	e5dd      	b.n	8105aa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105ee4:	2100      	movs	r1, #0
 8105ee6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105eea:	f7ff fa07 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105eee:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105ef2:	4605      	mov	r5, r0
        break;
 8105ef4:	f7ff bb52 	b.w	810559c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105ef8:	2100      	movs	r1, #0
 8105efa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105efe:	f7ff f9fd 	bl	81052fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105f02:	e9d4 3200 	ldrd	r3, r2, [r4]
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105f06:	4605      	mov	r5, r0
        break;
 8105f08:	f7ff bae6 	b.w	81054d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105f0c:	2101      	movs	r1, #1
 8105f0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105f12:	f7ff f9f3 	bl	81052fc <RCCEx_PLL3_Config>
 8105f16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105f18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105f1c:	2d00      	cmp	r5, #0
 8105f1e:	f47f aef4 	bne.w	8105d0a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8105f22:	e46c      	b.n	81057fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105f24:	2101      	movs	r1, #1
 8105f26:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105f2a:	f7ff f9e7 	bl	81052fc <RCCEx_PLL3_Config>
 8105f2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105f30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105f34:	2d00      	cmp	r5, #0
 8105f36:	f47f aef6 	bne.w	8105d26 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8105f3a:	e43c      	b.n	81057b6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105f3c:	2101      	movs	r1, #1
 8105f3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8105f42:	f7ff f9db 	bl	81052fc <RCCEx_PLL3_Config>
 8105f46:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105f48:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8105f4c:	2d00      	cmp	r5, #0
 8105f4e:	f47f aed6 	bne.w	8105cfe <HAL_RCCEx_PeriphCLKConfig+0x90e>
 8105f52:	e5f9      	b.n	8105b48 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
 8105f54:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105f56:	e9d4 3200 	ldrd	r3, r2, [r4]
 8105f5a:	4635      	mov	r5, r6
 8105f5c:	f7ff bbe0 	b.w	8105720 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8105f60:	2601      	movs	r6, #1
 8105f62:	f7ff ba72 	b.w	810544a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f66:	4d20      	ldr	r5, [pc, #128]	; (8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8105f68:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8105f6a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8105f6e:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8105f70:	f7ff ba64 	b.w	810543c <HAL_RCCEx_PeriphCLKConfig+0x4c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105f74:	e9d4 3200 	ldrd	r3, r2, [r4]
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105f78:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 8105f7c:	2601      	movs	r6, #1
 8105f7e:	e4b4      	b.n	81058ea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105f80:	e9d4 3200 	ldrd	r3, r2, [r4]
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105f84:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 8105f88:	2601      	movs	r6, #1
 8105f8a:	e4bc      	b.n	8105906 <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
 8105f8c:	f7fc ff6c 	bl	8102e68 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105f90:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
 8105f94:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105f96:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105f9a:	e004      	b.n	8105fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105f9c:	f7fc ff64 	bl	8102e68 <HAL_GetTick>
 8105fa0:	1bc0      	subs	r0, r0, r7
 8105fa2:	4548      	cmp	r0, r9
 8105fa4:	d8d6      	bhi.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105fa6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8105faa:	079b      	lsls	r3, r3, #30
 8105fac:	d5f6      	bpl.n	8105f9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105fae:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8105fb2:	e64d      	b.n	8105c50 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8105fb4:	480c      	ldr	r0, [pc, #48]	; (8105fe8 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8105fb6:	4a0d      	ldr	r2, [pc, #52]	; (8105fec <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8105fb8:	6901      	ldr	r1, [r0, #16]
 8105fba:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8105fbe:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8105fc2:	430a      	orrs	r2, r1
 8105fc4:	6102      	str	r2, [r0, #16]
 8105fc6:	e64e      	b.n	8105c66 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105fc8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8105fcc:	462e      	mov	r6, r5
 8105fce:	f7ff bba7 	b.w	8105720 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105fd2:	2601      	movs	r6, #1
 8105fd4:	4635      	mov	r5, r6
 8105fd6:	f7ff bbf5 	b.w	81057c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
 8105fda:	2601      	movs	r6, #1
 8105fdc:	4635      	mov	r5, r6
 8105fde:	f7ff bb9c 	b.w	810571a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105fe2:	2601      	movs	r6, #1
 8105fe4:	4635      	mov	r5, r6
 8105fe6:	e412      	b.n	810580e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8105fe8:	58024400 	.word	0x58024400
 8105fec:	00ffffcf 	.word	0x00ffffcf

08105ff0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8105ff0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105ff2:	f7ff f8a7 	bl	8105144 <HAL_RCC_GetHCLKFreq>
 8105ff6:	4b05      	ldr	r3, [pc, #20]	; (810600c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8105ff8:	4a05      	ldr	r2, [pc, #20]	; (8106010 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8105ffa:	6a1b      	ldr	r3, [r3, #32]
 8105ffc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8106000:	5cd3      	ldrb	r3, [r2, r3]
 8106002:	f003 031f 	and.w	r3, r3, #31
}
 8106006:	40d8      	lsrs	r0, r3
 8106008:	bd08      	pop	{r3, pc}
 810600a:	bf00      	nop
 810600c:	58024400 	.word	0x58024400
 8106010:	0810eb50 	.word	0x0810eb50

08106014 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8106014:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106016:	4e4f      	ldr	r6, [pc, #316]	; (8106154 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8106018:	6ab2      	ldr	r2, [r6, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810601a:	6ab4      	ldr	r4, [r6, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810601c:	6af5      	ldr	r5, [r6, #44]	; 0x2c
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810601e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
  if (pll2m != 0U)
 8106020:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8106024:	f3c4 3305 	ubfx	r3, r4, #12, #6
  if (pll2m != 0U)
 8106028:	d05d      	beq.n	81060e6 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810602a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810602e:	f3c5 1500 	ubfx	r5, r5, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8106032:	fb05 f101 	mul.w	r1, r5, r1
 8106036:	ee07 1a90 	vmov	s15, r1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810603a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 810603e:	2a01      	cmp	r2, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8106040:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    switch (pllsource)
 8106044:	d003      	beq.n	810604e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8106046:	2a02      	cmp	r2, #2
 8106048:	d076      	beq.n	8106138 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 810604a:	2a00      	cmp	r2, #0
 810604c:	d050      	beq.n	81060f0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810604e:	ee07 3a90 	vmov	s15, r3
 8106052:	eddf 6a41 	vldr	s13, [pc, #260]	; 8106158 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8106056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810605e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8106060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106064:	ee07 3a90 	vmov	s15, r3
 8106068:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 810615c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 810606c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106074:	eee5 7a86 	vfma.f32	s15, s11, s12
 8106078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810607c:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8106080:	4a34      	ldr	r2, [pc, #208]	; (8106154 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8106082:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8106084:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8106088:	ee07 3a90 	vmov	s15, r3
 810608c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106094:	ee77 7aa6 	vadd.f32	s15, s15, s13
}
 8106098:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810609a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 810609e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 81060a2:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81060a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 81060a8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 81060ac:	ee07 3a90 	vmov	s15, r3
 81060b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81060b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060b8:	ee87 6a27 	vdiv.f32	s12, s14, s15
 81060bc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 81060c0:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81060c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 81060c6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 81060ca:	ee07 3a90 	vmov	s15, r3
 81060ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 81060da:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 81060de:	ee17 3a90 	vmov	r3, s15
 81060e2:	6083      	str	r3, [r0, #8]
}
 81060e4:	4770      	bx	lr
 81060e6:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81060e8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81060ec:	6083      	str	r3, [r0, #8]
}
 81060ee:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81060f0:	6832      	ldr	r2, [r6, #0]
 81060f2:	0692      	lsls	r2, r2, #26
 81060f4:	d527      	bpl.n	8106146 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81060f6:	6831      	ldr	r1, [r6, #0]
 81060f8:	4a19      	ldr	r2, [pc, #100]	; (8106160 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81060fa:	ed9f 6a18 	vldr	s12, [pc, #96]	; 810615c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81060fe:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8106102:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106104:	ee07 3a10 	vmov	s14, r3
 8106108:	ee07 2a90 	vmov	s15, r2
 810610c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8106110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106114:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8106116:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810611e:	ee07 3a10 	vmov	s14, r3
 8106122:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8106126:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810612a:	eea5 7a86 	vfma.f32	s14, s11, s12
 810612e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8106132:	ee27 7a26 	vmul.f32	s14, s14, s13
 8106136:	e7a3      	b.n	8106080 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106138:	ee07 3a90 	vmov	s15, r3
 810613c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8106164 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8106140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106144:	e789      	b.n	810605a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106146:	ee07 3a90 	vmov	s15, r3
 810614a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8106168 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 810614e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106152:	e782      	b.n	810605a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8106154:	58024400 	.word	0x58024400
 8106158:	4a742400 	.word	0x4a742400
 810615c:	39000000 	.word	0x39000000
 8106160:	03d09000 	.word	0x03d09000
 8106164:	4bbebc20 	.word	0x4bbebc20
 8106168:	4c742400 	.word	0x4c742400

0810616c <HAL_RCCEx_GetPLL3ClockFreq>:
{
 810616c:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810616e:	4e4f      	ldr	r6, [pc, #316]	; (81062ac <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8106170:	6ab2      	ldr	r2, [r6, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8106172:	6ab4      	ldr	r4, [r6, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106174:	6af5      	ldr	r5, [r6, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106176:	6c71      	ldr	r1, [r6, #68]	; 0x44
  if (pll3m != 0U)
 8106178:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810617c:	f3c4 5305 	ubfx	r3, r4, #20, #6
  if (pll3m != 0U)
 8106180:	d05d      	beq.n	810623e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106182:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106186:	f3c5 2500 	ubfx	r5, r5, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810618a:	fb05 f101 	mul.w	r1, r5, r1
 810618e:	ee07 1a90 	vmov	s15, r1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106192:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8106196:	2a01      	cmp	r2, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106198:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    switch (pllsource)
 810619c:	d003      	beq.n	81061a6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 810619e:	2a02      	cmp	r2, #2
 81061a0:	d076      	beq.n	8106290 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 81061a2:	2a00      	cmp	r2, #0
 81061a4:	d050      	beq.n	8106248 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81061a6:	ee07 3a90 	vmov	s15, r3
 81061aa:	eddf 6a41 	vldr	s13, [pc, #260]	; 81062b0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 81061ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 81061b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061bc:	ee07 3a90 	vmov	s15, r3
 81061c0:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 81062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 81061c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81061c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061cc:	eee5 7a86 	vfma.f32	s15, s11, s12
 81061d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061d4:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81061d8:	4a34      	ldr	r2, [pc, #208]	; (81062ac <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 81061da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 81061dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 81061e0:	ee07 3a90 	vmov	s15, r3
 81061e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81061e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
}
 81061f0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81061f2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 81061f6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 81061fa:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81061fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8106200:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8106204:	ee07 3a90 	vmov	s15, r3
 8106208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810620c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106210:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8106214:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8106218:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810621c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 810621e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8106222:	ee07 3a90 	vmov	s15, r3
 8106226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810622e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8106232:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8106236:	ee17 3a90 	vmov	r3, s15
 810623a:	6083      	str	r3, [r0, #8]
}
 810623c:	4770      	bx	lr
 810623e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106240:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8106244:	6083      	str	r3, [r0, #8]
}
 8106246:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106248:	6832      	ldr	r2, [r6, #0]
 810624a:	0692      	lsls	r2, r2, #26
 810624c:	d527      	bpl.n	810629e <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810624e:	6831      	ldr	r1, [r6, #0]
 8106250:	4a19      	ldr	r2, [pc, #100]	; (81062b8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106252:	ed9f 6a18 	vldr	s12, [pc, #96]	; 81062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106256:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 810625a:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810625c:	ee07 3a10 	vmov	s14, r3
 8106260:	ee07 2a90 	vmov	s15, r2
 8106264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8106268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810626c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 810626e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8106272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106276:	ee07 3a10 	vmov	s14, r3
 810627a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810627e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8106282:	eea5 7a86 	vfma.f32	s14, s11, s12
 8106286:	ee37 7a27 	vadd.f32	s14, s14, s15
 810628a:	ee27 7a26 	vmul.f32	s14, s14, s13
 810628e:	e7a3      	b.n	81061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106290:	ee07 3a90 	vmov	s15, r3
 8106294:	eddf 6a09 	vldr	s13, [pc, #36]	; 81062bc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8106298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810629c:	e789      	b.n	81061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810629e:	ee07 3a90 	vmov	s15, r3
 81062a2:	eddf 6a07 	vldr	s13, [pc, #28]	; 81062c0 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 81062a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81062aa:	e782      	b.n	81061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 81062ac:	58024400 	.word	0x58024400
 81062b0:	4a742400 	.word	0x4a742400
 81062b4:	39000000 	.word	0x39000000
 81062b8:	03d09000 	.word	0x03d09000
 81062bc:	4bbebc20 	.word	0x4bbebc20
 81062c0:	4c742400 	.word	0x4c742400

081062c4 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 81062c4:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81062c6:	4e4f      	ldr	r6, [pc, #316]	; (8106404 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 81062c8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81062ca:	6ab4      	ldr	r4, [r6, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81062cc:	6af5      	ldr	r5, [r6, #44]	; 0x2c
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81062ce:	6b71      	ldr	r1, [r6, #52]	; 0x34
  if (pll1m != 0U)
 81062d0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81062d4:	f3c4 1305 	ubfx	r3, r4, #4, #6
  if (pll1m != 0U)
 81062d8:	d05d      	beq.n	8106396 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81062da:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81062de:	f005 0501 	and.w	r5, r5, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81062e2:	fb05 f101 	mul.w	r1, r5, r1
 81062e6:	ee07 1a90 	vmov	s15, r1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81062ea:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 81062ee:	2a01      	cmp	r2, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81062f0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    switch (pllsource)
 81062f4:	d07f      	beq.n	81063f6 <HAL_RCCEx_GetPLL1ClockFreq+0x132>
 81062f6:	2a02      	cmp	r2, #2
 81062f8:	d076      	beq.n	81063e8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 81062fa:	2a00      	cmp	r2, #0
 81062fc:	d050      	beq.n	81063a0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81062fe:	ee07 3a90 	vmov	s15, r3
 8106302:	eddf 6a41 	vldr	s13, [pc, #260]	; 8106408 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8106306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810630a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810630e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8106310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106314:	ee07 3a90 	vmov	s15, r3
 8106318:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 810640c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 810631c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106324:	eee5 7a86 	vfma.f32	s15, s11, s12
 8106328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810632c:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8106330:	4a34      	ldr	r2, [pc, #208]	; (8106404 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8106332:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8106334:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8106338:	ee07 3a90 	vmov	s15, r3
 810633c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106340:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106344:	ee77 7aa6 	vadd.f32	s15, s15, s13
}
 8106348:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810634a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 810634e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8106352:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8106356:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8106358:	f3c3 4306 	ubfx	r3, r3, #16, #7
 810635c:	ee07 3a90 	vmov	s15, r3
 8106360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106364:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106368:	ee87 6a27 	vdiv.f32	s12, s14, s15
 810636c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8106370:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8106374:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8106376:	f3c3 6306 	ubfx	r3, r3, #24, #7
 810637a:	ee07 3a90 	vmov	s15, r3
 810637e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106386:	eec7 6a27 	vdiv.f32	s13, s14, s15
 810638a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 810638e:	ee17 3a90 	vmov	r3, s15
 8106392:	6083      	str	r3, [r0, #8]
}
 8106394:	4770      	bx	lr
 8106396:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106398:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810639c:	6083      	str	r3, [r0, #8]
}
 810639e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81063a0:	6832      	ldr	r2, [r6, #0]
 81063a2:	0692      	lsls	r2, r2, #26
 81063a4:	d5ab      	bpl.n	81062fe <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81063a6:	6831      	ldr	r1, [r6, #0]
 81063a8:	4a19      	ldr	r2, [pc, #100]	; (8106410 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063aa:	ed9f 6a18 	vldr	s12, [pc, #96]	; 810640c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81063ae:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 81063b2:	40ca      	lsrs	r2, r1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063b4:	ee07 3a10 	vmov	s14, r3
 81063b8:	ee07 2a90 	vmov	s15, r2
 81063bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81063c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81063c4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 81063c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81063ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063ce:	ee07 3a10 	vmov	s14, r3
 81063d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81063d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 81063da:	eea5 7a86 	vfma.f32	s14, s11, s12
 81063de:	ee37 7a27 	vadd.f32	s14, s14, s15
 81063e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 81063e6:	e7a3      	b.n	8106330 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063e8:	ee07 3a90 	vmov	s15, r3
 81063ec:	eddf 6a09 	vldr	s13, [pc, #36]	; 8106414 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 81063f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81063f4:	e789      	b.n	810630a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81063f6:	ee07 3a90 	vmov	s15, r3
 81063fa:	eddf 6a07 	vldr	s13, [pc, #28]	; 8106418 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 81063fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106402:	e782      	b.n	810630a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8106404:	58024400 	.word	0x58024400
 8106408:	4c742400 	.word	0x4c742400
 810640c:	39000000 	.word	0x39000000
 8106410:	03d09000 	.word	0x03d09000
 8106414:	4bbebc20 	.word	0x4bbebc20
 8106418:	4a742400 	.word	0x4a742400

0810641c <HAL_RCCEx_GetPeriphCLKFreq>:
{
 810641c:	b500      	push	{lr}
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810641e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8106422:	430b      	orrs	r3, r1
{
 8106424:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106426:	f000 8086 	beq.w	8106536 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810642a:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 810642e:	430b      	orrs	r3, r1
 8106430:	d03b      	beq.n	81064aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106432:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8106436:	430b      	orrs	r3, r1
 8106438:	f000 80f2 	beq.w	8106620 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810643c:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8106440:	430b      	orrs	r3, r1
 8106442:	f000 808b 	beq.w	810655c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106446:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 810644a:	430b      	orrs	r3, r1
 810644c:	d063      	beq.n	8106516 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810644e:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8106452:	430b      	orrs	r3, r1
 8106454:	f000 8115 	beq.w	8106682 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106458:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 810645c:	430b      	orrs	r3, r1
 810645e:	f000 80a5 	beq.w	81065ac <HAL_RCCEx_GetPeriphCLKFreq+0x190>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106462:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8106466:	430b      	orrs	r3, r1
 8106468:	f000 80fb 	beq.w	8106662 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810646c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8106470:	430b      	orrs	r3, r1
 8106472:	f000 813d 	beq.w	81066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8106476:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 810647a:	4308      	orrs	r0, r1
 810647c:	f040 80c9 	bne.w	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8106480:	4a96      	ldr	r2, [pc, #600]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8106482:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8106484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8106488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810648c:	f000 8085 	beq.w	810659a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8106490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106494:	f000 814f 	beq.w	8106736 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8106498:	2b00      	cmp	r3, #0
 810649a:	f040 80ba 	bne.w	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810649e:	6810      	ldr	r0, [r2, #0]
 81064a0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 81064a4:	d044      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          frequency = HSE_VALUE;
 81064a6:	488e      	ldr	r0, [pc, #568]	; (81066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 81064a8:	e042      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81064aa:	4a8c      	ldr	r2, [pc, #560]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81064ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 81064ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 81064b2:	2b80      	cmp	r3, #128	; 0x80
 81064b4:	f000 80af 	beq.w	8106616 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
 81064b8:	d91f      	bls.n	81064fa <HAL_RCCEx_GetPeriphCLKFreq+0xde>
 81064ba:	2bc0      	cmp	r3, #192	; 0xc0
 81064bc:	d037      	beq.n	810652e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 81064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81064c2:	f040 80a6 	bne.w	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81064c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81064c8:	6811      	ldr	r1, [r2, #0]
 81064ca:	0749      	lsls	r1, r1, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81064cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81064d0:	f100 8090 	bmi.w	81065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81064d4:	4a81      	ldr	r2, [pc, #516]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81064d6:	6812      	ldr	r2, [r2, #0]
 81064d8:	05d1      	lsls	r1, r2, #23
 81064da:	d503      	bpl.n	81064e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 81064dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81064e0:	f000 80cd 	beq.w	810667e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81064e4:	4a7d      	ldr	r2, [pc, #500]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81064e6:	6810      	ldr	r0, [r2, #0]
 81064e8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 81064ec:	d020      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          frequency = HSE_VALUE;
 81064ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064f2:	487b      	ldr	r0, [pc, #492]	; (81066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 81064f4:	bf18      	it	ne
 81064f6:	2000      	movne	r0, #0
 81064f8:	e01a      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    switch (saiclocksource)
 81064fa:	2b00      	cmp	r3, #0
 81064fc:	d04d      	beq.n	810659a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 81064fe:	2b40      	cmp	r3, #64	; 0x40
 8106500:	f040 8087 	bne.w	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106504:	6810      	ldr	r0, [r2, #0]
 8106506:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 810650a:	d011      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810650c:	a801      	add	r0, sp, #4
 810650e:	f7ff fd81 	bl	8106014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106512:	9801      	ldr	r0, [sp, #4]
 8106514:	e00c      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8106516:	4a71      	ldr	r2, [pc, #452]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8106518:	6d13      	ldr	r3, [r2, #80]	; 0x50
 810651a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 810651e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106522:	d078      	beq.n	8106616 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
 8106524:	d937      	bls.n	8106596 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8106526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810652a:	f040 8091 	bne.w	8106650 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
        frequency = EXTERNAL_CLOCK_VALUE;
 810652e:	486d      	ldr	r0, [pc, #436]	; (81066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
}
 8106530:	b005      	add	sp, #20
 8106532:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106536:	4b69      	ldr	r3, [pc, #420]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8106538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810653a:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 810653e:	2b04      	cmp	r3, #4
 8106540:	d867      	bhi.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8106542:	a201      	add	r2, pc, #4	; (adr r2, 8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8106544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106548:	081065e9 	.word	0x081065e9
 810654c:	081065c5 	.word	0x081065c5
 8106550:	081065d5 	.word	0x081065d5
 8106554:	0810652f 	.word	0x0810652f
 8106558:	081065d1 	.word	0x081065d1
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810655c:	4a5f      	ldr	r2, [pc, #380]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 810655e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8106560:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8106564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106568:	d055      	beq.n	8106616 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
 810656a:	d94c      	bls.n	8106606 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 810656c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106570:	d0dd      	beq.n	810652e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8106572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106576:	d14c      	bne.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106578:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810657a:	6812      	ldr	r2, [r2, #0]
 810657c:	0750      	lsls	r0, r2, #29
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810657e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106582:	d5a7      	bpl.n	81064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8106584:	2b00      	cmp	r3, #0
 8106586:	d1a5      	bne.n	81064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106588:	4b54      	ldr	r3, [pc, #336]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 810658a:	4857      	ldr	r0, [pc, #348]	; (81066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106592:	40d8      	lsrs	r0, r3
 8106594:	e7cc      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    switch (srcclk)
 8106596:	2b00      	cmp	r3, #0
 8106598:	d15e      	bne.n	8106658 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810659a:	6810      	ldr	r0, [r2, #0]
 810659c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 81065a0:	d0c6      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81065a2:	a801      	add	r0, sp, #4
 81065a4:	f7ff fe8e 	bl	81062c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81065a8:	9802      	ldr	r0, [sp, #8]
 81065aa:	e7c1      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81065ac:	4a4b      	ldr	r2, [pc, #300]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81065ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81065b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 81065b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81065b8:	f000 80c7 	beq.w	810674a <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 81065bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81065c0:	d0da      	beq.n	8106578 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 81065c2:	bb33      	cbnz	r3, 8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81065c4:	4b45      	ldr	r3, [pc, #276]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81065c6:	6818      	ldr	r0, [r3, #0]
 81065c8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 81065cc:	d0b0      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 81065ce:	e79d      	b.n	810650c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81065d0:	4a42      	ldr	r2, [pc, #264]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81065d2:	e778      	b.n	81064c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81065d4:	4b41      	ldr	r3, [pc, #260]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81065d6:	6818      	ldr	r0, [r3, #0]
 81065d8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 81065dc:	d0a8      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81065de:	a801      	add	r0, sp, #4
 81065e0:	f7ff fdc4 	bl	810616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81065e4:	9801      	ldr	r0, [sp, #4]
 81065e6:	e7a3      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81065e8:	4b3c      	ldr	r3, [pc, #240]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81065ea:	6818      	ldr	r0, [r3, #0]
 81065ec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 81065f0:	d09e      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 81065f2:	e7d6      	b.n	81065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81065f4:	2b00      	cmp	r3, #0
 81065f6:	f47f af6d 	bne.w	81064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81065fa:	6813      	ldr	r3, [r2, #0]
 81065fc:	483a      	ldr	r0, [pc, #232]	; (81066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81065fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106602:	40d8      	lsrs	r0, r3
 8106604:	e794      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    switch (saiclocksource)
 8106606:	2b00      	cmp	r3, #0
 8106608:	d0c7      	beq.n	810659a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 810660a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810660e:	f43f af79 	beq.w	8106504 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
    switch (srcclk)
 8106612:	2000      	movs	r0, #0
  return frequency;
 8106614:	e78c      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106616:	6810      	ldr	r0, [r2, #0]
 8106618:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 810661c:	d088      	beq.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 810661e:	e7de      	b.n	81065de <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8106620:	4a2e      	ldr	r2, [pc, #184]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8106622:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8106624:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8106628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810662c:	d0f3      	beq.n	8106616 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
 810662e:	d806      	bhi.n	810663e <HAL_RCCEx_GetPeriphCLKFreq+0x222>
 8106630:	2b00      	cmp	r3, #0
 8106632:	d0b2      	beq.n	810659a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8106634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106638:	f43f af64 	beq.w	8106504 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810663c:	e7e9      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 810663e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106642:	f43f af74 	beq.w	810652e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8106646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810664a:	f43f af3c 	beq.w	81064c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 810664e:	e7e0      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
    switch (srcclk)
 8106650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106654:	d090      	beq.n	8106578 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8106656:	e7dc      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8106658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810665c:	f43f af52 	beq.w	8106504 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8106660:	e7d7      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8106662:	4b1e      	ldr	r3, [pc, #120]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8106664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8106666:	03d2      	lsls	r2, r2, #15
 8106668:	d5bf      	bpl.n	81065ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810666a:	6818      	ldr	r0, [r3, #0]
 810666c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8106670:	f43f af5e 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106674:	a801      	add	r0, sp, #4
 8106676:	f7ff fccd 	bl	8106014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810667a:	9803      	ldr	r0, [sp, #12]
 810667c:	e758      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          frequency = CSI_VALUE;
 810667e:	481b      	ldr	r0, [pc, #108]	; (81066ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8106680:	e756      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8106682:	4a16      	ldr	r2, [pc, #88]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8106684:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8106686:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 810668a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810668e:	d066      	beq.n	810675e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8106690:	d810      	bhi.n	81066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 8106692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106696:	d04e      	beq.n	8106736 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8106698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810669c:	d117      	bne.n	81066ce <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810669e:	4b0f      	ldr	r3, [pc, #60]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81066a0:	6818      	ldr	r0, [r3, #0]
 81066a2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 81066a6:	f43f af43 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81066aa:	a801      	add	r0, sp, #4
 81066ac:	f7ff fd5e 	bl	810616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81066b0:	9802      	ldr	r0, [sp, #8]
 81066b2:	e73d      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    switch (srcclk)
 81066b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81066b8:	d057      	beq.n	810676a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81066ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81066be:	d1a8      	bne.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81066c0:	4b06      	ldr	r3, [pc, #24]	; (81066dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 81066c2:	6818      	ldr	r0, [r3, #0]
 81066c4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 81066c8:	f43f af32 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 81066cc:	e6eb      	b.n	81064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
    switch (srcclk)
 81066ce:	2b00      	cmp	r3, #0
 81066d0:	d19f      	bne.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
}
 81066d2:	b005      	add	sp, #20
 81066d4:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 81066d8:	f7fe bd72 	b.w	81051c0 <HAL_RCC_GetPCLK1Freq>
 81066dc:	58024400 	.word	0x58024400
 81066e0:	017d7840 	.word	0x017d7840
 81066e4:	00bb8000 	.word	0x00bb8000
 81066e8:	03d09000 	.word	0x03d09000
 81066ec:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81066f0:	4b2f      	ldr	r3, [pc, #188]	; (81067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>)
 81066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81066f4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 81066f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81066fc:	d044      	beq.n	8106788 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 81066fe:	d813      	bhi.n	8106728 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8106700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106704:	d04c      	beq.n	81067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8106706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810670a:	d0c8      	beq.n	810669e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810670c:	2b00      	cmp	r3, #0
 810670e:	d180      	bne.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106710:	f7fe fd18 	bl	8105144 <HAL_RCC_GetHCLKFreq>
 8106714:	4b26      	ldr	r3, [pc, #152]	; (81067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>)
 8106716:	4a27      	ldr	r2, [pc, #156]	; (81067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>)
 8106718:	6a1b      	ldr	r3, [r3, #32]
 810671a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 810671e:	5cd3      	ldrb	r3, [r2, r3]
 8106720:	f003 031f 	and.w	r3, r3, #31
 8106724:	40d8      	lsrs	r0, r3
        break;
 8106726:	e703      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
    switch (srcclk)
 8106728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810672c:	d024      	beq.n	8106778 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 810672e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106732:	d0c5      	beq.n	81066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8106734:	e76d      	b.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106736:	6810      	ldr	r0, [r2, #0]
 8106738:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 810673c:	f43f aef8 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106740:	a801      	add	r0, sp, #4
 8106742:	f7ff fc67 	bl	8106014 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106746:	9802      	ldr	r0, [sp, #8]
 8106748:	e6f2      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810674a:	6810      	ldr	r0, [r2, #0]
 810674c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8106750:	f43f aeee 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106754:	a801      	add	r0, sp, #4
 8106756:	f7ff fd09 	bl	810616c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810675a:	9803      	ldr	r0, [sp, #12]
 810675c:	e6e8      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810675e:	6810      	ldr	r0, [r2, #0]
 8106760:	f010 0004 	ands.w	r0, r0, #4
 8106764:	f43f aee4 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8106768:	e747      	b.n	81065fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810676a:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 810676c:	4b12      	ldr	r3, [pc, #72]	; (81067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>)
 810676e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8106772:	bf18      	it	ne
 8106774:	4618      	movne	r0, r3
 8106776:	e6db      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106778:	4a0d      	ldr	r2, [pc, #52]	; (81067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>)
          frequency = CSI_VALUE;
 810677a:	4b0f      	ldr	r3, [pc, #60]	; (81067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>)
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810677c:	6810      	ldr	r0, [r2, #0]
          frequency = CSI_VALUE;
 810677e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8106782:	bf18      	it	ne
 8106784:	4618      	movne	r0, r3
 8106786:	e6d3      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106788:	4b09      	ldr	r3, [pc, #36]	; (81067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>)
 810678a:	6818      	ldr	r0, [r3, #0]
 810678c:	f010 0004 	ands.w	r0, r0, #4
 8106790:	f43f aece 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	4809      	ldr	r0, [pc, #36]	; (81067bc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8106798:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 810679c:	40d8      	lsrs	r0, r3
 810679e:	e6c7      	b.n	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81067a0:	4b03      	ldr	r3, [pc, #12]	; (81067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x394>)
 81067a2:	6818      	ldr	r0, [r3, #0]
 81067a4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 81067a8:	f43f aec2 	beq.w	8106530 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 81067ac:	e7c8      	b.n	8106740 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 81067ae:	bf00      	nop
 81067b0:	58024400 	.word	0x58024400
 81067b4:	0810eb50 	.word	0x0810eb50
 81067b8:	003d0900 	.word	0x003d0900
 81067bc:	03d09000 	.word	0x03d09000

081067c0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81067c0:	6a03      	ldr	r3, [r0, #32]
 81067c2:	f023 0301 	bic.w	r3, r3, #1
 81067c6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81067c8:	6a03      	ldr	r3, [r0, #32]
{
 81067ca:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81067cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81067ce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81067d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81067d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81067d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 81067da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81067dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 81067de:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 81067e2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81067e4:	4d13      	ldr	r5, [pc, #76]	; (8106834 <TIM_OC1_SetConfig+0x74>)
 81067e6:	42a8      	cmp	r0, r5
 81067e8:	d00f      	beq.n	810680a <TIM_OC1_SetConfig+0x4a>
 81067ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81067ee:	42a8      	cmp	r0, r5
 81067f0:	d00b      	beq.n	810680a <TIM_OC1_SetConfig+0x4a>
 81067f2:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 81067f6:	42a8      	cmp	r0, r5
 81067f8:	d007      	beq.n	810680a <TIM_OC1_SetConfig+0x4a>
 81067fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81067fe:	42a8      	cmp	r0, r5
 8106800:	d003      	beq.n	810680a <TIM_OC1_SetConfig+0x4a>
 8106802:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106806:	42a8      	cmp	r0, r5
 8106808:	d10d      	bne.n	8106826 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810680a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 810680c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8106810:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106812:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106816:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 810681a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 810681e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8106822:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106826:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8106828:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 810682a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 810682c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 810682e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8106830:	6203      	str	r3, [r0, #32]
}
 8106832:	4770      	bx	lr
 8106834:	40010000 	.word	0x40010000

08106838 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106838:	6a03      	ldr	r3, [r0, #32]
 810683a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810683e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106840:	6a03      	ldr	r3, [r0, #32]
{
 8106842:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106844:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106846:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106848:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810684a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 810684e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8106852:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106854:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8106856:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810685a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810685e:	4d15      	ldr	r5, [pc, #84]	; (81068b4 <TIM_OC3_SetConfig+0x7c>)
 8106860:	42a8      	cmp	r0, r5
 8106862:	d010      	beq.n	8106886 <TIM_OC3_SetConfig+0x4e>
 8106864:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106868:	42a8      	cmp	r0, r5
 810686a:	d00c      	beq.n	8106886 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810686c:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8106870:	42a8      	cmp	r0, r5
 8106872:	d00f      	beq.n	8106894 <TIM_OC3_SetConfig+0x5c>
 8106874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106878:	42a8      	cmp	r0, r5
 810687a:	d00b      	beq.n	8106894 <TIM_OC3_SetConfig+0x5c>
 810687c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106880:	42a8      	cmp	r0, r5
 8106882:	d10f      	bne.n	81068a4 <TIM_OC3_SetConfig+0x6c>
 8106884:	e006      	b.n	8106894 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106886:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8106888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810688c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8106890:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106894:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106898:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810689c:	ea46 0c05 	orr.w	ip, r6, r5
 81068a0:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81068a4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 81068a6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 81068a8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 81068aa:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 81068ac:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 81068ae:	6203      	str	r3, [r0, #32]
}
 81068b0:	4770      	bx	lr
 81068b2:	bf00      	nop
 81068b4:	40010000 	.word	0x40010000

081068b8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81068b8:	6a03      	ldr	r3, [r0, #32]
 81068ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81068be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81068c0:	6a03      	ldr	r3, [r0, #32]
{
 81068c2:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81068c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81068c6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81068c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81068ca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 81068ce:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81068d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81068d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 81068d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81068dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81068e0:	4d0f      	ldr	r5, [pc, #60]	; (8106920 <TIM_OC4_SetConfig+0x68>)
 81068e2:	42a8      	cmp	r0, r5
 81068e4:	d00f      	beq.n	8106906 <TIM_OC4_SetConfig+0x4e>
 81068e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81068ea:	42a8      	cmp	r0, r5
 81068ec:	d00b      	beq.n	8106906 <TIM_OC4_SetConfig+0x4e>
 81068ee:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 81068f2:	42a8      	cmp	r0, r5
 81068f4:	d007      	beq.n	8106906 <TIM_OC4_SetConfig+0x4e>
 81068f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81068fa:	42a8      	cmp	r0, r5
 81068fc:	d003      	beq.n	8106906 <TIM_OC4_SetConfig+0x4e>
 81068fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106902:	42a8      	cmp	r0, r5
 8106904:	d104      	bne.n	8106910 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106906:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8106908:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810690c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8106910:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8106912:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8106914:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8106916:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 8106918:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 810691a:	6203      	str	r3, [r0, #32]
}
 810691c:	4770      	bx	lr
 810691e:	bf00      	nop
 8106920:	40010000 	.word	0x40010000

08106924 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106924:	6a03      	ldr	r3, [r0, #32]
 8106926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810692a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810692c:	6a03      	ldr	r3, [r0, #32]
{
 810692e:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106930:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106932:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106934:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106936:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 810693a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 810693e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106940:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8106942:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8106946:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810694a:	4d0f      	ldr	r5, [pc, #60]	; (8106988 <TIM_OC5_SetConfig+0x64>)
 810694c:	42a8      	cmp	r0, r5
 810694e:	d00f      	beq.n	8106970 <TIM_OC5_SetConfig+0x4c>
 8106950:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106954:	42a8      	cmp	r0, r5
 8106956:	d00b      	beq.n	8106970 <TIM_OC5_SetConfig+0x4c>
 8106958:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 810695c:	42a8      	cmp	r0, r5
 810695e:	d007      	beq.n	8106970 <TIM_OC5_SetConfig+0x4c>
 8106960:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106964:	42a8      	cmp	r0, r5
 8106966:	d003      	beq.n	8106970 <TIM_OC5_SetConfig+0x4c>
 8106968:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 810696c:	42a8      	cmp	r0, r5
 810696e:	d104      	bne.n	810697a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106970:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106972:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8106976:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810697a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 810697c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 810697e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8106980:	bc30      	pop	{r4, r5}
  TIMx->CCR5 = OC_Config->Pulse;
 8106982:	6581      	str	r1, [r0, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8106984:	6203      	str	r3, [r0, #32]
}
 8106986:	4770      	bx	lr
 8106988:	40010000 	.word	0x40010000

0810698c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810698c:	6a03      	ldr	r3, [r0, #32]
 810698e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8106992:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106994:	6a03      	ldr	r3, [r0, #32]
{
 8106996:	b430      	push	{r4, r5}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106998:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810699a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810699c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810699e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 81069a2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81069a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81069aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81069ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81069b0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81069b4:	4d0f      	ldr	r5, [pc, #60]	; (81069f4 <TIM_OC6_SetConfig+0x68>)
 81069b6:	42a8      	cmp	r0, r5
 81069b8:	d00f      	beq.n	81069da <TIM_OC6_SetConfig+0x4e>
 81069ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81069be:	42a8      	cmp	r0, r5
 81069c0:	d00b      	beq.n	81069da <TIM_OC6_SetConfig+0x4e>
 81069c2:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 81069c6:	42a8      	cmp	r0, r5
 81069c8:	d007      	beq.n	81069da <TIM_OC6_SetConfig+0x4e>
 81069ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81069ce:	42a8      	cmp	r0, r5
 81069d0:	d003      	beq.n	81069da <TIM_OC6_SetConfig+0x4e>
 81069d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 81069d6:	42a8      	cmp	r0, r5
 81069d8:	d104      	bne.n	81069e4 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81069da:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 81069dc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81069e0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81069e4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 81069e6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 81069e8:	6542      	str	r2, [r0, #84]	; 0x54

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 81069ea:	bc30      	pop	{r4, r5}
  TIMx->CCR6 = OC_Config->Pulse;
 81069ec:	65c1      	str	r1, [r0, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 81069ee:	6203      	str	r3, [r0, #32]
}
 81069f0:	4770      	bx	lr
 81069f2:	bf00      	nop
 81069f4:	40010000 	.word	0x40010000

081069f8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 81069f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 81069fc:	2b01      	cmp	r3, #1
 81069fe:	d12f      	bne.n	8106a60 <HAL_TIM_Base_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106a00:	6803      	ldr	r3, [r0, #0]
 8106a02:	4a19      	ldr	r2, [pc, #100]	; (8106a68 <HAL_TIM_Base_Start+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8106a04:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106a06:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8106a08:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106a0c:	d01a      	beq.n	8106a44 <HAL_TIM_Base_Start+0x4c>
 8106a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106a12:	d017      	beq.n	8106a44 <HAL_TIM_Base_Start+0x4c>
 8106a14:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8106a18:	4293      	cmp	r3, r2
 8106a1a:	d013      	beq.n	8106a44 <HAL_TIM_Base_Start+0x4c>
 8106a1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106a20:	4293      	cmp	r3, r2
 8106a22:	d00f      	beq.n	8106a44 <HAL_TIM_Base_Start+0x4c>
 8106a24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106a28:	4293      	cmp	r3, r2
 8106a2a:	d00b      	beq.n	8106a44 <HAL_TIM_Base_Start+0x4c>
 8106a2c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8106a30:	4293      	cmp	r3, r2
 8106a32:	d007      	beq.n	8106a44 <HAL_TIM_Base_Start+0x4c>
 8106a34:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8106a38:	4293      	cmp	r3, r2
 8106a3a:	d003      	beq.n	8106a44 <HAL_TIM_Base_Start+0x4c>
 8106a3c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8106a40:	4293      	cmp	r3, r2
 8106a42:	d107      	bne.n	8106a54 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106a44:	6899      	ldr	r1, [r3, #8]
 8106a46:	4a09      	ldr	r2, [pc, #36]	; (8106a6c <HAL_TIM_Base_Start+0x74>)
 8106a48:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106a4a:	2a06      	cmp	r2, #6
 8106a4c:	d00a      	beq.n	8106a64 <HAL_TIM_Base_Start+0x6c>
 8106a4e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8106a52:	d007      	beq.n	8106a64 <HAL_TIM_Base_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 8106a54:	681a      	ldr	r2, [r3, #0]
 8106a56:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8106a5a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8106a5c:	601a      	str	r2, [r3, #0]
 8106a5e:	4770      	bx	lr
    return HAL_ERROR;
 8106a60:	2001      	movs	r0, #1
 8106a62:	4770      	bx	lr
  return HAL_OK;
 8106a64:	2000      	movs	r0, #0
}
 8106a66:	4770      	bx	lr
 8106a68:	40010000 	.word	0x40010000
 8106a6c:	00010007 	.word	0x00010007

08106a70 <HAL_TIM_PWM_MspInit>:
 8106a70:	4770      	bx	lr
 8106a72:	bf00      	nop

08106a74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8106a74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8106a78:	2b01      	cmp	r3, #1
 8106a7a:	f000 8087 	beq.w	8106b8c <HAL_TIM_ConfigClockSource+0x118>
 8106a7e:	4602      	mov	r2, r0
{
 8106a80:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8106a82:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8106a84:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8106a86:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8106a8a:	2001      	movs	r0, #1
 8106a8c:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8106a90:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106a92:	4b5e      	ldr	r3, [pc, #376]	; (8106c0c <HAL_TIM_ConfigClockSource+0x198>)
 8106a94:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8106a96:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8106a98:	680b      	ldr	r3, [r1, #0]
 8106a9a:	2b70      	cmp	r3, #112	; 0x70
 8106a9c:	f000 80a4 	beq.w	8106be8 <HAL_TIM_ConfigClockSource+0x174>
 8106aa0:	d827      	bhi.n	8106af2 <HAL_TIM_ConfigClockSource+0x7e>
 8106aa2:	2b50      	cmp	r3, #80	; 0x50
 8106aa4:	d074      	beq.n	8106b90 <HAL_TIM_ConfigClockSource+0x11c>
 8106aa6:	d93d      	bls.n	8106b24 <HAL_TIM_ConfigClockSource+0xb0>
 8106aa8:	2b60      	cmp	r3, #96	; 0x60
 8106aaa:	d11a      	bne.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106aac:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8106aae:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106ab0:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106ab2:	f023 0310 	bic.w	r3, r3, #16
 8106ab6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106ab8:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8106aba:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106abc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8106ac4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106ac8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8106acc:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8106ace:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8106ad0:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8106ad2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106ada:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8106ade:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106ae0:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8106ae2:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8106ae4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8106ae6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8106aea:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8106aee:	bc30      	pop	{r4, r5}
 8106af0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8106af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106af6:	d066      	beq.n	8106bc6 <HAL_TIM_ConfigClockSource+0x152>
 8106af8:	d937      	bls.n	8106b6a <HAL_TIM_ConfigClockSource+0xf6>
 8106afa:	4945      	ldr	r1, [pc, #276]	; (8106c10 <HAL_TIM_ConfigClockSource+0x19c>)
 8106afc:	428b      	cmp	r3, r1
 8106afe:	d006      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x9a>
 8106b00:	d92d      	bls.n	8106b5e <HAL_TIM_ConfigClockSource+0xea>
 8106b02:	4944      	ldr	r1, [pc, #272]	; (8106c14 <HAL_TIM_ConfigClockSource+0x1a0>)
 8106b04:	428b      	cmp	r3, r1
 8106b06:	d002      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x9a>
 8106b08:	3110      	adds	r1, #16
 8106b0a:	428b      	cmp	r3, r1
 8106b0c:	d1e9      	bne.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8106b0e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8106b10:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8106b14:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106b18:	4319      	orrs	r1, r3
 8106b1a:	f041 0107 	orr.w	r1, r1, #7
  HAL_StatusTypeDef status = HAL_OK;
 8106b1e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8106b20:	60a1      	str	r1, [r4, #8]
}
 8106b22:	e7de      	b.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8106b24:	2b40      	cmp	r3, #64	; 0x40
 8106b26:	d125      	bne.n	8106b74 <HAL_TIM_ConfigClockSource+0x100>
                               sClockSourceConfig->ClockPolarity,
 8106b28:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106b2a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8106b2c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106b2e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8106b32:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106b34:	6a23      	ldr	r3, [r4, #32]
 8106b36:	f023 0301 	bic.w	r3, r3, #1
 8106b3a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106b3c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106b42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8106b46:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8106b48:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8106b4a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8106b4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106b54:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8106b58:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8106b5a:	60a3      	str	r3, [r4, #8]
}
 8106b5c:	e7c1      	b.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8106b5e:	f023 0110 	bic.w	r1, r3, #16
 8106b62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8106b66:	d1bc      	bne.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
 8106b68:	e7d1      	b.n	8106b0e <HAL_TIM_ConfigClockSource+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 8106b6a:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8106b6e:	bf18      	it	ne
 8106b70:	2001      	movne	r0, #1
 8106b72:	e7b6      	b.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8106b74:	d8b5      	bhi.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
 8106b76:	2b20      	cmp	r3, #32
 8106b78:	d0c9      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x9a>
 8106b7a:	d903      	bls.n	8106b84 <HAL_TIM_ConfigClockSource+0x110>
 8106b7c:	2b30      	cmp	r3, #48	; 0x30
 8106b7e:	d0c6      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x9a>
 8106b80:	2001      	movs	r0, #1
 8106b82:	e7ae      	b.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
 8106b84:	f033 0110 	bics.w	r1, r3, #16
 8106b88:	d1ab      	bne.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
 8106b8a:	e7c0      	b.n	8106b0e <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8106b8c:	2002      	movs	r0, #2
}
 8106b8e:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8106b90:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8106b92:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8106b94:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106b96:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8106b9a:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106b9c:	6a23      	ldr	r3, [r4, #32]
 8106b9e:	f023 0301 	bic.w	r3, r3, #1
 8106ba2:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106ba4:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106baa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8106bae:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8106bb0:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8106bb2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8106bb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106bbc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8106bc0:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8106bc2:	60a3      	str	r3, [r4, #8]
}
 8106bc4:	e78d      	b.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106bc6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8106bca:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106bcc:	432b      	orrs	r3, r5
 8106bce:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106bd0:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106bd4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8106bd8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106bda:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8106bdc:	68a3      	ldr	r3, [r4, #8]
 8106bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8106be2:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8106be4:	60a3      	str	r3, [r4, #8]
      break;
 8106be6:	e77c      	b.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106be8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8106bec:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106bee:	432b      	orrs	r3, r5
 8106bf0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106bf2:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106bf6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8106bfa:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8106bfc:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8106bfe:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8106c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8106c04:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8106c06:	60a3      	str	r3, [r4, #8]
      break;
 8106c08:	e76b      	b.n	8106ae2 <HAL_TIM_ConfigClockSource+0x6e>
 8106c0a:	bf00      	nop
 8106c0c:	ffce0088 	.word	0xffce0088
 8106c10:	00100020 	.word	0x00100020
 8106c14:	00100030 	.word	0x00100030

08106c18 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106c18:	4a32      	ldr	r2, [pc, #200]	; (8106ce4 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8106c1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106c1c:	4290      	cmp	r0, r2
{
 8106c1e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106c20:	d03d      	beq.n	8106c9e <TIM_Base_SetConfig+0x86>
 8106c22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8106c26:	d025      	beq.n	8106c74 <TIM_Base_SetConfig+0x5c>
 8106c28:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8106c2c:	4290      	cmp	r0, r2
 8106c2e:	d021      	beq.n	8106c74 <TIM_Base_SetConfig+0x5c>
 8106c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106c34:	4290      	cmp	r0, r2
 8106c36:	d01d      	beq.n	8106c74 <TIM_Base_SetConfig+0x5c>
 8106c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106c3c:	4290      	cmp	r0, r2
 8106c3e:	d019      	beq.n	8106c74 <TIM_Base_SetConfig+0x5c>
 8106c40:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8106c44:	4290      	cmp	r0, r2
 8106c46:	d047      	beq.n	8106cd8 <TIM_Base_SetConfig+0xc0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106c48:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8106c4c:	4290      	cmp	r0, r2
 8106c4e:	d03d      	beq.n	8106ccc <TIM_Base_SetConfig+0xb4>
 8106c50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106c54:	4290      	cmp	r0, r2
 8106c56:	d039      	beq.n	8106ccc <TIM_Base_SetConfig+0xb4>
 8106c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8106c5c:	4290      	cmp	r0, r2
 8106c5e:	d035      	beq.n	8106ccc <TIM_Base_SetConfig+0xb4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c60:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c62:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8106c64:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106c6a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8106c6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c6e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8106c70:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106c72:	e010      	b.n	8106c96 <TIM_Base_SetConfig+0x7e>
    tmpcr1 |= Structure->CounterMode;
 8106c74:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106c76:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8106c7c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8106c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c82:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106c84:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c8a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c8c:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8106c8e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8106c90:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c92:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8106c94:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8106c96:	2301      	movs	r3, #1
}
 8106c98:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8106c9a:	6143      	str	r3, [r0, #20]
}
 8106c9c:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106c9e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8106ca0:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8106ca6:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8106ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106cac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106cae:	694a      	ldr	r2, [r1, #20]
 8106cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106cb4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8106cb6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106cb8:	688b      	ldr	r3, [r1, #8]
 8106cba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8106cbc:	680b      	ldr	r3, [r1, #0]
 8106cbe:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8106cc0:	690b      	ldr	r3, [r1, #16]
 8106cc2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8106cc4:	2301      	movs	r3, #1
}
 8106cc6:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8106cc8:	6143      	str	r3, [r0, #20]
}
 8106cca:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106ccc:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106cce:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8106cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106cd4:	4323      	orrs	r3, r4
 8106cd6:	e7eb      	b.n	8106cb0 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= Structure->CounterMode;
 8106cd8:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106cda:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8106ce0:	e7e1      	b.n	8106ca6 <TIM_Base_SetConfig+0x8e>
 8106ce2:	bf00      	nop
 8106ce4:	40010000 	.word	0x40010000

08106ce8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8106ce8:	b370      	cbz	r0, 8106d48 <HAL_TIM_Base_Init+0x60>
{
 8106cea:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8106cec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8106cf0:	4604      	mov	r4, r0
 8106cf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8106cf6:	b313      	cbz	r3, 8106d3e <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106cf8:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8106cfa:	2302      	movs	r3, #2
 8106cfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106d00:	f851 0b04 	ldr.w	r0, [r1], #4
 8106d04:	f7ff ff88 	bl	8106c18 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106d08:	2301      	movs	r3, #1
 8106d0a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8106d12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8106d16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8106d1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8106d1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8106d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106d2e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8106d32:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8106d36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8106d3a:	2000      	movs	r0, #0
}
 8106d3c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8106d3e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8106d42:	f7fb fe7f 	bl	8102a44 <HAL_TIM_Base_MspInit>
 8106d46:	e7d7      	b.n	8106cf8 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8106d48:	2001      	movs	r0, #1
}
 8106d4a:	4770      	bx	lr

08106d4c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8106d4c:	b370      	cbz	r0, 8106dac <HAL_TIM_PWM_Init+0x60>
{
 8106d4e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8106d50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8106d54:	4604      	mov	r4, r0
 8106d56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8106d5a:	b313      	cbz	r3, 8106da2 <HAL_TIM_PWM_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106d5c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8106d5e:	2302      	movs	r3, #2
 8106d60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106d64:	f851 0b04 	ldr.w	r0, [r1], #4
 8106d68:	f7ff ff56 	bl	8106c18 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106d6c:	2301      	movs	r3, #1
 8106d6e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8106d76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8106d7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8106d7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8106d82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8106d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106d92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8106d96:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8106d9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8106d9e:	2000      	movs	r0, #0
}
 8106da0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8106da2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8106da6:	f7ff fe63 	bl	8106a70 <HAL_TIM_PWM_MspInit>
 8106daa:	e7d7      	b.n	8106d5c <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8106dac:	2001      	movs	r0, #1
}
 8106dae:	4770      	bx	lr

08106db0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106db0:	6a03      	ldr	r3, [r0, #32]
 8106db2:	f023 0310 	bic.w	r3, r3, #16
 8106db6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8106db8:	6a03      	ldr	r3, [r0, #32]
{
 8106dba:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8106dbc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8106dbe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106dc0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106dc2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8106dc6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106dca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106dce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8106dd0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106dd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106dd8:	4d14      	ldr	r5, [pc, #80]	; (8106e2c <TIM_OC2_SetConfig+0x7c>)
 8106dda:	42a8      	cmp	r0, r5
 8106ddc:	d010      	beq.n	8106e00 <TIM_OC2_SetConfig+0x50>
 8106dde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106de2:	42a8      	cmp	r0, r5
 8106de4:	d00c      	beq.n	8106e00 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106de6:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8106dea:	42a8      	cmp	r0, r5
 8106dec:	d00f      	beq.n	8106e0e <TIM_OC2_SetConfig+0x5e>
 8106dee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106df2:	42a8      	cmp	r0, r5
 8106df4:	d00b      	beq.n	8106e0e <TIM_OC2_SetConfig+0x5e>
 8106df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106dfa:	42a8      	cmp	r0, r5
 8106dfc:	d10f      	bne.n	8106e1e <TIM_OC2_SetConfig+0x6e>
 8106dfe:	e006      	b.n	8106e0e <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106e00:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8106e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106e06:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8106e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106e0e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106e12:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106e16:	ea46 0c05 	orr.w	ip, r6, r5
 8106e1a:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8106e1e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8106e20:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8106e22:	6182      	str	r2, [r0, #24]
}
 8106e24:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8106e26:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8106e28:	6203      	str	r3, [r0, #32]
}
 8106e2a:	4770      	bx	lr
 8106e2c:	40010000 	.word	0x40010000

08106e30 <HAL_TIM_PWM_ConfigChannel>:
{
 8106e30:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8106e32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8106e36:	2b01      	cmp	r3, #1
 8106e38:	f000 8083 	beq.w	8106f42 <HAL_TIM_PWM_ConfigChannel+0x112>
 8106e3c:	2301      	movs	r3, #1
 8106e3e:	4604      	mov	r4, r0
 8106e40:	460d      	mov	r5, r1
 8106e42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8106e46:	2a14      	cmp	r2, #20
 8106e48:	d80c      	bhi.n	8106e64 <HAL_TIM_PWM_ConfigChannel+0x34>
 8106e4a:	e8df f002 	tbb	[pc, r2]
 8106e4e:	0b23      	.short	0x0b23
 8106e50:	0b340b0b 	.word	0x0b340b0b
 8106e54:	0b460b0b 	.word	0x0b460b0b
 8106e58:	0b570b0b 	.word	0x0b570b0b
 8106e5c:	0b690b0b 	.word	0x0b690b0b
 8106e60:	0b0b      	.short	0x0b0b
 8106e62:	11          	.byte	0x11
 8106e63:	00          	.byte	0x00
 8106e64:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8106e66:	2200      	movs	r2, #0
 8106e68:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8106e6c:	4618      	mov	r0, r3
 8106e6e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106e70:	6800      	ldr	r0, [r0, #0]
 8106e72:	f7ff fd8b 	bl	810698c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106e76:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106e78:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106e7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8106e7e:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8106e80:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8106e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106e86:	6542      	str	r2, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106e88:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8106e8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8106e8e:	2300      	movs	r3, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106e90:	6542      	str	r2, [r0, #84]	; 0x54
      break;
 8106e92:	e7e8      	b.n	8106e66 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8106e94:	6800      	ldr	r0, [r0, #0]
 8106e96:	f7ff fc93 	bl	81067c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8106e9a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106e9c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8106e9e:	f043 0308 	orr.w	r3, r3, #8
 8106ea2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106ea4:	6982      	ldr	r2, [r0, #24]
 8106ea6:	f022 0204 	bic.w	r2, r2, #4
 8106eaa:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106eac:	6982      	ldr	r2, [r0, #24]
 8106eae:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8106eb0:	2300      	movs	r3, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106eb2:	6182      	str	r2, [r0, #24]
      break;
 8106eb4:	e7d7      	b.n	8106e66 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106eb6:	6800      	ldr	r0, [r0, #0]
 8106eb8:	f7ff ff7a 	bl	8106db0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106ebc:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106ebe:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8106ec4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106ec6:	6982      	ldr	r2, [r0, #24]
 8106ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106ecc:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106ece:	6982      	ldr	r2, [r0, #24]
 8106ed0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8106ed4:	2300      	movs	r3, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106ed6:	6182      	str	r2, [r0, #24]
      break;
 8106ed8:	e7c5      	b.n	8106e66 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8106eda:	6800      	ldr	r0, [r0, #0]
 8106edc:	f7ff fcac 	bl	8106838 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106ee0:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106ee2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106ee4:	f043 0308 	orr.w	r3, r3, #8
 8106ee8:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106eea:	69c2      	ldr	r2, [r0, #28]
 8106eec:	f022 0204 	bic.w	r2, r2, #4
 8106ef0:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106ef2:	69c2      	ldr	r2, [r0, #28]
 8106ef4:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8106ef6:	2300      	movs	r3, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106ef8:	61c2      	str	r2, [r0, #28]
      break;
 8106efa:	e7b4      	b.n	8106e66 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8106efc:	6800      	ldr	r0, [r0, #0]
 8106efe:	f7ff fcdb 	bl	81068b8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106f02:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106f04:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8106f0a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8106f0c:	69c2      	ldr	r2, [r0, #28]
 8106f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106f12:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106f14:	69c2      	ldr	r2, [r0, #28]
 8106f16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8106f1a:	2300      	movs	r3, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106f1c:	61c2      	str	r2, [r0, #28]
      break;
 8106f1e:	e7a2      	b.n	8106e66 <HAL_TIM_PWM_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106f20:	6800      	ldr	r0, [r0, #0]
 8106f22:	f7ff fcff 	bl	8106924 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106f26:	6d43      	ldr	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106f28:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8106f2a:	f043 0308 	orr.w	r3, r3, #8
 8106f2e:	6543      	str	r3, [r0, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8106f30:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8106f32:	f022 0204 	bic.w	r2, r2, #4
 8106f36:	6542      	str	r2, [r0, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106f38:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8106f3a:	430a      	orrs	r2, r1
  HAL_StatusTypeDef status = HAL_OK;
 8106f3c:	2300      	movs	r3, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8106f3e:	6542      	str	r2, [r0, #84]	; 0x54
      break;
 8106f40:	e791      	b.n	8106e66 <HAL_TIM_PWM_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8106f42:	2302      	movs	r3, #2
}
 8106f44:	4618      	mov	r0, r3
 8106f46:	bd38      	pop	{r3, r4, r5, pc}

08106f48 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106f48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8106f4c:	2b01      	cmp	r3, #1
 8106f4e:	d042      	beq.n	8106fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8106f50:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106f52:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106f54:	4d21      	ldr	r5, [pc, #132]	; (8106fdc <HAL_TIMEx_MasterConfigSynchronization+0x94>)
  htim->State = HAL_TIM_STATE_BUSY;
 8106f56:	2302      	movs	r3, #2
 8106f58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106f5c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8106f5e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8106f60:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106f62:	d02e      	beq.n	8106fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8106f64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8106f68:	42aa      	cmp	r2, r5
 8106f6a:	d02a      	beq.n	8106fc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106f6c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8106f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106f72:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106f74:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8106f78:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106f7a:	d014      	beq.n	8106fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8106f7c:	4b18      	ldr	r3, [pc, #96]	; (8106fe0 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8106f7e:	429a      	cmp	r2, r3
 8106f80:	d011      	beq.n	8106fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8106f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8106f86:	429a      	cmp	r2, r3
 8106f88:	d00d      	beq.n	8106fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8106f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8106f8e:	429a      	cmp	r2, r3
 8106f90:	d009      	beq.n	8106fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8106f92:	42aa      	cmp	r2, r5
 8106f94:	d007      	beq.n	8106fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8106f96:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8106f9a:	429a      	cmp	r2, r3
 8106f9c:	d003      	beq.n	8106fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8106f9e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8106fa2:	429a      	cmp	r2, r3
 8106fa4:	d104      	bne.n	8106fb0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106fa6:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106fa8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106fac:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106fae:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8106fb0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8106fb2:	2201      	movs	r2, #1
 8106fb4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8106fb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8106fbc:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8106fbe:	4618      	mov	r0, r3
}
 8106fc0:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106fc2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106fc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106fc8:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106fca:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8106fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106fd0:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8106fd2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106fd4:	e7e7      	b.n	8106fa6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  __HAL_LOCK(htim);
 8106fd6:	2002      	movs	r0, #2
}
 8106fd8:	4770      	bx	lr
 8106fda:	bf00      	nop
 8106fdc:	40010000 	.word	0x40010000
 8106fe0:	40000400 	.word	0x40000400

08106fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106fe4:	b410      	push	{r4}
 8106fe6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106fe8:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106ff0:	e842 3100 	strex	r1, r3, [r2]
 8106ff4:	2900      	cmp	r1, #0
 8106ff6:	d1f7      	bne.n	8106fe8 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106ff8:	4c14      	ldr	r4, [pc, #80]	; (810704c <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ffa:	f102 0308 	add.w	r3, r2, #8
 8106ffe:	e853 3f00 	ldrex	r3, [r3]
 8107002:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107004:	f102 0c08 	add.w	ip, r2, #8
 8107008:	e84c 3100 	strex	r1, r3, [ip]
 810700c:	2900      	cmp	r1, #0
 810700e:	d1f4      	bne.n	8106ffa <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107010:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8107012:	2b01      	cmp	r3, #1
 8107014:	d008      	beq.n	8107028 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107016:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8107018:	2220      	movs	r2, #32
 810701a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 810701e:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxISR = NULL;
 8107022:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107024:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8107026:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107028:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810702c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107030:	e842 3100 	strex	r1, r3, [r2]
 8107034:	2900      	cmp	r1, #0
 8107036:	d0ee      	beq.n	8107016 <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107038:	e852 3f00 	ldrex	r3, [r2]
 810703c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107040:	e842 3100 	strex	r1, r3, [r2]
 8107044:	2900      	cmp	r1, #0
 8107046:	d1ef      	bne.n	8107028 <UART_EndRxTransfer+0x44>
 8107048:	e7e5      	b.n	8107016 <UART_EndRxTransfer+0x32>
 810704a:	bf00      	nop
 810704c:	effffffe 	.word	0xeffffffe

08107050 <HAL_UART_Transmit_DMA>:
{
 8107050:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8107052:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8107056:	2d20      	cmp	r5, #32
 8107058:	d12e      	bne.n	81070b8 <HAL_UART_Transmit_DMA+0x68>
    if ((pData == NULL) || (Size == 0U))
 810705a:	b359      	cbz	r1, 81070b4 <HAL_UART_Transmit_DMA+0x64>
 810705c:	b352      	cbz	r2, 81070b4 <HAL_UART_Transmit_DMA+0x64>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810705e:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 8107060:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 8107064:	4604      	mov	r4, r0
    huart->pTxBuffPtr  = pData;
 8107066:	6501      	str	r1, [r0, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107068:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->TxXferSize  = Size;
 810706c:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (huart->hdmatx != NULL)
 8107070:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107072:	2621      	movs	r6, #33	; 0x21
 8107074:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8107078:	b160      	cbz	r0, 8107094 <HAL_UART_Transmit_DMA+0x44>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810707a:	4e14      	ldr	r6, [pc, #80]	; (81070cc <HAL_UART_Transmit_DMA+0x7c>)
      huart->hdmatx->XferAbortCallback = NULL;
 810707c:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810707e:	4613      	mov	r3, r2
 8107080:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8107082:	63c6      	str	r6, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8107084:	4e12      	ldr	r6, [pc, #72]	; (81070d0 <HAL_UART_Transmit_DMA+0x80>)
 8107086:	6406      	str	r6, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8107088:	4e12      	ldr	r6, [pc, #72]	; (81070d4 <HAL_UART_Transmit_DMA+0x84>)
 810708a:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810708c:	3228      	adds	r2, #40	; 0x28
 810708e:	f7fc ffd9 	bl	8104044 <HAL_DMA_Start_IT>
 8107092:	b998      	cbnz	r0, 81070bc <HAL_UART_Transmit_DMA+0x6c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8107094:	6822      	ldr	r2, [r4, #0]
 8107096:	2340      	movs	r3, #64	; 0x40
 8107098:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810709a:	f102 0308 	add.w	r3, r2, #8
 810709e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81070a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81070a6:	f102 0108 	add.w	r1, r2, #8
 81070aa:	e841 3000 	strex	r0, r3, [r1]
 81070ae:	2800      	cmp	r0, #0
 81070b0:	d1f3      	bne.n	810709a <HAL_UART_Transmit_DMA+0x4a>
}
 81070b2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 81070b4:	2001      	movs	r0, #1
}
 81070b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 81070b8:	2002      	movs	r0, #2
}
 81070ba:	bd70      	pop	{r4, r5, r6, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81070bc:	2310      	movs	r3, #16
 81070be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        return HAL_ERROR;
 81070c2:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 81070c4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
}
 81070c8:	bd70      	pop	{r4, r5, r6, pc}
 81070ca:	bf00      	nop
 81070cc:	081070dd 	.word	0x081070dd
 81070d0:	08107125 	.word	0x08107125
 81070d4:	08107135 	.word	0x08107135

081070d8 <HAL_UART_TxCpltCallback>:
 81070d8:	4770      	bx	lr
 81070da:	bf00      	nop

081070dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 81070dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81070de:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81070e0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81070e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81070e6:	d018      	beq.n	810711a <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 81070e8:	2300      	movs	r3, #0
 81070ea:	6802      	ldr	r2, [r0, #0]
 81070ec:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81070f0:	f102 0308 	add.w	r3, r2, #8
 81070f4:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81070f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81070fc:	f102 0008 	add.w	r0, r2, #8
 8107100:	e840 3100 	strex	r1, r3, [r0]
 8107104:	2900      	cmp	r1, #0
 8107106:	d1f3      	bne.n	81070f0 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107108:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810710c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107110:	e842 3100 	strex	r1, r3, [r2]
 8107114:	2900      	cmp	r1, #0
 8107116:	d1f7      	bne.n	8107108 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8107118:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 810711a:	f7ff ffdd 	bl	81070d8 <HAL_UART_TxCpltCallback>
}
 810711e:	bd08      	pop	{r3, pc}

08107120 <HAL_UART_TxHalfCpltCallback>:
 8107120:	4770      	bx	lr
 8107122:	bf00      	nop

08107124 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8107124:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8107126:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8107128:	f7ff fffa 	bl	8107120 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810712c:	bd08      	pop	{r3, pc}
 810712e:	bf00      	nop

08107130 <HAL_UART_ErrorCallback>:
 8107130:	4770      	bx	lr
 8107132:	bf00      	nop

08107134 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107134:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8107136:	b538      	push	{r3, r4, r5, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8107138:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 810713a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810713e:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8107142:	689a      	ldr	r2, [r3, #8]
 8107144:	0612      	lsls	r2, r2, #24
 8107146:	d501      	bpl.n	810714c <UART_DMAError+0x18>
 8107148:	2921      	cmp	r1, #33	; 0x21
 810714a:	d013      	beq.n	8107174 <UART_DMAError+0x40>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810714c:	689b      	ldr	r3, [r3, #8]
 810714e:	065b      	lsls	r3, r3, #25
 8107150:	d501      	bpl.n	8107156 <UART_DMAError+0x22>
 8107152:	2d22      	cmp	r5, #34	; 0x22
 8107154:	d008      	beq.n	8107168 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8107156:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 810715a:	f043 0310 	orr.w	r3, r3, #16
 810715e:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8107162:	f7ff ffe5 	bl	8107130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107166:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 8107168:	2300      	movs	r3, #0
 810716a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810716e:	f7ff ff39 	bl	8106fe4 <UART_EndRxTransfer>
 8107172:	e7f0      	b.n	8107156 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 8107174:	2200      	movs	r2, #0
 8107176:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810717a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810717e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107182:	e843 2400 	strex	r4, r2, [r3]
 8107186:	2c00      	cmp	r4, #0
 8107188:	d1f7      	bne.n	810717a <UART_DMAError+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810718a:	f103 0208 	add.w	r2, r3, #8
 810718e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8107192:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107196:	f103 0408 	add.w	r4, r3, #8
 810719a:	e844 2100 	strex	r1, r2, [r4]
 810719e:	2900      	cmp	r1, #0
 81071a0:	d1f3      	bne.n	810718a <UART_DMAError+0x56>
  huart->gState = HAL_UART_STATE_READY;
 81071a2:	2220      	movs	r2, #32
 81071a4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 81071a8:	e7d0      	b.n	810714c <UART_DMAError+0x18>
 81071aa:	bf00      	nop

081071ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81071ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81071ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 81071b0:	2300      	movs	r3, #0
 81071b2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 81071b6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 81071ba:	f7ff ffb9 	bl	8107130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81071be:	bd08      	pop	{r3, pc}

081071c0 <HAL_UARTEx_RxEventCallback>:
}
 81071c0:	4770      	bx	lr
 81071c2:	bf00      	nop

081071c4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81071c4:	6803      	ldr	r3, [r0, #0]
 81071c6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81071c8:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81071ca:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 81071ce:	ea12 0f0c 	tst.w	r2, ip
{
 81071d2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81071d4:	689d      	ldr	r5, [r3, #8]
{
 81071d6:	4604      	mov	r4, r0
  if (errorflags == 0U)
 81071d8:	f000 8114 	beq.w	8107404 <HAL_UART_IRQHandler+0x240>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81071dc:	48ad      	ldr	r0, [pc, #692]	; (8107494 <HAL_UART_IRQHandler+0x2d0>)
 81071de:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81071e2:	48ad      	ldr	r0, [pc, #692]	; (8107498 <HAL_UART_IRQHandler+0x2d4>)
 81071e4:	4008      	ands	r0, r1
 81071e6:	ea50 000c 	orrs.w	r0, r0, ip
 81071ea:	f040 8098 	bne.w	810731e <HAL_UART_IRQHandler+0x15a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81071ee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 81071f0:	2801      	cmp	r0, #1
 81071f2:	d01d      	beq.n	8107230 <HAL_UART_IRQHandler+0x6c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81071f4:	02d6      	lsls	r6, r2, #11
 81071f6:	d502      	bpl.n	81071fe <HAL_UART_IRQHandler+0x3a>
 81071f8:	0268      	lsls	r0, r5, #9
 81071fa:	f100 813a 	bmi.w	8107472 <HAL_UART_IRQHandler+0x2ae>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81071fe:	0616      	lsls	r6, r2, #24
 8107200:	d506      	bpl.n	8107210 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8107202:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8107206:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810720a:	4328      	orrs	r0, r5
 810720c:	f040 8129 	bne.w	8107462 <HAL_UART_IRQHandler+0x29e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8107210:	0650      	lsls	r0, r2, #25
 8107212:	d502      	bpl.n	810721a <HAL_UART_IRQHandler+0x56>
 8107214:	064e      	lsls	r6, r1, #25
 8107216:	f100 8107 	bmi.w	8107428 <HAL_UART_IRQHandler+0x264>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810721a:	0215      	lsls	r5, r2, #8
 810721c:	d502      	bpl.n	8107224 <HAL_UART_IRQHandler+0x60>
 810721e:	0048      	lsls	r0, r1, #1
 8107220:	f100 8133 	bmi.w	810748a <HAL_UART_IRQHandler+0x2c6>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8107224:	01d3      	lsls	r3, r2, #7
 8107226:	d502      	bpl.n	810722e <HAL_UART_IRQHandler+0x6a>
 8107228:	2900      	cmp	r1, #0
 810722a:	f2c0 817a 	blt.w	8107522 <HAL_UART_IRQHandler+0x35e>
}
 810722e:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8107230:	06d6      	lsls	r6, r2, #27
 8107232:	d5df      	bpl.n	81071f4 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8107234:	06c8      	lsls	r0, r1, #27
 8107236:	d5dd      	bpl.n	81071f4 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8107238:	2210      	movs	r2, #16
 810723a:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810723c:	689a      	ldr	r2, [r3, #8]
 810723e:	0652      	lsls	r2, r2, #25
 8107240:	f140 8138 	bpl.w	81074b4 <HAL_UART_IRQHandler+0x2f0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8107244:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8107248:	4994      	ldr	r1, [pc, #592]	; (810749c <HAL_UART_IRQHandler+0x2d8>)
 810724a:	6802      	ldr	r2, [r0, #0]
 810724c:	428a      	cmp	r2, r1
 810724e:	d01e      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 8107250:	3118      	adds	r1, #24
 8107252:	428a      	cmp	r2, r1
 8107254:	d01b      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 8107256:	3118      	adds	r1, #24
 8107258:	428a      	cmp	r2, r1
 810725a:	d018      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 810725c:	3118      	adds	r1, #24
 810725e:	428a      	cmp	r2, r1
 8107260:	d015      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 8107262:	3118      	adds	r1, #24
 8107264:	428a      	cmp	r2, r1
 8107266:	d012      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 8107268:	3118      	adds	r1, #24
 810726a:	428a      	cmp	r2, r1
 810726c:	d00f      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 810726e:	3118      	adds	r1, #24
 8107270:	428a      	cmp	r2, r1
 8107272:	d00c      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 8107274:	3118      	adds	r1, #24
 8107276:	428a      	cmp	r2, r1
 8107278:	d009      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 810727a:	f501 7156 	add.w	r1, r1, #856	; 0x358
 810727e:	428a      	cmp	r2, r1
 8107280:	d005      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 8107282:	3118      	adds	r1, #24
 8107284:	428a      	cmp	r2, r1
 8107286:	d002      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 8107288:	3118      	adds	r1, #24
 810728a:	428a      	cmp	r2, r1
 810728c:	d0ff      	beq.n	810728e <HAL_UART_IRQHandler+0xca>
 810728e:	6852      	ldr	r2, [r2, #4]
 8107290:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8107292:	2a00      	cmp	r2, #0
 8107294:	d0cb      	beq.n	810722e <HAL_UART_IRQHandler+0x6a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8107296:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 810729a:	4291      	cmp	r1, r2
 810729c:	d9c7      	bls.n	810722e <HAL_UART_IRQHandler+0x6a>
        huart->RxXferCount = nb_remaining_rx_data;
 810729e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 81072a2:	69c2      	ldr	r2, [r0, #28]
 81072a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 81072a8:	d02f      	beq.n	810730a <HAL_UART_IRQHandler+0x146>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81072aa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81072ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81072b2:	e843 2100 	strex	r1, r2, [r3]
 81072b6:	2900      	cmp	r1, #0
 81072b8:	d1f7      	bne.n	81072aa <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81072ba:	f103 0208 	add.w	r2, r3, #8
 81072be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81072c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81072c6:	f103 0508 	add.w	r5, r3, #8
 81072ca:	e845 2100 	strex	r1, r2, [r5]
 81072ce:	2900      	cmp	r1, #0
 81072d0:	d1f3      	bne.n	81072ba <HAL_UART_IRQHandler+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81072d2:	f103 0208 	add.w	r2, r3, #8
 81072d6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81072da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81072de:	f103 0508 	add.w	r5, r3, #8
 81072e2:	e845 2100 	strex	r1, r2, [r5]
 81072e6:	2900      	cmp	r1, #0
 81072e8:	d1f3      	bne.n	81072d2 <HAL_UART_IRQHandler+0x10e>
          huart->RxState = HAL_UART_STATE_READY;
 81072ea:	2220      	movs	r2, #32
 81072ec:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81072f0:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81072f2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81072f6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81072fa:	e843 2100 	strex	r1, r2, [r3]
 81072fe:	2900      	cmp	r1, #0
 8107300:	d1f7      	bne.n	81072f2 <HAL_UART_IRQHandler+0x12e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8107302:	f7fd f899 	bl	8104438 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8107306:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810730a:	2302      	movs	r3, #2
 810730c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810730e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8107312:	1ac9      	subs	r1, r1, r3
 8107314:	4620      	mov	r0, r4
 8107316:	b289      	uxth	r1, r1
 8107318:	f7ff ff52 	bl	81071c0 <HAL_UARTEx_RxEventCallback>
}
 810731c:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810731e:	07d0      	lsls	r0, r2, #31
 8107320:	461e      	mov	r6, r3
 8107322:	d509      	bpl.n	8107338 <HAL_UART_IRQHandler+0x174>
 8107324:	05c8      	lsls	r0, r1, #23
 8107326:	d507      	bpl.n	8107338 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8107328:	2001      	movs	r0, #1
 810732a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810732c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8107330:	f040 0001 	orr.w	r0, r0, #1
 8107334:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8107338:	0790      	lsls	r0, r2, #30
 810733a:	f140 8085 	bpl.w	8107448 <HAL_UART_IRQHandler+0x284>
 810733e:	07e8      	lsls	r0, r5, #31
 8107340:	d509      	bpl.n	8107356 <HAL_UART_IRQHandler+0x192>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8107342:	2002      	movs	r0, #2
 8107344:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8107346:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 810734a:	f040 0004 	orr.w	r0, r0, #4
 810734e:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8107352:	0750      	lsls	r0, r2, #29
 8107354:	d47c      	bmi.n	8107450 <HAL_UART_IRQHandler+0x28c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8107356:	0710      	lsls	r0, r2, #28
 8107358:	d50c      	bpl.n	8107374 <HAL_UART_IRQHandler+0x1b0>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810735a:	f001 0020 	and.w	r0, r1, #32
 810735e:	ea50 000c 	orrs.w	r0, r0, ip
 8107362:	d007      	beq.n	8107374 <HAL_UART_IRQHandler+0x1b0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107364:	2008      	movs	r0, #8
 8107366:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8107368:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 810736c:	f040 0008 	orr.w	r0, r0, #8
 8107370:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8107374:	0510      	lsls	r0, r2, #20
 8107376:	d50a      	bpl.n	810738e <HAL_UART_IRQHandler+0x1ca>
 8107378:	0148      	lsls	r0, r1, #5
 810737a:	d508      	bpl.n	810738e <HAL_UART_IRQHandler+0x1ca>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810737c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8107380:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8107382:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8107386:	f043 0320 	orr.w	r3, r3, #32
 810738a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810738e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8107392:	2b00      	cmp	r3, #0
 8107394:	f43f af4b 	beq.w	810722e <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8107398:	0692      	lsls	r2, r2, #26
 810739a:	d505      	bpl.n	81073a8 <HAL_UART_IRQHandler+0x1e4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810739c:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81073a0:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 81073a4:	4329      	orrs	r1, r5
 81073a6:	d17d      	bne.n	81074a4 <HAL_UART_IRQHandler+0x2e0>
      errorcode = huart->ErrorCode;
 81073a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81073ac:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 81073ae:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81073b6:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 81073ba:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81073bc:	f000 80b6 	beq.w	810752c <HAL_UART_IRQHandler+0x368>
        UART_EndRxTransfer(huart);
 81073c0:	f7ff fe10 	bl	8106fe4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81073c4:	68b3      	ldr	r3, [r6, #8]
 81073c6:	065b      	lsls	r3, r3, #25
 81073c8:	d55b      	bpl.n	8107482 <HAL_UART_IRQHandler+0x2be>
 81073ca:	e000      	b.n	81073ce <HAL_UART_IRQHandler+0x20a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81073cc:	6826      	ldr	r6, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81073ce:	f106 0308 	add.w	r3, r6, #8
 81073d2:	e853 3f00 	ldrex	r3, [r3]
 81073d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81073da:	f106 0108 	add.w	r1, r6, #8
 81073de:	e841 3200 	strex	r2, r3, [r1]
 81073e2:	2a00      	cmp	r2, #0
 81073e4:	d1f2      	bne.n	81073cc <HAL_UART_IRQHandler+0x208>
          if (huart->hdmarx != NULL)
 81073e6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 81073ea:	2800      	cmp	r0, #0
 81073ec:	d049      	beq.n	8107482 <HAL_UART_IRQHandler+0x2be>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81073ee:	4b2c      	ldr	r3, [pc, #176]	; (81074a0 <HAL_UART_IRQHandler+0x2dc>)
 81073f0:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81073f2:	f7fd f9bf 	bl	8104774 <HAL_DMA_Abort_IT>
 81073f6:	2800      	cmp	r0, #0
 81073f8:	f43f af19 	beq.w	810722e <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81073fc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8107400:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8107402:	e00e      	b.n	8107422 <HAL_UART_IRQHandler+0x25e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8107404:	0696      	lsls	r6, r2, #26
 8107406:	f57f aef2 	bpl.w	81071ee <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810740a:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810740e:	f005 5c80 	and.w	ip, r5, #268435456	; 0x10000000
 8107412:	ea56 060c 	orrs.w	r6, r6, ip
 8107416:	f43f aeea 	beq.w	81071ee <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 810741a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 810741c:	2b00      	cmp	r3, #0
 810741e:	f43f af06 	beq.w	810722e <HAL_UART_IRQHandler+0x6a>
}
 8107422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8107426:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107428:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810742c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107430:	e843 2100 	strex	r1, r2, [r3]
 8107434:	2900      	cmp	r1, #0
 8107436:	d1f7      	bne.n	8107428 <HAL_UART_IRQHandler+0x264>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8107438:	2320      	movs	r3, #32
 810743a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810743e:	67a1      	str	r1, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8107440:	4620      	mov	r0, r4
 8107442:	f7ff fe49 	bl	81070d8 <HAL_UART_TxCpltCallback>
}
 8107446:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8107448:	0750      	lsls	r0, r2, #29
 810744a:	d584      	bpl.n	8107356 <HAL_UART_IRQHandler+0x192>
 810744c:	07e8      	lsls	r0, r5, #31
 810744e:	d582      	bpl.n	8107356 <HAL_UART_IRQHandler+0x192>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8107450:	2004      	movs	r0, #4
 8107452:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8107454:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8107458:	f040 0002 	orr.w	r0, r0, #2
 810745c:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 8107460:	e779      	b.n	8107356 <HAL_UART_IRQHandler+0x192>
    if (huart->TxISR != NULL)
 8107462:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8107464:	2b00      	cmp	r3, #0
 8107466:	f43f aee2 	beq.w	810722e <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 810746a:	4620      	mov	r0, r4
}
 810746c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8107470:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8107472:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8107476:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8107478:	621a      	str	r2, [r3, #32]
}
 810747a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 810747e:	f000 bc4d 	b.w	8107d1c <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8107482:	4620      	mov	r0, r4
 8107484:	f7ff fe54 	bl	8107130 <HAL_UART_ErrorCallback>
}
 8107488:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810748a:	4620      	mov	r0, r4
}
 810748c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8107490:	f000 bc48 	b.w	8107d24 <HAL_UARTEx_TxFifoEmptyCallback>
 8107494:	10000001 	.word	0x10000001
 8107498:	04000120 	.word	0x04000120
 810749c:	40020010 	.word	0x40020010
 81074a0:	081071ad 	.word	0x081071ad
        if (huart->RxISR != NULL)
 81074a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 81074a6:	2b00      	cmp	r3, #0
 81074a8:	f43f af7e 	beq.w	81073a8 <HAL_UART_IRQHandler+0x1e4>
          huart->RxISR(huart);
 81074ac:	4620      	mov	r0, r4
 81074ae:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81074b0:	6826      	ldr	r6, [r4, #0]
 81074b2:	e779      	b.n	81073a8 <HAL_UART_IRQHandler+0x1e4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81074b4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 81074b8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81074bc:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 81074c0:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81074c2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 81074c4:	2a00      	cmp	r2, #0
 81074c6:	f43f aeb2 	beq.w	810722e <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81074ca:	1a41      	subs	r1, r0, r1
 81074cc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 81074ce:	2900      	cmp	r1, #0
 81074d0:	f43f aead 	beq.w	810722e <HAL_UART_IRQHandler+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81074d4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81074d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81074dc:	e843 2000 	strex	r0, r2, [r3]
 81074e0:	2800      	cmp	r0, #0
 81074e2:	d1f7      	bne.n	81074d4 <HAL_UART_IRQHandler+0x310>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81074e4:	4d14      	ldr	r5, [pc, #80]	; (8107538 <HAL_UART_IRQHandler+0x374>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81074e6:	f103 0208 	add.w	r2, r3, #8
 81074ea:	e852 2f00 	ldrex	r2, [r2]
 81074ee:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81074f0:	f103 0608 	add.w	r6, r3, #8
 81074f4:	e846 2000 	strex	r0, r2, [r6]
 81074f8:	2800      	cmp	r0, #0
 81074fa:	d1f4      	bne.n	81074e6 <HAL_UART_IRQHandler+0x322>
        huart->RxState = HAL_UART_STATE_READY;
 81074fc:	2220      	movs	r2, #32
 81074fe:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8107502:	6760      	str	r0, [r4, #116]	; 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107504:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107506:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810750a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810750e:	e843 2000 	strex	r0, r2, [r3]
 8107512:	2800      	cmp	r0, #0
 8107514:	d1f7      	bne.n	8107506 <HAL_UART_IRQHandler+0x342>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8107516:	2302      	movs	r3, #2
 8107518:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810751a:	4620      	mov	r0, r4
 810751c:	f7ff fe50 	bl	81071c0 <HAL_UARTEx_RxEventCallback>
}
 8107520:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8107522:	4620      	mov	r0, r4
}
 8107524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8107528:	f000 bbfa 	b.w	8107d20 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 810752c:	f7ff fe00 	bl	8107130 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107530:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 8107534:	bd70      	pop	{r4, r5, r6, pc}
 8107536:	bf00      	nop
 8107538:	effffffe 	.word	0xeffffffe

0810753c <UART_SetConfig>:
{
 810753c:	b530      	push	{r4, r5, lr}
 810753e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8107540:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107542:	6882      	ldr	r2, [r0, #8]
 8107544:	6900      	ldr	r0, [r0, #16]
 8107546:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107548:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810754a:	4302      	orrs	r2, r0
 810754c:	430a      	orrs	r2, r1
 810754e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107550:	49bd      	ldr	r1, [pc, #756]	; (8107848 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107552:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107554:	4029      	ands	r1, r5
 8107556:	430a      	orrs	r2, r1
 8107558:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810755a:	685a      	ldr	r2, [r3, #4]
 810755c:	68e1      	ldr	r1, [r4, #12]
 810755e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8107562:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107564:	49b9      	ldr	r1, [pc, #740]	; (810784c <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107566:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107568:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810756a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810756c:	6899      	ldr	r1, [r3, #8]
{
 810756e:	b087      	sub	sp, #28
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107570:	f000 80e0 	beq.w	8107734 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 8107574:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107576:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 810757a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 810757e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107580:	430a      	orrs	r2, r1
 8107582:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107586:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8107588:	f022 020f 	bic.w	r2, r2, #15
 810758c:	430a      	orrs	r2, r1
 810758e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107590:	4aaf      	ldr	r2, [pc, #700]	; (8107850 <UART_SetConfig+0x314>)
 8107592:	4293      	cmp	r3, r2
 8107594:	d023      	beq.n	81075de <UART_SetConfig+0xa2>
 8107596:	4aaf      	ldr	r2, [pc, #700]	; (8107854 <UART_SetConfig+0x318>)
 8107598:	4293      	cmp	r3, r2
 810759a:	d075      	beq.n	8107688 <UART_SetConfig+0x14c>
 810759c:	4aae      	ldr	r2, [pc, #696]	; (8107858 <UART_SetConfig+0x31c>)
 810759e:	4293      	cmp	r3, r2
 81075a0:	f000 818d 	beq.w	81078be <UART_SetConfig+0x382>
 81075a4:	4aad      	ldr	r2, [pc, #692]	; (810785c <UART_SetConfig+0x320>)
 81075a6:	4293      	cmp	r3, r2
 81075a8:	f000 81df 	beq.w	810796a <UART_SetConfig+0x42e>
 81075ac:	4aac      	ldr	r2, [pc, #688]	; (8107860 <UART_SetConfig+0x324>)
 81075ae:	4293      	cmp	r3, r2
 81075b0:	f000 8120 	beq.w	81077f4 <UART_SetConfig+0x2b8>
 81075b4:	4aab      	ldr	r2, [pc, #684]	; (8107864 <UART_SetConfig+0x328>)
 81075b6:	4293      	cmp	r3, r2
 81075b8:	f000 81e1 	beq.w	810797e <UART_SetConfig+0x442>
 81075bc:	4aaa      	ldr	r2, [pc, #680]	; (8107868 <UART_SetConfig+0x32c>)
 81075be:	4293      	cmp	r3, r2
 81075c0:	f000 8237 	beq.w	8107a32 <UART_SetConfig+0x4f6>
 81075c4:	4aa9      	ldr	r2, [pc, #676]	; (810786c <UART_SetConfig+0x330>)
 81075c6:	4293      	cmp	r3, r2
 81075c8:	f000 81e5 	beq.w	8107996 <UART_SetConfig+0x45a>
        ret = HAL_ERROR;
 81075cc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 81075ce:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 81075d0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 81075d4:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 81075d8:	66a2      	str	r2, [r4, #104]	; 0x68
}
 81075da:	b007      	add	sp, #28
 81075dc:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 81075de:	4ba4      	ldr	r3, [pc, #656]	; (8107870 <UART_SetConfig+0x334>)
 81075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81075e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81075e6:	2b28      	cmp	r3, #40	; 0x28
 81075e8:	d8f0      	bhi.n	81075cc <UART_SetConfig+0x90>
 81075ea:	4aa2      	ldr	r2, [pc, #648]	; (8107874 <UART_SetConfig+0x338>)
 81075ec:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81075ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 81075f2:	d054      	beq.n	810769e <UART_SetConfig+0x162>
    switch (clocksource)
 81075f4:	2b20      	cmp	r3, #32
 81075f6:	f200 8147 	bhi.w	8107888 <UART_SetConfig+0x34c>
 81075fa:	2b20      	cmp	r3, #32
 81075fc:	d8e6      	bhi.n	81075cc <UART_SetConfig+0x90>
 81075fe:	a201      	add	r2, pc, #4	; (adr r2, 8107604 <UART_SetConfig+0xc8>)
 8107600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107604:	08107843 	.word	0x08107843
 8107608:	0810783d 	.word	0x0810783d
 810760c:	081075cd 	.word	0x081075cd
 8107610:	081075cd 	.word	0x081075cd
 8107614:	0810782d 	.word	0x0810782d
 8107618:	081075cd 	.word	0x081075cd
 810761c:	081075cd 	.word	0x081075cd
 8107620:	081075cd 	.word	0x081075cd
 8107624:	0810781f 	.word	0x0810781f
 8107628:	081075cd 	.word	0x081075cd
 810762c:	081075cd 	.word	0x081075cd
 8107630:	081075cd 	.word	0x081075cd
 8107634:	081075cd 	.word	0x081075cd
 8107638:	081075cd 	.word	0x081075cd
 810763c:	081075cd 	.word	0x081075cd
 8107640:	081075cd 	.word	0x081075cd
 8107644:	08107809 	.word	0x08107809
 8107648:	081075cd 	.word	0x081075cd
 810764c:	081075cd 	.word	0x081075cd
 8107650:	081075cd 	.word	0x081075cd
 8107654:	081075cd 	.word	0x081075cd
 8107658:	081075cd 	.word	0x081075cd
 810765c:	081075cd 	.word	0x081075cd
 8107660:	081075cd 	.word	0x081075cd
 8107664:	081075cd 	.word	0x081075cd
 8107668:	081075cd 	.word	0x081075cd
 810766c:	081075cd 	.word	0x081075cd
 8107670:	081075cd 	.word	0x081075cd
 8107674:	081075cd 	.word	0x081075cd
 8107678:	081075cd 	.word	0x081075cd
 810767c:	081075cd 	.word	0x081075cd
 8107680:	081075cd 	.word	0x081075cd
 8107684:	081079ab 	.word	0x081079ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107688:	4b79      	ldr	r3, [pc, #484]	; (8107870 <UART_SetConfig+0x334>)
 810768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810768c:	f003 0307 	and.w	r3, r3, #7
 8107690:	2b05      	cmp	r3, #5
 8107692:	d89b      	bhi.n	81075cc <UART_SetConfig+0x90>
 8107694:	4a78      	ldr	r2, [pc, #480]	; (8107878 <UART_SetConfig+0x33c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107696:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 810769a:	5cd3      	ldrb	r3, [r2, r3]
 810769c:	d1aa      	bne.n	81075f4 <UART_SetConfig+0xb8>
    switch (clocksource)
 810769e:	2b20      	cmp	r3, #32
 81076a0:	f200 8145 	bhi.w	810792e <UART_SetConfig+0x3f2>
 81076a4:	2b20      	cmp	r3, #32
 81076a6:	d891      	bhi.n	81075cc <UART_SetConfig+0x90>
 81076a8:	a201      	add	r2, pc, #4	; (adr r2, 81076b0 <UART_SetConfig+0x174>)
 81076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076ae:	bf00      	nop
 81076b0:	08107a1f 	.word	0x08107a1f
 81076b4:	08107a19 	.word	0x08107a19
 81076b8:	081075cd 	.word	0x081075cd
 81076bc:	081075cd 	.word	0x081075cd
 81076c0:	08107a25 	.word	0x08107a25
 81076c4:	081075cd 	.word	0x081075cd
 81076c8:	081075cd 	.word	0x081075cd
 81076cc:	081075cd 	.word	0x081075cd
 81076d0:	08107a07 	.word	0x08107a07
 81076d4:	081075cd 	.word	0x081075cd
 81076d8:	081075cd 	.word	0x081075cd
 81076dc:	081075cd 	.word	0x081075cd
 81076e0:	081075cd 	.word	0x081075cd
 81076e4:	081075cd 	.word	0x081075cd
 81076e8:	081075cd 	.word	0x081075cd
 81076ec:	081075cd 	.word	0x081075cd
 81076f0:	081079f3 	.word	0x081079f3
 81076f4:	081075cd 	.word	0x081075cd
 81076f8:	081075cd 	.word	0x081075cd
 81076fc:	081075cd 	.word	0x081075cd
 8107700:	081075cd 	.word	0x081075cd
 8107704:	081075cd 	.word	0x081075cd
 8107708:	081075cd 	.word	0x081075cd
 810770c:	081075cd 	.word	0x081075cd
 8107710:	081075cd 	.word	0x081075cd
 8107714:	081075cd 	.word	0x081075cd
 8107718:	081075cd 	.word	0x081075cd
 810771c:	081075cd 	.word	0x081075cd
 8107720:	081075cd 	.word	0x081075cd
 8107724:	081075cd 	.word	0x081075cd
 8107728:	081075cd 	.word	0x081075cd
 810772c:	081075cd 	.word	0x081075cd
 8107730:	08107a2f 	.word	0x08107a2f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107734:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8107738:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 810773c:	4311      	orrs	r1, r2
 810773e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107742:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107744:	484a      	ldr	r0, [pc, #296]	; (8107870 <UART_SetConfig+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107746:	f022 020f 	bic.w	r2, r2, #15
 810774a:	430a      	orrs	r2, r1
 810774c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 810774e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8107750:	f003 0307 	and.w	r3, r3, #7
 8107754:	2b05      	cmp	r3, #5
 8107756:	f63f af39 	bhi.w	81075cc <UART_SetConfig+0x90>
 810775a:	4a48      	ldr	r2, [pc, #288]	; (810787c <UART_SetConfig+0x340>)
 810775c:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 810775e:	2b20      	cmp	r3, #32
 8107760:	f200 80b7 	bhi.w	81078d2 <UART_SetConfig+0x396>
 8107764:	2b01      	cmp	r3, #1
 8107766:	f67f af31 	bls.w	81075cc <UART_SetConfig+0x90>
 810776a:	3b02      	subs	r3, #2
 810776c:	2b1e      	cmp	r3, #30
 810776e:	f63f af2d 	bhi.w	81075cc <UART_SetConfig+0x90>
 8107772:	a201      	add	r2, pc, #4	; (adr r2, 8107778 <UART_SetConfig+0x23c>)
 8107774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107778:	081079e3 	.word	0x081079e3
 810777c:	081075cd 	.word	0x081075cd
 8107780:	081079d3 	.word	0x081079d3
 8107784:	081075cd 	.word	0x081075cd
 8107788:	081075cd 	.word	0x081075cd
 810778c:	081075cd 	.word	0x081075cd
 8107790:	081079c3 	.word	0x081079c3
 8107794:	081075cd 	.word	0x081075cd
 8107798:	081075cd 	.word	0x081075cd
 810779c:	081075cd 	.word	0x081075cd
 81077a0:	081075cd 	.word	0x081075cd
 81077a4:	081075cd 	.word	0x081075cd
 81077a8:	081075cd 	.word	0x081075cd
 81077ac:	081075cd 	.word	0x081075cd
 81077b0:	081079af 	.word	0x081079af
 81077b4:	081075cd 	.word	0x081075cd
 81077b8:	081075cd 	.word	0x081075cd
 81077bc:	081075cd 	.word	0x081075cd
 81077c0:	081075cd 	.word	0x081075cd
 81077c4:	081075cd 	.word	0x081075cd
 81077c8:	081075cd 	.word	0x081075cd
 81077cc:	081075cd 	.word	0x081075cd
 81077d0:	081075cd 	.word	0x081075cd
 81077d4:	081075cd 	.word	0x081075cd
 81077d8:	081075cd 	.word	0x081075cd
 81077dc:	081075cd 	.word	0x081075cd
 81077e0:	081075cd 	.word	0x081075cd
 81077e4:	081075cd 	.word	0x081075cd
 81077e8:	081075cd 	.word	0x081075cd
 81077ec:	081075cd 	.word	0x081075cd
 81077f0:	081079ef 	.word	0x081079ef
  UART_GETCLOCKSOURCE(huart, clocksource);
 81077f4:	4b1e      	ldr	r3, [pc, #120]	; (8107870 <UART_SetConfig+0x334>)
 81077f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077f8:	f003 0307 	and.w	r3, r3, #7
 81077fc:	2b05      	cmp	r3, #5
 81077fe:	f63f aee5 	bhi.w	81075cc <UART_SetConfig+0x90>
 8107802:	4a1f      	ldr	r2, [pc, #124]	; (8107880 <UART_SetConfig+0x344>)
 8107804:	5cd3      	ldrb	r3, [r2, r3]
 8107806:	e6f2      	b.n	81075ee <UART_SetConfig+0xb2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107808:	4b19      	ldr	r3, [pc, #100]	; (8107870 <UART_SetConfig+0x334>)
 810780a:	681a      	ldr	r2, [r3, #0]
 810780c:	0692      	lsls	r2, r2, #26
 810780e:	f140 80c0 	bpl.w	8107992 <UART_SetConfig+0x456>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107812:	681b      	ldr	r3, [r3, #0]
 8107814:	481b      	ldr	r0, [pc, #108]	; (8107884 <UART_SetConfig+0x348>)
 8107816:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 810781a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 810781c:	e03a      	b.n	8107894 <UART_SetConfig+0x358>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810781e:	a803      	add	r0, sp, #12
 8107820:	f7fe fca4 	bl	810616c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107824:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8107826:	b938      	cbnz	r0, 8107838 <UART_SetConfig+0x2fc>
 8107828:	2000      	movs	r0, #0
 810782a:	e6d0      	b.n	81075ce <UART_SetConfig+0x92>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810782c:	4668      	mov	r0, sp
 810782e:	f7fe fbf1 	bl	8106014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107832:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8107834:	2800      	cmp	r0, #0
 8107836:	d0f7      	beq.n	8107828 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107838:	6a61      	ldr	r1, [r4, #36]	; 0x24
 810783a:	e02b      	b.n	8107894 <UART_SetConfig+0x358>
        pclk = HAL_RCC_GetPCLK2Freq();
 810783c:	f7fd fcd2 	bl	81051e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8107840:	e7f1      	b.n	8107826 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8107842:	f7fd fcbd 	bl	81051c0 <HAL_RCC_GetPCLK1Freq>
        break;
 8107846:	e7ee      	b.n	8107826 <UART_SetConfig+0x2ea>
 8107848:	cfff69f3 	.word	0xcfff69f3
 810784c:	58000c00 	.word	0x58000c00
 8107850:	40011000 	.word	0x40011000
 8107854:	40004400 	.word	0x40004400
 8107858:	40004800 	.word	0x40004800
 810785c:	40004c00 	.word	0x40004c00
 8107860:	40005000 	.word	0x40005000
 8107864:	40011400 	.word	0x40011400
 8107868:	40007800 	.word	0x40007800
 810786c:	40007c00 	.word	0x40007c00
 8107870:	58024400 	.word	0x58024400
 8107874:	0810f3e0 	.word	0x0810f3e0
 8107878:	0810f40c 	.word	0x0810f40c
 810787c:	0810f414 	.word	0x0810f414
 8107880:	0810f40c 	.word	0x0810f40c
 8107884:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8107888:	2b40      	cmp	r3, #64	; 0x40
 810788a:	bf08      	it	eq
 810788c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8107890:	f47f ae9c 	bne.w	81075cc <UART_SetConfig+0x90>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107894:	6862      	ldr	r2, [r4, #4]
 8107896:	4b6e      	ldr	r3, [pc, #440]	; (8107a50 <UART_SetConfig+0x514>)
 8107898:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 810789c:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81078a0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81078a4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 81078a8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81078ac:	f1a3 0210 	sub.w	r2, r3, #16
 81078b0:	428a      	cmp	r2, r1
 81078b2:	f63f ae8b 	bhi.w	81075cc <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)usartdiv;
 81078b6:	6822      	ldr	r2, [r4, #0]
 81078b8:	2000      	movs	r0, #0
 81078ba:	60d3      	str	r3, [r2, #12]
 81078bc:	e687      	b.n	81075ce <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 81078be:	4b65      	ldr	r3, [pc, #404]	; (8107a54 <UART_SetConfig+0x518>)
 81078c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81078c2:	f003 0307 	and.w	r3, r3, #7
 81078c6:	2b05      	cmp	r3, #5
 81078c8:	f63f ae80 	bhi.w	81075cc <UART_SetConfig+0x90>
 81078cc:	4a62      	ldr	r2, [pc, #392]	; (8107a58 <UART_SetConfig+0x51c>)
 81078ce:	5cd3      	ldrb	r3, [r2, r3]
 81078d0:	e68d      	b.n	81075ee <UART_SetConfig+0xb2>
    switch (clocksource)
 81078d2:	2b40      	cmp	r3, #64	; 0x40
 81078d4:	bf08      	it	eq
 81078d6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 81078da:	f47f ae77 	bne.w	81075cc <UART_SetConfig+0x90>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81078de:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81078e0:	4b5b      	ldr	r3, [pc, #364]	; (8107a50 <UART_SetConfig+0x514>)
 81078e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81078e4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81078e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 81078ec:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81078f0:	4299      	cmp	r1, r3
 81078f2:	f63f ae6b 	bhi.w	81075cc <UART_SetConfig+0x90>
 81078f6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 81078fa:	f63f ae67 	bhi.w	81075cc <UART_SetConfig+0x90>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81078fe:	2300      	movs	r3, #0
 8107900:	4619      	mov	r1, r3
 8107902:	f7f9 fa49 	bl	8100d98 <__aeabi_uldivmod>
 8107906:	086a      	lsrs	r2, r5, #1
 8107908:	0203      	lsls	r3, r0, #8
 810790a:	0209      	lsls	r1, r1, #8
 810790c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8107910:	1898      	adds	r0, r3, r2
 8107912:	f141 0100 	adc.w	r1, r1, #0
 8107916:	462a      	mov	r2, r5
 8107918:	2300      	movs	r3, #0
 810791a:	f7f9 fa3d 	bl	8100d98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810791e:	4a4f      	ldr	r2, [pc, #316]	; (8107a5c <UART_SetConfig+0x520>)
 8107920:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8107924:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107926:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107928:	f63f ae50 	bhi.w	81075cc <UART_SetConfig+0x90>
 810792c:	e7c3      	b.n	81078b6 <UART_SetConfig+0x37a>
    switch (clocksource)
 810792e:	2b40      	cmp	r3, #64	; 0x40
 8107930:	f47f ae4c 	bne.w	81075cc <UART_SetConfig+0x90>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107934:	6862      	ldr	r2, [r4, #4]
 8107936:	4b46      	ldr	r3, [pc, #280]	; (8107a50 <UART_SetConfig+0x514>)
 8107938:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 810793c:	fbb0 f0f1 	udiv	r0, r0, r1
 8107940:	0853      	lsrs	r3, r2, #1
 8107942:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107946:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810794a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810794e:	f1a3 0210 	sub.w	r2, r3, #16
 8107952:	428a      	cmp	r2, r1
 8107954:	f63f ae3a 	bhi.w	81075cc <UART_SetConfig+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107958:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 810795c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810795e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107960:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8107964:	4313      	orrs	r3, r2
 8107966:	60cb      	str	r3, [r1, #12]
 8107968:	e75e      	b.n	8107828 <UART_SetConfig+0x2ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 810796a:	4b3a      	ldr	r3, [pc, #232]	; (8107a54 <UART_SetConfig+0x518>)
 810796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810796e:	f003 0307 	and.w	r3, r3, #7
 8107972:	2b05      	cmp	r3, #5
 8107974:	f63f ae2a 	bhi.w	81075cc <UART_SetConfig+0x90>
 8107978:	4a39      	ldr	r2, [pc, #228]	; (8107a60 <UART_SetConfig+0x524>)
 810797a:	5cd3      	ldrb	r3, [r2, r3]
 810797c:	e637      	b.n	81075ee <UART_SetConfig+0xb2>
 810797e:	4b35      	ldr	r3, [pc, #212]	; (8107a54 <UART_SetConfig+0x518>)
 8107980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107986:	2b28      	cmp	r3, #40	; 0x28
 8107988:	f63f ae20 	bhi.w	81075cc <UART_SetConfig+0x90>
 810798c:	4a35      	ldr	r2, [pc, #212]	; (8107a64 <UART_SetConfig+0x528>)
 810798e:	5cd3      	ldrb	r3, [r2, r3]
 8107990:	e62d      	b.n	81075ee <UART_SetConfig+0xb2>
          pclk = (uint32_t) HSI_VALUE;
 8107992:	4835      	ldr	r0, [pc, #212]	; (8107a68 <UART_SetConfig+0x52c>)
 8107994:	e77e      	b.n	8107894 <UART_SetConfig+0x358>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107996:	4b2f      	ldr	r3, [pc, #188]	; (8107a54 <UART_SetConfig+0x518>)
 8107998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810799a:	f003 0307 	and.w	r3, r3, #7
 810799e:	2b05      	cmp	r3, #5
 81079a0:	f63f ae14 	bhi.w	81075cc <UART_SetConfig+0x90>
 81079a4:	4a31      	ldr	r2, [pc, #196]	; (8107a6c <UART_SetConfig+0x530>)
 81079a6:	5cd3      	ldrb	r3, [r2, r3]
 81079a8:	e621      	b.n	81075ee <UART_SetConfig+0xb2>
        pclk = (uint32_t) CSI_VALUE;
 81079aa:	4831      	ldr	r0, [pc, #196]	; (8107a70 <UART_SetConfig+0x534>)
 81079ac:	e772      	b.n	8107894 <UART_SetConfig+0x358>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81079ae:	4b29      	ldr	r3, [pc, #164]	; (8107a54 <UART_SetConfig+0x518>)
 81079b0:	681a      	ldr	r2, [r3, #0]
 81079b2:	0695      	lsls	r5, r2, #26
 81079b4:	d547      	bpl.n	8107a46 <UART_SetConfig+0x50a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81079b6:	681b      	ldr	r3, [r3, #0]
 81079b8:	482b      	ldr	r0, [pc, #172]	; (8107a68 <UART_SetConfig+0x52c>)
 81079ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81079be:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 81079c0:	e78d      	b.n	81078de <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81079c2:	a803      	add	r0, sp, #12
 81079c4:	f7fe fbd2 	bl	810616c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81079c8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 81079ca:	2800      	cmp	r0, #0
 81079cc:	f43f af2c 	beq.w	8107828 <UART_SetConfig+0x2ec>
 81079d0:	e785      	b.n	81078de <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81079d2:	4668      	mov	r0, sp
 81079d4:	f7fe fb1e 	bl	8106014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81079d8:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 81079da:	2800      	cmp	r0, #0
 81079dc:	f43f af24 	beq.w	8107828 <UART_SetConfig+0x2ec>
 81079e0:	e77d      	b.n	81078de <UART_SetConfig+0x3a2>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81079e2:	f7fe fb05 	bl	8105ff0 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 81079e6:	2800      	cmp	r0, #0
 81079e8:	f43f af1e 	beq.w	8107828 <UART_SetConfig+0x2ec>
 81079ec:	e777      	b.n	81078de <UART_SetConfig+0x3a2>
        pclk = (uint32_t) CSI_VALUE;
 81079ee:	4820      	ldr	r0, [pc, #128]	; (8107a70 <UART_SetConfig+0x534>)
 81079f0:	e775      	b.n	81078de <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81079f2:	4b18      	ldr	r3, [pc, #96]	; (8107a54 <UART_SetConfig+0x518>)
 81079f4:	681a      	ldr	r2, [r3, #0]
 81079f6:	0690      	lsls	r0, r2, #26
 81079f8:	d527      	bpl.n	8107a4a <UART_SetConfig+0x50e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	481a      	ldr	r0, [pc, #104]	; (8107a68 <UART_SetConfig+0x52c>)
 81079fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8107a02:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8107a04:	e796      	b.n	8107934 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107a06:	a803      	add	r0, sp, #12
 8107a08:	f7fe fbb0 	bl	810616c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107a0c:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8107a0e:	2800      	cmp	r0, #0
 8107a10:	f43f af0a 	beq.w	8107828 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107a14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8107a16:	e78d      	b.n	8107934 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8107a18:	f7fd fbe4 	bl	81051e4 <HAL_RCC_GetPCLK2Freq>
        break;
 8107a1c:	e7f7      	b.n	8107a0e <UART_SetConfig+0x4d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8107a1e:	f7fd fbcf 	bl	81051c0 <HAL_RCC_GetPCLK1Freq>
        break;
 8107a22:	e7f4      	b.n	8107a0e <UART_SetConfig+0x4d2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a24:	4668      	mov	r0, sp
 8107a26:	f7fe faf5 	bl	8106014 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107a2a:	9801      	ldr	r0, [sp, #4]
        break;
 8107a2c:	e7ef      	b.n	8107a0e <UART_SetConfig+0x4d2>
        pclk = (uint32_t) CSI_VALUE;
 8107a2e:	4810      	ldr	r0, [pc, #64]	; (8107a70 <UART_SetConfig+0x534>)
 8107a30:	e780      	b.n	8107934 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107a32:	4b08      	ldr	r3, [pc, #32]	; (8107a54 <UART_SetConfig+0x518>)
 8107a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a36:	f003 0307 	and.w	r3, r3, #7
 8107a3a:	2b05      	cmp	r3, #5
 8107a3c:	f63f adc6 	bhi.w	81075cc <UART_SetConfig+0x90>
 8107a40:	4a0c      	ldr	r2, [pc, #48]	; (8107a74 <UART_SetConfig+0x538>)
 8107a42:	5cd3      	ldrb	r3, [r2, r3]
 8107a44:	e5d3      	b.n	81075ee <UART_SetConfig+0xb2>
          pclk = (uint32_t) HSI_VALUE;
 8107a46:	4808      	ldr	r0, [pc, #32]	; (8107a68 <UART_SetConfig+0x52c>)
 8107a48:	e749      	b.n	81078de <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 8107a4a:	4807      	ldr	r0, [pc, #28]	; (8107a68 <UART_SetConfig+0x52c>)
 8107a4c:	e772      	b.n	8107934 <UART_SetConfig+0x3f8>
 8107a4e:	bf00      	nop
 8107a50:	0810f41c 	.word	0x0810f41c
 8107a54:	58024400 	.word	0x58024400
 8107a58:	0810f40c 	.word	0x0810f40c
 8107a5c:	000ffcff 	.word	0x000ffcff
 8107a60:	0810f40c 	.word	0x0810f40c
 8107a64:	0810f3e0 	.word	0x0810f3e0
 8107a68:	03d09000 	.word	0x03d09000
 8107a6c:	0810f40c 	.word	0x0810f40c
 8107a70:	003d0900 	.word	0x003d0900
 8107a74:	0810f40c 	.word	0x0810f40c

08107a78 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107a78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8107a7a:	07da      	lsls	r2, r3, #31
{
 8107a7c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107a7e:	d506      	bpl.n	8107a8e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107a80:	6801      	ldr	r1, [r0, #0]
 8107a82:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8107a84:	684a      	ldr	r2, [r1, #4]
 8107a86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8107a8a:	4322      	orrs	r2, r4
 8107a8c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107a8e:	079c      	lsls	r4, r3, #30
 8107a90:	d506      	bpl.n	8107aa0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107a92:	6801      	ldr	r1, [r0, #0]
 8107a94:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8107a96:	684a      	ldr	r2, [r1, #4]
 8107a98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8107a9c:	4322      	orrs	r2, r4
 8107a9e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107aa0:	0759      	lsls	r1, r3, #29
 8107aa2:	d506      	bpl.n	8107ab2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107aa4:	6801      	ldr	r1, [r0, #0]
 8107aa6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8107aa8:	684a      	ldr	r2, [r1, #4]
 8107aaa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8107aae:	4322      	orrs	r2, r4
 8107ab0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107ab2:	071a      	lsls	r2, r3, #28
 8107ab4:	d506      	bpl.n	8107ac4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107ab6:	6801      	ldr	r1, [r0, #0]
 8107ab8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8107aba:	684a      	ldr	r2, [r1, #4]
 8107abc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107ac0:	4322      	orrs	r2, r4
 8107ac2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107ac4:	06dc      	lsls	r4, r3, #27
 8107ac6:	d506      	bpl.n	8107ad6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107ac8:	6801      	ldr	r1, [r0, #0]
 8107aca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8107acc:	688a      	ldr	r2, [r1, #8]
 8107ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8107ad2:	4322      	orrs	r2, r4
 8107ad4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107ad6:	0699      	lsls	r1, r3, #26
 8107ad8:	d506      	bpl.n	8107ae8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107ada:	6801      	ldr	r1, [r0, #0]
 8107adc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8107ade:	688a      	ldr	r2, [r1, #8]
 8107ae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8107ae4:	4322      	orrs	r2, r4
 8107ae6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107ae8:	065a      	lsls	r2, r3, #25
 8107aea:	d509      	bpl.n	8107b00 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107aec:	6801      	ldr	r1, [r0, #0]
 8107aee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8107af0:	684a      	ldr	r2, [r1, #4]
 8107af2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8107af6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107af8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107afc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107afe:	d00b      	beq.n	8107b18 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107b00:	061b      	lsls	r3, r3, #24
 8107b02:	d506      	bpl.n	8107b12 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107b04:	6802      	ldr	r2, [r0, #0]
 8107b06:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8107b08:	6853      	ldr	r3, [r2, #4]
 8107b0a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8107b0e:	430b      	orrs	r3, r1
 8107b10:	6053      	str	r3, [r2, #4]
}
 8107b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107b16:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107b18:	684a      	ldr	r2, [r1, #4]
 8107b1a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8107b1c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8107b20:	4322      	orrs	r2, r4
 8107b22:	604a      	str	r2, [r1, #4]
 8107b24:	e7ec      	b.n	8107b00 <UART_AdvFeatureConfig+0x88>
 8107b26:	bf00      	nop

08107b28 <UART_WaitOnFlagUntilTimeout>:
{
 8107b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107b30:	6805      	ldr	r5, [r0, #0]
{
 8107b32:	4681      	mov	r9, r0
 8107b34:	460f      	mov	r7, r1
 8107b36:	4616      	mov	r6, r2
 8107b38:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107b3a:	e002      	b.n	8107b42 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8107b3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8107b40:	d10a      	bne.n	8107b58 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107b42:	69ec      	ldr	r4, [r5, #28]
 8107b44:	ea37 0404 	bics.w	r4, r7, r4
 8107b48:	bf0c      	ite	eq
 8107b4a:	2401      	moveq	r4, #1
 8107b4c:	2400      	movne	r4, #0
 8107b4e:	42b4      	cmp	r4, r6
 8107b50:	d0f4      	beq.n	8107b3c <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8107b52:	2000      	movs	r0, #0
}
 8107b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107b58:	f7fb f986 	bl	8102e68 <HAL_GetTick>
 8107b5c:	eba0 000a 	sub.w	r0, r0, sl
 8107b60:	4540      	cmp	r0, r8
 8107b62:	d81b      	bhi.n	8107b9c <UART_WaitOnFlagUntilTimeout+0x74>
 8107b64:	f1b8 0f00 	cmp.w	r8, #0
 8107b68:	d018      	beq.n	8107b9c <UART_WaitOnFlagUntilTimeout+0x74>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107b6a:	f8d9 5000 	ldr.w	r5, [r9]
 8107b6e:	682b      	ldr	r3, [r5, #0]
 8107b70:	075a      	lsls	r2, r3, #29
 8107b72:	d5e6      	bpl.n	8107b42 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8107b74:	69ec      	ldr	r4, [r5, #28]
 8107b76:	f014 0408 	ands.w	r4, r4, #8
 8107b7a:	d111      	bne.n	8107ba0 <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107b7c:	69eb      	ldr	r3, [r5, #28]
 8107b7e:	051b      	lsls	r3, r3, #20
 8107b80:	d5df      	bpl.n	8107b42 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107b86:	622b      	str	r3, [r5, #32]
          UART_EndRxTransfer(huart);
 8107b88:	4648      	mov	r0, r9
 8107b8a:	f7ff fa2b 	bl	8106fe4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107b8e:	2320      	movs	r3, #32
 8107b90:	f8c9 3090 	str.w	r3, [r9, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8107b94:	f889 4084 	strb.w	r4, [r9, #132]	; 0x84
          return HAL_TIMEOUT;
 8107b98:	2003      	movs	r0, #3
 8107b9a:	e7db      	b.n	8107b54 <UART_WaitOnFlagUntilTimeout+0x2c>
        return HAL_TIMEOUT;
 8107b9c:	2003      	movs	r0, #3
 8107b9e:	e7d9      	b.n	8107b54 <UART_WaitOnFlagUntilTimeout+0x2c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107ba0:	2408      	movs	r4, #8
           UART_EndRxTransfer(huart);
 8107ba2:	4648      	mov	r0, r9
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107ba4:	622c      	str	r4, [r5, #32]
           UART_EndRxTransfer(huart);
 8107ba6:	f7ff fa1d 	bl	8106fe4 <UART_EndRxTransfer>
           __HAL_UNLOCK(huart);
 8107baa:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8107bac:	f8c9 4090 	str.w	r4, [r9, #144]	; 0x90
           __HAL_UNLOCK(huart);
 8107bb0:	f889 3084 	strb.w	r3, [r9, #132]	; 0x84
           return HAL_ERROR;
 8107bb4:	2001      	movs	r0, #1
 8107bb6:	e7cd      	b.n	8107b54 <UART_WaitOnFlagUntilTimeout+0x2c>

08107bb8 <UART_CheckIdleState>:
{
 8107bb8:	b570      	push	{r4, r5, r6, lr}
 8107bba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107bbc:	2600      	movs	r6, #0
{
 8107bbe:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107bc0:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8107bc4:	f7fb f950 	bl	8102e68 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107bc8:	6823      	ldr	r3, [r4, #0]
 8107bca:	681a      	ldr	r2, [r3, #0]
 8107bcc:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8107bce:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107bd0:	d410      	bmi.n	8107bf4 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107bd2:	681b      	ldr	r3, [r3, #0]
 8107bd4:	075b      	lsls	r3, r3, #29
 8107bd6:	d427      	bmi.n	8107c28 <UART_CheckIdleState+0x70>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107bd8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8107bda:	2220      	movs	r2, #32
 8107bdc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8107be0:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8107be2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107be6:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8107be8:	6723      	str	r3, [r4, #112]	; 0x70
      __HAL_UNLOCK(huart);
 8107bea:	2300      	movs	r3, #0
 8107bec:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8107bf0:	b002      	add	sp, #8
 8107bf2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107bf8:	9300      	str	r3, [sp, #0]
 8107bfa:	4632      	mov	r2, r6
 8107bfc:	4603      	mov	r3, r0
 8107bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107c02:	4620      	mov	r0, r4
 8107c04:	f7ff ff90 	bl	8107b28 <UART_WaitOnFlagUntilTimeout>
 8107c08:	6823      	ldr	r3, [r4, #0]
 8107c0a:	2800      	cmp	r0, #0
 8107c0c:	d0e1      	beq.n	8107bd2 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c0e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8107c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c16:	e843 2100 	strex	r1, r2, [r3]
 8107c1a:	2900      	cmp	r1, #0
 8107c1c:	d1f7      	bne.n	8107c0e <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8107c1e:	2320      	movs	r3, #32
 8107c20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8107c24:	2003      	movs	r0, #3
 8107c26:	e7e0      	b.n	8107bea <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107c2c:	9300      	str	r3, [sp, #0]
 8107c2e:	2200      	movs	r2, #0
 8107c30:	462b      	mov	r3, r5
 8107c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107c36:	4620      	mov	r0, r4
 8107c38:	f7ff ff76 	bl	8107b28 <UART_WaitOnFlagUntilTimeout>
 8107c3c:	2800      	cmp	r0, #0
 8107c3e:	d0cb      	beq.n	8107bd8 <UART_CheckIdleState+0x20>
 8107c40:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c42:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107c46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c4a:	e843 2100 	strex	r1, r2, [r3]
 8107c4e:	2900      	cmp	r1, #0
 8107c50:	d1f7      	bne.n	8107c42 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c52:	f103 0208 	add.w	r2, r3, #8
 8107c56:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107c5a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c5e:	f103 0008 	add.w	r0, r3, #8
 8107c62:	e840 2100 	strex	r1, r2, [r0]
 8107c66:	2900      	cmp	r1, #0
 8107c68:	d1f3      	bne.n	8107c52 <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 8107c6a:	2320      	movs	r3, #32
 8107c6c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 8107c70:	2003      	movs	r0, #3
 8107c72:	e7ba      	b.n	8107bea <UART_CheckIdleState+0x32>

08107c74 <HAL_UART_Init>:
  if (huart == NULL)
 8107c74:	b380      	cbz	r0, 8107cd8 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8107c76:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8107c7a:	b510      	push	{r4, lr}
 8107c7c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8107c7e:	b333      	cbz	r3, 8107cce <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8107c80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107c82:	2324      	movs	r3, #36	; 0x24
 8107c84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8107c88:	6813      	ldr	r3, [r2, #0]
 8107c8a:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107c8e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8107c90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107c92:	f7ff fc53 	bl	810753c <UART_SetConfig>
 8107c96:	2801      	cmp	r0, #1
 8107c98:	d017      	beq.n	8107cca <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107c9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8107c9c:	b98b      	cbnz	r3, 8107cc2 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107c9e:	6823      	ldr	r3, [r4, #0]
 8107ca0:	685a      	ldr	r2, [r3, #4]
 8107ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107ca8:	689a      	ldr	r2, [r3, #8]
 8107caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107cae:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8107cb0:	681a      	ldr	r2, [r3, #0]
 8107cb2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8107cb6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8107cb8:	601a      	str	r2, [r3, #0]
}
 8107cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8107cbe:	f7ff bf7b 	b.w	8107bb8 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8107cc2:	4620      	mov	r0, r4
 8107cc4:	f7ff fed8 	bl	8107a78 <UART_AdvFeatureConfig>
 8107cc8:	e7e9      	b.n	8107c9e <HAL_UART_Init+0x2a>
}
 8107cca:	2001      	movs	r0, #1
 8107ccc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8107cce:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8107cd2:	f7fa ffa7 	bl	8102c24 <HAL_UART_MspInit>
 8107cd6:	e7d3      	b.n	8107c80 <HAL_UART_Init+0xc>
}
 8107cd8:	2001      	movs	r0, #1
 8107cda:	4770      	bx	lr

08107cdc <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107cdc:	6803      	ldr	r3, [r0, #0]
 8107cde:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107ce0:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8107ce2:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107ce4:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107ce8:	4d0a      	ldr	r5, [pc, #40]	; (8107d14 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8107cea:	4c0b      	ldr	r4, [pc, #44]	; (8107d18 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107cec:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107cf0:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107cf4:	0112      	lsls	r2, r2, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107cf6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8107cf8:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 8107cfc:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107cfe:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107d02:	011b      	lsls	r3, r3, #4
  }
}
 8107d04:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107d06:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107d0a:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107d0e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8107d12:	4770      	bx	lr
 8107d14:	0810f43c 	.word	0x0810f43c
 8107d18:	0810f434 	.word	0x0810f434

08107d1c <HAL_UARTEx_WakeupCallback>:
}
 8107d1c:	4770      	bx	lr
 8107d1e:	bf00      	nop

08107d20 <HAL_UARTEx_RxFifoFullCallback>:
 8107d20:	4770      	bx	lr
 8107d22:	bf00      	nop

08107d24 <HAL_UARTEx_TxFifoEmptyCallback>:
 8107d24:	4770      	bx	lr
 8107d26:	bf00      	nop

08107d28 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8107d28:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8107d2c:	2b01      	cmp	r3, #1
 8107d2e:	d017      	beq.n	8107d60 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107d30:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107d32:	2324      	movs	r3, #36	; 0x24
{
 8107d34:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8107d36:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107d3a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8107d3c:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107d3e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8107d40:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107d44:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8107d48:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107d4a:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107d4c:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 8107d4e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8107d52:	2220      	movs	r2, #32
 8107d54:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 8107d58:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8107d5c:	4618      	mov	r0, r3
}
 8107d5e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8107d60:	2002      	movs	r0, #2
}
 8107d62:	4770      	bx	lr

08107d64 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8107d64:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8107d68:	2b01      	cmp	r3, #1
 8107d6a:	d01f      	beq.n	8107dac <HAL_UARTEx_SetTxFifoThreshold+0x48>
{
 8107d6c:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8107d6e:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107d70:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107d72:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107d76:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8107d78:	682b      	ldr	r3, [r5, #0]
 8107d7a:	f023 0301 	bic.w	r3, r3, #1
 8107d7e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107d80:	68ab      	ldr	r3, [r5, #8]
 8107d82:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8107d86:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107d88:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107d8a:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107d8c:	4604      	mov	r4, r0
 8107d8e:	b14b      	cbz	r3, 8107da4 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8107d90:	f7ff ffa4 	bl	8107cdc <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 8107d94:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107d96:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8107d98:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8107d9a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8107d9e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8107da2:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8107da4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8107da8:	6683      	str	r3, [r0, #104]	; 0x68
 8107daa:	e7f3      	b.n	8107d94 <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8107dac:	2002      	movs	r0, #2
}
 8107dae:	4770      	bx	lr

08107db0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8107db0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8107db4:	2b01      	cmp	r3, #1
 8107db6:	d01f      	beq.n	8107df8 <HAL_UARTEx_SetRxFifoThreshold+0x48>
{
 8107db8:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8107dba:	2324      	movs	r3, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107dbc:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107dbe:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107dc2:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8107dc4:	682b      	ldr	r3, [r5, #0]
 8107dc6:	f023 0301 	bic.w	r3, r3, #1
 8107dca:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107dcc:	68ab      	ldr	r3, [r5, #8]
 8107dce:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8107dd2:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107dd4:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8107dd6:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107dd8:	4604      	mov	r4, r0
 8107dda:	b14b      	cbz	r3, 8107df0 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 8107ddc:	f7ff ff7e 	bl	8107cdc <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 8107de0:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107de2:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8107de4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8107de6:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8107dea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8107dee:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8107df0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8107df4:	6683      	str	r3, [r0, #104]	; 0x68
 8107df6:	e7f3      	b.n	8107de0 <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8107df8:	2002      	movs	r0, #2
}
 8107dfa:	4770      	bx	lr

08107dfc <arm_rfft_32_fast_init_f32>:
 8107dfc:	b180      	cbz	r0, 8107e20 <arm_rfft_32_fast_init_f32+0x24>
 8107dfe:	4b0a      	ldr	r3, [pc, #40]	; (8107e28 <arm_rfft_32_fast_init_f32+0x2c>)
 8107e00:	4a0a      	ldr	r2, [pc, #40]	; (8107e2c <arm_rfft_32_fast_init_f32+0x30>)
 8107e02:	8999      	ldrh	r1, [r3, #12]
 8107e04:	b430      	push	{r4, r5}
 8107e06:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107e0a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107e0e:	8181      	strh	r1, [r0, #12]
 8107e10:	2320      	movs	r3, #32
 8107e12:	2110      	movs	r1, #16
 8107e14:	8001      	strh	r1, [r0, #0]
 8107e16:	8203      	strh	r3, [r0, #16]
 8107e18:	6142      	str	r2, [r0, #20]
 8107e1a:	bc30      	pop	{r4, r5}
 8107e1c:	2000      	movs	r0, #0
 8107e1e:	4770      	bx	lr
 8107e20:	f04f 30ff 	mov.w	r0, #4294967295
 8107e24:	4770      	bx	lr
 8107e26:	bf00      	nop
 8107e28:	081129bc 	.word	0x081129bc
 8107e2c:	0811df9c 	.word	0x0811df9c

08107e30 <arm_rfft_64_fast_init_f32>:
 8107e30:	b180      	cbz	r0, 8107e54 <arm_rfft_64_fast_init_f32+0x24>
 8107e32:	4b0a      	ldr	r3, [pc, #40]	; (8107e5c <arm_rfft_64_fast_init_f32+0x2c>)
 8107e34:	4a0a      	ldr	r2, [pc, #40]	; (8107e60 <arm_rfft_64_fast_init_f32+0x30>)
 8107e36:	8999      	ldrh	r1, [r3, #12]
 8107e38:	b430      	push	{r4, r5}
 8107e3a:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107e3e:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107e42:	8181      	strh	r1, [r0, #12]
 8107e44:	2340      	movs	r3, #64	; 0x40
 8107e46:	2120      	movs	r1, #32
 8107e48:	8001      	strh	r1, [r0, #0]
 8107e4a:	8203      	strh	r3, [r0, #16]
 8107e4c:	6142      	str	r2, [r0, #20]
 8107e4e:	bc30      	pop	{r4, r5}
 8107e50:	2000      	movs	r0, #0
 8107e52:	4770      	bx	lr
 8107e54:	f04f 30ff 	mov.w	r0, #4294967295
 8107e58:	4770      	bx	lr
 8107e5a:	bf00      	nop
 8107e5c:	081129ec 	.word	0x081129ec
 8107e60:	0812281c 	.word	0x0812281c

08107e64 <arm_rfft_128_fast_init_f32>:
 8107e64:	b180      	cbz	r0, 8107e88 <arm_rfft_128_fast_init_f32+0x24>
 8107e66:	4b0a      	ldr	r3, [pc, #40]	; (8107e90 <arm_rfft_128_fast_init_f32+0x2c>)
 8107e68:	4a0a      	ldr	r2, [pc, #40]	; (8107e94 <arm_rfft_128_fast_init_f32+0x30>)
 8107e6a:	8999      	ldrh	r1, [r3, #12]
 8107e6c:	b430      	push	{r4, r5}
 8107e6e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107e72:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107e76:	8181      	strh	r1, [r0, #12]
 8107e78:	2380      	movs	r3, #128	; 0x80
 8107e7a:	2140      	movs	r1, #64	; 0x40
 8107e7c:	8001      	strh	r1, [r0, #0]
 8107e7e:	8203      	strh	r3, [r0, #16]
 8107e80:	6142      	str	r2, [r0, #20]
 8107e82:	bc30      	pop	{r4, r5}
 8107e84:	2000      	movs	r0, #0
 8107e86:	4770      	bx	lr
 8107e88:	f04f 30ff 	mov.w	r0, #4294967295
 8107e8c:	4770      	bx	lr
 8107e8e:	bf00      	nop
 8107e90:	08112a0c 	.word	0x08112a0c
 8107e94:	0811b99c 	.word	0x0811b99c

08107e98 <arm_rfft_256_fast_init_f32>:
 8107e98:	b188      	cbz	r0, 8107ebe <arm_rfft_256_fast_init_f32+0x26>
 8107e9a:	4b0a      	ldr	r3, [pc, #40]	; (8107ec4 <arm_rfft_256_fast_init_f32+0x2c>)
 8107e9c:	4a0a      	ldr	r2, [pc, #40]	; (8107ec8 <arm_rfft_256_fast_init_f32+0x30>)
 8107e9e:	8999      	ldrh	r1, [r3, #12]
 8107ea0:	b430      	push	{r4, r5}
 8107ea2:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107ea6:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107eaa:	8181      	strh	r1, [r0, #12]
 8107eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8107eb0:	2180      	movs	r1, #128	; 0x80
 8107eb2:	8001      	strh	r1, [r0, #0]
 8107eb4:	8203      	strh	r3, [r0, #16]
 8107eb6:	6142      	str	r2, [r0, #20]
 8107eb8:	bc30      	pop	{r4, r5}
 8107eba:	2000      	movs	r0, #0
 8107ebc:	4770      	bx	lr
 8107ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8107ec2:	4770      	bx	lr
 8107ec4:	081129ac 	.word	0x081129ac
 8107ec8:	0811db9c 	.word	0x0811db9c

08107ecc <arm_rfft_512_fast_init_f32>:
 8107ecc:	b190      	cbz	r0, 8107ef4 <arm_rfft_512_fast_init_f32+0x28>
 8107ece:	4b0b      	ldr	r3, [pc, #44]	; (8107efc <arm_rfft_512_fast_init_f32+0x30>)
 8107ed0:	4a0b      	ldr	r2, [pc, #44]	; (8107f00 <arm_rfft_512_fast_init_f32+0x34>)
 8107ed2:	8999      	ldrh	r1, [r3, #12]
 8107ed4:	b430      	push	{r4, r5}
 8107ed6:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107eda:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107ede:	8181      	strh	r1, [r0, #12]
 8107ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8107ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8107ee8:	8001      	strh	r1, [r0, #0]
 8107eea:	8203      	strh	r3, [r0, #16]
 8107eec:	6142      	str	r2, [r0, #20]
 8107eee:	bc30      	pop	{r4, r5}
 8107ef0:	2000      	movs	r0, #0
 8107ef2:	4770      	bx	lr
 8107ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8107ef8:	4770      	bx	lr
 8107efa:	bf00      	nop
 8107efc:	081129dc 	.word	0x081129dc
 8107f00:	0812201c 	.word	0x0812201c

08107f04 <arm_rfft_1024_fast_init_f32>:
 8107f04:	b190      	cbz	r0, 8107f2c <arm_rfft_1024_fast_init_f32+0x28>
 8107f06:	4b0b      	ldr	r3, [pc, #44]	; (8107f34 <arm_rfft_1024_fast_init_f32+0x30>)
 8107f08:	4a0b      	ldr	r2, [pc, #44]	; (8107f38 <arm_rfft_1024_fast_init_f32+0x34>)
 8107f0a:	8999      	ldrh	r1, [r3, #12]
 8107f0c:	b430      	push	{r4, r5}
 8107f0e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107f12:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107f16:	8181      	strh	r1, [r0, #12]
 8107f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8107f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8107f20:	8001      	strh	r1, [r0, #0]
 8107f22:	8203      	strh	r3, [r0, #16]
 8107f24:	6142      	str	r2, [r0, #20]
 8107f26:	bc30      	pop	{r4, r5}
 8107f28:	2000      	movs	r0, #0
 8107f2a:	4770      	bx	lr
 8107f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8107f30:	4770      	bx	lr
 8107f32:	bf00      	nop
 8107f34:	081129fc 	.word	0x081129fc
 8107f38:	0811a99c 	.word	0x0811a99c

08107f3c <arm_rfft_2048_fast_init_f32>:
 8107f3c:	b190      	cbz	r0, 8107f64 <arm_rfft_2048_fast_init_f32+0x28>
 8107f3e:	4b0b      	ldr	r3, [pc, #44]	; (8107f6c <arm_rfft_2048_fast_init_f32+0x30>)
 8107f40:	4a0b      	ldr	r2, [pc, #44]	; (8107f70 <arm_rfft_2048_fast_init_f32+0x34>)
 8107f42:	8999      	ldrh	r1, [r3, #12]
 8107f44:	b430      	push	{r4, r5}
 8107f46:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107f4a:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107f4e:	8181      	strh	r1, [r0, #12]
 8107f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8107f58:	8001      	strh	r1, [r0, #0]
 8107f5a:	8203      	strh	r3, [r0, #16]
 8107f5c:	6142      	str	r2, [r0, #20]
 8107f5e:	bc30      	pop	{r4, r5}
 8107f60:	2000      	movs	r0, #0
 8107f62:	4770      	bx	lr
 8107f64:	f04f 30ff 	mov.w	r0, #4294967295
 8107f68:	4770      	bx	lr
 8107f6a:	bf00      	nop
 8107f6c:	0811299c 	.word	0x0811299c
 8107f70:	0811bb9c 	.word	0x0811bb9c

08107f74 <arm_rfft_4096_fast_init_f32>:
 8107f74:	b190      	cbz	r0, 8107f9c <arm_rfft_4096_fast_init_f32+0x28>
 8107f76:	4b0b      	ldr	r3, [pc, #44]	; (8107fa4 <arm_rfft_4096_fast_init_f32+0x30>)
 8107f78:	4a0b      	ldr	r2, [pc, #44]	; (8107fa8 <arm_rfft_4096_fast_init_f32+0x34>)
 8107f7a:	8999      	ldrh	r1, [r3, #12]
 8107f7c:	b430      	push	{r4, r5}
 8107f7e:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
 8107f82:	e9c0 4501 	strd	r4, r5, [r0, #4]
 8107f86:	8181      	strh	r1, [r0, #12]
 8107f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8107f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8107f90:	8001      	strh	r1, [r0, #0]
 8107f92:	8203      	strh	r3, [r0, #16]
 8107f94:	6142      	str	r2, [r0, #20]
 8107f96:	bc30      	pop	{r4, r5}
 8107f98:	2000      	movs	r0, #0
 8107f9a:	4770      	bx	lr
 8107f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8107fa0:	4770      	bx	lr
 8107fa2:	bf00      	nop
 8107fa4:	081129cc 	.word	0x081129cc
 8107fa8:	0811e01c 	.word	0x0811e01c

08107fac <arm_radix8_butterfly_f32>:
 8107fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107fb0:	ed2d 8b10 	vpush	{d8-d15}
 8107fb4:	b097      	sub	sp, #92	; 0x5c
 8107fb6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8107fba:	4603      	mov	r3, r0
 8107fbc:	3304      	adds	r3, #4
 8107fbe:	eddf cacb 	vldr	s25, [pc, #812]	; 81082ec <arm_radix8_butterfly_f32+0x340>
 8107fc2:	9014      	str	r0, [sp, #80]	; 0x50
 8107fc4:	468a      	mov	sl, r1
 8107fc6:	468b      	mov	fp, r1
 8107fc8:	9315      	str	r3, [sp, #84]	; 0x54
 8107fca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8107fcc:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8107fd0:	eb04 1246 	add.w	r2, r4, r6, lsl #5
 8107fd4:	eb02 1006 	add.w	r0, r2, r6, lsl #4
 8107fd8:	0131      	lsls	r1, r6, #4
 8107fda:	eba6 0386 	sub.w	r3, r6, r6, lsl #2
 8107fde:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8107fe2:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8107fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8107fea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8107fee:	3104      	adds	r1, #4
 8107ff0:	f108 0004 	add.w	r0, r8, #4
 8107ff4:	9611      	str	r6, [sp, #68]	; 0x44
 8107ff6:	4420      	add	r0, r4
 8107ff8:	4421      	add	r1, r4
 8107ffa:	012c      	lsls	r4, r5, #4
 8107ffc:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 8108000:	9403      	str	r4, [sp, #12]
 8108002:	00ec      	lsls	r4, r5, #3
 8108004:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8108006:	9404      	str	r4, [sp, #16]
 8108008:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 810800c:	9405      	str	r4, [sp, #20]
 810800e:	016c      	lsls	r4, r5, #5
 8108010:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
 8108014:	9402      	str	r4, [sp, #8]
 8108016:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8108018:	9c00      	ldr	r4, [sp, #0]
 810801a:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 810801e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8108022:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8108026:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 810802a:	f04f 0c00 	mov.w	ip, #0
 810802e:	ed51 aa01 	vldr	s21, [r1, #-4]
 8108032:	edd3 1a00 	vldr	s3, [r3]
 8108036:	ed92 7a00 	vldr	s14, [r2]
 810803a:	ed94 5a00 	vldr	s10, [r4]
 810803e:	ed96 4a00 	vldr	s8, [r6]
 8108042:	edd7 7a00 	vldr	s15, [r7]
 8108046:	ed15 2a01 	vldr	s4, [r5, #-4]
 810804a:	ed50 6a01 	vldr	s13, [r0, #-4]
 810804e:	ee32 ba07 	vadd.f32	s22, s4, s14
 8108052:	ee76 0a84 	vadd.f32	s1, s13, s8
 8108056:	ee7a 5a85 	vadd.f32	s11, s21, s10
 810805a:	ee31 0aa7 	vadd.f32	s0, s3, s15
 810805e:	ee3b 6a25 	vadd.f32	s12, s22, s11
 8108062:	ee70 4a80 	vadd.f32	s9, s1, s0
 8108066:	ee76 6ac4 	vsub.f32	s13, s13, s8
 810806a:	ee36 4a24 	vadd.f32	s8, s12, s9
 810806e:	ee36 6a64 	vsub.f32	s12, s12, s9
 8108072:	ed05 4a01 	vstr	s8, [r5, #-4]
 8108076:	ed82 6a00 	vstr	s12, [r2]
 810807a:	edd0 ba00 	vldr	s23, [r0]
 810807e:	edd6 2a01 	vldr	s5, [r6, #4]
 8108082:	edd3 9a01 	vldr	s19, [r3, #4]
 8108086:	ed95 aa00 	vldr	s20, [r5]
 810808a:	ed92 6a01 	vldr	s12, [r2, #4]
 810808e:	ed97 3a01 	vldr	s6, [r7, #4]
 8108092:	ed91 ca00 	vldr	s24, [r1]
 8108096:	edd4 4a01 	vldr	s9, [r4, #4]
 810809a:	ee7b 3ae2 	vsub.f32	s7, s23, s5
 810809e:	ee36 9ae1 	vsub.f32	s18, s13, s3
 81080a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 81080a6:	ee73 8ae9 	vsub.f32	s17, s7, s19
 81080aa:	ee3a 4a46 	vsub.f32	s8, s20, s12
 81080ae:	ee39 9a27 	vadd.f32	s18, s18, s15
 81080b2:	ee78 8a83 	vadd.f32	s17, s17, s6
 81080b6:	eeb0 8a42 	vmov.f32	s16, s4
 81080ba:	eea9 8a6c 	vfms.f32	s16, s18, s25
 81080be:	44dc      	add	ip, fp
 81080c0:	45e2      	cmp	sl, ip
 81080c2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 81080c6:	eeb0 1a44 	vmov.f32	s2, s8
 81080ca:	eea8 1aec 	vfms.f32	s2, s17, s25
 81080ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81080d2:	ee33 7aa9 	vadd.f32	s14, s7, s19
 81080d6:	ee7c 3a64 	vsub.f32	s7, s24, s9
 81080da:	ee77 7aa1 	vadd.f32	s15, s15, s3
 81080de:	ee3a 6a06 	vadd.f32	s12, s20, s12
 81080e2:	ee7a 1ac5 	vsub.f32	s3, s21, s10
 81080e6:	ee3c aa24 	vadd.f32	s20, s24, s9
 81080ea:	ee74 4acc 	vsub.f32	s9, s9, s24
 81080ee:	ee39 3a83 	vadd.f32	s6, s19, s6
 81080f2:	ee35 5a6a 	vsub.f32	s10, s10, s21
 81080f6:	eef0 9a63 	vmov.f32	s19, s7
 81080fa:	eef0 aa48 	vmov.f32	s21, s16
 81080fe:	eee7 9a2c 	vfma.f32	s19, s14, s25
 8108102:	eea8 4aac 	vfma.f32	s8, s17, s25
 8108106:	eee7 4a2c 	vfma.f32	s9, s14, s25
 810810a:	eee7 aa6c 	vfms.f32	s21, s14, s25
 810810e:	eef0 8a41 	vmov.f32	s17, s2
 8108112:	eeb0 7a42 	vmov.f32	s14, s4
 8108116:	eeb0 2a61 	vmov.f32	s4, s3
 810811a:	ee7b 6a65 	vsub.f32	s13, s22, s11
 810811e:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 8108122:	ee76 5a4a 	vsub.f32	s11, s12, s20
 8108126:	eea9 7a2c 	vfma.f32	s14, s18, s25
 810812a:	eea7 2aac 	vfma.f32	s4, s15, s25
 810812e:	eea7 5aac 	vfma.f32	s10, s15, s25
 8108132:	eee7 8aec 	vfms.f32	s17, s15, s25
 8108136:	ee32 ba83 	vadd.f32	s22, s5, s6
 810813a:	ee76 bac3 	vsub.f32	s23, s13, s6
 810813e:	ee35 9ae0 	vsub.f32	s18, s11, s1
 8108142:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8108146:	ee36 6a0a 	vadd.f32	s12, s12, s20
 810814a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 810814e:	ee36 aa0b 	vadd.f32	s20, s12, s22
 8108152:	ee76 6a83 	vadd.f32	s13, s13, s6
 8108156:	ee77 7aa0 	vadd.f32	s15, s15, s1
 810815a:	ee34 3a42 	vsub.f32	s6, s8, s4
 810815e:	ee77 0a29 	vadd.f32	s1, s14, s19
 8108162:	ee36 6a4b 	vsub.f32	s12, s12, s22
 8108166:	ee7b 2aa2 	vadd.f32	s5, s23, s5
 810816a:	ee39 0a00 	vadd.f32	s0, s18, s0
 810816e:	ee73 3aaa 	vadd.f32	s7, s7, s21
 8108172:	ee78 4a24 	vadd.f32	s9, s16, s9
 8108176:	ee37 7a69 	vsub.f32	s14, s14, s19
 810817a:	ee31 5a05 	vadd.f32	s10, s2, s10
 810817e:	ee71 5aa8 	vadd.f32	s11, s3, s17
 8108182:	ee32 4a04 	vadd.f32	s8, s4, s8
 8108186:	ed85 aa00 	vstr	s20, [r5]
 810818a:	ed82 6a01 	vstr	s12, [r2, #4]
 810818e:	444d      	add	r5, r9
 8108190:	ed41 2a01 	vstr	s5, [r1, #-4]
 8108194:	444a      	add	r2, r9
 8108196:	edc4 6a00 	vstr	s13, [r4]
 810819a:	ed81 0a00 	vstr	s0, [r1]
 810819e:	edc4 7a01 	vstr	s15, [r4, #4]
 81081a2:	4449      	add	r1, r9
 81081a4:	ed40 0a01 	vstr	s1, [r0, #-4]
 81081a8:	444c      	add	r4, r9
 81081aa:	ed87 7a00 	vstr	s14, [r7]
 81081ae:	edc6 3a00 	vstr	s7, [r6]
 81081b2:	edc3 4a00 	vstr	s9, [r3]
 81081b6:	ed80 3a00 	vstr	s6, [r0]
 81081ba:	ed87 4a01 	vstr	s8, [r7, #4]
 81081be:	4448      	add	r0, r9
 81081c0:	ed86 5a01 	vstr	s10, [r6, #4]
 81081c4:	444f      	add	r7, r9
 81081c6:	edc3 5a01 	vstr	s11, [r3, #4]
 81081ca:	444e      	add	r6, r9
 81081cc:	444b      	add	r3, r9
 81081ce:	f63f af2e 	bhi.w	810802e <arm_radix8_butterfly_f32+0x82>
 81081d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81081d4:	2b07      	cmp	r3, #7
 81081d6:	f240 81c9 	bls.w	810856c <arm_radix8_butterfly_f32+0x5c0>
 81081da:	9d02      	ldr	r5, [sp, #8]
 81081dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 81081de:	9b01      	ldr	r3, [sp, #4]
 81081e0:	9803      	ldr	r0, [sp, #12]
 81081e2:	9904      	ldr	r1, [sp, #16]
 81081e4:	9a05      	ldr	r2, [sp, #20]
 81081e6:	3508      	adds	r5, #8
 81081e8:	1975      	adds	r5, r6, r5
 81081ea:	330c      	adds	r3, #12
 81081ec:	950e      	str	r5, [sp, #56]	; 0x38
 81081ee:	4635      	mov	r5, r6
 81081f0:	18eb      	adds	r3, r5, r3
 81081f2:	f108 0808 	add.w	r8, r8, #8
 81081f6:	f10e 0408 	add.w	r4, lr, #8
 81081fa:	3008      	adds	r0, #8
 81081fc:	3108      	adds	r1, #8
 81081fe:	3208      	adds	r2, #8
 8108200:	9307      	str	r3, [sp, #28]
 8108202:	f105 030c 	add.w	r3, r5, #12
 8108206:	4446      	add	r6, r8
 8108208:	f04f 0e00 	mov.w	lr, #0
 810820c:	192c      	adds	r4, r5, r4
 810820e:	1828      	adds	r0, r5, r0
 8108210:	1869      	adds	r1, r5, r1
 8108212:	18aa      	adds	r2, r5, r2
 8108214:	9308      	str	r3, [sp, #32]
 8108216:	465b      	mov	r3, fp
 8108218:	960d      	str	r6, [sp, #52]	; 0x34
 810821a:	46f3      	mov	fp, lr
 810821c:	940c      	str	r4, [sp, #48]	; 0x30
 810821e:	900b      	str	r0, [sp, #44]	; 0x2c
 8108220:	910a      	str	r1, [sp, #40]	; 0x28
 8108222:	9209      	str	r2, [sp, #36]	; 0x24
 8108224:	f04f 0801 	mov.w	r8, #1
 8108228:	469e      	mov	lr, r3
 810822a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810822c:	449b      	add	fp, r3
 810822e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8108230:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8108234:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 8108238:	9310      	str	r3, [sp, #64]	; 0x40
 810823a:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
 810823e:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8108242:	9102      	str	r1, [sp, #8]
 8108244:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8108248:	eb01 05cb 	add.w	r5, r1, fp, lsl #3
 810824c:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8108250:	edd6 7a00 	vldr	s15, [r6]
 8108254:	930f      	str	r3, [sp, #60]	; 0x3c
 8108256:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 810825a:	9101      	str	r1, [sp, #4]
 810825c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8108260:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
 8108264:	edd3 aa01 	vldr	s21, [r3, #4]
 8108268:	edcd 7a06 	vstr	s15, [sp, #24]
 810826c:	9b01      	ldr	r3, [sp, #4]
 810826e:	edd5 7a00 	vldr	s15, [r5]
 8108272:	ed97 ba01 	vldr	s22, [r7, #4]
 8108276:	edcd 7a05 	vstr	s15, [sp, #20]
 810827a:	edd3 7a00 	vldr	s15, [r3]
 810827e:	9b02      	ldr	r3, [sp, #8]
 8108280:	edcd 7a04 	vstr	s15, [sp, #16]
 8108284:	edd3 7a00 	vldr	s15, [r3]
 8108288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810828a:	edcd 7a03 	vstr	s15, [sp, #12]
 810828e:	eb07 0ccb 	add.w	ip, r7, fp, lsl #3
 8108292:	edd3 7a00 	vldr	s15, [r3]
 8108296:	eddc ba01 	vldr	s23, [ip, #4]
 810829a:	edcd 7a02 	vstr	s15, [sp, #8]
 810829e:	eb0c 01cb 	add.w	r1, ip, fp, lsl #3
 81082a2:	edd2 7a00 	vldr	s15, [r2]
 81082a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 81082a8:	9100      	str	r1, [sp, #0]
 81082aa:	eb01 00cb 	add.w	r0, r1, fp, lsl #3
 81082ae:	4601      	mov	r1, r0
 81082b0:	ed91 da01 	vldr	s26, [r1, #4]
 81082b4:	edcd 7a01 	vstr	s15, [sp, #4]
 81082b8:	9900      	ldr	r1, [sp, #0]
 81082ba:	edd2 7a00 	vldr	s15, [r2]
 81082be:	ed91 ca01 	vldr	s24, [r1, #4]
 81082c2:	eb00 00cb 	add.w	r0, r0, fp, lsl #3
 81082c6:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 81082ca:	ed94 ea01 	vldr	s28, [r4, #4]
 81082ce:	edd0 da01 	vldr	s27, [r0, #4]
 81082d2:	edcd 7a00 	vstr	s15, [sp]
 81082d6:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 81082da:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
 81082de:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 81082e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 81082e6:	46c4      	mov	ip, r8
 81082e8:	e002      	b.n	81082f0 <arm_radix8_butterfly_f32+0x344>
 81082ea:	bf00      	nop
 81082ec:	3f3504f3 	.word	0x3f3504f3
 81082f0:	ed94 9a00 	vldr	s18, [r4]
 81082f4:	ed90 fa00 	vldr	s30, [r0]
 81082f8:	ed91 6a00 	vldr	s12, [r1]
 81082fc:	edd5 7a00 	vldr	s15, [r5]
 8108300:	edd3 6a00 	vldr	s13, [r3]
 8108304:	ed57 4a01 	vldr	s9, [r7, #-4]
 8108308:	ed92 5a00 	vldr	s10, [r2]
 810830c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8108310:	ed96 aa00 	vldr	s20, [r6]
 8108314:	ee35 0a06 	vadd.f32	s0, s10, s12
 8108318:	ee73 5aa6 	vadd.f32	s11, s7, s13
 810831c:	ee39 8a27 	vadd.f32	s16, s18, s15
 8108320:	ee34 7a8f 	vadd.f32	s14, s9, s30
 8108324:	ee70 2a08 	vadd.f32	s5, s0, s16
 8108328:	ee75 ea87 	vadd.f32	s29, s11, s14
 810832c:	ee35 5a46 	vsub.f32	s10, s10, s12
 8108330:	ee3e 6aa2 	vadd.f32	s12, s29, s5
 8108334:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8108338:	ed06 6a01 	vstr	s12, [r6, #-4]
 810833c:	edd1 9a01 	vldr	s19, [r1, #4]
 8108340:	edd2 fa01 	vldr	s31, [r2, #4]
 8108344:	edd4 6a01 	vldr	s13, [r4, #4]
 8108348:	edd3 1a01 	vldr	s3, [r3, #4]
 810834c:	ed95 3a01 	vldr	s6, [r5, #4]
 8108350:	edd0 8a01 	vldr	s17, [r0, #4]
 8108354:	ed97 4a00 	vldr	s8, [r7]
 8108358:	ee3f 6ae9 	vsub.f32	s12, s31, s19
 810835c:	ee35 1a49 	vsub.f32	s2, s10, s18
 8108360:	ee76 0a66 	vsub.f32	s1, s12, s13
 8108364:	ee31 1a27 	vadd.f32	s2, s2, s15
 8108368:	ee3a 2a61 	vsub.f32	s4, s20, s3
 810836c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8108370:	ee70 0a83 	vadd.f32	s1, s1, s6
 8108374:	ee3f 5aa9 	vadd.f32	s10, s31, s19
 8108378:	ee74 9acf 	vsub.f32	s19, s9, s30
 810837c:	ee77 7a89 	vadd.f32	s15, s15, s18
 8108380:	ee7a 1a21 	vadd.f32	s3, s20, s3
 8108384:	eeb0 aa42 	vmov.f32	s20, s4
 8108388:	ee74 fa68 	vsub.f32	s31, s8, s17
 810838c:	eea0 aaec 	vfms.f32	s20, s1, s25
 8108390:	44f4      	add	ip, lr
 8108392:	45e2      	cmp	sl, ip
 8108394:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8108398:	eeb0 9a63 	vmov.f32	s18, s7
 810839c:	ee74 5a28 	vadd.f32	s11, s8, s17
 81083a0:	ee38 4ac4 	vsub.f32	s8, s17, s8
 81083a4:	eef0 8a69 	vmov.f32	s17, s19
 81083a8:	eea1 9a6c 	vfms.f32	s18, s2, s25
 81083ac:	eee7 8aac 	vfma.f32	s17, s15, s25
 81083b0:	ee36 6a43 	vsub.f32	s12, s12, s6
 81083b4:	ee7f 4a64 	vsub.f32	s9, s30, s9
 81083b8:	ee36 6a26 	vadd.f32	s12, s12, s13
 81083bc:	eea0 2aac 	vfma.f32	s4, s1, s25
 81083c0:	eef0 0a4a 	vmov.f32	s1, s20
 81083c4:	eee7 0aec 	vfms.f32	s1, s15, s25
 81083c8:	eee7 4aac 	vfma.f32	s9, s15, s25
 81083cc:	eef0 7a68 	vmov.f32	s15, s17
 81083d0:	eef0 8a49 	vmov.f32	s17, s18
 81083d4:	ee36 3a83 	vadd.f32	s6, s13, s6
 81083d8:	eee6 8a6c 	vfms.f32	s17, s12, s25
 81083dc:	eee1 3a2c 	vfma.f32	s7, s2, s25
 81083e0:	eeb0 1a6f 	vmov.f32	s2, s31
 81083e4:	eea6 1a2c 	vfma.f32	s2, s12, s25
 81083e8:	ee71 6ae5 	vsub.f32	s13, s3, s11
 81083ec:	eea6 4a2c 	vfma.f32	s8, s12, s25
 81083f0:	ee71 5aa5 	vadd.f32	s11, s3, s11
 81083f4:	ee75 1a03 	vadd.f32	s3, s10, s6
 81083f8:	ee7e 2ae2 	vsub.f32	s5, s29, s5
 81083fc:	ee37 fa43 	vsub.f32	s30, s14, s6
 8108400:	ee75 eae1 	vsub.f32	s29, s11, s3
 8108404:	eeb0 6a68 	vmov.f32	s12, s17
 8108408:	ee76 8ac0 	vsub.f32	s17, s13, s0
 810840c:	ee34 4a09 	vadd.f32	s8, s8, s18
 8108410:	ee76 fa2f 	vadd.f32	s31, s12, s31
 8108414:	ee76 6ac8 	vsub.f32	s13, s13, s16
 8108418:	ee33 6a81 	vadd.f32	s12, s7, s2
 810841c:	ee38 8a88 	vadd.f32	s16, s17, s16
 8108420:	ee73 3ac1 	vsub.f32	s7, s7, s2
 8108424:	ee37 7a45 	vsub.f32	s14, s14, s10
 8108428:	ee2c 1a2e 	vmul.f32	s2, s24, s29
 810842c:	ee3f 5a05 	vadd.f32	s10, s30, s10
 8108430:	ee22 9acc 	vnmul.f32	s18, s5, s24
 8108434:	ed9d fa03 	vldr	s30, [sp, #12]
 8108438:	ee70 6a26 	vadd.f32	s13, s0, s13
 810843c:	ee33 7a07 	vadd.f32	s14, s6, s14
 8108440:	eeaf 1a22 	vfma.f32	s2, s30, s5
 8108444:	eeaf 9a2e 	vfma.f32	s18, s30, s29
 8108448:	ee7a 4a24 	vadd.f32	s9, s20, s9
 810844c:	ed9d fa01 	vldr	s30, [sp, #4]
 8108450:	ee79 9aa0 	vadd.f32	s19, s19, s1
 8108454:	ee25 aa4b 	vnmul.f32	s20, s10, s22
 8108458:	ee72 0a67 	vsub.f32	s1, s4, s15
 810845c:	ee37 2a82 	vadd.f32	s4, s15, s4
 8108460:	ee6b 7a08 	vmul.f32	s15, s22, s16
 8108464:	eeaf aa08 	vfma.f32	s20, s30, s16
 8108468:	eeef 7a05 	vfma.f32	s15, s30, s10
 810846c:	ee2d 3aa6 	vmul.f32	s6, s27, s13
 8108470:	ed9d fa05 	vldr	s30, [sp, #20]
 8108474:	ee67 8a6d 	vnmul.f32	s17, s14, s27
 8108478:	eeaf 3a07 	vfma.f32	s6, s30, s14
 810847c:	eeef 8a26 	vfma.f32	s17, s30, s13
 8108480:	ee66 2a6a 	vnmul.f32	s5, s12, s21
 8108484:	ed9d fa00 	vldr	s30, [sp]
 8108488:	ee2a 0aa0 	vmul.f32	s0, s21, s1
 810848c:	eeef 2a20 	vfma.f32	s5, s30, s1
 8108490:	ee6e ea02 	vmul.f32	s29, s28, s4
 8108494:	eddd 0a06 	vldr	s1, [sp, #24]
 8108498:	ee23 5ace 	vnmul.f32	s10, s7, s28
 810849c:	eee0 eaa3 	vfma.f32	s29, s1, s7
 81084a0:	ee2b 8aa9 	vmul.f32	s16, s23, s19
 81084a4:	eddd 3a02 	vldr	s7, [sp, #8]
 81084a8:	eeaf 0a06 	vfma.f32	s0, s30, s12
 81084ac:	eea3 8a84 	vfma.f32	s16, s7, s8
 81084b0:	ee24 7a6b 	vnmul.f32	s14, s8, s23
 81084b4:	ee6d 6a24 	vmul.f32	s13, s26, s9
 81084b8:	ed9d 4a04 	vldr	s8, [sp, #16]
 81084bc:	ee2f 6acd 	vnmul.f32	s12, s31, s26
 81084c0:	eea0 5a82 	vfma.f32	s10, s1, s4
 81084c4:	eea3 7aa9 	vfma.f32	s14, s7, s19
 81084c8:	eee4 6a2f 	vfma.f32	s13, s8, s31
 81084cc:	eea4 6a24 	vfma.f32	s12, s8, s9
 81084d0:	ee75 5aa1 	vadd.f32	s11, s11, s3
 81084d4:	edc6 5a00 	vstr	s11, [r6]
 81084d8:	ed83 1a00 	vstr	s2, [r3]
 81084dc:	ed83 9a01 	vstr	s18, [r3, #4]
 81084e0:	444e      	add	r6, r9
 81084e2:	ed47 7a01 	vstr	s15, [r7, #-4]
 81084e6:	ed87 aa00 	vstr	s20, [r7]
 81084ea:	444b      	add	r3, r9
 81084ec:	ed80 3a00 	vstr	s6, [r0]
 81084f0:	edc0 8a01 	vstr	s17, [r0, #4]
 81084f4:	444f      	add	r7, r9
 81084f6:	ed82 0a00 	vstr	s0, [r2]
 81084fa:	4448      	add	r0, r9
 81084fc:	edc2 2a01 	vstr	s5, [r2, #4]
 8108500:	edc5 ea00 	vstr	s29, [r5]
 8108504:	ed85 5a01 	vstr	s10, [r5, #4]
 8108508:	444a      	add	r2, r9
 810850a:	edc1 6a00 	vstr	s13, [r1]
 810850e:	ed81 6a01 	vstr	s12, [r1, #4]
 8108512:	444d      	add	r5, r9
 8108514:	ed84 8a00 	vstr	s16, [r4]
 8108518:	ed84 7a01 	vstr	s14, [r4, #4]
 810851c:	4449      	add	r1, r9
 810851e:	444c      	add	r4, r9
 8108520:	f63f aee6 	bhi.w	81082f0 <arm_radix8_butterfly_f32+0x344>
 8108524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108526:	3308      	adds	r3, #8
 8108528:	930e      	str	r3, [sp, #56]	; 0x38
 810852a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810852c:	3308      	adds	r3, #8
 810852e:	930d      	str	r3, [sp, #52]	; 0x34
 8108530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108532:	3308      	adds	r3, #8
 8108534:	930c      	str	r3, [sp, #48]	; 0x30
 8108536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108538:	3308      	adds	r3, #8
 810853a:	930b      	str	r3, [sp, #44]	; 0x2c
 810853c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810853e:	3308      	adds	r3, #8
 8108540:	930a      	str	r3, [sp, #40]	; 0x28
 8108542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108544:	3308      	adds	r3, #8
 8108546:	9309      	str	r3, [sp, #36]	; 0x24
 8108548:	9b08      	ldr	r3, [sp, #32]
 810854a:	3308      	adds	r3, #8
 810854c:	9308      	str	r3, [sp, #32]
 810854e:	9b07      	ldr	r3, [sp, #28]
 8108550:	3308      	adds	r3, #8
 8108552:	9307      	str	r3, [sp, #28]
 8108554:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108556:	f108 0801 	add.w	r8, r8, #1
 810855a:	4543      	cmp	r3, r8
 810855c:	f47f ae65 	bne.w	810822a <arm_radix8_butterfly_f32+0x27e>
 8108560:	469b      	mov	fp, r3
 8108562:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8108564:	00db      	lsls	r3, r3, #3
 8108566:	b29b      	uxth	r3, r3
 8108568:	9312      	str	r3, [sp, #72]	; 0x48
 810856a:	e52e      	b.n	8107fca <arm_radix8_butterfly_f32+0x1e>
 810856c:	b017      	add	sp, #92	; 0x5c
 810856e:	ecbd 8b10 	vpop	{d8-d15}
 8108572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108576:	bf00      	nop

08108578 <arm_cfft_radix8by2_f32>:
 8108578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810857c:	f8b0 e000 	ldrh.w	lr, [r0]
 8108580:	6842      	ldr	r2, [r0, #4]
 8108582:	ed2d 8b08 	vpush	{d8-d11}
 8108586:	4607      	mov	r7, r0
 8108588:	4608      	mov	r0, r1
 810858a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 810858e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8108592:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8108596:	b082      	sub	sp, #8
 8108598:	f000 80a0 	beq.w	81086dc <arm_cfft_radix8by2_f32+0x164>
 810859c:	008c      	lsls	r4, r1, #2
 810859e:	3410      	adds	r4, #16
 81085a0:	f100 0310 	add.w	r3, r0, #16
 81085a4:	1906      	adds	r6, r0, r4
 81085a6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 81085aa:	4444      	add	r4, r8
 81085ac:	f102 0c10 	add.w	ip, r2, #16
 81085b0:	f108 0510 	add.w	r5, r8, #16
 81085b4:	ed15 2a04 	vldr	s4, [r5, #-16]
 81085b8:	ed55 2a03 	vldr	s5, [r5, #-12]
 81085bc:	ed14 5a04 	vldr	s10, [r4, #-16]
 81085c0:	ed54 5a03 	vldr	s11, [r4, #-12]
 81085c4:	ed53 4a04 	vldr	s9, [r3, #-16]
 81085c8:	ed55 8a02 	vldr	s17, [r5, #-8]
 81085cc:	ed15 8a01 	vldr	s16, [r5, #-4]
 81085d0:	ed16 3a04 	vldr	s6, [r6, #-16]
 81085d4:	ed56 3a03 	vldr	s7, [r6, #-12]
 81085d8:	ed54 7a02 	vldr	s15, [r4, #-8]
 81085dc:	ed14 7a01 	vldr	s14, [r4, #-4]
 81085e0:	ed13 4a03 	vldr	s8, [r3, #-12]
 81085e4:	ed53 6a02 	vldr	s13, [r3, #-8]
 81085e8:	ed13 6a01 	vldr	s12, [r3, #-4]
 81085ec:	ed16 0a02 	vldr	s0, [r6, #-8]
 81085f0:	ed56 0a01 	vldr	s1, [r6, #-4]
 81085f4:	ee74 ba82 	vadd.f32	s23, s9, s4
 81085f8:	ee34 ba22 	vadd.f32	s22, s8, s5
 81085fc:	ee73 9a05 	vadd.f32	s19, s6, s10
 8108600:	ee33 9aa5 	vadd.f32	s18, s7, s11
 8108604:	ee30 1a27 	vadd.f32	s2, s0, s15
 8108608:	ee70 1a87 	vadd.f32	s3, s1, s14
 810860c:	ee76 aaa8 	vadd.f32	s21, s13, s17
 8108610:	ee36 aa08 	vadd.f32	s20, s12, s16
 8108614:	ed43 ba04 	vstr	s23, [r3, #-16]
 8108618:	ed03 ba03 	vstr	s22, [r3, #-12]
 810861c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8108620:	ed03 aa01 	vstr	s20, [r3, #-4]
 8108624:	ed06 1a02 	vstr	s2, [r6, #-8]
 8108628:	ed46 1a01 	vstr	s3, [r6, #-4]
 810862c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8108630:	ed06 9a03 	vstr	s18, [r6, #-12]
 8108634:	ee74 4ac2 	vsub.f32	s9, s9, s4
 8108638:	ee34 4a62 	vsub.f32	s8, s8, s5
 810863c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8108640:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8108644:	ed1c 3a04 	vldr	s6, [ip, #-16]
 8108648:	ed5c 3a03 	vldr	s7, [ip, #-12]
 810864c:	ee23 2a65 	vnmul.f32	s4, s6, s11
 8108650:	ee64 1a23 	vmul.f32	s3, s8, s7
 8108654:	ee23 1ae4 	vnmul.f32	s2, s7, s9
 8108658:	ee65 2a03 	vmul.f32	s5, s10, s6
 810865c:	eea4 1a03 	vfma.f32	s2, s8, s6
 8108660:	3310      	adds	r3, #16
 8108662:	4573      	cmp	r3, lr
 8108664:	eee4 1a83 	vfma.f32	s3, s9, s6
 8108668:	f106 0610 	add.w	r6, r6, #16
 810866c:	f10c 0c10 	add.w	ip, ip, #16
 8108670:	eea5 2a23 	vfma.f32	s4, s10, s7
 8108674:	f105 0510 	add.w	r5, r5, #16
 8108678:	f104 0410 	add.w	r4, r4, #16
 810867c:	eee5 2aa3 	vfma.f32	s5, s11, s7
 8108680:	ed05 1a07 	vstr	s2, [r5, #-28]	; 0xffffffe4
 8108684:	ed45 1a08 	vstr	s3, [r5, #-32]	; 0xffffffe0
 8108688:	ed04 2a08 	vstr	s4, [r4, #-32]	; 0xffffffe0
 810868c:	ed44 2a07 	vstr	s5, [r4, #-28]	; 0xffffffe4
 8108690:	ed5c 5a05 	vldr	s11, [ip, #-20]	; 0xffffffec
 8108694:	ed1c 5a06 	vldr	s10, [ip, #-24]	; 0xffffffe8
 8108698:	ee76 6ae8 	vsub.f32	s13, s13, s17
 810869c:	ee36 6a48 	vsub.f32	s12, s12, s16
 81086a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 81086a4:	ee37 7a60 	vsub.f32	s14, s14, s1
 81086a8:	ee26 3a25 	vmul.f32	s6, s12, s11
 81086ac:	ee65 3ae6 	vnmul.f32	s7, s11, s13
 81086b0:	ee27 4a85 	vmul.f32	s8, s15, s10
 81086b4:	ee65 4a47 	vnmul.f32	s9, s10, s14
 81086b8:	eee6 3a05 	vfma.f32	s7, s12, s10
 81086bc:	eea6 3a85 	vfma.f32	s6, s13, s10
 81086c0:	eea7 4a25 	vfma.f32	s8, s14, s11
 81086c4:	eee7 4aa5 	vfma.f32	s9, s15, s11
 81086c8:	ed05 3a06 	vstr	s6, [r5, #-24]	; 0xffffffe8
 81086cc:	ed45 3a05 	vstr	s7, [r5, #-20]	; 0xffffffec
 81086d0:	ed04 4a05 	vstr	s8, [r4, #-20]	; 0xffffffec
 81086d4:	ed44 4a06 	vstr	s9, [r4, #-24]	; 0xffffffe8
 81086d8:	f47f af6c 	bne.w	81085b4 <arm_cfft_radix8by2_f32+0x3c>
 81086dc:	b289      	uxth	r1, r1
 81086de:	2302      	movs	r3, #2
 81086e0:	9101      	str	r1, [sp, #4]
 81086e2:	f7ff fc63 	bl	8107fac <arm_radix8_butterfly_f32>
 81086e6:	9901      	ldr	r1, [sp, #4]
 81086e8:	687a      	ldr	r2, [r7, #4]
 81086ea:	4640      	mov	r0, r8
 81086ec:	2302      	movs	r3, #2
 81086ee:	b002      	add	sp, #8
 81086f0:	ecbd 8b08 	vpop	{d8-d11}
 81086f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81086f8:	f7ff bc58 	b.w	8107fac <arm_radix8_butterfly_f32>

081086fc <arm_cfft_radix8by4_f32>:
 81086fc:	8803      	ldrh	r3, [r0, #0]
 81086fe:	ed91 7a00 	vldr	s14, [r1]
 8108702:	edd1 7a01 	vldr	s15, [r1, #4]
 8108706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810870a:	085b      	lsrs	r3, r3, #1
 810870c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8108710:	edd2 5a00 	vldr	s11, [r2]
 8108714:	6847      	ldr	r7, [r0, #4]
 8108716:	ed92 4a01 	vldr	s8, [r2, #4]
 810871a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 810871e:	ed2d 8b0e 	vpush	{d8-d14}
 8108722:	ed98 5a00 	vldr	s10, [r8]
 8108726:	edd8 2a01 	vldr	s5, [r8, #4]
 810872a:	ee37 6a25 	vadd.f32	s12, s14, s11
 810872e:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 8108732:	edd5 4a00 	vldr	s9, [r5]
 8108736:	ed95 3a01 	vldr	s6, [r5, #4]
 810873a:	ee75 6a06 	vadd.f32	s13, s10, s12
 810873e:	b08f      	sub	sp, #60	; 0x3c
 8108740:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8108744:	900d      	str	r0, [sp, #52]	; 0x34
 8108746:	4608      	mov	r0, r1
 8108748:	edc0 6a00 	vstr	s13, [r0]
 810874c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8108750:	ee77 6a84 	vadd.f32	s13, s15, s8
 8108754:	edd8 5a01 	vldr	s11, [r8, #4]
 8108758:	ed95 2a01 	vldr	s4, [r5, #4]
 810875c:	920a      	str	r2, [sp, #40]	; 0x28
 810875e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8108762:	ee36 6a64 	vsub.f32	s12, s12, s9
 8108766:	ee76 5aa5 	vadd.f32	s11, s13, s11
 810876a:	ee73 3a07 	vadd.f32	s7, s6, s14
 810876e:	ee35 4a27 	vadd.f32	s8, s10, s15
 8108772:	4614      	mov	r4, r2
 8108774:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8108778:	3408      	adds	r4, #8
 810877a:	462e      	mov	r6, r5
 810877c:	ee74 7aa7 	vadd.f32	s15, s9, s15
 8108780:	3108      	adds	r1, #8
 8108782:	3608      	adds	r6, #8
 8108784:	9406      	str	r4, [sp, #24]
 8108786:	ee32 7a87 	vadd.f32	s14, s5, s14
 810878a:	ee36 6a45 	vsub.f32	s12, s12, s10
 810878e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8108792:	ee75 5a82 	vadd.f32	s11, s11, s4
 8108796:	ee73 3ae2 	vsub.f32	s7, s7, s5
 810879a:	ee74 4a64 	vsub.f32	s9, s8, s9
 810879e:	463c      	mov	r4, r7
 81087a0:	9103      	str	r1, [sp, #12]
 81087a2:	9607      	str	r6, [sp, #28]
 81087a4:	4611      	mov	r1, r2
 81087a6:	f107 0608 	add.w	r6, r7, #8
 81087aa:	085a      	lsrs	r2, r3, #1
 81087ac:	3418      	adds	r4, #24
 81087ae:	edc0 5a01 	vstr	s11, [r0, #4]
 81087b2:	920c      	str	r2, [sp, #48]	; 0x30
 81087b4:	edc5 3a00 	vstr	s7, [r5]
 81087b8:	edc5 4a01 	vstr	s9, [r5, #4]
 81087bc:	9602      	str	r6, [sp, #8]
 81087be:	ed81 6a00 	vstr	s12, [r1]
 81087c2:	edc1 6a01 	vstr	s13, [r1, #4]
 81087c6:	9401      	str	r4, [sp, #4]
 81087c8:	ee37 7a43 	vsub.f32	s14, s14, s6
 81087cc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 81087d0:	3a02      	subs	r2, #2
 81087d2:	463e      	mov	r6, r7
 81087d4:	460c      	mov	r4, r1
 81087d6:	4641      	mov	r1, r8
 81087d8:	3610      	adds	r6, #16
 81087da:	3108      	adds	r1, #8
 81087dc:	0852      	lsrs	r2, r2, #1
 81087de:	970b      	str	r7, [sp, #44]	; 0x2c
 81087e0:	9509      	str	r5, [sp, #36]	; 0x24
 81087e2:	9604      	str	r6, [sp, #16]
 81087e4:	ed88 7a00 	vstr	s14, [r8]
 81087e8:	9105      	str	r1, [sp, #20]
 81087ea:	edc8 7a01 	vstr	s15, [r8, #4]
 81087ee:	9208      	str	r2, [sp, #32]
 81087f0:	f000 812f 	beq.w	8108a52 <arm_cfft_radix8by4_f32+0x356>
 81087f4:	4639      	mov	r1, r7
 81087f6:	009b      	lsls	r3, r3, #2
 81087f8:	4622      	mov	r2, r4
 81087fa:	3b0c      	subs	r3, #12
 81087fc:	f101 0930 	add.w	r9, r1, #48	; 0x30
 8108800:	9908      	ldr	r1, [sp, #32]
 8108802:	f1a5 0c0c 	sub.w	ip, r5, #12
 8108806:	46b3      	mov	fp, r6
 8108808:	f107 0a20 	add.w	sl, r7, #32
 810880c:	4443      	add	r3, r8
 810880e:	f102 0710 	add.w	r7, r2, #16
 8108812:	f100 0e10 	add.w	lr, r0, #16
 8108816:	3510      	adds	r5, #16
 8108818:	3c0c      	subs	r4, #12
 810881a:	f1a8 060c 	sub.w	r6, r8, #12
 810881e:	f108 0210 	add.w	r2, r8, #16
 8108822:	ed12 5a02 	vldr	s10, [r2, #-8]
 8108826:	ed57 6a02 	vldr	s13, [r7, #-8]
 810882a:	ed15 0a02 	vldr	s0, [r5, #-8]
 810882e:	ed5e 5a02 	vldr	s11, [lr, #-8]
 8108832:	ed17 7a01 	vldr	s14, [r7, #-4]
 8108836:	ed52 0a01 	vldr	s1, [r2, #-4]
 810883a:	ed15 9a01 	vldr	s18, [r5, #-4]
 810883e:	ed5e 4a01 	vldr	s9, [lr, #-4]
 8108842:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8108846:	ee70 7a05 	vadd.f32	s15, s0, s10
 810884a:	ee75 5ae6 	vsub.f32	s11, s11, s13
 810884e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8108852:	ee34 4a87 	vadd.f32	s8, s9, s14
 8108856:	ed4e 7a02 	vstr	s15, [lr, #-8]
 810885a:	ed52 6a01 	vldr	s13, [r2, #-4]
 810885e:	ed55 7a01 	vldr	s15, [r5, #-4]
 8108862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108866:	ee74 4ac7 	vsub.f32	s9, s9, s14
 810886a:	ee77 7a84 	vadd.f32	s15, s15, s8
 810886e:	ee75 dae0 	vsub.f32	s27, s11, s1
 8108872:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8108876:	ed96 7a02 	vldr	s14, [r6, #8]
 810887a:	ed93 ba02 	vldr	s22, [r3, #8]
 810887e:	ed9c 1a02 	vldr	s2, [ip, #8]
 8108882:	edd4 7a02 	vldr	s15, [r4, #8]
 8108886:	edd6 1a01 	vldr	s3, [r6, #4]
 810888a:	edd3 9a01 	vldr	s19, [r3, #4]
 810888e:	edd4 8a01 	vldr	s17, [r4, #4]
 8108892:	ed9c 8a01 	vldr	s16, [ip, #4]
 8108896:	ee71 aa07 	vadd.f32	s21, s2, s14
 810889a:	ee37 aa8b 	vadd.f32	s20, s15, s22
 810889e:	ee38 3a21 	vadd.f32	s6, s16, s3
 81088a2:	ee7a 2a8a 	vadd.f32	s5, s21, s20
 81088a6:	ee37 6acb 	vsub.f32	s12, s15, s22
 81088aa:	edcc 2a02 	vstr	s5, [ip, #8]
 81088ae:	edd3 2a01 	vldr	s5, [r3, #4]
 81088b2:	ed94 2a01 	vldr	s4, [r4, #4]
 81088b6:	ee32 2a22 	vadd.f32	s4, s4, s5
 81088ba:	ee71 2a29 	vadd.f32	s5, s2, s19
 81088be:	ee32 2a03 	vadd.f32	s4, s4, s6
 81088c2:	ee72 2ac7 	vsub.f32	s5, s5, s14
 81088c6:	ed8c 2a01 	vstr	s4, [ip, #4]
 81088ca:	ee74 6ac0 	vsub.f32	s13, s9, s0
 81088ce:	ee36 ca61 	vsub.f32	s24, s12, s3
 81088d2:	ed5b ba01 	vldr	s23, [fp, #-4]
 81088d6:	ed5b ca02 	vldr	s25, [fp, #-8]
 81088da:	ee72 2ae8 	vsub.f32	s5, s5, s17
 81088de:	ee7d da89 	vadd.f32	s27, s27, s18
 81088e2:	ee76 6a85 	vadd.f32	s13, s13, s10
 81088e6:	ee3c ca08 	vadd.f32	s24, s24, s16
 81088ea:	ee22 eaac 	vmul.f32	s28, s5, s25
 81088ee:	ee2b daed 	vnmul.f32	s26, s23, s27
 81088f2:	ee66 eaab 	vmul.f32	s29, s13, s23
 81088f6:	ee2c 2acc 	vnmul.f32	s4, s25, s24
 81088fa:	eea6 daac 	vfma.f32	s26, s13, s25
 81088fe:	3901      	subs	r1, #1
 8108900:	f10e 0e08 	add.w	lr, lr, #8
 8108904:	eef0 6a4e 	vmov.f32	s13, s28
 8108908:	eea2 2aab 	vfma.f32	s4, s5, s23
 810890c:	f1ac 0c08 	sub.w	ip, ip, #8
 8108910:	f10b 0b08 	add.w	fp, fp, #8
 8108914:	eeec 6a2b 	vfma.f32	s13, s24, s23
 8108918:	f105 0508 	add.w	r5, r5, #8
 810891c:	f1a4 0408 	sub.w	r4, r4, #8
 8108920:	eeed eaac 	vfma.f32	s29, s27, s25
 8108924:	f10a 0a10 	add.w	sl, sl, #16
 8108928:	f107 0708 	add.w	r7, r7, #8
 810892c:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 8108930:	ee33 3a68 	vsub.f32	s6, s6, s17
 8108934:	ed05 da03 	vstr	s26, [r5, #-12]
 8108938:	ed45 ea04 	vstr	s29, [r5, #-16]
 810893c:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8108940:	ed84 2a04 	vstr	s4, [r4, #16]
 8108944:	edc4 6a03 	vstr	s13, [r4, #12]
 8108948:	ee34 4a49 	vsub.f32	s8, s8, s18
 810894c:	ed5a 6a07 	vldr	s13, [sl, #-28]	; 0xffffffe4
 8108950:	ed5a 2a08 	vldr	s5, [sl, #-32]	; 0xffffffe0
 8108954:	ee33 3a69 	vsub.f32	s6, s6, s19
 8108958:	ee77 7acb 	vsub.f32	s15, s15, s22
 810895c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8108960:	ee34 4a60 	vsub.f32	s8, s8, s1
 8108964:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8108968:	ee26 2ac3 	vnmul.f32	s4, s13, s6
 810896c:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8108970:	ee64 aa26 	vmul.f32	s21, s8, s13
 8108974:	ee66 6ae3 	vnmul.f32	s13, s13, s7
 8108978:	eee3 7a62 	vfms.f32	s15, s6, s5
 810897c:	f1a6 0608 	sub.w	r6, r6, #8
 8108980:	f109 0918 	add.w	r9, r9, #24
 8108984:	eeb0 3a42 	vmov.f32	s6, s4
 8108988:	eee4 6a22 	vfma.f32	s13, s8, s5
 810898c:	f102 0208 	add.w	r2, r2, #8
 8108990:	f1a3 0308 	sub.w	r3, r3, #8
 8108994:	eeaa 3a22 	vfma.f32	s6, s20, s5
 8108998:	eee3 aaa2 	vfma.f32	s21, s7, s5
 810899c:	ee37 7a29 	vadd.f32	s14, s14, s19
 81089a0:	ee34 5ac5 	vsub.f32	s10, s9, s10
 81089a4:	ee75 5ac9 	vsub.f32	s11, s11, s18
 81089a8:	ee36 6a48 	vsub.f32	s12, s12, s16
 81089ac:	ee37 7a68 	vsub.f32	s14, s14, s17
 81089b0:	ed47 aa04 	vstr	s21, [r7, #-16]
 81089b4:	ed47 6a03 	vstr	s13, [r7, #-12]
 81089b8:	ed86 3a04 	vstr	s6, [r6, #16]
 81089bc:	edc6 7a03 	vstr	s15, [r6, #12]
 81089c0:	ee75 6aa0 	vadd.f32	s13, s11, s1
 81089c4:	ee76 7a21 	vadd.f32	s15, s12, s3
 81089c8:	ed59 5a0c 	vldr	s11, [r9, #-48]	; 0xffffffd0
 81089cc:	ed19 6a0b 	vldr	s12, [r9, #-44]	; 0xffffffd4
 81089d0:	ee35 5a00 	vadd.f32	s10, s10, s0
 81089d4:	ee37 7a41 	vsub.f32	s14, s14, s2
 81089d8:	ee65 3a06 	vmul.f32	s7, s10, s12
 81089dc:	ee27 4a25 	vmul.f32	s8, s14, s11
 81089e0:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 81089e4:	eee6 3aa5 	vfma.f32	s7, s13, s11
 81089e8:	ee26 3a66 	vnmul.f32	s6, s12, s13
 81089ec:	eef0 6a44 	vmov.f32	s13, s8
 81089f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 81089f4:	eef0 7a64 	vmov.f32	s15, s9
 81089f8:	eea5 3a25 	vfma.f32	s6, s10, s11
 81089fc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8108a00:	ed02 3a03 	vstr	s6, [r2, #-12]
 8108a04:	ed42 3a04 	vstr	s7, [r2, #-16]
 8108a08:	edc3 6a03 	vstr	s13, [r3, #12]
 8108a0c:	edc3 7a04 	vstr	s15, [r3, #16]
 8108a10:	f47f af07 	bne.w	8108822 <arm_cfft_radix8by4_f32+0x126>
 8108a14:	9a08      	ldr	r2, [sp, #32]
 8108a16:	9903      	ldr	r1, [sp, #12]
 8108a18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108a1c:	9103      	str	r1, [sp, #12]
 8108a1e:	9902      	ldr	r1, [sp, #8]
 8108a20:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108a24:	9102      	str	r1, [sp, #8]
 8108a26:	9907      	ldr	r1, [sp, #28]
 8108a28:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108a2c:	9107      	str	r1, [sp, #28]
 8108a2e:	9904      	ldr	r1, [sp, #16]
 8108a30:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8108a34:	9104      	str	r1, [sp, #16]
 8108a36:	9906      	ldr	r1, [sp, #24]
 8108a38:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8108a3c:	9106      	str	r1, [sp, #24]
 8108a3e:	9905      	ldr	r1, [sp, #20]
 8108a40:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8108a44:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8108a48:	9205      	str	r2, [sp, #20]
 8108a4a:	9a01      	ldr	r2, [sp, #4]
 8108a4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8108a50:	9301      	str	r3, [sp, #4]
 8108a52:	9b07      	ldr	r3, [sp, #28]
 8108a54:	9903      	ldr	r1, [sp, #12]
 8108a56:	9e06      	ldr	r6, [sp, #24]
 8108a58:	9d05      	ldr	r5, [sp, #20]
 8108a5a:	edd3 4a00 	vldr	s9, [r3]
 8108a5e:	edd5 7a00 	vldr	s15, [r5]
 8108a62:	edd1 3a00 	vldr	s7, [r1]
 8108a66:	edd6 6a00 	vldr	s13, [r6]
 8108a6a:	edd3 2a01 	vldr	s5, [r3, #4]
 8108a6e:	ed95 3a01 	vldr	s6, [r5, #4]
 8108a72:	ed96 4a01 	vldr	s8, [r6, #4]
 8108a76:	ed91 7a01 	vldr	s14, [r1, #4]
 8108a7a:	9a02      	ldr	r2, [sp, #8]
 8108a7c:	9c01      	ldr	r4, [sp, #4]
 8108a7e:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8108a82:	ee73 5aa6 	vadd.f32	s11, s7, s13
 8108a86:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8108a8a:	ee35 5a25 	vadd.f32	s10, s10, s11
 8108a8e:	ee37 6a04 	vadd.f32	s12, s14, s8
 8108a92:	ed81 5a00 	vstr	s10, [r1]
 8108a96:	edd5 3a01 	vldr	s7, [r5, #4]
 8108a9a:	ed93 5a01 	vldr	s10, [r3, #4]
 8108a9e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8108aa2:	ee37 7a44 	vsub.f32	s14, s14, s8
 8108aa6:	ee35 5a06 	vadd.f32	s10, s10, s12
 8108aaa:	ee37 4a64 	vsub.f32	s8, s14, s9
 8108aae:	ee76 3ac3 	vsub.f32	s7, s13, s6
 8108ab2:	ed81 5a01 	vstr	s10, [r1, #4]
 8108ab6:	ed92 5a01 	vldr	s10, [r2, #4]
 8108aba:	edd2 1a00 	vldr	s3, [r2]
 8108abe:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8108ac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8108ac4:	9102      	str	r1, [sp, #8]
 8108ac6:	ee73 3aa2 	vadd.f32	s7, s7, s5
 8108aca:	ee34 4a27 	vadd.f32	s8, s8, s15
 8108ace:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8108ad2:	ee24 2a05 	vmul.f32	s4, s8, s10
 8108ad6:	ee25 5a63 	vnmul.f32	s10, s10, s7
 8108ada:	eea3 2aa1 	vfma.f32	s4, s7, s3
 8108ade:	eea4 5a21 	vfma.f32	s10, s8, s3
 8108ae2:	ed83 2a00 	vstr	s4, [r3]
 8108ae6:	ed83 5a01 	vstr	s10, [r3, #4]
 8108aea:	ee36 6a62 	vsub.f32	s12, s12, s5
 8108aee:	9b04      	ldr	r3, [sp, #16]
 8108af0:	ee36 6a43 	vsub.f32	s12, s12, s6
 8108af4:	ed93 5a01 	vldr	s10, [r3, #4]
 8108af8:	edd3 3a00 	vldr	s7, [r3]
 8108afc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8108b00:	ee26 4a05 	vmul.f32	s8, s12, s10
 8108b04:	ee25 5a65 	vnmul.f32	s10, s10, s11
 8108b08:	eea5 4aa3 	vfma.f32	s8, s11, s7
 8108b0c:	2304      	movs	r3, #4
 8108b0e:	eea6 5a23 	vfma.f32	s10, s12, s7
 8108b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8108b16:	ee36 7ae2 	vsub.f32	s14, s13, s5
 8108b1a:	ed86 4a00 	vstr	s8, [r6]
 8108b1e:	ed86 5a01 	vstr	s10, [r6, #4]
 8108b22:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8108b26:	ee37 7a03 	vadd.f32	s14, s14, s6
 8108b2a:	edd4 6a01 	vldr	s13, [r4, #4]
 8108b2e:	edd4 5a00 	vldr	s11, [r4]
 8108b32:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8108b36:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 8108b3a:	eea7 6a25 	vfma.f32	s12, s14, s11
 8108b3e:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8108b42:	ed85 6a00 	vstr	s12, [r5]
 8108b46:	edc5 6a01 	vstr	s13, [r5, #4]
 8108b4a:	f7ff fa2f 	bl	8107fac <arm_radix8_butterfly_f32>
 8108b4e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8108b50:	9902      	ldr	r1, [sp, #8]
 8108b52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108b54:	6862      	ldr	r2, [r4, #4]
 8108b56:	9101      	str	r1, [sp, #4]
 8108b58:	2304      	movs	r3, #4
 8108b5a:	f7ff fa27 	bl	8107fac <arm_radix8_butterfly_f32>
 8108b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8108b60:	9901      	ldr	r1, [sp, #4]
 8108b62:	6862      	ldr	r2, [r4, #4]
 8108b64:	2304      	movs	r3, #4
 8108b66:	f7ff fa21 	bl	8107fac <arm_radix8_butterfly_f32>
 8108b6a:	9901      	ldr	r1, [sp, #4]
 8108b6c:	6862      	ldr	r2, [r4, #4]
 8108b6e:	4640      	mov	r0, r8
 8108b70:	2304      	movs	r3, #4
 8108b72:	b00f      	add	sp, #60	; 0x3c
 8108b74:	ecbd 8b0e 	vpop	{d8-d14}
 8108b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108b7c:	f7ff ba16 	b.w	8107fac <arm_radix8_butterfly_f32>

08108b80 <arm_cfft_f32>:
 8108b80:	2a01      	cmp	r2, #1
 8108b82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108b86:	8805      	ldrh	r5, [r0, #0]
 8108b88:	4680      	mov	r8, r0
 8108b8a:	4691      	mov	r9, r2
 8108b8c:	460c      	mov	r4, r1
 8108b8e:	461f      	mov	r7, r3
 8108b90:	d076      	beq.n	8108c80 <arm_cfft_f32+0x100>
 8108b92:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8108b96:	d06e      	beq.n	8108c76 <arm_cfft_f32+0xf6>
 8108b98:	d80e      	bhi.n	8108bb8 <arm_cfft_f32+0x38>
 8108b9a:	2d40      	cmp	r5, #64	; 0x40
 8108b9c:	d013      	beq.n	8108bc6 <arm_cfft_f32+0x46>
 8108b9e:	d966      	bls.n	8108c6e <arm_cfft_f32+0xee>
 8108ba0:	2d80      	cmp	r5, #128	; 0x80
 8108ba2:	d103      	bne.n	8108bac <arm_cfft_f32+0x2c>
 8108ba4:	4621      	mov	r1, r4
 8108ba6:	4640      	mov	r0, r8
 8108ba8:	f7ff fce6 	bl	8108578 <arm_cfft_radix8by2_f32>
 8108bac:	b9a7      	cbnz	r7, 8108bd8 <arm_cfft_f32+0x58>
 8108bae:	f1b9 0f01 	cmp.w	r9, #1
 8108bb2:	d036      	beq.n	8108c22 <arm_cfft_f32+0xa2>
 8108bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108bb8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8108bbc:	d05b      	beq.n	8108c76 <arm_cfft_f32+0xf6>
 8108bbe:	d94f      	bls.n	8108c60 <arm_cfft_f32+0xe0>
 8108bc0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8108bc4:	d1f2      	bne.n	8108bac <arm_cfft_f32+0x2c>
 8108bc6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8108bca:	2301      	movs	r3, #1
 8108bcc:	4629      	mov	r1, r5
 8108bce:	4620      	mov	r0, r4
 8108bd0:	f7ff f9ec 	bl	8107fac <arm_radix8_butterfly_f32>
 8108bd4:	2f00      	cmp	r7, #0
 8108bd6:	d0ea      	beq.n	8108bae <arm_cfft_f32+0x2e>
 8108bd8:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8108bdc:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8108be0:	2f00      	cmp	r7, #0
 8108be2:	d0e4      	beq.n	8108bae <arm_cfft_f32+0x2e>
 8108be4:	2200      	movs	r2, #0
 8108be6:	f10c 0e02 	add.w	lr, ip, #2
 8108bea:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 8108bee:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 8108bf2:	0889      	lsrs	r1, r1, #2
 8108bf4:	089b      	lsrs	r3, r3, #2
 8108bf6:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8108bfa:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8108bfe:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8108c02:	0088      	lsls	r0, r1, #2
 8108c04:	009b      	lsls	r3, r3, #2
 8108c06:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8108c0a:	3304      	adds	r3, #4
 8108c0c:	3004      	adds	r0, #4
 8108c0e:	3202      	adds	r2, #2
 8108c10:	58e1      	ldr	r1, [r4, r3]
 8108c12:	5826      	ldr	r6, [r4, r0]
 8108c14:	50e6      	str	r6, [r4, r3]
 8108c16:	42ba      	cmp	r2, r7
 8108c18:	5021      	str	r1, [r4, r0]
 8108c1a:	d3e6      	bcc.n	8108bea <arm_cfft_f32+0x6a>
 8108c1c:	f1b9 0f01 	cmp.w	r9, #1
 8108c20:	d1c8      	bne.n	8108bb4 <arm_cfft_f32+0x34>
 8108c22:	ee07 5a90 	vmov	s15, r5
 8108c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108c2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8108c32:	2d00      	cmp	r5, #0
 8108c34:	d0be      	beq.n	8108bb4 <arm_cfft_f32+0x34>
 8108c36:	3408      	adds	r4, #8
 8108c38:	2300      	movs	r3, #0
 8108c3a:	3301      	adds	r3, #1
 8108c3c:	429d      	cmp	r5, r3
 8108c3e:	f104 0408 	add.w	r4, r4, #8
 8108c42:	ed14 7a04 	vldr	s14, [r4, #-16]
 8108c46:	ed54 7a03 	vldr	s15, [r4, #-12]
 8108c4a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8108c4e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8108c52:	ed04 7a04 	vstr	s14, [r4, #-16]
 8108c56:	ed44 7a03 	vstr	s15, [r4, #-12]
 8108c5a:	d1ee      	bne.n	8108c3a <arm_cfft_f32+0xba>
 8108c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108c60:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8108c64:	d0af      	beq.n	8108bc6 <arm_cfft_f32+0x46>
 8108c66:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8108c6a:	d09b      	beq.n	8108ba4 <arm_cfft_f32+0x24>
 8108c6c:	e79e      	b.n	8108bac <arm_cfft_f32+0x2c>
 8108c6e:	2d10      	cmp	r5, #16
 8108c70:	d098      	beq.n	8108ba4 <arm_cfft_f32+0x24>
 8108c72:	2d20      	cmp	r5, #32
 8108c74:	d19a      	bne.n	8108bac <arm_cfft_f32+0x2c>
 8108c76:	4621      	mov	r1, r4
 8108c78:	4640      	mov	r0, r8
 8108c7a:	f7ff fd3f 	bl	81086fc <arm_cfft_radix8by4_f32>
 8108c7e:	e795      	b.n	8108bac <arm_cfft_f32+0x2c>
 8108c80:	b175      	cbz	r5, 8108ca0 <arm_cfft_f32+0x120>
 8108c82:	f101 020c 	add.w	r2, r1, #12
 8108c86:	2100      	movs	r1, #0
 8108c88:	ed52 7a02 	vldr	s15, [r2, #-8]
 8108c8c:	3101      	adds	r1, #1
 8108c8e:	eef1 7a67 	vneg.f32	s15, s15
 8108c92:	428d      	cmp	r5, r1
 8108c94:	ed42 7a02 	vstr	s15, [r2, #-8]
 8108c98:	f102 0208 	add.w	r2, r2, #8
 8108c9c:	d1f4      	bne.n	8108c88 <arm_cfft_f32+0x108>
 8108c9e:	e778      	b.n	8108b92 <arm_cfft_f32+0x12>
 8108ca0:	2b00      	cmp	r3, #0
 8108ca2:	d087      	beq.n	8108bb4 <arm_cfft_f32+0x34>
 8108ca4:	8987      	ldrh	r7, [r0, #12]
 8108ca6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8108caa:	2f00      	cmp	r7, #0
 8108cac:	d19a      	bne.n	8108be4 <arm_cfft_f32+0x64>
 8108cae:	e7b8      	b.n	8108c22 <arm_cfft_f32+0xa2>

08108cb0 <stage_rfft_f32>:
 8108cb0:	edd1 7a01 	vldr	s15, [r1, #4]
 8108cb4:	ed91 6a00 	vldr	s12, [r1]
 8108cb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8108cbc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8108cc0:	eeb0 7a67 	vmov.f32	s14, s15
 8108cc4:	eea6 7a26 	vfma.f32	s14, s12, s13
 8108cc8:	b410      	push	{r4}
 8108cca:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8108cce:	8804      	ldrh	r4, [r0, #0]
 8108cd0:	6940      	ldr	r0, [r0, #20]
 8108cd2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8108cd6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108cda:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108cde:	3c01      	subs	r4, #1
 8108ce0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8108ce4:	ed82 7a00 	vstr	s14, [r2]
 8108ce8:	edc2 7a01 	vstr	s15, [r2, #4]
 8108cec:	3010      	adds	r0, #16
 8108cee:	3210      	adds	r2, #16
 8108cf0:	3b08      	subs	r3, #8
 8108cf2:	3110      	adds	r1, #16
 8108cf4:	edd3 6a03 	vldr	s13, [r3, #12]
 8108cf8:	ed11 5a01 	vldr	s10, [r1, #-4]
 8108cfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8108d00:	ed11 4a02 	vldr	s8, [r1, #-8]
 8108d04:	ed50 5a01 	vldr	s11, [r0, #-4]
 8108d08:	ed10 6a02 	vldr	s12, [r0, #-8]
 8108d0c:	ee77 4ac4 	vsub.f32	s9, s15, s8
 8108d10:	ee35 7a66 	vsub.f32	s14, s10, s13
 8108d14:	ee77 7a84 	vadd.f32	s15, s15, s8
 8108d18:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8108d1c:	3c01      	subs	r4, #1
 8108d1e:	2c00      	cmp	r4, #0
 8108d20:	eee6 7a24 	vfma.f32	s15, s12, s9
 8108d24:	f1a3 0308 	sub.w	r3, r3, #8
 8108d28:	f101 0108 	add.w	r1, r1, #8
 8108d2c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8108d30:	f100 0008 	add.w	r0, r0, #8
 8108d34:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8108d38:	f102 0208 	add.w	r2, r2, #8
 8108d3c:	eea6 7a66 	vfms.f32	s14, s12, s13
 8108d40:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108d44:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108d48:	ed42 7a04 	vstr	s15, [r2, #-16]
 8108d4c:	ed02 7a03 	vstr	s14, [r2, #-12]
 8108d50:	dcd0      	bgt.n	8108cf4 <stage_rfft_f32+0x44>
 8108d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108d56:	4770      	bx	lr

08108d58 <merge_rfft_f32>:
 8108d58:	edd1 7a00 	vldr	s15, [r1]
 8108d5c:	edd1 6a01 	vldr	s13, [r1, #4]
 8108d60:	b430      	push	{r4, r5}
 8108d62:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8108d66:	8804      	ldrh	r4, [r0, #0]
 8108d68:	6940      	ldr	r0, [r0, #20]
 8108d6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8108d6e:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8108d72:	1e65      	subs	r5, r4, #1
 8108d74:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108d78:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108d7c:	2d00      	cmp	r5, #0
 8108d7e:	ed82 7a00 	vstr	s14, [r2]
 8108d82:	edc2 7a01 	vstr	s15, [r2, #4]
 8108d86:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8108d8a:	dd32      	ble.n	8108df2 <merge_rfft_f32+0x9a>
 8108d8c:	eba3 04c4 	sub.w	r4, r3, r4, lsl #3
 8108d90:	3010      	adds	r0, #16
 8108d92:	3210      	adds	r2, #16
 8108d94:	3110      	adds	r1, #16
 8108d96:	3b08      	subs	r3, #8
 8108d98:	edd3 6a03 	vldr	s13, [r3, #12]
 8108d9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8108da0:	ed11 5a01 	vldr	s10, [r1, #-4]
 8108da4:	ed11 4a02 	vldr	s8, [r1, #-8]
 8108da8:	ed50 5a01 	vldr	s11, [r0, #-4]
 8108dac:	ed10 6a02 	vldr	s12, [r0, #-8]
 8108db0:	ee74 4a67 	vsub.f32	s9, s8, s15
 8108db4:	ee35 7a66 	vsub.f32	s14, s10, s13
 8108db8:	ee77 7a84 	vadd.f32	s15, s15, s8
 8108dbc:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8108dc0:	3b08      	subs	r3, #8
 8108dc2:	429c      	cmp	r4, r3
 8108dc4:	eee6 7a64 	vfms.f32	s15, s12, s9
 8108dc8:	f101 0108 	add.w	r1, r1, #8
 8108dcc:	f100 0008 	add.w	r0, r0, #8
 8108dd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8108dd4:	f102 0208 	add.w	r2, r2, #8
 8108dd8:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8108ddc:	eea6 7a66 	vfms.f32	s14, s12, s13
 8108de0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8108de4:	ee27 7a23 	vmul.f32	s14, s14, s7
 8108de8:	ed42 7a04 	vstr	s15, [r2, #-16]
 8108dec:	ed02 7a03 	vstr	s14, [r2, #-12]
 8108df0:	d1d2      	bne.n	8108d98 <merge_rfft_f32+0x40>
 8108df2:	bc30      	pop	{r4, r5}
 8108df4:	4770      	bx	lr
 8108df6:	bf00      	nop

08108df8 <arm_rfft_fast_f32>:
 8108df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108dfc:	4605      	mov	r5, r0
 8108dfe:	4616      	mov	r6, r2
 8108e00:	b153      	cbz	r3, 8108e18 <arm_rfft_fast_f32+0x20>
 8108e02:	461f      	mov	r7, r3
 8108e04:	f7ff ffa8 	bl	8108d58 <merge_rfft_f32>
 8108e08:	463a      	mov	r2, r7
 8108e0a:	4631      	mov	r1, r6
 8108e0c:	4628      	mov	r0, r5
 8108e0e:	2301      	movs	r3, #1
 8108e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108e14:	f7ff beb4 	b.w	8108b80 <arm_cfft_f32>
 8108e18:	460c      	mov	r4, r1
 8108e1a:	8801      	ldrh	r1, [r0, #0]
 8108e1c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8108e20:	d03f      	beq.n	8108ea2 <arm_rfft_fast_f32+0xaa>
 8108e22:	d82d      	bhi.n	8108e80 <arm_rfft_fast_f32+0x88>
 8108e24:	2940      	cmp	r1, #64	; 0x40
 8108e26:	d032      	beq.n	8108e8e <arm_rfft_fast_f32+0x96>
 8108e28:	d937      	bls.n	8108e9a <arm_rfft_fast_f32+0xa2>
 8108e2a:	2980      	cmp	r1, #128	; 0x80
 8108e2c:	d049      	beq.n	8108ec2 <arm_rfft_fast_f32+0xca>
 8108e2e:	89a8      	ldrh	r0, [r5, #12]
 8108e30:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8108e34:	b1e8      	cbz	r0, 8108e72 <arm_rfft_fast_f32+0x7a>
 8108e36:	2200      	movs	r2, #0
 8108e38:	f10c 0e02 	add.w	lr, ip, #2
 8108e3c:	f83e 1012 	ldrh.w	r1, [lr, r2, lsl #1]
 8108e40:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]
 8108e44:	0889      	lsrs	r1, r1, #2
 8108e46:	089b      	lsrs	r3, r3, #2
 8108e48:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
 8108e4c:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
 8108e50:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8108e54:	008f      	lsls	r7, r1, #2
 8108e56:	009b      	lsls	r3, r3, #2
 8108e58:	f844 8021 	str.w	r8, [r4, r1, lsl #2]
 8108e5c:	3304      	adds	r3, #4
 8108e5e:	3704      	adds	r7, #4
 8108e60:	3202      	adds	r2, #2
 8108e62:	f854 8003 	ldr.w	r8, [r4, r3]
 8108e66:	59e1      	ldr	r1, [r4, r7]
 8108e68:	50e1      	str	r1, [r4, r3]
 8108e6a:	4290      	cmp	r0, r2
 8108e6c:	f844 8007 	str.w	r8, [r4, r7]
 8108e70:	d8e4      	bhi.n	8108e3c <arm_rfft_fast_f32+0x44>
 8108e72:	4632      	mov	r2, r6
 8108e74:	4621      	mov	r1, r4
 8108e76:	4628      	mov	r0, r5
 8108e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108e7c:	f7ff bf18 	b.w	8108cb0 <stage_rfft_f32>
 8108e80:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8108e84:	d00d      	beq.n	8108ea2 <arm_rfft_fast_f32+0xaa>
 8108e86:	d916      	bls.n	8108eb6 <arm_rfft_fast_f32+0xbe>
 8108e88:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8108e8c:	d10d      	bne.n	8108eaa <arm_rfft_fast_f32+0xb2>
 8108e8e:	686a      	ldr	r2, [r5, #4]
 8108e90:	2301      	movs	r3, #1
 8108e92:	4620      	mov	r0, r4
 8108e94:	f7ff f88a 	bl	8107fac <arm_radix8_butterfly_f32>
 8108e98:	e007      	b.n	8108eaa <arm_rfft_fast_f32+0xb2>
 8108e9a:	2910      	cmp	r1, #16
 8108e9c:	d011      	beq.n	8108ec2 <arm_rfft_fast_f32+0xca>
 8108e9e:	2920      	cmp	r1, #32
 8108ea0:	d103      	bne.n	8108eaa <arm_rfft_fast_f32+0xb2>
 8108ea2:	4621      	mov	r1, r4
 8108ea4:	4628      	mov	r0, r5
 8108ea6:	f7ff fc29 	bl	81086fc <arm_cfft_radix8by4_f32>
 8108eaa:	89a8      	ldrh	r0, [r5, #12]
 8108eac:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8108eb0:	2800      	cmp	r0, #0
 8108eb2:	d1c0      	bne.n	8108e36 <arm_rfft_fast_f32+0x3e>
 8108eb4:	e7dd      	b.n	8108e72 <arm_rfft_fast_f32+0x7a>
 8108eb6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8108eba:	d0e8      	beq.n	8108e8e <arm_rfft_fast_f32+0x96>
 8108ebc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108ec0:	d1f3      	bne.n	8108eaa <arm_rfft_fast_f32+0xb2>
 8108ec2:	4621      	mov	r1, r4
 8108ec4:	4628      	mov	r0, r5
 8108ec6:	f7ff fb57 	bl	8108578 <arm_cfft_radix8by2_f32>
 8108eca:	e7ee      	b.n	8108eaa <arm_rfft_fast_f32+0xb2>

08108ecc <arm_rfft_fast_init_f32>:
 8108ecc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8108ed0:	d024      	beq.n	8108f1c <arm_rfft_fast_init_f32+0x50>
 8108ed2:	d807      	bhi.n	8108ee4 <arm_rfft_fast_init_f32+0x18>
 8108ed4:	2980      	cmp	r1, #128	; 0x80
 8108ed6:	d01c      	beq.n	8108f12 <arm_rfft_fast_init_f32+0x46>
 8108ed8:	d90c      	bls.n	8108ef4 <arm_rfft_fast_init_f32+0x28>
 8108eda:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8108ede:	d11a      	bne.n	8108f16 <arm_rfft_fast_init_f32+0x4a>
 8108ee0:	4b0f      	ldr	r3, [pc, #60]	; (8108f20 <arm_rfft_fast_init_f32+0x54>)
 8108ee2:	4718      	bx	r3
 8108ee4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8108ee8:	d011      	beq.n	8108f0e <arm_rfft_fast_init_f32+0x42>
 8108eea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8108eee:	d107      	bne.n	8108f00 <arm_rfft_fast_init_f32+0x34>
 8108ef0:	4b0c      	ldr	r3, [pc, #48]	; (8108f24 <arm_rfft_fast_init_f32+0x58>)
 8108ef2:	4718      	bx	r3
 8108ef4:	2920      	cmp	r1, #32
 8108ef6:	d008      	beq.n	8108f0a <arm_rfft_fast_init_f32+0x3e>
 8108ef8:	2940      	cmp	r1, #64	; 0x40
 8108efa:	d10c      	bne.n	8108f16 <arm_rfft_fast_init_f32+0x4a>
 8108efc:	4b0a      	ldr	r3, [pc, #40]	; (8108f28 <arm_rfft_fast_init_f32+0x5c>)
 8108efe:	e7f0      	b.n	8108ee2 <arm_rfft_fast_init_f32+0x16>
 8108f00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108f04:	d107      	bne.n	8108f16 <arm_rfft_fast_init_f32+0x4a>
 8108f06:	4b09      	ldr	r3, [pc, #36]	; (8108f2c <arm_rfft_fast_init_f32+0x60>)
 8108f08:	e7eb      	b.n	8108ee2 <arm_rfft_fast_init_f32+0x16>
 8108f0a:	4b09      	ldr	r3, [pc, #36]	; (8108f30 <arm_rfft_fast_init_f32+0x64>)
 8108f0c:	e7e9      	b.n	8108ee2 <arm_rfft_fast_init_f32+0x16>
 8108f0e:	4b09      	ldr	r3, [pc, #36]	; (8108f34 <arm_rfft_fast_init_f32+0x68>)
 8108f10:	e7e7      	b.n	8108ee2 <arm_rfft_fast_init_f32+0x16>
 8108f12:	4b09      	ldr	r3, [pc, #36]	; (8108f38 <arm_rfft_fast_init_f32+0x6c>)
 8108f14:	e7e5      	b.n	8108ee2 <arm_rfft_fast_init_f32+0x16>
 8108f16:	f04f 30ff 	mov.w	r0, #4294967295
 8108f1a:	4770      	bx	lr
 8108f1c:	4b07      	ldr	r3, [pc, #28]	; (8108f3c <arm_rfft_fast_init_f32+0x70>)
 8108f1e:	e7e0      	b.n	8108ee2 <arm_rfft_fast_init_f32+0x16>
 8108f20:	08107e99 	.word	0x08107e99
 8108f24:	08107f75 	.word	0x08107f75
 8108f28:	08107e31 	.word	0x08107e31
 8108f2c:	08107f05 	.word	0x08107f05
 8108f30:	08107dfd 	.word	0x08107dfd
 8108f34:	08107f3d 	.word	0x08107f3d
 8108f38:	08107e65 	.word	0x08107e65
 8108f3c:	08107ecd 	.word	0x08107ecd

08108f40 <__cvt>:
 8108f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108f44:	ec55 4b10 	vmov	r4, r5, d0
 8108f48:	2d00      	cmp	r5, #0
 8108f4a:	460e      	mov	r6, r1
 8108f4c:	4619      	mov	r1, r3
 8108f4e:	462b      	mov	r3, r5
 8108f50:	bfbb      	ittet	lt
 8108f52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108f56:	461d      	movlt	r5, r3
 8108f58:	2300      	movge	r3, #0
 8108f5a:	232d      	movlt	r3, #45	; 0x2d
 8108f5c:	700b      	strb	r3, [r1, #0]
 8108f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108f60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108f64:	4691      	mov	r9, r2
 8108f66:	f023 0820 	bic.w	r8, r3, #32
 8108f6a:	bfbc      	itt	lt
 8108f6c:	4622      	movlt	r2, r4
 8108f6e:	4614      	movlt	r4, r2
 8108f70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108f74:	d005      	beq.n	8108f82 <__cvt+0x42>
 8108f76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8108f7a:	d100      	bne.n	8108f7e <__cvt+0x3e>
 8108f7c:	3601      	adds	r6, #1
 8108f7e:	2102      	movs	r1, #2
 8108f80:	e000      	b.n	8108f84 <__cvt+0x44>
 8108f82:	2103      	movs	r1, #3
 8108f84:	ab03      	add	r3, sp, #12
 8108f86:	9301      	str	r3, [sp, #4]
 8108f88:	ab02      	add	r3, sp, #8
 8108f8a:	9300      	str	r3, [sp, #0]
 8108f8c:	ec45 4b10 	vmov	d0, r4, r5
 8108f90:	4653      	mov	r3, sl
 8108f92:	4632      	mov	r2, r6
 8108f94:	f001 f880 	bl	810a098 <_dtoa_r>
 8108f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8108f9c:	4607      	mov	r7, r0
 8108f9e:	d102      	bne.n	8108fa6 <__cvt+0x66>
 8108fa0:	f019 0f01 	tst.w	r9, #1
 8108fa4:	d022      	beq.n	8108fec <__cvt+0xac>
 8108fa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8108faa:	eb07 0906 	add.w	r9, r7, r6
 8108fae:	d110      	bne.n	8108fd2 <__cvt+0x92>
 8108fb0:	783b      	ldrb	r3, [r7, #0]
 8108fb2:	2b30      	cmp	r3, #48	; 0x30
 8108fb4:	d10a      	bne.n	8108fcc <__cvt+0x8c>
 8108fb6:	2200      	movs	r2, #0
 8108fb8:	2300      	movs	r3, #0
 8108fba:	4620      	mov	r0, r4
 8108fbc:	4629      	mov	r1, r5
 8108fbe:	f7f7 fe0b 	bl	8100bd8 <__aeabi_dcmpeq>
 8108fc2:	b918      	cbnz	r0, 8108fcc <__cvt+0x8c>
 8108fc4:	f1c6 0601 	rsb	r6, r6, #1
 8108fc8:	f8ca 6000 	str.w	r6, [sl]
 8108fcc:	f8da 3000 	ldr.w	r3, [sl]
 8108fd0:	4499      	add	r9, r3
 8108fd2:	2200      	movs	r2, #0
 8108fd4:	2300      	movs	r3, #0
 8108fd6:	4620      	mov	r0, r4
 8108fd8:	4629      	mov	r1, r5
 8108fda:	f7f7 fdfd 	bl	8100bd8 <__aeabi_dcmpeq>
 8108fde:	b108      	cbz	r0, 8108fe4 <__cvt+0xa4>
 8108fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8108fe4:	2230      	movs	r2, #48	; 0x30
 8108fe6:	9b03      	ldr	r3, [sp, #12]
 8108fe8:	454b      	cmp	r3, r9
 8108fea:	d307      	bcc.n	8108ffc <__cvt+0xbc>
 8108fec:	9b03      	ldr	r3, [sp, #12]
 8108fee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8108ff0:	1bdb      	subs	r3, r3, r7
 8108ff2:	4638      	mov	r0, r7
 8108ff4:	6013      	str	r3, [r2, #0]
 8108ff6:	b004      	add	sp, #16
 8108ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108ffc:	1c59      	adds	r1, r3, #1
 8108ffe:	9103      	str	r1, [sp, #12]
 8109000:	701a      	strb	r2, [r3, #0]
 8109002:	e7f0      	b.n	8108fe6 <__cvt+0xa6>

08109004 <__exponent>:
 8109004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109006:	4603      	mov	r3, r0
 8109008:	2900      	cmp	r1, #0
 810900a:	bfb8      	it	lt
 810900c:	4249      	neglt	r1, r1
 810900e:	f803 2b02 	strb.w	r2, [r3], #2
 8109012:	bfb4      	ite	lt
 8109014:	222d      	movlt	r2, #45	; 0x2d
 8109016:	222b      	movge	r2, #43	; 0x2b
 8109018:	2909      	cmp	r1, #9
 810901a:	7042      	strb	r2, [r0, #1]
 810901c:	dd2a      	ble.n	8109074 <__exponent+0x70>
 810901e:	f10d 0207 	add.w	r2, sp, #7
 8109022:	4617      	mov	r7, r2
 8109024:	260a      	movs	r6, #10
 8109026:	4694      	mov	ip, r2
 8109028:	fb91 f5f6 	sdiv	r5, r1, r6
 810902c:	fb06 1415 	mls	r4, r6, r5, r1
 8109030:	3430      	adds	r4, #48	; 0x30
 8109032:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8109036:	460c      	mov	r4, r1
 8109038:	2c63      	cmp	r4, #99	; 0x63
 810903a:	f102 32ff 	add.w	r2, r2, #4294967295
 810903e:	4629      	mov	r1, r5
 8109040:	dcf1      	bgt.n	8109026 <__exponent+0x22>
 8109042:	3130      	adds	r1, #48	; 0x30
 8109044:	f1ac 0402 	sub.w	r4, ip, #2
 8109048:	f802 1c01 	strb.w	r1, [r2, #-1]
 810904c:	1c41      	adds	r1, r0, #1
 810904e:	4622      	mov	r2, r4
 8109050:	42ba      	cmp	r2, r7
 8109052:	d30a      	bcc.n	810906a <__exponent+0x66>
 8109054:	f10d 0209 	add.w	r2, sp, #9
 8109058:	eba2 020c 	sub.w	r2, r2, ip
 810905c:	42bc      	cmp	r4, r7
 810905e:	bf88      	it	hi
 8109060:	2200      	movhi	r2, #0
 8109062:	4413      	add	r3, r2
 8109064:	1a18      	subs	r0, r3, r0
 8109066:	b003      	add	sp, #12
 8109068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810906a:	f812 5b01 	ldrb.w	r5, [r2], #1
 810906e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8109072:	e7ed      	b.n	8109050 <__exponent+0x4c>
 8109074:	2330      	movs	r3, #48	; 0x30
 8109076:	3130      	adds	r1, #48	; 0x30
 8109078:	7083      	strb	r3, [r0, #2]
 810907a:	70c1      	strb	r1, [r0, #3]
 810907c:	1d03      	adds	r3, r0, #4
 810907e:	e7f1      	b.n	8109064 <__exponent+0x60>

08109080 <_printf_float>:
 8109080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109084:	ed2d 8b02 	vpush	{d8}
 8109088:	b08d      	sub	sp, #52	; 0x34
 810908a:	460c      	mov	r4, r1
 810908c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109090:	4616      	mov	r6, r2
 8109092:	461f      	mov	r7, r3
 8109094:	4605      	mov	r5, r0
 8109096:	f000 fef7 	bl	8109e88 <_localeconv_r>
 810909a:	f8d0 a000 	ldr.w	sl, [r0]
 810909e:	4650      	mov	r0, sl
 81090a0:	f7f7 f96e 	bl	8100380 <strlen>
 81090a4:	2300      	movs	r3, #0
 81090a6:	930a      	str	r3, [sp, #40]	; 0x28
 81090a8:	6823      	ldr	r3, [r4, #0]
 81090aa:	9305      	str	r3, [sp, #20]
 81090ac:	f8d8 3000 	ldr.w	r3, [r8]
 81090b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 81090b4:	3307      	adds	r3, #7
 81090b6:	f023 0307 	bic.w	r3, r3, #7
 81090ba:	f103 0208 	add.w	r2, r3, #8
 81090be:	f8c8 2000 	str.w	r2, [r8]
 81090c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 81090c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81090ca:	9307      	str	r3, [sp, #28]
 81090cc:	f8cd 8018 	str.w	r8, [sp, #24]
 81090d0:	ee08 0a10 	vmov	s16, r0
 81090d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 81090d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81090dc:	4b9e      	ldr	r3, [pc, #632]	; (8109358 <_printf_float+0x2d8>)
 81090de:	f04f 32ff 	mov.w	r2, #4294967295
 81090e2:	f7f7 fdab 	bl	8100c3c <__aeabi_dcmpun>
 81090e6:	bb88      	cbnz	r0, 810914c <_printf_float+0xcc>
 81090e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81090ec:	4b9a      	ldr	r3, [pc, #616]	; (8109358 <_printf_float+0x2d8>)
 81090ee:	f04f 32ff 	mov.w	r2, #4294967295
 81090f2:	f7f7 fd85 	bl	8100c00 <__aeabi_dcmple>
 81090f6:	bb48      	cbnz	r0, 810914c <_printf_float+0xcc>
 81090f8:	2200      	movs	r2, #0
 81090fa:	2300      	movs	r3, #0
 81090fc:	4640      	mov	r0, r8
 81090fe:	4649      	mov	r1, r9
 8109100:	f7f7 fd74 	bl	8100bec <__aeabi_dcmplt>
 8109104:	b110      	cbz	r0, 810910c <_printf_float+0x8c>
 8109106:	232d      	movs	r3, #45	; 0x2d
 8109108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810910c:	4a93      	ldr	r2, [pc, #588]	; (810935c <_printf_float+0x2dc>)
 810910e:	4b94      	ldr	r3, [pc, #592]	; (8109360 <_printf_float+0x2e0>)
 8109110:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8109114:	bf94      	ite	ls
 8109116:	4690      	movls	r8, r2
 8109118:	4698      	movhi	r8, r3
 810911a:	2303      	movs	r3, #3
 810911c:	6123      	str	r3, [r4, #16]
 810911e:	9b05      	ldr	r3, [sp, #20]
 8109120:	f023 0304 	bic.w	r3, r3, #4
 8109124:	6023      	str	r3, [r4, #0]
 8109126:	f04f 0900 	mov.w	r9, #0
 810912a:	9700      	str	r7, [sp, #0]
 810912c:	4633      	mov	r3, r6
 810912e:	aa0b      	add	r2, sp, #44	; 0x2c
 8109130:	4621      	mov	r1, r4
 8109132:	4628      	mov	r0, r5
 8109134:	f000 f9da 	bl	81094ec <_printf_common>
 8109138:	3001      	adds	r0, #1
 810913a:	f040 8090 	bne.w	810925e <_printf_float+0x1de>
 810913e:	f04f 30ff 	mov.w	r0, #4294967295
 8109142:	b00d      	add	sp, #52	; 0x34
 8109144:	ecbd 8b02 	vpop	{d8}
 8109148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810914c:	4642      	mov	r2, r8
 810914e:	464b      	mov	r3, r9
 8109150:	4640      	mov	r0, r8
 8109152:	4649      	mov	r1, r9
 8109154:	f7f7 fd72 	bl	8100c3c <__aeabi_dcmpun>
 8109158:	b140      	cbz	r0, 810916c <_printf_float+0xec>
 810915a:	464b      	mov	r3, r9
 810915c:	2b00      	cmp	r3, #0
 810915e:	bfbc      	itt	lt
 8109160:	232d      	movlt	r3, #45	; 0x2d
 8109162:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8109166:	4a7f      	ldr	r2, [pc, #508]	; (8109364 <_printf_float+0x2e4>)
 8109168:	4b7f      	ldr	r3, [pc, #508]	; (8109368 <_printf_float+0x2e8>)
 810916a:	e7d1      	b.n	8109110 <_printf_float+0x90>
 810916c:	6863      	ldr	r3, [r4, #4]
 810916e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8109172:	9206      	str	r2, [sp, #24]
 8109174:	1c5a      	adds	r2, r3, #1
 8109176:	d13f      	bne.n	81091f8 <_printf_float+0x178>
 8109178:	2306      	movs	r3, #6
 810917a:	6063      	str	r3, [r4, #4]
 810917c:	9b05      	ldr	r3, [sp, #20]
 810917e:	6861      	ldr	r1, [r4, #4]
 8109180:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8109184:	2300      	movs	r3, #0
 8109186:	9303      	str	r3, [sp, #12]
 8109188:	ab0a      	add	r3, sp, #40	; 0x28
 810918a:	e9cd b301 	strd	fp, r3, [sp, #4]
 810918e:	ab09      	add	r3, sp, #36	; 0x24
 8109190:	ec49 8b10 	vmov	d0, r8, r9
 8109194:	9300      	str	r3, [sp, #0]
 8109196:	6022      	str	r2, [r4, #0]
 8109198:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810919c:	4628      	mov	r0, r5
 810919e:	f7ff fecf 	bl	8108f40 <__cvt>
 81091a2:	9b06      	ldr	r3, [sp, #24]
 81091a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 81091a6:	2b47      	cmp	r3, #71	; 0x47
 81091a8:	4680      	mov	r8, r0
 81091aa:	d108      	bne.n	81091be <_printf_float+0x13e>
 81091ac:	1cc8      	adds	r0, r1, #3
 81091ae:	db02      	blt.n	81091b6 <_printf_float+0x136>
 81091b0:	6863      	ldr	r3, [r4, #4]
 81091b2:	4299      	cmp	r1, r3
 81091b4:	dd41      	ble.n	810923a <_printf_float+0x1ba>
 81091b6:	f1ab 0302 	sub.w	r3, fp, #2
 81091ba:	fa5f fb83 	uxtb.w	fp, r3
 81091be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81091c2:	d820      	bhi.n	8109206 <_printf_float+0x186>
 81091c4:	3901      	subs	r1, #1
 81091c6:	465a      	mov	r2, fp
 81091c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81091cc:	9109      	str	r1, [sp, #36]	; 0x24
 81091ce:	f7ff ff19 	bl	8109004 <__exponent>
 81091d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81091d4:	1813      	adds	r3, r2, r0
 81091d6:	2a01      	cmp	r2, #1
 81091d8:	4681      	mov	r9, r0
 81091da:	6123      	str	r3, [r4, #16]
 81091dc:	dc02      	bgt.n	81091e4 <_printf_float+0x164>
 81091de:	6822      	ldr	r2, [r4, #0]
 81091e0:	07d2      	lsls	r2, r2, #31
 81091e2:	d501      	bpl.n	81091e8 <_printf_float+0x168>
 81091e4:	3301      	adds	r3, #1
 81091e6:	6123      	str	r3, [r4, #16]
 81091e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81091ec:	2b00      	cmp	r3, #0
 81091ee:	d09c      	beq.n	810912a <_printf_float+0xaa>
 81091f0:	232d      	movs	r3, #45	; 0x2d
 81091f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81091f6:	e798      	b.n	810912a <_printf_float+0xaa>
 81091f8:	9a06      	ldr	r2, [sp, #24]
 81091fa:	2a47      	cmp	r2, #71	; 0x47
 81091fc:	d1be      	bne.n	810917c <_printf_float+0xfc>
 81091fe:	2b00      	cmp	r3, #0
 8109200:	d1bc      	bne.n	810917c <_printf_float+0xfc>
 8109202:	2301      	movs	r3, #1
 8109204:	e7b9      	b.n	810917a <_printf_float+0xfa>
 8109206:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810920a:	d118      	bne.n	810923e <_printf_float+0x1be>
 810920c:	2900      	cmp	r1, #0
 810920e:	6863      	ldr	r3, [r4, #4]
 8109210:	dd0b      	ble.n	810922a <_printf_float+0x1aa>
 8109212:	6121      	str	r1, [r4, #16]
 8109214:	b913      	cbnz	r3, 810921c <_printf_float+0x19c>
 8109216:	6822      	ldr	r2, [r4, #0]
 8109218:	07d0      	lsls	r0, r2, #31
 810921a:	d502      	bpl.n	8109222 <_printf_float+0x1a2>
 810921c:	3301      	adds	r3, #1
 810921e:	440b      	add	r3, r1
 8109220:	6123      	str	r3, [r4, #16]
 8109222:	65a1      	str	r1, [r4, #88]	; 0x58
 8109224:	f04f 0900 	mov.w	r9, #0
 8109228:	e7de      	b.n	81091e8 <_printf_float+0x168>
 810922a:	b913      	cbnz	r3, 8109232 <_printf_float+0x1b2>
 810922c:	6822      	ldr	r2, [r4, #0]
 810922e:	07d2      	lsls	r2, r2, #31
 8109230:	d501      	bpl.n	8109236 <_printf_float+0x1b6>
 8109232:	3302      	adds	r3, #2
 8109234:	e7f4      	b.n	8109220 <_printf_float+0x1a0>
 8109236:	2301      	movs	r3, #1
 8109238:	e7f2      	b.n	8109220 <_printf_float+0x1a0>
 810923a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810923e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109240:	4299      	cmp	r1, r3
 8109242:	db05      	blt.n	8109250 <_printf_float+0x1d0>
 8109244:	6823      	ldr	r3, [r4, #0]
 8109246:	6121      	str	r1, [r4, #16]
 8109248:	07d8      	lsls	r0, r3, #31
 810924a:	d5ea      	bpl.n	8109222 <_printf_float+0x1a2>
 810924c:	1c4b      	adds	r3, r1, #1
 810924e:	e7e7      	b.n	8109220 <_printf_float+0x1a0>
 8109250:	2900      	cmp	r1, #0
 8109252:	bfd4      	ite	le
 8109254:	f1c1 0202 	rsble	r2, r1, #2
 8109258:	2201      	movgt	r2, #1
 810925a:	4413      	add	r3, r2
 810925c:	e7e0      	b.n	8109220 <_printf_float+0x1a0>
 810925e:	6823      	ldr	r3, [r4, #0]
 8109260:	055a      	lsls	r2, r3, #21
 8109262:	d407      	bmi.n	8109274 <_printf_float+0x1f4>
 8109264:	6923      	ldr	r3, [r4, #16]
 8109266:	4642      	mov	r2, r8
 8109268:	4631      	mov	r1, r6
 810926a:	4628      	mov	r0, r5
 810926c:	47b8      	blx	r7
 810926e:	3001      	adds	r0, #1
 8109270:	d12c      	bne.n	81092cc <_printf_float+0x24c>
 8109272:	e764      	b.n	810913e <_printf_float+0xbe>
 8109274:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109278:	f240 80e0 	bls.w	810943c <_printf_float+0x3bc>
 810927c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109280:	2200      	movs	r2, #0
 8109282:	2300      	movs	r3, #0
 8109284:	f7f7 fca8 	bl	8100bd8 <__aeabi_dcmpeq>
 8109288:	2800      	cmp	r0, #0
 810928a:	d034      	beq.n	81092f6 <_printf_float+0x276>
 810928c:	4a37      	ldr	r2, [pc, #220]	; (810936c <_printf_float+0x2ec>)
 810928e:	2301      	movs	r3, #1
 8109290:	4631      	mov	r1, r6
 8109292:	4628      	mov	r0, r5
 8109294:	47b8      	blx	r7
 8109296:	3001      	adds	r0, #1
 8109298:	f43f af51 	beq.w	810913e <_printf_float+0xbe>
 810929c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81092a0:	429a      	cmp	r2, r3
 81092a2:	db02      	blt.n	81092aa <_printf_float+0x22a>
 81092a4:	6823      	ldr	r3, [r4, #0]
 81092a6:	07d8      	lsls	r0, r3, #31
 81092a8:	d510      	bpl.n	81092cc <_printf_float+0x24c>
 81092aa:	ee18 3a10 	vmov	r3, s16
 81092ae:	4652      	mov	r2, sl
 81092b0:	4631      	mov	r1, r6
 81092b2:	4628      	mov	r0, r5
 81092b4:	47b8      	blx	r7
 81092b6:	3001      	adds	r0, #1
 81092b8:	f43f af41 	beq.w	810913e <_printf_float+0xbe>
 81092bc:	f04f 0800 	mov.w	r8, #0
 81092c0:	f104 091a 	add.w	r9, r4, #26
 81092c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81092c6:	3b01      	subs	r3, #1
 81092c8:	4543      	cmp	r3, r8
 81092ca:	dc09      	bgt.n	81092e0 <_printf_float+0x260>
 81092cc:	6823      	ldr	r3, [r4, #0]
 81092ce:	079b      	lsls	r3, r3, #30
 81092d0:	f100 8107 	bmi.w	81094e2 <_printf_float+0x462>
 81092d4:	68e0      	ldr	r0, [r4, #12]
 81092d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81092d8:	4298      	cmp	r0, r3
 81092da:	bfb8      	it	lt
 81092dc:	4618      	movlt	r0, r3
 81092de:	e730      	b.n	8109142 <_printf_float+0xc2>
 81092e0:	2301      	movs	r3, #1
 81092e2:	464a      	mov	r2, r9
 81092e4:	4631      	mov	r1, r6
 81092e6:	4628      	mov	r0, r5
 81092e8:	47b8      	blx	r7
 81092ea:	3001      	adds	r0, #1
 81092ec:	f43f af27 	beq.w	810913e <_printf_float+0xbe>
 81092f0:	f108 0801 	add.w	r8, r8, #1
 81092f4:	e7e6      	b.n	81092c4 <_printf_float+0x244>
 81092f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	dc39      	bgt.n	8109370 <_printf_float+0x2f0>
 81092fc:	4a1b      	ldr	r2, [pc, #108]	; (810936c <_printf_float+0x2ec>)
 81092fe:	2301      	movs	r3, #1
 8109300:	4631      	mov	r1, r6
 8109302:	4628      	mov	r0, r5
 8109304:	47b8      	blx	r7
 8109306:	3001      	adds	r0, #1
 8109308:	f43f af19 	beq.w	810913e <_printf_float+0xbe>
 810930c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8109310:	4313      	orrs	r3, r2
 8109312:	d102      	bne.n	810931a <_printf_float+0x29a>
 8109314:	6823      	ldr	r3, [r4, #0]
 8109316:	07d9      	lsls	r1, r3, #31
 8109318:	d5d8      	bpl.n	81092cc <_printf_float+0x24c>
 810931a:	ee18 3a10 	vmov	r3, s16
 810931e:	4652      	mov	r2, sl
 8109320:	4631      	mov	r1, r6
 8109322:	4628      	mov	r0, r5
 8109324:	47b8      	blx	r7
 8109326:	3001      	adds	r0, #1
 8109328:	f43f af09 	beq.w	810913e <_printf_float+0xbe>
 810932c:	f04f 0900 	mov.w	r9, #0
 8109330:	f104 0a1a 	add.w	sl, r4, #26
 8109334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109336:	425b      	negs	r3, r3
 8109338:	454b      	cmp	r3, r9
 810933a:	dc01      	bgt.n	8109340 <_printf_float+0x2c0>
 810933c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810933e:	e792      	b.n	8109266 <_printf_float+0x1e6>
 8109340:	2301      	movs	r3, #1
 8109342:	4652      	mov	r2, sl
 8109344:	4631      	mov	r1, r6
 8109346:	4628      	mov	r0, r5
 8109348:	47b8      	blx	r7
 810934a:	3001      	adds	r0, #1
 810934c:	f43f aef7 	beq.w	810913e <_printf_float+0xbe>
 8109350:	f109 0901 	add.w	r9, r9, #1
 8109354:	e7ee      	b.n	8109334 <_printf_float+0x2b4>
 8109356:	bf00      	nop
 8109358:	7fefffff 	.word	0x7fefffff
 810935c:	0812291c 	.word	0x0812291c
 8109360:	08122920 	.word	0x08122920
 8109364:	08122924 	.word	0x08122924
 8109368:	08122928 	.word	0x08122928
 810936c:	0812292c 	.word	0x0812292c
 8109370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8109374:	429a      	cmp	r2, r3
 8109376:	bfa8      	it	ge
 8109378:	461a      	movge	r2, r3
 810937a:	2a00      	cmp	r2, #0
 810937c:	4691      	mov	r9, r2
 810937e:	dc37      	bgt.n	81093f0 <_printf_float+0x370>
 8109380:	f04f 0b00 	mov.w	fp, #0
 8109384:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109388:	f104 021a 	add.w	r2, r4, #26
 810938c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810938e:	9305      	str	r3, [sp, #20]
 8109390:	eba3 0309 	sub.w	r3, r3, r9
 8109394:	455b      	cmp	r3, fp
 8109396:	dc33      	bgt.n	8109400 <_printf_float+0x380>
 8109398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810939c:	429a      	cmp	r2, r3
 810939e:	db3b      	blt.n	8109418 <_printf_float+0x398>
 81093a0:	6823      	ldr	r3, [r4, #0]
 81093a2:	07da      	lsls	r2, r3, #31
 81093a4:	d438      	bmi.n	8109418 <_printf_float+0x398>
 81093a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 81093aa:	eba2 0903 	sub.w	r9, r2, r3
 81093ae:	9b05      	ldr	r3, [sp, #20]
 81093b0:	1ad2      	subs	r2, r2, r3
 81093b2:	4591      	cmp	r9, r2
 81093b4:	bfa8      	it	ge
 81093b6:	4691      	movge	r9, r2
 81093b8:	f1b9 0f00 	cmp.w	r9, #0
 81093bc:	dc35      	bgt.n	810942a <_printf_float+0x3aa>
 81093be:	f04f 0800 	mov.w	r8, #0
 81093c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81093c6:	f104 0a1a 	add.w	sl, r4, #26
 81093ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81093ce:	1a9b      	subs	r3, r3, r2
 81093d0:	eba3 0309 	sub.w	r3, r3, r9
 81093d4:	4543      	cmp	r3, r8
 81093d6:	f77f af79 	ble.w	81092cc <_printf_float+0x24c>
 81093da:	2301      	movs	r3, #1
 81093dc:	4652      	mov	r2, sl
 81093de:	4631      	mov	r1, r6
 81093e0:	4628      	mov	r0, r5
 81093e2:	47b8      	blx	r7
 81093e4:	3001      	adds	r0, #1
 81093e6:	f43f aeaa 	beq.w	810913e <_printf_float+0xbe>
 81093ea:	f108 0801 	add.w	r8, r8, #1
 81093ee:	e7ec      	b.n	81093ca <_printf_float+0x34a>
 81093f0:	4613      	mov	r3, r2
 81093f2:	4631      	mov	r1, r6
 81093f4:	4642      	mov	r2, r8
 81093f6:	4628      	mov	r0, r5
 81093f8:	47b8      	blx	r7
 81093fa:	3001      	adds	r0, #1
 81093fc:	d1c0      	bne.n	8109380 <_printf_float+0x300>
 81093fe:	e69e      	b.n	810913e <_printf_float+0xbe>
 8109400:	2301      	movs	r3, #1
 8109402:	4631      	mov	r1, r6
 8109404:	4628      	mov	r0, r5
 8109406:	9205      	str	r2, [sp, #20]
 8109408:	47b8      	blx	r7
 810940a:	3001      	adds	r0, #1
 810940c:	f43f ae97 	beq.w	810913e <_printf_float+0xbe>
 8109410:	9a05      	ldr	r2, [sp, #20]
 8109412:	f10b 0b01 	add.w	fp, fp, #1
 8109416:	e7b9      	b.n	810938c <_printf_float+0x30c>
 8109418:	ee18 3a10 	vmov	r3, s16
 810941c:	4652      	mov	r2, sl
 810941e:	4631      	mov	r1, r6
 8109420:	4628      	mov	r0, r5
 8109422:	47b8      	blx	r7
 8109424:	3001      	adds	r0, #1
 8109426:	d1be      	bne.n	81093a6 <_printf_float+0x326>
 8109428:	e689      	b.n	810913e <_printf_float+0xbe>
 810942a:	9a05      	ldr	r2, [sp, #20]
 810942c:	464b      	mov	r3, r9
 810942e:	4442      	add	r2, r8
 8109430:	4631      	mov	r1, r6
 8109432:	4628      	mov	r0, r5
 8109434:	47b8      	blx	r7
 8109436:	3001      	adds	r0, #1
 8109438:	d1c1      	bne.n	81093be <_printf_float+0x33e>
 810943a:	e680      	b.n	810913e <_printf_float+0xbe>
 810943c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810943e:	2a01      	cmp	r2, #1
 8109440:	dc01      	bgt.n	8109446 <_printf_float+0x3c6>
 8109442:	07db      	lsls	r3, r3, #31
 8109444:	d53a      	bpl.n	81094bc <_printf_float+0x43c>
 8109446:	2301      	movs	r3, #1
 8109448:	4642      	mov	r2, r8
 810944a:	4631      	mov	r1, r6
 810944c:	4628      	mov	r0, r5
 810944e:	47b8      	blx	r7
 8109450:	3001      	adds	r0, #1
 8109452:	f43f ae74 	beq.w	810913e <_printf_float+0xbe>
 8109456:	ee18 3a10 	vmov	r3, s16
 810945a:	4652      	mov	r2, sl
 810945c:	4631      	mov	r1, r6
 810945e:	4628      	mov	r0, r5
 8109460:	47b8      	blx	r7
 8109462:	3001      	adds	r0, #1
 8109464:	f43f ae6b 	beq.w	810913e <_printf_float+0xbe>
 8109468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810946c:	2200      	movs	r2, #0
 810946e:	2300      	movs	r3, #0
 8109470:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8109474:	f7f7 fbb0 	bl	8100bd8 <__aeabi_dcmpeq>
 8109478:	b9d8      	cbnz	r0, 81094b2 <_printf_float+0x432>
 810947a:	f10a 33ff 	add.w	r3, sl, #4294967295
 810947e:	f108 0201 	add.w	r2, r8, #1
 8109482:	4631      	mov	r1, r6
 8109484:	4628      	mov	r0, r5
 8109486:	47b8      	blx	r7
 8109488:	3001      	adds	r0, #1
 810948a:	d10e      	bne.n	81094aa <_printf_float+0x42a>
 810948c:	e657      	b.n	810913e <_printf_float+0xbe>
 810948e:	2301      	movs	r3, #1
 8109490:	4652      	mov	r2, sl
 8109492:	4631      	mov	r1, r6
 8109494:	4628      	mov	r0, r5
 8109496:	47b8      	blx	r7
 8109498:	3001      	adds	r0, #1
 810949a:	f43f ae50 	beq.w	810913e <_printf_float+0xbe>
 810949e:	f108 0801 	add.w	r8, r8, #1
 81094a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81094a4:	3b01      	subs	r3, #1
 81094a6:	4543      	cmp	r3, r8
 81094a8:	dcf1      	bgt.n	810948e <_printf_float+0x40e>
 81094aa:	464b      	mov	r3, r9
 81094ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81094b0:	e6da      	b.n	8109268 <_printf_float+0x1e8>
 81094b2:	f04f 0800 	mov.w	r8, #0
 81094b6:	f104 0a1a 	add.w	sl, r4, #26
 81094ba:	e7f2      	b.n	81094a2 <_printf_float+0x422>
 81094bc:	2301      	movs	r3, #1
 81094be:	4642      	mov	r2, r8
 81094c0:	e7df      	b.n	8109482 <_printf_float+0x402>
 81094c2:	2301      	movs	r3, #1
 81094c4:	464a      	mov	r2, r9
 81094c6:	4631      	mov	r1, r6
 81094c8:	4628      	mov	r0, r5
 81094ca:	47b8      	blx	r7
 81094cc:	3001      	adds	r0, #1
 81094ce:	f43f ae36 	beq.w	810913e <_printf_float+0xbe>
 81094d2:	f108 0801 	add.w	r8, r8, #1
 81094d6:	68e3      	ldr	r3, [r4, #12]
 81094d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81094da:	1a5b      	subs	r3, r3, r1
 81094dc:	4543      	cmp	r3, r8
 81094de:	dcf0      	bgt.n	81094c2 <_printf_float+0x442>
 81094e0:	e6f8      	b.n	81092d4 <_printf_float+0x254>
 81094e2:	f04f 0800 	mov.w	r8, #0
 81094e6:	f104 0919 	add.w	r9, r4, #25
 81094ea:	e7f4      	b.n	81094d6 <_printf_float+0x456>

081094ec <_printf_common>:
 81094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81094f0:	4616      	mov	r6, r2
 81094f2:	4699      	mov	r9, r3
 81094f4:	688a      	ldr	r2, [r1, #8]
 81094f6:	690b      	ldr	r3, [r1, #16]
 81094f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81094fc:	4293      	cmp	r3, r2
 81094fe:	bfb8      	it	lt
 8109500:	4613      	movlt	r3, r2
 8109502:	6033      	str	r3, [r6, #0]
 8109504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109508:	4607      	mov	r7, r0
 810950a:	460c      	mov	r4, r1
 810950c:	b10a      	cbz	r2, 8109512 <_printf_common+0x26>
 810950e:	3301      	adds	r3, #1
 8109510:	6033      	str	r3, [r6, #0]
 8109512:	6823      	ldr	r3, [r4, #0]
 8109514:	0699      	lsls	r1, r3, #26
 8109516:	bf42      	ittt	mi
 8109518:	6833      	ldrmi	r3, [r6, #0]
 810951a:	3302      	addmi	r3, #2
 810951c:	6033      	strmi	r3, [r6, #0]
 810951e:	6825      	ldr	r5, [r4, #0]
 8109520:	f015 0506 	ands.w	r5, r5, #6
 8109524:	d106      	bne.n	8109534 <_printf_common+0x48>
 8109526:	f104 0a19 	add.w	sl, r4, #25
 810952a:	68e3      	ldr	r3, [r4, #12]
 810952c:	6832      	ldr	r2, [r6, #0]
 810952e:	1a9b      	subs	r3, r3, r2
 8109530:	42ab      	cmp	r3, r5
 8109532:	dc26      	bgt.n	8109582 <_printf_common+0x96>
 8109534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109538:	1e13      	subs	r3, r2, #0
 810953a:	6822      	ldr	r2, [r4, #0]
 810953c:	bf18      	it	ne
 810953e:	2301      	movne	r3, #1
 8109540:	0692      	lsls	r2, r2, #26
 8109542:	d42b      	bmi.n	810959c <_printf_common+0xb0>
 8109544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109548:	4649      	mov	r1, r9
 810954a:	4638      	mov	r0, r7
 810954c:	47c0      	blx	r8
 810954e:	3001      	adds	r0, #1
 8109550:	d01e      	beq.n	8109590 <_printf_common+0xa4>
 8109552:	6823      	ldr	r3, [r4, #0]
 8109554:	6922      	ldr	r2, [r4, #16]
 8109556:	f003 0306 	and.w	r3, r3, #6
 810955a:	2b04      	cmp	r3, #4
 810955c:	bf02      	ittt	eq
 810955e:	68e5      	ldreq	r5, [r4, #12]
 8109560:	6833      	ldreq	r3, [r6, #0]
 8109562:	1aed      	subeq	r5, r5, r3
 8109564:	68a3      	ldr	r3, [r4, #8]
 8109566:	bf0c      	ite	eq
 8109568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810956c:	2500      	movne	r5, #0
 810956e:	4293      	cmp	r3, r2
 8109570:	bfc4      	itt	gt
 8109572:	1a9b      	subgt	r3, r3, r2
 8109574:	18ed      	addgt	r5, r5, r3
 8109576:	2600      	movs	r6, #0
 8109578:	341a      	adds	r4, #26
 810957a:	42b5      	cmp	r5, r6
 810957c:	d11a      	bne.n	81095b4 <_printf_common+0xc8>
 810957e:	2000      	movs	r0, #0
 8109580:	e008      	b.n	8109594 <_printf_common+0xa8>
 8109582:	2301      	movs	r3, #1
 8109584:	4652      	mov	r2, sl
 8109586:	4649      	mov	r1, r9
 8109588:	4638      	mov	r0, r7
 810958a:	47c0      	blx	r8
 810958c:	3001      	adds	r0, #1
 810958e:	d103      	bne.n	8109598 <_printf_common+0xac>
 8109590:	f04f 30ff 	mov.w	r0, #4294967295
 8109594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109598:	3501      	adds	r5, #1
 810959a:	e7c6      	b.n	810952a <_printf_common+0x3e>
 810959c:	18e1      	adds	r1, r4, r3
 810959e:	1c5a      	adds	r2, r3, #1
 81095a0:	2030      	movs	r0, #48	; 0x30
 81095a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81095a6:	4422      	add	r2, r4
 81095a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81095ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81095b0:	3302      	adds	r3, #2
 81095b2:	e7c7      	b.n	8109544 <_printf_common+0x58>
 81095b4:	2301      	movs	r3, #1
 81095b6:	4622      	mov	r2, r4
 81095b8:	4649      	mov	r1, r9
 81095ba:	4638      	mov	r0, r7
 81095bc:	47c0      	blx	r8
 81095be:	3001      	adds	r0, #1
 81095c0:	d0e6      	beq.n	8109590 <_printf_common+0xa4>
 81095c2:	3601      	adds	r6, #1
 81095c4:	e7d9      	b.n	810957a <_printf_common+0x8e>
	...

081095c8 <_printf_i>:
 81095c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81095cc:	7e0f      	ldrb	r7, [r1, #24]
 81095ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81095d0:	2f78      	cmp	r7, #120	; 0x78
 81095d2:	4691      	mov	r9, r2
 81095d4:	4680      	mov	r8, r0
 81095d6:	460c      	mov	r4, r1
 81095d8:	469a      	mov	sl, r3
 81095da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81095de:	d807      	bhi.n	81095f0 <_printf_i+0x28>
 81095e0:	2f62      	cmp	r7, #98	; 0x62
 81095e2:	d80a      	bhi.n	81095fa <_printf_i+0x32>
 81095e4:	2f00      	cmp	r7, #0
 81095e6:	f000 80d4 	beq.w	8109792 <_printf_i+0x1ca>
 81095ea:	2f58      	cmp	r7, #88	; 0x58
 81095ec:	f000 80c0 	beq.w	8109770 <_printf_i+0x1a8>
 81095f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81095f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81095f8:	e03a      	b.n	8109670 <_printf_i+0xa8>
 81095fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81095fe:	2b15      	cmp	r3, #21
 8109600:	d8f6      	bhi.n	81095f0 <_printf_i+0x28>
 8109602:	a101      	add	r1, pc, #4	; (adr r1, 8109608 <_printf_i+0x40>)
 8109604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109608:	08109661 	.word	0x08109661
 810960c:	08109675 	.word	0x08109675
 8109610:	081095f1 	.word	0x081095f1
 8109614:	081095f1 	.word	0x081095f1
 8109618:	081095f1 	.word	0x081095f1
 810961c:	081095f1 	.word	0x081095f1
 8109620:	08109675 	.word	0x08109675
 8109624:	081095f1 	.word	0x081095f1
 8109628:	081095f1 	.word	0x081095f1
 810962c:	081095f1 	.word	0x081095f1
 8109630:	081095f1 	.word	0x081095f1
 8109634:	08109779 	.word	0x08109779
 8109638:	081096a1 	.word	0x081096a1
 810963c:	08109733 	.word	0x08109733
 8109640:	081095f1 	.word	0x081095f1
 8109644:	081095f1 	.word	0x081095f1
 8109648:	0810979b 	.word	0x0810979b
 810964c:	081095f1 	.word	0x081095f1
 8109650:	081096a1 	.word	0x081096a1
 8109654:	081095f1 	.word	0x081095f1
 8109658:	081095f1 	.word	0x081095f1
 810965c:	0810973b 	.word	0x0810973b
 8109660:	682b      	ldr	r3, [r5, #0]
 8109662:	1d1a      	adds	r2, r3, #4
 8109664:	681b      	ldr	r3, [r3, #0]
 8109666:	602a      	str	r2, [r5, #0]
 8109668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810966c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109670:	2301      	movs	r3, #1
 8109672:	e09f      	b.n	81097b4 <_printf_i+0x1ec>
 8109674:	6820      	ldr	r0, [r4, #0]
 8109676:	682b      	ldr	r3, [r5, #0]
 8109678:	0607      	lsls	r7, r0, #24
 810967a:	f103 0104 	add.w	r1, r3, #4
 810967e:	6029      	str	r1, [r5, #0]
 8109680:	d501      	bpl.n	8109686 <_printf_i+0xbe>
 8109682:	681e      	ldr	r6, [r3, #0]
 8109684:	e003      	b.n	810968e <_printf_i+0xc6>
 8109686:	0646      	lsls	r6, r0, #25
 8109688:	d5fb      	bpl.n	8109682 <_printf_i+0xba>
 810968a:	f9b3 6000 	ldrsh.w	r6, [r3]
 810968e:	2e00      	cmp	r6, #0
 8109690:	da03      	bge.n	810969a <_printf_i+0xd2>
 8109692:	232d      	movs	r3, #45	; 0x2d
 8109694:	4276      	negs	r6, r6
 8109696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810969a:	485a      	ldr	r0, [pc, #360]	; (8109804 <_printf_i+0x23c>)
 810969c:	230a      	movs	r3, #10
 810969e:	e012      	b.n	81096c6 <_printf_i+0xfe>
 81096a0:	682b      	ldr	r3, [r5, #0]
 81096a2:	6820      	ldr	r0, [r4, #0]
 81096a4:	1d19      	adds	r1, r3, #4
 81096a6:	6029      	str	r1, [r5, #0]
 81096a8:	0605      	lsls	r5, r0, #24
 81096aa:	d501      	bpl.n	81096b0 <_printf_i+0xe8>
 81096ac:	681e      	ldr	r6, [r3, #0]
 81096ae:	e002      	b.n	81096b6 <_printf_i+0xee>
 81096b0:	0641      	lsls	r1, r0, #25
 81096b2:	d5fb      	bpl.n	81096ac <_printf_i+0xe4>
 81096b4:	881e      	ldrh	r6, [r3, #0]
 81096b6:	4853      	ldr	r0, [pc, #332]	; (8109804 <_printf_i+0x23c>)
 81096b8:	2f6f      	cmp	r7, #111	; 0x6f
 81096ba:	bf0c      	ite	eq
 81096bc:	2308      	moveq	r3, #8
 81096be:	230a      	movne	r3, #10
 81096c0:	2100      	movs	r1, #0
 81096c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81096c6:	6865      	ldr	r5, [r4, #4]
 81096c8:	60a5      	str	r5, [r4, #8]
 81096ca:	2d00      	cmp	r5, #0
 81096cc:	bfa2      	ittt	ge
 81096ce:	6821      	ldrge	r1, [r4, #0]
 81096d0:	f021 0104 	bicge.w	r1, r1, #4
 81096d4:	6021      	strge	r1, [r4, #0]
 81096d6:	b90e      	cbnz	r6, 81096dc <_printf_i+0x114>
 81096d8:	2d00      	cmp	r5, #0
 81096da:	d04b      	beq.n	8109774 <_printf_i+0x1ac>
 81096dc:	4615      	mov	r5, r2
 81096de:	fbb6 f1f3 	udiv	r1, r6, r3
 81096e2:	fb03 6711 	mls	r7, r3, r1, r6
 81096e6:	5dc7      	ldrb	r7, [r0, r7]
 81096e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81096ec:	4637      	mov	r7, r6
 81096ee:	42bb      	cmp	r3, r7
 81096f0:	460e      	mov	r6, r1
 81096f2:	d9f4      	bls.n	81096de <_printf_i+0x116>
 81096f4:	2b08      	cmp	r3, #8
 81096f6:	d10b      	bne.n	8109710 <_printf_i+0x148>
 81096f8:	6823      	ldr	r3, [r4, #0]
 81096fa:	07de      	lsls	r6, r3, #31
 81096fc:	d508      	bpl.n	8109710 <_printf_i+0x148>
 81096fe:	6923      	ldr	r3, [r4, #16]
 8109700:	6861      	ldr	r1, [r4, #4]
 8109702:	4299      	cmp	r1, r3
 8109704:	bfde      	ittt	le
 8109706:	2330      	movle	r3, #48	; 0x30
 8109708:	f805 3c01 	strble.w	r3, [r5, #-1]
 810970c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8109710:	1b52      	subs	r2, r2, r5
 8109712:	6122      	str	r2, [r4, #16]
 8109714:	f8cd a000 	str.w	sl, [sp]
 8109718:	464b      	mov	r3, r9
 810971a:	aa03      	add	r2, sp, #12
 810971c:	4621      	mov	r1, r4
 810971e:	4640      	mov	r0, r8
 8109720:	f7ff fee4 	bl	81094ec <_printf_common>
 8109724:	3001      	adds	r0, #1
 8109726:	d14a      	bne.n	81097be <_printf_i+0x1f6>
 8109728:	f04f 30ff 	mov.w	r0, #4294967295
 810972c:	b004      	add	sp, #16
 810972e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109732:	6823      	ldr	r3, [r4, #0]
 8109734:	f043 0320 	orr.w	r3, r3, #32
 8109738:	6023      	str	r3, [r4, #0]
 810973a:	4833      	ldr	r0, [pc, #204]	; (8109808 <_printf_i+0x240>)
 810973c:	2778      	movs	r7, #120	; 0x78
 810973e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8109742:	6823      	ldr	r3, [r4, #0]
 8109744:	6829      	ldr	r1, [r5, #0]
 8109746:	061f      	lsls	r7, r3, #24
 8109748:	f851 6b04 	ldr.w	r6, [r1], #4
 810974c:	d402      	bmi.n	8109754 <_printf_i+0x18c>
 810974e:	065f      	lsls	r7, r3, #25
 8109750:	bf48      	it	mi
 8109752:	b2b6      	uxthmi	r6, r6
 8109754:	07df      	lsls	r7, r3, #31
 8109756:	bf48      	it	mi
 8109758:	f043 0320 	orrmi.w	r3, r3, #32
 810975c:	6029      	str	r1, [r5, #0]
 810975e:	bf48      	it	mi
 8109760:	6023      	strmi	r3, [r4, #0]
 8109762:	b91e      	cbnz	r6, 810976c <_printf_i+0x1a4>
 8109764:	6823      	ldr	r3, [r4, #0]
 8109766:	f023 0320 	bic.w	r3, r3, #32
 810976a:	6023      	str	r3, [r4, #0]
 810976c:	2310      	movs	r3, #16
 810976e:	e7a7      	b.n	81096c0 <_printf_i+0xf8>
 8109770:	4824      	ldr	r0, [pc, #144]	; (8109804 <_printf_i+0x23c>)
 8109772:	e7e4      	b.n	810973e <_printf_i+0x176>
 8109774:	4615      	mov	r5, r2
 8109776:	e7bd      	b.n	81096f4 <_printf_i+0x12c>
 8109778:	682b      	ldr	r3, [r5, #0]
 810977a:	6826      	ldr	r6, [r4, #0]
 810977c:	6961      	ldr	r1, [r4, #20]
 810977e:	1d18      	adds	r0, r3, #4
 8109780:	6028      	str	r0, [r5, #0]
 8109782:	0635      	lsls	r5, r6, #24
 8109784:	681b      	ldr	r3, [r3, #0]
 8109786:	d501      	bpl.n	810978c <_printf_i+0x1c4>
 8109788:	6019      	str	r1, [r3, #0]
 810978a:	e002      	b.n	8109792 <_printf_i+0x1ca>
 810978c:	0670      	lsls	r0, r6, #25
 810978e:	d5fb      	bpl.n	8109788 <_printf_i+0x1c0>
 8109790:	8019      	strh	r1, [r3, #0]
 8109792:	2300      	movs	r3, #0
 8109794:	6123      	str	r3, [r4, #16]
 8109796:	4615      	mov	r5, r2
 8109798:	e7bc      	b.n	8109714 <_printf_i+0x14c>
 810979a:	682b      	ldr	r3, [r5, #0]
 810979c:	1d1a      	adds	r2, r3, #4
 810979e:	602a      	str	r2, [r5, #0]
 81097a0:	681d      	ldr	r5, [r3, #0]
 81097a2:	6862      	ldr	r2, [r4, #4]
 81097a4:	2100      	movs	r1, #0
 81097a6:	4628      	mov	r0, r5
 81097a8:	f7f6 fd9a 	bl	81002e0 <memchr>
 81097ac:	b108      	cbz	r0, 81097b2 <_printf_i+0x1ea>
 81097ae:	1b40      	subs	r0, r0, r5
 81097b0:	6060      	str	r0, [r4, #4]
 81097b2:	6863      	ldr	r3, [r4, #4]
 81097b4:	6123      	str	r3, [r4, #16]
 81097b6:	2300      	movs	r3, #0
 81097b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81097bc:	e7aa      	b.n	8109714 <_printf_i+0x14c>
 81097be:	6923      	ldr	r3, [r4, #16]
 81097c0:	462a      	mov	r2, r5
 81097c2:	4649      	mov	r1, r9
 81097c4:	4640      	mov	r0, r8
 81097c6:	47d0      	blx	sl
 81097c8:	3001      	adds	r0, #1
 81097ca:	d0ad      	beq.n	8109728 <_printf_i+0x160>
 81097cc:	6823      	ldr	r3, [r4, #0]
 81097ce:	079b      	lsls	r3, r3, #30
 81097d0:	d413      	bmi.n	81097fa <_printf_i+0x232>
 81097d2:	68e0      	ldr	r0, [r4, #12]
 81097d4:	9b03      	ldr	r3, [sp, #12]
 81097d6:	4298      	cmp	r0, r3
 81097d8:	bfb8      	it	lt
 81097da:	4618      	movlt	r0, r3
 81097dc:	e7a6      	b.n	810972c <_printf_i+0x164>
 81097de:	2301      	movs	r3, #1
 81097e0:	4632      	mov	r2, r6
 81097e2:	4649      	mov	r1, r9
 81097e4:	4640      	mov	r0, r8
 81097e6:	47d0      	blx	sl
 81097e8:	3001      	adds	r0, #1
 81097ea:	d09d      	beq.n	8109728 <_printf_i+0x160>
 81097ec:	3501      	adds	r5, #1
 81097ee:	68e3      	ldr	r3, [r4, #12]
 81097f0:	9903      	ldr	r1, [sp, #12]
 81097f2:	1a5b      	subs	r3, r3, r1
 81097f4:	42ab      	cmp	r3, r5
 81097f6:	dcf2      	bgt.n	81097de <_printf_i+0x216>
 81097f8:	e7eb      	b.n	81097d2 <_printf_i+0x20a>
 81097fa:	2500      	movs	r5, #0
 81097fc:	f104 0619 	add.w	r6, r4, #25
 8109800:	e7f5      	b.n	81097ee <_printf_i+0x226>
 8109802:	bf00      	nop
 8109804:	0812292e 	.word	0x0812292e
 8109808:	0812293f 	.word	0x0812293f

0810980c <_scanf_float>:
 810980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109810:	b087      	sub	sp, #28
 8109812:	4617      	mov	r7, r2
 8109814:	9303      	str	r3, [sp, #12]
 8109816:	688b      	ldr	r3, [r1, #8]
 8109818:	1e5a      	subs	r2, r3, #1
 810981a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810981e:	bf83      	ittte	hi
 8109820:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8109824:	195b      	addhi	r3, r3, r5
 8109826:	9302      	strhi	r3, [sp, #8]
 8109828:	2300      	movls	r3, #0
 810982a:	bf86      	itte	hi
 810982c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8109830:	608b      	strhi	r3, [r1, #8]
 8109832:	9302      	strls	r3, [sp, #8]
 8109834:	680b      	ldr	r3, [r1, #0]
 8109836:	468b      	mov	fp, r1
 8109838:	2500      	movs	r5, #0
 810983a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810983e:	f84b 3b1c 	str.w	r3, [fp], #28
 8109842:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8109846:	4680      	mov	r8, r0
 8109848:	460c      	mov	r4, r1
 810984a:	465e      	mov	r6, fp
 810984c:	46aa      	mov	sl, r5
 810984e:	46a9      	mov	r9, r5
 8109850:	9501      	str	r5, [sp, #4]
 8109852:	68a2      	ldr	r2, [r4, #8]
 8109854:	b152      	cbz	r2, 810986c <_scanf_float+0x60>
 8109856:	683b      	ldr	r3, [r7, #0]
 8109858:	781b      	ldrb	r3, [r3, #0]
 810985a:	2b4e      	cmp	r3, #78	; 0x4e
 810985c:	d864      	bhi.n	8109928 <_scanf_float+0x11c>
 810985e:	2b40      	cmp	r3, #64	; 0x40
 8109860:	d83c      	bhi.n	81098dc <_scanf_float+0xd0>
 8109862:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8109866:	b2c8      	uxtb	r0, r1
 8109868:	280e      	cmp	r0, #14
 810986a:	d93a      	bls.n	81098e2 <_scanf_float+0xd6>
 810986c:	f1b9 0f00 	cmp.w	r9, #0
 8109870:	d003      	beq.n	810987a <_scanf_float+0x6e>
 8109872:	6823      	ldr	r3, [r4, #0]
 8109874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109878:	6023      	str	r3, [r4, #0]
 810987a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810987e:	f1ba 0f01 	cmp.w	sl, #1
 8109882:	f200 8113 	bhi.w	8109aac <_scanf_float+0x2a0>
 8109886:	455e      	cmp	r6, fp
 8109888:	f200 8105 	bhi.w	8109a96 <_scanf_float+0x28a>
 810988c:	2501      	movs	r5, #1
 810988e:	4628      	mov	r0, r5
 8109890:	b007      	add	sp, #28
 8109892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109896:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810989a:	2a0d      	cmp	r2, #13
 810989c:	d8e6      	bhi.n	810986c <_scanf_float+0x60>
 810989e:	a101      	add	r1, pc, #4	; (adr r1, 81098a4 <_scanf_float+0x98>)
 81098a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81098a4:	081099e3 	.word	0x081099e3
 81098a8:	0810986d 	.word	0x0810986d
 81098ac:	0810986d 	.word	0x0810986d
 81098b0:	0810986d 	.word	0x0810986d
 81098b4:	08109a43 	.word	0x08109a43
 81098b8:	08109a1b 	.word	0x08109a1b
 81098bc:	0810986d 	.word	0x0810986d
 81098c0:	0810986d 	.word	0x0810986d
 81098c4:	081099f1 	.word	0x081099f1
 81098c8:	0810986d 	.word	0x0810986d
 81098cc:	0810986d 	.word	0x0810986d
 81098d0:	0810986d 	.word	0x0810986d
 81098d4:	0810986d 	.word	0x0810986d
 81098d8:	081099a9 	.word	0x081099a9
 81098dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 81098e0:	e7db      	b.n	810989a <_scanf_float+0x8e>
 81098e2:	290e      	cmp	r1, #14
 81098e4:	d8c2      	bhi.n	810986c <_scanf_float+0x60>
 81098e6:	a001      	add	r0, pc, #4	; (adr r0, 81098ec <_scanf_float+0xe0>)
 81098e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 81098ec:	0810999b 	.word	0x0810999b
 81098f0:	0810986d 	.word	0x0810986d
 81098f4:	0810999b 	.word	0x0810999b
 81098f8:	08109a2f 	.word	0x08109a2f
 81098fc:	0810986d 	.word	0x0810986d
 8109900:	08109949 	.word	0x08109949
 8109904:	08109985 	.word	0x08109985
 8109908:	08109985 	.word	0x08109985
 810990c:	08109985 	.word	0x08109985
 8109910:	08109985 	.word	0x08109985
 8109914:	08109985 	.word	0x08109985
 8109918:	08109985 	.word	0x08109985
 810991c:	08109985 	.word	0x08109985
 8109920:	08109985 	.word	0x08109985
 8109924:	08109985 	.word	0x08109985
 8109928:	2b6e      	cmp	r3, #110	; 0x6e
 810992a:	d809      	bhi.n	8109940 <_scanf_float+0x134>
 810992c:	2b60      	cmp	r3, #96	; 0x60
 810992e:	d8b2      	bhi.n	8109896 <_scanf_float+0x8a>
 8109930:	2b54      	cmp	r3, #84	; 0x54
 8109932:	d077      	beq.n	8109a24 <_scanf_float+0x218>
 8109934:	2b59      	cmp	r3, #89	; 0x59
 8109936:	d199      	bne.n	810986c <_scanf_float+0x60>
 8109938:	2d07      	cmp	r5, #7
 810993a:	d197      	bne.n	810986c <_scanf_float+0x60>
 810993c:	2508      	movs	r5, #8
 810993e:	e029      	b.n	8109994 <_scanf_float+0x188>
 8109940:	2b74      	cmp	r3, #116	; 0x74
 8109942:	d06f      	beq.n	8109a24 <_scanf_float+0x218>
 8109944:	2b79      	cmp	r3, #121	; 0x79
 8109946:	e7f6      	b.n	8109936 <_scanf_float+0x12a>
 8109948:	6821      	ldr	r1, [r4, #0]
 810994a:	05c8      	lsls	r0, r1, #23
 810994c:	d51a      	bpl.n	8109984 <_scanf_float+0x178>
 810994e:	9b02      	ldr	r3, [sp, #8]
 8109950:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8109954:	6021      	str	r1, [r4, #0]
 8109956:	f109 0901 	add.w	r9, r9, #1
 810995a:	b11b      	cbz	r3, 8109964 <_scanf_float+0x158>
 810995c:	3b01      	subs	r3, #1
 810995e:	3201      	adds	r2, #1
 8109960:	9302      	str	r3, [sp, #8]
 8109962:	60a2      	str	r2, [r4, #8]
 8109964:	68a3      	ldr	r3, [r4, #8]
 8109966:	3b01      	subs	r3, #1
 8109968:	60a3      	str	r3, [r4, #8]
 810996a:	6923      	ldr	r3, [r4, #16]
 810996c:	3301      	adds	r3, #1
 810996e:	6123      	str	r3, [r4, #16]
 8109970:	687b      	ldr	r3, [r7, #4]
 8109972:	3b01      	subs	r3, #1
 8109974:	2b00      	cmp	r3, #0
 8109976:	607b      	str	r3, [r7, #4]
 8109978:	f340 8084 	ble.w	8109a84 <_scanf_float+0x278>
 810997c:	683b      	ldr	r3, [r7, #0]
 810997e:	3301      	adds	r3, #1
 8109980:	603b      	str	r3, [r7, #0]
 8109982:	e766      	b.n	8109852 <_scanf_float+0x46>
 8109984:	eb1a 0f05 	cmn.w	sl, r5
 8109988:	f47f af70 	bne.w	810986c <_scanf_float+0x60>
 810998c:	6822      	ldr	r2, [r4, #0]
 810998e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8109992:	6022      	str	r2, [r4, #0]
 8109994:	f806 3b01 	strb.w	r3, [r6], #1
 8109998:	e7e4      	b.n	8109964 <_scanf_float+0x158>
 810999a:	6822      	ldr	r2, [r4, #0]
 810999c:	0610      	lsls	r0, r2, #24
 810999e:	f57f af65 	bpl.w	810986c <_scanf_float+0x60>
 81099a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81099a6:	e7f4      	b.n	8109992 <_scanf_float+0x186>
 81099a8:	f1ba 0f00 	cmp.w	sl, #0
 81099ac:	d10e      	bne.n	81099cc <_scanf_float+0x1c0>
 81099ae:	f1b9 0f00 	cmp.w	r9, #0
 81099b2:	d10e      	bne.n	81099d2 <_scanf_float+0x1c6>
 81099b4:	6822      	ldr	r2, [r4, #0]
 81099b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81099ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81099be:	d108      	bne.n	81099d2 <_scanf_float+0x1c6>
 81099c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81099c4:	6022      	str	r2, [r4, #0]
 81099c6:	f04f 0a01 	mov.w	sl, #1
 81099ca:	e7e3      	b.n	8109994 <_scanf_float+0x188>
 81099cc:	f1ba 0f02 	cmp.w	sl, #2
 81099d0:	d055      	beq.n	8109a7e <_scanf_float+0x272>
 81099d2:	2d01      	cmp	r5, #1
 81099d4:	d002      	beq.n	81099dc <_scanf_float+0x1d0>
 81099d6:	2d04      	cmp	r5, #4
 81099d8:	f47f af48 	bne.w	810986c <_scanf_float+0x60>
 81099dc:	3501      	adds	r5, #1
 81099de:	b2ed      	uxtb	r5, r5
 81099e0:	e7d8      	b.n	8109994 <_scanf_float+0x188>
 81099e2:	f1ba 0f01 	cmp.w	sl, #1
 81099e6:	f47f af41 	bne.w	810986c <_scanf_float+0x60>
 81099ea:	f04f 0a02 	mov.w	sl, #2
 81099ee:	e7d1      	b.n	8109994 <_scanf_float+0x188>
 81099f0:	b97d      	cbnz	r5, 8109a12 <_scanf_float+0x206>
 81099f2:	f1b9 0f00 	cmp.w	r9, #0
 81099f6:	f47f af3c 	bne.w	8109872 <_scanf_float+0x66>
 81099fa:	6822      	ldr	r2, [r4, #0]
 81099fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8109a00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8109a04:	f47f af39 	bne.w	810987a <_scanf_float+0x6e>
 8109a08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a0c:	6022      	str	r2, [r4, #0]
 8109a0e:	2501      	movs	r5, #1
 8109a10:	e7c0      	b.n	8109994 <_scanf_float+0x188>
 8109a12:	2d03      	cmp	r5, #3
 8109a14:	d0e2      	beq.n	81099dc <_scanf_float+0x1d0>
 8109a16:	2d05      	cmp	r5, #5
 8109a18:	e7de      	b.n	81099d8 <_scanf_float+0x1cc>
 8109a1a:	2d02      	cmp	r5, #2
 8109a1c:	f47f af26 	bne.w	810986c <_scanf_float+0x60>
 8109a20:	2503      	movs	r5, #3
 8109a22:	e7b7      	b.n	8109994 <_scanf_float+0x188>
 8109a24:	2d06      	cmp	r5, #6
 8109a26:	f47f af21 	bne.w	810986c <_scanf_float+0x60>
 8109a2a:	2507      	movs	r5, #7
 8109a2c:	e7b2      	b.n	8109994 <_scanf_float+0x188>
 8109a2e:	6822      	ldr	r2, [r4, #0]
 8109a30:	0591      	lsls	r1, r2, #22
 8109a32:	f57f af1b 	bpl.w	810986c <_scanf_float+0x60>
 8109a36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8109a3a:	6022      	str	r2, [r4, #0]
 8109a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109a40:	e7a8      	b.n	8109994 <_scanf_float+0x188>
 8109a42:	6822      	ldr	r2, [r4, #0]
 8109a44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8109a48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8109a4c:	d006      	beq.n	8109a5c <_scanf_float+0x250>
 8109a4e:	0550      	lsls	r0, r2, #21
 8109a50:	f57f af0c 	bpl.w	810986c <_scanf_float+0x60>
 8109a54:	f1b9 0f00 	cmp.w	r9, #0
 8109a58:	f43f af0f 	beq.w	810987a <_scanf_float+0x6e>
 8109a5c:	0591      	lsls	r1, r2, #22
 8109a5e:	bf58      	it	pl
 8109a60:	9901      	ldrpl	r1, [sp, #4]
 8109a62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8109a66:	bf58      	it	pl
 8109a68:	eba9 0101 	subpl.w	r1, r9, r1
 8109a6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8109a70:	bf58      	it	pl
 8109a72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8109a76:	6022      	str	r2, [r4, #0]
 8109a78:	f04f 0900 	mov.w	r9, #0
 8109a7c:	e78a      	b.n	8109994 <_scanf_float+0x188>
 8109a7e:	f04f 0a03 	mov.w	sl, #3
 8109a82:	e787      	b.n	8109994 <_scanf_float+0x188>
 8109a84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8109a88:	4639      	mov	r1, r7
 8109a8a:	4640      	mov	r0, r8
 8109a8c:	4798      	blx	r3
 8109a8e:	2800      	cmp	r0, #0
 8109a90:	f43f aedf 	beq.w	8109852 <_scanf_float+0x46>
 8109a94:	e6ea      	b.n	810986c <_scanf_float+0x60>
 8109a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109a9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109a9e:	463a      	mov	r2, r7
 8109aa0:	4640      	mov	r0, r8
 8109aa2:	4798      	blx	r3
 8109aa4:	6923      	ldr	r3, [r4, #16]
 8109aa6:	3b01      	subs	r3, #1
 8109aa8:	6123      	str	r3, [r4, #16]
 8109aaa:	e6ec      	b.n	8109886 <_scanf_float+0x7a>
 8109aac:	1e6b      	subs	r3, r5, #1
 8109aae:	2b06      	cmp	r3, #6
 8109ab0:	d825      	bhi.n	8109afe <_scanf_float+0x2f2>
 8109ab2:	2d02      	cmp	r5, #2
 8109ab4:	d836      	bhi.n	8109b24 <_scanf_float+0x318>
 8109ab6:	455e      	cmp	r6, fp
 8109ab8:	f67f aee8 	bls.w	810988c <_scanf_float+0x80>
 8109abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109ac0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109ac4:	463a      	mov	r2, r7
 8109ac6:	4640      	mov	r0, r8
 8109ac8:	4798      	blx	r3
 8109aca:	6923      	ldr	r3, [r4, #16]
 8109acc:	3b01      	subs	r3, #1
 8109ace:	6123      	str	r3, [r4, #16]
 8109ad0:	e7f1      	b.n	8109ab6 <_scanf_float+0x2aa>
 8109ad2:	9802      	ldr	r0, [sp, #8]
 8109ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109ad8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8109adc:	9002      	str	r0, [sp, #8]
 8109ade:	463a      	mov	r2, r7
 8109ae0:	4640      	mov	r0, r8
 8109ae2:	4798      	blx	r3
 8109ae4:	6923      	ldr	r3, [r4, #16]
 8109ae6:	3b01      	subs	r3, #1
 8109ae8:	6123      	str	r3, [r4, #16]
 8109aea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109aee:	fa5f fa8a 	uxtb.w	sl, sl
 8109af2:	f1ba 0f02 	cmp.w	sl, #2
 8109af6:	d1ec      	bne.n	8109ad2 <_scanf_float+0x2c6>
 8109af8:	3d03      	subs	r5, #3
 8109afa:	b2ed      	uxtb	r5, r5
 8109afc:	1b76      	subs	r6, r6, r5
 8109afe:	6823      	ldr	r3, [r4, #0]
 8109b00:	05da      	lsls	r2, r3, #23
 8109b02:	d52f      	bpl.n	8109b64 <_scanf_float+0x358>
 8109b04:	055b      	lsls	r3, r3, #21
 8109b06:	d510      	bpl.n	8109b2a <_scanf_float+0x31e>
 8109b08:	455e      	cmp	r6, fp
 8109b0a:	f67f aebf 	bls.w	810988c <_scanf_float+0x80>
 8109b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8109b16:	463a      	mov	r2, r7
 8109b18:	4640      	mov	r0, r8
 8109b1a:	4798      	blx	r3
 8109b1c:	6923      	ldr	r3, [r4, #16]
 8109b1e:	3b01      	subs	r3, #1
 8109b20:	6123      	str	r3, [r4, #16]
 8109b22:	e7f1      	b.n	8109b08 <_scanf_float+0x2fc>
 8109b24:	46aa      	mov	sl, r5
 8109b26:	9602      	str	r6, [sp, #8]
 8109b28:	e7df      	b.n	8109aea <_scanf_float+0x2de>
 8109b2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8109b2e:	6923      	ldr	r3, [r4, #16]
 8109b30:	2965      	cmp	r1, #101	; 0x65
 8109b32:	f103 33ff 	add.w	r3, r3, #4294967295
 8109b36:	f106 35ff 	add.w	r5, r6, #4294967295
 8109b3a:	6123      	str	r3, [r4, #16]
 8109b3c:	d00c      	beq.n	8109b58 <_scanf_float+0x34c>
 8109b3e:	2945      	cmp	r1, #69	; 0x45
 8109b40:	d00a      	beq.n	8109b58 <_scanf_float+0x34c>
 8109b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b46:	463a      	mov	r2, r7
 8109b48:	4640      	mov	r0, r8
 8109b4a:	4798      	blx	r3
 8109b4c:	6923      	ldr	r3, [r4, #16]
 8109b4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8109b52:	3b01      	subs	r3, #1
 8109b54:	1eb5      	subs	r5, r6, #2
 8109b56:	6123      	str	r3, [r4, #16]
 8109b58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8109b5c:	463a      	mov	r2, r7
 8109b5e:	4640      	mov	r0, r8
 8109b60:	4798      	blx	r3
 8109b62:	462e      	mov	r6, r5
 8109b64:	6825      	ldr	r5, [r4, #0]
 8109b66:	f015 0510 	ands.w	r5, r5, #16
 8109b6a:	d158      	bne.n	8109c1e <_scanf_float+0x412>
 8109b6c:	7035      	strb	r5, [r6, #0]
 8109b6e:	6823      	ldr	r3, [r4, #0]
 8109b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8109b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109b78:	d11c      	bne.n	8109bb4 <_scanf_float+0x3a8>
 8109b7a:	9b01      	ldr	r3, [sp, #4]
 8109b7c:	454b      	cmp	r3, r9
 8109b7e:	eba3 0209 	sub.w	r2, r3, r9
 8109b82:	d124      	bne.n	8109bce <_scanf_float+0x3c2>
 8109b84:	2200      	movs	r2, #0
 8109b86:	4659      	mov	r1, fp
 8109b88:	4640      	mov	r0, r8
 8109b8a:	f002 fc31 	bl	810c3f0 <_strtod_r>
 8109b8e:	9b03      	ldr	r3, [sp, #12]
 8109b90:	6821      	ldr	r1, [r4, #0]
 8109b92:	681b      	ldr	r3, [r3, #0]
 8109b94:	f011 0f02 	tst.w	r1, #2
 8109b98:	ec57 6b10 	vmov	r6, r7, d0
 8109b9c:	f103 0204 	add.w	r2, r3, #4
 8109ba0:	d020      	beq.n	8109be4 <_scanf_float+0x3d8>
 8109ba2:	9903      	ldr	r1, [sp, #12]
 8109ba4:	600a      	str	r2, [r1, #0]
 8109ba6:	681b      	ldr	r3, [r3, #0]
 8109ba8:	e9c3 6700 	strd	r6, r7, [r3]
 8109bac:	68e3      	ldr	r3, [r4, #12]
 8109bae:	3301      	adds	r3, #1
 8109bb0:	60e3      	str	r3, [r4, #12]
 8109bb2:	e66c      	b.n	810988e <_scanf_float+0x82>
 8109bb4:	9b04      	ldr	r3, [sp, #16]
 8109bb6:	2b00      	cmp	r3, #0
 8109bb8:	d0e4      	beq.n	8109b84 <_scanf_float+0x378>
 8109bba:	9905      	ldr	r1, [sp, #20]
 8109bbc:	230a      	movs	r3, #10
 8109bbe:	462a      	mov	r2, r5
 8109bc0:	3101      	adds	r1, #1
 8109bc2:	4640      	mov	r0, r8
 8109bc4:	f002 fc9c 	bl	810c500 <_strtol_r>
 8109bc8:	9b04      	ldr	r3, [sp, #16]
 8109bca:	9e05      	ldr	r6, [sp, #20]
 8109bcc:	1ac2      	subs	r2, r0, r3
 8109bce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8109bd2:	429e      	cmp	r6, r3
 8109bd4:	bf28      	it	cs
 8109bd6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8109bda:	4912      	ldr	r1, [pc, #72]	; (8109c24 <_scanf_float+0x418>)
 8109bdc:	4630      	mov	r0, r6
 8109bde:	f000 f8e7 	bl	8109db0 <siprintf>
 8109be2:	e7cf      	b.n	8109b84 <_scanf_float+0x378>
 8109be4:	f011 0f04 	tst.w	r1, #4
 8109be8:	9903      	ldr	r1, [sp, #12]
 8109bea:	600a      	str	r2, [r1, #0]
 8109bec:	d1db      	bne.n	8109ba6 <_scanf_float+0x39a>
 8109bee:	f8d3 8000 	ldr.w	r8, [r3]
 8109bf2:	ee10 2a10 	vmov	r2, s0
 8109bf6:	ee10 0a10 	vmov	r0, s0
 8109bfa:	463b      	mov	r3, r7
 8109bfc:	4639      	mov	r1, r7
 8109bfe:	f7f7 f81d 	bl	8100c3c <__aeabi_dcmpun>
 8109c02:	b128      	cbz	r0, 8109c10 <_scanf_float+0x404>
 8109c04:	4808      	ldr	r0, [pc, #32]	; (8109c28 <_scanf_float+0x41c>)
 8109c06:	f000 f9b7 	bl	8109f78 <nanf>
 8109c0a:	ed88 0a00 	vstr	s0, [r8]
 8109c0e:	e7cd      	b.n	8109bac <_scanf_float+0x3a0>
 8109c10:	4630      	mov	r0, r6
 8109c12:	4639      	mov	r1, r7
 8109c14:	f7f7 f870 	bl	8100cf8 <__aeabi_d2f>
 8109c18:	f8c8 0000 	str.w	r0, [r8]
 8109c1c:	e7c6      	b.n	8109bac <_scanf_float+0x3a0>
 8109c1e:	2500      	movs	r5, #0
 8109c20:	e635      	b.n	810988e <_scanf_float+0x82>
 8109c22:	bf00      	nop
 8109c24:	08122950 	.word	0x08122950
 8109c28:	08122ce5 	.word	0x08122ce5

08109c2c <std>:
 8109c2c:	2300      	movs	r3, #0
 8109c2e:	b510      	push	{r4, lr}
 8109c30:	4604      	mov	r4, r0
 8109c32:	e9c0 3300 	strd	r3, r3, [r0]
 8109c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8109c3a:	6083      	str	r3, [r0, #8]
 8109c3c:	8181      	strh	r1, [r0, #12]
 8109c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8109c40:	81c2      	strh	r2, [r0, #14]
 8109c42:	6183      	str	r3, [r0, #24]
 8109c44:	4619      	mov	r1, r3
 8109c46:	2208      	movs	r2, #8
 8109c48:	305c      	adds	r0, #92	; 0x5c
 8109c4a:	f000 f914 	bl	8109e76 <memset>
 8109c4e:	4b0d      	ldr	r3, [pc, #52]	; (8109c84 <std+0x58>)
 8109c50:	6263      	str	r3, [r4, #36]	; 0x24
 8109c52:	4b0d      	ldr	r3, [pc, #52]	; (8109c88 <std+0x5c>)
 8109c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8109c56:	4b0d      	ldr	r3, [pc, #52]	; (8109c8c <std+0x60>)
 8109c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8109c5a:	4b0d      	ldr	r3, [pc, #52]	; (8109c90 <std+0x64>)
 8109c5c:	6323      	str	r3, [r4, #48]	; 0x30
 8109c5e:	4b0d      	ldr	r3, [pc, #52]	; (8109c94 <std+0x68>)
 8109c60:	6224      	str	r4, [r4, #32]
 8109c62:	429c      	cmp	r4, r3
 8109c64:	d006      	beq.n	8109c74 <std+0x48>
 8109c66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8109c6a:	4294      	cmp	r4, r2
 8109c6c:	d002      	beq.n	8109c74 <std+0x48>
 8109c6e:	33d0      	adds	r3, #208	; 0xd0
 8109c70:	429c      	cmp	r4, r3
 8109c72:	d105      	bne.n	8109c80 <std+0x54>
 8109c74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8109c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109c7c:	f000 b978 	b.w	8109f70 <__retarget_lock_init_recursive>
 8109c80:	bd10      	pop	{r4, pc}
 8109c82:	bf00      	nop
 8109c84:	08109df1 	.word	0x08109df1
 8109c88:	08109e13 	.word	0x08109e13
 8109c8c:	08109e4b 	.word	0x08109e4b
 8109c90:	08109e6f 	.word	0x08109e6f
 8109c94:	10018994 	.word	0x10018994

08109c98 <stdio_exit_handler>:
 8109c98:	4a02      	ldr	r2, [pc, #8]	; (8109ca4 <stdio_exit_handler+0xc>)
 8109c9a:	4903      	ldr	r1, [pc, #12]	; (8109ca8 <stdio_exit_handler+0x10>)
 8109c9c:	4803      	ldr	r0, [pc, #12]	; (8109cac <stdio_exit_handler+0x14>)
 8109c9e:	f000 b869 	b.w	8109d74 <_fwalk_sglue>
 8109ca2:	bf00      	nop
 8109ca4:	10000080 	.word	0x10000080
 8109ca8:	0810c8c1 	.word	0x0810c8c1
 8109cac:	1000008c 	.word	0x1000008c

08109cb0 <cleanup_stdio>:
 8109cb0:	6841      	ldr	r1, [r0, #4]
 8109cb2:	4b0c      	ldr	r3, [pc, #48]	; (8109ce4 <cleanup_stdio+0x34>)
 8109cb4:	4299      	cmp	r1, r3
 8109cb6:	b510      	push	{r4, lr}
 8109cb8:	4604      	mov	r4, r0
 8109cba:	d001      	beq.n	8109cc0 <cleanup_stdio+0x10>
 8109cbc:	f002 fe00 	bl	810c8c0 <_fflush_r>
 8109cc0:	68a1      	ldr	r1, [r4, #8]
 8109cc2:	4b09      	ldr	r3, [pc, #36]	; (8109ce8 <cleanup_stdio+0x38>)
 8109cc4:	4299      	cmp	r1, r3
 8109cc6:	d002      	beq.n	8109cce <cleanup_stdio+0x1e>
 8109cc8:	4620      	mov	r0, r4
 8109cca:	f002 fdf9 	bl	810c8c0 <_fflush_r>
 8109cce:	68e1      	ldr	r1, [r4, #12]
 8109cd0:	4b06      	ldr	r3, [pc, #24]	; (8109cec <cleanup_stdio+0x3c>)
 8109cd2:	4299      	cmp	r1, r3
 8109cd4:	d004      	beq.n	8109ce0 <cleanup_stdio+0x30>
 8109cd6:	4620      	mov	r0, r4
 8109cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109cdc:	f002 bdf0 	b.w	810c8c0 <_fflush_r>
 8109ce0:	bd10      	pop	{r4, pc}
 8109ce2:	bf00      	nop
 8109ce4:	10018994 	.word	0x10018994
 8109ce8:	100189fc 	.word	0x100189fc
 8109cec:	10018a64 	.word	0x10018a64

08109cf0 <global_stdio_init.part.0>:
 8109cf0:	b510      	push	{r4, lr}
 8109cf2:	4b0b      	ldr	r3, [pc, #44]	; (8109d20 <global_stdio_init.part.0+0x30>)
 8109cf4:	4c0b      	ldr	r4, [pc, #44]	; (8109d24 <global_stdio_init.part.0+0x34>)
 8109cf6:	4a0c      	ldr	r2, [pc, #48]	; (8109d28 <global_stdio_init.part.0+0x38>)
 8109cf8:	601a      	str	r2, [r3, #0]
 8109cfa:	4620      	mov	r0, r4
 8109cfc:	2200      	movs	r2, #0
 8109cfe:	2104      	movs	r1, #4
 8109d00:	f7ff ff94 	bl	8109c2c <std>
 8109d04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8109d08:	2201      	movs	r2, #1
 8109d0a:	2109      	movs	r1, #9
 8109d0c:	f7ff ff8e 	bl	8109c2c <std>
 8109d10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8109d14:	2202      	movs	r2, #2
 8109d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109d1a:	2112      	movs	r1, #18
 8109d1c:	f7ff bf86 	b.w	8109c2c <std>
 8109d20:	10018acc 	.word	0x10018acc
 8109d24:	10018994 	.word	0x10018994
 8109d28:	08109c99 	.word	0x08109c99

08109d2c <__sfp_lock_acquire>:
 8109d2c:	4801      	ldr	r0, [pc, #4]	; (8109d34 <__sfp_lock_acquire+0x8>)
 8109d2e:	f000 b920 	b.w	8109f72 <__retarget_lock_acquire_recursive>
 8109d32:	bf00      	nop
 8109d34:	10018ad5 	.word	0x10018ad5

08109d38 <__sfp_lock_release>:
 8109d38:	4801      	ldr	r0, [pc, #4]	; (8109d40 <__sfp_lock_release+0x8>)
 8109d3a:	f000 b91b 	b.w	8109f74 <__retarget_lock_release_recursive>
 8109d3e:	bf00      	nop
 8109d40:	10018ad5 	.word	0x10018ad5

08109d44 <__sinit>:
 8109d44:	b510      	push	{r4, lr}
 8109d46:	4604      	mov	r4, r0
 8109d48:	f7ff fff0 	bl	8109d2c <__sfp_lock_acquire>
 8109d4c:	6a23      	ldr	r3, [r4, #32]
 8109d4e:	b11b      	cbz	r3, 8109d58 <__sinit+0x14>
 8109d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109d54:	f7ff bff0 	b.w	8109d38 <__sfp_lock_release>
 8109d58:	4b04      	ldr	r3, [pc, #16]	; (8109d6c <__sinit+0x28>)
 8109d5a:	6223      	str	r3, [r4, #32]
 8109d5c:	4b04      	ldr	r3, [pc, #16]	; (8109d70 <__sinit+0x2c>)
 8109d5e:	681b      	ldr	r3, [r3, #0]
 8109d60:	2b00      	cmp	r3, #0
 8109d62:	d1f5      	bne.n	8109d50 <__sinit+0xc>
 8109d64:	f7ff ffc4 	bl	8109cf0 <global_stdio_init.part.0>
 8109d68:	e7f2      	b.n	8109d50 <__sinit+0xc>
 8109d6a:	bf00      	nop
 8109d6c:	08109cb1 	.word	0x08109cb1
 8109d70:	10018acc 	.word	0x10018acc

08109d74 <_fwalk_sglue>:
 8109d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109d78:	4607      	mov	r7, r0
 8109d7a:	4688      	mov	r8, r1
 8109d7c:	4614      	mov	r4, r2
 8109d7e:	2600      	movs	r6, #0
 8109d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8109d84:	f1b9 0901 	subs.w	r9, r9, #1
 8109d88:	d505      	bpl.n	8109d96 <_fwalk_sglue+0x22>
 8109d8a:	6824      	ldr	r4, [r4, #0]
 8109d8c:	2c00      	cmp	r4, #0
 8109d8e:	d1f7      	bne.n	8109d80 <_fwalk_sglue+0xc>
 8109d90:	4630      	mov	r0, r6
 8109d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109d96:	89ab      	ldrh	r3, [r5, #12]
 8109d98:	2b01      	cmp	r3, #1
 8109d9a:	d907      	bls.n	8109dac <_fwalk_sglue+0x38>
 8109d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8109da0:	3301      	adds	r3, #1
 8109da2:	d003      	beq.n	8109dac <_fwalk_sglue+0x38>
 8109da4:	4629      	mov	r1, r5
 8109da6:	4638      	mov	r0, r7
 8109da8:	47c0      	blx	r8
 8109daa:	4306      	orrs	r6, r0
 8109dac:	3568      	adds	r5, #104	; 0x68
 8109dae:	e7e9      	b.n	8109d84 <_fwalk_sglue+0x10>

08109db0 <siprintf>:
 8109db0:	b40e      	push	{r1, r2, r3}
 8109db2:	b500      	push	{lr}
 8109db4:	b09c      	sub	sp, #112	; 0x70
 8109db6:	ab1d      	add	r3, sp, #116	; 0x74
 8109db8:	9002      	str	r0, [sp, #8]
 8109dba:	9006      	str	r0, [sp, #24]
 8109dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109dc0:	4809      	ldr	r0, [pc, #36]	; (8109de8 <siprintf+0x38>)
 8109dc2:	9107      	str	r1, [sp, #28]
 8109dc4:	9104      	str	r1, [sp, #16]
 8109dc6:	4909      	ldr	r1, [pc, #36]	; (8109dec <siprintf+0x3c>)
 8109dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8109dcc:	9105      	str	r1, [sp, #20]
 8109dce:	6800      	ldr	r0, [r0, #0]
 8109dd0:	9301      	str	r3, [sp, #4]
 8109dd2:	a902      	add	r1, sp, #8
 8109dd4:	f002 fbf0 	bl	810c5b8 <_svfiprintf_r>
 8109dd8:	9b02      	ldr	r3, [sp, #8]
 8109dda:	2200      	movs	r2, #0
 8109ddc:	701a      	strb	r2, [r3, #0]
 8109dde:	b01c      	add	sp, #112	; 0x70
 8109de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8109de4:	b003      	add	sp, #12
 8109de6:	4770      	bx	lr
 8109de8:	100000d8 	.word	0x100000d8
 8109dec:	ffff0208 	.word	0xffff0208

08109df0 <__sread>:
 8109df0:	b510      	push	{r4, lr}
 8109df2:	460c      	mov	r4, r1
 8109df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109df8:	f000 f86c 	bl	8109ed4 <_read_r>
 8109dfc:	2800      	cmp	r0, #0
 8109dfe:	bfab      	itete	ge
 8109e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8109e02:	89a3      	ldrhlt	r3, [r4, #12]
 8109e04:	181b      	addge	r3, r3, r0
 8109e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8109e0a:	bfac      	ite	ge
 8109e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8109e0e:	81a3      	strhlt	r3, [r4, #12]
 8109e10:	bd10      	pop	{r4, pc}

08109e12 <__swrite>:
 8109e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109e16:	461f      	mov	r7, r3
 8109e18:	898b      	ldrh	r3, [r1, #12]
 8109e1a:	05db      	lsls	r3, r3, #23
 8109e1c:	4605      	mov	r5, r0
 8109e1e:	460c      	mov	r4, r1
 8109e20:	4616      	mov	r6, r2
 8109e22:	d505      	bpl.n	8109e30 <__swrite+0x1e>
 8109e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109e28:	2302      	movs	r3, #2
 8109e2a:	2200      	movs	r2, #0
 8109e2c:	f000 f840 	bl	8109eb0 <_lseek_r>
 8109e30:	89a3      	ldrh	r3, [r4, #12]
 8109e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8109e3a:	81a3      	strh	r3, [r4, #12]
 8109e3c:	4632      	mov	r2, r6
 8109e3e:	463b      	mov	r3, r7
 8109e40:	4628      	mov	r0, r5
 8109e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8109e46:	f000 b857 	b.w	8109ef8 <_write_r>

08109e4a <__sseek>:
 8109e4a:	b510      	push	{r4, lr}
 8109e4c:	460c      	mov	r4, r1
 8109e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109e52:	f000 f82d 	bl	8109eb0 <_lseek_r>
 8109e56:	1c43      	adds	r3, r0, #1
 8109e58:	89a3      	ldrh	r3, [r4, #12]
 8109e5a:	bf15      	itete	ne
 8109e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8109e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8109e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8109e66:	81a3      	strheq	r3, [r4, #12]
 8109e68:	bf18      	it	ne
 8109e6a:	81a3      	strhne	r3, [r4, #12]
 8109e6c:	bd10      	pop	{r4, pc}

08109e6e <__sclose>:
 8109e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109e72:	f000 b80d 	b.w	8109e90 <_close_r>

08109e76 <memset>:
 8109e76:	4402      	add	r2, r0
 8109e78:	4603      	mov	r3, r0
 8109e7a:	4293      	cmp	r3, r2
 8109e7c:	d100      	bne.n	8109e80 <memset+0xa>
 8109e7e:	4770      	bx	lr
 8109e80:	f803 1b01 	strb.w	r1, [r3], #1
 8109e84:	e7f9      	b.n	8109e7a <memset+0x4>
	...

08109e88 <_localeconv_r>:
 8109e88:	4800      	ldr	r0, [pc, #0]	; (8109e8c <_localeconv_r+0x4>)
 8109e8a:	4770      	bx	lr
 8109e8c:	100001cc 	.word	0x100001cc

08109e90 <_close_r>:
 8109e90:	b538      	push	{r3, r4, r5, lr}
 8109e92:	4d06      	ldr	r5, [pc, #24]	; (8109eac <_close_r+0x1c>)
 8109e94:	2300      	movs	r3, #0
 8109e96:	4604      	mov	r4, r0
 8109e98:	4608      	mov	r0, r1
 8109e9a:	602b      	str	r3, [r5, #0]
 8109e9c:	f7f8 fda2 	bl	81029e4 <_close>
 8109ea0:	1c43      	adds	r3, r0, #1
 8109ea2:	d102      	bne.n	8109eaa <_close_r+0x1a>
 8109ea4:	682b      	ldr	r3, [r5, #0]
 8109ea6:	b103      	cbz	r3, 8109eaa <_close_r+0x1a>
 8109ea8:	6023      	str	r3, [r4, #0]
 8109eaa:	bd38      	pop	{r3, r4, r5, pc}
 8109eac:	10018ad0 	.word	0x10018ad0

08109eb0 <_lseek_r>:
 8109eb0:	b538      	push	{r3, r4, r5, lr}
 8109eb2:	4d07      	ldr	r5, [pc, #28]	; (8109ed0 <_lseek_r+0x20>)
 8109eb4:	4604      	mov	r4, r0
 8109eb6:	4608      	mov	r0, r1
 8109eb8:	4611      	mov	r1, r2
 8109eba:	2200      	movs	r2, #0
 8109ebc:	602a      	str	r2, [r5, #0]
 8109ebe:	461a      	mov	r2, r3
 8109ec0:	f7f8 fd9c 	bl	81029fc <_lseek>
 8109ec4:	1c43      	adds	r3, r0, #1
 8109ec6:	d102      	bne.n	8109ece <_lseek_r+0x1e>
 8109ec8:	682b      	ldr	r3, [r5, #0]
 8109eca:	b103      	cbz	r3, 8109ece <_lseek_r+0x1e>
 8109ecc:	6023      	str	r3, [r4, #0]
 8109ece:	bd38      	pop	{r3, r4, r5, pc}
 8109ed0:	10018ad0 	.word	0x10018ad0

08109ed4 <_read_r>:
 8109ed4:	b538      	push	{r3, r4, r5, lr}
 8109ed6:	4d07      	ldr	r5, [pc, #28]	; (8109ef4 <_read_r+0x20>)
 8109ed8:	4604      	mov	r4, r0
 8109eda:	4608      	mov	r0, r1
 8109edc:	4611      	mov	r1, r2
 8109ede:	2200      	movs	r2, #0
 8109ee0:	602a      	str	r2, [r5, #0]
 8109ee2:	461a      	mov	r2, r3
 8109ee4:	f7f8 fd62 	bl	81029ac <_read>
 8109ee8:	1c43      	adds	r3, r0, #1
 8109eea:	d102      	bne.n	8109ef2 <_read_r+0x1e>
 8109eec:	682b      	ldr	r3, [r5, #0]
 8109eee:	b103      	cbz	r3, 8109ef2 <_read_r+0x1e>
 8109ef0:	6023      	str	r3, [r4, #0]
 8109ef2:	bd38      	pop	{r3, r4, r5, pc}
 8109ef4:	10018ad0 	.word	0x10018ad0

08109ef8 <_write_r>:
 8109ef8:	b538      	push	{r3, r4, r5, lr}
 8109efa:	4d07      	ldr	r5, [pc, #28]	; (8109f18 <_write_r+0x20>)
 8109efc:	4604      	mov	r4, r0
 8109efe:	4608      	mov	r0, r1
 8109f00:	4611      	mov	r1, r2
 8109f02:	2200      	movs	r2, #0
 8109f04:	602a      	str	r2, [r5, #0]
 8109f06:	461a      	mov	r2, r3
 8109f08:	f7f8 fd5e 	bl	81029c8 <_write>
 8109f0c:	1c43      	adds	r3, r0, #1
 8109f0e:	d102      	bne.n	8109f16 <_write_r+0x1e>
 8109f10:	682b      	ldr	r3, [r5, #0]
 8109f12:	b103      	cbz	r3, 8109f16 <_write_r+0x1e>
 8109f14:	6023      	str	r3, [r4, #0]
 8109f16:	bd38      	pop	{r3, r4, r5, pc}
 8109f18:	10018ad0 	.word	0x10018ad0

08109f1c <__errno>:
 8109f1c:	4b01      	ldr	r3, [pc, #4]	; (8109f24 <__errno+0x8>)
 8109f1e:	6818      	ldr	r0, [r3, #0]
 8109f20:	4770      	bx	lr
 8109f22:	bf00      	nop
 8109f24:	100000d8 	.word	0x100000d8

08109f28 <__libc_init_array>:
 8109f28:	b570      	push	{r4, r5, r6, lr}
 8109f2a:	4d0d      	ldr	r5, [pc, #52]	; (8109f60 <__libc_init_array+0x38>)
 8109f2c:	4c0d      	ldr	r4, [pc, #52]	; (8109f64 <__libc_init_array+0x3c>)
 8109f2e:	1b64      	subs	r4, r4, r5
 8109f30:	10a4      	asrs	r4, r4, #2
 8109f32:	2600      	movs	r6, #0
 8109f34:	42a6      	cmp	r6, r4
 8109f36:	d109      	bne.n	8109f4c <__libc_init_array+0x24>
 8109f38:	4d0b      	ldr	r5, [pc, #44]	; (8109f68 <__libc_init_array+0x40>)
 8109f3a:	4c0c      	ldr	r4, [pc, #48]	; (8109f6c <__libc_init_array+0x44>)
 8109f3c:	f004 fdfc 	bl	810eb38 <_init>
 8109f40:	1b64      	subs	r4, r4, r5
 8109f42:	10a4      	asrs	r4, r4, #2
 8109f44:	2600      	movs	r6, #0
 8109f46:	42a6      	cmp	r6, r4
 8109f48:	d105      	bne.n	8109f56 <__libc_init_array+0x2e>
 8109f4a:	bd70      	pop	{r4, r5, r6, pc}
 8109f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8109f50:	4798      	blx	r3
 8109f52:	3601      	adds	r6, #1
 8109f54:	e7ee      	b.n	8109f34 <__libc_init_array+0xc>
 8109f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8109f5a:	4798      	blx	r3
 8109f5c:	3601      	adds	r6, #1
 8109f5e:	e7f2      	b.n	8109f46 <__libc_init_array+0x1e>
 8109f60:	08123138 	.word	0x08123138
 8109f64:	08123138 	.word	0x08123138
 8109f68:	08123138 	.word	0x08123138
 8109f6c:	0812313c 	.word	0x0812313c

08109f70 <__retarget_lock_init_recursive>:
 8109f70:	4770      	bx	lr

08109f72 <__retarget_lock_acquire_recursive>:
 8109f72:	4770      	bx	lr

08109f74 <__retarget_lock_release_recursive>:
 8109f74:	4770      	bx	lr
	...

08109f78 <nanf>:
 8109f78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8109f80 <nanf+0x8>
 8109f7c:	4770      	bx	lr
 8109f7e:	bf00      	nop
 8109f80:	7fc00000 	.word	0x7fc00000

08109f84 <quorem>:
 8109f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109f88:	6903      	ldr	r3, [r0, #16]
 8109f8a:	690c      	ldr	r4, [r1, #16]
 8109f8c:	42a3      	cmp	r3, r4
 8109f8e:	4607      	mov	r7, r0
 8109f90:	db7e      	blt.n	810a090 <quorem+0x10c>
 8109f92:	3c01      	subs	r4, #1
 8109f94:	f101 0814 	add.w	r8, r1, #20
 8109f98:	f100 0514 	add.w	r5, r0, #20
 8109f9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109fa0:	9301      	str	r3, [sp, #4]
 8109fa2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8109fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109faa:	3301      	adds	r3, #1
 8109fac:	429a      	cmp	r2, r3
 8109fae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8109fb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8109fb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8109fba:	d331      	bcc.n	810a020 <quorem+0x9c>
 8109fbc:	f04f 0e00 	mov.w	lr, #0
 8109fc0:	4640      	mov	r0, r8
 8109fc2:	46ac      	mov	ip, r5
 8109fc4:	46f2      	mov	sl, lr
 8109fc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8109fca:	b293      	uxth	r3, r2
 8109fcc:	fb06 e303 	mla	r3, r6, r3, lr
 8109fd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8109fd4:	0c1a      	lsrs	r2, r3, #16
 8109fd6:	b29b      	uxth	r3, r3
 8109fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8109fdc:	f8dc a000 	ldr.w	sl, [ip]
 8109fe0:	fa13 f38a 	uxtah	r3, r3, sl
 8109fe4:	fb06 220e 	mla	r2, r6, lr, r2
 8109fe8:	9300      	str	r3, [sp, #0]
 8109fea:	9b00      	ldr	r3, [sp, #0]
 8109fec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8109ff0:	b292      	uxth	r2, r2
 8109ff2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8109ff6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109ffa:	f8bd 3000 	ldrh.w	r3, [sp]
 8109ffe:	4581      	cmp	r9, r0
 810a000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a004:	f84c 3b04 	str.w	r3, [ip], #4
 810a008:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810a00c:	d2db      	bcs.n	8109fc6 <quorem+0x42>
 810a00e:	f855 300b 	ldr.w	r3, [r5, fp]
 810a012:	b92b      	cbnz	r3, 810a020 <quorem+0x9c>
 810a014:	9b01      	ldr	r3, [sp, #4]
 810a016:	3b04      	subs	r3, #4
 810a018:	429d      	cmp	r5, r3
 810a01a:	461a      	mov	r2, r3
 810a01c:	d32c      	bcc.n	810a078 <quorem+0xf4>
 810a01e:	613c      	str	r4, [r7, #16]
 810a020:	4638      	mov	r0, r7
 810a022:	f001 f9f1 	bl	810b408 <__mcmp>
 810a026:	2800      	cmp	r0, #0
 810a028:	db22      	blt.n	810a070 <quorem+0xec>
 810a02a:	3601      	adds	r6, #1
 810a02c:	4629      	mov	r1, r5
 810a02e:	2000      	movs	r0, #0
 810a030:	f858 2b04 	ldr.w	r2, [r8], #4
 810a034:	f8d1 c000 	ldr.w	ip, [r1]
 810a038:	b293      	uxth	r3, r2
 810a03a:	1ac3      	subs	r3, r0, r3
 810a03c:	0c12      	lsrs	r2, r2, #16
 810a03e:	fa13 f38c 	uxtah	r3, r3, ip
 810a042:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810a046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810a04a:	b29b      	uxth	r3, r3
 810a04c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a050:	45c1      	cmp	r9, r8
 810a052:	f841 3b04 	str.w	r3, [r1], #4
 810a056:	ea4f 4022 	mov.w	r0, r2, asr #16
 810a05a:	d2e9      	bcs.n	810a030 <quorem+0xac>
 810a05c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810a060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810a064:	b922      	cbnz	r2, 810a070 <quorem+0xec>
 810a066:	3b04      	subs	r3, #4
 810a068:	429d      	cmp	r5, r3
 810a06a:	461a      	mov	r2, r3
 810a06c:	d30a      	bcc.n	810a084 <quorem+0x100>
 810a06e:	613c      	str	r4, [r7, #16]
 810a070:	4630      	mov	r0, r6
 810a072:	b003      	add	sp, #12
 810a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a078:	6812      	ldr	r2, [r2, #0]
 810a07a:	3b04      	subs	r3, #4
 810a07c:	2a00      	cmp	r2, #0
 810a07e:	d1ce      	bne.n	810a01e <quorem+0x9a>
 810a080:	3c01      	subs	r4, #1
 810a082:	e7c9      	b.n	810a018 <quorem+0x94>
 810a084:	6812      	ldr	r2, [r2, #0]
 810a086:	3b04      	subs	r3, #4
 810a088:	2a00      	cmp	r2, #0
 810a08a:	d1f0      	bne.n	810a06e <quorem+0xea>
 810a08c:	3c01      	subs	r4, #1
 810a08e:	e7eb      	b.n	810a068 <quorem+0xe4>
 810a090:	2000      	movs	r0, #0
 810a092:	e7ee      	b.n	810a072 <quorem+0xee>
 810a094:	0000      	movs	r0, r0
	...

0810a098 <_dtoa_r>:
 810a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a09c:	ed2d 8b04 	vpush	{d8-d9}
 810a0a0:	69c5      	ldr	r5, [r0, #28]
 810a0a2:	b093      	sub	sp, #76	; 0x4c
 810a0a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 810a0a8:	ec57 6b10 	vmov	r6, r7, d0
 810a0ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810a0b0:	9107      	str	r1, [sp, #28]
 810a0b2:	4604      	mov	r4, r0
 810a0b4:	920a      	str	r2, [sp, #40]	; 0x28
 810a0b6:	930d      	str	r3, [sp, #52]	; 0x34
 810a0b8:	b975      	cbnz	r5, 810a0d8 <_dtoa_r+0x40>
 810a0ba:	2010      	movs	r0, #16
 810a0bc:	f000 fe2a 	bl	810ad14 <malloc>
 810a0c0:	4602      	mov	r2, r0
 810a0c2:	61e0      	str	r0, [r4, #28]
 810a0c4:	b920      	cbnz	r0, 810a0d0 <_dtoa_r+0x38>
 810a0c6:	4bae      	ldr	r3, [pc, #696]	; (810a380 <_dtoa_r+0x2e8>)
 810a0c8:	21ef      	movs	r1, #239	; 0xef
 810a0ca:	48ae      	ldr	r0, [pc, #696]	; (810a384 <_dtoa_r+0x2ec>)
 810a0cc:	f002 fc74 	bl	810c9b8 <__assert_func>
 810a0d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810a0d4:	6005      	str	r5, [r0, #0]
 810a0d6:	60c5      	str	r5, [r0, #12]
 810a0d8:	69e3      	ldr	r3, [r4, #28]
 810a0da:	6819      	ldr	r1, [r3, #0]
 810a0dc:	b151      	cbz	r1, 810a0f4 <_dtoa_r+0x5c>
 810a0de:	685a      	ldr	r2, [r3, #4]
 810a0e0:	604a      	str	r2, [r1, #4]
 810a0e2:	2301      	movs	r3, #1
 810a0e4:	4093      	lsls	r3, r2
 810a0e6:	608b      	str	r3, [r1, #8]
 810a0e8:	4620      	mov	r0, r4
 810a0ea:	f000 ff07 	bl	810aefc <_Bfree>
 810a0ee:	69e3      	ldr	r3, [r4, #28]
 810a0f0:	2200      	movs	r2, #0
 810a0f2:	601a      	str	r2, [r3, #0]
 810a0f4:	1e3b      	subs	r3, r7, #0
 810a0f6:	bfbb      	ittet	lt
 810a0f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810a0fc:	9303      	strlt	r3, [sp, #12]
 810a0fe:	2300      	movge	r3, #0
 810a100:	2201      	movlt	r2, #1
 810a102:	bfac      	ite	ge
 810a104:	f8c8 3000 	strge.w	r3, [r8]
 810a108:	f8c8 2000 	strlt.w	r2, [r8]
 810a10c:	4b9e      	ldr	r3, [pc, #632]	; (810a388 <_dtoa_r+0x2f0>)
 810a10e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810a112:	ea33 0308 	bics.w	r3, r3, r8
 810a116:	d11b      	bne.n	810a150 <_dtoa_r+0xb8>
 810a118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a11a:	f242 730f 	movw	r3, #9999	; 0x270f
 810a11e:	6013      	str	r3, [r2, #0]
 810a120:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810a124:	4333      	orrs	r3, r6
 810a126:	f000 8593 	beq.w	810ac50 <_dtoa_r+0xbb8>
 810a12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a12c:	b963      	cbnz	r3, 810a148 <_dtoa_r+0xb0>
 810a12e:	4b97      	ldr	r3, [pc, #604]	; (810a38c <_dtoa_r+0x2f4>)
 810a130:	e027      	b.n	810a182 <_dtoa_r+0xea>
 810a132:	4b97      	ldr	r3, [pc, #604]	; (810a390 <_dtoa_r+0x2f8>)
 810a134:	9300      	str	r3, [sp, #0]
 810a136:	3308      	adds	r3, #8
 810a138:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810a13a:	6013      	str	r3, [r2, #0]
 810a13c:	9800      	ldr	r0, [sp, #0]
 810a13e:	b013      	add	sp, #76	; 0x4c
 810a140:	ecbd 8b04 	vpop	{d8-d9}
 810a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a148:	4b90      	ldr	r3, [pc, #576]	; (810a38c <_dtoa_r+0x2f4>)
 810a14a:	9300      	str	r3, [sp, #0]
 810a14c:	3303      	adds	r3, #3
 810a14e:	e7f3      	b.n	810a138 <_dtoa_r+0xa0>
 810a150:	ed9d 7b02 	vldr	d7, [sp, #8]
 810a154:	2200      	movs	r2, #0
 810a156:	ec51 0b17 	vmov	r0, r1, d7
 810a15a:	eeb0 8a47 	vmov.f32	s16, s14
 810a15e:	eef0 8a67 	vmov.f32	s17, s15
 810a162:	2300      	movs	r3, #0
 810a164:	f7f6 fd38 	bl	8100bd8 <__aeabi_dcmpeq>
 810a168:	4681      	mov	r9, r0
 810a16a:	b160      	cbz	r0, 810a186 <_dtoa_r+0xee>
 810a16c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a16e:	2301      	movs	r3, #1
 810a170:	6013      	str	r3, [r2, #0]
 810a172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a174:	2b00      	cmp	r3, #0
 810a176:	f000 8568 	beq.w	810ac4a <_dtoa_r+0xbb2>
 810a17a:	4b86      	ldr	r3, [pc, #536]	; (810a394 <_dtoa_r+0x2fc>)
 810a17c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810a17e:	6013      	str	r3, [r2, #0]
 810a180:	3b01      	subs	r3, #1
 810a182:	9300      	str	r3, [sp, #0]
 810a184:	e7da      	b.n	810a13c <_dtoa_r+0xa4>
 810a186:	aa10      	add	r2, sp, #64	; 0x40
 810a188:	a911      	add	r1, sp, #68	; 0x44
 810a18a:	4620      	mov	r0, r4
 810a18c:	eeb0 0a48 	vmov.f32	s0, s16
 810a190:	eef0 0a68 	vmov.f32	s1, s17
 810a194:	f001 fa4e 	bl	810b634 <__d2b>
 810a198:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810a19c:	4682      	mov	sl, r0
 810a19e:	2d00      	cmp	r5, #0
 810a1a0:	d07f      	beq.n	810a2a2 <_dtoa_r+0x20a>
 810a1a2:	ee18 3a90 	vmov	r3, s17
 810a1a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a1aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810a1ae:	ec51 0b18 	vmov	r0, r1, d8
 810a1b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810a1b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810a1ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810a1be:	4619      	mov	r1, r3
 810a1c0:	2200      	movs	r2, #0
 810a1c2:	4b75      	ldr	r3, [pc, #468]	; (810a398 <_dtoa_r+0x300>)
 810a1c4:	f7f6 f8e8 	bl	8100398 <__aeabi_dsub>
 810a1c8:	a367      	add	r3, pc, #412	; (adr r3, 810a368 <_dtoa_r+0x2d0>)
 810a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a1ce:	f7f6 fa9b 	bl	8100708 <__aeabi_dmul>
 810a1d2:	a367      	add	r3, pc, #412	; (adr r3, 810a370 <_dtoa_r+0x2d8>)
 810a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a1d8:	f7f6 f8e0 	bl	810039c <__adddf3>
 810a1dc:	4606      	mov	r6, r0
 810a1de:	4628      	mov	r0, r5
 810a1e0:	460f      	mov	r7, r1
 810a1e2:	f7f6 fa27 	bl	8100634 <__aeabi_i2d>
 810a1e6:	a364      	add	r3, pc, #400	; (adr r3, 810a378 <_dtoa_r+0x2e0>)
 810a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a1ec:	f7f6 fa8c 	bl	8100708 <__aeabi_dmul>
 810a1f0:	4602      	mov	r2, r0
 810a1f2:	460b      	mov	r3, r1
 810a1f4:	4630      	mov	r0, r6
 810a1f6:	4639      	mov	r1, r7
 810a1f8:	f7f6 f8d0 	bl	810039c <__adddf3>
 810a1fc:	4606      	mov	r6, r0
 810a1fe:	460f      	mov	r7, r1
 810a200:	f7f6 fd32 	bl	8100c68 <__aeabi_d2iz>
 810a204:	2200      	movs	r2, #0
 810a206:	4683      	mov	fp, r0
 810a208:	2300      	movs	r3, #0
 810a20a:	4630      	mov	r0, r6
 810a20c:	4639      	mov	r1, r7
 810a20e:	f7f6 fced 	bl	8100bec <__aeabi_dcmplt>
 810a212:	b148      	cbz	r0, 810a228 <_dtoa_r+0x190>
 810a214:	4658      	mov	r0, fp
 810a216:	f7f6 fa0d 	bl	8100634 <__aeabi_i2d>
 810a21a:	4632      	mov	r2, r6
 810a21c:	463b      	mov	r3, r7
 810a21e:	f7f6 fcdb 	bl	8100bd8 <__aeabi_dcmpeq>
 810a222:	b908      	cbnz	r0, 810a228 <_dtoa_r+0x190>
 810a224:	f10b 3bff 	add.w	fp, fp, #4294967295
 810a228:	f1bb 0f16 	cmp.w	fp, #22
 810a22c:	d857      	bhi.n	810a2de <_dtoa_r+0x246>
 810a22e:	4b5b      	ldr	r3, [pc, #364]	; (810a39c <_dtoa_r+0x304>)
 810a230:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a238:	ec51 0b18 	vmov	r0, r1, d8
 810a23c:	f7f6 fcd6 	bl	8100bec <__aeabi_dcmplt>
 810a240:	2800      	cmp	r0, #0
 810a242:	d04e      	beq.n	810a2e2 <_dtoa_r+0x24a>
 810a244:	f10b 3bff 	add.w	fp, fp, #4294967295
 810a248:	2300      	movs	r3, #0
 810a24a:	930c      	str	r3, [sp, #48]	; 0x30
 810a24c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810a24e:	1b5b      	subs	r3, r3, r5
 810a250:	1e5a      	subs	r2, r3, #1
 810a252:	bf45      	ittet	mi
 810a254:	f1c3 0301 	rsbmi	r3, r3, #1
 810a258:	9305      	strmi	r3, [sp, #20]
 810a25a:	2300      	movpl	r3, #0
 810a25c:	2300      	movmi	r3, #0
 810a25e:	9206      	str	r2, [sp, #24]
 810a260:	bf54      	ite	pl
 810a262:	9305      	strpl	r3, [sp, #20]
 810a264:	9306      	strmi	r3, [sp, #24]
 810a266:	f1bb 0f00 	cmp.w	fp, #0
 810a26a:	db3c      	blt.n	810a2e6 <_dtoa_r+0x24e>
 810a26c:	9b06      	ldr	r3, [sp, #24]
 810a26e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810a272:	445b      	add	r3, fp
 810a274:	9306      	str	r3, [sp, #24]
 810a276:	2300      	movs	r3, #0
 810a278:	9308      	str	r3, [sp, #32]
 810a27a:	9b07      	ldr	r3, [sp, #28]
 810a27c:	2b09      	cmp	r3, #9
 810a27e:	d868      	bhi.n	810a352 <_dtoa_r+0x2ba>
 810a280:	2b05      	cmp	r3, #5
 810a282:	bfc4      	itt	gt
 810a284:	3b04      	subgt	r3, #4
 810a286:	9307      	strgt	r3, [sp, #28]
 810a288:	9b07      	ldr	r3, [sp, #28]
 810a28a:	f1a3 0302 	sub.w	r3, r3, #2
 810a28e:	bfcc      	ite	gt
 810a290:	2500      	movgt	r5, #0
 810a292:	2501      	movle	r5, #1
 810a294:	2b03      	cmp	r3, #3
 810a296:	f200 8085 	bhi.w	810a3a4 <_dtoa_r+0x30c>
 810a29a:	e8df f003 	tbb	[pc, r3]
 810a29e:	3b2e      	.short	0x3b2e
 810a2a0:	5839      	.short	0x5839
 810a2a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810a2a6:	441d      	add	r5, r3
 810a2a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810a2ac:	2b20      	cmp	r3, #32
 810a2ae:	bfc1      	itttt	gt
 810a2b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810a2b4:	fa08 f803 	lslgt.w	r8, r8, r3
 810a2b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810a2bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 810a2c0:	bfd6      	itet	le
 810a2c2:	f1c3 0320 	rsble	r3, r3, #32
 810a2c6:	ea48 0003 	orrgt.w	r0, r8, r3
 810a2ca:	fa06 f003 	lslle.w	r0, r6, r3
 810a2ce:	f7f6 f9a1 	bl	8100614 <__aeabi_ui2d>
 810a2d2:	2201      	movs	r2, #1
 810a2d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810a2d8:	3d01      	subs	r5, #1
 810a2da:	920e      	str	r2, [sp, #56]	; 0x38
 810a2dc:	e76f      	b.n	810a1be <_dtoa_r+0x126>
 810a2de:	2301      	movs	r3, #1
 810a2e0:	e7b3      	b.n	810a24a <_dtoa_r+0x1b2>
 810a2e2:	900c      	str	r0, [sp, #48]	; 0x30
 810a2e4:	e7b2      	b.n	810a24c <_dtoa_r+0x1b4>
 810a2e6:	9b05      	ldr	r3, [sp, #20]
 810a2e8:	eba3 030b 	sub.w	r3, r3, fp
 810a2ec:	9305      	str	r3, [sp, #20]
 810a2ee:	f1cb 0300 	rsb	r3, fp, #0
 810a2f2:	9308      	str	r3, [sp, #32]
 810a2f4:	2300      	movs	r3, #0
 810a2f6:	930b      	str	r3, [sp, #44]	; 0x2c
 810a2f8:	e7bf      	b.n	810a27a <_dtoa_r+0x1e2>
 810a2fa:	2300      	movs	r3, #0
 810a2fc:	9309      	str	r3, [sp, #36]	; 0x24
 810a2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a300:	2b00      	cmp	r3, #0
 810a302:	dc52      	bgt.n	810a3aa <_dtoa_r+0x312>
 810a304:	2301      	movs	r3, #1
 810a306:	9301      	str	r3, [sp, #4]
 810a308:	9304      	str	r3, [sp, #16]
 810a30a:	461a      	mov	r2, r3
 810a30c:	920a      	str	r2, [sp, #40]	; 0x28
 810a30e:	e00b      	b.n	810a328 <_dtoa_r+0x290>
 810a310:	2301      	movs	r3, #1
 810a312:	e7f3      	b.n	810a2fc <_dtoa_r+0x264>
 810a314:	2300      	movs	r3, #0
 810a316:	9309      	str	r3, [sp, #36]	; 0x24
 810a318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a31a:	445b      	add	r3, fp
 810a31c:	9301      	str	r3, [sp, #4]
 810a31e:	3301      	adds	r3, #1
 810a320:	2b01      	cmp	r3, #1
 810a322:	9304      	str	r3, [sp, #16]
 810a324:	bfb8      	it	lt
 810a326:	2301      	movlt	r3, #1
 810a328:	69e0      	ldr	r0, [r4, #28]
 810a32a:	2100      	movs	r1, #0
 810a32c:	2204      	movs	r2, #4
 810a32e:	f102 0614 	add.w	r6, r2, #20
 810a332:	429e      	cmp	r6, r3
 810a334:	d93d      	bls.n	810a3b2 <_dtoa_r+0x31a>
 810a336:	6041      	str	r1, [r0, #4]
 810a338:	4620      	mov	r0, r4
 810a33a:	f000 fd9f 	bl	810ae7c <_Balloc>
 810a33e:	9000      	str	r0, [sp, #0]
 810a340:	2800      	cmp	r0, #0
 810a342:	d139      	bne.n	810a3b8 <_dtoa_r+0x320>
 810a344:	4b16      	ldr	r3, [pc, #88]	; (810a3a0 <_dtoa_r+0x308>)
 810a346:	4602      	mov	r2, r0
 810a348:	f240 11af 	movw	r1, #431	; 0x1af
 810a34c:	e6bd      	b.n	810a0ca <_dtoa_r+0x32>
 810a34e:	2301      	movs	r3, #1
 810a350:	e7e1      	b.n	810a316 <_dtoa_r+0x27e>
 810a352:	2501      	movs	r5, #1
 810a354:	2300      	movs	r3, #0
 810a356:	9307      	str	r3, [sp, #28]
 810a358:	9509      	str	r5, [sp, #36]	; 0x24
 810a35a:	f04f 33ff 	mov.w	r3, #4294967295
 810a35e:	9301      	str	r3, [sp, #4]
 810a360:	9304      	str	r3, [sp, #16]
 810a362:	2200      	movs	r2, #0
 810a364:	2312      	movs	r3, #18
 810a366:	e7d1      	b.n	810a30c <_dtoa_r+0x274>
 810a368:	636f4361 	.word	0x636f4361
 810a36c:	3fd287a7 	.word	0x3fd287a7
 810a370:	8b60c8b3 	.word	0x8b60c8b3
 810a374:	3fc68a28 	.word	0x3fc68a28
 810a378:	509f79fb 	.word	0x509f79fb
 810a37c:	3fd34413 	.word	0x3fd34413
 810a380:	08122962 	.word	0x08122962
 810a384:	08122979 	.word	0x08122979
 810a388:	7ff00000 	.word	0x7ff00000
 810a38c:	0812295e 	.word	0x0812295e
 810a390:	08122955 	.word	0x08122955
 810a394:	0812292d 	.word	0x0812292d
 810a398:	3ff80000 	.word	0x3ff80000
 810a39c:	08122a68 	.word	0x08122a68
 810a3a0:	081229d1 	.word	0x081229d1
 810a3a4:	2301      	movs	r3, #1
 810a3a6:	9309      	str	r3, [sp, #36]	; 0x24
 810a3a8:	e7d7      	b.n	810a35a <_dtoa_r+0x2c2>
 810a3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a3ac:	9301      	str	r3, [sp, #4]
 810a3ae:	9304      	str	r3, [sp, #16]
 810a3b0:	e7ba      	b.n	810a328 <_dtoa_r+0x290>
 810a3b2:	3101      	adds	r1, #1
 810a3b4:	0052      	lsls	r2, r2, #1
 810a3b6:	e7ba      	b.n	810a32e <_dtoa_r+0x296>
 810a3b8:	69e3      	ldr	r3, [r4, #28]
 810a3ba:	9a00      	ldr	r2, [sp, #0]
 810a3bc:	601a      	str	r2, [r3, #0]
 810a3be:	9b04      	ldr	r3, [sp, #16]
 810a3c0:	2b0e      	cmp	r3, #14
 810a3c2:	f200 80a8 	bhi.w	810a516 <_dtoa_r+0x47e>
 810a3c6:	2d00      	cmp	r5, #0
 810a3c8:	f000 80a5 	beq.w	810a516 <_dtoa_r+0x47e>
 810a3cc:	f1bb 0f00 	cmp.w	fp, #0
 810a3d0:	dd38      	ble.n	810a444 <_dtoa_r+0x3ac>
 810a3d2:	4bc0      	ldr	r3, [pc, #768]	; (810a6d4 <_dtoa_r+0x63c>)
 810a3d4:	f00b 020f 	and.w	r2, fp, #15
 810a3d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a3dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810a3e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 810a3e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 810a3e8:	d019      	beq.n	810a41e <_dtoa_r+0x386>
 810a3ea:	4bbb      	ldr	r3, [pc, #748]	; (810a6d8 <_dtoa_r+0x640>)
 810a3ec:	ec51 0b18 	vmov	r0, r1, d8
 810a3f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810a3f4:	f7f6 fab2 	bl	810095c <__aeabi_ddiv>
 810a3f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a3fc:	f008 080f 	and.w	r8, r8, #15
 810a400:	2503      	movs	r5, #3
 810a402:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810a6d8 <_dtoa_r+0x640>
 810a406:	f1b8 0f00 	cmp.w	r8, #0
 810a40a:	d10a      	bne.n	810a422 <_dtoa_r+0x38a>
 810a40c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810a410:	4632      	mov	r2, r6
 810a412:	463b      	mov	r3, r7
 810a414:	f7f6 faa2 	bl	810095c <__aeabi_ddiv>
 810a418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a41c:	e02b      	b.n	810a476 <_dtoa_r+0x3de>
 810a41e:	2502      	movs	r5, #2
 810a420:	e7ef      	b.n	810a402 <_dtoa_r+0x36a>
 810a422:	f018 0f01 	tst.w	r8, #1
 810a426:	d008      	beq.n	810a43a <_dtoa_r+0x3a2>
 810a428:	4630      	mov	r0, r6
 810a42a:	4639      	mov	r1, r7
 810a42c:	e9d9 2300 	ldrd	r2, r3, [r9]
 810a430:	f7f6 f96a 	bl	8100708 <__aeabi_dmul>
 810a434:	3501      	adds	r5, #1
 810a436:	4606      	mov	r6, r0
 810a438:	460f      	mov	r7, r1
 810a43a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810a43e:	f109 0908 	add.w	r9, r9, #8
 810a442:	e7e0      	b.n	810a406 <_dtoa_r+0x36e>
 810a444:	f000 809f 	beq.w	810a586 <_dtoa_r+0x4ee>
 810a448:	f1cb 0600 	rsb	r6, fp, #0
 810a44c:	4ba1      	ldr	r3, [pc, #644]	; (810a6d4 <_dtoa_r+0x63c>)
 810a44e:	4fa2      	ldr	r7, [pc, #648]	; (810a6d8 <_dtoa_r+0x640>)
 810a450:	f006 020f 	and.w	r2, r6, #15
 810a454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a45c:	ec51 0b18 	vmov	r0, r1, d8
 810a460:	f7f6 f952 	bl	8100708 <__aeabi_dmul>
 810a464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a468:	1136      	asrs	r6, r6, #4
 810a46a:	2300      	movs	r3, #0
 810a46c:	2502      	movs	r5, #2
 810a46e:	2e00      	cmp	r6, #0
 810a470:	d17e      	bne.n	810a570 <_dtoa_r+0x4d8>
 810a472:	2b00      	cmp	r3, #0
 810a474:	d1d0      	bne.n	810a418 <_dtoa_r+0x380>
 810a476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a478:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810a47c:	2b00      	cmp	r3, #0
 810a47e:	f000 8084 	beq.w	810a58a <_dtoa_r+0x4f2>
 810a482:	4b96      	ldr	r3, [pc, #600]	; (810a6dc <_dtoa_r+0x644>)
 810a484:	2200      	movs	r2, #0
 810a486:	4640      	mov	r0, r8
 810a488:	4649      	mov	r1, r9
 810a48a:	f7f6 fbaf 	bl	8100bec <__aeabi_dcmplt>
 810a48e:	2800      	cmp	r0, #0
 810a490:	d07b      	beq.n	810a58a <_dtoa_r+0x4f2>
 810a492:	9b04      	ldr	r3, [sp, #16]
 810a494:	2b00      	cmp	r3, #0
 810a496:	d078      	beq.n	810a58a <_dtoa_r+0x4f2>
 810a498:	9b01      	ldr	r3, [sp, #4]
 810a49a:	2b00      	cmp	r3, #0
 810a49c:	dd39      	ble.n	810a512 <_dtoa_r+0x47a>
 810a49e:	4b90      	ldr	r3, [pc, #576]	; (810a6e0 <_dtoa_r+0x648>)
 810a4a0:	2200      	movs	r2, #0
 810a4a2:	4640      	mov	r0, r8
 810a4a4:	4649      	mov	r1, r9
 810a4a6:	f7f6 f92f 	bl	8100708 <__aeabi_dmul>
 810a4aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a4ae:	9e01      	ldr	r6, [sp, #4]
 810a4b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 810a4b4:	3501      	adds	r5, #1
 810a4b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810a4ba:	4628      	mov	r0, r5
 810a4bc:	f7f6 f8ba 	bl	8100634 <__aeabi_i2d>
 810a4c0:	4642      	mov	r2, r8
 810a4c2:	464b      	mov	r3, r9
 810a4c4:	f7f6 f920 	bl	8100708 <__aeabi_dmul>
 810a4c8:	4b86      	ldr	r3, [pc, #536]	; (810a6e4 <_dtoa_r+0x64c>)
 810a4ca:	2200      	movs	r2, #0
 810a4cc:	f7f5 ff66 	bl	810039c <__adddf3>
 810a4d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810a4d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810a4d8:	9303      	str	r3, [sp, #12]
 810a4da:	2e00      	cmp	r6, #0
 810a4dc:	d158      	bne.n	810a590 <_dtoa_r+0x4f8>
 810a4de:	4b82      	ldr	r3, [pc, #520]	; (810a6e8 <_dtoa_r+0x650>)
 810a4e0:	2200      	movs	r2, #0
 810a4e2:	4640      	mov	r0, r8
 810a4e4:	4649      	mov	r1, r9
 810a4e6:	f7f5 ff57 	bl	8100398 <__aeabi_dsub>
 810a4ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a4ee:	4680      	mov	r8, r0
 810a4f0:	4689      	mov	r9, r1
 810a4f2:	f7f6 fb99 	bl	8100c28 <__aeabi_dcmpgt>
 810a4f6:	2800      	cmp	r0, #0
 810a4f8:	f040 8296 	bne.w	810aa28 <_dtoa_r+0x990>
 810a4fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810a500:	4640      	mov	r0, r8
 810a502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a506:	4649      	mov	r1, r9
 810a508:	f7f6 fb70 	bl	8100bec <__aeabi_dcmplt>
 810a50c:	2800      	cmp	r0, #0
 810a50e:	f040 8289 	bne.w	810aa24 <_dtoa_r+0x98c>
 810a512:	ed8d 8b02 	vstr	d8, [sp, #8]
 810a516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a518:	2b00      	cmp	r3, #0
 810a51a:	f2c0 814e 	blt.w	810a7ba <_dtoa_r+0x722>
 810a51e:	f1bb 0f0e 	cmp.w	fp, #14
 810a522:	f300 814a 	bgt.w	810a7ba <_dtoa_r+0x722>
 810a526:	4b6b      	ldr	r3, [pc, #428]	; (810a6d4 <_dtoa_r+0x63c>)
 810a528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810a52c:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a532:	2b00      	cmp	r3, #0
 810a534:	f280 80dc 	bge.w	810a6f0 <_dtoa_r+0x658>
 810a538:	9b04      	ldr	r3, [sp, #16]
 810a53a:	2b00      	cmp	r3, #0
 810a53c:	f300 80d8 	bgt.w	810a6f0 <_dtoa_r+0x658>
 810a540:	f040 826f 	bne.w	810aa22 <_dtoa_r+0x98a>
 810a544:	4b68      	ldr	r3, [pc, #416]	; (810a6e8 <_dtoa_r+0x650>)
 810a546:	2200      	movs	r2, #0
 810a548:	4640      	mov	r0, r8
 810a54a:	4649      	mov	r1, r9
 810a54c:	f7f6 f8dc 	bl	8100708 <__aeabi_dmul>
 810a550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a554:	f7f6 fb5e 	bl	8100c14 <__aeabi_dcmpge>
 810a558:	9e04      	ldr	r6, [sp, #16]
 810a55a:	4637      	mov	r7, r6
 810a55c:	2800      	cmp	r0, #0
 810a55e:	f040 8245 	bne.w	810a9ec <_dtoa_r+0x954>
 810a562:	9d00      	ldr	r5, [sp, #0]
 810a564:	2331      	movs	r3, #49	; 0x31
 810a566:	f805 3b01 	strb.w	r3, [r5], #1
 810a56a:	f10b 0b01 	add.w	fp, fp, #1
 810a56e:	e241      	b.n	810a9f4 <_dtoa_r+0x95c>
 810a570:	07f2      	lsls	r2, r6, #31
 810a572:	d505      	bpl.n	810a580 <_dtoa_r+0x4e8>
 810a574:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a578:	f7f6 f8c6 	bl	8100708 <__aeabi_dmul>
 810a57c:	3501      	adds	r5, #1
 810a57e:	2301      	movs	r3, #1
 810a580:	1076      	asrs	r6, r6, #1
 810a582:	3708      	adds	r7, #8
 810a584:	e773      	b.n	810a46e <_dtoa_r+0x3d6>
 810a586:	2502      	movs	r5, #2
 810a588:	e775      	b.n	810a476 <_dtoa_r+0x3de>
 810a58a:	9e04      	ldr	r6, [sp, #16]
 810a58c:	465f      	mov	r7, fp
 810a58e:	e792      	b.n	810a4b6 <_dtoa_r+0x41e>
 810a590:	9900      	ldr	r1, [sp, #0]
 810a592:	4b50      	ldr	r3, [pc, #320]	; (810a6d4 <_dtoa_r+0x63c>)
 810a594:	ed9d 7b02 	vldr	d7, [sp, #8]
 810a598:	4431      	add	r1, r6
 810a59a:	9102      	str	r1, [sp, #8]
 810a59c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810a59e:	eeb0 9a47 	vmov.f32	s18, s14
 810a5a2:	eef0 9a67 	vmov.f32	s19, s15
 810a5a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810a5aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810a5ae:	2900      	cmp	r1, #0
 810a5b0:	d044      	beq.n	810a63c <_dtoa_r+0x5a4>
 810a5b2:	494e      	ldr	r1, [pc, #312]	; (810a6ec <_dtoa_r+0x654>)
 810a5b4:	2000      	movs	r0, #0
 810a5b6:	f7f6 f9d1 	bl	810095c <__aeabi_ddiv>
 810a5ba:	ec53 2b19 	vmov	r2, r3, d9
 810a5be:	f7f5 feeb 	bl	8100398 <__aeabi_dsub>
 810a5c2:	9d00      	ldr	r5, [sp, #0]
 810a5c4:	ec41 0b19 	vmov	d9, r0, r1
 810a5c8:	4649      	mov	r1, r9
 810a5ca:	4640      	mov	r0, r8
 810a5cc:	f7f6 fb4c 	bl	8100c68 <__aeabi_d2iz>
 810a5d0:	4606      	mov	r6, r0
 810a5d2:	f7f6 f82f 	bl	8100634 <__aeabi_i2d>
 810a5d6:	4602      	mov	r2, r0
 810a5d8:	460b      	mov	r3, r1
 810a5da:	4640      	mov	r0, r8
 810a5dc:	4649      	mov	r1, r9
 810a5de:	f7f5 fedb 	bl	8100398 <__aeabi_dsub>
 810a5e2:	3630      	adds	r6, #48	; 0x30
 810a5e4:	f805 6b01 	strb.w	r6, [r5], #1
 810a5e8:	ec53 2b19 	vmov	r2, r3, d9
 810a5ec:	4680      	mov	r8, r0
 810a5ee:	4689      	mov	r9, r1
 810a5f0:	f7f6 fafc 	bl	8100bec <__aeabi_dcmplt>
 810a5f4:	2800      	cmp	r0, #0
 810a5f6:	d164      	bne.n	810a6c2 <_dtoa_r+0x62a>
 810a5f8:	4642      	mov	r2, r8
 810a5fa:	464b      	mov	r3, r9
 810a5fc:	4937      	ldr	r1, [pc, #220]	; (810a6dc <_dtoa_r+0x644>)
 810a5fe:	2000      	movs	r0, #0
 810a600:	f7f5 feca 	bl	8100398 <__aeabi_dsub>
 810a604:	ec53 2b19 	vmov	r2, r3, d9
 810a608:	f7f6 faf0 	bl	8100bec <__aeabi_dcmplt>
 810a60c:	2800      	cmp	r0, #0
 810a60e:	f040 80b6 	bne.w	810a77e <_dtoa_r+0x6e6>
 810a612:	9b02      	ldr	r3, [sp, #8]
 810a614:	429d      	cmp	r5, r3
 810a616:	f43f af7c 	beq.w	810a512 <_dtoa_r+0x47a>
 810a61a:	4b31      	ldr	r3, [pc, #196]	; (810a6e0 <_dtoa_r+0x648>)
 810a61c:	ec51 0b19 	vmov	r0, r1, d9
 810a620:	2200      	movs	r2, #0
 810a622:	f7f6 f871 	bl	8100708 <__aeabi_dmul>
 810a626:	4b2e      	ldr	r3, [pc, #184]	; (810a6e0 <_dtoa_r+0x648>)
 810a628:	ec41 0b19 	vmov	d9, r0, r1
 810a62c:	2200      	movs	r2, #0
 810a62e:	4640      	mov	r0, r8
 810a630:	4649      	mov	r1, r9
 810a632:	f7f6 f869 	bl	8100708 <__aeabi_dmul>
 810a636:	4680      	mov	r8, r0
 810a638:	4689      	mov	r9, r1
 810a63a:	e7c5      	b.n	810a5c8 <_dtoa_r+0x530>
 810a63c:	ec51 0b17 	vmov	r0, r1, d7
 810a640:	f7f6 f862 	bl	8100708 <__aeabi_dmul>
 810a644:	9b02      	ldr	r3, [sp, #8]
 810a646:	9d00      	ldr	r5, [sp, #0]
 810a648:	930f      	str	r3, [sp, #60]	; 0x3c
 810a64a:	ec41 0b19 	vmov	d9, r0, r1
 810a64e:	4649      	mov	r1, r9
 810a650:	4640      	mov	r0, r8
 810a652:	f7f6 fb09 	bl	8100c68 <__aeabi_d2iz>
 810a656:	4606      	mov	r6, r0
 810a658:	f7f5 ffec 	bl	8100634 <__aeabi_i2d>
 810a65c:	3630      	adds	r6, #48	; 0x30
 810a65e:	4602      	mov	r2, r0
 810a660:	460b      	mov	r3, r1
 810a662:	4640      	mov	r0, r8
 810a664:	4649      	mov	r1, r9
 810a666:	f7f5 fe97 	bl	8100398 <__aeabi_dsub>
 810a66a:	f805 6b01 	strb.w	r6, [r5], #1
 810a66e:	9b02      	ldr	r3, [sp, #8]
 810a670:	429d      	cmp	r5, r3
 810a672:	4680      	mov	r8, r0
 810a674:	4689      	mov	r9, r1
 810a676:	f04f 0200 	mov.w	r2, #0
 810a67a:	d124      	bne.n	810a6c6 <_dtoa_r+0x62e>
 810a67c:	4b1b      	ldr	r3, [pc, #108]	; (810a6ec <_dtoa_r+0x654>)
 810a67e:	ec51 0b19 	vmov	r0, r1, d9
 810a682:	f7f5 fe8b 	bl	810039c <__adddf3>
 810a686:	4602      	mov	r2, r0
 810a688:	460b      	mov	r3, r1
 810a68a:	4640      	mov	r0, r8
 810a68c:	4649      	mov	r1, r9
 810a68e:	f7f6 facb 	bl	8100c28 <__aeabi_dcmpgt>
 810a692:	2800      	cmp	r0, #0
 810a694:	d173      	bne.n	810a77e <_dtoa_r+0x6e6>
 810a696:	ec53 2b19 	vmov	r2, r3, d9
 810a69a:	4914      	ldr	r1, [pc, #80]	; (810a6ec <_dtoa_r+0x654>)
 810a69c:	2000      	movs	r0, #0
 810a69e:	f7f5 fe7b 	bl	8100398 <__aeabi_dsub>
 810a6a2:	4602      	mov	r2, r0
 810a6a4:	460b      	mov	r3, r1
 810a6a6:	4640      	mov	r0, r8
 810a6a8:	4649      	mov	r1, r9
 810a6aa:	f7f6 fa9f 	bl	8100bec <__aeabi_dcmplt>
 810a6ae:	2800      	cmp	r0, #0
 810a6b0:	f43f af2f 	beq.w	810a512 <_dtoa_r+0x47a>
 810a6b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810a6b6:	1e6b      	subs	r3, r5, #1
 810a6b8:	930f      	str	r3, [sp, #60]	; 0x3c
 810a6ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810a6be:	2b30      	cmp	r3, #48	; 0x30
 810a6c0:	d0f8      	beq.n	810a6b4 <_dtoa_r+0x61c>
 810a6c2:	46bb      	mov	fp, r7
 810a6c4:	e04a      	b.n	810a75c <_dtoa_r+0x6c4>
 810a6c6:	4b06      	ldr	r3, [pc, #24]	; (810a6e0 <_dtoa_r+0x648>)
 810a6c8:	f7f6 f81e 	bl	8100708 <__aeabi_dmul>
 810a6cc:	4680      	mov	r8, r0
 810a6ce:	4689      	mov	r9, r1
 810a6d0:	e7bd      	b.n	810a64e <_dtoa_r+0x5b6>
 810a6d2:	bf00      	nop
 810a6d4:	08122a68 	.word	0x08122a68
 810a6d8:	08122a40 	.word	0x08122a40
 810a6dc:	3ff00000 	.word	0x3ff00000
 810a6e0:	40240000 	.word	0x40240000
 810a6e4:	401c0000 	.word	0x401c0000
 810a6e8:	40140000 	.word	0x40140000
 810a6ec:	3fe00000 	.word	0x3fe00000
 810a6f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810a6f4:	9d00      	ldr	r5, [sp, #0]
 810a6f6:	4642      	mov	r2, r8
 810a6f8:	464b      	mov	r3, r9
 810a6fa:	4630      	mov	r0, r6
 810a6fc:	4639      	mov	r1, r7
 810a6fe:	f7f6 f92d 	bl	810095c <__aeabi_ddiv>
 810a702:	f7f6 fab1 	bl	8100c68 <__aeabi_d2iz>
 810a706:	9001      	str	r0, [sp, #4]
 810a708:	f7f5 ff94 	bl	8100634 <__aeabi_i2d>
 810a70c:	4642      	mov	r2, r8
 810a70e:	464b      	mov	r3, r9
 810a710:	f7f5 fffa 	bl	8100708 <__aeabi_dmul>
 810a714:	4602      	mov	r2, r0
 810a716:	460b      	mov	r3, r1
 810a718:	4630      	mov	r0, r6
 810a71a:	4639      	mov	r1, r7
 810a71c:	f7f5 fe3c 	bl	8100398 <__aeabi_dsub>
 810a720:	9e01      	ldr	r6, [sp, #4]
 810a722:	9f04      	ldr	r7, [sp, #16]
 810a724:	3630      	adds	r6, #48	; 0x30
 810a726:	f805 6b01 	strb.w	r6, [r5], #1
 810a72a:	9e00      	ldr	r6, [sp, #0]
 810a72c:	1bae      	subs	r6, r5, r6
 810a72e:	42b7      	cmp	r7, r6
 810a730:	4602      	mov	r2, r0
 810a732:	460b      	mov	r3, r1
 810a734:	d134      	bne.n	810a7a0 <_dtoa_r+0x708>
 810a736:	f7f5 fe31 	bl	810039c <__adddf3>
 810a73a:	4642      	mov	r2, r8
 810a73c:	464b      	mov	r3, r9
 810a73e:	4606      	mov	r6, r0
 810a740:	460f      	mov	r7, r1
 810a742:	f7f6 fa71 	bl	8100c28 <__aeabi_dcmpgt>
 810a746:	b9c8      	cbnz	r0, 810a77c <_dtoa_r+0x6e4>
 810a748:	4642      	mov	r2, r8
 810a74a:	464b      	mov	r3, r9
 810a74c:	4630      	mov	r0, r6
 810a74e:	4639      	mov	r1, r7
 810a750:	f7f6 fa42 	bl	8100bd8 <__aeabi_dcmpeq>
 810a754:	b110      	cbz	r0, 810a75c <_dtoa_r+0x6c4>
 810a756:	9b01      	ldr	r3, [sp, #4]
 810a758:	07db      	lsls	r3, r3, #31
 810a75a:	d40f      	bmi.n	810a77c <_dtoa_r+0x6e4>
 810a75c:	4651      	mov	r1, sl
 810a75e:	4620      	mov	r0, r4
 810a760:	f000 fbcc 	bl	810aefc <_Bfree>
 810a764:	2300      	movs	r3, #0
 810a766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810a768:	702b      	strb	r3, [r5, #0]
 810a76a:	f10b 0301 	add.w	r3, fp, #1
 810a76e:	6013      	str	r3, [r2, #0]
 810a770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a772:	2b00      	cmp	r3, #0
 810a774:	f43f ace2 	beq.w	810a13c <_dtoa_r+0xa4>
 810a778:	601d      	str	r5, [r3, #0]
 810a77a:	e4df      	b.n	810a13c <_dtoa_r+0xa4>
 810a77c:	465f      	mov	r7, fp
 810a77e:	462b      	mov	r3, r5
 810a780:	461d      	mov	r5, r3
 810a782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a786:	2a39      	cmp	r2, #57	; 0x39
 810a788:	d106      	bne.n	810a798 <_dtoa_r+0x700>
 810a78a:	9a00      	ldr	r2, [sp, #0]
 810a78c:	429a      	cmp	r2, r3
 810a78e:	d1f7      	bne.n	810a780 <_dtoa_r+0x6e8>
 810a790:	9900      	ldr	r1, [sp, #0]
 810a792:	2230      	movs	r2, #48	; 0x30
 810a794:	3701      	adds	r7, #1
 810a796:	700a      	strb	r2, [r1, #0]
 810a798:	781a      	ldrb	r2, [r3, #0]
 810a79a:	3201      	adds	r2, #1
 810a79c:	701a      	strb	r2, [r3, #0]
 810a79e:	e790      	b.n	810a6c2 <_dtoa_r+0x62a>
 810a7a0:	4ba3      	ldr	r3, [pc, #652]	; (810aa30 <_dtoa_r+0x998>)
 810a7a2:	2200      	movs	r2, #0
 810a7a4:	f7f5 ffb0 	bl	8100708 <__aeabi_dmul>
 810a7a8:	2200      	movs	r2, #0
 810a7aa:	2300      	movs	r3, #0
 810a7ac:	4606      	mov	r6, r0
 810a7ae:	460f      	mov	r7, r1
 810a7b0:	f7f6 fa12 	bl	8100bd8 <__aeabi_dcmpeq>
 810a7b4:	2800      	cmp	r0, #0
 810a7b6:	d09e      	beq.n	810a6f6 <_dtoa_r+0x65e>
 810a7b8:	e7d0      	b.n	810a75c <_dtoa_r+0x6c4>
 810a7ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a7bc:	2a00      	cmp	r2, #0
 810a7be:	f000 80ca 	beq.w	810a956 <_dtoa_r+0x8be>
 810a7c2:	9a07      	ldr	r2, [sp, #28]
 810a7c4:	2a01      	cmp	r2, #1
 810a7c6:	f300 80ad 	bgt.w	810a924 <_dtoa_r+0x88c>
 810a7ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a7cc:	2a00      	cmp	r2, #0
 810a7ce:	f000 80a5 	beq.w	810a91c <_dtoa_r+0x884>
 810a7d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810a7d6:	9e08      	ldr	r6, [sp, #32]
 810a7d8:	9d05      	ldr	r5, [sp, #20]
 810a7da:	9a05      	ldr	r2, [sp, #20]
 810a7dc:	441a      	add	r2, r3
 810a7de:	9205      	str	r2, [sp, #20]
 810a7e0:	9a06      	ldr	r2, [sp, #24]
 810a7e2:	2101      	movs	r1, #1
 810a7e4:	441a      	add	r2, r3
 810a7e6:	4620      	mov	r0, r4
 810a7e8:	9206      	str	r2, [sp, #24]
 810a7ea:	f000 fc87 	bl	810b0fc <__i2b>
 810a7ee:	4607      	mov	r7, r0
 810a7f0:	b165      	cbz	r5, 810a80c <_dtoa_r+0x774>
 810a7f2:	9b06      	ldr	r3, [sp, #24]
 810a7f4:	2b00      	cmp	r3, #0
 810a7f6:	dd09      	ble.n	810a80c <_dtoa_r+0x774>
 810a7f8:	42ab      	cmp	r3, r5
 810a7fa:	9a05      	ldr	r2, [sp, #20]
 810a7fc:	bfa8      	it	ge
 810a7fe:	462b      	movge	r3, r5
 810a800:	1ad2      	subs	r2, r2, r3
 810a802:	9205      	str	r2, [sp, #20]
 810a804:	9a06      	ldr	r2, [sp, #24]
 810a806:	1aed      	subs	r5, r5, r3
 810a808:	1ad3      	subs	r3, r2, r3
 810a80a:	9306      	str	r3, [sp, #24]
 810a80c:	9b08      	ldr	r3, [sp, #32]
 810a80e:	b1f3      	cbz	r3, 810a84e <_dtoa_r+0x7b6>
 810a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a812:	2b00      	cmp	r3, #0
 810a814:	f000 80a3 	beq.w	810a95e <_dtoa_r+0x8c6>
 810a818:	2e00      	cmp	r6, #0
 810a81a:	dd10      	ble.n	810a83e <_dtoa_r+0x7a6>
 810a81c:	4639      	mov	r1, r7
 810a81e:	4632      	mov	r2, r6
 810a820:	4620      	mov	r0, r4
 810a822:	f000 fd2b 	bl	810b27c <__pow5mult>
 810a826:	4652      	mov	r2, sl
 810a828:	4601      	mov	r1, r0
 810a82a:	4607      	mov	r7, r0
 810a82c:	4620      	mov	r0, r4
 810a82e:	f000 fc7b 	bl	810b128 <__multiply>
 810a832:	4651      	mov	r1, sl
 810a834:	4680      	mov	r8, r0
 810a836:	4620      	mov	r0, r4
 810a838:	f000 fb60 	bl	810aefc <_Bfree>
 810a83c:	46c2      	mov	sl, r8
 810a83e:	9b08      	ldr	r3, [sp, #32]
 810a840:	1b9a      	subs	r2, r3, r6
 810a842:	d004      	beq.n	810a84e <_dtoa_r+0x7b6>
 810a844:	4651      	mov	r1, sl
 810a846:	4620      	mov	r0, r4
 810a848:	f000 fd18 	bl	810b27c <__pow5mult>
 810a84c:	4682      	mov	sl, r0
 810a84e:	2101      	movs	r1, #1
 810a850:	4620      	mov	r0, r4
 810a852:	f000 fc53 	bl	810b0fc <__i2b>
 810a856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a858:	2b00      	cmp	r3, #0
 810a85a:	4606      	mov	r6, r0
 810a85c:	f340 8081 	ble.w	810a962 <_dtoa_r+0x8ca>
 810a860:	461a      	mov	r2, r3
 810a862:	4601      	mov	r1, r0
 810a864:	4620      	mov	r0, r4
 810a866:	f000 fd09 	bl	810b27c <__pow5mult>
 810a86a:	9b07      	ldr	r3, [sp, #28]
 810a86c:	2b01      	cmp	r3, #1
 810a86e:	4606      	mov	r6, r0
 810a870:	dd7a      	ble.n	810a968 <_dtoa_r+0x8d0>
 810a872:	f04f 0800 	mov.w	r8, #0
 810a876:	6933      	ldr	r3, [r6, #16]
 810a878:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810a87c:	6918      	ldr	r0, [r3, #16]
 810a87e:	f000 fbef 	bl	810b060 <__hi0bits>
 810a882:	f1c0 0020 	rsb	r0, r0, #32
 810a886:	9b06      	ldr	r3, [sp, #24]
 810a888:	4418      	add	r0, r3
 810a88a:	f010 001f 	ands.w	r0, r0, #31
 810a88e:	f000 8094 	beq.w	810a9ba <_dtoa_r+0x922>
 810a892:	f1c0 0320 	rsb	r3, r0, #32
 810a896:	2b04      	cmp	r3, #4
 810a898:	f340 8085 	ble.w	810a9a6 <_dtoa_r+0x90e>
 810a89c:	9b05      	ldr	r3, [sp, #20]
 810a89e:	f1c0 001c 	rsb	r0, r0, #28
 810a8a2:	4403      	add	r3, r0
 810a8a4:	9305      	str	r3, [sp, #20]
 810a8a6:	9b06      	ldr	r3, [sp, #24]
 810a8a8:	4403      	add	r3, r0
 810a8aa:	4405      	add	r5, r0
 810a8ac:	9306      	str	r3, [sp, #24]
 810a8ae:	9b05      	ldr	r3, [sp, #20]
 810a8b0:	2b00      	cmp	r3, #0
 810a8b2:	dd05      	ble.n	810a8c0 <_dtoa_r+0x828>
 810a8b4:	4651      	mov	r1, sl
 810a8b6:	461a      	mov	r2, r3
 810a8b8:	4620      	mov	r0, r4
 810a8ba:	f000 fd39 	bl	810b330 <__lshift>
 810a8be:	4682      	mov	sl, r0
 810a8c0:	9b06      	ldr	r3, [sp, #24]
 810a8c2:	2b00      	cmp	r3, #0
 810a8c4:	dd05      	ble.n	810a8d2 <_dtoa_r+0x83a>
 810a8c6:	4631      	mov	r1, r6
 810a8c8:	461a      	mov	r2, r3
 810a8ca:	4620      	mov	r0, r4
 810a8cc:	f000 fd30 	bl	810b330 <__lshift>
 810a8d0:	4606      	mov	r6, r0
 810a8d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a8d4:	2b00      	cmp	r3, #0
 810a8d6:	d072      	beq.n	810a9be <_dtoa_r+0x926>
 810a8d8:	4631      	mov	r1, r6
 810a8da:	4650      	mov	r0, sl
 810a8dc:	f000 fd94 	bl	810b408 <__mcmp>
 810a8e0:	2800      	cmp	r0, #0
 810a8e2:	da6c      	bge.n	810a9be <_dtoa_r+0x926>
 810a8e4:	2300      	movs	r3, #0
 810a8e6:	4651      	mov	r1, sl
 810a8e8:	220a      	movs	r2, #10
 810a8ea:	4620      	mov	r0, r4
 810a8ec:	f000 fb28 	bl	810af40 <__multadd>
 810a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a8f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 810a8f6:	4682      	mov	sl, r0
 810a8f8:	2b00      	cmp	r3, #0
 810a8fa:	f000 81b0 	beq.w	810ac5e <_dtoa_r+0xbc6>
 810a8fe:	2300      	movs	r3, #0
 810a900:	4639      	mov	r1, r7
 810a902:	220a      	movs	r2, #10
 810a904:	4620      	mov	r0, r4
 810a906:	f000 fb1b 	bl	810af40 <__multadd>
 810a90a:	9b01      	ldr	r3, [sp, #4]
 810a90c:	2b00      	cmp	r3, #0
 810a90e:	4607      	mov	r7, r0
 810a910:	f300 8096 	bgt.w	810aa40 <_dtoa_r+0x9a8>
 810a914:	9b07      	ldr	r3, [sp, #28]
 810a916:	2b02      	cmp	r3, #2
 810a918:	dc59      	bgt.n	810a9ce <_dtoa_r+0x936>
 810a91a:	e091      	b.n	810aa40 <_dtoa_r+0x9a8>
 810a91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810a91e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810a922:	e758      	b.n	810a7d6 <_dtoa_r+0x73e>
 810a924:	9b04      	ldr	r3, [sp, #16]
 810a926:	1e5e      	subs	r6, r3, #1
 810a928:	9b08      	ldr	r3, [sp, #32]
 810a92a:	42b3      	cmp	r3, r6
 810a92c:	bfbf      	itttt	lt
 810a92e:	9b08      	ldrlt	r3, [sp, #32]
 810a930:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810a932:	9608      	strlt	r6, [sp, #32]
 810a934:	1af3      	sublt	r3, r6, r3
 810a936:	bfb4      	ite	lt
 810a938:	18d2      	addlt	r2, r2, r3
 810a93a:	1b9e      	subge	r6, r3, r6
 810a93c:	9b04      	ldr	r3, [sp, #16]
 810a93e:	bfbc      	itt	lt
 810a940:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810a942:	2600      	movlt	r6, #0
 810a944:	2b00      	cmp	r3, #0
 810a946:	bfb7      	itett	lt
 810a948:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810a94c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810a950:	1a9d      	sublt	r5, r3, r2
 810a952:	2300      	movlt	r3, #0
 810a954:	e741      	b.n	810a7da <_dtoa_r+0x742>
 810a956:	9e08      	ldr	r6, [sp, #32]
 810a958:	9d05      	ldr	r5, [sp, #20]
 810a95a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810a95c:	e748      	b.n	810a7f0 <_dtoa_r+0x758>
 810a95e:	9a08      	ldr	r2, [sp, #32]
 810a960:	e770      	b.n	810a844 <_dtoa_r+0x7ac>
 810a962:	9b07      	ldr	r3, [sp, #28]
 810a964:	2b01      	cmp	r3, #1
 810a966:	dc19      	bgt.n	810a99c <_dtoa_r+0x904>
 810a968:	9b02      	ldr	r3, [sp, #8]
 810a96a:	b9bb      	cbnz	r3, 810a99c <_dtoa_r+0x904>
 810a96c:	9b03      	ldr	r3, [sp, #12]
 810a96e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a972:	b99b      	cbnz	r3, 810a99c <_dtoa_r+0x904>
 810a974:	9b03      	ldr	r3, [sp, #12]
 810a976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810a97a:	0d1b      	lsrs	r3, r3, #20
 810a97c:	051b      	lsls	r3, r3, #20
 810a97e:	b183      	cbz	r3, 810a9a2 <_dtoa_r+0x90a>
 810a980:	9b05      	ldr	r3, [sp, #20]
 810a982:	3301      	adds	r3, #1
 810a984:	9305      	str	r3, [sp, #20]
 810a986:	9b06      	ldr	r3, [sp, #24]
 810a988:	3301      	adds	r3, #1
 810a98a:	9306      	str	r3, [sp, #24]
 810a98c:	f04f 0801 	mov.w	r8, #1
 810a990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a992:	2b00      	cmp	r3, #0
 810a994:	f47f af6f 	bne.w	810a876 <_dtoa_r+0x7de>
 810a998:	2001      	movs	r0, #1
 810a99a:	e774      	b.n	810a886 <_dtoa_r+0x7ee>
 810a99c:	f04f 0800 	mov.w	r8, #0
 810a9a0:	e7f6      	b.n	810a990 <_dtoa_r+0x8f8>
 810a9a2:	4698      	mov	r8, r3
 810a9a4:	e7f4      	b.n	810a990 <_dtoa_r+0x8f8>
 810a9a6:	d082      	beq.n	810a8ae <_dtoa_r+0x816>
 810a9a8:	9a05      	ldr	r2, [sp, #20]
 810a9aa:	331c      	adds	r3, #28
 810a9ac:	441a      	add	r2, r3
 810a9ae:	9205      	str	r2, [sp, #20]
 810a9b0:	9a06      	ldr	r2, [sp, #24]
 810a9b2:	441a      	add	r2, r3
 810a9b4:	441d      	add	r5, r3
 810a9b6:	9206      	str	r2, [sp, #24]
 810a9b8:	e779      	b.n	810a8ae <_dtoa_r+0x816>
 810a9ba:	4603      	mov	r3, r0
 810a9bc:	e7f4      	b.n	810a9a8 <_dtoa_r+0x910>
 810a9be:	9b04      	ldr	r3, [sp, #16]
 810a9c0:	2b00      	cmp	r3, #0
 810a9c2:	dc37      	bgt.n	810aa34 <_dtoa_r+0x99c>
 810a9c4:	9b07      	ldr	r3, [sp, #28]
 810a9c6:	2b02      	cmp	r3, #2
 810a9c8:	dd34      	ble.n	810aa34 <_dtoa_r+0x99c>
 810a9ca:	9b04      	ldr	r3, [sp, #16]
 810a9cc:	9301      	str	r3, [sp, #4]
 810a9ce:	9b01      	ldr	r3, [sp, #4]
 810a9d0:	b963      	cbnz	r3, 810a9ec <_dtoa_r+0x954>
 810a9d2:	4631      	mov	r1, r6
 810a9d4:	2205      	movs	r2, #5
 810a9d6:	4620      	mov	r0, r4
 810a9d8:	f000 fab2 	bl	810af40 <__multadd>
 810a9dc:	4601      	mov	r1, r0
 810a9de:	4606      	mov	r6, r0
 810a9e0:	4650      	mov	r0, sl
 810a9e2:	f000 fd11 	bl	810b408 <__mcmp>
 810a9e6:	2800      	cmp	r0, #0
 810a9e8:	f73f adbb 	bgt.w	810a562 <_dtoa_r+0x4ca>
 810a9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a9ee:	9d00      	ldr	r5, [sp, #0]
 810a9f0:	ea6f 0b03 	mvn.w	fp, r3
 810a9f4:	f04f 0800 	mov.w	r8, #0
 810a9f8:	4631      	mov	r1, r6
 810a9fa:	4620      	mov	r0, r4
 810a9fc:	f000 fa7e 	bl	810aefc <_Bfree>
 810aa00:	2f00      	cmp	r7, #0
 810aa02:	f43f aeab 	beq.w	810a75c <_dtoa_r+0x6c4>
 810aa06:	f1b8 0f00 	cmp.w	r8, #0
 810aa0a:	d005      	beq.n	810aa18 <_dtoa_r+0x980>
 810aa0c:	45b8      	cmp	r8, r7
 810aa0e:	d003      	beq.n	810aa18 <_dtoa_r+0x980>
 810aa10:	4641      	mov	r1, r8
 810aa12:	4620      	mov	r0, r4
 810aa14:	f000 fa72 	bl	810aefc <_Bfree>
 810aa18:	4639      	mov	r1, r7
 810aa1a:	4620      	mov	r0, r4
 810aa1c:	f000 fa6e 	bl	810aefc <_Bfree>
 810aa20:	e69c      	b.n	810a75c <_dtoa_r+0x6c4>
 810aa22:	2600      	movs	r6, #0
 810aa24:	4637      	mov	r7, r6
 810aa26:	e7e1      	b.n	810a9ec <_dtoa_r+0x954>
 810aa28:	46bb      	mov	fp, r7
 810aa2a:	4637      	mov	r7, r6
 810aa2c:	e599      	b.n	810a562 <_dtoa_r+0x4ca>
 810aa2e:	bf00      	nop
 810aa30:	40240000 	.word	0x40240000
 810aa34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aa36:	2b00      	cmp	r3, #0
 810aa38:	f000 80c8 	beq.w	810abcc <_dtoa_r+0xb34>
 810aa3c:	9b04      	ldr	r3, [sp, #16]
 810aa3e:	9301      	str	r3, [sp, #4]
 810aa40:	2d00      	cmp	r5, #0
 810aa42:	dd05      	ble.n	810aa50 <_dtoa_r+0x9b8>
 810aa44:	4639      	mov	r1, r7
 810aa46:	462a      	mov	r2, r5
 810aa48:	4620      	mov	r0, r4
 810aa4a:	f000 fc71 	bl	810b330 <__lshift>
 810aa4e:	4607      	mov	r7, r0
 810aa50:	f1b8 0f00 	cmp.w	r8, #0
 810aa54:	d05b      	beq.n	810ab0e <_dtoa_r+0xa76>
 810aa56:	6879      	ldr	r1, [r7, #4]
 810aa58:	4620      	mov	r0, r4
 810aa5a:	f000 fa0f 	bl	810ae7c <_Balloc>
 810aa5e:	4605      	mov	r5, r0
 810aa60:	b928      	cbnz	r0, 810aa6e <_dtoa_r+0x9d6>
 810aa62:	4b83      	ldr	r3, [pc, #524]	; (810ac70 <_dtoa_r+0xbd8>)
 810aa64:	4602      	mov	r2, r0
 810aa66:	f240 21ef 	movw	r1, #751	; 0x2ef
 810aa6a:	f7ff bb2e 	b.w	810a0ca <_dtoa_r+0x32>
 810aa6e:	693a      	ldr	r2, [r7, #16]
 810aa70:	3202      	adds	r2, #2
 810aa72:	0092      	lsls	r2, r2, #2
 810aa74:	f107 010c 	add.w	r1, r7, #12
 810aa78:	300c      	adds	r0, #12
 810aa7a:	f001 ff85 	bl	810c988 <memcpy>
 810aa7e:	2201      	movs	r2, #1
 810aa80:	4629      	mov	r1, r5
 810aa82:	4620      	mov	r0, r4
 810aa84:	f000 fc54 	bl	810b330 <__lshift>
 810aa88:	9b00      	ldr	r3, [sp, #0]
 810aa8a:	3301      	adds	r3, #1
 810aa8c:	9304      	str	r3, [sp, #16]
 810aa8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810aa92:	4413      	add	r3, r2
 810aa94:	9308      	str	r3, [sp, #32]
 810aa96:	9b02      	ldr	r3, [sp, #8]
 810aa98:	f003 0301 	and.w	r3, r3, #1
 810aa9c:	46b8      	mov	r8, r7
 810aa9e:	9306      	str	r3, [sp, #24]
 810aaa0:	4607      	mov	r7, r0
 810aaa2:	9b04      	ldr	r3, [sp, #16]
 810aaa4:	4631      	mov	r1, r6
 810aaa6:	3b01      	subs	r3, #1
 810aaa8:	4650      	mov	r0, sl
 810aaaa:	9301      	str	r3, [sp, #4]
 810aaac:	f7ff fa6a 	bl	8109f84 <quorem>
 810aab0:	4641      	mov	r1, r8
 810aab2:	9002      	str	r0, [sp, #8]
 810aab4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810aab8:	4650      	mov	r0, sl
 810aaba:	f000 fca5 	bl	810b408 <__mcmp>
 810aabe:	463a      	mov	r2, r7
 810aac0:	9005      	str	r0, [sp, #20]
 810aac2:	4631      	mov	r1, r6
 810aac4:	4620      	mov	r0, r4
 810aac6:	f000 fcbb 	bl	810b440 <__mdiff>
 810aaca:	68c2      	ldr	r2, [r0, #12]
 810aacc:	4605      	mov	r5, r0
 810aace:	bb02      	cbnz	r2, 810ab12 <_dtoa_r+0xa7a>
 810aad0:	4601      	mov	r1, r0
 810aad2:	4650      	mov	r0, sl
 810aad4:	f000 fc98 	bl	810b408 <__mcmp>
 810aad8:	4602      	mov	r2, r0
 810aada:	4629      	mov	r1, r5
 810aadc:	4620      	mov	r0, r4
 810aade:	9209      	str	r2, [sp, #36]	; 0x24
 810aae0:	f000 fa0c 	bl	810aefc <_Bfree>
 810aae4:	9b07      	ldr	r3, [sp, #28]
 810aae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810aae8:	9d04      	ldr	r5, [sp, #16]
 810aaea:	ea43 0102 	orr.w	r1, r3, r2
 810aaee:	9b06      	ldr	r3, [sp, #24]
 810aaf0:	4319      	orrs	r1, r3
 810aaf2:	d110      	bne.n	810ab16 <_dtoa_r+0xa7e>
 810aaf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810aaf8:	d029      	beq.n	810ab4e <_dtoa_r+0xab6>
 810aafa:	9b05      	ldr	r3, [sp, #20]
 810aafc:	2b00      	cmp	r3, #0
 810aafe:	dd02      	ble.n	810ab06 <_dtoa_r+0xa6e>
 810ab00:	9b02      	ldr	r3, [sp, #8]
 810ab02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810ab06:	9b01      	ldr	r3, [sp, #4]
 810ab08:	f883 9000 	strb.w	r9, [r3]
 810ab0c:	e774      	b.n	810a9f8 <_dtoa_r+0x960>
 810ab0e:	4638      	mov	r0, r7
 810ab10:	e7ba      	b.n	810aa88 <_dtoa_r+0x9f0>
 810ab12:	2201      	movs	r2, #1
 810ab14:	e7e1      	b.n	810aada <_dtoa_r+0xa42>
 810ab16:	9b05      	ldr	r3, [sp, #20]
 810ab18:	2b00      	cmp	r3, #0
 810ab1a:	db04      	blt.n	810ab26 <_dtoa_r+0xa8e>
 810ab1c:	9907      	ldr	r1, [sp, #28]
 810ab1e:	430b      	orrs	r3, r1
 810ab20:	9906      	ldr	r1, [sp, #24]
 810ab22:	430b      	orrs	r3, r1
 810ab24:	d120      	bne.n	810ab68 <_dtoa_r+0xad0>
 810ab26:	2a00      	cmp	r2, #0
 810ab28:	dded      	ble.n	810ab06 <_dtoa_r+0xa6e>
 810ab2a:	4651      	mov	r1, sl
 810ab2c:	2201      	movs	r2, #1
 810ab2e:	4620      	mov	r0, r4
 810ab30:	f000 fbfe 	bl	810b330 <__lshift>
 810ab34:	4631      	mov	r1, r6
 810ab36:	4682      	mov	sl, r0
 810ab38:	f000 fc66 	bl	810b408 <__mcmp>
 810ab3c:	2800      	cmp	r0, #0
 810ab3e:	dc03      	bgt.n	810ab48 <_dtoa_r+0xab0>
 810ab40:	d1e1      	bne.n	810ab06 <_dtoa_r+0xa6e>
 810ab42:	f019 0f01 	tst.w	r9, #1
 810ab46:	d0de      	beq.n	810ab06 <_dtoa_r+0xa6e>
 810ab48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810ab4c:	d1d8      	bne.n	810ab00 <_dtoa_r+0xa68>
 810ab4e:	9a01      	ldr	r2, [sp, #4]
 810ab50:	2339      	movs	r3, #57	; 0x39
 810ab52:	7013      	strb	r3, [r2, #0]
 810ab54:	462b      	mov	r3, r5
 810ab56:	461d      	mov	r5, r3
 810ab58:	3b01      	subs	r3, #1
 810ab5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810ab5e:	2a39      	cmp	r2, #57	; 0x39
 810ab60:	d06c      	beq.n	810ac3c <_dtoa_r+0xba4>
 810ab62:	3201      	adds	r2, #1
 810ab64:	701a      	strb	r2, [r3, #0]
 810ab66:	e747      	b.n	810a9f8 <_dtoa_r+0x960>
 810ab68:	2a00      	cmp	r2, #0
 810ab6a:	dd07      	ble.n	810ab7c <_dtoa_r+0xae4>
 810ab6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810ab70:	d0ed      	beq.n	810ab4e <_dtoa_r+0xab6>
 810ab72:	9a01      	ldr	r2, [sp, #4]
 810ab74:	f109 0301 	add.w	r3, r9, #1
 810ab78:	7013      	strb	r3, [r2, #0]
 810ab7a:	e73d      	b.n	810a9f8 <_dtoa_r+0x960>
 810ab7c:	9b04      	ldr	r3, [sp, #16]
 810ab7e:	9a08      	ldr	r2, [sp, #32]
 810ab80:	f803 9c01 	strb.w	r9, [r3, #-1]
 810ab84:	4293      	cmp	r3, r2
 810ab86:	d043      	beq.n	810ac10 <_dtoa_r+0xb78>
 810ab88:	4651      	mov	r1, sl
 810ab8a:	2300      	movs	r3, #0
 810ab8c:	220a      	movs	r2, #10
 810ab8e:	4620      	mov	r0, r4
 810ab90:	f000 f9d6 	bl	810af40 <__multadd>
 810ab94:	45b8      	cmp	r8, r7
 810ab96:	4682      	mov	sl, r0
 810ab98:	f04f 0300 	mov.w	r3, #0
 810ab9c:	f04f 020a 	mov.w	r2, #10
 810aba0:	4641      	mov	r1, r8
 810aba2:	4620      	mov	r0, r4
 810aba4:	d107      	bne.n	810abb6 <_dtoa_r+0xb1e>
 810aba6:	f000 f9cb 	bl	810af40 <__multadd>
 810abaa:	4680      	mov	r8, r0
 810abac:	4607      	mov	r7, r0
 810abae:	9b04      	ldr	r3, [sp, #16]
 810abb0:	3301      	adds	r3, #1
 810abb2:	9304      	str	r3, [sp, #16]
 810abb4:	e775      	b.n	810aaa2 <_dtoa_r+0xa0a>
 810abb6:	f000 f9c3 	bl	810af40 <__multadd>
 810abba:	4639      	mov	r1, r7
 810abbc:	4680      	mov	r8, r0
 810abbe:	2300      	movs	r3, #0
 810abc0:	220a      	movs	r2, #10
 810abc2:	4620      	mov	r0, r4
 810abc4:	f000 f9bc 	bl	810af40 <__multadd>
 810abc8:	4607      	mov	r7, r0
 810abca:	e7f0      	b.n	810abae <_dtoa_r+0xb16>
 810abcc:	9b04      	ldr	r3, [sp, #16]
 810abce:	9301      	str	r3, [sp, #4]
 810abd0:	9d00      	ldr	r5, [sp, #0]
 810abd2:	4631      	mov	r1, r6
 810abd4:	4650      	mov	r0, sl
 810abd6:	f7ff f9d5 	bl	8109f84 <quorem>
 810abda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810abde:	9b00      	ldr	r3, [sp, #0]
 810abe0:	f805 9b01 	strb.w	r9, [r5], #1
 810abe4:	1aea      	subs	r2, r5, r3
 810abe6:	9b01      	ldr	r3, [sp, #4]
 810abe8:	4293      	cmp	r3, r2
 810abea:	dd07      	ble.n	810abfc <_dtoa_r+0xb64>
 810abec:	4651      	mov	r1, sl
 810abee:	2300      	movs	r3, #0
 810abf0:	220a      	movs	r2, #10
 810abf2:	4620      	mov	r0, r4
 810abf4:	f000 f9a4 	bl	810af40 <__multadd>
 810abf8:	4682      	mov	sl, r0
 810abfa:	e7ea      	b.n	810abd2 <_dtoa_r+0xb3a>
 810abfc:	9b01      	ldr	r3, [sp, #4]
 810abfe:	2b00      	cmp	r3, #0
 810ac00:	bfc8      	it	gt
 810ac02:	461d      	movgt	r5, r3
 810ac04:	9b00      	ldr	r3, [sp, #0]
 810ac06:	bfd8      	it	le
 810ac08:	2501      	movle	r5, #1
 810ac0a:	441d      	add	r5, r3
 810ac0c:	f04f 0800 	mov.w	r8, #0
 810ac10:	4651      	mov	r1, sl
 810ac12:	2201      	movs	r2, #1
 810ac14:	4620      	mov	r0, r4
 810ac16:	f000 fb8b 	bl	810b330 <__lshift>
 810ac1a:	4631      	mov	r1, r6
 810ac1c:	4682      	mov	sl, r0
 810ac1e:	f000 fbf3 	bl	810b408 <__mcmp>
 810ac22:	2800      	cmp	r0, #0
 810ac24:	dc96      	bgt.n	810ab54 <_dtoa_r+0xabc>
 810ac26:	d102      	bne.n	810ac2e <_dtoa_r+0xb96>
 810ac28:	f019 0f01 	tst.w	r9, #1
 810ac2c:	d192      	bne.n	810ab54 <_dtoa_r+0xabc>
 810ac2e:	462b      	mov	r3, r5
 810ac30:	461d      	mov	r5, r3
 810ac32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810ac36:	2a30      	cmp	r2, #48	; 0x30
 810ac38:	d0fa      	beq.n	810ac30 <_dtoa_r+0xb98>
 810ac3a:	e6dd      	b.n	810a9f8 <_dtoa_r+0x960>
 810ac3c:	9a00      	ldr	r2, [sp, #0]
 810ac3e:	429a      	cmp	r2, r3
 810ac40:	d189      	bne.n	810ab56 <_dtoa_r+0xabe>
 810ac42:	f10b 0b01 	add.w	fp, fp, #1
 810ac46:	2331      	movs	r3, #49	; 0x31
 810ac48:	e796      	b.n	810ab78 <_dtoa_r+0xae0>
 810ac4a:	4b0a      	ldr	r3, [pc, #40]	; (810ac74 <_dtoa_r+0xbdc>)
 810ac4c:	f7ff ba99 	b.w	810a182 <_dtoa_r+0xea>
 810ac50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810ac52:	2b00      	cmp	r3, #0
 810ac54:	f47f aa6d 	bne.w	810a132 <_dtoa_r+0x9a>
 810ac58:	4b07      	ldr	r3, [pc, #28]	; (810ac78 <_dtoa_r+0xbe0>)
 810ac5a:	f7ff ba92 	b.w	810a182 <_dtoa_r+0xea>
 810ac5e:	9b01      	ldr	r3, [sp, #4]
 810ac60:	2b00      	cmp	r3, #0
 810ac62:	dcb5      	bgt.n	810abd0 <_dtoa_r+0xb38>
 810ac64:	9b07      	ldr	r3, [sp, #28]
 810ac66:	2b02      	cmp	r3, #2
 810ac68:	f73f aeb1 	bgt.w	810a9ce <_dtoa_r+0x936>
 810ac6c:	e7b0      	b.n	810abd0 <_dtoa_r+0xb38>
 810ac6e:	bf00      	nop
 810ac70:	081229d1 	.word	0x081229d1
 810ac74:	0812292c 	.word	0x0812292c
 810ac78:	08122955 	.word	0x08122955

0810ac7c <_free_r>:
 810ac7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810ac7e:	2900      	cmp	r1, #0
 810ac80:	d044      	beq.n	810ad0c <_free_r+0x90>
 810ac82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ac86:	9001      	str	r0, [sp, #4]
 810ac88:	2b00      	cmp	r3, #0
 810ac8a:	f1a1 0404 	sub.w	r4, r1, #4
 810ac8e:	bfb8      	it	lt
 810ac90:	18e4      	addlt	r4, r4, r3
 810ac92:	f000 f8e7 	bl	810ae64 <__malloc_lock>
 810ac96:	4a1e      	ldr	r2, [pc, #120]	; (810ad10 <_free_r+0x94>)
 810ac98:	9801      	ldr	r0, [sp, #4]
 810ac9a:	6813      	ldr	r3, [r2, #0]
 810ac9c:	b933      	cbnz	r3, 810acac <_free_r+0x30>
 810ac9e:	6063      	str	r3, [r4, #4]
 810aca0:	6014      	str	r4, [r2, #0]
 810aca2:	b003      	add	sp, #12
 810aca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810aca8:	f000 b8e2 	b.w	810ae70 <__malloc_unlock>
 810acac:	42a3      	cmp	r3, r4
 810acae:	d908      	bls.n	810acc2 <_free_r+0x46>
 810acb0:	6825      	ldr	r5, [r4, #0]
 810acb2:	1961      	adds	r1, r4, r5
 810acb4:	428b      	cmp	r3, r1
 810acb6:	bf01      	itttt	eq
 810acb8:	6819      	ldreq	r1, [r3, #0]
 810acba:	685b      	ldreq	r3, [r3, #4]
 810acbc:	1949      	addeq	r1, r1, r5
 810acbe:	6021      	streq	r1, [r4, #0]
 810acc0:	e7ed      	b.n	810ac9e <_free_r+0x22>
 810acc2:	461a      	mov	r2, r3
 810acc4:	685b      	ldr	r3, [r3, #4]
 810acc6:	b10b      	cbz	r3, 810accc <_free_r+0x50>
 810acc8:	42a3      	cmp	r3, r4
 810acca:	d9fa      	bls.n	810acc2 <_free_r+0x46>
 810accc:	6811      	ldr	r1, [r2, #0]
 810acce:	1855      	adds	r5, r2, r1
 810acd0:	42a5      	cmp	r5, r4
 810acd2:	d10b      	bne.n	810acec <_free_r+0x70>
 810acd4:	6824      	ldr	r4, [r4, #0]
 810acd6:	4421      	add	r1, r4
 810acd8:	1854      	adds	r4, r2, r1
 810acda:	42a3      	cmp	r3, r4
 810acdc:	6011      	str	r1, [r2, #0]
 810acde:	d1e0      	bne.n	810aca2 <_free_r+0x26>
 810ace0:	681c      	ldr	r4, [r3, #0]
 810ace2:	685b      	ldr	r3, [r3, #4]
 810ace4:	6053      	str	r3, [r2, #4]
 810ace6:	440c      	add	r4, r1
 810ace8:	6014      	str	r4, [r2, #0]
 810acea:	e7da      	b.n	810aca2 <_free_r+0x26>
 810acec:	d902      	bls.n	810acf4 <_free_r+0x78>
 810acee:	230c      	movs	r3, #12
 810acf0:	6003      	str	r3, [r0, #0]
 810acf2:	e7d6      	b.n	810aca2 <_free_r+0x26>
 810acf4:	6825      	ldr	r5, [r4, #0]
 810acf6:	1961      	adds	r1, r4, r5
 810acf8:	428b      	cmp	r3, r1
 810acfa:	bf04      	itt	eq
 810acfc:	6819      	ldreq	r1, [r3, #0]
 810acfe:	685b      	ldreq	r3, [r3, #4]
 810ad00:	6063      	str	r3, [r4, #4]
 810ad02:	bf04      	itt	eq
 810ad04:	1949      	addeq	r1, r1, r5
 810ad06:	6021      	streq	r1, [r4, #0]
 810ad08:	6054      	str	r4, [r2, #4]
 810ad0a:	e7ca      	b.n	810aca2 <_free_r+0x26>
 810ad0c:	b003      	add	sp, #12
 810ad0e:	bd30      	pop	{r4, r5, pc}
 810ad10:	10018ad8 	.word	0x10018ad8

0810ad14 <malloc>:
 810ad14:	4b02      	ldr	r3, [pc, #8]	; (810ad20 <malloc+0xc>)
 810ad16:	4601      	mov	r1, r0
 810ad18:	6818      	ldr	r0, [r3, #0]
 810ad1a:	f000 b823 	b.w	810ad64 <_malloc_r>
 810ad1e:	bf00      	nop
 810ad20:	100000d8 	.word	0x100000d8

0810ad24 <sbrk_aligned>:
 810ad24:	b570      	push	{r4, r5, r6, lr}
 810ad26:	4e0e      	ldr	r6, [pc, #56]	; (810ad60 <sbrk_aligned+0x3c>)
 810ad28:	460c      	mov	r4, r1
 810ad2a:	6831      	ldr	r1, [r6, #0]
 810ad2c:	4605      	mov	r5, r0
 810ad2e:	b911      	cbnz	r1, 810ad36 <sbrk_aligned+0x12>
 810ad30:	f001 fe1a 	bl	810c968 <_sbrk_r>
 810ad34:	6030      	str	r0, [r6, #0]
 810ad36:	4621      	mov	r1, r4
 810ad38:	4628      	mov	r0, r5
 810ad3a:	f001 fe15 	bl	810c968 <_sbrk_r>
 810ad3e:	1c43      	adds	r3, r0, #1
 810ad40:	d00a      	beq.n	810ad58 <sbrk_aligned+0x34>
 810ad42:	1cc4      	adds	r4, r0, #3
 810ad44:	f024 0403 	bic.w	r4, r4, #3
 810ad48:	42a0      	cmp	r0, r4
 810ad4a:	d007      	beq.n	810ad5c <sbrk_aligned+0x38>
 810ad4c:	1a21      	subs	r1, r4, r0
 810ad4e:	4628      	mov	r0, r5
 810ad50:	f001 fe0a 	bl	810c968 <_sbrk_r>
 810ad54:	3001      	adds	r0, #1
 810ad56:	d101      	bne.n	810ad5c <sbrk_aligned+0x38>
 810ad58:	f04f 34ff 	mov.w	r4, #4294967295
 810ad5c:	4620      	mov	r0, r4
 810ad5e:	bd70      	pop	{r4, r5, r6, pc}
 810ad60:	10018adc 	.word	0x10018adc

0810ad64 <_malloc_r>:
 810ad64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ad68:	1ccd      	adds	r5, r1, #3
 810ad6a:	f025 0503 	bic.w	r5, r5, #3
 810ad6e:	3508      	adds	r5, #8
 810ad70:	2d0c      	cmp	r5, #12
 810ad72:	bf38      	it	cc
 810ad74:	250c      	movcc	r5, #12
 810ad76:	2d00      	cmp	r5, #0
 810ad78:	4607      	mov	r7, r0
 810ad7a:	db01      	blt.n	810ad80 <_malloc_r+0x1c>
 810ad7c:	42a9      	cmp	r1, r5
 810ad7e:	d905      	bls.n	810ad8c <_malloc_r+0x28>
 810ad80:	230c      	movs	r3, #12
 810ad82:	603b      	str	r3, [r7, #0]
 810ad84:	2600      	movs	r6, #0
 810ad86:	4630      	mov	r0, r6
 810ad88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ad8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810ae60 <_malloc_r+0xfc>
 810ad90:	f000 f868 	bl	810ae64 <__malloc_lock>
 810ad94:	f8d8 3000 	ldr.w	r3, [r8]
 810ad98:	461c      	mov	r4, r3
 810ad9a:	bb5c      	cbnz	r4, 810adf4 <_malloc_r+0x90>
 810ad9c:	4629      	mov	r1, r5
 810ad9e:	4638      	mov	r0, r7
 810ada0:	f7ff ffc0 	bl	810ad24 <sbrk_aligned>
 810ada4:	1c43      	adds	r3, r0, #1
 810ada6:	4604      	mov	r4, r0
 810ada8:	d155      	bne.n	810ae56 <_malloc_r+0xf2>
 810adaa:	f8d8 4000 	ldr.w	r4, [r8]
 810adae:	4626      	mov	r6, r4
 810adb0:	2e00      	cmp	r6, #0
 810adb2:	d145      	bne.n	810ae40 <_malloc_r+0xdc>
 810adb4:	2c00      	cmp	r4, #0
 810adb6:	d048      	beq.n	810ae4a <_malloc_r+0xe6>
 810adb8:	6823      	ldr	r3, [r4, #0]
 810adba:	4631      	mov	r1, r6
 810adbc:	4638      	mov	r0, r7
 810adbe:	eb04 0903 	add.w	r9, r4, r3
 810adc2:	f001 fdd1 	bl	810c968 <_sbrk_r>
 810adc6:	4581      	cmp	r9, r0
 810adc8:	d13f      	bne.n	810ae4a <_malloc_r+0xe6>
 810adca:	6821      	ldr	r1, [r4, #0]
 810adcc:	1a6d      	subs	r5, r5, r1
 810adce:	4629      	mov	r1, r5
 810add0:	4638      	mov	r0, r7
 810add2:	f7ff ffa7 	bl	810ad24 <sbrk_aligned>
 810add6:	3001      	adds	r0, #1
 810add8:	d037      	beq.n	810ae4a <_malloc_r+0xe6>
 810adda:	6823      	ldr	r3, [r4, #0]
 810addc:	442b      	add	r3, r5
 810adde:	6023      	str	r3, [r4, #0]
 810ade0:	f8d8 3000 	ldr.w	r3, [r8]
 810ade4:	2b00      	cmp	r3, #0
 810ade6:	d038      	beq.n	810ae5a <_malloc_r+0xf6>
 810ade8:	685a      	ldr	r2, [r3, #4]
 810adea:	42a2      	cmp	r2, r4
 810adec:	d12b      	bne.n	810ae46 <_malloc_r+0xe2>
 810adee:	2200      	movs	r2, #0
 810adf0:	605a      	str	r2, [r3, #4]
 810adf2:	e00f      	b.n	810ae14 <_malloc_r+0xb0>
 810adf4:	6822      	ldr	r2, [r4, #0]
 810adf6:	1b52      	subs	r2, r2, r5
 810adf8:	d41f      	bmi.n	810ae3a <_malloc_r+0xd6>
 810adfa:	2a0b      	cmp	r2, #11
 810adfc:	d917      	bls.n	810ae2e <_malloc_r+0xca>
 810adfe:	1961      	adds	r1, r4, r5
 810ae00:	42a3      	cmp	r3, r4
 810ae02:	6025      	str	r5, [r4, #0]
 810ae04:	bf18      	it	ne
 810ae06:	6059      	strne	r1, [r3, #4]
 810ae08:	6863      	ldr	r3, [r4, #4]
 810ae0a:	bf08      	it	eq
 810ae0c:	f8c8 1000 	streq.w	r1, [r8]
 810ae10:	5162      	str	r2, [r4, r5]
 810ae12:	604b      	str	r3, [r1, #4]
 810ae14:	4638      	mov	r0, r7
 810ae16:	f104 060b 	add.w	r6, r4, #11
 810ae1a:	f000 f829 	bl	810ae70 <__malloc_unlock>
 810ae1e:	f026 0607 	bic.w	r6, r6, #7
 810ae22:	1d23      	adds	r3, r4, #4
 810ae24:	1af2      	subs	r2, r6, r3
 810ae26:	d0ae      	beq.n	810ad86 <_malloc_r+0x22>
 810ae28:	1b9b      	subs	r3, r3, r6
 810ae2a:	50a3      	str	r3, [r4, r2]
 810ae2c:	e7ab      	b.n	810ad86 <_malloc_r+0x22>
 810ae2e:	42a3      	cmp	r3, r4
 810ae30:	6862      	ldr	r2, [r4, #4]
 810ae32:	d1dd      	bne.n	810adf0 <_malloc_r+0x8c>
 810ae34:	f8c8 2000 	str.w	r2, [r8]
 810ae38:	e7ec      	b.n	810ae14 <_malloc_r+0xb0>
 810ae3a:	4623      	mov	r3, r4
 810ae3c:	6864      	ldr	r4, [r4, #4]
 810ae3e:	e7ac      	b.n	810ad9a <_malloc_r+0x36>
 810ae40:	4634      	mov	r4, r6
 810ae42:	6876      	ldr	r6, [r6, #4]
 810ae44:	e7b4      	b.n	810adb0 <_malloc_r+0x4c>
 810ae46:	4613      	mov	r3, r2
 810ae48:	e7cc      	b.n	810ade4 <_malloc_r+0x80>
 810ae4a:	230c      	movs	r3, #12
 810ae4c:	603b      	str	r3, [r7, #0]
 810ae4e:	4638      	mov	r0, r7
 810ae50:	f000 f80e 	bl	810ae70 <__malloc_unlock>
 810ae54:	e797      	b.n	810ad86 <_malloc_r+0x22>
 810ae56:	6025      	str	r5, [r4, #0]
 810ae58:	e7dc      	b.n	810ae14 <_malloc_r+0xb0>
 810ae5a:	605b      	str	r3, [r3, #4]
 810ae5c:	deff      	udf	#255	; 0xff
 810ae5e:	bf00      	nop
 810ae60:	10018ad8 	.word	0x10018ad8

0810ae64 <__malloc_lock>:
 810ae64:	4801      	ldr	r0, [pc, #4]	; (810ae6c <__malloc_lock+0x8>)
 810ae66:	f7ff b884 	b.w	8109f72 <__retarget_lock_acquire_recursive>
 810ae6a:	bf00      	nop
 810ae6c:	10018ad4 	.word	0x10018ad4

0810ae70 <__malloc_unlock>:
 810ae70:	4801      	ldr	r0, [pc, #4]	; (810ae78 <__malloc_unlock+0x8>)
 810ae72:	f7ff b87f 	b.w	8109f74 <__retarget_lock_release_recursive>
 810ae76:	bf00      	nop
 810ae78:	10018ad4 	.word	0x10018ad4

0810ae7c <_Balloc>:
 810ae7c:	b570      	push	{r4, r5, r6, lr}
 810ae7e:	69c6      	ldr	r6, [r0, #28]
 810ae80:	4604      	mov	r4, r0
 810ae82:	460d      	mov	r5, r1
 810ae84:	b976      	cbnz	r6, 810aea4 <_Balloc+0x28>
 810ae86:	2010      	movs	r0, #16
 810ae88:	f7ff ff44 	bl	810ad14 <malloc>
 810ae8c:	4602      	mov	r2, r0
 810ae8e:	61e0      	str	r0, [r4, #28]
 810ae90:	b920      	cbnz	r0, 810ae9c <_Balloc+0x20>
 810ae92:	4b18      	ldr	r3, [pc, #96]	; (810aef4 <_Balloc+0x78>)
 810ae94:	4818      	ldr	r0, [pc, #96]	; (810aef8 <_Balloc+0x7c>)
 810ae96:	216b      	movs	r1, #107	; 0x6b
 810ae98:	f001 fd8e 	bl	810c9b8 <__assert_func>
 810ae9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810aea0:	6006      	str	r6, [r0, #0]
 810aea2:	60c6      	str	r6, [r0, #12]
 810aea4:	69e6      	ldr	r6, [r4, #28]
 810aea6:	68f3      	ldr	r3, [r6, #12]
 810aea8:	b183      	cbz	r3, 810aecc <_Balloc+0x50>
 810aeaa:	69e3      	ldr	r3, [r4, #28]
 810aeac:	68db      	ldr	r3, [r3, #12]
 810aeae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810aeb2:	b9b8      	cbnz	r0, 810aee4 <_Balloc+0x68>
 810aeb4:	2101      	movs	r1, #1
 810aeb6:	fa01 f605 	lsl.w	r6, r1, r5
 810aeba:	1d72      	adds	r2, r6, #5
 810aebc:	0092      	lsls	r2, r2, #2
 810aebe:	4620      	mov	r0, r4
 810aec0:	f001 fd98 	bl	810c9f4 <_calloc_r>
 810aec4:	b160      	cbz	r0, 810aee0 <_Balloc+0x64>
 810aec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810aeca:	e00e      	b.n	810aeea <_Balloc+0x6e>
 810aecc:	2221      	movs	r2, #33	; 0x21
 810aece:	2104      	movs	r1, #4
 810aed0:	4620      	mov	r0, r4
 810aed2:	f001 fd8f 	bl	810c9f4 <_calloc_r>
 810aed6:	69e3      	ldr	r3, [r4, #28]
 810aed8:	60f0      	str	r0, [r6, #12]
 810aeda:	68db      	ldr	r3, [r3, #12]
 810aedc:	2b00      	cmp	r3, #0
 810aede:	d1e4      	bne.n	810aeaa <_Balloc+0x2e>
 810aee0:	2000      	movs	r0, #0
 810aee2:	bd70      	pop	{r4, r5, r6, pc}
 810aee4:	6802      	ldr	r2, [r0, #0]
 810aee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810aeea:	2300      	movs	r3, #0
 810aeec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810aef0:	e7f7      	b.n	810aee2 <_Balloc+0x66>
 810aef2:	bf00      	nop
 810aef4:	08122962 	.word	0x08122962
 810aef8:	081229e2 	.word	0x081229e2

0810aefc <_Bfree>:
 810aefc:	b570      	push	{r4, r5, r6, lr}
 810aefe:	69c6      	ldr	r6, [r0, #28]
 810af00:	4605      	mov	r5, r0
 810af02:	460c      	mov	r4, r1
 810af04:	b976      	cbnz	r6, 810af24 <_Bfree+0x28>
 810af06:	2010      	movs	r0, #16
 810af08:	f7ff ff04 	bl	810ad14 <malloc>
 810af0c:	4602      	mov	r2, r0
 810af0e:	61e8      	str	r0, [r5, #28]
 810af10:	b920      	cbnz	r0, 810af1c <_Bfree+0x20>
 810af12:	4b09      	ldr	r3, [pc, #36]	; (810af38 <_Bfree+0x3c>)
 810af14:	4809      	ldr	r0, [pc, #36]	; (810af3c <_Bfree+0x40>)
 810af16:	218f      	movs	r1, #143	; 0x8f
 810af18:	f001 fd4e 	bl	810c9b8 <__assert_func>
 810af1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810af20:	6006      	str	r6, [r0, #0]
 810af22:	60c6      	str	r6, [r0, #12]
 810af24:	b13c      	cbz	r4, 810af36 <_Bfree+0x3a>
 810af26:	69eb      	ldr	r3, [r5, #28]
 810af28:	6862      	ldr	r2, [r4, #4]
 810af2a:	68db      	ldr	r3, [r3, #12]
 810af2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810af30:	6021      	str	r1, [r4, #0]
 810af32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810af36:	bd70      	pop	{r4, r5, r6, pc}
 810af38:	08122962 	.word	0x08122962
 810af3c:	081229e2 	.word	0x081229e2

0810af40 <__multadd>:
 810af40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810af44:	690d      	ldr	r5, [r1, #16]
 810af46:	4607      	mov	r7, r0
 810af48:	460c      	mov	r4, r1
 810af4a:	461e      	mov	r6, r3
 810af4c:	f101 0c14 	add.w	ip, r1, #20
 810af50:	2000      	movs	r0, #0
 810af52:	f8dc 3000 	ldr.w	r3, [ip]
 810af56:	b299      	uxth	r1, r3
 810af58:	fb02 6101 	mla	r1, r2, r1, r6
 810af5c:	0c1e      	lsrs	r6, r3, #16
 810af5e:	0c0b      	lsrs	r3, r1, #16
 810af60:	fb02 3306 	mla	r3, r2, r6, r3
 810af64:	b289      	uxth	r1, r1
 810af66:	3001      	adds	r0, #1
 810af68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810af6c:	4285      	cmp	r5, r0
 810af6e:	f84c 1b04 	str.w	r1, [ip], #4
 810af72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810af76:	dcec      	bgt.n	810af52 <__multadd+0x12>
 810af78:	b30e      	cbz	r6, 810afbe <__multadd+0x7e>
 810af7a:	68a3      	ldr	r3, [r4, #8]
 810af7c:	42ab      	cmp	r3, r5
 810af7e:	dc19      	bgt.n	810afb4 <__multadd+0x74>
 810af80:	6861      	ldr	r1, [r4, #4]
 810af82:	4638      	mov	r0, r7
 810af84:	3101      	adds	r1, #1
 810af86:	f7ff ff79 	bl	810ae7c <_Balloc>
 810af8a:	4680      	mov	r8, r0
 810af8c:	b928      	cbnz	r0, 810af9a <__multadd+0x5a>
 810af8e:	4602      	mov	r2, r0
 810af90:	4b0c      	ldr	r3, [pc, #48]	; (810afc4 <__multadd+0x84>)
 810af92:	480d      	ldr	r0, [pc, #52]	; (810afc8 <__multadd+0x88>)
 810af94:	21ba      	movs	r1, #186	; 0xba
 810af96:	f001 fd0f 	bl	810c9b8 <__assert_func>
 810af9a:	6922      	ldr	r2, [r4, #16]
 810af9c:	3202      	adds	r2, #2
 810af9e:	f104 010c 	add.w	r1, r4, #12
 810afa2:	0092      	lsls	r2, r2, #2
 810afa4:	300c      	adds	r0, #12
 810afa6:	f001 fcef 	bl	810c988 <memcpy>
 810afaa:	4621      	mov	r1, r4
 810afac:	4638      	mov	r0, r7
 810afae:	f7ff ffa5 	bl	810aefc <_Bfree>
 810afb2:	4644      	mov	r4, r8
 810afb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810afb8:	3501      	adds	r5, #1
 810afba:	615e      	str	r6, [r3, #20]
 810afbc:	6125      	str	r5, [r4, #16]
 810afbe:	4620      	mov	r0, r4
 810afc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810afc4:	081229d1 	.word	0x081229d1
 810afc8:	081229e2 	.word	0x081229e2

0810afcc <__s2b>:
 810afcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810afd0:	460c      	mov	r4, r1
 810afd2:	4615      	mov	r5, r2
 810afd4:	461f      	mov	r7, r3
 810afd6:	2209      	movs	r2, #9
 810afd8:	3308      	adds	r3, #8
 810afda:	4606      	mov	r6, r0
 810afdc:	fb93 f3f2 	sdiv	r3, r3, r2
 810afe0:	2100      	movs	r1, #0
 810afe2:	2201      	movs	r2, #1
 810afe4:	429a      	cmp	r2, r3
 810afe6:	db09      	blt.n	810affc <__s2b+0x30>
 810afe8:	4630      	mov	r0, r6
 810afea:	f7ff ff47 	bl	810ae7c <_Balloc>
 810afee:	b940      	cbnz	r0, 810b002 <__s2b+0x36>
 810aff0:	4602      	mov	r2, r0
 810aff2:	4b19      	ldr	r3, [pc, #100]	; (810b058 <__s2b+0x8c>)
 810aff4:	4819      	ldr	r0, [pc, #100]	; (810b05c <__s2b+0x90>)
 810aff6:	21d3      	movs	r1, #211	; 0xd3
 810aff8:	f001 fcde 	bl	810c9b8 <__assert_func>
 810affc:	0052      	lsls	r2, r2, #1
 810affe:	3101      	adds	r1, #1
 810b000:	e7f0      	b.n	810afe4 <__s2b+0x18>
 810b002:	9b08      	ldr	r3, [sp, #32]
 810b004:	6143      	str	r3, [r0, #20]
 810b006:	2d09      	cmp	r5, #9
 810b008:	f04f 0301 	mov.w	r3, #1
 810b00c:	6103      	str	r3, [r0, #16]
 810b00e:	dd16      	ble.n	810b03e <__s2b+0x72>
 810b010:	f104 0909 	add.w	r9, r4, #9
 810b014:	46c8      	mov	r8, r9
 810b016:	442c      	add	r4, r5
 810b018:	f818 3b01 	ldrb.w	r3, [r8], #1
 810b01c:	4601      	mov	r1, r0
 810b01e:	3b30      	subs	r3, #48	; 0x30
 810b020:	220a      	movs	r2, #10
 810b022:	4630      	mov	r0, r6
 810b024:	f7ff ff8c 	bl	810af40 <__multadd>
 810b028:	45a0      	cmp	r8, r4
 810b02a:	d1f5      	bne.n	810b018 <__s2b+0x4c>
 810b02c:	f1a5 0408 	sub.w	r4, r5, #8
 810b030:	444c      	add	r4, r9
 810b032:	1b2d      	subs	r5, r5, r4
 810b034:	1963      	adds	r3, r4, r5
 810b036:	42bb      	cmp	r3, r7
 810b038:	db04      	blt.n	810b044 <__s2b+0x78>
 810b03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b03e:	340a      	adds	r4, #10
 810b040:	2509      	movs	r5, #9
 810b042:	e7f6      	b.n	810b032 <__s2b+0x66>
 810b044:	f814 3b01 	ldrb.w	r3, [r4], #1
 810b048:	4601      	mov	r1, r0
 810b04a:	3b30      	subs	r3, #48	; 0x30
 810b04c:	220a      	movs	r2, #10
 810b04e:	4630      	mov	r0, r6
 810b050:	f7ff ff76 	bl	810af40 <__multadd>
 810b054:	e7ee      	b.n	810b034 <__s2b+0x68>
 810b056:	bf00      	nop
 810b058:	081229d1 	.word	0x081229d1
 810b05c:	081229e2 	.word	0x081229e2

0810b060 <__hi0bits>:
 810b060:	0c03      	lsrs	r3, r0, #16
 810b062:	041b      	lsls	r3, r3, #16
 810b064:	b9d3      	cbnz	r3, 810b09c <__hi0bits+0x3c>
 810b066:	0400      	lsls	r0, r0, #16
 810b068:	2310      	movs	r3, #16
 810b06a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810b06e:	bf04      	itt	eq
 810b070:	0200      	lsleq	r0, r0, #8
 810b072:	3308      	addeq	r3, #8
 810b074:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810b078:	bf04      	itt	eq
 810b07a:	0100      	lsleq	r0, r0, #4
 810b07c:	3304      	addeq	r3, #4
 810b07e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810b082:	bf04      	itt	eq
 810b084:	0080      	lsleq	r0, r0, #2
 810b086:	3302      	addeq	r3, #2
 810b088:	2800      	cmp	r0, #0
 810b08a:	db05      	blt.n	810b098 <__hi0bits+0x38>
 810b08c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810b090:	f103 0301 	add.w	r3, r3, #1
 810b094:	bf08      	it	eq
 810b096:	2320      	moveq	r3, #32
 810b098:	4618      	mov	r0, r3
 810b09a:	4770      	bx	lr
 810b09c:	2300      	movs	r3, #0
 810b09e:	e7e4      	b.n	810b06a <__hi0bits+0xa>

0810b0a0 <__lo0bits>:
 810b0a0:	6803      	ldr	r3, [r0, #0]
 810b0a2:	f013 0207 	ands.w	r2, r3, #7
 810b0a6:	d00c      	beq.n	810b0c2 <__lo0bits+0x22>
 810b0a8:	07d9      	lsls	r1, r3, #31
 810b0aa:	d422      	bmi.n	810b0f2 <__lo0bits+0x52>
 810b0ac:	079a      	lsls	r2, r3, #30
 810b0ae:	bf49      	itett	mi
 810b0b0:	085b      	lsrmi	r3, r3, #1
 810b0b2:	089b      	lsrpl	r3, r3, #2
 810b0b4:	6003      	strmi	r3, [r0, #0]
 810b0b6:	2201      	movmi	r2, #1
 810b0b8:	bf5c      	itt	pl
 810b0ba:	6003      	strpl	r3, [r0, #0]
 810b0bc:	2202      	movpl	r2, #2
 810b0be:	4610      	mov	r0, r2
 810b0c0:	4770      	bx	lr
 810b0c2:	b299      	uxth	r1, r3
 810b0c4:	b909      	cbnz	r1, 810b0ca <__lo0bits+0x2a>
 810b0c6:	0c1b      	lsrs	r3, r3, #16
 810b0c8:	2210      	movs	r2, #16
 810b0ca:	b2d9      	uxtb	r1, r3
 810b0cc:	b909      	cbnz	r1, 810b0d2 <__lo0bits+0x32>
 810b0ce:	3208      	adds	r2, #8
 810b0d0:	0a1b      	lsrs	r3, r3, #8
 810b0d2:	0719      	lsls	r1, r3, #28
 810b0d4:	bf04      	itt	eq
 810b0d6:	091b      	lsreq	r3, r3, #4
 810b0d8:	3204      	addeq	r2, #4
 810b0da:	0799      	lsls	r1, r3, #30
 810b0dc:	bf04      	itt	eq
 810b0de:	089b      	lsreq	r3, r3, #2
 810b0e0:	3202      	addeq	r2, #2
 810b0e2:	07d9      	lsls	r1, r3, #31
 810b0e4:	d403      	bmi.n	810b0ee <__lo0bits+0x4e>
 810b0e6:	085b      	lsrs	r3, r3, #1
 810b0e8:	f102 0201 	add.w	r2, r2, #1
 810b0ec:	d003      	beq.n	810b0f6 <__lo0bits+0x56>
 810b0ee:	6003      	str	r3, [r0, #0]
 810b0f0:	e7e5      	b.n	810b0be <__lo0bits+0x1e>
 810b0f2:	2200      	movs	r2, #0
 810b0f4:	e7e3      	b.n	810b0be <__lo0bits+0x1e>
 810b0f6:	2220      	movs	r2, #32
 810b0f8:	e7e1      	b.n	810b0be <__lo0bits+0x1e>
	...

0810b0fc <__i2b>:
 810b0fc:	b510      	push	{r4, lr}
 810b0fe:	460c      	mov	r4, r1
 810b100:	2101      	movs	r1, #1
 810b102:	f7ff febb 	bl	810ae7c <_Balloc>
 810b106:	4602      	mov	r2, r0
 810b108:	b928      	cbnz	r0, 810b116 <__i2b+0x1a>
 810b10a:	4b05      	ldr	r3, [pc, #20]	; (810b120 <__i2b+0x24>)
 810b10c:	4805      	ldr	r0, [pc, #20]	; (810b124 <__i2b+0x28>)
 810b10e:	f240 1145 	movw	r1, #325	; 0x145
 810b112:	f001 fc51 	bl	810c9b8 <__assert_func>
 810b116:	2301      	movs	r3, #1
 810b118:	6144      	str	r4, [r0, #20]
 810b11a:	6103      	str	r3, [r0, #16]
 810b11c:	bd10      	pop	{r4, pc}
 810b11e:	bf00      	nop
 810b120:	081229d1 	.word	0x081229d1
 810b124:	081229e2 	.word	0x081229e2

0810b128 <__multiply>:
 810b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b12c:	4691      	mov	r9, r2
 810b12e:	690a      	ldr	r2, [r1, #16]
 810b130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b134:	429a      	cmp	r2, r3
 810b136:	bfb8      	it	lt
 810b138:	460b      	movlt	r3, r1
 810b13a:	460c      	mov	r4, r1
 810b13c:	bfbc      	itt	lt
 810b13e:	464c      	movlt	r4, r9
 810b140:	4699      	movlt	r9, r3
 810b142:	6927      	ldr	r7, [r4, #16]
 810b144:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810b148:	68a3      	ldr	r3, [r4, #8]
 810b14a:	6861      	ldr	r1, [r4, #4]
 810b14c:	eb07 060a 	add.w	r6, r7, sl
 810b150:	42b3      	cmp	r3, r6
 810b152:	b085      	sub	sp, #20
 810b154:	bfb8      	it	lt
 810b156:	3101      	addlt	r1, #1
 810b158:	f7ff fe90 	bl	810ae7c <_Balloc>
 810b15c:	b930      	cbnz	r0, 810b16c <__multiply+0x44>
 810b15e:	4602      	mov	r2, r0
 810b160:	4b44      	ldr	r3, [pc, #272]	; (810b274 <__multiply+0x14c>)
 810b162:	4845      	ldr	r0, [pc, #276]	; (810b278 <__multiply+0x150>)
 810b164:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810b168:	f001 fc26 	bl	810c9b8 <__assert_func>
 810b16c:	f100 0514 	add.w	r5, r0, #20
 810b170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810b174:	462b      	mov	r3, r5
 810b176:	2200      	movs	r2, #0
 810b178:	4543      	cmp	r3, r8
 810b17a:	d321      	bcc.n	810b1c0 <__multiply+0x98>
 810b17c:	f104 0314 	add.w	r3, r4, #20
 810b180:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810b184:	f109 0314 	add.w	r3, r9, #20
 810b188:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810b18c:	9202      	str	r2, [sp, #8]
 810b18e:	1b3a      	subs	r2, r7, r4
 810b190:	3a15      	subs	r2, #21
 810b192:	f022 0203 	bic.w	r2, r2, #3
 810b196:	3204      	adds	r2, #4
 810b198:	f104 0115 	add.w	r1, r4, #21
 810b19c:	428f      	cmp	r7, r1
 810b19e:	bf38      	it	cc
 810b1a0:	2204      	movcc	r2, #4
 810b1a2:	9201      	str	r2, [sp, #4]
 810b1a4:	9a02      	ldr	r2, [sp, #8]
 810b1a6:	9303      	str	r3, [sp, #12]
 810b1a8:	429a      	cmp	r2, r3
 810b1aa:	d80c      	bhi.n	810b1c6 <__multiply+0x9e>
 810b1ac:	2e00      	cmp	r6, #0
 810b1ae:	dd03      	ble.n	810b1b8 <__multiply+0x90>
 810b1b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810b1b4:	2b00      	cmp	r3, #0
 810b1b6:	d05b      	beq.n	810b270 <__multiply+0x148>
 810b1b8:	6106      	str	r6, [r0, #16]
 810b1ba:	b005      	add	sp, #20
 810b1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b1c0:	f843 2b04 	str.w	r2, [r3], #4
 810b1c4:	e7d8      	b.n	810b178 <__multiply+0x50>
 810b1c6:	f8b3 a000 	ldrh.w	sl, [r3]
 810b1ca:	f1ba 0f00 	cmp.w	sl, #0
 810b1ce:	d024      	beq.n	810b21a <__multiply+0xf2>
 810b1d0:	f104 0e14 	add.w	lr, r4, #20
 810b1d4:	46a9      	mov	r9, r5
 810b1d6:	f04f 0c00 	mov.w	ip, #0
 810b1da:	f85e 2b04 	ldr.w	r2, [lr], #4
 810b1de:	f8d9 1000 	ldr.w	r1, [r9]
 810b1e2:	fa1f fb82 	uxth.w	fp, r2
 810b1e6:	b289      	uxth	r1, r1
 810b1e8:	fb0a 110b 	mla	r1, sl, fp, r1
 810b1ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810b1f0:	f8d9 2000 	ldr.w	r2, [r9]
 810b1f4:	4461      	add	r1, ip
 810b1f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810b1fa:	fb0a c20b 	mla	r2, sl, fp, ip
 810b1fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810b202:	b289      	uxth	r1, r1
 810b204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810b208:	4577      	cmp	r7, lr
 810b20a:	f849 1b04 	str.w	r1, [r9], #4
 810b20e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810b212:	d8e2      	bhi.n	810b1da <__multiply+0xb2>
 810b214:	9a01      	ldr	r2, [sp, #4]
 810b216:	f845 c002 	str.w	ip, [r5, r2]
 810b21a:	9a03      	ldr	r2, [sp, #12]
 810b21c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810b220:	3304      	adds	r3, #4
 810b222:	f1b9 0f00 	cmp.w	r9, #0
 810b226:	d021      	beq.n	810b26c <__multiply+0x144>
 810b228:	6829      	ldr	r1, [r5, #0]
 810b22a:	f104 0c14 	add.w	ip, r4, #20
 810b22e:	46ae      	mov	lr, r5
 810b230:	f04f 0a00 	mov.w	sl, #0
 810b234:	f8bc b000 	ldrh.w	fp, [ip]
 810b238:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810b23c:	fb09 220b 	mla	r2, r9, fp, r2
 810b240:	4452      	add	r2, sl
 810b242:	b289      	uxth	r1, r1
 810b244:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810b248:	f84e 1b04 	str.w	r1, [lr], #4
 810b24c:	f85c 1b04 	ldr.w	r1, [ip], #4
 810b250:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810b254:	f8be 1000 	ldrh.w	r1, [lr]
 810b258:	fb09 110a 	mla	r1, r9, sl, r1
 810b25c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810b260:	4567      	cmp	r7, ip
 810b262:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810b266:	d8e5      	bhi.n	810b234 <__multiply+0x10c>
 810b268:	9a01      	ldr	r2, [sp, #4]
 810b26a:	50a9      	str	r1, [r5, r2]
 810b26c:	3504      	adds	r5, #4
 810b26e:	e799      	b.n	810b1a4 <__multiply+0x7c>
 810b270:	3e01      	subs	r6, #1
 810b272:	e79b      	b.n	810b1ac <__multiply+0x84>
 810b274:	081229d1 	.word	0x081229d1
 810b278:	081229e2 	.word	0x081229e2

0810b27c <__pow5mult>:
 810b27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b280:	4615      	mov	r5, r2
 810b282:	f012 0203 	ands.w	r2, r2, #3
 810b286:	4606      	mov	r6, r0
 810b288:	460f      	mov	r7, r1
 810b28a:	d007      	beq.n	810b29c <__pow5mult+0x20>
 810b28c:	4c25      	ldr	r4, [pc, #148]	; (810b324 <__pow5mult+0xa8>)
 810b28e:	3a01      	subs	r2, #1
 810b290:	2300      	movs	r3, #0
 810b292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b296:	f7ff fe53 	bl	810af40 <__multadd>
 810b29a:	4607      	mov	r7, r0
 810b29c:	10ad      	asrs	r5, r5, #2
 810b29e:	d03d      	beq.n	810b31c <__pow5mult+0xa0>
 810b2a0:	69f4      	ldr	r4, [r6, #28]
 810b2a2:	b97c      	cbnz	r4, 810b2c4 <__pow5mult+0x48>
 810b2a4:	2010      	movs	r0, #16
 810b2a6:	f7ff fd35 	bl	810ad14 <malloc>
 810b2aa:	4602      	mov	r2, r0
 810b2ac:	61f0      	str	r0, [r6, #28]
 810b2ae:	b928      	cbnz	r0, 810b2bc <__pow5mult+0x40>
 810b2b0:	4b1d      	ldr	r3, [pc, #116]	; (810b328 <__pow5mult+0xac>)
 810b2b2:	481e      	ldr	r0, [pc, #120]	; (810b32c <__pow5mult+0xb0>)
 810b2b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 810b2b8:	f001 fb7e 	bl	810c9b8 <__assert_func>
 810b2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b2c0:	6004      	str	r4, [r0, #0]
 810b2c2:	60c4      	str	r4, [r0, #12]
 810b2c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810b2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b2cc:	b94c      	cbnz	r4, 810b2e2 <__pow5mult+0x66>
 810b2ce:	f240 2171 	movw	r1, #625	; 0x271
 810b2d2:	4630      	mov	r0, r6
 810b2d4:	f7ff ff12 	bl	810b0fc <__i2b>
 810b2d8:	2300      	movs	r3, #0
 810b2da:	f8c8 0008 	str.w	r0, [r8, #8]
 810b2de:	4604      	mov	r4, r0
 810b2e0:	6003      	str	r3, [r0, #0]
 810b2e2:	f04f 0900 	mov.w	r9, #0
 810b2e6:	07eb      	lsls	r3, r5, #31
 810b2e8:	d50a      	bpl.n	810b300 <__pow5mult+0x84>
 810b2ea:	4639      	mov	r1, r7
 810b2ec:	4622      	mov	r2, r4
 810b2ee:	4630      	mov	r0, r6
 810b2f0:	f7ff ff1a 	bl	810b128 <__multiply>
 810b2f4:	4639      	mov	r1, r7
 810b2f6:	4680      	mov	r8, r0
 810b2f8:	4630      	mov	r0, r6
 810b2fa:	f7ff fdff 	bl	810aefc <_Bfree>
 810b2fe:	4647      	mov	r7, r8
 810b300:	106d      	asrs	r5, r5, #1
 810b302:	d00b      	beq.n	810b31c <__pow5mult+0xa0>
 810b304:	6820      	ldr	r0, [r4, #0]
 810b306:	b938      	cbnz	r0, 810b318 <__pow5mult+0x9c>
 810b308:	4622      	mov	r2, r4
 810b30a:	4621      	mov	r1, r4
 810b30c:	4630      	mov	r0, r6
 810b30e:	f7ff ff0b 	bl	810b128 <__multiply>
 810b312:	6020      	str	r0, [r4, #0]
 810b314:	f8c0 9000 	str.w	r9, [r0]
 810b318:	4604      	mov	r4, r0
 810b31a:	e7e4      	b.n	810b2e6 <__pow5mult+0x6a>
 810b31c:	4638      	mov	r0, r7
 810b31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b322:	bf00      	nop
 810b324:	08122b30 	.word	0x08122b30
 810b328:	08122962 	.word	0x08122962
 810b32c:	081229e2 	.word	0x081229e2

0810b330 <__lshift>:
 810b330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b334:	460c      	mov	r4, r1
 810b336:	6849      	ldr	r1, [r1, #4]
 810b338:	6923      	ldr	r3, [r4, #16]
 810b33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b33e:	68a3      	ldr	r3, [r4, #8]
 810b340:	4607      	mov	r7, r0
 810b342:	4691      	mov	r9, r2
 810b344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b348:	f108 0601 	add.w	r6, r8, #1
 810b34c:	42b3      	cmp	r3, r6
 810b34e:	db0b      	blt.n	810b368 <__lshift+0x38>
 810b350:	4638      	mov	r0, r7
 810b352:	f7ff fd93 	bl	810ae7c <_Balloc>
 810b356:	4605      	mov	r5, r0
 810b358:	b948      	cbnz	r0, 810b36e <__lshift+0x3e>
 810b35a:	4602      	mov	r2, r0
 810b35c:	4b28      	ldr	r3, [pc, #160]	; (810b400 <__lshift+0xd0>)
 810b35e:	4829      	ldr	r0, [pc, #164]	; (810b404 <__lshift+0xd4>)
 810b360:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810b364:	f001 fb28 	bl	810c9b8 <__assert_func>
 810b368:	3101      	adds	r1, #1
 810b36a:	005b      	lsls	r3, r3, #1
 810b36c:	e7ee      	b.n	810b34c <__lshift+0x1c>
 810b36e:	2300      	movs	r3, #0
 810b370:	f100 0114 	add.w	r1, r0, #20
 810b374:	f100 0210 	add.w	r2, r0, #16
 810b378:	4618      	mov	r0, r3
 810b37a:	4553      	cmp	r3, sl
 810b37c:	db33      	blt.n	810b3e6 <__lshift+0xb6>
 810b37e:	6920      	ldr	r0, [r4, #16]
 810b380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b384:	f104 0314 	add.w	r3, r4, #20
 810b388:	f019 091f 	ands.w	r9, r9, #31
 810b38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810b394:	d02b      	beq.n	810b3ee <__lshift+0xbe>
 810b396:	f1c9 0e20 	rsb	lr, r9, #32
 810b39a:	468a      	mov	sl, r1
 810b39c:	2200      	movs	r2, #0
 810b39e:	6818      	ldr	r0, [r3, #0]
 810b3a0:	fa00 f009 	lsl.w	r0, r0, r9
 810b3a4:	4310      	orrs	r0, r2
 810b3a6:	f84a 0b04 	str.w	r0, [sl], #4
 810b3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 810b3ae:	459c      	cmp	ip, r3
 810b3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 810b3b4:	d8f3      	bhi.n	810b39e <__lshift+0x6e>
 810b3b6:	ebac 0304 	sub.w	r3, ip, r4
 810b3ba:	3b15      	subs	r3, #21
 810b3bc:	f023 0303 	bic.w	r3, r3, #3
 810b3c0:	3304      	adds	r3, #4
 810b3c2:	f104 0015 	add.w	r0, r4, #21
 810b3c6:	4584      	cmp	ip, r0
 810b3c8:	bf38      	it	cc
 810b3ca:	2304      	movcc	r3, #4
 810b3cc:	50ca      	str	r2, [r1, r3]
 810b3ce:	b10a      	cbz	r2, 810b3d4 <__lshift+0xa4>
 810b3d0:	f108 0602 	add.w	r6, r8, #2
 810b3d4:	3e01      	subs	r6, #1
 810b3d6:	4638      	mov	r0, r7
 810b3d8:	612e      	str	r6, [r5, #16]
 810b3da:	4621      	mov	r1, r4
 810b3dc:	f7ff fd8e 	bl	810aefc <_Bfree>
 810b3e0:	4628      	mov	r0, r5
 810b3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 810b3ea:	3301      	adds	r3, #1
 810b3ec:	e7c5      	b.n	810b37a <__lshift+0x4a>
 810b3ee:	3904      	subs	r1, #4
 810b3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 810b3f4:	f841 2f04 	str.w	r2, [r1, #4]!
 810b3f8:	459c      	cmp	ip, r3
 810b3fa:	d8f9      	bhi.n	810b3f0 <__lshift+0xc0>
 810b3fc:	e7ea      	b.n	810b3d4 <__lshift+0xa4>
 810b3fe:	bf00      	nop
 810b400:	081229d1 	.word	0x081229d1
 810b404:	081229e2 	.word	0x081229e2

0810b408 <__mcmp>:
 810b408:	b530      	push	{r4, r5, lr}
 810b40a:	6902      	ldr	r2, [r0, #16]
 810b40c:	690c      	ldr	r4, [r1, #16]
 810b40e:	1b12      	subs	r2, r2, r4
 810b410:	d10e      	bne.n	810b430 <__mcmp+0x28>
 810b412:	f100 0314 	add.w	r3, r0, #20
 810b416:	3114      	adds	r1, #20
 810b418:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b41c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b420:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b424:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b428:	42a5      	cmp	r5, r4
 810b42a:	d003      	beq.n	810b434 <__mcmp+0x2c>
 810b42c:	d305      	bcc.n	810b43a <__mcmp+0x32>
 810b42e:	2201      	movs	r2, #1
 810b430:	4610      	mov	r0, r2
 810b432:	bd30      	pop	{r4, r5, pc}
 810b434:	4283      	cmp	r3, r0
 810b436:	d3f3      	bcc.n	810b420 <__mcmp+0x18>
 810b438:	e7fa      	b.n	810b430 <__mcmp+0x28>
 810b43a:	f04f 32ff 	mov.w	r2, #4294967295
 810b43e:	e7f7      	b.n	810b430 <__mcmp+0x28>

0810b440 <__mdiff>:
 810b440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b444:	460c      	mov	r4, r1
 810b446:	4606      	mov	r6, r0
 810b448:	4611      	mov	r1, r2
 810b44a:	4620      	mov	r0, r4
 810b44c:	4690      	mov	r8, r2
 810b44e:	f7ff ffdb 	bl	810b408 <__mcmp>
 810b452:	1e05      	subs	r5, r0, #0
 810b454:	d110      	bne.n	810b478 <__mdiff+0x38>
 810b456:	4629      	mov	r1, r5
 810b458:	4630      	mov	r0, r6
 810b45a:	f7ff fd0f 	bl	810ae7c <_Balloc>
 810b45e:	b930      	cbnz	r0, 810b46e <__mdiff+0x2e>
 810b460:	4b3a      	ldr	r3, [pc, #232]	; (810b54c <__mdiff+0x10c>)
 810b462:	4602      	mov	r2, r0
 810b464:	f240 2137 	movw	r1, #567	; 0x237
 810b468:	4839      	ldr	r0, [pc, #228]	; (810b550 <__mdiff+0x110>)
 810b46a:	f001 faa5 	bl	810c9b8 <__assert_func>
 810b46e:	2301      	movs	r3, #1
 810b470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b478:	bfa4      	itt	ge
 810b47a:	4643      	movge	r3, r8
 810b47c:	46a0      	movge	r8, r4
 810b47e:	4630      	mov	r0, r6
 810b480:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810b484:	bfa6      	itte	ge
 810b486:	461c      	movge	r4, r3
 810b488:	2500      	movge	r5, #0
 810b48a:	2501      	movlt	r5, #1
 810b48c:	f7ff fcf6 	bl	810ae7c <_Balloc>
 810b490:	b920      	cbnz	r0, 810b49c <__mdiff+0x5c>
 810b492:	4b2e      	ldr	r3, [pc, #184]	; (810b54c <__mdiff+0x10c>)
 810b494:	4602      	mov	r2, r0
 810b496:	f240 2145 	movw	r1, #581	; 0x245
 810b49a:	e7e5      	b.n	810b468 <__mdiff+0x28>
 810b49c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810b4a0:	6926      	ldr	r6, [r4, #16]
 810b4a2:	60c5      	str	r5, [r0, #12]
 810b4a4:	f104 0914 	add.w	r9, r4, #20
 810b4a8:	f108 0514 	add.w	r5, r8, #20
 810b4ac:	f100 0e14 	add.w	lr, r0, #20
 810b4b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810b4b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810b4b8:	f108 0210 	add.w	r2, r8, #16
 810b4bc:	46f2      	mov	sl, lr
 810b4be:	2100      	movs	r1, #0
 810b4c0:	f859 3b04 	ldr.w	r3, [r9], #4
 810b4c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b4c8:	fa11 f88b 	uxtah	r8, r1, fp
 810b4cc:	b299      	uxth	r1, r3
 810b4ce:	0c1b      	lsrs	r3, r3, #16
 810b4d0:	eba8 0801 	sub.w	r8, r8, r1
 810b4d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b4d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b4dc:	fa1f f888 	uxth.w	r8, r8
 810b4e0:	1419      	asrs	r1, r3, #16
 810b4e2:	454e      	cmp	r6, r9
 810b4e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b4e8:	f84a 3b04 	str.w	r3, [sl], #4
 810b4ec:	d8e8      	bhi.n	810b4c0 <__mdiff+0x80>
 810b4ee:	1b33      	subs	r3, r6, r4
 810b4f0:	3b15      	subs	r3, #21
 810b4f2:	f023 0303 	bic.w	r3, r3, #3
 810b4f6:	3304      	adds	r3, #4
 810b4f8:	3415      	adds	r4, #21
 810b4fa:	42a6      	cmp	r6, r4
 810b4fc:	bf38      	it	cc
 810b4fe:	2304      	movcc	r3, #4
 810b500:	441d      	add	r5, r3
 810b502:	4473      	add	r3, lr
 810b504:	469e      	mov	lr, r3
 810b506:	462e      	mov	r6, r5
 810b508:	4566      	cmp	r6, ip
 810b50a:	d30e      	bcc.n	810b52a <__mdiff+0xea>
 810b50c:	f10c 0203 	add.w	r2, ip, #3
 810b510:	1b52      	subs	r2, r2, r5
 810b512:	f022 0203 	bic.w	r2, r2, #3
 810b516:	3d03      	subs	r5, #3
 810b518:	45ac      	cmp	ip, r5
 810b51a:	bf38      	it	cc
 810b51c:	2200      	movcc	r2, #0
 810b51e:	4413      	add	r3, r2
 810b520:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810b524:	b17a      	cbz	r2, 810b546 <__mdiff+0x106>
 810b526:	6107      	str	r7, [r0, #16]
 810b528:	e7a4      	b.n	810b474 <__mdiff+0x34>
 810b52a:	f856 8b04 	ldr.w	r8, [r6], #4
 810b52e:	fa11 f288 	uxtah	r2, r1, r8
 810b532:	1414      	asrs	r4, r2, #16
 810b534:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810b538:	b292      	uxth	r2, r2
 810b53a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810b53e:	f84e 2b04 	str.w	r2, [lr], #4
 810b542:	1421      	asrs	r1, r4, #16
 810b544:	e7e0      	b.n	810b508 <__mdiff+0xc8>
 810b546:	3f01      	subs	r7, #1
 810b548:	e7ea      	b.n	810b520 <__mdiff+0xe0>
 810b54a:	bf00      	nop
 810b54c:	081229d1 	.word	0x081229d1
 810b550:	081229e2 	.word	0x081229e2

0810b554 <__ulp>:
 810b554:	b082      	sub	sp, #8
 810b556:	ed8d 0b00 	vstr	d0, [sp]
 810b55a:	9a01      	ldr	r2, [sp, #4]
 810b55c:	4b0f      	ldr	r3, [pc, #60]	; (810b59c <__ulp+0x48>)
 810b55e:	4013      	ands	r3, r2
 810b560:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810b564:	2b00      	cmp	r3, #0
 810b566:	dc08      	bgt.n	810b57a <__ulp+0x26>
 810b568:	425b      	negs	r3, r3
 810b56a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810b56e:	ea4f 5223 	mov.w	r2, r3, asr #20
 810b572:	da04      	bge.n	810b57e <__ulp+0x2a>
 810b574:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810b578:	4113      	asrs	r3, r2
 810b57a:	2200      	movs	r2, #0
 810b57c:	e008      	b.n	810b590 <__ulp+0x3c>
 810b57e:	f1a2 0314 	sub.w	r3, r2, #20
 810b582:	2b1e      	cmp	r3, #30
 810b584:	bfda      	itte	le
 810b586:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810b58a:	40da      	lsrle	r2, r3
 810b58c:	2201      	movgt	r2, #1
 810b58e:	2300      	movs	r3, #0
 810b590:	4619      	mov	r1, r3
 810b592:	4610      	mov	r0, r2
 810b594:	ec41 0b10 	vmov	d0, r0, r1
 810b598:	b002      	add	sp, #8
 810b59a:	4770      	bx	lr
 810b59c:	7ff00000 	.word	0x7ff00000

0810b5a0 <__b2d>:
 810b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b5a4:	6906      	ldr	r6, [r0, #16]
 810b5a6:	f100 0814 	add.w	r8, r0, #20
 810b5aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810b5ae:	1f37      	subs	r7, r6, #4
 810b5b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810b5b4:	4610      	mov	r0, r2
 810b5b6:	f7ff fd53 	bl	810b060 <__hi0bits>
 810b5ba:	f1c0 0320 	rsb	r3, r0, #32
 810b5be:	280a      	cmp	r0, #10
 810b5c0:	600b      	str	r3, [r1, #0]
 810b5c2:	491b      	ldr	r1, [pc, #108]	; (810b630 <__b2d+0x90>)
 810b5c4:	dc15      	bgt.n	810b5f2 <__b2d+0x52>
 810b5c6:	f1c0 0c0b 	rsb	ip, r0, #11
 810b5ca:	fa22 f30c 	lsr.w	r3, r2, ip
 810b5ce:	45b8      	cmp	r8, r7
 810b5d0:	ea43 0501 	orr.w	r5, r3, r1
 810b5d4:	bf34      	ite	cc
 810b5d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810b5da:	2300      	movcs	r3, #0
 810b5dc:	3015      	adds	r0, #21
 810b5de:	fa02 f000 	lsl.w	r0, r2, r0
 810b5e2:	fa23 f30c 	lsr.w	r3, r3, ip
 810b5e6:	4303      	orrs	r3, r0
 810b5e8:	461c      	mov	r4, r3
 810b5ea:	ec45 4b10 	vmov	d0, r4, r5
 810b5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b5f2:	45b8      	cmp	r8, r7
 810b5f4:	bf3a      	itte	cc
 810b5f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810b5fa:	f1a6 0708 	subcc.w	r7, r6, #8
 810b5fe:	2300      	movcs	r3, #0
 810b600:	380b      	subs	r0, #11
 810b602:	d012      	beq.n	810b62a <__b2d+0x8a>
 810b604:	f1c0 0120 	rsb	r1, r0, #32
 810b608:	fa23 f401 	lsr.w	r4, r3, r1
 810b60c:	4082      	lsls	r2, r0
 810b60e:	4322      	orrs	r2, r4
 810b610:	4547      	cmp	r7, r8
 810b612:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810b616:	bf8c      	ite	hi
 810b618:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810b61c:	2200      	movls	r2, #0
 810b61e:	4083      	lsls	r3, r0
 810b620:	40ca      	lsrs	r2, r1
 810b622:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810b626:	4313      	orrs	r3, r2
 810b628:	e7de      	b.n	810b5e8 <__b2d+0x48>
 810b62a:	ea42 0501 	orr.w	r5, r2, r1
 810b62e:	e7db      	b.n	810b5e8 <__b2d+0x48>
 810b630:	3ff00000 	.word	0x3ff00000

0810b634 <__d2b>:
 810b634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b638:	460f      	mov	r7, r1
 810b63a:	2101      	movs	r1, #1
 810b63c:	ec59 8b10 	vmov	r8, r9, d0
 810b640:	4616      	mov	r6, r2
 810b642:	f7ff fc1b 	bl	810ae7c <_Balloc>
 810b646:	4604      	mov	r4, r0
 810b648:	b930      	cbnz	r0, 810b658 <__d2b+0x24>
 810b64a:	4602      	mov	r2, r0
 810b64c:	4b24      	ldr	r3, [pc, #144]	; (810b6e0 <__d2b+0xac>)
 810b64e:	4825      	ldr	r0, [pc, #148]	; (810b6e4 <__d2b+0xb0>)
 810b650:	f240 310f 	movw	r1, #783	; 0x30f
 810b654:	f001 f9b0 	bl	810c9b8 <__assert_func>
 810b658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810b65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810b660:	bb2d      	cbnz	r5, 810b6ae <__d2b+0x7a>
 810b662:	9301      	str	r3, [sp, #4]
 810b664:	f1b8 0300 	subs.w	r3, r8, #0
 810b668:	d026      	beq.n	810b6b8 <__d2b+0x84>
 810b66a:	4668      	mov	r0, sp
 810b66c:	9300      	str	r3, [sp, #0]
 810b66e:	f7ff fd17 	bl	810b0a0 <__lo0bits>
 810b672:	e9dd 1200 	ldrd	r1, r2, [sp]
 810b676:	b1e8      	cbz	r0, 810b6b4 <__d2b+0x80>
 810b678:	f1c0 0320 	rsb	r3, r0, #32
 810b67c:	fa02 f303 	lsl.w	r3, r2, r3
 810b680:	430b      	orrs	r3, r1
 810b682:	40c2      	lsrs	r2, r0
 810b684:	6163      	str	r3, [r4, #20]
 810b686:	9201      	str	r2, [sp, #4]
 810b688:	9b01      	ldr	r3, [sp, #4]
 810b68a:	61a3      	str	r3, [r4, #24]
 810b68c:	2b00      	cmp	r3, #0
 810b68e:	bf14      	ite	ne
 810b690:	2202      	movne	r2, #2
 810b692:	2201      	moveq	r2, #1
 810b694:	6122      	str	r2, [r4, #16]
 810b696:	b1bd      	cbz	r5, 810b6c8 <__d2b+0x94>
 810b698:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b69c:	4405      	add	r5, r0
 810b69e:	603d      	str	r5, [r7, #0]
 810b6a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b6a4:	6030      	str	r0, [r6, #0]
 810b6a6:	4620      	mov	r0, r4
 810b6a8:	b003      	add	sp, #12
 810b6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b6ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b6b2:	e7d6      	b.n	810b662 <__d2b+0x2e>
 810b6b4:	6161      	str	r1, [r4, #20]
 810b6b6:	e7e7      	b.n	810b688 <__d2b+0x54>
 810b6b8:	a801      	add	r0, sp, #4
 810b6ba:	f7ff fcf1 	bl	810b0a0 <__lo0bits>
 810b6be:	9b01      	ldr	r3, [sp, #4]
 810b6c0:	6163      	str	r3, [r4, #20]
 810b6c2:	3020      	adds	r0, #32
 810b6c4:	2201      	movs	r2, #1
 810b6c6:	e7e5      	b.n	810b694 <__d2b+0x60>
 810b6c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b6cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b6d0:	6038      	str	r0, [r7, #0]
 810b6d2:	6918      	ldr	r0, [r3, #16]
 810b6d4:	f7ff fcc4 	bl	810b060 <__hi0bits>
 810b6d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b6dc:	e7e2      	b.n	810b6a4 <__d2b+0x70>
 810b6de:	bf00      	nop
 810b6e0:	081229d1 	.word	0x081229d1
 810b6e4:	081229e2 	.word	0x081229e2

0810b6e8 <__ratio>:
 810b6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b6ec:	4688      	mov	r8, r1
 810b6ee:	4669      	mov	r1, sp
 810b6f0:	4681      	mov	r9, r0
 810b6f2:	f7ff ff55 	bl	810b5a0 <__b2d>
 810b6f6:	a901      	add	r1, sp, #4
 810b6f8:	4640      	mov	r0, r8
 810b6fa:	ec55 4b10 	vmov	r4, r5, d0
 810b6fe:	f7ff ff4f 	bl	810b5a0 <__b2d>
 810b702:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b706:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b70a:	eba3 0c02 	sub.w	ip, r3, r2
 810b70e:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b712:	1a9b      	subs	r3, r3, r2
 810b714:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b718:	ec51 0b10 	vmov	r0, r1, d0
 810b71c:	2b00      	cmp	r3, #0
 810b71e:	bfd6      	itet	le
 810b720:	460a      	movle	r2, r1
 810b722:	462a      	movgt	r2, r5
 810b724:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b728:	468b      	mov	fp, r1
 810b72a:	462f      	mov	r7, r5
 810b72c:	bfd4      	ite	le
 810b72e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b732:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b736:	4620      	mov	r0, r4
 810b738:	ee10 2a10 	vmov	r2, s0
 810b73c:	465b      	mov	r3, fp
 810b73e:	4639      	mov	r1, r7
 810b740:	f7f5 f90c 	bl	810095c <__aeabi_ddiv>
 810b744:	ec41 0b10 	vmov	d0, r0, r1
 810b748:	b003      	add	sp, #12
 810b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b74e <__copybits>:
 810b74e:	3901      	subs	r1, #1
 810b750:	b570      	push	{r4, r5, r6, lr}
 810b752:	1149      	asrs	r1, r1, #5
 810b754:	6914      	ldr	r4, [r2, #16]
 810b756:	3101      	adds	r1, #1
 810b758:	f102 0314 	add.w	r3, r2, #20
 810b75c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b760:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b764:	1f05      	subs	r5, r0, #4
 810b766:	42a3      	cmp	r3, r4
 810b768:	d30c      	bcc.n	810b784 <__copybits+0x36>
 810b76a:	1aa3      	subs	r3, r4, r2
 810b76c:	3b11      	subs	r3, #17
 810b76e:	f023 0303 	bic.w	r3, r3, #3
 810b772:	3211      	adds	r2, #17
 810b774:	42a2      	cmp	r2, r4
 810b776:	bf88      	it	hi
 810b778:	2300      	movhi	r3, #0
 810b77a:	4418      	add	r0, r3
 810b77c:	2300      	movs	r3, #0
 810b77e:	4288      	cmp	r0, r1
 810b780:	d305      	bcc.n	810b78e <__copybits+0x40>
 810b782:	bd70      	pop	{r4, r5, r6, pc}
 810b784:	f853 6b04 	ldr.w	r6, [r3], #4
 810b788:	f845 6f04 	str.w	r6, [r5, #4]!
 810b78c:	e7eb      	b.n	810b766 <__copybits+0x18>
 810b78e:	f840 3b04 	str.w	r3, [r0], #4
 810b792:	e7f4      	b.n	810b77e <__copybits+0x30>

0810b794 <__any_on>:
 810b794:	f100 0214 	add.w	r2, r0, #20
 810b798:	6900      	ldr	r0, [r0, #16]
 810b79a:	114b      	asrs	r3, r1, #5
 810b79c:	4298      	cmp	r0, r3
 810b79e:	b510      	push	{r4, lr}
 810b7a0:	db11      	blt.n	810b7c6 <__any_on+0x32>
 810b7a2:	dd0a      	ble.n	810b7ba <__any_on+0x26>
 810b7a4:	f011 011f 	ands.w	r1, r1, #31
 810b7a8:	d007      	beq.n	810b7ba <__any_on+0x26>
 810b7aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b7ae:	fa24 f001 	lsr.w	r0, r4, r1
 810b7b2:	fa00 f101 	lsl.w	r1, r0, r1
 810b7b6:	428c      	cmp	r4, r1
 810b7b8:	d10b      	bne.n	810b7d2 <__any_on+0x3e>
 810b7ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b7be:	4293      	cmp	r3, r2
 810b7c0:	d803      	bhi.n	810b7ca <__any_on+0x36>
 810b7c2:	2000      	movs	r0, #0
 810b7c4:	bd10      	pop	{r4, pc}
 810b7c6:	4603      	mov	r3, r0
 810b7c8:	e7f7      	b.n	810b7ba <__any_on+0x26>
 810b7ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b7ce:	2900      	cmp	r1, #0
 810b7d0:	d0f5      	beq.n	810b7be <__any_on+0x2a>
 810b7d2:	2001      	movs	r0, #1
 810b7d4:	e7f6      	b.n	810b7c4 <__any_on+0x30>

0810b7d6 <sulp>:
 810b7d6:	b570      	push	{r4, r5, r6, lr}
 810b7d8:	4604      	mov	r4, r0
 810b7da:	460d      	mov	r5, r1
 810b7dc:	ec45 4b10 	vmov	d0, r4, r5
 810b7e0:	4616      	mov	r6, r2
 810b7e2:	f7ff feb7 	bl	810b554 <__ulp>
 810b7e6:	ec51 0b10 	vmov	r0, r1, d0
 810b7ea:	b17e      	cbz	r6, 810b80c <sulp+0x36>
 810b7ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810b7f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810b7f4:	2b00      	cmp	r3, #0
 810b7f6:	dd09      	ble.n	810b80c <sulp+0x36>
 810b7f8:	051b      	lsls	r3, r3, #20
 810b7fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810b7fe:	2400      	movs	r4, #0
 810b800:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810b804:	4622      	mov	r2, r4
 810b806:	462b      	mov	r3, r5
 810b808:	f7f4 ff7e 	bl	8100708 <__aeabi_dmul>
 810b80c:	bd70      	pop	{r4, r5, r6, pc}
	...

0810b810 <_strtod_l>:
 810b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b814:	ed2d 8b02 	vpush	{d8}
 810b818:	b09b      	sub	sp, #108	; 0x6c
 810b81a:	4604      	mov	r4, r0
 810b81c:	9213      	str	r2, [sp, #76]	; 0x4c
 810b81e:	2200      	movs	r2, #0
 810b820:	9216      	str	r2, [sp, #88]	; 0x58
 810b822:	460d      	mov	r5, r1
 810b824:	f04f 0800 	mov.w	r8, #0
 810b828:	f04f 0900 	mov.w	r9, #0
 810b82c:	460a      	mov	r2, r1
 810b82e:	9215      	str	r2, [sp, #84]	; 0x54
 810b830:	7811      	ldrb	r1, [r2, #0]
 810b832:	292b      	cmp	r1, #43	; 0x2b
 810b834:	d04c      	beq.n	810b8d0 <_strtod_l+0xc0>
 810b836:	d83a      	bhi.n	810b8ae <_strtod_l+0x9e>
 810b838:	290d      	cmp	r1, #13
 810b83a:	d834      	bhi.n	810b8a6 <_strtod_l+0x96>
 810b83c:	2908      	cmp	r1, #8
 810b83e:	d834      	bhi.n	810b8aa <_strtod_l+0x9a>
 810b840:	2900      	cmp	r1, #0
 810b842:	d03d      	beq.n	810b8c0 <_strtod_l+0xb0>
 810b844:	2200      	movs	r2, #0
 810b846:	920a      	str	r2, [sp, #40]	; 0x28
 810b848:	9e15      	ldr	r6, [sp, #84]	; 0x54
 810b84a:	7832      	ldrb	r2, [r6, #0]
 810b84c:	2a30      	cmp	r2, #48	; 0x30
 810b84e:	f040 80b4 	bne.w	810b9ba <_strtod_l+0x1aa>
 810b852:	7872      	ldrb	r2, [r6, #1]
 810b854:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 810b858:	2a58      	cmp	r2, #88	; 0x58
 810b85a:	d170      	bne.n	810b93e <_strtod_l+0x12e>
 810b85c:	9302      	str	r3, [sp, #8]
 810b85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b860:	9301      	str	r3, [sp, #4]
 810b862:	ab16      	add	r3, sp, #88	; 0x58
 810b864:	9300      	str	r3, [sp, #0]
 810b866:	4a8e      	ldr	r2, [pc, #568]	; (810baa0 <_strtod_l+0x290>)
 810b868:	ab17      	add	r3, sp, #92	; 0x5c
 810b86a:	a915      	add	r1, sp, #84	; 0x54
 810b86c:	4620      	mov	r0, r4
 810b86e:	f001 f93f 	bl	810caf0 <__gethex>
 810b872:	f010 070f 	ands.w	r7, r0, #15
 810b876:	4605      	mov	r5, r0
 810b878:	d005      	beq.n	810b886 <_strtod_l+0x76>
 810b87a:	2f06      	cmp	r7, #6
 810b87c:	d12a      	bne.n	810b8d4 <_strtod_l+0xc4>
 810b87e:	3601      	adds	r6, #1
 810b880:	2300      	movs	r3, #0
 810b882:	9615      	str	r6, [sp, #84]	; 0x54
 810b884:	930a      	str	r3, [sp, #40]	; 0x28
 810b886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810b888:	2b00      	cmp	r3, #0
 810b88a:	f040 857f 	bne.w	810c38c <_strtod_l+0xb7c>
 810b88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b890:	b1db      	cbz	r3, 810b8ca <_strtod_l+0xba>
 810b892:	4642      	mov	r2, r8
 810b894:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810b898:	ec43 2b10 	vmov	d0, r2, r3
 810b89c:	b01b      	add	sp, #108	; 0x6c
 810b89e:	ecbd 8b02 	vpop	{d8}
 810b8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b8a6:	2920      	cmp	r1, #32
 810b8a8:	d1cc      	bne.n	810b844 <_strtod_l+0x34>
 810b8aa:	3201      	adds	r2, #1
 810b8ac:	e7bf      	b.n	810b82e <_strtod_l+0x1e>
 810b8ae:	292d      	cmp	r1, #45	; 0x2d
 810b8b0:	d1c8      	bne.n	810b844 <_strtod_l+0x34>
 810b8b2:	2101      	movs	r1, #1
 810b8b4:	910a      	str	r1, [sp, #40]	; 0x28
 810b8b6:	1c51      	adds	r1, r2, #1
 810b8b8:	9115      	str	r1, [sp, #84]	; 0x54
 810b8ba:	7852      	ldrb	r2, [r2, #1]
 810b8bc:	2a00      	cmp	r2, #0
 810b8be:	d1c3      	bne.n	810b848 <_strtod_l+0x38>
 810b8c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810b8c2:	9515      	str	r5, [sp, #84]	; 0x54
 810b8c4:	2b00      	cmp	r3, #0
 810b8c6:	f040 855f 	bne.w	810c388 <_strtod_l+0xb78>
 810b8ca:	4642      	mov	r2, r8
 810b8cc:	464b      	mov	r3, r9
 810b8ce:	e7e3      	b.n	810b898 <_strtod_l+0x88>
 810b8d0:	2100      	movs	r1, #0
 810b8d2:	e7ef      	b.n	810b8b4 <_strtod_l+0xa4>
 810b8d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810b8d6:	b13a      	cbz	r2, 810b8e8 <_strtod_l+0xd8>
 810b8d8:	2135      	movs	r1, #53	; 0x35
 810b8da:	a818      	add	r0, sp, #96	; 0x60
 810b8dc:	f7ff ff37 	bl	810b74e <__copybits>
 810b8e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 810b8e2:	4620      	mov	r0, r4
 810b8e4:	f7ff fb0a 	bl	810aefc <_Bfree>
 810b8e8:	3f01      	subs	r7, #1
 810b8ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810b8ec:	2f04      	cmp	r7, #4
 810b8ee:	d806      	bhi.n	810b8fe <_strtod_l+0xee>
 810b8f0:	e8df f007 	tbb	[pc, r7]
 810b8f4:	201d0314 	.word	0x201d0314
 810b8f8:	14          	.byte	0x14
 810b8f9:	00          	.byte	0x00
 810b8fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810b8fe:	05e9      	lsls	r1, r5, #23
 810b900:	bf48      	it	mi
 810b902:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810b906:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810b90a:	0d1b      	lsrs	r3, r3, #20
 810b90c:	051b      	lsls	r3, r3, #20
 810b90e:	2b00      	cmp	r3, #0
 810b910:	d1b9      	bne.n	810b886 <_strtod_l+0x76>
 810b912:	f7fe fb03 	bl	8109f1c <__errno>
 810b916:	2322      	movs	r3, #34	; 0x22
 810b918:	6003      	str	r3, [r0, #0]
 810b91a:	e7b4      	b.n	810b886 <_strtod_l+0x76>
 810b91c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810b920:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810b924:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810b928:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810b92c:	e7e7      	b.n	810b8fe <_strtod_l+0xee>
 810b92e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810baa8 <_strtod_l+0x298>
 810b932:	e7e4      	b.n	810b8fe <_strtod_l+0xee>
 810b934:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810b938:	f04f 38ff 	mov.w	r8, #4294967295
 810b93c:	e7df      	b.n	810b8fe <_strtod_l+0xee>
 810b93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b940:	1c5a      	adds	r2, r3, #1
 810b942:	9215      	str	r2, [sp, #84]	; 0x54
 810b944:	785b      	ldrb	r3, [r3, #1]
 810b946:	2b30      	cmp	r3, #48	; 0x30
 810b948:	d0f9      	beq.n	810b93e <_strtod_l+0x12e>
 810b94a:	2b00      	cmp	r3, #0
 810b94c:	d09b      	beq.n	810b886 <_strtod_l+0x76>
 810b94e:	2301      	movs	r3, #1
 810b950:	f04f 0a00 	mov.w	sl, #0
 810b954:	9304      	str	r3, [sp, #16]
 810b956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b958:	930b      	str	r3, [sp, #44]	; 0x2c
 810b95a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810b95e:	46d3      	mov	fp, sl
 810b960:	220a      	movs	r2, #10
 810b962:	9815      	ldr	r0, [sp, #84]	; 0x54
 810b964:	7806      	ldrb	r6, [r0, #0]
 810b966:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810b96a:	b2d9      	uxtb	r1, r3
 810b96c:	2909      	cmp	r1, #9
 810b96e:	d926      	bls.n	810b9be <_strtod_l+0x1ae>
 810b970:	494c      	ldr	r1, [pc, #304]	; (810baa4 <_strtod_l+0x294>)
 810b972:	2201      	movs	r2, #1
 810b974:	f000 ffe6 	bl	810c944 <strncmp>
 810b978:	2800      	cmp	r0, #0
 810b97a:	d030      	beq.n	810b9de <_strtod_l+0x1ce>
 810b97c:	2000      	movs	r0, #0
 810b97e:	4632      	mov	r2, r6
 810b980:	9005      	str	r0, [sp, #20]
 810b982:	465e      	mov	r6, fp
 810b984:	4603      	mov	r3, r0
 810b986:	2a65      	cmp	r2, #101	; 0x65
 810b988:	d001      	beq.n	810b98e <_strtod_l+0x17e>
 810b98a:	2a45      	cmp	r2, #69	; 0x45
 810b98c:	d113      	bne.n	810b9b6 <_strtod_l+0x1a6>
 810b98e:	b91e      	cbnz	r6, 810b998 <_strtod_l+0x188>
 810b990:	9a04      	ldr	r2, [sp, #16]
 810b992:	4302      	orrs	r2, r0
 810b994:	d094      	beq.n	810b8c0 <_strtod_l+0xb0>
 810b996:	2600      	movs	r6, #0
 810b998:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810b99a:	1c6a      	adds	r2, r5, #1
 810b99c:	9215      	str	r2, [sp, #84]	; 0x54
 810b99e:	786a      	ldrb	r2, [r5, #1]
 810b9a0:	2a2b      	cmp	r2, #43	; 0x2b
 810b9a2:	d074      	beq.n	810ba8e <_strtod_l+0x27e>
 810b9a4:	2a2d      	cmp	r2, #45	; 0x2d
 810b9a6:	d078      	beq.n	810ba9a <_strtod_l+0x28a>
 810b9a8:	f04f 0c00 	mov.w	ip, #0
 810b9ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810b9b0:	2909      	cmp	r1, #9
 810b9b2:	d97f      	bls.n	810bab4 <_strtod_l+0x2a4>
 810b9b4:	9515      	str	r5, [sp, #84]	; 0x54
 810b9b6:	2700      	movs	r7, #0
 810b9b8:	e09e      	b.n	810baf8 <_strtod_l+0x2e8>
 810b9ba:	2300      	movs	r3, #0
 810b9bc:	e7c8      	b.n	810b950 <_strtod_l+0x140>
 810b9be:	f1bb 0f08 	cmp.w	fp, #8
 810b9c2:	bfd8      	it	le
 810b9c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810b9c6:	f100 0001 	add.w	r0, r0, #1
 810b9ca:	bfda      	itte	le
 810b9cc:	fb02 3301 	mlale	r3, r2, r1, r3
 810b9d0:	9309      	strle	r3, [sp, #36]	; 0x24
 810b9d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810b9d6:	f10b 0b01 	add.w	fp, fp, #1
 810b9da:	9015      	str	r0, [sp, #84]	; 0x54
 810b9dc:	e7c1      	b.n	810b962 <_strtod_l+0x152>
 810b9de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b9e0:	1c5a      	adds	r2, r3, #1
 810b9e2:	9215      	str	r2, [sp, #84]	; 0x54
 810b9e4:	785a      	ldrb	r2, [r3, #1]
 810b9e6:	f1bb 0f00 	cmp.w	fp, #0
 810b9ea:	d037      	beq.n	810ba5c <_strtod_l+0x24c>
 810b9ec:	9005      	str	r0, [sp, #20]
 810b9ee:	465e      	mov	r6, fp
 810b9f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810b9f4:	2b09      	cmp	r3, #9
 810b9f6:	d912      	bls.n	810ba1e <_strtod_l+0x20e>
 810b9f8:	2301      	movs	r3, #1
 810b9fa:	e7c4      	b.n	810b986 <_strtod_l+0x176>
 810b9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810b9fe:	1c5a      	adds	r2, r3, #1
 810ba00:	9215      	str	r2, [sp, #84]	; 0x54
 810ba02:	785a      	ldrb	r2, [r3, #1]
 810ba04:	3001      	adds	r0, #1
 810ba06:	2a30      	cmp	r2, #48	; 0x30
 810ba08:	d0f8      	beq.n	810b9fc <_strtod_l+0x1ec>
 810ba0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810ba0e:	2b08      	cmp	r3, #8
 810ba10:	f200 84c1 	bhi.w	810c396 <_strtod_l+0xb86>
 810ba14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ba16:	9005      	str	r0, [sp, #20]
 810ba18:	2000      	movs	r0, #0
 810ba1a:	930b      	str	r3, [sp, #44]	; 0x2c
 810ba1c:	4606      	mov	r6, r0
 810ba1e:	3a30      	subs	r2, #48	; 0x30
 810ba20:	f100 0301 	add.w	r3, r0, #1
 810ba24:	d014      	beq.n	810ba50 <_strtod_l+0x240>
 810ba26:	9905      	ldr	r1, [sp, #20]
 810ba28:	4419      	add	r1, r3
 810ba2a:	9105      	str	r1, [sp, #20]
 810ba2c:	4633      	mov	r3, r6
 810ba2e:	eb00 0c06 	add.w	ip, r0, r6
 810ba32:	210a      	movs	r1, #10
 810ba34:	4563      	cmp	r3, ip
 810ba36:	d113      	bne.n	810ba60 <_strtod_l+0x250>
 810ba38:	1833      	adds	r3, r6, r0
 810ba3a:	2b08      	cmp	r3, #8
 810ba3c:	f106 0601 	add.w	r6, r6, #1
 810ba40:	4406      	add	r6, r0
 810ba42:	dc1a      	bgt.n	810ba7a <_strtod_l+0x26a>
 810ba44:	9909      	ldr	r1, [sp, #36]	; 0x24
 810ba46:	230a      	movs	r3, #10
 810ba48:	fb03 2301 	mla	r3, r3, r1, r2
 810ba4c:	9309      	str	r3, [sp, #36]	; 0x24
 810ba4e:	2300      	movs	r3, #0
 810ba50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810ba52:	1c51      	adds	r1, r2, #1
 810ba54:	9115      	str	r1, [sp, #84]	; 0x54
 810ba56:	7852      	ldrb	r2, [r2, #1]
 810ba58:	4618      	mov	r0, r3
 810ba5a:	e7c9      	b.n	810b9f0 <_strtod_l+0x1e0>
 810ba5c:	4658      	mov	r0, fp
 810ba5e:	e7d2      	b.n	810ba06 <_strtod_l+0x1f6>
 810ba60:	2b08      	cmp	r3, #8
 810ba62:	f103 0301 	add.w	r3, r3, #1
 810ba66:	dc03      	bgt.n	810ba70 <_strtod_l+0x260>
 810ba68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810ba6a:	434f      	muls	r7, r1
 810ba6c:	9709      	str	r7, [sp, #36]	; 0x24
 810ba6e:	e7e1      	b.n	810ba34 <_strtod_l+0x224>
 810ba70:	2b10      	cmp	r3, #16
 810ba72:	bfd8      	it	le
 810ba74:	fb01 fa0a 	mulle.w	sl, r1, sl
 810ba78:	e7dc      	b.n	810ba34 <_strtod_l+0x224>
 810ba7a:	2e10      	cmp	r6, #16
 810ba7c:	bfdc      	itt	le
 810ba7e:	230a      	movle	r3, #10
 810ba80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810ba84:	e7e3      	b.n	810ba4e <_strtod_l+0x23e>
 810ba86:	2300      	movs	r3, #0
 810ba88:	9305      	str	r3, [sp, #20]
 810ba8a:	2301      	movs	r3, #1
 810ba8c:	e780      	b.n	810b990 <_strtod_l+0x180>
 810ba8e:	f04f 0c00 	mov.w	ip, #0
 810ba92:	1caa      	adds	r2, r5, #2
 810ba94:	9215      	str	r2, [sp, #84]	; 0x54
 810ba96:	78aa      	ldrb	r2, [r5, #2]
 810ba98:	e788      	b.n	810b9ac <_strtod_l+0x19c>
 810ba9a:	f04f 0c01 	mov.w	ip, #1
 810ba9e:	e7f8      	b.n	810ba92 <_strtod_l+0x282>
 810baa0:	08122b40 	.word	0x08122b40
 810baa4:	08122b3c 	.word	0x08122b3c
 810baa8:	7ff00000 	.word	0x7ff00000
 810baac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810baae:	1c51      	adds	r1, r2, #1
 810bab0:	9115      	str	r1, [sp, #84]	; 0x54
 810bab2:	7852      	ldrb	r2, [r2, #1]
 810bab4:	2a30      	cmp	r2, #48	; 0x30
 810bab6:	d0f9      	beq.n	810baac <_strtod_l+0x29c>
 810bab8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810babc:	2908      	cmp	r1, #8
 810babe:	f63f af7a 	bhi.w	810b9b6 <_strtod_l+0x1a6>
 810bac2:	3a30      	subs	r2, #48	; 0x30
 810bac4:	9208      	str	r2, [sp, #32]
 810bac6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810bac8:	920c      	str	r2, [sp, #48]	; 0x30
 810baca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810bacc:	1c57      	adds	r7, r2, #1
 810bace:	9715      	str	r7, [sp, #84]	; 0x54
 810bad0:	7852      	ldrb	r2, [r2, #1]
 810bad2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810bad6:	f1be 0f09 	cmp.w	lr, #9
 810bada:	d938      	bls.n	810bb4e <_strtod_l+0x33e>
 810badc:	990c      	ldr	r1, [sp, #48]	; 0x30
 810bade:	1a7f      	subs	r7, r7, r1
 810bae0:	2f08      	cmp	r7, #8
 810bae2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810bae6:	dc03      	bgt.n	810baf0 <_strtod_l+0x2e0>
 810bae8:	9908      	ldr	r1, [sp, #32]
 810baea:	428f      	cmp	r7, r1
 810baec:	bfa8      	it	ge
 810baee:	460f      	movge	r7, r1
 810baf0:	f1bc 0f00 	cmp.w	ip, #0
 810baf4:	d000      	beq.n	810baf8 <_strtod_l+0x2e8>
 810baf6:	427f      	negs	r7, r7
 810baf8:	2e00      	cmp	r6, #0
 810bafa:	d14f      	bne.n	810bb9c <_strtod_l+0x38c>
 810bafc:	9904      	ldr	r1, [sp, #16]
 810bafe:	4301      	orrs	r1, r0
 810bb00:	f47f aec1 	bne.w	810b886 <_strtod_l+0x76>
 810bb04:	2b00      	cmp	r3, #0
 810bb06:	f47f aedb 	bne.w	810b8c0 <_strtod_l+0xb0>
 810bb0a:	2a69      	cmp	r2, #105	; 0x69
 810bb0c:	d029      	beq.n	810bb62 <_strtod_l+0x352>
 810bb0e:	dc26      	bgt.n	810bb5e <_strtod_l+0x34e>
 810bb10:	2a49      	cmp	r2, #73	; 0x49
 810bb12:	d026      	beq.n	810bb62 <_strtod_l+0x352>
 810bb14:	2a4e      	cmp	r2, #78	; 0x4e
 810bb16:	f47f aed3 	bne.w	810b8c0 <_strtod_l+0xb0>
 810bb1a:	499b      	ldr	r1, [pc, #620]	; (810bd88 <_strtod_l+0x578>)
 810bb1c:	a815      	add	r0, sp, #84	; 0x54
 810bb1e:	f001 fa27 	bl	810cf70 <__match>
 810bb22:	2800      	cmp	r0, #0
 810bb24:	f43f aecc 	beq.w	810b8c0 <_strtod_l+0xb0>
 810bb28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bb2a:	781b      	ldrb	r3, [r3, #0]
 810bb2c:	2b28      	cmp	r3, #40	; 0x28
 810bb2e:	d12f      	bne.n	810bb90 <_strtod_l+0x380>
 810bb30:	4996      	ldr	r1, [pc, #600]	; (810bd8c <_strtod_l+0x57c>)
 810bb32:	aa18      	add	r2, sp, #96	; 0x60
 810bb34:	a815      	add	r0, sp, #84	; 0x54
 810bb36:	f001 fa2f 	bl	810cf98 <__hexnan>
 810bb3a:	2805      	cmp	r0, #5
 810bb3c:	d128      	bne.n	810bb90 <_strtod_l+0x380>
 810bb3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810bb40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810bb44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810bb48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810bb4c:	e69b      	b.n	810b886 <_strtod_l+0x76>
 810bb4e:	9f08      	ldr	r7, [sp, #32]
 810bb50:	210a      	movs	r1, #10
 810bb52:	fb01 2107 	mla	r1, r1, r7, r2
 810bb56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810bb5a:	9208      	str	r2, [sp, #32]
 810bb5c:	e7b5      	b.n	810baca <_strtod_l+0x2ba>
 810bb5e:	2a6e      	cmp	r2, #110	; 0x6e
 810bb60:	e7d9      	b.n	810bb16 <_strtod_l+0x306>
 810bb62:	498b      	ldr	r1, [pc, #556]	; (810bd90 <_strtod_l+0x580>)
 810bb64:	a815      	add	r0, sp, #84	; 0x54
 810bb66:	f001 fa03 	bl	810cf70 <__match>
 810bb6a:	2800      	cmp	r0, #0
 810bb6c:	f43f aea8 	beq.w	810b8c0 <_strtod_l+0xb0>
 810bb70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bb72:	4988      	ldr	r1, [pc, #544]	; (810bd94 <_strtod_l+0x584>)
 810bb74:	3b01      	subs	r3, #1
 810bb76:	a815      	add	r0, sp, #84	; 0x54
 810bb78:	9315      	str	r3, [sp, #84]	; 0x54
 810bb7a:	f001 f9f9 	bl	810cf70 <__match>
 810bb7e:	b910      	cbnz	r0, 810bb86 <_strtod_l+0x376>
 810bb80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bb82:	3301      	adds	r3, #1
 810bb84:	9315      	str	r3, [sp, #84]	; 0x54
 810bb86:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810bda4 <_strtod_l+0x594>
 810bb8a:	f04f 0800 	mov.w	r8, #0
 810bb8e:	e67a      	b.n	810b886 <_strtod_l+0x76>
 810bb90:	4881      	ldr	r0, [pc, #516]	; (810bd98 <_strtod_l+0x588>)
 810bb92:	f000 ff09 	bl	810c9a8 <nan>
 810bb96:	ec59 8b10 	vmov	r8, r9, d0
 810bb9a:	e674      	b.n	810b886 <_strtod_l+0x76>
 810bb9c:	9b05      	ldr	r3, [sp, #20]
 810bb9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bba0:	1afb      	subs	r3, r7, r3
 810bba2:	f1bb 0f00 	cmp.w	fp, #0
 810bba6:	bf08      	it	eq
 810bba8:	46b3      	moveq	fp, r6
 810bbaa:	2e10      	cmp	r6, #16
 810bbac:	9308      	str	r3, [sp, #32]
 810bbae:	4635      	mov	r5, r6
 810bbb0:	bfa8      	it	ge
 810bbb2:	2510      	movge	r5, #16
 810bbb4:	f7f4 fd2e 	bl	8100614 <__aeabi_ui2d>
 810bbb8:	2e09      	cmp	r6, #9
 810bbba:	4680      	mov	r8, r0
 810bbbc:	4689      	mov	r9, r1
 810bbbe:	dd13      	ble.n	810bbe8 <_strtod_l+0x3d8>
 810bbc0:	4b76      	ldr	r3, [pc, #472]	; (810bd9c <_strtod_l+0x58c>)
 810bbc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810bbc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810bbca:	f7f4 fd9d 	bl	8100708 <__aeabi_dmul>
 810bbce:	4680      	mov	r8, r0
 810bbd0:	4650      	mov	r0, sl
 810bbd2:	4689      	mov	r9, r1
 810bbd4:	f7f4 fd1e 	bl	8100614 <__aeabi_ui2d>
 810bbd8:	4602      	mov	r2, r0
 810bbda:	460b      	mov	r3, r1
 810bbdc:	4640      	mov	r0, r8
 810bbde:	4649      	mov	r1, r9
 810bbe0:	f7f4 fbdc 	bl	810039c <__adddf3>
 810bbe4:	4680      	mov	r8, r0
 810bbe6:	4689      	mov	r9, r1
 810bbe8:	2e0f      	cmp	r6, #15
 810bbea:	dc38      	bgt.n	810bc5e <_strtod_l+0x44e>
 810bbec:	9b08      	ldr	r3, [sp, #32]
 810bbee:	2b00      	cmp	r3, #0
 810bbf0:	f43f ae49 	beq.w	810b886 <_strtod_l+0x76>
 810bbf4:	dd24      	ble.n	810bc40 <_strtod_l+0x430>
 810bbf6:	2b16      	cmp	r3, #22
 810bbf8:	dc0b      	bgt.n	810bc12 <_strtod_l+0x402>
 810bbfa:	4968      	ldr	r1, [pc, #416]	; (810bd9c <_strtod_l+0x58c>)
 810bbfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810bc00:	e9d1 0100 	ldrd	r0, r1, [r1]
 810bc04:	4642      	mov	r2, r8
 810bc06:	464b      	mov	r3, r9
 810bc08:	f7f4 fd7e 	bl	8100708 <__aeabi_dmul>
 810bc0c:	4680      	mov	r8, r0
 810bc0e:	4689      	mov	r9, r1
 810bc10:	e639      	b.n	810b886 <_strtod_l+0x76>
 810bc12:	9a08      	ldr	r2, [sp, #32]
 810bc14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810bc18:	4293      	cmp	r3, r2
 810bc1a:	db20      	blt.n	810bc5e <_strtod_l+0x44e>
 810bc1c:	4c5f      	ldr	r4, [pc, #380]	; (810bd9c <_strtod_l+0x58c>)
 810bc1e:	f1c6 060f 	rsb	r6, r6, #15
 810bc22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810bc26:	4642      	mov	r2, r8
 810bc28:	464b      	mov	r3, r9
 810bc2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810bc2e:	f7f4 fd6b 	bl	8100708 <__aeabi_dmul>
 810bc32:	9b08      	ldr	r3, [sp, #32]
 810bc34:	1b9e      	subs	r6, r3, r6
 810bc36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810bc3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 810bc3e:	e7e3      	b.n	810bc08 <_strtod_l+0x3f8>
 810bc40:	9b08      	ldr	r3, [sp, #32]
 810bc42:	3316      	adds	r3, #22
 810bc44:	db0b      	blt.n	810bc5e <_strtod_l+0x44e>
 810bc46:	9b05      	ldr	r3, [sp, #20]
 810bc48:	1bdf      	subs	r7, r3, r7
 810bc4a:	4b54      	ldr	r3, [pc, #336]	; (810bd9c <_strtod_l+0x58c>)
 810bc4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810bc50:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bc54:	4640      	mov	r0, r8
 810bc56:	4649      	mov	r1, r9
 810bc58:	f7f4 fe80 	bl	810095c <__aeabi_ddiv>
 810bc5c:	e7d6      	b.n	810bc0c <_strtod_l+0x3fc>
 810bc5e:	9b08      	ldr	r3, [sp, #32]
 810bc60:	1b75      	subs	r5, r6, r5
 810bc62:	441d      	add	r5, r3
 810bc64:	2d00      	cmp	r5, #0
 810bc66:	dd70      	ble.n	810bd4a <_strtod_l+0x53a>
 810bc68:	f015 030f 	ands.w	r3, r5, #15
 810bc6c:	d00a      	beq.n	810bc84 <_strtod_l+0x474>
 810bc6e:	494b      	ldr	r1, [pc, #300]	; (810bd9c <_strtod_l+0x58c>)
 810bc70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810bc74:	4642      	mov	r2, r8
 810bc76:	464b      	mov	r3, r9
 810bc78:	e9d1 0100 	ldrd	r0, r1, [r1]
 810bc7c:	f7f4 fd44 	bl	8100708 <__aeabi_dmul>
 810bc80:	4680      	mov	r8, r0
 810bc82:	4689      	mov	r9, r1
 810bc84:	f035 050f 	bics.w	r5, r5, #15
 810bc88:	d04d      	beq.n	810bd26 <_strtod_l+0x516>
 810bc8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810bc8e:	dd22      	ble.n	810bcd6 <_strtod_l+0x4c6>
 810bc90:	2500      	movs	r5, #0
 810bc92:	46ab      	mov	fp, r5
 810bc94:	9509      	str	r5, [sp, #36]	; 0x24
 810bc96:	9505      	str	r5, [sp, #20]
 810bc98:	2322      	movs	r3, #34	; 0x22
 810bc9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810bda4 <_strtod_l+0x594>
 810bc9e:	6023      	str	r3, [r4, #0]
 810bca0:	f04f 0800 	mov.w	r8, #0
 810bca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bca6:	2b00      	cmp	r3, #0
 810bca8:	f43f aded 	beq.w	810b886 <_strtod_l+0x76>
 810bcac:	9916      	ldr	r1, [sp, #88]	; 0x58
 810bcae:	4620      	mov	r0, r4
 810bcb0:	f7ff f924 	bl	810aefc <_Bfree>
 810bcb4:	9905      	ldr	r1, [sp, #20]
 810bcb6:	4620      	mov	r0, r4
 810bcb8:	f7ff f920 	bl	810aefc <_Bfree>
 810bcbc:	4659      	mov	r1, fp
 810bcbe:	4620      	mov	r0, r4
 810bcc0:	f7ff f91c 	bl	810aefc <_Bfree>
 810bcc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810bcc6:	4620      	mov	r0, r4
 810bcc8:	f7ff f918 	bl	810aefc <_Bfree>
 810bccc:	4629      	mov	r1, r5
 810bcce:	4620      	mov	r0, r4
 810bcd0:	f7ff f914 	bl	810aefc <_Bfree>
 810bcd4:	e5d7      	b.n	810b886 <_strtod_l+0x76>
 810bcd6:	4b32      	ldr	r3, [pc, #200]	; (810bda0 <_strtod_l+0x590>)
 810bcd8:	9304      	str	r3, [sp, #16]
 810bcda:	2300      	movs	r3, #0
 810bcdc:	112d      	asrs	r5, r5, #4
 810bcde:	4640      	mov	r0, r8
 810bce0:	4649      	mov	r1, r9
 810bce2:	469a      	mov	sl, r3
 810bce4:	2d01      	cmp	r5, #1
 810bce6:	dc21      	bgt.n	810bd2c <_strtod_l+0x51c>
 810bce8:	b10b      	cbz	r3, 810bcee <_strtod_l+0x4de>
 810bcea:	4680      	mov	r8, r0
 810bcec:	4689      	mov	r9, r1
 810bcee:	492c      	ldr	r1, [pc, #176]	; (810bda0 <_strtod_l+0x590>)
 810bcf0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810bcf4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810bcf8:	4642      	mov	r2, r8
 810bcfa:	464b      	mov	r3, r9
 810bcfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 810bd00:	f7f4 fd02 	bl	8100708 <__aeabi_dmul>
 810bd04:	4b27      	ldr	r3, [pc, #156]	; (810bda4 <_strtod_l+0x594>)
 810bd06:	460a      	mov	r2, r1
 810bd08:	400b      	ands	r3, r1
 810bd0a:	4927      	ldr	r1, [pc, #156]	; (810bda8 <_strtod_l+0x598>)
 810bd0c:	428b      	cmp	r3, r1
 810bd0e:	4680      	mov	r8, r0
 810bd10:	d8be      	bhi.n	810bc90 <_strtod_l+0x480>
 810bd12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810bd16:	428b      	cmp	r3, r1
 810bd18:	bf86      	itte	hi
 810bd1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810bdac <_strtod_l+0x59c>
 810bd1e:	f04f 38ff 	movhi.w	r8, #4294967295
 810bd22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810bd26:	2300      	movs	r3, #0
 810bd28:	9304      	str	r3, [sp, #16]
 810bd2a:	e07b      	b.n	810be24 <_strtod_l+0x614>
 810bd2c:	07ea      	lsls	r2, r5, #31
 810bd2e:	d505      	bpl.n	810bd3c <_strtod_l+0x52c>
 810bd30:	9b04      	ldr	r3, [sp, #16]
 810bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bd36:	f7f4 fce7 	bl	8100708 <__aeabi_dmul>
 810bd3a:	2301      	movs	r3, #1
 810bd3c:	9a04      	ldr	r2, [sp, #16]
 810bd3e:	3208      	adds	r2, #8
 810bd40:	f10a 0a01 	add.w	sl, sl, #1
 810bd44:	106d      	asrs	r5, r5, #1
 810bd46:	9204      	str	r2, [sp, #16]
 810bd48:	e7cc      	b.n	810bce4 <_strtod_l+0x4d4>
 810bd4a:	d0ec      	beq.n	810bd26 <_strtod_l+0x516>
 810bd4c:	426d      	negs	r5, r5
 810bd4e:	f015 020f 	ands.w	r2, r5, #15
 810bd52:	d00a      	beq.n	810bd6a <_strtod_l+0x55a>
 810bd54:	4b11      	ldr	r3, [pc, #68]	; (810bd9c <_strtod_l+0x58c>)
 810bd56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bd5a:	4640      	mov	r0, r8
 810bd5c:	4649      	mov	r1, r9
 810bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bd62:	f7f4 fdfb 	bl	810095c <__aeabi_ddiv>
 810bd66:	4680      	mov	r8, r0
 810bd68:	4689      	mov	r9, r1
 810bd6a:	112d      	asrs	r5, r5, #4
 810bd6c:	d0db      	beq.n	810bd26 <_strtod_l+0x516>
 810bd6e:	2d1f      	cmp	r5, #31
 810bd70:	dd1e      	ble.n	810bdb0 <_strtod_l+0x5a0>
 810bd72:	2500      	movs	r5, #0
 810bd74:	46ab      	mov	fp, r5
 810bd76:	9509      	str	r5, [sp, #36]	; 0x24
 810bd78:	9505      	str	r5, [sp, #20]
 810bd7a:	2322      	movs	r3, #34	; 0x22
 810bd7c:	f04f 0800 	mov.w	r8, #0
 810bd80:	f04f 0900 	mov.w	r9, #0
 810bd84:	6023      	str	r3, [r4, #0]
 810bd86:	e78d      	b.n	810bca4 <_strtod_l+0x494>
 810bd88:	08122929 	.word	0x08122929
 810bd8c:	08122b54 	.word	0x08122b54
 810bd90:	08122921 	.word	0x08122921
 810bd94:	08122958 	.word	0x08122958
 810bd98:	08122ce5 	.word	0x08122ce5
 810bd9c:	08122a68 	.word	0x08122a68
 810bda0:	08122a40 	.word	0x08122a40
 810bda4:	7ff00000 	.word	0x7ff00000
 810bda8:	7ca00000 	.word	0x7ca00000
 810bdac:	7fefffff 	.word	0x7fefffff
 810bdb0:	f015 0310 	ands.w	r3, r5, #16
 810bdb4:	bf18      	it	ne
 810bdb6:	236a      	movne	r3, #106	; 0x6a
 810bdb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810c15c <_strtod_l+0x94c>
 810bdbc:	9304      	str	r3, [sp, #16]
 810bdbe:	4640      	mov	r0, r8
 810bdc0:	4649      	mov	r1, r9
 810bdc2:	2300      	movs	r3, #0
 810bdc4:	07ea      	lsls	r2, r5, #31
 810bdc6:	d504      	bpl.n	810bdd2 <_strtod_l+0x5c2>
 810bdc8:	e9da 2300 	ldrd	r2, r3, [sl]
 810bdcc:	f7f4 fc9c 	bl	8100708 <__aeabi_dmul>
 810bdd0:	2301      	movs	r3, #1
 810bdd2:	106d      	asrs	r5, r5, #1
 810bdd4:	f10a 0a08 	add.w	sl, sl, #8
 810bdd8:	d1f4      	bne.n	810bdc4 <_strtod_l+0x5b4>
 810bdda:	b10b      	cbz	r3, 810bde0 <_strtod_l+0x5d0>
 810bddc:	4680      	mov	r8, r0
 810bdde:	4689      	mov	r9, r1
 810bde0:	9b04      	ldr	r3, [sp, #16]
 810bde2:	b1bb      	cbz	r3, 810be14 <_strtod_l+0x604>
 810bde4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810bde8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810bdec:	2b00      	cmp	r3, #0
 810bdee:	4649      	mov	r1, r9
 810bdf0:	dd10      	ble.n	810be14 <_strtod_l+0x604>
 810bdf2:	2b1f      	cmp	r3, #31
 810bdf4:	f340 811e 	ble.w	810c034 <_strtod_l+0x824>
 810bdf8:	2b34      	cmp	r3, #52	; 0x34
 810bdfa:	bfde      	ittt	le
 810bdfc:	f04f 33ff 	movle.w	r3, #4294967295
 810be00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810be04:	4093      	lslle	r3, r2
 810be06:	f04f 0800 	mov.w	r8, #0
 810be0a:	bfcc      	ite	gt
 810be0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810be10:	ea03 0901 	andle.w	r9, r3, r1
 810be14:	2200      	movs	r2, #0
 810be16:	2300      	movs	r3, #0
 810be18:	4640      	mov	r0, r8
 810be1a:	4649      	mov	r1, r9
 810be1c:	f7f4 fedc 	bl	8100bd8 <__aeabi_dcmpeq>
 810be20:	2800      	cmp	r0, #0
 810be22:	d1a6      	bne.n	810bd72 <_strtod_l+0x562>
 810be24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be26:	9300      	str	r3, [sp, #0]
 810be28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810be2a:	4633      	mov	r3, r6
 810be2c:	465a      	mov	r2, fp
 810be2e:	4620      	mov	r0, r4
 810be30:	f7ff f8cc 	bl	810afcc <__s2b>
 810be34:	9009      	str	r0, [sp, #36]	; 0x24
 810be36:	2800      	cmp	r0, #0
 810be38:	f43f af2a 	beq.w	810bc90 <_strtod_l+0x480>
 810be3c:	9a08      	ldr	r2, [sp, #32]
 810be3e:	9b05      	ldr	r3, [sp, #20]
 810be40:	2a00      	cmp	r2, #0
 810be42:	eba3 0307 	sub.w	r3, r3, r7
 810be46:	bfa8      	it	ge
 810be48:	2300      	movge	r3, #0
 810be4a:	930c      	str	r3, [sp, #48]	; 0x30
 810be4c:	2500      	movs	r5, #0
 810be4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810be52:	9312      	str	r3, [sp, #72]	; 0x48
 810be54:	46ab      	mov	fp, r5
 810be56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be58:	4620      	mov	r0, r4
 810be5a:	6859      	ldr	r1, [r3, #4]
 810be5c:	f7ff f80e 	bl	810ae7c <_Balloc>
 810be60:	9005      	str	r0, [sp, #20]
 810be62:	2800      	cmp	r0, #0
 810be64:	f43f af18 	beq.w	810bc98 <_strtod_l+0x488>
 810be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be6a:	691a      	ldr	r2, [r3, #16]
 810be6c:	3202      	adds	r2, #2
 810be6e:	f103 010c 	add.w	r1, r3, #12
 810be72:	0092      	lsls	r2, r2, #2
 810be74:	300c      	adds	r0, #12
 810be76:	f000 fd87 	bl	810c988 <memcpy>
 810be7a:	ec49 8b10 	vmov	d0, r8, r9
 810be7e:	aa18      	add	r2, sp, #96	; 0x60
 810be80:	a917      	add	r1, sp, #92	; 0x5c
 810be82:	4620      	mov	r0, r4
 810be84:	f7ff fbd6 	bl	810b634 <__d2b>
 810be88:	ec49 8b18 	vmov	d8, r8, r9
 810be8c:	9016      	str	r0, [sp, #88]	; 0x58
 810be8e:	2800      	cmp	r0, #0
 810be90:	f43f af02 	beq.w	810bc98 <_strtod_l+0x488>
 810be94:	2101      	movs	r1, #1
 810be96:	4620      	mov	r0, r4
 810be98:	f7ff f930 	bl	810b0fc <__i2b>
 810be9c:	4683      	mov	fp, r0
 810be9e:	2800      	cmp	r0, #0
 810bea0:	f43f aefa 	beq.w	810bc98 <_strtod_l+0x488>
 810bea4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810bea6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810bea8:	2e00      	cmp	r6, #0
 810beaa:	bfab      	itete	ge
 810beac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810beae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810beb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810beb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810beb6:	bfac      	ite	ge
 810beb8:	eb06 0a03 	addge.w	sl, r6, r3
 810bebc:	1b9f      	sublt	r7, r3, r6
 810bebe:	9b04      	ldr	r3, [sp, #16]
 810bec0:	1af6      	subs	r6, r6, r3
 810bec2:	4416      	add	r6, r2
 810bec4:	4ba0      	ldr	r3, [pc, #640]	; (810c148 <_strtod_l+0x938>)
 810bec6:	3e01      	subs	r6, #1
 810bec8:	429e      	cmp	r6, r3
 810beca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810bece:	f280 80c4 	bge.w	810c05a <_strtod_l+0x84a>
 810bed2:	1b9b      	subs	r3, r3, r6
 810bed4:	2b1f      	cmp	r3, #31
 810bed6:	eba2 0203 	sub.w	r2, r2, r3
 810beda:	f04f 0101 	mov.w	r1, #1
 810bede:	f300 80b0 	bgt.w	810c042 <_strtod_l+0x832>
 810bee2:	fa01 f303 	lsl.w	r3, r1, r3
 810bee6:	930e      	str	r3, [sp, #56]	; 0x38
 810bee8:	2300      	movs	r3, #0
 810beea:	930d      	str	r3, [sp, #52]	; 0x34
 810beec:	eb0a 0602 	add.w	r6, sl, r2
 810bef0:	9b04      	ldr	r3, [sp, #16]
 810bef2:	45b2      	cmp	sl, r6
 810bef4:	4417      	add	r7, r2
 810bef6:	441f      	add	r7, r3
 810bef8:	4653      	mov	r3, sl
 810befa:	bfa8      	it	ge
 810befc:	4633      	movge	r3, r6
 810befe:	42bb      	cmp	r3, r7
 810bf00:	bfa8      	it	ge
 810bf02:	463b      	movge	r3, r7
 810bf04:	2b00      	cmp	r3, #0
 810bf06:	bfc2      	ittt	gt
 810bf08:	1af6      	subgt	r6, r6, r3
 810bf0a:	1aff      	subgt	r7, r7, r3
 810bf0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 810bf10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810bf12:	2b00      	cmp	r3, #0
 810bf14:	dd17      	ble.n	810bf46 <_strtod_l+0x736>
 810bf16:	4659      	mov	r1, fp
 810bf18:	461a      	mov	r2, r3
 810bf1a:	4620      	mov	r0, r4
 810bf1c:	f7ff f9ae 	bl	810b27c <__pow5mult>
 810bf20:	4683      	mov	fp, r0
 810bf22:	2800      	cmp	r0, #0
 810bf24:	f43f aeb8 	beq.w	810bc98 <_strtod_l+0x488>
 810bf28:	4601      	mov	r1, r0
 810bf2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810bf2c:	4620      	mov	r0, r4
 810bf2e:	f7ff f8fb 	bl	810b128 <__multiply>
 810bf32:	900b      	str	r0, [sp, #44]	; 0x2c
 810bf34:	2800      	cmp	r0, #0
 810bf36:	f43f aeaf 	beq.w	810bc98 <_strtod_l+0x488>
 810bf3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 810bf3c:	4620      	mov	r0, r4
 810bf3e:	f7fe ffdd 	bl	810aefc <_Bfree>
 810bf42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bf44:	9316      	str	r3, [sp, #88]	; 0x58
 810bf46:	2e00      	cmp	r6, #0
 810bf48:	f300 808c 	bgt.w	810c064 <_strtod_l+0x854>
 810bf4c:	9b08      	ldr	r3, [sp, #32]
 810bf4e:	2b00      	cmp	r3, #0
 810bf50:	dd08      	ble.n	810bf64 <_strtod_l+0x754>
 810bf52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810bf54:	9905      	ldr	r1, [sp, #20]
 810bf56:	4620      	mov	r0, r4
 810bf58:	f7ff f990 	bl	810b27c <__pow5mult>
 810bf5c:	9005      	str	r0, [sp, #20]
 810bf5e:	2800      	cmp	r0, #0
 810bf60:	f43f ae9a 	beq.w	810bc98 <_strtod_l+0x488>
 810bf64:	2f00      	cmp	r7, #0
 810bf66:	dd08      	ble.n	810bf7a <_strtod_l+0x76a>
 810bf68:	9905      	ldr	r1, [sp, #20]
 810bf6a:	463a      	mov	r2, r7
 810bf6c:	4620      	mov	r0, r4
 810bf6e:	f7ff f9df 	bl	810b330 <__lshift>
 810bf72:	9005      	str	r0, [sp, #20]
 810bf74:	2800      	cmp	r0, #0
 810bf76:	f43f ae8f 	beq.w	810bc98 <_strtod_l+0x488>
 810bf7a:	f1ba 0f00 	cmp.w	sl, #0
 810bf7e:	dd08      	ble.n	810bf92 <_strtod_l+0x782>
 810bf80:	4659      	mov	r1, fp
 810bf82:	4652      	mov	r2, sl
 810bf84:	4620      	mov	r0, r4
 810bf86:	f7ff f9d3 	bl	810b330 <__lshift>
 810bf8a:	4683      	mov	fp, r0
 810bf8c:	2800      	cmp	r0, #0
 810bf8e:	f43f ae83 	beq.w	810bc98 <_strtod_l+0x488>
 810bf92:	9a05      	ldr	r2, [sp, #20]
 810bf94:	9916      	ldr	r1, [sp, #88]	; 0x58
 810bf96:	4620      	mov	r0, r4
 810bf98:	f7ff fa52 	bl	810b440 <__mdiff>
 810bf9c:	4605      	mov	r5, r0
 810bf9e:	2800      	cmp	r0, #0
 810bfa0:	f43f ae7a 	beq.w	810bc98 <_strtod_l+0x488>
 810bfa4:	68c3      	ldr	r3, [r0, #12]
 810bfa6:	930b      	str	r3, [sp, #44]	; 0x2c
 810bfa8:	2300      	movs	r3, #0
 810bfaa:	60c3      	str	r3, [r0, #12]
 810bfac:	4659      	mov	r1, fp
 810bfae:	f7ff fa2b 	bl	810b408 <__mcmp>
 810bfb2:	2800      	cmp	r0, #0
 810bfb4:	da60      	bge.n	810c078 <_strtod_l+0x868>
 810bfb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bfb8:	ea53 0308 	orrs.w	r3, r3, r8
 810bfbc:	f040 8084 	bne.w	810c0c8 <_strtod_l+0x8b8>
 810bfc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810bfc4:	2b00      	cmp	r3, #0
 810bfc6:	d17f      	bne.n	810c0c8 <_strtod_l+0x8b8>
 810bfc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810bfcc:	0d1b      	lsrs	r3, r3, #20
 810bfce:	051b      	lsls	r3, r3, #20
 810bfd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810bfd4:	d978      	bls.n	810c0c8 <_strtod_l+0x8b8>
 810bfd6:	696b      	ldr	r3, [r5, #20]
 810bfd8:	b913      	cbnz	r3, 810bfe0 <_strtod_l+0x7d0>
 810bfda:	692b      	ldr	r3, [r5, #16]
 810bfdc:	2b01      	cmp	r3, #1
 810bfde:	dd73      	ble.n	810c0c8 <_strtod_l+0x8b8>
 810bfe0:	4629      	mov	r1, r5
 810bfe2:	2201      	movs	r2, #1
 810bfe4:	4620      	mov	r0, r4
 810bfe6:	f7ff f9a3 	bl	810b330 <__lshift>
 810bfea:	4659      	mov	r1, fp
 810bfec:	4605      	mov	r5, r0
 810bfee:	f7ff fa0b 	bl	810b408 <__mcmp>
 810bff2:	2800      	cmp	r0, #0
 810bff4:	dd68      	ble.n	810c0c8 <_strtod_l+0x8b8>
 810bff6:	9904      	ldr	r1, [sp, #16]
 810bff8:	4a54      	ldr	r2, [pc, #336]	; (810c14c <_strtod_l+0x93c>)
 810bffa:	464b      	mov	r3, r9
 810bffc:	2900      	cmp	r1, #0
 810bffe:	f000 8084 	beq.w	810c10a <_strtod_l+0x8fa>
 810c002:	ea02 0109 	and.w	r1, r2, r9
 810c006:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810c00a:	dc7e      	bgt.n	810c10a <_strtod_l+0x8fa>
 810c00c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810c010:	f77f aeb3 	ble.w	810bd7a <_strtod_l+0x56a>
 810c014:	4b4e      	ldr	r3, [pc, #312]	; (810c150 <_strtod_l+0x940>)
 810c016:	4640      	mov	r0, r8
 810c018:	4649      	mov	r1, r9
 810c01a:	2200      	movs	r2, #0
 810c01c:	f7f4 fb74 	bl	8100708 <__aeabi_dmul>
 810c020:	4b4a      	ldr	r3, [pc, #296]	; (810c14c <_strtod_l+0x93c>)
 810c022:	400b      	ands	r3, r1
 810c024:	4680      	mov	r8, r0
 810c026:	4689      	mov	r9, r1
 810c028:	2b00      	cmp	r3, #0
 810c02a:	f47f ae3f 	bne.w	810bcac <_strtod_l+0x49c>
 810c02e:	2322      	movs	r3, #34	; 0x22
 810c030:	6023      	str	r3, [r4, #0]
 810c032:	e63b      	b.n	810bcac <_strtod_l+0x49c>
 810c034:	f04f 32ff 	mov.w	r2, #4294967295
 810c038:	fa02 f303 	lsl.w	r3, r2, r3
 810c03c:	ea03 0808 	and.w	r8, r3, r8
 810c040:	e6e8      	b.n	810be14 <_strtod_l+0x604>
 810c042:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810c046:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810c04a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810c04e:	36e2      	adds	r6, #226	; 0xe2
 810c050:	fa01 f306 	lsl.w	r3, r1, r6
 810c054:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810c058:	e748      	b.n	810beec <_strtod_l+0x6dc>
 810c05a:	2100      	movs	r1, #0
 810c05c:	2301      	movs	r3, #1
 810c05e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810c062:	e743      	b.n	810beec <_strtod_l+0x6dc>
 810c064:	9916      	ldr	r1, [sp, #88]	; 0x58
 810c066:	4632      	mov	r2, r6
 810c068:	4620      	mov	r0, r4
 810c06a:	f7ff f961 	bl	810b330 <__lshift>
 810c06e:	9016      	str	r0, [sp, #88]	; 0x58
 810c070:	2800      	cmp	r0, #0
 810c072:	f47f af6b 	bne.w	810bf4c <_strtod_l+0x73c>
 810c076:	e60f      	b.n	810bc98 <_strtod_l+0x488>
 810c078:	46ca      	mov	sl, r9
 810c07a:	d171      	bne.n	810c160 <_strtod_l+0x950>
 810c07c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c07e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c082:	b352      	cbz	r2, 810c0da <_strtod_l+0x8ca>
 810c084:	4a33      	ldr	r2, [pc, #204]	; (810c154 <_strtod_l+0x944>)
 810c086:	4293      	cmp	r3, r2
 810c088:	d12a      	bne.n	810c0e0 <_strtod_l+0x8d0>
 810c08a:	9b04      	ldr	r3, [sp, #16]
 810c08c:	4641      	mov	r1, r8
 810c08e:	b1fb      	cbz	r3, 810c0d0 <_strtod_l+0x8c0>
 810c090:	4b2e      	ldr	r3, [pc, #184]	; (810c14c <_strtod_l+0x93c>)
 810c092:	ea09 0303 	and.w	r3, r9, r3
 810c096:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810c09a:	f04f 32ff 	mov.w	r2, #4294967295
 810c09e:	d81a      	bhi.n	810c0d6 <_strtod_l+0x8c6>
 810c0a0:	0d1b      	lsrs	r3, r3, #20
 810c0a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810c0a6:	fa02 f303 	lsl.w	r3, r2, r3
 810c0aa:	4299      	cmp	r1, r3
 810c0ac:	d118      	bne.n	810c0e0 <_strtod_l+0x8d0>
 810c0ae:	4b2a      	ldr	r3, [pc, #168]	; (810c158 <_strtod_l+0x948>)
 810c0b0:	459a      	cmp	sl, r3
 810c0b2:	d102      	bne.n	810c0ba <_strtod_l+0x8aa>
 810c0b4:	3101      	adds	r1, #1
 810c0b6:	f43f adef 	beq.w	810bc98 <_strtod_l+0x488>
 810c0ba:	4b24      	ldr	r3, [pc, #144]	; (810c14c <_strtod_l+0x93c>)
 810c0bc:	ea0a 0303 	and.w	r3, sl, r3
 810c0c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810c0c4:	f04f 0800 	mov.w	r8, #0
 810c0c8:	9b04      	ldr	r3, [sp, #16]
 810c0ca:	2b00      	cmp	r3, #0
 810c0cc:	d1a2      	bne.n	810c014 <_strtod_l+0x804>
 810c0ce:	e5ed      	b.n	810bcac <_strtod_l+0x49c>
 810c0d0:	f04f 33ff 	mov.w	r3, #4294967295
 810c0d4:	e7e9      	b.n	810c0aa <_strtod_l+0x89a>
 810c0d6:	4613      	mov	r3, r2
 810c0d8:	e7e7      	b.n	810c0aa <_strtod_l+0x89a>
 810c0da:	ea53 0308 	orrs.w	r3, r3, r8
 810c0de:	d08a      	beq.n	810bff6 <_strtod_l+0x7e6>
 810c0e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810c0e2:	b1e3      	cbz	r3, 810c11e <_strtod_l+0x90e>
 810c0e4:	ea13 0f0a 	tst.w	r3, sl
 810c0e8:	d0ee      	beq.n	810c0c8 <_strtod_l+0x8b8>
 810c0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c0ec:	9a04      	ldr	r2, [sp, #16]
 810c0ee:	4640      	mov	r0, r8
 810c0f0:	4649      	mov	r1, r9
 810c0f2:	b1c3      	cbz	r3, 810c126 <_strtod_l+0x916>
 810c0f4:	f7ff fb6f 	bl	810b7d6 <sulp>
 810c0f8:	4602      	mov	r2, r0
 810c0fa:	460b      	mov	r3, r1
 810c0fc:	ec51 0b18 	vmov	r0, r1, d8
 810c100:	f7f4 f94c 	bl	810039c <__adddf3>
 810c104:	4680      	mov	r8, r0
 810c106:	4689      	mov	r9, r1
 810c108:	e7de      	b.n	810c0c8 <_strtod_l+0x8b8>
 810c10a:	4013      	ands	r3, r2
 810c10c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810c110:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810c114:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810c118:	f04f 38ff 	mov.w	r8, #4294967295
 810c11c:	e7d4      	b.n	810c0c8 <_strtod_l+0x8b8>
 810c11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c120:	ea13 0f08 	tst.w	r3, r8
 810c124:	e7e0      	b.n	810c0e8 <_strtod_l+0x8d8>
 810c126:	f7ff fb56 	bl	810b7d6 <sulp>
 810c12a:	4602      	mov	r2, r0
 810c12c:	460b      	mov	r3, r1
 810c12e:	ec51 0b18 	vmov	r0, r1, d8
 810c132:	f7f4 f931 	bl	8100398 <__aeabi_dsub>
 810c136:	2200      	movs	r2, #0
 810c138:	2300      	movs	r3, #0
 810c13a:	4680      	mov	r8, r0
 810c13c:	4689      	mov	r9, r1
 810c13e:	f7f4 fd4b 	bl	8100bd8 <__aeabi_dcmpeq>
 810c142:	2800      	cmp	r0, #0
 810c144:	d0c0      	beq.n	810c0c8 <_strtod_l+0x8b8>
 810c146:	e618      	b.n	810bd7a <_strtod_l+0x56a>
 810c148:	fffffc02 	.word	0xfffffc02
 810c14c:	7ff00000 	.word	0x7ff00000
 810c150:	39500000 	.word	0x39500000
 810c154:	000fffff 	.word	0x000fffff
 810c158:	7fefffff 	.word	0x7fefffff
 810c15c:	08122b68 	.word	0x08122b68
 810c160:	4659      	mov	r1, fp
 810c162:	4628      	mov	r0, r5
 810c164:	f7ff fac0 	bl	810b6e8 <__ratio>
 810c168:	ec57 6b10 	vmov	r6, r7, d0
 810c16c:	ee10 0a10 	vmov	r0, s0
 810c170:	2200      	movs	r2, #0
 810c172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810c176:	4639      	mov	r1, r7
 810c178:	f7f4 fd42 	bl	8100c00 <__aeabi_dcmple>
 810c17c:	2800      	cmp	r0, #0
 810c17e:	d071      	beq.n	810c264 <_strtod_l+0xa54>
 810c180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c182:	2b00      	cmp	r3, #0
 810c184:	d17c      	bne.n	810c280 <_strtod_l+0xa70>
 810c186:	f1b8 0f00 	cmp.w	r8, #0
 810c18a:	d15a      	bne.n	810c242 <_strtod_l+0xa32>
 810c18c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c190:	2b00      	cmp	r3, #0
 810c192:	d15d      	bne.n	810c250 <_strtod_l+0xa40>
 810c194:	4b90      	ldr	r3, [pc, #576]	; (810c3d8 <_strtod_l+0xbc8>)
 810c196:	2200      	movs	r2, #0
 810c198:	4630      	mov	r0, r6
 810c19a:	4639      	mov	r1, r7
 810c19c:	f7f4 fd26 	bl	8100bec <__aeabi_dcmplt>
 810c1a0:	2800      	cmp	r0, #0
 810c1a2:	d15c      	bne.n	810c25e <_strtod_l+0xa4e>
 810c1a4:	4630      	mov	r0, r6
 810c1a6:	4639      	mov	r1, r7
 810c1a8:	4b8c      	ldr	r3, [pc, #560]	; (810c3dc <_strtod_l+0xbcc>)
 810c1aa:	2200      	movs	r2, #0
 810c1ac:	f7f4 faac 	bl	8100708 <__aeabi_dmul>
 810c1b0:	4606      	mov	r6, r0
 810c1b2:	460f      	mov	r7, r1
 810c1b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810c1b8:	9606      	str	r6, [sp, #24]
 810c1ba:	9307      	str	r3, [sp, #28]
 810c1bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c1c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810c1c4:	4b86      	ldr	r3, [pc, #536]	; (810c3e0 <_strtod_l+0xbd0>)
 810c1c6:	ea0a 0303 	and.w	r3, sl, r3
 810c1ca:	930d      	str	r3, [sp, #52]	; 0x34
 810c1cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c1ce:	4b85      	ldr	r3, [pc, #532]	; (810c3e4 <_strtod_l+0xbd4>)
 810c1d0:	429a      	cmp	r2, r3
 810c1d2:	f040 8090 	bne.w	810c2f6 <_strtod_l+0xae6>
 810c1d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810c1da:	ec49 8b10 	vmov	d0, r8, r9
 810c1de:	f7ff f9b9 	bl	810b554 <__ulp>
 810c1e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c1e6:	ec51 0b10 	vmov	r0, r1, d0
 810c1ea:	f7f4 fa8d 	bl	8100708 <__aeabi_dmul>
 810c1ee:	4642      	mov	r2, r8
 810c1f0:	464b      	mov	r3, r9
 810c1f2:	f7f4 f8d3 	bl	810039c <__adddf3>
 810c1f6:	460b      	mov	r3, r1
 810c1f8:	4979      	ldr	r1, [pc, #484]	; (810c3e0 <_strtod_l+0xbd0>)
 810c1fa:	4a7b      	ldr	r2, [pc, #492]	; (810c3e8 <_strtod_l+0xbd8>)
 810c1fc:	4019      	ands	r1, r3
 810c1fe:	4291      	cmp	r1, r2
 810c200:	4680      	mov	r8, r0
 810c202:	d944      	bls.n	810c28e <_strtod_l+0xa7e>
 810c204:	ee18 2a90 	vmov	r2, s17
 810c208:	4b78      	ldr	r3, [pc, #480]	; (810c3ec <_strtod_l+0xbdc>)
 810c20a:	429a      	cmp	r2, r3
 810c20c:	d104      	bne.n	810c218 <_strtod_l+0xa08>
 810c20e:	ee18 3a10 	vmov	r3, s16
 810c212:	3301      	adds	r3, #1
 810c214:	f43f ad40 	beq.w	810bc98 <_strtod_l+0x488>
 810c218:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810c3ec <_strtod_l+0xbdc>
 810c21c:	f04f 38ff 	mov.w	r8, #4294967295
 810c220:	9916      	ldr	r1, [sp, #88]	; 0x58
 810c222:	4620      	mov	r0, r4
 810c224:	f7fe fe6a 	bl	810aefc <_Bfree>
 810c228:	9905      	ldr	r1, [sp, #20]
 810c22a:	4620      	mov	r0, r4
 810c22c:	f7fe fe66 	bl	810aefc <_Bfree>
 810c230:	4659      	mov	r1, fp
 810c232:	4620      	mov	r0, r4
 810c234:	f7fe fe62 	bl	810aefc <_Bfree>
 810c238:	4629      	mov	r1, r5
 810c23a:	4620      	mov	r0, r4
 810c23c:	f7fe fe5e 	bl	810aefc <_Bfree>
 810c240:	e609      	b.n	810be56 <_strtod_l+0x646>
 810c242:	f1b8 0f01 	cmp.w	r8, #1
 810c246:	d103      	bne.n	810c250 <_strtod_l+0xa40>
 810c248:	f1b9 0f00 	cmp.w	r9, #0
 810c24c:	f43f ad95 	beq.w	810bd7a <_strtod_l+0x56a>
 810c250:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810c3a8 <_strtod_l+0xb98>
 810c254:	4f60      	ldr	r7, [pc, #384]	; (810c3d8 <_strtod_l+0xbc8>)
 810c256:	ed8d 7b06 	vstr	d7, [sp, #24]
 810c25a:	2600      	movs	r6, #0
 810c25c:	e7ae      	b.n	810c1bc <_strtod_l+0x9ac>
 810c25e:	4f5f      	ldr	r7, [pc, #380]	; (810c3dc <_strtod_l+0xbcc>)
 810c260:	2600      	movs	r6, #0
 810c262:	e7a7      	b.n	810c1b4 <_strtod_l+0x9a4>
 810c264:	4b5d      	ldr	r3, [pc, #372]	; (810c3dc <_strtod_l+0xbcc>)
 810c266:	4630      	mov	r0, r6
 810c268:	4639      	mov	r1, r7
 810c26a:	2200      	movs	r2, #0
 810c26c:	f7f4 fa4c 	bl	8100708 <__aeabi_dmul>
 810c270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c272:	4606      	mov	r6, r0
 810c274:	460f      	mov	r7, r1
 810c276:	2b00      	cmp	r3, #0
 810c278:	d09c      	beq.n	810c1b4 <_strtod_l+0x9a4>
 810c27a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810c27e:	e79d      	b.n	810c1bc <_strtod_l+0x9ac>
 810c280:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810c3b0 <_strtod_l+0xba0>
 810c284:	ed8d 7b06 	vstr	d7, [sp, #24]
 810c288:	ec57 6b17 	vmov	r6, r7, d7
 810c28c:	e796      	b.n	810c1bc <_strtod_l+0x9ac>
 810c28e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810c292:	9b04      	ldr	r3, [sp, #16]
 810c294:	46ca      	mov	sl, r9
 810c296:	2b00      	cmp	r3, #0
 810c298:	d1c2      	bne.n	810c220 <_strtod_l+0xa10>
 810c29a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810c29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c2a0:	0d1b      	lsrs	r3, r3, #20
 810c2a2:	051b      	lsls	r3, r3, #20
 810c2a4:	429a      	cmp	r2, r3
 810c2a6:	d1bb      	bne.n	810c220 <_strtod_l+0xa10>
 810c2a8:	4630      	mov	r0, r6
 810c2aa:	4639      	mov	r1, r7
 810c2ac:	f7f4 fd8c 	bl	8100dc8 <__aeabi_d2lz>
 810c2b0:	f7f4 f9fc 	bl	81006ac <__aeabi_l2d>
 810c2b4:	4602      	mov	r2, r0
 810c2b6:	460b      	mov	r3, r1
 810c2b8:	4630      	mov	r0, r6
 810c2ba:	4639      	mov	r1, r7
 810c2bc:	f7f4 f86c 	bl	8100398 <__aeabi_dsub>
 810c2c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c2c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c2c6:	ea43 0308 	orr.w	r3, r3, r8
 810c2ca:	4313      	orrs	r3, r2
 810c2cc:	4606      	mov	r6, r0
 810c2ce:	460f      	mov	r7, r1
 810c2d0:	d054      	beq.n	810c37c <_strtod_l+0xb6c>
 810c2d2:	a339      	add	r3, pc, #228	; (adr r3, 810c3b8 <_strtod_l+0xba8>)
 810c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2d8:	f7f4 fc88 	bl	8100bec <__aeabi_dcmplt>
 810c2dc:	2800      	cmp	r0, #0
 810c2de:	f47f ace5 	bne.w	810bcac <_strtod_l+0x49c>
 810c2e2:	a337      	add	r3, pc, #220	; (adr r3, 810c3c0 <_strtod_l+0xbb0>)
 810c2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2e8:	4630      	mov	r0, r6
 810c2ea:	4639      	mov	r1, r7
 810c2ec:	f7f4 fc9c 	bl	8100c28 <__aeabi_dcmpgt>
 810c2f0:	2800      	cmp	r0, #0
 810c2f2:	d095      	beq.n	810c220 <_strtod_l+0xa10>
 810c2f4:	e4da      	b.n	810bcac <_strtod_l+0x49c>
 810c2f6:	9b04      	ldr	r3, [sp, #16]
 810c2f8:	b333      	cbz	r3, 810c348 <_strtod_l+0xb38>
 810c2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810c2fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810c300:	d822      	bhi.n	810c348 <_strtod_l+0xb38>
 810c302:	a331      	add	r3, pc, #196	; (adr r3, 810c3c8 <_strtod_l+0xbb8>)
 810c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c308:	4630      	mov	r0, r6
 810c30a:	4639      	mov	r1, r7
 810c30c:	f7f4 fc78 	bl	8100c00 <__aeabi_dcmple>
 810c310:	b1a0      	cbz	r0, 810c33c <_strtod_l+0xb2c>
 810c312:	4639      	mov	r1, r7
 810c314:	4630      	mov	r0, r6
 810c316:	f7f4 fccf 	bl	8100cb8 <__aeabi_d2uiz>
 810c31a:	2801      	cmp	r0, #1
 810c31c:	bf38      	it	cc
 810c31e:	2001      	movcc	r0, #1
 810c320:	f7f4 f978 	bl	8100614 <__aeabi_ui2d>
 810c324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c326:	4606      	mov	r6, r0
 810c328:	460f      	mov	r7, r1
 810c32a:	bb23      	cbnz	r3, 810c376 <_strtod_l+0xb66>
 810c32c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c330:	9010      	str	r0, [sp, #64]	; 0x40
 810c332:	9311      	str	r3, [sp, #68]	; 0x44
 810c334:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810c338:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810c33c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c33e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810c340:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810c344:	1a9b      	subs	r3, r3, r2
 810c346:	930f      	str	r3, [sp, #60]	; 0x3c
 810c348:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810c34c:	eeb0 0a48 	vmov.f32	s0, s16
 810c350:	eef0 0a68 	vmov.f32	s1, s17
 810c354:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810c358:	f7ff f8fc 	bl	810b554 <__ulp>
 810c35c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810c360:	ec53 2b10 	vmov	r2, r3, d0
 810c364:	f7f4 f9d0 	bl	8100708 <__aeabi_dmul>
 810c368:	ec53 2b18 	vmov	r2, r3, d8
 810c36c:	f7f4 f816 	bl	810039c <__adddf3>
 810c370:	4680      	mov	r8, r0
 810c372:	4689      	mov	r9, r1
 810c374:	e78d      	b.n	810c292 <_strtod_l+0xa82>
 810c376:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810c37a:	e7db      	b.n	810c334 <_strtod_l+0xb24>
 810c37c:	a314      	add	r3, pc, #80	; (adr r3, 810c3d0 <_strtod_l+0xbc0>)
 810c37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c382:	f7f4 fc33 	bl	8100bec <__aeabi_dcmplt>
 810c386:	e7b3      	b.n	810c2f0 <_strtod_l+0xae0>
 810c388:	2300      	movs	r3, #0
 810c38a:	930a      	str	r3, [sp, #40]	; 0x28
 810c38c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810c38e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c390:	6013      	str	r3, [r2, #0]
 810c392:	f7ff ba7c 	b.w	810b88e <_strtod_l+0x7e>
 810c396:	2a65      	cmp	r2, #101	; 0x65
 810c398:	f43f ab75 	beq.w	810ba86 <_strtod_l+0x276>
 810c39c:	2a45      	cmp	r2, #69	; 0x45
 810c39e:	f43f ab72 	beq.w	810ba86 <_strtod_l+0x276>
 810c3a2:	2301      	movs	r3, #1
 810c3a4:	f7ff bbaa 	b.w	810bafc <_strtod_l+0x2ec>
 810c3a8:	00000000 	.word	0x00000000
 810c3ac:	bff00000 	.word	0xbff00000
 810c3b0:	00000000 	.word	0x00000000
 810c3b4:	3ff00000 	.word	0x3ff00000
 810c3b8:	94a03595 	.word	0x94a03595
 810c3bc:	3fdfffff 	.word	0x3fdfffff
 810c3c0:	35afe535 	.word	0x35afe535
 810c3c4:	3fe00000 	.word	0x3fe00000
 810c3c8:	ffc00000 	.word	0xffc00000
 810c3cc:	41dfffff 	.word	0x41dfffff
 810c3d0:	94a03595 	.word	0x94a03595
 810c3d4:	3fcfffff 	.word	0x3fcfffff
 810c3d8:	3ff00000 	.word	0x3ff00000
 810c3dc:	3fe00000 	.word	0x3fe00000
 810c3e0:	7ff00000 	.word	0x7ff00000
 810c3e4:	7fe00000 	.word	0x7fe00000
 810c3e8:	7c9fffff 	.word	0x7c9fffff
 810c3ec:	7fefffff 	.word	0x7fefffff

0810c3f0 <_strtod_r>:
 810c3f0:	4b01      	ldr	r3, [pc, #4]	; (810c3f8 <_strtod_r+0x8>)
 810c3f2:	f7ff ba0d 	b.w	810b810 <_strtod_l>
 810c3f6:	bf00      	nop
 810c3f8:	100000dc 	.word	0x100000dc

0810c3fc <_strtol_l.constprop.0>:
 810c3fc:	2b01      	cmp	r3, #1
 810c3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c402:	d001      	beq.n	810c408 <_strtol_l.constprop.0+0xc>
 810c404:	2b24      	cmp	r3, #36	; 0x24
 810c406:	d906      	bls.n	810c416 <_strtol_l.constprop.0+0x1a>
 810c408:	f7fd fd88 	bl	8109f1c <__errno>
 810c40c:	2316      	movs	r3, #22
 810c40e:	6003      	str	r3, [r0, #0]
 810c410:	2000      	movs	r0, #0
 810c412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c416:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810c4fc <_strtol_l.constprop.0+0x100>
 810c41a:	460d      	mov	r5, r1
 810c41c:	462e      	mov	r6, r5
 810c41e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810c422:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810c426:	f017 0708 	ands.w	r7, r7, #8
 810c42a:	d1f7      	bne.n	810c41c <_strtol_l.constprop.0+0x20>
 810c42c:	2c2d      	cmp	r4, #45	; 0x2d
 810c42e:	d132      	bne.n	810c496 <_strtol_l.constprop.0+0x9a>
 810c430:	782c      	ldrb	r4, [r5, #0]
 810c432:	2701      	movs	r7, #1
 810c434:	1cb5      	adds	r5, r6, #2
 810c436:	2b00      	cmp	r3, #0
 810c438:	d05b      	beq.n	810c4f2 <_strtol_l.constprop.0+0xf6>
 810c43a:	2b10      	cmp	r3, #16
 810c43c:	d109      	bne.n	810c452 <_strtol_l.constprop.0+0x56>
 810c43e:	2c30      	cmp	r4, #48	; 0x30
 810c440:	d107      	bne.n	810c452 <_strtol_l.constprop.0+0x56>
 810c442:	782c      	ldrb	r4, [r5, #0]
 810c444:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810c448:	2c58      	cmp	r4, #88	; 0x58
 810c44a:	d14d      	bne.n	810c4e8 <_strtol_l.constprop.0+0xec>
 810c44c:	786c      	ldrb	r4, [r5, #1]
 810c44e:	2310      	movs	r3, #16
 810c450:	3502      	adds	r5, #2
 810c452:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810c456:	f108 38ff 	add.w	r8, r8, #4294967295
 810c45a:	f04f 0e00 	mov.w	lr, #0
 810c45e:	fbb8 f9f3 	udiv	r9, r8, r3
 810c462:	4676      	mov	r6, lr
 810c464:	fb03 8a19 	mls	sl, r3, r9, r8
 810c468:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810c46c:	f1bc 0f09 	cmp.w	ip, #9
 810c470:	d816      	bhi.n	810c4a0 <_strtol_l.constprop.0+0xa4>
 810c472:	4664      	mov	r4, ip
 810c474:	42a3      	cmp	r3, r4
 810c476:	dd24      	ble.n	810c4c2 <_strtol_l.constprop.0+0xc6>
 810c478:	f1be 3fff 	cmp.w	lr, #4294967295
 810c47c:	d008      	beq.n	810c490 <_strtol_l.constprop.0+0x94>
 810c47e:	45b1      	cmp	r9, r6
 810c480:	d31c      	bcc.n	810c4bc <_strtol_l.constprop.0+0xc0>
 810c482:	d101      	bne.n	810c488 <_strtol_l.constprop.0+0x8c>
 810c484:	45a2      	cmp	sl, r4
 810c486:	db19      	blt.n	810c4bc <_strtol_l.constprop.0+0xc0>
 810c488:	fb06 4603 	mla	r6, r6, r3, r4
 810c48c:	f04f 0e01 	mov.w	lr, #1
 810c490:	f815 4b01 	ldrb.w	r4, [r5], #1
 810c494:	e7e8      	b.n	810c468 <_strtol_l.constprop.0+0x6c>
 810c496:	2c2b      	cmp	r4, #43	; 0x2b
 810c498:	bf04      	itt	eq
 810c49a:	782c      	ldrbeq	r4, [r5, #0]
 810c49c:	1cb5      	addeq	r5, r6, #2
 810c49e:	e7ca      	b.n	810c436 <_strtol_l.constprop.0+0x3a>
 810c4a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810c4a4:	f1bc 0f19 	cmp.w	ip, #25
 810c4a8:	d801      	bhi.n	810c4ae <_strtol_l.constprop.0+0xb2>
 810c4aa:	3c37      	subs	r4, #55	; 0x37
 810c4ac:	e7e2      	b.n	810c474 <_strtol_l.constprop.0+0x78>
 810c4ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810c4b2:	f1bc 0f19 	cmp.w	ip, #25
 810c4b6:	d804      	bhi.n	810c4c2 <_strtol_l.constprop.0+0xc6>
 810c4b8:	3c57      	subs	r4, #87	; 0x57
 810c4ba:	e7db      	b.n	810c474 <_strtol_l.constprop.0+0x78>
 810c4bc:	f04f 3eff 	mov.w	lr, #4294967295
 810c4c0:	e7e6      	b.n	810c490 <_strtol_l.constprop.0+0x94>
 810c4c2:	f1be 3fff 	cmp.w	lr, #4294967295
 810c4c6:	d105      	bne.n	810c4d4 <_strtol_l.constprop.0+0xd8>
 810c4c8:	2322      	movs	r3, #34	; 0x22
 810c4ca:	6003      	str	r3, [r0, #0]
 810c4cc:	4646      	mov	r6, r8
 810c4ce:	b942      	cbnz	r2, 810c4e2 <_strtol_l.constprop.0+0xe6>
 810c4d0:	4630      	mov	r0, r6
 810c4d2:	e79e      	b.n	810c412 <_strtol_l.constprop.0+0x16>
 810c4d4:	b107      	cbz	r7, 810c4d8 <_strtol_l.constprop.0+0xdc>
 810c4d6:	4276      	negs	r6, r6
 810c4d8:	2a00      	cmp	r2, #0
 810c4da:	d0f9      	beq.n	810c4d0 <_strtol_l.constprop.0+0xd4>
 810c4dc:	f1be 0f00 	cmp.w	lr, #0
 810c4e0:	d000      	beq.n	810c4e4 <_strtol_l.constprop.0+0xe8>
 810c4e2:	1e69      	subs	r1, r5, #1
 810c4e4:	6011      	str	r1, [r2, #0]
 810c4e6:	e7f3      	b.n	810c4d0 <_strtol_l.constprop.0+0xd4>
 810c4e8:	2430      	movs	r4, #48	; 0x30
 810c4ea:	2b00      	cmp	r3, #0
 810c4ec:	d1b1      	bne.n	810c452 <_strtol_l.constprop.0+0x56>
 810c4ee:	2308      	movs	r3, #8
 810c4f0:	e7af      	b.n	810c452 <_strtol_l.constprop.0+0x56>
 810c4f2:	2c30      	cmp	r4, #48	; 0x30
 810c4f4:	d0a5      	beq.n	810c442 <_strtol_l.constprop.0+0x46>
 810c4f6:	230a      	movs	r3, #10
 810c4f8:	e7ab      	b.n	810c452 <_strtol_l.constprop.0+0x56>
 810c4fa:	bf00      	nop
 810c4fc:	08122b91 	.word	0x08122b91

0810c500 <_strtol_r>:
 810c500:	f7ff bf7c 	b.w	810c3fc <_strtol_l.constprop.0>

0810c504 <__ssputs_r>:
 810c504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c508:	688e      	ldr	r6, [r1, #8]
 810c50a:	461f      	mov	r7, r3
 810c50c:	42be      	cmp	r6, r7
 810c50e:	680b      	ldr	r3, [r1, #0]
 810c510:	4682      	mov	sl, r0
 810c512:	460c      	mov	r4, r1
 810c514:	4690      	mov	r8, r2
 810c516:	d82c      	bhi.n	810c572 <__ssputs_r+0x6e>
 810c518:	898a      	ldrh	r2, [r1, #12]
 810c51a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810c51e:	d026      	beq.n	810c56e <__ssputs_r+0x6a>
 810c520:	6965      	ldr	r5, [r4, #20]
 810c522:	6909      	ldr	r1, [r1, #16]
 810c524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810c528:	eba3 0901 	sub.w	r9, r3, r1
 810c52c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810c530:	1c7b      	adds	r3, r7, #1
 810c532:	444b      	add	r3, r9
 810c534:	106d      	asrs	r5, r5, #1
 810c536:	429d      	cmp	r5, r3
 810c538:	bf38      	it	cc
 810c53a:	461d      	movcc	r5, r3
 810c53c:	0553      	lsls	r3, r2, #21
 810c53e:	d527      	bpl.n	810c590 <__ssputs_r+0x8c>
 810c540:	4629      	mov	r1, r5
 810c542:	f7fe fc0f 	bl	810ad64 <_malloc_r>
 810c546:	4606      	mov	r6, r0
 810c548:	b360      	cbz	r0, 810c5a4 <__ssputs_r+0xa0>
 810c54a:	6921      	ldr	r1, [r4, #16]
 810c54c:	464a      	mov	r2, r9
 810c54e:	f000 fa1b 	bl	810c988 <memcpy>
 810c552:	89a3      	ldrh	r3, [r4, #12]
 810c554:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810c558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c55c:	81a3      	strh	r3, [r4, #12]
 810c55e:	6126      	str	r6, [r4, #16]
 810c560:	6165      	str	r5, [r4, #20]
 810c562:	444e      	add	r6, r9
 810c564:	eba5 0509 	sub.w	r5, r5, r9
 810c568:	6026      	str	r6, [r4, #0]
 810c56a:	60a5      	str	r5, [r4, #8]
 810c56c:	463e      	mov	r6, r7
 810c56e:	42be      	cmp	r6, r7
 810c570:	d900      	bls.n	810c574 <__ssputs_r+0x70>
 810c572:	463e      	mov	r6, r7
 810c574:	6820      	ldr	r0, [r4, #0]
 810c576:	4632      	mov	r2, r6
 810c578:	4641      	mov	r1, r8
 810c57a:	f000 f9c9 	bl	810c910 <memmove>
 810c57e:	68a3      	ldr	r3, [r4, #8]
 810c580:	1b9b      	subs	r3, r3, r6
 810c582:	60a3      	str	r3, [r4, #8]
 810c584:	6823      	ldr	r3, [r4, #0]
 810c586:	4433      	add	r3, r6
 810c588:	6023      	str	r3, [r4, #0]
 810c58a:	2000      	movs	r0, #0
 810c58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c590:	462a      	mov	r2, r5
 810c592:	f000 fdae 	bl	810d0f2 <_realloc_r>
 810c596:	4606      	mov	r6, r0
 810c598:	2800      	cmp	r0, #0
 810c59a:	d1e0      	bne.n	810c55e <__ssputs_r+0x5a>
 810c59c:	6921      	ldr	r1, [r4, #16]
 810c59e:	4650      	mov	r0, sl
 810c5a0:	f7fe fb6c 	bl	810ac7c <_free_r>
 810c5a4:	230c      	movs	r3, #12
 810c5a6:	f8ca 3000 	str.w	r3, [sl]
 810c5aa:	89a3      	ldrh	r3, [r4, #12]
 810c5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c5b0:	81a3      	strh	r3, [r4, #12]
 810c5b2:	f04f 30ff 	mov.w	r0, #4294967295
 810c5b6:	e7e9      	b.n	810c58c <__ssputs_r+0x88>

0810c5b8 <_svfiprintf_r>:
 810c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c5bc:	4698      	mov	r8, r3
 810c5be:	898b      	ldrh	r3, [r1, #12]
 810c5c0:	061b      	lsls	r3, r3, #24
 810c5c2:	b09d      	sub	sp, #116	; 0x74
 810c5c4:	4607      	mov	r7, r0
 810c5c6:	460d      	mov	r5, r1
 810c5c8:	4614      	mov	r4, r2
 810c5ca:	d50e      	bpl.n	810c5ea <_svfiprintf_r+0x32>
 810c5cc:	690b      	ldr	r3, [r1, #16]
 810c5ce:	b963      	cbnz	r3, 810c5ea <_svfiprintf_r+0x32>
 810c5d0:	2140      	movs	r1, #64	; 0x40
 810c5d2:	f7fe fbc7 	bl	810ad64 <_malloc_r>
 810c5d6:	6028      	str	r0, [r5, #0]
 810c5d8:	6128      	str	r0, [r5, #16]
 810c5da:	b920      	cbnz	r0, 810c5e6 <_svfiprintf_r+0x2e>
 810c5dc:	230c      	movs	r3, #12
 810c5de:	603b      	str	r3, [r7, #0]
 810c5e0:	f04f 30ff 	mov.w	r0, #4294967295
 810c5e4:	e0d0      	b.n	810c788 <_svfiprintf_r+0x1d0>
 810c5e6:	2340      	movs	r3, #64	; 0x40
 810c5e8:	616b      	str	r3, [r5, #20]
 810c5ea:	2300      	movs	r3, #0
 810c5ec:	9309      	str	r3, [sp, #36]	; 0x24
 810c5ee:	2320      	movs	r3, #32
 810c5f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810c5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 810c5f8:	2330      	movs	r3, #48	; 0x30
 810c5fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810c7a0 <_svfiprintf_r+0x1e8>
 810c5fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810c602:	f04f 0901 	mov.w	r9, #1
 810c606:	4623      	mov	r3, r4
 810c608:	469a      	mov	sl, r3
 810c60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c60e:	b10a      	cbz	r2, 810c614 <_svfiprintf_r+0x5c>
 810c610:	2a25      	cmp	r2, #37	; 0x25
 810c612:	d1f9      	bne.n	810c608 <_svfiprintf_r+0x50>
 810c614:	ebba 0b04 	subs.w	fp, sl, r4
 810c618:	d00b      	beq.n	810c632 <_svfiprintf_r+0x7a>
 810c61a:	465b      	mov	r3, fp
 810c61c:	4622      	mov	r2, r4
 810c61e:	4629      	mov	r1, r5
 810c620:	4638      	mov	r0, r7
 810c622:	f7ff ff6f 	bl	810c504 <__ssputs_r>
 810c626:	3001      	adds	r0, #1
 810c628:	f000 80a9 	beq.w	810c77e <_svfiprintf_r+0x1c6>
 810c62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810c62e:	445a      	add	r2, fp
 810c630:	9209      	str	r2, [sp, #36]	; 0x24
 810c632:	f89a 3000 	ldrb.w	r3, [sl]
 810c636:	2b00      	cmp	r3, #0
 810c638:	f000 80a1 	beq.w	810c77e <_svfiprintf_r+0x1c6>
 810c63c:	2300      	movs	r3, #0
 810c63e:	f04f 32ff 	mov.w	r2, #4294967295
 810c642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810c646:	f10a 0a01 	add.w	sl, sl, #1
 810c64a:	9304      	str	r3, [sp, #16]
 810c64c:	9307      	str	r3, [sp, #28]
 810c64e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810c652:	931a      	str	r3, [sp, #104]	; 0x68
 810c654:	4654      	mov	r4, sl
 810c656:	2205      	movs	r2, #5
 810c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c65c:	4850      	ldr	r0, [pc, #320]	; (810c7a0 <_svfiprintf_r+0x1e8>)
 810c65e:	f7f3 fe3f 	bl	81002e0 <memchr>
 810c662:	9a04      	ldr	r2, [sp, #16]
 810c664:	b9d8      	cbnz	r0, 810c69e <_svfiprintf_r+0xe6>
 810c666:	06d0      	lsls	r0, r2, #27
 810c668:	bf44      	itt	mi
 810c66a:	2320      	movmi	r3, #32
 810c66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c670:	0711      	lsls	r1, r2, #28
 810c672:	bf44      	itt	mi
 810c674:	232b      	movmi	r3, #43	; 0x2b
 810c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810c67a:	f89a 3000 	ldrb.w	r3, [sl]
 810c67e:	2b2a      	cmp	r3, #42	; 0x2a
 810c680:	d015      	beq.n	810c6ae <_svfiprintf_r+0xf6>
 810c682:	9a07      	ldr	r2, [sp, #28]
 810c684:	4654      	mov	r4, sl
 810c686:	2000      	movs	r0, #0
 810c688:	f04f 0c0a 	mov.w	ip, #10
 810c68c:	4621      	mov	r1, r4
 810c68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810c692:	3b30      	subs	r3, #48	; 0x30
 810c694:	2b09      	cmp	r3, #9
 810c696:	d94d      	bls.n	810c734 <_svfiprintf_r+0x17c>
 810c698:	b1b0      	cbz	r0, 810c6c8 <_svfiprintf_r+0x110>
 810c69a:	9207      	str	r2, [sp, #28]
 810c69c:	e014      	b.n	810c6c8 <_svfiprintf_r+0x110>
 810c69e:	eba0 0308 	sub.w	r3, r0, r8
 810c6a2:	fa09 f303 	lsl.w	r3, r9, r3
 810c6a6:	4313      	orrs	r3, r2
 810c6a8:	9304      	str	r3, [sp, #16]
 810c6aa:	46a2      	mov	sl, r4
 810c6ac:	e7d2      	b.n	810c654 <_svfiprintf_r+0x9c>
 810c6ae:	9b03      	ldr	r3, [sp, #12]
 810c6b0:	1d19      	adds	r1, r3, #4
 810c6b2:	681b      	ldr	r3, [r3, #0]
 810c6b4:	9103      	str	r1, [sp, #12]
 810c6b6:	2b00      	cmp	r3, #0
 810c6b8:	bfbb      	ittet	lt
 810c6ba:	425b      	neglt	r3, r3
 810c6bc:	f042 0202 	orrlt.w	r2, r2, #2
 810c6c0:	9307      	strge	r3, [sp, #28]
 810c6c2:	9307      	strlt	r3, [sp, #28]
 810c6c4:	bfb8      	it	lt
 810c6c6:	9204      	strlt	r2, [sp, #16]
 810c6c8:	7823      	ldrb	r3, [r4, #0]
 810c6ca:	2b2e      	cmp	r3, #46	; 0x2e
 810c6cc:	d10c      	bne.n	810c6e8 <_svfiprintf_r+0x130>
 810c6ce:	7863      	ldrb	r3, [r4, #1]
 810c6d0:	2b2a      	cmp	r3, #42	; 0x2a
 810c6d2:	d134      	bne.n	810c73e <_svfiprintf_r+0x186>
 810c6d4:	9b03      	ldr	r3, [sp, #12]
 810c6d6:	1d1a      	adds	r2, r3, #4
 810c6d8:	681b      	ldr	r3, [r3, #0]
 810c6da:	9203      	str	r2, [sp, #12]
 810c6dc:	2b00      	cmp	r3, #0
 810c6de:	bfb8      	it	lt
 810c6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 810c6e4:	3402      	adds	r4, #2
 810c6e6:	9305      	str	r3, [sp, #20]
 810c6e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810c7b0 <_svfiprintf_r+0x1f8>
 810c6ec:	7821      	ldrb	r1, [r4, #0]
 810c6ee:	2203      	movs	r2, #3
 810c6f0:	4650      	mov	r0, sl
 810c6f2:	f7f3 fdf5 	bl	81002e0 <memchr>
 810c6f6:	b138      	cbz	r0, 810c708 <_svfiprintf_r+0x150>
 810c6f8:	9b04      	ldr	r3, [sp, #16]
 810c6fa:	eba0 000a 	sub.w	r0, r0, sl
 810c6fe:	2240      	movs	r2, #64	; 0x40
 810c700:	4082      	lsls	r2, r0
 810c702:	4313      	orrs	r3, r2
 810c704:	3401      	adds	r4, #1
 810c706:	9304      	str	r3, [sp, #16]
 810c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c70c:	4825      	ldr	r0, [pc, #148]	; (810c7a4 <_svfiprintf_r+0x1ec>)
 810c70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810c712:	2206      	movs	r2, #6
 810c714:	f7f3 fde4 	bl	81002e0 <memchr>
 810c718:	2800      	cmp	r0, #0
 810c71a:	d038      	beq.n	810c78e <_svfiprintf_r+0x1d6>
 810c71c:	4b22      	ldr	r3, [pc, #136]	; (810c7a8 <_svfiprintf_r+0x1f0>)
 810c71e:	bb1b      	cbnz	r3, 810c768 <_svfiprintf_r+0x1b0>
 810c720:	9b03      	ldr	r3, [sp, #12]
 810c722:	3307      	adds	r3, #7
 810c724:	f023 0307 	bic.w	r3, r3, #7
 810c728:	3308      	adds	r3, #8
 810c72a:	9303      	str	r3, [sp, #12]
 810c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c72e:	4433      	add	r3, r6
 810c730:	9309      	str	r3, [sp, #36]	; 0x24
 810c732:	e768      	b.n	810c606 <_svfiprintf_r+0x4e>
 810c734:	fb0c 3202 	mla	r2, ip, r2, r3
 810c738:	460c      	mov	r4, r1
 810c73a:	2001      	movs	r0, #1
 810c73c:	e7a6      	b.n	810c68c <_svfiprintf_r+0xd4>
 810c73e:	2300      	movs	r3, #0
 810c740:	3401      	adds	r4, #1
 810c742:	9305      	str	r3, [sp, #20]
 810c744:	4619      	mov	r1, r3
 810c746:	f04f 0c0a 	mov.w	ip, #10
 810c74a:	4620      	mov	r0, r4
 810c74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c750:	3a30      	subs	r2, #48	; 0x30
 810c752:	2a09      	cmp	r2, #9
 810c754:	d903      	bls.n	810c75e <_svfiprintf_r+0x1a6>
 810c756:	2b00      	cmp	r3, #0
 810c758:	d0c6      	beq.n	810c6e8 <_svfiprintf_r+0x130>
 810c75a:	9105      	str	r1, [sp, #20]
 810c75c:	e7c4      	b.n	810c6e8 <_svfiprintf_r+0x130>
 810c75e:	fb0c 2101 	mla	r1, ip, r1, r2
 810c762:	4604      	mov	r4, r0
 810c764:	2301      	movs	r3, #1
 810c766:	e7f0      	b.n	810c74a <_svfiprintf_r+0x192>
 810c768:	ab03      	add	r3, sp, #12
 810c76a:	9300      	str	r3, [sp, #0]
 810c76c:	462a      	mov	r2, r5
 810c76e:	4b0f      	ldr	r3, [pc, #60]	; (810c7ac <_svfiprintf_r+0x1f4>)
 810c770:	a904      	add	r1, sp, #16
 810c772:	4638      	mov	r0, r7
 810c774:	f7fc fc84 	bl	8109080 <_printf_float>
 810c778:	1c42      	adds	r2, r0, #1
 810c77a:	4606      	mov	r6, r0
 810c77c:	d1d6      	bne.n	810c72c <_svfiprintf_r+0x174>
 810c77e:	89ab      	ldrh	r3, [r5, #12]
 810c780:	065b      	lsls	r3, r3, #25
 810c782:	f53f af2d 	bmi.w	810c5e0 <_svfiprintf_r+0x28>
 810c786:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c788:	b01d      	add	sp, #116	; 0x74
 810c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c78e:	ab03      	add	r3, sp, #12
 810c790:	9300      	str	r3, [sp, #0]
 810c792:	462a      	mov	r2, r5
 810c794:	4b05      	ldr	r3, [pc, #20]	; (810c7ac <_svfiprintf_r+0x1f4>)
 810c796:	a904      	add	r1, sp, #16
 810c798:	4638      	mov	r0, r7
 810c79a:	f7fc ff15 	bl	81095c8 <_printf_i>
 810c79e:	e7eb      	b.n	810c778 <_svfiprintf_r+0x1c0>
 810c7a0:	08122c91 	.word	0x08122c91
 810c7a4:	08122c9b 	.word	0x08122c9b
 810c7a8:	08109081 	.word	0x08109081
 810c7ac:	0810c505 	.word	0x0810c505
 810c7b0:	08122c97 	.word	0x08122c97

0810c7b4 <__sflush_r>:
 810c7b4:	898a      	ldrh	r2, [r1, #12]
 810c7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c7ba:	4605      	mov	r5, r0
 810c7bc:	0710      	lsls	r0, r2, #28
 810c7be:	460c      	mov	r4, r1
 810c7c0:	d458      	bmi.n	810c874 <__sflush_r+0xc0>
 810c7c2:	684b      	ldr	r3, [r1, #4]
 810c7c4:	2b00      	cmp	r3, #0
 810c7c6:	dc05      	bgt.n	810c7d4 <__sflush_r+0x20>
 810c7c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810c7ca:	2b00      	cmp	r3, #0
 810c7cc:	dc02      	bgt.n	810c7d4 <__sflush_r+0x20>
 810c7ce:	2000      	movs	r0, #0
 810c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c7d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c7d6:	2e00      	cmp	r6, #0
 810c7d8:	d0f9      	beq.n	810c7ce <__sflush_r+0x1a>
 810c7da:	2300      	movs	r3, #0
 810c7dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810c7e0:	682f      	ldr	r7, [r5, #0]
 810c7e2:	6a21      	ldr	r1, [r4, #32]
 810c7e4:	602b      	str	r3, [r5, #0]
 810c7e6:	d032      	beq.n	810c84e <__sflush_r+0x9a>
 810c7e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810c7ea:	89a3      	ldrh	r3, [r4, #12]
 810c7ec:	075a      	lsls	r2, r3, #29
 810c7ee:	d505      	bpl.n	810c7fc <__sflush_r+0x48>
 810c7f0:	6863      	ldr	r3, [r4, #4]
 810c7f2:	1ac0      	subs	r0, r0, r3
 810c7f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c7f6:	b10b      	cbz	r3, 810c7fc <__sflush_r+0x48>
 810c7f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c7fa:	1ac0      	subs	r0, r0, r3
 810c7fc:	2300      	movs	r3, #0
 810c7fe:	4602      	mov	r2, r0
 810c800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c802:	6a21      	ldr	r1, [r4, #32]
 810c804:	4628      	mov	r0, r5
 810c806:	47b0      	blx	r6
 810c808:	1c43      	adds	r3, r0, #1
 810c80a:	89a3      	ldrh	r3, [r4, #12]
 810c80c:	d106      	bne.n	810c81c <__sflush_r+0x68>
 810c80e:	6829      	ldr	r1, [r5, #0]
 810c810:	291d      	cmp	r1, #29
 810c812:	d82b      	bhi.n	810c86c <__sflush_r+0xb8>
 810c814:	4a29      	ldr	r2, [pc, #164]	; (810c8bc <__sflush_r+0x108>)
 810c816:	410a      	asrs	r2, r1
 810c818:	07d6      	lsls	r6, r2, #31
 810c81a:	d427      	bmi.n	810c86c <__sflush_r+0xb8>
 810c81c:	2200      	movs	r2, #0
 810c81e:	6062      	str	r2, [r4, #4]
 810c820:	04d9      	lsls	r1, r3, #19
 810c822:	6922      	ldr	r2, [r4, #16]
 810c824:	6022      	str	r2, [r4, #0]
 810c826:	d504      	bpl.n	810c832 <__sflush_r+0x7e>
 810c828:	1c42      	adds	r2, r0, #1
 810c82a:	d101      	bne.n	810c830 <__sflush_r+0x7c>
 810c82c:	682b      	ldr	r3, [r5, #0]
 810c82e:	b903      	cbnz	r3, 810c832 <__sflush_r+0x7e>
 810c830:	6560      	str	r0, [r4, #84]	; 0x54
 810c832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c834:	602f      	str	r7, [r5, #0]
 810c836:	2900      	cmp	r1, #0
 810c838:	d0c9      	beq.n	810c7ce <__sflush_r+0x1a>
 810c83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c83e:	4299      	cmp	r1, r3
 810c840:	d002      	beq.n	810c848 <__sflush_r+0x94>
 810c842:	4628      	mov	r0, r5
 810c844:	f7fe fa1a 	bl	810ac7c <_free_r>
 810c848:	2000      	movs	r0, #0
 810c84a:	6360      	str	r0, [r4, #52]	; 0x34
 810c84c:	e7c0      	b.n	810c7d0 <__sflush_r+0x1c>
 810c84e:	2301      	movs	r3, #1
 810c850:	4628      	mov	r0, r5
 810c852:	47b0      	blx	r6
 810c854:	1c41      	adds	r1, r0, #1
 810c856:	d1c8      	bne.n	810c7ea <__sflush_r+0x36>
 810c858:	682b      	ldr	r3, [r5, #0]
 810c85a:	2b00      	cmp	r3, #0
 810c85c:	d0c5      	beq.n	810c7ea <__sflush_r+0x36>
 810c85e:	2b1d      	cmp	r3, #29
 810c860:	d001      	beq.n	810c866 <__sflush_r+0xb2>
 810c862:	2b16      	cmp	r3, #22
 810c864:	d101      	bne.n	810c86a <__sflush_r+0xb6>
 810c866:	602f      	str	r7, [r5, #0]
 810c868:	e7b1      	b.n	810c7ce <__sflush_r+0x1a>
 810c86a:	89a3      	ldrh	r3, [r4, #12]
 810c86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c870:	81a3      	strh	r3, [r4, #12]
 810c872:	e7ad      	b.n	810c7d0 <__sflush_r+0x1c>
 810c874:	690f      	ldr	r7, [r1, #16]
 810c876:	2f00      	cmp	r7, #0
 810c878:	d0a9      	beq.n	810c7ce <__sflush_r+0x1a>
 810c87a:	0793      	lsls	r3, r2, #30
 810c87c:	680e      	ldr	r6, [r1, #0]
 810c87e:	bf08      	it	eq
 810c880:	694b      	ldreq	r3, [r1, #20]
 810c882:	600f      	str	r7, [r1, #0]
 810c884:	bf18      	it	ne
 810c886:	2300      	movne	r3, #0
 810c888:	eba6 0807 	sub.w	r8, r6, r7
 810c88c:	608b      	str	r3, [r1, #8]
 810c88e:	f1b8 0f00 	cmp.w	r8, #0
 810c892:	dd9c      	ble.n	810c7ce <__sflush_r+0x1a>
 810c894:	6a21      	ldr	r1, [r4, #32]
 810c896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810c898:	4643      	mov	r3, r8
 810c89a:	463a      	mov	r2, r7
 810c89c:	4628      	mov	r0, r5
 810c89e:	47b0      	blx	r6
 810c8a0:	2800      	cmp	r0, #0
 810c8a2:	dc06      	bgt.n	810c8b2 <__sflush_r+0xfe>
 810c8a4:	89a3      	ldrh	r3, [r4, #12]
 810c8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c8aa:	81a3      	strh	r3, [r4, #12]
 810c8ac:	f04f 30ff 	mov.w	r0, #4294967295
 810c8b0:	e78e      	b.n	810c7d0 <__sflush_r+0x1c>
 810c8b2:	4407      	add	r7, r0
 810c8b4:	eba8 0800 	sub.w	r8, r8, r0
 810c8b8:	e7e9      	b.n	810c88e <__sflush_r+0xda>
 810c8ba:	bf00      	nop
 810c8bc:	dfbffffe 	.word	0xdfbffffe

0810c8c0 <_fflush_r>:
 810c8c0:	b538      	push	{r3, r4, r5, lr}
 810c8c2:	690b      	ldr	r3, [r1, #16]
 810c8c4:	4605      	mov	r5, r0
 810c8c6:	460c      	mov	r4, r1
 810c8c8:	b913      	cbnz	r3, 810c8d0 <_fflush_r+0x10>
 810c8ca:	2500      	movs	r5, #0
 810c8cc:	4628      	mov	r0, r5
 810c8ce:	bd38      	pop	{r3, r4, r5, pc}
 810c8d0:	b118      	cbz	r0, 810c8da <_fflush_r+0x1a>
 810c8d2:	6a03      	ldr	r3, [r0, #32]
 810c8d4:	b90b      	cbnz	r3, 810c8da <_fflush_r+0x1a>
 810c8d6:	f7fd fa35 	bl	8109d44 <__sinit>
 810c8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c8de:	2b00      	cmp	r3, #0
 810c8e0:	d0f3      	beq.n	810c8ca <_fflush_r+0xa>
 810c8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810c8e4:	07d0      	lsls	r0, r2, #31
 810c8e6:	d404      	bmi.n	810c8f2 <_fflush_r+0x32>
 810c8e8:	0599      	lsls	r1, r3, #22
 810c8ea:	d402      	bmi.n	810c8f2 <_fflush_r+0x32>
 810c8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c8ee:	f7fd fb40 	bl	8109f72 <__retarget_lock_acquire_recursive>
 810c8f2:	4628      	mov	r0, r5
 810c8f4:	4621      	mov	r1, r4
 810c8f6:	f7ff ff5d 	bl	810c7b4 <__sflush_r>
 810c8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c8fc:	07da      	lsls	r2, r3, #31
 810c8fe:	4605      	mov	r5, r0
 810c900:	d4e4      	bmi.n	810c8cc <_fflush_r+0xc>
 810c902:	89a3      	ldrh	r3, [r4, #12]
 810c904:	059b      	lsls	r3, r3, #22
 810c906:	d4e1      	bmi.n	810c8cc <_fflush_r+0xc>
 810c908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c90a:	f7fd fb33 	bl	8109f74 <__retarget_lock_release_recursive>
 810c90e:	e7dd      	b.n	810c8cc <_fflush_r+0xc>

0810c910 <memmove>:
 810c910:	4288      	cmp	r0, r1
 810c912:	b510      	push	{r4, lr}
 810c914:	eb01 0402 	add.w	r4, r1, r2
 810c918:	d902      	bls.n	810c920 <memmove+0x10>
 810c91a:	4284      	cmp	r4, r0
 810c91c:	4623      	mov	r3, r4
 810c91e:	d807      	bhi.n	810c930 <memmove+0x20>
 810c920:	1e43      	subs	r3, r0, #1
 810c922:	42a1      	cmp	r1, r4
 810c924:	d008      	beq.n	810c938 <memmove+0x28>
 810c926:	f811 2b01 	ldrb.w	r2, [r1], #1
 810c92a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810c92e:	e7f8      	b.n	810c922 <memmove+0x12>
 810c930:	4402      	add	r2, r0
 810c932:	4601      	mov	r1, r0
 810c934:	428a      	cmp	r2, r1
 810c936:	d100      	bne.n	810c93a <memmove+0x2a>
 810c938:	bd10      	pop	{r4, pc}
 810c93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810c93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810c942:	e7f7      	b.n	810c934 <memmove+0x24>

0810c944 <strncmp>:
 810c944:	b510      	push	{r4, lr}
 810c946:	b16a      	cbz	r2, 810c964 <strncmp+0x20>
 810c948:	3901      	subs	r1, #1
 810c94a:	1884      	adds	r4, r0, r2
 810c94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810c950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810c954:	429a      	cmp	r2, r3
 810c956:	d103      	bne.n	810c960 <strncmp+0x1c>
 810c958:	42a0      	cmp	r0, r4
 810c95a:	d001      	beq.n	810c960 <strncmp+0x1c>
 810c95c:	2a00      	cmp	r2, #0
 810c95e:	d1f5      	bne.n	810c94c <strncmp+0x8>
 810c960:	1ad0      	subs	r0, r2, r3
 810c962:	bd10      	pop	{r4, pc}
 810c964:	4610      	mov	r0, r2
 810c966:	e7fc      	b.n	810c962 <strncmp+0x1e>

0810c968 <_sbrk_r>:
 810c968:	b538      	push	{r3, r4, r5, lr}
 810c96a:	4d06      	ldr	r5, [pc, #24]	; (810c984 <_sbrk_r+0x1c>)
 810c96c:	2300      	movs	r3, #0
 810c96e:	4604      	mov	r4, r0
 810c970:	4608      	mov	r0, r1
 810c972:	602b      	str	r3, [r5, #0]
 810c974:	f7f6 f844 	bl	8102a00 <_sbrk>
 810c978:	1c43      	adds	r3, r0, #1
 810c97a:	d102      	bne.n	810c982 <_sbrk_r+0x1a>
 810c97c:	682b      	ldr	r3, [r5, #0]
 810c97e:	b103      	cbz	r3, 810c982 <_sbrk_r+0x1a>
 810c980:	6023      	str	r3, [r4, #0]
 810c982:	bd38      	pop	{r3, r4, r5, pc}
 810c984:	10018ad0 	.word	0x10018ad0

0810c988 <memcpy>:
 810c988:	440a      	add	r2, r1
 810c98a:	4291      	cmp	r1, r2
 810c98c:	f100 33ff 	add.w	r3, r0, #4294967295
 810c990:	d100      	bne.n	810c994 <memcpy+0xc>
 810c992:	4770      	bx	lr
 810c994:	b510      	push	{r4, lr}
 810c996:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810c99e:	4291      	cmp	r1, r2
 810c9a0:	d1f9      	bne.n	810c996 <memcpy+0xe>
 810c9a2:	bd10      	pop	{r4, pc}
 810c9a4:	0000      	movs	r0, r0
	...

0810c9a8 <nan>:
 810c9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810c9b0 <nan+0x8>
 810c9ac:	4770      	bx	lr
 810c9ae:	bf00      	nop
 810c9b0:	00000000 	.word	0x00000000
 810c9b4:	7ff80000 	.word	0x7ff80000

0810c9b8 <__assert_func>:
 810c9b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810c9ba:	4614      	mov	r4, r2
 810c9bc:	461a      	mov	r2, r3
 810c9be:	4b09      	ldr	r3, [pc, #36]	; (810c9e4 <__assert_func+0x2c>)
 810c9c0:	681b      	ldr	r3, [r3, #0]
 810c9c2:	4605      	mov	r5, r0
 810c9c4:	68d8      	ldr	r0, [r3, #12]
 810c9c6:	b14c      	cbz	r4, 810c9dc <__assert_func+0x24>
 810c9c8:	4b07      	ldr	r3, [pc, #28]	; (810c9e8 <__assert_func+0x30>)
 810c9ca:	9100      	str	r1, [sp, #0]
 810c9cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810c9d0:	4906      	ldr	r1, [pc, #24]	; (810c9ec <__assert_func+0x34>)
 810c9d2:	462b      	mov	r3, r5
 810c9d4:	f000 fbca 	bl	810d16c <fiprintf>
 810c9d8:	f000 fbda 	bl	810d190 <abort>
 810c9dc:	4b04      	ldr	r3, [pc, #16]	; (810c9f0 <__assert_func+0x38>)
 810c9de:	461c      	mov	r4, r3
 810c9e0:	e7f3      	b.n	810c9ca <__assert_func+0x12>
 810c9e2:	bf00      	nop
 810c9e4:	100000d8 	.word	0x100000d8
 810c9e8:	08122caa 	.word	0x08122caa
 810c9ec:	08122cb7 	.word	0x08122cb7
 810c9f0:	08122ce5 	.word	0x08122ce5

0810c9f4 <_calloc_r>:
 810c9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c9f6:	fba1 2402 	umull	r2, r4, r1, r2
 810c9fa:	b94c      	cbnz	r4, 810ca10 <_calloc_r+0x1c>
 810c9fc:	4611      	mov	r1, r2
 810c9fe:	9201      	str	r2, [sp, #4]
 810ca00:	f7fe f9b0 	bl	810ad64 <_malloc_r>
 810ca04:	9a01      	ldr	r2, [sp, #4]
 810ca06:	4605      	mov	r5, r0
 810ca08:	b930      	cbnz	r0, 810ca18 <_calloc_r+0x24>
 810ca0a:	4628      	mov	r0, r5
 810ca0c:	b003      	add	sp, #12
 810ca0e:	bd30      	pop	{r4, r5, pc}
 810ca10:	220c      	movs	r2, #12
 810ca12:	6002      	str	r2, [r0, #0]
 810ca14:	2500      	movs	r5, #0
 810ca16:	e7f8      	b.n	810ca0a <_calloc_r+0x16>
 810ca18:	4621      	mov	r1, r4
 810ca1a:	f7fd fa2c 	bl	8109e76 <memset>
 810ca1e:	e7f4      	b.n	810ca0a <_calloc_r+0x16>

0810ca20 <rshift>:
 810ca20:	6903      	ldr	r3, [r0, #16]
 810ca22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810ca26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810ca2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 810ca2e:	f100 0414 	add.w	r4, r0, #20
 810ca32:	dd45      	ble.n	810cac0 <rshift+0xa0>
 810ca34:	f011 011f 	ands.w	r1, r1, #31
 810ca38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810ca3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810ca40:	d10c      	bne.n	810ca5c <rshift+0x3c>
 810ca42:	f100 0710 	add.w	r7, r0, #16
 810ca46:	4629      	mov	r1, r5
 810ca48:	42b1      	cmp	r1, r6
 810ca4a:	d334      	bcc.n	810cab6 <rshift+0x96>
 810ca4c:	1a9b      	subs	r3, r3, r2
 810ca4e:	009b      	lsls	r3, r3, #2
 810ca50:	1eea      	subs	r2, r5, #3
 810ca52:	4296      	cmp	r6, r2
 810ca54:	bf38      	it	cc
 810ca56:	2300      	movcc	r3, #0
 810ca58:	4423      	add	r3, r4
 810ca5a:	e015      	b.n	810ca88 <rshift+0x68>
 810ca5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810ca60:	f1c1 0820 	rsb	r8, r1, #32
 810ca64:	40cf      	lsrs	r7, r1
 810ca66:	f105 0e04 	add.w	lr, r5, #4
 810ca6a:	46a1      	mov	r9, r4
 810ca6c:	4576      	cmp	r6, lr
 810ca6e:	46f4      	mov	ip, lr
 810ca70:	d815      	bhi.n	810ca9e <rshift+0x7e>
 810ca72:	1a9a      	subs	r2, r3, r2
 810ca74:	0092      	lsls	r2, r2, #2
 810ca76:	3a04      	subs	r2, #4
 810ca78:	3501      	adds	r5, #1
 810ca7a:	42ae      	cmp	r6, r5
 810ca7c:	bf38      	it	cc
 810ca7e:	2200      	movcc	r2, #0
 810ca80:	18a3      	adds	r3, r4, r2
 810ca82:	50a7      	str	r7, [r4, r2]
 810ca84:	b107      	cbz	r7, 810ca88 <rshift+0x68>
 810ca86:	3304      	adds	r3, #4
 810ca88:	1b1a      	subs	r2, r3, r4
 810ca8a:	42a3      	cmp	r3, r4
 810ca8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810ca90:	bf08      	it	eq
 810ca92:	2300      	moveq	r3, #0
 810ca94:	6102      	str	r2, [r0, #16]
 810ca96:	bf08      	it	eq
 810ca98:	6143      	streq	r3, [r0, #20]
 810ca9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ca9e:	f8dc c000 	ldr.w	ip, [ip]
 810caa2:	fa0c fc08 	lsl.w	ip, ip, r8
 810caa6:	ea4c 0707 	orr.w	r7, ip, r7
 810caaa:	f849 7b04 	str.w	r7, [r9], #4
 810caae:	f85e 7b04 	ldr.w	r7, [lr], #4
 810cab2:	40cf      	lsrs	r7, r1
 810cab4:	e7da      	b.n	810ca6c <rshift+0x4c>
 810cab6:	f851 cb04 	ldr.w	ip, [r1], #4
 810caba:	f847 cf04 	str.w	ip, [r7, #4]!
 810cabe:	e7c3      	b.n	810ca48 <rshift+0x28>
 810cac0:	4623      	mov	r3, r4
 810cac2:	e7e1      	b.n	810ca88 <rshift+0x68>

0810cac4 <__hexdig_fun>:
 810cac4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810cac8:	2b09      	cmp	r3, #9
 810caca:	d802      	bhi.n	810cad2 <__hexdig_fun+0xe>
 810cacc:	3820      	subs	r0, #32
 810cace:	b2c0      	uxtb	r0, r0
 810cad0:	4770      	bx	lr
 810cad2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810cad6:	2b05      	cmp	r3, #5
 810cad8:	d801      	bhi.n	810cade <__hexdig_fun+0x1a>
 810cada:	3847      	subs	r0, #71	; 0x47
 810cadc:	e7f7      	b.n	810cace <__hexdig_fun+0xa>
 810cade:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810cae2:	2b05      	cmp	r3, #5
 810cae4:	d801      	bhi.n	810caea <__hexdig_fun+0x26>
 810cae6:	3827      	subs	r0, #39	; 0x27
 810cae8:	e7f1      	b.n	810cace <__hexdig_fun+0xa>
 810caea:	2000      	movs	r0, #0
 810caec:	4770      	bx	lr
	...

0810caf0 <__gethex>:
 810caf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810caf4:	4617      	mov	r7, r2
 810caf6:	680a      	ldr	r2, [r1, #0]
 810caf8:	b085      	sub	sp, #20
 810cafa:	f102 0b02 	add.w	fp, r2, #2
 810cafe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810cb02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810cb06:	4681      	mov	r9, r0
 810cb08:	468a      	mov	sl, r1
 810cb0a:	9302      	str	r3, [sp, #8]
 810cb0c:	32fe      	adds	r2, #254	; 0xfe
 810cb0e:	eb02 030b 	add.w	r3, r2, fp
 810cb12:	46d8      	mov	r8, fp
 810cb14:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810cb18:	9301      	str	r3, [sp, #4]
 810cb1a:	2830      	cmp	r0, #48	; 0x30
 810cb1c:	d0f7      	beq.n	810cb0e <__gethex+0x1e>
 810cb1e:	f7ff ffd1 	bl	810cac4 <__hexdig_fun>
 810cb22:	4604      	mov	r4, r0
 810cb24:	2800      	cmp	r0, #0
 810cb26:	d138      	bne.n	810cb9a <__gethex+0xaa>
 810cb28:	49a7      	ldr	r1, [pc, #668]	; (810cdc8 <__gethex+0x2d8>)
 810cb2a:	2201      	movs	r2, #1
 810cb2c:	4640      	mov	r0, r8
 810cb2e:	f7ff ff09 	bl	810c944 <strncmp>
 810cb32:	4606      	mov	r6, r0
 810cb34:	2800      	cmp	r0, #0
 810cb36:	d169      	bne.n	810cc0c <__gethex+0x11c>
 810cb38:	f898 0001 	ldrb.w	r0, [r8, #1]
 810cb3c:	465d      	mov	r5, fp
 810cb3e:	f7ff ffc1 	bl	810cac4 <__hexdig_fun>
 810cb42:	2800      	cmp	r0, #0
 810cb44:	d064      	beq.n	810cc10 <__gethex+0x120>
 810cb46:	465a      	mov	r2, fp
 810cb48:	7810      	ldrb	r0, [r2, #0]
 810cb4a:	2830      	cmp	r0, #48	; 0x30
 810cb4c:	4690      	mov	r8, r2
 810cb4e:	f102 0201 	add.w	r2, r2, #1
 810cb52:	d0f9      	beq.n	810cb48 <__gethex+0x58>
 810cb54:	f7ff ffb6 	bl	810cac4 <__hexdig_fun>
 810cb58:	2301      	movs	r3, #1
 810cb5a:	fab0 f480 	clz	r4, r0
 810cb5e:	0964      	lsrs	r4, r4, #5
 810cb60:	465e      	mov	r6, fp
 810cb62:	9301      	str	r3, [sp, #4]
 810cb64:	4642      	mov	r2, r8
 810cb66:	4615      	mov	r5, r2
 810cb68:	3201      	adds	r2, #1
 810cb6a:	7828      	ldrb	r0, [r5, #0]
 810cb6c:	f7ff ffaa 	bl	810cac4 <__hexdig_fun>
 810cb70:	2800      	cmp	r0, #0
 810cb72:	d1f8      	bne.n	810cb66 <__gethex+0x76>
 810cb74:	4994      	ldr	r1, [pc, #592]	; (810cdc8 <__gethex+0x2d8>)
 810cb76:	2201      	movs	r2, #1
 810cb78:	4628      	mov	r0, r5
 810cb7a:	f7ff fee3 	bl	810c944 <strncmp>
 810cb7e:	b978      	cbnz	r0, 810cba0 <__gethex+0xb0>
 810cb80:	b946      	cbnz	r6, 810cb94 <__gethex+0xa4>
 810cb82:	1c6e      	adds	r6, r5, #1
 810cb84:	4632      	mov	r2, r6
 810cb86:	4615      	mov	r5, r2
 810cb88:	3201      	adds	r2, #1
 810cb8a:	7828      	ldrb	r0, [r5, #0]
 810cb8c:	f7ff ff9a 	bl	810cac4 <__hexdig_fun>
 810cb90:	2800      	cmp	r0, #0
 810cb92:	d1f8      	bne.n	810cb86 <__gethex+0x96>
 810cb94:	1b73      	subs	r3, r6, r5
 810cb96:	009e      	lsls	r6, r3, #2
 810cb98:	e004      	b.n	810cba4 <__gethex+0xb4>
 810cb9a:	2400      	movs	r4, #0
 810cb9c:	4626      	mov	r6, r4
 810cb9e:	e7e1      	b.n	810cb64 <__gethex+0x74>
 810cba0:	2e00      	cmp	r6, #0
 810cba2:	d1f7      	bne.n	810cb94 <__gethex+0xa4>
 810cba4:	782b      	ldrb	r3, [r5, #0]
 810cba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810cbaa:	2b50      	cmp	r3, #80	; 0x50
 810cbac:	d13d      	bne.n	810cc2a <__gethex+0x13a>
 810cbae:	786b      	ldrb	r3, [r5, #1]
 810cbb0:	2b2b      	cmp	r3, #43	; 0x2b
 810cbb2:	d02f      	beq.n	810cc14 <__gethex+0x124>
 810cbb4:	2b2d      	cmp	r3, #45	; 0x2d
 810cbb6:	d031      	beq.n	810cc1c <__gethex+0x12c>
 810cbb8:	1c69      	adds	r1, r5, #1
 810cbba:	f04f 0b00 	mov.w	fp, #0
 810cbbe:	7808      	ldrb	r0, [r1, #0]
 810cbc0:	f7ff ff80 	bl	810cac4 <__hexdig_fun>
 810cbc4:	1e42      	subs	r2, r0, #1
 810cbc6:	b2d2      	uxtb	r2, r2
 810cbc8:	2a18      	cmp	r2, #24
 810cbca:	d82e      	bhi.n	810cc2a <__gethex+0x13a>
 810cbcc:	f1a0 0210 	sub.w	r2, r0, #16
 810cbd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810cbd4:	f7ff ff76 	bl	810cac4 <__hexdig_fun>
 810cbd8:	f100 3cff 	add.w	ip, r0, #4294967295
 810cbdc:	fa5f fc8c 	uxtb.w	ip, ip
 810cbe0:	f1bc 0f18 	cmp.w	ip, #24
 810cbe4:	d91d      	bls.n	810cc22 <__gethex+0x132>
 810cbe6:	f1bb 0f00 	cmp.w	fp, #0
 810cbea:	d000      	beq.n	810cbee <__gethex+0xfe>
 810cbec:	4252      	negs	r2, r2
 810cbee:	4416      	add	r6, r2
 810cbf0:	f8ca 1000 	str.w	r1, [sl]
 810cbf4:	b1dc      	cbz	r4, 810cc2e <__gethex+0x13e>
 810cbf6:	9b01      	ldr	r3, [sp, #4]
 810cbf8:	2b00      	cmp	r3, #0
 810cbfa:	bf14      	ite	ne
 810cbfc:	f04f 0800 	movne.w	r8, #0
 810cc00:	f04f 0806 	moveq.w	r8, #6
 810cc04:	4640      	mov	r0, r8
 810cc06:	b005      	add	sp, #20
 810cc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cc0c:	4645      	mov	r5, r8
 810cc0e:	4626      	mov	r6, r4
 810cc10:	2401      	movs	r4, #1
 810cc12:	e7c7      	b.n	810cba4 <__gethex+0xb4>
 810cc14:	f04f 0b00 	mov.w	fp, #0
 810cc18:	1ca9      	adds	r1, r5, #2
 810cc1a:	e7d0      	b.n	810cbbe <__gethex+0xce>
 810cc1c:	f04f 0b01 	mov.w	fp, #1
 810cc20:	e7fa      	b.n	810cc18 <__gethex+0x128>
 810cc22:	230a      	movs	r3, #10
 810cc24:	fb03 0002 	mla	r0, r3, r2, r0
 810cc28:	e7d0      	b.n	810cbcc <__gethex+0xdc>
 810cc2a:	4629      	mov	r1, r5
 810cc2c:	e7e0      	b.n	810cbf0 <__gethex+0x100>
 810cc2e:	eba5 0308 	sub.w	r3, r5, r8
 810cc32:	3b01      	subs	r3, #1
 810cc34:	4621      	mov	r1, r4
 810cc36:	2b07      	cmp	r3, #7
 810cc38:	dc0a      	bgt.n	810cc50 <__gethex+0x160>
 810cc3a:	4648      	mov	r0, r9
 810cc3c:	f7fe f91e 	bl	810ae7c <_Balloc>
 810cc40:	4604      	mov	r4, r0
 810cc42:	b940      	cbnz	r0, 810cc56 <__gethex+0x166>
 810cc44:	4b61      	ldr	r3, [pc, #388]	; (810cdcc <__gethex+0x2dc>)
 810cc46:	4602      	mov	r2, r0
 810cc48:	21e4      	movs	r1, #228	; 0xe4
 810cc4a:	4861      	ldr	r0, [pc, #388]	; (810cdd0 <__gethex+0x2e0>)
 810cc4c:	f7ff feb4 	bl	810c9b8 <__assert_func>
 810cc50:	3101      	adds	r1, #1
 810cc52:	105b      	asrs	r3, r3, #1
 810cc54:	e7ef      	b.n	810cc36 <__gethex+0x146>
 810cc56:	f100 0a14 	add.w	sl, r0, #20
 810cc5a:	2300      	movs	r3, #0
 810cc5c:	495a      	ldr	r1, [pc, #360]	; (810cdc8 <__gethex+0x2d8>)
 810cc5e:	f8cd a004 	str.w	sl, [sp, #4]
 810cc62:	469b      	mov	fp, r3
 810cc64:	45a8      	cmp	r8, r5
 810cc66:	d342      	bcc.n	810ccee <__gethex+0x1fe>
 810cc68:	9801      	ldr	r0, [sp, #4]
 810cc6a:	f840 bb04 	str.w	fp, [r0], #4
 810cc6e:	eba0 000a 	sub.w	r0, r0, sl
 810cc72:	1080      	asrs	r0, r0, #2
 810cc74:	6120      	str	r0, [r4, #16]
 810cc76:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810cc7a:	4658      	mov	r0, fp
 810cc7c:	f7fe f9f0 	bl	810b060 <__hi0bits>
 810cc80:	683d      	ldr	r5, [r7, #0]
 810cc82:	eba8 0000 	sub.w	r0, r8, r0
 810cc86:	42a8      	cmp	r0, r5
 810cc88:	dd59      	ble.n	810cd3e <__gethex+0x24e>
 810cc8a:	eba0 0805 	sub.w	r8, r0, r5
 810cc8e:	4641      	mov	r1, r8
 810cc90:	4620      	mov	r0, r4
 810cc92:	f7fe fd7f 	bl	810b794 <__any_on>
 810cc96:	4683      	mov	fp, r0
 810cc98:	b1b8      	cbz	r0, 810ccca <__gethex+0x1da>
 810cc9a:	f108 33ff 	add.w	r3, r8, #4294967295
 810cc9e:	1159      	asrs	r1, r3, #5
 810cca0:	f003 021f 	and.w	r2, r3, #31
 810cca4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810cca8:	f04f 0b01 	mov.w	fp, #1
 810ccac:	fa0b f202 	lsl.w	r2, fp, r2
 810ccb0:	420a      	tst	r2, r1
 810ccb2:	d00a      	beq.n	810ccca <__gethex+0x1da>
 810ccb4:	455b      	cmp	r3, fp
 810ccb6:	dd06      	ble.n	810ccc6 <__gethex+0x1d6>
 810ccb8:	f1a8 0102 	sub.w	r1, r8, #2
 810ccbc:	4620      	mov	r0, r4
 810ccbe:	f7fe fd69 	bl	810b794 <__any_on>
 810ccc2:	2800      	cmp	r0, #0
 810ccc4:	d138      	bne.n	810cd38 <__gethex+0x248>
 810ccc6:	f04f 0b02 	mov.w	fp, #2
 810ccca:	4641      	mov	r1, r8
 810cccc:	4620      	mov	r0, r4
 810ccce:	f7ff fea7 	bl	810ca20 <rshift>
 810ccd2:	4446      	add	r6, r8
 810ccd4:	68bb      	ldr	r3, [r7, #8]
 810ccd6:	42b3      	cmp	r3, r6
 810ccd8:	da41      	bge.n	810cd5e <__gethex+0x26e>
 810ccda:	4621      	mov	r1, r4
 810ccdc:	4648      	mov	r0, r9
 810ccde:	f7fe f90d 	bl	810aefc <_Bfree>
 810cce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810cce4:	2300      	movs	r3, #0
 810cce6:	6013      	str	r3, [r2, #0]
 810cce8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810ccec:	e78a      	b.n	810cc04 <__gethex+0x114>
 810ccee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810ccf2:	2a2e      	cmp	r2, #46	; 0x2e
 810ccf4:	d014      	beq.n	810cd20 <__gethex+0x230>
 810ccf6:	2b20      	cmp	r3, #32
 810ccf8:	d106      	bne.n	810cd08 <__gethex+0x218>
 810ccfa:	9b01      	ldr	r3, [sp, #4]
 810ccfc:	f843 bb04 	str.w	fp, [r3], #4
 810cd00:	f04f 0b00 	mov.w	fp, #0
 810cd04:	9301      	str	r3, [sp, #4]
 810cd06:	465b      	mov	r3, fp
 810cd08:	7828      	ldrb	r0, [r5, #0]
 810cd0a:	9303      	str	r3, [sp, #12]
 810cd0c:	f7ff feda 	bl	810cac4 <__hexdig_fun>
 810cd10:	9b03      	ldr	r3, [sp, #12]
 810cd12:	f000 000f 	and.w	r0, r0, #15
 810cd16:	4098      	lsls	r0, r3
 810cd18:	ea4b 0b00 	orr.w	fp, fp, r0
 810cd1c:	3304      	adds	r3, #4
 810cd1e:	e7a1      	b.n	810cc64 <__gethex+0x174>
 810cd20:	45a8      	cmp	r8, r5
 810cd22:	d8e8      	bhi.n	810ccf6 <__gethex+0x206>
 810cd24:	2201      	movs	r2, #1
 810cd26:	4628      	mov	r0, r5
 810cd28:	9303      	str	r3, [sp, #12]
 810cd2a:	f7ff fe0b 	bl	810c944 <strncmp>
 810cd2e:	4926      	ldr	r1, [pc, #152]	; (810cdc8 <__gethex+0x2d8>)
 810cd30:	9b03      	ldr	r3, [sp, #12]
 810cd32:	2800      	cmp	r0, #0
 810cd34:	d1df      	bne.n	810ccf6 <__gethex+0x206>
 810cd36:	e795      	b.n	810cc64 <__gethex+0x174>
 810cd38:	f04f 0b03 	mov.w	fp, #3
 810cd3c:	e7c5      	b.n	810ccca <__gethex+0x1da>
 810cd3e:	da0b      	bge.n	810cd58 <__gethex+0x268>
 810cd40:	eba5 0800 	sub.w	r8, r5, r0
 810cd44:	4621      	mov	r1, r4
 810cd46:	4642      	mov	r2, r8
 810cd48:	4648      	mov	r0, r9
 810cd4a:	f7fe faf1 	bl	810b330 <__lshift>
 810cd4e:	eba6 0608 	sub.w	r6, r6, r8
 810cd52:	4604      	mov	r4, r0
 810cd54:	f100 0a14 	add.w	sl, r0, #20
 810cd58:	f04f 0b00 	mov.w	fp, #0
 810cd5c:	e7ba      	b.n	810ccd4 <__gethex+0x1e4>
 810cd5e:	687b      	ldr	r3, [r7, #4]
 810cd60:	42b3      	cmp	r3, r6
 810cd62:	dd73      	ble.n	810ce4c <__gethex+0x35c>
 810cd64:	1b9e      	subs	r6, r3, r6
 810cd66:	42b5      	cmp	r5, r6
 810cd68:	dc34      	bgt.n	810cdd4 <__gethex+0x2e4>
 810cd6a:	68fb      	ldr	r3, [r7, #12]
 810cd6c:	2b02      	cmp	r3, #2
 810cd6e:	d023      	beq.n	810cdb8 <__gethex+0x2c8>
 810cd70:	2b03      	cmp	r3, #3
 810cd72:	d025      	beq.n	810cdc0 <__gethex+0x2d0>
 810cd74:	2b01      	cmp	r3, #1
 810cd76:	d115      	bne.n	810cda4 <__gethex+0x2b4>
 810cd78:	42b5      	cmp	r5, r6
 810cd7a:	d113      	bne.n	810cda4 <__gethex+0x2b4>
 810cd7c:	2d01      	cmp	r5, #1
 810cd7e:	d10b      	bne.n	810cd98 <__gethex+0x2a8>
 810cd80:	9a02      	ldr	r2, [sp, #8]
 810cd82:	687b      	ldr	r3, [r7, #4]
 810cd84:	6013      	str	r3, [r2, #0]
 810cd86:	2301      	movs	r3, #1
 810cd88:	6123      	str	r3, [r4, #16]
 810cd8a:	f8ca 3000 	str.w	r3, [sl]
 810cd8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810cd90:	f04f 0862 	mov.w	r8, #98	; 0x62
 810cd94:	601c      	str	r4, [r3, #0]
 810cd96:	e735      	b.n	810cc04 <__gethex+0x114>
 810cd98:	1e69      	subs	r1, r5, #1
 810cd9a:	4620      	mov	r0, r4
 810cd9c:	f7fe fcfa 	bl	810b794 <__any_on>
 810cda0:	2800      	cmp	r0, #0
 810cda2:	d1ed      	bne.n	810cd80 <__gethex+0x290>
 810cda4:	4621      	mov	r1, r4
 810cda6:	4648      	mov	r0, r9
 810cda8:	f7fe f8a8 	bl	810aefc <_Bfree>
 810cdac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810cdae:	2300      	movs	r3, #0
 810cdb0:	6013      	str	r3, [r2, #0]
 810cdb2:	f04f 0850 	mov.w	r8, #80	; 0x50
 810cdb6:	e725      	b.n	810cc04 <__gethex+0x114>
 810cdb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810cdba:	2b00      	cmp	r3, #0
 810cdbc:	d1f2      	bne.n	810cda4 <__gethex+0x2b4>
 810cdbe:	e7df      	b.n	810cd80 <__gethex+0x290>
 810cdc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810cdc2:	2b00      	cmp	r3, #0
 810cdc4:	d1dc      	bne.n	810cd80 <__gethex+0x290>
 810cdc6:	e7ed      	b.n	810cda4 <__gethex+0x2b4>
 810cdc8:	08122b3c 	.word	0x08122b3c
 810cdcc:	081229d1 	.word	0x081229d1
 810cdd0:	08122ce6 	.word	0x08122ce6
 810cdd4:	f106 38ff 	add.w	r8, r6, #4294967295
 810cdd8:	f1bb 0f00 	cmp.w	fp, #0
 810cddc:	d133      	bne.n	810ce46 <__gethex+0x356>
 810cdde:	f1b8 0f00 	cmp.w	r8, #0
 810cde2:	d004      	beq.n	810cdee <__gethex+0x2fe>
 810cde4:	4641      	mov	r1, r8
 810cde6:	4620      	mov	r0, r4
 810cde8:	f7fe fcd4 	bl	810b794 <__any_on>
 810cdec:	4683      	mov	fp, r0
 810cdee:	ea4f 1268 	mov.w	r2, r8, asr #5
 810cdf2:	2301      	movs	r3, #1
 810cdf4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810cdf8:	f008 081f 	and.w	r8, r8, #31
 810cdfc:	fa03 f308 	lsl.w	r3, r3, r8
 810ce00:	4213      	tst	r3, r2
 810ce02:	4631      	mov	r1, r6
 810ce04:	4620      	mov	r0, r4
 810ce06:	bf18      	it	ne
 810ce08:	f04b 0b02 	orrne.w	fp, fp, #2
 810ce0c:	1bad      	subs	r5, r5, r6
 810ce0e:	f7ff fe07 	bl	810ca20 <rshift>
 810ce12:	687e      	ldr	r6, [r7, #4]
 810ce14:	f04f 0802 	mov.w	r8, #2
 810ce18:	f1bb 0f00 	cmp.w	fp, #0
 810ce1c:	d04a      	beq.n	810ceb4 <__gethex+0x3c4>
 810ce1e:	68fb      	ldr	r3, [r7, #12]
 810ce20:	2b02      	cmp	r3, #2
 810ce22:	d016      	beq.n	810ce52 <__gethex+0x362>
 810ce24:	2b03      	cmp	r3, #3
 810ce26:	d018      	beq.n	810ce5a <__gethex+0x36a>
 810ce28:	2b01      	cmp	r3, #1
 810ce2a:	d109      	bne.n	810ce40 <__gethex+0x350>
 810ce2c:	f01b 0f02 	tst.w	fp, #2
 810ce30:	d006      	beq.n	810ce40 <__gethex+0x350>
 810ce32:	f8da 3000 	ldr.w	r3, [sl]
 810ce36:	ea4b 0b03 	orr.w	fp, fp, r3
 810ce3a:	f01b 0f01 	tst.w	fp, #1
 810ce3e:	d10f      	bne.n	810ce60 <__gethex+0x370>
 810ce40:	f048 0810 	orr.w	r8, r8, #16
 810ce44:	e036      	b.n	810ceb4 <__gethex+0x3c4>
 810ce46:	f04f 0b01 	mov.w	fp, #1
 810ce4a:	e7d0      	b.n	810cdee <__gethex+0x2fe>
 810ce4c:	f04f 0801 	mov.w	r8, #1
 810ce50:	e7e2      	b.n	810ce18 <__gethex+0x328>
 810ce52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ce54:	f1c3 0301 	rsb	r3, r3, #1
 810ce58:	930f      	str	r3, [sp, #60]	; 0x3c
 810ce5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810ce5c:	2b00      	cmp	r3, #0
 810ce5e:	d0ef      	beq.n	810ce40 <__gethex+0x350>
 810ce60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810ce64:	f104 0214 	add.w	r2, r4, #20
 810ce68:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810ce6c:	9301      	str	r3, [sp, #4]
 810ce6e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810ce72:	2300      	movs	r3, #0
 810ce74:	4694      	mov	ip, r2
 810ce76:	f852 1b04 	ldr.w	r1, [r2], #4
 810ce7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 810ce7e:	d01e      	beq.n	810cebe <__gethex+0x3ce>
 810ce80:	3101      	adds	r1, #1
 810ce82:	f8cc 1000 	str.w	r1, [ip]
 810ce86:	f1b8 0f02 	cmp.w	r8, #2
 810ce8a:	f104 0214 	add.w	r2, r4, #20
 810ce8e:	d13d      	bne.n	810cf0c <__gethex+0x41c>
 810ce90:	683b      	ldr	r3, [r7, #0]
 810ce92:	3b01      	subs	r3, #1
 810ce94:	42ab      	cmp	r3, r5
 810ce96:	d10b      	bne.n	810ceb0 <__gethex+0x3c0>
 810ce98:	1169      	asrs	r1, r5, #5
 810ce9a:	2301      	movs	r3, #1
 810ce9c:	f005 051f 	and.w	r5, r5, #31
 810cea0:	fa03 f505 	lsl.w	r5, r3, r5
 810cea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810cea8:	421d      	tst	r5, r3
 810ceaa:	bf18      	it	ne
 810ceac:	f04f 0801 	movne.w	r8, #1
 810ceb0:	f048 0820 	orr.w	r8, r8, #32
 810ceb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ceb6:	601c      	str	r4, [r3, #0]
 810ceb8:	9b02      	ldr	r3, [sp, #8]
 810ceba:	601e      	str	r6, [r3, #0]
 810cebc:	e6a2      	b.n	810cc04 <__gethex+0x114>
 810cebe:	4290      	cmp	r0, r2
 810cec0:	f842 3c04 	str.w	r3, [r2, #-4]
 810cec4:	d8d6      	bhi.n	810ce74 <__gethex+0x384>
 810cec6:	68a2      	ldr	r2, [r4, #8]
 810cec8:	4593      	cmp	fp, r2
 810ceca:	db17      	blt.n	810cefc <__gethex+0x40c>
 810cecc:	6861      	ldr	r1, [r4, #4]
 810cece:	4648      	mov	r0, r9
 810ced0:	3101      	adds	r1, #1
 810ced2:	f7fd ffd3 	bl	810ae7c <_Balloc>
 810ced6:	4682      	mov	sl, r0
 810ced8:	b918      	cbnz	r0, 810cee2 <__gethex+0x3f2>
 810ceda:	4b1b      	ldr	r3, [pc, #108]	; (810cf48 <__gethex+0x458>)
 810cedc:	4602      	mov	r2, r0
 810cede:	2184      	movs	r1, #132	; 0x84
 810cee0:	e6b3      	b.n	810cc4a <__gethex+0x15a>
 810cee2:	6922      	ldr	r2, [r4, #16]
 810cee4:	3202      	adds	r2, #2
 810cee6:	f104 010c 	add.w	r1, r4, #12
 810ceea:	0092      	lsls	r2, r2, #2
 810ceec:	300c      	adds	r0, #12
 810ceee:	f7ff fd4b 	bl	810c988 <memcpy>
 810cef2:	4621      	mov	r1, r4
 810cef4:	4648      	mov	r0, r9
 810cef6:	f7fe f801 	bl	810aefc <_Bfree>
 810cefa:	4654      	mov	r4, sl
 810cefc:	6922      	ldr	r2, [r4, #16]
 810cefe:	1c51      	adds	r1, r2, #1
 810cf00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810cf04:	6121      	str	r1, [r4, #16]
 810cf06:	2101      	movs	r1, #1
 810cf08:	6151      	str	r1, [r2, #20]
 810cf0a:	e7bc      	b.n	810ce86 <__gethex+0x396>
 810cf0c:	6921      	ldr	r1, [r4, #16]
 810cf0e:	4559      	cmp	r1, fp
 810cf10:	dd0b      	ble.n	810cf2a <__gethex+0x43a>
 810cf12:	2101      	movs	r1, #1
 810cf14:	4620      	mov	r0, r4
 810cf16:	f7ff fd83 	bl	810ca20 <rshift>
 810cf1a:	68bb      	ldr	r3, [r7, #8]
 810cf1c:	3601      	adds	r6, #1
 810cf1e:	42b3      	cmp	r3, r6
 810cf20:	f6ff aedb 	blt.w	810ccda <__gethex+0x1ea>
 810cf24:	f04f 0801 	mov.w	r8, #1
 810cf28:	e7c2      	b.n	810ceb0 <__gethex+0x3c0>
 810cf2a:	f015 051f 	ands.w	r5, r5, #31
 810cf2e:	d0f9      	beq.n	810cf24 <__gethex+0x434>
 810cf30:	9b01      	ldr	r3, [sp, #4]
 810cf32:	441a      	add	r2, r3
 810cf34:	f1c5 0520 	rsb	r5, r5, #32
 810cf38:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810cf3c:	f7fe f890 	bl	810b060 <__hi0bits>
 810cf40:	42a8      	cmp	r0, r5
 810cf42:	dbe6      	blt.n	810cf12 <__gethex+0x422>
 810cf44:	e7ee      	b.n	810cf24 <__gethex+0x434>
 810cf46:	bf00      	nop
 810cf48:	081229d1 	.word	0x081229d1

0810cf4c <L_shift>:
 810cf4c:	f1c2 0208 	rsb	r2, r2, #8
 810cf50:	0092      	lsls	r2, r2, #2
 810cf52:	b570      	push	{r4, r5, r6, lr}
 810cf54:	f1c2 0620 	rsb	r6, r2, #32
 810cf58:	6843      	ldr	r3, [r0, #4]
 810cf5a:	6804      	ldr	r4, [r0, #0]
 810cf5c:	fa03 f506 	lsl.w	r5, r3, r6
 810cf60:	432c      	orrs	r4, r5
 810cf62:	40d3      	lsrs	r3, r2
 810cf64:	6004      	str	r4, [r0, #0]
 810cf66:	f840 3f04 	str.w	r3, [r0, #4]!
 810cf6a:	4288      	cmp	r0, r1
 810cf6c:	d3f4      	bcc.n	810cf58 <L_shift+0xc>
 810cf6e:	bd70      	pop	{r4, r5, r6, pc}

0810cf70 <__match>:
 810cf70:	b530      	push	{r4, r5, lr}
 810cf72:	6803      	ldr	r3, [r0, #0]
 810cf74:	3301      	adds	r3, #1
 810cf76:	f811 4b01 	ldrb.w	r4, [r1], #1
 810cf7a:	b914      	cbnz	r4, 810cf82 <__match+0x12>
 810cf7c:	6003      	str	r3, [r0, #0]
 810cf7e:	2001      	movs	r0, #1
 810cf80:	bd30      	pop	{r4, r5, pc}
 810cf82:	f813 2b01 	ldrb.w	r2, [r3], #1
 810cf86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810cf8a:	2d19      	cmp	r5, #25
 810cf8c:	bf98      	it	ls
 810cf8e:	3220      	addls	r2, #32
 810cf90:	42a2      	cmp	r2, r4
 810cf92:	d0f0      	beq.n	810cf76 <__match+0x6>
 810cf94:	2000      	movs	r0, #0
 810cf96:	e7f3      	b.n	810cf80 <__match+0x10>

0810cf98 <__hexnan>:
 810cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf9c:	680b      	ldr	r3, [r1, #0]
 810cf9e:	6801      	ldr	r1, [r0, #0]
 810cfa0:	115e      	asrs	r6, r3, #5
 810cfa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810cfa6:	f013 031f 	ands.w	r3, r3, #31
 810cfaa:	b087      	sub	sp, #28
 810cfac:	bf18      	it	ne
 810cfae:	3604      	addne	r6, #4
 810cfb0:	2500      	movs	r5, #0
 810cfb2:	1f37      	subs	r7, r6, #4
 810cfb4:	4682      	mov	sl, r0
 810cfb6:	4690      	mov	r8, r2
 810cfb8:	9301      	str	r3, [sp, #4]
 810cfba:	f846 5c04 	str.w	r5, [r6, #-4]
 810cfbe:	46b9      	mov	r9, r7
 810cfc0:	463c      	mov	r4, r7
 810cfc2:	9502      	str	r5, [sp, #8]
 810cfc4:	46ab      	mov	fp, r5
 810cfc6:	784a      	ldrb	r2, [r1, #1]
 810cfc8:	1c4b      	adds	r3, r1, #1
 810cfca:	9303      	str	r3, [sp, #12]
 810cfcc:	b342      	cbz	r2, 810d020 <__hexnan+0x88>
 810cfce:	4610      	mov	r0, r2
 810cfd0:	9105      	str	r1, [sp, #20]
 810cfd2:	9204      	str	r2, [sp, #16]
 810cfd4:	f7ff fd76 	bl	810cac4 <__hexdig_fun>
 810cfd8:	2800      	cmp	r0, #0
 810cfda:	d14f      	bne.n	810d07c <__hexnan+0xe4>
 810cfdc:	9a04      	ldr	r2, [sp, #16]
 810cfde:	9905      	ldr	r1, [sp, #20]
 810cfe0:	2a20      	cmp	r2, #32
 810cfe2:	d818      	bhi.n	810d016 <__hexnan+0x7e>
 810cfe4:	9b02      	ldr	r3, [sp, #8]
 810cfe6:	459b      	cmp	fp, r3
 810cfe8:	dd13      	ble.n	810d012 <__hexnan+0x7a>
 810cfea:	454c      	cmp	r4, r9
 810cfec:	d206      	bcs.n	810cffc <__hexnan+0x64>
 810cfee:	2d07      	cmp	r5, #7
 810cff0:	dc04      	bgt.n	810cffc <__hexnan+0x64>
 810cff2:	462a      	mov	r2, r5
 810cff4:	4649      	mov	r1, r9
 810cff6:	4620      	mov	r0, r4
 810cff8:	f7ff ffa8 	bl	810cf4c <L_shift>
 810cffc:	4544      	cmp	r4, r8
 810cffe:	d950      	bls.n	810d0a2 <__hexnan+0x10a>
 810d000:	2300      	movs	r3, #0
 810d002:	f1a4 0904 	sub.w	r9, r4, #4
 810d006:	f844 3c04 	str.w	r3, [r4, #-4]
 810d00a:	f8cd b008 	str.w	fp, [sp, #8]
 810d00e:	464c      	mov	r4, r9
 810d010:	461d      	mov	r5, r3
 810d012:	9903      	ldr	r1, [sp, #12]
 810d014:	e7d7      	b.n	810cfc6 <__hexnan+0x2e>
 810d016:	2a29      	cmp	r2, #41	; 0x29
 810d018:	d155      	bne.n	810d0c6 <__hexnan+0x12e>
 810d01a:	3102      	adds	r1, #2
 810d01c:	f8ca 1000 	str.w	r1, [sl]
 810d020:	f1bb 0f00 	cmp.w	fp, #0
 810d024:	d04f      	beq.n	810d0c6 <__hexnan+0x12e>
 810d026:	454c      	cmp	r4, r9
 810d028:	d206      	bcs.n	810d038 <__hexnan+0xa0>
 810d02a:	2d07      	cmp	r5, #7
 810d02c:	dc04      	bgt.n	810d038 <__hexnan+0xa0>
 810d02e:	462a      	mov	r2, r5
 810d030:	4649      	mov	r1, r9
 810d032:	4620      	mov	r0, r4
 810d034:	f7ff ff8a 	bl	810cf4c <L_shift>
 810d038:	4544      	cmp	r4, r8
 810d03a:	d934      	bls.n	810d0a6 <__hexnan+0x10e>
 810d03c:	f1a8 0204 	sub.w	r2, r8, #4
 810d040:	4623      	mov	r3, r4
 810d042:	f853 1b04 	ldr.w	r1, [r3], #4
 810d046:	f842 1f04 	str.w	r1, [r2, #4]!
 810d04a:	429f      	cmp	r7, r3
 810d04c:	d2f9      	bcs.n	810d042 <__hexnan+0xaa>
 810d04e:	1b3b      	subs	r3, r7, r4
 810d050:	f023 0303 	bic.w	r3, r3, #3
 810d054:	3304      	adds	r3, #4
 810d056:	3e03      	subs	r6, #3
 810d058:	3401      	adds	r4, #1
 810d05a:	42a6      	cmp	r6, r4
 810d05c:	bf38      	it	cc
 810d05e:	2304      	movcc	r3, #4
 810d060:	4443      	add	r3, r8
 810d062:	2200      	movs	r2, #0
 810d064:	f843 2b04 	str.w	r2, [r3], #4
 810d068:	429f      	cmp	r7, r3
 810d06a:	d2fb      	bcs.n	810d064 <__hexnan+0xcc>
 810d06c:	683b      	ldr	r3, [r7, #0]
 810d06e:	b91b      	cbnz	r3, 810d078 <__hexnan+0xe0>
 810d070:	4547      	cmp	r7, r8
 810d072:	d126      	bne.n	810d0c2 <__hexnan+0x12a>
 810d074:	2301      	movs	r3, #1
 810d076:	603b      	str	r3, [r7, #0]
 810d078:	2005      	movs	r0, #5
 810d07a:	e025      	b.n	810d0c8 <__hexnan+0x130>
 810d07c:	3501      	adds	r5, #1
 810d07e:	2d08      	cmp	r5, #8
 810d080:	f10b 0b01 	add.w	fp, fp, #1
 810d084:	dd06      	ble.n	810d094 <__hexnan+0xfc>
 810d086:	4544      	cmp	r4, r8
 810d088:	d9c3      	bls.n	810d012 <__hexnan+0x7a>
 810d08a:	2300      	movs	r3, #0
 810d08c:	f844 3c04 	str.w	r3, [r4, #-4]
 810d090:	2501      	movs	r5, #1
 810d092:	3c04      	subs	r4, #4
 810d094:	6822      	ldr	r2, [r4, #0]
 810d096:	f000 000f 	and.w	r0, r0, #15
 810d09a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810d09e:	6020      	str	r0, [r4, #0]
 810d0a0:	e7b7      	b.n	810d012 <__hexnan+0x7a>
 810d0a2:	2508      	movs	r5, #8
 810d0a4:	e7b5      	b.n	810d012 <__hexnan+0x7a>
 810d0a6:	9b01      	ldr	r3, [sp, #4]
 810d0a8:	2b00      	cmp	r3, #0
 810d0aa:	d0df      	beq.n	810d06c <__hexnan+0xd4>
 810d0ac:	f1c3 0320 	rsb	r3, r3, #32
 810d0b0:	f04f 32ff 	mov.w	r2, #4294967295
 810d0b4:	40da      	lsrs	r2, r3
 810d0b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810d0ba:	4013      	ands	r3, r2
 810d0bc:	f846 3c04 	str.w	r3, [r6, #-4]
 810d0c0:	e7d4      	b.n	810d06c <__hexnan+0xd4>
 810d0c2:	3f04      	subs	r7, #4
 810d0c4:	e7d2      	b.n	810d06c <__hexnan+0xd4>
 810d0c6:	2004      	movs	r0, #4
 810d0c8:	b007      	add	sp, #28
 810d0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810d0ce <__ascii_mbtowc>:
 810d0ce:	b082      	sub	sp, #8
 810d0d0:	b901      	cbnz	r1, 810d0d4 <__ascii_mbtowc+0x6>
 810d0d2:	a901      	add	r1, sp, #4
 810d0d4:	b142      	cbz	r2, 810d0e8 <__ascii_mbtowc+0x1a>
 810d0d6:	b14b      	cbz	r3, 810d0ec <__ascii_mbtowc+0x1e>
 810d0d8:	7813      	ldrb	r3, [r2, #0]
 810d0da:	600b      	str	r3, [r1, #0]
 810d0dc:	7812      	ldrb	r2, [r2, #0]
 810d0de:	1e10      	subs	r0, r2, #0
 810d0e0:	bf18      	it	ne
 810d0e2:	2001      	movne	r0, #1
 810d0e4:	b002      	add	sp, #8
 810d0e6:	4770      	bx	lr
 810d0e8:	4610      	mov	r0, r2
 810d0ea:	e7fb      	b.n	810d0e4 <__ascii_mbtowc+0x16>
 810d0ec:	f06f 0001 	mvn.w	r0, #1
 810d0f0:	e7f8      	b.n	810d0e4 <__ascii_mbtowc+0x16>

0810d0f2 <_realloc_r>:
 810d0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d0f6:	4680      	mov	r8, r0
 810d0f8:	4614      	mov	r4, r2
 810d0fa:	460e      	mov	r6, r1
 810d0fc:	b921      	cbnz	r1, 810d108 <_realloc_r+0x16>
 810d0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810d102:	4611      	mov	r1, r2
 810d104:	f7fd be2e 	b.w	810ad64 <_malloc_r>
 810d108:	b92a      	cbnz	r2, 810d116 <_realloc_r+0x24>
 810d10a:	f7fd fdb7 	bl	810ac7c <_free_r>
 810d10e:	4625      	mov	r5, r4
 810d110:	4628      	mov	r0, r5
 810d112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d116:	f000 f842 	bl	810d19e <_malloc_usable_size_r>
 810d11a:	4284      	cmp	r4, r0
 810d11c:	4607      	mov	r7, r0
 810d11e:	d802      	bhi.n	810d126 <_realloc_r+0x34>
 810d120:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810d124:	d812      	bhi.n	810d14c <_realloc_r+0x5a>
 810d126:	4621      	mov	r1, r4
 810d128:	4640      	mov	r0, r8
 810d12a:	f7fd fe1b 	bl	810ad64 <_malloc_r>
 810d12e:	4605      	mov	r5, r0
 810d130:	2800      	cmp	r0, #0
 810d132:	d0ed      	beq.n	810d110 <_realloc_r+0x1e>
 810d134:	42bc      	cmp	r4, r7
 810d136:	4622      	mov	r2, r4
 810d138:	4631      	mov	r1, r6
 810d13a:	bf28      	it	cs
 810d13c:	463a      	movcs	r2, r7
 810d13e:	f7ff fc23 	bl	810c988 <memcpy>
 810d142:	4631      	mov	r1, r6
 810d144:	4640      	mov	r0, r8
 810d146:	f7fd fd99 	bl	810ac7c <_free_r>
 810d14a:	e7e1      	b.n	810d110 <_realloc_r+0x1e>
 810d14c:	4635      	mov	r5, r6
 810d14e:	e7df      	b.n	810d110 <_realloc_r+0x1e>

0810d150 <__ascii_wctomb>:
 810d150:	b149      	cbz	r1, 810d166 <__ascii_wctomb+0x16>
 810d152:	2aff      	cmp	r2, #255	; 0xff
 810d154:	bf85      	ittet	hi
 810d156:	238a      	movhi	r3, #138	; 0x8a
 810d158:	6003      	strhi	r3, [r0, #0]
 810d15a:	700a      	strbls	r2, [r1, #0]
 810d15c:	f04f 30ff 	movhi.w	r0, #4294967295
 810d160:	bf98      	it	ls
 810d162:	2001      	movls	r0, #1
 810d164:	4770      	bx	lr
 810d166:	4608      	mov	r0, r1
 810d168:	4770      	bx	lr
	...

0810d16c <fiprintf>:
 810d16c:	b40e      	push	{r1, r2, r3}
 810d16e:	b503      	push	{r0, r1, lr}
 810d170:	4601      	mov	r1, r0
 810d172:	ab03      	add	r3, sp, #12
 810d174:	4805      	ldr	r0, [pc, #20]	; (810d18c <fiprintf+0x20>)
 810d176:	f853 2b04 	ldr.w	r2, [r3], #4
 810d17a:	6800      	ldr	r0, [r0, #0]
 810d17c:	9301      	str	r3, [sp, #4]
 810d17e:	f000 f83f 	bl	810d200 <_vfiprintf_r>
 810d182:	b002      	add	sp, #8
 810d184:	f85d eb04 	ldr.w	lr, [sp], #4
 810d188:	b003      	add	sp, #12
 810d18a:	4770      	bx	lr
 810d18c:	100000d8 	.word	0x100000d8

0810d190 <abort>:
 810d190:	b508      	push	{r3, lr}
 810d192:	2006      	movs	r0, #6
 810d194:	f000 fa0c 	bl	810d5b0 <raise>
 810d198:	2001      	movs	r0, #1
 810d19a:	f7f5 fc01 	bl	81029a0 <_exit>

0810d19e <_malloc_usable_size_r>:
 810d19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d1a2:	1f18      	subs	r0, r3, #4
 810d1a4:	2b00      	cmp	r3, #0
 810d1a6:	bfbc      	itt	lt
 810d1a8:	580b      	ldrlt	r3, [r1, r0]
 810d1aa:	18c0      	addlt	r0, r0, r3
 810d1ac:	4770      	bx	lr

0810d1ae <__sfputc_r>:
 810d1ae:	6893      	ldr	r3, [r2, #8]
 810d1b0:	3b01      	subs	r3, #1
 810d1b2:	2b00      	cmp	r3, #0
 810d1b4:	b410      	push	{r4}
 810d1b6:	6093      	str	r3, [r2, #8]
 810d1b8:	da08      	bge.n	810d1cc <__sfputc_r+0x1e>
 810d1ba:	6994      	ldr	r4, [r2, #24]
 810d1bc:	42a3      	cmp	r3, r4
 810d1be:	db01      	blt.n	810d1c4 <__sfputc_r+0x16>
 810d1c0:	290a      	cmp	r1, #10
 810d1c2:	d103      	bne.n	810d1cc <__sfputc_r+0x1e>
 810d1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d1c8:	f000 b934 	b.w	810d434 <__swbuf_r>
 810d1cc:	6813      	ldr	r3, [r2, #0]
 810d1ce:	1c58      	adds	r0, r3, #1
 810d1d0:	6010      	str	r0, [r2, #0]
 810d1d2:	7019      	strb	r1, [r3, #0]
 810d1d4:	4608      	mov	r0, r1
 810d1d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d1da:	4770      	bx	lr

0810d1dc <__sfputs_r>:
 810d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d1de:	4606      	mov	r6, r0
 810d1e0:	460f      	mov	r7, r1
 810d1e2:	4614      	mov	r4, r2
 810d1e4:	18d5      	adds	r5, r2, r3
 810d1e6:	42ac      	cmp	r4, r5
 810d1e8:	d101      	bne.n	810d1ee <__sfputs_r+0x12>
 810d1ea:	2000      	movs	r0, #0
 810d1ec:	e007      	b.n	810d1fe <__sfputs_r+0x22>
 810d1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d1f2:	463a      	mov	r2, r7
 810d1f4:	4630      	mov	r0, r6
 810d1f6:	f7ff ffda 	bl	810d1ae <__sfputc_r>
 810d1fa:	1c43      	adds	r3, r0, #1
 810d1fc:	d1f3      	bne.n	810d1e6 <__sfputs_r+0xa>
 810d1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0810d200 <_vfiprintf_r>:
 810d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d204:	460d      	mov	r5, r1
 810d206:	b09d      	sub	sp, #116	; 0x74
 810d208:	4614      	mov	r4, r2
 810d20a:	4698      	mov	r8, r3
 810d20c:	4606      	mov	r6, r0
 810d20e:	b118      	cbz	r0, 810d218 <_vfiprintf_r+0x18>
 810d210:	6a03      	ldr	r3, [r0, #32]
 810d212:	b90b      	cbnz	r3, 810d218 <_vfiprintf_r+0x18>
 810d214:	f7fc fd96 	bl	8109d44 <__sinit>
 810d218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d21a:	07d9      	lsls	r1, r3, #31
 810d21c:	d405      	bmi.n	810d22a <_vfiprintf_r+0x2a>
 810d21e:	89ab      	ldrh	r3, [r5, #12]
 810d220:	059a      	lsls	r2, r3, #22
 810d222:	d402      	bmi.n	810d22a <_vfiprintf_r+0x2a>
 810d224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d226:	f7fc fea4 	bl	8109f72 <__retarget_lock_acquire_recursive>
 810d22a:	89ab      	ldrh	r3, [r5, #12]
 810d22c:	071b      	lsls	r3, r3, #28
 810d22e:	d501      	bpl.n	810d234 <_vfiprintf_r+0x34>
 810d230:	692b      	ldr	r3, [r5, #16]
 810d232:	b99b      	cbnz	r3, 810d25c <_vfiprintf_r+0x5c>
 810d234:	4629      	mov	r1, r5
 810d236:	4630      	mov	r0, r6
 810d238:	f000 f93a 	bl	810d4b0 <__swsetup_r>
 810d23c:	b170      	cbz	r0, 810d25c <_vfiprintf_r+0x5c>
 810d23e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d240:	07dc      	lsls	r4, r3, #31
 810d242:	d504      	bpl.n	810d24e <_vfiprintf_r+0x4e>
 810d244:	f04f 30ff 	mov.w	r0, #4294967295
 810d248:	b01d      	add	sp, #116	; 0x74
 810d24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d24e:	89ab      	ldrh	r3, [r5, #12]
 810d250:	0598      	lsls	r0, r3, #22
 810d252:	d4f7      	bmi.n	810d244 <_vfiprintf_r+0x44>
 810d254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d256:	f7fc fe8d 	bl	8109f74 <__retarget_lock_release_recursive>
 810d25a:	e7f3      	b.n	810d244 <_vfiprintf_r+0x44>
 810d25c:	2300      	movs	r3, #0
 810d25e:	9309      	str	r3, [sp, #36]	; 0x24
 810d260:	2320      	movs	r3, #32
 810d262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d266:	f8cd 800c 	str.w	r8, [sp, #12]
 810d26a:	2330      	movs	r3, #48	; 0x30
 810d26c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810d420 <_vfiprintf_r+0x220>
 810d270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d274:	f04f 0901 	mov.w	r9, #1
 810d278:	4623      	mov	r3, r4
 810d27a:	469a      	mov	sl, r3
 810d27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d280:	b10a      	cbz	r2, 810d286 <_vfiprintf_r+0x86>
 810d282:	2a25      	cmp	r2, #37	; 0x25
 810d284:	d1f9      	bne.n	810d27a <_vfiprintf_r+0x7a>
 810d286:	ebba 0b04 	subs.w	fp, sl, r4
 810d28a:	d00b      	beq.n	810d2a4 <_vfiprintf_r+0xa4>
 810d28c:	465b      	mov	r3, fp
 810d28e:	4622      	mov	r2, r4
 810d290:	4629      	mov	r1, r5
 810d292:	4630      	mov	r0, r6
 810d294:	f7ff ffa2 	bl	810d1dc <__sfputs_r>
 810d298:	3001      	adds	r0, #1
 810d29a:	f000 80a9 	beq.w	810d3f0 <_vfiprintf_r+0x1f0>
 810d29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d2a0:	445a      	add	r2, fp
 810d2a2:	9209      	str	r2, [sp, #36]	; 0x24
 810d2a4:	f89a 3000 	ldrb.w	r3, [sl]
 810d2a8:	2b00      	cmp	r3, #0
 810d2aa:	f000 80a1 	beq.w	810d3f0 <_vfiprintf_r+0x1f0>
 810d2ae:	2300      	movs	r3, #0
 810d2b0:	f04f 32ff 	mov.w	r2, #4294967295
 810d2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d2b8:	f10a 0a01 	add.w	sl, sl, #1
 810d2bc:	9304      	str	r3, [sp, #16]
 810d2be:	9307      	str	r3, [sp, #28]
 810d2c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d2c4:	931a      	str	r3, [sp, #104]	; 0x68
 810d2c6:	4654      	mov	r4, sl
 810d2c8:	2205      	movs	r2, #5
 810d2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d2ce:	4854      	ldr	r0, [pc, #336]	; (810d420 <_vfiprintf_r+0x220>)
 810d2d0:	f7f3 f806 	bl	81002e0 <memchr>
 810d2d4:	9a04      	ldr	r2, [sp, #16]
 810d2d6:	b9d8      	cbnz	r0, 810d310 <_vfiprintf_r+0x110>
 810d2d8:	06d1      	lsls	r1, r2, #27
 810d2da:	bf44      	itt	mi
 810d2dc:	2320      	movmi	r3, #32
 810d2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d2e2:	0713      	lsls	r3, r2, #28
 810d2e4:	bf44      	itt	mi
 810d2e6:	232b      	movmi	r3, #43	; 0x2b
 810d2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d2ec:	f89a 3000 	ldrb.w	r3, [sl]
 810d2f0:	2b2a      	cmp	r3, #42	; 0x2a
 810d2f2:	d015      	beq.n	810d320 <_vfiprintf_r+0x120>
 810d2f4:	9a07      	ldr	r2, [sp, #28]
 810d2f6:	4654      	mov	r4, sl
 810d2f8:	2000      	movs	r0, #0
 810d2fa:	f04f 0c0a 	mov.w	ip, #10
 810d2fe:	4621      	mov	r1, r4
 810d300:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d304:	3b30      	subs	r3, #48	; 0x30
 810d306:	2b09      	cmp	r3, #9
 810d308:	d94d      	bls.n	810d3a6 <_vfiprintf_r+0x1a6>
 810d30a:	b1b0      	cbz	r0, 810d33a <_vfiprintf_r+0x13a>
 810d30c:	9207      	str	r2, [sp, #28]
 810d30e:	e014      	b.n	810d33a <_vfiprintf_r+0x13a>
 810d310:	eba0 0308 	sub.w	r3, r0, r8
 810d314:	fa09 f303 	lsl.w	r3, r9, r3
 810d318:	4313      	orrs	r3, r2
 810d31a:	9304      	str	r3, [sp, #16]
 810d31c:	46a2      	mov	sl, r4
 810d31e:	e7d2      	b.n	810d2c6 <_vfiprintf_r+0xc6>
 810d320:	9b03      	ldr	r3, [sp, #12]
 810d322:	1d19      	adds	r1, r3, #4
 810d324:	681b      	ldr	r3, [r3, #0]
 810d326:	9103      	str	r1, [sp, #12]
 810d328:	2b00      	cmp	r3, #0
 810d32a:	bfbb      	ittet	lt
 810d32c:	425b      	neglt	r3, r3
 810d32e:	f042 0202 	orrlt.w	r2, r2, #2
 810d332:	9307      	strge	r3, [sp, #28]
 810d334:	9307      	strlt	r3, [sp, #28]
 810d336:	bfb8      	it	lt
 810d338:	9204      	strlt	r2, [sp, #16]
 810d33a:	7823      	ldrb	r3, [r4, #0]
 810d33c:	2b2e      	cmp	r3, #46	; 0x2e
 810d33e:	d10c      	bne.n	810d35a <_vfiprintf_r+0x15a>
 810d340:	7863      	ldrb	r3, [r4, #1]
 810d342:	2b2a      	cmp	r3, #42	; 0x2a
 810d344:	d134      	bne.n	810d3b0 <_vfiprintf_r+0x1b0>
 810d346:	9b03      	ldr	r3, [sp, #12]
 810d348:	1d1a      	adds	r2, r3, #4
 810d34a:	681b      	ldr	r3, [r3, #0]
 810d34c:	9203      	str	r2, [sp, #12]
 810d34e:	2b00      	cmp	r3, #0
 810d350:	bfb8      	it	lt
 810d352:	f04f 33ff 	movlt.w	r3, #4294967295
 810d356:	3402      	adds	r4, #2
 810d358:	9305      	str	r3, [sp, #20]
 810d35a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810d430 <_vfiprintf_r+0x230>
 810d35e:	7821      	ldrb	r1, [r4, #0]
 810d360:	2203      	movs	r2, #3
 810d362:	4650      	mov	r0, sl
 810d364:	f7f2 ffbc 	bl	81002e0 <memchr>
 810d368:	b138      	cbz	r0, 810d37a <_vfiprintf_r+0x17a>
 810d36a:	9b04      	ldr	r3, [sp, #16]
 810d36c:	eba0 000a 	sub.w	r0, r0, sl
 810d370:	2240      	movs	r2, #64	; 0x40
 810d372:	4082      	lsls	r2, r0
 810d374:	4313      	orrs	r3, r2
 810d376:	3401      	adds	r4, #1
 810d378:	9304      	str	r3, [sp, #16]
 810d37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d37e:	4829      	ldr	r0, [pc, #164]	; (810d424 <_vfiprintf_r+0x224>)
 810d380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d384:	2206      	movs	r2, #6
 810d386:	f7f2 ffab 	bl	81002e0 <memchr>
 810d38a:	2800      	cmp	r0, #0
 810d38c:	d03f      	beq.n	810d40e <_vfiprintf_r+0x20e>
 810d38e:	4b26      	ldr	r3, [pc, #152]	; (810d428 <_vfiprintf_r+0x228>)
 810d390:	bb1b      	cbnz	r3, 810d3da <_vfiprintf_r+0x1da>
 810d392:	9b03      	ldr	r3, [sp, #12]
 810d394:	3307      	adds	r3, #7
 810d396:	f023 0307 	bic.w	r3, r3, #7
 810d39a:	3308      	adds	r3, #8
 810d39c:	9303      	str	r3, [sp, #12]
 810d39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d3a0:	443b      	add	r3, r7
 810d3a2:	9309      	str	r3, [sp, #36]	; 0x24
 810d3a4:	e768      	b.n	810d278 <_vfiprintf_r+0x78>
 810d3a6:	fb0c 3202 	mla	r2, ip, r2, r3
 810d3aa:	460c      	mov	r4, r1
 810d3ac:	2001      	movs	r0, #1
 810d3ae:	e7a6      	b.n	810d2fe <_vfiprintf_r+0xfe>
 810d3b0:	2300      	movs	r3, #0
 810d3b2:	3401      	adds	r4, #1
 810d3b4:	9305      	str	r3, [sp, #20]
 810d3b6:	4619      	mov	r1, r3
 810d3b8:	f04f 0c0a 	mov.w	ip, #10
 810d3bc:	4620      	mov	r0, r4
 810d3be:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d3c2:	3a30      	subs	r2, #48	; 0x30
 810d3c4:	2a09      	cmp	r2, #9
 810d3c6:	d903      	bls.n	810d3d0 <_vfiprintf_r+0x1d0>
 810d3c8:	2b00      	cmp	r3, #0
 810d3ca:	d0c6      	beq.n	810d35a <_vfiprintf_r+0x15a>
 810d3cc:	9105      	str	r1, [sp, #20]
 810d3ce:	e7c4      	b.n	810d35a <_vfiprintf_r+0x15a>
 810d3d0:	fb0c 2101 	mla	r1, ip, r1, r2
 810d3d4:	4604      	mov	r4, r0
 810d3d6:	2301      	movs	r3, #1
 810d3d8:	e7f0      	b.n	810d3bc <_vfiprintf_r+0x1bc>
 810d3da:	ab03      	add	r3, sp, #12
 810d3dc:	9300      	str	r3, [sp, #0]
 810d3de:	462a      	mov	r2, r5
 810d3e0:	4b12      	ldr	r3, [pc, #72]	; (810d42c <_vfiprintf_r+0x22c>)
 810d3e2:	a904      	add	r1, sp, #16
 810d3e4:	4630      	mov	r0, r6
 810d3e6:	f7fb fe4b 	bl	8109080 <_printf_float>
 810d3ea:	4607      	mov	r7, r0
 810d3ec:	1c78      	adds	r0, r7, #1
 810d3ee:	d1d6      	bne.n	810d39e <_vfiprintf_r+0x19e>
 810d3f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d3f2:	07d9      	lsls	r1, r3, #31
 810d3f4:	d405      	bmi.n	810d402 <_vfiprintf_r+0x202>
 810d3f6:	89ab      	ldrh	r3, [r5, #12]
 810d3f8:	059a      	lsls	r2, r3, #22
 810d3fa:	d402      	bmi.n	810d402 <_vfiprintf_r+0x202>
 810d3fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d3fe:	f7fc fdb9 	bl	8109f74 <__retarget_lock_release_recursive>
 810d402:	89ab      	ldrh	r3, [r5, #12]
 810d404:	065b      	lsls	r3, r3, #25
 810d406:	f53f af1d 	bmi.w	810d244 <_vfiprintf_r+0x44>
 810d40a:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d40c:	e71c      	b.n	810d248 <_vfiprintf_r+0x48>
 810d40e:	ab03      	add	r3, sp, #12
 810d410:	9300      	str	r3, [sp, #0]
 810d412:	462a      	mov	r2, r5
 810d414:	4b05      	ldr	r3, [pc, #20]	; (810d42c <_vfiprintf_r+0x22c>)
 810d416:	a904      	add	r1, sp, #16
 810d418:	4630      	mov	r0, r6
 810d41a:	f7fc f8d5 	bl	81095c8 <_printf_i>
 810d41e:	e7e4      	b.n	810d3ea <_vfiprintf_r+0x1ea>
 810d420:	08122c91 	.word	0x08122c91
 810d424:	08122c9b 	.word	0x08122c9b
 810d428:	08109081 	.word	0x08109081
 810d42c:	0810d1dd 	.word	0x0810d1dd
 810d430:	08122c97 	.word	0x08122c97

0810d434 <__swbuf_r>:
 810d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d436:	460e      	mov	r6, r1
 810d438:	4614      	mov	r4, r2
 810d43a:	4605      	mov	r5, r0
 810d43c:	b118      	cbz	r0, 810d446 <__swbuf_r+0x12>
 810d43e:	6a03      	ldr	r3, [r0, #32]
 810d440:	b90b      	cbnz	r3, 810d446 <__swbuf_r+0x12>
 810d442:	f7fc fc7f 	bl	8109d44 <__sinit>
 810d446:	69a3      	ldr	r3, [r4, #24]
 810d448:	60a3      	str	r3, [r4, #8]
 810d44a:	89a3      	ldrh	r3, [r4, #12]
 810d44c:	071a      	lsls	r2, r3, #28
 810d44e:	d525      	bpl.n	810d49c <__swbuf_r+0x68>
 810d450:	6923      	ldr	r3, [r4, #16]
 810d452:	b31b      	cbz	r3, 810d49c <__swbuf_r+0x68>
 810d454:	6823      	ldr	r3, [r4, #0]
 810d456:	6922      	ldr	r2, [r4, #16]
 810d458:	1a98      	subs	r0, r3, r2
 810d45a:	6963      	ldr	r3, [r4, #20]
 810d45c:	b2f6      	uxtb	r6, r6
 810d45e:	4283      	cmp	r3, r0
 810d460:	4637      	mov	r7, r6
 810d462:	dc04      	bgt.n	810d46e <__swbuf_r+0x3a>
 810d464:	4621      	mov	r1, r4
 810d466:	4628      	mov	r0, r5
 810d468:	f7ff fa2a 	bl	810c8c0 <_fflush_r>
 810d46c:	b9e0      	cbnz	r0, 810d4a8 <__swbuf_r+0x74>
 810d46e:	68a3      	ldr	r3, [r4, #8]
 810d470:	3b01      	subs	r3, #1
 810d472:	60a3      	str	r3, [r4, #8]
 810d474:	6823      	ldr	r3, [r4, #0]
 810d476:	1c5a      	adds	r2, r3, #1
 810d478:	6022      	str	r2, [r4, #0]
 810d47a:	701e      	strb	r6, [r3, #0]
 810d47c:	6962      	ldr	r2, [r4, #20]
 810d47e:	1c43      	adds	r3, r0, #1
 810d480:	429a      	cmp	r2, r3
 810d482:	d004      	beq.n	810d48e <__swbuf_r+0x5a>
 810d484:	89a3      	ldrh	r3, [r4, #12]
 810d486:	07db      	lsls	r3, r3, #31
 810d488:	d506      	bpl.n	810d498 <__swbuf_r+0x64>
 810d48a:	2e0a      	cmp	r6, #10
 810d48c:	d104      	bne.n	810d498 <__swbuf_r+0x64>
 810d48e:	4621      	mov	r1, r4
 810d490:	4628      	mov	r0, r5
 810d492:	f7ff fa15 	bl	810c8c0 <_fflush_r>
 810d496:	b938      	cbnz	r0, 810d4a8 <__swbuf_r+0x74>
 810d498:	4638      	mov	r0, r7
 810d49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d49c:	4621      	mov	r1, r4
 810d49e:	4628      	mov	r0, r5
 810d4a0:	f000 f806 	bl	810d4b0 <__swsetup_r>
 810d4a4:	2800      	cmp	r0, #0
 810d4a6:	d0d5      	beq.n	810d454 <__swbuf_r+0x20>
 810d4a8:	f04f 37ff 	mov.w	r7, #4294967295
 810d4ac:	e7f4      	b.n	810d498 <__swbuf_r+0x64>
	...

0810d4b0 <__swsetup_r>:
 810d4b0:	b538      	push	{r3, r4, r5, lr}
 810d4b2:	4b2a      	ldr	r3, [pc, #168]	; (810d55c <__swsetup_r+0xac>)
 810d4b4:	4605      	mov	r5, r0
 810d4b6:	6818      	ldr	r0, [r3, #0]
 810d4b8:	460c      	mov	r4, r1
 810d4ba:	b118      	cbz	r0, 810d4c4 <__swsetup_r+0x14>
 810d4bc:	6a03      	ldr	r3, [r0, #32]
 810d4be:	b90b      	cbnz	r3, 810d4c4 <__swsetup_r+0x14>
 810d4c0:	f7fc fc40 	bl	8109d44 <__sinit>
 810d4c4:	89a3      	ldrh	r3, [r4, #12]
 810d4c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d4ca:	0718      	lsls	r0, r3, #28
 810d4cc:	d422      	bmi.n	810d514 <__swsetup_r+0x64>
 810d4ce:	06d9      	lsls	r1, r3, #27
 810d4d0:	d407      	bmi.n	810d4e2 <__swsetup_r+0x32>
 810d4d2:	2309      	movs	r3, #9
 810d4d4:	602b      	str	r3, [r5, #0]
 810d4d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d4da:	81a3      	strh	r3, [r4, #12]
 810d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 810d4e0:	e034      	b.n	810d54c <__swsetup_r+0x9c>
 810d4e2:	0758      	lsls	r0, r3, #29
 810d4e4:	d512      	bpl.n	810d50c <__swsetup_r+0x5c>
 810d4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d4e8:	b141      	cbz	r1, 810d4fc <__swsetup_r+0x4c>
 810d4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d4ee:	4299      	cmp	r1, r3
 810d4f0:	d002      	beq.n	810d4f8 <__swsetup_r+0x48>
 810d4f2:	4628      	mov	r0, r5
 810d4f4:	f7fd fbc2 	bl	810ac7c <_free_r>
 810d4f8:	2300      	movs	r3, #0
 810d4fa:	6363      	str	r3, [r4, #52]	; 0x34
 810d4fc:	89a3      	ldrh	r3, [r4, #12]
 810d4fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d502:	81a3      	strh	r3, [r4, #12]
 810d504:	2300      	movs	r3, #0
 810d506:	6063      	str	r3, [r4, #4]
 810d508:	6923      	ldr	r3, [r4, #16]
 810d50a:	6023      	str	r3, [r4, #0]
 810d50c:	89a3      	ldrh	r3, [r4, #12]
 810d50e:	f043 0308 	orr.w	r3, r3, #8
 810d512:	81a3      	strh	r3, [r4, #12]
 810d514:	6923      	ldr	r3, [r4, #16]
 810d516:	b94b      	cbnz	r3, 810d52c <__swsetup_r+0x7c>
 810d518:	89a3      	ldrh	r3, [r4, #12]
 810d51a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810d51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810d522:	d003      	beq.n	810d52c <__swsetup_r+0x7c>
 810d524:	4621      	mov	r1, r4
 810d526:	4628      	mov	r0, r5
 810d528:	f000 f884 	bl	810d634 <__smakebuf_r>
 810d52c:	89a0      	ldrh	r0, [r4, #12]
 810d52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d532:	f010 0301 	ands.w	r3, r0, #1
 810d536:	d00a      	beq.n	810d54e <__swsetup_r+0x9e>
 810d538:	2300      	movs	r3, #0
 810d53a:	60a3      	str	r3, [r4, #8]
 810d53c:	6963      	ldr	r3, [r4, #20]
 810d53e:	425b      	negs	r3, r3
 810d540:	61a3      	str	r3, [r4, #24]
 810d542:	6923      	ldr	r3, [r4, #16]
 810d544:	b943      	cbnz	r3, 810d558 <__swsetup_r+0xa8>
 810d546:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810d54a:	d1c4      	bne.n	810d4d6 <__swsetup_r+0x26>
 810d54c:	bd38      	pop	{r3, r4, r5, pc}
 810d54e:	0781      	lsls	r1, r0, #30
 810d550:	bf58      	it	pl
 810d552:	6963      	ldrpl	r3, [r4, #20]
 810d554:	60a3      	str	r3, [r4, #8]
 810d556:	e7f4      	b.n	810d542 <__swsetup_r+0x92>
 810d558:	2000      	movs	r0, #0
 810d55a:	e7f7      	b.n	810d54c <__swsetup_r+0x9c>
 810d55c:	100000d8 	.word	0x100000d8

0810d560 <_raise_r>:
 810d560:	291f      	cmp	r1, #31
 810d562:	b538      	push	{r3, r4, r5, lr}
 810d564:	4604      	mov	r4, r0
 810d566:	460d      	mov	r5, r1
 810d568:	d904      	bls.n	810d574 <_raise_r+0x14>
 810d56a:	2316      	movs	r3, #22
 810d56c:	6003      	str	r3, [r0, #0]
 810d56e:	f04f 30ff 	mov.w	r0, #4294967295
 810d572:	bd38      	pop	{r3, r4, r5, pc}
 810d574:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810d576:	b112      	cbz	r2, 810d57e <_raise_r+0x1e>
 810d578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810d57c:	b94b      	cbnz	r3, 810d592 <_raise_r+0x32>
 810d57e:	4620      	mov	r0, r4
 810d580:	f000 f830 	bl	810d5e4 <_getpid_r>
 810d584:	462a      	mov	r2, r5
 810d586:	4601      	mov	r1, r0
 810d588:	4620      	mov	r0, r4
 810d58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810d58e:	f000 b817 	b.w	810d5c0 <_kill_r>
 810d592:	2b01      	cmp	r3, #1
 810d594:	d00a      	beq.n	810d5ac <_raise_r+0x4c>
 810d596:	1c59      	adds	r1, r3, #1
 810d598:	d103      	bne.n	810d5a2 <_raise_r+0x42>
 810d59a:	2316      	movs	r3, #22
 810d59c:	6003      	str	r3, [r0, #0]
 810d59e:	2001      	movs	r0, #1
 810d5a0:	e7e7      	b.n	810d572 <_raise_r+0x12>
 810d5a2:	2400      	movs	r4, #0
 810d5a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810d5a8:	4628      	mov	r0, r5
 810d5aa:	4798      	blx	r3
 810d5ac:	2000      	movs	r0, #0
 810d5ae:	e7e0      	b.n	810d572 <_raise_r+0x12>

0810d5b0 <raise>:
 810d5b0:	4b02      	ldr	r3, [pc, #8]	; (810d5bc <raise+0xc>)
 810d5b2:	4601      	mov	r1, r0
 810d5b4:	6818      	ldr	r0, [r3, #0]
 810d5b6:	f7ff bfd3 	b.w	810d560 <_raise_r>
 810d5ba:	bf00      	nop
 810d5bc:	100000d8 	.word	0x100000d8

0810d5c0 <_kill_r>:
 810d5c0:	b538      	push	{r3, r4, r5, lr}
 810d5c2:	4d07      	ldr	r5, [pc, #28]	; (810d5e0 <_kill_r+0x20>)
 810d5c4:	2300      	movs	r3, #0
 810d5c6:	4604      	mov	r4, r0
 810d5c8:	4608      	mov	r0, r1
 810d5ca:	4611      	mov	r1, r2
 810d5cc:	602b      	str	r3, [r5, #0]
 810d5ce:	f7f5 f9df 	bl	8102990 <_kill>
 810d5d2:	1c43      	adds	r3, r0, #1
 810d5d4:	d102      	bne.n	810d5dc <_kill_r+0x1c>
 810d5d6:	682b      	ldr	r3, [r5, #0]
 810d5d8:	b103      	cbz	r3, 810d5dc <_kill_r+0x1c>
 810d5da:	6023      	str	r3, [r4, #0]
 810d5dc:	bd38      	pop	{r3, r4, r5, pc}
 810d5de:	bf00      	nop
 810d5e0:	10018ad0 	.word	0x10018ad0

0810d5e4 <_getpid_r>:
 810d5e4:	f7f5 b9d2 	b.w	810298c <_getpid>

0810d5e8 <__swhatbuf_r>:
 810d5e8:	b570      	push	{r4, r5, r6, lr}
 810d5ea:	460c      	mov	r4, r1
 810d5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d5f0:	2900      	cmp	r1, #0
 810d5f2:	b096      	sub	sp, #88	; 0x58
 810d5f4:	4615      	mov	r5, r2
 810d5f6:	461e      	mov	r6, r3
 810d5f8:	da0d      	bge.n	810d616 <__swhatbuf_r+0x2e>
 810d5fa:	89a3      	ldrh	r3, [r4, #12]
 810d5fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 810d600:	f04f 0100 	mov.w	r1, #0
 810d604:	bf0c      	ite	eq
 810d606:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810d60a:	2340      	movne	r3, #64	; 0x40
 810d60c:	2000      	movs	r0, #0
 810d60e:	6031      	str	r1, [r6, #0]
 810d610:	602b      	str	r3, [r5, #0]
 810d612:	b016      	add	sp, #88	; 0x58
 810d614:	bd70      	pop	{r4, r5, r6, pc}
 810d616:	466a      	mov	r2, sp
 810d618:	f000 f848 	bl	810d6ac <_fstat_r>
 810d61c:	2800      	cmp	r0, #0
 810d61e:	dbec      	blt.n	810d5fa <__swhatbuf_r+0x12>
 810d620:	9901      	ldr	r1, [sp, #4]
 810d622:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810d626:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810d62a:	4259      	negs	r1, r3
 810d62c:	4159      	adcs	r1, r3
 810d62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d632:	e7eb      	b.n	810d60c <__swhatbuf_r+0x24>

0810d634 <__smakebuf_r>:
 810d634:	898b      	ldrh	r3, [r1, #12]
 810d636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810d638:	079d      	lsls	r5, r3, #30
 810d63a:	4606      	mov	r6, r0
 810d63c:	460c      	mov	r4, r1
 810d63e:	d507      	bpl.n	810d650 <__smakebuf_r+0x1c>
 810d640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810d644:	6023      	str	r3, [r4, #0]
 810d646:	6123      	str	r3, [r4, #16]
 810d648:	2301      	movs	r3, #1
 810d64a:	6163      	str	r3, [r4, #20]
 810d64c:	b002      	add	sp, #8
 810d64e:	bd70      	pop	{r4, r5, r6, pc}
 810d650:	ab01      	add	r3, sp, #4
 810d652:	466a      	mov	r2, sp
 810d654:	f7ff ffc8 	bl	810d5e8 <__swhatbuf_r>
 810d658:	9900      	ldr	r1, [sp, #0]
 810d65a:	4605      	mov	r5, r0
 810d65c:	4630      	mov	r0, r6
 810d65e:	f7fd fb81 	bl	810ad64 <_malloc_r>
 810d662:	b948      	cbnz	r0, 810d678 <__smakebuf_r+0x44>
 810d664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d668:	059a      	lsls	r2, r3, #22
 810d66a:	d4ef      	bmi.n	810d64c <__smakebuf_r+0x18>
 810d66c:	f023 0303 	bic.w	r3, r3, #3
 810d670:	f043 0302 	orr.w	r3, r3, #2
 810d674:	81a3      	strh	r3, [r4, #12]
 810d676:	e7e3      	b.n	810d640 <__smakebuf_r+0xc>
 810d678:	89a3      	ldrh	r3, [r4, #12]
 810d67a:	6020      	str	r0, [r4, #0]
 810d67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d680:	81a3      	strh	r3, [r4, #12]
 810d682:	9b00      	ldr	r3, [sp, #0]
 810d684:	6163      	str	r3, [r4, #20]
 810d686:	9b01      	ldr	r3, [sp, #4]
 810d688:	6120      	str	r0, [r4, #16]
 810d68a:	b15b      	cbz	r3, 810d6a4 <__smakebuf_r+0x70>
 810d68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d690:	4630      	mov	r0, r6
 810d692:	f000 f81d 	bl	810d6d0 <_isatty_r>
 810d696:	b128      	cbz	r0, 810d6a4 <__smakebuf_r+0x70>
 810d698:	89a3      	ldrh	r3, [r4, #12]
 810d69a:	f023 0303 	bic.w	r3, r3, #3
 810d69e:	f043 0301 	orr.w	r3, r3, #1
 810d6a2:	81a3      	strh	r3, [r4, #12]
 810d6a4:	89a3      	ldrh	r3, [r4, #12]
 810d6a6:	431d      	orrs	r5, r3
 810d6a8:	81a5      	strh	r5, [r4, #12]
 810d6aa:	e7cf      	b.n	810d64c <__smakebuf_r+0x18>

0810d6ac <_fstat_r>:
 810d6ac:	b538      	push	{r3, r4, r5, lr}
 810d6ae:	4d07      	ldr	r5, [pc, #28]	; (810d6cc <_fstat_r+0x20>)
 810d6b0:	2300      	movs	r3, #0
 810d6b2:	4604      	mov	r4, r0
 810d6b4:	4608      	mov	r0, r1
 810d6b6:	4611      	mov	r1, r2
 810d6b8:	602b      	str	r3, [r5, #0]
 810d6ba:	f7f5 f997 	bl	81029ec <_fstat>
 810d6be:	1c43      	adds	r3, r0, #1
 810d6c0:	d102      	bne.n	810d6c8 <_fstat_r+0x1c>
 810d6c2:	682b      	ldr	r3, [r5, #0]
 810d6c4:	b103      	cbz	r3, 810d6c8 <_fstat_r+0x1c>
 810d6c6:	6023      	str	r3, [r4, #0]
 810d6c8:	bd38      	pop	{r3, r4, r5, pc}
 810d6ca:	bf00      	nop
 810d6cc:	10018ad0 	.word	0x10018ad0

0810d6d0 <_isatty_r>:
 810d6d0:	b538      	push	{r3, r4, r5, lr}
 810d6d2:	4d06      	ldr	r5, [pc, #24]	; (810d6ec <_isatty_r+0x1c>)
 810d6d4:	2300      	movs	r3, #0
 810d6d6:	4604      	mov	r4, r0
 810d6d8:	4608      	mov	r0, r1
 810d6da:	602b      	str	r3, [r5, #0]
 810d6dc:	f7f5 f98c 	bl	81029f8 <_isatty>
 810d6e0:	1c43      	adds	r3, r0, #1
 810d6e2:	d102      	bne.n	810d6ea <_isatty_r+0x1a>
 810d6e4:	682b      	ldr	r3, [r5, #0]
 810d6e6:	b103      	cbz	r3, 810d6ea <_isatty_r+0x1a>
 810d6e8:	6023      	str	r3, [r4, #0]
 810d6ea:	bd38      	pop	{r3, r4, r5, pc}
 810d6ec:	10018ad0 	.word	0x10018ad0

0810d6f0 <log10f>:
 810d6f0:	b508      	push	{r3, lr}
 810d6f2:	ed2d 8b02 	vpush	{d8}
 810d6f6:	eeb0 8a40 	vmov.f32	s16, s0
 810d6fa:	f000 fa8b 	bl	810dc14 <__ieee754_log10f>
 810d6fe:	eeb4 8a48 	vcmp.f32	s16, s16
 810d702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d706:	d60f      	bvs.n	810d728 <log10f+0x38>
 810d708:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810d70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d710:	d80a      	bhi.n	810d728 <log10f+0x38>
 810d712:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810d716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d71a:	d108      	bne.n	810d72e <log10f+0x3e>
 810d71c:	f7fc fbfe 	bl	8109f1c <__errno>
 810d720:	2322      	movs	r3, #34	; 0x22
 810d722:	ed9f 0a08 	vldr	s0, [pc, #32]	; 810d744 <log10f+0x54>
 810d726:	6003      	str	r3, [r0, #0]
 810d728:	ecbd 8b02 	vpop	{d8}
 810d72c:	bd08      	pop	{r3, pc}
 810d72e:	f7fc fbf5 	bl	8109f1c <__errno>
 810d732:	ecbd 8b02 	vpop	{d8}
 810d736:	2321      	movs	r3, #33	; 0x21
 810d738:	6003      	str	r3, [r0, #0]
 810d73a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810d73e:	4802      	ldr	r0, [pc, #8]	; (810d748 <log10f+0x58>)
 810d740:	f7fc bc1a 	b.w	8109f78 <nanf>
 810d744:	ff800000 	.word	0xff800000
 810d748:	08122ce5 	.word	0x08122ce5

0810d74c <powf>:
 810d74c:	b508      	push	{r3, lr}
 810d74e:	ed2d 8b04 	vpush	{d8-d9}
 810d752:	eeb0 8a60 	vmov.f32	s16, s1
 810d756:	eeb0 9a40 	vmov.f32	s18, s0
 810d75a:	f000 fab3 	bl	810dcc4 <__ieee754_powf>
 810d75e:	eeb4 8a48 	vcmp.f32	s16, s16
 810d762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d766:	eef0 8a40 	vmov.f32	s17, s0
 810d76a:	d63e      	bvs.n	810d7ea <powf+0x9e>
 810d76c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 810d770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d774:	d112      	bne.n	810d79c <powf+0x50>
 810d776:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810d77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d77e:	d039      	beq.n	810d7f4 <powf+0xa8>
 810d780:	eeb0 0a48 	vmov.f32	s0, s16
 810d784:	f000 f89e 	bl	810d8c4 <finitef>
 810d788:	b378      	cbz	r0, 810d7ea <powf+0x9e>
 810d78a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810d78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d792:	d52a      	bpl.n	810d7ea <powf+0x9e>
 810d794:	f7fc fbc2 	bl	8109f1c <__errno>
 810d798:	2322      	movs	r3, #34	; 0x22
 810d79a:	e014      	b.n	810d7c6 <powf+0x7a>
 810d79c:	f000 f892 	bl	810d8c4 <finitef>
 810d7a0:	b998      	cbnz	r0, 810d7ca <powf+0x7e>
 810d7a2:	eeb0 0a49 	vmov.f32	s0, s18
 810d7a6:	f000 f88d 	bl	810d8c4 <finitef>
 810d7aa:	b170      	cbz	r0, 810d7ca <powf+0x7e>
 810d7ac:	eeb0 0a48 	vmov.f32	s0, s16
 810d7b0:	f000 f888 	bl	810d8c4 <finitef>
 810d7b4:	b148      	cbz	r0, 810d7ca <powf+0x7e>
 810d7b6:	eef4 8a68 	vcmp.f32	s17, s17
 810d7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d7be:	d7e9      	bvc.n	810d794 <powf+0x48>
 810d7c0:	f7fc fbac 	bl	8109f1c <__errno>
 810d7c4:	2321      	movs	r3, #33	; 0x21
 810d7c6:	6003      	str	r3, [r0, #0]
 810d7c8:	e00f      	b.n	810d7ea <powf+0x9e>
 810d7ca:	eef5 8a40 	vcmp.f32	s17, #0.0
 810d7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d7d2:	d10a      	bne.n	810d7ea <powf+0x9e>
 810d7d4:	eeb0 0a49 	vmov.f32	s0, s18
 810d7d8:	f000 f874 	bl	810d8c4 <finitef>
 810d7dc:	b128      	cbz	r0, 810d7ea <powf+0x9e>
 810d7de:	eeb0 0a48 	vmov.f32	s0, s16
 810d7e2:	f000 f86f 	bl	810d8c4 <finitef>
 810d7e6:	2800      	cmp	r0, #0
 810d7e8:	d1d4      	bne.n	810d794 <powf+0x48>
 810d7ea:	eeb0 0a68 	vmov.f32	s0, s17
 810d7ee:	ecbd 8b04 	vpop	{d8-d9}
 810d7f2:	bd08      	pop	{r3, pc}
 810d7f4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 810d7f8:	e7f7      	b.n	810d7ea <powf+0x9e>
	...

0810d7fc <sqrtf>:
 810d7fc:	b508      	push	{r3, lr}
 810d7fe:	ed2d 8b02 	vpush	{d8}
 810d802:	eeb0 8a40 	vmov.f32	s16, s0
 810d806:	f000 f86a 	bl	810d8de <__ieee754_sqrtf>
 810d80a:	eeb4 8a48 	vcmp.f32	s16, s16
 810d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d812:	d60c      	bvs.n	810d82e <sqrtf+0x32>
 810d814:	eddf 8a07 	vldr	s17, [pc, #28]	; 810d834 <sqrtf+0x38>
 810d818:	eeb4 8ae8 	vcmpe.f32	s16, s17
 810d81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810d820:	d505      	bpl.n	810d82e <sqrtf+0x32>
 810d822:	f7fc fb7b 	bl	8109f1c <__errno>
 810d826:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 810d82a:	2321      	movs	r3, #33	; 0x21
 810d82c:	6003      	str	r3, [r0, #0]
 810d82e:	ecbd 8b02 	vpop	{d8}
 810d832:	bd08      	pop	{r3, pc}
 810d834:	00000000 	.word	0x00000000

0810d838 <sinf>:
 810d838:	ee10 3a10 	vmov	r3, s0
 810d83c:	b507      	push	{r0, r1, r2, lr}
 810d83e:	4a1f      	ldr	r2, [pc, #124]	; (810d8bc <sinf+0x84>)
 810d840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810d844:	4293      	cmp	r3, r2
 810d846:	dc07      	bgt.n	810d858 <sinf+0x20>
 810d848:	eddf 0a1d 	vldr	s1, [pc, #116]	; 810d8c0 <sinf+0x88>
 810d84c:	2000      	movs	r0, #0
 810d84e:	b003      	add	sp, #12
 810d850:	f85d eb04 	ldr.w	lr, [sp], #4
 810d854:	f000 b8a4 	b.w	810d9a0 <__kernel_sinf>
 810d858:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810d85c:	db04      	blt.n	810d868 <sinf+0x30>
 810d85e:	ee30 0a40 	vsub.f32	s0, s0, s0
 810d862:	b003      	add	sp, #12
 810d864:	f85d fb04 	ldr.w	pc, [sp], #4
 810d868:	4668      	mov	r0, sp
 810d86a:	f000 fcf5 	bl	810e258 <__ieee754_rem_pio2f>
 810d86e:	f000 0003 	and.w	r0, r0, #3
 810d872:	2801      	cmp	r0, #1
 810d874:	d00a      	beq.n	810d88c <sinf+0x54>
 810d876:	2802      	cmp	r0, #2
 810d878:	d00f      	beq.n	810d89a <sinf+0x62>
 810d87a:	b9c0      	cbnz	r0, 810d8ae <sinf+0x76>
 810d87c:	eddd 0a01 	vldr	s1, [sp, #4]
 810d880:	ed9d 0a00 	vldr	s0, [sp]
 810d884:	2001      	movs	r0, #1
 810d886:	f000 f88b 	bl	810d9a0 <__kernel_sinf>
 810d88a:	e7ea      	b.n	810d862 <sinf+0x2a>
 810d88c:	eddd 0a01 	vldr	s1, [sp, #4]
 810d890:	ed9d 0a00 	vldr	s0, [sp]
 810d894:	f000 f826 	bl	810d8e4 <__kernel_cosf>
 810d898:	e7e3      	b.n	810d862 <sinf+0x2a>
 810d89a:	eddd 0a01 	vldr	s1, [sp, #4]
 810d89e:	ed9d 0a00 	vldr	s0, [sp]
 810d8a2:	2001      	movs	r0, #1
 810d8a4:	f000 f87c 	bl	810d9a0 <__kernel_sinf>
 810d8a8:	eeb1 0a40 	vneg.f32	s0, s0
 810d8ac:	e7d9      	b.n	810d862 <sinf+0x2a>
 810d8ae:	eddd 0a01 	vldr	s1, [sp, #4]
 810d8b2:	ed9d 0a00 	vldr	s0, [sp]
 810d8b6:	f000 f815 	bl	810d8e4 <__kernel_cosf>
 810d8ba:	e7f5      	b.n	810d8a8 <sinf+0x70>
 810d8bc:	3f490fd8 	.word	0x3f490fd8
 810d8c0:	00000000 	.word	0x00000000

0810d8c4 <finitef>:
 810d8c4:	b082      	sub	sp, #8
 810d8c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 810d8ca:	9801      	ldr	r0, [sp, #4]
 810d8cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 810d8d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 810d8d4:	bfac      	ite	ge
 810d8d6:	2000      	movge	r0, #0
 810d8d8:	2001      	movlt	r0, #1
 810d8da:	b002      	add	sp, #8
 810d8dc:	4770      	bx	lr

0810d8de <__ieee754_sqrtf>:
 810d8de:	eeb1 0ac0 	vsqrt.f32	s0, s0
 810d8e2:	4770      	bx	lr

0810d8e4 <__kernel_cosf>:
 810d8e4:	ee10 3a10 	vmov	r3, s0
 810d8e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810d8ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 810d8f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810d8f4:	da05      	bge.n	810d902 <__kernel_cosf+0x1e>
 810d8f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 810d8fa:	ee17 2a90 	vmov	r2, s15
 810d8fe:	2a00      	cmp	r2, #0
 810d900:	d03b      	beq.n	810d97a <__kernel_cosf+0x96>
 810d902:	ee20 7a00 	vmul.f32	s14, s0, s0
 810d906:	eddf 7a1e 	vldr	s15, [pc, #120]	; 810d980 <__kernel_cosf+0x9c>
 810d90a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 810d984 <__kernel_cosf+0xa0>
 810d90e:	4a1e      	ldr	r2, [pc, #120]	; (810d988 <__kernel_cosf+0xa4>)
 810d910:	eea7 6a27 	vfma.f32	s12, s14, s15
 810d914:	4293      	cmp	r3, r2
 810d916:	eddf 7a1d 	vldr	s15, [pc, #116]	; 810d98c <__kernel_cosf+0xa8>
 810d91a:	eee6 7a07 	vfma.f32	s15, s12, s14
 810d91e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 810d990 <__kernel_cosf+0xac>
 810d922:	eea7 6a87 	vfma.f32	s12, s15, s14
 810d926:	eddf 7a1b 	vldr	s15, [pc, #108]	; 810d994 <__kernel_cosf+0xb0>
 810d92a:	eee6 7a07 	vfma.f32	s15, s12, s14
 810d92e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 810d998 <__kernel_cosf+0xb4>
 810d932:	eea7 6a87 	vfma.f32	s12, s15, s14
 810d936:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 810d93a:	ee26 6a07 	vmul.f32	s12, s12, s14
 810d93e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810d942:	eee7 0a06 	vfma.f32	s1, s14, s12
 810d946:	ee67 7a27 	vmul.f32	s15, s14, s15
 810d94a:	dc04      	bgt.n	810d956 <__kernel_cosf+0x72>
 810d94c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 810d950:	ee36 0ae7 	vsub.f32	s0, s13, s15
 810d954:	4770      	bx	lr
 810d956:	4a11      	ldr	r2, [pc, #68]	; (810d99c <__kernel_cosf+0xb8>)
 810d958:	4293      	cmp	r3, r2
 810d95a:	bfda      	itte	le
 810d95c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 810d960:	ee07 3a10 	vmovle	s14, r3
 810d964:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 810d968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810d96c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 810d970:	ee77 7ae0 	vsub.f32	s15, s15, s1
 810d974:	ee30 0a67 	vsub.f32	s0, s0, s15
 810d978:	4770      	bx	lr
 810d97a:	eeb0 0a66 	vmov.f32	s0, s13
 810d97e:	4770      	bx	lr
 810d980:	ad47d74e 	.word	0xad47d74e
 810d984:	310f74f6 	.word	0x310f74f6
 810d988:	3e999999 	.word	0x3e999999
 810d98c:	b493f27c 	.word	0xb493f27c
 810d990:	37d00d01 	.word	0x37d00d01
 810d994:	bab60b61 	.word	0xbab60b61
 810d998:	3d2aaaab 	.word	0x3d2aaaab
 810d99c:	3f480000 	.word	0x3f480000

0810d9a0 <__kernel_sinf>:
 810d9a0:	ee10 3a10 	vmov	r3, s0
 810d9a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810d9a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 810d9ac:	da04      	bge.n	810d9b8 <__kernel_sinf+0x18>
 810d9ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 810d9b2:	ee17 3a90 	vmov	r3, s15
 810d9b6:	b35b      	cbz	r3, 810da10 <__kernel_sinf+0x70>
 810d9b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 810d9bc:	eddf 7a15 	vldr	s15, [pc, #84]	; 810da14 <__kernel_sinf+0x74>
 810d9c0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 810da18 <__kernel_sinf+0x78>
 810d9c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 810d9c8:	eddf 7a14 	vldr	s15, [pc, #80]	; 810da1c <__kernel_sinf+0x7c>
 810d9cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 810d9d0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 810da20 <__kernel_sinf+0x80>
 810d9d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 810d9d8:	eddf 7a12 	vldr	s15, [pc, #72]	; 810da24 <__kernel_sinf+0x84>
 810d9dc:	ee60 6a07 	vmul.f32	s13, s0, s14
 810d9e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 810d9e4:	b930      	cbnz	r0, 810d9f4 <__kernel_sinf+0x54>
 810d9e6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 810da28 <__kernel_sinf+0x88>
 810d9ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 810d9ee:	eea6 0a26 	vfma.f32	s0, s12, s13
 810d9f2:	4770      	bx	lr
 810d9f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 810d9f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 810d9fc:	eee0 7a86 	vfma.f32	s15, s1, s12
 810da00:	eed7 0a87 	vfnms.f32	s1, s15, s14
 810da04:	eddf 7a09 	vldr	s15, [pc, #36]	; 810da2c <__kernel_sinf+0x8c>
 810da08:	eee6 0aa7 	vfma.f32	s1, s13, s15
 810da0c:	ee30 0a60 	vsub.f32	s0, s0, s1
 810da10:	4770      	bx	lr
 810da12:	bf00      	nop
 810da14:	2f2ec9d3 	.word	0x2f2ec9d3
 810da18:	b2d72f34 	.word	0xb2d72f34
 810da1c:	3638ef1b 	.word	0x3638ef1b
 810da20:	b9500d01 	.word	0xb9500d01
 810da24:	3c088889 	.word	0x3c088889
 810da28:	be2aaaab 	.word	0xbe2aaaab
 810da2c:	3e2aaaab 	.word	0x3e2aaaab

0810da30 <__ieee754_logf>:
 810da30:	ee10 3a10 	vmov	r3, s0
 810da34:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810da38:	d106      	bne.n	810da48 <__ieee754_logf+0x18>
 810da3a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 810dbd4 <__ieee754_logf+0x1a4>
 810da3e:	eddf 7a66 	vldr	s15, [pc, #408]	; 810dbd8 <__ieee754_logf+0x1a8>
 810da42:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810da46:	4770      	bx	lr
 810da48:	2b00      	cmp	r3, #0
 810da4a:	da02      	bge.n	810da52 <__ieee754_logf+0x22>
 810da4c:	ee30 7a40 	vsub.f32	s14, s0, s0
 810da50:	e7f5      	b.n	810da3e <__ieee754_logf+0xe>
 810da52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 810da56:	db02      	blt.n	810da5e <__ieee754_logf+0x2e>
 810da58:	ee30 0a00 	vadd.f32	s0, s0, s0
 810da5c:	4770      	bx	lr
 810da5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810da62:	bfb8      	it	lt
 810da64:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 810dbdc <__ieee754_logf+0x1ac>
 810da68:	485d      	ldr	r0, [pc, #372]	; (810dbe0 <__ieee754_logf+0x1b0>)
 810da6a:	bfbe      	ittt	lt
 810da6c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810da70:	f06f 0118 	mvnlt.w	r1, #24
 810da74:	ee17 3a90 	vmovlt	r3, s15
 810da78:	ea4f 52e3 	mov.w	r2, r3, asr #23
 810da7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 810da80:	4418      	add	r0, r3
 810da82:	bfa8      	it	ge
 810da84:	2100      	movge	r1, #0
 810da86:	3a7f      	subs	r2, #127	; 0x7f
 810da88:	440a      	add	r2, r1
 810da8a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 810da8e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 810da92:	4319      	orrs	r1, r3
 810da94:	ee00 1a10 	vmov	s0, r1
 810da98:	4952      	ldr	r1, [pc, #328]	; (810dbe4 <__ieee754_logf+0x1b4>)
 810da9a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 810da9e:	f103 000f 	add.w	r0, r3, #15
 810daa2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810daa6:	4001      	ands	r1, r0
 810daa8:	ee30 0a67 	vsub.f32	s0, s0, s15
 810daac:	bb89      	cbnz	r1, 810db12 <__ieee754_logf+0xe2>
 810daae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 810dab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810dab6:	d10f      	bne.n	810dad8 <__ieee754_logf+0xa8>
 810dab8:	2a00      	cmp	r2, #0
 810daba:	f000 8087 	beq.w	810dbcc <__ieee754_logf+0x19c>
 810dabe:	ee07 2a90 	vmov	s15, r2
 810dac2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 810dbe8 <__ieee754_logf+0x1b8>
 810dac6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 810dbec <__ieee754_logf+0x1bc>
 810daca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810dace:	ee27 0a80 	vmul.f32	s0, s15, s0
 810dad2:	eea7 0a87 	vfma.f32	s0, s15, s14
 810dad6:	4770      	bx	lr
 810dad8:	eddf 6a45 	vldr	s13, [pc, #276]	; 810dbf0 <__ieee754_logf+0x1c0>
 810dadc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810dae0:	eee0 7a66 	vfms.f32	s15, s0, s13
 810dae4:	ee20 7a00 	vmul.f32	s14, s0, s0
 810dae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 810daec:	b912      	cbnz	r2, 810daf4 <__ieee754_logf+0xc4>
 810daee:	ee30 0a47 	vsub.f32	s0, s0, s14
 810daf2:	4770      	bx	lr
 810daf4:	ee07 2a90 	vmov	s15, r2
 810daf8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810dbe8 <__ieee754_logf+0x1b8>
 810dafc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810db00:	eea7 7ae6 	vfms.f32	s14, s15, s13
 810db04:	ee37 0a40 	vsub.f32	s0, s14, s0
 810db08:	ed9f 7a38 	vldr	s14, [pc, #224]	; 810dbec <__ieee754_logf+0x1bc>
 810db0c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 810db10:	4770      	bx	lr
 810db12:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 810db16:	ee70 7a27 	vadd.f32	s15, s0, s15
 810db1a:	eddf 5a36 	vldr	s11, [pc, #216]	; 810dbf4 <__ieee754_logf+0x1c4>
 810db1e:	eddf 4a36 	vldr	s9, [pc, #216]	; 810dbf8 <__ieee754_logf+0x1c8>
 810db22:	4936      	ldr	r1, [pc, #216]	; (810dbfc <__ieee754_logf+0x1cc>)
 810db24:	ee80 6a27 	vdiv.f32	s12, s0, s15
 810db28:	4419      	add	r1, r3
 810db2a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 810db2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 810db32:	430b      	orrs	r3, r1
 810db34:	2b00      	cmp	r3, #0
 810db36:	ee07 2a90 	vmov	s15, r2
 810db3a:	ee26 5a06 	vmul.f32	s10, s12, s12
 810db3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810db42:	ee25 7a05 	vmul.f32	s14, s10, s10
 810db46:	eddf 7a2e 	vldr	s15, [pc, #184]	; 810dc00 <__ieee754_logf+0x1d0>
 810db4a:	eee7 7a25 	vfma.f32	s15, s14, s11
 810db4e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 810dc04 <__ieee754_logf+0x1d4>
 810db52:	eee7 5a87 	vfma.f32	s11, s15, s14
 810db56:	eddf 7a2c 	vldr	s15, [pc, #176]	; 810dc08 <__ieee754_logf+0x1d8>
 810db5a:	eee7 7a24 	vfma.f32	s15, s14, s9
 810db5e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 810dc0c <__ieee754_logf+0x1dc>
 810db62:	eee7 4a87 	vfma.f32	s9, s15, s14
 810db66:	eddf 7a2a 	vldr	s15, [pc, #168]	; 810dc10 <__ieee754_logf+0x1e0>
 810db6a:	eee4 7a87 	vfma.f32	s15, s9, s14
 810db6e:	ee67 7a85 	vmul.f32	s15, s15, s10
 810db72:	eee5 7a87 	vfma.f32	s15, s11, s14
 810db76:	dd1a      	ble.n	810dbae <__ieee754_logf+0x17e>
 810db78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 810db7c:	ee20 7a07 	vmul.f32	s14, s0, s14
 810db80:	ee27 7a00 	vmul.f32	s14, s14, s0
 810db84:	ee77 7a87 	vadd.f32	s15, s15, s14
 810db88:	ee67 7a86 	vmul.f32	s15, s15, s12
 810db8c:	b912      	cbnz	r2, 810db94 <__ieee754_logf+0x164>
 810db8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 810db92:	e7ac      	b.n	810daee <__ieee754_logf+0xbe>
 810db94:	ed9f 6a14 	vldr	s12, [pc, #80]	; 810dbe8 <__ieee754_logf+0x1b8>
 810db98:	eee6 7a86 	vfma.f32	s15, s13, s12
 810db9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 810dba0:	ee37 0a40 	vsub.f32	s0, s14, s0
 810dba4:	eddf 7a11 	vldr	s15, [pc, #68]	; 810dbec <__ieee754_logf+0x1bc>
 810dba8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 810dbac:	4770      	bx	lr
 810dbae:	ee70 7a67 	vsub.f32	s15, s0, s15
 810dbb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 810dbb6:	b912      	cbnz	r2, 810dbbe <__ieee754_logf+0x18e>
 810dbb8:	ee30 0a67 	vsub.f32	s0, s0, s15
 810dbbc:	4770      	bx	lr
 810dbbe:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 810dbe8 <__ieee754_logf+0x1b8>
 810dbc2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 810dbc6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 810dbca:	e7eb      	b.n	810dba4 <__ieee754_logf+0x174>
 810dbcc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 810dbd8 <__ieee754_logf+0x1a8>
 810dbd0:	4770      	bx	lr
 810dbd2:	bf00      	nop
 810dbd4:	cc000000 	.word	0xcc000000
 810dbd8:	00000000 	.word	0x00000000
 810dbdc:	4c000000 	.word	0x4c000000
 810dbe0:	004afb20 	.word	0x004afb20
 810dbe4:	007ffff0 	.word	0x007ffff0
 810dbe8:	3717f7d1 	.word	0x3717f7d1
 810dbec:	3f317180 	.word	0x3f317180
 810dbf0:	3eaaaaab 	.word	0x3eaaaaab
 810dbf4:	3e1cd04f 	.word	0x3e1cd04f
 810dbf8:	3e178897 	.word	0x3e178897
 810dbfc:	ffcf5c30 	.word	0xffcf5c30
 810dc00:	3e638e29 	.word	0x3e638e29
 810dc04:	3ecccccd 	.word	0x3ecccccd
 810dc08:	3e3a3325 	.word	0x3e3a3325
 810dc0c:	3e924925 	.word	0x3e924925
 810dc10:	3f2aaaab 	.word	0x3f2aaaab

0810dc14 <__ieee754_log10f>:
 810dc14:	b508      	push	{r3, lr}
 810dc16:	ee10 2a10 	vmov	r2, s0
 810dc1a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 810dc1e:	ed2d 8b02 	vpush	{d8}
 810dc22:	d108      	bne.n	810dc36 <__ieee754_log10f+0x22>
 810dc24:	ed9f 7a21 	vldr	s14, [pc, #132]	; 810dcac <__ieee754_log10f+0x98>
 810dc28:	eddf 7a21 	vldr	s15, [pc, #132]	; 810dcb0 <__ieee754_log10f+0x9c>
 810dc2c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 810dc30:	ecbd 8b02 	vpop	{d8}
 810dc34:	bd08      	pop	{r3, pc}
 810dc36:	2a00      	cmp	r2, #0
 810dc38:	da02      	bge.n	810dc40 <__ieee754_log10f+0x2c>
 810dc3a:	ee30 7a40 	vsub.f32	s14, s0, s0
 810dc3e:	e7f3      	b.n	810dc28 <__ieee754_log10f+0x14>
 810dc40:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810dc44:	db02      	blt.n	810dc4c <__ieee754_log10f+0x38>
 810dc46:	ee30 0a00 	vadd.f32	s0, s0, s0
 810dc4a:	e7f1      	b.n	810dc30 <__ieee754_log10f+0x1c>
 810dc4c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 810dc50:	bfbf      	itttt	lt
 810dc52:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 810dcb4 <__ieee754_log10f+0xa0>
 810dc56:	ee60 7a27 	vmullt.f32	s15, s0, s15
 810dc5a:	f06f 0118 	mvnlt.w	r1, #24
 810dc5e:	ee17 2a90 	vmovlt	r2, s15
 810dc62:	ea4f 53e2 	mov.w	r3, r2, asr #23
 810dc66:	bfa8      	it	ge
 810dc68:	2100      	movge	r1, #0
 810dc6a:	3b7f      	subs	r3, #127	; 0x7f
 810dc6c:	440b      	add	r3, r1
 810dc6e:	0fd9      	lsrs	r1, r3, #31
 810dc70:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 810dc74:	ee07 3a90 	vmov	s15, r3
 810dc78:	f3c2 0216 	ubfx	r2, r2, #0, #23
 810dc7c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 810dc80:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 810dc84:	ee00 3a10 	vmov	s0, r3
 810dc88:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 810dc8c:	f7ff fed0 	bl	810da30 <__ieee754_logf>
 810dc90:	eddf 7a09 	vldr	s15, [pc, #36]	; 810dcb8 <__ieee754_log10f+0xa4>
 810dc94:	ee20 0a27 	vmul.f32	s0, s0, s15
 810dc98:	eddf 7a08 	vldr	s15, [pc, #32]	; 810dcbc <__ieee754_log10f+0xa8>
 810dc9c:	eea8 0a27 	vfma.f32	s0, s16, s15
 810dca0:	eddf 7a07 	vldr	s15, [pc, #28]	; 810dcc0 <__ieee754_log10f+0xac>
 810dca4:	eea8 0a27 	vfma.f32	s0, s16, s15
 810dca8:	e7c2      	b.n	810dc30 <__ieee754_log10f+0x1c>
 810dcaa:	bf00      	nop
 810dcac:	cc000000 	.word	0xcc000000
 810dcb0:	00000000 	.word	0x00000000
 810dcb4:	4c000000 	.word	0x4c000000
 810dcb8:	3ede5bd9 	.word	0x3ede5bd9
 810dcbc:	355427db 	.word	0x355427db
 810dcc0:	3e9a2080 	.word	0x3e9a2080

0810dcc4 <__ieee754_powf>:
 810dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dcc8:	ee10 4a90 	vmov	r4, s1
 810dccc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 810dcd0:	ed2d 8b02 	vpush	{d8}
 810dcd4:	ee10 7a10 	vmov	r7, s0
 810dcd8:	eeb0 8a40 	vmov.f32	s16, s0
 810dcdc:	eef0 8a60 	vmov.f32	s17, s1
 810dce0:	d10c      	bne.n	810dcfc <__ieee754_powf+0x38>
 810dce2:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 810dce6:	007f      	lsls	r7, r7, #1
 810dce8:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 810dcec:	f240 8292 	bls.w	810e214 <__ieee754_powf+0x550>
 810dcf0:	ee38 0a28 	vadd.f32	s0, s16, s17
 810dcf4:	ecbd 8b02 	vpop	{d8}
 810dcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810dcfc:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 810dd00:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 810dd04:	dcf4      	bgt.n	810dcf0 <__ieee754_powf+0x2c>
 810dd06:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810dd0a:	dd08      	ble.n	810dd1e <__ieee754_powf+0x5a>
 810dd0c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 810dd10:	d1ee      	bne.n	810dcf0 <__ieee754_powf+0x2c>
 810dd12:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 810dd16:	0064      	lsls	r4, r4, #1
 810dd18:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 810dd1c:	e7e6      	b.n	810dcec <__ieee754_powf+0x28>
 810dd1e:	2f00      	cmp	r7, #0
 810dd20:	da20      	bge.n	810dd64 <__ieee754_powf+0xa0>
 810dd22:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 810dd26:	da2d      	bge.n	810dd84 <__ieee754_powf+0xc0>
 810dd28:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810dd2c:	f2c0 827b 	blt.w	810e226 <__ieee754_powf+0x562>
 810dd30:	ea4f 53e8 	mov.w	r3, r8, asr #23
 810dd34:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 810dd38:	fa48 f603 	asr.w	r6, r8, r3
 810dd3c:	fa06 f303 	lsl.w	r3, r6, r3
 810dd40:	4543      	cmp	r3, r8
 810dd42:	f040 8270 	bne.w	810e226 <__ieee754_powf+0x562>
 810dd46:	f006 0601 	and.w	r6, r6, #1
 810dd4a:	f1c6 0602 	rsb	r6, r6, #2
 810dd4e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 810dd52:	d11f      	bne.n	810dd94 <__ieee754_powf+0xd0>
 810dd54:	2c00      	cmp	r4, #0
 810dd56:	f280 8263 	bge.w	810e220 <__ieee754_powf+0x55c>
 810dd5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810dd5e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 810dd62:	e7c7      	b.n	810dcf4 <__ieee754_powf+0x30>
 810dd64:	2600      	movs	r6, #0
 810dd66:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 810dd6a:	d1f0      	bne.n	810dd4e <__ieee754_powf+0x8a>
 810dd6c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 810dd70:	f000 8250 	beq.w	810e214 <__ieee754_powf+0x550>
 810dd74:	dd08      	ble.n	810dd88 <__ieee754_powf+0xc4>
 810dd76:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 810e07c <__ieee754_powf+0x3b8>
 810dd7a:	2c00      	cmp	r4, #0
 810dd7c:	bfa8      	it	ge
 810dd7e:	eeb0 0a68 	vmovge.f32	s0, s17
 810dd82:	e7b7      	b.n	810dcf4 <__ieee754_powf+0x30>
 810dd84:	2602      	movs	r6, #2
 810dd86:	e7ee      	b.n	810dd66 <__ieee754_powf+0xa2>
 810dd88:	2c00      	cmp	r4, #0
 810dd8a:	f280 8246 	bge.w	810e21a <__ieee754_powf+0x556>
 810dd8e:	eeb1 0a68 	vneg.f32	s0, s17
 810dd92:	e7af      	b.n	810dcf4 <__ieee754_powf+0x30>
 810dd94:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 810dd98:	d102      	bne.n	810dda0 <__ieee754_powf+0xdc>
 810dd9a:	ee28 0a08 	vmul.f32	s0, s16, s16
 810dd9e:	e7a9      	b.n	810dcf4 <__ieee754_powf+0x30>
 810dda0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 810dda4:	eeb0 0a48 	vmov.f32	s0, s16
 810dda8:	d107      	bne.n	810ddba <__ieee754_powf+0xf6>
 810ddaa:	2f00      	cmp	r7, #0
 810ddac:	db05      	blt.n	810ddba <__ieee754_powf+0xf6>
 810ddae:	ecbd 8b02 	vpop	{d8}
 810ddb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ddb6:	f7ff bd92 	b.w	810d8de <__ieee754_sqrtf>
 810ddba:	f000 fb79 	bl	810e4b0 <fabsf>
 810ddbe:	b125      	cbz	r5, 810ddca <__ieee754_powf+0x106>
 810ddc0:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 810ddc4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 810ddc8:	d115      	bne.n	810ddf6 <__ieee754_powf+0x132>
 810ddca:	2c00      	cmp	r4, #0
 810ddcc:	bfbc      	itt	lt
 810ddce:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 810ddd2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 810ddd6:	2f00      	cmp	r7, #0
 810ddd8:	da8c      	bge.n	810dcf4 <__ieee754_powf+0x30>
 810ddda:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 810ddde:	4335      	orrs	r5, r6
 810dde0:	d104      	bne.n	810ddec <__ieee754_powf+0x128>
 810dde2:	ee70 7a40 	vsub.f32	s15, s0, s0
 810dde6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 810ddea:	e783      	b.n	810dcf4 <__ieee754_powf+0x30>
 810ddec:	2e01      	cmp	r6, #1
 810ddee:	d181      	bne.n	810dcf4 <__ieee754_powf+0x30>
 810ddf0:	eeb1 0a40 	vneg.f32	s0, s0
 810ddf4:	e77e      	b.n	810dcf4 <__ieee754_powf+0x30>
 810ddf6:	0ff8      	lsrs	r0, r7, #31
 810ddf8:	3801      	subs	r0, #1
 810ddfa:	ea56 0300 	orrs.w	r3, r6, r0
 810ddfe:	d104      	bne.n	810de0a <__ieee754_powf+0x146>
 810de00:	ee38 8a48 	vsub.f32	s16, s16, s16
 810de04:	ee88 0a08 	vdiv.f32	s0, s16, s16
 810de08:	e774      	b.n	810dcf4 <__ieee754_powf+0x30>
 810de0a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 810de0e:	dd73      	ble.n	810def8 <__ieee754_powf+0x234>
 810de10:	4b9b      	ldr	r3, [pc, #620]	; (810e080 <__ieee754_powf+0x3bc>)
 810de12:	429d      	cmp	r5, r3
 810de14:	dc08      	bgt.n	810de28 <__ieee754_powf+0x164>
 810de16:	2c00      	cmp	r4, #0
 810de18:	da0b      	bge.n	810de32 <__ieee754_powf+0x16e>
 810de1a:	2000      	movs	r0, #0
 810de1c:	ecbd 8b02 	vpop	{d8}
 810de20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810de24:	f000 bbce 	b.w	810e5c4 <__math_oflowf>
 810de28:	4b96      	ldr	r3, [pc, #600]	; (810e084 <__ieee754_powf+0x3c0>)
 810de2a:	429d      	cmp	r5, r3
 810de2c:	dd08      	ble.n	810de40 <__ieee754_powf+0x17c>
 810de2e:	2c00      	cmp	r4, #0
 810de30:	dcf3      	bgt.n	810de1a <__ieee754_powf+0x156>
 810de32:	2000      	movs	r0, #0
 810de34:	ecbd 8b02 	vpop	{d8}
 810de38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810de3c:	f000 bbbc 	b.w	810e5b8 <__math_uflowf>
 810de40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 810de44:	ee30 0a67 	vsub.f32	s0, s0, s15
 810de48:	eddf 6a8f 	vldr	s13, [pc, #572]	; 810e088 <__ieee754_powf+0x3c4>
 810de4c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 810de50:	eee0 6a67 	vfms.f32	s13, s0, s15
 810de54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810de58:	eee6 7ac0 	vfms.f32	s15, s13, s0
 810de5c:	ee20 7a00 	vmul.f32	s14, s0, s0
 810de60:	ee27 7a27 	vmul.f32	s14, s14, s15
 810de64:	eddf 7a89 	vldr	s15, [pc, #548]	; 810e08c <__ieee754_powf+0x3c8>
 810de68:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 810de6c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 810e090 <__ieee754_powf+0x3cc>
 810de70:	eee0 7a07 	vfma.f32	s15, s0, s14
 810de74:	ed9f 7a87 	vldr	s14, [pc, #540]	; 810e094 <__ieee754_powf+0x3d0>
 810de78:	eef0 6a67 	vmov.f32	s13, s15
 810de7c:	eee0 6a07 	vfma.f32	s13, s0, s14
 810de80:	ee16 3a90 	vmov	r3, s13
 810de84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810de88:	f023 030f 	bic.w	r3, r3, #15
 810de8c:	ee06 3a90 	vmov	s13, r3
 810de90:	eee0 6a47 	vfms.f32	s13, s0, s14
 810de94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810de98:	3e01      	subs	r6, #1
 810de9a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 810de9e:	4306      	orrs	r6, r0
 810dea0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 810dea4:	f024 040f 	bic.w	r4, r4, #15
 810dea8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 810deac:	bf08      	it	eq
 810deae:	eeb0 8a47 	vmoveq.f32	s16, s14
 810deb2:	ee07 4a10 	vmov	s14, r4
 810deb6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 810deba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 810debe:	ee07 3a90 	vmov	s15, r3
 810dec2:	eee7 0a27 	vfma.f32	s1, s14, s15
 810dec6:	ee07 4a10 	vmov	s14, r4
 810deca:	ee67 7a87 	vmul.f32	s15, s15, s14
 810dece:	ee30 7aa7 	vadd.f32	s14, s1, s15
 810ded2:	ee17 1a10 	vmov	r1, s14
 810ded6:	2900      	cmp	r1, #0
 810ded8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810dedc:	f340 817c 	ble.w	810e1d8 <__ieee754_powf+0x514>
 810dee0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 810dee4:	f340 80f8 	ble.w	810e0d8 <__ieee754_powf+0x414>
 810dee8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810deec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810def0:	bf4c      	ite	mi
 810def2:	2001      	movmi	r0, #1
 810def4:	2000      	movpl	r0, #0
 810def6:	e791      	b.n	810de1c <__ieee754_powf+0x158>
 810def8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 810defc:	bf01      	itttt	eq
 810defe:	eddf 7a66 	vldreq	s15, [pc, #408]	; 810e098 <__ieee754_powf+0x3d4>
 810df02:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 810df06:	f06f 0317 	mvneq.w	r3, #23
 810df0a:	ee17 5a90 	vmoveq	r5, s15
 810df0e:	ea4f 52e5 	mov.w	r2, r5, asr #23
 810df12:	bf18      	it	ne
 810df14:	2300      	movne	r3, #0
 810df16:	3a7f      	subs	r2, #127	; 0x7f
 810df18:	441a      	add	r2, r3
 810df1a:	4b60      	ldr	r3, [pc, #384]	; (810e09c <__ieee754_powf+0x3d8>)
 810df1c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 810df20:	429d      	cmp	r5, r3
 810df22:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 810df26:	dd06      	ble.n	810df36 <__ieee754_powf+0x272>
 810df28:	4b5d      	ldr	r3, [pc, #372]	; (810e0a0 <__ieee754_powf+0x3dc>)
 810df2a:	429d      	cmp	r5, r3
 810df2c:	f340 80a4 	ble.w	810e078 <__ieee754_powf+0x3b4>
 810df30:	3201      	adds	r2, #1
 810df32:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 810df36:	2500      	movs	r5, #0
 810df38:	4b5a      	ldr	r3, [pc, #360]	; (810e0a4 <__ieee754_powf+0x3e0>)
 810df3a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 810df3e:	ee07 1a10 	vmov	s14, r1
 810df42:	edd3 5a00 	vldr	s11, [r3]
 810df46:	4b58      	ldr	r3, [pc, #352]	; (810e0a8 <__ieee754_powf+0x3e4>)
 810df48:	ee75 7a87 	vadd.f32	s15, s11, s14
 810df4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810df50:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 810df54:	1049      	asrs	r1, r1, #1
 810df56:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 810df5a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 810df5e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 810df62:	ee37 6a65 	vsub.f32	s12, s14, s11
 810df66:	ee07 1a90 	vmov	s15, r1
 810df6a:	ee26 5a24 	vmul.f32	s10, s12, s9
 810df6e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 810df72:	ee15 7a10 	vmov	r7, s10
 810df76:	401f      	ands	r7, r3
 810df78:	ee06 7a90 	vmov	s13, r7
 810df7c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 810df80:	ee37 7a65 	vsub.f32	s14, s14, s11
 810df84:	ee65 7a05 	vmul.f32	s15, s10, s10
 810df88:	eea6 6ac7 	vfms.f32	s12, s13, s14
 810df8c:	eddf 5a47 	vldr	s11, [pc, #284]	; 810e0ac <__ieee754_powf+0x3e8>
 810df90:	ed9f 7a47 	vldr	s14, [pc, #284]	; 810e0b0 <__ieee754_powf+0x3ec>
 810df94:	eee7 5a87 	vfma.f32	s11, s15, s14
 810df98:	ed9f 7a46 	vldr	s14, [pc, #280]	; 810e0b4 <__ieee754_powf+0x3f0>
 810df9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810dfa0:	eddf 5a39 	vldr	s11, [pc, #228]	; 810e088 <__ieee754_powf+0x3c4>
 810dfa4:	eee7 5a27 	vfma.f32	s11, s14, s15
 810dfa8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 810e0b8 <__ieee754_powf+0x3f4>
 810dfac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 810dfb0:	eddf 5a42 	vldr	s11, [pc, #264]	; 810e0bc <__ieee754_powf+0x3f8>
 810dfb4:	ee26 6a24 	vmul.f32	s12, s12, s9
 810dfb8:	eee7 5a27 	vfma.f32	s11, s14, s15
 810dfbc:	ee35 7a26 	vadd.f32	s14, s10, s13
 810dfc0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 810dfc4:	ee27 7a06 	vmul.f32	s14, s14, s12
 810dfc8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 810dfcc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 810dfd0:	eef0 5a67 	vmov.f32	s11, s15
 810dfd4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 810dfd8:	ee75 5a87 	vadd.f32	s11, s11, s14
 810dfdc:	ee15 1a90 	vmov	r1, s11
 810dfe0:	4019      	ands	r1, r3
 810dfe2:	ee05 1a90 	vmov	s11, r1
 810dfe6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 810dfea:	eee6 7ae6 	vfms.f32	s15, s13, s13
 810dfee:	ee77 7a67 	vsub.f32	s15, s14, s15
 810dff2:	ee67 7a85 	vmul.f32	s15, s15, s10
 810dff6:	eee6 7a25 	vfma.f32	s15, s12, s11
 810dffa:	eeb0 6a67 	vmov.f32	s12, s15
 810dffe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 810e002:	ee16 1a10 	vmov	r1, s12
 810e006:	4019      	ands	r1, r3
 810e008:	ee07 1a10 	vmov	s14, r1
 810e00c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 810e010:	ee06 1a10 	vmov	s12, r1
 810e014:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810e018:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810e0c0 <__ieee754_powf+0x3fc>
 810e01c:	4929      	ldr	r1, [pc, #164]	; (810e0c4 <__ieee754_powf+0x400>)
 810e01e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 810e0c8 <__ieee754_powf+0x404>
 810e022:	ee67 7a87 	vmul.f32	s15, s15, s14
 810e026:	ed9f 7a29 	vldr	s14, [pc, #164]	; 810e0cc <__ieee754_powf+0x408>
 810e02a:	eee6 7a07 	vfma.f32	s15, s12, s14
 810e02e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 810e032:	ed91 7a00 	vldr	s14, [r1]
 810e036:	ee77 7a87 	vadd.f32	s15, s15, s14
 810e03a:	ee07 2a10 	vmov	s14, r2
 810e03e:	eef0 6a67 	vmov.f32	s13, s15
 810e042:	4a23      	ldr	r2, [pc, #140]	; (810e0d0 <__ieee754_powf+0x40c>)
 810e044:	eee6 6a25 	vfma.f32	s13, s12, s11
 810e048:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 810e04c:	ed92 5a00 	vldr	s10, [r2]
 810e050:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810e054:	ee76 6a85 	vadd.f32	s13, s13, s10
 810e058:	ee76 6a87 	vadd.f32	s13, s13, s14
 810e05c:	ee16 2a90 	vmov	r2, s13
 810e060:	4013      	ands	r3, r2
 810e062:	ee06 3a90 	vmov	s13, r3
 810e066:	ee36 7ac7 	vsub.f32	s14, s13, s14
 810e06a:	ee37 7a45 	vsub.f32	s14, s14, s10
 810e06e:	eea6 7a65 	vfms.f32	s14, s12, s11
 810e072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810e076:	e70f      	b.n	810de98 <__ieee754_powf+0x1d4>
 810e078:	2501      	movs	r5, #1
 810e07a:	e75d      	b.n	810df38 <__ieee754_powf+0x274>
 810e07c:	00000000 	.word	0x00000000
 810e080:	3f7ffff3 	.word	0x3f7ffff3
 810e084:	3f800007 	.word	0x3f800007
 810e088:	3eaaaaab 	.word	0x3eaaaaab
 810e08c:	3fb8aa3b 	.word	0x3fb8aa3b
 810e090:	36eca570 	.word	0x36eca570
 810e094:	3fb8aa00 	.word	0x3fb8aa00
 810e098:	4b800000 	.word	0x4b800000
 810e09c:	001cc471 	.word	0x001cc471
 810e0a0:	005db3d6 	.word	0x005db3d6
 810e0a4:	08122d48 	.word	0x08122d48
 810e0a8:	fffff000 	.word	0xfffff000
 810e0ac:	3e6c3255 	.word	0x3e6c3255
 810e0b0:	3e53f142 	.word	0x3e53f142
 810e0b4:	3e8ba305 	.word	0x3e8ba305
 810e0b8:	3edb6db7 	.word	0x3edb6db7
 810e0bc:	3f19999a 	.word	0x3f19999a
 810e0c0:	3f76384f 	.word	0x3f76384f
 810e0c4:	08122d58 	.word	0x08122d58
 810e0c8:	3f763800 	.word	0x3f763800
 810e0cc:	369dc3a0 	.word	0x369dc3a0
 810e0d0:	08122d50 	.word	0x08122d50
 810e0d4:	3338aa3c 	.word	0x3338aa3c
 810e0d8:	f040 8093 	bne.w	810e202 <__ieee754_powf+0x53e>
 810e0dc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 810e0d4 <__ieee754_powf+0x410>
 810e0e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 810e0e4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 810e0e8:	eef4 6ac7 	vcmpe.f32	s13, s14
 810e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e0f0:	f73f aefa 	bgt.w	810dee8 <__ieee754_powf+0x224>
 810e0f4:	15db      	asrs	r3, r3, #23
 810e0f6:	3b7e      	subs	r3, #126	; 0x7e
 810e0f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 810e0fc:	4118      	asrs	r0, r3
 810e0fe:	4408      	add	r0, r1
 810e100:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 810e104:	4a49      	ldr	r2, [pc, #292]	; (810e22c <__ieee754_powf+0x568>)
 810e106:	3b7f      	subs	r3, #127	; 0x7f
 810e108:	411a      	asrs	r2, r3
 810e10a:	4002      	ands	r2, r0
 810e10c:	ee07 2a10 	vmov	s14, r2
 810e110:	f3c0 0016 	ubfx	r0, r0, #0, #23
 810e114:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 810e118:	f1c3 0317 	rsb	r3, r3, #23
 810e11c:	4118      	asrs	r0, r3
 810e11e:	2900      	cmp	r1, #0
 810e120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810e124:	bfb8      	it	lt
 810e126:	4240      	neglt	r0, r0
 810e128:	ee37 7aa0 	vadd.f32	s14, s15, s1
 810e12c:	eddf 6a40 	vldr	s13, [pc, #256]	; 810e230 <__ieee754_powf+0x56c>
 810e130:	ed9f 6a40 	vldr	s12, [pc, #256]	; 810e234 <__ieee754_powf+0x570>
 810e134:	ee17 3a10 	vmov	r3, s14
 810e138:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810e13c:	f023 030f 	bic.w	r3, r3, #15
 810e140:	ee07 3a10 	vmov	s14, r3
 810e144:	ee77 7a67 	vsub.f32	s15, s14, s15
 810e148:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810e14c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 810e150:	eddf 7a39 	vldr	s15, [pc, #228]	; 810e238 <__ieee754_powf+0x574>
 810e154:	ee67 7a27 	vmul.f32	s15, s14, s15
 810e158:	eee0 7aa6 	vfma.f32	s15, s1, s13
 810e15c:	eef0 6a67 	vmov.f32	s13, s15
 810e160:	eee7 6a06 	vfma.f32	s13, s14, s12
 810e164:	eef0 5a66 	vmov.f32	s11, s13
 810e168:	eee7 5a46 	vfms.f32	s11, s14, s12
 810e16c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 810e170:	ee77 7ae5 	vsub.f32	s15, s15, s11
 810e174:	ed9f 6a31 	vldr	s12, [pc, #196]	; 810e23c <__ieee754_powf+0x578>
 810e178:	eddf 5a31 	vldr	s11, [pc, #196]	; 810e240 <__ieee754_powf+0x57c>
 810e17c:	eea7 6a25 	vfma.f32	s12, s14, s11
 810e180:	eddf 5a30 	vldr	s11, [pc, #192]	; 810e244 <__ieee754_powf+0x580>
 810e184:	eee6 5a07 	vfma.f32	s11, s12, s14
 810e188:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 810e248 <__ieee754_powf+0x584>
 810e18c:	eea5 6a87 	vfma.f32	s12, s11, s14
 810e190:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810e24c <__ieee754_powf+0x588>
 810e194:	eee6 5a07 	vfma.f32	s11, s12, s14
 810e198:	eeb0 6a66 	vmov.f32	s12, s13
 810e19c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 810e1a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 810e1a4:	ee66 5a86 	vmul.f32	s11, s13, s12
 810e1a8:	ee36 6a47 	vsub.f32	s12, s12, s14
 810e1ac:	eee6 7aa7 	vfma.f32	s15, s13, s15
 810e1b0:	ee85 7a86 	vdiv.f32	s14, s11, s12
 810e1b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 810e1b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810e1bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 810e1c0:	ee10 3a10 	vmov	r3, s0
 810e1c4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 810e1c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810e1cc:	da1f      	bge.n	810e20e <__ieee754_powf+0x54a>
 810e1ce:	f000 f977 	bl	810e4c0 <scalbnf>
 810e1d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 810e1d6:	e58d      	b.n	810dcf4 <__ieee754_powf+0x30>
 810e1d8:	4a1d      	ldr	r2, [pc, #116]	; (810e250 <__ieee754_powf+0x58c>)
 810e1da:	4293      	cmp	r3, r2
 810e1dc:	dd07      	ble.n	810e1ee <__ieee754_powf+0x52a>
 810e1de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 810e1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e1e6:	bf4c      	ite	mi
 810e1e8:	2001      	movmi	r0, #1
 810e1ea:	2000      	movpl	r0, #0
 810e1ec:	e622      	b.n	810de34 <__ieee754_powf+0x170>
 810e1ee:	d108      	bne.n	810e202 <__ieee754_powf+0x53e>
 810e1f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 810e1f4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 810e1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e1fc:	f6ff af7a 	blt.w	810e0f4 <__ieee754_powf+0x430>
 810e200:	e7ed      	b.n	810e1de <__ieee754_powf+0x51a>
 810e202:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 810e206:	f73f af75 	bgt.w	810e0f4 <__ieee754_powf+0x430>
 810e20a:	2000      	movs	r0, #0
 810e20c:	e78c      	b.n	810e128 <__ieee754_powf+0x464>
 810e20e:	ee00 3a10 	vmov	s0, r3
 810e212:	e7de      	b.n	810e1d2 <__ieee754_powf+0x50e>
 810e214:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810e218:	e56c      	b.n	810dcf4 <__ieee754_powf+0x30>
 810e21a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 810e254 <__ieee754_powf+0x590>
 810e21e:	e569      	b.n	810dcf4 <__ieee754_powf+0x30>
 810e220:	eeb0 0a48 	vmov.f32	s0, s16
 810e224:	e566      	b.n	810dcf4 <__ieee754_powf+0x30>
 810e226:	2600      	movs	r6, #0
 810e228:	e591      	b.n	810dd4e <__ieee754_powf+0x8a>
 810e22a:	bf00      	nop
 810e22c:	ff800000 	.word	0xff800000
 810e230:	3f317218 	.word	0x3f317218
 810e234:	3f317200 	.word	0x3f317200
 810e238:	35bfbe8c 	.word	0x35bfbe8c
 810e23c:	b5ddea0e 	.word	0xb5ddea0e
 810e240:	3331bb4c 	.word	0x3331bb4c
 810e244:	388ab355 	.word	0x388ab355
 810e248:	bb360b61 	.word	0xbb360b61
 810e24c:	3e2aaaab 	.word	0x3e2aaaab
 810e250:	43160000 	.word	0x43160000
 810e254:	00000000 	.word	0x00000000

0810e258 <__ieee754_rem_pio2f>:
 810e258:	b5f0      	push	{r4, r5, r6, r7, lr}
 810e25a:	ee10 6a10 	vmov	r6, s0
 810e25e:	4b86      	ldr	r3, [pc, #536]	; (810e478 <__ieee754_rem_pio2f+0x220>)
 810e260:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 810e264:	429d      	cmp	r5, r3
 810e266:	b087      	sub	sp, #28
 810e268:	4604      	mov	r4, r0
 810e26a:	dc05      	bgt.n	810e278 <__ieee754_rem_pio2f+0x20>
 810e26c:	2300      	movs	r3, #0
 810e26e:	ed80 0a00 	vstr	s0, [r0]
 810e272:	6043      	str	r3, [r0, #4]
 810e274:	2000      	movs	r0, #0
 810e276:	e020      	b.n	810e2ba <__ieee754_rem_pio2f+0x62>
 810e278:	4b80      	ldr	r3, [pc, #512]	; (810e47c <__ieee754_rem_pio2f+0x224>)
 810e27a:	429d      	cmp	r5, r3
 810e27c:	dc38      	bgt.n	810e2f0 <__ieee754_rem_pio2f+0x98>
 810e27e:	2e00      	cmp	r6, #0
 810e280:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 810e480 <__ieee754_rem_pio2f+0x228>
 810e284:	4b7f      	ldr	r3, [pc, #508]	; (810e484 <__ieee754_rem_pio2f+0x22c>)
 810e286:	f025 050f 	bic.w	r5, r5, #15
 810e28a:	dd18      	ble.n	810e2be <__ieee754_rem_pio2f+0x66>
 810e28c:	429d      	cmp	r5, r3
 810e28e:	ee70 7a47 	vsub.f32	s15, s0, s14
 810e292:	bf09      	itett	eq
 810e294:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 810e488 <__ieee754_rem_pio2f+0x230>
 810e298:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 810e48c <__ieee754_rem_pio2f+0x234>
 810e29c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 810e2a0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 810e490 <__ieee754_rem_pio2f+0x238>
 810e2a4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 810e2a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810e2ac:	edc0 6a00 	vstr	s13, [r0]
 810e2b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810e2b4:	edc0 7a01 	vstr	s15, [r0, #4]
 810e2b8:	2001      	movs	r0, #1
 810e2ba:	b007      	add	sp, #28
 810e2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810e2be:	429d      	cmp	r5, r3
 810e2c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 810e2c4:	bf09      	itett	eq
 810e2c6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 810e488 <__ieee754_rem_pio2f+0x230>
 810e2ca:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 810e48c <__ieee754_rem_pio2f+0x234>
 810e2ce:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 810e2d2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 810e490 <__ieee754_rem_pio2f+0x238>
 810e2d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 810e2da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 810e2de:	edc0 6a00 	vstr	s13, [r0]
 810e2e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 810e2e6:	edc0 7a01 	vstr	s15, [r0, #4]
 810e2ea:	f04f 30ff 	mov.w	r0, #4294967295
 810e2ee:	e7e4      	b.n	810e2ba <__ieee754_rem_pio2f+0x62>
 810e2f0:	4b68      	ldr	r3, [pc, #416]	; (810e494 <__ieee754_rem_pio2f+0x23c>)
 810e2f2:	429d      	cmp	r5, r3
 810e2f4:	dc71      	bgt.n	810e3da <__ieee754_rem_pio2f+0x182>
 810e2f6:	f000 f8db 	bl	810e4b0 <fabsf>
 810e2fa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 810e498 <__ieee754_rem_pio2f+0x240>
 810e2fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810e302:	eee0 7a07 	vfma.f32	s15, s0, s14
 810e306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810e30a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810e30e:	ee17 0a90 	vmov	r0, s15
 810e312:	eddf 7a5b 	vldr	s15, [pc, #364]	; 810e480 <__ieee754_rem_pio2f+0x228>
 810e316:	eea7 0a67 	vfms.f32	s0, s14, s15
 810e31a:	281f      	cmp	r0, #31
 810e31c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 810e48c <__ieee754_rem_pio2f+0x234>
 810e320:	ee67 7a27 	vmul.f32	s15, s14, s15
 810e324:	eeb1 6a47 	vneg.f32	s12, s14
 810e328:	ee70 6a67 	vsub.f32	s13, s0, s15
 810e32c:	ee16 2a90 	vmov	r2, s13
 810e330:	dc1c      	bgt.n	810e36c <__ieee754_rem_pio2f+0x114>
 810e332:	495a      	ldr	r1, [pc, #360]	; (810e49c <__ieee754_rem_pio2f+0x244>)
 810e334:	1e47      	subs	r7, r0, #1
 810e336:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 810e33a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 810e33e:	428b      	cmp	r3, r1
 810e340:	d014      	beq.n	810e36c <__ieee754_rem_pio2f+0x114>
 810e342:	6022      	str	r2, [r4, #0]
 810e344:	ed94 7a00 	vldr	s14, [r4]
 810e348:	ee30 0a47 	vsub.f32	s0, s0, s14
 810e34c:	2e00      	cmp	r6, #0
 810e34e:	ee30 0a67 	vsub.f32	s0, s0, s15
 810e352:	ed84 0a01 	vstr	s0, [r4, #4]
 810e356:	dab0      	bge.n	810e2ba <__ieee754_rem_pio2f+0x62>
 810e358:	eeb1 7a47 	vneg.f32	s14, s14
 810e35c:	eeb1 0a40 	vneg.f32	s0, s0
 810e360:	ed84 7a00 	vstr	s14, [r4]
 810e364:	ed84 0a01 	vstr	s0, [r4, #4]
 810e368:	4240      	negs	r0, r0
 810e36a:	e7a6      	b.n	810e2ba <__ieee754_rem_pio2f+0x62>
 810e36c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 810e370:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 810e374:	2908      	cmp	r1, #8
 810e376:	ea4f 53e5 	mov.w	r3, r5, asr #23
 810e37a:	dde2      	ble.n	810e342 <__ieee754_rem_pio2f+0xea>
 810e37c:	eddf 5a42 	vldr	s11, [pc, #264]	; 810e488 <__ieee754_rem_pio2f+0x230>
 810e380:	eef0 6a40 	vmov.f32	s13, s0
 810e384:	eee6 6a25 	vfma.f32	s13, s12, s11
 810e388:	ee70 7a66 	vsub.f32	s15, s0, s13
 810e38c:	eee6 7a25 	vfma.f32	s15, s12, s11
 810e390:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810e490 <__ieee754_rem_pio2f+0x238>
 810e394:	eed7 7a25 	vfnms.f32	s15, s14, s11
 810e398:	ee76 5ae7 	vsub.f32	s11, s13, s15
 810e39c:	ee15 2a90 	vmov	r2, s11
 810e3a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 810e3a4:	1a5b      	subs	r3, r3, r1
 810e3a6:	2b19      	cmp	r3, #25
 810e3a8:	dc04      	bgt.n	810e3b4 <__ieee754_rem_pio2f+0x15c>
 810e3aa:	edc4 5a00 	vstr	s11, [r4]
 810e3ae:	eeb0 0a66 	vmov.f32	s0, s13
 810e3b2:	e7c7      	b.n	810e344 <__ieee754_rem_pio2f+0xec>
 810e3b4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 810e4a0 <__ieee754_rem_pio2f+0x248>
 810e3b8:	eeb0 0a66 	vmov.f32	s0, s13
 810e3bc:	eea6 0a25 	vfma.f32	s0, s12, s11
 810e3c0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 810e3c4:	eddf 6a37 	vldr	s13, [pc, #220]	; 810e4a4 <__ieee754_rem_pio2f+0x24c>
 810e3c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 810e3cc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 810e3d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 810e3d4:	ed84 7a00 	vstr	s14, [r4]
 810e3d8:	e7b4      	b.n	810e344 <__ieee754_rem_pio2f+0xec>
 810e3da:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 810e3de:	db06      	blt.n	810e3ee <__ieee754_rem_pio2f+0x196>
 810e3e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 810e3e4:	edc0 7a01 	vstr	s15, [r0, #4]
 810e3e8:	edc0 7a00 	vstr	s15, [r0]
 810e3ec:	e742      	b.n	810e274 <__ieee754_rem_pio2f+0x1c>
 810e3ee:	15ea      	asrs	r2, r5, #23
 810e3f0:	3a86      	subs	r2, #134	; 0x86
 810e3f2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 810e3f6:	ee07 3a90 	vmov	s15, r3
 810e3fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 810e3fe:	eddf 6a2a 	vldr	s13, [pc, #168]	; 810e4a8 <__ieee754_rem_pio2f+0x250>
 810e402:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810e406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810e40a:	ed8d 7a03 	vstr	s14, [sp, #12]
 810e40e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810e412:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 810e416:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810e41a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810e41e:	ed8d 7a04 	vstr	s14, [sp, #16]
 810e422:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810e426:	eef5 7a40 	vcmp.f32	s15, #0.0
 810e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e42e:	edcd 7a05 	vstr	s15, [sp, #20]
 810e432:	d11e      	bne.n	810e472 <__ieee754_rem_pio2f+0x21a>
 810e434:	eeb5 7a40 	vcmp.f32	s14, #0.0
 810e438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e43c:	bf14      	ite	ne
 810e43e:	2302      	movne	r3, #2
 810e440:	2301      	moveq	r3, #1
 810e442:	491a      	ldr	r1, [pc, #104]	; (810e4ac <__ieee754_rem_pio2f+0x254>)
 810e444:	9101      	str	r1, [sp, #4]
 810e446:	2102      	movs	r1, #2
 810e448:	9100      	str	r1, [sp, #0]
 810e44a:	a803      	add	r0, sp, #12
 810e44c:	4621      	mov	r1, r4
 810e44e:	f000 f8bf 	bl	810e5d0 <__kernel_rem_pio2f>
 810e452:	2e00      	cmp	r6, #0
 810e454:	f6bf af31 	bge.w	810e2ba <__ieee754_rem_pio2f+0x62>
 810e458:	edd4 7a00 	vldr	s15, [r4]
 810e45c:	eef1 7a67 	vneg.f32	s15, s15
 810e460:	edc4 7a00 	vstr	s15, [r4]
 810e464:	edd4 7a01 	vldr	s15, [r4, #4]
 810e468:	eef1 7a67 	vneg.f32	s15, s15
 810e46c:	edc4 7a01 	vstr	s15, [r4, #4]
 810e470:	e77a      	b.n	810e368 <__ieee754_rem_pio2f+0x110>
 810e472:	2303      	movs	r3, #3
 810e474:	e7e5      	b.n	810e442 <__ieee754_rem_pio2f+0x1ea>
 810e476:	bf00      	nop
 810e478:	3f490fd8 	.word	0x3f490fd8
 810e47c:	4016cbe3 	.word	0x4016cbe3
 810e480:	3fc90f80 	.word	0x3fc90f80
 810e484:	3fc90fd0 	.word	0x3fc90fd0
 810e488:	37354400 	.word	0x37354400
 810e48c:	37354443 	.word	0x37354443
 810e490:	2e85a308 	.word	0x2e85a308
 810e494:	43490f80 	.word	0x43490f80
 810e498:	3f22f984 	.word	0x3f22f984
 810e49c:	08122d60 	.word	0x08122d60
 810e4a0:	2e85a300 	.word	0x2e85a300
 810e4a4:	248d3132 	.word	0x248d3132
 810e4a8:	43800000 	.word	0x43800000
 810e4ac:	08122de0 	.word	0x08122de0

0810e4b0 <fabsf>:
 810e4b0:	ee10 3a10 	vmov	r3, s0
 810e4b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810e4b8:	ee00 3a10 	vmov	s0, r3
 810e4bc:	4770      	bx	lr
	...

0810e4c0 <scalbnf>:
 810e4c0:	ee10 3a10 	vmov	r3, s0
 810e4c4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 810e4c8:	d02b      	beq.n	810e522 <scalbnf+0x62>
 810e4ca:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 810e4ce:	d302      	bcc.n	810e4d6 <scalbnf+0x16>
 810e4d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 810e4d4:	4770      	bx	lr
 810e4d6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 810e4da:	d123      	bne.n	810e524 <scalbnf+0x64>
 810e4dc:	4b24      	ldr	r3, [pc, #144]	; (810e570 <scalbnf+0xb0>)
 810e4de:	eddf 7a25 	vldr	s15, [pc, #148]	; 810e574 <scalbnf+0xb4>
 810e4e2:	4298      	cmp	r0, r3
 810e4e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 810e4e8:	db17      	blt.n	810e51a <scalbnf+0x5a>
 810e4ea:	ee10 3a10 	vmov	r3, s0
 810e4ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810e4f2:	3a19      	subs	r2, #25
 810e4f4:	f24c 3150 	movw	r1, #50000	; 0xc350
 810e4f8:	4288      	cmp	r0, r1
 810e4fa:	dd15      	ble.n	810e528 <scalbnf+0x68>
 810e4fc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 810e578 <scalbnf+0xb8>
 810e500:	eddf 6a1e 	vldr	s13, [pc, #120]	; 810e57c <scalbnf+0xbc>
 810e504:	ee10 3a10 	vmov	r3, s0
 810e508:	eeb0 7a67 	vmov.f32	s14, s15
 810e50c:	2b00      	cmp	r3, #0
 810e50e:	bfb8      	it	lt
 810e510:	eef0 7a66 	vmovlt.f32	s15, s13
 810e514:	ee27 0a87 	vmul.f32	s0, s15, s14
 810e518:	4770      	bx	lr
 810e51a:	eddf 7a19 	vldr	s15, [pc, #100]	; 810e580 <scalbnf+0xc0>
 810e51e:	ee27 0a80 	vmul.f32	s0, s15, s0
 810e522:	4770      	bx	lr
 810e524:	0dd2      	lsrs	r2, r2, #23
 810e526:	e7e5      	b.n	810e4f4 <scalbnf+0x34>
 810e528:	4410      	add	r0, r2
 810e52a:	28fe      	cmp	r0, #254	; 0xfe
 810e52c:	dce6      	bgt.n	810e4fc <scalbnf+0x3c>
 810e52e:	2800      	cmp	r0, #0
 810e530:	dd06      	ble.n	810e540 <scalbnf+0x80>
 810e532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e536:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810e53a:	ee00 3a10 	vmov	s0, r3
 810e53e:	4770      	bx	lr
 810e540:	f110 0f16 	cmn.w	r0, #22
 810e544:	da09      	bge.n	810e55a <scalbnf+0x9a>
 810e546:	eddf 7a0e 	vldr	s15, [pc, #56]	; 810e580 <scalbnf+0xc0>
 810e54a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 810e584 <scalbnf+0xc4>
 810e54e:	ee10 3a10 	vmov	r3, s0
 810e552:	eeb0 7a67 	vmov.f32	s14, s15
 810e556:	2b00      	cmp	r3, #0
 810e558:	e7d9      	b.n	810e50e <scalbnf+0x4e>
 810e55a:	3019      	adds	r0, #25
 810e55c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e560:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 810e564:	ed9f 0a08 	vldr	s0, [pc, #32]	; 810e588 <scalbnf+0xc8>
 810e568:	ee07 3a90 	vmov	s15, r3
 810e56c:	e7d7      	b.n	810e51e <scalbnf+0x5e>
 810e56e:	bf00      	nop
 810e570:	ffff3cb0 	.word	0xffff3cb0
 810e574:	4c000000 	.word	0x4c000000
 810e578:	7149f2ca 	.word	0x7149f2ca
 810e57c:	f149f2ca 	.word	0xf149f2ca
 810e580:	0da24260 	.word	0x0da24260
 810e584:	8da24260 	.word	0x8da24260
 810e588:	33000000 	.word	0x33000000

0810e58c <with_errnof>:
 810e58c:	b513      	push	{r0, r1, r4, lr}
 810e58e:	4604      	mov	r4, r0
 810e590:	ed8d 0a01 	vstr	s0, [sp, #4]
 810e594:	f7fb fcc2 	bl	8109f1c <__errno>
 810e598:	ed9d 0a01 	vldr	s0, [sp, #4]
 810e59c:	6004      	str	r4, [r0, #0]
 810e59e:	b002      	add	sp, #8
 810e5a0:	bd10      	pop	{r4, pc}

0810e5a2 <xflowf>:
 810e5a2:	b130      	cbz	r0, 810e5b2 <xflowf+0x10>
 810e5a4:	eef1 7a40 	vneg.f32	s15, s0
 810e5a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 810e5ac:	2022      	movs	r0, #34	; 0x22
 810e5ae:	f7ff bfed 	b.w	810e58c <with_errnof>
 810e5b2:	eef0 7a40 	vmov.f32	s15, s0
 810e5b6:	e7f7      	b.n	810e5a8 <xflowf+0x6>

0810e5b8 <__math_uflowf>:
 810e5b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810e5c0 <__math_uflowf+0x8>
 810e5bc:	f7ff bff1 	b.w	810e5a2 <xflowf>
 810e5c0:	10000000 	.word	0x10000000

0810e5c4 <__math_oflowf>:
 810e5c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810e5cc <__math_oflowf+0x8>
 810e5c8:	f7ff bfeb 	b.w	810e5a2 <xflowf>
 810e5cc:	70000000 	.word	0x70000000

0810e5d0 <__kernel_rem_pio2f>:
 810e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e5d4:	ed2d 8b04 	vpush	{d8-d9}
 810e5d8:	b0d9      	sub	sp, #356	; 0x164
 810e5da:	4688      	mov	r8, r1
 810e5dc:	9002      	str	r0, [sp, #8]
 810e5de:	49b8      	ldr	r1, [pc, #736]	; (810e8c0 <__kernel_rem_pio2f+0x2f0>)
 810e5e0:	9866      	ldr	r0, [sp, #408]	; 0x198
 810e5e2:	9301      	str	r3, [sp, #4]
 810e5e4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 810e5e8:	9901      	ldr	r1, [sp, #4]
 810e5ea:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 810e5ec:	f101 3bff 	add.w	fp, r1, #4294967295
 810e5f0:	1d11      	adds	r1, r2, #4
 810e5f2:	db25      	blt.n	810e640 <__kernel_rem_pio2f+0x70>
 810e5f4:	1ed0      	subs	r0, r2, #3
 810e5f6:	bf48      	it	mi
 810e5f8:	1d10      	addmi	r0, r2, #4
 810e5fa:	10c0      	asrs	r0, r0, #3
 810e5fc:	1c45      	adds	r5, r0, #1
 810e5fe:	00e9      	lsls	r1, r5, #3
 810e600:	eba0 070b 	sub.w	r7, r0, fp
 810e604:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 810e8d0 <__kernel_rem_pio2f+0x300>
 810e608:	9103      	str	r1, [sp, #12]
 810e60a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 810e60e:	eb0a 0c0b 	add.w	ip, sl, fp
 810e612:	ae1c      	add	r6, sp, #112	; 0x70
 810e614:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 810e618:	2400      	movs	r4, #0
 810e61a:	4564      	cmp	r4, ip
 810e61c:	dd12      	ble.n	810e644 <__kernel_rem_pio2f+0x74>
 810e61e:	9901      	ldr	r1, [sp, #4]
 810e620:	ac1c      	add	r4, sp, #112	; 0x70
 810e622:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 810e626:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 810e62a:	f04f 0c00 	mov.w	ip, #0
 810e62e:	45d4      	cmp	ip, sl
 810e630:	dc27      	bgt.n	810e682 <__kernel_rem_pio2f+0xb2>
 810e632:	f8dd e008 	ldr.w	lr, [sp, #8]
 810e636:	eddf 7aa6 	vldr	s15, [pc, #664]	; 810e8d0 <__kernel_rem_pio2f+0x300>
 810e63a:	4627      	mov	r7, r4
 810e63c:	2600      	movs	r6, #0
 810e63e:	e016      	b.n	810e66e <__kernel_rem_pio2f+0x9e>
 810e640:	2000      	movs	r0, #0
 810e642:	e7db      	b.n	810e5fc <__kernel_rem_pio2f+0x2c>
 810e644:	42e7      	cmn	r7, r4
 810e646:	bf5d      	ittte	pl
 810e648:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 810e64c:	ee07 1a90 	vmovpl	s15, r1
 810e650:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 810e654:	eef0 7a47 	vmovmi.f32	s15, s14
 810e658:	ece6 7a01 	vstmia	r6!, {s15}
 810e65c:	3401      	adds	r4, #1
 810e65e:	e7dc      	b.n	810e61a <__kernel_rem_pio2f+0x4a>
 810e660:	ecfe 6a01 	vldmia	lr!, {s13}
 810e664:	ed97 7a00 	vldr	s14, [r7]
 810e668:	eee6 7a87 	vfma.f32	s15, s13, s14
 810e66c:	3601      	adds	r6, #1
 810e66e:	455e      	cmp	r6, fp
 810e670:	f1a7 0704 	sub.w	r7, r7, #4
 810e674:	ddf4      	ble.n	810e660 <__kernel_rem_pio2f+0x90>
 810e676:	ece9 7a01 	vstmia	r9!, {s15}
 810e67a:	f10c 0c01 	add.w	ip, ip, #1
 810e67e:	3404      	adds	r4, #4
 810e680:	e7d5      	b.n	810e62e <__kernel_rem_pio2f+0x5e>
 810e682:	a908      	add	r1, sp, #32
 810e684:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810e688:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 810e68c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 810e8cc <__kernel_rem_pio2f+0x2fc>
 810e690:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 810e8c8 <__kernel_rem_pio2f+0x2f8>
 810e694:	9105      	str	r1, [sp, #20]
 810e696:	9304      	str	r3, [sp, #16]
 810e698:	4656      	mov	r6, sl
 810e69a:	00b3      	lsls	r3, r6, #2
 810e69c:	9306      	str	r3, [sp, #24]
 810e69e:	ab58      	add	r3, sp, #352	; 0x160
 810e6a0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 810e6a4:	ac08      	add	r4, sp, #32
 810e6a6:	ab44      	add	r3, sp, #272	; 0x110
 810e6a8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 810e6ac:	46a4      	mov	ip, r4
 810e6ae:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 810e6b2:	4637      	mov	r7, r6
 810e6b4:	2f00      	cmp	r7, #0
 810e6b6:	f1a0 0004 	sub.w	r0, r0, #4
 810e6ba:	dc4a      	bgt.n	810e752 <__kernel_rem_pio2f+0x182>
 810e6bc:	4628      	mov	r0, r5
 810e6be:	9207      	str	r2, [sp, #28]
 810e6c0:	f7ff fefe 	bl	810e4c0 <scalbnf>
 810e6c4:	eeb0 8a40 	vmov.f32	s16, s0
 810e6c8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 810e6cc:	ee28 0a00 	vmul.f32	s0, s16, s0
 810e6d0:	f000 f9f0 	bl	810eab4 <floorf>
 810e6d4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 810e6d8:	eea0 8a67 	vfms.f32	s16, s0, s15
 810e6dc:	2d00      	cmp	r5, #0
 810e6de:	9a07      	ldr	r2, [sp, #28]
 810e6e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 810e6e4:	ee17 9a90 	vmov	r9, s15
 810e6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810e6ec:	ee38 8a67 	vsub.f32	s16, s16, s15
 810e6f0:	dd41      	ble.n	810e776 <__kernel_rem_pio2f+0x1a6>
 810e6f2:	f106 3cff 	add.w	ip, r6, #4294967295
 810e6f6:	ab08      	add	r3, sp, #32
 810e6f8:	f1c5 0e08 	rsb	lr, r5, #8
 810e6fc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 810e700:	fa47 f00e 	asr.w	r0, r7, lr
 810e704:	4481      	add	r9, r0
 810e706:	fa00 f00e 	lsl.w	r0, r0, lr
 810e70a:	1a3f      	subs	r7, r7, r0
 810e70c:	f1c5 0007 	rsb	r0, r5, #7
 810e710:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 810e714:	4107      	asrs	r7, r0
 810e716:	2f00      	cmp	r7, #0
 810e718:	dd3c      	ble.n	810e794 <__kernel_rem_pio2f+0x1c4>
 810e71a:	f04f 0e00 	mov.w	lr, #0
 810e71e:	f109 0901 	add.w	r9, r9, #1
 810e722:	4671      	mov	r1, lr
 810e724:	4576      	cmp	r6, lr
 810e726:	dc67      	bgt.n	810e7f8 <__kernel_rem_pio2f+0x228>
 810e728:	2d00      	cmp	r5, #0
 810e72a:	dd03      	ble.n	810e734 <__kernel_rem_pio2f+0x164>
 810e72c:	2d01      	cmp	r5, #1
 810e72e:	d074      	beq.n	810e81a <__kernel_rem_pio2f+0x24a>
 810e730:	2d02      	cmp	r5, #2
 810e732:	d07b      	beq.n	810e82c <__kernel_rem_pio2f+0x25c>
 810e734:	2f02      	cmp	r7, #2
 810e736:	d12d      	bne.n	810e794 <__kernel_rem_pio2f+0x1c4>
 810e738:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810e73c:	ee30 8a48 	vsub.f32	s16, s0, s16
 810e740:	b341      	cbz	r1, 810e794 <__kernel_rem_pio2f+0x1c4>
 810e742:	4628      	mov	r0, r5
 810e744:	9207      	str	r2, [sp, #28]
 810e746:	f7ff febb 	bl	810e4c0 <scalbnf>
 810e74a:	9a07      	ldr	r2, [sp, #28]
 810e74c:	ee38 8a40 	vsub.f32	s16, s16, s0
 810e750:	e020      	b.n	810e794 <__kernel_rem_pio2f+0x1c4>
 810e752:	ee60 7a28 	vmul.f32	s15, s0, s17
 810e756:	3f01      	subs	r7, #1
 810e758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810e75c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810e760:	eea7 0ac9 	vfms.f32	s0, s15, s18
 810e764:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 810e768:	ecac 0a01 	vstmia	ip!, {s0}
 810e76c:	ed90 0a00 	vldr	s0, [r0]
 810e770:	ee37 0a80 	vadd.f32	s0, s15, s0
 810e774:	e79e      	b.n	810e6b4 <__kernel_rem_pio2f+0xe4>
 810e776:	d105      	bne.n	810e784 <__kernel_rem_pio2f+0x1b4>
 810e778:	1e70      	subs	r0, r6, #1
 810e77a:	ab08      	add	r3, sp, #32
 810e77c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 810e780:	11ff      	asrs	r7, r7, #7
 810e782:	e7c8      	b.n	810e716 <__kernel_rem_pio2f+0x146>
 810e784:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 810e788:	eeb4 8ae7 	vcmpe.f32	s16, s15
 810e78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e790:	da30      	bge.n	810e7f4 <__kernel_rem_pio2f+0x224>
 810e792:	2700      	movs	r7, #0
 810e794:	eeb5 8a40 	vcmp.f32	s16, #0.0
 810e798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e79c:	f040 809a 	bne.w	810e8d4 <__kernel_rem_pio2f+0x304>
 810e7a0:	1e74      	subs	r4, r6, #1
 810e7a2:	46a4      	mov	ip, r4
 810e7a4:	2100      	movs	r1, #0
 810e7a6:	45d4      	cmp	ip, sl
 810e7a8:	da47      	bge.n	810e83a <__kernel_rem_pio2f+0x26a>
 810e7aa:	2900      	cmp	r1, #0
 810e7ac:	d063      	beq.n	810e876 <__kernel_rem_pio2f+0x2a6>
 810e7ae:	ab08      	add	r3, sp, #32
 810e7b0:	3d08      	subs	r5, #8
 810e7b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 810e7b6:	2b00      	cmp	r3, #0
 810e7b8:	d07f      	beq.n	810e8ba <__kernel_rem_pio2f+0x2ea>
 810e7ba:	4628      	mov	r0, r5
 810e7bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 810e7c0:	f7ff fe7e 	bl	810e4c0 <scalbnf>
 810e7c4:	1c63      	adds	r3, r4, #1
 810e7c6:	aa44      	add	r2, sp, #272	; 0x110
 810e7c8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 810e8cc <__kernel_rem_pio2f+0x2fc>
 810e7cc:	0099      	lsls	r1, r3, #2
 810e7ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 810e7d2:	4623      	mov	r3, r4
 810e7d4:	2b00      	cmp	r3, #0
 810e7d6:	f280 80ad 	bge.w	810e934 <__kernel_rem_pio2f+0x364>
 810e7da:	4623      	mov	r3, r4
 810e7dc:	2b00      	cmp	r3, #0
 810e7de:	f2c0 80cb 	blt.w	810e978 <__kernel_rem_pio2f+0x3a8>
 810e7e2:	aa44      	add	r2, sp, #272	; 0x110
 810e7e4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 810e7e8:	4e36      	ldr	r6, [pc, #216]	; (810e8c4 <__kernel_rem_pio2f+0x2f4>)
 810e7ea:	eddf 7a39 	vldr	s15, [pc, #228]	; 810e8d0 <__kernel_rem_pio2f+0x300>
 810e7ee:	2000      	movs	r0, #0
 810e7f0:	1ae2      	subs	r2, r4, r3
 810e7f2:	e0b6      	b.n	810e962 <__kernel_rem_pio2f+0x392>
 810e7f4:	2702      	movs	r7, #2
 810e7f6:	e790      	b.n	810e71a <__kernel_rem_pio2f+0x14a>
 810e7f8:	6820      	ldr	r0, [r4, #0]
 810e7fa:	b949      	cbnz	r1, 810e810 <__kernel_rem_pio2f+0x240>
 810e7fc:	b118      	cbz	r0, 810e806 <__kernel_rem_pio2f+0x236>
 810e7fe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 810e802:	6020      	str	r0, [r4, #0]
 810e804:	2001      	movs	r0, #1
 810e806:	f10e 0e01 	add.w	lr, lr, #1
 810e80a:	3404      	adds	r4, #4
 810e80c:	4601      	mov	r1, r0
 810e80e:	e789      	b.n	810e724 <__kernel_rem_pio2f+0x154>
 810e810:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 810e814:	6020      	str	r0, [r4, #0]
 810e816:	4608      	mov	r0, r1
 810e818:	e7f5      	b.n	810e806 <__kernel_rem_pio2f+0x236>
 810e81a:	1e74      	subs	r4, r6, #1
 810e81c:	ab08      	add	r3, sp, #32
 810e81e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 810e822:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 810e826:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 810e82a:	e783      	b.n	810e734 <__kernel_rem_pio2f+0x164>
 810e82c:	1e74      	subs	r4, r6, #1
 810e82e:	ab08      	add	r3, sp, #32
 810e830:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 810e834:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 810e838:	e7f5      	b.n	810e826 <__kernel_rem_pio2f+0x256>
 810e83a:	ab08      	add	r3, sp, #32
 810e83c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 810e840:	f10c 3cff 	add.w	ip, ip, #4294967295
 810e844:	4301      	orrs	r1, r0
 810e846:	e7ae      	b.n	810e7a6 <__kernel_rem_pio2f+0x1d6>
 810e848:	3001      	adds	r0, #1
 810e84a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 810e84e:	2f00      	cmp	r7, #0
 810e850:	d0fa      	beq.n	810e848 <__kernel_rem_pio2f+0x278>
 810e852:	9b06      	ldr	r3, [sp, #24]
 810e854:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 810e858:	eb0d 0403 	add.w	r4, sp, r3
 810e85c:	9b01      	ldr	r3, [sp, #4]
 810e85e:	18f7      	adds	r7, r6, r3
 810e860:	ab1c      	add	r3, sp, #112	; 0x70
 810e862:	f106 0c01 	add.w	ip, r6, #1
 810e866:	3c4c      	subs	r4, #76	; 0x4c
 810e868:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810e86c:	4430      	add	r0, r6
 810e86e:	4560      	cmp	r0, ip
 810e870:	da04      	bge.n	810e87c <__kernel_rem_pio2f+0x2ac>
 810e872:	4606      	mov	r6, r0
 810e874:	e711      	b.n	810e69a <__kernel_rem_pio2f+0xca>
 810e876:	9c05      	ldr	r4, [sp, #20]
 810e878:	2001      	movs	r0, #1
 810e87a:	e7e6      	b.n	810e84a <__kernel_rem_pio2f+0x27a>
 810e87c:	9b04      	ldr	r3, [sp, #16]
 810e87e:	f8dd e008 	ldr.w	lr, [sp, #8]
 810e882:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 810e886:	9306      	str	r3, [sp, #24]
 810e888:	ee07 3a90 	vmov	s15, r3
 810e88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810e890:	2600      	movs	r6, #0
 810e892:	ece7 7a01 	vstmia	r7!, {s15}
 810e896:	eddf 7a0e 	vldr	s15, [pc, #56]	; 810e8d0 <__kernel_rem_pio2f+0x300>
 810e89a:	46b9      	mov	r9, r7
 810e89c:	455e      	cmp	r6, fp
 810e89e:	dd04      	ble.n	810e8aa <__kernel_rem_pio2f+0x2da>
 810e8a0:	ece4 7a01 	vstmia	r4!, {s15}
 810e8a4:	f10c 0c01 	add.w	ip, ip, #1
 810e8a8:	e7e1      	b.n	810e86e <__kernel_rem_pio2f+0x29e>
 810e8aa:	ecfe 6a01 	vldmia	lr!, {s13}
 810e8ae:	ed39 7a01 	vldmdb	r9!, {s14}
 810e8b2:	3601      	adds	r6, #1
 810e8b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 810e8b8:	e7f0      	b.n	810e89c <__kernel_rem_pio2f+0x2cc>
 810e8ba:	3c01      	subs	r4, #1
 810e8bc:	e777      	b.n	810e7ae <__kernel_rem_pio2f+0x1de>
 810e8be:	bf00      	nop
 810e8c0:	08123124 	.word	0x08123124
 810e8c4:	081230f8 	.word	0x081230f8
 810e8c8:	43800000 	.word	0x43800000
 810e8cc:	3b800000 	.word	0x3b800000
 810e8d0:	00000000 	.word	0x00000000
 810e8d4:	9b03      	ldr	r3, [sp, #12]
 810e8d6:	eeb0 0a48 	vmov.f32	s0, s16
 810e8da:	1a98      	subs	r0, r3, r2
 810e8dc:	f7ff fdf0 	bl	810e4c0 <scalbnf>
 810e8e0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 810e8c8 <__kernel_rem_pio2f+0x2f8>
 810e8e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 810e8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810e8ec:	db19      	blt.n	810e922 <__kernel_rem_pio2f+0x352>
 810e8ee:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 810e8cc <__kernel_rem_pio2f+0x2fc>
 810e8f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 810e8f6:	aa08      	add	r2, sp, #32
 810e8f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810e8fc:	1c74      	adds	r4, r6, #1
 810e8fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810e902:	3508      	adds	r5, #8
 810e904:	eea7 0ac7 	vfms.f32	s0, s15, s14
 810e908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810e90c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 810e910:	ee10 3a10 	vmov	r3, s0
 810e914:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 810e918:	ee17 3a90 	vmov	r3, s15
 810e91c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 810e920:	e74b      	b.n	810e7ba <__kernel_rem_pio2f+0x1ea>
 810e922:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 810e926:	aa08      	add	r2, sp, #32
 810e928:	ee10 3a10 	vmov	r3, s0
 810e92c:	4634      	mov	r4, r6
 810e92e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 810e932:	e742      	b.n	810e7ba <__kernel_rem_pio2f+0x1ea>
 810e934:	a808      	add	r0, sp, #32
 810e936:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 810e93a:	9001      	str	r0, [sp, #4]
 810e93c:	ee07 0a90 	vmov	s15, r0
 810e940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810e944:	3b01      	subs	r3, #1
 810e946:	ee67 7a80 	vmul.f32	s15, s15, s0
 810e94a:	ee20 0a07 	vmul.f32	s0, s0, s14
 810e94e:	ed62 7a01 	vstmdb	r2!, {s15}
 810e952:	e73f      	b.n	810e7d4 <__kernel_rem_pio2f+0x204>
 810e954:	ecf6 6a01 	vldmia	r6!, {s13}
 810e958:	ecb5 7a01 	vldmia	r5!, {s14}
 810e95c:	eee6 7a87 	vfma.f32	s15, s13, s14
 810e960:	3001      	adds	r0, #1
 810e962:	4550      	cmp	r0, sl
 810e964:	dc01      	bgt.n	810e96a <__kernel_rem_pio2f+0x39a>
 810e966:	4290      	cmp	r0, r2
 810e968:	ddf4      	ble.n	810e954 <__kernel_rem_pio2f+0x384>
 810e96a:	a858      	add	r0, sp, #352	; 0x160
 810e96c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 810e970:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 810e974:	3b01      	subs	r3, #1
 810e976:	e731      	b.n	810e7dc <__kernel_rem_pio2f+0x20c>
 810e978:	9b66      	ldr	r3, [sp, #408]	; 0x198
 810e97a:	2b02      	cmp	r3, #2
 810e97c:	dc09      	bgt.n	810e992 <__kernel_rem_pio2f+0x3c2>
 810e97e:	2b00      	cmp	r3, #0
 810e980:	dc2b      	bgt.n	810e9da <__kernel_rem_pio2f+0x40a>
 810e982:	d044      	beq.n	810ea0e <__kernel_rem_pio2f+0x43e>
 810e984:	f009 0007 	and.w	r0, r9, #7
 810e988:	b059      	add	sp, #356	; 0x164
 810e98a:	ecbd 8b04 	vpop	{d8-d9}
 810e98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e992:	9b66      	ldr	r3, [sp, #408]	; 0x198
 810e994:	2b03      	cmp	r3, #3
 810e996:	d1f5      	bne.n	810e984 <__kernel_rem_pio2f+0x3b4>
 810e998:	aa30      	add	r2, sp, #192	; 0xc0
 810e99a:	1f0b      	subs	r3, r1, #4
 810e99c:	4413      	add	r3, r2
 810e99e:	461a      	mov	r2, r3
 810e9a0:	4620      	mov	r0, r4
 810e9a2:	2800      	cmp	r0, #0
 810e9a4:	f1a2 0204 	sub.w	r2, r2, #4
 810e9a8:	dc52      	bgt.n	810ea50 <__kernel_rem_pio2f+0x480>
 810e9aa:	4622      	mov	r2, r4
 810e9ac:	2a01      	cmp	r2, #1
 810e9ae:	f1a3 0304 	sub.w	r3, r3, #4
 810e9b2:	dc5d      	bgt.n	810ea70 <__kernel_rem_pio2f+0x4a0>
 810e9b4:	ab30      	add	r3, sp, #192	; 0xc0
 810e9b6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 810e8d0 <__kernel_rem_pio2f+0x300>
 810e9ba:	440b      	add	r3, r1
 810e9bc:	2c01      	cmp	r4, #1
 810e9be:	dc67      	bgt.n	810ea90 <__kernel_rem_pio2f+0x4c0>
 810e9c0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 810e9c4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 810e9c8:	2f00      	cmp	r7, #0
 810e9ca:	d167      	bne.n	810ea9c <__kernel_rem_pio2f+0x4cc>
 810e9cc:	edc8 6a00 	vstr	s13, [r8]
 810e9d0:	ed88 7a01 	vstr	s14, [r8, #4]
 810e9d4:	edc8 7a02 	vstr	s15, [r8, #8]
 810e9d8:	e7d4      	b.n	810e984 <__kernel_rem_pio2f+0x3b4>
 810e9da:	ab30      	add	r3, sp, #192	; 0xc0
 810e9dc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 810e8d0 <__kernel_rem_pio2f+0x300>
 810e9e0:	440b      	add	r3, r1
 810e9e2:	4622      	mov	r2, r4
 810e9e4:	2a00      	cmp	r2, #0
 810e9e6:	da24      	bge.n	810ea32 <__kernel_rem_pio2f+0x462>
 810e9e8:	b34f      	cbz	r7, 810ea3e <__kernel_rem_pio2f+0x46e>
 810e9ea:	eef1 7a47 	vneg.f32	s15, s14
 810e9ee:	edc8 7a00 	vstr	s15, [r8]
 810e9f2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 810e9f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810e9fa:	aa31      	add	r2, sp, #196	; 0xc4
 810e9fc:	2301      	movs	r3, #1
 810e9fe:	429c      	cmp	r4, r3
 810ea00:	da20      	bge.n	810ea44 <__kernel_rem_pio2f+0x474>
 810ea02:	b10f      	cbz	r7, 810ea08 <__kernel_rem_pio2f+0x438>
 810ea04:	eef1 7a67 	vneg.f32	s15, s15
 810ea08:	edc8 7a01 	vstr	s15, [r8, #4]
 810ea0c:	e7ba      	b.n	810e984 <__kernel_rem_pio2f+0x3b4>
 810ea0e:	ab30      	add	r3, sp, #192	; 0xc0
 810ea10:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 810e8d0 <__kernel_rem_pio2f+0x300>
 810ea14:	440b      	add	r3, r1
 810ea16:	2c00      	cmp	r4, #0
 810ea18:	da05      	bge.n	810ea26 <__kernel_rem_pio2f+0x456>
 810ea1a:	b10f      	cbz	r7, 810ea20 <__kernel_rem_pio2f+0x450>
 810ea1c:	eef1 7a67 	vneg.f32	s15, s15
 810ea20:	edc8 7a00 	vstr	s15, [r8]
 810ea24:	e7ae      	b.n	810e984 <__kernel_rem_pio2f+0x3b4>
 810ea26:	ed33 7a01 	vldmdb	r3!, {s14}
 810ea2a:	3c01      	subs	r4, #1
 810ea2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ea30:	e7f1      	b.n	810ea16 <__kernel_rem_pio2f+0x446>
 810ea32:	ed73 7a01 	vldmdb	r3!, {s15}
 810ea36:	3a01      	subs	r2, #1
 810ea38:	ee37 7a27 	vadd.f32	s14, s14, s15
 810ea3c:	e7d2      	b.n	810e9e4 <__kernel_rem_pio2f+0x414>
 810ea3e:	eef0 7a47 	vmov.f32	s15, s14
 810ea42:	e7d4      	b.n	810e9ee <__kernel_rem_pio2f+0x41e>
 810ea44:	ecb2 7a01 	vldmia	r2!, {s14}
 810ea48:	3301      	adds	r3, #1
 810ea4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ea4e:	e7d6      	b.n	810e9fe <__kernel_rem_pio2f+0x42e>
 810ea50:	edd2 7a00 	vldr	s15, [r2]
 810ea54:	edd2 6a01 	vldr	s13, [r2, #4]
 810ea58:	ee37 7aa6 	vadd.f32	s14, s15, s13
 810ea5c:	3801      	subs	r0, #1
 810ea5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ea62:	ed82 7a00 	vstr	s14, [r2]
 810ea66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ea6a:	edc2 7a01 	vstr	s15, [r2, #4]
 810ea6e:	e798      	b.n	810e9a2 <__kernel_rem_pio2f+0x3d2>
 810ea70:	edd3 7a00 	vldr	s15, [r3]
 810ea74:	edd3 6a01 	vldr	s13, [r3, #4]
 810ea78:	ee37 7aa6 	vadd.f32	s14, s15, s13
 810ea7c:	3a01      	subs	r2, #1
 810ea7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 810ea82:	ed83 7a00 	vstr	s14, [r3]
 810ea86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ea8a:	edc3 7a01 	vstr	s15, [r3, #4]
 810ea8e:	e78d      	b.n	810e9ac <__kernel_rem_pio2f+0x3dc>
 810ea90:	ed33 7a01 	vldmdb	r3!, {s14}
 810ea94:	3c01      	subs	r4, #1
 810ea96:	ee77 7a87 	vadd.f32	s15, s15, s14
 810ea9a:	e78f      	b.n	810e9bc <__kernel_rem_pio2f+0x3ec>
 810ea9c:	eef1 6a66 	vneg.f32	s13, s13
 810eaa0:	eeb1 7a47 	vneg.f32	s14, s14
 810eaa4:	edc8 6a00 	vstr	s13, [r8]
 810eaa8:	ed88 7a01 	vstr	s14, [r8, #4]
 810eaac:	eef1 7a67 	vneg.f32	s15, s15
 810eab0:	e790      	b.n	810e9d4 <__kernel_rem_pio2f+0x404>
 810eab2:	bf00      	nop

0810eab4 <floorf>:
 810eab4:	ee10 3a10 	vmov	r3, s0
 810eab8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 810eabc:	3a7f      	subs	r2, #127	; 0x7f
 810eabe:	2a16      	cmp	r2, #22
 810eac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810eac4:	dc2a      	bgt.n	810eb1c <floorf+0x68>
 810eac6:	2a00      	cmp	r2, #0
 810eac8:	da11      	bge.n	810eaee <floorf+0x3a>
 810eaca:	eddf 7a18 	vldr	s15, [pc, #96]	; 810eb2c <floorf+0x78>
 810eace:	ee30 0a27 	vadd.f32	s0, s0, s15
 810ead2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810ead6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eada:	dd05      	ble.n	810eae8 <floorf+0x34>
 810eadc:	2b00      	cmp	r3, #0
 810eade:	da23      	bge.n	810eb28 <floorf+0x74>
 810eae0:	4a13      	ldr	r2, [pc, #76]	; (810eb30 <floorf+0x7c>)
 810eae2:	2900      	cmp	r1, #0
 810eae4:	bf18      	it	ne
 810eae6:	4613      	movne	r3, r2
 810eae8:	ee00 3a10 	vmov	s0, r3
 810eaec:	4770      	bx	lr
 810eaee:	4911      	ldr	r1, [pc, #68]	; (810eb34 <floorf+0x80>)
 810eaf0:	4111      	asrs	r1, r2
 810eaf2:	420b      	tst	r3, r1
 810eaf4:	d0fa      	beq.n	810eaec <floorf+0x38>
 810eaf6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 810eb2c <floorf+0x78>
 810eafa:	ee30 0a27 	vadd.f32	s0, s0, s15
 810eafe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810eb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810eb06:	ddef      	ble.n	810eae8 <floorf+0x34>
 810eb08:	2b00      	cmp	r3, #0
 810eb0a:	bfbe      	ittt	lt
 810eb0c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 810eb10:	fa40 f202 	asrlt.w	r2, r0, r2
 810eb14:	189b      	addlt	r3, r3, r2
 810eb16:	ea23 0301 	bic.w	r3, r3, r1
 810eb1a:	e7e5      	b.n	810eae8 <floorf+0x34>
 810eb1c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 810eb20:	d3e4      	bcc.n	810eaec <floorf+0x38>
 810eb22:	ee30 0a00 	vadd.f32	s0, s0, s0
 810eb26:	4770      	bx	lr
 810eb28:	2300      	movs	r3, #0
 810eb2a:	e7dd      	b.n	810eae8 <floorf+0x34>
 810eb2c:	7149f2ca 	.word	0x7149f2ca
 810eb30:	bf800000 	.word	0xbf800000
 810eb34:	007fffff 	.word	0x007fffff

0810eb38 <_init>:
 810eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eb3a:	bf00      	nop
 810eb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eb3e:	bc08      	pop	{r3}
 810eb40:	469e      	mov	lr, r3
 810eb42:	4770      	bx	lr

0810eb44 <_fini>:
 810eb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eb46:	bf00      	nop
 810eb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eb4a:	bc08      	pop	{r3}
 810eb4c:	469e      	mov	lr, r3
 810eb4e:	4770      	bx	lr
